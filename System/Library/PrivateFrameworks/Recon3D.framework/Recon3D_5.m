void sub_223352954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::promise<void> *v29;
  uint64_t v30;
  std::exception_ptr v31;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v31.__ptr_ = &a23;
    std::promise<void>::set_exception(v29, v31);
    std::exception_ptr::~exception_ptr(&a23);
    std::runtime_error::~runtime_error(&a22);
    if (*(char *)(v30 - 81) < 0)
      operator delete(*(void **)(v30 - 104));
    JUMPOUT(0x223352868);
  }
  _Unwind_Resume(exception_object);
}

void sub_223352A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 80);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_22332429C(&a27);
  sub_223167354((uint64_t)&a25);
  sub_223167354((uint64_t)&a18);
  sub_223167354((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_223352AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223352B18(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223352B8C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2F570;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223352C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223352D00(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2F5F0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223352E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223352E74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2F670;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22335308C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223353154@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2F6F0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22335336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223353434(uint64_t a1)
{
  return sub_2233535B4(a1 - 16);
}

void sub_22335343C(uint64_t a1)
{
  sub_2233535B4(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223353464(uint64_t a1)
{
  return sub_223352B8C((_QWORD *)(a1 - 16));
}

uint64_t *sub_22335346C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223352E74((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223353474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223353154((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22335347C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223353484(uint64_t a1)
{
  return sub_2233535B4(a1 - 24);
}

void sub_22335348C(uint64_t a1)
{
  sub_2233535B4(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233534B4(uint64_t a1)
{
  return sub_223352D00((_QWORD *)(a1 - 24));
}

uint64_t sub_2233534BC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2233534C4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22335352C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

__n128 sub_223353594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = **(_QWORD **)(a1 + 8);
  result = *(__n128 *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v2 + 54) = *(_QWORD *)(a2 + 30);
  *(_OWORD *)(v2 + 40) = v4;
  *(__n128 *)(v2 + 24) = result;
  return result;
}

uint64_t sub_2233535B4(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC2F0D0;
  *(_QWORD *)(a1 + 16) = &unk_24EC2F148;
  *(_QWORD *)(a1 + 24) = &unk_24EC2F188;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2233537A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2F2D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233537B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2F2D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233537E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2F320;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22335382C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2F320;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223353880(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2F320;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2233538F0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2F320;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223353940(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22335397C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2233539B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_223353CD8((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223353B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223353C60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvv"
                     "Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nConfigEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223353CCC()
{
  return &unk_24EC2F380;
}

void sub_223353CD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_223353D70()
{
  __break(1u);
}

void sub_223353E1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x223353E3CLL);
}

_QWORD *sub_223353E48(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2F3A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223353E80(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2F3A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

__n128 sub_223353EC8(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24EC2F3A0;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_223353F30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC2F3A0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v7;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_223353F78(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223353F88(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223353FB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_223353CD8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335405C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233540A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvv"
                     "Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nConfigEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223354114()
{
  return &unk_24EC2F400;
}

uint64_t sub_223354120(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223354190(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233541A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233541D8()
{
  JUMPOUT(0x227684B68);
}

_QWORD *sub_2233541E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2F470;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22335426C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2F470;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223354304(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2F470;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223354394(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2F470;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223354404(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223354484(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223354500(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223353CD8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2233547B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22335490C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvv"
                     "Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nConfigEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_"
                                "T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223354978()
{
  return &unk_24EC2F4D0;
}

_QWORD *sub_223354984(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2F4F0;
  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223354A00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2F4F0;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

char *sub_223354A8C(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  result = (char *)operator new(0x50uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24EC2F4F0;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 64);
  *((_QWORD *)result + 7) = *(_QWORD *)(a1 + 56);
  *((_QWORD *)result + 8) = v7;
  v8 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)result + 9) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t sub_223354B14(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC2F4F0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_OWORD *)(result + 24);
  v7 = *(_OWORD *)(result + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(result + 56);
  *(_OWORD *)(a2 + 40) = v7;
  *(_OWORD *)(a2 + 24) = v6;
  v8 = *(_QWORD *)(result + 72);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(result + 64);
  *(_QWORD *)(a2 + 72) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

void sub_223354B7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_223354BEC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[9];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_223354C5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[8];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223353CD8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223354D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223354E18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvv"
                     "Lb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nConfigEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223354E84()
{
  return &unk_24EC2F550;
}

_QWORD *sub_223354E90(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2F570;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223354EC8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2F570;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223354F10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2F570;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223354F60(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2F570;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223354F90(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223354FA0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223354FCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223355060(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335509C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvL"
                     "b0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ConfigEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223355108()
{
  return &unk_24EC2F5D0;
}

_QWORD *sub_223355114(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2F5F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22335514C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2F5F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223355194(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2F5F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2233551E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2F5F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223355214(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223355224(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223355250(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233552E4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223355320(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvL"
                     "b0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ConfigEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335538C()
{
  return &unk_24EC2F650;
}

_QWORD *sub_223355398(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2F670;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233553D0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2F670;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223355418(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2F670;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223355470(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2F670;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233554A8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233554B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233554E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335559C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233555E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvv"
                     "Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nConfigEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223355654()
{
  return &unk_24EC2F6D0;
}

_QWORD *sub_223355660(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2F6F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223355698(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2F6F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233556E0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2F6F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223355738(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2F6F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223355770(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223355780(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233557AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223355864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233558B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvv"
                     "Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nConfigEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335591C()
{
  return &unk_24EC2F750;
}

void sub_22335592C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223355950(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223355968(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22Surface"
                     "DetectionConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd22SurfaceDetectionConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionConfigEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2233559D8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223355A04(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223355A40@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2F7C0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223355AA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223355B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223355B4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223355BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223355BF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223355CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223355CC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223355D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223355DA0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223355E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223355E5C(uint64_t a1)
{
  sub_22335781C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223355E80(_QWORD *a1, int *a2)
{
  uint64_t *v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  char *v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _BYTE v63[31];
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (char *)operator new(0xA8uLL);
    v6 = v5;
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v5 + 56) = *((_OWORD *)a2 + 2);
    v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v5 + 72) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v5 + 88) = v8;
    *((_QWORD *)v5 + 1) = 0;
    v9 = (unint64_t *)(v5 + 8);
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_24EC2FA28;
    *((_DWORD *)v5 + 6) = *a2;
    v10 = v5 + 24;
    *((_QWORD *)v5 + 4) = *((_QWORD *)a2 + 1);
    *((_QWORD *)v5 + 13) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(v5 + 40) = v7;
    v5[112] = 0;
    v5[160] = 0;
    if (*((_BYTE *)a2 + 136))
    {
      v11 = *(_OWORD *)(a2 + 26);
      *((_OWORD *)v5 + 7) = *(_OWORD *)(a2 + 22);
      *((_OWORD *)v5 + 8) = v11;
      *((_OWORD *)v5 + 9) = *(_OWORD *)(a2 + 30);
      v5[160] = 1;
    }
    v61 = (std::__shared_weak_count *)v5;
    v12 = (unint64_t *)(v5 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(v9);
    while (__stxr(v18 + 1, v9));
    *v17 = v10;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_36:
        v39 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v64 = v43;
            *((_QWORD *)&v64 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x30uLL);
        *(_QWORD *)v48 = &off_24EC2FA78;
        *(_OWORD *)(v48 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v48 + 3) = v10;
        *((_QWORD *)v48 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v48;
        sub_2245022E4(*v39, (uint64_t)v67);
        v49 = v68;
        if (v68 == v67)
        {
          v50 = 4;
          v49 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_50;
          v50 = 5;
        }
        (*(void (**)(_QWORD *))(*v49 + 8 * v50))(v49);
LABEL_50:
        if (v61)
        {
          v51 = (unint64_t *)&v61->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_36;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x227684CE8](v28, 0x20C4093837F09);
    goto LABEL_36;
  }
  v29 = (uint64_t **)a1[9];
  v30 = (std::__shared_weak_count *)a1[5];
  if (!v30)
  {
    v33 = 0;
    v32 = 0;
    goto LABEL_56;
  }
  v31 = std::__shared_weak_count::lock(v30);
  v32 = v31;
  if (!v31)
  {
    v33 = 0;
    v38 = *((unsigned __int8 *)a2 + 136);
    if (*((_BYTE *)a2 + 136))
      goto LABEL_57;
    goto LABEL_59;
  }
  v33 = a1[4];
  v34 = (unint64_t *)&v31->__shared_weak_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v36 = (unint64_t *)&v31->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_56:
    v38 = *((unsigned __int8 *)a2 + 136);
    if (*((_BYTE *)a2 + 136))
      goto LABEL_57;
LABEL_59:
    v53 = 0;
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v32);
  v38 = *((unsigned __int8 *)a2 + 136);
  if (!*((_BYTE *)a2 + 136))
    goto LABEL_59;
LABEL_57:
  v53 = *((_BYTE *)a2 + 88);
  *(_OWORD *)v63 = *(_OWORD *)((char *)a2 + 89);
  *(_OWORD *)&v63[15] = *(_OWORD *)(a2 + 26);
  v62 = *(_OWORD *)(a2 + 30);
LABEL_60:
  v54 = *a2;
  v55 = *((_QWORD *)a2 + 1);
  v56 = (char *)operator new(0xA8uLL);
  v57 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v56 + 56) = *((_OWORD *)a2 + 2);
  v58 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v56 + 72) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v56 + 88) = v58;
  *(_QWORD *)v56 = &off_24EC2FAF8;
  *((_QWORD *)v56 + 1) = v33;
  *((_QWORD *)v56 + 2) = v32;
  *((_DWORD *)v56 + 6) = v54;
  *((_QWORD *)v56 + 4) = v55;
  *((_QWORD *)v56 + 13) = *((_QWORD *)a2 + 10);
  *(_OWORD *)(v56 + 40) = v57;
  v56[112] = 0;
  v56[160] = 0;
  if (v38)
  {
    v56[112] = v53;
    *(_OWORD *)(v56 + 113) = *(_OWORD *)v63;
    *((_OWORD *)v56 + 8) = *(_OWORD *)&v63[15];
    *((_OWORD *)v56 + 9) = v62;
    v56[160] = 1;
  }
  v66 = (__int128 *)v56;
  sub_2245022E4(*v29, (uint64_t)&v64);
  v59 = v66;
  if (v66 == &v64)
  {
    v60 = 4;
    v59 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
}

void sub_223356380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;

  if (a20 == v25)
  {
    (*(void (**)(void))(a17 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a20)
  {
    (*(void (**)(void))(*(_QWORD *)a20 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223356474(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223356484(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223356490(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2233564A0(_QWORD *a1, int *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  unint64_t *v13;
  char *v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 *v72;
  std::string *v73;
  std::runtime_error *exception;
  std::runtime_error *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::runtime_error v88;
  char *v89;
  std::__shared_weak_count *v90;
  __int128 v91;
  _QWORD *v92;
  __int128 *v93;
  _QWORD v94[3];
  std::string v95;
  std::string *v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v91 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v91 + 1) = 45;
    v71 = (_QWORD *)a1[6];
    v70 = a1 + 6;
    v69 = v71;
    v72 = (__int128 *)*((unsigned __int8 *)v70 + 23);
    if ((char)v72 < 0)
      v72 = (__int128 *)v70[1];
    else
      v69 = v70;
    v92 = v69;
    v93 = v72;
    sub_2231A9820((uint64_t)&v91, (uint64_t)v94, 0, 0, &v95);
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v95;
    else
      v73 = (std::string *)v95.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v88, (const char *)v73);
    v88.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v75 = std::runtime_error::runtime_error(exception, &v88);
    v75->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v75, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v87 = v6;
    v85 = &v6[1].__vftable;
    v86 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (char *)operator new(0xA8uLL);
    v10 = v9;
    v11 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v9 + 56) = *((_OWORD *)a2 + 2);
    v12 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v9 + 72) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v9 + 88) = v12;
    *((_QWORD *)v9 + 1) = 0;
    v13 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_24EC2FA28;
    *((_DWORD *)v9 + 6) = *a2;
    v14 = v9 + 24;
    *((_QWORD *)v9 + 4) = *((_QWORD *)a2 + 1);
    *((_QWORD *)v9 + 13) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(v9 + 40) = v11;
    v9[112] = 0;
    v9[160] = 0;
    if (*((_BYTE *)a2 + 136))
    {
      v15 = *(_OWORD *)(a2 + 26);
      *((_OWORD *)v9 + 7) = *(_OWORD *)(a2 + 22);
      *((_OWORD *)v9 + 8) = v15;
      *((_OWORD *)v9 + 9) = *(_OWORD *)(a2 + 30);
      v9[160] = 1;
    }
    v89 = v9 + 24;
    v90 = (std::__shared_weak_count *)v9;
    v16 = (unint64_t *)(v9 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v91 = v19;
    *((_QWORD *)&v91 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_22324A974();
    v20 = v18[4];
    v21 = *v18;
    v22 = (_QWORD *)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v13);
    while (__stxr(v23 + 1, v13));
    *v22 = v14;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v91;
      if (!(_QWORD)v91)
      {
LABEL_39:
        v43 = (uint64_t **)a1[9];
        v91 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(p_shared_weak_owners);
            while (__stxr(v49 + 1, p_shared_weak_owners));
            *(_QWORD *)&v91 = v47;
            *((_QWORD *)&v91 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v91 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24EC2FB78;
        *(_OWORD *)(v52 + 8) = v91;
        v91 = 0uLL;
        *((_QWORD *)v52 + 3) = v14;
        *((_QWORD *)v52 + 4) = v10;
        v92 = 0;
        v93 = 0;
        *((_QWORD *)v52 + 5) = v85;
        *((_QWORD *)v52 + 6) = v86;
        v94[0] = 0;
        v94[1] = 0;
        v96 = (std::string *)v52;
        sub_2245022E4(*v43, (uint64_t)&v95);
        v53 = v96;
        if (v96 == &v95)
        {
          v54 = 4;
          v53 = &v95;
        }
        else
        {
          if (!v96)
            goto LABEL_53;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_53:
        if (v90)
        {
          v55 = &v90->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        if (v87)
        {
          v57 = (unint64_t *)&v87->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v91;
      if (!(_QWORD)v91)
        goto LABEL_39;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x227684CE8](v33, 0x20C4093837F09);
    goto LABEL_39;
  }
  v34 = (uint64_t **)a1[9];
  v76 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v76 = v38;
      *((_QWORD *)&v76 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v76 = 0uLL;
    }
  }
  v59 = *a2;
  v60 = *((_QWORD *)a2 + 1);
  v79 = *((_OWORD *)a2 + 3);
  v80 = *((_OWORD *)a2 + 4);
  v81 = *((_QWORD *)a2 + 10);
  v77 = *((_OWORD *)a2 + 1);
  v78 = *((_OWORD *)a2 + 2);
  LOBYTE(v82) = 0;
  v61 = *((unsigned __int8 *)a2 + 136);
  if (*((_BYTE *)a2 + 136))
  {
    v82 = *(_OWORD *)(a2 + 22);
    v83 = *(_OWORD *)(a2 + 26);
    v84 = *(_OWORD *)(a2 + 30);
  }
  v62 = operator new(0x20uLL);
  v62[1] = 0;
  v62[2] = 0;
  *v62 = &unk_24EC2F420;
  v62[3] = *a3;
  *a3 = 0;
  v93 = 0;
  v63 = (char *)operator new(0xB8uLL);
  *(_OWORD *)(v63 + 8) = v76;
  *(_OWORD *)(v63 + 56) = v78;
  *(_OWORD *)(v63 + 72) = v79;
  *(_OWORD *)(v63 + 88) = v80;
  *(_QWORD *)v63 = &off_24EC2FBF8;
  *((_DWORD *)v63 + 6) = v59;
  *((_QWORD *)v63 + 4) = v60;
  *((_QWORD *)v63 + 13) = v81;
  *(_OWORD *)(v63 + 40) = v77;
  v63[112] = 0;
  v63[160] = 0;
  if (v61)
  {
    *((_OWORD *)v63 + 7) = v82;
    *((_OWORD *)v63 + 8) = v83;
    *((_OWORD *)v63 + 9) = v84;
    v63[160] = 1;
  }
  *((_QWORD *)v63 + 21) = v62 + 3;
  *((_QWORD *)v63 + 22) = v62;
  v93 = (__int128 *)v63;
  sub_2245022E4(*v34, (uint64_t)&v91);
  v67 = v93;
  if (v93 == &v91)
  {
    v68 = 4;
    v67 = &v91;
  }
  else
  {
    if (!v93)
      return;
    v68 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v67 + 8 * v68))(v67, v64, v65, v66);
}

void sub_223356BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::runtime_error a36)
{
  std::promise<void> *v36;
  uint64_t v37;
  std::exception_ptr v38;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v38.__ptr_ = (void *)(v37 - 216);
    std::promise<void>::set_exception(v36, v38);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v37 - 216));
    std::runtime_error::~runtime_error(&a36);
    if (*(char *)(v37 - 113) < 0)
      operator delete(*(void **)(v37 - 136));
    JUMPOUT(0x223356ADCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_223356CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;

  v37 = *(_QWORD **)(v35 - 112);
  if (v37 == v34)
  {
    v38 = 4;
    v37 = (_QWORD *)(v35 - 136);
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_6:
  sub_22332429C((_QWORD *)(v35 - 192));
  sub_223167354(v35 - 208);
  sub_223167354((uint64_t)&a32);
  sub_223167354((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_223356D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  sub_223167354((uint64_t)&a32);
  sub_223167354((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_223356D90(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223356E04(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2FC78;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223356F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223356F78(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2FCF8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223357088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2233570EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2FD78;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223357304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2233573CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2FDF8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2233575E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233576AC(uint64_t a1)
{
  return sub_22335781C(a1 - 16);
}

void sub_2233576B4(uint64_t a1)
{
  sub_22335781C(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233576DC(uint64_t a1)
{
  return sub_223356E04((_QWORD *)(a1 - 16));
}

uint64_t *sub_2233576E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2233570EC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2233576EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2233573CC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2233576F4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2233576FC(uint64_t a1)
{
  return sub_22335781C(a1 - 24);
}

void sub_223357704(uint64_t a1)
{
  sub_22335781C(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335772C(uint64_t a1)
{
  return sub_223356F78((_QWORD *)(a1 - 24));
}

uint64_t sub_223357734(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22335773C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2233577A4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

double sub_22335780C(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_223335E1C((_QWORD *)*(_QWORD *)(a1 + 8), *(_DWORD *)a2, (char *)(a2 + 8)).n128_u64[0];
  return result;
}

uint64_t sub_22335781C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC2F838;
  *(_QWORD *)(a1 + 16) = &unk_24EC2F8B0;
  *(_QWORD *)(a1 + 24) = &unk_24EC2F8F0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_223357A08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2FA28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223357A18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2FA28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223357A50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2FA78;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223357A94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2FA78;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223357AE8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2FA78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223357B58(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2FA78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223357BA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223357BE4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223357C1C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_223357F40((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223357DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223357EC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6C"
                     "ameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIden"
                                "tityENS7_6CameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223357F34()
{
  return &unk_24EC2FAD8;
}

void sub_223357F40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_223357FD8()
{
  __break(1u);
}

void sub_223358084(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2233580A4);
}

_QWORD *sub_2233580B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2FAF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233580E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2FAF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

__n128 sub_223358130(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __n128 result;
  __int128 v9;

  v2 = (char *)operator new(0xA8uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24EC2FAF8;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a1 + 24);
  v2[112] = 0;
  *((_DWORD *)v2 + 6) = v7;
  *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  v2[160] = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    v9 = *(_OWORD *)(a1 + 128);
    *((_OWORD *)v2 + 7) = *(_OWORD *)(a1 + 112);
    *((_OWORD *)v2 + 8) = v9;
    result = *(__n128 *)(a1 + 144);
    *((__n128 *)v2 + 9) = result;
    v2[160] = 1;
  }
  return result;
}

__n128 sub_2233581E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC2FAF8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  result = *(__n128 *)(a1 + 56);
  v7 = *(_OWORD *)(a1 + 72);
  v8 = *(_OWORD *)(a1 + 88);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_OWORD *)(a1 + 40);
  *(_BYTE *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 104) = v9;
  *(_OWORD *)(a2 + 88) = v8;
  *(_OWORD *)(a2 + 72) = v7;
  *(__n128 *)(a2 + 56) = result;
  *(_BYTE *)(a2 + 160) = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    v11 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a2 + 128) = v11;
    result = *(__n128 *)(a1 + 144);
    *(__n128 *)(a2 + 144) = result;
    *(_BYTE *)(a2 + 160) = 1;
  }
  return result;
}

void sub_223358278(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223358288(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233582B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_223357F40((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335835C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233583A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6C"
                     "ameraEEEvvvLb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIden"
                                "tityENS7_6CameraEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223358414()
{
  return &unk_24EC2FB58;
}

uint64_t sub_223358420(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *sub_223358490(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2FB78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223358518(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2FB78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2233585B0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2FB78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223358640(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2FB78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2233586B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223358730(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2233587AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223357F40(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223358A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223358BB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6C"
                     "ameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIden"
                                "tityENS7_6CameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseI"
                                "vEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223358C24()
{
  return &unk_24EC2FBD8;
}

_QWORD *sub_223358C30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2FBF8;
  v2 = (std::__shared_weak_count *)a1[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223358CAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2FBF8;
  v2 = (std::__shared_weak_count *)a1[22];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

char *sub_223358D38(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = (char *)operator new(0xB8uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24EC2FBF8;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_DWORD *)(a1 + 24);
  result[112] = 0;
  *((_DWORD *)result + 6) = v7;
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(result + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(result + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)result + 13) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a1 + 40);
  result[160] = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    v8 = *(_OWORD *)(a1 + 128);
    *((_OWORD *)result + 7) = *(_OWORD *)(a1 + 112);
    *((_OWORD *)result + 8) = v8;
    *((_OWORD *)result + 9) = *(_OWORD *)(a1 + 144);
    result[160] = 1;
  }
  v9 = *(_QWORD *)(a1 + 176);
  *((_QWORD *)result + 21) = *(_QWORD *)(a1 + 168);
  *((_QWORD *)result + 22) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

uint64_t sub_223358E0C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC2FBF8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  v6 = *(_OWORD *)(result + 56);
  v7 = *(_OWORD *)(result + 72);
  v8 = *(_OWORD *)(result + 88);
  v9 = *(_QWORD *)(result + 104);
  v10 = *(_OWORD *)(result + 40);
  *(_BYTE *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 104) = v9;
  *(_OWORD *)(a2 + 88) = v8;
  *(_OWORD *)(a2 + 72) = v7;
  *(_OWORD *)(a2 + 56) = v6;
  *(_BYTE *)(a2 + 160) = 0;
  if (*(_BYTE *)(result + 160))
  {
    v11 = *(_OWORD *)(result + 128);
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(result + 112);
    *(_OWORD *)(a2 + 128) = v11;
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(result + 144);
    *(_BYTE *)(a2 + 160) = 1;
  }
  v12 = *(_QWORD *)(result + 176);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(result + 168);
  *(_QWORD *)(a2 + 176) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

void sub_223358EC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 176);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_223358F30(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[22];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_223358FA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[21];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223357F40((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2233590B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335915C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6C"
                     "ameraEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIden"
                                "tityENS7_6CameraEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233591C8()
{
  return &unk_24EC2FC58;
}

_QWORD *sub_2233591D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2FC78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22335920C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2FC78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223359254(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2FC78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2233592A4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2FC78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2233592D4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233592E4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223359310(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233593A4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233593E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6Ca"
                     "meraEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdent"
                                "ityENS7_6CameraEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335944C()
{
  return &unk_24EC2FCD8;
}

_QWORD *sub_223359458(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2FCF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223359490(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2FCF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233594D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2FCF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223359528(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2FCF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223359558(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223359568(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223359594(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223359628(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223359664(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6Ca"
                     "meraEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdent"
                                "ityENS7_6CameraEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233596D0()
{
  return &unk_24EC2FD58;
}

_QWORD *sub_2233596DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2FD78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223359714(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2FD78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335975C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2FD78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233597B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2FD78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233597EC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233597FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223359828(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233598E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335992C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6C"
                     "ameraEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIden"
                                "tityENS7_6CameraEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223359998()
{
  return &unk_24EC2FDD8;
}

_QWORD *sub_2233599A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2FDF8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233599DC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2FDF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223359A24(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2FDF8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223359A7C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2FDF8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223359AB4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223359AC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223359AF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223359BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223359BF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6C"
                     "ameraEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIden"
                                "tityENS7_6CameraEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__14pairINS_9applecv3d6sensor14CameraIdentityENS7_6CameraEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223359C60()
{
  return &unk_24EC2FE58;
}

void sub_223359C70(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223359C94(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223359CAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_4pairINS1_9applecv3d6sensor14Camera"
                     "IdentityENS8_6CameraEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_4pairINS1_9applecv3d6sen"
                                "sor14CameraIdentityENS8_6CameraEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_4pairINS1_9applecv3d6sensor14CameraIdentityENS8_6CameraEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_4pairINS1_9applecv3d6sensor14CameraIdentityENS8_6CameraEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223359D1C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223359D48(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223359D84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2FEC8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223359DEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223359E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223359E90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223359F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223359F34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223359FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22335A00C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22335A0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22335A0E4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22335A188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22335A1A0(uint64_t a1)
{
  sub_22335C068(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22335A1C4(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  std::mutex **v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t **v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *p_shared_weak_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t **v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  uint64_t v98;
  __int128 *v99;
  _BYTE v100[24];
  _BYTE *v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (char *)operator new(0x170uLL);
    v5 = v4;
    *((_QWORD *)v4 + 1) = 0;
    v6 = (unint64_t *)(v4 + 8);
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = *a2;
    v7 = v4 + 24;
    *(_QWORD *)v4 = &off_24EC30130;
    v9 = a2[2];
    v8 = a2[3];
    *((_QWORD *)v4 + 4) = &off_24EC715B8;
    *((_QWORD *)v4 + 5) = v9;
    *((_QWORD *)v4 + 6) = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v13 = a2[5];
    v12 = a2[6];
    *((_QWORD *)v4 + 7) = &off_24EC715B8;
    *((_QWORD *)v4 + 8) = v13;
    *((_QWORD *)v4 + 9) = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v17 = a2[8];
    v16 = a2[9];
    *((_QWORD *)v4 + 10) = &off_24EC715B8;
    *((_QWORD *)v4 + 11) = v17;
    *((_QWORD *)v4 + 12) = v16;
    if (v16)
    {
      v18 = (unint64_t *)(v16 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = a2[10];
    v4[184] = 0;
    *((_QWORD *)v4 + 13) = v20;
    *((_OWORD *)v4 + 8) = *(_OWORD *)(a2 + 13);
    *((_OWORD *)v4 + 9) = *(_OWORD *)(a2 + 15);
    *((_OWORD *)v4 + 10) = *(_OWORD *)(a2 + 17);
    *((_QWORD *)v4 + 22) = a2[19];
    *((_OWORD *)v4 + 7) = *(_OWORD *)(a2 + 11);
    v4[232] = 0;
    if (*((_BYTE *)a2 + 208))
    {
      v21 = *((_OWORD *)a2 + 11);
      *(_OWORD *)(v4 + 184) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(v4 + 200) = v21;
      *(_OWORD *)(v4 + 216) = *((_OWORD *)a2 + 12);
      v4[232] = 1;
    }
    v22 = *(_OWORD *)(a2 + 29);
    *((_OWORD *)v4 + 15) = *(_OWORD *)(a2 + 27);
    *((_OWORD *)v4 + 16) = v22;
    v23 = *(_OWORD *)(a2 + 37);
    v24 = *(_OWORD *)(a2 + 39);
    v25 = *(_OWORD *)(a2 + 33);
    *((_OWORD *)v4 + 19) = *(_OWORD *)(a2 + 35);
    *((_OWORD *)v4 + 20) = v23;
    v26 = *(_OWORD *)(a2 + 41);
    *((_OWORD *)v4 + 21) = v24;
    *((_OWORD *)v4 + 22) = v26;
    *((_OWORD *)v4 + 17) = *(_OWORD *)(a2 + 31);
    *((_OWORD *)v4 + 18) = v25;
    v27 = (unint64_t *)(v4 + 16);
    v96 = (std::__shared_weak_count *)v4;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v29 = (uint64_t *)a1[18];
    v30 = (_QWORD *)operator new();
    *v30 = v29 + 7;
    std::mutex::lock((std::mutex *)(v29 + 7));
    *(_QWORD *)&v97 = v30;
    *((_QWORD *)&v97 + 1) = v29;
    if (!*((_BYTE *)v29 + 48))
      sub_22324A974();
    v31 = v29[4];
    v32 = *v29;
    v33 = (_QWORD *)(*v29 + 16 * v31);
    do
      v34 = __ldxr(v6);
    while (__stxr(v34 + 1, v6));
    *v33 = v7;
    v35 = v32 + 16 * v31;
    v36 = *(std::__shared_weak_count **)(v35 + 8);
    *(_QWORD *)(v35 + 8) = v5;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = (v29[1] - *v29) >> 4;
    v40 = v29[5];
    v41 = v29[4] + 1;
    if (v41 >= v39)
      v42 = (v29[1] - *v29) >> 4;
    else
      v42 = 0;
    v29[4] = v41 - v42;
    if (v40 == v39)
    {
      v43 = v29[3] + 1;
      if (v43 < v39)
        v39 = 0;
      v29[3] = v43 - v39;
      v44 = (std::mutex **)v97;
      if (!(_QWORD)v97)
      {
LABEL_44:
        v53 = (uint64_t **)a1[9];
        v97 = 0uLL;
        v54 = (std::__shared_weak_count *)a1[5];
        if (v54)
        {
          v55 = std::__shared_weak_count::lock(v54);
          if (v55)
          {
            v56 = v55;
            v57 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v55->__shared_weak_owners_;
            do
              v59 = __ldxr(p_shared_weak_owners);
            while (__stxr(v59 + 1, p_shared_weak_owners));
            *(_QWORD *)&v97 = v57;
            *((_QWORD *)&v97 + 1) = v55;
            v60 = (unint64_t *)&v55->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          else
          {
            v97 = 0uLL;
          }
        }
        v62 = (char *)operator new(0x30uLL);
        *(_QWORD *)v62 = &off_24EC30180;
        *(_OWORD *)(v62 + 8) = v97;
        v97 = 0uLL;
        *((_QWORD *)v62 + 3) = v7;
        *((_QWORD *)v62 + 4) = v5;
        v98 = 0;
        v99 = 0;
        v101 = v62;
        sub_2245022E4(*v53, (uint64_t)v100);
        v63 = v101;
        if (v101 == v100)
        {
          v64 = 4;
          v63 = v100;
        }
        else
        {
          if (!v101)
            goto LABEL_58;
          v64 = 5;
        }
        (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_58:
        if (v96)
        {
          v65 = (unint64_t *)&v96->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        return;
      }
    }
    else
    {
      v29[5] = v40 + 1;
      v44 = (std::mutex **)v97;
      if (!(_QWORD)v97)
        goto LABEL_44;
    }
    std::mutex::unlock(*v44);
    MEMORY[0x227684CE8](v44, 0x20C4093837F09);
    goto LABEL_44;
  }
  v91 = (uint64_t **)a1[9];
  v92 = 0uLL;
  v45 = (std::__shared_weak_count *)a1[5];
  if (v45)
  {
    v46 = std::__shared_weak_count::lock(v45);
    if (v46)
    {
      v47 = v46;
      v48 = a1[4];
      v49 = (unint64_t *)&v46->__shared_weak_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      *(_QWORD *)&v92 = v48;
      *((_QWORD *)&v92 + 1) = v46;
      v51 = (unint64_t *)&v46->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    else
    {
      v92 = 0uLL;
    }
  }
  v90 = *a2;
  v67 = a2[3];
  v89 = a2[2];
  if (v67)
  {
    v68 = (unint64_t *)(v67 + 8);
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
  }
  v70 = a2[6];
  v88 = a2[5];
  if (v70)
  {
    v71 = (unint64_t *)(v70 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = a2[8];
  v74 = a2[9];
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = a2[10];
  LOBYTE(v93) = 0;
  v78 = *((unsigned __int8 *)a2 + 208);
  if (*((_BYTE *)a2 + 208))
  {
    v93 = *((_OWORD *)a2 + 10);
    v94 = *((_OWORD *)a2 + 11);
    v95 = *((_OWORD *)a2 + 12);
  }
  v99 = 0;
  v79 = (char *)operator new(0x170uLL);
  *(_OWORD *)(v79 + 8) = v92;
  v79[184] = 0;
  v80 = *(_OWORD *)(a2 + 11);
  *((_OWORD *)v79 + 8) = *(_OWORD *)(a2 + 13);
  v81 = *(_OWORD *)(a2 + 17);
  *((_OWORD *)v79 + 9) = *(_OWORD *)(a2 + 15);
  *((_OWORD *)v79 + 10) = v81;
  *(_QWORD *)v79 = &off_24EC30200;
  *((_QWORD *)v79 + 3) = v90;
  *((_QWORD *)v79 + 4) = &off_24EC715B8;
  *((_QWORD *)v79 + 5) = v89;
  *((_QWORD *)v79 + 6) = v67;
  *((_QWORD *)v79 + 7) = &off_24EC715B8;
  *((_QWORD *)v79 + 8) = v88;
  *((_QWORD *)v79 + 9) = v70;
  *((_QWORD *)v79 + 10) = &off_24EC715B8;
  *((_QWORD *)v79 + 11) = v73;
  *((_QWORD *)v79 + 12) = v74;
  *((_QWORD *)v79 + 13) = v77;
  *((_QWORD *)v79 + 22) = a2[19];
  *((_OWORD *)v79 + 7) = v80;
  v79[232] = 0;
  if (v78)
  {
    *(_OWORD *)(v79 + 184) = v93;
    *(_OWORD *)(v79 + 200) = v94;
    *(_OWORD *)(v79 + 216) = v95;
    v79[232] = 1;
  }
  v82 = *(_OWORD *)(a2 + 37);
  *((_OWORD *)v79 + 19) = *(_OWORD *)(a2 + 35);
  *((_OWORD *)v79 + 20) = v82;
  v83 = *(_OWORD *)(a2 + 41);
  *((_OWORD *)v79 + 21) = *(_OWORD *)(a2 + 39);
  *((_OWORD *)v79 + 22) = v83;
  v84 = *(_OWORD *)(a2 + 29);
  *((_OWORD *)v79 + 15) = *(_OWORD *)(a2 + 27);
  *((_OWORD *)v79 + 16) = v84;
  v85 = *(_OWORD *)(a2 + 33);
  *((_OWORD *)v79 + 17) = *(_OWORD *)(a2 + 31);
  *((_OWORD *)v79 + 18) = v85;
  v99 = (__int128 *)v79;
  sub_2245022E4(*v91, (uint64_t)&v97);
  v86 = v99;
  if (v99 == &v97)
  {
    v87 = 4;
    v86 = &v97;
  }
  else
  {
    if (!v99)
      return;
    v87 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v86 + 8 * v87))();
}

void sub_22335A8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a5);
  v8 = *(_QWORD **)(v6 - 152);
  if (v8 == v5)
  {
    v9 = 4;
    v8 = (_QWORD *)(v6 - 176);
  }
  else
  {
    if (!v8)
    {
      sub_22335C254((uint64_t *)va);
      _Unwind_Resume(a1);
    }
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
  sub_22335C254((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22335A90C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 112);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 136);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_223322894(v2 - 176);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_22335A95C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_223322848((std::mutex ***)(v2 - 176));
  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_22335A980(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v2;
  MEMORY[0x227684CE8](v4, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v3 - 192);
  _Unwind_Resume(a1);
}

void sub_22335A9B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_22335A9D8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22335A9E8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22335A9F4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22335AA04(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  std::mutex **v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t **v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *p_shared_weak_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  std::string *v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  _QWORD *v85;
  char *v86;
  __int128 *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  __int128 *v92;
  std::string *v93;
  std::runtime_error *exception;
  std::runtime_error *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  std::__shared_weak_count *v101[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _QWORD *v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count *v120;
  std::runtime_error v121;
  char *v122;
  std::__shared_weak_count *v123;
  __int128 v124;
  _QWORD *v125;
  __int128 *v126;
  _QWORD v127[3];
  std::string v128;
  std::string *v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v124 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v124 + 1) = 45;
    v91 = (_QWORD *)a1[6];
    v90 = a1 + 6;
    v89 = v91;
    v92 = (__int128 *)*((unsigned __int8 *)v90 + 23);
    if ((char)v92 < 0)
      v92 = (__int128 *)v90[1];
    else
      v89 = v90;
    v125 = v89;
    v126 = v92;
    sub_2231A9820((uint64_t)&v124, (uint64_t)v127, 0, 0, &v128);
    if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = &v128;
    else
      v93 = (std::string *)v128.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v121, (const char *)v93);
    v121.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v95 = std::runtime_error::runtime_error(exception, &v121);
    v95->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v95, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v120 = v6;
    v118 = &v6[1].__vftable;
    v119 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (char *)operator new(0x170uLL);
    v10 = v9;
    *((_QWORD *)v9 + 1) = 0;
    v11 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = *a2;
    v12 = v9 + 24;
    *(_QWORD *)v9 = &off_24EC30130;
    v14 = a2[2];
    v13 = a2[3];
    *((_QWORD *)v9 + 4) = &off_24EC715B8;
    *((_QWORD *)v9 + 5) = v14;
    *((_QWORD *)v9 + 6) = v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v18 = a2[5];
    v17 = a2[6];
    *((_QWORD *)v9 + 7) = &off_24EC715B8;
    *((_QWORD *)v9 + 8) = v18;
    *((_QWORD *)v9 + 9) = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v22 = a2[8];
    v21 = a2[9];
    *((_QWORD *)v9 + 10) = &off_24EC715B8;
    *((_QWORD *)v9 + 11) = v22;
    *((_QWORD *)v9 + 12) = v21;
    if (v21)
    {
      v23 = (unint64_t *)(v21 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = a2[10];
    v9[184] = 0;
    *((_QWORD *)v9 + 13) = v25;
    *((_OWORD *)v9 + 8) = *(_OWORD *)(a2 + 13);
    *((_OWORD *)v9 + 9) = *(_OWORD *)(a2 + 15);
    *((_OWORD *)v9 + 10) = *(_OWORD *)(a2 + 17);
    *((_QWORD *)v9 + 22) = a2[19];
    *((_OWORD *)v9 + 7) = *(_OWORD *)(a2 + 11);
    v9[232] = 0;
    if (*((_BYTE *)a2 + 208))
    {
      v26 = *((_OWORD *)a2 + 11);
      *(_OWORD *)(v9 + 184) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(v9 + 200) = v26;
      *(_OWORD *)(v9 + 216) = *((_OWORD *)a2 + 12);
      v9[232] = 1;
    }
    v27 = *(_OWORD *)(a2 + 29);
    *((_OWORD *)v9 + 15) = *(_OWORD *)(a2 + 27);
    *((_OWORD *)v9 + 16) = v27;
    v28 = *(_OWORD *)(a2 + 37);
    v29 = *(_OWORD *)(a2 + 39);
    v30 = *(_OWORD *)(a2 + 33);
    *((_OWORD *)v9 + 19) = *(_OWORD *)(a2 + 35);
    *((_OWORD *)v9 + 20) = v28;
    v31 = *(_OWORD *)(a2 + 41);
    *((_OWORD *)v9 + 21) = v29;
    *((_OWORD *)v9 + 22) = v31;
    *((_OWORD *)v9 + 17) = *(_OWORD *)(a2 + 31);
    *((_OWORD *)v9 + 18) = v30;
    v32 = (unint64_t *)(v9 + 16);
    v122 = v9 + 24;
    v123 = (std::__shared_weak_count *)v9;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v34 = (uint64_t *)a1[18];
    v35 = (_QWORD *)operator new();
    *v35 = v34 + 7;
    std::mutex::lock((std::mutex *)(v34 + 7));
    *(_QWORD *)&v124 = v35;
    *((_QWORD *)&v124 + 1) = v34;
    if (!*((_BYTE *)v34 + 48))
      sub_22324A974();
    v36 = v34[4];
    v37 = *v34;
    v38 = (_QWORD *)(*v34 + 16 * v36);
    do
      v39 = __ldxr(v11);
    while (__stxr(v39 + 1, v11));
    *v38 = v12;
    v40 = v37 + 16 * v36;
    v41 = *(std::__shared_weak_count **)(v40 + 8);
    *(_QWORD *)(v40 + 8) = v10;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (v34[1] - *v34) >> 4;
    v45 = v34[5];
    v46 = v34[4] + 1;
    if (v46 >= v44)
      v47 = (v34[1] - *v34) >> 4;
    else
      v47 = 0;
    v34[4] = v46 - v47;
    if (v45 == v44)
    {
      v48 = v34[3] + 1;
      if (v48 < v44)
        v44 = 0;
      v34[3] = v48 - v44;
      v49 = (std::mutex **)v124;
      if (!(_QWORD)v124)
      {
LABEL_48:
        v58 = (uint64_t **)a1[9];
        v124 = 0uLL;
        v59 = (std::__shared_weak_count *)a1[5];
        if (v59)
        {
          v60 = std::__shared_weak_count::lock(v59);
          if (v60)
          {
            v61 = v60;
            v62 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v60->__shared_weak_owners_;
            do
              v64 = __ldxr(p_shared_weak_owners);
            while (__stxr(v64 + 1, p_shared_weak_owners));
            *(_QWORD *)&v124 = v62;
            *((_QWORD *)&v124 + 1) = v60;
            v65 = (unint64_t *)&v60->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          else
          {
            v124 = 0uLL;
          }
        }
        v67 = (char *)operator new(0x38uLL);
        *(_QWORD *)v67 = &off_24EC30280;
        *(_OWORD *)(v67 + 8) = v124;
        v124 = 0uLL;
        *((_QWORD *)v67 + 3) = v12;
        *((_QWORD *)v67 + 4) = v10;
        v125 = 0;
        v126 = 0;
        *((_QWORD *)v67 + 5) = v118;
        *((_QWORD *)v67 + 6) = v119;
        v127[0] = 0;
        v127[1] = 0;
        v129 = (std::string *)v67;
        sub_2245022E4(*v58, (uint64_t)&v128);
        v68 = v129;
        if (v129 == &v128)
        {
          v69 = 4;
          v68 = &v128;
        }
        else
        {
          if (!v129)
            goto LABEL_62;
          v69 = 5;
        }
        (*(void (**)(void))(v68->__r_.__value_.__r.__words[0] + 8 * v69))();
LABEL_62:
        if (v123)
        {
          v70 = &v123->__shared_owners_;
          do
            v71 = __ldaxr((unint64_t *)v70);
          while (__stlxr(v71 - 1, (unint64_t *)v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
            std::__shared_weak_count::__release_weak(v123);
          }
        }
        if (v120)
        {
          v72 = (unint64_t *)&v120->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
          }
        }
        return;
      }
    }
    else
    {
      v34[5] = v45 + 1;
      v49 = (std::mutex **)v124;
      if (!(_QWORD)v124)
        goto LABEL_48;
    }
    std::mutex::unlock(*v49);
    MEMORY[0x227684CE8](v49, 0x20C4093837F09);
    goto LABEL_48;
  }
  v100 = (uint64_t **)a1[9];
  *(_OWORD *)v101 = 0uLL;
  v50 = (std::__shared_weak_count *)a1[5];
  if (v50)
  {
    v51 = std::__shared_weak_count::lock(v50);
    if (v51)
    {
      v52 = v51;
      v53 = (std::__shared_weak_count *)a1[4];
      v54 = (unint64_t *)&v51->__shared_weak_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      v101[0] = v53;
      v101[1] = v51;
      v56 = (unint64_t *)&v51->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      *(_OWORD *)v101 = 0uLL;
    }
  }
  v99 = *a2;
  v74 = a2[3];
  v98 = a2[2];
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = a2[6];
  v97 = a2[5];
  if (v77)
  {
    v78 = (unint64_t *)(v77 + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v80 = a2[9];
  v96 = a2[8];
  if (v80)
  {
    v81 = (unint64_t *)(v80 + 8);
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v83 = a2[10];
  v103 = *(_OWORD *)(a2 + 13);
  v104 = *(_OWORD *)(a2 + 15);
  v105 = *(_OWORD *)(a2 + 17);
  v106 = a2[19];
  v102 = *(_OWORD *)(a2 + 11);
  LOBYTE(v107) = 0;
  v84 = *((unsigned __int8 *)a2 + 208);
  if (*((_BYTE *)a2 + 208))
  {
    v107 = *((_OWORD *)a2 + 10);
    v108 = *((_OWORD *)a2 + 11);
    v109 = *((_OWORD *)a2 + 12);
  }
  v112 = *(_OWORD *)(a2 + 31);
  v115 = *(_OWORD *)(a2 + 37);
  v116 = *(_OWORD *)(a2 + 39);
  v117 = *(_OWORD *)(a2 + 41);
  v113 = *(_OWORD *)(a2 + 33);
  v114 = *(_OWORD *)(a2 + 35);
  v110 = *(_OWORD *)(a2 + 27);
  v111 = *(_OWORD *)(a2 + 29);
  v85 = operator new(0x20uLL);
  v85[1] = 0;
  v85[2] = 0;
  *v85 = &unk_24EC2F420;
  v85[3] = *a3;
  *a3 = 0;
  v126 = 0;
  v86 = (char *)operator new(0x180uLL);
  *(_OWORD *)(v86 + 8) = *(_OWORD *)v101;
  v86[184] = 0;
  *((_OWORD *)v86 + 8) = v103;
  *((_OWORD *)v86 + 9) = v104;
  *((_OWORD *)v86 + 10) = v105;
  *(_QWORD *)v86 = &off_24EC30300;
  *((_QWORD *)v86 + 3) = v99;
  *((_QWORD *)v86 + 4) = &off_24EC715B8;
  *((_QWORD *)v86 + 5) = v98;
  *((_QWORD *)v86 + 6) = v74;
  *((_QWORD *)v86 + 7) = &off_24EC715B8;
  *((_QWORD *)v86 + 8) = v97;
  *((_QWORD *)v86 + 9) = v77;
  *((_QWORD *)v86 + 10) = &off_24EC715B8;
  *((_QWORD *)v86 + 11) = v96;
  *((_QWORD *)v86 + 12) = v80;
  *((_QWORD *)v86 + 13) = v83;
  *((_QWORD *)v86 + 22) = v106;
  *((_OWORD *)v86 + 7) = v102;
  v86[232] = 0;
  if (v84)
  {
    *(_OWORD *)(v86 + 184) = v107;
    *(_OWORD *)(v86 + 200) = v108;
    *(_OWORD *)(v86 + 216) = v109;
    v86[232] = 1;
  }
  *((_OWORD *)v86 + 19) = v114;
  *((_OWORD *)v86 + 20) = v115;
  *((_OWORD *)v86 + 21) = v116;
  *((_OWORD *)v86 + 22) = v117;
  *((_OWORD *)v86 + 15) = v110;
  *((_OWORD *)v86 + 16) = v111;
  *((_OWORD *)v86 + 17) = v112;
  *((_OWORD *)v86 + 18) = v113;
  *((_QWORD *)v86 + 46) = v85 + 3;
  *((_QWORD *)v86 + 47) = v85;
  v126 = (__int128 *)v86;
  sub_2245022E4(*v100, (uint64_t)&v124);
  v87 = v126;
  if (v126 == &v124)
  {
    v88 = 4;
    v87 = &v124;
  }
  else
  {
    if (!v126)
      return;
    v88 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v87 + 8 * v88))(v87);
}

void sub_22335B418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, std::__shared_weak_count *a16)
{
  std::promise<void> *v16;
  uint64_t v17;
  std::exception_ptr v18;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v18.__ptr_ = (void *)(v17 - 216);
    std::promise<void>::set_exception(v16, v18);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v17 - 216));
    std::runtime_error::~runtime_error((std::runtime_error *)(v17 - 232));
    if (*(char *)(v17 - 113) < 0)
      operator delete(*(void **)(v17 - 136));
    JUMPOUT(0x22335B328);
  }
  _Unwind_Resume(exception_object);
}

void sub_22335B528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;

  v65 = *(_QWORD **)(v63 - 112);
  if (v65 == v62)
  {
    v66 = 4;
    v65 = (_QWORD *)(v63 - 136);
  }
  else
  {
    if (!v65)
      goto LABEL_6;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_6:
  sub_22332429C((_QWORD *)(v63 - 192));
  sub_223167354(v63 - 208);
  sub_223167354((uint64_t)&a62);
  sub_223167354(v63 - 248);
  _Unwind_Resume(a1);
}

void sub_22335B5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  sub_223167354((uint64_t)&a62);
  sub_223167354(v62 - 248);
  _Unwind_Resume(a1);
}

void sub_22335B5E4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22335B658(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC30380;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22335B768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22335B7CC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC30400;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22335B8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22335B940@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC30480;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22335BB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22335BC20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC30500;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22335BE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22335BF00(uint64_t a1)
{
  return sub_22335C068(a1 - 16);
}

void sub_22335BF08(uint64_t a1)
{
  sub_22335C068(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335BF30(uint64_t a1)
{
  return sub_22335B658((_QWORD *)(a1 - 16));
}

uint64_t *sub_22335BF38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22335B940((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22335BF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22335BC20((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22335BF48(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22335BF50(uint64_t a1)
{
  return sub_22335C068(a1 - 24);
}

void sub_22335BF58(uint64_t a1)
{
  sub_22335C068(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335BF80(uint64_t a1)
{
  return sub_22335B7CC((_QWORD *)(a1 - 24));
}

uint64_t sub_22335BF88(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22335BF90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22335BFF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_22335C060(uint64_t a1, uint64_t a2)
{
  sub_22333C768(*(uint64_t **)(a1 + 8), a2);
}

uint64_t sub_22335C068(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC2FF40;
  *(_QWORD *)(a1 + 16) = &unk_24EC2FFB8;
  *(_QWORD *)(a1 + 24) = &unk_24EC2FFF8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_22335C254(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  a1[9] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[6] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[6] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[3] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[1];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_22335C360(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22335C370(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22335C3A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[10] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[12];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

_QWORD *sub_22335C4A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30180;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22335C4E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30180;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335C538(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30180;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22335C5A8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30180;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22335C5F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22335C634(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22335C66C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_22335C990((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22335C834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335C918(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb"
                     "0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsB"
                                "undleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335C984()
{
  return &unk_24EC301E0;
}

void sub_22335C990(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_22335CA28()
{
  __break(1u);
}

void sub_22335CAD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22335CAF4);
}

_QWORD *sub_22335CB00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC30200;
  a1[10] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[12];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_22335CC18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC30200;
  a1[10] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[12];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[6];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  std::__shared_weak_count::__release_weak(v11);
LABEL_19:
  JUMPOUT(0x227684CE8);
}

__n128 sub_22335CD40(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  __int128 v25;

  v2 = (char *)operator new(0x170uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24EC30200;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = &off_24EC715B8;
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v2 + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)v2 + 7) = &off_24EC715B8;
  *((_QWORD *)v2 + 8) = v11;
  *((_QWORD *)v2 + 9) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v15 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  *((_QWORD *)v2 + 10) = &off_24EC715B8;
  *((_QWORD *)v2 + 11) = v15;
  *((_QWORD *)v2 + 12) = v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v2[184] = 0;
  v18 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)v2 + 8) = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 160);
  *((_OWORD *)v2 + 9) = *(_OWORD *)(a1 + 144);
  *((_OWORD *)v2 + 10) = v19;
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *((_QWORD *)v2 + 22) = *(_QWORD *)(a1 + 176);
  *((_OWORD *)v2 + 7) = v18;
  v2[232] = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v20 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(v2 + 184) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(v2 + 200) = v20;
    *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
    v2[232] = 1;
  }
  v21 = *(_OWORD *)(a1 + 320);
  *((_OWORD *)v2 + 19) = *(_OWORD *)(a1 + 304);
  *((_OWORD *)v2 + 20) = v21;
  v22 = *(_OWORD *)(a1 + 352);
  *((_OWORD *)v2 + 21) = *(_OWORD *)(a1 + 336);
  *((_OWORD *)v2 + 22) = v22;
  v23 = *(_OWORD *)(a1 + 256);
  *((_OWORD *)v2 + 15) = *(_OWORD *)(a1 + 240);
  *((_OWORD *)v2 + 16) = v23;
  result = *(__n128 *)(a1 + 272);
  v25 = *(_OWORD *)(a1 + 288);
  *((__n128 *)v2 + 17) = result;
  *((_OWORD *)v2 + 18) = v25;
  return result;
}

__n128 sub_22335CE80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  __int128 v27;
  __int128 v28;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC30200;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = &off_24EC715B8;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 56) = &off_24EC715B8;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 80) = &off_24EC715B8;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_QWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 112);
  v20 = *(_OWORD *)(a1 + 128);
  *(_BYTE *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 112) = v21;
  *(_QWORD *)(a2 + 176) = v19;
  *(_OWORD *)(a2 + 160) = v18;
  *(_OWORD *)(a2 + 144) = v17;
  *(_OWORD *)(a2 + 128) = v20;
  *(_BYTE *)(a2 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v22 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a2 + 200) = v22;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(a1 + 216);
    *(_BYTE *)(a2 + 232) = 1;
  }
  v23 = *(_OWORD *)(a1 + 240);
  v24 = *(_OWORD *)(a1 + 256);
  v25 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 288) = v25;
  *(_OWORD *)(a2 + 240) = v23;
  *(_OWORD *)(a2 + 256) = v24;
  result = *(__n128 *)(a1 + 304);
  v27 = *(_OWORD *)(a1 + 320);
  v28 = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a2 + 336) = *(_OWORD *)(a1 + 336);
  *(_OWORD *)(a2 + 352) = v28;
  *(__n128 *)(a2 + 304) = result;
  *(_OWORD *)(a2 + 320) = v27;
  return result;
}

void sub_22335CFA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  a1[10] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[12];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[6];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      return;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
}

void sub_22335D0B0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  __p[10] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)__p[12];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    __p[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    __p[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  __p[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)__p[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)__p[2];
      if (!v11)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)__p[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
LABEL_17:
  operator delete(__p);
}

void sub_22335D1BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_22335C990((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335D264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335D2B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb"
                     "0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsB"
                                "undleEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335D31C()
{
  return &unk_24EC30260;
}

_QWORD *sub_22335D328(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[46];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[9] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[9] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[11];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[6] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[8];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[3] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[3] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[5];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[1];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  return a1;
}

_QWORD *sub_22335D478(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC30280;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22335D500(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC30280;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22335D598(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30280;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22335D628(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30280;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22335D698(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22335D718(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22335D794(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22335C990(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22335DA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22335DBA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb"
                     "0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsB"
                                "undleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0"
                                "_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335DC0C()
{
  return &unk_24EC302E0;
}

_QWORD *sub_22335DC18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  *a1 = &off_24EC30300;
  v2 = (std::__shared_weak_count *)a1[47];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[7] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_22335DD74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  *a1 = &off_24EC30300;
  v2 = (std::__shared_weak_count *)a1[47];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[7] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  JUMPOUT(0x227684CE8);
}

char *sub_22335DEE0(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  result = (char *)operator new(0x180uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24EC30300;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = &off_24EC715B8;
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)result + 7) = &off_24EC715B8;
  *((_QWORD *)result + 8) = v11;
  *((_QWORD *)result + 9) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v15 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  *((_QWORD *)result + 10) = &off_24EC715B8;
  *((_QWORD *)result + 11) = v15;
  *((_QWORD *)result + 12) = v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  result[184] = 0;
  v18 = *(_OWORD *)(a1 + 112);
  *((_OWORD *)result + 8) = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 160);
  *((_OWORD *)result + 9) = *(_OWORD *)(a1 + 144);
  *((_OWORD *)result + 10) = v19;
  *((_QWORD *)result + 13) = *(_QWORD *)(a1 + 104);
  *((_QWORD *)result + 22) = *(_QWORD *)(a1 + 176);
  *((_OWORD *)result + 7) = v18;
  result[232] = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v20 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(result + 184) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(result + 200) = v20;
    *(_OWORD *)(result + 216) = *(_OWORD *)(a1 + 216);
    result[232] = 1;
  }
  v21 = *(_OWORD *)(a1 + 320);
  *((_OWORD *)result + 19) = *(_OWORD *)(a1 + 304);
  *((_OWORD *)result + 20) = v21;
  v22 = *(_OWORD *)(a1 + 352);
  *((_OWORD *)result + 21) = *(_OWORD *)(a1 + 336);
  *((_OWORD *)result + 22) = v22;
  v23 = *(_OWORD *)(a1 + 256);
  *((_OWORD *)result + 15) = *(_OWORD *)(a1 + 240);
  *((_OWORD *)result + 16) = v23;
  v24 = *(_OWORD *)(a1 + 288);
  *((_OWORD *)result + 17) = *(_OWORD *)(a1 + 272);
  *((_OWORD *)result + 18) = v24;
  v25 = *(_QWORD *)(a1 + 376);
  *((_QWORD *)result + 46) = *(_QWORD *)(a1 + 368);
  *((_QWORD *)result + 47) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  return result;
}

uint64_t sub_22335E040(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC30300;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = &off_24EC715B8;
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = *(_QWORD *)(result + 64);
  v9 = *(_QWORD *)(result + 72);
  *(_QWORD *)(a2 + 56) = &off_24EC715B8;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = *(_QWORD *)(result + 88);
  v13 = *(_QWORD *)(result + 96);
  *(_QWORD *)(a2 + 80) = &off_24EC715B8;
  *(_QWORD *)(a2 + 88) = v14;
  *(_QWORD *)(a2 + 96) = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(result + 104);
  v17 = *(_OWORD *)(result + 144);
  v18 = *(_OWORD *)(result + 160);
  v19 = *(_QWORD *)(result + 176);
  v21 = *(_OWORD *)(result + 112);
  v20 = *(_OWORD *)(result + 128);
  *(_BYTE *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 112) = v21;
  *(_QWORD *)(a2 + 176) = v19;
  *(_OWORD *)(a2 + 160) = v18;
  *(_OWORD *)(a2 + 144) = v17;
  *(_OWORD *)(a2 + 128) = v20;
  *(_BYTE *)(a2 + 232) = 0;
  if (*(_BYTE *)(result + 232))
  {
    v22 = *(_OWORD *)(result + 200);
    *(_OWORD *)(a2 + 184) = *(_OWORD *)(result + 184);
    *(_OWORD *)(a2 + 200) = v22;
    *(_OWORD *)(a2 + 216) = *(_OWORD *)(result + 216);
    *(_BYTE *)(a2 + 232) = 1;
  }
  v23 = *(_OWORD *)(result + 240);
  v24 = *(_OWORD *)(result + 256);
  v25 = *(_OWORD *)(result + 288);
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(result + 272);
  *(_OWORD *)(a2 + 288) = v25;
  *(_OWORD *)(a2 + 240) = v23;
  *(_OWORD *)(a2 + 256) = v24;
  v26 = *(_OWORD *)(result + 304);
  v27 = *(_OWORD *)(result + 320);
  v28 = *(_OWORD *)(result + 352);
  *(_OWORD *)(a2 + 336) = *(_OWORD *)(result + 336);
  *(_OWORD *)(a2 + 352) = v28;
  *(_OWORD *)(a2 + 304) = v26;
  *(_OWORD *)(a2 + 320) = v27;
  v29 = *(_QWORD *)(result + 376);
  *(_QWORD *)(a2 + 368) = *(_QWORD *)(result + 368);
  *(_QWORD *)(a2 + 376) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  return result;
}

void sub_22335E180(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)a1[47];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[7] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[6];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

void sub_22335E2D8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;

  v2 = (std::__shared_weak_count *)__p[47];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    __p[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[12];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    __p[10] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[12];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  __p[7] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)__p[9];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    __p[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)__p[6];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    __p[4] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)__p[6];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)__p[2];
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  operator delete(__p);
}

void sub_22335E428(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[46];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22335C990((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22335E53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335E5E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb"
                     "0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsB"
                                "undleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335E650()
{
  return &unk_24EC30360;
}

_QWORD *sub_22335E65C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC30380;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22335E694(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC30380;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335E6DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC30380;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22335E72C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC30380;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22335E75C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22335E76C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22335E798(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335E82C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335E868(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0"
                     "EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBu"
                                "ndleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335E8D4()
{
  return &unk_24EC303E0;
}

_QWORD *sub_22335E8E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC30400;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22335E918(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC30400;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335E960(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC30400;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22335E9B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC30400;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22335E9E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22335E9F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22335EA1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335EAB0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335EAEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0"
                     "EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBu"
                                "ndleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335EB58()
{
  return &unk_24EC30460;
}

_QWORD *sub_22335EB64(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC30480;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22335EB9C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC30480;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335EBE4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30480;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22335EC3C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30480;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22335EC74(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22335EC84(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22335ECB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335ED68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335EDB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb"
                     "0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsB"
                                "undleEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335EE20()
{
  return &unk_24EC304E0;
}

_QWORD *sub_22335EE2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC30500;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22335EE64(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC30500;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335EEAC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30500;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22335EF04(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30500;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22335EF3C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22335EF4C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22335EF78(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335F030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22335F07C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb"
                     "0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsB"
                                "undleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335F0E8()
{
  return &unk_24EC30560;
}

void sub_22335F0F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22335F11C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22335F134(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd20InputSe"
                     "manticsBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd20InputSemanticsBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd20InputSemanticsBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22335F1A4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22335F1D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335F20C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC305D0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22335F274(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335F304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22335F318(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22335F3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22335F3BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22335F480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22335F494(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22335F558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22335F56C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22335F610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22335F628(uint64_t a1)
{
  sub_223361294(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22335F64C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::mutex **v21;
  uint64_t **v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  std::__shared_weak_count *v60[2];
  uint64_t v61;
  void *v62[2];
  uint64_t v63;
  void *v64[2];
  uint64_t v65;
  void *v66[2];
  uint64_t v67;
  void *__p[2];
  uint64_t v69;
  int v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    sub_223361500(&v79, a2);
    v5 = v79;
    v4 = v80;
    if (v80)
    {
      p_shared_weak_owners = (unint64_t *)&v80->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = a1[18];
    v9 = (_QWORD *)operator new();
    *v9 = v8 + 56;
    std::mutex::lock((std::mutex *)(v8 + 56));
    *(_QWORD *)&v81 = v9;
    *((_QWORD *)&v81 + 1) = v8;
    if (!*(_BYTE *)(v8 + 48))
      sub_22324A974();
    v10 = (_QWORD *)(*(_QWORD *)v8 + 16 * *(_QWORD *)(v8 + 32));
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::__shared_weak_count *)v10[1];
    *v10 = v5;
    v10[1] = v4;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    v17 = *(_QWORD *)(v8 + 40);
    v18 = *(_QWORD *)(v8 + 32) + 1;
    if (v18 >= v16)
      v19 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    else
      v19 = 0;
    *(_QWORD *)(v8 + 32) = v18 - v19;
    if (v17 == v16)
    {
      v20 = *(_QWORD *)(v8 + 24) + 1;
      if (v20 < v16)
        v16 = 0;
      *(_QWORD *)(v8 + 24) = v20 - v16;
      v21 = (std::mutex **)v81;
      if (!(_QWORD)v81)
      {
LABEL_35:
        v31 = (uint64_t **)a1[9];
        v81 = 0uLL;
        v32 = (std::__shared_weak_count *)a1[5];
        if (v32)
        {
          v33 = std::__shared_weak_count::lock(v32);
          if (v33)
          {
            v34 = v33;
            v35 = a1[4];
            v36 = (unint64_t *)&v33->__shared_weak_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
            *(_QWORD *)&v81 = v35;
            *((_QWORD *)&v81 + 1) = v33;
            v38 = (unint64_t *)&v33->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          else
          {
            v81 = 0uLL;
          }
        }
        v82 = v5;
        v83 = v4;
        v85 = 0;
        v40 = (char *)operator new(0x30uLL);
        *(_QWORD *)v40 = &off_24EC30898;
        *(_OWORD *)(v40 + 8) = v81;
        v81 = 0uLL;
        *((_QWORD *)v40 + 3) = v5;
        *((_QWORD *)v40 + 4) = v4;
        v82 = 0;
        v83 = 0;
        v85 = v40;
        sub_2245022E4(*v31, (uint64_t)v84);
        v41 = v85;
        if (v85 == v84)
        {
          v42 = 4;
          v41 = v84;
        }
        else
        {
          if (!v85)
            goto LABEL_49;
          v42 = 5;
        }
        (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_49:
        v43 = v80;
        if (v80)
        {
          v44 = (unint64_t *)&v80->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v8 + 40) = v17 + 1;
      v21 = (std::mutex **)v81;
      if (!(_QWORD)v81)
        goto LABEL_35;
    }
    std::mutex::unlock(*v21);
    MEMORY[0x227684CE8](v21, 0x20C4093837F09);
    goto LABEL_35;
  }
  v22 = (uint64_t **)a1[9];
  *(_OWORD *)v60 = 0uLL;
  v23 = (std::__shared_weak_count *)a1[5];
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      v26 = (std::__shared_weak_count *)a1[4];
      v27 = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v60[0] = v26;
      v60[1] = v24;
      v29 = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    else
    {
      *(_OWORD *)v60 = 0uLL;
    }
  }
  v61 = *(_QWORD *)a2;
  sub_223314B10(v62, a2 + 8);
  sub_223314C58(v66, a2 + 56);
  v70 = *(_DWORD *)(a2 + 104);
  v46 = v70;
  v47 = *(_OWORD *)(a2 + 192);
  v75 = *(_OWORD *)(a2 + 176);
  v76 = v47;
  v48 = *(_OWORD *)(a2 + 224);
  v77 = *(_OWORD *)(a2 + 208);
  v78 = v48;
  v49 = *(_OWORD *)(a2 + 128);
  v71 = *(_OWORD *)(a2 + 112);
  v72 = v49;
  v50 = *(_OWORD *)(a2 + 160);
  v73 = *(_OWORD *)(a2 + 144);
  v74 = v50;
  v83 = 0;
  v51 = (char *)operator new(0x108uLL);
  *(_QWORD *)v51 = &off_24EC30918;
  *(_OWORD *)(v51 + 8) = *(_OWORD *)v60;
  *((_QWORD *)v51 + 3) = v61;
  *((_OWORD *)v51 + 2) = *(_OWORD *)v62;
  *((_QWORD *)v51 + 6) = v63;
  v62[1] = 0;
  v63 = 0;
  v62[0] = 0;
  *(_OWORD *)(v51 + 56) = *(_OWORD *)v64;
  *((_QWORD *)v51 + 9) = v65;
  v64[0] = 0;
  v64[1] = 0;
  *((_OWORD *)v51 + 5) = *(_OWORD *)v66;
  *((_QWORD *)v51 + 12) = v67;
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  *(_OWORD *)(v51 + 104) = *(_OWORD *)__p;
  *((_QWORD *)v51 + 15) = v69;
  v65 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v69 = 0;
  *((_DWORD *)v51 + 32) = v46;
  v52 = *(_OWORD *)(a2 + 112);
  v53 = *(_OWORD *)(a2 + 128);
  v54 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v51 + 184) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v51 + 168) = v54;
  *(_OWORD *)(v51 + 152) = v53;
  *(_OWORD *)(v51 + 136) = v52;
  v55 = *(_OWORD *)(a2 + 176);
  v56 = *(_OWORD *)(a2 + 192);
  v57 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v51 + 248) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v51 + 232) = v57;
  *(_OWORD *)(v51 + 216) = v56;
  *(_OWORD *)(v51 + 200) = v55;
  v83 = (std::__shared_weak_count *)v51;
  sub_2245022E4(*v22, (uint64_t)&v81);
  v58 = (__int128 *)v83;
  if (v83 == (std::__shared_weak_count *)&v81)
  {
    v59 = 4;
    v58 = &v81;
    goto LABEL_59;
  }
  if (v83)
  {
    v59 = 5;
LABEL_59:
    (*(void (**)(__int128 *))(*(_QWORD *)v58 + 8 * v59))(v58);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
}

void sub_22335FB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 104);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 128);
  }
  else
  {
    if (!v12)
    {
      sub_223361494(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223361494(&a9);
  _Unwind_Resume(a1);
}

void sub_22335FBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v17;
  std::__shared_weak_count *v18;

  if (__p)
  {
    operator delete(__p);
    v17 = a12;
    if (!a12)
    {
LABEL_3:
      v18 = a10;
      if (!a10)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      std::__shared_weak_count::__release_weak(v18);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v17 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v17);
  v18 = a10;
  if (!a10)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_22335FCE0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22335FCF0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22335FCFC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22335FD0C(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::mutex **v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t **v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  char *v47;
  std::string *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  int v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  std::string *v79;
  std::runtime_error *exception;
  std::runtime_error *v81;
  std::__shared_weak_count *v82[2];
  uint64_t v83;
  void *v84[2];
  uint64_t v85;
  void *v86[2];
  uint64_t v87;
  void *v88[2];
  uint64_t v89;
  void *__p[2];
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD *v101;
  std::__shared_weak_count *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  std::runtime_error v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  std::string v115;
  std::string *v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v110 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v110 + 1) = 45;
    v77 = (_QWORD *)a1[6];
    v76 = a1 + 6;
    v75 = v77;
    v78 = (std::__shared_weak_count *)*((unsigned __int8 *)v76 + 23);
    if ((char)v78 < 0)
      v78 = (std::__shared_weak_count *)v76[1];
    else
      v75 = v76;
    v111 = v75;
    v112 = v78;
    sub_2231A9820((uint64_t)&v110, (uint64_t)&v113, 0, 0, &v115);
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = &v115;
    else
      v79 = (std::string *)v115.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v107, (const char *)v79);
    v107.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v81 = std::runtime_error::runtime_error(exception, &v107);
    v81->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v81, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
    v6[1].__vftable = *a3;
    v105 = v6 + 1;
    v106 = v6;
    v103 = v6 + 1;
    v104 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223361500(&v108, a2);
    v10 = v108;
    v9 = v109;
    if (v109)
    {
      p_shared_weak_owners = (unint64_t *)&v109->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 56;
    std::mutex::lock((std::mutex *)(v13 + 56));
    *(_QWORD *)&v110 = v14;
    *((_QWORD *)&v110 + 1) = v13;
    if (!*(_BYTE *)(v13 + 48))
      sub_22324A974();
    v15 = (_QWORD *)(*(_QWORD *)v13 + 16 * *(_QWORD *)(v13 + 32));
    if (v9)
    {
      v16 = (unint64_t *)&v9->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)v15[1];
    *v15 = v10;
    v15[1] = v9;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    v22 = *(_QWORD *)(v13 + 40);
    v23 = *(_QWORD *)(v13 + 32) + 1;
    if (v23 >= v21)
      v24 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    else
      v24 = 0;
    *(_QWORD *)(v13 + 32) = v23 - v24;
    if (v22 == v21)
    {
      v25 = *(_QWORD *)(v13 + 24) + 1;
      if (v25 < v21)
        v21 = 0;
      *(_QWORD *)(v13 + 24) = v25 - v21;
      v26 = (std::mutex **)v110;
      if (!(_QWORD)v110)
      {
LABEL_39:
        v36 = (uint64_t **)a1[9];
        v110 = 0uLL;
        v37 = (std::__shared_weak_count *)a1[5];
        if (v37)
        {
          v38 = std::__shared_weak_count::lock(v37);
          if (v38)
          {
            v39 = v38;
            v40 = a1[4];
            v41 = (unint64_t *)&v38->__shared_weak_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            *(_QWORD *)&v110 = v40;
            *((_QWORD *)&v110 + 1) = v38;
            v43 = (unint64_t *)&v38->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          else
          {
            v110 = 0uLL;
          }
        }
        v111 = v10;
        v112 = v9;
        v45 = v103;
        v46 = v104;
        v113 = v103;
        v114 = v104;
        v103 = 0;
        v104 = 0;
        v116 = 0;
        v47 = (char *)operator new(0x38uLL);
        *(_QWORD *)v47 = &off_24EC309E8;
        *(_OWORD *)(v47 + 8) = v110;
        v110 = 0uLL;
        *((_QWORD *)v47 + 3) = v10;
        *((_QWORD *)v47 + 4) = v9;
        v111 = 0;
        v112 = 0;
        *((_QWORD *)v47 + 5) = v45;
        *((_QWORD *)v47 + 6) = v46;
        v113 = 0;
        v114 = 0;
        v116 = (std::string *)v47;
        sub_2245022E4(*v36, (uint64_t)&v115);
        v48 = v116;
        if (v116 == &v115)
        {
          v49 = 4;
          v48 = &v115;
        }
        else
        {
          if (!v116)
            goto LABEL_53;
          v49 = 5;
        }
        (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v49))();
LABEL_53:
        v50 = v109;
        if (v109)
        {
          v51 = (unint64_t *)&v109->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        if (v104)
        {
          v53 = &v104->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        if (v106)
        {
          v55 = &v106->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v13 + 40) = v22 + 1;
      v26 = (std::mutex **)v110;
      if (!(_QWORD)v110)
        goto LABEL_39;
    }
    std::mutex::unlock(*v26);
    MEMORY[0x227684CE8](v26, 0x20C4093837F09);
    goto LABEL_39;
  }
  v27 = (uint64_t **)a1[9];
  *(_OWORD *)v82 = 0uLL;
  v28 = (std::__shared_weak_count *)a1[5];
  if (v28)
  {
    v29 = std::__shared_weak_count::lock(v28);
    if (v29)
    {
      v30 = v29;
      v31 = (std::__shared_weak_count *)a1[4];
      v32 = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v82[0] = v31;
      v82[1] = v29;
      v34 = (unint64_t *)&v29->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    else
    {
      *(_OWORD *)v82 = 0uLL;
    }
  }
  v83 = *(_QWORD *)a2;
  sub_223314B10(v84, a2 + 8);
  sub_223314C58(v88, a2 + 56);
  v92 = *(_DWORD *)(a2 + 104);
  v57 = v92;
  v58 = *(_OWORD *)(a2 + 192);
  v97 = *(_OWORD *)(a2 + 176);
  v98 = v58;
  v59 = *(_OWORD *)(a2 + 224);
  v99 = *(_OWORD *)(a2 + 208);
  v100 = v59;
  v60 = *(_OWORD *)(a2 + 128);
  v93 = *(_OWORD *)(a2 + 112);
  v94 = v60;
  v61 = *(_OWORD *)(a2 + 160);
  v95 = *(_OWORD *)(a2 + 144);
  v96 = v61;
  v62 = (std::__shared_weak_count *)operator new(0x20uLL);
  v62->__shared_owners_ = 0;
  v62->__shared_weak_owners_ = 0;
  v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
  v62[1].__vftable = *a3;
  *a3 = 0;
  v101 = &v62[1].__vftable;
  v102 = v62;
  v112 = 0;
  v63 = (char *)operator new(0x118uLL);
  *(_QWORD *)v63 = &off_24EC30A68;
  *(_OWORD *)(v63 + 8) = *(_OWORD *)v82;
  *((_QWORD *)v63 + 3) = v83;
  *((_OWORD *)v63 + 2) = *(_OWORD *)v84;
  *((_QWORD *)v63 + 6) = v85;
  v84[1] = 0;
  v85 = 0;
  v84[0] = 0;
  *(_OWORD *)(v63 + 56) = *(_OWORD *)v86;
  *((_QWORD *)v63 + 9) = v87;
  v86[0] = 0;
  v86[1] = 0;
  *((_OWORD *)v63 + 5) = *(_OWORD *)v88;
  *((_QWORD *)v63 + 12) = v89;
  v88[0] = 0;
  v88[1] = 0;
  v89 = 0;
  *(_OWORD *)(v63 + 104) = *(_OWORD *)__p;
  *((_QWORD *)v63 + 15) = v91;
  v87 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v91 = 0;
  *((_DWORD *)v63 + 32) = v57;
  v64 = v93;
  v65 = v94;
  v66 = v95;
  *(_OWORD *)(v63 + 184) = v96;
  *(_OWORD *)(v63 + 168) = v66;
  *(_OWORD *)(v63 + 152) = v65;
  *(_OWORD *)(v63 + 136) = v64;
  v67 = v97;
  v68 = v98;
  v69 = v99;
  *(_OWORD *)(v63 + 248) = v100;
  *(_OWORD *)(v63 + 232) = v69;
  *(_OWORD *)(v63 + 216) = v68;
  *(_OWORD *)(v63 + 200) = v67;
  *((_QWORD *)v63 + 33) = v62 + 1;
  *((_QWORD *)v63 + 34) = v62;
  v101 = 0;
  v102 = 0;
  v112 = (std::__shared_weak_count *)v63;
  sub_2245022E4(*v27, (uint64_t)&v110);
  v70 = (__int128 *)v112;
  if (v112 == (std::__shared_weak_count *)&v110)
  {
    v71 = 4;
    v70 = &v110;
  }
  else
  {
    if (!v112)
      goto LABEL_74;
    v71 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v70 + 8 * v71))(v70);
LABEL_74:
  v72 = v102;
  if (v102)
  {
    v73 = (unint64_t *)&v102->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v84[0])
  {
    v84[1] = v84[0];
    operator delete(v84[0]);
  }
}

void sub_223360474(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 160), (const std::exception_ptr *)(v3 - 184));
      v5.__ptr_ = (void *)(v3 - 160);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 184));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 200));
      if (*(char *)(v3 - 81) < 0)
        operator delete(*(void **)(v3 - 104));
      JUMPOUT(0x223360388);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2233604E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 184));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 200));
  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22336053C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_223362D38(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223362D38(&a9);
  _Unwind_Resume(a1);
}

void sub_223360590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _QWORD *v16;

  sub_22333724C(v16);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223360610(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_22332429C((_QWORD *)(v2 - 160));
  sub_223167354(v2 - 176);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_2233606B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 232);
  sub_223167354(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_2233606D0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223360744(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC30AE8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E1C8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223360874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233608E8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC30B68;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2233609F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223360A5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC30BE8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223360C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223360D3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC30C68;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223360F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22336101C(uint64_t a1)
{
  return sub_223361294(a1 - 16);
}

void sub_223361024(uint64_t a1)
{
  sub_223361294(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336104C(uint64_t a1, uint64_t a2)
{
  return sub_223360744((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223361054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223360A5C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22336105C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223360D3C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_223361064(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22336106C(uint64_t a1)
{
  return sub_223361294(a1 - 24);
}

void sub_223361074(uint64_t a1)
{
  sub_223361294(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336109C(uint64_t a1)
{
  return sub_2233608E8((_QWORD *)(a1 - 24));
}

uint64_t sub_2233610A4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2233610AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223361114(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_22336117C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double **v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  void *v12[3];
  void *v13;
  void *v14;
  void *v15[3];
  void *__p;
  void *v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v5 = *(double ***)(a1 + 8);
  v6 = (uint64_t)(a2 + 7);
  v11 = *a2;
  sub_223314B10(v12, (uint64_t)(a2 + 1));
  sub_223314C58(v15, v6);
  v18 = *((_DWORD *)a2 + 26);
  v7 = *((_OWORD *)a2 + 12);
  v23 = *((_OWORD *)a2 + 11);
  v24 = v7;
  v8 = *((_OWORD *)a2 + 14);
  v25 = *((_OWORD *)a2 + 13);
  v26 = v8;
  v9 = *((_OWORD *)a2 + 8);
  v19 = *((_OWORD *)a2 + 7);
  v20 = v9;
  v10 = *((_OWORD *)a2 + 10);
  v21 = *((_OWORD *)a2 + 9);
  v22 = v10;
  sub_223335FB0(v5, (uint64_t)&v11, a3);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_223361258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  if (__p)
  {
    operator delete(__p);
    v15 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223361294(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC30648;
  *(_QWORD *)(a1 + 16) = &unk_24EC306C0;
  *(_QWORD *)(a1 + 24) = &unk_24EC30700;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_223361494(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

__n128 sub_223361500(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;

  v4 = (char *)operator new(0x108uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_24EC30848;
  *((_QWORD *)v4 + 3) = *(_QWORD *)a2;
  sub_223314B10((_QWORD *)v4 + 4, a2 + 8);
  sub_223314C58((_QWORD *)v4 + 10, a2 + 56);
  v5 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v4 + 216) = v5;
  v6 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v4 + 248) = v6;
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v4 + 152) = v7;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  *(__n128 *)(v4 + 168) = result;
  *((_DWORD *)v4 + 32) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 184) = v9;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_2233615B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *shared_owners;
  void *v5;
  void *v6;
  void *v7;

  shared_owners = (void *)v1[2].__shared_owners_;
  if (shared_owners)
  {
    v1[2].__shared_weak_owners_ = (uint64_t)shared_owners;
    operator delete(shared_owners);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v1);
      operator delete(v6);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[1].__shared_weak_owners_ = (uint64_t)v5;
  operator delete(v5);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void sub_223361604(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_22336161C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22336162C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22336165C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
}

_QWORD *sub_2233616C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30898;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223361708(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30898;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336175C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30898;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2233617CC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30898;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22336181C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223361858(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223361890(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223361BB4((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_223362760(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223361A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_223362760(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223361B3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldSt"
                                "ructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223361BA8()
{
  return &unk_24EC308F8;
}

void sub_223361BB4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  std::mutex *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  void *v90[3];
  void *v91;
  void *v92;
  void *__p;
  char *v94;
  unsigned __int8 v95;
  std::exception_ptr v96;
  char **v97;
  _QWORD *v98;
  char v99;
  char *v100;
  _QWORD *v101;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v87, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v87);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    v15 = (std::mutex *)(v14 + 24);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v96.__ptr_ = 0, v16 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v96), v16))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v17 = v95;
    *(_BYTE *)(v14 + 248) = v95;
    if (v17)
    {
      *(_QWORD *)(v14 + 152) = 0;
      v18 = v88;
      *(_QWORD *)(v14 + 144) = v87;
      *(_QWORD *)(v14 + 160) = 0;
      *(_QWORD *)(v14 + 168) = 0;
      v19 = v89;
      v96.__ptr_ = (void *)(v14 + 152);
      LOBYTE(v97) = 0;
      v20 = v89 - v18;
      if (v89 != v18)
      {
        v21 = 0x34F72C234F72C235 * (v20 >> 4);
        if (v21 >= 0x8D3DCB08D3DCB1)
          sub_22324A284();
        v22 = (char *)operator new(v20);
        v23 = 0;
        *(_QWORD *)(v14 + 152) = v22;
        *(_QWORD *)(v14 + 160) = v22;
        *(_QWORD *)(v14 + 168) = &v22[464 * v21];
        do
        {
          sub_223249DC0((uint64_t)&v22[v23], (uint64_t)&v18[v23]);
          v23 += 464;
        }
        while (&v18[v23] != v19);
        *(_QWORD *)(v14 + 160) = &v22[v23];
      }
      sub_223323948((_QWORD *)(v14 + 176), (uint64_t)v90);
      *(_QWORD *)(v14 + 224) = 0;
      *(_QWORD *)(v14 + 232) = 0;
      *(_QWORD *)(v14 + 240) = 0;
      v24 = (char *)__p;
      v85 = v94;
      v25 = v94 - (_BYTE *)__p;
      if (v94 != __p)
      {
        v26 = 0xCF3CF3CF3CF3CF3DLL * (v25 >> 3);
        v84 = (std::mutex *)(v14 + 24);
        if (v26 >= 0x186186186186187)
          sub_223323BA8();
        v27 = (char *)operator new(v25);
        *(_QWORD *)(v14 + 224) = v27;
        *(_QWORD *)(v14 + 232) = v27;
        v83 = v14;
        *(_QWORD *)(v14 + 240) = &v27[168 * v26];
        v28 = v27;
        do
        {
          v30 = *(_QWORD *)v24;
          *((_DWORD *)v28 + 2) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v28 = v30;
          v31 = *(_QWORD *)(v24 + 12);
          *((_DWORD *)v28 + 5) = *((_DWORD *)v24 + 5);
          *(_QWORD *)(v28 + 12) = v31;
          v32 = *(_OWORD *)(v24 + 24);
          v33 = *(_OWORD *)(v24 + 40);
          v34 = *(_OWORD *)(v24 + 56);
          *(_OWORD *)(v28 + 72) = *(_OWORD *)(v24 + 72);
          *(_OWORD *)(v28 + 56) = v34;
          *(_OWORD *)(v28 + 40) = v33;
          *(_OWORD *)(v28 + 24) = v32;
          v35 = *((_QWORD *)v24 + 11);
          *((_QWORD *)v28 + 12) = 0;
          *((_QWORD *)v28 + 11) = v35;
          *((_QWORD *)v28 + 14) = 0;
          *((_QWORD *)v28 + 13) = 0;
          v37 = *((_QWORD *)v24 + 12);
          v36 = *((_QWORD *)v24 + 13);
          v38 = v36 - v37;
          if (v36 != v37)
          {
            v86 = v24;
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            if (v39 >= 0xAAAAAAAAAAAAAABLL)
              sub_22324A284();
            v40 = (char *)operator new(v38);
            v41 = 0;
            *((_QWORD *)v28 + 12) = v40;
            *((_QWORD *)v28 + 13) = v40;
            *((_QWORD *)v28 + 14) = &v40[24 * v39];
            v100 = v40;
            v101 = v40;
            v96.__ptr_ = v28 + 112;
            v97 = &v100;
            v98 = &v101;
            v99 = 0;
            do
            {
              v44 = &v40[v41];
              v45 = v37 + v41;
              *(_QWORD *)v44 = 0;
              *((_QWORD *)v44 + 1) = 0;
              *((_QWORD *)v44 + 2) = 0;
              v47 = *(_BYTE **)(v37 + v41);
              v46 = *(_BYTE **)(v37 + v41 + 8);
              v48 = v46 - v47;
              if (v46 != v47)
              {
                if (v48 < 0)
                  sub_22316E078();
                v42 = (char *)operator new(v46 - v47);
                *(_QWORD *)v44 = v42;
                *((_QWORD *)v44 + 1) = v42;
                *((_QWORD *)v44 + 2) = &v42[8 * (v48 >> 3)];
                v43 = v48 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v42, v47, v43);
                *((_QWORD *)v44 + 1) = &v42[v43];
              }
              v101 = v44 + 24;
              v41 += 24;
            }
            while (v45 + 24 != v36);
            *((_QWORD *)v28 + 13) = &v40[v41];
            v24 = v86;
          }
          *((_QWORD *)v28 + 15) = 0;
          *((_QWORD *)v28 + 16) = 0;
          *((_QWORD *)v28 + 17) = 0;
          v49 = *((_QWORD *)v24 + 15);
          v50 = *((_QWORD *)v24 + 16);
          v51 = v50 - v49;
          if (v50 != v49)
          {
            v52 = 0x4EC4EC4EC4EC4EC5 * (v51 >> 3);
            if (v52 >= 0x276276276276277)
              sub_223323BA8();
            v53 = (char *)operator new(v51);
            v54 = 0;
            *((_QWORD *)v28 + 15) = v53;
            *((_QWORD *)v28 + 16) = v53;
            *((_QWORD *)v28 + 17) = &v53[104 * v52];
            do
            {
              v55 = v49 + v54;
              v56 = &v53[v54];
              *v56 = *(_BYTE *)(v49 + v54);
              v57 = *(_OWORD *)(v49 + v54 + 8);
              *(_OWORD *)(v56 + 24) = *(_OWORD *)(v49 + v54 + 24);
              *(_OWORD *)(v56 + 8) = v57;
              v58 = *(_OWORD *)(v49 + v54 + 40);
              v59 = *(_OWORD *)(v49 + v54 + 56);
              v60 = *(_OWORD *)(v49 + v54 + 72);
              *(_OWORD *)(v56 + 88) = *(_OWORD *)(v49 + v54 + 88);
              *(_OWORD *)(v56 + 72) = v60;
              *(_OWORD *)(v56 + 56) = v59;
              *(_OWORD *)(v56 + 40) = v58;
              v54 += 104;
            }
            while (v55 + 104 != v50);
            *((_QWORD *)v28 + 16) = &v53[v54];
          }
          v29 = *((_OWORD *)v24 + 9);
          v28[160] = v24[160];
          *((_OWORD *)v28 + 9) = v29;
          v24 += 168;
          v28 += 168;
        }
        while (v24 != v85);
        v14 = v83;
        v15 = v84;
        *(_QWORD *)(v83 + 232) = v28;
      }
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v87;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock(v15);
  }
  if (v95)
  {
    v61 = (char *)__p;
    if (__p)
    {
      v62 = v94;
      v63 = __p;
      if (v94 != __p)
      {
        do
        {
          v65 = (void *)*((_QWORD *)v62 - 6);
          if (v65)
          {
            *((_QWORD *)v62 - 5) = v65;
            operator delete(v65);
          }
          v66 = *((_QWORD *)v62 - 9);
          if (v66)
          {
            v67 = *((_QWORD *)v62 - 8);
            v64 = (void *)*((_QWORD *)v62 - 9);
            if (v67 != v66)
            {
              v68 = *((_QWORD *)v62 - 8);
              do
              {
                v70 = *(void **)(v68 - 24);
                v68 -= 24;
                v69 = v70;
                if (v70)
                {
                  *(_QWORD *)(v67 - 16) = v69;
                  operator delete(v69);
                }
                v67 = v68;
              }
              while (v68 != v66);
              v64 = (void *)*((_QWORD *)v62 - 9);
            }
            *((_QWORD *)v62 - 8) = v66;
            operator delete(v64);
          }
          v62 -= 168;
        }
        while (v62 != v61);
        v63 = __p;
      }
      v94 = v61;
      operator delete(v63);
    }
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    v71 = (char *)v88;
    if (v88)
    {
      v72 = v89;
      v73 = v88;
      if (v89 != v88)
      {
        do
        {
          if (*(v72 - 16))
          {
            v74 = *((_QWORD *)v72 - 5);
            if (v74)
            {
              v75 = *((_QWORD *)v72 - 4);
              v76 = (void *)*((_QWORD *)v72 - 5);
              if (v75 != v74)
              {
                v77 = *((_QWORD *)v72 - 4);
                do
                {
                  v79 = *(void **)(v77 - 24);
                  v77 -= 24;
                  v78 = v79;
                  if (v79)
                  {
                    *(_QWORD *)(v75 - 16) = v78;
                    operator delete(v78);
                  }
                  v75 = v77;
                }
                while (v77 != v74);
                v76 = (void *)*((_QWORD *)v72 - 5);
              }
              *((_QWORD *)v72 - 4) = v74;
              operator delete(v76);
            }
          }
          if (*(v72 - 48))
          {
            v80 = (void *)*((_QWORD *)v72 - 9);
            if (v80)
            {
              *((_QWORD *)v72 - 8) = v80;
              operator delete(v80);
            }
          }
          if (*(v72 - 80))
          {
            v81 = (void *)*((_QWORD *)v72 - 13);
            if (v81)
            {
              *((_QWORD *)v72 - 12) = v81;
              operator delete(v81);
            }
          }
          v82 = (void *)*((_QWORD *)v72 - 23);
          if (v82)
          {
            *((_QWORD *)v72 - 22) = v82;
            operator delete(v82);
          }
          v72 -= 464;
        }
        while (v72 != v71);
        v73 = v88;
      }
      v89 = v71;
      operator delete(v73);
    }
  }
}

void sub_22336235C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::mutex *v47;

  v47 = v33;
  v39 = *v35;
  if (*v35)
  {
    v40 = *(_QWORD *)(v34 + 160);
    v41 = *v35;
    if ((void *)v40 != v39)
    {
      do
      {
        v40 -= 464;
        sub_22324A5A0(v40);
      }
      while ((void *)v40 != v39);
      v41 = *v35;
    }
    *(_QWORD *)(v34 + 160) = v39;
    operator delete(v41);
  }
  std::mutex::unlock(v47);
  if (a33)
    sub_223322918(&a20);
  if (a2 == 1)
  {
    v42 = (uint64_t *)__cxa_begin_catch(a1);
    v43 = *v42;
    *(_QWORD *)(v36 - 104) = *(_QWORD *)(*(_QWORD *)(*v42 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a19 = (*(uint64_t (**)(void))(v43 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)(v36 - 104), "\n", "message: ", (const char *)&a19, "\n");
    v44 = *(char *)(v36 - 113);
    if (v44 >= 0)
      v45 = v36 - 136;
    else
      v45 = *(_QWORD *)(v36 - 136);
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v36 - 113);
    else
      v46 = *(_QWORD *)(v36 - 128);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, v45, v46, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_223362734()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  __cxa_end_catch();
  JUMPOUT(0x223362754);
}

uint64_t *sub_223362760(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22336284C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x2233627A8);
}

_QWORD *sub_223362888(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC30918;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223362900(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC30918;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223362988(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x108uLL);
  *v2 = &off_24EC30918;
  sub_223362C40((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2233629C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2233629DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC30918;
  return sub_223362C40((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2233629F8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223362A68(_QWORD *__p)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (void *)__p[13];
  if (v2)
  {
    __p[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)__p[10];
  if (v3)
  {
    __p[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)__p[7];
  if (v4)
  {
    __p[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)__p[4];
  if (v5)
  {
    __p[5] = v5;
    operator delete(v5);
  }
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223362AD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223361BB4((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_223362760(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223362B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_223362760(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223362BC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldSt"
                                "ructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223362C34()
{
  return &unk_24EC30978;
}

uint64_t sub_223362C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_223314B10((_QWORD *)(a1 + 24), a2 + 24);
  sub_223314C58((_QWORD *)(a1 + 72), a2 + 72);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  v10 = *(_OWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 208) = v11;
  return a1;
}

void sub_223362CD8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      v6 = (std::__shared_weak_count *)v1[1];
      if (!v6)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[4] = v5;
  operator delete(v5);
  v6 = (std::__shared_weak_count *)v1[1];
  if (!v6)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223362D38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[33];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[12];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[12];
  if (v5)
  {
LABEL_6:
    a1[13] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_223362DE8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223362DF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_223362E28(uint64_t a1)
{
  return sub_223362760((uint64_t *)(a1 + 24));
}

_QWORD *sub_223362E34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC309E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223362EBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC309E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223362F54(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC309E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223362FE4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC309E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223363054(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2233630D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223363150(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223361BB4(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_223362760((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22336342C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223363458(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223363264);
    JUMPOUT(0x223363234);
  }
  sub_2233236D4(3u);
}

void sub_2233634B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2233634E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_223362760(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2233635CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldSt"
                                "ructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC"
                                "_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223363638()
{
  return &unk_24EC30A48;
}

void sub_223363648(_QWORD *a1)
{
  sub_223363978(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336366C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x118uLL);
  *v2 = &off_24EC30A68;
  sub_223363A34((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2233636AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2233636C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC30A68;
  return sub_223363A34((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2233636DC(uint64_t a1)
{
  sub_223363B4C((_QWORD *)(a1 + 8));
}

void sub_2233636E4(_QWORD *a1)
{
  sub_223363B4C(a1 + 1);
  operator delete(a1);
}

void sub_22336370C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[33];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223361BB4((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_223362760((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22336381C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223363894(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x2233638C8);
  JUMPOUT(0x2233638F8);
}

uint64_t sub_223363900(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldSt"
                                "ructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336396C()
{
  return &unk_24EC30AC8;
}

_QWORD *sub_223363978(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC30A68;
  v2 = (std::__shared_weak_count *)a1[34];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[13];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[13];
  if (v5)
  {
LABEL_6:
    a1[14] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[7];
  if (v7)
  {
    a1[8] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

uint64_t sub_223363A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  sub_223314B10((_QWORD *)(a1 + 24), a2 + 24);
  sub_223314C58((_QWORD *)(a1 + 72), a2 + 72);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  v7 = *(_OWORD *)(a2 + 128);
  v8 = *(_OWORD *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  v10 = *(_OWORD *)(a2 + 192);
  v11 = *(_OWORD *)(a2 + 208);
  v12 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 192) = v10;
  *(_OWORD *)(a1 + 208) = v11;
  v13 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  return a1;
}

void sub_223363AEC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      v6 = (std::__shared_weak_count *)v1[1];
      if (!v6)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[4] = v5;
  operator delete(v5);
  v6 = (std::__shared_weak_count *)v1[1];
  if (!v6)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(exception_object);
}

void sub_223363B4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[33];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[12];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[12];
  if (v5)
  {
LABEL_6:
    a1[13] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[6];
  if (v7)
  {
    a1[7] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

_QWORD *sub_223363C00(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30AE8;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223363C58(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30AE8;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223363CC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC30AE8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E1C8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_223363D38(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223363D58(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC30AE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E1C8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_223363DC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223363DD8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223363E28(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E1C8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223363E74(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E1C8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223363F28(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223363F64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundl"
                     "eENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9"
                     "SubscribeENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStr"
                                "uctureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetect"
                                "ion5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223363FD0()
{
  return &unk_24EC30B48;
}

_QWORD *sub_223363FDC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC30B68;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223364014(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC30B68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336405C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC30B68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2233640AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC30B68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2233640DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233640EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223364118(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233641AC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233641E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundl"
                     "eENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE1"
                     "5AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStr"
                                "uctureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetect"
                                "ion5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223364254()
{
  return &unk_24EC30BC8;
}

_QWORD *sub_223364260(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC30BE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223364298(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC30BE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233642E0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30BE8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223364338(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30BE8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223364370(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223364380(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233643AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_223364528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223364598(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldSt"
                                "ructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223364604()
{
  return &unk_24EC30C48;
}

_QWORD *sub_223364610(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC30C68;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223364648(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC30C68;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223364690(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30C68;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233646E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30C68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223364720(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223364730(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22336475C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223364814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223364860(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldSt"
                                "ructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233648CC()
{
  return &unk_24EC30CC8;
}

void sub_2233648DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223364900(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223364918(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd28InputVi"
                     "oWorldStructureBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetectio"
                     "n5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd28InputVioWorldStructureBundleENSt12experimental8expectedINS7_22SurfaceDetectionResult"
                                "ENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd28InputVioWorldStructureBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223364988(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233649B4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233649F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC30D38;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223364A58(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223364AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223364AFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223364B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223364BA0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223364C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223364C78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223364D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223364D50(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223364DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223364E0C(uint64_t a1)
{
  sub_223367664(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223364E30(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t **v79;
  std::__shared_weak_count *v80[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 *v86;
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x140uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30FA0;
    v6 = v4 + 1;
    sub_2233678FC((uint64_t)&v4[1], (uint64_t *)a2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = (uint64_t *)a1[18];
    v10 = (_QWORD *)operator new();
    *v10 = v9 + 7;
    std::mutex::lock((std::mutex *)(v9 + 7));
    *(_QWORD *)&v84 = v10;
    *((_QWORD *)&v84 + 1) = v9;
    if (!*((_BYTE *)v9 + 48))
      sub_22324A974();
    v11 = v9[4];
    v12 = *v9;
    v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v6;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v9[1] - *v9) >> 4;
    v20 = v9[5];
    v21 = v9[4] + 1;
    if (v21 >= v19)
      v22 = (v9[1] - *v9) >> 4;
    else
      v22 = 0;
    v9[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v9[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v9[3] = v23 - v19;
      v24 = (std::mutex **)v84;
      if (!(_QWORD)v84)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v84 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v84 = v38;
            *((_QWORD *)&v84 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v84 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC30FF0;
        *(_OWORD *)(v43 + 8) = v84;
        v84 = 0uLL;
        *((_QWORD *)v43 + 3) = v6;
        *((_QWORD *)v43 + 4) = v4;
        v85 = 0;
        v86 = 0;
        v88 = v43;
        sub_2245022E4(*v34, (uint64_t)v87);
        v44 = v88;
        if (v88 == v87)
        {
          v45 = 4;
          v44 = v87;
        }
        else
        {
          if (!v88)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
        if (v4)
        {
          v46 = (unint64_t *)&v4->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        return;
      }
    }
    else
    {
      v9[5] = v20 + 1;
      v24 = (std::mutex **)v84;
      if (!(_QWORD)v84)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v80 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v80[0] = v29;
      v80[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v80 = 0uLL;
    }
  }
  v49 = *(_QWORD *)a2;
  v48 = *(char **)(a2 + 8);
  v50 = *(char **)(a2 + 16);
  v51 = v50 - v48;
  v79 = v25;
  if (v50 == v48)
  {
    v54 = 0;
    v53 = 0;
  }
  else
  {
    if (v51 < 0)
      sub_22316E078();
    v52 = (char *)operator new(v50 - v48);
    v53 = v52;
    v54 = &v52[16 * (v51 >> 4)];
    v55 = v51 - 16;
    if ((unint64_t)(v51 - 16) >= 0x90)
    {
      v56 = (v55 & 0xFFFFFFFFFFFFFFF0) + 16;
      v57 = v52 >= &v48[v56] || v48 >= &v52[v56];
      v51 = (uint64_t)v52;
      if (v57)
      {
        v58 = (v55 >> 4) + 1;
        v59 = 16 * (v58 & 0x1FFFFFFFFFFFFFFCLL);
        v60 = &v48[v59];
        v51 = (uint64_t)&v52[v59];
        v61 = v52 + 32;
        v62 = (__int128 *)(v48 + 32);
        v63 = v58 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *(v62 - 2);
          v64 = *(v62 - 1);
          v67 = *v62;
          v66 = v62[1];
          v62 += 4;
          *(v61 - 2) = v65;
          *(v61 - 1) = v64;
          *v61 = v67;
          v61[1] = v66;
          v61 += 4;
          v63 -= 4;
        }
        while (v63);
        v48 = v60;
        if (v58 == (v58 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_67;
      }
    }
    else
    {
      v51 = (uint64_t)v52;
    }
    do
    {
      *(_QWORD *)v51 = *(_QWORD *)v48;
      *(_QWORD *)(v51 + 8) = *((_QWORD *)v48 + 1);
      v51 += 16;
      v48 += 16;
    }
    while (v48 != v50);
  }
LABEL_67:
  v68 = *(_QWORD *)(a2 + 32);
  LOBYTE(v81) = 0;
  v69 = *(unsigned __int8 *)(a2 + 160);
  if (*(_BYTE *)(a2 + 160))
  {
    v81 = *(_OWORD *)(a2 + 112);
    v82 = *(_OWORD *)(a2 + 128);
    v83 = *(_OWORD *)(a2 + 144);
  }
  v86 = 0;
  v70 = (char *)operator new(0x140uLL);
  *(_QWORD *)v70 = &off_24EC31070;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)v80;
  *((_QWORD *)v70 + 3) = v49;
  *((_QWORD *)v70 + 4) = v53;
  *((_QWORD *)v70 + 5) = v51;
  *((_QWORD *)v70 + 6) = v54;
  *((_QWORD *)v70 + 7) = v68;
  v71 = *(_OWORD *)(a2 + 88);
  *((_OWORD *)v70 + 6) = *(_OWORD *)(a2 + 72);
  *((_OWORD *)v70 + 7) = v71;
  *((_QWORD *)v70 + 16) = *(_QWORD *)(a2 + 104);
  v72 = *(_OWORD *)(a2 + 56);
  *((_OWORD *)v70 + 4) = *(_OWORD *)(a2 + 40);
  *((_OWORD *)v70 + 5) = v72;
  v70[136] = 0;
  v70[184] = 0;
  if (v69)
  {
    *(_OWORD *)(v70 + 136) = v81;
    *(_OWORD *)(v70 + 152) = v82;
    *(_OWORD *)(v70 + 168) = v83;
    v70[184] = 1;
  }
  v73 = *(_OWORD *)(a2 + 248);
  *((_OWORD *)v70 + 16) = *(_OWORD *)(a2 + 232);
  *((_OWORD *)v70 + 17) = v73;
  v74 = *(_OWORD *)(a2 + 280);
  *((_OWORD *)v70 + 18) = *(_OWORD *)(a2 + 264);
  *((_OWORD *)v70 + 19) = v74;
  v75 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v70 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v70 + 13) = v75;
  v76 = *(_OWORD *)(a2 + 216);
  *((_OWORD *)v70 + 14) = *(_OWORD *)(a2 + 200);
  *((_OWORD *)v70 + 15) = v76;
  v86 = (__int128 *)v70;
  sub_2245022E4(*v79, (uint64_t)&v84);
  v77 = v86;
  if (v86 == &v84)
  {
    v78 = 4;
    v77 = &v84;
  }
  else
  {
    if (!v86)
      return;
    v78 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v77 + 8 * v78))();
}

void sub_223365494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  v6 = *(_QWORD **)(v4 - 152);
  if (v6 == v3)
  {
    v7 = 4;
    v6 = (_QWORD *)(v4 - 176);
  }
  else
  {
    if (!v6)
    {
      sub_223367864((uint64_t *)va);
      _Unwind_Resume(a1);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
  sub_223367864((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2233654E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233655F4(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223365604(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223365610(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223365620(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t k;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v39;
  uint64_t **v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_weak_owners;
  unint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t **v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t n;
  unsigned __int8 v64;
  std::string *v65;
  uint64_t v66;
  std::recursive_mutex *v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t m;
  unsigned __int8 v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  _QWORD *v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  unsigned __int8 v100;
  uint64_t v101;
  uint64_t i;
  unsigned __int8 v103;
  __int128 *v104;
  uint64_t v105;
  std::recursive_mutex *v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t j;
  unsigned __int8 v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  __int128 *v114;
  std::string *v115;
  std::runtime_error *exception;
  std::runtime_error *v117;
  char *v118;
  uint64_t v119;
  _QWORD *v120;
  std::__shared_weak_count *v121[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _QWORD *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::runtime_error v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  __int128 v144;
  _QWORD *v145;
  __int128 *v146;
  _QWORD v147[3];
  std::string v148;
  std::string *v149;
  uint64_t v150;

  v150 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v144 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v144 + 1) = 45;
    v113 = (_QWORD *)a1[6];
    v112 = a1 + 6;
    v111 = v113;
    v114 = (__int128 *)*((unsigned __int8 *)v112 + 23);
    if ((char)v114 < 0)
      v114 = (__int128 *)v112[1];
    else
      v111 = v112;
    v145 = v111;
    v146 = v114;
    sub_2231A9820((uint64_t)&v144, (uint64_t)v147, 0, 0, &v148);
    if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v115 = &v148;
    else
      v115 = (std::string *)v148.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v141, (const char *)v115);
    v141.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v117 = std::runtime_error::runtime_error(exception, &v141);
    v117->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v117, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (a1[9])
  {
    if (a1[18])
      goto LABEL_4;
LABEL_41:
    v40 = (uint64_t **)a1[9];
    *(_OWORD *)v121 = 0uLL;
    v41 = (std::__shared_weak_count *)a1[5];
    if (v41)
    {
      v42 = std::__shared_weak_count::lock(v41);
      if (v42)
      {
        v43 = v42;
        v44 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
        do
          v46 = __ldxr(p_shared_weak_owners);
        while (__stxr(v46 + 1, p_shared_weak_owners));
        v121[0] = v44;
        v121[1] = v42;
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v48 = __ldaxr(p_shared_owners);
        while (__stlxr(v48 - 1, p_shared_owners));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      else
      {
        *(_OWORD *)v121 = 0uLL;
      }
    }
    v76 = *(char **)(a2 + 8);
    v77 = *(char **)(a2 + 16);
    v78 = v77 - v76;
    v119 = *(_QWORD *)a2;
    v120 = a3;
    if (v77 == v76)
    {
      v118 = 0;
      v80 = 0;
      goto LABEL_111;
    }
    if (v78 < 0)
      sub_22316E078();
    v79 = (char *)operator new(v77 - v76);
    v80 = v79;
    v118 = &v79[16 * (v78 >> 4)];
    v81 = v78 - 16;
    if ((unint64_t)(v78 - 16) >= 0x90)
    {
      v82 = (v81 & 0xFFFFFFFFFFFFFFF0) + 16;
      v83 = v79 >= &v76[v82] || v76 >= &v79[v82];
      v78 = (uint64_t)v79;
      if (v83)
      {
        v84 = (v81 >> 4) + 1;
        v85 = 16 * (v84 & 0x1FFFFFFFFFFFFFFCLL);
        v86 = &v76[v85];
        v78 = (uint64_t)&v79[v85];
        v87 = v79 + 32;
        v88 = (__int128 *)(v76 + 32);
        v89 = v84 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v91 = *(v88 - 2);
          v90 = *(v88 - 1);
          v93 = *v88;
          v92 = v88[1];
          v88 += 4;
          *(v87 - 2) = v91;
          *(v87 - 1) = v90;
          *v87 = v93;
          v87[1] = v92;
          v87 += 4;
          v89 -= 4;
        }
        while (v89);
        v76 = v86;
        if (v84 == (v84 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_111:
          v94 = *(_QWORD *)(a2 + 32);
          v123 = *(_OWORD *)(a2 + 56);
          v124 = *(_OWORD *)(a2 + 72);
          v125 = *(_OWORD *)(a2 + 88);
          v126 = *(_QWORD *)(a2 + 104);
          v122 = *(_OWORD *)(a2 + 40);
          LOBYTE(v127) = 0;
          v95 = *(unsigned __int8 *)(a2 + 160);
          if (*(_BYTE *)(a2 + 160))
          {
            v127 = *(_OWORD *)(a2 + 112);
            v128 = *(_OWORD *)(a2 + 128);
            v129 = *(_OWORD *)(a2 + 144);
          }
          v135 = *(_OWORD *)(a2 + 248);
          v136 = *(_OWORD *)(a2 + 264);
          v137 = *(_OWORD *)(a2 + 280);
          v134 = *(_OWORD *)(a2 + 232);
          v130 = *(_OWORD *)(a2 + 168);
          v131 = *(_OWORD *)(a2 + 184);
          v132 = *(_OWORD *)(a2 + 200);
          v133 = *(_OWORD *)(a2 + 216);
          v96 = operator new(0x20uLL);
          v96[1] = 0;
          v96[2] = 0;
          *v96 = &off_24EC30998;
          v96[3] = *v120;
          *v120 = 0;
          v146 = 0;
          v97 = (char *)operator new(0x150uLL);
          *(_QWORD *)v97 = &off_24EC31170;
          *(_OWORD *)(v97 + 8) = *(_OWORD *)v121;
          *((_QWORD *)v97 + 3) = v119;
          *((_QWORD *)v97 + 4) = v80;
          *((_QWORD *)v97 + 5) = v78;
          *((_QWORD *)v97 + 6) = v118;
          *((_QWORD *)v97 + 7) = v94;
          *((_OWORD *)v97 + 6) = v124;
          *((_OWORD *)v97 + 7) = v125;
          *((_QWORD *)v97 + 16) = v126;
          *((_OWORD *)v97 + 4) = v122;
          *((_OWORD *)v97 + 5) = v123;
          v97[136] = 0;
          v97[184] = 0;
          if (v95)
          {
            *(_OWORD *)(v97 + 136) = v127;
            *(_OWORD *)(v97 + 152) = v128;
            *(_OWORD *)(v97 + 168) = v129;
            v97[184] = 1;
          }
          *((_OWORD *)v97 + 16) = v134;
          *((_OWORD *)v97 + 17) = v135;
          *((_OWORD *)v97 + 18) = v136;
          *((_OWORD *)v97 + 19) = v137;
          *((_OWORD *)v97 + 12) = v130;
          *((_OWORD *)v97 + 13) = v131;
          *((_OWORD *)v97 + 14) = v132;
          *((_OWORD *)v97 + 15) = v133;
          *((_QWORD *)v97 + 40) = v96 + 3;
          *((_QWORD *)v97 + 41) = v96;
          v146 = (__int128 *)v97;
          v98 = *v40;
          if (*((_DWORD *)*v40 + 6))
          {
            v99 = *v98;
            if (*v98)
              goto LABEL_125;
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 78, (uint64_t)"work_queue_", 11, (uint64_t)&unk_2245B6692, 0, (void (*)(void **))sub_22457406C);
            v100 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v101 = qword_255795648;
              for (i = qword_255795650; v101 != i; v101 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v101)(*(_QWORD *)(v101 + 8), "work_queue_", 11, &unk_2245B6692, 0);
            }
            v103 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (byte_255795670)
            {
              qword_255795660(*(_QWORD *)algn_255795668, "work_queue_", 11, &unk_2245B6692, 0);
              v99 = *v98;
LABEL_125:
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v99 + 40))(v99, &v144);
              v104 = v146;
              if (v146 != &v144)
              {
LABEL_126:
                if (!v104)
                  return;
                v105 = 5;
                goto LABEL_140;
              }
LABEL_139:
              v105 = 4;
              v104 = &v144;
LABEL_140:
              (*(void (**)(void))(*(_QWORD *)v104 + 8 * v105))();
              return;
            }
LABEL_169:
            abort();
          }
          v106 = (std::recursive_mutex *)v98[4];
          if (!v106)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 74, (uint64_t)"mtx_", 4, (uint64_t)&unk_2245B6692, 0, (void (*)(void **))sub_22457406C);
            v107 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v108 = qword_255795648;
              for (j = qword_255795650; v108 != j; v108 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v108)(*(_QWORD *)(v108 + 8), "mtx_", 4, &unk_2245B6692, 0);
            }
            v110 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_169;
            qword_255795660(*(_QWORD *)algn_255795668, "mtx_", 4, &unk_2245B6692, 0);
            v106 = (std::recursive_mutex *)v98[4];
          }
          std::recursive_mutex::lock(v106);
          if (!v146)
            sub_223198474();
          (*(void (**)(__int128 *))(*(_QWORD *)v146 + 48))(v146);
          std::recursive_mutex::unlock(v106);
          v104 = v146;
          if (v146 != &v144)
            goto LABEL_126;
          goto LABEL_139;
        }
      }
    }
    else
    {
      v78 = (uint64_t)v79;
    }
    do
    {
      *(_QWORD *)v78 = *(_QWORD *)v76;
      *(_QWORD *)(v78 + 8) = *((_QWORD *)v76 + 1);
      v78 += 16;
      v76 += 16;
    }
    while (v76 != v77);
    goto LABEL_111;
  }
  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
  v34 = atomic_load((unsigned __int8 *)&qword_255795680);
  if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
  {
    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
    __cxa_guard_release(&qword_255795680);
  }
  if (!byte_255795670 || byte_255795678)
  {
    v35 = qword_255795648;
    v36 = qword_255795650;
    while (v35 != v36)
    {
      v38 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v35;
      v37 = *(_QWORD *)(v35 + 8);
      v35 += 16;
      v38(v37, "scheduler_", 10, "", 0);
    }
  }
  v39 = atomic_load((unsigned __int8 *)&qword_255795680);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
  {
    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
    __cxa_guard_release(&qword_255795680);
  }
  if (!byte_255795670)
    abort();
  qword_255795660(*(_QWORD *)algn_255795668, "scheduler_", 10, "", 0);
  if (!a1[18])
    goto LABEL_41;
LABEL_4:
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)*a3;
  v140 = v6;
  v138 = &v6[1].__vftable;
  v139 = v6;
  v6->__shared_owners_ = 0;
  v7 = (unint64_t *)&v6->__shared_owners_;
  *a3 = 0;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  if (!a1[18])
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v9 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670 || byte_255795678)
    {
      v10 = qword_255795648;
      for (k = qword_255795650; v10 != k; v10 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v10)(*(_QWORD *)(v10 + 8), "limiting_buffer_", 16, "", 0);
    }
    v12 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "limiting_buffer_", 16, "", 0);
  }
  v13 = (std::__shared_weak_count *)operator new(0x140uLL);
  v13->__shared_owners_ = 0;
  v14 = (unint64_t *)&v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30FA0;
  v15 = v13 + 1;
  sub_2233678FC((uint64_t)&v13[1], (uint64_t *)a2);
  v142 = v13 + 1;
  v143 = v13;
  v16 = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v18 = (uint64_t *)a1[18];
  v19 = (_QWORD *)operator new();
  *v19 = v18 + 7;
  std::mutex::lock((std::mutex *)(v18 + 7));
  *(_QWORD *)&v144 = v19;
  *((_QWORD *)&v144 + 1) = v18;
  if (!*((_BYTE *)v18 + 48))
    sub_22324A974();
  v20 = v18[4];
  v21 = *v18;
  v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
  do
    v23 = __ldxr(v14);
  while (__stxr(v23 + 1, v14));
  *v22 = v15;
  v24 = v21 + 16 * v20;
  v25 = *(std::__shared_weak_count **)(v24 + 8);
  *(_QWORD *)(v24 + 8) = v13;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (v18[1] - *v18) >> 4;
  v29 = v18[5];
  v30 = v18[4] + 1;
  if (v30 >= v28)
    v31 = (v18[1] - *v18) >> 4;
  else
    v31 = 0;
  v18[4] = v30 - v31;
  if (v29 != v28)
  {
    v18[5] = v29 + 1;
    v33 = (std::mutex **)v144;
    if (!(_QWORD)v144)
      goto LABEL_51;
    goto LABEL_50;
  }
  v32 = v18[3] + 1;
  if (v32 < v28)
    v28 = 0;
  v18[3] = v32 - v28;
  v33 = (std::mutex **)v144;
  if ((_QWORD)v144)
  {
LABEL_50:
    std::mutex::unlock(*v33);
    MEMORY[0x227684CE8](v33, 0x20C4093837F09);
  }
LABEL_51:
  v49 = (uint64_t **)a1[9];
  v144 = 0uLL;
  v50 = (std::__shared_weak_count *)a1[5];
  if (v50)
  {
    v51 = std::__shared_weak_count::lock(v50);
    if (v51)
    {
      v52 = v51;
      v53 = a1[4];
      v54 = (unint64_t *)&v51->__shared_weak_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
      *(_QWORD *)&v144 = v53;
      *((_QWORD *)&v144 + 1) = v51;
      v56 = (unint64_t *)&v51->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    else
    {
      v144 = 0uLL;
    }
  }
  v58 = (char *)operator new(0x38uLL);
  *(_QWORD *)v58 = &off_24EC310F0;
  *(_OWORD *)(v58 + 8) = v144;
  v144 = 0uLL;
  *((_QWORD *)v58 + 3) = v15;
  *((_QWORD *)v58 + 4) = v13;
  v145 = 0;
  v146 = 0;
  *((_QWORD *)v58 + 5) = v138;
  *((_QWORD *)v58 + 6) = v139;
  v147[0] = 0;
  v147[1] = 0;
  v149 = (std::string *)v58;
  v59 = *v49;
  if (!*((_DWORD *)*v49 + 6))
  {
    v67 = (std::recursive_mutex *)v59[4];
    if (!v67)
    {
      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 74, (uint64_t)"mtx_", 4, (uint64_t)&unk_2245B6692, 0, (void (*)(void **))sub_22457406C);
      v68 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670 || byte_255795678)
      {
        v69 = qword_255795648;
        for (m = qword_255795650; v69 != m; v69 += 16)
          (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v69)(*(_QWORD *)(v69 + 8), "mtx_", 4, &unk_2245B6692, 0);
      }
      v71 = atomic_load((unsigned __int8 *)&qword_255795680);
      if ((v71 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
      {
        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
        __cxa_guard_release(&qword_255795680);
      }
      if (!byte_255795670)
        goto LABEL_163;
      qword_255795660(*(_QWORD *)algn_255795668, "mtx_", 4, &unk_2245B6692, 0);
      v67 = (std::recursive_mutex *)v59[4];
    }
    std::recursive_mutex::lock(v67);
    if (!v149)
      sub_223198474();
    (*(void (**)(std::string *))(v149->__r_.__value_.__r.__words[0] + 48))(v149);
    std::recursive_mutex::unlock(v67);
    v65 = v149;
    if (v149 != &v148)
      goto LABEL_71;
LABEL_84:
    v66 = 4;
    v65 = &v148;
    goto LABEL_85;
  }
  v60 = *v59;
  if (*v59)
    goto LABEL_70;
  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/src/Channel/NodeTaskScheduler.cpp", 78, (uint64_t)"work_queue_", 11, (uint64_t)&unk_2245B6692, 0, (void (*)(void **))sub_22457406C);
  v61 = atomic_load((unsigned __int8 *)&qword_255795680);
  if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
  {
    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
    __cxa_guard_release(&qword_255795680);
  }
  if (!byte_255795670 || byte_255795678)
  {
    v62 = qword_255795648;
    for (n = qword_255795650; v62 != n; v62 += 16)
      (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v62)(*(_QWORD *)(v62 + 8), "work_queue_", 11, &unk_2245B6692, 0);
  }
  v64 = atomic_load((unsigned __int8 *)&qword_255795680);
  if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
  {
    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
    __cxa_guard_release(&qword_255795680);
  }
  if (!byte_255795670)
LABEL_163:
    abort();
  qword_255795660(*(_QWORD *)algn_255795668, "work_queue_", 11, &unk_2245B6692, 0);
  v60 = *v59;
LABEL_70:
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v60 + 40))(v60, &v148);
  v65 = v149;
  if (v149 == &v148)
    goto LABEL_84;
LABEL_71:
  if (!v65)
    goto LABEL_86;
  v66 = 5;
LABEL_85:
  (*(void (**)(void))(v65->__r_.__value_.__r.__words[0] + 8 * v66))();
LABEL_86:
  if (v143)
  {
    v72 = &v143->__shared_owners_;
    do
      v73 = __ldaxr((unint64_t *)v72);
    while (__stlxr(v73 - 1, (unint64_t *)v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  if (v140)
  {
    v74 = (unint64_t *)&v140->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
}

void sub_223366734(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 192), (const std::exception_ptr *)(v3 - 216));
      v5.__ptr_ = (void *)(v3 - 192);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 192));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 216));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 232));
      if (*(char *)(v3 - 113) < 0)
        operator delete(*(void **)(v3 - 136));
      JUMPOUT(0x223366348);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2233667A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 216));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 232));
  if (*(char *)(v1 - 113) < 0)
  {
    operator delete(*(void **)(v1 - 136));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233667FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::recursive_mutex *v13;
  uint64_t v14;
  _QWORD *v16;
  uint64_t v17;

  std::recursive_mutex::unlock(v13);
  v16 = *(_QWORD **)(v14 - 168);
  if (v16 == (_QWORD *)(v14 - 192))
  {
    v17 = 4;
    v16 = (_QWORD *)(v14 - 192);
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_6:
  sub_223369074(&a13);
  _Unwind_Resume(a1);
}

void sub_22336680C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_223369074((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223366820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;

  if (v54)
    operator delete(v54);
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223366878()
{
  JUMPOUT(0x2233668F8);
}

void sub_22336699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_223167354((uint64_t)&a54);
  sub_223167354(v54 - 248);
  _Unwind_Resume(a1);
}

void sub_2233669B8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223366A2C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC311F0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E1C8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223366B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223366BD0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC31270;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223366CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223366D44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC312F0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223366F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223367024@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC31370;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22336723C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223367304(uint64_t a1)
{
  return sub_223367664(a1 - 16);
}

void sub_22336730C(uint64_t a1)
{
  sub_223367664(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223367334(uint64_t a1, uint64_t a2)
{
  return sub_223366A2C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22336733C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223366D44((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223367344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223367024((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22336734C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223367354(uint64_t a1)
{
  return sub_223367664(a1 - 24);
}

void sub_22336735C(uint64_t a1)
{
  sub_223367664(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223367384(uint64_t a1)
{
  return sub_223366BD0((_QWORD *)(a1 - 24));
}

uint64_t sub_22336738C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_223367394(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2233673FC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_223367464(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *__p;
  void *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v5 = *(uint64_t **)(a1 + 8);
  v6 = (char *)a2[1];
  v27 = *a2;
  __p = 0;
  v29 = 0;
  v30 = 0;
  v7 = (char *)a2[2];
  v8 = v7 - v6;
  if (v7 != v6)
  {
    if (v8 < 0)
      sub_22316E078();
    v9 = (char *)operator new(v7 - v6);
    __p = v9;
    v30 = &v9[16 * (v8 >> 4)];
    v10 = v8 - 16;
    if ((unint64_t)(v8 - 16) < 0x90)
      goto LABEL_23;
    v11 = (v10 & 0xFFFFFFFFFFFFFFF0) + 16;
    if (v9 < &v6[v11] && v6 < &v9[v11])
      goto LABEL_23;
    v13 = (v10 >> 4) + 1;
    v14 = 16 * (v13 & 0x1FFFFFFFFFFFFFFCLL);
    v15 = &v6[v14];
    v16 = &v9[v14];
    v17 = v9 + 32;
    v18 = (__int128 *)(v6 + 32);
    v19 = v13 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *(v18 - 2);
      v20 = *(v18 - 1);
      v23 = *v18;
      v22 = v18[1];
      v18 += 4;
      *(v17 - 2) = v21;
      *(v17 - 1) = v20;
      *v17 = v23;
      v17[1] = v22;
      v17 += 4;
      v19 -= 4;
    }
    while (v19);
    v6 = v15;
    v9 = v16;
    if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      do
      {
        *(_QWORD *)v9 = *(_QWORD *)v6;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v6 + 1);
        v9 += 16;
        v6 += 16;
      }
      while (v6 != v7);
      v16 = v9;
    }
    v29 = v16;
  }
  v31 = a2[4];
  v24 = *(_OWORD *)(a2 + 9);
  v33 = *(_OWORD *)(a2 + 7);
  v34 = v24;
  v35 = *(_OWORD *)(a2 + 11);
  v36 = a2[13];
  v32 = *(_OWORD *)(a2 + 5);
  LOBYTE(v37) = 0;
  v40 = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v25 = *((_OWORD *)a2 + 8);
    v37 = *((_OWORD *)a2 + 7);
    v38 = v25;
    v39 = *((_OWORD *)a2 + 9);
    v40 = 1;
  }
  v26 = *(_OWORD *)(a2 + 35);
  v47 = *(_OWORD *)(a2 + 33);
  v48 = v26;
  v45 = *(_OWORD *)(a2 + 29);
  v46 = *(_OWORD *)(a2 + 31);
  v41 = *(_OWORD *)(a2 + 21);
  v42 = *(_OWORD *)(a2 + 23);
  v43 = *(_OWORD *)(a2 + 25);
  v44 = *(_OWORD *)(a2 + 27);
  sub_2233381C4(v5, (uint64_t)&v27, a3);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_223367644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223367664(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC30DB0;
  *(_QWORD *)(a1 + 16) = &unk_24EC30E28;
  *(_QWORD *)(a1 + 24) = &unk_24EC30E68;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_223367864(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2233678A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233678B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233678E0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t sub_2233678FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (char *)a2[1];
  v5 = (char *)a2[2];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = &v8[16 * (v7 >> 4)];
    v9 = v7 - 16;
    if ((unint64_t)(v7 - 16) < 0x90)
      goto LABEL_21;
    v10 = (v9 & 0xFFFFFFFFFFFFFFF0) + 16;
    if (v8 < &v6[v10] && v6 < &v8[v10])
      goto LABEL_21;
    v12 = (v9 >> 4) + 1;
    v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFCLL);
    v14 = &v6[v13];
    v15 = &v8[v13];
    v16 = v8 + 32;
    v17 = (__int128 *)(v6 + 32);
    v18 = v12 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v20 = *(v17 - 2);
      v19 = *(v17 - 1);
      v22 = *v17;
      v21 = v17[1];
      v17 += 4;
      *(v16 - 2) = v20;
      *(v16 - 1) = v19;
      *v16 = v22;
      v16[1] = v21;
      v16 += 4;
      v18 -= 4;
    }
    while (v18);
    v6 = v14;
    v8 = v15;
    if (v12 != (v12 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      do
      {
        *(_QWORD *)v8 = *(_QWORD *)v6;
        *((_QWORD *)v8 + 1) = *((_QWORD *)v6 + 1);
        v8 += 16;
        v6 += 16;
      }
      while (v6 != v5);
      v15 = v8;
    }
    *(_QWORD *)(a1 + 16) = v15;
  }
  *(_QWORD *)(a1 + 32) = a2[4];
  v23 = *(_OWORD *)(a2 + 7);
  v24 = *(_OWORD *)(a2 + 9);
  v25 = *(_OWORD *)(a2 + 11);
  v26 = a2[13];
  v27 = *(_OWORD *)(a2 + 5);
  *(_BYTE *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 40) = v27;
  *(_QWORD *)(a1 + 104) = v26;
  *(_OWORD *)(a1 + 88) = v25;
  *(_OWORD *)(a1 + 72) = v24;
  *(_OWORD *)(a1 + 56) = v23;
  *(_BYTE *)(a1 + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v28 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 128) = v28;
    *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
    *(_BYTE *)(a1 + 160) = 1;
  }
  v29 = *(_OWORD *)(a2 + 21);
  v30 = *(_OWORD *)(a2 + 23);
  v31 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v31;
  *(_OWORD *)(a1 + 184) = v30;
  *(_OWORD *)(a1 + 168) = v29;
  v32 = *(_OWORD *)(a2 + 29);
  v33 = *(_OWORD *)(a2 + 31);
  v34 = *(_OWORD *)(a2 + 35);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 280) = v34;
  *(_OWORD *)(a1 + 248) = v33;
  *(_OWORD *)(a1 + 232) = v32;
  return a1;
}

void sub_223367AB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223367ACC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30FF0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223367B10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC30FF0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223367B64(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC30FF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223367BD4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC30FF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223367C24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223367C60(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223367C98(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223367FBC((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_223362760(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223367E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_223362760(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223367F44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamer"
                                "aPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223367FB0()
{
  return &unk_24EC31050;
}

void sub_223367FBC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  std::mutex *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  void *v90[3];
  void *v91;
  void *v92;
  void *__p;
  char *v94;
  unsigned __int8 v95;
  std::exception_ptr v96;
  char **v97;
  _QWORD *v98;
  char v99;
  char *v100;
  _QWORD *v101;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v87, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v87);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    v15 = (std::mutex *)(v14 + 24);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v96.__ptr_ = 0, v16 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v96), v16))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v17 = v95;
    *(_BYTE *)(v14 + 248) = v95;
    if (v17)
    {
      *(_QWORD *)(v14 + 152) = 0;
      v18 = v88;
      *(_QWORD *)(v14 + 144) = v87;
      *(_QWORD *)(v14 + 160) = 0;
      *(_QWORD *)(v14 + 168) = 0;
      v19 = v89;
      v96.__ptr_ = (void *)(v14 + 152);
      LOBYTE(v97) = 0;
      v20 = v89 - v18;
      if (v89 != v18)
      {
        v21 = 0x34F72C234F72C235 * (v20 >> 4);
        if (v21 >= 0x8D3DCB08D3DCB1)
          sub_22324A284();
        v22 = (char *)operator new(v20);
        v23 = 0;
        *(_QWORD *)(v14 + 152) = v22;
        *(_QWORD *)(v14 + 160) = v22;
        *(_QWORD *)(v14 + 168) = &v22[464 * v21];
        do
        {
          sub_223249DC0((uint64_t)&v22[v23], (uint64_t)&v18[v23]);
          v23 += 464;
        }
        while (&v18[v23] != v19);
        *(_QWORD *)(v14 + 160) = &v22[v23];
      }
      sub_223323948((_QWORD *)(v14 + 176), (uint64_t)v90);
      *(_QWORD *)(v14 + 224) = 0;
      *(_QWORD *)(v14 + 232) = 0;
      *(_QWORD *)(v14 + 240) = 0;
      v24 = (char *)__p;
      v85 = v94;
      v25 = v94 - (_BYTE *)__p;
      if (v94 != __p)
      {
        v26 = 0xCF3CF3CF3CF3CF3DLL * (v25 >> 3);
        v84 = (std::mutex *)(v14 + 24);
        if (v26 >= 0x186186186186187)
          sub_223323BA8();
        v27 = (char *)operator new(v25);
        *(_QWORD *)(v14 + 224) = v27;
        *(_QWORD *)(v14 + 232) = v27;
        v83 = v14;
        *(_QWORD *)(v14 + 240) = &v27[168 * v26];
        v28 = v27;
        do
        {
          v30 = *(_QWORD *)v24;
          *((_DWORD *)v28 + 2) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v28 = v30;
          v31 = *(_QWORD *)(v24 + 12);
          *((_DWORD *)v28 + 5) = *((_DWORD *)v24 + 5);
          *(_QWORD *)(v28 + 12) = v31;
          v32 = *(_OWORD *)(v24 + 24);
          v33 = *(_OWORD *)(v24 + 40);
          v34 = *(_OWORD *)(v24 + 56);
          *(_OWORD *)(v28 + 72) = *(_OWORD *)(v24 + 72);
          *(_OWORD *)(v28 + 56) = v34;
          *(_OWORD *)(v28 + 40) = v33;
          *(_OWORD *)(v28 + 24) = v32;
          v35 = *((_QWORD *)v24 + 11);
          *((_QWORD *)v28 + 12) = 0;
          *((_QWORD *)v28 + 11) = v35;
          *((_QWORD *)v28 + 14) = 0;
          *((_QWORD *)v28 + 13) = 0;
          v37 = *((_QWORD *)v24 + 12);
          v36 = *((_QWORD *)v24 + 13);
          v38 = v36 - v37;
          if (v36 != v37)
          {
            v86 = v24;
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            if (v39 >= 0xAAAAAAAAAAAAAABLL)
              sub_22324A284();
            v40 = (char *)operator new(v38);
            v41 = 0;
            *((_QWORD *)v28 + 12) = v40;
            *((_QWORD *)v28 + 13) = v40;
            *((_QWORD *)v28 + 14) = &v40[24 * v39];
            v100 = v40;
            v101 = v40;
            v96.__ptr_ = v28 + 112;
            v97 = &v100;
            v98 = &v101;
            v99 = 0;
            do
            {
              v44 = &v40[v41];
              v45 = v37 + v41;
              *(_QWORD *)v44 = 0;
              *((_QWORD *)v44 + 1) = 0;
              *((_QWORD *)v44 + 2) = 0;
              v47 = *(_BYTE **)(v37 + v41);
              v46 = *(_BYTE **)(v37 + v41 + 8);
              v48 = v46 - v47;
              if (v46 != v47)
              {
                if (v48 < 0)
                  sub_22316E078();
                v42 = (char *)operator new(v46 - v47);
                *(_QWORD *)v44 = v42;
                *((_QWORD *)v44 + 1) = v42;
                *((_QWORD *)v44 + 2) = &v42[8 * (v48 >> 3)];
                v43 = v48 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v42, v47, v43);
                *((_QWORD *)v44 + 1) = &v42[v43];
              }
              v101 = v44 + 24;
              v41 += 24;
            }
            while (v45 + 24 != v36);
            *((_QWORD *)v28 + 13) = &v40[v41];
            v24 = v86;
          }
          *((_QWORD *)v28 + 15) = 0;
          *((_QWORD *)v28 + 16) = 0;
          *((_QWORD *)v28 + 17) = 0;
          v49 = *((_QWORD *)v24 + 15);
          v50 = *((_QWORD *)v24 + 16);
          v51 = v50 - v49;
          if (v50 != v49)
          {
            v52 = 0x4EC4EC4EC4EC4EC5 * (v51 >> 3);
            if (v52 >= 0x276276276276277)
              sub_223323BA8();
            v53 = (char *)operator new(v51);
            v54 = 0;
            *((_QWORD *)v28 + 15) = v53;
            *((_QWORD *)v28 + 16) = v53;
            *((_QWORD *)v28 + 17) = &v53[104 * v52];
            do
            {
              v55 = v49 + v54;
              v56 = &v53[v54];
              *v56 = *(_BYTE *)(v49 + v54);
              v57 = *(_OWORD *)(v49 + v54 + 8);
              *(_OWORD *)(v56 + 24) = *(_OWORD *)(v49 + v54 + 24);
              *(_OWORD *)(v56 + 8) = v57;
              v58 = *(_OWORD *)(v49 + v54 + 40);
              v59 = *(_OWORD *)(v49 + v54 + 56);
              v60 = *(_OWORD *)(v49 + v54 + 72);
              *(_OWORD *)(v56 + 88) = *(_OWORD *)(v49 + v54 + 88);
              *(_OWORD *)(v56 + 72) = v60;
              *(_OWORD *)(v56 + 56) = v59;
              *(_OWORD *)(v56 + 40) = v58;
              v54 += 104;
            }
            while (v55 + 104 != v50);
            *((_QWORD *)v28 + 16) = &v53[v54];
          }
          v29 = *((_OWORD *)v24 + 9);
          v28[160] = v24[160];
          *((_OWORD *)v28 + 9) = v29;
          v24 += 168;
          v28 += 168;
        }
        while (v24 != v85);
        v14 = v83;
        v15 = v84;
        *(_QWORD *)(v83 + 232) = v28;
      }
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v87;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock(v15);
  }
  if (v95)
  {
    v61 = (char *)__p;
    if (__p)
    {
      v62 = v94;
      v63 = __p;
      if (v94 != __p)
      {
        do
        {
          v65 = (void *)*((_QWORD *)v62 - 6);
          if (v65)
          {
            *((_QWORD *)v62 - 5) = v65;
            operator delete(v65);
          }
          v66 = *((_QWORD *)v62 - 9);
          if (v66)
          {
            v67 = *((_QWORD *)v62 - 8);
            v64 = (void *)*((_QWORD *)v62 - 9);
            if (v67 != v66)
            {
              v68 = *((_QWORD *)v62 - 8);
              do
              {
                v70 = *(void **)(v68 - 24);
                v68 -= 24;
                v69 = v70;
                if (v70)
                {
                  *(_QWORD *)(v67 - 16) = v69;
                  operator delete(v69);
                }
                v67 = v68;
              }
              while (v68 != v66);
              v64 = (void *)*((_QWORD *)v62 - 9);
            }
            *((_QWORD *)v62 - 8) = v66;
            operator delete(v64);
          }
          v62 -= 168;
        }
        while (v62 != v61);
        v63 = __p;
      }
      v94 = v61;
      operator delete(v63);
    }
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    v71 = (char *)v88;
    if (v88)
    {
      v72 = v89;
      v73 = v88;
      if (v89 != v88)
      {
        do
        {
          if (*(v72 - 16))
          {
            v74 = *((_QWORD *)v72 - 5);
            if (v74)
            {
              v75 = *((_QWORD *)v72 - 4);
              v76 = (void *)*((_QWORD *)v72 - 5);
              if (v75 != v74)
              {
                v77 = *((_QWORD *)v72 - 4);
                do
                {
                  v79 = *(void **)(v77 - 24);
                  v77 -= 24;
                  v78 = v79;
                  if (v79)
                  {
                    *(_QWORD *)(v75 - 16) = v78;
                    operator delete(v78);
                  }
                  v75 = v77;
                }
                while (v77 != v74);
                v76 = (void *)*((_QWORD *)v72 - 5);
              }
              *((_QWORD *)v72 - 4) = v74;
              operator delete(v76);
            }
          }
          if (*(v72 - 48))
          {
            v80 = (void *)*((_QWORD *)v72 - 9);
            if (v80)
            {
              *((_QWORD *)v72 - 8) = v80;
              operator delete(v80);
            }
          }
          if (*(v72 - 80))
          {
            v81 = (void *)*((_QWORD *)v72 - 13);
            if (v81)
            {
              *((_QWORD *)v72 - 12) = v81;
              operator delete(v81);
            }
          }
          v82 = (void *)*((_QWORD *)v72 - 23);
          if (v82)
          {
            *((_QWORD *)v72 - 22) = v82;
            operator delete(v82);
          }
          v72 -= 464;
        }
        while (v72 != v71);
        v73 = v88;
      }
      v89 = v71;
      operator delete(v73);
    }
  }
}

void sub_223368764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::mutex *v47;

  v47 = v33;
  v39 = *v35;
  if (*v35)
  {
    v40 = *(_QWORD *)(v34 + 160);
    v41 = *v35;
    if ((void *)v40 != v39)
    {
      do
      {
        v40 -= 464;
        sub_22324A5A0(v40);
      }
      while ((void *)v40 != v39);
      v41 = *v35;
    }
    *(_QWORD *)(v34 + 160) = v39;
    operator delete(v41);
  }
  std::mutex::unlock(v47);
  if (a33)
    sub_223322918(&a20);
  if (a2 == 1)
  {
    v42 = (uint64_t *)__cxa_begin_catch(a1);
    v43 = *v42;
    *(_QWORD *)(v36 - 104) = *(_QWORD *)(*(_QWORD *)(*v42 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a19 = (*(uint64_t (**)(void))(v43 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)(v36 - 104), "\n", "message: ", (const char *)&a19, "\n");
    v44 = *(char *)(v36 - 113);
    if (v44 >= 0)
      v45 = v36 - 136;
    else
      v45 = *(_QWORD *)(v36 - 136);
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v36 - 113);
    else
      v46 = *(_QWORD *)(v36 - 128);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, v45, v46, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_223368B3C()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  __cxa_end_catch();
  JUMPOUT(0x223368B5CLL);
}

_QWORD *sub_223368B68(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC31070;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223368BB0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC31070;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223368C08(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x140uLL);
  *v2 = &off_24EC31070;
  sub_223368E60((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223368C48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223368C5C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC31070;
  return sub_223368E60((uint64_t)(a2 + 1), a1 + 8);
}

void sub_223368C78(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223368CB8(_QWORD *__p)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223368CF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223367FBC((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_223362760(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223368D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_223362760(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223368DE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamer"
                                "aPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223368E54()
{
  return &unk_24EC310D0;
}

uint64_t sub_223368E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(char **)(a2 + 24);
  v8 = *(char **)(a2 + 32);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_22316E078();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = &v11[16 * (v10 >> 4)];
    v12 = v10 - 16;
    if ((unint64_t)(v10 - 16) < 0x90)
      goto LABEL_24;
    v13 = (v12 & 0xFFFFFFFFFFFFFFF0) + 16;
    if (v11 < &v9[v13] && v9 < &v11[v13])
      goto LABEL_24;
    v15 = (v12 >> 4) + 1;
    v16 = 16 * (v15 & 0x1FFFFFFFFFFFFFFCLL);
    v17 = &v9[v16];
    v18 = &v11[v16];
    v19 = v11 + 32;
    v20 = (__int128 *)(v9 + 32);
    v21 = v15 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(v20 - 2);
      v22 = *(v20 - 1);
      v25 = *v20;
      v24 = v20[1];
      v20 += 4;
      *(v19 - 2) = v23;
      *(v19 - 1) = v22;
      *v19 = v25;
      v19[1] = v24;
      v19 += 4;
      v21 -= 4;
    }
    while (v21);
    v9 = v17;
    v11 = v18;
    if (v15 != (v15 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_24:
      do
      {
        *(_QWORD *)v11 = *(_QWORD *)v9;
        *((_QWORD *)v11 + 1) = *((_QWORD *)v9 + 1);
        v11 += 16;
        v9 += 16;
      }
      while (v9 != v8);
      v18 = v11;
    }
    *(_QWORD *)(a1 + 32) = v18;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v26 = *(_OWORD *)(a2 + 72);
  v27 = *(_OWORD *)(a2 + 88);
  v28 = *(_OWORD *)(a2 + 104);
  v29 = *(_QWORD *)(a2 + 120);
  v30 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = v30;
  *(_QWORD *)(a1 + 120) = v29;
  *(_OWORD *)(a1 + 104) = v28;
  *(_OWORD *)(a1 + 88) = v27;
  *(_OWORD *)(a1 + 72) = v26;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    v31 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v31;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 176) = 1;
  }
  v32 = *(_OWORD *)(a2 + 184);
  v33 = *(_OWORD *)(a2 + 200);
  v34 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v34;
  *(_OWORD *)(a1 + 200) = v33;
  *(_OWORD *)(a1 + 184) = v32;
  v35 = *(_OWORD *)(a2 + 248);
  v36 = *(_OWORD *)(a2 + 264);
  v37 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v37;
  *(_OWORD *)(a1 + 264) = v36;
  *(_OWORD *)(a1 + 248) = v35;
  return a1;
}

void sub_22336903C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223369074(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[40];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[3];
  if (v5)
  {
LABEL_6:
    a1[4] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_2233690F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC310F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22336917C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC310F0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223369214(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC310F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2233692A4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC310F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223369314(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223369394(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223369410(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223367FBC(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_223362760((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2233696EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223369718(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223369524);
    JUMPOUT(0x2233694F4);
  }
  sub_2233236D4(3u);
}

void sub_223369774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2233697A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_223362760(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22336988C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamer"
                                "aPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC"
                                "_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233698F8()
{
  return &unk_24EC31150;
}

_QWORD *sub_223369904(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC31170;
  v2 = (std::__shared_weak_count *)a1[41];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[4];
  if (v5)
  {
LABEL_6:
    a1[5] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223369990(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC31170;
  v2 = (std::__shared_weak_count *)a1[41];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  a1[5] = v5;
  operator delete(v5);
  goto LABEL_7;
}

_QWORD *sub_223369A2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x150uLL);
  *v2 = &off_24EC31170;
  sub_223369E0C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_223369A6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223369A80(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC31170;
  return sub_223369E0C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_223369A9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[41];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[4];
  if (v5)
  {
LABEL_6:
    a1[5] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223369B20(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[41];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)__p[4];
  if (v5)
  {
LABEL_6:
    __p[5] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223369BA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[40];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223367FBC((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_223362760((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223369CB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223369D28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223369D5CLL);
  JUMPOUT(0x223369D8CLL);
}

uint64_t sub_223369D94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamer"
                                "aPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223369E00()
{
  return &unk_24EC311D0;
}

uint64_t sub_223369E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(char **)(a2 + 24);
  v8 = *(char **)(a2 + 32);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_22316E078();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = &v11[16 * (v10 >> 4)];
    v12 = v10 - 16;
    if ((unint64_t)(v10 - 16) < 0x90)
      goto LABEL_27;
    v13 = (v12 & 0xFFFFFFFFFFFFFFF0) + 16;
    if (v11 < &v9[v13] && v9 < &v11[v13])
      goto LABEL_27;
    v15 = (v12 >> 4) + 1;
    v16 = 16 * (v15 & 0x1FFFFFFFFFFFFFFCLL);
    v17 = &v9[v16];
    v18 = &v11[v16];
    v19 = v11 + 32;
    v20 = (__int128 *)(v9 + 32);
    v21 = v15 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(v20 - 2);
      v22 = *(v20 - 1);
      v25 = *v20;
      v24 = v20[1];
      v20 += 4;
      *(v19 - 2) = v23;
      *(v19 - 1) = v22;
      *v19 = v25;
      v19[1] = v24;
      v19 += 4;
      v21 -= 4;
    }
    while (v21);
    v9 = v17;
    v11 = v18;
    if (v15 != (v15 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        *(_QWORD *)v11 = *(_QWORD *)v9;
        *((_QWORD *)v11 + 1) = *((_QWORD *)v9 + 1);
        v11 += 16;
        v9 += 16;
      }
      while (v9 != v8);
      v18 = v11;
    }
    *(_QWORD *)(a1 + 32) = v18;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v26 = *(_OWORD *)(a2 + 72);
  v27 = *(_OWORD *)(a2 + 88);
  v28 = *(_OWORD *)(a2 + 104);
  v29 = *(_QWORD *)(a2 + 120);
  v30 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = v30;
  *(_QWORD *)(a1 + 120) = v29;
  *(_OWORD *)(a1 + 104) = v28;
  *(_OWORD *)(a1 + 88) = v27;
  *(_OWORD *)(a1 + 72) = v26;
  *(_BYTE *)(a1 + 176) = 0;
  if (*(_BYTE *)(a2 + 176))
  {
    v31 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v31;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 176) = 1;
  }
  v32 = *(_OWORD *)(a2 + 184);
  v33 = *(_OWORD *)(a2 + 200);
  v34 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v34;
  *(_OWORD *)(a1 + 200) = v33;
  *(_OWORD *)(a1 + 184) = v32;
  v35 = *(_OWORD *)(a2 + 248);
  v36 = *(_OWORD *)(a2 + 264);
  v37 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v37;
  *(_OWORD *)(a1 + 264) = v36;
  *(_OWORD *)(a1 + 248) = v35;
  v38 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  return a1;
}

void sub_22336A008(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22336A040(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC311F0;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22336A098(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC311F0;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336A100(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC311F0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E1C8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22336A178(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22336A198(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC311F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E1C8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22336A200(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22336A218(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22336A268(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E1C8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22336A2B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E1C8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22336A368(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22336A3A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundl"
                     "eENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9"
                     "SubscribeENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamera"
                                "PixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetect"
                                "ion5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336A410()
{
  return &unk_24EC31250;
}

_QWORD *sub_22336A41C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC31270;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22336A454(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC31270;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336A49C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC31270;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22336A4EC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC31270;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22336A51C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22336A52C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22336A558(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22336A5EC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22336A628(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundl"
                     "eENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE1"
                     "5AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamera"
                                "PixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetect"
                                "ion5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336A694()
{
  return &unk_24EC312D0;
}

_QWORD *sub_22336A6A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC312F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22336A6D8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC312F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336A720(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC312F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22336A778(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC312F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22336A7B0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22336A7C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22336A7EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22336A968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22336A9D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamer"
                                "aPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336AA44()
{
  return &unk_24EC31350;
}

_QWORD *sub_22336AA50(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC31370;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22336AA88(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC31370;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336AAD0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC31370;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22336AB28(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC31370;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22336AB60(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22336AB70(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22336AB9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22336AC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22336ACA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCamer"
                                "aPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336AD0C()
{
  return &unk_24EC313D0;
}

void sub_22336AD1C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22336AD40(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22336AD58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd28InputDe"
                     "pthCameraPixelsBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetectio"
                     "n5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS7_22SurfaceDetectionResult"
                                "ENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd28InputDepthCameraPixelsBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22336ADC8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22336ADF4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336AE30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC31440;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22336AE98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22336AF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22336AF3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22336AFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22336AFE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22336B0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22336B0B8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22336B17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22336B190(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22336B234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22336B24C(uint64_t a1)
{
  sub_22336D040(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22336B270(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::mutex **v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  __int128 v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  _BYTE v87[24];
  _BYTE *v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    sub_22336D3D4(&v82, a2);
    v5 = v82;
    v4 = v83;
    if (v83)
    {
      p_shared_weak_owners = (unint64_t *)&v83->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = a1[18];
    v9 = (_QWORD *)operator new();
    *v9 = v8 + 56;
    std::mutex::lock((std::mutex *)(v8 + 56));
    *(_QWORD *)&v84 = v9;
    *((_QWORD *)&v84 + 1) = v8;
    if (!*(_BYTE *)(v8 + 48))
      sub_22324A974();
    v10 = (_QWORD *)(*(_QWORD *)v8 + 16 * *(_QWORD *)(v8 + 32));
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::__shared_weak_count *)v10[1];
    *v10 = v5;
    v10[1] = v4;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    v17 = *(_QWORD *)(v8 + 40);
    v18 = *(_QWORD *)(v8 + 32) + 1;
    if (v18 >= v16)
      v19 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    else
      v19 = 0;
    *(_QWORD *)(v8 + 32) = v18 - v19;
    if (v17 == v16)
    {
      v20 = *(_QWORD *)(v8 + 24) + 1;
      if (v20 < v16)
        v16 = 0;
      *(_QWORD *)(v8 + 24) = v20 - v16;
      v21 = (std::mutex **)v84;
      if (!(_QWORD)v84)
      {
LABEL_35:
        v30 = (uint64_t **)a1[9];
        v84 = 0uLL;
        v31 = (std::__shared_weak_count *)a1[5];
        if (v31)
        {
          v32 = std::__shared_weak_count::lock(v31);
          if (v32)
          {
            v33 = v32;
            v34 = a1[4];
            v35 = (unint64_t *)&v32->__shared_weak_owners_;
            do
              v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
            *(_QWORD *)&v84 = v34;
            *((_QWORD *)&v84 + 1) = v32;
            v37 = (unint64_t *)&v32->__shared_owners_;
            do
              v38 = __ldaxr(v37);
            while (__stlxr(v38 - 1, v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          else
          {
            v84 = 0uLL;
          }
        }
        v85 = v5;
        v86 = v4;
        v88 = 0;
        v39 = (char *)operator new(0x30uLL);
        *(_QWORD *)v39 = &off_24EC316F8;
        *(_OWORD *)(v39 + 8) = v84;
        v84 = 0uLL;
        *((_QWORD *)v39 + 3) = v5;
        *((_QWORD *)v39 + 4) = v4;
        v85 = 0;
        v86 = 0;
        v88 = v39;
        sub_2245022E4(*v30, (uint64_t)v87);
        v40 = v88;
        if (v88 == v87)
        {
          v41 = 4;
          v40 = v87;
        }
        else
        {
          if (!v88)
            goto LABEL_49;
          v41 = 5;
        }
        (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_49:
        v42 = v83;
        if (v83)
        {
          v43 = (unint64_t *)&v83->__shared_owners_;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v8 + 40) = v17 + 1;
      v21 = (std::mutex **)v84;
      if (!(_QWORD)v84)
        goto LABEL_35;
    }
    std::mutex::unlock(*v21);
    MEMORY[0x227684CE8](v21, 0x20C4093837F09);
    goto LABEL_35;
  }
  v77 = (uint64_t **)a1[9];
  v78 = 0uLL;
  v22 = (std::__shared_weak_count *)a1[5];
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      v24 = v23;
      v25 = a1[4];
      v26 = (unint64_t *)&v23->__shared_weak_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      *(_QWORD *)&v78 = v25;
      *((_QWORD *)&v78 + 1) = v23;
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    else
    {
      v78 = 0uLL;
    }
  }
  v76 = *(_QWORD *)a2;
  v45 = *(_QWORD *)(a2 + 24);
  v75 = *(_QWORD *)(a2 + 16);
  if (v45)
  {
    v46 = (unint64_t *)(v45 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = *(_QWORD *)(a2 + 48);
  v74 = *(_QWORD *)(a2 + 40);
  if (v48)
  {
    v49 = (unint64_t *)(v48 + 8);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  v51 = *(_QWORD *)(a2 + 72);
  v73 = *(_QWORD *)(a2 + 64);
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v54 = *(_QWORD *)(a2 + 96);
  v72 = *(_QWORD *)(a2 + 88);
  if (v54)
  {
    v55 = (unint64_t *)(v54 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = *(_QWORD *)(a2 + 120);
  v71 = *(_QWORD *)(a2 + 112);
  if (v57)
  {
    v58 = (unint64_t *)(v57 + 8);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v70 = *(_QWORD *)(a2 + 128);
  LOBYTE(v79) = 0;
  v60 = *(unsigned __int8 *)(a2 + 256);
  if (*(_BYTE *)(a2 + 256))
  {
    v79 = *(_OWORD *)(a2 + 208);
    v80 = *(_OWORD *)(a2 + 224);
    v81 = *(_OWORD *)(a2 + 240);
  }
  v86 = 0;
  v61 = (char *)operator new(0x1A0uLL);
  *(_QWORD *)v61 = &off_24EC31778;
  *(_OWORD *)(v61 + 8) = v78;
  *((_QWORD *)v61 + 3) = v76;
  *((_QWORD *)v61 + 4) = &off_24EC715B8;
  *((_QWORD *)v61 + 5) = v75;
  *((_QWORD *)v61 + 6) = v45;
  *((_QWORD *)v61 + 7) = &off_24EC715B8;
  *((_QWORD *)v61 + 8) = v74;
  *((_QWORD *)v61 + 9) = v48;
  *((_QWORD *)v61 + 10) = &off_24EC715B8;
  *((_QWORD *)v61 + 11) = v73;
  *((_QWORD *)v61 + 12) = v51;
  *((_QWORD *)v61 + 13) = &off_24EC715B8;
  *((_QWORD *)v61 + 14) = v72;
  *((_QWORD *)v61 + 15) = v54;
  *((_QWORD *)v61 + 16) = &off_24EC715B8;
  *((_QWORD *)v61 + 17) = v71;
  *((_QWORD *)v61 + 18) = v57;
  *((_QWORD *)v61 + 19) = v70;
  v62 = *(_OWORD *)(a2 + 184);
  *((_OWORD *)v61 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v61 + 13) = v62;
  *((_QWORD *)v61 + 28) = *(_QWORD *)(a2 + 200);
  v63 = *(_OWORD *)(a2 + 152);
  *((_OWORD *)v61 + 10) = *(_OWORD *)(a2 + 136);
  *((_OWORD *)v61 + 11) = v63;
  v61[232] = 0;
  v61[280] = 0;
  if (v60)
  {
    *(_OWORD *)(v61 + 232) = v79;
    *(_OWORD *)(v61 + 248) = v80;
    *(_OWORD *)(v61 + 264) = v81;
    v61[280] = 1;
  }
  v64 = *(_OWORD *)(a2 + 344);
  *((_OWORD *)v61 + 22) = *(_OWORD *)(a2 + 328);
  *((_OWORD *)v61 + 23) = v64;
  v65 = *(_OWORD *)(a2 + 376);
  *((_OWORD *)v61 + 24) = *(_OWORD *)(a2 + 360);
  *((_OWORD *)v61 + 25) = v65;
  v66 = *(_OWORD *)(a2 + 280);
  *((_OWORD *)v61 + 18) = *(_OWORD *)(a2 + 264);
  *((_OWORD *)v61 + 19) = v66;
  v67 = *(_OWORD *)(a2 + 312);
  *((_OWORD *)v61 + 20) = *(_OWORD *)(a2 + 296);
  *((_OWORD *)v61 + 21) = v67;
  v86 = (std::__shared_weak_count *)v61;
  sub_2245022E4(*v77, (uint64_t)&v84);
  v68 = (__int128 *)v86;
  if (v86 == (std::__shared_weak_count *)&v84)
  {
    v69 = 4;
    v68 = &v84;
  }
  else
  {
    if (!v86)
      return;
    v69 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v68 + 8 * v69))();
}

void sub_22336B8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a9);
  v12 = *(_QWORD **)(v10 - 152);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 176);
  }
  else
  {
    if (!v12)
    {
      sub_22336D240((uint64_t *)va);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_22336D240((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22336B910(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 112);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 136);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_223322894(v2 - 176);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_22336B960(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_223322848((std::mutex ***)(v2 - 176));
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_22336B9B8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22336B9C8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22336B9D4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22336B9E4(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::mutex **v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  std::string *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  char *v70;
  __int128 *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  std::string *v77;
  std::runtime_error *exception;
  std::runtime_error *v79;
  uint64_t **v80;
  std::__shared_weak_count *v81[2];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  std::runtime_error v107;
  _QWORD *v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  std::string v115;
  std::string *v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v110 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v110 + 1) = 45;
    v75 = (_QWORD *)a1[6];
    v74 = a1 + 6;
    v73 = v75;
    v76 = (std::__shared_weak_count *)*((unsigned __int8 *)v74 + 23);
    if ((char)v76 < 0)
      v76 = (std::__shared_weak_count *)v74[1];
    else
      v73 = v74;
    v111 = v73;
    v112 = v76;
    sub_2231A9820((uint64_t)&v110, (uint64_t)&v113, 0, 0, &v115);
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &v115;
    else
      v77 = (std::string *)v115.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v107, (const char *)v77);
    v107.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v79 = std::runtime_error::runtime_error(exception, &v107);
    v79->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v79, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
    v6[1].__vftable = *a3;
    v106 = v6;
    v104 = &v6[1].__vftable;
    v105 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_22336D3D4(&v108, a2);
    v10 = v108;
    v9 = v109;
    if (v109)
    {
      p_shared_weak_owners = (unint64_t *)&v109->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 56;
    std::mutex::lock((std::mutex *)(v13 + 56));
    *(_QWORD *)&v110 = v14;
    *((_QWORD *)&v110 + 1) = v13;
    if (!*(_BYTE *)(v13 + 48))
      sub_22324A974();
    v15 = (_QWORD *)(*(_QWORD *)v13 + 16 * *(_QWORD *)(v13 + 32));
    if (v9)
    {
      v16 = (unint64_t *)&v9->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)v15[1];
    *v15 = v10;
    v15[1] = v9;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    v22 = *(_QWORD *)(v13 + 40);
    v23 = *(_QWORD *)(v13 + 32) + 1;
    if (v23 >= v21)
      v24 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    else
      v24 = 0;
    *(_QWORD *)(v13 + 32) = v23 - v24;
    if (v22 == v21)
    {
      v25 = *(_QWORD *)(v13 + 24) + 1;
      if (v25 < v21)
        v21 = 0;
      *(_QWORD *)(v13 + 24) = v25 - v21;
      v26 = (std::mutex **)v110;
      if (!(_QWORD)v110)
      {
LABEL_39:
        v35 = (uint64_t **)a1[9];
        v110 = 0uLL;
        v36 = (std::__shared_weak_count *)a1[5];
        if (v36)
        {
          v37 = std::__shared_weak_count::lock(v36);
          if (v37)
          {
            v38 = v37;
            v39 = a1[4];
            v40 = (unint64_t *)&v37->__shared_weak_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            *(_QWORD *)&v110 = v39;
            *((_QWORD *)&v110 + 1) = v37;
            v42 = (unint64_t *)&v37->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          else
          {
            v110 = 0uLL;
          }
        }
        v111 = v10;
        v112 = v9;
        v113 = v104;
        v114 = v105;
        v116 = 0;
        v44 = (char *)operator new(0x38uLL);
        *(_QWORD *)v44 = &off_24EC317F8;
        *(_OWORD *)(v44 + 8) = v110;
        v110 = 0uLL;
        *((_QWORD *)v44 + 3) = v10;
        *((_QWORD *)v44 + 4) = v9;
        v111 = 0;
        v112 = 0;
        *((_QWORD *)v44 + 5) = v104;
        *((_QWORD *)v44 + 6) = v105;
        v113 = 0;
        v114 = 0;
        v116 = (std::string *)v44;
        sub_2245022E4(*v35, (uint64_t)&v115);
        v45 = v116;
        if (v116 == &v115)
        {
          v46 = 4;
          v45 = &v115;
        }
        else
        {
          if (!v116)
            goto LABEL_53;
          v46 = 5;
        }
        (*(void (**)(void))(v45->__r_.__value_.__r.__words[0] + 8 * v46))();
LABEL_53:
        v47 = v109;
        if (v109)
        {
          v48 = (unint64_t *)&v109->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        if (v106)
        {
          v50 = (unint64_t *)&v106->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v13 + 40) = v22 + 1;
      v26 = (std::mutex **)v110;
      if (!(_QWORD)v110)
        goto LABEL_39;
    }
    std::mutex::unlock(*v26);
    MEMORY[0x227684CE8](v26, 0x20C4093837F09);
    goto LABEL_39;
  }
  v80 = (uint64_t **)a1[9];
  *(_OWORD *)v81 = 0uLL;
  v27 = (std::__shared_weak_count *)a1[5];
  if (v27)
  {
    v28 = std::__shared_weak_count::lock(v27);
    if (v28)
    {
      v29 = v28;
      v30 = (std::__shared_weak_count *)a1[4];
      v31 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v81[0] = v30;
      v81[1] = v28;
      v33 = (unint64_t *)&v28->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      *(_OWORD *)v81 = 0uLL;
    }
  }
  v82 = *(_QWORD *)a2;
  v52 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v83 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v83 + 1) = v52;
  if (v52)
  {
    v53 = (unint64_t *)(v52 + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)&v84 = *(_QWORD *)(a2 + 40);
  *((_QWORD *)&v84 + 1) = v55;
  if (v55)
  {
    v56 = (unint64_t *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)&v85 = *(_QWORD *)(a2 + 64);
  *((_QWORD *)&v85 + 1) = v58;
  if (v58)
  {
    v59 = (unint64_t *)(v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)&v86 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)&v86 + 1) = v61;
  if (v61)
  {
    v62 = (unint64_t *)(v61 + 8);
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  v64 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)&v87 = *(_QWORD *)(a2 + 112);
  *((_QWORD *)&v87 + 1) = v64;
  if (v64)
  {
    v65 = (unint64_t *)(v64 + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  v67 = *(_QWORD *)(a2 + 128);
  v89 = *(_OWORD *)(a2 + 152);
  v90 = *(_OWORD *)(a2 + 168);
  v91 = *(_OWORD *)(a2 + 184);
  v92 = *(_QWORD *)(a2 + 200);
  v88 = *(_OWORD *)(a2 + 136);
  LOBYTE(v93) = 0;
  v68 = *(unsigned __int8 *)(a2 + 256);
  if (*(_BYTE *)(a2 + 256))
  {
    v93 = *(_OWORD *)(a2 + 208);
    v94 = *(_OWORD *)(a2 + 224);
    v95 = *(_OWORD *)(a2 + 240);
  }
  v100 = *(_OWORD *)(a2 + 328);
  v101 = *(_OWORD *)(a2 + 344);
  v102 = *(_OWORD *)(a2 + 360);
  v103 = *(_OWORD *)(a2 + 376);
  v96 = *(_OWORD *)(a2 + 264);
  v97 = *(_OWORD *)(a2 + 280);
  v98 = *(_OWORD *)(a2 + 296);
  v99 = *(_OWORD *)(a2 + 312);
  v69 = operator new(0x20uLL);
  v69[1] = 0;
  v69[2] = 0;
  *v69 = &off_24EC30998;
  v69[3] = *a3;
  *a3 = 0;
  v112 = 0;
  v70 = (char *)operator new(0x1B0uLL);
  *(_QWORD *)v70 = &off_24EC31878;
  *(_OWORD *)(v70 + 8) = *(_OWORD *)v81;
  *((_QWORD *)v70 + 3) = v82;
  *((_QWORD *)v70 + 4) = &off_24EC715B8;
  *(_OWORD *)(v70 + 40) = v83;
  *((_QWORD *)v70 + 7) = &off_24EC715B8;
  *((_OWORD *)v70 + 4) = v84;
  *((_QWORD *)v70 + 10) = &off_24EC715B8;
  *(_OWORD *)(v70 + 88) = v85;
  *((_QWORD *)v70 + 13) = &off_24EC715B8;
  *((_OWORD *)v70 + 7) = v86;
  *((_QWORD *)v70 + 16) = &off_24EC715B8;
  *(_OWORD *)(v70 + 136) = v87;
  *((_QWORD *)v70 + 19) = v67;
  *((_QWORD *)v70 + 28) = v92;
  *((_OWORD *)v70 + 12) = v90;
  *((_OWORD *)v70 + 13) = v91;
  *((_OWORD *)v70 + 10) = v88;
  *((_OWORD *)v70 + 11) = v89;
  v70[232] = 0;
  v70[280] = 0;
  if (v68)
  {
    *(_OWORD *)(v70 + 232) = v93;
    *(_OWORD *)(v70 + 248) = v94;
    *(_OWORD *)(v70 + 264) = v95;
    v70[280] = 1;
  }
  *((_OWORD *)v70 + 22) = v100;
  *((_OWORD *)v70 + 23) = v101;
  *((_OWORD *)v70 + 24) = v102;
  *((_OWORD *)v70 + 25) = v103;
  *((_OWORD *)v70 + 18) = v96;
  *((_OWORD *)v70 + 19) = v97;
  *((_OWORD *)v70 + 20) = v98;
  *((_OWORD *)v70 + 21) = v99;
  *((_QWORD *)v70 + 52) = v69 + 3;
  *((_QWORD *)v70 + 53) = v69;
  v112 = (std::__shared_weak_count *)v70;
  sub_2245022E4(*v80, (uint64_t)&v110);
  v71 = (__int128 *)v112;
  if (v112 == (std::__shared_weak_count *)&v110)
  {
    v72 = 4;
    v71 = &v110;
  }
  else
  {
    if (!v112)
      return;
    v72 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v71 + 8 * v72))(v71);
}

void sub_22336C384(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (v4)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 192), (const std::exception_ptr *)(v3 - 216));
      v5.__ptr_ = (void *)(v3 - 192);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 192));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 216));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 232));
      if (*(char *)(v3 - 113) < 0)
        operator delete(*(void **)(v3 - 136));
      JUMPOUT(0x22336C294);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_22336C3F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 216));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 232));
  if (*(char *)(v1 - 113) < 0)
  {
    operator delete(*(void **)(v1 - 136));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22336C44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  v6 = *(_QWORD **)(v4 - 168);
  if (v6 == v3)
  {
    v7 = 4;
    v6 = (_QWORD *)(v4 - 192);
  }
  else
  {
    if (!v6)
    {
      sub_22336F16C((uint64_t *)va);
      _Unwind_Resume(a1);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
  sub_22336F16C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22336C4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  sub_223247BF8(a9);
  if (a12)
  {
    std::__shared_weak_count::__release_weak(a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22336C4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v67;
  uint64_t v68;

  v67 = *(_QWORD **)(v65 - 112);
  if (v67 == v64)
  {
    v68 = 4;
    v67 = (_QWORD *)(v65 - 136);
  }
  else
  {
    if (!v67)
      goto LABEL_6;
    v68 = 5;
  }
  (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_6:
  sub_22332429C((_QWORD *)(v65 - 192));
  sub_223167354(v65 - 208);
  sub_223167354((uint64_t)&a64);
  sub_223167354(v65 - 248);
  _Unwind_Resume(a1);
}

void sub_22336C570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  sub_223167354((uint64_t)&a64);
  sub_223167354(v64 - 248);
  _Unwind_Resume(a1);
}

void sub_22336C58C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22336C600(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC318F8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E1C8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22336C730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22336C7A4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC31978;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22336C8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22336C918@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC319F8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22336CB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22336CBF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC31A78;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22336CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22336CED8(uint64_t a1)
{
  return sub_22336D040(a1 - 16);
}

void sub_22336CEE0(uint64_t a1)
{
  sub_22336D040(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336CF08(uint64_t a1, uint64_t a2)
{
  return sub_22336C600((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22336CF10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22336C918((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22336CF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22336CBF8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22336CF20(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22336CF28(uint64_t a1)
{
  return sub_22336D040(a1 - 24);
}

void sub_22336CF30(uint64_t a1)
{
  sub_22336D040(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336CF58(uint64_t a1)
{
  return sub_22336C7A4((_QWORD *)(a1 - 24));
}

uint64_t sub_22336CF60(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22336CF68(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22336CFD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_22336D038(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_22333AC00(*(uint64_t **)(a1 + 8), a2, a3);
}

uint64_t sub_22336D040(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC314B8;
  *(_QWORD *)(a1 + 16) = &unk_24EC31530;
  *(_QWORD *)(a1 + 24) = &unk_24EC31570;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_22336D240(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  a1[15] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[12] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[14];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[12] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[14];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[9] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[11];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[6] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[8];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[6] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[8];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[3] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[5];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (std::__shared_weak_count *)a1[1];
      if (!v17)
        return a1;
      goto LABEL_26;
    }
  }
  v17 = (std::__shared_weak_count *)a1[1];
  if (v17)
LABEL_26:
    std::__shared_weak_count::__release_weak(v17);
  return a1;
}

__n128 sub_22336D3D4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 result;
  __int128 v31;

  v4 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = *(_QWORD *)a2;
  *(_QWORD *)v4 = &off_24EC316A8;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v4 + 4) = &off_24EC715B8;
  *((_QWORD *)v4 + 5) = v6;
  *((_QWORD *)v4 + 6) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *((_QWORD *)v4 + 7) = &off_24EC715B8;
  *((_QWORD *)v4 + 8) = v10;
  *((_QWORD *)v4 + 9) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v14 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  *((_QWORD *)v4 + 10) = &off_24EC715B8;
  *((_QWORD *)v4 + 11) = v14;
  *((_QWORD *)v4 + 12) = v13;
  if (v13)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v18 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a2 + 96);
  *((_QWORD *)v4 + 13) = &off_24EC715B8;
  *((_QWORD *)v4 + 14) = v18;
  *((_QWORD *)v4 + 15) = v17;
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v22 = *(_QWORD *)(a2 + 112);
  v21 = *(_QWORD *)(a2 + 120);
  *((_QWORD *)v4 + 16) = &off_24EC715B8;
  *((_QWORD *)v4 + 17) = v22;
  *((_QWORD *)v4 + 18) = v21;
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *(_QWORD *)(a2 + 128);
  v4[232] = 0;
  *((_QWORD *)v4 + 19) = v25;
  *((_OWORD *)v4 + 11) = *(_OWORD *)(a2 + 152);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a2 + 168);
  *((_OWORD *)v4 + 13) = *(_OWORD *)(a2 + 184);
  *((_QWORD *)v4 + 28) = *(_QWORD *)(a2 + 200);
  *((_OWORD *)v4 + 10) = *(_OWORD *)(a2 + 136);
  v4[280] = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    v26 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(v4 + 232) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(v4 + 248) = v26;
    *(_OWORD *)(v4 + 264) = *(_OWORD *)(a2 + 240);
    v4[280] = 1;
  }
  v27 = *(_OWORD *)(a2 + 344);
  *((_OWORD *)v4 + 22) = *(_OWORD *)(a2 + 328);
  *((_OWORD *)v4 + 23) = v27;
  v28 = *(_OWORD *)(a2 + 376);
  *((_OWORD *)v4 + 24) = *(_OWORD *)(a2 + 360);
  *((_OWORD *)v4 + 25) = v28;
  v29 = *(_OWORD *)(a2 + 280);
  *((_OWORD *)v4 + 18) = *(_OWORD *)(a2 + 264);
  *((_OWORD *)v4 + 19) = v29;
  result = *(__n128 *)(a2 + 296);
  v31 = *(_OWORD *)(a2 + 312);
  *((__n128 *)v4 + 20) = result;
  *((_OWORD *)v4 + 21) = v31;
  *a1 = v4 + 24;
  a1[1] = v4;
  return result;
}

void sub_22336D55C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC316A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22336D56C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC316A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22336D59C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  a1[16] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[10] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[12];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[4] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[6];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

_QWORD *sub_22336D724(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC316F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22336D768(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC316F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336D7BC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC316F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22336D82C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC316F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22336D87C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22336D8B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22336D8F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_22336DC14((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_223362760(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22336DAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_223362760(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22336DB9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBun"
                     "dleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0E"
                     "E25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsW"
                                "ithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDete"
                                "ction5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336DC08()
{
  return &unk_24EC31758;
}

void sub_22336DC14(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  std::mutex *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  void *v90[3];
  void *v91;
  void *v92;
  void *__p;
  char *v94;
  unsigned __int8 v95;
  std::exception_ptr v96;
  char **v97;
  _QWORD *v98;
  char v99;
  char *v100;
  _QWORD *v101;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v87, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v87);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    v15 = (std::mutex *)(v14 + 24);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v96.__ptr_ = 0, v16 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v96), v16))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v17 = v95;
    *(_BYTE *)(v14 + 248) = v95;
    if (v17)
    {
      *(_QWORD *)(v14 + 152) = 0;
      v18 = v88;
      *(_QWORD *)(v14 + 144) = v87;
      *(_QWORD *)(v14 + 160) = 0;
      *(_QWORD *)(v14 + 168) = 0;
      v19 = v89;
      v96.__ptr_ = (void *)(v14 + 152);
      LOBYTE(v97) = 0;
      v20 = v89 - v18;
      if (v89 != v18)
      {
        v21 = 0x34F72C234F72C235 * (v20 >> 4);
        if (v21 >= 0x8D3DCB08D3DCB1)
          sub_22324A284();
        v22 = (char *)operator new(v20);
        v23 = 0;
        *(_QWORD *)(v14 + 152) = v22;
        *(_QWORD *)(v14 + 160) = v22;
        *(_QWORD *)(v14 + 168) = &v22[464 * v21];
        do
        {
          sub_223249DC0((uint64_t)&v22[v23], (uint64_t)&v18[v23]);
          v23 += 464;
        }
        while (&v18[v23] != v19);
        *(_QWORD *)(v14 + 160) = &v22[v23];
      }
      sub_223323948((_QWORD *)(v14 + 176), (uint64_t)v90);
      *(_QWORD *)(v14 + 224) = 0;
      *(_QWORD *)(v14 + 232) = 0;
      *(_QWORD *)(v14 + 240) = 0;
      v24 = (char *)__p;
      v85 = v94;
      v25 = v94 - (_BYTE *)__p;
      if (v94 != __p)
      {
        v26 = 0xCF3CF3CF3CF3CF3DLL * (v25 >> 3);
        v84 = (std::mutex *)(v14 + 24);
        if (v26 >= 0x186186186186187)
          sub_223323BA8();
        v27 = (char *)operator new(v25);
        *(_QWORD *)(v14 + 224) = v27;
        *(_QWORD *)(v14 + 232) = v27;
        v83 = v14;
        *(_QWORD *)(v14 + 240) = &v27[168 * v26];
        v28 = v27;
        do
        {
          v30 = *(_QWORD *)v24;
          *((_DWORD *)v28 + 2) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v28 = v30;
          v31 = *(_QWORD *)(v24 + 12);
          *((_DWORD *)v28 + 5) = *((_DWORD *)v24 + 5);
          *(_QWORD *)(v28 + 12) = v31;
          v32 = *(_OWORD *)(v24 + 24);
          v33 = *(_OWORD *)(v24 + 40);
          v34 = *(_OWORD *)(v24 + 56);
          *(_OWORD *)(v28 + 72) = *(_OWORD *)(v24 + 72);
          *(_OWORD *)(v28 + 56) = v34;
          *(_OWORD *)(v28 + 40) = v33;
          *(_OWORD *)(v28 + 24) = v32;
          v35 = *((_QWORD *)v24 + 11);
          *((_QWORD *)v28 + 12) = 0;
          *((_QWORD *)v28 + 11) = v35;
          *((_QWORD *)v28 + 14) = 0;
          *((_QWORD *)v28 + 13) = 0;
          v37 = *((_QWORD *)v24 + 12);
          v36 = *((_QWORD *)v24 + 13);
          v38 = v36 - v37;
          if (v36 != v37)
          {
            v86 = v24;
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            if (v39 >= 0xAAAAAAAAAAAAAABLL)
              sub_22324A284();
            v40 = (char *)operator new(v38);
            v41 = 0;
            *((_QWORD *)v28 + 12) = v40;
            *((_QWORD *)v28 + 13) = v40;
            *((_QWORD *)v28 + 14) = &v40[24 * v39];
            v100 = v40;
            v101 = v40;
            v96.__ptr_ = v28 + 112;
            v97 = &v100;
            v98 = &v101;
            v99 = 0;
            do
            {
              v44 = &v40[v41];
              v45 = v37 + v41;
              *(_QWORD *)v44 = 0;
              *((_QWORD *)v44 + 1) = 0;
              *((_QWORD *)v44 + 2) = 0;
              v47 = *(_BYTE **)(v37 + v41);
              v46 = *(_BYTE **)(v37 + v41 + 8);
              v48 = v46 - v47;
              if (v46 != v47)
              {
                if (v48 < 0)
                  sub_22316E078();
                v42 = (char *)operator new(v46 - v47);
                *(_QWORD *)v44 = v42;
                *((_QWORD *)v44 + 1) = v42;
                *((_QWORD *)v44 + 2) = &v42[8 * (v48 >> 3)];
                v43 = v48 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v42, v47, v43);
                *((_QWORD *)v44 + 1) = &v42[v43];
              }
              v101 = v44 + 24;
              v41 += 24;
            }
            while (v45 + 24 != v36);
            *((_QWORD *)v28 + 13) = &v40[v41];
            v24 = v86;
          }
          *((_QWORD *)v28 + 15) = 0;
          *((_QWORD *)v28 + 16) = 0;
          *((_QWORD *)v28 + 17) = 0;
          v49 = *((_QWORD *)v24 + 15);
          v50 = *((_QWORD *)v24 + 16);
          v51 = v50 - v49;
          if (v50 != v49)
          {
            v52 = 0x4EC4EC4EC4EC4EC5 * (v51 >> 3);
            if (v52 >= 0x276276276276277)
              sub_223323BA8();
            v53 = (char *)operator new(v51);
            v54 = 0;
            *((_QWORD *)v28 + 15) = v53;
            *((_QWORD *)v28 + 16) = v53;
            *((_QWORD *)v28 + 17) = &v53[104 * v52];
            do
            {
              v55 = v49 + v54;
              v56 = &v53[v54];
              *v56 = *(_BYTE *)(v49 + v54);
              v57 = *(_OWORD *)(v49 + v54 + 8);
              *(_OWORD *)(v56 + 24) = *(_OWORD *)(v49 + v54 + 24);
              *(_OWORD *)(v56 + 8) = v57;
              v58 = *(_OWORD *)(v49 + v54 + 40);
              v59 = *(_OWORD *)(v49 + v54 + 56);
              v60 = *(_OWORD *)(v49 + v54 + 72);
              *(_OWORD *)(v56 + 88) = *(_OWORD *)(v49 + v54 + 88);
              *(_OWORD *)(v56 + 72) = v60;
              *(_OWORD *)(v56 + 56) = v59;
              *(_OWORD *)(v56 + 40) = v58;
              v54 += 104;
            }
            while (v55 + 104 != v50);
            *((_QWORD *)v28 + 16) = &v53[v54];
          }
          v29 = *((_OWORD *)v24 + 9);
          v28[160] = v24[160];
          *((_OWORD *)v28 + 9) = v29;
          v24 += 168;
          v28 += 168;
        }
        while (v24 != v85);
        v14 = v83;
        v15 = v84;
        *(_QWORD *)(v83 + 232) = v28;
      }
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v87;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock(v15);
  }
  if (v95)
  {
    v61 = (char *)__p;
    if (__p)
    {
      v62 = v94;
      v63 = __p;
      if (v94 != __p)
      {
        do
        {
          v65 = (void *)*((_QWORD *)v62 - 6);
          if (v65)
          {
            *((_QWORD *)v62 - 5) = v65;
            operator delete(v65);
          }
          v66 = *((_QWORD *)v62 - 9);
          if (v66)
          {
            v67 = *((_QWORD *)v62 - 8);
            v64 = (void *)*((_QWORD *)v62 - 9);
            if (v67 != v66)
            {
              v68 = *((_QWORD *)v62 - 8);
              do
              {
                v70 = *(void **)(v68 - 24);
                v68 -= 24;
                v69 = v70;
                if (v70)
                {
                  *(_QWORD *)(v67 - 16) = v69;
                  operator delete(v69);
                }
                v67 = v68;
              }
              while (v68 != v66);
              v64 = (void *)*((_QWORD *)v62 - 9);
            }
            *((_QWORD *)v62 - 8) = v66;
            operator delete(v64);
          }
          v62 -= 168;
        }
        while (v62 != v61);
        v63 = __p;
      }
      v94 = v61;
      operator delete(v63);
    }
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    v71 = (char *)v88;
    if (v88)
    {
      v72 = v89;
      v73 = v88;
      if (v89 != v88)
      {
        do
        {
          if (*(v72 - 16))
          {
            v74 = *((_QWORD *)v72 - 5);
            if (v74)
            {
              v75 = *((_QWORD *)v72 - 4);
              v76 = (void *)*((_QWORD *)v72 - 5);
              if (v75 != v74)
              {
                v77 = *((_QWORD *)v72 - 4);
                do
                {
                  v79 = *(void **)(v77 - 24);
                  v77 -= 24;
                  v78 = v79;
                  if (v79)
                  {
                    *(_QWORD *)(v75 - 16) = v78;
                    operator delete(v78);
                  }
                  v75 = v77;
                }
                while (v77 != v74);
                v76 = (void *)*((_QWORD *)v72 - 5);
              }
              *((_QWORD *)v72 - 4) = v74;
              operator delete(v76);
            }
          }
          if (*(v72 - 48))
          {
            v80 = (void *)*((_QWORD *)v72 - 9);
            if (v80)
            {
              *((_QWORD *)v72 - 8) = v80;
              operator delete(v80);
            }
          }
          if (*(v72 - 80))
          {
            v81 = (void *)*((_QWORD *)v72 - 13);
            if (v81)
            {
              *((_QWORD *)v72 - 12) = v81;
              operator delete(v81);
            }
          }
          v82 = (void *)*((_QWORD *)v72 - 23);
          if (v82)
          {
            *((_QWORD *)v72 - 22) = v82;
            operator delete(v82);
          }
          v72 -= 464;
        }
        while (v72 != v71);
        v73 = v88;
      }
      v89 = v71;
      operator delete(v73);
    }
  }
}

void sub_22336E3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::mutex *v47;

  v47 = v33;
  v39 = *v35;
  if (*v35)
  {
    v40 = *(_QWORD *)(v34 + 160);
    v41 = *v35;
    if ((void *)v40 != v39)
    {
      do
      {
        v40 -= 464;
        sub_22324A5A0(v40);
      }
      while ((void *)v40 != v39);
      v41 = *v35;
    }
    *(_QWORD *)(v34 + 160) = v39;
    operator delete(v41);
  }
  std::mutex::unlock(v47);
  if (a33)
    sub_223322918(&a20);
  if (a2 == 1)
  {
    v42 = (uint64_t *)__cxa_begin_catch(a1);
    v43 = *v42;
    *(_QWORD *)(v36 - 104) = *(_QWORD *)(*(_QWORD *)(*v42 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a19 = (*(uint64_t (**)(void))(v43 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)(v36 - 104), "\n", "message: ", (const char *)&a19, "\n");
    v44 = *(char *)(v36 - 113);
    if (v44 >= 0)
      v45 = v36 - 136;
    else
      v45 = *(_QWORD *)(v36 - 136);
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v36 - 113);
    else
      v46 = *(_QWORD *)(v36 - 128);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, v45, v46, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22336E794()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  __cxa_end_catch();
  JUMPOUT(0x22336E7B4);
}

_QWORD *sub_22336E7C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  *a1 = &off_24EC31778;
  a1[16] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[10] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[12];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[4] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[6];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (std::__shared_weak_count *)a1[2];
      if (!v17)
        return a1;
      goto LABEL_26;
    }
  }
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
LABEL_26:
    std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_22336E960(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  *a1 = &off_24EC31778;
  a1[16] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[10] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[12];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[4] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[6];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[2];
    if (!v17)
      goto LABEL_29;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[2];
    if (!v17)
      goto LABEL_29;
  }
  std::__shared_weak_count::__release_weak(v17);
LABEL_29:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336EB10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1A0uLL);
  *v2 = &off_24EC31778;
  sub_22336F004((uint64_t)(v2 + 1), v1);
  return v2;
}

double sub_22336EB50(uint64_t a1, _QWORD *a2)
{
  double result;

  *a2 = &off_24EC31778;
  *(_QWORD *)&result = sub_22336F004((uint64_t)(a2 + 1), a1 + 8).n128_u64[0];
  return result;
}

void sub_22336EB6C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  a1[16] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[10] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[12];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[9];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[4] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[6];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[2];
    if (!v17)
      return;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
LABEL_26:
    std::__shared_weak_count::__release_weak(v17);
}

void sub_22336ED04(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;

  __p[16] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)__p[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    __p[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    __p[13] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  __p[10] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)__p[12];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    __p[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)__p[9];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    __p[7] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)__p[9];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  __p[4] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)__p[6];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (std::__shared_weak_count *)__p[2];
      if (!v17)
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  v17 = (std::__shared_weak_count *)__p[2];
  if (v17)
LABEL_26:
    std::__shared_weak_count::__release_weak(v17);
LABEL_27:
  operator delete(__p);
}

void sub_22336EE98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_22336DC14((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_223362760(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22336EF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_223362760(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22336EF8C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBun"
                     "dleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0E"
                     "E4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsW"
                                "ithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDete"
                                "ction5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336EFF8()
{
  return &unk_24EC317D8;
}

__n128 sub_22336F004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __n128 result;
  __int128 v34;
  __int128 v35;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = &off_24EC715B8;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v9 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = &off_24EC715B8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 72) = &off_24EC715B8;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 96) = &off_24EC715B8;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v21 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 120) = &off_24EC715B8;
  *(_QWORD *)(a1 + 128) = v21;
  *(_QWORD *)(a1 + 136) = v20;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v24 = *(_OWORD *)(a2 + 168);
  v25 = *(_OWORD *)(a2 + 184);
  v26 = *(_OWORD *)(a2 + 200);
  v27 = *(_QWORD *)(a2 + 216);
  v28 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 152) = v28;
  *(_QWORD *)(a1 + 216) = v27;
  *(_OWORD *)(a1 + 200) = v26;
  *(_OWORD *)(a1 + 184) = v25;
  *(_OWORD *)(a1 + 168) = v24;
  *(_BYTE *)(a1 + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    v29 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v29;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_BYTE *)(a1 + 272) = 1;
  }
  v30 = *(_OWORD *)(a2 + 280);
  v31 = *(_OWORD *)(a2 + 296);
  v32 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v32;
  *(_OWORD *)(a1 + 280) = v30;
  *(_OWORD *)(a1 + 296) = v31;
  result = *(__n128 *)(a2 + 344);
  v34 = *(_OWORD *)(a2 + 360);
  v35 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v35;
  *(__n128 *)(a1 + 344) = result;
  *(_OWORD *)(a1 + 360) = v34;
  return result;
}

_QWORD *sub_22336F16C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;

  v2 = (std::__shared_weak_count *)a1[52];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[15] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[17];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[15] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[17];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[12] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[14];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[9] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[9] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[6] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[8];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    a1[3] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[5];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    a1[3] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[5];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[1];
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  return a1;
}

_QWORD *sub_22336F344(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC317F8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22336F3CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC317F8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22336F464(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC317F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22336F4F4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC317F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22336F564(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22336F5E4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22336F660(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22336DC14(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_223362760((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22336F93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22336F968(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x22336F774);
    JUMPOUT(0x22336F744);
  }
  sub_2233236D4(3u);
}

void sub_22336F9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22336F9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_223362760(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22336FADC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBun"
                     "dleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0E"
                     "E25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsW"
                                "ithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDete"
                                "ction5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseIS"
                                "C_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22336FB48()
{
  return &unk_24EC31858;
}

_QWORD *sub_22336FB54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;

  *a1 = &off_24EC31878;
  v2 = (std::__shared_weak_count *)a1[53];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[16] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[18];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[16] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[18];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[13] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[15];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[10] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[12];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[10] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[12];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[7] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[9];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    a1[4] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[6];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    a1[4] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[6];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[2];
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_22336FD38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;

  *a1 = &off_24EC31878;
  v2 = (std::__shared_weak_count *)a1[53];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[16] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[18];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[16] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[18];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[13] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[15];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[10] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[12];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[10] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[12];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[7] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[9];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    a1[4] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[6];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    a1[4] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[6];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[2];
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22336FF2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x1B0uLL);
  *v2 = &off_24EC31878;
  sub_223370224((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_22336FF6C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC31878;
  return sub_223370224((uint64_t)(a2 + 1), a1 + 8);
}

void sub_22336FF88(uint64_t a1)
{
  sub_2233703AC((_QWORD *)(a1 + 8));
}

void sub_22336FF90(_QWORD *a1)
{
  sub_2233703AC(a1 + 1);
  operator delete(a1);
}

void sub_22336FFB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[52];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22336DC14((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_223362760((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2233700C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223370140(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223370174);
  JUMPOUT(0x2233701A4);
}

uint64_t sub_2233701AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBun"
                     "dleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0E"
                     "E7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsW"
                                "ithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDete"
                                "ction5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223370218()
{
  return &unk_24EC318D8;
}

uint64_t sub_223370224(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)(result + 8) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 24) = &off_24EC715B8;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v9 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 48) = &off_24EC715B8;
  *(_QWORD *)(result + 56) = v9;
  *(_QWORD *)(result + 64) = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v13 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 72) = &off_24EC715B8;
  *(_QWORD *)(result + 80) = v13;
  *(_QWORD *)(result + 88) = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v17 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(result + 96) = &off_24EC715B8;
  *(_QWORD *)(result + 104) = v17;
  *(_QWORD *)(result + 112) = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v21 = *(_QWORD *)(a2 + 128);
  v20 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(result + 120) = &off_24EC715B8;
  *(_QWORD *)(result + 128) = v21;
  *(_QWORD *)(result + 136) = v20;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(result + 144) = *(_QWORD *)(a2 + 144);
  v24 = *(_OWORD *)(a2 + 168);
  v25 = *(_OWORD *)(a2 + 184);
  v26 = *(_OWORD *)(a2 + 200);
  v27 = *(_QWORD *)(a2 + 216);
  v28 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(result + 224) = 0;
  *(_OWORD *)(result + 152) = v28;
  *(_QWORD *)(result + 216) = v27;
  *(_OWORD *)(result + 200) = v26;
  *(_OWORD *)(result + 184) = v25;
  *(_OWORD *)(result + 168) = v24;
  *(_BYTE *)(result + 272) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    v29 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(result + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(result + 240) = v29;
    *(_OWORD *)(result + 256) = *(_OWORD *)(a2 + 256);
    *(_BYTE *)(result + 272) = 1;
  }
  v30 = *(_OWORD *)(a2 + 280);
  v31 = *(_OWORD *)(a2 + 296);
  v32 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(result + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(result + 328) = v32;
  *(_OWORD *)(result + 280) = v30;
  *(_OWORD *)(result + 296) = v31;
  v33 = *(_OWORD *)(a2 + 344);
  v34 = *(_OWORD *)(a2 + 360);
  v35 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(result + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(result + 392) = v35;
  *(_OWORD *)(result + 344) = v33;
  *(_OWORD *)(result + 360) = v34;
  v36 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(result + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(result + 416) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  return result;
}

void sub_2233703AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;

  v2 = (std::__shared_weak_count *)a1[52];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[15] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[17];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[15] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[17];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[12] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[14];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[9] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[9] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[6] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[8];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    a1[3] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[5];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    a1[3] = &off_24EC715B8;
    v17 = (std::__shared_weak_count *)a1[5];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[1];
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

_QWORD *sub_22337058C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC318F8;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2233705E4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC318F8;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337064C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC318F8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E1C8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_2233706C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2233706E4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC318F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E1C8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22337074C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223370764(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2233707B4(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E1C8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223370800(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E1C8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233708B4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233708F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "9SubscribeENS1_12ChannelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWi"
                                "thDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337095C()
{
  return &unk_24EC31958;
}

_QWORD *sub_223370968(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC31978;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233709A0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC31978;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233709E8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC31978;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223370A38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC31978;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223370A68(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223370A78(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223370AA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223370B38(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223370B74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBund"
                     "leENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE"
                     "15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWi"
                                "thDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetec"
                                "tion5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223370BE0()
{
  return &unk_24EC319D8;
}

_QWORD *sub_223370BEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC319F8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223370C24(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC319F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223370C6C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC319F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223370CC4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC319F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223370CFC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223370D0C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223370D38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_223370EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223370F24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBun"
                     "dleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0E"
                     "E16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsW"
                                "ithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDete"
                                "ction5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223370F90()
{
  return &unk_24EC31A58;
}

_QWORD *sub_223370F9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC31A78;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223370FD4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC31A78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337101C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC31A78;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223371074(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC31A78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233710AC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233710BC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233710E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233711A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233711EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBun"
                     "dleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0E"
                     "E15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsW"
                                "ithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDete"
                                "ction5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223371258()
{
  return &unk_24EC31AD8;
}

void sub_223371268(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22337128C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2233712A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd29InputSe"
                     "manticsWithDepthBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetecti"
                     "on5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS7_22SurfaceDetectionResul"
                                "tENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd29InputSemanticsWithDepthBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223371314(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223371340(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337137C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC31B48;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2233713E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223371474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223371488(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223371518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22337152C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2233715F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223371604(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2233716C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233716DC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223371780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223371798(uint64_t a1)
{
  sub_2233732B8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233717BC(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63[2];
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void *__p[2];
  uint64_t v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  __int128 v88;
  uint64_t v89;
  __int128 *v90;
  _BYTE v91[24];
  _BYTE *v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x150uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC31DB0;
    v6 = v4 + 1;
    sub_2233734B8((uint64_t)&v4[1], a2);
    v86 = v4 + 1;
    v87 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = (uint64_t *)a1[18];
    v10 = (_QWORD *)operator new();
    *v10 = v9 + 7;
    std::mutex::lock((std::mutex *)(v9 + 7));
    *(_QWORD *)&v88 = v10;
    *((_QWORD *)&v88 + 1) = v9;
    if (!*((_BYTE *)v9 + 48))
      sub_22324A974();
    v11 = v9[4];
    v12 = *v9;
    v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v6;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v9[1] - *v9) >> 4;
    v20 = v9[5];
    v21 = v9[4] + 1;
    if (v21 >= v19)
      v22 = (v9[1] - *v9) >> 4;
    else
      v22 = 0;
    v9[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v9[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v9[3] = v23 - v19;
      v24 = (std::mutex **)v88;
      if (!(_QWORD)v88)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v88 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v88 = v38;
            *((_QWORD *)&v88 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v88 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC31E00;
        *(_OWORD *)(v43 + 8) = v88;
        v88 = 0uLL;
        *((_QWORD *)v43 + 3) = v6;
        *((_QWORD *)v43 + 4) = v4;
        v89 = 0;
        v90 = 0;
        v92 = v43;
        sub_2245022E4(*v34, (uint64_t)v91);
        v44 = v92;
        if (v92 == v91)
        {
          v45 = 4;
          v44 = v91;
        }
        else
        {
          if (!v92)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
        if (v87)
        {
          v46 = &v87->__shared_owners_;
          do
            v47 = __ldaxr((unint64_t *)v46);
          while (__stlxr(v47 - 1, (unint64_t *)v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        return;
      }
    }
    else
    {
      v9[5] = v20 + 1;
      v24 = (std::mutex **)v88;
      if (!(_QWORD)v88)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v63 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v63[0] = v29;
      v63[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v63 = 0uLL;
    }
  }
  sub_2233734B8((uint64_t)&v64, a2);
  v90 = 0;
  v48 = operator new(0x150uLL);
  *(_OWORD *)((char *)v48 + 8) = *(_OWORD *)v63;
  v48[2] = v65;
  v49 = v67;
  *(_OWORD *)((char *)v48 + 72) = v68;
  v50 = v70;
  *(_OWORD *)((char *)v48 + 88) = v69;
  *(_OWORD *)((char *)v48 + 104) = v50;
  *(_QWORD *)v48 = &off_24EC31E80;
  *((_QWORD *)v48 + 3) = v64;
  v65 = 0uLL;
  *((_QWORD *)v48 + 6) = v66;
  *((_QWORD *)v48 + 15) = v71;
  *(_OWORD *)((char *)v48 + 56) = v49;
  *((_BYTE *)v48 + 128) = 0;
  *((_BYTE *)v48 + 176) = 0;
  if (v75)
  {
    v51 = v73;
    v48[8] = v72;
    v48[9] = v51;
    v48[10] = v74;
    *((_BYTE *)v48 + 176) = 1;
  }
  v52 = v81;
  *(_OWORD *)((char *)v48 + 248) = v80;
  v53 = v77;
  *(_OWORD *)((char *)v48 + 184) = v76;
  *(_OWORD *)((char *)v48 + 200) = v53;
  v54 = v79;
  *(_OWORD *)((char *)v48 + 216) = v78;
  *(_OWORD *)((char *)v48 + 232) = v54;
  v55 = v82;
  v56 = v83;
  *(_OWORD *)((char *)v48 + 264) = v52;
  *(_OWORD *)((char *)v48 + 280) = v55;
  v57 = *(_OWORD *)__p;
  *(_OWORD *)((char *)v48 + 296) = v56;
  *(_OWORD *)((char *)v48 + 312) = v57;
  *((_QWORD *)v48 + 41) = v85;
  __p[0] = 0;
  __p[1] = 0;
  v85 = 0;
  v90 = v48;
  sub_2245022E4(*v25, (uint64_t)&v88);
  v58 = v90;
  if (v90 == &v88)
  {
    v59 = 4;
    v58 = &v88;
    goto LABEL_59;
  }
  if (v90)
  {
    v59 = 5;
LABEL_59:
    (*(void (**)(__int128 *))(*(_QWORD *)v58 + 8 * v59))(v58);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_223371CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_223373620(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223373620(&a9);
  _Unwind_Resume(a1);
}

void sub_223371D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223371E40(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223371E50(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223371E5C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223371E6C(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  __int128 *v82;
  std::string *v83;
  std::runtime_error *exception;
  std::runtime_error *v85;
  std::__shared_weak_count *v86[2];
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *__p[2];
  uint64_t v108;
  _QWORD *v109;
  std::__shared_weak_count *v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  std::runtime_error v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  _QWORD *v119;
  __int128 *v120;
  _QWORD v121[3];
  std::string v122;
  std::string *v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v118 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v118 + 1) = 45;
    v81 = (_QWORD *)a1[6];
    v80 = a1 + 6;
    v79 = v81;
    v82 = (__int128 *)*((unsigned __int8 *)v80 + 23);
    if ((char)v82 < 0)
      v82 = (__int128 *)v80[1];
    else
      v79 = v80;
    v119 = v79;
    v120 = v82;
    sub_2231A9820((uint64_t)&v118, (uint64_t)v121, 0, 0, &v122);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = &v122;
    else
      v83 = (std::string *)v122.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v115, (const char *)v83);
    v115.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v85 = std::runtime_error::runtime_error(exception, &v115);
    v85->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v85, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
    v6[1].__vftable = *a3;
    v113 = v6 + 1;
    v114 = v6;
    v111 = v6 + 1;
    v112 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x150uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC31DB0;
    v11 = v9 + 1;
    sub_2233734B8((uint64_t)&v9[1], a2);
    v116 = v9 + 1;
    v117 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v118 = v15;
    *((_QWORD *)&v118 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v118;
      if (!(_QWORD)v118)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v118 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v118 = v43;
            *((_QWORD *)&v118 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v118 = 0uLL;
          }
        }
        v48 = v111;
        v49 = v112;
        v111 = 0;
        v112 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC31F00;
        *(_OWORD *)(v50 + 8) = v118;
        v118 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v119 = 0;
        v120 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v121[0] = 0;
        v121[1] = 0;
        v123 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v122);
        v51 = v123;
        if (v123 == &v122)
        {
          v52 = 4;
          v51 = &v122;
        }
        else
        {
          if (!v123)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v117)
        {
          v53 = &v117->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
        if (v112)
        {
          v55 = &v112->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        if (v114)
        {
          v57 = &v114->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v118;
      if (!(_QWORD)v118)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v86 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v86[0] = v34;
      v86[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v86 = 0uLL;
    }
  }
  sub_2233734B8((uint64_t)&v87, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30998;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v109 = &v59[1].__vftable;
  v110 = v59;
  v120 = 0;
  v60 = operator new(0x160uLL);
  *(_OWORD *)((char *)v60 + 8) = *(_OWORD *)v86;
  v60[2] = v88;
  v61 = v90;
  *(_OWORD *)((char *)v60 + 72) = v91;
  v62 = v93;
  *(_OWORD *)((char *)v60 + 88) = v92;
  *(_OWORD *)((char *)v60 + 104) = v62;
  *(_QWORD *)v60 = &off_24EC31F80;
  *((_QWORD *)v60 + 3) = v87;
  v88 = 0uLL;
  *((_QWORD *)v60 + 6) = v89;
  *((_QWORD *)v60 + 15) = v94;
  *(_OWORD *)((char *)v60 + 56) = v61;
  *((_BYTE *)v60 + 128) = 0;
  *((_BYTE *)v60 + 176) = 0;
  if (v98)
  {
    v63 = v96;
    v60[8] = v95;
    v60[9] = v63;
    v60[10] = v97;
    *((_BYTE *)v60 + 176) = 1;
  }
  v64 = v104;
  *(_OWORD *)((char *)v60 + 248) = v103;
  v65 = v100;
  *(_OWORD *)((char *)v60 + 184) = v99;
  *(_OWORD *)((char *)v60 + 200) = v65;
  v66 = v102;
  *(_OWORD *)((char *)v60 + 216) = v101;
  *(_OWORD *)((char *)v60 + 232) = v66;
  v67 = v105;
  v68 = v106;
  *(_OWORD *)((char *)v60 + 264) = v64;
  *(_OWORD *)((char *)v60 + 280) = v67;
  v69 = *(_OWORD *)__p;
  *(_OWORD *)((char *)v60 + 296) = v68;
  *(_OWORD *)((char *)v60 + 312) = v69;
  v70 = v108;
  __p[0] = 0;
  __p[1] = 0;
  v108 = 0;
  *((_QWORD *)v60 + 41) = v70;
  *((_QWORD *)v60 + 42) = v59 + 1;
  *((_QWORD *)v60 + 43) = v59;
  v109 = 0;
  v110 = 0;
  v120 = v60;
  sub_2245022E4(*v30, (uint64_t)&v118);
  v71 = v120;
  if (v120 == &v118)
  {
    v72 = 4;
    v71 = &v118;
  }
  else
  {
    if (!v120)
      goto LABEL_74;
    v72 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v71 + 8 * v72))(v71);
LABEL_74:
  v73 = v110;
  if (v110)
  {
    v74 = (unint64_t *)&v110->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
}

void sub_2233725D0(_Unwind_Exception *exception_object, int a2)
{
  std::__assoc_sub_state **v2;
  uint64_t v3;
  std::__assoc_sub_state *v4;
  std::exception_ptr v5;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v4 = *v2;
    if (*v2)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v3 - 160), (const std::exception_ptr *)(v3 - 184));
      v5.__ptr_ = (void *)(v3 - 160);
      std::__assoc_sub_state::set_exception(v4, v5);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v3 - 184));
      std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 200));
      if (*(char *)(v3 - 81) < 0)
        operator delete(*(void **)(v3 - 104));
      JUMPOUT(0x2233724E4);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_223372644(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v1 - 184));
  std::runtime_error::~runtime_error((std::runtime_error *)(v1 - 200));
  if (*(char *)(v1 - 81) < 0)
  {
    operator delete(*(void **)(v1 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223372698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_223374CEC(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223374CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_2233726EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;

  sub_223373750(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223372720(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 80);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 104);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_22332429C((_QWORD *)(v2 - 160));
  sub_223167354(v2 - 176);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_2233727C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  sub_223167354(v2 - 232);
  sub_223167354(v2 - 216);
  _Unwind_Resume(a1);
}

void sub_2233727E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223167354(v1 - 232);
  sub_223167354(v1 - 216);
  _Unwind_Resume(a1);
}

void sub_223372804(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223372878(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC32000;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E1C8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_2233729A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223372A1C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC32080;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223372B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223372B90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC32100;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223372DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223372E70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC32180;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223373088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223373150(uint64_t a1)
{
  return sub_2233732B8(a1 - 16);
}

void sub_223373158(uint64_t a1)
{
  sub_2233732B8(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223373180(uint64_t a1, uint64_t a2)
{
  return sub_223372878((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223373188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223372B90((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223373190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223372E70((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_223373198(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2233731A0(uint64_t a1)
{
  return sub_2233732B8(a1 - 24);
}

void sub_2233731A8(uint64_t a1)
{
  sub_2233732B8(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233731D0(uint64_t a1)
{
  return sub_223372A1C((_QWORD *)(a1 - 24));
}

uint64_t sub_2233731D8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2233731E0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223373248(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_2233732B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_22333C4CC(*(double ***)(a1 + 8), a2, a3);
}

uint64_t sub_2233732B8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC31BC0;
  *(_QWORD *)(a1 + 16) = &unk_24EC31C38;
  *(_QWORD *)(a1 + 24) = &unk_24EC31C78;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_2233734B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  char *v22;
  char *v23;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    v12 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v12;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 152) = 1;
  }
  v13 = *(_OWORD *)(a2 + 160);
  v14 = *(_OWORD *)(a2 + 176);
  v15 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v15;
  *(_OWORD *)(a1 + 160) = v13;
  *(_OWORD *)(a1 + 176) = v14;
  v16 = *(_OWORD *)(a2 + 224);
  v17 = *(_OWORD *)(a2 + 240);
  v18 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v18;
  *(_OWORD *)(a1 + 224) = v16;
  *(_OWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v20 = *(_BYTE **)(a2 + 288);
  v19 = *(_BYTE **)(a2 + 296);
  v21 = v19 - v20;
  if (v19 != v20)
  {
    if ((v21 & 0x8000000000000000) != 0)
      sub_22316E078();
    v22 = (char *)operator new(v19 - v20);
    *(_QWORD *)(a1 + 288) = v22;
    *(_QWORD *)(a1 + 296) = v22;
    v23 = &v22[v21];
    *(_QWORD *)(a1 + 304) = &v22[v21];
    memcpy(v22, v20, v21);
    *(_QWORD *)(a1 + 296) = v23;
  }
  return a1;
}

void sub_2233735CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 296) = v4;
    operator delete(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223373620(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[1];
      if (!v6)
        return a1;
      goto LABEL_8;
    }
  }
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
LABEL_8:
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2233736A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC31DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233736B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC31DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233736E0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_223373750(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)a1[36];
  if (v2)
  {
    a1[37] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *sub_2233737C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC31E00;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22337380C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC31E00;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223373860(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC31E00;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2233738D0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC31E00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223373920(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22337395C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223373994(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223373CB8((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_223362760(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223373B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_223362760(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223373C40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experiment"
                     "al8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAn"
                     "dDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt1"
                                "2experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_L"
                                "b0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_4SendERKS6_EUlT_T0_E_EEvSG_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223373CAC()
{
  return &unk_24EC31E60;
}

void sub_223373CB8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  char *v71;
  char *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  std::mutex *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void *v88;
  char *v89;
  void *v90[3];
  void *v91;
  void *v92;
  void *__p;
  char *v94;
  unsigned __int8 v95;
  std::exception_ptr v96;
  char **v97;
  _QWORD *v98;
  char v99;
  char *v100;
  _QWORD *v101;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v87, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v87);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    v15 = (std::mutex *)(v14 + 24);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v96.__ptr_ = 0, v16 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v96), v16))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v17 = v95;
    *(_BYTE *)(v14 + 248) = v95;
    if (v17)
    {
      *(_QWORD *)(v14 + 152) = 0;
      v18 = v88;
      *(_QWORD *)(v14 + 144) = v87;
      *(_QWORD *)(v14 + 160) = 0;
      *(_QWORD *)(v14 + 168) = 0;
      v19 = v89;
      v96.__ptr_ = (void *)(v14 + 152);
      LOBYTE(v97) = 0;
      v20 = v89 - v18;
      if (v89 != v18)
      {
        v21 = 0x34F72C234F72C235 * (v20 >> 4);
        if (v21 >= 0x8D3DCB08D3DCB1)
          sub_22324A284();
        v22 = (char *)operator new(v20);
        v23 = 0;
        *(_QWORD *)(v14 + 152) = v22;
        *(_QWORD *)(v14 + 160) = v22;
        *(_QWORD *)(v14 + 168) = &v22[464 * v21];
        do
        {
          sub_223249DC0((uint64_t)&v22[v23], (uint64_t)&v18[v23]);
          v23 += 464;
        }
        while (&v18[v23] != v19);
        *(_QWORD *)(v14 + 160) = &v22[v23];
      }
      sub_223323948((_QWORD *)(v14 + 176), (uint64_t)v90);
      *(_QWORD *)(v14 + 224) = 0;
      *(_QWORD *)(v14 + 232) = 0;
      *(_QWORD *)(v14 + 240) = 0;
      v24 = (char *)__p;
      v85 = v94;
      v25 = v94 - (_BYTE *)__p;
      if (v94 != __p)
      {
        v26 = 0xCF3CF3CF3CF3CF3DLL * (v25 >> 3);
        v84 = (std::mutex *)(v14 + 24);
        if (v26 >= 0x186186186186187)
          sub_223323BA8();
        v27 = (char *)operator new(v25);
        *(_QWORD *)(v14 + 224) = v27;
        *(_QWORD *)(v14 + 232) = v27;
        v83 = v14;
        *(_QWORD *)(v14 + 240) = &v27[168 * v26];
        v28 = v27;
        do
        {
          v30 = *(_QWORD *)v24;
          *((_DWORD *)v28 + 2) = *((_DWORD *)v24 + 2);
          *(_QWORD *)v28 = v30;
          v31 = *(_QWORD *)(v24 + 12);
          *((_DWORD *)v28 + 5) = *((_DWORD *)v24 + 5);
          *(_QWORD *)(v28 + 12) = v31;
          v32 = *(_OWORD *)(v24 + 24);
          v33 = *(_OWORD *)(v24 + 40);
          v34 = *(_OWORD *)(v24 + 56);
          *(_OWORD *)(v28 + 72) = *(_OWORD *)(v24 + 72);
          *(_OWORD *)(v28 + 56) = v34;
          *(_OWORD *)(v28 + 40) = v33;
          *(_OWORD *)(v28 + 24) = v32;
          v35 = *((_QWORD *)v24 + 11);
          *((_QWORD *)v28 + 12) = 0;
          *((_QWORD *)v28 + 11) = v35;
          *((_QWORD *)v28 + 14) = 0;
          *((_QWORD *)v28 + 13) = 0;
          v37 = *((_QWORD *)v24 + 12);
          v36 = *((_QWORD *)v24 + 13);
          v38 = v36 - v37;
          if (v36 != v37)
          {
            v86 = v24;
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            if (v39 >= 0xAAAAAAAAAAAAAABLL)
              sub_22324A284();
            v40 = (char *)operator new(v38);
            v41 = 0;
            *((_QWORD *)v28 + 12) = v40;
            *((_QWORD *)v28 + 13) = v40;
            *((_QWORD *)v28 + 14) = &v40[24 * v39];
            v100 = v40;
            v101 = v40;
            v96.__ptr_ = v28 + 112;
            v97 = &v100;
            v98 = &v101;
            v99 = 0;
            do
            {
              v44 = &v40[v41];
              v45 = v37 + v41;
              *(_QWORD *)v44 = 0;
              *((_QWORD *)v44 + 1) = 0;
              *((_QWORD *)v44 + 2) = 0;
              v47 = *(_BYTE **)(v37 + v41);
              v46 = *(_BYTE **)(v37 + v41 + 8);
              v48 = v46 - v47;
              if (v46 != v47)
              {
                if (v48 < 0)
                  sub_22316E078();
                v42 = (char *)operator new(v46 - v47);
                *(_QWORD *)v44 = v42;
                *((_QWORD *)v44 + 1) = v42;
                *((_QWORD *)v44 + 2) = &v42[8 * (v48 >> 3)];
                v43 = v48 & 0xFFFFFFFFFFFFFFF8;
                memcpy(v42, v47, v43);
                *((_QWORD *)v44 + 1) = &v42[v43];
              }
              v101 = v44 + 24;
              v41 += 24;
            }
            while (v45 + 24 != v36);
            *((_QWORD *)v28 + 13) = &v40[v41];
            v24 = v86;
          }
          *((_QWORD *)v28 + 15) = 0;
          *((_QWORD *)v28 + 16) = 0;
          *((_QWORD *)v28 + 17) = 0;
          v49 = *((_QWORD *)v24 + 15);
          v50 = *((_QWORD *)v24 + 16);
          v51 = v50 - v49;
          if (v50 != v49)
          {
            v52 = 0x4EC4EC4EC4EC4EC5 * (v51 >> 3);
            if (v52 >= 0x276276276276277)
              sub_223323BA8();
            v53 = (char *)operator new(v51);
            v54 = 0;
            *((_QWORD *)v28 + 15) = v53;
            *((_QWORD *)v28 + 16) = v53;
            *((_QWORD *)v28 + 17) = &v53[104 * v52];
            do
            {
              v55 = v49 + v54;
              v56 = &v53[v54];
              *v56 = *(_BYTE *)(v49 + v54);
              v57 = *(_OWORD *)(v49 + v54 + 8);
              *(_OWORD *)(v56 + 24) = *(_OWORD *)(v49 + v54 + 24);
              *(_OWORD *)(v56 + 8) = v57;
              v58 = *(_OWORD *)(v49 + v54 + 40);
              v59 = *(_OWORD *)(v49 + v54 + 56);
              v60 = *(_OWORD *)(v49 + v54 + 72);
              *(_OWORD *)(v56 + 88) = *(_OWORD *)(v49 + v54 + 88);
              *(_OWORD *)(v56 + 72) = v60;
              *(_OWORD *)(v56 + 56) = v59;
              *(_OWORD *)(v56 + 40) = v58;
              v54 += 104;
            }
            while (v55 + 104 != v50);
            *((_QWORD *)v28 + 16) = &v53[v54];
          }
          v29 = *((_OWORD *)v24 + 9);
          v28[160] = v24[160];
          *((_OWORD *)v28 + 9) = v29;
          v24 += 168;
          v28 += 168;
        }
        while (v24 != v85);
        v14 = v83;
        v15 = v84;
        *(_QWORD *)(v83 + 232) = v28;
      }
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v87;
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock(v15);
  }
  if (v95)
  {
    v61 = (char *)__p;
    if (__p)
    {
      v62 = v94;
      v63 = __p;
      if (v94 != __p)
      {
        do
        {
          v65 = (void *)*((_QWORD *)v62 - 6);
          if (v65)
          {
            *((_QWORD *)v62 - 5) = v65;
            operator delete(v65);
          }
          v66 = *((_QWORD *)v62 - 9);
          if (v66)
          {
            v67 = *((_QWORD *)v62 - 8);
            v64 = (void *)*((_QWORD *)v62 - 9);
            if (v67 != v66)
            {
              v68 = *((_QWORD *)v62 - 8);
              do
              {
                v70 = *(void **)(v68 - 24);
                v68 -= 24;
                v69 = v70;
                if (v70)
                {
                  *(_QWORD *)(v67 - 16) = v69;
                  operator delete(v69);
                }
                v67 = v68;
              }
              while (v68 != v66);
              v64 = (void *)*((_QWORD *)v62 - 9);
            }
            *((_QWORD *)v62 - 8) = v66;
            operator delete(v64);
          }
          v62 -= 168;
        }
        while (v62 != v61);
        v63 = __p;
      }
      v94 = v61;
      operator delete(v63);
    }
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    v71 = (char *)v88;
    if (v88)
    {
      v72 = v89;
      v73 = v88;
      if (v89 != v88)
      {
        do
        {
          if (*(v72 - 16))
          {
            v74 = *((_QWORD *)v72 - 5);
            if (v74)
            {
              v75 = *((_QWORD *)v72 - 4);
              v76 = (void *)*((_QWORD *)v72 - 5);
              if (v75 != v74)
              {
                v77 = *((_QWORD *)v72 - 4);
                do
                {
                  v79 = *(void **)(v77 - 24);
                  v77 -= 24;
                  v78 = v79;
                  if (v79)
                  {
                    *(_QWORD *)(v75 - 16) = v78;
                    operator delete(v78);
                  }
                  v75 = v77;
                }
                while (v77 != v74);
                v76 = (void *)*((_QWORD *)v72 - 5);
              }
              *((_QWORD *)v72 - 4) = v74;
              operator delete(v76);
            }
          }
          if (*(v72 - 48))
          {
            v80 = (void *)*((_QWORD *)v72 - 9);
            if (v80)
            {
              *((_QWORD *)v72 - 8) = v80;
              operator delete(v80);
            }
          }
          if (*(v72 - 80))
          {
            v81 = (void *)*((_QWORD *)v72 - 13);
            if (v81)
            {
              *((_QWORD *)v72 - 12) = v81;
              operator delete(v81);
            }
          }
          v82 = (void *)*((_QWORD *)v72 - 23);
          if (v82)
          {
            *((_QWORD *)v72 - 22) = v82;
            operator delete(v82);
          }
          v72 -= 464;
        }
        while (v72 != v71);
        v73 = v88;
      }
      v89 = v71;
      operator delete(v73);
    }
  }
}

void sub_223374460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::mutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::mutex *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  std::mutex *v47;

  v47 = v33;
  v39 = *v35;
  if (*v35)
  {
    v40 = *(_QWORD *)(v34 + 160);
    v41 = *v35;
    if ((void *)v40 != v39)
    {
      do
      {
        v40 -= 464;
        sub_22324A5A0(v40);
      }
      while ((void *)v40 != v39);
      v41 = *v35;
    }
    *(_QWORD *)(v34 + 160) = v39;
    operator delete(v41);
  }
  std::mutex::unlock(v47);
  if (a33)
    sub_223322918(&a20);
  if (a2 == 1)
  {
    v42 = (uint64_t *)__cxa_begin_catch(a1);
    v43 = *v42;
    *(_QWORD *)(v36 - 104) = *(_QWORD *)(*(_QWORD *)(*v42 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a19 = (*(uint64_t (**)(void))(v43 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)(v36 - 104), "\n", "message: ", (const char *)&a19, "\n");
    v44 = *(char *)(v36 - 113);
    if (v44 >= 0)
      v45 = v36 - 136;
    else
      v45 = *(_QWORD *)(v36 - 136);
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v36 - 113);
    else
      v46 = *(_QWORD *)(v36 - 128);
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, v45, v46, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_223374838()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    operator delete(*(void **)(v0 - 136));
  __cxa_end_catch();
  JUMPOUT(0x223374858);
}

_QWORD *sub_223374864(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC31E80;
  v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)a1[2];
      if (!v6)
        return a1;
      goto LABEL_8;
    }
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
LABEL_8:
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2233748F0(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC31E80;
  v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      goto LABEL_11;
  }
  std::__shared_weak_count::__release_weak(v6);
LABEL_11:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337498C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x150uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC31E80;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233734B8((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

void sub_2233749F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223374A10(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC31E80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_2233734B8((uint64_t)(a2 + 3), a1 + 24);
}

void sub_223374A68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223374A80(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = (void *)a1[39];
  if (v2)
  {
    a1[40] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[2];
    if (!v6)
      return;
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
LABEL_8:
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223374B00(_QWORD *__p)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = (void *)__p[39];
  if (v2)
  {
    __p[40] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[5];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)__p[2];
      if (!v6)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
LABEL_8:
    std::__shared_weak_count::__release_weak(v6);
LABEL_9:
  operator delete(__p);
}

void sub_223374B80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223373CB8((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_223362760(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223374C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_223362760(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223374C74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experiment"
                     "al8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt1"
                                "2experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_L"
                                "b0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223374CE0()
{
  return &unk_24EC31EE0;
}

_QWORD *sub_223374CEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[42];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[38];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[38];
  if (v5)
  {
LABEL_6:
    a1[39] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)a1[1];
      if (!v9)
        return a1;
      goto LABEL_12;
    }
  }
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
LABEL_12:
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

_QWORD *sub_223374DB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC31F00;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223374E38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC31F00;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223374ED0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC31F00;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223374F60(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC31F00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223374FD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223375050(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2233750CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223373CB8(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_223362760((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2233753A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2233753D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x2233751E0);
    JUMPOUT(0x2233751B0);
  }
  sub_2233236D4(3u);
}

void sub_223375430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22337545C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_223362760(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223375548(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experiment"
                     "al8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAn"
                     "dDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt1"
                                "2experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_L"
                                "b0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE25EnqueueMessageAndDispatchIZNKSD_7ProcessERKS6_NSt3__17promiseISC_EEEUlT_T0_E_EEvSG_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233755B4()
{
  return &unk_24EC31F60;
}

_QWORD *sub_2233755C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC31F80;
  v2 = (std::__shared_weak_count *)a1[43];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[39];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[39];
  if (v5)
  {
LABEL_6:
    a1[40] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[5];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)a1[2];
      if (!v9)
        return a1;
      goto LABEL_12;
    }
  }
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
LABEL_12:
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_223375690(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24EC31F80;
  v2 = (std::__shared_weak_count *)a1[43];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[39];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[39];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[5];
      if (!v6)
        goto LABEL_11;
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)a1[2];
        if (!v9)
          goto LABEL_17;
      }
      else
      {
LABEL_11:
        v9 = (std::__shared_weak_count *)a1[2];
        if (!v9)
          goto LABEL_17;
      }
      std::__shared_weak_count::__release_weak(v9);
LABEL_17:
      JUMPOUT(0x227684CE8);
    }
  }
  a1[40] = v5;
  operator delete(v5);
  goto LABEL_7;
}

_QWORD *sub_223375770(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x160uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC31F80;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233734B8((uint64_t)(v2 + 3), (uint64_t)(a1 + 3));
  v8 = a1[43];
  v3[42] = a1[42];
  v3[43] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_2233757F4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223375814(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC31F80;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_2233734B8((uint64_t)(a2 + 3), (uint64_t)(a1 + 3));
  v9 = a1[43];
  a2[42] = a1[42];
  a2[43] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22337588C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2233758A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[43];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[39];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[39];
  if (v5)
  {
LABEL_6:
    a1[40] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[5];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_11:
    v9 = (std::__shared_weak_count *)a1[2];
    if (!v9)
      return;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
LABEL_12:
    std::__shared_weak_count::__release_weak(v9);
}

void sub_223375968(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)__p[43];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)__p[39];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)__p[39];
  if (v5)
  {
LABEL_6:
    __p[40] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[5];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (std::__shared_weak_count *)__p[2];
      if (!v9)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v9 = (std::__shared_weak_count *)__p[2];
  if (v9)
LABEL_12:
    std::__shared_weak_count::__release_weak(v9);
LABEL_13:
  operator delete(__p);
}

void sub_223375A2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[42];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223373CB8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_223362760((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223375B3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223375BB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223375BE8);
  JUMPOUT(0x223375C18);
}

uint64_t sub_223375C20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experiment"
                     "al8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3"
                     "__17promiseISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt1"
                                "2experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_L"
                                "b0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE7ProcessERKS6_NSt3__17promiseISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223375C8C()
{
  return &unk_24EC31FE0;
}

_QWORD *sub_223375C98(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32000;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223375CF0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32000;
  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223375D58(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC32000;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E1C8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_223375DD0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223375DF0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC32000;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E1C8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_223375E58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223375E70(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E1C8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223375EC0(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E1C8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223375F0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E1C8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223375FC0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223375FFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimenta"
                     "l8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12Ch"
                     "annelInputISC_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12"
                                "experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb"
                                "0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE9SubscribeENS1_12ChannelInputISC_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223376068()
{
  return &unk_24EC32060;
}

_QWORD *sub_223376074(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32080;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233760AC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32080;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233760F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC32080;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223376144(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC32080;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223376174(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223376184(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233761B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223376244(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223376280(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimenta"
                     "l8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerEN"
                     "S1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12"
                                "experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb"
                                "0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233762EC()
{
  return &unk_24EC320E0;
}

_QWORD *sub_2233762F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32100;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223376330(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32100;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223376378(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32100;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233763D0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32100;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223376408(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223376418(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223376444(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2233765C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223376630(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experiment"
                     "al8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt1"
                                "2experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_L"
                                "b0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337669C()
{
  return &unk_24EC32160;
}

_QWORD *sub_2233766A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32180;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233766E0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32180;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223376728(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32180;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223376780(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32180;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233767B8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233767C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233767F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233768AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233768F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experiment"
                     "al8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt1"
                                "2experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_L"
                                "b0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS5_22SurfaceDetectionResultENS5_16SurfaceDetection5ErrorEEEvSC_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223376964()
{
  return &unk_24EC321E0;
}

void sub_223376974(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223376998(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2233769B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd10MeshBun"
                     "dleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0E"
                     "EEE27__shared_ptr_default_deleteISF_SF_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd10MeshBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDete"
                                "ction5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd10MeshBundleENSt12experimental8expectedINS7_22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEEvSE_Lb0EEEE27__shared_ptr_default_deleteISF_SF_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223376A20(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223376A4C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223376A88@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC32250;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223376AF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223376B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223376B94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223376C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223376C38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223376CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223376D10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223376DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223376DE8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223376E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223376EA4(uint64_t a1)
{
  sub_2233789B8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223376EC8(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  _DWORD *v8;
  int v9;
  uint64_t **v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  std::mutex **v35;
  uint64_t **v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  int v51;
  __int128 *v52;
  uint64_t v53;
  std::__shared_weak_count *v54[2];
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unsigned __int8 v64;
  _DWORD *v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  _BYTE v70[24];
  _BYTE *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (char *)operator new(0x88uLL);
    v6 = (std::__shared_weak_count *)v5;
    *((_QWORD *)v5 + 1) = 0;
    v7 = (unint64_t *)(v5 + 8);
    *((_QWORD *)v5 + 2) = 0;
    *(_QWORD *)v5 = &off_24EC324E8;
    v5[24] = 0;
    v8 = v5 + 24;
    v9 = *(unsigned __int8 *)(a2 + 104);
    v5[128] = v9;
    if (v9)
    {
      sub_2233226F8((_QWORD *)v5 + 3, (_QWORD *)a2);
      v4 = (uint64_t *)a1[18];
    }
    else
    {
      *v8 = *(_DWORD *)a2;
    }
    v65 = v8;
    v66 = v6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v21 = (_QWORD *)operator new();
    *v21 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v67 = v21;
    *((_QWORD *)&v67 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v22 = v4[4];
    v23 = *v4;
    v24 = (_QWORD *)(*v4 + 16 * v22);
    do
      v25 = __ldxr(v7);
    while (__stxr(v25 + 1, v7));
    *v24 = v8;
    v26 = v23 + 16 * v22;
    v27 = *(std::__shared_weak_count **)(v26 + 8);
    *(_QWORD *)(v26 + 8) = v6;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = (v4[1] - *v4) >> 4;
    v31 = v4[5];
    v32 = v4[4] + 1;
    if (v32 >= v30)
      v33 = (v4[1] - *v4) >> 4;
    else
      v33 = 0;
    v4[4] = v32 - v33;
    if (v31 == v30)
    {
      v34 = v4[3] + 1;
      if (v34 < v30)
        v30 = 0;
      v4[3] = v34 - v30;
      v35 = (std::mutex **)v67;
      if (!(_QWORD)v67)
      {
LABEL_36:
        v36 = (uint64_t **)a1[9];
        v67 = 0uLL;
        v37 = (std::__shared_weak_count *)a1[5];
        if (v37)
        {
          v38 = std::__shared_weak_count::lock(v37);
          if (v38)
          {
            v39 = v38;
            v40 = a1[4];
            v41 = (unint64_t *)&v38->__shared_weak_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            *(_QWORD *)&v67 = v40;
            *((_QWORD *)&v67 + 1) = v38;
            v43 = (unint64_t *)&v38->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          else
          {
            v67 = 0uLL;
          }
        }
        v45 = (char *)operator new(0x30uLL);
        *(_QWORD *)v45 = &off_24EC32538;
        *(_OWORD *)(v45 + 8) = v67;
        v67 = 0uLL;
        *((_QWORD *)v45 + 3) = v8;
        *((_QWORD *)v45 + 4) = v6;
        v68 = 0;
        v69 = 0;
        v71 = v45;
        sub_2245022E4(*v36, (uint64_t)v70);
        v46 = v71;
        if (v71 == v70)
        {
          v47 = 4;
          v46 = v70;
        }
        else
        {
          if (!v71)
            goto LABEL_50;
          v47 = 5;
        }
        (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_50:
        if (v66)
        {
          v48 = &v66->__shared_owners_;
          do
            v49 = __ldaxr((unint64_t *)v48);
          while (__stlxr(v49 - 1, (unint64_t *)v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v31 + 1;
      v35 = (std::mutex **)v67;
      if (!(_QWORD)v67)
        goto LABEL_36;
    }
    std::mutex::unlock(*v35);
    MEMORY[0x227684CE8](v35, 0x20C4093837F09);
    goto LABEL_36;
  }
  v10 = (uint64_t **)a1[9];
  *(_OWORD *)v54 = 0uLL;
  v11 = (std::__shared_weak_count *)a1[5];
  if (v11)
  {
    v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      v13 = v12;
      v14 = (std::__shared_weak_count *)a1[4];
      v15 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v54[0] = v14;
      v54[1] = v12;
      v17 = (unint64_t *)&v12->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    else
    {
      *(_OWORD *)v54 = 0uLL;
    }
  }
  LOBYTE(v55) = 0;
  v64 = *(_BYTE *)(a2 + 104);
  if (v64)
    sub_2233226F8(&v55, (_QWORD *)a2);
  else
    LODWORD(v55) = *(_DWORD *)a2;
  v69 = 0;
  v50 = (char *)operator new(0x88uLL);
  *(_QWORD *)v50 = &off_24EC325B8;
  *(_OWORD *)(v50 + 8) = *(_OWORD *)v54;
  v51 = v64;
  v50[128] = v64;
  if (v51)
  {
    *((_QWORD *)v50 + 3) = v55;
    *((_OWORD *)v50 + 2) = v56;
    *((_QWORD *)v50 + 6) = v57;
    v56 = 0uLL;
    *(_OWORD *)(v50 + 56) = v58;
    *((_QWORD *)v50 + 9) = v59;
    v57 = 0;
    v58 = 0uLL;
    v59 = 0;
    *((_OWORD *)v50 + 5) = v60;
    *((_QWORD *)v50 + 12) = v61;
    v60 = 0uLL;
    *(_OWORD *)(v50 + 104) = v62;
    *((_QWORD *)v50 + 15) = v63;
    v61 = 0;
    v62 = 0uLL;
    v63 = 0;
  }
  else
  {
    *((_DWORD *)v50 + 6) = v55;
  }
  v69 = (__int128 *)v50;
  sub_2245022E4(*v10, (uint64_t)&v67);
  v52 = v69;
  if (v69 == &v67)
  {
    v53 = 4;
    v52 = &v67;
  }
  else
  {
    if (!v69)
      goto LABEL_67;
    v53 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v52 + 8 * v53))(v52);
LABEL_67:
  if (v64)
    sub_223322918(&v55);
}

void sub_2233773C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22337744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 80);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_223322894((uint64_t)&a27);
  sub_223167354((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_22337749C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,std::mutex **a27)
{
  std::__shared_weak_count *v27;

  sub_223322848(&a27);
  std::__shared_weak_count::__release_weak(v27);
  sub_223167354((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_2233774C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  std::__shared_weak_count *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);
  MEMORY[0x227684CE8](v18, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v17);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233774F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__shared_weak_count *v25;

  std::__shared_weak_count::__release_weak(v25);
  sub_223167354((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_223377514(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223377524(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223377530(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223377540(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  uint64_t **v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::mutex **v40;
  uint64_t **v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  char *v62;
  int v63;
  __int128 *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  __int128 *v72;
  std::string *v73;
  std::runtime_error *exception;
  std::runtime_error *v75;
  std::__shared_weak_count *v76[2];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  unsigned __int8 v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::runtime_error v93;
  _DWORD *v94;
  std::__shared_weak_count *v95;
  __int128 v96;
  _QWORD *v97;
  __int128 *v98;
  _QWORD v99[3];
  std::string v100;
  std::string *v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v96 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v96 + 1) = 45;
    v71 = (_QWORD *)a1[6];
    v70 = a1 + 6;
    v69 = v71;
    v72 = (__int128 *)*((unsigned __int8 *)v70 + 23);
    if ((char)v72 < 0)
      v72 = (__int128 *)v70[1];
    else
      v69 = v70;
    v97 = v69;
    v98 = v72;
    sub_2231A9820((uint64_t)&v96, (uint64_t)v99, 0, 0, &v100);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v100;
    else
      v73 = (std::string *)v100.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v93, (const char *)v73);
    v93.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v75 = std::runtime_error::runtime_error(exception, &v93);
    v75->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v75, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32638;
    v6[1].__vftable = *a3;
    v91 = v6 + 1;
    v92 = v6;
    v89 = v6 + 1;
    v90 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (char *)operator new(0x88uLL);
    v10 = (std::__shared_weak_count *)v9;
    *((_QWORD *)v9 + 1) = 0;
    v11 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_24EC324E8;
    v9[24] = 0;
    v12 = v9 + 24;
    v13 = *(unsigned __int8 *)(a2 + 104);
    v9[128] = v13;
    if (v13)
      sub_2233226F8((_QWORD *)v9 + 3, (_QWORD *)a2);
    else
      *v12 = *(_DWORD *)a2;
    v94 = v12;
    v95 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    v25 = (uint64_t *)a1[18];
    v26 = (_QWORD *)operator new();
    *v26 = v25 + 7;
    std::mutex::lock((std::mutex *)(v25 + 7));
    *(_QWORD *)&v96 = v26;
    *((_QWORD *)&v96 + 1) = v25;
    if (!*((_BYTE *)v25 + 48))
      sub_22324A974();
    v27 = v25[4];
    v28 = *v25;
    v29 = (_QWORD *)(*v25 + 16 * v27);
    do
      v30 = __ldxr(v11);
    while (__stxr(v30 + 1, v11));
    *v29 = v12;
    v31 = v28 + 16 * v27;
    v32 = *(std::__shared_weak_count **)(v31 + 8);
    *(_QWORD *)(v31 + 8) = v10;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (v25[1] - *v25) >> 4;
    v36 = v25[5];
    v37 = v25[4] + 1;
    if (v37 >= v35)
      v38 = (v25[1] - *v25) >> 4;
    else
      v38 = 0;
    v25[4] = v37 - v38;
    if (v36 == v35)
    {
      v39 = v25[3] + 1;
      if (v39 < v35)
        v35 = 0;
      v25[3] = v39 - v35;
      v40 = (std::mutex **)v96;
      if (!(_QWORD)v96)
      {
LABEL_41:
        v41 = (uint64_t **)a1[9];
        v96 = 0uLL;
        v42 = (std::__shared_weak_count *)a1[5];
        if (v42)
        {
          v43 = std::__shared_weak_count::lock(v42);
          if (v43)
          {
            v44 = v43;
            v45 = a1[4];
            v46 = (unint64_t *)&v43->__shared_weak_owners_;
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
            *(_QWORD *)&v96 = v45;
            *((_QWORD *)&v96 + 1) = v43;
            v48 = (unint64_t *)&v43->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          else
          {
            v96 = 0uLL;
          }
        }
        v50 = v89;
        v51 = v90;
        v89 = 0;
        v90 = 0;
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24EC32688;
        *(_OWORD *)(v52 + 8) = v96;
        v96 = 0uLL;
        *((_QWORD *)v52 + 3) = v12;
        *((_QWORD *)v52 + 4) = v10;
        v97 = 0;
        v98 = 0;
        *((_QWORD *)v52 + 5) = v50;
        *((_QWORD *)v52 + 6) = v51;
        v99[0] = 0;
        v99[1] = 0;
        v101 = (std::string *)v52;
        sub_2245022E4(*v41, (uint64_t)&v100);
        v53 = v101;
        if (v101 == &v100)
        {
          v54 = 4;
          v53 = &v100;
        }
        else
        {
          if (!v101)
            goto LABEL_55;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_55:
        if (v95)
        {
          v55 = &v95->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        if (v90)
        {
          v57 = &v90->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        if (v92)
        {
          v59 = &v92->__shared_owners_;
          do
            v60 = __ldaxr((unint64_t *)v59);
          while (__stlxr(v60 - 1, (unint64_t *)v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        return;
      }
    }
    else
    {
      v25[5] = v36 + 1;
      v40 = (std::mutex **)v96;
      if (!(_QWORD)v96)
        goto LABEL_41;
    }
    std::mutex::unlock(*v40);
    MEMORY[0x227684CE8](v40, 0x20C4093837F09);
    goto LABEL_41;
  }
  v14 = (uint64_t **)a1[9];
  *(_OWORD *)v76 = 0uLL;
  v15 = (std::__shared_weak_count *)a1[5];
  if (v15)
  {
    v16 = std::__shared_weak_count::lock(v15);
    if (!v16)
    {
      *(_OWORD *)v76 = 0uLL;
      LOBYTE(v77) = 0;
      v86 = *(_BYTE *)(a2 + 104);
      if (v86)
        goto LABEL_19;
      goto LABEL_71;
    }
    v17 = v16;
    v18 = (std::__shared_weak_count *)a1[4];
    v19 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v76[0] = v18;
    v76[1] = v16;
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v17);
      LOBYTE(v77) = 0;
      v86 = *(_BYTE *)(a2 + 104);
      if (v86)
        goto LABEL_19;
      goto LABEL_71;
    }
  }
  LOBYTE(v77) = 0;
  v86 = *(_BYTE *)(a2 + 104);
  if (v86)
  {
LABEL_19:
    sub_2233226F8(&v77, (_QWORD *)a2);
    goto LABEL_72;
  }
LABEL_71:
  LODWORD(v77) = *(_DWORD *)a2;
LABEL_72:
  v61 = (std::__shared_weak_count *)operator new(0x20uLL);
  v61->__shared_owners_ = 0;
  v61->__shared_weak_owners_ = 0;
  v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32638;
  v61[1].__vftable = *a3;
  *a3 = 0;
  v87 = &v61[1].__vftable;
  v88 = v61;
  v98 = 0;
  v62 = (char *)operator new(0x98uLL);
  *(_QWORD *)v62 = &off_24EC32708;
  *(_OWORD *)(v62 + 8) = *(_OWORD *)v76;
  v63 = v86;
  v62[128] = v86;
  if (v63)
  {
    *((_QWORD *)v62 + 3) = v77;
    *((_OWORD *)v62 + 2) = v78;
    *((_QWORD *)v62 + 6) = v79;
    v78 = 0uLL;
    *(_OWORD *)(v62 + 56) = v80;
    *((_QWORD *)v62 + 9) = v81;
    v79 = 0;
    v80 = 0uLL;
    v81 = 0;
    *((_OWORD *)v62 + 5) = v82;
    *((_QWORD *)v62 + 12) = v83;
    v82 = 0uLL;
    *(_OWORD *)(v62 + 104) = v84;
    *((_QWORD *)v62 + 15) = v85;
    v83 = 0;
    v84 = 0uLL;
    v85 = 0;
  }
  else
  {
    *((_DWORD *)v62 + 6) = v77;
  }
  *((_QWORD *)v62 + 17) = v61 + 1;
  *((_QWORD *)v62 + 18) = v61;
  v87 = 0;
  v88 = 0;
  v98 = (__int128 *)v62;
  sub_2245022E4(*v14, (uint64_t)&v96);
  v64 = v98;
  if (v98 == &v96)
  {
    v65 = 4;
    v64 = &v96;
  }
  else
  {
    if (!v98)
      goto LABEL_80;
    v65 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v64 + 8 * v65))(v64);
LABEL_80:
  v66 = v88;
  if (v88)
  {
    v67 = (unint64_t *)&v88->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v86)
    sub_223322918(&v77);
}

void sub_223377C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_223377CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32)
{
  std::__assoc_sub_state **v32;
  uint64_t v33;
  std::__assoc_sub_state *v34;
  std::exception_ptr v35;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::current_exception();
    __cxa_end_catch();
    v34 = *v32;
    if (*v32)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v33 - 160), (const std::exception_ptr *)(v33 - 184));
      v35.__ptr_ = (void *)(v33 - 160);
      std::__assoc_sub_state::set_exception(v34, v35);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v33 - 160));
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v33 - 184));
      std::runtime_error::~runtime_error(&a32);
      if (*(char *)(v33 - 81) < 0)
        operator delete(*(void **)(v33 - 104));
      JUMPOUT(0x223377B7CLL);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(a1);
}

void sub_223377D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::runtime_error a32)
{
  uint64_t v32;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v32 - 184));
  std::runtime_error::~runtime_error(&a32);
  if (*(char *)(v32 - 81) < 0)
  {
    operator delete(*(void **)(v32 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223377D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_223379BAC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_223379BAC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223377DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;

  if (a24)
    sub_223322918(v24);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223377E14);
}

void sub_223377DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  std::__shared_weak_count *v30;
  void *v32;

  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v32);
  sub_223167354((uint64_t)&a28);
  sub_223167354((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_223377E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v33 = *(_QWORD **)(v31 - 80);
  if (v33 == v30)
  {
    v34 = 4;
    v33 = (_QWORD *)(v31 - 104);
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_6:
  sub_22332429C((_QWORD *)(v31 - 160));
  sub_223167354(v31 - 176);
  sub_223167354((uint64_t)&a28);
  sub_223167354((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_223377EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  sub_223167354((uint64_t)&a28);
  sub_223167354((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_223377ED8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223377F4C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC32788;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E3A0;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22337807C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233780F0(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC32808;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2DEB0;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223378220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223378294@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC32888;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2233784AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223378574@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC32908;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22337878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223378854(uint64_t a1)
{
  return sub_2233789B8(a1 - 16);
}

void sub_22337885C(uint64_t a1)
{
  sub_2233789B8(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223378884(uint64_t a1, uint64_t a2)
{
  return sub_223377F4C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22337888C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223378294((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223378894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223378574((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22337889C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2233788A4(uint64_t a1)
{
  return sub_2233789B8(a1 - 24);
}

void sub_2233788AC(uint64_t a1)
{
  sub_2233789B8(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233788D4(uint64_t a1, uint64_t a2)
{
  return sub_2233780F0((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_2233788DC(uint64_t a1)
{
  return a1 - 24;
}

void sub_2233788E8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233788FC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *exception;

  if (!*(_BYTE *)(a1 + 104))
  {
    exception = __cxa_allocate_exception(4uLL);
    sub_223378978(a1);
    *exception = *(_DWORD *)a1;
    __cxa_throw(exception, (struct type_info *)&unk_24EC324C8, 0);
  }
  return sub_2233226F8(a2, (_QWORD *)a1);
}

void sub_223378964(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223378978(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 104))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24EC1FCC0;
    __cxa_throw(exception, (struct type_info *)&unk_24EC1FC98, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_2233789B8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC322C8;
  *(_QWORD *)(a1 + 16) = &unk_24EC32340;
  *(_QWORD *)(a1 + 24) = &unk_24EC32380;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_223378BCC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(_BYTE *)(a1 + 120))
    sub_223322918((_QWORD *)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223378C08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC324E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223378C18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC324E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223378C48(_QWORD *result)
{
  if (*((_BYTE *)result + 128))
    return sub_223322918(result + 3);
  return result;
}

_QWORD *sub_223378C60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32538;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223378CA4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32538;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223378CF8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32538;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223378D68(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32538;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223378DB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223378DF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223378E2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223379150((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2233796BC(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223378FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2233796BC(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233790D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd2"
                     "2SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25EnqueueMessageAndDispatchIZN"
                     "KSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13con"
                                "current_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25Enqueu"
                                "eMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223379144()
{
  return &unk_24EC32598;
}

void sub_223379150(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  std::exception_ptr v32;
  uint64_t v33;
  void *v34;
  char *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *__p;
  char *v41;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v33, v6, a2);
  for (i = (uint64_t *)a1[2]; i != a1 + 1; i = (uint64_t *)i[1])
    (*(void (**)(uint64_t *, uint64_t *))(i[2] + 16))(i + 2, &v33);
  if (*((_BYTE *)a3 + 8))
  {
    v8 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v8 + 24));
    if ((*(_BYTE *)(v8 + 136) & 1) != 0
      || (v32.__ptr_ = 0, v9 = *(_QWORD *)(v8 + 16), std::exception_ptr::~exception_ptr(&v32), v9))
    {
      sub_2233236D4(2u);
    }
    sub_2233226F8((_QWORD *)(v8 + 144), &v33);
    *(_DWORD *)(v8 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v8 + 88));
    std::mutex::unlock((std::mutex *)(v8 + 24));
  }
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v41;
    v12 = __p;
    if (v41 != __p)
    {
      do
      {
        v14 = (void *)*((_QWORD *)v11 - 6);
        if (v14)
        {
          *((_QWORD *)v11 - 5) = v14;
          operator delete(v14);
        }
        v15 = *((_QWORD *)v11 - 9);
        if (v15)
        {
          v16 = *((_QWORD *)v11 - 8);
          v13 = (void *)*((_QWORD *)v11 - 9);
          if (v16 != v15)
          {
            v17 = *((_QWORD *)v11 - 8);
            do
            {
              v19 = *(void **)(v17 - 24);
              v17 -= 24;
              v18 = v19;
              if (v19)
              {
                *(_QWORD *)(v16 - 16) = v18;
                operator delete(v18);
              }
              v16 = v17;
            }
            while (v17 != v15);
            v13 = (void *)*((_QWORD *)v11 - 9);
          }
          *((_QWORD *)v11 - 8) = v15;
          operator delete(v13);
        }
        v11 -= 168;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v41 = v10;
    operator delete(v12);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  v20 = (char *)v34;
  if (v34)
  {
    v21 = v35;
    v22 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*(v21 - 16))
        {
          v23 = *((_QWORD *)v21 - 5);
          if (v23)
          {
            v24 = *((_QWORD *)v21 - 4);
            v25 = (void *)*((_QWORD *)v21 - 5);
            if (v24 != v23)
            {
              v26 = *((_QWORD *)v21 - 4);
              do
              {
                v28 = *(void **)(v26 - 24);
                v26 -= 24;
                v27 = v28;
                if (v28)
                {
                  *(_QWORD *)(v24 - 16) = v27;
                  operator delete(v27);
                }
                v24 = v26;
              }
              while (v26 != v23);
              v25 = (void *)*((_QWORD *)v21 - 5);
            }
            *((_QWORD *)v21 - 4) = v23;
            operator delete(v25);
          }
        }
        if (*(v21 - 48))
        {
          v29 = (void *)*((_QWORD *)v21 - 9);
          if (v29)
          {
            *((_QWORD *)v21 - 8) = v29;
            operator delete(v29);
          }
        }
        if (*(v21 - 80))
        {
          v30 = (void *)*((_QWORD *)v21 - 13);
          if (v30)
          {
            *((_QWORD *)v21 - 12) = v30;
            operator delete(v30);
          }
        }
        v31 = (void *)*((_QWORD *)v21 - 23);
        if (v31)
        {
          *((_QWORD *)v21 - 22) = v31;
          operator delete(v31);
        }
        v21 -= 464;
      }
      while (v21 != v20);
      v22 = v34;
    }
    v35 = v20;
    operator delete(v22);
  }
}

void sub_223379410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::exception_ptr a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v43;
  uint64_t v44;
  uint64_t i;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  unsigned __int8 v53;
  std::exception_ptr v54;
  uint64_t v55;

  sub_223322918(&v55);
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v46 = (uint64_t *)__cxa_begin_catch(a1);
      v47 = *v46;
      v51 = *(_QWORD *)(*(_QWORD *)(*v46 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v50 = (*(uint64_t (**)(void))(v47 + 16))();
      sub_2233233A4("Caught unexpected exception of type: ", (const char *)&v51, "\n", "message: ", (const char *)&v50, "\n");
      if ((v53 & 0x80u) == 0)
        v48 = v52;
      else
        v48 = (_QWORD *)v52[0];
      if ((v53 & 0x80u) == 0)
        v49 = v53;
      else
        v49 = v52[1];
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v48, v49, (void (*)(void **))sub_22457406C);
      abort();
    }
    _Unwind_Resume(a1);
  }
  v43 = __cxa_begin_catch(a1);
  if (!*(_QWORD *)(v40 + 48)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 186, (uint64_t)"!error_downstream_.empty()", 26, (uint64_t)"It is mandated that all errors are handled and enforced by a processor. Add an error handler with AddErrorHandler()", 115, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v44 = v40 + 32;
  for (i = *(_QWORD *)(v40 + 40); i != v44; i = *(_QWORD *)(i + 8))
    (*(void (**)(uint64_t, void *))(*(_QWORD *)(i + 16) + 16))(i + 16, v43);
  if (*(_BYTE *)(v39 + 8))
  {
    std::current_exception();
    sub_22337965C(*(std::__assoc_sub_state **)v39, &v54);
    std::exception_ptr::~exception_ptr(&v54);
  }
  __cxa_end_catch();
}

void sub_223379630(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x223379650);
}

void sub_22337965C(std::__assoc_sub_state *a1, const std::exception_ptr *a2)
{
  std::exception_ptr v3;
  std::exception_ptr v4;

  if (!a1)
    sub_2233236D4(3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(a1, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_2233796A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_2233796BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_2233797A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x223379704);
}

uint64_t sub_2233797E4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24EC325B8;
  if (*(_BYTE *)(a1 + 128))
    sub_223322918((_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22337982C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_24EC325B8;
  if (*(_BYTE *)(a1 + 128))
    sub_223322918((_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223379884(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;

  v2 = operator new(0x88uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC325B8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_BYTE *)v2 + 24) = 0;
  v8 = v2 + 3;
  v9 = (_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 128);
  *((_BYTE *)v3 + 128) = v10;
  if (v10)
    sub_2233226F8(v8, v9);
  else
    *(_DWORD *)v8 = *(_DWORD *)v9;
  return v3;
}

void sub_223379910(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223379930(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  int v9;

  v4 = result[1];
  v3 = result[2];
  *(_QWORD *)a2 = &off_24EC325B8;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a2 + 24) = 0;
  v7 = (_DWORD *)(a2 + 24);
  v8 = result + 3;
  v9 = *((unsigned __int8 *)result + 128);
  *(_BYTE *)(a2 + 128) = v9;
  if (v9)
    return sub_2233226F8((_QWORD *)(a2 + 24), v8);
  *v7 = *(_DWORD *)v8;
  return result;
}

void sub_2233799AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2233799C4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(_BYTE *)(a1 + 128))
    sub_223322918((_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_223379A04(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  if (*((_BYTE *)__p + 128))
    sub_223322918(__p + 3);
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223379A40(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223379150((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2233796BC(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223379AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2233796BC(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223379B34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd2"
                     "2SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE4SendERKSB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13con"
                                "current_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE4SendERKSB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE4SendERKSB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE4SendERKSB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223379BA0()
{
  return &unk_24EC32618;
}

uint64_t sub_223379BAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 120))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 120))
LABEL_6:
    sub_223322918((_QWORD *)(a1 + 16));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223379C2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223379C3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_223379C6C(uint64_t a1)
{
  return sub_2233796BC((uint64_t *)(a1 + 24));
}

_QWORD *sub_223379C78(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC32688;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223379D00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC32688;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223379D98(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32688;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223379E28(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32688;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223379E98(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223379F18(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223379F94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223379150(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2233796BC((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22337A270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22337A29C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x22337A0A8);
    JUMPOUT(0x22337A078);
  }
  sub_2233236D4(3u);
}

void sub_22337A2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22337A324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2233796BC(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22337A410(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd2"
                     "2SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25EnqueueMessageAndDispatchIZN"
                     "KSC_7ProcessERKSB_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSF_SJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13con"
                                "current_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25Enqueu"
                                "eMessageAndDispatchIZNKSC_7ProcessERKSB_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSF_SJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSF_SJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NSt3__17promiseIS8_EEEUlT_T0_E_EEvSF_SJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337A47C()
{
  return &unk_24EC326E8;
}

uint64_t sub_22337A488(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24EC32708;
  v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 128))
LABEL_6:
    sub_223322918((_QWORD *)(a1 + 24));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22337A514(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)a1 = &off_24EC32708;
  v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!*(_BYTE *)(a1 + 128))
    {
LABEL_7:
      v5 = *(std::__shared_weak_count **)(a1 + 16);
      if (v5)
        std::__shared_weak_count::__release_weak(v5);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_7;
  }
  sub_223322918((_QWORD *)(a1 + 24));
  goto LABEL_7;
}

_QWORD *sub_22337A5B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = operator new(0x98uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC32708;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_BYTE *)v2 + 24) = 0;
  v8 = v2 + 3;
  v9 = (_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 128);
  *((_BYTE *)v3 + 128) = v10;
  if (v10)
  {
    sub_2233226F8(v8, v9);
    v11 = *(_QWORD *)(a1 + 144);
    v3[17] = *(_QWORD *)(a1 + 136);
    v3[18] = v11;
    if (!v11)
      return v3;
  }
  else
  {
    *(_DWORD *)v8 = *(_DWORD *)v9;
    v11 = *(_QWORD *)(a1 + 144);
    v3[17] = *(_QWORD *)(a1 + 136);
    v3[18] = v11;
    if (!v11)
      return v3;
  }
  v12 = (unint64_t *)(v11 + 8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  return v3;
}

void sub_22337A65C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22337A67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC32708;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a2 + 24) = 0;
  result = (_QWORD *)(a2 + 24);
  v9 = (_QWORD *)(a1 + 24);
  v10 = *(unsigned __int8 *)(a1 + 128);
  *(_BYTE *)(a2 + 128) = v10;
  if (v10)
  {
    result = sub_2233226F8(result, v9);
    v11 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a2 + 144) = v11;
    if (!v11)
      return result;
  }
  else
  {
    *(_DWORD *)result = *(_DWORD *)v9;
    v11 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a2 + 144) = v11;
    if (!v11)
      return result;
  }
  v12 = (unint64_t *)(v11 + 8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  return result;
}

void sub_22337A71C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22337A734(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(_BYTE *)(a1 + 128))
LABEL_6:
    sub_223322918((_QWORD *)(a1 + 24));
LABEL_7:
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22337A7B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[18];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if (!*((_BYTE *)__p + 128))
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*((_BYTE *)__p + 128))
LABEL_6:
    sub_223322918(__p + 3);
LABEL_7:
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void sub_22337A838(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[17];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223379150((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2233796BC((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22337A948(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_22337A9C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x22337A9F4);
  JUMPOUT(0x22337AA24);
}

uint64_t sub_22337AA2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd2"
                     "2SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE7ProcessERKSB_NSt3__17promiseIS8_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13con"
                                "current_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE7Process"
                                "ERKSB_NSt3__17promiseIS8_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE7ProcessERKSB_NSt3__17promiseIS8_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE7ProcessERKSB_NSt3__17promiseIS8_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337AA98()
{
  return &unk_24EC32768;
}

_QWORD *sub_22337AAA4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32788;
  v2 = a1[4];
  a1[3] = &off_24EC2E3A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22337AAFC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32788;
  v2 = a1[4];
  a1[3] = &off_24EC2E3A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337AB64(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC32788;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E3A0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22337ABDC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22337ABFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC32788;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E3A0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22337AC64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22337AC7C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E3A0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22337ACCC(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E3A0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22337AD18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E3A0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337ADCC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337AE08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22"
                     "SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13conc"
                                "urrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE9Subscrib"
                                "eENS1_12ChannelInputIS8_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE9SubscribeENS1_12ChannelInputIS8_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337AE74()
{
  return &unk_24EC327E8;
}

_QWORD *sub_22337AE80(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32808;
  v2 = a1[4];
  a1[3] = &off_24EC2DEB0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22337AED8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32808;
  v2 = a1[4];
  a1[3] = &off_24EC2DEB0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337AF40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC32808;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2DEB0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22337AFB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22337AFD8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC32808;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2DEB0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22337B040(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22337B058(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2DEB0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22337B0A8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2DEB0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22337B0F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2DEB0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337B1A8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337B1E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22"
                     "SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15AddErrorHandlerENS1_12Channel"
                     "InputISA_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13conc"
                                "urrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15AddErro"
                                "rHandlerENS1_12ChannelInputISA_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15AddErrorHandlerENS1_12ChannelInputISA_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15AddErrorHandlerENS1_12ChannelInputISA_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337B250()
{
  return &unk_24EC32868;
}

_QWORD *sub_22337B25C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32888;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22337B294(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32888;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337B2DC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32888;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22337B334(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32888;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22337B36C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22337B37C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22337B3A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22337B524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337B594(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd2"
                     "2SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13con"
                                "current_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE16Output"
                                "HandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337B600()
{
  return &unk_24EC328E8;
}

_QWORD *sub_22337B60C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32908;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22337B644(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32908;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337B68C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32908;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22337B6E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32908;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22337B71C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22337B72C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22337B758(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22337B8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337B944(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd2"
                     "2SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13con"
                                "current_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15ErrorH"
                                "andlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENS7_16SurfaceDetection5ErrorEEES8_SA_S8_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337B9B0()
{
  return &unk_24EC32968;
}

void sub_22337B9C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22337B9E4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22337B9FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS1_9applec"
                     "v3d13concurrent_sd22SurfaceDetectionResultENS9_16SurfaceDetection5ErrorEEESA_SC_SA_Lb0EEEE27__share"
                     "d_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedI"
                                "NS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS9_16SurfaceDetection5ErrorEEESA_"
                                "SC_SA_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS9_16SurfaceDetection5ErrorEEESA_SC_SA_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINSt12experimental8expectedINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS9_16SurfaceDetection5ErrorEEESA_SC_SA_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22337BA6C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22337BA98(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337BAD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC329D8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22337BB3C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337BBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22337BBE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337BC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22337BC84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22337BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22337BD5C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22337BE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22337BE34(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22337BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22337BEF0(uint64_t a1)
{
  sub_22337D8C4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22337BF14(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  __int128 *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  std::__shared_weak_count *v59[2];
  void *v60;
  unint64_t v61;
  void *__p;
  uint64_t v63;
  int v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  _BYTE v70[24];
  _BYTE *v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (std::__shared_weak_count *)operator new(0x40uLL);
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32C40;
    v6 = v4 + 1;
    sub_22337E1F4((uint64_t)&v4[1], a2);
    v65 = v4 + 1;
    v66 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v9 = (uint64_t *)a1[18];
    v10 = (_QWORD *)operator new();
    *v10 = v9 + 7;
    std::mutex::lock((std::mutex *)(v9 + 7));
    *(_QWORD *)&v67 = v10;
    *((_QWORD *)&v67 + 1) = v9;
    if (!*((_BYTE *)v9 + 48))
      sub_22324A974();
    v11 = v9[4];
    v12 = *v9;
    v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v6;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v4;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v9[1] - *v9) >> 4;
    v20 = v9[5];
    v21 = v9[4] + 1;
    if (v21 >= v19)
      v22 = (v9[1] - *v9) >> 4;
    else
      v22 = 0;
    v9[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v9[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v9[3] = v23 - v19;
      v24 = (std::mutex **)v67;
      if (!(_QWORD)v67)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v67 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v67 = v38;
            *((_QWORD *)&v67 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v67 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC32C90;
        *(_OWORD *)(v43 + 8) = v67;
        v67 = 0uLL;
        *((_QWORD *)v43 + 3) = v6;
        *((_QWORD *)v43 + 4) = v4;
        v68 = 0;
        v69 = 0;
        v71 = v43;
        sub_2245022E4(*v34, (uint64_t)v70);
        v44 = v71;
        if (v71 == v70)
        {
          v45 = 4;
          v44 = v70;
        }
        else
        {
          if (!v71)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
        if (v66)
        {
          v46 = &v66->__shared_owners_;
          do
            v47 = __ldaxr((unint64_t *)v46);
          while (__stlxr(v47 - 1, (unint64_t *)v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        return;
      }
    }
    else
    {
      v9[5] = v20 + 1;
      v24 = (std::mutex **)v67;
      if (!(_QWORD)v67)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  *(_OWORD *)v59 = 0uLL;
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    if (v27)
    {
      v28 = v27;
      v29 = (std::__shared_weak_count *)a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v59[0] = v29;
      v59[1] = v27;
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      *(_OWORD *)v59 = 0uLL;
    }
  }
  sub_22337E1F4((uint64_t)&v60, a2);
  v69 = 0;
  v48 = (char *)operator new(0x40uLL);
  *(_QWORD *)v48 = &off_24EC32D10;
  *(_OWORD *)(v48 + 8) = *(_OWORD *)v59;
  v49 = v60;
  v50 = v61;
  v60 = 0;
  v61 = 0;
  *((_QWORD *)v48 + 3) = v49;
  *((_QWORD *)v48 + 4) = v50;
  v52 = __p;
  v51 = v63;
  *((_QWORD *)v48 + 5) = __p;
  *((_QWORD *)v48 + 6) = v51;
  *((_DWORD *)v48 + 14) = v64;
  if (v51)
  {
    v53 = v52[1];
    if ((v50 & (v50 - 1)) != 0)
    {
      if (v53 >= v50)
        v53 %= v50;
    }
    else
    {
      v53 &= v50 - 1;
    }
    v49[v53] = v48 + 40;
    __p = 0;
    v63 = 0;
  }
  v69 = (__int128 *)v48;
  sub_2245022E4(*v25, (uint64_t)&v67);
  v54 = v69;
  if (v69 == &v67)
  {
    v55 = 4;
    v54 = &v67;
    goto LABEL_63;
  }
  if (v69)
  {
    v55 = 5;
LABEL_63:
    (*(void (**)(__int128 *))(*(_QWORD *)v54 + 8 * v55))(v54);
  }
  v56 = __p;
  if (__p)
  {
    do
    {
      v57 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v57;
    }
    while (v57);
  }
  v58 = v60;
  v60 = 0;
  if (v58)
    operator delete(v58);
}

void sub_22337C3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a22;
  if (a22 == v22)
  {
    v25 = 4;
    v24 = &a19;
  }
  else
  {
    if (!a22)
    {
      sub_22337DAB0(&a9);
      _Unwind_Resume(a1);
    }
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  sub_22337DAB0(&a9);
  _Unwind_Resume(a1);
}

void sub_22337C424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337C51C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22337C52C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22337C538(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22337C548(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  __int128 *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  __int128 *v78;
  std::string *v79;
  std::runtime_error *exception;
  std::runtime_error *v81;
  std::__shared_weak_count *v82[2];
  void *v83;
  unint64_t v84;
  void *__p;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::runtime_error v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  _QWORD *v98;
  __int128 *v99;
  _QWORD v100[3];
  std::string v101;
  std::string *v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v97 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v97 + 1) = 45;
    v77 = (_QWORD *)a1[6];
    v76 = a1 + 6;
    v75 = v77;
    v78 = (__int128 *)*((unsigned __int8 *)v76 + 23);
    if ((char)v78 < 0)
      v78 = (__int128 *)v76[1];
    else
      v75 = v76;
    v98 = v75;
    v99 = v78;
    sub_2231A9820((uint64_t)&v97, (uint64_t)v100, 0, 0, &v101);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = &v101;
    else
      v79 = (std::string *)v101.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v94, (const char *)v79);
    v94.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v81 = std::runtime_error::runtime_error(exception, &v94);
    v81->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v81, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v92 = v6 + 1;
    v93 = v6;
    v90 = v6 + 1;
    v91 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x40uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32C40;
    v11 = v9 + 1;
    sub_22337E1F4((uint64_t)&v9[1], a2);
    v95 = v9 + 1;
    v96 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v97 = v15;
    *((_QWORD *)&v97 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v97;
      if (!(_QWORD)v97)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v97 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v97 = v43;
            *((_QWORD *)&v97 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v97 = 0uLL;
          }
        }
        v48 = v90;
        v49 = v91;
        v90 = 0;
        v91 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC32D90;
        *(_OWORD *)(v50 + 8) = v97;
        v97 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v98 = 0;
        v99 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v100[0] = 0;
        v100[1] = 0;
        v102 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v101);
        v51 = v102;
        if (v102 == &v101)
        {
          v52 = 4;
          v51 = &v101;
        }
        else
        {
          if (!v102)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v96)
        {
          v53 = &v96->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        if (v91)
        {
          v55 = &v91->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        if (v93)
        {
          v57 = &v93->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v97;
      if (!(_QWORD)v97)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v82 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v82[0] = v34;
      v82[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v82 = 0uLL;
    }
  }
  sub_22337E1F4((uint64_t)&v83, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
  v59[1].__vftable = *a3;
  v60 = &v59[1].__vftable;
  *a3 = 0;
  v88 = &v59[1].__vftable;
  v89 = v59;
  v99 = 0;
  v61 = (char *)operator new(0x50uLL);
  *(_QWORD *)v61 = &off_24EC32E10;
  *(_OWORD *)(v61 + 8) = *(_OWORD *)v82;
  v62 = v83;
  v63 = v84;
  v83 = 0;
  v84 = 0;
  *((_QWORD *)v61 + 3) = v62;
  *((_QWORD *)v61 + 4) = v63;
  v65 = __p;
  v64 = v86;
  *((_QWORD *)v61 + 5) = __p;
  *((_QWORD *)v61 + 6) = v64;
  *((_DWORD *)v61 + 14) = v87;
  if (v64)
  {
    v66 = v65[1];
    if ((v63 & (v63 - 1)) != 0)
    {
      if (v66 >= v63)
        v66 %= v63;
    }
    else
    {
      v66 &= v63 - 1;
    }
    v62[v66] = v61 + 40;
    __p = 0;
    v86 = 0;
    v60 = v88;
    v59 = v89;
  }
  *((_QWORD *)v61 + 8) = v60;
  *((_QWORD *)v61 + 9) = v59;
  v88 = 0;
  v89 = 0;
  v99 = (__int128 *)v61;
  sub_2245022E4(*v30, (uint64_t)&v97);
  v67 = v99;
  if (v99 == &v97)
  {
    v68 = 4;
    v67 = &v97;
  }
  else
  {
    if (!v99)
      goto LABEL_78;
    v68 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v67 + 8 * v68))(v67);
LABEL_78:
  v69 = v89;
  if (v89)
  {
    v70 = (unint64_t *)&v89->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = __p;
  if (__p)
  {
    do
    {
      v73 = (_QWORD *)*v72;
      operator delete(v72);
      v72 = v73;
    }
    while (v73);
  }
  v74 = v83;
  v83 = 0;
  if (v74)
    operator delete(v74);
}

void sub_22337CC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::runtime_error a22,std::exception_ptr a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::promise<void> *v29;
  uint64_t v30;
  std::exception_ptr v31;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v31.__ptr_ = &a23;
    std::promise<void>::set_exception(v29, v31);
    std::exception_ptr::~exception_ptr(&a23);
    std::runtime_error::~runtime_error(&a22);
    if (*(char *)(v30 - 81) < 0)
      operator delete(*(void **)(v30 - 104));
    JUMPOUT(0x22337CB58);
  }
  _Unwind_Resume(exception_object);
}

void sub_22337CD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;

  v30 = *(_QWORD **)(v28 - 80);
  if (v30 == v27)
  {
    v31 = 4;
    v30 = (_QWORD *)(v28 - 104);
  }
  else
  {
    if (!v30)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_6:
  sub_22332429C(&a27);
  sub_223167354((uint64_t)&a25);
  sub_223167354((uint64_t)&a18);
  sub_223167354((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_22337CDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  sub_223167354((uint64_t)&a18);
  sub_223167354((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_22337CE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22337CE40(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22337CEB4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC32E90;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22337CFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22337D028(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC32F10;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22337D138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22337D19C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC32F90;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22337D3B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22337D47C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC33010;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22337D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22337D75C(uint64_t a1)
{
  return sub_22337D8C4(a1 - 16);
}

void sub_22337D764(uint64_t a1)
{
  sub_22337D8C4(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337D78C(uint64_t a1)
{
  return sub_22337CEB4((_QWORD *)(a1 - 16));
}

uint64_t *sub_22337D794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22337D19C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22337D79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22337D47C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22337D7A4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22337D7AC(uint64_t a1)
{
  return sub_22337D8C4(a1 - 24);
}

void sub_22337D7B4(uint64_t a1)
{
  sub_22337D8C4(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337D7DC(uint64_t a1)
{
  return sub_22337D028((_QWORD *)(a1 - 24));
}

uint64_t sub_22337D7E4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22337D7EC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22337D854(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_22337D8BC(uint64_t a1, uint64_t a2)
{
  sub_22333CB40(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_22337D8C4(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC32A50;
  *(_QWORD *)(a1 + 16) = &unk_24EC32AC8;
  *(_QWORD *)(a1 + 24) = &unk_24EC32B08;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_22337DAB0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[2];
  a1[2] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22337DB04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22337DB14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32C40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22337DB44(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v4)
    operator delete(v4);
}

_QWORD *sub_22337DB94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32C90;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22337DBD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC32C90;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337DC2C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32C90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22337DC9C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32C90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22337DCEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22337DD28(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22337DD60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_22337E084((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22337DF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337E00C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_EUlT_T0_E_EEvSR_SS_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_"
                                "EUlT_T0_E_EEvSR_SS_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_EUlT_T0_E_EEvSR_SS_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_4SendERKSN_EUlT_T0_E_EEvSR_SS_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337E078()
{
  return &unk_24EC32CF0;
}

void sub_22337E084(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_22337E11C()
{
  __break(1u);
}

void sub_22337E1C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22337E1E8);
}

uint64_t sub_22337E1F4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  size_t prime;
  int8x8_t v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  float v31;
  float v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v6 = *(int8x8_t *)(a1 + 8);
    v7 = prime >= *(_QWORD *)&v6;
    if (prime > *(_QWORD *)&v6)
      goto LABEL_17;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v7)
  {
    v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v6 < 3uLL || (v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (prime <= v8)
      prime = v8;
    if (prime < *(_QWORD *)&v6)
      goto LABEL_17;
  }
LABEL_18:
  v11 = *(uint64_t **)(a2 + 16);
  if (v11)
  {
    v12 = (_QWORD *)(a1 + 16);
    while (1)
    {
      v13 = v11 + 2;
      v14 = sub_22456636C((unsigned __int8 *)v11 + 16);
      v15 = v14;
      v16 = *(_QWORD *)(a1 + 8);
      if (v16)
      {
        v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          v2 = v14;
          if (v14 >= v16)
            v2 = v14 % v16;
        }
        else
        {
          v2 = (v16 - 1) & v14;
        }
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
        if (v18)
        {
          v19 = (_QWORD *)*v18;
          if (v19)
          {
            if (v17.u32[0] < 2uLL)
            {
              while (1)
              {
                v23 = v19[1];
                if (v23 == v14)
                {
                  if (v19[2] == *v13 && v19[3] == v11[3])
                    goto LABEL_86;
                }
                else if ((v23 & (v16 - 1)) != v2)
                {
                  goto LABEL_46;
                }
                v19 = (_QWORD *)*v19;
                if (!v19)
                  goto LABEL_46;
              }
            }
            do
            {
              v21 = v19[1];
              if (v21 == v14)
              {
                if (v19[2] == *v13 && v19[3] == v11[3])
                  goto LABEL_86;
              }
              else
              {
                if (v21 >= v16)
                  v21 %= v16;
                if (v21 != v2)
                  break;
              }
              v19 = (_QWORD *)*v19;
            }
            while (v19);
          }
        }
      }
LABEL_46:
      v24 = operator new(0xA0uLL);
      *v24 = 0;
      v24[1] = v15;
      *((_OWORD *)v24 + 1) = *(_OWORD *)v13;
      v25 = *((_OWORD *)v11 + 9);
      v27 = *((_OWORD *)v11 + 6);
      v26 = *((_OWORD *)v11 + 7);
      *((_OWORD *)v24 + 8) = *((_OWORD *)v11 + 8);
      *((_OWORD *)v24 + 9) = v25;
      *((_OWORD *)v24 + 6) = v27;
      *((_OWORD *)v24 + 7) = v26;
      v28 = *((_OWORD *)v11 + 2);
      v29 = *((_OWORD *)v11 + 3);
      v30 = *((_OWORD *)v11 + 5);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v11 + 4);
      *((_OWORD *)v24 + 5) = v30;
      *((_OWORD *)v24 + 2) = v28;
      *((_OWORD *)v24 + 3) = v29;
      v31 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v32 = *(float *)(a1 + 32);
      if (v16 && (float)(v32 * (float)v16) >= v31)
        goto LABEL_75;
      v33 = v16 < 3 || (v16 & (v16 - 1)) != 0;
      v34 = v33 | (2 * v16);
      v35 = vcvtps_u32_f32(v31 / v32);
      if (v34 <= v35)
        v36 = v35;
      else
        v36 = v34;
      if (v36 == 1)
      {
        v36 = 2;
      }
      else if ((v36 & (v36 - 1)) != 0)
      {
        v36 = std::__next_prime(v36);
        v16 = *(_QWORD *)(a1 + 8);
      }
      if (v36 > v16)
        goto LABEL_59;
      if (v36 < v16)
      {
        v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
        if (v16 < 3 || (v38 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
        {
          v37 = std::__next_prime(v37);
        }
        else
        {
          v39 = 1 << -(char)__clz(v37 - 1);
          if (v37 >= 2)
            v37 = v39;
        }
        if (v36 <= v37)
          v36 = v37;
        if (v36 < v16)
LABEL_59:
          sub_2231B0668(a1, v36);
      }
      v16 = *(_QWORD *)(a1 + 8);
      v40 = v16 - 1;
      if ((v16 & (v16 - 1)) == 0)
      {
        v2 = v40 & v15;
        v41 = *(_QWORD *)a1;
        v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v40 & v15));
        if (v42)
          goto LABEL_76;
        goto LABEL_78;
      }
      if (v15 < v16)
        break;
      v2 = v15 % v16;
      v41 = *(_QWORD *)a1;
      v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v15 % v16));
      if (v42)
      {
LABEL_76:
        *v24 = *v42;
        goto LABEL_84;
      }
LABEL_78:
      *v24 = *v12;
      *v12 = v24;
      *(_QWORD *)(v41 + 8 * v2) = v12;
      if (!*v24)
        goto LABEL_85;
      v43 = *(_QWORD *)(*v24 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v43 >= v16)
          v43 %= v16;
      }
      else
      {
        v43 &= v16 - 1;
      }
      v42 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
LABEL_84:
      *v42 = v24;
LABEL_85:
      ++*(_QWORD *)(a1 + 24);
LABEL_86:
      v11 = (uint64_t *)*v11;
      if (!v11)
        return a1;
    }
    v2 = v15;
LABEL_75:
    v41 = *(_QWORD *)a1;
    v42 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v42)
      goto LABEL_76;
    goto LABEL_78;
  }
  return a1;
}

void sub_22337E5F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_22337E608(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_22337E624(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22337E638(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC32D10;
  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22337E698(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC32D10;
  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337E708(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x40uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC32D10;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_22337E1F4((uint64_t)(v2 + 3), a1 + 24);
  return v3;
}

void sub_22337E76C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22337E78C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC32D10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_22337E1F4((uint64_t)(a2 + 3), a1 + 24);
}

void sub_22337E7E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22337E7FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)a1[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22337E854(_QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)__p[5];
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)__p[3];
  __p[3] = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  operator delete(__p);
}

void sub_22337E8A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_22337E084((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337E950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337E99C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE4SendERKSN_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337EA08()
{
  return &unk_24EC32D70;
}

_QWORD *sub_22337EA14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[2];
  a1[2] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

_QWORD *sub_22337EAAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC32D90;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22337EB34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC32D90;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22337EBCC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32D90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22337EC5C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32D90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22337ECCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22337ED4C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22337EDC8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22337E084(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22337F07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22337F1D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERKSN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERK"
                                "SN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERKSN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSO_7ProcessERKSN_NS4_7promiseIvEEEUlT_T0_E_EEvSR_SU_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337F240()
{
  return &unk_24EC32DF0;
}

_QWORD *sub_22337F24C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24EC32E10;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_22337F2F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24EC32E10;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337F3A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x50uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC32E10;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_22337E1F4((uint64_t)(v2 + 3), (uint64_t)(a1 + 3));
  v8 = a1[9];
  v3[8] = a1[8];
  v3[9] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_22337F428(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22337F448(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC32E10;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_22337E1F4((uint64_t)(a2 + 3), (uint64_t)(a1 + 3));
  v9 = a1[9];
  a2[8] = a1[8];
  a2[9] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22337F4C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22337F4D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)a1[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_22337F574(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;

  v2 = (std::__shared_weak_count *)__p[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (_QWORD *)__p[5];
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (_QWORD *)__p[5];
    if (!v5)
      goto LABEL_7;
  }
  do
  {
    v6 = (_QWORD *)*v5;
    operator delete(v5);
    v5 = v6;
  }
  while (v6);
LABEL_7:
  v7 = (void *)__p[3];
  __p[3] = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_22337F60C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[8];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22337E084((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22337F720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337F7C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE7ProcessERKSN_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337F834()
{
  return &unk_24EC32E70;
}

_QWORD *sub_22337F840(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32E90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22337F878(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32E90;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337F8C0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC32E90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22337F910(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC32E90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22337F940(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22337F950(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22337F97C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337FA10(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337FA4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Grou"
                     "pStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIK"
                     "S8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3c"
                                "va15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_"
                                "9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337FAB8()
{
  return &unk_24EC32EF0;
}

_QWORD *sub_22337FAC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32F10;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22337FAFC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32F10;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337FB44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC32F10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22337FB94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC32F10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22337FBC4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22337FBD4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22337FC00(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337FC94(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337FCD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Grou"
                     "pStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIK"
                     "S8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3c"
                                "va15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_"
                                "9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22337FD3C()
{
  return &unk_24EC32F70;
}

_QWORD *sub_22337FD48(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC32F90;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22337FD80(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC32F90;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22337FDC8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC32F90;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22337FE20(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC32F90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22337FE58(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22337FE68(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22337FE94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22337FF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22337FF98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223380004()
{
  return &unk_24EC32FF0;
}

_QWORD *sub_223380010(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33010;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223380048(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33010;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223380090(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33010;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233800E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33010;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223380120(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223380130(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22338015C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223380214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223380260(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3Gro"
                     "upStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairI"
                     "KS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3"
                                "cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4"
                                "_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__113unordered_mapINS_3esn6random4UUIDEN3cva15SE3GroupStorageIdNS9_6MatrixIdLj4ELj4ELb1EEEEENS4_4hashIS8_EENS4_8equal_toIS8_EENS4_9allocatorINS4_4pairIKS8_SD_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233802CC()
{
  return &unk_24EC33070;
}

void sub_2233802DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223380300(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223380318(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn6random4UUI"
                     "DEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equal_toIS9_EENS_9allocato"
                     "rINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn"
                                "6random4UUIDEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equa"
                                "l_toIS9_EENS_9allocatorINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn6random4UUIDEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equal_toIS9_EENS_9allocatorINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_13unordered_mapINS1_3esn6random4UUIDEN3cva15SE3GroupStorageIdNSA_6MatrixIdLj4ELj4ELb1EEEEENS_4hashIS9_EENS_8equal_toIS9_EENS_9allocatorINS_4pairIKS9_SE_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISP_SP_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223380388(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233803B4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233803F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC330E0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223380458(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233804E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233804FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233805A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223380664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223380678(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22338073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223380750(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2233807F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22338080C(uint64_t a1)
{
  sub_223382148(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223380830(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::mutex **v21;
  uint64_t **v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  const void *v47;
  int64_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 *v52;
  uint64_t v53;
  std::__shared_weak_count *v54[2];
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE v60[24];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    sub_223382370(&v55, *(const void **)a2, *(_QWORD *)(a2 + 8));
    v5 = v55;
    v4 = v56;
    if (v56)
    {
      p_shared_weak_owners = (unint64_t *)&v56->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = a1[18];
    v9 = (_QWORD *)operator new();
    *v9 = v8 + 56;
    std::mutex::lock((std::mutex *)(v8 + 56));
    *(_QWORD *)&v57 = v9;
    *((_QWORD *)&v57 + 1) = v8;
    if (!*(_BYTE *)(v8 + 48))
      sub_22324A974();
    v10 = (_QWORD *)(*(_QWORD *)v8 + 16 * *(_QWORD *)(v8 + 32));
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (std::__shared_weak_count *)v10[1];
    *v10 = v5;
    v10[1] = v4;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    v17 = *(_QWORD *)(v8 + 40);
    v18 = *(_QWORD *)(v8 + 32) + 1;
    if (v18 >= v16)
      v19 = (uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 4;
    else
      v19 = 0;
    *(_QWORD *)(v8 + 32) = v18 - v19;
    if (v17 == v16)
    {
      v20 = *(_QWORD *)(v8 + 24) + 1;
      if (v20 < v16)
        v16 = 0;
      *(_QWORD *)(v8 + 24) = v20 - v16;
      v21 = (std::mutex **)v57;
      if (!(_QWORD)v57)
      {
LABEL_35:
        v31 = (uint64_t **)a1[9];
        v57 = 0uLL;
        v32 = (std::__shared_weak_count *)a1[5];
        if (v32)
        {
          v33 = std::__shared_weak_count::lock(v32);
          if (v33)
          {
            v34 = v33;
            v35 = a1[4];
            v36 = (unint64_t *)&v33->__shared_weak_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
            *(_QWORD *)&v57 = v35;
            *((_QWORD *)&v57 + 1) = v33;
            v38 = (unint64_t *)&v33->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          else
          {
            v57 = 0uLL;
          }
        }
        v58 = v5;
        v59 = v4;
        v61 = 0;
        v40 = (char *)operator new(0x30uLL);
        *(_QWORD *)v40 = &off_24EC33398;
        *(_OWORD *)(v40 + 8) = v57;
        v57 = 0uLL;
        *((_QWORD *)v40 + 3) = v5;
        *((_QWORD *)v40 + 4) = v4;
        v58 = 0;
        v59 = 0;
        v61 = v40;
        sub_2245022E4(*v31, (uint64_t)v60);
        v41 = v61;
        if (v61 == v60)
        {
          v42 = 4;
          v41 = v60;
        }
        else
        {
          if (!v61)
            goto LABEL_49;
          v42 = 5;
        }
        (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_49:
        v43 = v56;
        if (v56)
        {
          v44 = (unint64_t *)&v56->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v8 + 40) = v17 + 1;
      v21 = (std::mutex **)v57;
      if (!(_QWORD)v57)
        goto LABEL_35;
    }
    std::mutex::unlock(*v21);
    MEMORY[0x227684CE8](v21, 0x20C4093837F09);
    goto LABEL_35;
  }
  v22 = (uint64_t **)a1[9];
  *(_OWORD *)v54 = 0uLL;
  v23 = (std::__shared_weak_count *)a1[5];
  if (v23)
  {
    v24 = std::__shared_weak_count::lock(v23);
    if (v24)
    {
      v25 = v24;
      v26 = (std::__shared_weak_count *)a1[4];
      v27 = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v54[0] = v26;
      v54[1] = v24;
      v29 = (unint64_t *)&v24->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    else
    {
      *(_OWORD *)v54 = 0uLL;
    }
  }
  v47 = *(const void **)a2;
  v46 = *(_QWORD *)(a2 + 8);
  v48 = v46 - *(_QWORD *)a2;
  if (v46 == *(_QWORD *)a2)
  {
    v50 = 0;
    v49 = 0;
  }
  else
  {
    if (v48 < 0)
      sub_22316E078();
    v49 = (char *)operator new(v46 - *(_QWORD *)a2);
    v50 = &v49[16 * (v48 >> 4)];
    memcpy(v49, v47, v48);
  }
  v51 = (char *)operator new(0x30uLL);
  *(_QWORD *)v51 = &off_24EC33418;
  *(_OWORD *)(v51 + 8) = *(_OWORD *)v54;
  *((_QWORD *)v51 + 3) = v49;
  *((_QWORD *)v51 + 4) = v50;
  *((_QWORD *)v51 + 5) = v50;
  v59 = (std::__shared_weak_count *)v51;
  sub_2245022E4(*v22, (uint64_t)&v57);
  v52 = (__int128 *)v59;
  if (v59 == (std::__shared_weak_count *)&v57)
  {
    v53 = 4;
    v52 = &v57;
  }
  else
  {
    if (!v59)
      return;
    v53 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v52 + 8 * v53))(v52);
}

void sub_223380CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20)
{
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a20;
  if (a20 == v20)
  {
    v23 = 4;
    v22 = &a17;
  }
  else
  {
    if (!a20)
    {
      sub_223382334(&a9);
      _Unwind_Resume(a1);
    }
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
  sub_223382334(&a9);
  _Unwind_Resume(a1);
}

void sub_223380D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223380DE0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223380DF0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223380DFC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223380E0C(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  std::mutex **v26;
  uint64_t **v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t **v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  std::string *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  const void *v54;
  int64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  __int128 *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  std::__shared_weak_count *v65;
  std::string *v66;
  std::runtime_error *exception;
  std::runtime_error *v68;
  std::__shared_weak_count *v69[2];
  _QWORD *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::runtime_error v73;
  _QWORD *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  _QWORD *v77;
  std::__shared_weak_count *v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  std::string v81;
  std::string *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v76 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v76 + 1) = 45;
    v64 = (_QWORD *)a1[6];
    v63 = a1 + 6;
    v62 = v64;
    v65 = (std::__shared_weak_count *)*((unsigned __int8 *)v63 + 23);
    if ((char)v65 < 0)
      v65 = (std::__shared_weak_count *)v63[1];
    else
      v62 = v63;
    v77 = v62;
    v78 = v65;
    sub_2231A9820((uint64_t)&v76, (uint64_t)&v79, 0, 0, &v81);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v81;
    else
      v66 = (std::string *)v81.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v73, (const char *)v66);
    v73.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v68 = std::runtime_error::runtime_error(exception, &v73);
    v68->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v68, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v72 = v6;
    v70 = &v6[1].__vftable;
    v71 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223382370(&v74, *(const void **)a2, *(_QWORD *)(a2 + 8));
    v10 = v74;
    v9 = v75;
    if (v75)
    {
      p_shared_weak_owners = (unint64_t *)&v75->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
    }
    v13 = a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 56;
    std::mutex::lock((std::mutex *)(v13 + 56));
    *(_QWORD *)&v76 = v14;
    *((_QWORD *)&v76 + 1) = v13;
    if (!*(_BYTE *)(v13 + 48))
      sub_22324A974();
    v15 = (_QWORD *)(*(_QWORD *)v13 + 16 * *(_QWORD *)(v13 + 32));
    if (v9)
    {
      v16 = (unint64_t *)&v9->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = (std::__shared_weak_count *)v15[1];
    *v15 = v10;
    v15[1] = v9;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    v22 = *(_QWORD *)(v13 + 40);
    v23 = *(_QWORD *)(v13 + 32) + 1;
    if (v23 >= v21)
      v24 = (uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 4;
    else
      v24 = 0;
    *(_QWORD *)(v13 + 32) = v23 - v24;
    if (v22 == v21)
    {
      v25 = *(_QWORD *)(v13 + 24) + 1;
      if (v25 < v21)
        v21 = 0;
      *(_QWORD *)(v13 + 24) = v25 - v21;
      v26 = (std::mutex **)v76;
      if (!(_QWORD)v76)
      {
LABEL_39:
        v36 = (uint64_t **)a1[9];
        v76 = 0uLL;
        v37 = (std::__shared_weak_count *)a1[5];
        if (v37)
        {
          v38 = std::__shared_weak_count::lock(v37);
          if (v38)
          {
            v39 = v38;
            v40 = a1[4];
            v41 = (unint64_t *)&v38->__shared_weak_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            *(_QWORD *)&v76 = v40;
            *((_QWORD *)&v76 + 1) = v38;
            v43 = (unint64_t *)&v38->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          else
          {
            v76 = 0uLL;
          }
        }
        v77 = v10;
        v78 = v9;
        v79 = v70;
        v80 = v71;
        v82 = 0;
        v45 = (char *)operator new(0x38uLL);
        *(_QWORD *)v45 = &off_24EC33498;
        *(_OWORD *)(v45 + 8) = v76;
        v76 = 0uLL;
        *((_QWORD *)v45 + 3) = v10;
        *((_QWORD *)v45 + 4) = v9;
        v77 = 0;
        v78 = 0;
        *((_QWORD *)v45 + 5) = v70;
        *((_QWORD *)v45 + 6) = v71;
        v79 = 0;
        v80 = 0;
        v82 = (std::string *)v45;
        sub_2245022E4(*v36, (uint64_t)&v81);
        v46 = v82;
        if (v82 == &v81)
        {
          v47 = 4;
          v46 = &v81;
        }
        else
        {
          if (!v82)
            goto LABEL_53;
          v47 = 5;
        }
        (*(void (**)(void))(v46->__r_.__value_.__r.__words[0] + 8 * v47))();
LABEL_53:
        v48 = v75;
        if (v75)
        {
          v49 = (unint64_t *)&v75->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (v72)
        {
          v51 = (unint64_t *)&v72->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        return;
      }
    }
    else
    {
      *(_QWORD *)(v13 + 40) = v22 + 1;
      v26 = (std::mutex **)v76;
      if (!(_QWORD)v76)
        goto LABEL_39;
    }
    std::mutex::unlock(*v26);
    MEMORY[0x227684CE8](v26, 0x20C4093837F09);
    goto LABEL_39;
  }
  v27 = (uint64_t **)a1[9];
  *(_OWORD *)v69 = 0uLL;
  v28 = (std::__shared_weak_count *)a1[5];
  if (v28)
  {
    v29 = std::__shared_weak_count::lock(v28);
    if (v29)
    {
      v30 = v29;
      v31 = (std::__shared_weak_count *)a1[4];
      v32 = (unint64_t *)&v29->__shared_weak_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      v69[0] = v31;
      v69[1] = v29;
      v34 = (unint64_t *)&v29->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    else
    {
      *(_OWORD *)v69 = 0uLL;
    }
  }
  v54 = *(const void **)a2;
  v53 = *(_QWORD *)(a2 + 8);
  v55 = v53 - *(_QWORD *)a2;
  if (v53 == *(_QWORD *)a2)
  {
    v57 = 0;
    v56 = 0;
  }
  else
  {
    if (v55 < 0)
      sub_22316E078();
    v56 = (char *)operator new(v53 - *(_QWORD *)a2);
    v57 = &v56[16 * (v55 >> 4)];
    memcpy(v56, v54, v55);
  }
  v58 = operator new(0x20uLL);
  v58[1] = 0;
  v58[2] = 0;
  *v58 = &unk_24EC2F420;
  v58[3] = *a3;
  *a3 = 0;
  v59 = (char *)operator new(0x40uLL);
  *(_QWORD *)v59 = &off_24EC33518;
  *(_OWORD *)(v59 + 8) = *(_OWORD *)v69;
  *((_QWORD *)v59 + 3) = v56;
  *((_QWORD *)v59 + 4) = v57;
  *((_QWORD *)v59 + 5) = v57;
  *((_QWORD *)v59 + 6) = v58 + 3;
  *((_QWORD *)v59 + 7) = v58;
  v78 = (std::__shared_weak_count *)v59;
  sub_2245022E4(*v27, (uint64_t)&v76);
  v60 = (__int128 *)v78;
  if (v78 == (std::__shared_weak_count *)&v76)
  {
    v61 = 4;
    v60 = &v76;
  }
  else
  {
    if (!v78)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v60 + 8 * v61))(v60);
}

void sub_2233814D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 97) < 0)
      operator delete(*(void **)(v28 - 120));
    JUMPOUT(0x2233813D4);
  }
  _Unwind_Resume(exception_object);
}

void sub_2233815FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 96);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 120);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2233816A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2233816BC(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223381730(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC33598;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223381840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233818A4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC33618;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2233819B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223381A18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC33698;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223381C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223381CF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC33718;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223381F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223381FD8(uint64_t a1)
{
  return sub_223382148(a1 - 16);
}

void sub_223381FE0(uint64_t a1)
{
  sub_223382148(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223382008(uint64_t a1)
{
  return sub_223381730((_QWORD *)(a1 - 16));
}

uint64_t *sub_223382010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223381A18((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223382018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223381CF8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_223382020(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223382028(uint64_t a1)
{
  return sub_223382148(a1 - 24);
}

void sub_223382030(uint64_t a1)
{
  sub_223382148(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223382058(uint64_t a1)
{
  return sub_2233818A4((_QWORD *)(a1 - 24));
}

uint64_t sub_223382060(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_223382068(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2233820D0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void **sub_223382138(uint64_t a1, unsigned __int8 **a2)
{
  return sub_223F6DB78(*(uint64_t **)(**(_QWORD **)(a1 + 8) + 352), a2);
}

uint64_t sub_223382148(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC33158;
  *(_QWORD *)(a1 + 16) = &unk_24EC331D0;
  *(_QWORD *)(a1 + 24) = &unk_24EC33210;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_223382334(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *sub_223382370(_QWORD *a1, const void *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v7;
  _QWORD *v8;
  int64_t v9;
  char *v10;
  char *v11;

  result = operator new(0x30uLL);
  v7 = result;
  result[3] = 0;
  v8 = result + 3;
  result[1] = 0;
  result[2] = 0;
  *result = &off_24EC33348;
  result[4] = 0;
  result[5] = 0;
  v9 = a3 - (_QWORD)a2;
  if (v9)
  {
    if (v9 < 0)
      sub_22316E078();
    v10 = (char *)operator new(v9);
    v7[3] = v10;
    v11 = &v10[16 * (v9 >> 4)];
    v7[5] = v11;
    result = memcpy(v10, a2, v9);
    v7[4] = v11;
  }
  *a1 = v8;
  a1[1] = v7;
  return result;
}

void sub_223382410(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_223382438(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223382448(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223382478(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

_QWORD *sub_223382494(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33398;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2233824D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33398;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338252C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33398;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22338259C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33398;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_2233825EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223382628(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223382660(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_223382984((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223382828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338290C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEE"
                     "EvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloc"
                                "atorIS8_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_4SendERKSB_EUlT_T0_E_EEvSF_SG_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223382978()
{
  return &unk_24EC333F8;
}

void sub_223382984(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_223382A1C()
{
  __break(1u);
}

void sub_223382AC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x223382AE8);
}

_QWORD *sub_223382AF4(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33418;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223382B3C(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33418;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223382B94(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x30uLL);
  *v2 = &off_24EC33418;
  sub_223382DEC(v2 + 1, v1);
  return v2;
}

void sub_223382BD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223382BE8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC33418;
  return sub_223382DEC(a2 + 1, (_QWORD *)(a1 + 8));
}

void sub_223382C04(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223382C44(_QWORD *__p)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223382C80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_223382984((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223382D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223382D74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEE"
                     "EvvvLb0EE4SendERKSB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloc"
                                "atorIS8_EEEEvvvLb0EE4SendERKSB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE4SendERKSB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE4SendERKSB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223382DE0()
{
  return &unk_24EC33478;
}

_QWORD *sub_223382DEC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v7 = (_BYTE *)a2[2];
  v6 = (_BYTE *)a2[3];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_22316E078();
    v9 = (char *)operator new(v6 - v7);
    a1[2] = v9;
    a1[3] = v9;
    v10 = &v9[16 * (v8 >> 4)];
    a1[4] = v10;
    memcpy(v9, v7, v8);
    a1[3] = v10;
  }
  return a1;
}

void sub_223382E84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223382EBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_223382F3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC33498;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223382FC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC33498;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22338305C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33498;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2233830EC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33498;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22338315C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2233831DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223383258(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223382984(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22338350C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223383664(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEE"
                     "EvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NS4_7promiseIvEEEUlT_T0_E_EEvSF_SI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloc"
                                "atorIS8_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NS4_7promiseIvEEEUlT"
                                "_T0_E_EEvSF_SI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NS4_7promiseIvEEEUlT_T0_E_EEvSF_SI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSC_7ProcessERKSB_NS4_7promiseIvEEEUlT_T0_E_EEvSF_SI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233836D0()
{
  return &unk_24EC334F8;
}

_QWORD *sub_2233836DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC33518;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[3];
  if (v5)
  {
LABEL_6:
    a1[4] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223383768(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC33518;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[3];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_7;
  }
  a1[4] = v5;
  operator delete(v5);
  goto LABEL_7;
}

_QWORD *sub_223383804(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x40uLL);
  *v2 = &off_24EC33518;
  sub_223383BAC(v2 + 1, v1);
  return v2;
}

void sub_223383844(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223383858(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC33518;
  return sub_223383BAC(a2 + 1, (_QWORD *)(a1 + 8));
}

void sub_223383874(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)a1[3];
  if (v5)
  {
LABEL_6:
    a1[4] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2233838F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (void *)__p[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (void *)__p[3];
  if (v5)
  {
LABEL_6:
    __p[4] = v5;
    operator delete(v5);
  }
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223383978(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[6];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223382984((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223383A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223383B34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEE"
                     "EvvvLb0EE7ProcessERKSB_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloc"
                                "atorIS8_EEEEvvvLb0EE7ProcessERKSB_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE7ProcessERKSB_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE7ProcessERKSB_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223383BA0()
{
  return &unk_24EC33578;
}

_QWORD *sub_223383BAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_22316E078();
    v10 = (char *)operator new(v7 - v8);
    a1[2] = v10;
    a1[3] = v10;
    v11 = &v10[16 * (v9 >> 4)];
    a1[4] = v11;
    memcpy(v10, v8, v9);
    a1[3] = v11;
  }
  v12 = a2[6];
  a1[5] = a2[5];
  a1[6] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_223383C70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  std::__shared_weak_count *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (!v5)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223383CA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33598;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223383CE0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33598;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223383D28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC33598;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223383D78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC33598;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223383DA8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223383DB8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223383DE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223383E78(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223383EB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEE"
                     "vvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloca"
                                "torIS8_EEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223383F20()
{
  return &unk_24EC335F8;
}

_QWORD *sub_223383F2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33618;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223383F64(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33618;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223383FAC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC33618;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223383FFC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC33618;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22338402C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22338403C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223384068(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233840FC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223384138(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEE"
                     "vvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloca"
                                "torIS8_EEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233841A4()
{
  return &unk_24EC33678;
}

_QWORD *sub_2233841B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33698;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233841E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33698;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223384230(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33698;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223384288(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33698;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233842C0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233842D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233842FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233843B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223384400(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEE"
                     "EvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloc"
                                "atorIS8_EEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338446C()
{
  return &unk_24EC336F8;
}

_QWORD *sub_223384478(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33718;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233844B0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33718;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233844F8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33718;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223384550(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33718;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223384588(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223384598(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233845C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338467C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233846C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEE"
                     "EvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9alloc"
                                "atorIS8_EEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__16vectorINS_3esn6random4UUIDENS4_9allocatorIS8_EEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223384734()
{
  return &unk_24EC33778;
}

void sub_223384744(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223384768(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223384780(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3esn6random4UUIDENS_9al"
                     "locatorIS9_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3esn6random4"
                                "UUIDENS_9allocatorIS9_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3esn6random4UUIDENS_9allocatorIS9_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_6vectorINS1_3esn6random4UUIDENS_9allocatorIS9_EEEEvvvLb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_2233847F0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338481C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223384858@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC337E8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2233848C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223384950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223384964(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233849F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223384A08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223384ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223384AE0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223384BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223384BB8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223384C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223384C74(uint64_t a1)
{
  sub_223386498(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223384C98(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33A60;
    LODWORD(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC33AB0;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC33B30;
  v49[1] = v29;
  v49[2] = v28;
  *((_DWORD *)v49 + 6) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2233850AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233851A0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2233851B0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2233851BC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2233851CC(_QWORD *a1, _DWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  int v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33BB0;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33A60;
    LODWORD(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC33C00;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24EC33BB0;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC33C80;
  *(_OWORD *)(v56 + 8) = v70;
  *((_DWORD *)v56 + 6) = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_2233857E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x2233856FCLL);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_22338585C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233858B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223385904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223385928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2233859C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2233859E4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223385A58(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC33D00;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E580;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223385B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223385BFC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC33D80;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223385D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223385D70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC33E00;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223385F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223386050@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC33E80;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223386268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223386330(uint64_t a1)
{
  return sub_223386498(a1 - 16);
}

void sub_223386338(uint64_t a1)
{
  sub_223386498(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223386360(uint64_t a1, uint64_t a2)
{
  return sub_223385A58((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223386368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223385D70((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_223386370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223386050((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_223386378(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223386380(uint64_t a1)
{
  return sub_223386498(a1 - 24);
}

void sub_223386388(uint64_t a1)
{
  sub_223386498(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233863B0(uint64_t a1)
{
  return sub_223385BFC((_QWORD *)(a1 - 24));
}

uint64_t sub_2233863B8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_2233863C0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223386428(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_223386490(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_22333CF54(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_223386498(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC33860;
  *(_QWORD *)(a1 + 16) = &unk_24EC338D8;
  *(_QWORD *)(a1 + 24) = &unk_24EC33918;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_223386698(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233866A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233866E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33AB0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223386724(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33AB0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223386778(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33AB0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_2233867E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33AB0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223386838(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223386874(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_2233868AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223386BD0((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_223386FA8(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223386A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_223386FA8(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223386B58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationEr"
                     "rorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKiEUlT_T0_E_EEvSL_SM_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDete"
                                "ction18SerializationErrorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKiEUlT_T0_"
                                "E_EEvSL_SM_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKiEUlT_T0_E_EEvSL_SM_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKiEUlT_T0_E_EEvSL_SM_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223386BC4()
{
  return &unk_24EC33B10;
}

void sub_223386BD0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  std::exception_ptr v18;
  void *__p[2];
  uint64_t v20;
  unsigned __int8 v21;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, __p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v18), v15))
    {
      sub_2233236D4(2u);
    }
    *(_BYTE *)(v14 + 144) = 0;
    v16 = (_BYTE *)(v14 + 144);
    v17 = v21;
    *(_BYTE *)(v14 + 168) = v21;
    if (v17)
    {
      if (SHIBYTE(v20) < 0)
      {
        sub_223197FA4(v16, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)__p;
        *(_QWORD *)(v14 + 160) = v20;
      }
    }
    else
    {
      *(_DWORD *)v16 = __p[0];
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (v21)
  {
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_223386E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  if (a24 && a23 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v26 = (uint64_t *)__cxa_begin_catch(exception_object);
    v27 = *v26;
    a11 = *(_QWORD *)(*(_QWORD *)(*v26 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v27 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v28 = (uint64_t *)&a12;
    else
      v28 = a12;
    if ((a17 & 0x80u) == 0)
      v29 = a17;
    else
      v29 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v28, v29, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(exception_object);
}

void sub_223386F7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x223386F9CLL);
}

uint64_t *sub_223386FA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_223387094(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x223386FF0);
}

_QWORD *sub_2233870D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33B30;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223387108(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33B30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223387150(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC33B30;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t sub_2233871A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC33B30;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void sub_2233871E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233871F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22338721C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223386BD0((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_223386FA8(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233872C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_223386FA8(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223387310(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationEr"
                     "rorEEEvSH_Lb0EE4SendERKiEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDete"
                                "ction18SerializationErrorEEEvSH_Lb0EE4SendERKiEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE4SendERKiEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE4SendERKiEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338737C()
{
  return &unk_24EC33B90;
}

void sub_223387388(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223387398(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_2233873C8(uint64_t a1)
{
  return sub_223386FA8((uint64_t *)(a1 + 24));
}

_QWORD *sub_2233873D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC33C00;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22338745C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC33C00;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2233874F4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33C00;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223387584(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33C00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2233875F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223387674(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_2233876F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223386BD0(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_223386FA8((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2233879CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2233879F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223387804);
    JUMPOUT(0x2233877D4);
  }
  sub_2233236D4(3u);
}

void sub_223387A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223387A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_223386FA8(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223387B6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationEr"
                     "rorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKiNS6_7promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDete"
                                "ction18SerializationErrorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKiNS6_7"
                                "promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKiNS6_7promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKiNS6_7promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223387BD8()
{
  return &unk_24EC33C60;
}

_QWORD *sub_223387BE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC33C80;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223387C60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC33C80;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223387CEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC33C80;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_223387D64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC33C80;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223387DBC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_223387E2C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_223387E9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223386BD0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_223386FA8((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223387FAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223388024(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223388058);
  JUMPOUT(0x223388088);
}

uint64_t sub_223388090(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationEr"
                     "rorEEEvSH_Lb0EE7ProcessERKiNS6_7promiseISH_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDete"
                                "ction18SerializationErrorEEEvSH_Lb0EE7ProcessERKiNS6_7promiseISH_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE7ProcessERKiNS6_7promiseISH_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE7ProcessERKiNS6_7promiseISH_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233880FC()
{
  return &unk_24EC33CE0;
}

_QWORD *sub_223388108(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33D00;
  v2 = a1[4];
  a1[3] = &off_24EC2E580;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223388160(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC33D00;
  v2 = a1[4];
  a1[3] = &off_24EC2E580;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233881C8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC33D00;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E580;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_223388240(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223388260(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC33D00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E580;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2233882C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2233882E0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E580;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223388330(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E580;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22338837C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E580;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223388430(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338846C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11"
                     "char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErr"
                     "orEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_str"
                                "ingIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetec"
                                "tion18SerializationErrorEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233884D8()
{
  return &unk_24EC33D60;
}

_QWORD *sub_2233884E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33D80;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338851C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33D80;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223388564(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC33D80;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2233885B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC33D80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2233885E4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233885F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223388620(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233886B4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233886F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11"
                     "char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErr"
                     "orEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_str"
                                "ingIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetec"
                                "tion18SerializationErrorEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338875C()
{
  return &unk_24EC33DE0;
}

_QWORD *sub_223388768(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33E00;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233887A0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33E00;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233887E8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33E00;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223388840(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33E00;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223388878(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223388888(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233888B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_223388A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223388AA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationEr"
                     "rorEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDete"
                                "ction18SerializationErrorEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223388B0C()
{
  return &unk_24EC33E60;
}

_QWORD *sub_223388B18(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC33E80;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223388B50(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC33E80;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223388B98(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC33E80;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223388BF0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC33E80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223388C28(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223388C38(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223388C64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223388D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223388D68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationEr"
                     "rorEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDete"
                                "ction18SerializationErrorEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223388DD4()
{
  return &unk_24EC33EE0;
}

void sub_223388DE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223388E08(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223388E20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINS_12basic"
                     "_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_9applecv3d13concurrent_sd16SurfaceDetection18Se"
                     "rializationErrorEEEvSI_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expected"
                                "INS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_9applecv3d13concurrent_sd"
                                "16SurfaceDetection18SerializationErrorEEEvSI_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSI_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIiNSt12experimental8expectedINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS1_9applecv3d13concurrent_sd16SurfaceDetection18SerializationErrorEEEvSI_Lb0EEEE27__shared_ptr_default_deleteISJ_SJ_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223388E90(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223388EBC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223388EF8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC33F50;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223388F60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223388FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223389004(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223389094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233890A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22338916C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223389180(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223389244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223389258(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2233892FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223389314(uint64_t a1)
{
  sub_22338AB48(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223389338(_QWORD *a1, std::__shared_count *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 *v53;
  _BYTE v54[24];
  _BYTE *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC341C8;
    v8 = v5 + 1;
    v5[1].std::__shared_count = *a2;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v51 = v10;
    *((_QWORD *)&v51 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v51 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v51 = v38;
            *((_QWORD *)&v51 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v51 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC34218;
        *(_OWORD *)(v43 + 8) = v51;
        v51 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v52 = 0;
        v53 = 0;
        v55 = v43;
        sub_2245022E4(*v34, (uint64_t)v54);
        v44 = v55;
        if (v55 == v54)
        {
          v45 = 4;
          v44 = v54;
        }
        else
        {
          if (!v55)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v51;
      if (!(_QWORD)v51)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = (char *)operator new(0x28uLL);
  *(_QWORD *)v48 = &off_24EC34298;
  *((_QWORD *)v48 + 1) = v29;
  *((_QWORD *)v48 + 2) = v28;
  *(std::__shared_count *)(v48 + 24) = *a2;
  v53 = (__int128 *)v48;
  sub_2245022E4(*v25, (uint64_t)&v51);
  v49 = v53;
  if (v53 == &v51)
  {
    v50 = 4;
    v49 = &v51;
  }
  else
  {
    if (!v53)
      return;
    v50 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v49 + 8 * v50))();
}

void sub_22338974C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223389840(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223389850(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22338985C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22338986C(_QWORD *a1, _OWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v63;
  std::string *v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  std::runtime_error v72;
  char *v73;
  std::__shared_weak_count *v74;
  __int128 v75;
  _QWORD *v76;
  __int128 *v77;
  _QWORD v78[3];
  std::string v79;
  std::string *v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v75 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v75 + 1) = 45;
    v62 = (_QWORD *)a1[6];
    v61 = a1 + 6;
    v60 = v62;
    v63 = (__int128 *)*((unsigned __int8 *)v61 + 23);
    if ((char)v63 < 0)
      v63 = (__int128 *)v61[1];
    else
      v60 = v61;
    v76 = v60;
    v77 = v63;
    sub_2231A9820((uint64_t)&v75, (uint64_t)v78, 0, 0, &v79);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v79;
    else
      v64 = (std::string *)v79.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v72, (const char *)v64);
    v72.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v66 = std::runtime_error::runtime_error(exception, &v72);
    v66->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v66, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34318;
    v6[1].__vftable = *a3;
    v71 = v6;
    v69 = &v6[1].__vftable;
    v70 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (char *)operator new(0x28uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24EC341C8;
    v12 = v9 + 24;
    *(_OWORD *)(v9 + 24) = *a2;
    v73 = v9 + 24;
    v74 = (std::__shared_weak_count *)v9;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v75 = v15;
    *((_QWORD *)&v75 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (_QWORD *)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v75;
      if (!(_QWORD)v75)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v75 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(p_shared_weak_owners);
            while (__stxr(v45 + 1, p_shared_weak_owners));
            *(_QWORD *)&v75 = v43;
            *((_QWORD *)&v75 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v75 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC34368;
        *(_OWORD *)(v48 + 8) = v75;
        v75 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v76 = 0;
        v77 = 0;
        *((_QWORD *)v48 + 5) = v69;
        *((_QWORD *)v48 + 6) = v70;
        v78[0] = 0;
        v78[1] = 0;
        v80 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v79);
        v49 = v80;
        if (v80 == &v79)
        {
          v50 = 4;
          v49 = &v79;
        }
        else
        {
          if (!v80)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v74)
        {
          v51 = &v74->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (v71)
        {
          v53 = (unint64_t *)&v71->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v75;
      if (!(_QWORD)v75)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v67 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v67 = v34;
      *((_QWORD *)&v67 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v67 = 0uLL;
    }
  }
  v68 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24EC34318;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x38uLL);
  *(_QWORD *)v56 = &off_24EC343E8;
  *(_OWORD *)(v56 + 8) = v67;
  *(_OWORD *)(v56 + 24) = v68;
  *((_QWORD *)v56 + 5) = v55 + 3;
  *((_QWORD *)v56 + 6) = v55;
  v77 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v75);
  v58 = v77;
  if (v77 == &v75)
  {
    v59 = 4;
    v58 = &v75;
  }
  else
  {
    if (!v77)
      return;
    v59 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v58 + 8 * v59))(v58, v57);
}

void sub_223389E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x223389DA4);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_223389F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223389F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_22338B9C0((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_22338B9C0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223389FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223389FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22338A070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22338A08C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22338A100(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC34468;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E658;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22338A230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22338A2A4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC344E8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22338A3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22338A418@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC34568;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22338A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22338A6F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC345E8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22338A910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22338A9D8(uint64_t a1)
{
  return sub_22338AB48(a1 - 16);
}

void sub_22338A9E0(uint64_t a1)
{
  sub_22338AB48(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338AA08(uint64_t a1, uint64_t a2)
{
  return sub_22338A100((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22338AA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22338A418((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22338AA18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22338A6F8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22338AA20(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22338AA28(uint64_t a1)
{
  return sub_22338AB48(a1 - 24);
}

void sub_22338AA30(uint64_t a1)
{
  sub_22338AB48(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338AA58(uint64_t a1)
{
  return sub_22338A2A4((_QWORD *)(a1 - 24));
}

uint64_t sub_22338AA60(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22338AA68(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22338AAD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22338AB38(uint64_t a1, uint64_t a2)
{
  return sub_22333DDFC(*(_QWORD *)(a1 + 8), *(_QWORD *)a2, *(void **)(a2 + 8));
}

uint64_t sub_22338AB48(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC33FC8;
  *(_QWORD *)(a1 + 16) = &unk_24EC34040;
  *(_QWORD *)(a1 + 24) = &unk_24EC34080;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_22338AD48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC341C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22338AD58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC341C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338AD90(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34218;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22338ADD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34218;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338AE28(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC34218;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22338AE98(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC34218;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22338AEE8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22338AF24(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22338AF5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_22338B280((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_22338B5E0(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22338B124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_22338B5E0(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338B208(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18op"
                     "tionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE25EnqueueMes"
                     "sageAndDispatchIZNKSG_4SendERKS8_EUlT_T0_E_EEvSJ_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EE"
                                "ENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEE"
                                "EvSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_4SendERKS8_EUlT_T0_E_EEvSJ_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_4SendERKS8_EUlT_T0_E_EEvSJ_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_4SendERKS8_EUlT_T0_E_EEvSJ_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338B274()
{
  return &unk_24EC34278;
}

void sub_22338B280(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  uint64_t v17;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_2233236D4(2u);
    }
    *(_QWORD *)(v14 + 140) = v17;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_22338B4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16)
{
  std::mutex *v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  std::mutex::unlock(v16);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = (uint64_t *)&a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22338B5B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22338B5D4);
}

uint64_t *sub_22338B5E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22338B6CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x22338B628);
}

_QWORD *sub_22338B708(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC34298;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338B740(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC34298;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

__n128 sub_22338B788(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24EC34298;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_22338B7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC34298;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_22338B818(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22338B828(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22338B854(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_22338B280((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_22338B5E0(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338B8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_22338B5E0(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338B948(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18op"
                     "tionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE4SendERKS8_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EE"
                                "ENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEE"
                                "EvSF_Lb0EE4SendERKS8_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE4SendERKS8_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE4SendERKS8_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338B9B4()
{
  return &unk_24EC342F8;
}

uint64_t sub_22338B9C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22338BA30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22338BA40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_22338BA70(uint64_t a1)
{
  return sub_22338B5E0((uint64_t *)(a1 + 24));
}

_QWORD *sub_22338BA7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC34368;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22338BB04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC34368;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22338BB9C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC34368;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22338BC2C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC34368;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22338BC9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22338BD1C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22338BD98(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22338B280(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_22338B5E0((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22338C074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22338C0A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x22338BEACLL);
    JUMPOUT(0x22338BE7CLL);
  }
  sub_2233236D4(3u);
}

void sub_22338C0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22338C128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_22338B5E0(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22338C214(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18op"
                     "tionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE25EnqueueMes"
                     "sageAndDispatchIZNKSG_7ProcessERKS8_NS9_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EE"
                                "ENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEE"
                                "EvSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_7ProcessERKS8_NS9_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_7ProcessERKS8_NS9_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_7ProcessERKS8_NS9_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338C280()
{
  return &unk_24EC343C8;
}

_QWORD *sub_22338C28C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC343E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22338C308(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC343E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

char *sub_22338C394(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x38uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24EC343E8;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_22338C40C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC343E8;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22338C464(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22338C4D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_22338C544(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22338B280((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_22338B5E0((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22338C654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_22338C6CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x22338C700);
  JUMPOUT(0x22338C730);
}

uint64_t sub_22338C738(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18op"
                     "tionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE7ProcessERKS"
                     "8_NS9_7promiseISF_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EE"
                                "ENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEE"
                                "EvSF_Lb0EE7ProcessERKS8_NS9_7promiseISF_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE7ProcessERKS8_NS9_7promiseISF_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE7ProcessERKS8_NS9_7promiseISF_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338C7A4()
{
  return &unk_24EC34448;
}

_QWORD *sub_22338C7B0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34468;
  v2 = a1[4];
  a1[3] = &off_24EC2E658;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22338C808(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34468;
  v2 = a1[4];
  a1[3] = &off_24EC2E658;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338C870(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC34468;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E658;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22338C8E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22338C908(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC34468;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E658;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22338C970(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22338C988(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E658;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22338C9D8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E658;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22338CA24(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E658;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338CAD8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338CB14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18opt"
                     "ionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE9SubscribeENS"
                     "1_12ChannelInputISF_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEE"
                                "NSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEE"
                                "vSF_Lb0EE9SubscribeENS1_12ChannelInputISF_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE9SubscribeENS1_12ChannelInputISF_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE9SubscribeENS1_12ChannelInputISF_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338CB80()
{
  return &unk_24EC344C8;
}

_QWORD *sub_22338CB8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC344E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338CBC4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC344E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338CC0C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC344E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22338CC5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC344E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22338CC8C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22338CC9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22338CCC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338CD5C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338CD98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18opt"
                     "ionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE15AddErrorHan"
                     "dlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEE"
                                "NSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEE"
                                "vSF_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338CE04()
{
  return &unk_24EC34548;
}

_QWORD *sub_22338CE10(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC34568;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338CE48(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC34568;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338CE90(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC34568;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22338CEE8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC34568;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22338CF20(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22338CF30(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22338CF5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22338D0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338D148(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18op"
                     "tionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EE"
                                "ENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEE"
                                "EvSF_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338D1B4()
{
  return &unk_24EC345C8;
}

_QWORD *sub_22338D1C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC345E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338D1F8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC345E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338D240(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC345E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22338D298(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC345E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22338D2D0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22338D2E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22338D30C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338D3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338D410(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18op"
                     "tionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EE"
                                "ENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEE"
                                "EvSF_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3esn4spanIKSt4byteLm18446744073709551615EEENSt3__18optionalINS_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSF_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338D47C()
{
  return &unk_24EC34648;
}

void sub_22338D48C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22338D4B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22338D4C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn4spanIKSt4byteLm18446744073709"
                     "551615EEENS_8optionalINS1_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSG_L"
                     "b0EEEE27__shared_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn4spanIKSt4byteLm184"
                                "46744073709551615EEENS_8optionalINS1_9applecv3d13concurrent_sd16SurfaceDetection20Deseri"
                                "alizationErrorEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn4spanIKSt4byteLm18446744073709551615EEENS_8optionalINS1_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3esn4spanIKSt4byteLm18446744073709551615EEENS_8optionalINS1_9applecv3d13concurrent_sd16SurfaceDetection20DeserializationErrorEEEvSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22338D538(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338D564(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338D5A0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC346B8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22338D608(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338D698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22338D6AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338D73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22338D750(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22338D814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22338D828(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22338D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22338D900(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22338D9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22338D9BC(uint64_t a1)
{
  sub_22338F1C8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22338D9E0(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2EB68;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC34920;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC349A0;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_22338DDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22338DEE8(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34A20;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2EB68;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC34A70;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24EC34A20;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC34AF0;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_22338E504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x22338E418);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_22338E578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22338E5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22338E620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22338E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22338E6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22338E700(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22338E774(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC34B70;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2E6F8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22338E8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22338E918(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC34BF0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22338EA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22338EA8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC34C70;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22338ECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22338ED6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC34CF0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22338EF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22338F04C(uint64_t a1)
{
  return sub_22338F1C8(a1 - 16);
}

void sub_22338F054(uint64_t a1)
{
  sub_22338F1C8(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338F07C(uint64_t a1, uint64_t a2)
{
  return sub_22338E774((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22338F084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22338EA8C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22338F08C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22338ED6C((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22338F094(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22338F09C(uint64_t a1)
{
  return sub_22338F1C8(a1 - 24);
}

void sub_22338F0A4(uint64_t a1)
{
  sub_22338F1C8(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338F0CC(uint64_t a1)
{
  return sub_22338E918((_QWORD *)(a1 - 24));
}

uint64_t sub_22338F0D4(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22338F0DC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22338F144(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22338F1AC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 352) + 200);
}

uint64_t sub_22338F1C8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC34730;
  *(_QWORD *)(a1 + 16) = &unk_24EC347A8;
  *(_QWORD *)(a1 + 24) = &unk_24EC347E8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_22338F3C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34920;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22338F40C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34920;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338F460(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC34920;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22338F4D0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC34920;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22338F520(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22338F55C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22338F594(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_22338F8B8((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_22338FC18(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22338F75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_22338FC18(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338F840(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surfac"
                     "eDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKbEUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetect"
                                "ion30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendER"
                                "KbEUlT_T0_E_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKbEUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKbEUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338F8AC()
{
  return &unk_24EC34980;
}

void sub_22338F8B8(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *j;
  uint64_t v15;
  uint64_t v16;
  std::exception_ptr v17;
  __int128 v18;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  *(_QWORD *)&v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  *((_QWORD *)&v18 + 1) = v12;
  v13 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v13; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, __int128 *))(j[2] + 16))(j + 2, &v18);
  if (*((_BYTE *)a3 + 8))
  {
    v15 = *a3;
    if (!v15)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v15 + 24));
    if ((*(_BYTE *)(v15 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v16 = *(_QWORD *)(v15 + 16), std::exception_ptr::~exception_ptr(&v17), v16))
    {
      sub_2233236D4(2u);
    }
    *(_OWORD *)(v15 + 144) = v18;
    *(_DWORD *)(v15 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v15 + 88));
    std::mutex::unlock((std::mutex *)(v15 + 24));
  }
}

void sub_22338FB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a11 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v22 = (uint64_t *)&a12;
    else
      v22 = a12;
    if ((a17 & 0x80u) == 0)
      v23 = a17;
    else
      v23 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22338FBEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22338FC0CLL);
}

uint64_t *sub_22338FC18(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22338FD04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x22338FC60);
}

_QWORD *sub_22338FD40(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC349A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22338FD78(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC349A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22338FDC0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC349A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_22338FE18(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC349A0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_22338FE50(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22338FE60(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22338FE8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_22338F8B8((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_22338FC18(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22338FF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_22338FC18(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22338FF80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surfac"
                     "eDetectorDebugDataBundleEEEvSA_Lb0EE4SendERKbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetect"
                                "ion30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE4SendERKbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE4SendERKbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE4SendERKbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22338FFEC()
{
  return &unk_24EC34A00;
}

void sub_22338FFF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223390008(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_223390038(uint64_t a1)
{
  return sub_22338FC18((uint64_t *)(a1 + 24));
}

_QWORD *sub_223390044(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC34A70;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2233900CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC34A70;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223390164(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC34A70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2233901F4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC34A70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223390264(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2233902E4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223390360(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22338F8B8(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_22338FC18((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22339063C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223390668(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223390474);
    JUMPOUT(0x223390444);
  }
  sub_2233236D4(3u);
}

void sub_2233906C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2233906F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_22338FC18(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2233907DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surfac"
                     "eDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKbNSt3__17promiseIS"
                     "A_EEEUlT_T0_E_EEvSE_SI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetect"
                                "ion30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7Proces"
                                "sERKbNSt3__17promiseISA_EEEUlT_T0_E_EEvSE_SI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKbNSt3__17promiseISA_EEEUlT_T0_E_EEvSE_SI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKbNSt3__17promiseISA_EEEUlT_T0_E_EEvSE_SI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223390848()
{
  return &unk_24EC34AD0;
}

_QWORD *sub_223390854(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC34AF0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2233908D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC34AF0;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339095C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC34AF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2233909D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC34AF0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223390A2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_223390A9C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_223390B0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22338F8B8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_22338FC18((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223390C1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223390C94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223390CC8);
  JUMPOUT(0x223390CF8);
}

uint64_t sub_223390D00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surfac"
                     "eDetectorDebugDataBundleEEEvSA_Lb0EE7ProcessERKbNSt3__17promiseISA_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetect"
                                "ion30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE7ProcessERKbNSt3__17promiseISA_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE7ProcessERKbNSt3__17promiseISA_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE7ProcessERKbNSt3__17promiseISA_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223390D6C()
{
  return &unk_24EC34B50;
}

_QWORD *sub_223390D78(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34B70;
  v2 = a1[4];
  a1[3] = &off_24EC2E6F8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223390DD0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC34B70;
  v2 = a1[4];
  a1[3] = &off_24EC2E6F8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223390E38(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC34B70;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2E6F8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_223390EB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223390ED0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC34B70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2E6F8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_223390F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223390F50(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2E6F8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223390FA0(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2E6F8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223390FEC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2E6F8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233910A0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233910DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surface"
                     "DetectorDebugDataBundleEEEvSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetecti"
                                "on30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE9SubscribeENS1_12ChannelInputISA_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223391148()
{
  return &unk_24EC34BD0;
}

_QWORD *sub_223391154(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC34BF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22339118C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC34BF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233911D4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC34BF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223391224(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC34BF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223391254(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223391264(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223391290(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223391324(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223391360(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surface"
                     "DetectorDebugDataBundleEEEvSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetecti"
                                "on30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233913CC()
{
  return &unk_24EC34C50;
}

_QWORD *sub_2233913D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC34C70;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223391410(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC34C70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223391458(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC34C70;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233914B0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC34C70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233914E8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233914F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223391524(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2233916A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223391710(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surfac"
                     "eDetectorDebugDataBundleEEEvSA_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetect"
                                "ion30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22339177C()
{
  return &unk_24EC34CD0;
}

_QWORD *sub_223391788(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC34CF0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233917C0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC34CF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223391808(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC34CF0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223391860(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC34CF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223391898(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233918A8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233918D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22339198C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233919D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30Surfac"
                     "eDetectorDebugDataBundleEEEvSA_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetect"
                                "ion30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3esn11OptionalRefIKNS_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSA_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223391A44()
{
  return &unk_24EC34D50;
}

void sub_223391A54(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223391A78(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223391A90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3esn11OptionalRefIKNS1_3acv16surf"
                     "acedetection30SurfaceDetectorDebugDataBundleEEEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3esn11OptionalRefIKNS1"
                                "_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSC_Lb0EEEE27__shared_ptr_defa"
                                "ult_deleteISD_SD_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3esn11OptionalRefIKNS1_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_3esn11OptionalRefIKNS1_3acv16surfacedetection30SurfaceDetectorDebugDataBundleEEEvSC_Lb0EEEE27__shared_ptr_default_deleteISD_SD_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223391B04(uint64_t a1)
{
  sub_223393300(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223391B28(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  std::__shared_weak_count_vtbl *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34FB0;
    v5[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v8 = v5 + 1;
    LODWORD(v5[1].__shared_owners_) = *(_DWORD *)(a2 + 8);
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC35000;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = operator new(0x28uLL);
  *v48 = &off_24EC35080;
  v48[1] = v29;
  v49 = *(std::__shared_weak_count_vtbl **)a2;
  v48[2] = v28;
  v48[3] = v49;
  *((_DWORD *)v48 + 8) = *(_DWORD *)(a2 + 8);
  v54 = (__int128 *)v48;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_223391F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22339203C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22339204C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223392058(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223392068(_QWORD *a1, uint64_t a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v63;
  std::string *v64;
  std::runtime_error *exception;
  std::runtime_error *v66;
  __int128 v67;
  std::__shared_weak_count_vtbl *v68;
  int v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::runtime_error v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  _QWORD *v77;
  __int128 *v78;
  _QWORD v79[3];
  std::string v80;
  std::string *v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v76 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v76 + 1) = 45;
    v62 = (_QWORD *)a1[6];
    v61 = a1 + 6;
    v60 = v62;
    v63 = (__int128 *)*((unsigned __int8 *)v61 + 23);
    if ((char)v63 < 0)
      v63 = (__int128 *)v61[1];
    else
      v60 = v61;
    v77 = v60;
    v78 = v63;
    sub_2231A9820((uint64_t)&v76, (uint64_t)v79, 0, 0, &v80);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v80;
    else
      v64 = (std::string *)v80.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v73, (const char *)v64);
    v73.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v66 = std::runtime_error::runtime_error(exception, &v73);
    v66->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v66, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v72 = v6;
    v70 = &v6[1].__vftable;
    v71 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34FB0;
    v9[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v12 = v9 + 1;
    LODWORD(v9[1].__shared_owners_) = *(_DWORD *)(a2 + 8);
    v74 = v9 + 1;
    v75 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v76 = v15;
    *((_QWORD *)&v76 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v76;
      if (!(_QWORD)v76)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v76 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v76 = v43;
            *((_QWORD *)&v76 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v76 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC35100;
        *(_OWORD *)(v48 + 8) = v76;
        v76 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v77 = 0;
        v78 = 0;
        *((_QWORD *)v48 + 5) = v70;
        *((_QWORD *)v48 + 6) = v71;
        v79[0] = 0;
        v79[1] = 0;
        v81 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v80);
        v49 = v81;
        if (v81 == &v80)
        {
          v50 = 4;
          v49 = &v80;
        }
        else
        {
          if (!v81)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v75)
        {
          v51 = &v75->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        if (v72)
        {
          v53 = (unint64_t *)&v72->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v76;
      if (!(_QWORD)v76)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v67 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v67 = v34;
      *((_QWORD *)&v67 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v67 = 0uLL;
    }
  }
  v68 = *(std::__shared_weak_count_vtbl **)a2;
  v69 = *(_DWORD *)(a2 + 8);
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &unk_24EC2F420;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x38uLL);
  *(_QWORD *)v56 = &off_24EC35180;
  *(_OWORD *)(v56 + 8) = v67;
  *((_QWORD *)v56 + 3) = v68;
  *((_DWORD *)v56 + 8) = v69;
  *((_QWORD *)v56 + 5) = v55 + 3;
  *((_QWORD *)v56 + 6) = v55;
  v78 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v76);
  v58 = v78;
  if (v78 == &v76)
  {
    v59 = 4;
    v58 = &v76;
  }
  else
  {
    if (!v78)
      return;
    v59 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v58 + 8 * v59))(v58, v57);
}

void sub_2233926AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x2233925C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_2233927B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223392854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223392870(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_2233928E4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC35200;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2233929F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223392A58(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC35280;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223392B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223392BCC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC35300;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223392DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_223392EAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC35380;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2233930C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22339318C(uint64_t a1)
{
  return sub_223393300(a1 - 16);
}

void sub_223393194(uint64_t a1)
{
  sub_223393300(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233931BC(uint64_t a1)
{
  return sub_2233928E4((_QWORD *)(a1 - 16));
}

uint64_t *sub_2233931C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223392BCC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2233931CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223392EAC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2233931D4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2233931DC(uint64_t a1)
{
  return sub_223393300(a1 - 24);
}

void sub_2233931E4(uint64_t a1)
{
  sub_223393300(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339320C(uint64_t a1)
{
  return sub_223392A58((_QWORD *)(a1 - 24));
}

uint64_t sub_223393214(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22339321C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223393284(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233932EC(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(**(_QWORD **)(result + 8) + 368) = *a2;
  return result;
}

uint64_t sub_223393300(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC34DC0;
  *(_QWORD *)(a1 + 16) = &unk_24EC34E38;
  *(_QWORD *)(a1 + 24) = &unk_24EC34E78;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_2233934EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233934FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223393534(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC35000;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223393578(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC35000;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233935CC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35000;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22339363C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35000;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22339368C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_2233936C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223393700(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_223393A24((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2233938C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233939AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE25Enq"
                     "ueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvv"
                                "vLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223393A18()
{
  return &unk_24EC35060;
}

void sub_223393A24(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_223393ABC()
{
  __break(1u);
}

void sub_223393B68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x223393B88);
}

_QWORD *sub_223393B94(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35080;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223393BCC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35080;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223393C14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x28uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35080;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = *(_QWORD *)(a1 + 24);
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t sub_223393C74(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC35080;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

void sub_223393CB4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223393CC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223393CF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_223393A24((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223393D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223393DE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvv"
                                "vLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223393E50()
{
  return &unk_24EC350E0;
}

_QWORD *sub_223393E5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC35100;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223393EE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC35100;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223393F7C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35100;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22339400C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35100;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22339407C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2233940FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223394178(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223393A24(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22339442C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223394584(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE25Enq"
                     "ueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvv"
                                "vLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233945F0()
{
  return &unk_24EC35160;
}

_QWORD *sub_2233945FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC35180;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223394678(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC35180;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223394704(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x38uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35180;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = *(_QWORD *)(a1 + 24);
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  result[5] = *(_QWORD *)(a1 + 40);
  result[6] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_223394784(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC35180;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = v6;
  v7 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_2233947E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_223394854(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_2233948C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223393A24((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_2233949D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223394A80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE7Proc"
                     "essERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvv"
                                "vLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223394AEC()
{
  return &unk_24EC351E0;
}

_QWORD *sub_223394AF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35200;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223394B30(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35200;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223394B78(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35200;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223394BC8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC35200;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223394BF8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223394C08(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223394C34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223394CC8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223394D04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE9Subsc"
                     "ribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvv"
                                "Lb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223394D70()
{
  return &unk_24EC35260;
}

_QWORD *sub_223394D7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35280;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223394DB4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35280;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223394DFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35280;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223394E4C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC35280;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223394E7C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223394E8C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223394EB8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223394F4C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223394F88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE15AddE"
                     "rrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvv"
                                "Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223394FF4()
{
  return &unk_24EC352E0;
}

_QWORD *sub_223395000(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35300;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223395038(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35300;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223395080(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35300;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233950D8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35300;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223395110(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223395120(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22339514C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223395204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223395250(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE16Out"
                     "putHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvv"
                                "vLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233952BC()
{
  return &unk_24EC35360;
}

_QWORD *sub_2233952C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35380;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223395300(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35380;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223395348(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35380;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233953A0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35380;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233953D8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233953E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223395414(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233954CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223395518(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE15Err"
                     "orHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvv"
                                "vLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223395584()
{
  return &unk_24EC353E0;
}

void sub_223395594(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233955B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2233955D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd12SlamMet"
                     "adataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd12SlamMetadataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd12SlamMetadataEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223395640(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22339566C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233956A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35450;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223395710(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233957A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233957B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223395844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223395858(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22339591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223395930(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_2233959F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223395A08(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223395AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223395AC4(uint64_t a1)
{
  sub_223397844(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223395AE8(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::mutex **v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t **v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *p_shared_weak_owners;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 *v84;
  uint64_t v85;
  uint64_t **v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  uint64_t v93;
  __int128 *v94;
  _BYTE v95[24];
  _BYTE *v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (char *)operator new(0x158uLL);
    v5 = v4;
    *((_QWORD *)v4 + 1) = 0;
    v6 = (unint64_t *)(v4 + 8);
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = *a2;
    v7 = v4 + 24;
    *(_QWORD *)v4 = &off_24EC356B8;
    v9 = a2[2];
    v8 = a2[3];
    *((_QWORD *)v4 + 4) = &off_24EC715B8;
    *((_QWORD *)v4 + 5) = v9;
    *((_QWORD *)v4 + 6) = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v13 = a2[5];
    v12 = a2[6];
    *((_QWORD *)v4 + 7) = &off_24EC715B8;
    *((_QWORD *)v4 + 8) = v13;
    *((_QWORD *)v4 + 9) = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v4[160] = 0;
    v16 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 104) = *((_OWORD *)a2 + 5);
    v17 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v4 + 120) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v4 + 136) = v17;
    *((_QWORD *)v4 + 10) = a2[7];
    *((_QWORD *)v4 + 19) = a2[16];
    *(_OWORD *)(v4 + 88) = v16;
    v4[208] = 0;
    if (*((_BYTE *)a2 + 184))
    {
      v18 = *(_OWORD *)(a2 + 19);
      *((_OWORD *)v4 + 10) = *(_OWORD *)(a2 + 17);
      *((_OWORD *)v4 + 11) = v18;
      *((_OWORD *)v4 + 12) = *(_OWORD *)(a2 + 21);
      v4[208] = 1;
    }
    v19 = *((_OWORD *)a2 + 16);
    v20 = *((_OWORD *)a2 + 18);
    v21 = *((_OWORD *)a2 + 19);
    *(_OWORD *)(v4 + 296) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(v4 + 312) = v20;
    *(_OWORD *)(v4 + 328) = v21;
    v22 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v4 + 216) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(v4 + 232) = v22;
    v23 = *((_OWORD *)a2 + 15);
    *(_OWORD *)(v4 + 248) = *((_OWORD *)a2 + 14);
    *(_OWORD *)(v4 + 264) = v23;
    *(_OWORD *)(v4 + 280) = v19;
    v24 = (unint64_t *)(v4 + 16);
    v91 = (std::__shared_weak_count *)v4;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = (uint64_t *)a1[18];
    v27 = (_QWORD *)operator new();
    *v27 = v26 + 7;
    std::mutex::lock((std::mutex *)(v26 + 7));
    *(_QWORD *)&v92 = v27;
    *((_QWORD *)&v92 + 1) = v26;
    if (!*((_BYTE *)v26 + 48))
      sub_22324A974();
    v28 = v26[4];
    v29 = *v26;
    v30 = (_QWORD *)(*v26 + 16 * v28);
    do
      v31 = __ldxr(v6);
    while (__stxr(v31 + 1, v6));
    *v30 = v7;
    v32 = v29 + 16 * v28;
    v33 = *(std::__shared_weak_count **)(v32 + 8);
    *(_QWORD *)(v32 + 8) = v5;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (v26[1] - *v26) >> 4;
    v37 = v26[5];
    v38 = v26[4] + 1;
    if (v38 >= v36)
      v39 = (v26[1] - *v26) >> 4;
    else
      v39 = 0;
    v26[4] = v38 - v39;
    if (v37 == v36)
    {
      v40 = v26[3] + 1;
      if (v40 < v36)
        v36 = 0;
      v26[3] = v40 - v36;
      v41 = (std::mutex **)v92;
      if (!(_QWORD)v92)
      {
LABEL_41:
        v50 = (uint64_t **)a1[9];
        v92 = 0uLL;
        v51 = (std::__shared_weak_count *)a1[5];
        if (v51)
        {
          v52 = std::__shared_weak_count::lock(v51);
          if (v52)
          {
            v53 = v52;
            v54 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v52->__shared_weak_owners_;
            do
              v56 = __ldxr(p_shared_weak_owners);
            while (__stxr(v56 + 1, p_shared_weak_owners));
            *(_QWORD *)&v92 = v54;
            *((_QWORD *)&v92 + 1) = v52;
            v57 = (unint64_t *)&v52->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          else
          {
            v92 = 0uLL;
          }
        }
        v59 = (char *)operator new(0x30uLL);
        *(_QWORD *)v59 = &off_24EC35708;
        *(_OWORD *)(v59 + 8) = v92;
        v92 = 0uLL;
        *((_QWORD *)v59 + 3) = v7;
        *((_QWORD *)v59 + 4) = v5;
        v93 = 0;
        v94 = 0;
        v96 = v59;
        sub_2245022E4(*v50, (uint64_t)v95);
        v60 = v96;
        if (v96 == v95)
        {
          v61 = 4;
          v60 = v95;
        }
        else
        {
          if (!v96)
            goto LABEL_55;
          v61 = 5;
        }
        (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_55:
        if (v91)
        {
          v62 = (unint64_t *)&v91->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        return;
      }
    }
    else
    {
      v26[5] = v37 + 1;
      v41 = (std::mutex **)v92;
      if (!(_QWORD)v92)
        goto LABEL_41;
    }
    std::mutex::unlock(*v41);
    MEMORY[0x227684CE8](v41, 0x20C4093837F09);
    goto LABEL_41;
  }
  v86 = (uint64_t **)a1[9];
  v87 = 0uLL;
  v42 = (std::__shared_weak_count *)a1[5];
  if (v42)
  {
    v43 = std::__shared_weak_count::lock(v42);
    if (v43)
    {
      v44 = v43;
      v45 = a1[4];
      v46 = (unint64_t *)&v43->__shared_weak_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      *(_QWORD *)&v87 = v45;
      *((_QWORD *)&v87 + 1) = v43;
      v48 = (unint64_t *)&v43->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    else
    {
      v87 = 0uLL;
    }
  }
  v64 = *a2;
  v65 = a2[2];
  v66 = a2[3];
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v70 = a2[5];
  v69 = a2[6];
  if (v69)
  {
    v71 = (unint64_t *)(v69 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  v73 = a2[7];
  LOBYTE(v88) = 0;
  v74 = *((unsigned __int8 *)a2 + 184);
  if (*((_BYTE *)a2 + 184))
  {
    v88 = *(_OWORD *)(a2 + 17);
    v89 = *(_OWORD *)(a2 + 19);
    v90 = *(_OWORD *)(a2 + 21);
  }
  v94 = 0;
  v75 = (char *)operator new(0x158uLL);
  *(_QWORD *)v75 = &off_24EC35788;
  *(_OWORD *)(v75 + 8) = v87;
  *((_QWORD *)v75 + 3) = v64;
  *((_QWORD *)v75 + 4) = &off_24EC715B8;
  *((_QWORD *)v75 + 5) = v65;
  *((_QWORD *)v75 + 6) = v66;
  *((_QWORD *)v75 + 7) = &off_24EC715B8;
  *((_QWORD *)v75 + 8) = v70;
  *((_QWORD *)v75 + 9) = v69;
  *((_QWORD *)v75 + 10) = v73;
  v76 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v75 + 88) = *((_OWORD *)a2 + 4);
  v77 = *((_OWORD *)a2 + 6);
  v78 = *((_OWORD *)a2 + 7);
  *((_QWORD *)v75 + 19) = a2[16];
  *(_OWORD *)(v75 + 136) = v78;
  *(_OWORD *)(v75 + 120) = v77;
  *(_OWORD *)(v75 + 104) = v76;
  v75[160] = 0;
  v75[208] = 0;
  if (v74)
  {
    *((_OWORD *)v75 + 10) = v88;
    *((_OWORD *)v75 + 11) = v89;
    *((_OWORD *)v75 + 12) = v90;
    v75[208] = 1;
  }
  v79 = *((_OWORD *)a2 + 16);
  v80 = *((_OWORD *)a2 + 18);
  v81 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(v75 + 296) = *((_OWORD *)a2 + 17);
  *(_OWORD *)(v75 + 312) = v80;
  *(_OWORD *)(v75 + 328) = v81;
  v82 = *((_OWORD *)a2 + 13);
  *(_OWORD *)(v75 + 216) = *((_OWORD *)a2 + 12);
  *(_OWORD *)(v75 + 232) = v82;
  v83 = *((_OWORD *)a2 + 15);
  *(_OWORD *)(v75 + 248) = *((_OWORD *)a2 + 14);
  *(_OWORD *)(v75 + 264) = v83;
  *(_OWORD *)(v75 + 280) = v79;
  v94 = (__int128 *)v75;
  sub_2245022E4(*v86, (uint64_t)&v92);
  v84 = v94;
  if (v94 == &v92)
  {
    v85 = 4;
    v84 = &v92;
  }
  else
  {
    if (!v94)
      return;
    v85 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v84 + 8 * v85))();
}

void sub_223396154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  va_list va;

  va_start(va, a3);
  v6 = *(_QWORD **)(v4 - 152);
  if (v6 == v3)
  {
    v7 = 4;
    v6 = (_QWORD *)(v4 - 176);
  }
  else
  {
    if (!v6)
    {
      sub_223397A30((uint64_t *)va);
      _Unwind_Resume(a1);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
  sub_223397A30((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2233961A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 112);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 136);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_223322894(v2 - 176);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_2233961F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_223322848((std::mutex ***)(v2 - 176));
  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

void sub_22339621C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v2;
  MEMORY[0x227684CE8](v4, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v3 - 192);
  _Unwind_Resume(a1);
}

void sub_223396254(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::__shared_weak_count::__release_weak(v1);
  sub_223167354(v2 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_223396274(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223396284(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223396290(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_2233962A0(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  std::mutex **v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t **v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *p_shared_weak_owners;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  char *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  char *v81;
  __int128 *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  __int128 *v87;
  std::string *v88;
  std::runtime_error *exception;
  std::runtime_error *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t **v93;
  std::__shared_weak_count *v94[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  std::runtime_error v114;
  char *v115;
  std::__shared_weak_count *v116;
  __int128 v117;
  _QWORD *v118;
  __int128 *v119;
  _QWORD v120[3];
  std::string v121;
  std::string *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v117 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v117 + 1) = 45;
    v86 = (_QWORD *)a1[6];
    v85 = a1 + 6;
    v84 = v86;
    v87 = (__int128 *)*((unsigned __int8 *)v85 + 23);
    if ((char)v87 < 0)
      v87 = (__int128 *)v85[1];
    else
      v84 = v85;
    v118 = v84;
    v119 = v87;
    sub_2231A9820((uint64_t)&v117, (uint64_t)v120, 0, 0, &v121);
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v121;
    else
      v88 = (std::string *)v121.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v114, (const char *)v88);
    v114.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v90 = std::runtime_error::runtime_error(exception, &v114);
    v90->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v90, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v113 = v6;
    v111 = &v6[1].__vftable;
    v112 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (char *)operator new(0x158uLL);
    v10 = v9;
    *((_QWORD *)v9 + 1) = 0;
    v11 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = *a2;
    v12 = v9 + 24;
    *(_QWORD *)v9 = &off_24EC356B8;
    v14 = a2[2];
    v13 = a2[3];
    *((_QWORD *)v9 + 4) = &off_24EC715B8;
    *((_QWORD *)v9 + 5) = v14;
    *((_QWORD *)v9 + 6) = v13;
    if (v13)
    {
      v15 = (unint64_t *)(v13 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v18 = a2[5];
    v17 = a2[6];
    *((_QWORD *)v9 + 7) = &off_24EC715B8;
    *((_QWORD *)v9 + 8) = v18;
    *((_QWORD *)v9 + 9) = v17;
    if (v17)
    {
      v19 = (unint64_t *)(v17 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v9[160] = 0;
    v21 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v9 + 104) = *((_OWORD *)a2 + 5);
    v22 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v9 + 120) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v9 + 136) = v22;
    *((_QWORD *)v9 + 10) = a2[7];
    *((_QWORD *)v9 + 19) = a2[16];
    *(_OWORD *)(v9 + 88) = v21;
    v9[208] = 0;
    if (*((_BYTE *)a2 + 184))
    {
      v23 = *(_OWORD *)(a2 + 19);
      *((_OWORD *)v9 + 10) = *(_OWORD *)(a2 + 17);
      *((_OWORD *)v9 + 11) = v23;
      *((_OWORD *)v9 + 12) = *(_OWORD *)(a2 + 21);
      v9[208] = 1;
    }
    v24 = *((_OWORD *)a2 + 16);
    v25 = *((_OWORD *)a2 + 18);
    v26 = *((_OWORD *)a2 + 19);
    *(_OWORD *)(v9 + 296) = *((_OWORD *)a2 + 17);
    *(_OWORD *)(v9 + 312) = v25;
    *(_OWORD *)(v9 + 328) = v26;
    v27 = *((_OWORD *)a2 + 13);
    *(_OWORD *)(v9 + 216) = *((_OWORD *)a2 + 12);
    *(_OWORD *)(v9 + 232) = v27;
    v28 = *((_OWORD *)a2 + 15);
    *(_OWORD *)(v9 + 248) = *((_OWORD *)a2 + 14);
    *(_OWORD *)(v9 + 264) = v28;
    *(_OWORD *)(v9 + 280) = v24;
    v29 = (unint64_t *)(v9 + 16);
    v115 = v9 + 24;
    v116 = (std::__shared_weak_count *)v9;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    v31 = (uint64_t *)a1[18];
    v32 = (_QWORD *)operator new();
    *v32 = v31 + 7;
    std::mutex::lock((std::mutex *)(v31 + 7));
    *(_QWORD *)&v117 = v32;
    *((_QWORD *)&v117 + 1) = v31;
    if (!*((_BYTE *)v31 + 48))
      sub_22324A974();
    v33 = v31[4];
    v34 = *v31;
    v35 = (_QWORD *)(*v31 + 16 * v33);
    do
      v36 = __ldxr(v11);
    while (__stxr(v36 + 1, v11));
    *v35 = v12;
    v37 = v34 + 16 * v33;
    v38 = *(std::__shared_weak_count **)(v37 + 8);
    *(_QWORD *)(v37 + 8) = v10;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (v31[1] - *v31) >> 4;
    v42 = v31[5];
    v43 = v31[4] + 1;
    if (v43 >= v41)
      v44 = (v31[1] - *v31) >> 4;
    else
      v44 = 0;
    v31[4] = v43 - v44;
    if (v42 == v41)
    {
      v45 = v31[3] + 1;
      if (v45 < v41)
        v41 = 0;
      v31[3] = v45 - v41;
      v46 = (std::mutex **)v117;
      if (!(_QWORD)v117)
      {
LABEL_45:
        v55 = (uint64_t **)a1[9];
        v117 = 0uLL;
        v56 = (std::__shared_weak_count *)a1[5];
        if (v56)
        {
          v57 = std::__shared_weak_count::lock(v56);
          if (v57)
          {
            v58 = v57;
            v59 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v57->__shared_weak_owners_;
            do
              v61 = __ldxr(p_shared_weak_owners);
            while (__stxr(v61 + 1, p_shared_weak_owners));
            *(_QWORD *)&v117 = v59;
            *((_QWORD *)&v117 + 1) = v57;
            v62 = (unint64_t *)&v57->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          else
          {
            v117 = 0uLL;
          }
        }
        v64 = (char *)operator new(0x38uLL);
        *(_QWORD *)v64 = &off_24EC35808;
        *(_OWORD *)(v64 + 8) = v117;
        v117 = 0uLL;
        *((_QWORD *)v64 + 3) = v12;
        *((_QWORD *)v64 + 4) = v10;
        v118 = 0;
        v119 = 0;
        *((_QWORD *)v64 + 5) = v111;
        *((_QWORD *)v64 + 6) = v112;
        v120[0] = 0;
        v120[1] = 0;
        v122 = (std::string *)v64;
        sub_2245022E4(*v55, (uint64_t)&v121);
        v65 = v122;
        if (v122 == &v121)
        {
          v66 = 4;
          v65 = &v121;
        }
        else
        {
          if (!v122)
            goto LABEL_59;
          v66 = 5;
        }
        (*(void (**)(void))(v65->__r_.__value_.__r.__words[0] + 8 * v66))();
LABEL_59:
        if (v116)
        {
          v67 = &v116->__shared_owners_;
          do
            v68 = __ldaxr((unint64_t *)v67);
          while (__stlxr(v68 - 1, (unint64_t *)v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        if (v113)
        {
          v69 = (unint64_t *)&v113->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        return;
      }
    }
    else
    {
      v31[5] = v42 + 1;
      v46 = (std::mutex **)v117;
      if (!(_QWORD)v117)
        goto LABEL_45;
    }
    std::mutex::unlock(*v46);
    MEMORY[0x227684CE8](v46, 0x20C4093837F09);
    goto LABEL_45;
  }
  v93 = (uint64_t **)a1[9];
  *(_OWORD *)v94 = 0uLL;
  v47 = (std::__shared_weak_count *)a1[5];
  if (v47)
  {
    v48 = std::__shared_weak_count::lock(v47);
    if (v48)
    {
      v49 = v48;
      v50 = (std::__shared_weak_count *)a1[4];
      v51 = (unint64_t *)&v48->__shared_weak_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v94[0] = v50;
      v94[1] = v48;
      v53 = (unint64_t *)&v48->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    else
    {
      *(_OWORD *)v94 = 0uLL;
    }
  }
  v92 = *a2;
  v71 = a2[3];
  v91 = a2[2];
  if (v71)
  {
    v72 = (unint64_t *)(v71 + 8);
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  v74 = a2[5];
  v75 = a2[6];
  if (v75)
  {
    v76 = (unint64_t *)(v75 + 8);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  v78 = a2[7];
  v97 = *((_OWORD *)a2 + 6);
  v98 = *((_OWORD *)a2 + 7);
  v99 = a2[16];
  v95 = *((_OWORD *)a2 + 4);
  v96 = *((_OWORD *)a2 + 5);
  LOBYTE(v100) = 0;
  v79 = *((unsigned __int8 *)a2 + 184);
  if (*((_BYTE *)a2 + 184))
  {
    v100 = *(_OWORD *)(a2 + 17);
    v101 = *(_OWORD *)(a2 + 19);
    v102 = *(_OWORD *)(a2 + 21);
  }
  v107 = *((_OWORD *)a2 + 16);
  v108 = *((_OWORD *)a2 + 17);
  v109 = *((_OWORD *)a2 + 18);
  v110 = *((_OWORD *)a2 + 19);
  v103 = *((_OWORD *)a2 + 12);
  v104 = *((_OWORD *)a2 + 13);
  v105 = *((_OWORD *)a2 + 14);
  v106 = *((_OWORD *)a2 + 15);
  v80 = operator new(0x20uLL);
  v80[1] = 0;
  v80[2] = 0;
  *v80 = &unk_24EC2F420;
  v80[3] = *a3;
  *a3 = 0;
  v119 = 0;
  v81 = (char *)operator new(0x168uLL);
  *(_QWORD *)v81 = &off_24EC35888;
  *(_OWORD *)(v81 + 8) = *(_OWORD *)v94;
  *((_QWORD *)v81 + 3) = v92;
  *((_QWORD *)v81 + 4) = &off_24EC715B8;
  *((_QWORD *)v81 + 5) = v91;
  *((_QWORD *)v81 + 6) = v71;
  *((_QWORD *)v81 + 7) = &off_24EC715B8;
  *((_QWORD *)v81 + 8) = v74;
  *((_QWORD *)v81 + 9) = v75;
  *((_QWORD *)v81 + 10) = v78;
  *(_OWORD *)(v81 + 88) = v95;
  *((_QWORD *)v81 + 19) = v99;
  *(_OWORD *)(v81 + 136) = v98;
  *(_OWORD *)(v81 + 120) = v97;
  *(_OWORD *)(v81 + 104) = v96;
  v81[160] = 0;
  v81[208] = 0;
  if (v79)
  {
    *((_OWORD *)v81 + 10) = v100;
    *((_OWORD *)v81 + 11) = v101;
    *((_OWORD *)v81 + 12) = v102;
    v81[208] = 1;
  }
  *(_OWORD *)(v81 + 296) = v108;
  *(_OWORD *)(v81 + 312) = v109;
  *(_OWORD *)(v81 + 328) = v110;
  *(_OWORD *)(v81 + 216) = v103;
  *(_OWORD *)(v81 + 232) = v104;
  *(_OWORD *)(v81 + 248) = v105;
  *(_OWORD *)(v81 + 264) = v106;
  *(_OWORD *)(v81 + 280) = v107;
  *((_QWORD *)v81 + 43) = v80 + 3;
  *((_QWORD *)v81 + 44) = v80;
  v119 = (__int128 *)v81;
  sub_2245022E4(*v93, (uint64_t)&v117);
  v82 = v119;
  if (v119 == &v117)
  {
    v83 = 4;
    v82 = &v117;
  }
  else
  {
    if (!v119)
      return;
    v83 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
}

void sub_223396BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, std::__shared_weak_count *a16)
{
  std::promise<void> *v16;
  uint64_t v17;
  std::exception_ptr v18;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v18.__ptr_ = (void *)(v17 - 216);
    std::promise<void>::set_exception(v16, v18);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v17 - 216));
    std::runtime_error::~runtime_error((std::runtime_error *)(v17 - 232));
    if (*(char *)(v17 - 113) < 0)
      operator delete(*(void **)(v17 - 136));
    JUMPOUT(0x223396AFCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_223396D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;

  v63 = *(_QWORD **)(v61 - 112);
  if (v63 == v60)
  {
    v64 = 4;
    v63 = (_QWORD *)(v61 - 136);
  }
  else
  {
    if (!v63)
      goto LABEL_6;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_6:
  sub_22332429C((_QWORD *)(v61 - 192));
  sub_223167354(v61 - 208);
  sub_223167354((uint64_t)&a60);
  sub_223167354(v61 - 248);
  _Unwind_Resume(a1);
}

void sub_223396DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_223167354((uint64_t)&a60);
  sub_223167354(v60 - 248);
  _Unwind_Resume(a1);
}

void sub_223396DC0(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223396E34(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC35908;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223396F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223396FA8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC35988;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2233970B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22339711C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC35A08;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223397334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2233973FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC35A88;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223397614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233976DC(uint64_t a1)
{
  return sub_223397844(a1 - 16);
}

void sub_2233976E4(uint64_t a1)
{
  sub_223397844(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339770C(uint64_t a1)
{
  return sub_223396E34((_QWORD *)(a1 - 16));
}

uint64_t *sub_223397714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22339711C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22339771C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2233973FC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_223397724(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22339772C(uint64_t a1)
{
  return sub_223397844(a1 - 24);
}

void sub_223397734(uint64_t a1)
{
  sub_223397844(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339775C(uint64_t a1)
{
  return sub_223396FA8((_QWORD *)(a1 - 24));
}

uint64_t sub_223397764(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22339776C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2233977D4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_22339783C(uint64_t a1, uint64_t a2)
{
  sub_22333C98C(*(uint64_t **)(a1 + 8), a2);
}

uint64_t sub_223397844(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC354C8;
  *(_QWORD *)(a1 + 16) = &unk_24EC35540;
  *(_QWORD *)(a1 + 24) = &unk_24EC35580;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_223397A30(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  a1[6] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[3] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[3] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223397AF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC356B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223397B04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC356B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223397B34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  a1[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

_QWORD *sub_223397BF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC35708;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223397C38(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC35708;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223397C8C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35708;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223397CFC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35708;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223397D4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223397D88(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223397DC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_2233980E4((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x227684B68](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223397F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x227684B68](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22339806C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvL"
                     "b0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImage"
                                "BundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233980D8()
{
  return &unk_24EC35768;
}

void sub_2233980E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_22339817C()
{
  __break(1u);
}

void sub_223398228(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x223398248);
}

_QWORD *sub_223398254(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24EC35788;
  a1[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223398324(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *a1 = &off_24EC35788;
  a1[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x227684CE8);
}

__n128 sub_223398404(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  v2 = (char *)operator new(0x158uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24EC35788;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v2 + 4) = &off_24EC715B8;
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v2 + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)v2 + 7) = &off_24EC715B8;
  *((_QWORD *)v2 + 8) = v11;
  *((_QWORD *)v2 + 9) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 80);
  v2[160] = 0;
  *((_QWORD *)v2 + 10) = v14;
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *((_QWORD *)v2 + 19) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  v2[208] = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    v15 = *(_OWORD *)(a1 + 176);
    *((_OWORD *)v2 + 10) = *(_OWORD *)(a1 + 160);
    *((_OWORD *)v2 + 11) = v15;
    *((_OWORD *)v2 + 12) = *(_OWORD *)(a1 + 192);
    v2[208] = 1;
  }
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 248);
  v16 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(v2 + 296) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(v2 + 312) = v16;
  *(_OWORD *)(v2 + 328) = *(_OWORD *)(a1 + 328);
  result = *(__n128 *)(a1 + 280);
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(a1 + 264);
  *(__n128 *)(v2 + 280) = result;
  return result;
}

__n128 sub_22339853C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  __int128 v23;
  __int128 v24;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24EC35788;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = &off_24EC715B8;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 56) = &off_24EC715B8;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 104);
  v14 = *(_OWORD *)(a1 + 120);
  v15 = *(_OWORD *)(a1 + 136);
  v16 = *(_QWORD *)(a1 + 152);
  v17 = *(_OWORD *)(a1 + 88);
  *(_BYTE *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 88) = v17;
  *(_QWORD *)(a2 + 152) = v16;
  *(_OWORD *)(a2 + 136) = v15;
  *(_OWORD *)(a2 + 120) = v14;
  *(_OWORD *)(a2 + 104) = v13;
  *(_BYTE *)(a2 + 208) = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    v18 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 176) = v18;
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
    *(_BYTE *)(a2 + 208) = 1;
  }
  v19 = *(_OWORD *)(a1 + 216);
  v20 = *(_OWORD *)(a1 + 232);
  v21 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(a2 + 248) = v21;
  *(_OWORD *)(a2 + 232) = v20;
  *(_OWORD *)(a2 + 216) = v19;
  result = *(__n128 *)(a1 + 280);
  v23 = *(_OWORD *)(a1 + 296);
  v24 = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a2 + 312) = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 328) = v24;
  *(__n128 *)(a2 + 280) = result;
  *(_OWORD *)(a2 + 296) = v23;
  return result;
}

void sub_223398654(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  a1[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_223398720(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  __p[7] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)__p[9];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    __p[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    __p[4] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[2];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(__p);
}

void sub_2233987E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_2233980E4((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x227684B68](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22339888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x227684B68](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233988D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvL"
                     "b0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImage"
                                "BundleEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223398944()
{
  return &unk_24EC357E8;
}

_QWORD *sub_223398950(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[43];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[6] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[6] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[8];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[3] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[1];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

_QWORD *sub_223398A60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC35808;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223398AE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC35808;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223398B80(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35808;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223398C10(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35808;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223398C80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223398D00(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223398D7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_2233980E4(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x227684B68](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223399030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223399188(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvL"
                     "b0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImage"
                                "BundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T"
                                "0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233991F4()
{
  return &unk_24EC35868;
}

_QWORD *sub_223399200(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC35888;
  v2 = (std::__shared_weak_count *)a1[44];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)a1[2];
      if (!v11)
        return a1;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_22339931C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  *a1 = &off_24EC35888;
  v2 = (std::__shared_weak_count *)a1[44];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[6];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      goto LABEL_19;
  }
  std::__shared_weak_count::__release_weak(v11);
LABEL_19:
  JUMPOUT(0x227684CE8);
}

char *sub_223399448(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  result = (char *)operator new(0x168uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24EC35888;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 4) = &off_24EC715B8;
  v7 = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 6) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *((_QWORD *)result + 7) = &off_24EC715B8;
  *((_QWORD *)result + 8) = v11;
  *((_QWORD *)result + 9) = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(_QWORD *)(a1 + 80);
  result[160] = 0;
  *((_QWORD *)result + 10) = v14;
  *(_OWORD *)(result + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(result + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(result + 136) = *(_OWORD *)(a1 + 136);
  *((_QWORD *)result + 19) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(result + 88) = *(_OWORD *)(a1 + 88);
  result[208] = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    v15 = *(_OWORD *)(a1 + 176);
    *((_OWORD *)result + 10) = *(_OWORD *)(a1 + 160);
    *((_OWORD *)result + 11) = v15;
    *((_OWORD *)result + 12) = *(_OWORD *)(a1 + 192);
    result[208] = 1;
  }
  *(_OWORD *)(result + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(result + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(result + 248) = *(_OWORD *)(a1 + 248);
  v16 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(result + 296) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(result + 312) = v16;
  *(_OWORD *)(result + 328) = *(_OWORD *)(a1 + 328);
  v17 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)(result + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)(result + 280) = v17;
  v18 = *(_QWORD *)(a1 + 352);
  *((_QWORD *)result + 43) = *(_QWORD *)(a1 + 344);
  *((_QWORD *)result + 44) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  return result;
}

uint64_t sub_2233995A0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC35888;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 32) = &off_24EC715B8;
  v6 = *(_QWORD *)(result + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v10 = *(_QWORD *)(result + 64);
  v9 = *(_QWORD *)(result + 72);
  *(_QWORD *)(a2 + 56) = &off_24EC715B8;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 80);
  v13 = *(_OWORD *)(result + 104);
  v14 = *(_OWORD *)(result + 120);
  v15 = *(_OWORD *)(result + 136);
  v16 = *(_QWORD *)(result + 152);
  v17 = *(_OWORD *)(result + 88);
  *(_BYTE *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 88) = v17;
  *(_QWORD *)(a2 + 152) = v16;
  *(_OWORD *)(a2 + 136) = v15;
  *(_OWORD *)(a2 + 120) = v14;
  *(_OWORD *)(a2 + 104) = v13;
  *(_BYTE *)(a2 + 208) = 0;
  if (*(_BYTE *)(result + 208))
  {
    v18 = *(_OWORD *)(result + 176);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(result + 160);
    *(_OWORD *)(a2 + 176) = v18;
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(result + 192);
    *(_BYTE *)(a2 + 208) = 1;
  }
  v19 = *(_OWORD *)(result + 216);
  v20 = *(_OWORD *)(result + 232);
  v21 = *(_OWORD *)(result + 248);
  *(_OWORD *)(a2 + 264) = *(_OWORD *)(result + 264);
  *(_OWORD *)(a2 + 248) = v21;
  *(_OWORD *)(a2 + 232) = v20;
  *(_OWORD *)(a2 + 216) = v19;
  v22 = *(_OWORD *)(result + 280);
  v23 = *(_OWORD *)(result + 296);
  v24 = *(_OWORD *)(result + 328);
  *(_OWORD *)(a2 + 312) = *(_OWORD *)(result + 312);
  *(_OWORD *)(a2 + 328) = v24;
  *(_OWORD *)(a2 + 280) = v22;
  *(_OWORD *)(a2 + 296) = v23;
  v25 = *(_QWORD *)(result + 352);
  *(_QWORD *)(a2 + 344) = *(_QWORD *)(result + 344);
  *(_QWORD *)(a2 + 352) = v25;
  if (v25)
  {
    v26 = (unint64_t *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  return result;
}

void sub_2233996D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[44];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[6];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[2];
    if (!v11)
      return;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
}

void sub_2233997EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)__p[44];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    __p[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[9];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    __p[7] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)__p[9];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  __p[4] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)__p[6];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (std::__shared_weak_count *)__p[2];
      if (!v11)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  v11 = (std::__shared_weak_count *)__p[2];
  if (v11)
LABEL_16:
    std::__shared_weak_count::__release_weak(v11);
LABEL_17:
  operator delete(__p);
}

void sub_2233998FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[43];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_2233980E4((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x227684B68](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223399A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x227684B68](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223399AB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvL"
                     "b0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImage"
                                "BundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223399B24()
{
  return &unk_24EC358E8;
}

_QWORD *sub_223399B30(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35908;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223399B68(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35908;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223399BB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35908;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223399C00(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC35908;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223399C30(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223399C40(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223399C6C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223399D00(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223399D3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb"
                     "0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageB"
                                "undleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223399DA8()
{
  return &unk_24EC35968;
}

_QWORD *sub_223399DB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35988;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223399DEC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35988;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223399E34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35988;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223399E84(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC35988;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223399EB4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223399EC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223399EF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223399F84(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223399FC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb"
                     "0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageB"
                                "undleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22339A02C()
{
  return &unk_24EC359E8;
}

_QWORD *sub_22339A038(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35A08;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22339A070(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35A08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339A0B8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35A08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22339A110(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35A08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22339A148(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22339A158(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22339A184(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22339A23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22339A288(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvL"
                     "b0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImage"
                                "BundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22339A2F4()
{
  return &unk_24EC35A68;
}

_QWORD *sub_22339A300(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC35A88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22339A338(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC35A88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339A380(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC35A88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22339A3D8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC35A88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22339A410(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22339A420(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22339A44C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22339A504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22339A550(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvL"
                     "b0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImage"
                                "BundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22339A5BC()
{
  return &unk_24EC35AE8;
}

void sub_22339A5CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22339A5F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22339A608(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd21InputDe"
                     "pthImageBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd21InputDepthImageBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd21InputDepthImageBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22339A678(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22339A6A4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339A6E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC35B58;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_22339A748(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22339A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22339A7EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22339A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22339A890(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22339A954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22339A968(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22339AA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22339AA40(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22339AAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22339AAF8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_22339AB48(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22339ABA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC35BD0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_22339AC48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_22339AC6C()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_22339ACA8()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_22339ACE4()
{
  return 1;
}

uint64_t sub_22339ACF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_22339AD6C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22339AD80()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC35C48;
  return result;
}

void sub_22339ADA4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC35C48;
}

uint64_t sub_22339ADC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d13concurrent_sd29SurfaceDetectionNodeInterfaceC1ERNS_3kit11concurrency21NodeTaskSc"
                     "hedulerPoolENSt3__13mapINS0_6sensor14CameraIdentityENS9_6CameraENS7_4lessISA_EENS7_9allocatorINS7_4"
                     "pairIKSA_SB_EEEEEERKNS1_26SurfaceDetectionParametersERKNS1_22SurfaceDetectionConfigEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d13concurrent_sd29SurfaceDetectionNodeInterfaceC1ERNS_3kit11concurrency2"
                                "1NodeTaskSchedulerPoolENSt3__13mapINS0_6sensor14CameraIdentityENS9_6CameraENS7_4lessISA_"
                                "EENS7_9allocatorINS7_4pairIKSA_SB_EEEEEERKNS1_26SurfaceDetectionParametersERKNS1_22Surfa"
                                "ceDetectionConfigEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d13concurrent_sd29SurfaceDetectionNodeInterfaceC1ERNS_3kit11concurrency21NodeTaskSchedulerPoolENSt3__13mapINS0_6sensor14CameraIdentityENS9_6CameraENS7_4lessISA_EENS7_9allocatorINS7_4pairIKSA_SB_EEEEEERKNS1_26SurfaceDetectionParametersERKNS1_22SurfaceDetectionConfigEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d13concurrent_sd29SurfaceDetectionNodeInterfaceC1ERNS_3kit11concurrency21NodeTaskSchedulerPoolENSt3__13mapINS0_6sensor14CameraIdentityENS9_6CameraENS7_4lessISA_EENS7_9allocatorINS7_4pairIKSA_SB_EEEEEERKNS1_26SurfaceDetectionParametersERKNS1_22SurfaceDetectionConfigEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22339AE2C()
{
  return &unk_24EC35CB8;
}

void sub_22339AE38(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_22339AE84(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22339AEE4(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 136) & 1) == 0 || !*(_BYTE *)(a1 + 168) || (*(char *)(a1 + 167) & 0x80000000) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  operator delete(*(void **)(a1 + 144));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_22339AF44(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_22339AF90(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22339AFF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t *sub_22339AFFC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24EC35D68;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_2233236D4(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_22338FC18(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_22338FC18(&v23);
}

void sub_22339B1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_22338FC18((uint64_t *)va);
  sub_223167354((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_22338FC18((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_22339B1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_22338FC18(&a15);
  _Unwind_Resume(a1);
}

void sub_22339B1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_22338FC18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22339B1F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x22339B13CLL);
    JUMPOUT(0x22339B10CLL);
  }
  sub_2233236D4(3u);
}

void sub_22339B250(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_223167354((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x22339B2C0);
  JUMPOUT(0x22339B298);
}

void sub_22339B2D0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_22339B31C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22339B37C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_22339B388(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_22339B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_22339B44C(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  double *v5;
  double *v7;
  _BOOL4 v8;
  double *v9;
  double v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  BOOL v15;
  BOOL v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float64x2_t v21;
  float64x2_t v22;
  float64_t *v23;
  float64x2_t v24;
  uint64_t v25;
  float64x2_t v26;
  int32x4_t v27;
  float32x2_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char **v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float64x2_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  unint64_t v42;
  float32x2_t *v43;
  float64x2_t v44;
  float32x2_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  float64_t *v50;
  float32x2_t *v51;
  uint64_t v52;
  __int32 v53;
  float32x2_t *v54;
  float32x2_t *v55;
  float32x2_t *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  char *v67;
  float32x2_t *i;
  float32x2_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  float32x2_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  float32x2_t *v83;
  float32x2_t v84;
  float64x2_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int8x16_t v88;
  float64x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  int32x4_t v92;
  float32x2_t v93;
  float v94;
  float v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  __int128 v103;
  float32x2_t v104;
  __int128 v105;
  float32x2_t v106;
  _DWORD *v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  float32x2_t *v119;
  float32x2_t *v120;
  char *v121;
  char *v122;
  char *v123;
  float32x2_t *v124;
  unint64_t v125;
  unint64_t v126;
  float64x2_t *v127;
  float32x2_t v128;
  float32x4_t v129;
  float64x2_t *v130;
  float64x2_t v131;
  float32x4_t v132;
  uint64_t v133;
  double v134;
  float32x2_t v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  double v156;
  float32x2_t v157;
  float v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  float v162;
  float v163;
  float32x2_t v164;
  float32x2_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x2_t v171;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  __int128 v175;
  float32x2_t v176;
  __int128 v177;
  float32x2_t v178;
  float32x2_t v179;
  float32x2_t v180;
  _QWORD *v181;
  char *v182;
  char *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  __int128 v190;
  float32x2_t v191;
  float v192;
  float v193;
  float32x2_t v194;
  float32x2_t v195;
  float32x2_t v196;
  __int128 v197;
  float32x2_t v198;
  __int128 v199;
  float32x2_t v200;
  __int128 v201;
  char *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  char *v206;
  char *v207;
  __int128 v208;
  uint64_t v209;
  void *v210;
  unint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  char *v218;
  float32x2_t *j;
  float32x2_t v220;
  uint64_t v221;
  char *v222;
  unint64_t v223;
  char *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  float32x2_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  double *v237;
  uint64_t v238;
  void **v239;
  float64x2_t v240;
  __int128 v241;
  __int128 v242;
  float32x2_t v243;
  __int128 v244;
  __int128 v245;
  float32x2_t v246;
  float32x4_t v247;
  uint64_t v248;
  float32x4_t v249;
  __int128 v250;
  double v251;
  double v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  float32x2_t *v257;
  double v258;
  float32x2_t v259;
  __int128 v260;
  float32x2_t *v261;
  void *v262[2];
  float32x2_t v263;
  void *v264[2];
  int32x4_t v265;
  float32x2_t v266;
  float32x2_t v267;
  __int128 v268;
  float32x2_t v269;
  __int128 v270;
  double v271;
  __int128 v272;
  float64x2_t v273;
  void *v274[2];
  float32x2_t *v275;
  void *v276[2];
  char *v277;
  float32x2_t *v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  char *v285;
  char *v286;
  char *v287;
  void *__p[2];
  float32x2_t *v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  float64x2_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;

  v5 = a2;
  v298 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v237 = &a2[30 * a1];
    if (a1 == 1)
    {
      v7 = a2;
    }
    else
    {
      v9 = a2 + 30;
      v10 = *a2;
      v11 = 240 * a1 - 240;
      v7 = a2;
      v12 = a2 + 30;
      do
      {
        v13 = *v12;
        v12 += 30;
        v14 = v13;
        v15 = v10 < v13;
        v16 = v10 <= v13;
        if (v10 == v13)
          v17 = 0;
        else
          v17 = -127;
        if (!v16)
          v17 = 1;
        if (v15)
          v17 = -1;
        if (v17 != -127 && v17 < 0)
        {
          v10 = v14;
          v7 = v9;
        }
        v9 = v12;
        v11 -= 240;
      }
      while (v11);
    }
  }
  else
  {
    v8 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/VioBundleProcessing.cpp", 60, (uint64_t)"!vio_bundles.empty()", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v237 = v5;
    v7 = v5;
    if (v8)
      abort();
  }
  v18 = *((_OWORD *)v7 + 12);
  v294 = *((_OWORD *)v7 + 11);
  v295 = v18;
  v19 = *((_OWORD *)v7 + 14);
  v296 = *((_OWORD *)v7 + 13);
  v297 = v19;
  v20 = *((_OWORD *)v7 + 8);
  v290 = *((_OWORD *)v7 + 7);
  v291 = v20;
  v21 = *(float64x2_t *)(v7 + 20);
  v292 = *((_OWORD *)v7 + 9);
  v293 = v21;
  *(_QWORD *)&v22.f64[0] = a3[1];
  v23 = (float64_t *)(a3 + 5);
  v24 = *(float64x2_t *)(a3 + 7);
  v25 = *a3;
  v22.f64[1] = *v23;
  *(float32x4_t *)__p = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v22), v24);
  sub_223FBAC84((uint64_t)&v278, (uint64_t)__p);
  *(_QWORD *)a4 = &off_24EC64998;
  *(_QWORD *)(a4 + 8) = &off_24EC64920;
  v34 = v280;
  *(_OWORD *)(a4 + 16) = v279;
  *(_OWORD *)(a4 + 32) = v34;
  *(_OWORD *)(a4 + 48) = v281;
  *(_QWORD *)(a4 + 64) = v282;
  *(_DWORD *)(a4 + 72) = v283;
  *(_QWORD *)(a4 + 76) = v284;
  *(_QWORD *)(a4 + 88) = v25;
  *(float *)(a4 + 96) = (float)v25;
  *(float *)(a4 + 100) = (float)HIDWORD(v25);
  v238 = a4;
  *(_BYTE *)(a4 + 232) = 0;
  v35 = (char **)(a4 + 232);
  v36 = v295;
  *((_OWORD *)v35 - 4) = v294;
  *((_OWORD *)v35 - 3) = v36;
  v37 = v297;
  *((_OWORD *)v35 - 2) = v296;
  *((_OWORD *)v35 - 1) = v37;
  v38 = v291;
  *((_OWORD *)v35 - 8) = v290;
  *((_OWORD *)v35 - 7) = v38;
  v39 = v293;
  *((_OWORD *)v35 - 6) = v292;
  *((float64x2_t *)v35 - 5) = v39;
  *((_BYTE *)v35 + 48) = 0;
  *((_BYTE *)v35 + 56) = 0;
  v239 = (void **)(v35 + 7);
  *((_BYTE *)v35 + 104) = 0;
  if (v237 != v5)
  {
    v269 = (float32x2_t)vdup_n_s32(0x358637BDu);
    do
    {
      v40 = (float64x2_t *)*((_QWORD *)v5 + 1);
      v41 = (float64x2_t *)*((_QWORD *)v5 + 2);
      if (v40 == v41)
        goto LABEL_108;
      v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3);
      if (v42 != (uint64_t)(*((_QWORD *)v5 + 5) - *((_QWORD *)v5 + 4)) >> 3)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/VioBundleProcessing.cpp", 113, (uint64_t)"points.size() == vergence_angle_cosines.size()", 46, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v40 = (float64x2_t *)*((_QWORD *)v5 + 1);
        v41 = (float64x2_t *)*((_QWORD *)v5 + 2);
        v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3);
      }
      __p[0] = 0;
      __p[1] = 0;
      v289 = 0;
      if (v41 == v40)
      {
        v257 = 0;
        v43 = 0;
        v54 = 0;
        goto LABEL_50;
      }
      if (v42 > 0x1555555555555555)
        sub_22316E078();
      v43 = (float32x2_t *)operator new(12 * v42);
      __p[0] = v43;
      __p[1] = v43;
      v289 = (float32x2_t *)((char *)v43 + 12 * v42);
      do
      {
        while (1)
        {
          while (1)
          {
            v44.f64[0] = v40[1].f64[0];
            v39 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v40), v44);
            if (v43 >= v289)
              break;
            v43[1].i32[0] = LODWORD(v39.f64[1]);
            *v43 = *(float32x2_t *)&v39.f64[0];
            v43 = (float32x2_t *)((char *)v43 + 12);
            __p[1] = v43;
            v40 = (float64x2_t *)((char *)v40 + 24);
            if (v40 == v41)
              goto LABEL_48;
          }
          v45 = (float32x2_t *)__p[0];
          v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (char *)__p[0]) >> 2);
          v47 = v46 + 1;
          if (v46 + 1 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * (((char *)v289 - (char *)__p[0]) >> 2) > v47)
            v47 = 0x5555555555555556 * (((char *)v289 - (char *)__p[0]) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v289 - (char *)__p[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v48 = 0x1555555555555555;
          else
            v48 = v47;
          if (v48)
          {
            *(float64x2_t *)v274 = v39;
            if (v48 > 0x1555555555555555)
              sub_223174E94();
            v49 = (char *)operator new(12 * v48);
            v39 = *(float64x2_t *)v274;
          }
          else
          {
            v49 = 0;
          }
          v50 = (float64_t *)&v49[12 * v46];
          *v50 = v39.f64[0];
          *((_DWORD *)v50 + 2) = LODWORD(v39.f64[1]);
          v51 = (float32x2_t *)((char *)v50 + 12);
          if (v43 == v45)
          {
            __p[0] = v50;
            __p[1] = (char *)v50 + 12;
            v289 = (float32x2_t *)&v49[12 * v48];
            break;
          }
          do
          {
            v52 = *(uint64_t *)((char *)&v43[-2] + 4);
            v43 = (float32x2_t *)((char *)v43 - 12);
            v53 = v43[1].i32[0];
            *(_QWORD *)((char *)v50 - 12) = v52;
            v50 = (float64_t *)((char *)v50 - 12);
            *((_DWORD *)v50 + 2) = v53;
          }
          while (v43 != v45);
          v43 = (float32x2_t *)__p[0];
          __p[0] = v50;
          __p[1] = v51;
          v289 = (float32x2_t *)&v49[12 * v48];
          if (v43)
            break;
          v43 = v51;
          __p[1] = v51;
          v40 = (float64x2_t *)((char *)v40 + 24);
          if (v40 == v41)
            goto LABEL_48;
        }
        operator delete(v43);
        v43 = v51;
        __p[1] = v51;
        v40 = (float64x2_t *)((char *)v40 + 24);
      }
      while (v40 != v41);
LABEL_48:
      v54 = (float32x2_t *)__p[0];
      v257 = v289;
LABEL_50:
      v55 = (float32x2_t *)*((_QWORD *)v5 + 4);
      v275 = (float32x2_t *)*((_QWORD *)v5 + 5);
      __p[1] = 0;
      v289 = 0;
      __p[0] = 0;
      v261 = v54;
      v254 = (char *)v43 - (char *)v54;
      if (v43 != v54 || (v56 = 0, v57 = 0, v58 = 0, v275 != v55))
      {
        v57 = 0;
        v58 = 0;
        v56 = 0;
        v83 = v54;
        while (1)
        {
          v84 = *v55;
          v85 = *(float64x2_t *)(v5 + 16);
          v86 = vcvt_f32_f64(v85);
          v87 = vcvt_f32_f64(*(float64x2_t *)(v5 + 14));
          v88 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)v87, v85);
          v89 = *(float64x2_t *)(v5 + 20);
          v90 = vcvt_f32_f64(*(float64x2_t *)(v5 + 18));
          v91 = vcvt_f32_f64(v89);
          v92 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)v90, v89);
          v39 = *(float64x2_t *)(v5 + 22);
          *(float32x2_t *)&v89.f64[0] = vcvt_f32_f64(*(float64x2_t *)(v5 + 24));
          *(float32x2_t *)&v39.f64[0] = vcvt_f32_f64(v39);
          v84.f32[0] = *(double *)v55;
          v28.i32[0] = v83[1].i32[0];
          v92.i64[0] = vtrn2q_s32((int32x4_t)v88, v92).u64[0];
          v88.i32[3] = v91.i32[0];
          v92.i64[0] = vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 1), 0xCuLL).u64[0];
          v93 = vmla_f32(vmla_lane_f32(vmul_f32(v86, *v83), v91, *v83, 1), v28, *(float32x2_t *)&v89.f64[0]);
          v94 = v5[28];
          v95 = sqrtf(1.0 - (float)(v84.f32[0] * v84.f32[0]));
          v84.f32[0] = (float)((float)((float)(v93.f32[0] + v94) / (float)(v95 / v84.f32[0])) * 0.0027273)
                     * (float)((float)((float)(v93.f32[0] + v94) / (float)(v95 / v84.f32[0])) * 0.0027273);
          v96 = (float32x2_t)vzip1_s32((int32x2_t)v87, (int32x2_t)v90);
          v88.i64[0] = vextq_s8(v88, v88, 8uLL).u64[0];
          v28 = vmla_f32(vmla_f32(vmul_f32(v96, v269), 0, *(float32x2_t *)v92.i8), 0, *(float32x2_t *)v88.i8);
          v93.i32[0] = 897988541;
          v97 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v39.f64[0], v93), 0, *(float32x2_t *)&v39.f64[0], 1), 0, *(float32x2_t *)&v89.f64[0]);
          v98 = vmul_f32(v96, 0);
          v99 = vmla_f32(vmla_f32(v98, v269, *(float32x2_t *)v92.i8), 0, *(float32x2_t *)v88.i8);
          v100 = vmul_f32(*(float32x2_t *)&v39.f64[0], 0);
          *(float32x2_t *)&v31 = vmla_f32(vmla_lane_f32(v100, v93, *(float32x2_t *)&v39.f64[0], 1), 0, *(float32x2_t *)&v89.f64[0]);
          v101 = vmla_n_f32(vmla_f32(v98, 0, *(float32x2_t *)v92.i8), *(float32x2_t *)v88.i8, v84.f32[0]);
          *(float32x2_t *)&v30 = vmla_f32(vmla_lane_f32(v100, 0, *(float32x2_t *)&v39.f64[0], 1), v84, *(float32x2_t *)&v89.f64[0]);
          *(float32x2_t *)&v103 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v28, v87.f32[0]), v99, v87, 1), v101, v86.f32[0]);
          v102 = vmla_f32(vmla_lane_f32(vmul_f32(v97, v87), *(float32x2_t *)&v31, v87, 1), v86, *(float32x2_t *)&v30);
          *((float32x2_t *)&v103 + 1) = v102;
          *(float32x2_t *)&v105 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v28, v90.f32[0]), v99, v90, 1), v101, v91.f32[0]);
          v104 = vmla_f32(vmla_lane_f32(vmul_f32(v97, v90), *(float32x2_t *)&v31, v90, 1), v91, *(float32x2_t *)&v30);
          *((float32x2_t *)&v105 + 1) = v104;
          *(float32x2_t *)v27.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v28, *(float *)v39.f64), v99, *(float32x2_t *)&v39.f64[0], 1), v101, *(float *)v89.f64);
          v106 = vmla_f32(vmla_lane_f32(vmul_f32(v97, *(float32x2_t *)&v39.f64[0]), *(float32x2_t *)&v31, *(float32x2_t *)&v39.f64[0], 1), *(float32x2_t *)&v89.f64[0], *(float32x2_t *)&v30);
          v27.u64[1] = (unint64_t)v106;
          if (v57 < (char *)v56)
          {
            *((_DWORD *)v57 + 2) = v102.i32[0];
            *(_QWORD *)v57 = v103;
            *((_DWORD *)v57 + 5) = v104.i32[0];
            *(_QWORD *)(v57 + 12) = v105;
            v107 = v57 + 32;
            *((_QWORD *)v57 + 3) = v27.i64[0];
            v57 += 36;
            *v107 = v106.i32[0];
            goto LABEL_102;
          }
          v108 = 0x8E38E38E38E38E39 * ((v57 - v58) >> 2) + 1;
          if (v108 > 0x71C71C71C71C71CLL)
          {
            __p[1] = v57;
            v289 = v56;
            __p[0] = v58;
            sub_22316E078();
          }
          if (0x1C71C71C71C71C72 * (((char *)v56 - v58) >> 2) > v108)
            v108 = 0x1C71C71C71C71C72 * (((char *)v56 - v58) >> 2);
          v109 = 0x8E38E38E38E38E39 * (((char *)v56 - v58) >> 2) >= 0x38E38E38E38E38ELL ? 0x71C71C71C71C71CLL : v108;
          if (v109)
          {
            v265 = v27;
            v270 = v105;
            v272 = v103;
            if (v109 > 0x71C71C71C71C71CLL)
            {
              v289 = v56;
              __p[0] = v58;
              sub_223174E94();
            }
            v110 = (char *)operator new(36 * v109);
            v105 = v270;
            v103 = v272;
            v27 = v265;
          }
          else
          {
            v110 = 0;
          }
          v111 = &v110[4 * ((v57 - v58) >> 2)];
          *(_QWORD *)v111 = v103;
          *((_DWORD *)v111 + 2) = DWORD2(v103);
          *((_DWORD *)v111 + 5) = DWORD2(v105);
          *(_QWORD *)(v111 + 12) = v105;
          *((_QWORD *)v111 + 3) = v27.i64[0];
          *((_DWORD *)v111 + 8) = v27.i32[2];
          if (v57 != v58)
            break;
          v114 = v57;
          v58 = &v110[4 * ((v57 - v58) >> 2)];
          v56 = (float32x2_t *)&v110[36 * v109];
          v57 = v111 + 36;
          if (v114)
            goto LABEL_101;
LABEL_102:
          v83 = (float32x2_t *)((char *)v83 + 12);
          ++v55;
          if (v83 == v43 && v55 == v275)
            goto LABEL_52;
        }
        v112 = &v110[4 * ((v57 - v58) >> 2)];
        do
        {
          v113 = *(_OWORD *)(v57 - 36);
          v39 = *(float64x2_t *)(v57 - 20);
          *((_DWORD *)v112 - 1) = *((_DWORD *)v57 - 1);
          *(float64x2_t *)(v112 - 20) = v39;
          *(_OWORD *)(v112 - 36) = v113;
          v112 -= 36;
          v57 -= 36;
        }
        while (v57 != v58);
        v114 = v58;
        v58 = v112;
        v56 = (float32x2_t *)&v110[36 * v109];
        v57 = v111 + 36;
        if (!v114)
          goto LABEL_102;
LABEL_101:
        operator delete(v114);
        goto LABEL_102;
      }
LABEL_52:
      v278 = v261;
      *(_QWORD *)&v279 = v43;
      *((_QWORD *)&v279 + 1) = v257;
      *(_QWORD *)&v280 = v58;
      *((_QWORD *)&v280 + 1) = v57;
      *(_QWORD *)&v281 = v56;
      if (*(_BYTE *)(v238 + 280))
      {
        v60 = *(char **)(v238 + 232);
        v59 = *(char **)(v238 + 240);
        v61 = 0xAAAAAAAAAAAAAAABLL * ((v59 - v60) >> 2) - 0x5555555555555555 * (v254 >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v238 + 248) - (_QWORD)v60) >> 2) < v61)
        {
          if (v61 > 0x1555555555555555)
LABEL_214:
            sub_22316E078();
          v62 = (char *)operator new(v59 - v60 + v254);
          v63 = &v62[4 * ((v59 - v60) >> 2)];
          v64 = v63;
          if (v59 != v60)
          {
            v64 = &v62[4 * ((v59 - v60) >> 2)];
            do
            {
              v65 = *(_QWORD *)(v59 - 12);
              v59 -= 12;
              v66 = *((_DWORD *)v59 + 2);
              *(_QWORD *)(v64 - 12) = v65;
              v64 -= 12;
              *((_DWORD *)v64 + 2) = v66;
            }
            while (v59 != v60);
          }
          *(_QWORD *)(v238 + 232) = v64;
          *(_QWORD *)(v238 + 240) = v63;
          *(_QWORD *)(v238 + 248) = &v62[12 * v61];
          if (v60)
            operator delete(v60);
        }
        if (v261 != v43)
        {
          v67 = *(char **)(v238 + 240);
          for (i = v261; i != v43; i = (float32x2_t *)((char *)i + 12))
          {
            v71 = *(_QWORD *)(v238 + 248);
            if ((unint64_t)v67 < v71)
            {
              v69 = *i;
              *((_DWORD *)v67 + 2) = i[1].i32[0];
              *(float32x2_t *)v67 = v69;
              v70 = v67 + 12;
            }
            else
            {
              v72 = *v35;
              v73 = 0xAAAAAAAAAAAAAAABLL * ((v67 - *v35) >> 2);
              v74 = v73 + 1;
              if (v73 + 1 > 0x1555555555555555)
                goto LABEL_214;
              v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - (_QWORD)v72) >> 2);
              if (2 * v75 > v74)
                v74 = 2 * v75;
              if (v75 >= 0xAAAAAAAAAAAAAAALL)
                v76 = 0x1555555555555555;
              else
                v76 = v74;
              if (v76)
              {
                if (v76 > 0x1555555555555555)
                  sub_223174E94();
                v77 = (char *)operator new(12 * v76);
              }
              else
              {
                v77 = 0;
              }
              v78 = *i;
              v79 = &v77[12 * v73];
              *((_DWORD *)v79 + 2) = i[1].i32[0];
              *(float32x2_t *)v79 = v78;
              v80 = v79;
              if (v67 != v72)
              {
                do
                {
                  v81 = *(_QWORD *)(v67 - 12);
                  v67 -= 12;
                  v82 = *((_DWORD *)v67 + 2);
                  *(_QWORD *)(v80 - 12) = v81;
                  v80 -= 12;
                  *((_DWORD *)v80 + 2) = v82;
                }
                while (v67 != v72);
                v67 = *v35;
              }
              v70 = v79 + 12;
              *(_QWORD *)(v238 + 232) = v80;
              *(_QWORD *)(v238 + 240) = v79 + 12;
              *(_QWORD *)(v238 + 248) = &v77[12 * v76];
              if (v67)
                operator delete(v67);
            }
            *(_QWORD *)(v238 + 240) = v70;
            v67 = v70;
          }
        }
        sub_22339D9C8((char **)(v238 + 256), (__int128 **)&v280);
        if (v58)
          operator delete(v58);
        if (v261)
          operator delete(v261);
      }
      else
      {
        *(_QWORD *)(v238 + 232) = v261;
        *(_QWORD *)(v238 + 240) = v43;
        *(_QWORD *)(v238 + 248) = v257;
        *(_QWORD *)(v238 + 256) = v58;
        *(_QWORD *)(v238 + 264) = v57;
        *(_QWORD *)(v238 + 272) = v56;
        *(_BYTE *)(v238 + 280) = 1;
      }
LABEL_108:
      v115 = *((_QWORD *)v5 + 7);
      v116 = *((_QWORD *)v5 + 8);
      if (v115 != v116)
      {
        v117 = (v116 - v115) >> 3;
        v118 = 0xAAAAAAAAAAAAAAABLL * v117;
        if (((-1431655765 * (_DWORD)v117) & 1) == 0
          && v118 == (uint64_t)(*((_QWORD *)v5 + 11) - *((_QWORD *)v5 + 10)) >> 3)
        {
          v119 = 0;
          v120 = 0;
          __p[0] = 0;
          __p[1] = 0;
          v289 = 0;
          if (v118 < 2)
            goto LABEL_112;
LABEL_117:
          if (v118 > 0x1555555555555555)
            sub_223323BA8();
          v120 = (float32x2_t *)operator new(24 * (v118 >> 1));
          v119 = &v120[3 * (v118 >> 1)];
          __p[0] = v120;
          __p[1] = v120;
          v289 = v119;
          v285 = 0;
          v286 = 0;
          v287 = 0;
          v125 = v118 & 0xFFFFFFFFFFFFFFFELL;
          if ((v118 & 0xFFFFFFFFFFFFFFFELL) == 0)
            goto LABEL_119;
          v121 = (char *)operator new(36 * v125);
          v122 = &v121[36 * v125];
          v285 = v121;
          v286 = v121;
          v287 = v122;
          v123 = v121;
          v124 = v120;
          if (v116 == v115)
            goto LABEL_176;
          goto LABEL_120;
        }
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/VioBundleProcessing.cpp", 129, (uint64_t)"line_points.size() == vergence_angle_cosines.size() && math::IsEven(line_points.size())", 87, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v115 = *((_QWORD *)v5 + 7);
        v116 = *((_QWORD *)v5 + 8);
        v118 = 0xAAAAAAAAAAAAAAABLL * ((v116 - v115) >> 3);
        v119 = 0;
        v120 = 0;
        __p[0] = 0;
        __p[1] = 0;
        v289 = 0;
        if (v118 >= 2)
          goto LABEL_117;
LABEL_112:
        v285 = 0;
        v286 = 0;
        v287 = 0;
LABEL_119:
        v122 = 0;
        v121 = 0;
        v123 = 0;
        v124 = v120;
        if (v116 != v115)
        {
LABEL_120:
          v126 = 0;
          while (1)
          {
            v127 = (float64x2_t *)(v115 + 24 * v126);
            v26.f64[0] = v127[1].f64[0];
            v128 = vcvt_f32_f64(*v127);
            v129 = vcvt_hight_f32_f64((int32x2_t)v128, v26);
            v130 = (float64x2_t *)(v115 + 24 * (v126 | 1));
            v39.f64[0] = v130[1].f64[0];
            v131 = *v130;
            *(float32x2_t *)&v131.f64[0] = vcvt_f32_f64(*v130);
            v273 = v39;
            *(float64x2_t *)v276 = v131;
            v132 = vcvt_hight_f32_f64(*(int32x2_t *)&v131.f64[0], v39);
            v133 = *((_QWORD *)v5 + 10);
            v134 = *(double *)(v133 + 8 * v126);
            v135 = *(float32x2_t *)(v133 + 8 * (v126 | 1));
            v271 = *(double *)&v135;
            v136 = v5[14];
            v137 = v5[15];
            *(double *)&v29 = v5[16];
            v138 = v5[18];
            v139 = v5[19];
            v140 = v5[20];
            v141 = v5[22];
            v142 = v5[23];
            v143 = v5[24];
            v144 = v5[28];
            v145 = __p[1];
            if (__p[1] >= v289)
            {
              v146 = __p[0];
              v147 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
              v148 = v147 + 1;
              if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_223323BA8();
              if (0x5555555555555556 * (((char *)v289 - (char *)__p[0]) >> 3) > v148)
                v148 = 0x5555555555555556 * (((char *)v289 - (char *)__p[0]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v289 - (char *)__p[0]) >> 3) >= 0x555555555555555)
                v149 = 0xAAAAAAAAAAAAAAALL;
              else
                v149 = v148;
              *(float64x2_t *)v262 = v26;
              v266 = v128;
              v258 = v5[14];
              v255 = *((_QWORD *)v5 + 16);
              if (v149)
              {
                v247 = v132;
                v249 = v129;
                v251 = v5[19];
                if (v149 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_210;
                v150 = (char *)operator new(24 * v149);
                v26 = *(float64x2_t *)v262;
                v128 = v266;
                v136 = v258;
                v139 = v251;
                *(_QWORD *)&v29 = v255;
                v132 = v247;
                v129 = v249;
              }
              else
              {
                v150 = 0;
              }
              v151 = &v150[24 * v147];
              *((_DWORD *)v151 + 2) = v129.i32[2];
              *(_QWORD *)v151 = v129.i64[0];
              *(_QWORD *)(v151 + 12) = v132.i64[0];
              *((_DWORD *)v151 + 5) = v132.i32[2];
              v152 = v151;
              if (v145 != v146)
              {
                do
                {
                  v153 = *(v145 - 3);
                  v145 -= 3;
                  v154 = *((_DWORD *)v145 + 2);
                  *((_QWORD *)v152 - 3) = v153;
                  v152 -= 24;
                  *((_DWORD *)v152 + 2) = v154;
                  v155 = *(_QWORD *)((char *)v145 + 12);
                  *((_DWORD *)v152 + 5) = *((_DWORD *)v145 + 5);
                  *(_QWORD *)(v152 + 12) = v155;
                }
                while (v145 != v146);
                v145 = v146;
              }
              v120 = (float32x2_t *)(v151 + 24);
              __p[0] = v152;
              __p[1] = v151 + 24;
              v289 = (float32x2_t *)&v150[24 * v149];
              if (v145)
              {
                v252 = v141;
                v156 = v139;
                operator delete(v145);
                *(_QWORD *)&v29 = v255;
                v139 = v156;
                v136 = v258;
                v141 = v252;
                v26 = *(float64x2_t *)v262;
                v128 = v266;
              }
            }
            else
            {
              *((_DWORD *)__p[1] + 2) = v129.i32[2];
              *v145 = v129.i64[0];
              *((_DWORD *)v145 + 5) = v132.i32[2];
              *(_QWORD *)((char *)v145 + 12) = v132.i64[0];
              v120 = (float32x2_t *)(v145 + 3);
            }
            v157 = vcvt_f32_f64(v26);
            *(float *)&v136 = v136;
            v158 = v137;
            *(float *)&v30 = *(double *)&v29;
            v159 = vdupq_lane_s32(*(int32x2_t *)&v30, 0);
            *(float *)v27.i32 = v138;
            *(float *)v26.f64 = v139;
            *(float *)&v29 = v140;
            v160 = v27;
            v160.i32[1] = LODWORD(v26.f64[0]);
            v161 = v160;
            v161.i32[2] = v29;
            *(float *)v39.f64 = v141;
            v135.f32[0] = v142;
            *(float *)&v31 = v143;
            v162 = v144;
            *(float *)v160.i32 = v158;
            v163 = v134;
            v164 = (float32x2_t)vzip2q_s32(v159, v161).u64[0];
            *(float32x2_t *)v161.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v30, v128), *(float32x2_t *)&v29, v128, 1), v157, *(float32x2_t *)&v31);
            v157.f32[0] = *(float *)v161.i32 + v162;
            *(float *)v161.i32 = sqrtf(1.0 - (float)(v163 * v163));
            *(float *)v161.i32 = (float)((float)(v157.f32[0] / (float)(*(float *)v161.i32 / v163)) * 0.0027273)
                               * (float)((float)(v157.f32[0] / (float)(*(float *)v161.i32 / v163)) * 0.0027273);
            v165 = vmla_f32(vmla_f32(vmul_f32((float32x2_t)__PAIR64__(v27.u32[0], LODWORD(v136)), v269), 0, *(float32x2_t *)v160.i8), 0, v164);
            v28.i32[0] = 897988541;
            v166 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&v39.f64[0], v28), 0, v135), 0, *(float32x2_t *)&v31);
            v167 = vmul_f32((float32x2_t)__PAIR64__(v27.u32[0], LODWORD(v136)), 0);
            v168 = vmla_f32(vmla_f32(v167, v269, *(float32x2_t *)v160.i8), 0, v164);
            v169 = vmul_f32(*(float32x2_t *)&v39.f64[0], 0);
            v170 = vmla_f32(vmla_f32(v169, v28, v135), 0, *(float32x2_t *)&v31);
            v171 = vmla_f32(v167, 0, *(float32x2_t *)v160.i8);
            v28 = vmla_n_f32(v171, v164, *(float *)v161.i32);
            v172 = vmla_f32(v169, 0, v135);
            v173 = vmla_f32(v172, *(float32x2_t *)v161.i8, *(float32x2_t *)&v31);
            v174 = vmla_n_f32(vmul_n_f32(v165, *(float *)&v136), v168, *(float *)v160.i32);
            *(float32x2_t *)&v175 = vmla_f32(v174, *(float32x2_t *)v159.i8, v28);
            *(float32x2_t *)&v32 = vmla_f32(vmul_f32(v166, *(float32x2_t *)&v136), *(float32x2_t *)v160.i8, v170);
            *((float32x2_t *)&v175 + 1) = vmla_f32(*(float32x2_t *)&v32, *(float32x2_t *)&v30, v173);
            v176 = vmla_n_f32(vmul_n_f32(v165, *(float *)v27.i32), v168, *(float *)v26.f64);
            *(float32x2_t *)&v177 = vmla_n_f32(v176, v28, *(float *)&v29);
            *(float32x2_t *)&v33 = vmla_f32(vmul_f32(v166, *(float32x2_t *)v27.i8), *(float32x2_t *)&v26.f64[0], v170);
            *((float32x2_t *)&v177 + 1) = vmla_f32(*(float32x2_t *)&v33, *(float32x2_t *)&v29, v173);
            v178 = vmla_n_f32(vmul_n_f32(v165, *(float *)v39.f64), v168, v135.f32[0]);
            *(float32x2_t *)&v26.f64[0] = vmla_n_f32(v178, v28, *(float *)&v31);
            v179 = vmla_f32(vmul_f32(v166, *(float32x2_t *)&v39.f64[0]), v135, v170);
            v180 = vmla_f32(v179, *(float32x2_t *)&v31, v173);
            *(float32x2_t *)&v26.f64[1] = v180;
            __p[1] = v120;
            v181 = v286;
            v122 = v287;
            if (v286 >= v287)
            {
              v183 = v285;
              v184 = 0x8E38E38E38E38E39 * ((v286 - v285) >> 2);
              v185 = v184 + 1;
              if (v184 + 1 > 0x71C71C71C71C71CLL)
                goto LABEL_209;
              if (0x1C71C71C71C71C72 * ((v287 - v285) >> 2) > v185)
                v185 = 0x1C71C71C71C71C72 * ((v287 - v285) >> 2);
              if (0x8E38E38E38E38E39 * ((v287 - v285) >> 2) >= 0x38E38E38E38E38ELL)
                v186 = 0x71C71C71C71C71CLL;
              else
                v186 = v185;
              v253 = v30;
              v256 = v29;
              v248 = v159.i64[0];
              v250 = v31;
              v263 = v176;
              v267 = v174;
              v259 = v178;
              v245 = v32;
              v246 = v164;
              v243 = v179;
              v244 = v33;
              if (v186)
              {
                v240 = v26;
                v241 = v177;
                v242 = v175;
                if (v186 > 0x71C71C71C71C71CLL)
                  goto LABEL_210;
                v187 = (char *)operator new(36 * v186);
                v30 = v253;
                v29 = v256;
                v159.i64[0] = v248;
                v31 = v250;
                v32 = v245;
                v164 = v246;
                v179 = v243;
                v33 = v244;
                v177 = v241;
                v175 = v242;
                v26 = v240;
              }
              else
              {
                v187 = 0;
              }
              v188 = &v187[36 * v184];
              *(_QWORD *)v188 = v175;
              *((_DWORD *)v188 + 2) = DWORD2(v175);
              *((_DWORD *)v188 + 5) = DWORD2(v177);
              *(_QWORD *)(v188 + 12) = v177;
              *((_QWORD *)v188 + 3) = *(_QWORD *)&v26.f64[0];
              *((_DWORD *)v188 + 8) = LODWORD(v26.f64[1]);
              v189 = v188;
              if (v181 != (_QWORD *)v183)
              {
                do
                {
                  v190 = *(_OWORD *)((char *)v181 - 36);
                  v39 = *(float64x2_t *)((char *)v181 - 20);
                  *((_DWORD *)v189 - 1) = *((_DWORD *)v181 - 1);
                  *(float64x2_t *)(v189 - 20) = v39;
                  *(_OWORD *)(v189 - 36) = v190;
                  v189 -= 36;
                  v181 = (_QWORD *)((char *)v181 - 36);
                }
                while (v181 != (_QWORD *)v183);
                v181 = v183;
              }
              v122 = &v187[36 * v186];
              v182 = v188 + 36;
              v285 = v189;
              v287 = v122;
              if (v181)
              {
                operator delete(v181);
                v179 = v243;
                v33 = v244;
                v32 = v245;
                v164 = v246;
                v159.i64[0] = v248;
                v31 = v250;
                v30 = v253;
                v29 = v256;
              }
              v176 = v263;
              v174 = v267;
              v178 = v259;
            }
            else
            {
              *((_DWORD *)v286 + 2) = DWORD2(v175);
              *v181 = v175;
              *((_DWORD *)v181 + 5) = DWORD2(v177);
              *(_QWORD *)((char *)v181 + 12) = v177;
              *((_DWORD *)v181 + 8) = v180.i32[0];
              v182 = (char *)v181 + 36;
              v181[3] = *(_QWORD *)&v26.f64[0];
            }
            v27 = *(int32x4_t *)v276;
            v191 = vcvt_f32_f64(v273);
            v192 = v271;
            v191.f32[0] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v30, (float32x2_t)v276[0]), *(float32x2_t *)&v29, (float32x2_t)v276[0], 1), v191, *(float32x2_t *)&v31).f32[0]+ v162;
            v193 = sqrtf(1.0 - (float)(v192 * v192)) / v192;
            v191.f32[0] = (float)((float)(v191.f32[0] / v193) * 0.0027273)
                        * (float)((float)(v191.f32[0] / v193) * 0.0027273);
            v194 = vmla_n_f32(v171, v164, v191.f32[0]);
            v195 = vmla_f32(v172, v191, *(float32x2_t *)&v31);
            *(float32x2_t *)&v197 = vmla_f32(v174, *(float32x2_t *)v159.i8, v194);
            v196 = vmla_f32(*(float32x2_t *)&v32, *(float32x2_t *)&v30, v195);
            *((float32x2_t *)&v197 + 1) = v196;
            *(float32x2_t *)&v199 = vmla_n_f32(v176, v194, *(float *)&v29);
            v198 = vmla_f32(*(float32x2_t *)&v33, *(float32x2_t *)&v29, v195);
            *((float32x2_t *)&v199 + 1) = v198;
            *(float32x2_t *)&v201 = vmla_n_f32(v178, v194, *(float *)&v31);
            v200 = vmla_f32(v179, *(float32x2_t *)&v31, v195);
            *((float32x2_t *)&v201 + 1) = v200;
            v286 = v182;
            if (v182 < v122)
            {
              *((_DWORD *)v182 + 2) = v196.i32[0];
              *(_QWORD *)v182 = v197;
              *((_DWORD *)v182 + 5) = v198.i32[0];
              *(_QWORD *)(v182 + 12) = v199;
              *((_DWORD *)v182 + 8) = v200.i32[0];
              v121 = v182 + 36;
              *((_QWORD *)v182 + 3) = v201;
            }
            else
            {
              v202 = v285;
              v203 = 0x8E38E38E38E38E39 * ((v182 - v285) >> 2);
              v204 = v203 + 1;
              if (v203 + 1 > 0x71C71C71C71C71CLL)
LABEL_209:
                sub_22316E078();
              if (0x1C71C71C71C71C72 * ((v122 - v285) >> 2) > v204)
                v204 = 0x1C71C71C71C71C72 * ((v122 - v285) >> 2);
              if (0x8E38E38E38E38E39 * ((v122 - v285) >> 2) >= 0x38E38E38E38E38ELL)
                v205 = 0x71C71C71C71C71CLL;
              else
                v205 = v204;
              if (v205)
              {
                if (v205 > 0x71C71C71C71C71CLL)
LABEL_210:
                  sub_223174E94();
                v260 = v201;
                *(_OWORD *)v264 = v199;
                v268 = v197;
                v206 = (char *)operator new(36 * v205);
                v199 = *(_OWORD *)v264;
                v197 = v268;
                v201 = v260;
              }
              else
              {
                v206 = 0;
              }
              v207 = &v206[36 * v203];
              *((_DWORD *)v207 + 2) = DWORD2(v197);
              *(_QWORD *)v207 = v197;
              v122 = &v206[36 * v205];
              *(_QWORD *)(v207 + 12) = v199;
              *((_DWORD *)v207 + 5) = DWORD2(v199);
              *((_QWORD *)v207 + 3) = v201;
              *((_DWORD *)v207 + 8) = DWORD2(v201);
              v121 = v207 + 36;
              if (v182 == v202)
              {
                v285 = &v206[36 * v203];
                v287 = v122;
                v202 = v182;
              }
              else
              {
                do
                {
                  v208 = *(_OWORD *)(v182 - 36);
                  v39 = *(float64x2_t *)(v182 - 20);
                  *((_DWORD *)v207 - 1) = *((_DWORD *)v182 - 1);
                  *(float64x2_t *)(v207 - 20) = v39;
                  *(_OWORD *)(v207 - 36) = v208;
                  v207 -= 36;
                  v182 -= 36;
                }
                while (v182 != v202);
                v285 = v207;
                v287 = v122;
                if (!v202)
                  goto LABEL_122;
              }
              operator delete(v202);
            }
LABEL_122:
            v286 = v121;
            v126 += 2;
            v115 = *((_QWORD *)v5 + 7);
            if (v126 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v5 + 8) - v115) >> 3))
            {
              v124 = (float32x2_t *)__p[0];
              v119 = v289;
              v123 = v285;
              break;
            }
          }
        }
LABEL_176:
        v278 = v124;
        *(_QWORD *)&v279 = v120;
        *((_QWORD *)&v279 + 1) = v119;
        *(_QWORD *)&v280 = v123;
        *((_QWORD *)&v280 + 1) = v121;
        *(_QWORD *)&v281 = v122;
        if (*(_BYTE *)(v238 + 336))
        {
          v277 = v123;
          v210 = *(void **)(v238 + 288);
          v209 = *(_QWORD *)(v238 + 296);
          v211 = 0xAAAAAAAAAAAAAAABLL * ((v209 - (uint64_t)v210) >> 3) - 0x5555555555555555 * (v120 - v124);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v238 + 304) - (_QWORD)v210) >> 3) < v211)
          {
            if (v211 > 0xAAAAAAAAAAAAAAALL)
LABEL_215:
              sub_223323BA8();
            v212 = (char *)operator new(v209 - (_QWORD)v210 + (char *)v120 - (char *)v124);
            v213 = &v212[8 * ((v209 - (uint64_t)v210) >> 3)];
            v214 = v213;
            if ((void *)v209 != v210)
            {
              v214 = &v212[8 * ((v209 - (uint64_t)v210) >> 3)];
              do
              {
                v215 = *(_QWORD *)(v209 - 24);
                v209 -= 24;
                v216 = *(_DWORD *)(v209 + 8);
                *((_QWORD *)v214 - 3) = v215;
                v214 -= 24;
                *((_DWORD *)v214 + 2) = v216;
                v217 = *(_QWORD *)(v209 + 12);
                *((_DWORD *)v214 + 5) = *(_DWORD *)(v209 + 20);
                *(_QWORD *)(v214 + 12) = v217;
              }
              while ((void *)v209 != v210);
            }
            *(_QWORD *)(v238 + 288) = v214;
            *(_QWORD *)(v238 + 296) = v213;
            *(_QWORD *)(v238 + 304) = &v212[24 * v211];
            if (v210)
              operator delete(v210);
          }
          if (v124 != v120)
          {
            v218 = *(char **)(v238 + 296);
            for (j = v124; j != v120; j += 3)
            {
              v223 = *(_QWORD *)(v238 + 304);
              if ((unint64_t)v218 < v223)
              {
                v220 = *j;
                *((_DWORD *)v218 + 2) = j[1].i32[0];
                *(float32x2_t *)v218 = v220;
                v221 = *(uint64_t *)((char *)&j[1] + 4);
                *((_DWORD *)v218 + 5) = j[2].i32[1];
                *(_QWORD *)(v218 + 12) = v221;
                v222 = v218 + 24;
              }
              else
              {
                v224 = (char *)*v239;
                v225 = 0xAAAAAAAAAAAAAAABLL * ((v218 - (_BYTE *)*v239) >> 3);
                v226 = v225 + 1;
                if (v225 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_215;
                v227 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v223 - (_QWORD)v224) >> 3);
                if (2 * v227 > v226)
                  v226 = 2 * v227;
                if (v227 >= 0x555555555555555)
                  v228 = 0xAAAAAAAAAAAAAAALL;
                else
                  v228 = v226;
                if (v228)
                {
                  if (v228 > 0xAAAAAAAAAAAAAAALL)
                    sub_223174E94();
                  v229 = (char *)operator new(24 * v228);
                }
                else
                {
                  v229 = 0;
                }
                v230 = &v229[24 * v225];
                v231 = *j;
                *((_DWORD *)v230 + 2) = j[1].i32[0];
                *(float32x2_t *)v230 = v231;
                v232 = *(uint64_t *)((char *)&j[1] + 4);
                *((_DWORD *)v230 + 5) = j[2].i32[1];
                *(_QWORD *)(v230 + 12) = v232;
                v233 = v230;
                if (v218 != v224)
                {
                  do
                  {
                    v234 = *((_QWORD *)v218 - 3);
                    v218 -= 24;
                    v235 = *((_DWORD *)v218 + 2);
                    *((_QWORD *)v233 - 3) = v234;
                    v233 -= 24;
                    *((_DWORD *)v233 + 2) = v235;
                    v236 = *(_QWORD *)(v218 + 12);
                    *((_DWORD *)v233 + 5) = *((_DWORD *)v218 + 5);
                    *(_QWORD *)(v233 + 12) = v236;
                  }
                  while (v218 != v224);
                  v218 = (char *)*v239;
                }
                v222 = v230 + 24;
                *(_QWORD *)(v238 + 288) = v233;
                *(_QWORD *)(v238 + 296) = v230 + 24;
                *(_QWORD *)(v238 + 304) = &v229[24 * v228];
                if (v218)
                  operator delete(v218);
              }
              *(_QWORD *)(v238 + 296) = v222;
              v218 = v222;
            }
          }
          sub_22339D9C8((char **)(v238 + 312), (__int128 **)&v280);
          if (v277)
            operator delete(v277);
          if (v124)
            operator delete(v124);
        }
        else
        {
          *(_QWORD *)(v238 + 288) = v124;
          *(_QWORD *)(v238 + 296) = v120;
          *(_QWORD *)(v238 + 304) = v119;
          *(_QWORD *)(v238 + 312) = v123;
          *(_QWORD *)(v238 + 320) = v121;
          *(_QWORD *)(v238 + 328) = v122;
          *(_BYTE *)(v238 + 336) = 1;
        }
      }
      v5 += 30;
    }
    while (v5 != v237);
  }
}

void sub_22339C990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_223340138(a14);
  _Unwind_Resume(a1);
}

void sub_22339C9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_223340138(a14);
  _Unwind_Resume(a1);
}

void sub_22339C9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  sub_223340138(a14);
  _Unwind_Resume(a1);
}

void sub_22339CA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_223340138(a14);
  _Unwind_Resume(a1);
}

void sub_22339CA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  sub_223340138(a14);
  _Unwind_Resume(a1);
}

void sub_22339CB38(_QWORD *a1, double a2)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  double v13;
  double *v14;
  double *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v55;
  char **v56;
  char *v57;
  double *v58;
  char *v59;
  char *v60;

  v5 = a1 + 3;
  v4 = a1[3];
  v6 = (char *)*a1;
  v7 = (char *)a1[1];
  v8 = (int64_t)&v7[-*a1];
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  if (v9 != (a1[4] - v4) >> 3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/VioBundleProcessing.cpp", 155, (uint64_t)"points.size() == vergence_angle_cosines.size()", 46, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = (char *)*a1;
    v7 = (char *)a1[1];
    v8 = (int64_t)&v7[-*a1];
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  }
  if (v7 == v6)
  {
    v11 = 0;
    v10 = 0;
    v12 = 0;
    v60 = 0;
  }
  else
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v10 = (char *)operator new(v8);
    v11 = (char *)operator new(8 * v9);
    v60 = &v11[8 * v9];
    v12 = &v10[24 * v9];
  }
  v55 = v5;
  v13 = cos(a2 * 0.0174532925);
  v14 = (double *)a1[3];
  v15 = (double *)a1[4];
  v56 = (char **)a1;
  v57 = v7;
  v58 = v15;
  v16 = v11;
  if (v6 != v7)
  {
    v19 = v11;
    v18 = v10;
    v17 = v11;
    while (1)
    {
LABEL_60:
      while (*v14 > v13)
      {
LABEL_64:
        v6 += 24;
        ++v14;
        if (v6 == v7)
          goto LABEL_65;
      }
      if (v10 >= v12)
        break;
      v54 = *(_OWORD *)v6;
      *((_QWORD *)v10 + 2) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v10 = v54;
      v10 += 24;
      v34 = v60;
      if (v19 < v60)
      {
LABEL_63:
        *(double *)v19 = *v14;
        v19 += 8;
        goto LABEL_64;
      }
LABEL_32:
      v59 = v12;
      v35 = (v19 - v17) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        sub_22316E078();
      v37 = v34 - v17;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 61)
LABEL_68:
          sub_223174E94();
        v39 = operator new(8 * v38);
        v40 = &v39[8 * v35];
        *(double *)v40 = *v14;
        v41 = (uint64_t)(v40 + 8);
        v42 = v19 - v17;
        if (v19 != v17)
        {
LABEL_41:
          v43 = v42 - 8;
          if (v43 < 0x168
            || (v47 = (v19 - 8 - v17) & 0xFFFFFFFFFFFFFFF8, &v39[v19 - v17 - 8 - v47] > &v39[v19 - v17 - 8])
            || &v19[-v47 - 8] > v19 - 8
            || (unint64_t)(v17 - v39) < 0x20)
          {
            v44 = v19;
            v15 = v58;
          }
          else
          {
            v48 = (v43 >> 3) + 1;
            v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
            v44 = &v19[-v49];
            v40 -= v49;
            v50 = &v39[8 * v35 - 16];
            v51 = v19 - 16;
            v52 = v48 & 0x3FFFFFFFFFFFFFFCLL;
            v15 = v58;
            do
            {
              v53 = *(_OWORD *)v51;
              *(v50 - 1) = *((_OWORD *)v51 - 1);
              *v50 = v53;
              v50 -= 2;
              v51 -= 32;
              v52 -= 4;
            }
            while (v52);
            if (v48 == (v48 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_44:
              v60 = &v39[8 * v38];
              if (!v17)
                goto LABEL_48;
              goto LABEL_45;
            }
          }
          do
          {
            v45 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v40 - 1) = v45;
            v40 -= 8;
          }
          while (v44 != v17);
          goto LABEL_44;
        }
      }
      else
      {
        v39 = 0;
        v40 = (char *)(8 * v35);
        *(double *)(8 * v35) = *v14;
        v41 = 8 * v35 + 8;
        v42 = v19 - v17;
        if (v19 != v17)
          goto LABEL_41;
      }
      v15 = v58;
      v60 = &v39[8 * v38];
      if (!v17)
      {
LABEL_48:
        v19 = (char *)v41;
        goto LABEL_49;
      }
LABEL_45:
      v46 = (char *)v41;
      operator delete(v17);
      v19 = v46;
LABEL_49:
      v17 = v40;
      v7 = v57;
      v12 = v59;
      v6 += 24;
      ++v14;
      if (v6 == v57)
      {
LABEL_65:
        if (v14 == v15)
        {
          v6 = *v56;
          v16 = v19;
          v20 = v12;
          v21 = v56;
          if (!*v56)
            goto LABEL_12;
LABEL_11:
          v21[1] = v6;
          v22 = v6;
          v23 = v16;
          operator delete(v22);
          v16 = v23;
          *v21 = 0;
          v21[1] = 0;
          v21[2] = 0;
          goto LABEL_12;
        }
      }
    }
    v26 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v18) >> 3) + 1;
    if (v26 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    if (0x5555555555555556 * ((v12 - v18) >> 3) > v26)
      v26 = 0x5555555555555556 * ((v12 - v18) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v12 - v18) >> 3) >= 0x555555555555555)
      v27 = 0xAAAAAAAAAAAAAAALL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_68;
      v28 = (char *)operator new(24 * v27);
      v15 = v58;
    }
    else
    {
      v28 = 0;
    }
    v29 = *(_OWORD *)v6;
    v30 = &v28[8 * ((v10 - v18) >> 3)];
    *((_QWORD *)v30 + 2) = *((_QWORD *)v6 + 2);
    *(_OWORD *)v30 = v29;
    if (v10 == v18)
    {
      v32 = &v28[8 * ((v10 - v18) >> 3)];
      v12 = &v28[24 * v27];
      v10 = v30 + 24;
      if (v18)
LABEL_30:
        operator delete(v18);
    }
    else
    {
      v31 = &v28[8 * ((v10 - v18) >> 3)];
      do
      {
        v32 = v31 - 24;
        v33 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v31 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v31 - 24) = v33;
        v10 -= 24;
        v31 -= 24;
      }
      while (v10 != v18);
      v12 = &v28[24 * v27];
      v10 = v30 + 24;
      if (v18)
        goto LABEL_30;
    }
    v18 = v32;
    v34 = v60;
    if (v19 < v60)
      goto LABEL_63;
    goto LABEL_32;
  }
  v17 = v11;
  v18 = v10;
  v19 = v11;
  if (v14 != v15)
    goto LABEL_60;
  v20 = v12;
  v21 = v56;
  if (v6)
    goto LABEL_11;
LABEL_12:
  *v21 = v18;
  v21[1] = v10;
  v21[2] = v20;
  v24 = v21[3];
  if (v24)
  {
    v21[4] = v24;
    v25 = v16;
    operator delete(v24);
    v16 = v25;
    *v55 = 0;
    v55[1] = 0;
    v55[2] = 0;
  }
  v21[3] = v17;
  v21[4] = v16;
  v21[5] = v60;
}

void sub_22339D0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22339D0F4(_QWORD *a1, double a2)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  _BYTE *v7;
  int64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  long double v13;
  char *v14;
  double v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void **v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  __int128 v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  uint64_t v87;
  void **v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  char *v93;

  v5 = a1 + 3;
  v4 = a1[3];
  v6 = (char *)*a1;
  v7 = (_BYTE *)a1[1];
  v8 = (int64_t)&v7[-*a1];
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  v88 = (void **)a1;
  if ((v9 & 1) != 0 || v9 != (a1[4] - v4) >> 3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/VioBundleProcessing.cpp", 175, (uint64_t)"line_points.size() == vergence_angle_cosines.size() && line_points.size() % 2 == 0", 82, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = (char *)*v88;
    v7 = v88[1];
    v8 = v7 - (_BYTE *)*v88;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    if (v7 != *v88)
      goto LABEL_4;
  }
  else if (v7 != v6)
  {
LABEL_4:
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v10 = (char *)operator new(v8);
    v92 = (unint64_t)&v10[24 * v9];
    v11 = (char *)operator new(8 * v9);
    v91 = &v11[8 * v9];
    v12 = v11;
    v13 = cos(a2 * 0.0174532925);
    v14 = v12;
    v15 = v13;
    v16 = 0;
    v17 = v10;
    v18 = v10;
    v19 = v12;
    v20 = v88;
    v89 = v5;
    while (1)
    {
      if (*(double *)(*v5 + 8 * v16) <= v15)
      {
        v22 = v16 | 1;
        if (*(double *)(*v5 + 8 * (v16 | 1)) <= v15)
          break;
      }
      v21 = v10;
LABEL_7:
      v16 += 2;
      v10 = v21;
      if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3))
      {
        v82 = v92;
        v93 = v91;
        if (v6)
          goto LABEL_101;
        goto LABEL_102;
      }
    }
    v23 = &v6[24 * v16];
    v24 = (char *)v92;
    v90 = v14;
    if ((unint64_t)v17 < v92)
    {
      v25 = *(_OWORD *)v23;
      *((_QWORD *)v17 + 2) = *((_QWORD *)v23 + 2);
      *(_OWORD *)v17 = v25;
      v26 = v17 + 24;
      v27 = (uint64_t)*v20 + 24 * v22;
      v87 = v16 | 1;
      if ((unint64_t)(v17 + 24) < v92)
        goto LABEL_12;
      goto LABEL_31;
    }
    v32 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3) + 1;
    if (v32 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_110;
    if (0x5555555555555556 * ((uint64_t)(v92 - (_QWORD)v18) >> 3) > v32)
      v32 = 0x5555555555555556 * ((uint64_t)(v92 - (_QWORD)v18) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v92 - (_QWORD)v18) >> 3) >= 0x555555555555555)
      v33 = 0xAAAAAAAAAAAAAAALL;
    else
      v33 = v32;
    if (v33)
    {
      if (v33 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_112;
      v34 = (char *)operator new(24 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = *(_OWORD *)v23;
    v36 = &v34[8 * ((v17 - v18) >> 3)];
    *((_QWORD *)v36 + 2) = *((_QWORD *)v23 + 2);
    *(_OWORD *)v36 = v35;
    if (v17 == v18)
    {
      v38 = &v34[8 * ((v17 - v18) >> 3)];
      v24 = &v34[24 * v33];
      v26 = v36 + 24;
      if (v18)
LABEL_29:
        operator delete(v18);
    }
    else
    {
      v37 = &v34[8 * ((v17 - v18) >> 3)];
      do
      {
        v38 = v37 - 24;
        v39 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v37 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v37 - 24) = v39;
        v17 -= 24;
        v37 -= 24;
      }
      while (v17 != v18);
      v24 = &v34[24 * v33];
      v26 = v36 + 24;
      if (v18)
        goto LABEL_29;
    }
    v18 = v38;
    v14 = v90;
    v27 = (uint64_t)*v88 + 24 * v22;
    v87 = v16 | 1;
    if (v26 < v24)
    {
LABEL_12:
      v28 = *(_OWORD *)v27;
      *((_QWORD *)v26 + 2) = *(_QWORD *)(v27 + 16);
      *(_OWORD *)v26 = v28;
      v21 = v26 + 24;
      v5 = v89;
      v29 = (unint64_t)v91;
      v30 = *v89;
      v92 = (unint64_t)v24;
      if (v14 < v91)
        goto LABEL_13;
      goto LABEL_46;
    }
LABEL_31:
    v40 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v18) >> 3) + 1;
    if (v40 > 0xAAAAAAAAAAAAAAALL)
LABEL_110:
      sub_22316E078();
    if (0x5555555555555556 * ((v24 - v18) >> 3) > v40)
      v40 = 0x5555555555555556 * ((v24 - v18) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v24 - v18) >> 3) >= 0x555555555555555)
      v41 = 0xAAAAAAAAAAAAAAALL;
    else
      v41 = v40;
    if (v41)
    {
      if (v41 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_112;
      v42 = (char *)operator new(24 * v41);
      v14 = v90;
    }
    else
    {
      v42 = 0;
    }
    v43 = &v42[8 * ((v26 - v18) >> 3)];
    v44 = *(_OWORD *)v27;
    v45 = &v42[24 * v41];
    *((_QWORD *)v43 + 2) = *(_QWORD *)(v27 + 16);
    *(_OWORD *)v43 = v44;
    v21 = v43 + 24;
    if (v26 == v18)
      goto LABEL_44;
    do
    {
      v46 = *(_OWORD *)(v26 - 24);
      *((_QWORD *)v43 - 1) = *((_QWORD *)v26 - 1);
      *(_OWORD *)(v43 - 24) = v46;
      v43 -= 24;
      v26 -= 24;
    }
    while (v26 != v18);
    if (v18)
    {
LABEL_44:
      operator delete(v18);
      v14 = v90;
    }
    v18 = v43;
    v5 = v89;
    v29 = (unint64_t)v91;
    v30 = *v89;
    v92 = (unint64_t)v45;
    if (v14 < v91)
    {
LABEL_13:
      *(_QWORD *)v14 = *(_QWORD *)(v30 + 8 * v16);
      v31 = v14 + 8;
      if ((unint64_t)(v14 + 8) < v29)
      {
LABEL_14:
        v91 = (char *)v29;
        v20 = v88;
        *(_QWORD *)v31 = *(_QWORD *)(v30 + 8 * v87);
        v14 = v31 + 8;
LABEL_83:
        v6 = (char *)*v20;
        v7 = v20[1];
        v17 = v21;
        goto LABEL_7;
      }
LABEL_61:
      v58 = (v31 - v19) >> 3;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 61)
LABEL_111:
        sub_22316E078();
      if ((uint64_t)(v29 - (_QWORD)v19) >> 2 > v59)
        v59 = (uint64_t)(v29 - (_QWORD)v19) >> 2;
      if (v29 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v59;
      if (v60)
      {
        if (v60 >> 61)
LABEL_112:
          sub_223174E94();
        v61 = operator new(8 * v60);
      }
      else
      {
        v61 = 0;
      }
      v62 = &v61[8 * v58];
      *(_QWORD *)v62 = *(_QWORD *)(v30 + 8 * v87);
      v14 = v62 + 8;
      if (v31 == v19)
      {
        v20 = v88;
        v5 = v89;
        v91 = &v61[8 * v60];
        if (!v19)
          goto LABEL_82;
        goto LABEL_81;
      }
      v63 = v31 - v19 - 8;
      if (v63 < 0x168
        || (v75 = (v31 - 8 - v19) & 0xFFFFFFFFFFFFFFF8, &v61[v31 - v19 - 8 - v75] > &v61[v31 - v19 - 8])
        || &v31[-v75 - 8] > v31 - 8
        || (unint64_t)(v19 - v61) < 0x20)
      {
        v64 = v31;
        v20 = v88;
        v5 = v89;
      }
      else
      {
        v76 = (v63 >> 3) + 1;
        v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        v64 = &v31[-v77];
        v62 -= v77;
        v78 = &v61[8 * v58 - 16];
        v79 = (__int128 *)(v31 - 16);
        v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        v20 = v88;
        do
        {
          v81 = *v79;
          *(v78 - 1) = *(v79 - 1);
          *v78 = v81;
          v78 -= 2;
          v79 -= 2;
          v80 -= 4;
        }
        while (v80);
        v5 = v89;
        if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_80:
          v91 = &v61[8 * v60];
          if (!v19)
          {
LABEL_82:
            v19 = v62;
            goto LABEL_83;
          }
LABEL_81:
          v66 = v19;
          v67 = v14;
          operator delete(v66);
          v14 = v67;
          goto LABEL_82;
        }
      }
      do
      {
        v65 = *((_QWORD *)v64 - 1);
        v64 -= 8;
        *((_QWORD *)v62 - 1) = v65;
        v62 -= 8;
      }
      while (v64 != v19);
      goto LABEL_80;
    }
LABEL_46:
    v47 = v14 - v19;
    v48 = (v14 - v19) >> 3;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 61)
      goto LABEL_111;
    if ((uint64_t)(v29 - (_QWORD)v19) >> 2 > v49)
      v49 = (uint64_t)(v29 - (_QWORD)v19) >> 2;
    if (v29 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    if (v50)
    {
      if (v50 >> 61)
        goto LABEL_112;
      v51 = operator new(8 * v50);
      v14 = v90;
      v52 = &v51[8 * v48];
      *(_QWORD *)v52 = *(_QWORD *)(v30 + 8 * v16);
      v31 = v52 + 8;
      v53 = v90 - v19;
      if (v90 != v19)
      {
LABEL_55:
        v54 = v53 - 8;
        if (v54 < 0x168
          || (v68 = (v14 - 8 - v19) & 0xFFFFFFFFFFFFFFF8, &v51[v47 - 8 - v68] > &v51[v47 - 8])
          || &v14[-v68 - 8] > v14 - 8
          || (unint64_t)(v14 - v51 - v47) < 0x20)
        {
          v55 = v14;
          v5 = v89;
        }
        else
        {
          v69 = (v54 >> 3) + 1;
          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          v55 = &v14[-v70];
          v52 -= v70;
          v71 = &v51[8 * v48 - 16];
          v72 = (__int128 *)(v14 - 16);
          v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74 = *v72;
            *(v71 - 1) = *(v72 - 1);
            *v71 = v74;
            v71 -= 2;
            v72 -= 2;
            v73 -= 4;
          }
          while (v73);
          v5 = v89;
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_58:
            v57 = &v51[8 * v50];
            if (!v19)
              goto LABEL_60;
            goto LABEL_59;
          }
        }
        do
        {
          v56 = *((_QWORD *)v55 - 1);
          v55 -= 8;
          *((_QWORD *)v52 - 1) = v56;
          v52 -= 8;
        }
        while (v55 != v19);
        goto LABEL_58;
      }
    }
    else
    {
      v51 = 0;
      v52 = (char *)(8 * v48);
      *(_QWORD *)(8 * v48) = *(_QWORD *)(v30 + 8 * v16);
      v31 = (char *)(8 * v48 + 8);
      v53 = v14 - v19;
      if (v14 != v19)
        goto LABEL_55;
    }
    v5 = v89;
    v57 = &v51[8 * v50];
    if (!v19)
    {
LABEL_60:
      v19 = v52;
      v29 = (unint64_t)v57;
      if (v31 < v57)
        goto LABEL_14;
      goto LABEL_61;
    }
LABEL_59:
    operator delete(v19);
    v30 = *v5;
    goto LABEL_60;
  }
  v14 = 0;
  v17 = 0;
  v19 = 0;
  v18 = 0;
  v82 = 0;
  v93 = 0;
  v20 = v88;
  if (v6)
  {
LABEL_101:
    v20[1] = v6;
    v83 = v6;
    v84 = v14;
    operator delete(v83);
    v14 = v84;
    *v20 = 0;
    v20[1] = 0;
    v20[2] = 0;
  }
LABEL_102:
  *v20 = v18;
  v20[1] = v17;
  v20[2] = (void *)v82;
  v85 = v20[3];
  if (v85)
  {
    v20[4] = v85;
    v86 = v14;
    operator delete(v85);
    v14 = v86;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  v20[3] = v19;
  v20[4] = v14;
  v20[5] = v93;
}

void sub_22339D970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_22339D9C8(char **a1, __int128 **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  v4 = *a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  v7 = 0x8E38E38E38E38E39 * (v6 >> 2);
  v8 = (char *)a2[1] - (char *)*a2;
  v9 = v7 - 0x71C71C71C71C71C7 * (v8 >> 2);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 2) < v9)
  {
    if (v9 > 0x71C71C71C71C71CLL)
LABEL_29:
      sub_22316E078();
    v10 = (char *)operator new(v8 + v6);
    v11 = &v10[36 * v7];
    if (v5 != v4)
    {
      v12 = &v10[36 * v7];
      do
      {
        v11 = v12 - 36;
        v13 = *(_OWORD *)(v5 - 36);
        v14 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v12 - 20) = v14;
        *(_OWORD *)(v12 - 36) = v13;
        v5 -= 36;
        v12 -= 36;
      }
      while (v5 != v4);
    }
    *a1 = v11;
    a1[1] = &v10[36 * v7];
    a1[2] = &v10[36 * v9];
    if (v4)
      operator delete(v4);
  }
  v15 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    v17 = a1[1];
    do
    {
      v21 = (unint64_t)a1[2];
      if ((unint64_t)v17 < v21)
      {
        v18 = *v15;
        v19 = v15[1];
        *((_DWORD *)v17 + 8) = *((_DWORD *)v15 + 8);
        *(_OWORD *)v17 = v18;
        *((_OWORD *)v17 + 1) = v19;
        v20 = v17 + 36;
      }
      else
      {
        v22 = *a1;
        v23 = 0x8E38E38E38E38E39 * ((v17 - *a1) >> 2);
        v24 = v23 + 1;
        if (v23 + 1 > 0x71C71C71C71C71CLL)
          goto LABEL_29;
        v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v21 - (_QWORD)v22) >> 2);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x38E38E38E38E38ELL)
          v26 = 0x71C71C71C71C71CLL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 > 0x71C71C71C71C71CLL)
            sub_223174E94();
          v27 = (char *)operator new(36 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[36 * v23];
        v29 = *v15;
        v30 = v15[1];
        *((_DWORD *)v28 + 8) = *((_DWORD *)v15 + 8);
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
        v31 = v28;
        if (v17 != v22)
        {
          do
          {
            v32 = *(_OWORD *)(v17 - 36);
            v33 = *(_OWORD *)(v17 - 20);
            *((_DWORD *)v31 - 1) = *((_DWORD *)v17 - 1);
            *(_OWORD *)(v31 - 20) = v33;
            *(_OWORD *)(v31 - 36) = v32;
            v31 -= 36;
            v17 -= 36;
          }
          while (v17 != v22);
          v17 = *a1;
        }
        v20 = v28 + 36;
        *a1 = v31;
        a1[1] = v28 + 36;
        a1[2] = &v27[36 * v26];
        if (v17)
          operator delete(v17);
      }
      a1[1] = v20;
      v15 = (__int128 *)((char *)v15 + 36);
      v17 = v20;
    }
    while (v15 != v16);
  }
}

char ***sub_22339DC14(char ***a1, uint64_t *a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v9 = *v4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 2);
    v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555)
      sub_22316E078();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v9) >> 2);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAAALL)
      v13 = 0x1555555555555555;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0x1555555555555555)
        sub_223174E94();
      v14 = (char *)operator new(12 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[12 * v10];
    *(_QWORD *)v15 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    v8 = v15 + 12;
    if (v6 != v9)
    {
      do
      {
        v16 = *(_QWORD *)(v6 - 12);
        v6 -= 12;
        v17 = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v6 != v9);
      v6 = *v4;
    }
    *v4 = v15;
    v4[1] = v8;
    v4[2] = &v14[12 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    v7 = *a2;
    *((_DWORD *)v6 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v6 = v7;
    v8 = v6 + 12;
  }
  v4[1] = v8;
  return a1;
}

double sub_22339DD54(uint64_t a1, float32x2_t *a2)
{
  float32x4_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unint64_t v17;
  _BYTE *v18;
  float32x4_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  double result;
  float32x2_t v54;
  float32x2_t *v55;
  unint64_t *v56;
  float32x2_t *v57;
  int v58;
  int v59;
  int v60;
  float32x4_t v61;
  float32x4_t v62;
  _QWORD **v63;
  __int32 v64;
  _BYTE v65[24];
  float32x2_t v66;
  _QWORD **v67;
  _QWORD *v68;
  int v69;

  sub_2241498F4(a1, 0);
  if (a2[52].i8[0])
  {
    sub_22339E3C8(a1, (uint64_t)(*(_QWORD *)&a2[50] - *(_QWORD *)&a2[49]) >> 2);
    v56 = (unint64_t *)(a1 + 112);
    sub_22339E528(a1 + 112, (uint64_t)(*(_QWORD *)&a2[50] - *(_QWORD *)&a2[49]) >> 3);
    if (!a2[52].i8[0])
      sub_22324A974();
    v8 = (float32x2_t *)a2[49];
    v55 = (float32x2_t *)a2[50];
    if (v8 != v55)
    {
      v59 = 0;
      do
      {
        v11 = 0;
        v12 = v8[1];
        v57 = v8;
        *(float32x2_t *)v13.f32 = vmul_f32(vadd_f32(*v8, v12), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v4.f32 = vsub_f32(*(float32x2_t *)v13.f32, v12);
        v14 = vadd_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v4.f32);
        v5 = vsub_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v4.f32);
        v13.i64[1] = v13.i64[0];
        v4.i64[1] = v4.i64[0];
        v15 = vsubq_f32(v13, v4);
        v16 = vaddq_f32(v13, v4);
        v16.i32[0] = v15.i32[0];
        *(float32x2_t *)v65 = v14;
        v16.i32[3] = v15.i32[3];
        *(float32x4_t *)&v65[8] = v16;
        v66 = v5;
        v17 = *(_QWORD *)(a1 + 8);
        do
        {
          v18 = &v65[8 * v11];
          v16.i32[0] = *(_DWORD *)v18;
          v4.i32[0] = *((_DWORD *)v18 + 1);
          v5.i32[0] = a2[6].i32[0];
          v6.i32[0] = a2[8].i32[0];
          v7.i32[0] = a2[10].i32[0];
          *(float32x2_t *)v19.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(a2[5], *(float *)v18), a2[7], v4.f32[0]), 0, a2[9]);
          *(float32x2_t *)&v19.u32[2] = vmla_f32(vmla_f32(vmul_f32(v5, *(float32x2_t *)v16.f32), *(float32x2_t *)v4.f32, v6), 0, v7);
          *(float32x2_t *)v16.f32 = a2[11];
          v16.i32[2] = a2[12].i32[0];
          v16 = vaddq_f32(v19, v16);
          v20 = *(_QWORD *)(a1 + 16);
          if (v17 < v20)
          {
            *(_DWORD *)(v17 + 8) = v16.i32[2];
            *(_QWORD *)v17 = v16.i64[0];
            v17 += 12;
          }
          else
          {
            v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a1) >> 2);
            v22 = v21 + 1;
            if (v21 + 1 > 0x1555555555555555)
              sub_22316E078();
            v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a1) >> 2);
            if (2 * v23 > v22)
              v22 = 2 * v23;
            if (v23 >= 0xAAAAAAAAAAAAAAALL)
              v24 = 0x1555555555555555;
            else
              v24 = v22;
            if (v24)
            {
              v61 = v16;
              LODWORD(v63) = v24;
              v25 = *(unsigned int *)(a1 + 28);
              if ((_DWORD)v25 == -1)
                sub_22316DD70();
              v68 = &v63;
              v26 = ((uint64_t (*)(_QWORD **, uint64_t))off_24EC35DA0[v25])(&v68, a1 + 24);
              v16 = v61;
            }
            else
            {
              v26 = 0;
              v27 = 0;
            }
            v28 = v26 + 12 * v21;
            *(_QWORD *)v28 = v16.i64[0];
            *(_DWORD *)(v28 + 8) = v16.i32[2];
            v30 = *(_QWORD *)a1;
            v29 = *(_QWORD *)(a1 + 8);
            v31 = v28;
            if (v29 != *(_QWORD *)a1)
            {
              do
              {
                v32 = *(_QWORD *)(v29 - 12);
                v29 -= 12;
                v33 = *(_DWORD *)(v29 + 8);
                *(_QWORD *)(v31 - 12) = v32;
                v31 -= 12;
                *(_DWORD *)(v31 + 8) = v33;
              }
              while (v29 != v30);
              v29 = *(_QWORD *)a1;
            }
            v17 = v28 + 12;
            *(_QWORD *)a1 = v31;
            *(_QWORD *)(a1 + 8) = v28 + 12;
            v34 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v26 + 12 * v27;
            if (v29)
            {
              v68 = (_QWORD *)v29;
              v69 = -1431655765 * ((unint64_t)(v34 - v29) >> 2);
              v35 = *(unsigned int *)(a1 + 28);
              if ((_DWORD)v35 == -1)
                sub_22316DD70();
              v63 = &v68;
              ((void (*)(_QWORD ***, uint64_t))off_24EC35DB0[v35])(&v63, a1 + 24);
            }
          }
          *(_QWORD *)(a1 + 8) = v17;
          ++v11;
        }
        while (v11 != 4);
        LODWORD(v68) = 4 * v59;
        HIDWORD(v68) = (4 * v59) | 1;
        v69 = (4 * v59) | 2;
        v36 = *(_QWORD *)(a1 + 120);
        if (v36 >= *(_QWORD *)(a1 + 128))
        {
          v38 = sub_2233B29C0(v56, (uint64_t *)&v68);
        }
        else
        {
          v37 = (uint64_t)v68;
          *(_DWORD *)(v36 + 8) = v69;
          *(_QWORD *)v36 = v37;
          v38 = v36 + 12;
        }
        *(_QWORD *)(a1 + 120) = v38;
        LODWORD(v68) = (4 * v59) | 1;
        HIDWORD(v68) = (4 * v59) | 3;
        v69 = (4 * v59) | 2;
        if (v38 < *(_QWORD *)(a1 + 128))
        {
          v9 = (uint64_t)v68;
          *(_DWORD *)(v38 + 8) = v69;
          *(_QWORD *)v38 = v9;
          v10 = v38 + 12;
        }
        else
        {
          v10 = sub_2233B29C0(v56, (uint64_t *)&v68);
        }
        *(_QWORD *)(a1 + 120) = v10;
        v8 = v57 + 2;
        ++v59;
      }
      while (&v57[2] != v55);
    }
  }
  v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v4.i32[0] = a2[6].i32[0];
  v5.i32[0] = a2[8].i32[0];
  v6.i32[0] = a2[10].i32[0];
  v40 = vadd_f32(a2[9], vmla_f32(vmul_f32(a2[5], 0), 0, a2[7]));
  *(_DWORD *)&v65[8] = vadd_f32(v6, vmla_f32(vmul_f32(*(float32x2_t *)v4.f32, 0), 0, v5)).u32[0];
  *(float32x2_t *)v65 = v40;
  sub_22339E688(a1 + 72, v39, (uint64_t *)v65);
  if (a2[27].i8[0])
  {
    v43 = a2[14].i8[0];
    if (v43 >= 0xC)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SceneUnderstanding/src/Types.cpp", 91, (uint64_t)"", 0, (uint64_t)"Unexpected label", 16, (void (*)(void **))sub_22457406C);
      abort();
    }
    v44 = 4 * v43;
    v41.i32[0] = *(_DWORD *)((char *)&unk_2245F4C28 + v44);
    v62 = v41;
    v58 = *(_DWORD *)((char *)&unk_2245F4C58 + v44);
    v60 = *(_DWORD *)((char *)&unk_2245F4C88 + v44);
    v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
    v65[0] = a2[14].i8[0];
    sub_22339E890(a1 + 240, v45, v65);
    *(_DWORD *)(a1 + 272) = 1;
    v46 = v60;
    v42 = v62;
    v47 = v58;
  }
  else
  {
    v46 = 1117782016;
    v47 = 1115160576;
    v42.i32[0] = 1110441984;
  }
  v42.i32[1] = v47;
  v42.i32[2] = v46;
  *(_DWORD *)(a1 + 64) = 1;
  v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v49 = vdivq_f32(v42, (float32x4_t)vdupq_n_s32(0x437F0000u));
  v64 = v49.i32[2];
  v63 = (_QWORD **)v49.i64[0];
  sub_22339EBD4((uint64_t)v65, v48, (uint64_t)&v63);
  v50 = *(_QWORD *)(a1 + 32);
  if (v50)
  {
    *(_QWORD *)(a1 + 40) = v50;
    v51 = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 48) - v50) >> 2);
    v68 = (_QWORD *)v50;
    v69 = v51;
    v52 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v52 == -1)
      sub_22316DD70();
    v67 = &v68;
    ((void (*)(_QWORD ***, uint64_t))off_24EC35DB0[v52])(&v67, a1 + 56);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  result = *(double *)v65;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v65;
  v54 = v66;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)&v65[16];
  *(float32x2_t *)(a1 + 56) = v54;
  return result;
}

void sub_22339E2F4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E308(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E31C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E330(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E344(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E35C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E370(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E384(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E39C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339E3B4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22339E3C8(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  int v17;
  _QWORD *v18;

  v2 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2) < a2)
  {
    v3 = result;
    if (a2 >= 0x1555555555555556)
      sub_22316E078();
    v4 = *(_QWORD *)(result + 8);
    LODWORD(v18) = a2;
    v5 = *(unsigned int *)(result + 28);
    if ((_DWORD)v5 == -1)
      sub_22316DD70();
    v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    v16 = &v18;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC35DA0[v5])(&v16, result + 24);
    v10 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    v11 = result + 12 * v7;
    if (v9 != *(_QWORD *)v3)
    {
      do
      {
        v12 = *(_QWORD *)(v9 - 12);
        v9 -= 12;
        v13 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = result + 12 * v7;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      v16 = (_QWORD **)v9;
      v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      v15 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v15 == -1)
        sub_22316DD70();
      v18 = &v16;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC35DB0[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

uint64_t sub_22339E528(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD **v16;
  int v17;
  _QWORD *v18;

  v2 = *(_QWORD *)result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2) < a2)
  {
    v3 = result;
    if (a2 >= 0x1555555555555556)
      sub_22316E078();
    v4 = *(_QWORD *)(result + 8);
    LODWORD(v18) = a2;
    v5 = *(unsigned int *)(result + 28);
    if ((_DWORD)v5 == -1)
      sub_22316DD70();
    v6 = (unsigned __int128)((v4 - v2) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
    v7 = (v6 >> 1) + ((unint64_t)v6 >> 63);
    v16 = &v18;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC35DC0[v5])(&v16, result + 24);
    v10 = *(_QWORD *)v3;
    v9 = *(_QWORD *)(v3 + 8);
    v11 = result + 12 * v7;
    if (v9 != *(_QWORD *)v3)
    {
      do
      {
        v12 = *(_QWORD *)(v9 - 12);
        v9 -= 12;
        v13 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)(v11 - 12) = v12;
        v11 -= 12;
        *(_DWORD *)(v11 + 8) = v13;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = result + 12 * v7;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v8;
    if (v9)
    {
      v16 = (_QWORD **)v9;
      v17 = -1431655765 * ((unint64_t)(v14 - v9) >> 2);
      v15 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v15 == -1)
        sub_22316DD70();
      v18 = &v16;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC35DD0[v15])(&v18, v3 + 24);
    }
  }
  return result;
}

uint64_t sub_22339E688(uint64_t result, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  int v26;
  _QWORD *v27;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)result;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *(_QWORD *)result) >> 2);
  if (v8 < a2)
  {
    if (v7)
    {
      *(_QWORD *)(result + 8) = v7;
      v25 = (_QWORD **)v7;
      v26 = v8;
      v9 = *(unsigned int *)(result + 28);
      if ((_DWORD)v9 == -1)
        sub_22316DD70();
      v27 = &v25;
      ((void (*)(_QWORD **, uint64_t))off_24EC35DB0[v9])(&v27, result + 24);
      v6 = 0;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    if (a2 > 0x1555555555555555)
      goto LABEL_27;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a2)
      v11 = a2;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_27:
      sub_22316E078();
    LODWORD(v27) = v12;
    v13 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v25 = &v27;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC35DA0[v13])(&v25, v5 + 24);
    *(_QWORD *)v5 = result;
    *(_QWORD *)(v5 + 8) = result;
    *(_QWORD *)(v5 + 16) = result + 12 * v14;
    v15 = 12 * a2;
    v16 = result + 12 * a2;
    do
    {
      v17 = *a3;
      *(_DWORD *)(result + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)result = v17;
      result += 12;
      v15 -= 12;
    }
    while (v15);
    goto LABEL_26;
  }
  v18 = (*(_QWORD *)(result + 8) - v7) / 12;
  if (v18 >= a2)
    v19 = a2;
  else
    v19 = (*(_QWORD *)(result + 8) - v7) / 12;
  for (; v19; --v19)
  {
    v20 = *a3;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a3 + 2);
    *(_QWORD *)v7 = v20;
    v7 += 12;
  }
  if (a2 <= v18)
  {
    v16 = *(_QWORD *)result + 12 * a2;
LABEL_26:
    *(_QWORD *)(v5 + 8) = v16;
    return result;
  }
  v21 = *(_QWORD *)(result + 8);
  v22 = v21 + 12 * (a2 - v18);
  v23 = -12 * v18 + 12 * a2;
  do
  {
    v24 = *a3;
    *(_DWORD *)(v21 + 8) = *((_DWORD *)a3 + 2);
    *(_QWORD *)v21 = v24;
    v21 += 12;
    v23 -= 12;
  }
  while (v23);
  *(_QWORD *)(result + 8) = v22;
  return result;
}

unint64_t sub_22339E890(unint64_t result, unint64_t a2, const char *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t *v25;
  unint64_t v26;
  int8x8_t v27;
  int8x8_t *v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t *v31;
  unint64_t v32;
  int8x8_t v33;
  int8x8_t *v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  char *v38;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t *v42;
  unint64_t v43;
  char *v44;
  int8x8_t v45;
  int8x8_t *v46;
  unint64_t v47;
  char *v48;
  int v49;
  char **v50;

  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_QWORD *)result;
  v8 = *(char **)result;
  v9 = v6 - *(_QWORD *)result;
  if (v9 < a2)
  {
    if (v8)
    {
      *(_QWORD *)(result + 8) = v8;
      v48 = v8;
      v49 = v9;
      v10 = *(unsigned int *)(result + 28);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v50 = &v48;
      ((void (*)(char ***, unint64_t))off_24EC35DE0[v10])(&v50, result + 24);
      v6 = 0;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_73;
    v11 = 2 * v6;
    if (2 * v6 <= a2)
      v11 = a2;
    v12 = v6 >= 0x3FFFFFFFFFFFFFFFLL;
    v13 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 < 0)
LABEL_73:
      sub_22316E078();
    LODWORD(v50) = v13;
    v14 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v14 == -1)
      sub_22316DD70();
    v48 = (char *)&v50;
    result = ((uint64_t (*)(char **, unint64_t))off_24EC35DF0[v14])(&v48, v5 + 24);
    *(_QWORD *)v5 = result;
    *(_QWORD *)(v5 + 8) = result;
    *(_QWORD *)(v5 + 16) = result + v15;
    v16 = (char *)(result + a2);
    v17 = (char *)result;
    if (a2 >= 8)
    {
      if ((unint64_t)(a3 + 1) > result && v16 > a3)
      {
        v17 = (char *)result;
      }
      else
      {
        if (a2 < 0x20)
        {
          v19 = 0;
          goto LABEL_35;
        }
        v19 = a2 & 0xFFFFFFFFFFFFFFE0;
        v24 = vld1q_dup_s8(a3);
        v25 = (int8x16_t *)(result + 16);
        v26 = a2 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v25[-1] = v24;
          *v25 = v24;
          v25 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v19 == a2)
          goto LABEL_38;
        if ((a2 & 0x18) != 0)
        {
LABEL_35:
          v17 = (char *)(result + (a2 & 0xFFFFFFFFFFFFFFF8));
          v27 = vld1_dup_s8(a3);
          v28 = (int8x8_t *)(result + v19);
          v29 = v19 - (a2 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            *v28++ = v27;
            v29 += 8;
          }
          while (v29);
          if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
            goto LABEL_38;
          goto LABEL_49;
        }
        v17 = (char *)(result + v19);
      }
    }
    do
LABEL_49:
      *v17++ = *a3;
    while (v17 != v16);
LABEL_38:
    *(_QWORD *)(v5 + 8) = v16;
    return result;
  }
  v20 = *(_QWORD *)(result + 8) - v7;
  if (v20 >= a2)
    v21 = a2;
  else
    v21 = *(_QWORD *)(result + 8) - v7;
  if (v21)
  {
    if (v21 < 8)
      goto LABEL_52;
    if (v7 < (unint64_t)(a3 + 1) && v7 + v21 > (unint64_t)a3)
      goto LABEL_52;
    if (v21 >= 0x20)
    {
      v23 = v21 & 0xFFFFFFFFFFFFFFE0;
      v30 = vld1q_dup_s8(a3);
      v31 = (int8x16_t *)(v7 + 16);
      v32 = v21 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v31[-1] = v30;
        *v31 = v30;
        v31 += 2;
        v32 -= 32;
      }
      while (v32);
      if (v21 == v23)
        goto LABEL_53;
      if ((v21 & 0x18) == 0)
      {
        v21 &= 0x1Fu;
        v8 = (char *)(v7 + v23);
        do
        {
LABEL_52:
          *v8++ = *a3;
          --v21;
        }
        while (v21);
        goto LABEL_53;
      }
    }
    else
    {
      v23 = 0;
    }
    v8 = (char *)(v7 + (v21 & 0xFFFFFFFFFFFFFFF8));
    v33 = vld1_dup_s8(a3);
    v34 = (int8x8_t *)(v7 + v23);
    v35 = v23 - (v21 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v34++ = v33;
      v35 += 8;
    }
    while (v35);
    v36 = v21 == (v21 & 0xFFFFFFFFFFFFFFF8);
    v21 &= 7u;
    if (!v36)
      goto LABEL_52;
  }
LABEL_53:
  v37 = a2 - v20;
  if (a2 > v20)
  {
    v38 = *(char **)(result + 8);
    v16 = &v38[v37];
    if (v37 >= 8 && (v38 >= a3 + 1 || v16 <= a3))
    {
      if (v37 < 0x20)
      {
        v40 = 0;
        goto LABEL_66;
      }
      v40 = v37 & 0xFFFFFFFFFFFFFFE0;
      v41 = vld1q_dup_s8(a3);
      v42 = (int8x16_t *)(v38 + 16);
      v43 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v42[-1] = v41;
        *v42 = v41;
        v42 += 2;
        v43 -= 32;
      }
      while (v43);
      if (v37 == v40)
        goto LABEL_38;
      if ((v37 & 0x18) != 0)
      {
LABEL_66:
        v44 = &v38[v37 & 0xFFFFFFFFFFFFFFF8];
        v45 = vld1_dup_s8(a3);
        v46 = (int8x8_t *)&v38[v40];
        v47 = v40 - (v37 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v46++ = v45;
          v47 += 8;
        }
        while (v47);
        v38 = v44;
        if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
        goto LABEL_71;
      }
      v38 += v40;
    }
    do
LABEL_71:
      *v38++ = *a3;
    while (v38 != v16);
    goto LABEL_38;
  }
  *(_QWORD *)(result + 8) = *(_QWORD *)result + a2;
  return result;
}

uint64_t sub_22339EBD4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  char *v9;

  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if (a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_22316E078();
    v6 = a2;
    v7 = operator new(12 * a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[3 * v6];
    v8 = 12 * a2;
    v9 = (char *)&v7[3 * a2];
    do
    {
      *(_QWORD *)v7 = *(_QWORD *)a3;
      v7[2] = *(_DWORD *)(a3 + 8);
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
    *(_QWORD *)(a1 + 8) = v9;
  }
  return a1;
}

void sub_22339EC84()
{
  __break(1u);
  JUMPOUT(0x22339ECD4);
}

float32x4_t sub_22339ECFC(unint64_t *a1, float32x2_t *a2)
{
  float32x4_t result;
  float32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float32x4_t v11;
  uint64_t v12;
  int v13;
  __int32 *v14;
  int v15;

  v15 = 953267991;
  v14 = &v15;
  *(_DWORD *)(sub_2241498F4((uint64_t)a1, 0) + 64) = 1;
  v12 = 1065353216;
  v13 = 0;
  sub_22339EE58(&v14, a1, 0, (uint64_t)&v12);
  v12 = 0x3F80000000000000;
  v13 = 0;
  sub_22339EE58(&v14, a1, 1u, (uint64_t)&v12);
  v12 = 0;
  v13 = 1065353216;
  sub_22339EE58(&v14, a1, 2u, (uint64_t)&v12);
  v9 = (float32x2_t *)*a1;
  v10 = (float32x2_t *)a1[1];
  if ((float32x2_t *)*a1 != v10)
  {
    do
    {
      v5.i32[0] = a2[1].i32[0];
      v6.i32[0] = a2[3].i32[0];
      v7.i32[0] = a2[5].i32[0];
      v8.i32[0] = v9[1].i32[0];
      *(float32x2_t *)v11.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a2, COERCE_FLOAT(*v9)), a2[2], *v9, 1), a2[4], v8.f32[0]);
      *(float32x2_t *)&v11.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v5.f32, *v9), v6, *v9, 1), v8, v7);
      *(float32x2_t *)v5.f32 = a2[6];
      v5.i32[2] = a2[7].i32[0];
      result = vaddq_f32(v11, v5);
      v9[1].i32[0] = result.i32[2];
      *v9 = *(float32x2_t *)result.f32;
      v9 = (float32x2_t *)((char *)v9 + 12);
    }
    while (v9 != v10);
  }
  return result;
}

void sub_22339EE1C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339EE30(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_22339EE44(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_22339EE58(__int32 **a1, unint64_t *a2, unsigned int a3, uint64_t a4)
{
  __int32 v8;
  int32x2_t v9;
  __int32 *v10;
  int8x8_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  unint64_t v24;
  float32x4_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int32 v38;
  unint64_t v39;
  __int32 *v40;
  _DWORD *v41;
  __int32 v42;
  _DWORD *result;
  __int32 v44;
  unint64_t v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __int32 v50;
  uint64_t v51;
  __int32 v52;
  float32x4_t v53;
  float32x4_t v54;

  v8 = -1431655765 * ((a2[1] - *a2) >> 2);
  v54.i32[3] = v8;
  sub_22339E3C8((uint64_t)a2, (v8 + 4));
  v9 = vceq_s32(vdup_n_s32(a3), (int32x2_t)0x100000000);
  v10 = *a1;
  v11 = (int8x8_t)vdup_lane_s32(v9, 1);
  *(int8x8_t *)v54.f32 = vbsl_s8(v11, (int8x8_t)1000593162, (int8x8_t)0x3BA3D70A00000000);
  v54.i32[2] = *v10;
  *(int8x8_t *)v12.f32 = vbsl_s8(v11, (int8x8_t)0x3F800000BF800000, (int8x8_t)0xBF8000003F800000);
  v12.i32[2] = 1.0;
  v13 = v54;
  v14 = vmulq_f32(v12, v54);
  v53.i32[2] = v14.i32[2];
  v53.i64[0] = v14.i64[0];
  *(int8x8_t *)v15.f32 = vand_s8((int8x8_t)vdup_n_s32(0x3DCCCCCDu), (int8x8_t)v9);
  v16 = 0.1;
  if (a3 != 2)
    v16 = 0.0;
  v17 = a2[1];
  if (v17 >= a2[2])
  {
    v47 = v54;
    v49 = v15;
    v46 = v16;
    v19 = sub_2233B2B48(a2, (uint64_t *)&v53);
    v13 = v47;
    v15 = v49;
    v15.f32[2] = v46;
    a2[1] = v19;
    v48 = v15;
    if (v19 >= a2[2])
      goto LABEL_5;
  }
  else
  {
    v18 = v53.i64[0];
    *(_DWORD *)(v17 + 8) = v53.i32[2];
    *(_QWORD *)v17 = v18;
    v19 = v17 + 12;
    v15.f32[2] = v16;
    a2[1] = v17 + 12;
    v48 = v15;
    if (v17 + 12 >= a2[2])
    {
LABEL_5:
      v20 = sub_2233B2B48(a2, (uint64_t *)&v54);
      v15 = v48;
      v13 = v54;
      goto LABEL_8;
    }
  }
  v21 = v54.i64[0];
  *(_DWORD *)(v19 + 8) = v54.i32[2];
  *(_QWORD *)v19 = v21;
  v20 = v19 + 12;
LABEL_8:
  a2[1] = v20;
  v22 = vaddq_f32(v15, v13);
  v52 = v22.i32[2];
  v51 = v22.i64[0];
  if (v20 >= a2[2])
  {
    v24 = sub_2233B2838(a2, &v51);
    v15 = v48;
  }
  else
  {
    v23 = v51;
    *(_DWORD *)(v20 + 8) = v52;
    *(_QWORD *)v20 = v23;
    v24 = v20 + 12;
  }
  a2[1] = v24;
  v25 = vaddq_f32(v15, v53);
  v52 = v25.i32[2];
  v51 = v25.i64[0];
  if (v24 >= a2[2])
  {
    v27 = sub_2233B2838(a2, &v51);
  }
  else
  {
    v26 = v51;
    *(_DWORD *)(v24 + 8) = v52;
    *(_QWORD *)v24 = v26;
    v27 = v24 + 12;
  }
  a2[1] = v27;
  sub_22339E3C8((uint64_t)(a2 + 4), (v8 + 4));
  v28 = a2[5];
  if (v28 >= a2[6])
  {
    v30 = sub_2233B2B48(a2 + 4, (uint64_t *)a4);
    a2[5] = v30;
    if (v30 >= a2[6])
    {
LABEL_16:
      v31 = sub_2233B2B48(a2 + 4, (uint64_t *)a4);
      a2[5] = v31;
      if (v31 >= a2[6])
        goto LABEL_17;
LABEL_21:
      v35 = *(_QWORD *)a4;
      *(_DWORD *)(v31 + 8) = *(_DWORD *)(a4 + 8);
      *(_QWORD *)v31 = v35;
      v32 = v31 + 12;
      a2[5] = v32;
      if (v32 >= a2[6])
        goto LABEL_18;
      goto LABEL_22;
    }
  }
  else
  {
    v29 = *(_QWORD *)a4;
    *(_DWORD *)(v28 + 8) = *(_DWORD *)(a4 + 8);
    *(_QWORD *)v28 = v29;
    v30 = v28 + 12;
    a2[5] = v28 + 12;
    if (v28 + 12 >= a2[6])
      goto LABEL_16;
  }
  v34 = *(_QWORD *)a4;
  *(_DWORD *)(v30 + 8) = *(_DWORD *)(a4 + 8);
  *(_QWORD *)v30 = v34;
  v31 = v30 + 12;
  a2[5] = v31;
  if (v31 < a2[6])
    goto LABEL_21;
LABEL_17:
  v32 = sub_2233B2B48(a2 + 4, (uint64_t *)a4);
  a2[5] = v32;
  if (v32 >= a2[6])
  {
LABEL_18:
    v33 = sub_2233B2B48(a2 + 4, (uint64_t *)a4);
    goto LABEL_23;
  }
LABEL_22:
  v36 = *(_QWORD *)a4;
  *(_DWORD *)(v32 + 8) = *(_DWORD *)(a4 + 8);
  *(_QWORD *)v32 = v36;
  v33 = v32 + 12;
LABEL_23:
  v37 = a2[14];
  a2[5] = v33;
  sub_22339E528((uint64_t)(a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[15] - v37) >> 2) + 2);
  v38 = v8 + 2;
  v50 = v8 + 2;
  LODWORD(v51) = v8 + 1;
  v40 = (__int32 *)a2[15];
  v39 = a2[16];
  if ((unint64_t)v40 >= v39)
  {
    v41 = sub_2233B2CD0((uint64_t)(a2 + 14), &v54.i32[3], &v51, &v50);
    v44 = v54.i32[3];
    v45 = a2[16];
    v38 = v54.i32[3] + 2;
    a2[15] = (unint64_t)v41;
    v42 = v44 + 3;
    v50 = v44 + 3;
    LODWORD(v51) = v44 + 2;
    if ((unint64_t)v41 >= v45)
      goto LABEL_25;
LABEL_27:
    *v41 = v38;
    v41[1] = v42;
    v41[2] = v54.i32[3];
    result = v41 + 3;
    goto LABEL_28;
  }
  *v40 = v8;
  v40[1] = v8 + 1;
  v41 = v40 + 3;
  v40[2] = v38;
  a2[15] = (unint64_t)(v40 + 3);
  v42 = v8 + 3;
  v50 = v8 + 3;
  LODWORD(v51) = v8 + 2;
  if ((unint64_t)(v40 + 3) < v39)
    goto LABEL_27;
LABEL_25:
  result = sub_2233B2E70((uint64_t)(a2 + 14), &v51, &v50, &v54.i32[3]);
LABEL_28:
  a2[15] = (unint64_t)result;
  return result;
}

void sub_22339F234(uint64_t *a1, unsigned __int8 **a2, const std::string::value_type *a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::string::value_type *v15;
  void *v16;
  void **v17;
  void *v18;
  void **v19;
  void *v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;
  unsigned __int8 v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  void **v33;
  size_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  std::mutex *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const std::string::value_type *v49;
  uint64_t v50;
  __int128 v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  std::mutex *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  size_t v64;
  unint64_t v65;
  char *v66;
  unsigned __int8 v67;
  std::string *v68;
  __int128 v69;
  int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  void **v75;
  size_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 v79;
  std::string *v80;
  __int128 v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  void **v91;
  size_t v92;
  uint64_t v93;
  unsigned __int8 v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  const std::string::value_type *v98;
  std::string *v99;
  __int128 v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  __int128 v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *p_shared_owners;
  unint64_t v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  std::mutex *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  const std::string::value_type *v139;
  uint64_t v140;
  __int128 v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  std::mutex *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  size_t v154;
  unint64_t v155;
  char *p_dst;
  unsigned __int8 v157;
  std::string *v158;
  __int128 v159;
  int v160;
  const std::string::value_type *v161;
  std::string::size_type v162;
  std::string *v163;
  __int128 v164;
  void **v165;
  size_t v166;
  uint64_t v167;
  int v168;
  unsigned __int8 v169;
  std::string *v170;
  __int128 v171;
  int v172;
  const std::string::value_type *v173;
  std::string::size_type v174;
  std::string *v175;
  __int128 v176;
  std::string *v177;
  __int128 v178;
  std::string *v179;
  __int128 v180;
  void **v181;
  size_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  int v185;
  size_t v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  std::string *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  const std::string::value_type *v195;
  std::string *v196;
  __int128 v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  __int128 v201;
  std::string *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  size_t v206;
  unint64_t v207;
  std::string *v208;
  uint64_t v209;
  void *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  __int128 v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  char *v233;
  char *v234;
  void *v235;
  char *v236;
  void *v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  std::string *v241;
  int v242;
  int v243;
  void *v244;
  uint64_t *v245;
  uint64_t v246;
  void *v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  __int128 v251;
  unint64_t *v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  void *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  __int128 v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  unsigned __int8 *v295;
  unsigned __int8 *v296;
  _OWORD *v297;
  __int128 v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  std::mutex *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  const std::string::value_type *v306;
  void *v307;
  void **v308;
  void *v309;
  void **v310;
  void *v311;
  uint64_t v312;
  int v313;
  int v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  std::mutex *v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  size_t v322;
  unint64_t v323;
  _BYTE *v324;
  unsigned __int8 v325;
  std::string *v326;
  __int128 v327;
  int v328;
  const std::string::value_type *v329;
  std::string::size_type v330;
  std::string *v331;
  __int128 v332;
  void **v333;
  size_t v334;
  uint64_t v335;
  int v336;
  unsigned __int8 v337;
  std::string *v338;
  __int128 v339;
  int v340;
  const std::string::value_type *v341;
  std::string::size_type v342;
  std::string *v343;
  __int128 v344;
  std::string *v345;
  __int128 v346;
  std::string *v347;
  __int128 v348;
  void **v349;
  size_t v350;
  uint64_t v351;
  unsigned __int8 v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  const std::string::value_type *v356;
  std::string *v357;
  __int128 v358;
  void *v359;
  void **v360;
  uint64_t v361;
  __int128 v362;
  std::string *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  void *v367;
  std::__shared_weak_count *v368;
  unint64_t *v369;
  unint64_t v370;
  __int128 v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  std::mutex *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  const std::string::value_type *v397;
  void *v398;
  void **v399;
  void *v400;
  void **v401;
  void *v402;
  uint64_t v403;
  int v404;
  int v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  std::mutex *v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  size_t v413;
  unint64_t v414;
  _BYTE *v415;
  unsigned __int8 v416;
  std::string *v417;
  __int128 v418;
  int v419;
  const std::string::value_type *v420;
  std::string::size_type v421;
  std::string *v422;
  __int128 v423;
  void **v424;
  size_t v425;
  uint64_t v426;
  int v427;
  unsigned __int8 v428;
  std::string *v429;
  __int128 v430;
  int v431;
  const std::string::value_type *v432;
  std::string::size_type v433;
  std::string *v434;
  __int128 v435;
  std::string *v436;
  __int128 v437;
  std::string *v438;
  __int128 v439;
  void **v440;
  size_t v441;
  uint64_t v442;
  unsigned __int8 v443;
  int v444;
  size_t v445;
  unint64_t v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  std::string *v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  const std::string::value_type *v454;
  std::string *v455;
  __int128 v456;
  void *v457;
  void **v458;
  uint64_t v459;
  __int128 v460;
  std::string *v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  size_t v465;
  unint64_t v466;
  std::string *v467;
  uint64_t v468;
  void *v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  __int128 v473;
  unint64_t *v474;
  unint64_t v475;
  unint64_t *v476;
  unint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  unint64_t *v487;
  unint64_t v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  std::string *v494;
  int v495;
  int v496;
  void *v497;
  uint64_t *v498;
  uint64_t v499;
  void *v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  __int128 v504;
  unint64_t *v505;
  unint64_t v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  unint64_t *v518;
  unint64_t v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  void *v525;
  std::__shared_weak_count *v526;
  unint64_t *v527;
  unint64_t v528;
  __int128 v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t *v532;
  unint64_t v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  std::__shared_weak_count *v540;
  unint64_t *v541;
  unint64_t v542;
  unint64_t *v543;
  unint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  unsigned __int8 *v548;
  unsigned __int8 *v549;
  _OWORD *v550;
  __int128 v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t v554;
  std::mutex *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  const std::string::value_type *v559;
  void *v560;
  void **v561;
  void *v562;
  void **v563;
  void *v564;
  uint64_t v565;
  int v566;
  int v567;
  uint64_t *v568;
  uint64_t v569;
  uint64_t v570;
  std::mutex *v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  size_t v575;
  unint64_t v576;
  _BYTE *v577;
  unsigned __int8 v578;
  std::string *v579;
  __int128 v580;
  int v581;
  const std::string::value_type *v582;
  std::string::size_type v583;
  std::string *v584;
  __int128 v585;
  void **v586;
  size_t v587;
  uint64_t v588;
  int v589;
  unsigned __int8 v590;
  std::string *v591;
  __int128 v592;
  int v593;
  const std::string::value_type *v594;
  std::string::size_type v595;
  std::string *v596;
  __int128 v597;
  std::string *v598;
  __int128 v599;
  std::string *v600;
  __int128 v601;
  void **v602;
  size_t v603;
  uint64_t v604;
  unsigned __int8 v605;
  uint64_t *v606;
  uint64_t v607;
  uint64_t v608;
  const std::string::value_type *v609;
  std::string *v610;
  __int128 v611;
  void *v612;
  void **v613;
  uint64_t v614;
  __int128 v615;
  std::string *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  void *v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  __int128 v624;
  unint64_t *v625;
  unint64_t v626;
  unint64_t *v627;
  unint64_t v628;
  std::__shared_weak_count *v629;
  unint64_t *v630;
  unint64_t v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  unint64_t *v638;
  unint64_t v639;
  std::__shared_weak_count *v640;
  unint64_t *v641;
  unint64_t v642;
  uint64_t *v643;
  uint64_t v644;
  uint64_t v645;
  std::mutex *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  const std::string::value_type *v650;
  void *v651;
  void **v652;
  void *v653;
  void **v654;
  void *v655;
  uint64_t v656;
  int v657;
  int v658;
  uint64_t *v659;
  uint64_t v660;
  uint64_t v661;
  std::mutex *v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  size_t v666;
  unint64_t v667;
  _BYTE *v668;
  unsigned __int8 v669;
  std::string *v670;
  __int128 v671;
  int v672;
  const std::string::value_type *v673;
  std::string::size_type v674;
  std::string *v675;
  __int128 v676;
  void **v677;
  size_t v678;
  uint64_t v679;
  int v680;
  unsigned __int8 v681;
  std::string *v682;
  __int128 v683;
  int v684;
  const std::string::value_type *v685;
  std::string::size_type v686;
  std::string *v687;
  __int128 v688;
  std::string *v689;
  __int128 v690;
  std::string *v691;
  __int128 v692;
  void **v693;
  size_t v694;
  uint64_t v695;
  unsigned __int8 v696;
  int v697;
  size_t v698;
  unint64_t v699;
  char *v700;
  uint64_t v701;
  uint64_t v702;
  std::string *v703;
  uint64_t *v704;
  uint64_t v705;
  uint64_t v706;
  const std::string::value_type *v707;
  std::string *v708;
  __int128 v709;
  void *v710;
  void **v711;
  uint64_t v712;
  __int128 v713;
  std::string *v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  size_t v718;
  unint64_t v719;
  std::string *v720;
  uint64_t v721;
  void *v722;
  std::__shared_weak_count *v723;
  unint64_t *v724;
  unint64_t v725;
  __int128 v726;
  unint64_t *v727;
  unint64_t v728;
  unint64_t *v729;
  unint64_t v730;
  std::__shared_weak_count *v731;
  unint64_t *v732;
  unint64_t v733;
  std::__shared_weak_count *v734;
  unint64_t *v735;
  unint64_t v736;
  std::__shared_weak_count *v737;
  unint64_t *v738;
  unint64_t v739;
  unint64_t *v740;
  unint64_t v741;
  std::__shared_weak_count *v742;
  unint64_t *v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  std::string *v747;
  int v748;
  int v749;
  void *v750;
  uint64_t *v751;
  uint64_t v752;
  void *v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  __int128 v757;
  unint64_t *v758;
  unint64_t v759;
  unint64_t *v760;
  unint64_t v761;
  std::__shared_weak_count *v762;
  unint64_t *v763;
  unint64_t v764;
  std::__shared_weak_count *v765;
  unint64_t *v766;
  unint64_t v767;
  std::__shared_weak_count *v768;
  unint64_t *v769;
  unint64_t v770;
  unint64_t *v771;
  unint64_t v772;
  std::__shared_weak_count *v773;
  unint64_t *v774;
  unint64_t v775;
  uint64_t *v776;
  uint64_t v777;
  void *v778;
  std::__shared_weak_count *v779;
  unint64_t *v780;
  unint64_t v781;
  __int128 v782;
  unint64_t *v783;
  unint64_t v784;
  unint64_t *v785;
  unint64_t v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  std::__shared_weak_count *v790;
  unint64_t *v791;
  unint64_t v792;
  std::__shared_weak_count *v793;
  unint64_t *v794;
  unint64_t v795;
  unint64_t *v796;
  unint64_t v797;
  std::__shared_weak_count *v798;
  unint64_t *v799;
  unint64_t v800;
  unint64_t v801;
  unint64_t v802;
  std::string::size_type v803;
  std::string::size_type p_size;
  std::string::size_type v805;
  std::string::size_type v807;
  std::string::size_type size;
  uint64_t v809;
  unsigned __int8 *v810;
  unsigned __int8 *v811;
  _BYTE v812[32];
  int v813;
  std::string v814;
  std::string v815;
  std::string v816;
  std::string __dst;
  char v818;
  std::string v819;
  std::string v820;
  void *v821[2];
  _BYTE v822[24];
  float32x2_t v823[30];
  void *v824;
  void *v825;
  void *v826;
  void *v827;
  char v828;
  void *v829;
  void *v830;
  char v831;
  void *v832;
  char *v833;
  char v834;
  __int128 v835;
  _QWORD v836[2];
  void *__p[2];
  _BYTE v838[360];
  uint64_t v839;

  v839 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v7 = sub_2241471F8();
    v8 = v7[2];
    if (!v8)
    {
      v9 = v7;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v8 = v9[2];
    }
    v10 = *(_QWORD *)(v8 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      v821[0] = "cv3d.recon.";
      v821[1] = (void *)11;
      v14 = *((unsigned __int8 *)a3 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = a3;
      else
        v15 = *(const std::string::value_type **)a3;
      if ((v14 & 0x80u) != 0)
        v14 = *((_QWORD *)a3 + 1);
      *(_QWORD *)v822 = v15;
      *(_QWORD *)&v822[8] = v14;
      sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, (std::string *)__p);
      v16 = (void *)v838[7];
      v17 = (void **)__p[0];
      v18 = __p[1];
      sub_2241471F8();
      if ((char)v16 >= 0)
        v19 = __p;
      else
        v19 = v17;
      if ((char)v16 >= 0)
        v20 = v16;
      else
        v20 = v18;
      v21 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v19, v20);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v23 = v22;
      if ((v838[7] & 0x80000000) != 0)
      {
        operator delete(__p[0]);
        if (!v23)
          goto LABEL_27;
      }
      else if (!v22)
      {
        goto LABEL_27;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a4)
      {
        v24 = a4 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a4)
          v24 = *(double *)&qword_255788F20 - a4;
        if (v24 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a4;
      }
      kdebug_trace();
    }
  }
LABEL_27:
  v25 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v25 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(v812, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)v812 = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&v812[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v26 = std::string::append((std::string *)v812, ".", 1uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(_QWORD *)v838 = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = a3[23];
  if (v28 >= 0)
    v29 = a3;
  else
    v29 = *(const std::string::value_type **)a3;
  if (v28 >= 0)
    v30 = *((unsigned __int8 *)a3 + 23);
  else
    v30 = *((_QWORD *)a3 + 1);
  v31 = std::string::append((std::string *)__p, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  *(_QWORD *)v822 = *((_QWORD *)&v31->__r_.__value_.__l + 2);
  *(_OWORD *)v821 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (v822[7] >= 0)
    v33 = v821;
  else
    v33 = (void **)v821[0];
  v34 = strlen((const char *)v33);
  sub_2241471F8();
  v35 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v33, v34);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  if ((v822[7] & 0x80000000) != 0)
  {
    operator delete(v821[0]);
    if ((v838[7] & 0x80000000) == 0)
    {
LABEL_42:
      if ((v812[23] & 0x80000000) == 0)
        goto LABEL_43;
LABEL_49:
      operator delete(*(void **)v812);
      if (v36)
        goto LABEL_44;
LABEL_50:
      v38 = *a1;
      v39 = a1[1];
      if (*a1 == v39)
        goto LABEL_494;
      goto LABEL_51;
    }
  }
  else if ((v838[7] & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if ((v812[23] & 0x80000000) != 0)
    goto LABEL_49;
LABEL_43:
  if (!v36)
    goto LABEL_50;
LABEL_44:
  v37 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v37 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  qword_25578BAF0 = *(_QWORD *)&a4;
  v38 = *a1;
  v39 = a1[1];
  if (*a1 != v39)
  {
LABEL_51:
    v803 = (std::string::size_type)v838;
    p_size = (std::string::size_type)&v814.__r_.__value_.__l.__size_;
    v805 = (std::string::size_type)&v820.__r_.__value_.__l.__size_;
    v809 = v39;
    while (1)
    {
      sub_223249DC0((uint64_t)v821, v38);
      sub_2245664AC((unsigned __int8 *)v821, __p);
      v40 = operator new(0x28uLL);
      v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      *(_OWORD *)&v815.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
      v41 = *(_OWORD *)v838;
      *v40 = *(_OWORD *)__p;
      v40[1] = v41;
      *((_DWORD *)v40 + 8) = *(_DWORD *)&v838[16];
      *((_BYTE *)v40 + 36) = 0;
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v42 = sub_2241471F8();
        v43 = v42[2];
        if (!v43)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_1349;
          }
          v43 = v42[2];
        }
        v44 = *(_QWORD *)(v43 + 64);
        v45 = (std::mutex *)(v44 + 32);
        std::mutex::lock((std::mutex *)(v44 + 32));
        v47 = *(_QWORD *)(v44 + 96);
        v46 = *(_QWORD *)(v44 + 104);
        std::mutex::unlock(v45);
        if (v47 != v46)
        {
          __p[0] = "cv3d.recon.";
          __p[1] = (void *)11;
          v48 = *((unsigned __int8 *)a3 + 23);
          if ((v48 & 0x80u) == 0)
            v49 = a3;
          else
            v49 = *(const std::string::value_type **)a3;
          if ((v48 & 0x80u) != 0)
            v48 = *((_QWORD *)a3 + 1);
          *(_QWORD *)v838 = v49;
          *(_QWORD *)&v838[8] = v48;
          sub_2231A9820((uint64_t)__p, (uint64_t)&v838[16], 0, 0, (std::string *)v812);
          v50 = v812[23];
          v51 = *(_OWORD *)v812;
          sub_2241471F8();
          v52 = (v50 & 0x80u) == 0 ? v812 : (_BYTE *)v51;
          v53 = (v50 & 0x80u) == 0 ? v50 : *((_QWORD *)&v51 + 1);
          v54 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v52, v53);
          v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 24))(v54);
          v56 = v55;
          if ((v812[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v812);
            if (!v56)
              goto LABEL_85;
          }
          else if (!v55)
          {
            goto LABEL_85;
          }
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v57 = sub_2241471F8();
            v58 = v57[2];
            if (!v58)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_1349;
              }
              v58 = v57[2];
            }
            v59 = *(_QWORD *)(v58 + 64);
            v60 = (std::mutex *)(v59 + 32);
            std::mutex::lock((std::mutex *)(v59 + 32));
            v62 = *(_QWORD *)(v59 + 96);
            v61 = *(_QWORD *)(v59 + 104);
            std::mutex::unlock(v60);
            if (v62 != v61)
              break;
          }
        }
      }
LABEL_85:
      v67 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v67 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        __dst = *(std::string *)byte_25578BAF8;
      v68 = std::string::append(&__dst, ".", 1uLL);
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v68->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      v70 = a3[23];
      if (v70 >= 0)
        v71 = a3;
      else
        v71 = *(const std::string::value_type **)a3;
      if (v70 >= 0)
        v72 = *((unsigned __int8 *)a3 + 23);
      else
        v72 = *((_QWORD *)a3 + 1);
      v73 = std::string::append((std::string *)v812, v71, v72);
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v73->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      if (v838[7] >= 0)
        v75 = __p;
      else
        v75 = (void **)__p[0];
      v76 = strlen((const char *)v75);
      sub_2241471F8();
      v77 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v75, v76);
      v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 24))(v77);
      if ((v838[7] & 0x80000000) != 0)
      {
        operator delete(__p[0]);
        if ((v812[23] & 0x80000000) == 0)
        {
LABEL_100:
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_105;
          goto LABEL_101;
        }
      }
      else if ((v812[23] & 0x80000000) == 0)
      {
        goto LABEL_100;
      }
      operator delete(*(void **)v812);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_105:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v78)
          goto LABEL_195;
        goto LABEL_106;
      }
LABEL_101:
      if (!v78)
        goto LABEL_195;
LABEL_106:
      v79 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v79 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v819, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v819 = *(std::string *)byte_25578BAF8;
      v80 = std::string::append(&v819, ".", 1uLL);
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v820.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v820.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      v82 = a3[23];
      if (v82 >= 0)
        v83 = a3;
      else
        v83 = *(const std::string::value_type **)a3;
      if (v82 >= 0)
        v84 = *((unsigned __int8 *)a3 + 23);
      else
        v84 = *((_QWORD *)a3 + 1);
      v85 = std::string::append(&v820, v83, v84);
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&__dst, ".", 1uLL);
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v87->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      v89 = std::string::append((std::string *)v812, "Planes", 6uLL);
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v89->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      if (v838[7] >= 0)
        v91 = __p;
      else
        v91 = (void **)__p[0];
      v92 = strlen((const char *)v91);
      sub_2241471F8();
      v93 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v91, v92);
      if ((v838[7] & 0x80000000) != 0)
      {
        operator delete(__p[0]);
        if ((v812[23] & 0x80000000) == 0)
        {
LABEL_121:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_122;
          goto LABEL_132;
        }
      }
      else if ((v812[23] & 0x80000000) == 0)
      {
        goto LABEL_121;
      }
      operator delete(*(void **)v812);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_122:
        if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_133;
        goto LABEL_123;
      }
LABEL_132:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_133:
        operator delete(v820.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_124;
        goto LABEL_134;
      }
LABEL_123:
      if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_124;
LABEL_134:
      operator delete(v819.__r_.__value_.__l.__data_);
LABEL_124:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93))
      {
        v94 = atomic_load((unsigned __int8 *)&unk_25578BB10);
        if ((v94 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
        {
          __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
          __cxa_guard_release((__guard *)&unk_25578BB10);
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93))
        {
          v819.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
          v819.__r_.__value_.__l.__size_ = size & 0xFFFFFFFFFFFFFF00 | 2;
          size = v819.__r_.__value_.__l.__size_;
          v95 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93))
          {
            sub_22339DD54((uint64_t)__p, (float32x2_t *)v821);
            if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
              sub_223197FA4(v812, v815.__r_.__value_.__l.__data_, v815.__r_.__value_.__l.__size_);
            else
              *(std::string *)v812 = v815;
            v812[24] = 1;
            sub_22329F414((uint64_t)__p, (__int128 *)v812, (__int128 *)&v819, &__dst);
            if (v812[24] && (v812[23] & 0x80000000) != 0)
              operator delete(*(void **)v812);
            sub_22316F8F4((uint64_t *)__p);
            v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v93 + 56))(v93);
            v109 = *(void **)v108;
            v110 = *(std::__shared_weak_count **)(v108 + 8);
            if (v110)
            {
              p_shared_owners = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldxr(p_shared_owners);
              while (__stxr(v112 + 1, p_shared_owners));
            }
            v113 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
            v820.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
            __p[0] = v109;
            __p[1] = v110;
            if (v110)
            {
              v114 = (unint64_t *)&v110->__shared_owners_;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
            }
            *(_QWORD *)v838 = &off_24EC6A3B8;
            *(_OWORD *)&v838[8] = v113;
            if (*((_QWORD *)&v113 + 1))
            {
              v116 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
              do
                v117 = __ldxr(v116);
              while (__stxr(v117 + 1, v116));
            }
            (*(void (**)(uint64_t *, void **))(*v95 + 16))(v95, __p);
            v118 = *(std::__shared_weak_count **)&v838[16];
            if (*(_QWORD *)&v838[16])
            {
              v119 = (unint64_t *)(*(_QWORD *)&v838[16] + 8);
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            v121 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v122 = (unint64_t *)((char *)__p[1] + 8);
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                std::__shared_weak_count::__release_weak(v121);
              }
            }
            v124 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
            if (v820.__r_.__value_.__r.__words[2])
            {
              v125 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            if (v110)
            {
              v127 = (unint64_t *)&v110->__shared_owners_;
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v129 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
            if (__dst.__r_.__value_.__r.__words[2])
            {
              v130 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
          }
        }
      }
LABEL_195:
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v132 = sub_2241471F8();
        v133 = v132[2];
        if (!v133)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_1349;
          }
          v133 = v132[2];
        }
        v134 = *(_QWORD *)(v133 + 64);
        v135 = (std::mutex *)(v134 + 32);
        std::mutex::lock((std::mutex *)(v134 + 32));
        v137 = *(_QWORD *)(v134 + 96);
        v136 = *(_QWORD *)(v134 + 104);
        std::mutex::unlock(v135);
        if (v137 != v136)
        {
          __p[0] = "cv3d.recon.";
          __p[1] = (void *)11;
          v138 = *((unsigned __int8 *)a3 + 23);
          if ((v138 & 0x80u) == 0)
            v139 = a3;
          else
            v139 = *(const std::string::value_type **)a3;
          if ((v138 & 0x80u) != 0)
            v138 = *((_QWORD *)a3 + 1);
          *(_QWORD *)v838 = v139;
          *(_QWORD *)&v838[8] = v138;
          sub_2231A9820((uint64_t)__p, (uint64_t)&v838[16], 0, 0, (std::string *)v812);
          v140 = v812[23];
          v141 = *(_OWORD *)v812;
          sub_2241471F8();
          v142 = (v140 & 0x80u) == 0 ? v812 : (_BYTE *)v141;
          v143 = (v140 & 0x80u) == 0 ? v140 : *((_QWORD *)&v141 + 1);
          v144 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v142, v143);
          v145 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 24))(v144);
          v146 = v145;
          if ((v812[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v812);
            if (!v146)
              goto LABEL_227;
          }
          else if (!v145)
          {
            goto LABEL_227;
          }
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v147 = sub_2241471F8();
            v148 = v147[2];
            if (!v148)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
LABEL_1349:
                abort();
              }
              v148 = v147[2];
            }
            v149 = *(_QWORD *)(v148 + 64);
            v150 = (std::mutex *)(v149 + 32);
            std::mutex::lock((std::mutex *)(v149 + 32));
            v152 = *(_QWORD *)(v149 + 96);
            v151 = *(_QWORD *)(v149 + 104);
            std::mutex::unlock(v150);
            if (v152 != v151)
            {
              v153 = a3[23];
              if (v153 >= 0)
                v154 = *((unsigned __int8 *)a3 + 23);
              else
                v154 = *((_QWORD *)a3 + 1);
              v155 = v154 + 1;
              if (v154 + 1 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v155 >= 0x17)
              {
                v193 = (v155 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v155 | 7) != 0x17)
                  v193 = v155 | 7;
                v194 = v193 + 1;
                p_dst = (char *)operator new(v193 + 1);
                __dst.__r_.__value_.__l.__size_ = v154 + 1;
                __dst.__r_.__value_.__r.__words[2] = v194 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                p_dst = (char *)&__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v154 + 1;
                if (!v154)
                  goto LABEL_298;
              }
              if (v153 >= 0)
                v195 = a3;
              else
                v195 = *(const std::string::value_type **)a3;
              memmove(p_dst, v195, v154);
LABEL_298:
              v39 = v809;
              *(_WORD *)&p_dst[v154] = 46;
              v196 = std::string::append(&__dst, "Planes", 6uLL);
              v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
              *(_QWORD *)&v812[16] = *((_QWORD *)&v196->__r_.__value_.__l + 2);
              *(_OWORD *)v812 = v197;
              v196->__r_.__value_.__l.__size_ = 0;
              v196->__r_.__value_.__r.__words[2] = 0;
              v196->__r_.__value_.__r.__words[0] = 0;
              __p[0] = "cv3d.recon.";
              __p[1] = (void *)11;
              v198 = v812[23];
              v199 = v812;
              if (v812[23] < 0)
              {
                v198 = *(_QWORD *)&v812[8];
                v199 = *(_BYTE **)v812;
              }
              *(_QWORD *)v838 = v199;
              *(_QWORD *)&v838[8] = v198;
              sub_2231A9820((uint64_t)__p, (uint64_t)&v838[16], 0, 0, &v816);
              if ((v812[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v812);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_360;
              }
              else
              {
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_302;
LABEL_360:
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
LABEL_302:
              v200 = HIBYTE(v816.__r_.__value_.__r.__words[2]);
              v201 = *(_OWORD *)&v816.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v200 & 0x80u) == 0)
                v202 = &v816;
              else
                v202 = (std::string *)v201;
              if ((v200 & 0x80u) == 0)
                v203 = v200;
              else
                v203 = *((_QWORD *)&v201 + 1);
              v204 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v202, v203);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v204 + 24))(v204))
              {
                memset(v812, 0, sizeof(v812));
                v813 = 728325616;
                kdebug_trace();
                v205 = SHIBYTE(v815.__r_.__value_.__r.__words[2]);
                if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v206 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
                else
                  v206 = v815.__r_.__value_.__l.__size_;
                v207 = v206 + 7;
                if (v206 + 7 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                if (v207 >= 0x17)
                {
                  v239 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v207 | 7) != 0x17)
                    v239 = v207 | 7;
                  v240 = v239 + 1;
                  v208 = (std::string *)operator new(v239 + 1);
                  v814.__r_.__value_.__l.__size_ = v206 + 7;
                  v814.__r_.__value_.__r.__words[2] = v240 | 0x8000000000000000;
                  v814.__r_.__value_.__r.__words[0] = (std::string::size_type)v208;
                }
                else
                {
                  memset(&v814, 0, sizeof(v814));
                  v208 = &v814;
                  *((_BYTE *)&v814.__r_.__value_.__s + 23) = v206 + 7;
                  if (!v206)
                    goto LABEL_390;
                }
                if (v205 >= 0)
                  v241 = &v815;
                else
                  v241 = (std::string *)v815.__r_.__value_.__r.__words[0];
                memmove(v208, v241, v206);
LABEL_390:
                v39 = v809;
                strcpy((char *)v208 + v206, "_origin");
                v242 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v204 + 24))(v204);
                v243 = SHIBYTE(v814.__r_.__value_.__r.__words[2]);
                if (v242)
                {
                  v836[0] = v814.__r_.__value_.__l.__size_;
                  v244 = (void *)v814.__r_.__value_.__r.__words[0];
                  *(_QWORD *)((char *)v836 + 7) = *(std::string::size_type *)((char *)&v814.__r_.__value_.__r.__words[1]
                                                                            + 7);
                  memset(&v814, 0, sizeof(v814));
                  *(_QWORD *)&v835 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  v801 = v801 & 0xFFFFFFFFFFFFFF00 | 2;
                  *((_QWORD *)&v835 + 1) = v801;
                  v245 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v204 + 24))(v204))
                  {
                    sub_22339ECFC((unint64_t *)__p, v823);
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v244;
                    __dst.__r_.__value_.__l.__size_ = v836[0];
                    *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v836 + 7);
                    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v243;
                    v836[0] = 0;
                    *(_QWORD *)((char *)v836 + 7) = 0;
                    v818 = 1;
                    sub_22329F414((uint64_t)__p, (__int128 *)&__dst, &v835, &v820);
                    if (v818 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__dst.__r_.__value_.__l.__data_);
                    sub_22316F8F4((uint64_t *)__p);
                    v246 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v204 + 56))(v204);
                    v247 = *(void **)v246;
                    v248 = *(std::__shared_weak_count **)(v246 + 8);
                    if (v248)
                    {
                      v249 = (unint64_t *)&v248->__shared_owners_;
                      do
                        v250 = __ldxr(v249);
                      while (__stxr(v250 + 1, v249));
                    }
                    v251 = *(_OWORD *)&v820.__r_.__value_.__r.__words[1];
                    v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                    *(_OWORD *)&v819.__r_.__value_.__r.__words[1] = *(_OWORD *)&v820.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = 0uLL;
                    __p[0] = v247;
                    __p[1] = v248;
                    if (v248)
                    {
                      v252 = (unint64_t *)&v248->__shared_owners_;
                      do
                        v253 = __ldxr(v252);
                      while (__stxr(v253 + 1, v252));
                    }
                    *(_QWORD *)v838 = &off_24EC6A3B8;
                    *(_OWORD *)&v838[8] = v251;
                    if (*((_QWORD *)&v251 + 1))
                    {
                      v254 = (unint64_t *)(*((_QWORD *)&v251 + 1) + 8);
                      do
                        v255 = __ldxr(v254);
                      while (__stxr(v255 + 1, v254));
                    }
                    (*(void (**)(uint64_t *, void **))(*v245 + 16))(v245, __p);
                    v256 = *(std::__shared_weak_count **)&v838[16];
                    if (*(_QWORD *)&v838[16])
                    {
                      v257 = (unint64_t *)(*(_QWORD *)&v838[16] + 8);
                      do
                        v258 = __ldaxr(v257);
                      while (__stlxr(v258 - 1, v257));
                      if (!v258)
                      {
                        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                        std::__shared_weak_count::__release_weak(v256);
                      }
                    }
                    v259 = (std::__shared_weak_count *)__p[1];
                    if (__p[1])
                    {
                      v260 = (unint64_t *)((char *)__p[1] + 8);
                      do
                        v261 = __ldaxr(v260);
                      while (__stlxr(v261 - 1, v260));
                      if (!v261)
                      {
                        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                        std::__shared_weak_count::__release_weak(v259);
                      }
                    }
                    v262 = (std::__shared_weak_count *)v819.__r_.__value_.__r.__words[2];
                    if (v819.__r_.__value_.__r.__words[2])
                    {
                      v263 = (unint64_t *)(v819.__r_.__value_.__r.__words[2] + 8);
                      do
                        v264 = __ldaxr(v263);
                      while (__stlxr(v264 - 1, v263));
                      if (!v264)
                      {
                        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
                        std::__shared_weak_count::__release_weak(v262);
                      }
                    }
                    if (v248)
                    {
                      v265 = (unint64_t *)&v248->__shared_owners_;
                      do
                        v266 = __ldaxr(v265);
                      while (__stlxr(v266 - 1, v265));
                      if (!v266)
                      {
                        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                        std::__shared_weak_count::__release_weak(v248);
                      }
                    }
                    v267 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
                    if (v820.__r_.__value_.__r.__words[2])
                    {
                      v268 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
                      do
                        v269 = __ldaxr(v268);
                      while (__stlxr(v269 - 1, v268));
                      if (!v269)
                      {
                        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                        std::__shared_weak_count::__release_weak(v267);
                      }
                    }
                    LOBYTE(v243) = *((_BYTE *)&v814.__r_.__value_.__s + 23);
                    goto LABEL_430;
                  }
                  if (v243 < 0)
                    operator delete(v244);
                }
                else
                {
LABEL_430:
                  if ((v243 & 0x80) != 0)
                    operator delete(v814.__r_.__value_.__l.__data_);
                }
                kdebug_trace();
              }
              if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v816.__r_.__value_.__l.__data_);
            }
          }
        }
      }
LABEL_227:
      v157 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v157 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        __dst = *(std::string *)byte_25578BAF8;
      v158 = std::string::append(&__dst, ".", 1uLL);
      v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v158->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v159;
      v158->__r_.__value_.__l.__size_ = 0;
      v158->__r_.__value_.__r.__words[2] = 0;
      v158->__r_.__value_.__r.__words[0] = 0;
      v160 = a3[23];
      if (v160 >= 0)
        v161 = a3;
      else
        v161 = *(const std::string::value_type **)a3;
      if (v160 >= 0)
        v162 = *((unsigned __int8 *)a3 + 23);
      else
        v162 = *((_QWORD *)a3 + 1);
      v163 = std::string::append((std::string *)v812, v161, v162);
      v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v163->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v164;
      v163->__r_.__value_.__l.__size_ = 0;
      v163->__r_.__value_.__r.__words[2] = 0;
      v163->__r_.__value_.__r.__words[0] = 0;
      if (v838[7] >= 0)
        v165 = __p;
      else
        v165 = (void **)__p[0];
      v166 = strlen((const char *)v165);
      sub_2241471F8();
      v167 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v165, v166);
      v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 24))(v167);
      if ((v838[7] & 0x80000000) != 0)
      {
        operator delete(__p[0]);
        if ((v812[23] & 0x80000000) == 0)
        {
LABEL_242:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_243;
          goto LABEL_247;
        }
      }
      else if ((v812[23] & 0x80000000) == 0)
      {
        goto LABEL_242;
      }
      operator delete(*(void **)v812);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_243:
        if (!v168)
          goto LABEL_354;
        goto LABEL_248;
      }
LABEL_247:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (!v168)
        goto LABEL_354;
LABEL_248:
      v169 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v169 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v819, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v819 = *(std::string *)byte_25578BAF8;
      v170 = std::string::append(&v819, ".", 1uLL);
      v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
      v820.__r_.__value_.__r.__words[2] = v170->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v820.__r_.__value_.__l.__data_ = v171;
      v170->__r_.__value_.__l.__size_ = 0;
      v170->__r_.__value_.__r.__words[2] = 0;
      v170->__r_.__value_.__r.__words[0] = 0;
      v172 = a3[23];
      if (v172 >= 0)
        v173 = a3;
      else
        v173 = *(const std::string::value_type **)a3;
      if (v172 >= 0)
        v174 = *((unsigned __int8 *)a3 + 23);
      else
        v174 = *((_QWORD *)a3 + 1);
      v175 = std::string::append(&v820, v173, v174);
      v176 = *(_OWORD *)&v175->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v175->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v176;
      v175->__r_.__value_.__l.__size_ = 0;
      v175->__r_.__value_.__r.__words[2] = 0;
      v175->__r_.__value_.__r.__words[0] = 0;
      v177 = std::string::append(&__dst, ".", 1uLL);
      v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v177->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v178;
      v177->__r_.__value_.__l.__size_ = 0;
      v177->__r_.__value_.__r.__words[2] = 0;
      v177->__r_.__value_.__r.__words[0] = 0;
      v179 = std::string::append((std::string *)v812, "Planes", 6uLL);
      v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v179->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v180;
      v179->__r_.__value_.__l.__size_ = 0;
      v179->__r_.__value_.__r.__words[2] = 0;
      v179->__r_.__value_.__r.__words[0] = 0;
      if (v838[7] >= 0)
        v181 = __p;
      else
        v181 = (void **)__p[0];
      v182 = strlen((const char *)v181);
      sub_2241471F8();
      v183 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v181, v182);
      if ((v838[7] & 0x80000000) != 0)
      {
        operator delete(__p[0]);
        if ((v812[23] & 0x80000000) == 0)
        {
LABEL_263:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_264;
          goto LABEL_277;
        }
      }
      else if ((v812[23] & 0x80000000) == 0)
      {
        goto LABEL_263;
      }
      operator delete(*(void **)v812);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_264:
        if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_278;
        goto LABEL_265;
      }
LABEL_277:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_278:
        operator delete(v820.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_266;
        goto LABEL_279;
      }
LABEL_265:
      if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_266;
LABEL_279:
      operator delete(v819.__r_.__value_.__l.__data_);
LABEL_266:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v183 + 24))(v183))
        goto LABEL_354;
      v184 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v184 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      v185 = SHIBYTE(v815.__r_.__value_.__r.__words[2]);
      if ((v815.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v186 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      else
        v186 = v815.__r_.__value_.__l.__size_;
      v187 = v186 + 7;
      if (v186 + 7 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v187 >= 0x17)
      {
        v189 = (v187 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v187 | 7) != 0x17)
          v189 = v187 | 7;
        v190 = v189 + 1;
        v188 = operator new(v189 + 1);
        v819.__r_.__value_.__l.__size_ = v186 + 7;
        v819.__r_.__value_.__r.__words[2] = v190 | 0x8000000000000000;
        v819.__r_.__value_.__r.__words[0] = (std::string::size_type)v188;
LABEL_283:
        if (v185 >= 0)
          v191 = &v815;
        else
          v191 = (std::string *)v815.__r_.__value_.__r.__words[0];
        memmove(v188, v191, v186);
        goto LABEL_287;
      }
      memset(&v819, 0, sizeof(v819));
      v188 = &v819;
      *((_BYTE *)&v819.__r_.__value_.__s + 23) = v186 + 7;
      if (v186)
        goto LABEL_283;
LABEL_287:
      v39 = v809;
      strcpy((char *)v188 + v186, "_origin");
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v183 + 24))(v183))
        goto LABEL_353;
      v816.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      v816.__r_.__value_.__l.__size_ = v807 & 0xFFFFFFFFFFFFFF00 | 2;
      v807 = v816.__r_.__value_.__l.__size_;
      v192 = sub_2241471F8();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v183 + 24))(v183))
        goto LABEL_353;
      sub_22339ECFC((unint64_t *)__p, v823);
      if (SHIBYTE(v819.__r_.__value_.__r.__words[2]) < 0)
        sub_223197FA4(v812, v819.__r_.__value_.__l.__data_, v819.__r_.__value_.__l.__size_);
      else
        *(std::string *)v812 = v819;
      v812[24] = 1;
      sub_22329F414((uint64_t)__p, (__int128 *)v812, (__int128 *)&v816, &__dst);
      if (v812[24] && (v812[23] & 0x80000000) != 0)
        operator delete(*(void **)v812);
      sub_22316F8F4((uint64_t *)__p);
      v209 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v183 + 56))(v183);
      v210 = *(void **)v209;
      v211 = *(std::__shared_weak_count **)(v209 + 8);
      if (v211)
      {
        v212 = (unint64_t *)&v211->__shared_owners_;
        do
          v213 = __ldxr(v212);
        while (__stxr(v213 + 1, v212));
      }
      v214 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
      v820.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
      *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
      *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
      __p[0] = v210;
      __p[1] = v211;
      if (v211)
      {
        v215 = (unint64_t *)&v211->__shared_owners_;
        do
          v216 = __ldxr(v215);
        while (__stxr(v216 + 1, v215));
      }
      *(_QWORD *)v838 = &off_24EC6A3B8;
      *(_OWORD *)&v838[8] = v214;
      if (*((_QWORD *)&v214 + 1))
      {
        v217 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
        do
          v218 = __ldxr(v217);
        while (__stxr(v218 + 1, v217));
      }
      (*(void (**)(uint64_t *, void **))(*v192 + 16))(v192, __p);
      v219 = *(std::__shared_weak_count **)&v838[16];
      if (*(_QWORD *)&v838[16])
      {
        v220 = (unint64_t *)(*(_QWORD *)&v838[16] + 8);
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
      v222 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v223 = (unint64_t *)((char *)__p[1] + 8);
        do
          v224 = __ldaxr(v223);
        while (__stlxr(v224 - 1, v223));
        if (!v224)
        {
          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
          std::__shared_weak_count::__release_weak(v222);
        }
      }
      v225 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
      if (v820.__r_.__value_.__r.__words[2])
      {
        v226 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (!v227)
        {
          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
          std::__shared_weak_count::__release_weak(v225);
        }
      }
      if (!v211)
        goto LABEL_349;
      v228 = (unint64_t *)&v211->__shared_owners_;
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
        v230 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
        if (!__dst.__r_.__value_.__r.__words[2])
          goto LABEL_353;
      }
      else
      {
LABEL_349:
        v230 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
        if (!__dst.__r_.__value_.__r.__words[2])
          goto LABEL_353;
      }
      v231 = (unint64_t *)&v230->__shared_owners_;
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (v232)
      {
LABEL_353:
        if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_354;
        goto LABEL_364;
      }
      ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
      std::__shared_weak_count::__release_weak(v230);
      if ((SHIBYTE(v819.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_354:
        if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_355;
        goto LABEL_365;
      }
LABEL_364:
      operator delete(v819.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v815.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_355:
        if (v834)
          goto LABEL_366;
        goto LABEL_374;
      }
LABEL_365:
      operator delete(v815.__r_.__value_.__l.__data_);
      if (v834)
      {
LABEL_366:
        v233 = (char *)v832;
        if (v832)
        {
          v234 = v833;
          v235 = v832;
          if (v833 != v832)
          {
            v236 = v833;
            do
            {
              v238 = (void *)*((_QWORD *)v236 - 3);
              v236 -= 24;
              v237 = v238;
              if (v238)
              {
                *((_QWORD *)v234 - 2) = v237;
                operator delete(v237);
              }
              v234 = v236;
            }
            while (v236 != v233);
            v235 = v832;
          }
          v833 = v233;
          operator delete(v235);
        }
      }
LABEL_374:
      if (v831 && v829)
      {
        v830 = v829;
        operator delete(v829);
      }
      if (v828 && v826)
      {
        v827 = v826;
        operator delete(v826);
      }
      if (v824)
      {
        v825 = v824;
        operator delete(v824);
      }
      v38 += 464;
      if (v38 == v39)
        goto LABEL_494;
    }
    v63 = a3[23];
    if (v63 >= 0)
      v64 = *((unsigned __int8 *)a3 + 23);
    else
      v64 = *((_QWORD *)a3 + 1);
    v65 = v64 + 1;
    if (v64 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v65 >= 0x17)
    {
      v96 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v65 | 7) != 0x17)
        v96 = v65 | 7;
      v97 = v96 + 1;
      v66 = (char *)operator new(v96 + 1);
      __dst.__r_.__value_.__l.__size_ = v64 + 1;
      __dst.__r_.__value_.__r.__words[2] = v97 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      v66 = (char *)&__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v64 + 1;
      if (!v64)
        goto LABEL_142;
    }
    if (v63 >= 0)
      v98 = a3;
    else
      v98 = *(const std::string::value_type **)a3;
    memmove(v66, v98, v64);
LABEL_142:
    v39 = v809;
    *(_WORD *)&v66[v64] = 46;
    v99 = std::string::append(&__dst, "Planes", 6uLL);
    v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    *(_QWORD *)&v812[16] = *((_QWORD *)&v99->__r_.__value_.__l + 2);
    *(_OWORD *)v812 = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    __p[0] = "cv3d.recon.";
    __p[1] = (void *)11;
    v101 = v812[23];
    v102 = v812;
    if (v812[23] < 0)
    {
      v101 = *(_QWORD *)&v812[8];
      v102 = *(_BYTE **)v812;
    }
    *(_QWORD *)v838 = v102;
    *(_QWORD *)&v838[8] = v101;
    sub_2231A9820((uint64_t)__p, (uint64_t)&v838[16], 0, 0, &v814);
    if ((v812[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v812);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_146;
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_146:
      v103 = HIBYTE(v814.__r_.__value_.__r.__words[2]);
      v104 = *(_OWORD *)&v814.__r_.__value_.__l.__data_;
      sub_2241471F8();
      if ((v103 & 0x80u) == 0)
        v105 = &v814;
      else
        v105 = (std::string *)v104;
      if ((v103 & 0x80u) == 0)
        v106 = v103;
      else
        v106 = *((_QWORD *)&v104 + 1);
      v107 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v105, v106);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
      {
        memset(v812, 0, sizeof(v812));
        v813 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
        {
          if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v816, v815.__r_.__value_.__l.__data_, v815.__r_.__value_.__l.__size_);
          else
            v816 = v815;
          *(_QWORD *)&v835 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v802 = v802 & 0xFFFFFFFFFFFFFF00 | 2;
          *((_QWORD *)&v835 + 1) = v802;
          v270 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v107 + 24))(v107))
          {
            sub_22339DD54((uint64_t)__p, (float32x2_t *)v821);
            __dst = v816;
            memset(&v816, 0, sizeof(v816));
            v818 = 1;
            sub_22329F414((uint64_t)__p, (__int128 *)&__dst, &v835, &v820);
            if (v818 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            sub_22316F8F4((uint64_t *)__p);
            v271 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v107 + 56))(v107);
            v272 = *(void **)v271;
            v273 = *(std::__shared_weak_count **)(v271 + 8);
            if (v273)
            {
              v274 = (unint64_t *)&v273->__shared_owners_;
              do
                v275 = __ldxr(v274);
              while (__stxr(v275 + 1, v274));
            }
            v276 = *(_OWORD *)&v820.__r_.__value_.__r.__words[1];
            v819.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v819.__r_.__value_.__r.__words[1] = *(_OWORD *)&v820.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = 0uLL;
            __p[0] = v272;
            __p[1] = v273;
            if (v273)
            {
              v277 = (unint64_t *)&v273->__shared_owners_;
              do
                v278 = __ldxr(v277);
              while (__stxr(v278 + 1, v277));
            }
            *(_QWORD *)v838 = &off_24EC6A3B8;
            *(_OWORD *)&v838[8] = v276;
            if (*((_QWORD *)&v276 + 1))
            {
              v279 = (unint64_t *)(*((_QWORD *)&v276 + 1) + 8);
              do
                v280 = __ldxr(v279);
              while (__stxr(v280 + 1, v279));
            }
            (*(void (**)(uint64_t *, void **))(*v270 + 16))(v270, __p);
            v281 = *(std::__shared_weak_count **)&v838[16];
            if (*(_QWORD *)&v838[16])
            {
              v282 = (unint64_t *)(*(_QWORD *)&v838[16] + 8);
              do
                v283 = __ldaxr(v282);
              while (__stlxr(v283 - 1, v282));
              if (!v283)
              {
                ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
                std::__shared_weak_count::__release_weak(v281);
              }
            }
            v284 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v285 = (unint64_t *)((char *)__p[1] + 8);
              do
                v286 = __ldaxr(v285);
              while (__stlxr(v286 - 1, v285));
              if (!v286)
              {
                ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                std::__shared_weak_count::__release_weak(v284);
              }
            }
            v287 = (std::__shared_weak_count *)v819.__r_.__value_.__r.__words[2];
            if (v819.__r_.__value_.__r.__words[2])
            {
              v288 = (unint64_t *)(v819.__r_.__value_.__r.__words[2] + 8);
              do
                v289 = __ldaxr(v288);
              while (__stlxr(v289 - 1, v288));
              if (!v289)
              {
                ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                std::__shared_weak_count::__release_weak(v287);
              }
            }
            if (v273)
            {
              v290 = (unint64_t *)&v273->__shared_owners_;
              do
                v291 = __ldaxr(v290);
              while (__stlxr(v291 - 1, v290));
              if (!v291)
              {
                ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                std::__shared_weak_count::__release_weak(v273);
              }
            }
            v292 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
            if (v820.__r_.__value_.__r.__words[2])
            {
              v293 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
              do
                v294 = __ldaxr(v293);
              while (__stlxr(v294 - 1, v293));
              if (!v294)
              {
                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                std::__shared_weak_count::__release_weak(v292);
              }
            }
          }
          if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v816.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v814.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v814.__r_.__value_.__l.__data_);
      goto LABEL_85;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_146;
  }
LABEL_494:
  v295 = *a2;
  v296 = a2[1];
  if (*a2 != v296)
  {
    v803 = (std::string::size_type)v822;
    v805 = (std::string::size_type)&v815.__r_.__value_.__l.__size_;
    v810 = a2[1];
    while (1)
    {
      sub_2245664AC(v295, v821);
      v297 = operator new(0x28uLL);
      v816.__r_.__value_.__r.__words[0] = (std::string::size_type)v297;
      *(_OWORD *)&v816.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
      v298 = *(_OWORD *)v822;
      *v297 = *(_OWORD *)v821;
      v297[1] = v298;
      *((_DWORD *)v297 + 8) = *(_DWORD *)&v822[16];
      *((_BYTE *)v297 + 36) = 0;
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v299 = sub_2241471F8();
        v300 = v299[2];
        if (!v300)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_1350;
          }
          v300 = v299[2];
        }
        v301 = *(_QWORD *)(v300 + 64);
        v302 = (std::mutex *)(v301 + 32);
        std::mutex::lock((std::mutex *)(v301 + 32));
        v304 = *(_QWORD *)(v301 + 96);
        v303 = *(_QWORD *)(v301 + 104);
        std::mutex::unlock(v302);
        if (v304 != v303)
        {
          v821[0] = "cv3d.recon.";
          v821[1] = (void *)11;
          v305 = *((unsigned __int8 *)a3 + 23);
          if ((v305 & 0x80u) == 0)
            v306 = a3;
          else
            v306 = *(const std::string::value_type **)a3;
          if ((v305 & 0x80u) != 0)
            v305 = *((_QWORD *)a3 + 1);
          *(_QWORD *)v822 = v306;
          *(_QWORD *)&v822[8] = v305;
          sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, (std::string *)__p);
          v307 = (void *)v838[7];
          v308 = (void **)__p[0];
          v309 = __p[1];
          sub_2241471F8();
          v310 = (char)v307 >= 0 ? __p : v308;
          v311 = (char)v307 >= 0 ? v307 : v309;
          v312 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v310, v311);
          v313 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v312 + 24))(v312);
          v314 = v313;
          if ((v838[7] & 0x80000000) != 0)
          {
            operator delete(__p[0]);
            if (!v314)
              goto LABEL_534;
          }
          else if (!v313)
          {
            goto LABEL_534;
          }
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v315 = sub_2241471F8();
            v316 = v315[2];
            if (!v316)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_1350;
              }
              v316 = v315[2];
            }
            v317 = *(_QWORD *)(v316 + 64);
            v318 = (std::mutex *)(v317 + 32);
            std::mutex::lock((std::mutex *)(v317 + 32));
            v320 = *(_QWORD *)(v317 + 96);
            v319 = *(_QWORD *)(v317 + 104);
            std::mutex::unlock(v318);
            if (v320 != v319)
              break;
          }
        }
      }
LABEL_534:
      v325 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v325 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
      {
        sub_223197FA4(v812, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      }
      else
      {
        *(_OWORD *)v812 = *(_OWORD *)byte_25578BAF8;
        *(_QWORD *)&v812[16] = *(_QWORD *)&byte_25578BAF8[16];
      }
      v326 = std::string::append((std::string *)v812, ".", 1uLL);
      v327 = *(_OWORD *)&v326->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v326->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v327;
      v326->__r_.__value_.__l.__size_ = 0;
      v326->__r_.__value_.__r.__words[2] = 0;
      v326->__r_.__value_.__r.__words[0] = 0;
      v328 = a3[23];
      if (v328 >= 0)
        v329 = a3;
      else
        v329 = *(const std::string::value_type **)a3;
      if (v328 >= 0)
        v330 = *((unsigned __int8 *)a3 + 23);
      else
        v330 = *((_QWORD *)a3 + 1);
      v331 = std::string::append((std::string *)__p, v329, v330);
      v332 = *(_OWORD *)&v331->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v331->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v332;
      v331->__r_.__value_.__l.__size_ = 0;
      v331->__r_.__value_.__r.__words[2] = 0;
      v331->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v333 = v821;
      else
        v333 = (void **)v821[0];
      v334 = strlen((const char *)v333);
      sub_2241471F8();
      v335 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v333, v334);
      v336 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v335 + 24))(v335);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_549:
          if ((v812[23] & 0x80000000) != 0)
            goto LABEL_554;
          goto LABEL_550;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_549;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) != 0)
      {
LABEL_554:
        operator delete(*(void **)v812);
        if (!v336)
          goto LABEL_644;
        goto LABEL_555;
      }
LABEL_550:
      if (!v336)
        goto LABEL_644;
LABEL_555:
      v337 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v337 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v820, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v820 = *(std::string *)byte_25578BAF8;
      v338 = std::string::append(&v820, ".", 1uLL);
      v339 = *(_OWORD *)&v338->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v338->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v339;
      v338->__r_.__value_.__l.__size_ = 0;
      v338->__r_.__value_.__r.__words[2] = 0;
      v338->__r_.__value_.__r.__words[0] = 0;
      v340 = a3[23];
      if (v340 >= 0)
        v341 = a3;
      else
        v341 = *(const std::string::value_type **)a3;
      if (v340 >= 0)
        v342 = *((unsigned __int8 *)a3 + 23);
      else
        v342 = *((_QWORD *)a3 + 1);
      v343 = std::string::append(&__dst, v341, v342);
      v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v343->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v344;
      v343->__r_.__value_.__l.__size_ = 0;
      v343->__r_.__value_.__r.__words[2] = 0;
      v343->__r_.__value_.__r.__words[0] = 0;
      v345 = std::string::append((std::string *)v812, ".", 1uLL);
      v346 = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v345->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v346;
      v345->__r_.__value_.__l.__size_ = 0;
      v345->__r_.__value_.__r.__words[2] = 0;
      v345->__r_.__value_.__r.__words[0] = 0;
      v347 = std::string::append((std::string *)__p, "Planes", 6uLL);
      v348 = *(_OWORD *)&v347->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v347->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v348;
      v347->__r_.__value_.__l.__size_ = 0;
      v347->__r_.__value_.__r.__words[2] = 0;
      v347->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v349 = v821;
      else
        v349 = (void **)v821[0];
      v350 = strlen((const char *)v349);
      sub_2241471F8();
      v351 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v349, v350);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_570:
          if ((v812[23] & 0x80000000) == 0)
            goto LABEL_571;
          goto LABEL_581;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_570;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) == 0)
      {
LABEL_571:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_582;
        goto LABEL_572;
      }
LABEL_581:
      operator delete(*(void **)v812);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_582:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_573;
        goto LABEL_583;
      }
LABEL_572:
      if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_573;
LABEL_583:
      operator delete(v820.__r_.__value_.__l.__data_);
LABEL_573:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v351 + 24))(v351))
      {
        v352 = atomic_load((unsigned __int8 *)&unk_25578BB10);
        if ((v352 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
        {
          __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
          __cxa_guard_release((__guard *)&unk_25578BB10);
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v351 + 24))(v351))
        {
          v820.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
          v820.__r_.__value_.__l.__size_ = size & 0xFFFFFFFFFFFFFF00 | 2;
          size = v820.__r_.__value_.__l.__size_;
          v353 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v351 + 24))(v351))
          {
            sub_2241498F4((uint64_t)v821, 0);
            if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_223197FA4(__p, v816.__r_.__value_.__l.__data_, v816.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)&v816.__r_.__value_.__l.__data_;
              *(_QWORD *)v838 = *((_QWORD *)&v816.__r_.__value_.__l + 2);
            }
            v838[8] = 1;
            sub_22329F414((uint64_t)v821, (__int128 *)__p, (__int128 *)&v820, v812);
            if (v838[8] && (v838[7] & 0x80000000) != 0)
              operator delete(__p[0]);
            sub_22316F8F4((uint64_t *)v821);
            v366 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v351 + 56))(v351);
            v367 = *(void **)v366;
            v368 = *(std::__shared_weak_count **)(v366 + 8);
            if (v368)
            {
              v369 = (unint64_t *)&v368->__shared_owners_;
              do
                v370 = __ldxr(v369);
              while (__stxr(v370 + 1, v369));
            }
            v371 = *(_OWORD *)&v812[8];
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)&v812[8];
            *(_OWORD *)&v812[8] = 0uLL;
            v821[0] = v367;
            v821[1] = v368;
            if (v368)
            {
              v372 = (unint64_t *)&v368->__shared_owners_;
              do
                v373 = __ldxr(v372);
              while (__stxr(v373 + 1, v372));
            }
            *(_QWORD *)v822 = &off_24EC6A3B8;
            *(_OWORD *)&v822[8] = v371;
            if (*((_QWORD *)&v371 + 1))
            {
              v374 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
              do
                v375 = __ldxr(v374);
              while (__stxr(v375 + 1, v374));
            }
            (*(void (**)(uint64_t *, void **))(*v353 + 16))(v353, v821);
            v376 = *(std::__shared_weak_count **)&v822[16];
            if (*(_QWORD *)&v822[16])
            {
              v377 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
              do
                v378 = __ldaxr(v377);
              while (__stlxr(v378 - 1, v377));
              if (!v378)
              {
                ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                std::__shared_weak_count::__release_weak(v376);
              }
            }
            v379 = (std::__shared_weak_count *)v821[1];
            if (v821[1])
            {
              v380 = (unint64_t *)((char *)v821[1] + 8);
              do
                v381 = __ldaxr(v380);
              while (__stlxr(v381 - 1, v380));
              if (!v381)
              {
                ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                std::__shared_weak_count::__release_weak(v379);
              }
            }
            v382 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
            if (__dst.__r_.__value_.__r.__words[2])
            {
              v383 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
              do
                v384 = __ldaxr(v383);
              while (__stlxr(v384 - 1, v383));
              if (!v384)
              {
                ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                std::__shared_weak_count::__release_weak(v382);
              }
            }
            if (v368)
            {
              v385 = (unint64_t *)&v368->__shared_owners_;
              do
                v386 = __ldaxr(v385);
              while (__stlxr(v386 - 1, v385));
              if (!v386)
              {
                ((void (*)(std::__shared_weak_count *))v368->__on_zero_shared)(v368);
                std::__shared_weak_count::__release_weak(v368);
              }
            }
            v387 = *(std::__shared_weak_count **)&v812[16];
            if (*(_QWORD *)&v812[16])
            {
              v388 = (unint64_t *)(*(_QWORD *)&v812[16] + 8);
              do
                v389 = __ldaxr(v388);
              while (__stlxr(v389 - 1, v388));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                std::__shared_weak_count::__release_weak(v387);
              }
            }
          }
        }
      }
LABEL_644:
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v390 = sub_2241471F8();
        v391 = v390[2];
        if (!v391)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_1350;
          }
          v391 = v390[2];
        }
        v392 = *(_QWORD *)(v391 + 64);
        v393 = (std::mutex *)(v392 + 32);
        std::mutex::lock((std::mutex *)(v392 + 32));
        v395 = *(_QWORD *)(v392 + 96);
        v394 = *(_QWORD *)(v392 + 104);
        std::mutex::unlock(v393);
        if (v395 != v394)
        {
          v821[0] = "cv3d.recon.";
          v821[1] = (void *)11;
          v396 = *((unsigned __int8 *)a3 + 23);
          if ((v396 & 0x80u) == 0)
            v397 = a3;
          else
            v397 = *(const std::string::value_type **)a3;
          if ((v396 & 0x80u) != 0)
            v396 = *((_QWORD *)a3 + 1);
          *(_QWORD *)v822 = v397;
          *(_QWORD *)&v822[8] = v396;
          sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, (std::string *)__p);
          v398 = (void *)v838[7];
          v399 = (void **)__p[0];
          v400 = __p[1];
          sub_2241471F8();
          v401 = (char)v398 >= 0 ? __p : v399;
          v402 = (char)v398 >= 0 ? v398 : v400;
          v403 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v401, v402);
          v404 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v403 + 24))(v403);
          v405 = v404;
          if ((v838[7] & 0x80000000) != 0)
          {
            operator delete(__p[0]);
            if (!v405)
              goto LABEL_676;
          }
          else if (!v404)
          {
            goto LABEL_676;
          }
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v406 = sub_2241471F8();
            v407 = v406[2];
            if (!v407)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
LABEL_1350:
                abort();
              }
              v407 = v406[2];
            }
            v408 = *(_QWORD *)(v407 + 64);
            v409 = (std::mutex *)(v408 + 32);
            std::mutex::lock((std::mutex *)(v408 + 32));
            v411 = *(_QWORD *)(v408 + 96);
            v410 = *(_QWORD *)(v408 + 104);
            std::mutex::unlock(v409);
            if (v411 != v410)
            {
              v412 = a3[23];
              if (v412 >= 0)
                v413 = *((unsigned __int8 *)a3 + 23);
              else
                v413 = *((_QWORD *)a3 + 1);
              v414 = v413 + 1;
              if (v413 + 1 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v414 >= 0x17)
              {
                v452 = (v414 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v414 | 7) != 0x17)
                  v452 = v414 | 7;
                v453 = v452 + 1;
                v415 = operator new(v452 + 1);
                *(_QWORD *)&v812[8] = v413 + 1;
                *(_QWORD *)&v812[16] = v453 | 0x8000000000000000;
                *(_QWORD *)v812 = v415;
                v296 = v810;
              }
              else
              {
                memset(v812, 0, 24);
                v415 = v812;
                v812[23] = v413 + 1;
                if (!v413)
                  goto LABEL_747;
              }
              if (v412 >= 0)
                v454 = a3;
              else
                v454 = *(const std::string::value_type **)a3;
              memmove(v415, v454, v413);
LABEL_747:
              *(_WORD *)&v415[v413] = 46;
              v455 = std::string::append((std::string *)v812, "Planes", 6uLL);
              v456 = *(_OWORD *)&v455->__r_.__value_.__l.__data_;
              *(_QWORD *)v838 = *((_QWORD *)&v455->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v456;
              v455->__r_.__value_.__l.__size_ = 0;
              v455->__r_.__value_.__r.__words[2] = 0;
              v455->__r_.__value_.__r.__words[0] = 0;
              v821[0] = "cv3d.recon.";
              v821[1] = (void *)11;
              v457 = (void *)v838[7];
              v458 = __p;
              if (v838[7] < 0)
              {
                v458 = (void **)__p[0];
                v457 = __p[1];
              }
              *(_QWORD *)v822 = v458;
              *(_QWORD *)&v822[8] = v457;
              sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, &v819);
              if ((v838[7] & 0x80000000) != 0)
              {
                operator delete(__p[0]);
                if ((v812[23] & 0x80000000) != 0)
                  goto LABEL_807;
              }
              else
              {
                if ((v812[23] & 0x80000000) == 0)
                  goto LABEL_751;
LABEL_807:
                operator delete(*(void **)v812);
              }
LABEL_751:
              v459 = HIBYTE(v819.__r_.__value_.__r.__words[2]);
              v460 = *(_OWORD *)&v819.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v459 & 0x80u) == 0)
                v461 = &v819;
              else
                v461 = (std::string *)v460;
              if ((v459 & 0x80u) == 0)
                v462 = v459;
              else
                v462 = *((_QWORD *)&v460 + 1);
              v463 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v461, v462);
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v463 + 24))(v463))
                goto LABEL_863;
              *(_OWORD *)__p = 0u;
              *(_OWORD *)v838 = 0u;
              *(_DWORD *)&v838[16] = 728325616;
              kdebug_trace();
              v464 = SHIBYTE(v816.__r_.__value_.__r.__words[2]);
              if ((v816.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v465 = HIBYTE(v816.__r_.__value_.__r.__words[2]);
              else
                v465 = v816.__r_.__value_.__l.__size_;
              v466 = v465 + 7;
              if (v465 + 7 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v466 >= 0x17)
              {
                v492 = (v466 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v466 | 7) != 0x17)
                  v492 = v466 | 7;
                v493 = v492 + 1;
                v467 = (std::string *)operator new(v492 + 1);
                v815.__r_.__value_.__l.__size_ = v465 + 7;
                v815.__r_.__value_.__r.__words[2] = v493 | 0x8000000000000000;
                v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v467;
              }
              else
              {
                memset(&v815, 0, sizeof(v815));
                v467 = &v815;
                *((_BYTE *)&v815.__r_.__value_.__s + 23) = v465 + 7;
                if (!v465)
                  goto LABEL_816;
              }
              if (v464 >= 0)
                v494 = &v816;
              else
                v494 = (std::string *)v816.__r_.__value_.__r.__words[0];
              memmove(v467, v494, v465);
LABEL_816:
              strcpy((char *)v467 + v465, "_origin");
              v495 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v463 + 24))(v463);
              v496 = SHIBYTE(v815.__r_.__value_.__r.__words[2]);
              if (v495)
              {
                *(_QWORD *)&v835 = v815.__r_.__value_.__l.__size_;
                v497 = (void *)v815.__r_.__value_.__r.__words[0];
                *(_QWORD *)((char *)&v835 + 7) = *(std::string::size_type *)((char *)&v815.__r_.__value_.__r.__words[1]
                                                                           + 7);
                memset(&v815, 0, sizeof(v815));
                v814.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                v814.__r_.__value_.__l.__size_ = p_size & 0xFFFFFFFFFFFFFF00 | 2;
                p_size = v814.__r_.__value_.__l.__size_;
                v498 = sub_2241471F8();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v463 + 24))(v463))
                {
                  sub_2241498F4((uint64_t)v821, 0);
                  *(_QWORD *)v812 = v497;
                  *(_QWORD *)&v812[8] = v835;
                  *(_QWORD *)&v812[15] = *(_QWORD *)((char *)&v835 + 7);
                  v812[23] = v496;
                  *(_QWORD *)&v835 = 0;
                  *(_QWORD *)((char *)&v835 + 7) = 0;
                  v812[24] = 1;
                  sub_22329F414((uint64_t)v821, (__int128 *)v812, (__int128 *)&v814, &__dst);
                  v296 = v810;
                  if (v812[24] && (v812[23] & 0x80000000) != 0)
                    operator delete(*(void **)v812);
                  sub_22316F8F4((uint64_t *)v821);
                  v499 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v463 + 56))(v463);
                  v500 = *(void **)v499;
                  v501 = *(std::__shared_weak_count **)(v499 + 8);
                  if (v501)
                  {
                    v502 = (unint64_t *)&v501->__shared_owners_;
                    do
                      v503 = __ldxr(v502);
                    while (__stxr(v503 + 1, v502));
                  }
                  v504 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
                  v820.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                  *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
                  v821[0] = v500;
                  v821[1] = v501;
                  if (v501)
                  {
                    v505 = (unint64_t *)&v501->__shared_owners_;
                    do
                      v506 = __ldxr(v505);
                    while (__stxr(v506 + 1, v505));
                  }
                  *(_QWORD *)v822 = &off_24EC6A3B8;
                  *(_OWORD *)&v822[8] = v504;
                  if (*((_QWORD *)&v504 + 1))
                  {
                    v507 = (unint64_t *)(*((_QWORD *)&v504 + 1) + 8);
                    do
                      v508 = __ldxr(v507);
                    while (__stxr(v508 + 1, v507));
                  }
                  (*(void (**)(uint64_t *, void **))(*v498 + 16))(v498, v821);
                  v509 = *(std::__shared_weak_count **)&v822[16];
                  if (*(_QWORD *)&v822[16])
                  {
                    v510 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
                    do
                      v511 = __ldaxr(v510);
                    while (__stlxr(v511 - 1, v510));
                    if (!v511)
                    {
                      ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
                      std::__shared_weak_count::__release_weak(v509);
                    }
                  }
                  v512 = (std::__shared_weak_count *)v821[1];
                  if (v821[1])
                  {
                    v513 = (unint64_t *)((char *)v821[1] + 8);
                    do
                      v514 = __ldaxr(v513);
                    while (__stlxr(v514 - 1, v513));
                    if (!v514)
                    {
                      ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
                      std::__shared_weak_count::__release_weak(v512);
                    }
                  }
                  v515 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
                  if (v820.__r_.__value_.__r.__words[2])
                  {
                    v516 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
                    do
                      v517 = __ldaxr(v516);
                    while (__stlxr(v517 - 1, v516));
                    if (!v517)
                    {
                      ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
                      std::__shared_weak_count::__release_weak(v515);
                    }
                  }
                  if (v501)
                  {
                    v518 = (unint64_t *)&v501->__shared_owners_;
                    do
                      v519 = __ldaxr(v518);
                    while (__stlxr(v519 - 1, v518));
                    if (!v519)
                    {
                      ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
                      std::__shared_weak_count::__release_weak(v501);
                    }
                  }
                  v520 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
                  if (__dst.__r_.__value_.__r.__words[2])
                  {
                    v521 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                    do
                      v522 = __ldaxr(v521);
                    while (__stlxr(v522 - 1, v521));
                    if (!v522)
                    {
                      ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
                      std::__shared_weak_count::__release_weak(v520);
                    }
                  }
                  if ((*((_BYTE *)&v815.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_861:
                    operator delete(v815.__r_.__value_.__l.__data_);
LABEL_862:
                  kdebug_trace();
LABEL_863:
                  if (SHIBYTE(v819.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v819.__r_.__value_.__l.__data_);
                  goto LABEL_676;
                }
                if (v496 < 0)
                  operator delete(v497);
                LOBYTE(v496) = 0;
              }
              v296 = v810;
              if ((v496 & 0x80) != 0)
                goto LABEL_861;
              goto LABEL_862;
            }
          }
        }
      }
LABEL_676:
      v416 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v416 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
      {
        sub_223197FA4(v812, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      }
      else
      {
        *(_OWORD *)v812 = *(_OWORD *)byte_25578BAF8;
        *(_QWORD *)&v812[16] = *(_QWORD *)&byte_25578BAF8[16];
      }
      v417 = std::string::append((std::string *)v812, ".", 1uLL);
      v418 = *(_OWORD *)&v417->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v417->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v418;
      v417->__r_.__value_.__l.__size_ = 0;
      v417->__r_.__value_.__r.__words[2] = 0;
      v417->__r_.__value_.__r.__words[0] = 0;
      v419 = a3[23];
      if (v419 >= 0)
        v420 = a3;
      else
        v420 = *(const std::string::value_type **)a3;
      if (v419 >= 0)
        v421 = *((unsigned __int8 *)a3 + 23);
      else
        v421 = *((_QWORD *)a3 + 1);
      v422 = std::string::append((std::string *)__p, v420, v421);
      v423 = *(_OWORD *)&v422->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v422->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v423;
      v422->__r_.__value_.__l.__size_ = 0;
      v422->__r_.__value_.__r.__words[2] = 0;
      v422->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v424 = v821;
      else
        v424 = (void **)v821[0];
      v425 = strlen((const char *)v424);
      sub_2241471F8();
      v426 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v424, v425);
      v427 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v426 + 24))(v426);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_691:
          if ((v812[23] & 0x80000000) != 0)
            goto LABEL_696;
          goto LABEL_692;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_691;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) != 0)
      {
LABEL_696:
        operator delete(*(void **)v812);
        if (!v427)
          goto LABEL_498;
        goto LABEL_697;
      }
LABEL_692:
      if (!v427)
        goto LABEL_498;
LABEL_697:
      v428 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v428 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v820, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v820 = *(std::string *)byte_25578BAF8;
      v429 = std::string::append(&v820, ".", 1uLL);
      v430 = *(_OWORD *)&v429->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v429->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v430;
      v429->__r_.__value_.__l.__size_ = 0;
      v429->__r_.__value_.__r.__words[2] = 0;
      v429->__r_.__value_.__r.__words[0] = 0;
      v431 = a3[23];
      if (v431 >= 0)
        v432 = a3;
      else
        v432 = *(const std::string::value_type **)a3;
      if (v431 >= 0)
        v433 = *((unsigned __int8 *)a3 + 23);
      else
        v433 = *((_QWORD *)a3 + 1);
      v434 = std::string::append(&__dst, v432, v433);
      v435 = *(_OWORD *)&v434->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v434->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v435;
      v434->__r_.__value_.__l.__size_ = 0;
      v434->__r_.__value_.__r.__words[2] = 0;
      v434->__r_.__value_.__r.__words[0] = 0;
      v436 = std::string::append((std::string *)v812, ".", 1uLL);
      v437 = *(_OWORD *)&v436->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v436->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v437;
      v436->__r_.__value_.__l.__size_ = 0;
      v436->__r_.__value_.__r.__words[2] = 0;
      v436->__r_.__value_.__r.__words[0] = 0;
      v438 = std::string::append((std::string *)__p, "Planes", 6uLL);
      v439 = *(_OWORD *)&v438->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v438->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v439;
      v438->__r_.__value_.__l.__size_ = 0;
      v438->__r_.__value_.__r.__words[2] = 0;
      v438->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v440 = v821;
      else
        v440 = (void **)v821[0];
      v441 = strlen((const char *)v440);
      sub_2241471F8();
      v442 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v440, v441);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_712:
          if ((v812[23] & 0x80000000) == 0)
            goto LABEL_713;
          goto LABEL_726;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_712;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) == 0)
      {
LABEL_713:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_727;
        goto LABEL_714;
      }
LABEL_726:
      operator delete(*(void **)v812);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_727:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_715;
        goto LABEL_728;
      }
LABEL_714:
      if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_715;
LABEL_728:
      operator delete(v820.__r_.__value_.__l.__data_);
LABEL_715:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v442 + 24))(v442))
      {
        v443 = atomic_load((unsigned __int8 *)&unk_25578BB10);
        if ((v443 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
        {
          __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
          __cxa_guard_release((__guard *)&unk_25578BB10);
        }
        v444 = SHIBYTE(v816.__r_.__value_.__r.__words[2]);
        if ((v816.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v445 = HIBYTE(v816.__r_.__value_.__r.__words[2]);
        else
          v445 = v816.__r_.__value_.__l.__size_;
        v446 = v445 + 7;
        if (v445 + 7 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v446 >= 0x17)
        {
          v448 = (v446 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v446 | 7) != 0x17)
            v448 = v446 | 7;
          v449 = v448 + 1;
          v447 = (char *)operator new(v448 + 1);
          v820.__r_.__value_.__l.__size_ = v445 + 7;
          v820.__r_.__value_.__r.__words[2] = v449 | 0x8000000000000000;
          v820.__r_.__value_.__r.__words[0] = (std::string::size_type)v447;
        }
        else
        {
          memset(&v820, 0, sizeof(v820));
          v447 = (char *)&v820;
          *((_BYTE *)&v820.__r_.__value_.__s + 23) = v445 + 7;
          if (!v445)
          {
LABEL_736:
            strcpy(&v447[v445], "_origin");
            v296 = v810;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v442 + 24))(v442))
            {
              v819.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
              v819.__r_.__value_.__l.__size_ = v807 & 0xFFFFFFFFFFFFFF00 | 2;
              v807 = v819.__r_.__value_.__l.__size_;
              v451 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v442 + 24))(v442))
              {
                sub_2241498F4((uint64_t)v821, 0);
                if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_223197FA4(__p, v820.__r_.__value_.__l.__data_, v820.__r_.__value_.__l.__size_);
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)&v820.__r_.__value_.__l.__data_;
                  *(_QWORD *)v838 = *((_QWORD *)&v820.__r_.__value_.__l + 2);
                }
                v838[8] = 1;
                sub_22329F414((uint64_t)v821, (__int128 *)__p, (__int128 *)&v819, v812);
                if (v838[8] && (v838[7] & 0x80000000) != 0)
                  operator delete(__p[0]);
                sub_22316F8F4((uint64_t *)v821);
                v468 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v442 + 56))(v442);
                v469 = *(void **)v468;
                v470 = *(std::__shared_weak_count **)(v468 + 8);
                if (v470)
                {
                  v471 = (unint64_t *)&v470->__shared_owners_;
                  do
                    v472 = __ldxr(v471);
                  while (__stxr(v472 + 1, v471));
                }
                v473 = *(_OWORD *)&v812[8];
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)&v812[8];
                *(_OWORD *)&v812[8] = 0uLL;
                v821[0] = v469;
                v821[1] = v470;
                if (v470)
                {
                  v474 = (unint64_t *)&v470->__shared_owners_;
                  do
                    v475 = __ldxr(v474);
                  while (__stxr(v475 + 1, v474));
                }
                *(_QWORD *)v822 = &off_24EC6A3B8;
                *(_OWORD *)&v822[8] = v473;
                if (*((_QWORD *)&v473 + 1))
                {
                  v476 = (unint64_t *)(*((_QWORD *)&v473 + 1) + 8);
                  do
                    v477 = __ldxr(v476);
                  while (__stxr(v477 + 1, v476));
                }
                (*(void (**)(uint64_t *, void **))(*v451 + 16))(v451, v821);
                v478 = *(std::__shared_weak_count **)&v822[16];
                if (*(_QWORD *)&v822[16])
                {
                  v479 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
                  do
                    v480 = __ldaxr(v479);
                  while (__stlxr(v480 - 1, v479));
                  if (!v480)
                  {
                    ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
                    std::__shared_weak_count::__release_weak(v478);
                  }
                }
                v481 = (std::__shared_weak_count *)v821[1];
                if (v821[1])
                {
                  v482 = (unint64_t *)((char *)v821[1] + 8);
                  do
                    v483 = __ldaxr(v482);
                  while (__stlxr(v483 - 1, v482));
                  if (!v483)
                  {
                    ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
                    std::__shared_weak_count::__release_weak(v481);
                  }
                }
                v484 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
                if (__dst.__r_.__value_.__r.__words[2])
                {
                  v485 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                  do
                    v486 = __ldaxr(v485);
                  while (__stlxr(v486 - 1, v485));
                  if (!v486)
                  {
                    ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
                    std::__shared_weak_count::__release_weak(v484);
                  }
                }
                if (v470)
                {
                  v487 = (unint64_t *)&v470->__shared_owners_;
                  do
                    v488 = __ldaxr(v487);
                  while (__stlxr(v488 - 1, v487));
                  if (!v488)
                  {
                    ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
                    std::__shared_weak_count::__release_weak(v470);
                  }
                }
                v489 = *(std::__shared_weak_count **)&v812[16];
                if (*(_QWORD *)&v812[16])
                {
                  v490 = (unint64_t *)(*(_QWORD *)&v812[16] + 8);
                  do
                    v491 = __ldaxr(v490);
                  while (__stlxr(v491 - 1, v490));
                  if (!v491)
                  {
                    ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
                    std::__shared_weak_count::__release_weak(v489);
                  }
                }
              }
            }
            if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v820.__r_.__value_.__l.__data_);
            goto LABEL_498;
          }
        }
        if (v444 >= 0)
          v450 = &v816;
        else
          v450 = (std::string *)v816.__r_.__value_.__r.__words[0];
        memmove(v447, v450, v445);
        goto LABEL_736;
      }
LABEL_498:
      if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v816.__r_.__value_.__l.__data_);
        v295 += 16;
        if (v295 == v296)
          goto LABEL_921;
      }
      else
      {
        v295 += 16;
        if (v295 == v296)
          goto LABEL_921;
      }
    }
    v321 = a3[23];
    if (v321 >= 0)
      v322 = *((unsigned __int8 *)a3 + 23);
    else
      v322 = *((_QWORD *)a3 + 1);
    v323 = v322 + 1;
    if (v322 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v323 >= 0x17)
    {
      v354 = (v323 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v323 | 7) != 0x17)
        v354 = v323 | 7;
      v355 = v354 + 1;
      v324 = operator new(v354 + 1);
      *(_QWORD *)&v812[8] = v322 + 1;
      *(_QWORD *)&v812[16] = v355 | 0x8000000000000000;
      *(_QWORD *)v812 = v324;
      v296 = v810;
    }
    else
    {
      memset(v812, 0, 24);
      v324 = v812;
      v812[23] = v322 + 1;
      if (!v322)
        goto LABEL_591;
    }
    if (v321 >= 0)
      v356 = a3;
    else
      v356 = *(const std::string::value_type **)a3;
    memmove(v324, v356, v322);
LABEL_591:
    *(_WORD *)&v324[v322] = 46;
    v357 = std::string::append((std::string *)v812, "Planes", 6uLL);
    v358 = *(_OWORD *)&v357->__r_.__value_.__l.__data_;
    *(_QWORD *)v838 = *((_QWORD *)&v357->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v358;
    v357->__r_.__value_.__l.__size_ = 0;
    v357->__r_.__value_.__r.__words[2] = 0;
    v357->__r_.__value_.__r.__words[0] = 0;
    v821[0] = "cv3d.recon.";
    v821[1] = (void *)11;
    v359 = (void *)v838[7];
    v360 = __p;
    if (v838[7] < 0)
    {
      v360 = (void **)__p[0];
      v359 = __p[1];
    }
    *(_QWORD *)v822 = v360;
    *(_QWORD *)&v822[8] = v359;
    sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, &v815);
    if ((v838[7] & 0x80000000) != 0)
    {
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) == 0)
        goto LABEL_595;
    }
    else if ((v812[23] & 0x80000000) == 0)
    {
LABEL_595:
      v361 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      v362 = *(_OWORD *)&v815.__r_.__value_.__l.__data_;
      sub_2241471F8();
      if ((v361 & 0x80u) == 0)
        v363 = &v815;
      else
        v363 = (std::string *)v362;
      if ((v361 & 0x80u) == 0)
        v364 = v361;
      else
        v364 = *((_QWORD *)&v362 + 1);
      v365 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v363, v364);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v365 + 24))(v365))
      {
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v838 = 0u;
        *(_DWORD *)&v838[16] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v365 + 24))(v365))
        {
          if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v819, v816.__r_.__value_.__l.__data_, v816.__r_.__value_.__l.__size_);
          else
            v819 = v816;
          v814.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v814.__r_.__value_.__l.__size_ = v802 & 0xFFFFFFFFFFFFFF00 | 2;
          v802 = v814.__r_.__value_.__l.__size_;
          v523 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v365 + 24))(v365))
          {
            sub_2241498F4((uint64_t)v821, 0);
            *(std::string *)v812 = v819;
            memset(&v819, 0, sizeof(v819));
            v812[24] = 1;
            sub_22329F414((uint64_t)v821, (__int128 *)v812, (__int128 *)&v814, &__dst);
            if (v812[24] && (v812[23] & 0x80000000) != 0)
              operator delete(*(void **)v812);
            sub_22316F8F4((uint64_t *)v821);
            v524 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v365 + 56))(v365);
            v525 = *(void **)v524;
            v526 = *(std::__shared_weak_count **)(v524 + 8);
            if (v526)
            {
              v527 = (unint64_t *)&v526->__shared_owners_;
              do
                v528 = __ldxr(v527);
              while (__stxr(v528 + 1, v527));
            }
            v529 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
            v820.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
            v821[0] = v525;
            v821[1] = v526;
            if (v526)
            {
              v530 = (unint64_t *)&v526->__shared_owners_;
              do
                v531 = __ldxr(v530);
              while (__stxr(v531 + 1, v530));
            }
            *(_QWORD *)v822 = &off_24EC6A3B8;
            *(_OWORD *)&v822[8] = v529;
            if (*((_QWORD *)&v529 + 1))
            {
              v532 = (unint64_t *)(*((_QWORD *)&v529 + 1) + 8);
              do
                v533 = __ldxr(v532);
              while (__stxr(v533 + 1, v532));
            }
            (*(void (**)(uint64_t *, void **))(*v523 + 16))(v523, v821);
            v534 = *(std::__shared_weak_count **)&v822[16];
            if (*(_QWORD *)&v822[16])
            {
              v535 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
              do
                v536 = __ldaxr(v535);
              while (__stlxr(v536 - 1, v535));
              if (!v536)
              {
                ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
                std::__shared_weak_count::__release_weak(v534);
              }
            }
            v537 = (std::__shared_weak_count *)v821[1];
            if (v821[1])
            {
              v538 = (unint64_t *)((char *)v821[1] + 8);
              do
                v539 = __ldaxr(v538);
              while (__stlxr(v539 - 1, v538));
              if (!v539)
              {
                ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
                std::__shared_weak_count::__release_weak(v537);
              }
            }
            v540 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
            if (v820.__r_.__value_.__r.__words[2])
            {
              v541 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
              do
                v542 = __ldaxr(v541);
              while (__stlxr(v542 - 1, v541));
              if (!v542)
              {
                ((void (*)(std::__shared_weak_count *))v540->__on_zero_shared)(v540);
                std::__shared_weak_count::__release_weak(v540);
              }
            }
            if (v526)
            {
              v543 = (unint64_t *)&v526->__shared_owners_;
              do
                v544 = __ldaxr(v543);
              while (__stlxr(v544 - 1, v543));
              if (!v544)
              {
                ((void (*)(std::__shared_weak_count *))v526->__on_zero_shared)(v526);
                std::__shared_weak_count::__release_weak(v526);
              }
            }
            v545 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
            if (__dst.__r_.__value_.__r.__words[2])
            {
              v546 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
              do
                v547 = __ldaxr(v546);
              while (__stlxr(v547 - 1, v546));
              if (!v547)
              {
                ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
                std::__shared_weak_count::__release_weak(v545);
              }
            }
          }
          if (SHIBYTE(v819.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v819.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v815.__r_.__value_.__l.__data_);
      goto LABEL_534;
    }
    operator delete(*(void **)v812);
    goto LABEL_595;
  }
LABEL_921:
  v548 = a2[3];
  v549 = a2[4];
  if (v548 != v549)
  {
    v811 = a2[4];
    while (1)
    {
      sub_2245664AC(v548, v821);
      v550 = operator new(0x28uLL);
      v816.__r_.__value_.__r.__words[0] = (std::string::size_type)v550;
      *(_OWORD *)&v816.__r_.__value_.__r.__words[1] = xmmword_2245C4640;
      v551 = *(_OWORD *)v822;
      *v550 = *(_OWORD *)v821;
      v550[1] = v551;
      *((_DWORD *)v550 + 8) = *(_DWORD *)&v822[16];
      *((_BYTE *)v550 + 36) = 0;
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v552 = sub_2241471F8();
        v553 = v552[2];
        if (!v553)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_1351;
          }
          v553 = v552[2];
        }
        v554 = *(_QWORD *)(v553 + 64);
        v555 = (std::mutex *)(v554 + 32);
        std::mutex::lock((std::mutex *)(v554 + 32));
        v557 = *(_QWORD *)(v554 + 96);
        v556 = *(_QWORD *)(v554 + 104);
        std::mutex::unlock(v555);
        if (v557 != v556)
        {
          v821[0] = "cv3d.recon.";
          v821[1] = (void *)11;
          v558 = *((unsigned __int8 *)a3 + 23);
          if ((v558 & 0x80u) == 0)
            v559 = a3;
          else
            v559 = *(const std::string::value_type **)a3;
          if ((v558 & 0x80u) != 0)
            v558 = *((_QWORD *)a3 + 1);
          *(_QWORD *)v822 = v559;
          *(_QWORD *)&v822[8] = v558;
          sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, (std::string *)__p);
          v560 = (void *)v838[7];
          v561 = (void **)__p[0];
          v562 = __p[1];
          sub_2241471F8();
          v563 = (char)v560 >= 0 ? __p : v561;
          v564 = (char)v560 >= 0 ? v560 : v562;
          v565 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v563, v564);
          v566 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v565 + 24))(v565);
          v567 = v566;
          if ((v838[7] & 0x80000000) != 0)
          {
            operator delete(__p[0]);
            if (!v567)
              goto LABEL_961;
          }
          else if (!v566)
          {
            goto LABEL_961;
          }
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v568 = sub_2241471F8();
            v569 = v568[2];
            if (!v569)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_1351;
              }
              v569 = v568[2];
            }
            v570 = *(_QWORD *)(v569 + 64);
            v571 = (std::mutex *)(v570 + 32);
            std::mutex::lock((std::mutex *)(v570 + 32));
            v573 = *(_QWORD *)(v570 + 96);
            v572 = *(_QWORD *)(v570 + 104);
            std::mutex::unlock(v571);
            if (v573 != v572)
              break;
          }
        }
      }
LABEL_961:
      v578 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v578 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
      {
        sub_223197FA4(v812, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      }
      else
      {
        *(_OWORD *)v812 = *(_OWORD *)byte_25578BAF8;
        *(_QWORD *)&v812[16] = *(_QWORD *)&byte_25578BAF8[16];
      }
      v579 = std::string::append((std::string *)v812, ".", 1uLL);
      v580 = *(_OWORD *)&v579->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v579->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v580;
      v579->__r_.__value_.__l.__size_ = 0;
      v579->__r_.__value_.__r.__words[2] = 0;
      v579->__r_.__value_.__r.__words[0] = 0;
      v581 = a3[23];
      if (v581 >= 0)
        v582 = a3;
      else
        v582 = *(const std::string::value_type **)a3;
      if (v581 >= 0)
        v583 = *((unsigned __int8 *)a3 + 23);
      else
        v583 = *((_QWORD *)a3 + 1);
      v584 = std::string::append((std::string *)__p, v582, v583);
      v585 = *(_OWORD *)&v584->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v584->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v585;
      v584->__r_.__value_.__l.__size_ = 0;
      v584->__r_.__value_.__r.__words[2] = 0;
      v584->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v586 = v821;
      else
        v586 = (void **)v821[0];
      v587 = strlen((const char *)v586);
      sub_2241471F8();
      v588 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v586, v587);
      v589 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v588 + 24))(v588);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_976:
          if ((v812[23] & 0x80000000) != 0)
            goto LABEL_981;
          goto LABEL_977;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_976;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) != 0)
      {
LABEL_981:
        operator delete(*(void **)v812);
        if (!v589)
          goto LABEL_1071;
        goto LABEL_982;
      }
LABEL_977:
      if (!v589)
        goto LABEL_1071;
LABEL_982:
      v590 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v590 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v820, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v820 = *(std::string *)byte_25578BAF8;
      v591 = std::string::append(&v820, ".", 1uLL);
      v592 = *(_OWORD *)&v591->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v591->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v592;
      v591->__r_.__value_.__l.__size_ = 0;
      v591->__r_.__value_.__r.__words[2] = 0;
      v591->__r_.__value_.__r.__words[0] = 0;
      v593 = a3[23];
      if (v593 >= 0)
        v594 = a3;
      else
        v594 = *(const std::string::value_type **)a3;
      if (v593 >= 0)
        v595 = *((unsigned __int8 *)a3 + 23);
      else
        v595 = *((_QWORD *)a3 + 1);
      v596 = std::string::append(&__dst, v594, v595);
      v597 = *(_OWORD *)&v596->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v596->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v597;
      v596->__r_.__value_.__l.__size_ = 0;
      v596->__r_.__value_.__r.__words[2] = 0;
      v596->__r_.__value_.__r.__words[0] = 0;
      v598 = std::string::append((std::string *)v812, ".", 1uLL);
      v599 = *(_OWORD *)&v598->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v598->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v599;
      v598->__r_.__value_.__l.__size_ = 0;
      v598->__r_.__value_.__r.__words[2] = 0;
      v598->__r_.__value_.__r.__words[0] = 0;
      v600 = std::string::append((std::string *)__p, "Planes", 6uLL);
      v601 = *(_OWORD *)&v600->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v600->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v601;
      v600->__r_.__value_.__l.__size_ = 0;
      v600->__r_.__value_.__r.__words[2] = 0;
      v600->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v602 = v821;
      else
        v602 = (void **)v821[0];
      v603 = strlen((const char *)v602);
      sub_2241471F8();
      v604 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v602, v603);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_997:
          if ((v812[23] & 0x80000000) == 0)
            goto LABEL_998;
          goto LABEL_1008;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_997;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) == 0)
      {
LABEL_998:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1009;
        goto LABEL_999;
      }
LABEL_1008:
      operator delete(*(void **)v812);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_1009:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1000;
        goto LABEL_1010;
      }
LABEL_999:
      if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1000;
LABEL_1010:
      operator delete(v820.__r_.__value_.__l.__data_);
LABEL_1000:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v604 + 24))(v604))
      {
        v605 = atomic_load((unsigned __int8 *)&unk_25578BB10);
        if ((v605 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
        {
          __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
          __cxa_guard_release((__guard *)&unk_25578BB10);
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v604 + 24))(v604))
        {
          v820.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
          v820.__r_.__value_.__l.__size_ = size & 0xFFFFFFFFFFFFFF00 | 2;
          size = v820.__r_.__value_.__l.__size_;
          v606 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v604 + 24))(v604))
          {
            sub_2241498F4((uint64_t)v821, 0);
            if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_223197FA4(__p, v816.__r_.__value_.__l.__data_, v816.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)&v816.__r_.__value_.__l.__data_;
              *(_QWORD *)v838 = *((_QWORD *)&v816.__r_.__value_.__l + 2);
            }
            v838[8] = 1;
            sub_22329F414((uint64_t)v821, (__int128 *)__p, (__int128 *)&v820, v812);
            if (v838[8] && (v838[7] & 0x80000000) != 0)
              operator delete(__p[0]);
            sub_22316F8F4((uint64_t *)v821);
            v619 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v604 + 56))(v604);
            v620 = *(void **)v619;
            v621 = *(std::__shared_weak_count **)(v619 + 8);
            if (v621)
            {
              v622 = (unint64_t *)&v621->__shared_owners_;
              do
                v623 = __ldxr(v622);
              while (__stxr(v623 + 1, v622));
            }
            v624 = *(_OWORD *)&v812[8];
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)&v812[8];
            *(_OWORD *)&v812[8] = 0uLL;
            v821[0] = v620;
            v821[1] = v621;
            if (v621)
            {
              v625 = (unint64_t *)&v621->__shared_owners_;
              do
                v626 = __ldxr(v625);
              while (__stxr(v626 + 1, v625));
            }
            *(_QWORD *)v822 = &off_24EC6A3B8;
            *(_OWORD *)&v822[8] = v624;
            if (*((_QWORD *)&v624 + 1))
            {
              v627 = (unint64_t *)(*((_QWORD *)&v624 + 1) + 8);
              do
                v628 = __ldxr(v627);
              while (__stxr(v628 + 1, v627));
            }
            (*(void (**)(uint64_t *, void **))(*v606 + 16))(v606, v821);
            v629 = *(std::__shared_weak_count **)&v822[16];
            if (*(_QWORD *)&v822[16])
            {
              v630 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
              do
                v631 = __ldaxr(v630);
              while (__stlxr(v631 - 1, v630));
              if (!v631)
              {
                ((void (*)(std::__shared_weak_count *))v629->__on_zero_shared)(v629);
                std::__shared_weak_count::__release_weak(v629);
              }
            }
            v632 = (std::__shared_weak_count *)v821[1];
            if (v821[1])
            {
              v633 = (unint64_t *)((char *)v821[1] + 8);
              do
                v634 = __ldaxr(v633);
              while (__stlxr(v634 - 1, v633));
              if (!v634)
              {
                ((void (*)(std::__shared_weak_count *))v632->__on_zero_shared)(v632);
                std::__shared_weak_count::__release_weak(v632);
              }
            }
            v635 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
            if (__dst.__r_.__value_.__r.__words[2])
            {
              v636 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
              do
                v637 = __ldaxr(v636);
              while (__stlxr(v637 - 1, v636));
              if (!v637)
              {
                ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
                std::__shared_weak_count::__release_weak(v635);
              }
            }
            if (v621)
            {
              v638 = (unint64_t *)&v621->__shared_owners_;
              do
                v639 = __ldaxr(v638);
              while (__stlxr(v639 - 1, v638));
              if (!v639)
              {
                ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
                std::__shared_weak_count::__release_weak(v621);
              }
            }
            v640 = *(std::__shared_weak_count **)&v812[16];
            if (*(_QWORD *)&v812[16])
            {
              v641 = (unint64_t *)(*(_QWORD *)&v812[16] + 8);
              do
                v642 = __ldaxr(v641);
              while (__stlxr(v642 - 1, v641));
              if (!v642)
              {
                ((void (*)(std::__shared_weak_count *))v640->__on_zero_shared)(v640);
                std::__shared_weak_count::__release_weak(v640);
              }
            }
          }
        }
      }
LABEL_1071:
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v643 = sub_2241471F8();
        v644 = v643[2];
        if (!v644)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_1351;
          }
          v644 = v643[2];
        }
        v645 = *(_QWORD *)(v644 + 64);
        v646 = (std::mutex *)(v645 + 32);
        std::mutex::lock((std::mutex *)(v645 + 32));
        v648 = *(_QWORD *)(v645 + 96);
        v647 = *(_QWORD *)(v645 + 104);
        std::mutex::unlock(v646);
        if (v648 != v647)
        {
          v821[0] = "cv3d.recon.";
          v821[1] = (void *)11;
          v649 = *((unsigned __int8 *)a3 + 23);
          if ((v649 & 0x80u) == 0)
            v650 = a3;
          else
            v650 = *(const std::string::value_type **)a3;
          if ((v649 & 0x80u) != 0)
            v649 = *((_QWORD *)a3 + 1);
          *(_QWORD *)v822 = v650;
          *(_QWORD *)&v822[8] = v649;
          sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, (std::string *)__p);
          v651 = (void *)v838[7];
          v652 = (void **)__p[0];
          v653 = __p[1];
          sub_2241471F8();
          v654 = (char)v651 >= 0 ? __p : v652;
          v655 = (char)v651 >= 0 ? v651 : v653;
          v656 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v654, v655);
          v657 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v656 + 24))(v656);
          v658 = v657;
          if ((v838[7] & 0x80000000) != 0)
          {
            operator delete(__p[0]);
            if (!v658)
              goto LABEL_1103;
          }
          else if (!v657)
          {
            goto LABEL_1103;
          }
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v659 = sub_2241471F8();
            v660 = v659[2];
            if (!v660)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
LABEL_1351:
                abort();
              }
              v660 = v659[2];
            }
            v661 = *(_QWORD *)(v660 + 64);
            v662 = (std::mutex *)(v661 + 32);
            std::mutex::lock((std::mutex *)(v661 + 32));
            v664 = *(_QWORD *)(v661 + 96);
            v663 = *(_QWORD *)(v661 + 104);
            std::mutex::unlock(v662);
            if (v664 != v663)
            {
              v665 = a3[23];
              if (v665 >= 0)
                v666 = *((unsigned __int8 *)a3 + 23);
              else
                v666 = *((_QWORD *)a3 + 1);
              v667 = v666 + 1;
              if (v666 + 1 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v667 >= 0x17)
              {
                v705 = (v667 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v667 | 7) != 0x17)
                  v705 = v667 | 7;
                v706 = v705 + 1;
                v668 = operator new(v705 + 1);
                *(_QWORD *)&v812[8] = v666 + 1;
                *(_QWORD *)&v812[16] = v706 | 0x8000000000000000;
                *(_QWORD *)v812 = v668;
                v549 = v811;
              }
              else
              {
                memset(v812, 0, 24);
                v668 = v812;
                v812[23] = v666 + 1;
                if (!v666)
                  goto LABEL_1174;
              }
              if (v665 >= 0)
                v707 = a3;
              else
                v707 = *(const std::string::value_type **)a3;
              memmove(v668, v707, v666);
LABEL_1174:
              *(_WORD *)&v668[v666] = 46;
              v708 = std::string::append((std::string *)v812, "Planes", 6uLL);
              v709 = *(_OWORD *)&v708->__r_.__value_.__l.__data_;
              *(_QWORD *)v838 = *((_QWORD *)&v708->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v709;
              v708->__r_.__value_.__l.__size_ = 0;
              v708->__r_.__value_.__r.__words[2] = 0;
              v708->__r_.__value_.__r.__words[0] = 0;
              v821[0] = "cv3d.recon.";
              v821[1] = (void *)11;
              v710 = (void *)v838[7];
              v711 = __p;
              if (v838[7] < 0)
              {
                v711 = (void **)__p[0];
                v710 = __p[1];
              }
              *(_QWORD *)v822 = v711;
              *(_QWORD *)&v822[8] = v710;
              sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, &v819);
              if ((v838[7] & 0x80000000) != 0)
              {
                operator delete(__p[0]);
                if ((v812[23] & 0x80000000) != 0)
                  goto LABEL_1234;
              }
              else
              {
                if ((v812[23] & 0x80000000) == 0)
                  goto LABEL_1178;
LABEL_1234:
                operator delete(*(void **)v812);
              }
LABEL_1178:
              v712 = HIBYTE(v819.__r_.__value_.__r.__words[2]);
              v713 = *(_OWORD *)&v819.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v712 & 0x80u) == 0)
                v714 = &v819;
              else
                v714 = (std::string *)v713;
              if ((v712 & 0x80u) == 0)
                v715 = v712;
              else
                v715 = *((_QWORD *)&v713 + 1);
              v716 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v714, v715);
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v716 + 24))(v716))
                goto LABEL_1290;
              *(_OWORD *)__p = 0u;
              *(_OWORD *)v838 = 0u;
              *(_DWORD *)&v838[16] = 728325616;
              kdebug_trace();
              v717 = SHIBYTE(v816.__r_.__value_.__r.__words[2]);
              if ((v816.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v718 = HIBYTE(v816.__r_.__value_.__r.__words[2]);
              else
                v718 = v816.__r_.__value_.__l.__size_;
              v719 = v718 + 7;
              if (v718 + 7 > 0x7FFFFFFFFFFFFFF7)
                sub_22316DBC0();
              if (v719 >= 0x17)
              {
                v745 = (v719 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v719 | 7) != 0x17)
                  v745 = v719 | 7;
                v746 = v745 + 1;
                v720 = (std::string *)operator new(v745 + 1);
                v815.__r_.__value_.__l.__size_ = v718 + 7;
                v815.__r_.__value_.__r.__words[2] = v746 | 0x8000000000000000;
                v815.__r_.__value_.__r.__words[0] = (std::string::size_type)v720;
              }
              else
              {
                memset(&v815, 0, sizeof(v815));
                v720 = &v815;
                *((_BYTE *)&v815.__r_.__value_.__s + 23) = v718 + 7;
                if (!v718)
                  goto LABEL_1243;
              }
              if (v717 >= 0)
                v747 = &v816;
              else
                v747 = (std::string *)v816.__r_.__value_.__r.__words[0];
              memmove(v720, v747, v718);
LABEL_1243:
              strcpy((char *)v720 + v718, "_origin");
              v748 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v716 + 24))(v716);
              v749 = SHIBYTE(v815.__r_.__value_.__r.__words[2]);
              if (v748)
              {
                *(_QWORD *)&v835 = v815.__r_.__value_.__l.__size_;
                v750 = (void *)v815.__r_.__value_.__r.__words[0];
                *(_QWORD *)((char *)&v835 + 7) = *(std::string::size_type *)((char *)&v815.__r_.__value_.__r.__words[1]
                                                                           + 7);
                memset(&v815, 0, sizeof(v815));
                v814.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                v814.__r_.__value_.__l.__size_ = v805 & 0xFFFFFFFFFFFFFF00 | 2;
                v805 = v814.__r_.__value_.__l.__size_;
                v751 = sub_2241471F8();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v716 + 24))(v716))
                {
                  sub_2241498F4((uint64_t)v821, 0);
                  *(_QWORD *)v812 = v750;
                  *(_QWORD *)&v812[8] = v835;
                  *(_QWORD *)&v812[15] = *(_QWORD *)((char *)&v835 + 7);
                  v812[23] = v749;
                  *(_QWORD *)&v835 = 0;
                  *(_QWORD *)((char *)&v835 + 7) = 0;
                  v812[24] = 1;
                  sub_22329F414((uint64_t)v821, (__int128 *)v812, (__int128 *)&v814, &__dst);
                  v549 = v811;
                  if (v812[24] && (v812[23] & 0x80000000) != 0)
                    operator delete(*(void **)v812);
                  sub_22316F8F4((uint64_t *)v821);
                  v752 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v716 + 56))(v716);
                  v753 = *(void **)v752;
                  v754 = *(std::__shared_weak_count **)(v752 + 8);
                  if (v754)
                  {
                    v755 = (unint64_t *)&v754->__shared_owners_;
                    do
                      v756 = __ldxr(v755);
                    while (__stxr(v756 + 1, v755));
                  }
                  v757 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
                  v820.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                  *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
                  v821[0] = v753;
                  v821[1] = v754;
                  if (v754)
                  {
                    v758 = (unint64_t *)&v754->__shared_owners_;
                    do
                      v759 = __ldxr(v758);
                    while (__stxr(v759 + 1, v758));
                  }
                  *(_QWORD *)v822 = &off_24EC6A3B8;
                  *(_OWORD *)&v822[8] = v757;
                  if (*((_QWORD *)&v757 + 1))
                  {
                    v760 = (unint64_t *)(*((_QWORD *)&v757 + 1) + 8);
                    do
                      v761 = __ldxr(v760);
                    while (__stxr(v761 + 1, v760));
                  }
                  (*(void (**)(uint64_t *, void **))(*v751 + 16))(v751, v821);
                  v762 = *(std::__shared_weak_count **)&v822[16];
                  if (*(_QWORD *)&v822[16])
                  {
                    v763 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
                    do
                      v764 = __ldaxr(v763);
                    while (__stlxr(v764 - 1, v763));
                    if (!v764)
                    {
                      ((void (*)(std::__shared_weak_count *))v762->__on_zero_shared)(v762);
                      std::__shared_weak_count::__release_weak(v762);
                    }
                  }
                  v765 = (std::__shared_weak_count *)v821[1];
                  if (v821[1])
                  {
                    v766 = (unint64_t *)((char *)v821[1] + 8);
                    do
                      v767 = __ldaxr(v766);
                    while (__stlxr(v767 - 1, v766));
                    if (!v767)
                    {
                      ((void (*)(std::__shared_weak_count *))v765->__on_zero_shared)(v765);
                      std::__shared_weak_count::__release_weak(v765);
                    }
                  }
                  v768 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
                  if (v820.__r_.__value_.__r.__words[2])
                  {
                    v769 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
                    do
                      v770 = __ldaxr(v769);
                    while (__stlxr(v770 - 1, v769));
                    if (!v770)
                    {
                      ((void (*)(std::__shared_weak_count *))v768->__on_zero_shared)(v768);
                      std::__shared_weak_count::__release_weak(v768);
                    }
                  }
                  if (v754)
                  {
                    v771 = (unint64_t *)&v754->__shared_owners_;
                    do
                      v772 = __ldaxr(v771);
                    while (__stlxr(v772 - 1, v771));
                    if (!v772)
                    {
                      ((void (*)(std::__shared_weak_count *))v754->__on_zero_shared)(v754);
                      std::__shared_weak_count::__release_weak(v754);
                    }
                  }
                  v773 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
                  if (__dst.__r_.__value_.__r.__words[2])
                  {
                    v774 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                    do
                      v775 = __ldaxr(v774);
                    while (__stlxr(v775 - 1, v774));
                    if (!v775)
                    {
                      ((void (*)(std::__shared_weak_count *))v773->__on_zero_shared)(v773);
                      std::__shared_weak_count::__release_weak(v773);
                    }
                  }
                  if ((*((_BYTE *)&v815.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_1288:
                    operator delete(v815.__r_.__value_.__l.__data_);
LABEL_1289:
                  kdebug_trace();
LABEL_1290:
                  if (SHIBYTE(v819.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v819.__r_.__value_.__l.__data_);
                  goto LABEL_1103;
                }
                if (v749 < 0)
                  operator delete(v750);
                LOBYTE(v749) = 0;
              }
              v549 = v811;
              if ((v749 & 0x80) != 0)
                goto LABEL_1288;
              goto LABEL_1289;
            }
          }
        }
      }
LABEL_1103:
      v669 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v669 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
      {
        sub_223197FA4(v812, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      }
      else
      {
        *(_OWORD *)v812 = *(_OWORD *)byte_25578BAF8;
        *(_QWORD *)&v812[16] = *(_QWORD *)&byte_25578BAF8[16];
      }
      v670 = std::string::append((std::string *)v812, ".", 1uLL);
      v671 = *(_OWORD *)&v670->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v670->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v671;
      v670->__r_.__value_.__l.__size_ = 0;
      v670->__r_.__value_.__r.__words[2] = 0;
      v670->__r_.__value_.__r.__words[0] = 0;
      v672 = a3[23];
      if (v672 >= 0)
        v673 = a3;
      else
        v673 = *(const std::string::value_type **)a3;
      if (v672 >= 0)
        v674 = *((unsigned __int8 *)a3 + 23);
      else
        v674 = *((_QWORD *)a3 + 1);
      v675 = std::string::append((std::string *)__p, v673, v674);
      v676 = *(_OWORD *)&v675->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v675->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v676;
      v675->__r_.__value_.__l.__size_ = 0;
      v675->__r_.__value_.__r.__words[2] = 0;
      v675->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v677 = v821;
      else
        v677 = (void **)v821[0];
      v678 = strlen((const char *)v677);
      sub_2241471F8();
      v679 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v677, v678);
      v680 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v679 + 24))(v679);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_1118:
          if ((v812[23] & 0x80000000) != 0)
            goto LABEL_1123;
          goto LABEL_1119;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_1118;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) != 0)
      {
LABEL_1123:
        operator delete(*(void **)v812);
        if (!v680)
          goto LABEL_925;
        goto LABEL_1124;
      }
LABEL_1119:
      if (!v680)
        goto LABEL_925;
LABEL_1124:
      v681 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v681 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v820, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v820 = *(std::string *)byte_25578BAF8;
      v682 = std::string::append(&v820, ".", 1uLL);
      v683 = *(_OWORD *)&v682->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v682->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v683;
      v682->__r_.__value_.__l.__size_ = 0;
      v682->__r_.__value_.__r.__words[2] = 0;
      v682->__r_.__value_.__r.__words[0] = 0;
      v684 = a3[23];
      if (v684 >= 0)
        v685 = a3;
      else
        v685 = *(const std::string::value_type **)a3;
      if (v684 >= 0)
        v686 = *((unsigned __int8 *)a3 + 23);
      else
        v686 = *((_QWORD *)a3 + 1);
      v687 = std::string::append(&__dst, v685, v686);
      v688 = *(_OWORD *)&v687->__r_.__value_.__l.__data_;
      *(_QWORD *)&v812[16] = *((_QWORD *)&v687->__r_.__value_.__l + 2);
      *(_OWORD *)v812 = v688;
      v687->__r_.__value_.__l.__size_ = 0;
      v687->__r_.__value_.__r.__words[2] = 0;
      v687->__r_.__value_.__r.__words[0] = 0;
      v689 = std::string::append((std::string *)v812, ".", 1uLL);
      v690 = *(_OWORD *)&v689->__r_.__value_.__l.__data_;
      *(_QWORD *)v838 = *((_QWORD *)&v689->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v690;
      v689->__r_.__value_.__l.__size_ = 0;
      v689->__r_.__value_.__r.__words[2] = 0;
      v689->__r_.__value_.__r.__words[0] = 0;
      v691 = std::string::append((std::string *)__p, "Planes", 6uLL);
      v692 = *(_OWORD *)&v691->__r_.__value_.__l.__data_;
      *(_QWORD *)v822 = *((_QWORD *)&v691->__r_.__value_.__l + 2);
      *(_OWORD *)v821 = v692;
      v691->__r_.__value_.__l.__size_ = 0;
      v691->__r_.__value_.__r.__words[2] = 0;
      v691->__r_.__value_.__r.__words[0] = 0;
      if (v822[7] >= 0)
        v693 = v821;
      else
        v693 = (void **)v821[0];
      v694 = strlen((const char *)v693);
      sub_2241471F8();
      v695 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v693, v694);
      if ((v822[7] & 0x80000000) != 0)
      {
        operator delete(v821[0]);
        if ((v838[7] & 0x80000000) == 0)
        {
LABEL_1139:
          if ((v812[23] & 0x80000000) == 0)
            goto LABEL_1140;
          goto LABEL_1153;
        }
      }
      else if ((v838[7] & 0x80000000) == 0)
      {
        goto LABEL_1139;
      }
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) == 0)
      {
LABEL_1140:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_1154;
        goto LABEL_1141;
      }
LABEL_1153:
      operator delete(*(void **)v812);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_1154:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_1142;
        goto LABEL_1155;
      }
LABEL_1141:
      if ((SHIBYTE(v820.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_1142;
LABEL_1155:
      operator delete(v820.__r_.__value_.__l.__data_);
LABEL_1142:
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v695 + 24))(v695))
      {
        v696 = atomic_load((unsigned __int8 *)&unk_25578BB10);
        if ((v696 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
        {
          __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
          __cxa_guard_release((__guard *)&unk_25578BB10);
        }
        v697 = SHIBYTE(v816.__r_.__value_.__r.__words[2]);
        if ((v816.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v698 = HIBYTE(v816.__r_.__value_.__r.__words[2]);
        else
          v698 = v816.__r_.__value_.__l.__size_;
        v699 = v698 + 7;
        if (v698 + 7 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v699 >= 0x17)
        {
          v701 = (v699 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v699 | 7) != 0x17)
            v701 = v699 | 7;
          v702 = v701 + 1;
          v700 = (char *)operator new(v701 + 1);
          v820.__r_.__value_.__l.__size_ = v698 + 7;
          v820.__r_.__value_.__r.__words[2] = v702 | 0x8000000000000000;
          v820.__r_.__value_.__r.__words[0] = (std::string::size_type)v700;
        }
        else
        {
          memset(&v820, 0, sizeof(v820));
          v700 = (char *)&v820;
          *((_BYTE *)&v820.__r_.__value_.__s + 23) = v698 + 7;
          if (!v698)
          {
LABEL_1163:
            strcpy(&v700[v698], "_origin");
            v549 = v811;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v695 + 24))(v695))
            {
              v819.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
              v819.__r_.__value_.__l.__size_ = v807 & 0xFFFFFFFFFFFFFF00 | 2;
              v807 = v819.__r_.__value_.__l.__size_;
              v704 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v695 + 24))(v695))
              {
                sub_2241498F4((uint64_t)v821, 0);
                if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_223197FA4(__p, v820.__r_.__value_.__l.__data_, v820.__r_.__value_.__l.__size_);
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)&v820.__r_.__value_.__l.__data_;
                  *(_QWORD *)v838 = *((_QWORD *)&v820.__r_.__value_.__l + 2);
                }
                v838[8] = 1;
                sub_22329F414((uint64_t)v821, (__int128 *)__p, (__int128 *)&v819, v812);
                if (v838[8] && (v838[7] & 0x80000000) != 0)
                  operator delete(__p[0]);
                sub_22316F8F4((uint64_t *)v821);
                v721 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v695 + 56))(v695);
                v722 = *(void **)v721;
                v723 = *(std::__shared_weak_count **)(v721 + 8);
                if (v723)
                {
                  v724 = (unint64_t *)&v723->__shared_owners_;
                  do
                    v725 = __ldxr(v724);
                  while (__stxr(v725 + 1, v724));
                }
                v726 = *(_OWORD *)&v812[8];
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)&v812[8];
                *(_OWORD *)&v812[8] = 0uLL;
                v821[0] = v722;
                v821[1] = v723;
                if (v723)
                {
                  v727 = (unint64_t *)&v723->__shared_owners_;
                  do
                    v728 = __ldxr(v727);
                  while (__stxr(v728 + 1, v727));
                }
                *(_QWORD *)v822 = &off_24EC6A3B8;
                *(_OWORD *)&v822[8] = v726;
                if (*((_QWORD *)&v726 + 1))
                {
                  v729 = (unint64_t *)(*((_QWORD *)&v726 + 1) + 8);
                  do
                    v730 = __ldxr(v729);
                  while (__stxr(v730 + 1, v729));
                }
                (*(void (**)(uint64_t *, void **))(*v704 + 16))(v704, v821);
                v731 = *(std::__shared_weak_count **)&v822[16];
                if (*(_QWORD *)&v822[16])
                {
                  v732 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
                  do
                    v733 = __ldaxr(v732);
                  while (__stlxr(v733 - 1, v732));
                  if (!v733)
                  {
                    ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
                    std::__shared_weak_count::__release_weak(v731);
                  }
                }
                v734 = (std::__shared_weak_count *)v821[1];
                if (v821[1])
                {
                  v735 = (unint64_t *)((char *)v821[1] + 8);
                  do
                    v736 = __ldaxr(v735);
                  while (__stlxr(v736 - 1, v735));
                  if (!v736)
                  {
                    ((void (*)(std::__shared_weak_count *))v734->__on_zero_shared)(v734);
                    std::__shared_weak_count::__release_weak(v734);
                  }
                }
                v737 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
                if (__dst.__r_.__value_.__r.__words[2])
                {
                  v738 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
                  do
                    v739 = __ldaxr(v738);
                  while (__stlxr(v739 - 1, v738));
                  if (!v739)
                  {
                    ((void (*)(std::__shared_weak_count *))v737->__on_zero_shared)(v737);
                    std::__shared_weak_count::__release_weak(v737);
                  }
                }
                if (v723)
                {
                  v740 = (unint64_t *)&v723->__shared_owners_;
                  do
                    v741 = __ldaxr(v740);
                  while (__stlxr(v741 - 1, v740));
                  if (!v741)
                  {
                    ((void (*)(std::__shared_weak_count *))v723->__on_zero_shared)(v723);
                    std::__shared_weak_count::__release_weak(v723);
                  }
                }
                v742 = *(std::__shared_weak_count **)&v812[16];
                if (*(_QWORD *)&v812[16])
                {
                  v743 = (unint64_t *)(*(_QWORD *)&v812[16] + 8);
                  do
                    v744 = __ldaxr(v743);
                  while (__stlxr(v744 - 1, v743));
                  if (!v744)
                  {
                    ((void (*)(std::__shared_weak_count *))v742->__on_zero_shared)(v742);
                    std::__shared_weak_count::__release_weak(v742);
                  }
                }
              }
            }
            if (SHIBYTE(v820.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v820.__r_.__value_.__l.__data_);
            goto LABEL_925;
          }
        }
        if (v697 >= 0)
          v703 = &v816;
        else
          v703 = (std::string *)v816.__r_.__value_.__r.__words[0];
        memmove(v700, v703, v698);
        goto LABEL_1163;
      }
LABEL_925:
      if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v816.__r_.__value_.__l.__data_);
        v548 += 16;
        if (v548 == v549)
          return;
      }
      else
      {
        v548 += 16;
        if (v548 == v549)
          return;
      }
    }
    v574 = a3[23];
    if (v574 >= 0)
      v575 = *((unsigned __int8 *)a3 + 23);
    else
      v575 = *((_QWORD *)a3 + 1);
    v576 = v575 + 1;
    if (v575 + 1 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v576 >= 0x17)
    {
      v607 = (v576 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v576 | 7) != 0x17)
        v607 = v576 | 7;
      v608 = v607 + 1;
      v577 = operator new(v607 + 1);
      *(_QWORD *)&v812[8] = v575 + 1;
      *(_QWORD *)&v812[16] = v608 | 0x8000000000000000;
      *(_QWORD *)v812 = v577;
      v549 = v811;
    }
    else
    {
      memset(v812, 0, 24);
      v577 = v812;
      v812[23] = v575 + 1;
      if (!v575)
        goto LABEL_1018;
    }
    if (v574 >= 0)
      v609 = a3;
    else
      v609 = *(const std::string::value_type **)a3;
    memmove(v577, v609, v575);
LABEL_1018:
    *(_WORD *)&v577[v575] = 46;
    v610 = std::string::append((std::string *)v812, "Planes", 6uLL);
    v611 = *(_OWORD *)&v610->__r_.__value_.__l.__data_;
    *(_QWORD *)v838 = *((_QWORD *)&v610->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v611;
    v610->__r_.__value_.__l.__size_ = 0;
    v610->__r_.__value_.__r.__words[2] = 0;
    v610->__r_.__value_.__r.__words[0] = 0;
    v821[0] = "cv3d.recon.";
    v821[1] = (void *)11;
    v612 = (void *)v838[7];
    v613 = __p;
    if (v838[7] < 0)
    {
      v613 = (void **)__p[0];
      v612 = __p[1];
    }
    *(_QWORD *)v822 = v613;
    *(_QWORD *)&v822[8] = v612;
    sub_2231A9820((uint64_t)v821, (uint64_t)&v822[16], 0, 0, &v815);
    if ((v838[7] & 0x80000000) != 0)
    {
      operator delete(__p[0]);
      if ((v812[23] & 0x80000000) == 0)
        goto LABEL_1022;
    }
    else if ((v812[23] & 0x80000000) == 0)
    {
LABEL_1022:
      v614 = HIBYTE(v815.__r_.__value_.__r.__words[2]);
      v615 = *(_OWORD *)&v815.__r_.__value_.__l.__data_;
      sub_2241471F8();
      if ((v614 & 0x80u) == 0)
        v616 = &v815;
      else
        v616 = (std::string *)v615;
      if ((v614 & 0x80u) == 0)
        v617 = v614;
      else
        v617 = *((_QWORD *)&v615 + 1);
      v618 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v616, v617);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v618 + 24))(v618))
      {
        *(_OWORD *)__p = 0u;
        *(_OWORD *)v838 = 0u;
        *(_DWORD *)&v838[16] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v618 + 24))(v618))
        {
          if (SHIBYTE(v816.__r_.__value_.__r.__words[2]) < 0)
            sub_223197FA4(&v819, v816.__r_.__value_.__l.__data_, v816.__r_.__value_.__l.__size_);
          else
            v819 = v816;
          v814.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v814.__r_.__value_.__l.__size_ = v803 & 0xFFFFFFFFFFFFFF00 | 2;
          v803 = v814.__r_.__value_.__l.__size_;
          v776 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v618 + 24))(v618))
          {
            sub_2241498F4((uint64_t)v821, 0);
            *(std::string *)v812 = v819;
            memset(&v819, 0, sizeof(v819));
            v812[24] = 1;
            sub_22329F414((uint64_t)v821, (__int128 *)v812, (__int128 *)&v814, &__dst);
            if (v812[24] && (v812[23] & 0x80000000) != 0)
              operator delete(*(void **)v812);
            sub_22316F8F4((uint64_t *)v821);
            v777 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v618 + 56))(v618);
            v778 = *(void **)v777;
            v779 = *(std::__shared_weak_count **)(v777 + 8);
            if (v779)
            {
              v780 = (unint64_t *)&v779->__shared_owners_;
              do
                v781 = __ldxr(v780);
              while (__stxr(v781 + 1, v780));
            }
            v782 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
            v820.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v820.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
            v821[0] = v778;
            v821[1] = v779;
            if (v779)
            {
              v783 = (unint64_t *)&v779->__shared_owners_;
              do
                v784 = __ldxr(v783);
              while (__stxr(v784 + 1, v783));
            }
            *(_QWORD *)v822 = &off_24EC6A3B8;
            *(_OWORD *)&v822[8] = v782;
            if (*((_QWORD *)&v782 + 1))
            {
              v785 = (unint64_t *)(*((_QWORD *)&v782 + 1) + 8);
              do
                v786 = __ldxr(v785);
              while (__stxr(v786 + 1, v785));
            }
            (*(void (**)(uint64_t *, void **))(*v776 + 16))(v776, v821);
            v787 = *(std::__shared_weak_count **)&v822[16];
            if (*(_QWORD *)&v822[16])
            {
              v788 = (unint64_t *)(*(_QWORD *)&v822[16] + 8);
              do
                v789 = __ldaxr(v788);
              while (__stlxr(v789 - 1, v788));
              if (!v789)
              {
                ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
                std::__shared_weak_count::__release_weak(v787);
              }
            }
            v790 = (std::__shared_weak_count *)v821[1];
            if (v821[1])
            {
              v791 = (unint64_t *)((char *)v821[1] + 8);
              do
                v792 = __ldaxr(v791);
              while (__stlxr(v792 - 1, v791));
              if (!v792)
              {
                ((void (*)(std::__shared_weak_count *))v790->__on_zero_shared)(v790);
                std::__shared_weak_count::__release_weak(v790);
              }
            }
            v793 = (std::__shared_weak_count *)v820.__r_.__value_.__r.__words[2];
            if (v820.__r_.__value_.__r.__words[2])
            {
              v794 = (unint64_t *)(v820.__r_.__value_.__r.__words[2] + 8);
              do
                v795 = __ldaxr(v794);
              while (__stlxr(v795 - 1, v794));
              if (!v795)
              {
                ((void (*)(std::__shared_weak_count *))v793->__on_zero_shared)(v793);
                std::__shared_weak_count::__release_weak(v793);
              }
            }
            if (v779)
            {
              v796 = (unint64_t *)&v779->__shared_owners_;
              do
                v797 = __ldaxr(v796);
              while (__stlxr(v797 - 1, v796));
              if (!v797)
              {
                ((void (*)(std::__shared_weak_count *))v779->__on_zero_shared)(v779);
                std::__shared_weak_count::__release_weak(v779);
              }
            }
            v798 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
            if (__dst.__r_.__value_.__r.__words[2])
            {
              v799 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
              do
                v800 = __ldaxr(v799);
              while (__stlxr(v800 - 1, v799));
              if (!v800)
              {
                ((void (*)(std::__shared_weak_count *))v798->__on_zero_shared)(v798);
                std::__shared_weak_count::__release_weak(v798);
              }
            }
          }
          if (SHIBYTE(v819.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v819.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
      if (SHIBYTE(v815.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v815.__r_.__value_.__l.__data_);
      goto LABEL_961;
    }
    operator delete(*(void **)v812);
    goto LABEL_1022;
  }
}

void sub_2233A4C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *p_shared_owners;
  unint64_t v67;

  sub_2241231D8(a12);
  v63 = (std::__shared_weak_count *)a61;
  if (a61)
  {
    v64 = (unint64_t *)(a61 + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  sub_2241231D8((uint64_t)&a56);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v67 = __ldaxr(p_shared_owners);
    while (__stlxr(v67 - 1, p_shared_owners));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  sub_2241231D8((uint64_t)&a45);
  if (a37 < 0)
    operator delete(__p);
  sub_2231874DC((uint64_t)&STACK[0x340]);
  if (a54 < 0)
    operator delete(a49);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(a1);
}

void sub_2233A5B58(uint64_t a1, float *a2, float32x2_t *a3, uint64_t a4, double a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::mutex *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  uint64_t v19;
  int v20;
  int v21;
  double v22;
  unsigned __int8 v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  uint64_t v32;
  int v33;
  unsigned __int8 v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::mutex *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (**v42)();
  uint64_t v43;
  int v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  std::mutex *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  size_t v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)();
  std::string *v59;
  __int128 v60;
  void *v61;
  void **v62;
  uint64_t v63;
  uint64_t *v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int v69;
  int v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  unsigned int v74;
  uint64_t (**v75)();
  unsigned int i;
  float32x4_t v82;
  int8x16_t v83;
  float32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  char *v93;
  char *v94;
  _DWORD *v95;
  uint64_t v96;
  int v97;
  uint64_t (**v98)();
  unsigned __int8 v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  __int128 v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unsigned __int8 v115;
  std::string *v116;
  __int128 v117;
  int v118;
  const std::string::value_type *v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  void **v123;
  uint64_t v124;
  int v125;
  unsigned __int8 v126;
  std::string *v127;
  __int128 v128;
  int v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  __int128 v135;
  std::string *v136;
  __int128 v137;
  void **v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t *v141;
  float v142;
  float v143;
  float v144;
  float v145;
  int v146;
  int v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  unsigned int v151;
  uint64_t (**v152)();
  unsigned int j;
  float32x4_t v155;
  int8x16_t v156;
  float32x2_t v157;
  float32x4_t v158;
  float32x4_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _DWORD *v165;
  _DWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  uint64_t v169;
  int v170;
  uint64_t (**v171)();
  unsigned __int8 v172;
  uint64_t v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  __int128 v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t *v197;
  int v198;
  int v199;
  float32x4_t v200;
  float32x4_t v201;
  uint64_t v202;
  uint64_t v203;
  void *__p[2];
  __int128 v205;
  int v206;
  std::string v207;
  __int128 v208;
  std::string v209;
  _BYTE __dst[32];
  std::string *v211;
  std::string v212;
  uint64_t v213;
  int v214;
  void *v215[2];
  uint64_t (**v216)();
  _BYTE v217[24];
  __int128 v218;
  int v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v10 = sub_2241471F8();
    v11 = v10[2];
    if (!v11)
    {
      v12 = v10;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v11 = v12[2];
    }
    v13 = *(_QWORD *)(v11 + 64);
    v14 = (std::mutex *)(v13 + 32);
    std::mutex::lock((std::mutex *)(v13 + 32));
    v16 = *(_QWORD *)(v13 + 96);
    v15 = *(_QWORD *)(v13 + 104);
    std::mutex::unlock(v14);
    if (v16 != v15)
    {
      v215[0] = "cv3d.recon.";
      v215[1] = (void *)11;
      v17 = *(unsigned __int8 *)(a4 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = (uint64_t (**)())a4;
      else
        v18 = *(uint64_t (***)())a4;
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a4 + 8);
      v216 = v18;
      *(_QWORD *)v217 = v17;
      sub_2231A9820((uint64_t)v215, (uint64_t)&v217[8], 0, 0, (std::string *)__p);
      sub_2241471F8();
      v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v21 = v20;
      if (SBYTE7(v205) < 0)
      {
        operator delete(__p[0]);
        if (!v21)
          goto LABEL_21;
      }
      else if (!v20)
      {
        goto LABEL_21;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a5)
      {
        v22 = a5 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a5)
          v22 = *(double *)&qword_255788F20 - a5;
        if (v22 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a5;
      }
      kdebug_trace();
    }
  }
LABEL_21:
  v23 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v23 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v24 = std::string::append((std::string *)__dst, ".", 1uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(_QWORD *)&v205 = *((_QWORD *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = *(char *)(a4 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a4;
  else
    v27 = *(const std::string::value_type **)a4;
  if (v26 >= 0)
    v28 = *(unsigned __int8 *)(a4 + 23);
  else
    v28 = *(_QWORD *)(a4 + 8);
  v29 = std::string::append((std::string *)__p, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v216 = (uint64_t (**)())v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)v215 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v216) >= 0)
    v31 = v215;
  else
    v31 = (void **)v215[0];
  strlen((const char *)v31);
  sub_2241471F8();
  v32 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
  if (SHIBYTE(v216) < 0)
  {
    operator delete(v215[0]);
    if ((SBYTE7(v205) & 0x80000000) == 0)
    {
LABEL_36:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_37;
LABEL_41:
      operator delete(*(void **)__dst);
      if (!v33)
        goto LABEL_44;
LABEL_42:
      v34 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v34 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      qword_25578BAF0 = *(_QWORD *)&a5;
      goto LABEL_44;
    }
  }
  else if ((SBYTE7(v205) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_41;
LABEL_37:
  if (v33)
    goto LABEL_42;
LABEL_44:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v35 = sub_2241471F8();
    v36 = v35[2];
    if (!v36)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v36 = v35[2];
    }
    v37 = *(_QWORD *)(v36 + 64);
    v38 = (std::mutex *)(v37 + 32);
    std::mutex::lock((std::mutex *)(v37 + 32));
    v40 = *(_QWORD *)(v37 + 96);
    v39 = *(_QWORD *)(v37 + 104);
    std::mutex::unlock(v38);
    if (v40 != v39)
    {
      v215[0] = "cv3d.recon.";
      v215[1] = (void *)11;
      v41 = *(unsigned __int8 *)(a4 + 23);
      if ((v41 & 0x80u) == 0)
        v42 = (uint64_t (**)())a4;
      else
        v42 = *(uint64_t (***)())a4;
      if ((v41 & 0x80u) != 0)
        v41 = *(_QWORD *)(a4 + 8);
      v216 = v42;
      *(_QWORD *)v217 = v41;
      sub_2231A9820((uint64_t)v215, (uint64_t)&v217[8], 0, 0, (std::string *)__p);
      sub_2241471F8();
      v43 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      v45 = v44;
      if (SBYTE7(v205) < 0)
      {
        operator delete(__p[0]);
        if (!v45)
          goto LABEL_142;
      }
      else if (!v44)
      {
        goto LABEL_142;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v46 = sub_2241471F8();
        v47 = v46[2];
        if (!v47)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v47 = v46[2];
        }
        v48 = *(_QWORD *)(v47 + 64);
        v49 = (std::mutex *)(v48 + 32);
        std::mutex::lock((std::mutex *)(v48 + 32));
        v51 = *(_QWORD *)(v48 + 96);
        v50 = *(_QWORD *)(v48 + 104);
        std::mutex::unlock(v49);
        if (v51 != v50)
        {
          v52 = *(char *)(a4 + 23);
          if (v52 >= 0)
            v53 = *(unsigned __int8 *)(a4 + 23);
          else
            v53 = *(_QWORD *)(a4 + 8);
          v54 = v53 + 1;
          if (v53 + 1 >= 0x7FFFFFFFFFFFFFF8)
            sub_22316DBC0();
          if (v54 >= 0x17)
          {
            v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v54 | 7) != 0x17)
              v56 = v54 | 7;
            v57 = v56 + 1;
            v55 = operator new(v56 + 1);
            *(_QWORD *)&__dst[8] = v53 + 1;
            *(_QWORD *)&__dst[16] = v57 | 0x8000000000000000;
            *(_QWORD *)__dst = v55;
          }
          else
          {
            memset(__dst, 0, 24);
            v55 = __dst;
            __dst[23] = v53 + 1;
            if (!v53)
            {
LABEL_77:
              *(_WORD *)&v55[v53] = 46;
              v59 = std::string::append((std::string *)__dst, "Planes", 6uLL);
              v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
              *(_QWORD *)&v205 = *((_QWORD *)&v59->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v60;
              v59->__r_.__value_.__l.__size_ = 0;
              v59->__r_.__value_.__r.__words[2] = 0;
              v59->__r_.__value_.__r.__words[0] = 0;
              v215[0] = "cv3d.recon.";
              v215[1] = (void *)11;
              v61 = (void *)BYTE7(v205);
              v62 = __p;
              if (SBYTE7(v205) < 0)
              {
                v62 = (void **)__p[0];
                v61 = __p[1];
              }
              v216 = (uint64_t (**)())v62;
              *(_QWORD *)v217 = v61;
              sub_2231A9820((uint64_t)v215, (uint64_t)&v217[8], 0, 0, &v207);
              if (SBYTE7(v205) < 0)
                operator delete(__p[0]);
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              sub_2241471F8();
              v63 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63))
              {
                *(_OWORD *)__p = 0u;
                v205 = 0u;
                v206 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63))
                {
                  *(_QWORD *)&v208 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v208 + 1) = 2;
                  v64 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63))
                  {
                    v197 = v64;
                    sub_2241498F4((uint64_t)v215, 0);
                    v65 = *a2;
                    v66 = a2[4];
                    v67 = a2[6];
                    v68 = a2[7];
                    v69 = *(_DWORD *)(a1 + 8);
                    v70 = *(_DWORD *)(a1 + 12);
                    sub_22339E3C8((uint64_t)v215, (v70 * v69));
                    if (v70 && v69)
                    {
                      v74 = 0;
                      v75 = (uint64_t (**)())v215[1];
                      __asm { FMOV            V0.4S, #1.0 }
                      v202 = *((_QWORD *)&_Q0 + 1);
                      v198 = v70;
                      do
                      {
                        for (i = 0; i != v69; ++i)
                        {
                          while (1)
                          {
                            v82.i64[1] = v202;
                            v82.f32[0] = (float)((float)i - v67) / v65;
                            v82.f32[1] = (float)((float)v74 - v68) / v66;
                            v83 = (int8x16_t)vmulq_n_f32(v82, *(float *)(*(_QWORD *)a1+ 4 * (*(_DWORD *)(a1 + 16) * i + *(_DWORD *)(a1 + 20) * v74)));
                            v71.i32[0] = a3[1].i32[0];
                            v72.i32[0] = a3[3].i32[0];
                            v73.i32[0] = a3[5].i32[0];
                            *(float32x2_t *)v82.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a3, *(float *)v83.i32), a3[2], *(float32x2_t *)v83.i8, 1), a3[4], (float32x4_t)v83, 2);
                            v84 = vmla_lane_f32(vmul_f32(v71, *(float32x2_t *)v83.i8), v72, *(float32x2_t *)v83.i8, 1);
                            v85 = (float32x4_t)vextq_s8(v83, v83, 8uLL);
                            v71 = vmla_f32(v84, *(float32x2_t *)v85.f32, v73);
                            *(float32x2_t *)&v82.u32[2] = v71;
                            *(float32x2_t *)v85.f32 = a3[6];
                            v85.i32[2] = a3[7].i32[0];
                            v86 = vaddq_f32(v85, v82);
                            if (v75 >= v216)
                              break;
                            *((_DWORD *)v75 + 2) = v86.i32[2];
                            *v75 = (uint64_t (*)())v86.i64[0];
                            v75 = (uint64_t (**)())((char *)v75 + 12);
                            v215[1] = v75;
                            if (++i == v69)
                              goto LABEL_89;
                          }
                          v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (char *)v215[0]) >> 2);
                          v88 = v87 + 1;
                          if (v87 + 1 > 0x1555555555555555)
                            sub_22316E078();
                          if (0x5555555555555556 * (((char *)v216 - (char *)v215[0]) >> 2) > v88)
                            v88 = 0x5555555555555556 * (((char *)v216 - (char *)v215[0]) >> 2);
                          if (0xAAAAAAAAAAAAAAABLL * (((char *)v216 - (char *)v215[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                            v89 = 0x1555555555555555;
                          else
                            v89 = v88;
                          if (v89)
                          {
                            v200 = v86;
                            LODWORD(v209.__r_.__value_.__l.__data_) = v89;
                            if (*(_DWORD *)&v217[4] == -1)
                              sub_22316DD70();
                            *(_QWORD *)__dst = &v209;
                            v90 = ((uint64_t (*)(_BYTE *, _BYTE *))off_24EC35DA0[*(unsigned int *)&v217[4]])(__dst, v217);
                            v86 = v200;
                          }
                          else
                          {
                            v90 = 0;
                            v91 = 0;
                          }
                          v92 = (_DWORD *)(v90 + 12 * v87);
                          *(_QWORD *)v92 = v86.i64[0];
                          v92[2] = v86.i32[2];
                          v94 = (char *)v215[0];
                          v93 = (char *)v215[1];
                          v95 = v92;
                          if (v215[1] != v215[0])
                          {
                            do
                            {
                              v96 = *(_QWORD *)(v93 - 12);
                              v93 -= 12;
                              v97 = *((_DWORD *)v93 + 2);
                              *(_QWORD *)(v95 - 3) = v96;
                              v95 -= 3;
                              v95[2] = v97;
                            }
                            while (v93 != v94);
                            v93 = (char *)v215[0];
                          }
                          v75 = (uint64_t (**)())(v92 + 3);
                          v215[0] = v95;
                          v215[1] = v92 + 3;
                          v98 = v216;
                          v216 = (uint64_t (**)())(v90 + 12 * v91);
                          if (v93)
                          {
                            *(_QWORD *)__dst = v93;
                            *(_DWORD *)&__dst[8] = -1431655765 * ((unint64_t)((char *)v98 - v93) >> 2);
                            if (*(_DWORD *)&v217[4] == -1)
                              sub_22316DD70();
                            v209.__r_.__value_.__r.__words[0] = (std::string::size_type)__dst;
                            ((void (*)(std::string *, _BYTE *))off_24EC35DB0[*(unsigned int *)&v217[4]])(&v209, v217);
                          }
                          v215[1] = v75;
                        }
LABEL_89:
                        ++v74;
                      }
                      while (v74 != v198);
                    }
                    v99 = atomic_load((unsigned __int8 *)&qword_2540CABA8);
                    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_2540CABA8))
                    {
                      qword_2540CABC8 = 0x3F0000003F000000;
                      dword_2540CABD0 = 1056964608;
                      __cxa_guard_release(&qword_2540CABA8);
                    }
                    v219 = 1;
                    sub_22339EBD4((uint64_t)__dst, 0xAAAAAAAAAAAAAAABLL * (((char *)v215[1] - (char *)v215[0]) >> 2), (uint64_t)&qword_2540CABC8);
                    if (*(_QWORD *)&v217[8])
                    {
                      *(_QWORD *)&v217[16] = *(_QWORD *)&v217[8];
                      v209.__r_.__value_.__r.__words[0] = *(_QWORD *)&v217[8];
                      LODWORD(v209.__r_.__value_.__r.__words[1]) = -1431655765
                                                                 * (((_QWORD)v218 - *(_QWORD *)&v217[8]) >> 2);
                      if (HIDWORD(v218) == -1)
                        sub_22316DD70();
                      v211 = &v209;
                      ((void (*)(std::string **, char *))off_24EC35DB0[HIDWORD(v218)])(&v211, (char *)&v218 + 8);
                    }
                    *(_OWORD *)&v217[8] = *(_OWORD *)__dst;
                    v218 = *(_OWORD *)&__dst[16];
                    strcpy(__dst, "PointCloud");
                    *(_QWORD *)&__dst[11] = v213;
                    *(_DWORD *)&__dst[19] = v214;
                    *(_WORD *)&__dst[23] = 266;
                    v213 = 0;
                    v214 = 0;
                    sub_22329F414((uint64_t)v215, (__int128 *)__dst, &v208, &v212);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_22316F8F4((uint64_t *)v215);
                    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 56))(v63);
                    v101 = *(void **)v100;
                    v102 = *(std::__shared_weak_count **)(v100 + 8);
                    if (v102)
                    {
                      p_shared_owners = (unint64_t *)&v102->__shared_owners_;
                      do
                        v104 = __ldxr(p_shared_owners);
                      while (__stxr(v104 + 1, p_shared_owners));
                    }
                    v105 = *(_OWORD *)&v212.__r_.__value_.__r.__words[1];
                    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                    *(_OWORD *)&v209.__r_.__value_.__r.__words[1] = *(_OWORD *)&v212.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v212.__r_.__value_.__r.__words[1] = 0uLL;
                    v215[0] = v101;
                    v215[1] = v102;
                    if (v102)
                    {
                      v106 = (unint64_t *)&v102->__shared_owners_;
                      do
                        v107 = __ldxr(v106);
                      while (__stxr(v107 + 1, v106));
                    }
                    v216 = &off_24EC6A3B8;
                    *(_OWORD *)v217 = v105;
                    if (*((_QWORD *)&v105 + 1))
                    {
                      v108 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
                      do
                        v109 = __ldxr(v108);
                      while (__stxr(v109 + 1, v108));
                    }
                    (*(void (**)(uint64_t *, void **))(*v197 + 16))(v197, v215);
                    sub_2241231D8((uint64_t)&v216);
                    v110 = (std::__shared_weak_count *)v215[1];
                    if (v215[1])
                    {
                      v111 = (unint64_t *)((char *)v215[1] + 8);
                      do
                        v112 = __ldaxr(v111);
                      while (__stlxr(v112 - 1, v111));
                      if (!v112)
                      {
                        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                        std::__shared_weak_count::__release_weak(v110);
                      }
                    }
                    sub_2241231D8((uint64_t)&v209);
                    if (v102)
                    {
                      v113 = (unint64_t *)&v102->__shared_owners_;
                      do
                        v114 = __ldaxr(v113);
                      while (__stlxr(v114 - 1, v113));
                      if (!v114)
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                    sub_2241231D8((uint64_t)&v212);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v207.__r_.__value_.__l.__data_);
              goto LABEL_142;
            }
          }
          if (v52 >= 0)
            v58 = (uint64_t (*)())a4;
          else
            v58 = *(uint64_t (**)())a4;
          memmove(v55, v58, v53);
          goto LABEL_77;
        }
      }
    }
  }
LABEL_142:
  v115 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v115 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v116 = std::string::append((std::string *)__dst, ".", 1uLL);
  v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  *(_QWORD *)&v205 = *((_QWORD *)&v116->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  v118 = *(char *)(a4 + 23);
  if (v118 >= 0)
    v119 = (const std::string::value_type *)a4;
  else
    v119 = *(const std::string::value_type **)a4;
  if (v118 >= 0)
    v120 = *(unsigned __int8 *)(a4 + 23);
  else
    v120 = *(_QWORD *)(a4 + 8);
  v121 = std::string::append((std::string *)__p, v119, v120);
  v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
  v216 = (uint64_t (**)())v121->__r_.__value_.__r.__words[2];
  *(_OWORD *)v215 = v122;
  v121->__r_.__value_.__l.__size_ = 0;
  v121->__r_.__value_.__r.__words[2] = 0;
  v121->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v216) >= 0)
    v123 = v215;
  else
    v123 = (void **)v215[0];
  strlen((const char *)v123);
  sub_2241471F8();
  v124 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v125 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124);
  if (SHIBYTE(v216) < 0)
  {
    operator delete(v215[0]);
    if ((SBYTE7(v205) & 0x80000000) == 0)
    {
LABEL_157:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_158;
      goto LABEL_162;
    }
  }
  else if ((SBYTE7(v205) & 0x80000000) == 0)
  {
    goto LABEL_157;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_158:
    if (!v125)
      return;
    goto LABEL_163;
  }
LABEL_162:
  operator delete(*(void **)__dst);
  if (!v125)
    return;
LABEL_163:
  v126 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v126 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v209, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v209 = *(std::string *)byte_25578BAF8;
  v127 = std::string::append(&v209, ".", 1uLL);
  v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
  v212.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v128;
  v127->__r_.__value_.__l.__size_ = 0;
  v127->__r_.__value_.__r.__words[2] = 0;
  v127->__r_.__value_.__r.__words[0] = 0;
  v129 = *(char *)(a4 + 23);
  if (v129 >= 0)
    v130 = (const std::string::value_type *)a4;
  else
    v130 = *(const std::string::value_type **)a4;
  if (v129 >= 0)
    v131 = *(unsigned __int8 *)(a4 + 23);
  else
    v131 = *(_QWORD *)(a4 + 8);
  v132 = std::string::append(&v212, v130, v131);
  v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  *(_QWORD *)&__dst[16] = *((_QWORD *)&v132->__r_.__value_.__l + 2);
  *(_OWORD *)__dst = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  v134 = std::string::append((std::string *)__dst, ".", 1uLL);
  v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  *(_QWORD *)&v205 = *((_QWORD *)&v134->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v135;
  v134->__r_.__value_.__l.__size_ = 0;
  v134->__r_.__value_.__r.__words[2] = 0;
  v134->__r_.__value_.__r.__words[0] = 0;
  v136 = std::string::append((std::string *)__p, "Planes", 6uLL);
  v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
  v216 = (uint64_t (**)())v136->__r_.__value_.__r.__words[2];
  *(_OWORD *)v215 = v137;
  v136->__r_.__value_.__l.__size_ = 0;
  v136->__r_.__value_.__r.__words[2] = 0;
  v136->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v216) >= 0)
    v138 = v215;
  else
    v138 = (void **)v215[0];
  strlen((const char *)v138);
  sub_2241471F8();
  v139 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if (SHIBYTE(v216) < 0)
  {
    operator delete(v215[0]);
    if ((SBYTE7(v205) & 0x80000000) == 0)
    {
LABEL_178:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_179;
      goto LABEL_211;
    }
  }
  else if ((SBYTE7(v205) & 0x80000000) == 0)
  {
    goto LABEL_178;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_180;
LABEL_212:
    operator delete(v212.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_181;
    goto LABEL_213;
  }
LABEL_211:
  operator delete(*(void **)__dst);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_212;
LABEL_180:
  if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_181;
LABEL_213:
  operator delete(v209.__r_.__value_.__l.__data_);
LABEL_181:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139))
  {
    v140 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v140 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139))
    {
      v209.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      v209.__r_.__value_.__l.__size_ = 2;
      v141 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v139 + 24))(v139))
      {
        sub_2241498F4((uint64_t)v215, 0);
        v142 = *a2;
        v143 = a2[4];
        v144 = a2[6];
        v145 = a2[7];
        v147 = *(_DWORD *)(a1 + 8);
        v146 = *(_DWORD *)(a1 + 12);
        sub_22339E3C8((uint64_t)v215, (v146 * v147));
        if (v146 && v147)
        {
          v151 = 0;
          v152 = (uint64_t (**)())v215[1];
          __asm { FMOV            V0.4S, #1.0 }
          v203 = *((_QWORD *)&_Q0 + 1);
          v199 = v146;
          do
          {
            for (j = 0; j != v147; ++j)
            {
              v155.i64[1] = v203;
              v155.f32[0] = (float)((float)j - v144) / v142;
              v155.f32[1] = (float)((float)v151 - v145) / v143;
              v156 = (int8x16_t)vmulq_n_f32(v155, *(float *)(*(_QWORD *)a1+ 4 * (*(_DWORD *)(a1 + 16) * j + *(_DWORD *)(a1 + 20) * v151)));
              v148.i32[0] = a3[1].i32[0];
              v149.i32[0] = a3[3].i32[0];
              v150.i32[0] = a3[5].i32[0];
              *(float32x2_t *)v155.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a3, *(float *)v156.i32), a3[2], *(float32x2_t *)v156.i8, 1), a3[4], (float32x4_t)v156, 2);
              v157 = vmla_lane_f32(vmul_f32(v148, *(float32x2_t *)v156.i8), v149, *(float32x2_t *)v156.i8, 1);
              v158 = (float32x4_t)vextq_s8(v156, v156, 8uLL);
              v148 = vmla_f32(v157, *(float32x2_t *)v158.f32, v150);
              *(float32x2_t *)&v155.u32[2] = v148;
              *(float32x2_t *)v158.f32 = a3[6];
              v158.i32[2] = a3[7].i32[0];
              v159 = vaddq_f32(v158, v155);
              if (v152 < v216)
              {
                *((_DWORD *)v152 + 2) = v159.i32[2];
                *v152 = (uint64_t (*)())v159.i64[0];
                v152 = (uint64_t (**)())((char *)v152 + 12);
              }
              else
              {
                v160 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152 - (char *)v215[0]) >> 2);
                v161 = v160 + 1;
                if (v160 + 1 > 0x1555555555555555)
                  sub_22316E078();
                if (0x5555555555555556 * (((char *)v216 - (char *)v215[0]) >> 2) > v161)
                  v161 = 0x5555555555555556 * (((char *)v216 - (char *)v215[0]) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v216 - (char *)v215[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v162 = 0x1555555555555555;
                else
                  v162 = v161;
                if (v162)
                {
                  v201 = v159;
                  LODWORD(v212.__r_.__value_.__l.__data_) = v162;
                  if (*(_DWORD *)&v217[4] == -1)
                    sub_22316DD70();
                  __p[0] = &v212;
                  v163 = ((uint64_t (*)(void **, _BYTE *))off_24EC35DA0[*(unsigned int *)&v217[4]])(__p, v217);
                  v159 = v201;
                }
                else
                {
                  v163 = 0;
                  v164 = 0;
                }
                v165 = (_DWORD *)(v163 + 12 * v160);
                *(_QWORD *)v165 = v159.i64[0];
                v165[2] = v159.i32[2];
                v167 = v215[0];
                v166 = v215[1];
                v168 = v165;
                if (v215[1] != v215[0])
                {
                  do
                  {
                    v169 = *(_QWORD *)(v166 - 3);
                    v166 -= 3;
                    v170 = v166[2];
                    *(_QWORD *)(v168 - 3) = v169;
                    v168 -= 3;
                    v168[2] = v170;
                  }
                  while (v166 != v167);
                  v166 = v215[0];
                }
                v152 = (uint64_t (**)())(v165 + 3);
                v215[0] = v168;
                v215[1] = v165 + 3;
                v171 = v216;
                v216 = (uint64_t (**)())(v163 + 12 * v164);
                if (v166)
                {
                  __p[0] = v166;
                  LODWORD(__p[1]) = -1431655765 * ((unint64_t)((char *)v171 - (char *)v166) >> 2);
                  if (*(_DWORD *)&v217[4] == -1)
                    sub_22316DD70();
                  v212.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  ((void (*)(std::string *, _BYTE *))off_24EC35DB0[*(unsigned int *)&v217[4]])(&v212, v217);
                }
              }
              v215[1] = v152;
            }
            ++v151;
          }
          while (v151 != v199);
        }
        v172 = atomic_load((unsigned __int8 *)&qword_2540CABB0);
        if ((v172 & 1) == 0 && __cxa_guard_acquire(&qword_2540CABB0))
        {
          qword_2540CABD8 = 0x3F0000003F000000;
          dword_2540CABE0 = 1056964608;
          __cxa_guard_release(&qword_2540CABB0);
        }
        v219 = 1;
        sub_22339EBD4((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v215[1] - (char *)v215[0]) >> 2), (uint64_t)&qword_2540CABD8);
        if (*(_QWORD *)&v217[8])
        {
          *(_QWORD *)&v217[16] = *(_QWORD *)&v217[8];
          v212.__r_.__value_.__r.__words[0] = *(_QWORD *)&v217[8];
          LODWORD(v212.__r_.__value_.__r.__words[1]) = -1431655765 * (((_QWORD)v218 - *(_QWORD *)&v217[8]) >> 2);
          if (HIDWORD(v218) == -1)
            sub_22316DD70();
          v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v212;
          ((void (*)(std::string *, char *))off_24EC35DB0[HIDWORD(v218)])(&v207, (char *)&v218 + 8);
        }
        *(_OWORD *)&v217[8] = *(_OWORD *)__p;
        v218 = v205;
        __p[0] = (void *)0x6F6C43746E696F50;
        __p[1] = (void *)25717;
        LODWORD(v205) = v208;
        *(_DWORD *)((char *)&v205 + 3) = *(_DWORD *)((char *)&v208 + 3);
        *(_WORD *)((char *)&v205 + 7) = 266;
        sub_22329F414((uint64_t)v215, (__int128 *)__p, (__int128 *)&v209, __dst);
        if (BYTE8(v205) && SBYTE7(v205) < 0)
          operator delete(__p[0]);
        sub_22316F8F4((uint64_t *)v215);
        v173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 56))(v139);
        v174 = *(void **)v173;
        v175 = *(std::__shared_weak_count **)(v173 + 8);
        if (v175)
        {
          v176 = (unint64_t *)&v175->__shared_owners_;
          do
            v177 = __ldxr(v176);
          while (__stxr(v177 + 1, v176));
        }
        v178 = *(_OWORD *)&__dst[8];
        v212.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v212.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
        *(_OWORD *)&__dst[8] = 0uLL;
        v215[0] = v174;
        v215[1] = v175;
        if (v175)
        {
          v179 = (unint64_t *)&v175->__shared_owners_;
          do
            v180 = __ldxr(v179);
          while (__stxr(v180 + 1, v179));
        }
        v216 = &off_24EC6A3B8;
        *(_OWORD *)v217 = v178;
        if (*((_QWORD *)&v178 + 1))
        {
          v181 = (unint64_t *)(*((_QWORD *)&v178 + 1) + 8);
          do
            v182 = __ldxr(v181);
          while (__stxr(v182 + 1, v181));
        }
        (*(void (**)(uint64_t *, void **))(*v141 + 16))(v141, v215);
        v183 = *(std::__shared_weak_count **)&v217[8];
        if (*(_QWORD *)&v217[8])
        {
          v184 = (unint64_t *)(*(_QWORD *)&v217[8] + 8);
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
        v186 = (std::__shared_weak_count *)v215[1];
        if (v215[1])
        {
          v187 = (unint64_t *)((char *)v215[1] + 8);
          do
            v188 = __ldaxr(v187);
          while (__stlxr(v188 - 1, v187));
          if (!v188)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
        v189 = (std::__shared_weak_count *)v212.__r_.__value_.__r.__words[2];
        if (v212.__r_.__value_.__r.__words[2])
        {
          v190 = (unint64_t *)(v212.__r_.__value_.__r.__words[2] + 8);
          do
            v191 = __ldaxr(v190);
          while (__stlxr(v191 - 1, v190));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
            std::__shared_weak_count::__release_weak(v189);
          }
        }
        if (v175)
        {
          v192 = (unint64_t *)&v175->__shared_owners_;
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
        v194 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v195 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
      }
    }
  }
}

void sub_2233A7228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;

  sub_2241231D8(v50);
  v52 = (std::__shared_weak_count *)a49;
  if (a49)
  {
    v53 = (unint64_t *)(a49 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  sub_2241231D8((uint64_t)&a32);
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2241231D8((uint64_t)&a42);
  sub_2231874DC((uint64_t)&a19);
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233A75EC(_QWORD *a1, _QWORD *a2, uint64_t a3, double a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  void *v15;
  void **v16;
  void *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  double v23;
  unsigned __int8 v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  size_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)();
  void *v45;
  void **v46;
  void *v47;
  void **v48;
  void *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  std::mutex *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  size_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)();
  void *v66;
  void **v67;
  uint64_t v68;
  __int128 v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unsigned __int8 v93;
  std::string *v94;
  __int128 v95;
  int v96;
  const std::string::value_type *v97;
  std::string::size_type v98;
  std::string *v99;
  __int128 v100;
  void **v101;
  size_t v102;
  uint64_t v103;
  int v104;
  unsigned __int8 v105;
  std::string *v106;
  __int128 v107;
  int v108;
  const std::string::value_type *v109;
  std::string::size_type v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  void **v115;
  size_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  uint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  __int128 v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  std::mutex *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (**v158)();
  void *v159;
  void **v160;
  void *v161;
  void **v162;
  void *v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  std::mutex *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  size_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)();
  void *v180;
  void **v181;
  uint64_t v182;
  __int128 v183;
  std::string *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  __int128 v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t *v205;
  unint64_t v206;
  unsigned __int8 v207;
  std::string *v208;
  __int128 v209;
  int v210;
  const std::string::value_type *v211;
  std::string::size_type v212;
  std::string *v213;
  __int128 v214;
  void **v215;
  size_t v216;
  uint64_t v217;
  int v218;
  unsigned __int8 v219;
  std::string *v220;
  __int128 v221;
  int v222;
  const std::string::value_type *v223;
  std::string::size_type v224;
  std::string *v225;
  __int128 v226;
  std::string *v227;
  __int128 v228;
  void **v229;
  size_t v230;
  uint64_t v231;
  unsigned __int8 v232;
  uint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  BOOL v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t v241;
  void *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  __int128 v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  void *__p[2];
  __int128 v268;
  int v269;
  std::string v270;
  __int128 v271;
  uint64_t (**v272)();
  __int128 v273;
  _BYTE __dst[25];
  std::string v275;
  void *v276[2];
  uint64_t (**v277)();
  _OWORD v278[4];
  uint64_t v279;

  v279 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      v8 = v6;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v8[2];
    }
    v9 = *(_QWORD *)(v7 + 64);
    v10 = (std::mutex *)(v9 + 32);
    std::mutex::lock((std::mutex *)(v9 + 32));
    v12 = *(_QWORD *)(v9 + 96);
    v11 = *(_QWORD *)(v9 + 104);
    std::mutex::unlock(v10);
    if (v12 != v11)
    {
      v276[0] = "cv3d.recon.";
      v276[1] = (void *)11;
      v13 = *(unsigned __int8 *)(a3 + 23);
      if ((v13 & 0x80u) == 0)
        v14 = (uint64_t (**)())a3;
      else
        v14 = *(uint64_t (***)())a3;
      if ((v13 & 0x80u) != 0)
        v13 = *(_QWORD *)(a3 + 8);
      v277 = v14;
      *(_QWORD *)&v278[0] = v13;
      sub_2231A9820((uint64_t)v276, (uint64_t)v278 + 8, 0, 0, (std::string *)__p);
      v15 = (void *)BYTE7(v268);
      v16 = (void **)__p[0];
      v17 = __p[1];
      sub_2241471F8();
      if ((char)v15 >= 0)
        v18 = __p;
      else
        v18 = v16;
      if ((char)v15 >= 0)
        v19 = v15;
      else
        v19 = v17;
      v20 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v18, v19);
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
      v22 = v21;
      if (SBYTE7(v268) < 0)
      {
        operator delete(__p[0]);
        if (!v22)
          goto LABEL_27;
      }
      else if (!v21)
      {
        goto LABEL_27;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a4)
      {
        v23 = a4 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a4)
          v23 = *(double *)&qword_255788F20 - a4;
        if (v23 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a4;
      }
      kdebug_trace();
    }
  }
LABEL_27:
  v24 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v24 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v25 = std::string::append((std::string *)__dst, ".", 1uLL);
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  *(_QWORD *)&v268 = *((_QWORD *)&v25->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = *(char *)(a3 + 23);
  if (v27 >= 0)
    v28 = (const std::string::value_type *)a3;
  else
    v28 = *(const std::string::value_type **)a3;
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a3 + 23);
  else
    v29 = *(_QWORD *)(a3 + 8);
  v30 = std::string::append((std::string *)__p, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v277 = (uint64_t (**)())v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)v276 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v277) >= 0)
    v32 = v276;
  else
    v32 = (void **)v276[0];
  v33 = strlen((const char *)v32);
  sub_2241471F8();
  v34 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v32, v33);
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
  if (SHIBYTE(v277) < 0)
  {
    operator delete(v276[0]);
    if ((SBYTE7(v268) & 0x80000000) == 0)
    {
LABEL_42:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_43;
LABEL_47:
      operator delete(*(void **)__dst);
      if (!v35)
        goto LABEL_50;
LABEL_48:
      v36 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v36 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      qword_25578BAF0 = *(_QWORD *)&a4;
      goto LABEL_50;
    }
  }
  else if ((SBYTE7(v268) & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_47;
LABEL_43:
  if (v35)
    goto LABEL_48;
LABEL_50:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v37 = sub_2241471F8();
    v38 = v37[2];
    if (!v38)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v38 = v37[2];
    }
    v39 = *(_QWORD *)(v38 + 64);
    v40 = (std::mutex *)(v39 + 32);
    std::mutex::lock((std::mutex *)(v39 + 32));
    v42 = *(_QWORD *)(v39 + 96);
    v41 = *(_QWORD *)(v39 + 104);
    std::mutex::unlock(v40);
    if (v42 != v41)
    {
      v276[0] = "cv3d.recon.";
      v276[1] = (void *)11;
      v43 = *(unsigned __int8 *)(a3 + 23);
      if ((v43 & 0x80u) == 0)
        v44 = (uint64_t (**)())a3;
      else
        v44 = *(uint64_t (***)())a3;
      if ((v43 & 0x80u) != 0)
        v43 = *(_QWORD *)(a3 + 8);
      v277 = v44;
      *(_QWORD *)&v278[0] = v43;
      sub_2231A9820((uint64_t)v276, (uint64_t)v278 + 8, 0, 0, (std::string *)__p);
      v45 = (void *)BYTE7(v268);
      v46 = (void **)__p[0];
      v47 = __p[1];
      sub_2241471F8();
      v48 = (char)v45 >= 0 ? __p : v46;
      v49 = (char)v45 >= 0 ? v45 : v47;
      v50 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v48, v49);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50);
      v52 = v51;
      if (SBYTE7(v268) < 0)
      {
        operator delete(__p[0]);
        if (!v52)
          goto LABEL_137;
      }
      else if (!v51)
      {
        goto LABEL_137;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v53 = sub_2241471F8();
        v54 = v53[2];
        if (!v54)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v54 = v53[2];
        }
        v55 = *(_QWORD *)(v54 + 64);
        v56 = (std::mutex *)(v55 + 32);
        std::mutex::lock((std::mutex *)(v55 + 32));
        v58 = *(_QWORD *)(v55 + 96);
        v57 = *(_QWORD *)(v55 + 104);
        std::mutex::unlock(v56);
        if (v58 != v57)
        {
          v59 = *(char *)(a3 + 23);
          if (v59 >= 0)
            v60 = *(unsigned __int8 *)(a3 + 23);
          else
            v60 = *(_QWORD *)(a3 + 8);
          v61 = v60 + 12;
          if (v60 + 12 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v61 >= 0x17)
          {
            v63 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v61 | 7) != 0x17)
              v63 = v61 | 7;
            v64 = v63 + 1;
            v62 = operator new(v63 + 1);
            __p[1] = (void *)(v60 + 12);
            *(_QWORD *)&v268 = v64 | 0x8000000000000000;
            __p[0] = v62;
          }
          else
          {
            __p[1] = 0;
            *(_QWORD *)&v268 = 0;
            __p[0] = 0;
            v62 = __p;
            BYTE7(v268) = v60 + 12;
            if (!v60)
            {
LABEL_89:
              strcpy((char *)v62 + v60, ".InputImages");
              v276[0] = "cv3d.recon.";
              v276[1] = (void *)11;
              v66 = (void *)BYTE7(v268);
              v67 = __p;
              if (SBYTE7(v268) < 0)
              {
                v67 = (void **)__p[0];
                v66 = __p[1];
              }
              v277 = (uint64_t (**)())v67;
              *(_QWORD *)&v278[0] = v66;
              sub_2231A9820((uint64_t)v276, (uint64_t)v278 + 8, 0, 0, &v270);
              if (SBYTE7(v268) < 0)
                operator delete(__p[0]);
              v68 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
              v69 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v68 & 0x80u) == 0)
                v70 = &v270;
              else
                v70 = (std::string *)v69;
              if ((v68 & 0x80u) == 0)
                v71 = v68;
              else
                v71 = *((_QWORD *)&v69 + 1);
              v72 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v70, v71);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72))
              {
                *(_OWORD *)__p = 0u;
                v268 = 0u;
                v269 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72))
                {
                  *(_QWORD *)&v271 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v271 + 1) = 2;
                  v73 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72))
                  {
                    v74 = a1[1];
                    v75 = v74 << 32;
                    if (!HIDWORD(v74))
                      v75 = 0;
                    if (a1[1])
                      v76 = HIDWORD(v74) == 0;
                    else
                      v76 = 1;
                    v77 = v75 | (a1[1] != 0);
                    if (v76)
                      v74 = 0;
                    *(_QWORD *)__dst = *a1;
                    *(_QWORD *)&__dst[8] = v74;
                    *(_QWORD *)&__dst[16] = v77;
                    if (HIDWORD(v74) * HIDWORD(v75) == -1
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v276[0] = &off_24EC216B8;
                    sub_2233B305C((uint64_t)__dst, (uint64_t *)&v276[1]);
                    *(_QWORD *)__dst = 0x6874706544;
                    *(_WORD *)&__dst[23] = 261;
                    sub_22321B368(v276, (__int128 *)__dst, &v271, &v275);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_223167354((uint64_t)&v276[1]);
                    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 56))(v72);
                    v79 = *(void **)v78;
                    v80 = *(std::__shared_weak_count **)(v78 + 8);
                    if (v80)
                    {
                      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
                      do
                        v82 = __ldxr(p_shared_owners);
                      while (__stxr(v82 + 1, p_shared_owners));
                    }
                    v83 = *(_OWORD *)&v275.__r_.__value_.__r.__words[1];
                    v272 = &off_24EC6A3B8;
                    v273 = *(_OWORD *)&v275.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v275.__r_.__value_.__r.__words[1] = 0uLL;
                    v276[0] = v79;
                    v276[1] = v80;
                    if (v80)
                    {
                      v84 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v85 = __ldxr(v84);
                      while (__stxr(v85 + 1, v84));
                    }
                    v277 = &off_24EC6A3B8;
                    v278[0] = v83;
                    if (*((_QWORD *)&v83 + 1))
                    {
                      v86 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
                      do
                        v87 = __ldxr(v86);
                      while (__stxr(v87 + 1, v86));
                    }
                    (*(void (**)(uint64_t *, void **))(*v73 + 16))(v73, v276);
                    sub_2241231D8((uint64_t)&v277);
                    v88 = (std::__shared_weak_count *)v276[1];
                    if (v276[1])
                    {
                      v89 = (unint64_t *)((char *)v276[1] + 8);
                      do
                        v90 = __ldaxr(v89);
                      while (__stlxr(v90 - 1, v89));
                      if (!v90)
                      {
                        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                        std::__shared_weak_count::__release_weak(v88);
                      }
                    }
                    sub_2241231D8((uint64_t)&v272);
                    if (v80)
                    {
                      v91 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v92 = __ldaxr(v91);
                      while (__stlxr(v92 - 1, v91));
                      if (!v92)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    sub_2241231D8((uint64_t)&v275);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v270.__r_.__value_.__l.__data_);
              goto LABEL_137;
            }
          }
          if (v59 >= 0)
            v65 = (uint64_t (*)())a3;
          else
            v65 = *(uint64_t (**)())a3;
          memmove(v62, v65, v60);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_137:
  v93 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v93 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v94 = std::string::append((std::string *)__dst, ".", 1uLL);
  v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  *(_QWORD *)&v268 = *((_QWORD *)&v94->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  v96 = *(char *)(a3 + 23);
  if (v96 >= 0)
    v97 = (const std::string::value_type *)a3;
  else
    v97 = *(const std::string::value_type **)a3;
  if (v96 >= 0)
    v98 = *(unsigned __int8 *)(a3 + 23);
  else
    v98 = *(_QWORD *)(a3 + 8);
  v99 = std::string::append((std::string *)__p, v97, v98);
  v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  v277 = (uint64_t (**)())v99->__r_.__value_.__r.__words[2];
  *(_OWORD *)v276 = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v277) >= 0)
    v101 = v276;
  else
    v101 = (void **)v276[0];
  v102 = strlen((const char *)v101);
  sub_2241471F8();
  v103 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v101, v102);
  v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103);
  if (SHIBYTE(v277) < 0)
  {
    operator delete(v276[0]);
    if ((SBYTE7(v268) & 0x80000000) == 0)
    {
LABEL_152:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_153;
LABEL_157:
      operator delete(*(void **)__dst);
      if (!v104)
        goto LABEL_230;
LABEL_158:
      v105 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v105 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v275, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v275 = *(std::string *)byte_25578BAF8;
      v106 = std::string::append(&v275, ".", 1uLL);
      v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst[16] = *((_QWORD *)&v106->__r_.__value_.__l + 2);
      *(_OWORD *)__dst = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      v108 = *(char *)(a3 + 23);
      if (v108 >= 0)
        v109 = (const std::string::value_type *)a3;
      else
        v109 = *(const std::string::value_type **)a3;
      if (v108 >= 0)
        v110 = *(unsigned __int8 *)(a3 + 23);
      else
        v110 = *(_QWORD *)(a3 + 8);
      v111 = std::string::append((std::string *)__dst, v109, v110);
      v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
      *(_QWORD *)&v268 = *((_QWORD *)&v111->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v112;
      v111->__r_.__value_.__l.__size_ = 0;
      v111->__r_.__value_.__r.__words[2] = 0;
      v111->__r_.__value_.__r.__words[0] = 0;
      v113 = std::string::append((std::string *)__p, ".InputImages", 0xCuLL);
      v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
      v277 = (uint64_t (**)())v113->__r_.__value_.__r.__words[2];
      *(_OWORD *)v276 = v114;
      v113->__r_.__value_.__l.__size_ = 0;
      v113->__r_.__value_.__r.__words[2] = 0;
      v113->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v277) >= 0)
        v115 = v276;
      else
        v115 = (void **)v276[0];
      v116 = strlen((const char *)v115);
      sub_2241471F8();
      v117 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v115, v116);
      if (SHIBYTE(v277) < 0)
      {
        operator delete(v276[0]);
        if ((SBYTE7(v268) & 0x80000000) == 0)
        {
LABEL_173:
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_174;
          goto LABEL_251;
        }
      }
      else if ((SBYTE7(v268) & 0x80000000) == 0)
      {
        goto LABEL_173;
      }
      operator delete(__p[0]);
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_174:
        if ((SHIBYTE(v275.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_175;
LABEL_252:
        operator delete(v275.__r_.__value_.__l.__data_);
LABEL_175:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117))
        {
          v118 = atomic_load((unsigned __int8 *)&unk_25578BB10);
          if ((v118 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
          {
            __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
            __cxa_guard_release((__guard *)&unk_25578BB10);
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117))
          {
            v272 = (uint64_t (**)())(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
            *(_QWORD *)&v273 = 2;
            v119 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117))
            {
              v120 = a1[1];
              v121 = v120 << 32;
              if (!HIDWORD(v120))
                v121 = 0;
              if (a1[1])
                v122 = HIDWORD(v120) == 0;
              else
                v122 = 1;
              v123 = v121 | (a1[1] != 0);
              if (v122)
                v120 = 0;
              __p[0] = *(void **)a1;
              __p[1] = (void *)v120;
              *(_QWORD *)&v268 = v123;
              if (HIDWORD(v120) * HIDWORD(v121) == -1
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v276[0] = &off_24EC216B8;
              sub_2233B305C((uint64_t)__p, (uint64_t *)&v276[1]);
              __p[0] = (void *)0x6874706544;
              *(_WORD *)((char *)&v268 + 7) = 261;
              sub_22321B368(v276, (__int128 *)__p, (__int128 *)&v272, __dst);
              if (BYTE8(v268) && SBYTE7(v268) < 0)
                operator delete(__p[0]);
              v124 = (std::__shared_weak_count *)v277;
              if (v277)
              {
                v125 = (unint64_t *)(v277 + 1);
                do
                  v126 = __ldaxr(v125);
                while (__stlxr(v126 - 1, v125));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                  std::__shared_weak_count::__release_weak(v124);
                }
              }
              v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 56))(v117);
              v128 = *(void **)v127;
              v129 = *(std::__shared_weak_count **)(v127 + 8);
              if (v129)
              {
                v130 = (unint64_t *)&v129->__shared_owners_;
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
              }
              v132 = *(_OWORD *)&__dst[8];
              v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
              *(_OWORD *)&v275.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
              *(_OWORD *)&__dst[8] = 0uLL;
              v276[0] = v128;
              v276[1] = v129;
              if (v129)
              {
                v133 = (unint64_t *)&v129->__shared_owners_;
                do
                  v134 = __ldxr(v133);
                while (__stxr(v134 + 1, v133));
              }
              v277 = &off_24EC6A3B8;
              v278[0] = v132;
              if (*((_QWORD *)&v132 + 1))
              {
                v135 = (unint64_t *)(*((_QWORD *)&v132 + 1) + 8);
                do
                  v136 = __ldxr(v135);
                while (__stxr(v136 + 1, v135));
              }
              (*(void (**)(uint64_t *, void **))(*v119 + 16))(v119, v276);
              v137 = (std::__shared_weak_count *)*((_QWORD *)&v278[0] + 1);
              if (*((_QWORD *)&v278[0] + 1))
              {
                v138 = (unint64_t *)(*((_QWORD *)&v278[0] + 1) + 8);
                do
                  v139 = __ldaxr(v138);
                while (__stlxr(v139 - 1, v138));
                if (!v139)
                {
                  ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                  std::__shared_weak_count::__release_weak(v137);
                }
              }
              v140 = (std::__shared_weak_count *)v276[1];
              if (v276[1])
              {
                v141 = (unint64_t *)((char *)v276[1] + 8);
                do
                  v142 = __ldaxr(v141);
                while (__stlxr(v142 - 1, v141));
                if (!v142)
                {
                  ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                  std::__shared_weak_count::__release_weak(v140);
                }
              }
              v143 = (std::__shared_weak_count *)v275.__r_.__value_.__r.__words[2];
              if (v275.__r_.__value_.__r.__words[2])
              {
                v144 = (unint64_t *)(v275.__r_.__value_.__r.__words[2] + 8);
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 - 1, v144));
                if (!v145)
                {
                  ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                  std::__shared_weak_count::__release_weak(v143);
                }
              }
              if (v129)
              {
                v146 = (unint64_t *)&v129->__shared_owners_;
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
              v148 = *(std::__shared_weak_count **)&__dst[16];
              if (*(_QWORD *)&__dst[16])
              {
                v149 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                  std::__shared_weak_count::__release_weak(v148);
                }
              }
            }
          }
        }
        goto LABEL_230;
      }
LABEL_251:
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v275.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_175;
      goto LABEL_252;
    }
  }
  else if ((SBYTE7(v268) & 0x80000000) == 0)
  {
    goto LABEL_152;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_157;
LABEL_153:
  if (v104)
    goto LABEL_158;
LABEL_230:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v151 = sub_2241471F8();
    v152 = v151[2];
    if (!v152)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v152 = v151[2];
    }
    v153 = *(_QWORD *)(v152 + 64);
    v154 = (std::mutex *)(v153 + 32);
    std::mutex::lock((std::mutex *)(v153 + 32));
    v156 = *(_QWORD *)(v153 + 96);
    v155 = *(_QWORD *)(v153 + 104);
    std::mutex::unlock(v154);
    if (v156 != v155)
    {
      v276[0] = "cv3d.recon.";
      v276[1] = (void *)11;
      v157 = *(unsigned __int8 *)(a3 + 23);
      if ((v157 & 0x80u) == 0)
        v158 = (uint64_t (**)())a3;
      else
        v158 = *(uint64_t (***)())a3;
      if ((v157 & 0x80u) != 0)
        v157 = *(_QWORD *)(a3 + 8);
      v277 = v158;
      *(_QWORD *)&v278[0] = v157;
      sub_2231A9820((uint64_t)v276, (uint64_t)v278 + 8, 0, 0, (std::string *)__p);
      v159 = (void *)BYTE7(v268);
      v160 = (void **)__p[0];
      v161 = __p[1];
      sub_2241471F8();
      v162 = (char)v159 >= 0 ? __p : v160;
      v163 = (char)v159 >= 0 ? v159 : v161;
      v164 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v162, v163);
      v165 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v164 + 24))(v164);
      v166 = v165;
      if (SBYTE7(v268) < 0)
      {
        operator delete(__p[0]);
        if (!v166)
          goto LABEL_321;
      }
      else if (!v165)
      {
        goto LABEL_321;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v167 = sub_2241471F8();
        v168 = v167[2];
        if (!v168)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v168 = v167[2];
        }
        v169 = *(_QWORD *)(v168 + 64);
        v170 = (std::mutex *)(v169 + 32);
        std::mutex::lock((std::mutex *)(v169 + 32));
        v172 = *(_QWORD *)(v169 + 96);
        v171 = *(_QWORD *)(v169 + 104);
        std::mutex::unlock(v170);
        if (v172 != v171)
        {
          v173 = *(char *)(a3 + 23);
          if (v173 >= 0)
            v174 = *(unsigned __int8 *)(a3 + 23);
          else
            v174 = *(_QWORD *)(a3 + 8);
          v175 = v174 + 12;
          if (v174 + 12 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v175 >= 0x17)
          {
            v177 = (v175 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v175 | 7) != 0x17)
              v177 = v175 | 7;
            v178 = v177 + 1;
            v176 = operator new(v177 + 1);
            __p[1] = (void *)(v174 + 12);
            *(_QWORD *)&v268 = v178 | 0x8000000000000000;
            __p[0] = v176;
          }
          else
          {
            __p[1] = 0;
            *(_QWORD *)&v268 = 0;
            __p[0] = 0;
            v176 = __p;
            BYTE7(v268) = v174 + 12;
            if (!v174)
            {
LABEL_273:
              strcpy((char *)v176 + v174, ".InputImages");
              v276[0] = "cv3d.recon.";
              v276[1] = (void *)11;
              v180 = (void *)BYTE7(v268);
              v181 = __p;
              if (SBYTE7(v268) < 0)
              {
                v181 = (void **)__p[0];
                v180 = __p[1];
              }
              v277 = (uint64_t (**)())v181;
              *(_QWORD *)&v278[0] = v180;
              sub_2231A9820((uint64_t)v276, (uint64_t)v278 + 8, 0, 0, &v270);
              if (SBYTE7(v268) < 0)
                operator delete(__p[0]);
              v182 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
              v183 = *(_OWORD *)&v270.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v182 & 0x80u) == 0)
                v184 = &v270;
              else
                v184 = (std::string *)v183;
              if ((v182 & 0x80u) == 0)
                v185 = v182;
              else
                v185 = *((_QWORD *)&v183 + 1);
              v186 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v184, v185);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186))
              {
                *(_OWORD *)__p = 0u;
                v268 = 0u;
                v269 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186))
                {
                  *(_QWORD *)&v271 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v271 + 1) = 2;
                  v187 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v186 + 24))(v186))
                  {
                    v188 = a2[1];
                    v189 = v188 << 32;
                    if (!HIDWORD(v188))
                      v189 = 0;
                    if (a2[1])
                      v190 = HIDWORD(v188) == 0;
                    else
                      v190 = 1;
                    v191 = v189 | (a2[1] != 0);
                    if (v190)
                      v188 = 0;
                    *(_QWORD *)__dst = *a2;
                    *(_QWORD *)&__dst[8] = v188;
                    *(_QWORD *)&__dst[16] = v191;
                    if (HIDWORD(v188) * HIDWORD(v189) == -1
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    v276[0] = &off_24EC216B8;
                    sub_2233B305C((uint64_t)__dst, (uint64_t *)&v276[1]);
                    strcpy(__dst, "Confidence");
                    *(_WORD *)&__dst[23] = 266;
                    sub_22321B368(v276, (__int128 *)__dst, &v271, &v275);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_223167354((uint64_t)&v276[1]);
                    v192 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 56))(v186);
                    v193 = *(void **)v192;
                    v194 = *(std::__shared_weak_count **)(v192 + 8);
                    if (v194)
                    {
                      v195 = (unint64_t *)&v194->__shared_owners_;
                      do
                        v196 = __ldxr(v195);
                      while (__stxr(v196 + 1, v195));
                    }
                    v197 = *(_OWORD *)&v275.__r_.__value_.__r.__words[1];
                    v272 = &off_24EC6A3B8;
                    v273 = *(_OWORD *)&v275.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v275.__r_.__value_.__r.__words[1] = 0uLL;
                    v276[0] = v193;
                    v276[1] = v194;
                    if (v194)
                    {
                      v198 = (unint64_t *)&v194->__shared_owners_;
                      do
                        v199 = __ldxr(v198);
                      while (__stxr(v199 + 1, v198));
                    }
                    v277 = &off_24EC6A3B8;
                    v278[0] = v197;
                    if (*((_QWORD *)&v197 + 1))
                    {
                      v200 = (unint64_t *)(*((_QWORD *)&v197 + 1) + 8);
                      do
                        v201 = __ldxr(v200);
                      while (__stxr(v201 + 1, v200));
                    }
                    (*(void (**)(uint64_t *, void **))(*v187 + 16))(v187, v276);
                    sub_2241231D8((uint64_t)&v277);
                    v202 = (std::__shared_weak_count *)v276[1];
                    if (v276[1])
                    {
                      v203 = (unint64_t *)((char *)v276[1] + 8);
                      do
                        v204 = __ldaxr(v203);
                      while (__stlxr(v204 - 1, v203));
                      if (!v204)
                      {
                        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                        std::__shared_weak_count::__release_weak(v202);
                      }
                    }
                    sub_2241231D8((uint64_t)&v272);
                    if (v194)
                    {
                      v205 = (unint64_t *)&v194->__shared_owners_;
                      do
                        v206 = __ldaxr(v205);
                      while (__stlxr(v206 - 1, v205));
                      if (!v206)
                      {
                        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                        std::__shared_weak_count::__release_weak(v194);
                      }
                    }
                    sub_2241231D8((uint64_t)&v275);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v270.__r_.__value_.__l.__data_);
              goto LABEL_321;
            }
          }
          if (v173 >= 0)
            v179 = (uint64_t (*)())a3;
          else
            v179 = *(uint64_t (**)())a3;
          memmove(v176, v179, v174);
          goto LABEL_273;
        }
      }
    }
  }
LABEL_321:
  v207 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v207 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v208 = std::string::append((std::string *)__dst, ".", 1uLL);
  v209 = *(_OWORD *)&v208->__r_.__value_.__l.__data_;
  *(_QWORD *)&v268 = *((_QWORD *)&v208->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v209;
  v208->__r_.__value_.__l.__size_ = 0;
  v208->__r_.__value_.__r.__words[2] = 0;
  v208->__r_.__value_.__r.__words[0] = 0;
  v210 = *(char *)(a3 + 23);
  if (v210 >= 0)
    v211 = (const std::string::value_type *)a3;
  else
    v211 = *(const std::string::value_type **)a3;
  if (v210 >= 0)
    v212 = *(unsigned __int8 *)(a3 + 23);
  else
    v212 = *(_QWORD *)(a3 + 8);
  v213 = std::string::append((std::string *)__p, v211, v212);
  v214 = *(_OWORD *)&v213->__r_.__value_.__l.__data_;
  v277 = (uint64_t (**)())v213->__r_.__value_.__r.__words[2];
  *(_OWORD *)v276 = v214;
  v213->__r_.__value_.__l.__size_ = 0;
  v213->__r_.__value_.__r.__words[2] = 0;
  v213->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v277) >= 0)
    v215 = v276;
  else
    v215 = (void **)v276[0];
  v216 = strlen((const char *)v215);
  sub_2241471F8();
  v217 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v215, v216);
  v218 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v217 + 24))(v217);
  if (SHIBYTE(v277) < 0)
  {
    operator delete(v276[0]);
    if ((SBYTE7(v268) & 0x80000000) == 0)
    {
LABEL_336:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_337;
      goto LABEL_341;
    }
  }
  else if ((SBYTE7(v268) & 0x80000000) == 0)
  {
    goto LABEL_336;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_337:
    if (!v218)
      return;
    goto LABEL_342;
  }
LABEL_341:
  operator delete(*(void **)__dst);
  if (!v218)
    return;
LABEL_342:
  v219 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v219 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v275, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v275 = *(std::string *)byte_25578BAF8;
  v220 = std::string::append(&v275, ".", 1uLL);
  v221 = *(_OWORD *)&v220->__r_.__value_.__l.__data_;
  *(_QWORD *)&__dst[16] = *((_QWORD *)&v220->__r_.__value_.__l + 2);
  *(_OWORD *)__dst = v221;
  v220->__r_.__value_.__l.__size_ = 0;
  v220->__r_.__value_.__r.__words[2] = 0;
  v220->__r_.__value_.__r.__words[0] = 0;
  v222 = *(char *)(a3 + 23);
  if (v222 >= 0)
    v223 = (const std::string::value_type *)a3;
  else
    v223 = *(const std::string::value_type **)a3;
  if (v222 >= 0)
    v224 = *(unsigned __int8 *)(a3 + 23);
  else
    v224 = *(_QWORD *)(a3 + 8);
  v225 = std::string::append((std::string *)__dst, v223, v224);
  v226 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
  *(_QWORD *)&v268 = *((_QWORD *)&v225->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v226;
  v225->__r_.__value_.__l.__size_ = 0;
  v225->__r_.__value_.__r.__words[2] = 0;
  v225->__r_.__value_.__r.__words[0] = 0;
  v227 = std::string::append((std::string *)__p, ".InputImages", 0xCuLL);
  v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
  v277 = (uint64_t (**)())v227->__r_.__value_.__r.__words[2];
  *(_OWORD *)v276 = v228;
  v227->__r_.__value_.__l.__size_ = 0;
  v227->__r_.__value_.__r.__words[2] = 0;
  v227->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v277) >= 0)
    v229 = v276;
  else
    v229 = (void **)v276[0];
  v230 = strlen((const char *)v229);
  sub_2241471F8();
  v231 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v229, v230);
  if (SHIBYTE(v277) < 0)
  {
    operator delete(v276[0]);
    if ((SBYTE7(v268) & 0x80000000) == 0)
    {
LABEL_357:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_358;
LABEL_417:
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v275.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_359;
      goto LABEL_418;
    }
  }
  else if ((SBYTE7(v268) & 0x80000000) == 0)
  {
    goto LABEL_357;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_417;
LABEL_358:
  if ((SHIBYTE(v275.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_359;
LABEL_418:
  operator delete(v275.__r_.__value_.__l.__data_);
LABEL_359:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v231 + 24))(v231))
  {
    v232 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v232 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v231 + 24))(v231))
    {
      v272 = (uint64_t (**)())(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      *(_QWORD *)&v273 = 2;
      v233 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v231 + 24))(v231))
      {
        v234 = a2[1];
        v235 = v234 << 32;
        if (!HIDWORD(v234))
          v235 = 0;
        if (a2[1])
          v236 = HIDWORD(v234) == 0;
        else
          v236 = 1;
        v237 = v235 | (a2[1] != 0);
        if (v236)
          v234 = 0;
        __p[0] = *(void **)a2;
        __p[1] = (void *)v234;
        *(_QWORD *)&v268 = v237;
        if (HIDWORD(v234) * HIDWORD(v235) == -1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v276[0] = &off_24EC216B8;
        sub_2233B305C((uint64_t)__p, (uint64_t *)&v276[1]);
        __p[0] = (void *)0x6E656469666E6F43;
        __p[1] = (void *)25955;
        *(_WORD *)((char *)&v268 + 7) = 266;
        sub_22321B368(v276, (__int128 *)__p, (__int128 *)&v272, __dst);
        if (BYTE8(v268) && SBYTE7(v268) < 0)
          operator delete(__p[0]);
        v238 = (std::__shared_weak_count *)v277;
        if (v277)
        {
          v239 = (unint64_t *)(v277 + 1);
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
        }
        v241 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v231 + 56))(v231);
        v242 = *(void **)v241;
        v243 = *(std::__shared_weak_count **)(v241 + 8);
        if (v243)
        {
          v244 = (unint64_t *)&v243->__shared_owners_;
          do
            v245 = __ldxr(v244);
          while (__stxr(v245 + 1, v244));
        }
        v246 = *(_OWORD *)&__dst[8];
        v275.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v275.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
        *(_OWORD *)&__dst[8] = 0uLL;
        v276[0] = v242;
        v276[1] = v243;
        if (v243)
        {
          v247 = (unint64_t *)&v243->__shared_owners_;
          do
            v248 = __ldxr(v247);
          while (__stxr(v248 + 1, v247));
        }
        v277 = &off_24EC6A3B8;
        v278[0] = v246;
        if (*((_QWORD *)&v246 + 1))
        {
          v249 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
          do
            v250 = __ldxr(v249);
          while (__stxr(v250 + 1, v249));
        }
        (*(void (**)(uint64_t *, void **))(*v233 + 16))(v233, v276);
        v251 = (std::__shared_weak_count *)*((_QWORD *)&v278[0] + 1);
        if (*((_QWORD *)&v278[0] + 1))
        {
          v252 = (unint64_t *)(*((_QWORD *)&v278[0] + 1) + 8);
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }
        v254 = (std::__shared_weak_count *)v276[1];
        if (v276[1])
        {
          v255 = (unint64_t *)((char *)v276[1] + 8);
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        v257 = (std::__shared_weak_count *)v275.__r_.__value_.__r.__words[2];
        if (v275.__r_.__value_.__r.__words[2])
        {
          v258 = (unint64_t *)(v275.__r_.__value_.__r.__words[2] + 8);
          do
            v259 = __ldaxr(v258);
          while (__stlxr(v259 - 1, v258));
          if (!v259)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }
        if (v243)
        {
          v260 = (unint64_t *)&v243->__shared_owners_;
          do
            v261 = __ldaxr(v260);
          while (__stlxr(v261 - 1, v260));
          if (!v261)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        v262 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v263 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
            std::__shared_weak_count::__release_weak(v262);
          }
        }
      }
    }
  }
}

void sub_2233A9324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,std::__shared_weak_count *a46,int a47,__int16 a48,char a49,char a50)
{
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;

  sub_2241231D8(v51);
  v53 = a46;
  if (a46)
  {
    p_shared_owners = (unint64_t *)&a46->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_2241231D8((uint64_t)&a28);
  if (v50)
  {
    v56 = (unint64_t *)&v50->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_2241231D8((uint64_t)&a38);
  sub_2231874DC((uint64_t)&a11);
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233A9820(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  void *v16;
  void **v17;
  void *v18;
  void **v19;
  void *v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;
  unsigned __int8 v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  void **v33;
  size_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  std::mutex *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  void *v46;
  void **v47;
  void *v48;
  void **v49;
  void *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  std::mutex *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  size_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)();
  void *v67;
  void **v68;
  uint64_t v69;
  __int128 v70;
  std::string *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  float32x4_t v75;
  int8x16_t v77;
  float32x4_t v78;
  int8x16_t v79;
  _BYTE *v80;
  uint64_t v81;
  int v82;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _DWORD *v95;
  _BYTE *v96;
  float32x4_t v100;
  _BYTE *v101;
  _DWORD *v102;
  int v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v108;
  float32x4_t v109;
  uint64_t v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  __int128 v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unsigned __int8 v125;
  std::string *v126;
  __int128 v127;
  int v128;
  const std::string::value_type *v129;
  std::string::size_type v130;
  std::string *v131;
  __int128 v132;
  void **v133;
  size_t v134;
  uint64_t v135;
  int v136;
  unsigned __int8 v137;
  std::string *v138;
  __int128 v139;
  int v140;
  const std::string::value_type *v141;
  std::string::size_type v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  void **v147;
  size_t v148;
  uint64_t v149;
  unsigned __int8 v150;
  uint64_t *v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  int8x16_t v156;
  _BYTE *v157;
  uint64_t v158;
  int v159;
  BOOL v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  _DWORD *v173;
  _BYTE *v174;
  _BYTE *v175;
  _DWORD *v176;
  int v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  void *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  __int128 v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  void *__p[2];
  __int128 v210;
  int v211;
  std::string v212;
  __int128 v213;
  uint64_t (**v214)();
  __int128 v215;
  _BYTE __dst[25];
  std::string v217;
  uint64_t v218;
  int v219;
  void *v220[2];
  uint64_t (**v221)();
  _OWORD v222[6];
  char v223;
  uint64_t v224;

  v224 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v7 = sub_2241471F8();
    v8 = v7[2];
    if (!v8)
    {
      v9 = v7;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v8 = v9[2];
    }
    v10 = *(_QWORD *)(v8 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      v220[0] = "cv3d.recon.";
      v220[1] = (void *)11;
      v14 = *(unsigned __int8 *)(a5 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = (uint64_t (**)())a5;
      else
        v15 = *(uint64_t (***)())a5;
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a5 + 8);
      v221 = v15;
      *(_QWORD *)&v222[0] = v14;
      sub_2231A9820((uint64_t)v220, (uint64_t)v222 + 8, 0, 0, (std::string *)__p);
      v16 = (void *)BYTE7(v210);
      v17 = (void **)__p[0];
      v18 = __p[1];
      sub_2241471F8();
      if ((char)v16 >= 0)
        v19 = __p;
      else
        v19 = v17;
      if ((char)v16 >= 0)
        v20 = v16;
      else
        v20 = v18;
      v21 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v19, v20);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v23 = v22;
      if (SBYTE7(v210) < 0)
      {
        operator delete(__p[0]);
        if (!v23)
          goto LABEL_27;
      }
      else if (!v22)
      {
        goto LABEL_27;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a2)
      {
        v24 = a2 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a2)
          v24 = *(double *)&qword_255788F20 - a2;
        if (v24 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a2;
      }
      kdebug_trace();
    }
  }
LABEL_27:
  v25 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v25 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v26 = std::string::append((std::string *)__dst, ".", 1uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(_QWORD *)&v210 = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = *(char *)(a5 + 23);
  if (v28 >= 0)
    v29 = (const std::string::value_type *)a5;
  else
    v29 = *(const std::string::value_type **)a5;
  if (v28 >= 0)
    v30 = *(unsigned __int8 *)(a5 + 23);
  else
    v30 = *(_QWORD *)(a5 + 8);
  v31 = std::string::append((std::string *)__p, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v221 = (uint64_t (**)())v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)v220 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v221) >= 0)
    v33 = v220;
  else
    v33 = (void **)v220[0];
  v34 = strlen((const char *)v33);
  sub_2241471F8();
  v35 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v33, v34);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  if (SHIBYTE(v221) < 0)
  {
    operator delete(v220[0]);
    if ((SBYTE7(v210) & 0x80000000) == 0)
    {
LABEL_42:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_43;
LABEL_47:
      operator delete(*(void **)__dst);
      if (!v36)
        goto LABEL_50;
LABEL_48:
      v37 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v37 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      qword_25578BAF0 = *(_QWORD *)&a2;
      goto LABEL_50;
    }
  }
  else if ((SBYTE7(v210) & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_47;
LABEL_43:
  if (v36)
    goto LABEL_48;
LABEL_50:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v38 = sub_2241471F8();
    v39 = v38[2];
    if (!v39)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v39 = v38[2];
    }
    v40 = *(_QWORD *)(v39 + 64);
    v41 = (std::mutex *)(v40 + 32);
    std::mutex::lock((std::mutex *)(v40 + 32));
    v43 = *(_QWORD *)(v40 + 96);
    v42 = *(_QWORD *)(v40 + 104);
    std::mutex::unlock(v41);
    if (v43 != v42)
    {
      v220[0] = "cv3d.recon.";
      v220[1] = (void *)11;
      v44 = *(unsigned __int8 *)(a5 + 23);
      if ((v44 & 0x80u) == 0)
        v45 = (uint64_t (**)())a5;
      else
        v45 = *(uint64_t (***)())a5;
      if ((v44 & 0x80u) != 0)
        v44 = *(_QWORD *)(a5 + 8);
      v221 = v45;
      *(_QWORD *)&v222[0] = v44;
      sub_2231A9820((uint64_t)v220, (uint64_t)v222 + 8, 0, 0, (std::string *)__p);
      v46 = (void *)BYTE7(v210);
      v47 = (void **)__p[0];
      v48 = __p[1];
      sub_2241471F8();
      v49 = (char)v46 >= 0 ? __p : v47;
      v50 = (char)v46 >= 0 ? v46 : v48;
      v51 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v49, v50);
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
      v53 = v52;
      if (SBYTE7(v210) < 0)
      {
        operator delete(__p[0]);
        if (!v53)
          goto LABEL_166;
      }
      else if (!v52)
      {
        goto LABEL_166;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v54 = sub_2241471F8();
        v55 = v54[2];
        if (!v55)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v55 = v54[2];
        }
        v56 = *(_QWORD *)(v55 + 64);
        v57 = (std::mutex *)(v56 + 32);
        std::mutex::lock((std::mutex *)(v56 + 32));
        v59 = *(_QWORD *)(v56 + 96);
        v58 = *(_QWORD *)(v56 + 104);
        std::mutex::unlock(v57);
        if (v59 != v58)
        {
          v60 = *(char *)(a5 + 23);
          if (v60 >= 0)
            v61 = *(unsigned __int8 *)(a5 + 23);
          else
            v61 = *(_QWORD *)(a5 + 8);
          v62 = v61 + 12;
          if (v61 + 12 >= 0x7FFFFFFFFFFFFFF8)
            sub_22316DBC0();
          if (v62 >= 0x17)
          {
            v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v62 | 7) != 0x17)
              v64 = v62 | 7;
            v65 = v64 + 1;
            v63 = operator new(v64 + 1);
            __p[1] = (void *)(v61 + 12);
            *(_QWORD *)&v210 = v65 | 0x8000000000000000;
            __p[0] = v63;
          }
          else
          {
            __p[1] = 0;
            *(_QWORD *)&v210 = 0;
            __p[0] = 0;
            v63 = __p;
            BYTE7(v210) = v61 + 12;
            if (!v61)
            {
LABEL_89:
              strcpy((char *)v63 + v61, ".InputImages");
              v220[0] = "cv3d.recon.";
              v220[1] = (void *)11;
              v67 = (void *)BYTE7(v210);
              v68 = __p;
              if (SBYTE7(v210) < 0)
              {
                v68 = (void **)__p[0];
                v67 = __p[1];
              }
              v221 = (uint64_t (**)())v68;
              *(_QWORD *)&v222[0] = v67;
              sub_2231A9820((uint64_t)v220, (uint64_t)v222 + 8, 0, 0, &v212);
              if (SBYTE7(v210) < 0)
                operator delete(__p[0]);
              v69 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
              v70 = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v69 & 0x80u) == 0)
                v71 = &v212;
              else
                v71 = (std::string *)v70;
              if ((v69 & 0x80u) == 0)
                v72 = v69;
              else
                v72 = *((_QWORD *)&v70 + 1);
              v73 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v71, v72);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
              {
                *(_OWORD *)__p = 0u;
                v210 = 0u;
                v211 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
                {
                  *(_QWORD *)&v213 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v213 + 1) = 2;
                  v74 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
                  {
                    *(_QWORD *)__dst = *(uint64_t *)((char *)a1 + 12);
                    LOBYTE(v214) = 0;
                    v220[0] = &off_24EC21B18;
                    sub_2233B32D0(__dst, &v214, (uint64_t *)&v220[1]);
                    v80 = (_BYTE *)*((_QWORD *)&v222[0] + 1);
                    if (v223 && *((_QWORD *)&v222[0] + 1))
                    {
                      (*(void (**)(void *, uint64_t, const char *))(*(_QWORD *)v220[1] + 88))(v220[1], 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
                      v80 = (_BYTE *)*((_QWORD *)&v222[0] + 1);
                    }
                    v81 = *((unsigned int *)a1 + 3);
                    v82 = *((_DWORD *)a1 + 4);
                    if ((_DWORD)v81)
                      _ZF = v82 == 0;
                    else
                      _ZF = 1;
                    if (_ZF)
                      v84 = 0;
                    else
                      v84 = (v81 << 32) | 3;
                    if (_ZF)
                      v85 = 0;
                    else
                      v85 = *((_DWORD *)a1 + 4);
                    if (_ZF)
                      v86 = 0;
                    else
                      v86 = (HIDWORD(v84) * v84);
                    if ((_DWORD)v86 * v85 == -1)
                    {
                      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
                      {
                        abort();
                      }
                      LODWORD(v81) = *((_DWORD *)a1 + 3);
                      v82 = *((_DWORD *)a1 + 4);
                    }
                    if (*((_DWORD *)a1 + 2) && (_DWORD)v81 && v82)
                    {
                      v87 = v81 - 1;
                      if (HIDWORD(v84))
                        v88 = v84 & 3;
                      else
                        v88 = 0;
                      v89 = *a1;
                      v90 = 4 * *((unsigned int *)a1 + 6);
                      v91 = v82 - 1;
                      if (v91)
                      {
                        v92 = *((unsigned int *)a1 + 7);
                        v93 = 4 * v92;
                        if (v87)
                        {
                          v94 = 0;
                          v95 = (_DWORD *)(v89 + 8);
                          v96 = v80 + 2;
                          v75.i32[0] = 0;
                          __asm { FMOV            V1.4S, #1.0 }
                          v77.i64[0] = 0x3F0000003F000000;
                          v77.i64[1] = 0x3F0000003F000000;
                          v100 = (float32x4_t)vdupq_n_s32(0x437F0000u);
                          do
                          {
                            v101 = v96;
                            v102 = v95;
                            v103 = v87;
                            do
                            {
                              v78.i32[0] = *v102;
                              v79.i64[0] = *((_QWORD *)v102 - 1);
                              v79.i32[2] = *v102;
                              v78 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v75, v78), 0), (int8x16_t)vnegq_f32((float32x4_t)v79), v79), _Q1), (float32x4_t)v77), v100);
                              *(v101 - 2) = (int)v78.f32[0];
                              *(v101 - 1) = (int)v78.f32[1];
                              *v101 = (int)v78.f32[2];
                              v102 = (_DWORD *)((char *)v102 + v90);
                              v101 += v88;
                              --v103;
                            }
                            while (v103);
                            v78.i32[0] = *v102;
                            v79.i64[0] = *((_QWORD *)v102 - 1);
                            v79.i32[2] = *v102;
                            v78 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v75, v78), 0), (int8x16_t)vnegq_f32((float32x4_t)v79), v79), _Q1), (float32x4_t)v77), v100);
                            *(v101 - 2) = (int)v78.f32[0];
                            *(v101 - 1) = (int)v78.f32[1];
                            *v101 = (int)v78.f32[2];
                            v89 += 4 * v92;
                            v80 += v86;
                            ++v94;
                            v95 = (_DWORD *)((char *)v95 + v93);
                            v96 += v86;
                          }
                          while (v94 != v91);
                        }
                        else
                        {
                          v75.i32[0] = 0;
                          __asm { FMOV            V1.4S, #1.0 }
                          v77.i64[0] = 0x3F0000003F000000;
                          v77.i64[1] = 0x3F0000003F000000;
                          v104 = (float32x4_t)vdupq_n_s32(0x437F0000u);
                          do
                          {
                            v78.i32[0] = *(_DWORD *)(v89 + 8);
                            v79.i64[0] = *(_QWORD *)v89;
                            v79.i32[2] = v78.i32[0];
                            v78 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v75, v78), 0), (int8x16_t)vnegq_f32((float32x4_t)v79), v79), _Q1), (float32x4_t)v77), v104);
                            *v80 = (int)v78.f32[0];
                            v80[1] = (int)v78.f32[1];
                            v80[2] = (int)v78.f32[2];
                            v80 += v86;
                            v89 += v93;
                            --v91;
                          }
                          while (v91);
                        }
                      }
                      if (v87)
                      {
                        v75.i32[0] = 0;
                        __asm { FMOV            V1.4S, #1.0 }
                        v77.i64[0] = 0x3F0000003F000000;
                        v77.i64[1] = 0x3F0000003F000000;
                        v105 = (float32x4_t)vdupq_n_s32(0x437F0000u);
                        do
                        {
                          v78.i32[0] = *(_DWORD *)(v89 + 8);
                          v79.i64[0] = *(_QWORD *)v89;
                          v79.i32[2] = v78.i32[0];
                          v78 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v75, v78), 0), (int8x16_t)vnegq_f32((float32x4_t)v79), v79), _Q1), (float32x4_t)v77), v105);
                          *v80 = (int)v78.f32[0];
                          v80[1] = (int)v78.f32[1];
                          v80[2] = (int)v78.f32[2];
                          v80 += v88;
                          v89 += v90;
                          --v87;
                        }
                        while (v87);
                      }
                      v75.i32[0] = *(_DWORD *)(v89 + 8);
                      _Q1.i32[0] = 0;
                      v77.i64[0] = *(_QWORD *)v89;
                      v77.i32[2] = v75.i32[0];
                      v106 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(_Q1, v75), 0), (int8x16_t)vnegq_f32((float32x4_t)v77), v77);
                      __asm { FMOV            V1.4S, #1.0 }
                      v108 = vaddq_f32(v106, _Q1);
                      _Q1.i64[0] = 0x3F0000003F000000;
                      _Q1.i64[1] = 0x3F0000003F000000;
                      v109 = vmulq_f32(vmulq_f32(v108, _Q1), (float32x4_t)vdupq_n_s32(0x437F0000u));
                      *v80 = (int)v109.f32[0];
                      v80[1] = (int)v109.f32[1];
                      v80[2] = (int)v109.f32[2];
                    }
                    strcpy(__dst, "normalsRGB");
                    *(_QWORD *)&__dst[11] = v218;
                    *(_DWORD *)&__dst[19] = v219;
                    *(_WORD *)&__dst[23] = 266;
                    v218 = 0;
                    v219 = 0;
                    sub_2231C6C30(v220, (__int128 *)__dst, &v213, &v217);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_223167354((uint64_t)&v220[1]);
                    v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 56))(v73);
                    v111 = *(void **)v110;
                    v112 = *(std::__shared_weak_count **)(v110 + 8);
                    if (v112)
                    {
                      p_shared_owners = (unint64_t *)&v112->__shared_owners_;
                      do
                        v114 = __ldxr(p_shared_owners);
                      while (__stxr(v114 + 1, p_shared_owners));
                    }
                    v115 = *(_OWORD *)&v217.__r_.__value_.__r.__words[1];
                    v214 = &off_24EC6A3B8;
                    v215 = *(_OWORD *)&v217.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = 0uLL;
                    v220[0] = v111;
                    v220[1] = v112;
                    if (v112)
                    {
                      v116 = (unint64_t *)&v112->__shared_owners_;
                      do
                        v117 = __ldxr(v116);
                      while (__stxr(v117 + 1, v116));
                    }
                    v221 = &off_24EC6A3B8;
                    v222[0] = v115;
                    if (*((_QWORD *)&v115 + 1))
                    {
                      v118 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
                      do
                        v119 = __ldxr(v118);
                      while (__stxr(v119 + 1, v118));
                    }
                    (*(void (**)(uint64_t *, void **))(*v74 + 16))(v74, v220);
                    sub_2241231D8((uint64_t)&v221);
                    v120 = (std::__shared_weak_count *)v220[1];
                    if (v220[1])
                    {
                      v121 = (unint64_t *)((char *)v220[1] + 8);
                      do
                        v122 = __ldaxr(v121);
                      while (__stlxr(v122 - 1, v121));
                      if (!v122)
                      {
                        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                        std::__shared_weak_count::__release_weak(v120);
                      }
                    }
                    sub_2241231D8((uint64_t)&v214);
                    if (v112)
                    {
                      v123 = (unint64_t *)&v112->__shared_owners_;
                      do
                        v124 = __ldaxr(v123);
                      while (__stlxr(v124 - 1, v123));
                      if (!v124)
                      {
                        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                        std::__shared_weak_count::__release_weak(v112);
                      }
                    }
                    sub_2241231D8((uint64_t)&v217);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v212.__r_.__value_.__l.__data_);
              goto LABEL_166;
            }
          }
          if (v60 >= 0)
            v66 = (uint64_t (*)())a5;
          else
            v66 = *(uint64_t (**)())a5;
          memmove(v63, v66, v61);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_166:
  v125 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v125 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v126 = std::string::append((std::string *)__dst, ".", 1uLL);
  v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
  *(_QWORD *)&v210 = *((_QWORD *)&v126->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v127;
  v126->__r_.__value_.__l.__size_ = 0;
  v126->__r_.__value_.__r.__words[2] = 0;
  v126->__r_.__value_.__r.__words[0] = 0;
  v128 = *(char *)(a5 + 23);
  if (v128 >= 0)
    v129 = (const std::string::value_type *)a5;
  else
    v129 = *(const std::string::value_type **)a5;
  if (v128 >= 0)
    v130 = *(unsigned __int8 *)(a5 + 23);
  else
    v130 = *(_QWORD *)(a5 + 8);
  v131 = std::string::append((std::string *)__p, v129, v130);
  v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
  v221 = (uint64_t (**)())v131->__r_.__value_.__r.__words[2];
  *(_OWORD *)v220 = v132;
  v131->__r_.__value_.__l.__size_ = 0;
  v131->__r_.__value_.__r.__words[2] = 0;
  v131->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v221) >= 0)
    v133 = v220;
  else
    v133 = (void **)v220[0];
  v134 = strlen((const char *)v133);
  sub_2241471F8();
  v135 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v133, v134);
  v136 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 24))(v135);
  if (SHIBYTE(v221) < 0)
  {
    operator delete(v220[0]);
    if ((SBYTE7(v210) & 0x80000000) == 0)
    {
LABEL_181:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_182;
      goto LABEL_186;
    }
  }
  else if ((SBYTE7(v210) & 0x80000000) == 0)
  {
    goto LABEL_181;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_182:
    if (!v136)
      return;
    goto LABEL_187;
  }
LABEL_186:
  operator delete(*(void **)__dst);
  if (!v136)
    return;
LABEL_187:
  v137 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v137 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v217, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v217 = *(std::string *)byte_25578BAF8;
  v138 = std::string::append(&v217, ".", 1uLL);
  v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  *(_QWORD *)&__dst[16] = *((_QWORD *)&v138->__r_.__value_.__l + 2);
  *(_OWORD *)__dst = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  v140 = *(char *)(a5 + 23);
  if (v140 >= 0)
    v141 = (const std::string::value_type *)a5;
  else
    v141 = *(const std::string::value_type **)a5;
  if (v140 >= 0)
    v142 = *(unsigned __int8 *)(a5 + 23);
  else
    v142 = *(_QWORD *)(a5 + 8);
  v143 = std::string::append((std::string *)__dst, v141, v142);
  v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
  *(_QWORD *)&v210 = *((_QWORD *)&v143->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v144;
  v143->__r_.__value_.__l.__size_ = 0;
  v143->__r_.__value_.__r.__words[2] = 0;
  v143->__r_.__value_.__r.__words[0] = 0;
  v145 = std::string::append((std::string *)__p, ".InputImages", 0xCuLL);
  v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
  v221 = (uint64_t (**)())v145->__r_.__value_.__r.__words[2];
  *(_OWORD *)v220 = v146;
  v145->__r_.__value_.__l.__size_ = 0;
  v145->__r_.__value_.__r.__words[2] = 0;
  v145->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v221) >= 0)
    v147 = v220;
  else
    v147 = (void **)v220[0];
  v148 = strlen((const char *)v147);
  sub_2241471F8();
  v149 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v147, v148);
  if (SHIBYTE(v221) < 0)
  {
    operator delete(v220[0]);
    if ((SBYTE7(v210) & 0x80000000) == 0)
    {
LABEL_202:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_203;
LABEL_241:
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v217.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_204;
      goto LABEL_242;
    }
  }
  else if ((SBYTE7(v210) & 0x80000000) == 0)
  {
    goto LABEL_202;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_241;
LABEL_203:
  if ((SHIBYTE(v217.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_204;
LABEL_242:
  operator delete(v217.__r_.__value_.__l.__data_);
LABEL_204:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
  {
    v150 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v150 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
    {
      v214 = (uint64_t (**)())(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      *(_QWORD *)&v215 = 2;
      v151 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
      {
        __p[0] = *(void **)((char *)a1 + 12);
        v217.__r_.__value_.__s.__data_[0] = 0;
        v220[0] = &off_24EC21B18;
        sub_2233B32D0(__p, &v217, (uint64_t *)&v220[1]);
        v157 = (_BYTE *)*((_QWORD *)&v222[0] + 1);
        if (v223 && *((_QWORD *)&v222[0] + 1))
        {
          (*(void (**)(void *, uint64_t, const char *))(*(_QWORD *)v220[1] + 88))(v220[1], 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
          v157 = (_BYTE *)*((_QWORD *)&v222[0] + 1);
        }
        v158 = *((unsigned int *)a1 + 3);
        v159 = *((_DWORD *)a1 + 4);
        if ((_DWORD)v158)
          v160 = v159 == 0;
        else
          v160 = 1;
        if (v160)
          v161 = 0;
        else
          v161 = (v158 << 32) | 3;
        if (v160)
          v162 = 0;
        else
          v162 = *((_DWORD *)a1 + 4);
        if (v160)
          v163 = 0;
        else
          v163 = (HIDWORD(v161) * v161);
        if ((_DWORD)v163 * v162 == -1)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          LODWORD(v158) = *((_DWORD *)a1 + 3);
          v159 = *((_DWORD *)a1 + 4);
        }
        if (*((_DWORD *)a1 + 2) && (_DWORD)v158 && v159)
        {
          v164 = v158 - 1;
          if (HIDWORD(v161))
            v165 = v161 & 3;
          else
            v165 = 0;
          v166 = *a1;
          v167 = 4 * *((unsigned int *)a1 + 6);
          __asm { FMOV            V0.4S, #1.0 }
          v169 = v159 - 1;
          if (v169)
          {
            v170 = *((unsigned int *)a1 + 7);
            v171 = 4 * v170;
            if (v164)
            {
              v172 = 0;
              v173 = (_DWORD *)(v166 + 8);
              v174 = v157 + 2;
              v152.i32[0] = 0;
              v153.i64[0] = 0x3F0000003F000000;
              v153.i64[1] = 0x3F0000003F000000;
              v154 = (int8x16_t)vdupq_n_s32(0x437F0000u);
              do
              {
                v175 = v174;
                v176 = v173;
                v177 = v164;
                do
                {
                  v155.i32[0] = *v176;
                  v156.i64[0] = *((_QWORD *)v176 - 1);
                  v156.i32[2] = *v176;
                  v155 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v152, v155), 0), (int8x16_t)vnegq_f32((float32x4_t)v156), v156), _Q0), v153), (float32x4_t)v154);
                  *(v175 - 2) = (int)v155.f32[0];
                  *(v175 - 1) = (int)v155.f32[1];
                  *v175 = (int)v155.f32[2];
                  v176 = (_DWORD *)((char *)v176 + v167);
                  v175 += v165;
                  --v177;
                }
                while (v177);
                v155.i32[0] = *v176;
                v156.i64[0] = *((_QWORD *)v176 - 1);
                v156.i32[2] = *v176;
                v155 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v152, v155), 0), (int8x16_t)vnegq_f32((float32x4_t)v156), v156), _Q0), v153), (float32x4_t)v154);
                *(v175 - 2) = (int)v155.f32[0];
                *(v175 - 1) = (int)v155.f32[1];
                *v175 = (int)v155.f32[2];
                v166 += 4 * v170;
                v157 += v163;
                ++v172;
                v173 = (_DWORD *)((char *)v173 + v171);
                v174 += v163;
              }
              while (v172 != v169);
            }
            else
            {
              v152.i32[0] = 0;
              v153.i64[0] = 0x3F0000003F000000;
              v153.i64[1] = 0x3F0000003F000000;
              v154 = (int8x16_t)vdupq_n_s32(0x437F0000u);
              do
              {
                v155.i32[0] = *(_DWORD *)(v166 + 8);
                v156.i64[0] = *(_QWORD *)v166;
                v156.i32[2] = v155.i32[0];
                v155 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v152, v155), 0), (int8x16_t)vnegq_f32((float32x4_t)v156), v156), _Q0), v153), (float32x4_t)v154);
                *v157 = (int)v155.f32[0];
                v157[1] = (int)v155.f32[1];
                v157[2] = (int)v155.f32[2];
                v157 += v163;
                v166 += v171;
                --v169;
              }
              while (v169);
            }
          }
          if (v164)
          {
            v152.i32[0] = 0;
            v153.i64[0] = 0x3F0000003F000000;
            v153.i64[1] = 0x3F0000003F000000;
            v154 = (int8x16_t)vdupq_n_s32(0x437F0000u);
            do
            {
              v155.i32[0] = *(_DWORD *)(v166 + 8);
              v156.i64[0] = *(_QWORD *)v166;
              v156.i32[2] = v155.i32[0];
              v155 = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v152, v155), 0), (int8x16_t)vnegq_f32((float32x4_t)v156), v156), _Q0), v153), (float32x4_t)v154);
              *v157 = (int)v155.f32[0];
              v157[1] = (int)v155.f32[1];
              v157[2] = (int)v155.f32[2];
              v157 += v165;
              v166 += v167;
              --v164;
            }
            while (v164);
          }
          v152.i32[0] = *(_DWORD *)(v166 + 8);
          v153.i32[0] = 0;
          v154.i64[0] = *(_QWORD *)v166;
          v154.i32[2] = v152.i32[0];
          v178 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v153, v152), 0), (int8x16_t)vnegq_f32((float32x4_t)v154), v154), _Q0);
          v179.i64[0] = 0x3F0000003F000000;
          v179.i64[1] = 0x3F0000003F000000;
          v180 = vmulq_f32(vmulq_f32(v178, v179), (float32x4_t)vdupq_n_s32(0x437F0000u));
          *v157 = (int)v180.f32[0];
          v157[1] = (int)v180.f32[1];
          v157[2] = (int)v180.f32[2];
        }
        __p[0] = (void *)0x52736C616D726F6ELL;
        __p[1] = (void *)16967;
        LODWORD(v210) = v212.__r_.__value_.__l.__data_;
        *(_DWORD *)((char *)&v210 + 3) = *(_DWORD *)((char *)v212.__r_.__value_.__r.__words + 3);
        *(_WORD *)((char *)&v210 + 7) = 266;
        sub_2231C6C30(v220, (__int128 *)__p, (__int128 *)&v214, __dst);
        if (BYTE8(v210) && SBYTE7(v210) < 0)
          operator delete(__p[0]);
        v181 = (std::__shared_weak_count *)v221;
        if (v221)
        {
          v182 = (unint64_t *)(v221 + 1);
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (!v183)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        v184 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 56))(v149);
        v185 = *(void **)v184;
        v186 = *(std::__shared_weak_count **)(v184 + 8);
        if (v186)
        {
          v187 = (unint64_t *)&v186->__shared_owners_;
          do
            v188 = __ldxr(v187);
          while (__stxr(v188 + 1, v187));
        }
        v189 = *(_OWORD *)&__dst[8];
        v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v217.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
        *(_OWORD *)&__dst[8] = 0uLL;
        v220[0] = v185;
        v220[1] = v186;
        if (v186)
        {
          v190 = (unint64_t *)&v186->__shared_owners_;
          do
            v191 = __ldxr(v190);
          while (__stxr(v191 + 1, v190));
        }
        v221 = &off_24EC6A3B8;
        v222[0] = v189;
        if (*((_QWORD *)&v189 + 1))
        {
          v192 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
          do
            v193 = __ldxr(v192);
          while (__stxr(v193 + 1, v192));
        }
        (*(void (**)(uint64_t *, void **))(*v151 + 16))(v151, v220);
        v194 = (std::__shared_weak_count *)*((_QWORD *)&v222[0] + 1);
        if (*((_QWORD *)&v222[0] + 1))
        {
          v195 = (unint64_t *)(*((_QWORD *)&v222[0] + 1) + 8);
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        v197 = (std::__shared_weak_count *)v220[1];
        if (v220[1])
        {
          v198 = (unint64_t *)((char *)v220[1] + 8);
          do
            v199 = __ldaxr(v198);
          while (__stlxr(v199 - 1, v198));
          if (!v199)
          {
            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
            std::__shared_weak_count::__release_weak(v197);
          }
        }
        v200 = (std::__shared_weak_count *)v217.__r_.__value_.__r.__words[2];
        if (v217.__r_.__value_.__r.__words[2])
        {
          v201 = (unint64_t *)(v217.__r_.__value_.__r.__words[2] + 8);
          do
            v202 = __ldaxr(v201);
          while (__stlxr(v202 - 1, v201));
          if (!v202)
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
        }
        if (v186)
        {
          v203 = (unint64_t *)&v186->__shared_owners_;
          do
            v204 = __ldaxr(v203);
          while (__stlxr(v204 - 1, v203));
          if (!v204)
          {
            ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
            std::__shared_weak_count::__release_weak(v186);
          }
        }
        v205 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v206 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v207 = __ldaxr(v206);
          while (__stlxr(v207 - 1, v206));
          if (!v207)
          {
            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
            std::__shared_weak_count::__release_weak(v205);
          }
        }
      }
    }
  }
}

void sub_2233AAE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_223167354(a11);
  sub_2231874DC((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233AB170(uint64_t a1, _QWORD *a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  std::mutex *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;
  unsigned __int8 v25;
  std::string *v26;
  __int128 v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  __int128 v32;
  const char *v33;
  size_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  std::mutex *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  std::mutex *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  size_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)();
  uint64_t v67;
  uint64_t (**v68)();
  uint64_t v69;
  __int128 v70;
  std::string *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  __int128 v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unsigned __int8 v94;
  std::string *v95;
  __int128 v96;
  int v97;
  const std::string::value_type *v98;
  std::string::size_type v99;
  std::string *v100;
  __int128 v101;
  const char *v102;
  size_t v103;
  uint64_t v104;
  int v105;
  unsigned __int8 v106;
  std::string *v107;
  __int128 v108;
  int v109;
  const std::string::value_type *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  std::string *v114;
  __int128 v115;
  const char *v116;
  size_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  __int128 v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  std::mutex *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (**v159)();
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  std::mutex *v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  size_t v175;
  unint64_t v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t (*v180)();
  uint64_t v181;
  uint64_t (**v182)();
  uint64_t v183;
  __int128 v184;
  std::string *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  _BYTE *v189;
  _BYTE *v190;
  _BYTE *v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  char v201;
  char v202;
  _BYTE *v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  _BYTE *v207;
  char v208;
  _BYTE *v209;
  char v210;
  _BYTE *v211;
  char v212;
  _BYTE *v213;
  uint64_t *v214;
  uint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  __int128 v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  unsigned __int8 v229;
  std::string *v230;
  __int128 v231;
  int v232;
  const std::string::value_type *v233;
  std::string::size_type v234;
  std::string *v235;
  __int128 v236;
  const char *v237;
  size_t v238;
  uint64_t v239;
  int v240;
  unsigned __int8 v241;
  std::string *v242;
  __int128 v243;
  int v244;
  const std::string::value_type *v245;
  std::string::size_type v246;
  std::string *v247;
  __int128 v248;
  std::string *v249;
  __int128 v250;
  const char *v251;
  size_t v252;
  uint64_t v253;
  unsigned __int8 v254;
  uint64_t *v255;
  _BYTE *v256;
  _BYTE *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int v263;
  uint64_t v264;
  unint64_t v265;
  char v266;
  char v267;
  char v268;
  _BYTE *v269;
  uint64_t v270;
  unint64_t v271;
  char v272;
  _BYTE *v273;
  char v274;
  _BYTE *v275;
  char v276;
  unsigned __int8 v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int8 v280;
  _BYTE *v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  __int128 v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  std::mutex *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t (**v316)();
  uint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  _BYTE *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  int v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  std::mutex *v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  size_t v332;
  unint64_t v333;
  _BYTE *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t (*v337)();
  uint64_t v338;
  uint64_t (**v339)();
  uint64_t v340;
  __int128 v341;
  std::string *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  BOOL v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  __int128 v355;
  unint64_t *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t *v363;
  unint64_t v364;
  unsigned __int8 v365;
  std::string *v366;
  __int128 v367;
  int v368;
  const std::string::value_type *v369;
  std::string::size_type v370;
  std::string *v371;
  __int128 v372;
  const char *v373;
  size_t v374;
  uint64_t v375;
  int v376;
  unsigned __int8 v377;
  std::string *v378;
  __int128 v379;
  int v380;
  const std::string::value_type *v381;
  std::string::size_type v382;
  std::string *v383;
  __int128 v384;
  std::string *v385;
  __int128 v386;
  const char *v387;
  size_t v388;
  uint64_t v389;
  unsigned __int8 v390;
  uint64_t *v391;
  unint64_t v392;
  uint64_t v393;
  BOOL v394;
  uint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  __int128 v404;
  unint64_t *v405;
  unint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  _QWORD *v430;
  int v431;
  int v432;
  int v434;
  int v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  _BYTE __p[32];
  int v443;
  std::string v444;
  __int128 v445;
  uint64_t (**v446)();
  __int128 v447;
  _BYTE __dst[25];
  std::string v449;
  uint64_t v450;
  __int16 v451;
  __int128 v452;
  uint64_t (**v453)();
  _OWORD v454[5];
  unsigned int v455;
  unsigned int v456;
  int v457;
  int v458;
  uint64_t v459;

  v459 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v7 = sub_2241471F8();
    v8 = v7[2];
    if (!v8)
    {
      v9 = v7;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v8 = v9[2];
    }
    v10 = *(_QWORD *)(v8 + 64);
    v11 = (std::mutex *)(v10 + 32);
    std::mutex::lock((std::mutex *)(v10 + 32));
    v13 = *(_QWORD *)(v10 + 96);
    v12 = *(_QWORD *)(v10 + 104);
    std::mutex::unlock(v11);
    if (v13 != v12)
    {
      *(_QWORD *)&v452 = "cv3d.recon.";
      *((_QWORD *)&v452 + 1) = 11;
      v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = (uint64_t (**)())a3;
      else
        v15 = *(uint64_t (***)())a3;
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a3 + 8);
      v453 = v15;
      *(_QWORD *)&v454[0] = v14;
      sub_2231A9820((uint64_t)&v452, (uint64_t)v454 + 8, 0, 0, (std::string *)__p);
      v16 = __p[23];
      v17 = *(_BYTE **)__p;
      v18 = *(_QWORD *)&__p[8];
      sub_2241471F8();
      if ((v16 & 0x80u) == 0)
        v19 = __p;
      else
        v19 = v17;
      if ((v16 & 0x80u) == 0)
        v20 = v16;
      else
        v20 = v18;
      v21 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v19, v20);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
      v23 = v22;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v23)
          goto LABEL_27;
      }
      else if (!v22)
      {
        goto LABEL_27;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a4)
      {
        v24 = a4 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a4)
          v24 = *(double *)&qword_255788F20 - a4;
        if (v24 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a4;
      }
      kdebug_trace();
    }
  }
LABEL_27:
  v25 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v25 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v26 = std::string::append((std::string *)__dst, ".", 1uLL);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = *(char *)(a3 + 23);
  if (v28 >= 0)
    v29 = (const std::string::value_type *)a3;
  else
    v29 = *(const std::string::value_type **)a3;
  if (v28 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  v31 = std::string::append((std::string *)__p, v29, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v453 = (uint64_t (**)())v31->__r_.__value_.__r.__words[2];
  v452 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v453) >= 0)
    v33 = (const char *)&v452;
  else
    v33 = (const char *)v452;
  v34 = strlen(v33);
  sub_2241471F8();
  v35 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v33, v34);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
  if (SHIBYTE(v453) < 0)
  {
    operator delete((void *)v452);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_42:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_43;
LABEL_47:
      operator delete(*(void **)__dst);
      if (!v36)
        goto LABEL_50;
LABEL_48:
      v37 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v37 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      qword_25578BAF0 = *(_QWORD *)&a4;
      goto LABEL_50;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_47;
LABEL_43:
  if (v36)
    goto LABEL_48;
LABEL_50:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v38 = sub_2241471F8();
    v39 = v38[2];
    if (!v39)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v39 = v38[2];
    }
    v40 = *(_QWORD *)(v39 + 64);
    v41 = (std::mutex *)(v40 + 32);
    std::mutex::lock((std::mutex *)(v40 + 32));
    v43 = *(_QWORD *)(v40 + 96);
    v42 = *(_QWORD *)(v40 + 104);
    std::mutex::unlock(v41);
    if (v43 != v42)
    {
      *(_QWORD *)&v452 = "cv3d.recon.";
      *((_QWORD *)&v452 + 1) = 11;
      v44 = *(unsigned __int8 *)(a3 + 23);
      if ((v44 & 0x80u) == 0)
        v45 = (uint64_t (**)())a3;
      else
        v45 = *(uint64_t (***)())a3;
      if ((v44 & 0x80u) != 0)
        v44 = *(_QWORD *)(a3 + 8);
      v453 = v45;
      *(_QWORD *)&v454[0] = v44;
      sub_2231A9820((uint64_t)&v452, (uint64_t)v454 + 8, 0, 0, (std::string *)__p);
      v46 = __p[23];
      v47 = *(_BYTE **)__p;
      v48 = *(_QWORD *)&__p[8];
      sub_2241471F8();
      v49 = (v46 & 0x80u) == 0 ? __p : v47;
      v50 = (v46 & 0x80u) == 0 ? v46 : v48;
      v51 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v49, v50);
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
      v53 = v52;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v53)
          goto LABEL_137;
      }
      else if (!v52)
      {
        goto LABEL_137;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v54 = sub_2241471F8();
        v55 = v54[2];
        if (!v55)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v55 = v54[2];
        }
        v56 = *(_QWORD *)(v55 + 64);
        v57 = (std::mutex *)(v56 + 32);
        std::mutex::lock((std::mutex *)(v56 + 32));
        v59 = *(_QWORD *)(v56 + 96);
        v58 = *(_QWORD *)(v56 + 104);
        std::mutex::unlock(v57);
        if (v59 != v58)
        {
          v60 = *(char *)(a3 + 23);
          if (v60 >= 0)
            v61 = *(unsigned __int8 *)(a3 + 23);
          else
            v61 = *(_QWORD *)(a3 + 8);
          v62 = v61 + 12;
          if (v61 + 12 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v62 >= 0x17)
          {
            v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v62 | 7) != 0x17)
              v64 = v62 | 7;
            v65 = v64 + 1;
            v63 = operator new(v64 + 1);
            *(_QWORD *)&__p[8] = v61 + 12;
            *(_QWORD *)&__p[16] = v65 | 0x8000000000000000;
            *(_QWORD *)__p = v63;
          }
          else
          {
            memset(__p, 0, 24);
            v63 = __p;
            __p[23] = v61 + 12;
            if (!v61)
            {
LABEL_89:
              strcpy(&v63[v61], ".InputImages");
              *(_QWORD *)&v452 = "cv3d.recon.";
              *((_QWORD *)&v452 + 1) = 11;
              v67 = __p[23];
              v68 = (uint64_t (**)())__p;
              if (__p[23] < 0)
              {
                v68 = *(uint64_t (***)())__p;
                v67 = *(_QWORD *)&__p[8];
              }
              v453 = v68;
              *(_QWORD *)&v454[0] = v67;
              sub_2231A9820((uint64_t)&v452, (uint64_t)v454 + 8, 0, 0, &v444);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v69 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
              v70 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v69 & 0x80u) == 0)
                v71 = &v444;
              else
                v71 = (std::string *)v70;
              if ((v69 & 0x80u) == 0)
                v72 = v69;
              else
                v72 = *((_QWORD *)&v70 + 1);
              v73 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v71, v72);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
              {
                memset(__p, 0, sizeof(__p));
                v443 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
                {
                  *(_QWORD *)&v445 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v445 + 1) = 2;
                  v74 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
                  {
                    v75 = *(_QWORD *)(a1 + 8);
                    v76 = v75 << 32;
                    if (!HIDWORD(v75))
                      v76 = 0;
                    if (*(_QWORD *)(a1 + 8))
                      v77 = HIDWORD(v75) == 0;
                    else
                      v77 = 1;
                    v78 = v76 | (*(_QWORD *)(a1 + 8) != 0);
                    if (v77)
                      v75 = 0;
                    *(_QWORD *)__dst = *(_QWORD *)a1;
                    *(_QWORD *)&__dst[8] = v75;
                    *(_QWORD *)&__dst[16] = v78;
                    if (HIDWORD(v75) * HIDWORD(v76) == -1
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    *(_QWORD *)&v452 = &off_24EC24788;
                    sub_2231FA5FC((size_t)__dst, (_WORD *)&v452 + 4);
                    strcpy(__dst, "semantics");
                    *(_WORD *)&__dst[23] = 265;
                    sub_2233B3528((uint64_t)&v452, (__int128 *)__dst, &v445, &v449);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_223167354((uint64_t)&v452 + 8);
                    v79 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 56))(v73);
                    v80 = *v79;
                    v81 = (std::__shared_weak_count *)v79[1];
                    if (v81)
                    {
                      p_shared_owners = (unint64_t *)&v81->__shared_owners_;
                      do
                        v83 = __ldxr(p_shared_owners);
                      while (__stxr(v83 + 1, p_shared_owners));
                    }
                    v84 = *(_OWORD *)&v449.__r_.__value_.__r.__words[1];
                    v446 = &off_24EC6A3B8;
                    v447 = *(_OWORD *)&v449.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v449.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_QWORD *)&v452 = v80;
                    *((_QWORD *)&v452 + 1) = v81;
                    if (v81)
                    {
                      v85 = (unint64_t *)&v81->__shared_owners_;
                      do
                        v86 = __ldxr(v85);
                      while (__stxr(v86 + 1, v85));
                    }
                    v453 = &off_24EC6A3B8;
                    v454[0] = v84;
                    if (*((_QWORD *)&v84 + 1))
                    {
                      v87 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
                      do
                        v88 = __ldxr(v87);
                      while (__stxr(v88 + 1, v87));
                    }
                    (*(void (**)(uint64_t *, __int128 *))(*v74 + 16))(v74, &v452);
                    sub_2241231D8((uint64_t)&v453);
                    v89 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
                    if (*((_QWORD *)&v452 + 1))
                    {
                      v90 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
                      do
                        v91 = __ldaxr(v90);
                      while (__stlxr(v91 - 1, v90));
                      if (!v91)
                      {
                        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                        std::__shared_weak_count::__release_weak(v89);
                      }
                    }
                    sub_2241231D8((uint64_t)&v446);
                    if (v81)
                    {
                      v92 = (unint64_t *)&v81->__shared_owners_;
                      do
                        v93 = __ldaxr(v92);
                      while (__stlxr(v93 - 1, v92));
                      if (!v93)
                      {
                        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                        std::__shared_weak_count::__release_weak(v81);
                      }
                    }
                    sub_2241231D8((uint64_t)&v449);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v444.__r_.__value_.__l.__data_);
              goto LABEL_137;
            }
          }
          if (v60 >= 0)
            v66 = (uint64_t (*)())a3;
          else
            v66 = *(uint64_t (**)())a3;
          memmove(v63, v66, v61);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_137:
  v94 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v94 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v95 = std::string::append((std::string *)__dst, ".", 1uLL);
  v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v95->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  v97 = *(char *)(a3 + 23);
  if (v97 >= 0)
    v98 = (const std::string::value_type *)a3;
  else
    v98 = *(const std::string::value_type **)a3;
  if (v97 >= 0)
    v99 = *(unsigned __int8 *)(a3 + 23);
  else
    v99 = *(_QWORD *)(a3 + 8);
  v100 = std::string::append((std::string *)__p, v98, v99);
  v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
  v453 = (uint64_t (**)())v100->__r_.__value_.__r.__words[2];
  v452 = v101;
  v100->__r_.__value_.__l.__size_ = 0;
  v100->__r_.__value_.__r.__words[2] = 0;
  v100->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v453) >= 0)
    v102 = (const char *)&v452;
  else
    v102 = (const char *)v452;
  v103 = strlen(v102);
  sub_2241471F8();
  v104 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v102, v103);
  v105 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v104 + 24))(v104);
  if (SHIBYTE(v453) < 0)
  {
    operator delete((void *)v452);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_152:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_153;
LABEL_157:
      operator delete(*(void **)__dst);
      if (!v105)
        goto LABEL_230;
LABEL_158:
      v106 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v106 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v449, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v449 = *(std::string *)byte_25578BAF8;
      v107 = std::string::append(&v449, ".", 1uLL);
      v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst[16] = *((_QWORD *)&v107->__r_.__value_.__l + 2);
      *(_OWORD *)__dst = v108;
      v107->__r_.__value_.__l.__size_ = 0;
      v107->__r_.__value_.__r.__words[2] = 0;
      v107->__r_.__value_.__r.__words[0] = 0;
      v109 = *(char *)(a3 + 23);
      if (v109 >= 0)
        v110 = (const std::string::value_type *)a3;
      else
        v110 = *(const std::string::value_type **)a3;
      if (v109 >= 0)
        v111 = *(unsigned __int8 *)(a3 + 23);
      else
        v111 = *(_QWORD *)(a3 + 8);
      v112 = std::string::append((std::string *)__dst, v110, v111);
      v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v112->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v113;
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      v114 = std::string::append((std::string *)__p, ".InputImages", 0xCuLL);
      v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v453 = (uint64_t (**)())v114->__r_.__value_.__r.__words[2];
      v452 = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v453) >= 0)
        v116 = (const char *)&v452;
      else
        v116 = (const char *)v452;
      v117 = strlen(v116);
      sub_2241471F8();
      v118 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v116, v117);
      if (SHIBYTE(v453) < 0)
      {
        operator delete((void *)v452);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_173:
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_174;
          goto LABEL_251;
        }
      }
      else if ((__p[23] & 0x80000000) == 0)
      {
        goto LABEL_173;
      }
      operator delete(*(void **)__p);
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_174:
        if ((SHIBYTE(v449.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_175;
LABEL_252:
        operator delete(v449.__r_.__value_.__l.__data_);
LABEL_175:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118))
        {
          v119 = atomic_load((unsigned __int8 *)&unk_25578BB10);
          if ((v119 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
          {
            __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
            __cxa_guard_release((__guard *)&unk_25578BB10);
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118))
          {
            v446 = (uint64_t (**)())(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
            *(_QWORD *)&v447 = 2;
            v120 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v118 + 24))(v118))
            {
              v121 = *(_QWORD *)(a1 + 8);
              v122 = v121 << 32;
              if (!HIDWORD(v121))
                v122 = 0;
              if (*(_QWORD *)(a1 + 8))
                v123 = HIDWORD(v121) == 0;
              else
                v123 = 1;
              v124 = v122 | (*(_QWORD *)(a1 + 8) != 0);
              if (v123)
                v121 = 0;
              *(_QWORD *)__p = *(_QWORD *)a1;
              *(_QWORD *)&__p[8] = v121;
              *(_QWORD *)&__p[16] = v124;
              if (HIDWORD(v121) * HIDWORD(v122) == -1
                && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              *(_QWORD *)&v452 = &off_24EC24788;
              sub_2231FA5FC((size_t)__p, (_WORD *)&v452 + 4);
              strcpy(__p, "semantics");
              *(_WORD *)&__p[10] = 0;
              *(_DWORD *)&__p[12] = 0;
              *(_WORD *)&__p[23] = 265;
              sub_2233B3528((uint64_t)&v452, (__int128 *)__p, (__int128 *)&v446, __dst);
              if (__p[24] && (__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v125 = (std::__shared_weak_count *)v453;
              if (v453)
              {
                v126 = (unint64_t *)(v453 + 1);
                do
                  v127 = __ldaxr(v126);
                while (__stlxr(v127 - 1, v126));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                  std::__shared_weak_count::__release_weak(v125);
                }
              }
              v128 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 56))(v118);
              v129 = *v128;
              v130 = (std::__shared_weak_count *)v128[1];
              if (v130)
              {
                v131 = (unint64_t *)&v130->__shared_owners_;
                do
                  v132 = __ldxr(v131);
                while (__stxr(v132 + 1, v131));
              }
              v133 = *(_OWORD *)&__dst[8];
              v449.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
              *(_OWORD *)&v449.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
              *(_OWORD *)&__dst[8] = 0uLL;
              *(_QWORD *)&v452 = v129;
              *((_QWORD *)&v452 + 1) = v130;
              if (v130)
              {
                v134 = (unint64_t *)&v130->__shared_owners_;
                do
                  v135 = __ldxr(v134);
                while (__stxr(v135 + 1, v134));
              }
              v453 = &off_24EC6A3B8;
              v454[0] = v133;
              if (*((_QWORD *)&v133 + 1))
              {
                v136 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
                do
                  v137 = __ldxr(v136);
                while (__stxr(v137 + 1, v136));
              }
              (*(void (**)(uint64_t *, __int128 *))(*v120 + 16))(v120, &v452);
              v138 = (std::__shared_weak_count *)*((_QWORD *)&v454[0] + 1);
              if (*((_QWORD *)&v454[0] + 1))
              {
                v139 = (unint64_t *)(*((_QWORD *)&v454[0] + 1) + 8);
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
              v141 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
              if (*((_QWORD *)&v452 + 1))
              {
                v142 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
                do
                  v143 = __ldaxr(v142);
                while (__stlxr(v143 - 1, v142));
                if (!v143)
                {
                  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                  std::__shared_weak_count::__release_weak(v141);
                }
              }
              v144 = (std::__shared_weak_count *)v449.__r_.__value_.__r.__words[2];
              if (v449.__r_.__value_.__r.__words[2])
              {
                v145 = (unint64_t *)(v449.__r_.__value_.__r.__words[2] + 8);
                do
                  v146 = __ldaxr(v145);
                while (__stlxr(v146 - 1, v145));
                if (!v146)
                {
                  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                  std::__shared_weak_count::__release_weak(v144);
                }
              }
              if (v130)
              {
                v147 = (unint64_t *)&v130->__shared_owners_;
                do
                  v148 = __ldaxr(v147);
                while (__stlxr(v148 - 1, v147));
                if (!v148)
                {
                  ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                  std::__shared_weak_count::__release_weak(v130);
                }
              }
              v149 = *(std::__shared_weak_count **)&__dst[16];
              if (*(_QWORD *)&__dst[16])
              {
                v150 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                do
                  v151 = __ldaxr(v150);
                while (__stlxr(v151 - 1, v150));
                if (!v151)
                {
                  ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                  std::__shared_weak_count::__release_weak(v149);
                }
              }
            }
          }
        }
        goto LABEL_230;
      }
LABEL_251:
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v449.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_175;
      goto LABEL_252;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_152;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_157;
LABEL_153:
  if (v105)
    goto LABEL_158;
LABEL_230:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v152 = sub_2241471F8();
    v153 = v152[2];
    if (!v153)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v153 = v152[2];
    }
    v154 = *(_QWORD *)(v153 + 64);
    v155 = (std::mutex *)(v154 + 32);
    std::mutex::lock((std::mutex *)(v154 + 32));
    v157 = *(_QWORD *)(v154 + 96);
    v156 = *(_QWORD *)(v154 + 104);
    std::mutex::unlock(v155);
    if (v157 != v156)
    {
      *(_QWORD *)&v452 = "cv3d.recon.";
      *((_QWORD *)&v452 + 1) = 11;
      v158 = *(unsigned __int8 *)(a3 + 23);
      if ((v158 & 0x80u) == 0)
        v159 = (uint64_t (**)())a3;
      else
        v159 = *(uint64_t (***)())a3;
      if ((v158 & 0x80u) != 0)
        v158 = *(_QWORD *)(a3 + 8);
      v453 = v159;
      *(_QWORD *)&v454[0] = v158;
      sub_2231A9820((uint64_t)&v452, (uint64_t)v454 + 8, 0, 0, (std::string *)__p);
      v160 = __p[23];
      v161 = *(_BYTE **)__p;
      v162 = *(_QWORD *)&__p[8];
      sub_2241471F8();
      v163 = (v160 & 0x80u) == 0 ? __p : v161;
      v164 = (v160 & 0x80u) == 0 ? v160 : v162;
      v165 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v163, v164);
      v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 24))(v165);
      v167 = v166;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v167)
          goto LABEL_328;
      }
      else if (!v166)
      {
        goto LABEL_328;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v168 = sub_2241471F8();
        v169 = v168[2];
        if (!v169)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v169 = v168[2];
        }
        v170 = *(_QWORD *)(v169 + 64);
        v171 = (std::mutex *)(v170 + 32);
        std::mutex::lock((std::mutex *)(v170 + 32));
        v173 = *(_QWORD *)(v170 + 96);
        v172 = *(_QWORD *)(v170 + 104);
        std::mutex::unlock(v171);
        if (v173 != v172)
        {
          v174 = *(char *)(a3 + 23);
          if (v174 >= 0)
            v175 = *(unsigned __int8 *)(a3 + 23);
          else
            v175 = *(_QWORD *)(a3 + 8);
          v176 = v175 + 12;
          if (v175 + 12 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v176 >= 0x17)
          {
            v178 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v176 | 7) != 0x17)
              v178 = v176 | 7;
            v179 = v178 + 1;
            v177 = operator new(v178 + 1);
            *(_QWORD *)&__p[8] = v175 + 12;
            *(_QWORD *)&__p[16] = v179 | 0x8000000000000000;
            *(_QWORD *)__p = v177;
          }
          else
          {
            memset(__p, 0, 24);
            v177 = __p;
            __p[23] = v175 + 12;
            if (!v175)
            {
LABEL_273:
              strcpy(&v177[v175], ".InputImages");
              *(_QWORD *)&v452 = "cv3d.recon.";
              *((_QWORD *)&v452 + 1) = 11;
              v181 = __p[23];
              v182 = (uint64_t (**)())__p;
              if (__p[23] < 0)
              {
                v182 = *(uint64_t (***)())__p;
                v181 = *(_QWORD *)&__p[8];
              }
              v453 = v182;
              *(_QWORD *)&v454[0] = v181;
              sub_2231A9820((uint64_t)&v452, (uint64_t)v454 + 8, 0, 0, &v444);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v183 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
              v184 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v183 & 0x80u) == 0)
                v185 = &v444;
              else
                v185 = (std::string *)v184;
              if ((v183 & 0x80u) == 0)
                v186 = v183;
              else
                v186 = *((_QWORD *)&v184 + 1);
              v187 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v185, v186);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187))
              {
                memset(__p, 0, sizeof(__p));
                v443 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187))
                {
                  *(_QWORD *)&v445 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v445 + 1) = 2;
                  v188 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v187 + 24))(v187))
                  {
                    v423 = v187;
                    v424 = v188;
                    v427 = a3;
                    v429 = a2;
                    *(_QWORD *)&v452 = &off_24EC21B18;
                    sub_2231C5C38((_DWORD *)(a1 + 8), (_WORD *)&v452 + 4);
                    v431 = v457;
                    if (v457 && v456)
                    {
                      v434 = 0;
                      v189 = byte_2245F4CB8;
                      v190 = &unk_2245F4CC4;
                      v191 = &unk_2245F4CD0;
                      do
                      {
                        v192 = v456;
                        if (v456)
                        {
                          v193 = *(_DWORD *)(a1 + 16);
                          v194 = *(_QWORD *)a1 + (*(_DWORD *)(a1 + 20) * v434);
                          v195 = v455;
                          v196 = *((_QWORD *)&v454[0] + 1) + (v458 * v434);
                          if (*((_QWORD *)&v454[0] + 1))
                          {
                            v197 = 0;
                            v198 = 0;
                            do
                            {
                              v199 = *(char *)(v194 + v197);
                              if (v199 >= 0xC)
                              {
                                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SceneUnderstanding/src/Types.cpp", 91, (uint64_t)"", 0, (uint64_t)"Unexpected label", 16, (void (*)(void **))sub_22457406C);
                                abort();
                              }
                              v200 = v189[v199];
                              v201 = v190[v199];
                              v202 = v191[v199];
                              v203 = (_BYTE *)(v196 + v198);
                              *v203 = v200;
                              v203[1] = v201;
                              v203[2] = v202;
                              v198 += v195;
                              v197 += v193;
                              --v192;
                            }
                            while (v192);
                          }
                          else
                          {
                            v204 = 0;
                            v205 = 0;
                            v440 = *(_QWORD *)a1 + (*(_DWORD *)(a1 + 20) * v434);
                            v438 = *(_DWORD *)(a1 + 16);
                            v436 = v455;
                            do
                            {
                              v206 = *(char *)(v194 + v204);
                              if (v206 >= 0xC)
                              {
                                sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SceneUnderstanding/src/Types.cpp", 91, (uint64_t)"", 0, (uint64_t)"Unexpected label", 16, (void (*)(void **))sub_22457406C);
                                abort();
                              }
                              v207 = v189;
                              v208 = v189[v206];
                              v209 = v190;
                              v210 = v190[v206];
                              v211 = v191;
                              v212 = v191[v206];
                              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                              {
                                abort();
                              }
                              v213 = (_BYTE *)(v196 + v205);
                              *v213 = v208;
                              v213[1] = v210;
                              v213[2] = v212;
                              v205 += v436;
                              v204 += v438;
                              --v192;
                              v189 = v207;
                              v190 = v209;
                              v191 = v211;
                              v194 = v440;
                            }
                            while (v192);
                          }
                        }
                        ++v434;
                      }
                      while (v434 != v431);
                    }
                    strcpy(__dst, "semanticsRGB");
                    *(_QWORD *)&__dst[13] = v450;
                    *(_WORD *)&__dst[21] = v451;
                    *(_WORD *)&__dst[23] = 268;
                    v450 = 0;
                    v451 = 0;
                    sub_2231C6C30(&v452, (__int128 *)__dst, &v445, &v449);
                    a3 = v427;
                    a2 = v429;
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_223167354((uint64_t)&v452 + 8);
                    v214 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v423 + 56))(v423);
                    v215 = *v214;
                    v216 = (std::__shared_weak_count *)v214[1];
                    if (v216)
                    {
                      v217 = (unint64_t *)&v216->__shared_owners_;
                      do
                        v218 = __ldxr(v217);
                      while (__stxr(v218 + 1, v217));
                    }
                    v219 = *(_OWORD *)&v449.__r_.__value_.__r.__words[1];
                    v446 = &off_24EC6A3B8;
                    v447 = *(_OWORD *)&v449.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v449.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_QWORD *)&v452 = v215;
                    *((_QWORD *)&v452 + 1) = v216;
                    if (v216)
                    {
                      v220 = (unint64_t *)&v216->__shared_owners_;
                      do
                        v221 = __ldxr(v220);
                      while (__stxr(v221 + 1, v220));
                    }
                    v453 = &off_24EC6A3B8;
                    v454[0] = v219;
                    if (*((_QWORD *)&v219 + 1))
                    {
                      v222 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
                      do
                        v223 = __ldxr(v222);
                      while (__stxr(v223 + 1, v222));
                    }
                    (*(void (**)(uint64_t *, __int128 *))(*v424 + 16))(v424, &v452);
                    sub_2241231D8((uint64_t)&v453);
                    v224 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
                    if (*((_QWORD *)&v452 + 1))
                    {
                      v225 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 - 1, v225));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                    }
                    sub_2241231D8((uint64_t)&v446);
                    if (v216)
                    {
                      v227 = (unint64_t *)&v216->__shared_owners_;
                      do
                        v228 = __ldaxr(v227);
                      while (__stlxr(v228 - 1, v227));
                      if (!v228)
                      {
                        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                        std::__shared_weak_count::__release_weak(v216);
                      }
                    }
                    sub_2241231D8((uint64_t)&v449);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v444.__r_.__value_.__l.__data_);
              goto LABEL_328;
            }
          }
          if (v174 >= 0)
            v180 = (uint64_t (*)())a3;
          else
            v180 = *(uint64_t (**)())a3;
          memmove(v177, v180, v175);
          goto LABEL_273;
        }
      }
    }
  }
LABEL_328:
  v229 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v229 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v230 = std::string::append((std::string *)__dst, ".", 1uLL);
  v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v230->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v231;
  v230->__r_.__value_.__l.__size_ = 0;
  v230->__r_.__value_.__r.__words[2] = 0;
  v230->__r_.__value_.__r.__words[0] = 0;
  v232 = *(char *)(a3 + 23);
  if (v232 >= 0)
    v233 = (const std::string::value_type *)a3;
  else
    v233 = *(const std::string::value_type **)a3;
  if (v232 >= 0)
    v234 = *(unsigned __int8 *)(a3 + 23);
  else
    v234 = *(_QWORD *)(a3 + 8);
  v235 = std::string::append((std::string *)__p, v233, v234);
  v236 = *(_OWORD *)&v235->__r_.__value_.__l.__data_;
  v453 = (uint64_t (**)())v235->__r_.__value_.__r.__words[2];
  v452 = v236;
  v235->__r_.__value_.__l.__size_ = 0;
  v235->__r_.__value_.__r.__words[2] = 0;
  v235->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v453) >= 0)
    v237 = (const char *)&v452;
  else
    v237 = (const char *)v452;
  v238 = strlen(v237);
  sub_2241471F8();
  v239 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v237, v238);
  v240 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v239 + 24))(v239);
  if (SHIBYTE(v453) < 0)
  {
    operator delete((void *)v452);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_343:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_344;
LABEL_348:
      operator delete(*(void **)__dst);
      if (!v240)
        goto LABEL_442;
LABEL_349:
      v241 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v241 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      if (byte_25578BAF8[23] < 0)
        sub_223197FA4(&v449, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
      else
        v449 = *(std::string *)byte_25578BAF8;
      v242 = std::string::append(&v449, ".", 1uLL);
      v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst[16] = *((_QWORD *)&v242->__r_.__value_.__l + 2);
      *(_OWORD *)__dst = v243;
      v242->__r_.__value_.__l.__size_ = 0;
      v242->__r_.__value_.__r.__words[2] = 0;
      v242->__r_.__value_.__r.__words[0] = 0;
      v244 = *(char *)(a3 + 23);
      if (v244 >= 0)
        v245 = (const std::string::value_type *)a3;
      else
        v245 = *(const std::string::value_type **)a3;
      if (v244 >= 0)
        v246 = *(unsigned __int8 *)(a3 + 23);
      else
        v246 = *(_QWORD *)(a3 + 8);
      v247 = std::string::append((std::string *)__dst, v245, v246);
      v248 = *(_OWORD *)&v247->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v247->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v248;
      v247->__r_.__value_.__l.__size_ = 0;
      v247->__r_.__value_.__r.__words[2] = 0;
      v247->__r_.__value_.__r.__words[0] = 0;
      v249 = std::string::append((std::string *)__p, ".InputImages", 0xCuLL);
      v250 = *(_OWORD *)&v249->__r_.__value_.__l.__data_;
      v453 = (uint64_t (**)())v249->__r_.__value_.__r.__words[2];
      v452 = v250;
      v249->__r_.__value_.__l.__size_ = 0;
      v249->__r_.__value_.__r.__words[2] = 0;
      v249->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v453) >= 0)
        v251 = (const char *)&v452;
      else
        v251 = (const char *)v452;
      v252 = strlen(v251);
      sub_2241471F8();
      v253 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v251, v252);
      if (SHIBYTE(v453) < 0)
      {
        operator delete((void *)v452);
        if ((__p[23] & 0x80000000) == 0)
        {
LABEL_364:
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_365;
          goto LABEL_398;
        }
      }
      else if ((__p[23] & 0x80000000) == 0)
      {
        goto LABEL_364;
      }
      operator delete(*(void **)__p);
      if ((__dst[23] & 0x80000000) == 0)
      {
LABEL_365:
        if ((SHIBYTE(v449.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_366;
LABEL_399:
        operator delete(v449.__r_.__value_.__l.__data_);
LABEL_366:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v253 + 24))(v253))
        {
          v254 = atomic_load((unsigned __int8 *)&unk_25578BB10);
          if ((v254 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
          {
            __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
            __cxa_guard_release((__guard *)&unk_25578BB10);
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v253 + 24))(v253))
          {
            v446 = (uint64_t (**)())(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
            *(_QWORD *)&v447 = 2;
            v255 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v253 + 24))(v253))
            {
              v425 = v255;
              v426 = v253;
              v428 = a3;
              v430 = a2;
              *(_QWORD *)&v452 = &off_24EC21B18;
              sub_2231C5C38((_DWORD *)(a1 + 8), (_WORD *)&v452 + 4);
              v432 = v457;
              if (v457 && v456)
              {
                v435 = 0;
                v256 = &unk_2245F4CC4;
                v257 = &unk_2245F4CD0;
                do
                {
                  v258 = v456;
                  if (v456)
                  {
                    v259 = *(_DWORD *)(a1 + 16);
                    v260 = *(_QWORD *)a1 + (*(_DWORD *)(a1 + 20) * v435);
                    v261 = v455;
                    v262 = *((_QWORD *)&v454[0] + 1) + (v458 * v435);
                    if (*((_QWORD *)&v454[0] + 1))
                    {
                      v263 = 0;
                      v264 = 0;
                      do
                      {
                        v265 = *(char *)(v260 + v263);
                        if (v265 >= 0xC)
                        {
                          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SceneUnderstanding/src/Types.cpp", 91, (uint64_t)"", 0, (uint64_t)"Unexpected label", 16, (void (*)(void **))sub_22457406C);
                          abort();
                        }
                        v266 = byte_2245F4CB8[v265];
                        v267 = v256[v265];
                        v268 = v257[v265];
                        v269 = (_BYTE *)(v262 + v264);
                        *v269 = v266;
                        v269[1] = v267;
                        v269[2] = v268;
                        v264 += v261;
                        v263 += v259;
                        --v258;
                      }
                      while (v258);
                    }
                    else
                    {
                      v270 = 0;
                      v441 = *(_DWORD *)(a1 + 16);
                      v437 = (v458 * v435);
                      v439 = *(_QWORD *)a1 + (*(_DWORD *)(a1 + 20) * v435);
                      do
                      {
                        v271 = *(char *)(v260 + (v259 * v270));
                        if (v271 >= 0xC)
                        {
                          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SceneUnderstanding/src/Types.cpp", 91, (uint64_t)"", 0, (uint64_t)"Unexpected label", 16, (void (*)(void **))sub_22457406C);
                          abort();
                        }
                        v272 = byte_2245F4CB8[v271];
                        v273 = v256;
                        v274 = v256[v271];
                        v275 = v257;
                        v276 = v257[v271];
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v277 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v277 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v279 = qword_255795648;
                          v278 = qword_255795650;
                          while (v279 != v278)
                          {
                            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v279)(*(_QWORD *)(v279 + 8), "ptr != nullptr || size == 0", 27, "", 0);
                            v279 += 16;
                          }
                        }
                        v280 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v280 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        v259 = v441;
                        if (!byte_255795670)
                          abort();
                        qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                        v260 = v439;
                        v281 = (_BYTE *)(v437 + (v270 * v261));
                        *v281 = v272;
                        v281[1] = v274;
                        v281[2] = v276;
                        ++v270;
                        v256 = v273;
                        v257 = v275;
                      }
                      while (v270 != v258);
                    }
                  }
                  ++v435;
                }
                while (v435 != v432);
              }
              strcpy(__p, "semanticsRGB");
              __p[13] = 0;
              *(_WORD *)&__p[14] = 0;
              *(_DWORD *)&__p[16] = v444.__r_.__value_.__l.__data_;
              *(_DWORD *)&__p[19] = *(_DWORD *)((char *)v444.__r_.__value_.__r.__words + 3);
              *(_WORD *)&__p[23] = 268;
              sub_2231C6C30(&v452, (__int128 *)__p, (__int128 *)&v446, __dst);
              if (__p[24] && (__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v282 = (std::__shared_weak_count *)v453;
              a3 = v428;
              a2 = v430;
              if (v453)
              {
                v283 = (unint64_t *)(v453 + 1);
                do
                  v284 = __ldaxr(v283);
                while (__stlxr(v284 - 1, v283));
                if (!v284)
                {
                  ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                  std::__shared_weak_count::__release_weak(v282);
                }
              }
              v285 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v426 + 56))(v426);
              v286 = *v285;
              v287 = (std::__shared_weak_count *)v285[1];
              if (v287)
              {
                v288 = (unint64_t *)&v287->__shared_owners_;
                do
                  v289 = __ldxr(v288);
                while (__stxr(v289 + 1, v288));
              }
              v290 = *(_OWORD *)&__dst[8];
              v449.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
              *(_OWORD *)&v449.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
              *(_OWORD *)&__dst[8] = 0uLL;
              *(_QWORD *)&v452 = v286;
              *((_QWORD *)&v452 + 1) = v287;
              if (v287)
              {
                v291 = (unint64_t *)&v287->__shared_owners_;
                do
                  v292 = __ldxr(v291);
                while (__stxr(v292 + 1, v291));
              }
              v453 = &off_24EC6A3B8;
              v454[0] = v290;
              if (*((_QWORD *)&v290 + 1))
              {
                v293 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
                do
                  v294 = __ldxr(v293);
                while (__stxr(v294 + 1, v293));
              }
              (*(void (**)(uint64_t *, __int128 *))(*v425 + 16))(v425, &v452);
              v295 = (std::__shared_weak_count *)*((_QWORD *)&v454[0] + 1);
              if (*((_QWORD *)&v454[0] + 1))
              {
                v296 = (unint64_t *)(*((_QWORD *)&v454[0] + 1) + 8);
                do
                  v297 = __ldaxr(v296);
                while (__stlxr(v297 - 1, v296));
                if (!v297)
                {
                  ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                  std::__shared_weak_count::__release_weak(v295);
                }
              }
              v298 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
              if (*((_QWORD *)&v452 + 1))
              {
                v299 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
                do
                  v300 = __ldaxr(v299);
                while (__stlxr(v300 - 1, v299));
                if (!v300)
                {
                  ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
                  std::__shared_weak_count::__release_weak(v298);
                }
              }
              v301 = (std::__shared_weak_count *)v449.__r_.__value_.__r.__words[2];
              if (v449.__r_.__value_.__r.__words[2])
              {
                v302 = (unint64_t *)(v449.__r_.__value_.__r.__words[2] + 8);
                do
                  v303 = __ldaxr(v302);
                while (__stlxr(v303 - 1, v302));
                if (!v303)
                {
                  ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
                  std::__shared_weak_count::__release_weak(v301);
                }
              }
              if (v287)
              {
                v304 = (unint64_t *)&v287->__shared_owners_;
                do
                  v305 = __ldaxr(v304);
                while (__stlxr(v305 - 1, v304));
                if (!v305)
                {
                  ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                  std::__shared_weak_count::__release_weak(v287);
                }
              }
              v306 = *(std::__shared_weak_count **)&__dst[16];
              if (*(_QWORD *)&__dst[16])
              {
                v307 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
                do
                  v308 = __ldaxr(v307);
                while (__stlxr(v308 - 1, v307));
                if (!v308)
                {
                  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                  std::__shared_weak_count::__release_weak(v306);
                }
              }
            }
          }
        }
        goto LABEL_442;
      }
LABEL_398:
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v449.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_366;
      goto LABEL_399;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_343;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_348;
LABEL_344:
  if (v240)
    goto LABEL_349;
LABEL_442:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v309 = sub_2241471F8();
    v310 = v309[2];
    if (!v310)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v310 = v309[2];
    }
    v311 = *(_QWORD *)(v310 + 64);
    v312 = (std::mutex *)(v311 + 32);
    std::mutex::lock((std::mutex *)(v311 + 32));
    v314 = *(_QWORD *)(v311 + 96);
    v313 = *(_QWORD *)(v311 + 104);
    std::mutex::unlock(v312);
    if (v314 != v313)
    {
      *(_QWORD *)&v452 = "cv3d.recon.";
      *((_QWORD *)&v452 + 1) = 11;
      v315 = *(unsigned __int8 *)(a3 + 23);
      if ((v315 & 0x80u) == 0)
        v316 = (uint64_t (**)())a3;
      else
        v316 = *(uint64_t (***)())a3;
      if ((v315 & 0x80u) != 0)
        v315 = *(_QWORD *)(a3 + 8);
      v453 = v316;
      *(_QWORD *)&v454[0] = v315;
      sub_2231A9820((uint64_t)&v452, (uint64_t)v454 + 8, 0, 0, (std::string *)__p);
      v317 = __p[23];
      v318 = *(_BYTE **)__p;
      v319 = *(_QWORD *)&__p[8];
      sub_2241471F8();
      v320 = (v317 & 0x80u) == 0 ? __p : v318;
      v321 = (v317 & 0x80u) == 0 ? v317 : v319;
      v322 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v320, v321);
      v323 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v322 + 24))(v322);
      v324 = v323;
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v324)
          goto LABEL_529;
      }
      else if (!v323)
      {
        goto LABEL_529;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v325 = sub_2241471F8();
        v326 = v325[2];
        if (!v326)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v326 = v325[2];
        }
        v327 = *(_QWORD *)(v326 + 64);
        v328 = (std::mutex *)(v327 + 32);
        std::mutex::lock((std::mutex *)(v327 + 32));
        v330 = *(_QWORD *)(v327 + 96);
        v329 = *(_QWORD *)(v327 + 104);
        std::mutex::unlock(v328);
        if (v330 != v329)
        {
          v331 = *(char *)(a3 + 23);
          if (v331 >= 0)
            v332 = *(unsigned __int8 *)(a3 + 23);
          else
            v332 = *(_QWORD *)(a3 + 8);
          v333 = v332 + 12;
          if (v332 + 12 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v333 >= 0x17)
          {
            v335 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v333 | 7) != 0x17)
              v335 = v333 | 7;
            v336 = v335 + 1;
            v334 = operator new(v335 + 1);
            *(_QWORD *)&__p[8] = v332 + 12;
            *(_QWORD *)&__p[16] = v336 | 0x8000000000000000;
            *(_QWORD *)__p = v334;
          }
          else
          {
            memset(__p, 0, 24);
            v334 = __p;
            __p[23] = v332 + 12;
            if (!v332)
            {
LABEL_481:
              strcpy(&v334[v332], ".InputImages");
              *(_QWORD *)&v452 = "cv3d.recon.";
              *((_QWORD *)&v452 + 1) = 11;
              v338 = __p[23];
              v339 = (uint64_t (**)())__p;
              if (__p[23] < 0)
              {
                v339 = *(uint64_t (***)())__p;
                v338 = *(_QWORD *)&__p[8];
              }
              v453 = v339;
              *(_QWORD *)&v454[0] = v338;
              sub_2231A9820((uint64_t)&v452, (uint64_t)v454 + 8, 0, 0, &v444);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              v340 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
              v341 = *(_OWORD *)&v444.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v340 & 0x80u) == 0)
                v342 = &v444;
              else
                v342 = (std::string *)v341;
              if ((v340 & 0x80u) == 0)
                v343 = v340;
              else
                v343 = *((_QWORD *)&v341 + 1);
              v344 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v342, v343);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v344 + 24))(v344))
              {
                memset(__p, 0, sizeof(__p));
                v443 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v344 + 24))(v344))
                {
                  *(_QWORD *)&v445 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v445 + 1) = 2;
                  v345 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v344 + 24))(v344))
                  {
                    v346 = a2[1];
                    v347 = v346 << 32;
                    if (!HIDWORD(v346))
                      v347 = 0;
                    if (a2[1])
                      v348 = HIDWORD(v346) == 0;
                    else
                      v348 = 1;
                    v349 = v347 | (a2[1] != 0);
                    if (v348)
                      v346 = 0;
                    *(_QWORD *)__dst = *a2;
                    *(_QWORD *)&__dst[8] = v346;
                    *(_QWORD *)&__dst[16] = v349;
                    if (HIDWORD(v346) * HIDWORD(v347) == -1
                      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
                    {
                      abort();
                    }
                    *(_QWORD *)&v452 = &off_24EC216B8;
                    sub_2233B305C((uint64_t)__dst, (uint64_t *)&v452 + 1);
                    strcpy(__dst, "semantics_confidence");
                    *(_DWORD *)&__dst[21] = 18087936;
                    sub_22321B368(&v452, (__int128 *)__dst, &v445, &v449);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_223167354((uint64_t)&v452 + 8);
                    v350 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v344 + 56))(v344);
                    v351 = *v350;
                    v352 = (std::__shared_weak_count *)v350[1];
                    if (v352)
                    {
                      v353 = (unint64_t *)&v352->__shared_owners_;
                      do
                        v354 = __ldxr(v353);
                      while (__stxr(v354 + 1, v353));
                    }
                    v355 = *(_OWORD *)&v449.__r_.__value_.__r.__words[1];
                    v446 = &off_24EC6A3B8;
                    v447 = *(_OWORD *)&v449.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v449.__r_.__value_.__r.__words[1] = 0uLL;
                    *(_QWORD *)&v452 = v351;
                    *((_QWORD *)&v452 + 1) = v352;
                    if (v352)
                    {
                      v356 = (unint64_t *)&v352->__shared_owners_;
                      do
                        v357 = __ldxr(v356);
                      while (__stxr(v357 + 1, v356));
                    }
                    v453 = &off_24EC6A3B8;
                    v454[0] = v355;
                    if (*((_QWORD *)&v355 + 1))
                    {
                      v358 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
                      do
                        v359 = __ldxr(v358);
                      while (__stxr(v359 + 1, v358));
                    }
                    (*(void (**)(uint64_t *, __int128 *))(*v345 + 16))(v345, &v452);
                    sub_2241231D8((uint64_t)&v453);
                    v360 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
                    if (*((_QWORD *)&v452 + 1))
                    {
                      v361 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
                      do
                        v362 = __ldaxr(v361);
                      while (__stlxr(v362 - 1, v361));
                      if (!v362)
                      {
                        ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                        std::__shared_weak_count::__release_weak(v360);
                      }
                    }
                    sub_2241231D8((uint64_t)&v446);
                    if (v352)
                    {
                      v363 = (unint64_t *)&v352->__shared_owners_;
                      do
                        v364 = __ldaxr(v363);
                      while (__stlxr(v364 - 1, v363));
                      if (!v364)
                      {
                        ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                        std::__shared_weak_count::__release_weak(v352);
                      }
                    }
                    sub_2241231D8((uint64_t)&v449);
                  }
                }
                kdebug_trace();
              }
              if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v444.__r_.__value_.__l.__data_);
              goto LABEL_529;
            }
          }
          if (v331 >= 0)
            v337 = (uint64_t (*)())a3;
          else
            v337 = *(uint64_t (**)())a3;
          memmove(v334, v337, v332);
          goto LABEL_481;
        }
      }
    }
  }
LABEL_529:
  v365 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v365 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v366 = std::string::append((std::string *)__dst, ".", 1uLL);
  v367 = *(_OWORD *)&v366->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v366->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v367;
  v366->__r_.__value_.__l.__size_ = 0;
  v366->__r_.__value_.__r.__words[2] = 0;
  v366->__r_.__value_.__r.__words[0] = 0;
  v368 = *(char *)(a3 + 23);
  if (v368 >= 0)
    v369 = (const std::string::value_type *)a3;
  else
    v369 = *(const std::string::value_type **)a3;
  if (v368 >= 0)
    v370 = *(unsigned __int8 *)(a3 + 23);
  else
    v370 = *(_QWORD *)(a3 + 8);
  v371 = std::string::append((std::string *)__p, v369, v370);
  v372 = *(_OWORD *)&v371->__r_.__value_.__l.__data_;
  v453 = (uint64_t (**)())v371->__r_.__value_.__r.__words[2];
  v452 = v372;
  v371->__r_.__value_.__l.__size_ = 0;
  v371->__r_.__value_.__r.__words[2] = 0;
  v371->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v453) >= 0)
    v373 = (const char *)&v452;
  else
    v373 = (const char *)v452;
  v374 = strlen(v373);
  sub_2241471F8();
  v375 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v373, v374);
  v376 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v375 + 24))(v375);
  if (SHIBYTE(v453) < 0)
  {
    operator delete((void *)v452);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_544:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_545;
      goto LABEL_549;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_544;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_545:
    if (!v376)
      return;
    goto LABEL_550;
  }
LABEL_549:
  operator delete(*(void **)__dst);
  if (!v376)
    return;
LABEL_550:
  v377 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v377 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v449, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v449 = *(std::string *)byte_25578BAF8;
  v378 = std::string::append(&v449, ".", 1uLL);
  v379 = *(_OWORD *)&v378->__r_.__value_.__l.__data_;
  *(_QWORD *)&__dst[16] = *((_QWORD *)&v378->__r_.__value_.__l + 2);
  *(_OWORD *)__dst = v379;
  v378->__r_.__value_.__l.__size_ = 0;
  v378->__r_.__value_.__r.__words[2] = 0;
  v378->__r_.__value_.__r.__words[0] = 0;
  v380 = *(char *)(a3 + 23);
  if (v380 >= 0)
    v381 = (const std::string::value_type *)a3;
  else
    v381 = *(const std::string::value_type **)a3;
  if (v380 >= 0)
    v382 = *(unsigned __int8 *)(a3 + 23);
  else
    v382 = *(_QWORD *)(a3 + 8);
  v383 = std::string::append((std::string *)__dst, v381, v382);
  v384 = *(_OWORD *)&v383->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v383->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v384;
  v383->__r_.__value_.__l.__size_ = 0;
  v383->__r_.__value_.__r.__words[2] = 0;
  v383->__r_.__value_.__r.__words[0] = 0;
  v385 = std::string::append((std::string *)__p, ".InputImages", 0xCuLL);
  v386 = *(_OWORD *)&v385->__r_.__value_.__l.__data_;
  v453 = (uint64_t (**)())v385->__r_.__value_.__r.__words[2];
  v452 = v386;
  v385->__r_.__value_.__l.__size_ = 0;
  v385->__r_.__value_.__r.__words[2] = 0;
  v385->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v453) >= 0)
    v387 = (const char *)&v452;
  else
    v387 = (const char *)v452;
  v388 = strlen(v387);
  sub_2241471F8();
  v389 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v387, v388);
  if (SHIBYTE(v453) < 0)
  {
    operator delete((void *)v452);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_565:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_566;
LABEL_625:
      operator delete(*(void **)__dst);
      if ((SHIBYTE(v449.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_567;
      goto LABEL_626;
    }
  }
  else if ((__p[23] & 0x80000000) == 0)
  {
    goto LABEL_565;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_625;
LABEL_566:
  if ((SHIBYTE(v449.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_567;
LABEL_626:
  operator delete(v449.__r_.__value_.__l.__data_);
LABEL_567:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v389 + 24))(v389))
  {
    v390 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v390 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v389 + 24))(v389))
    {
      v446 = (uint64_t (**)())(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      *(_QWORD *)&v447 = 2;
      v391 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v389 + 24))(v389))
      {
        v392 = a2[1];
        v393 = v392 << 32;
        if (!HIDWORD(v392))
          v393 = 0;
        if (a2[1])
          v394 = HIDWORD(v392) == 0;
        else
          v394 = 1;
        v395 = v393 | (a2[1] != 0);
        if (v394)
          v392 = 0;
        *(_QWORD *)__p = *a2;
        *(_QWORD *)&__p[8] = v392;
        *(_QWORD *)&__p[16] = v395;
        if (HIDWORD(v392) * HIDWORD(v393) == -1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_QWORD *)&v452 = &off_24EC216B8;
        sub_2233B305C((uint64_t)__p, (uint64_t *)&v452 + 1);
        strcpy(__p, "semantics_confidence");
        *(_WORD *)&__p[23] = 276;
        sub_22321B368(&v452, (__int128 *)__p, (__int128 *)&v446, __dst);
        if (__p[24] && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v396 = (std::__shared_weak_count *)v453;
        if (v453)
        {
          v397 = (unint64_t *)(v453 + 1);
          do
            v398 = __ldaxr(v397);
          while (__stlxr(v398 - 1, v397));
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
        }
        v399 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v389 + 56))(v389);
        v400 = *v399;
        v401 = (std::__shared_weak_count *)v399[1];
        if (v401)
        {
          v402 = (unint64_t *)&v401->__shared_owners_;
          do
            v403 = __ldxr(v402);
          while (__stxr(v403 + 1, v402));
        }
        v404 = *(_OWORD *)&__dst[8];
        v449.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v449.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
        *(_OWORD *)&__dst[8] = 0uLL;
        *(_QWORD *)&v452 = v400;
        *((_QWORD *)&v452 + 1) = v401;
        if (v401)
        {
          v405 = (unint64_t *)&v401->__shared_owners_;
          do
            v406 = __ldxr(v405);
          while (__stxr(v406 + 1, v405));
        }
        v453 = &off_24EC6A3B8;
        v454[0] = v404;
        if (*((_QWORD *)&v404 + 1))
        {
          v407 = (unint64_t *)(*((_QWORD *)&v404 + 1) + 8);
          do
            v408 = __ldxr(v407);
          while (__stxr(v408 + 1, v407));
        }
        (*(void (**)(uint64_t *, __int128 *))(*v391 + 16))(v391, &v452);
        v409 = (std::__shared_weak_count *)*((_QWORD *)&v454[0] + 1);
        if (*((_QWORD *)&v454[0] + 1))
        {
          v410 = (unint64_t *)(*((_QWORD *)&v454[0] + 1) + 8);
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
            std::__shared_weak_count::__release_weak(v409);
          }
        }
        v412 = (std::__shared_weak_count *)*((_QWORD *)&v452 + 1);
        if (*((_QWORD *)&v452 + 1))
        {
          v413 = (unint64_t *)(*((_QWORD *)&v452 + 1) + 8);
          do
            v414 = __ldaxr(v413);
          while (__stlxr(v414 - 1, v413));
          if (!v414)
          {
            ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
            std::__shared_weak_count::__release_weak(v412);
          }
        }
        v415 = (std::__shared_weak_count *)v449.__r_.__value_.__r.__words[2];
        if (v449.__r_.__value_.__r.__words[2])
        {
          v416 = (unint64_t *)(v449.__r_.__value_.__r.__words[2] + 8);
          do
            v417 = __ldaxr(v416);
          while (__stlxr(v417 - 1, v416));
          if (!v417)
          {
            ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
            std::__shared_weak_count::__release_weak(v415);
          }
        }
        if (v401)
        {
          v418 = (unint64_t *)&v401->__shared_owners_;
          do
            v419 = __ldaxr(v418);
          while (__stlxr(v419 - 1, v418));
          if (!v419)
          {
            ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
            std::__shared_weak_count::__release_weak(v401);
          }
        }
        v420 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v421 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v422 = __ldaxr(v421);
          while (__stlxr(v422 - 1, v421));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
            std::__shared_weak_count::__release_weak(v420);
          }
        }
      }
    }
  }
}

void sub_2233AE014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;

  sub_2241231D8(v54);
  v57 = *(std::__shared_weak_count **)(v55 - 248);
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  sub_2241231D8((uint64_t)&a38);
  if (v53)
  {
    v60 = (unint64_t *)&v53->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_2241231D8((uint64_t)&a48);
  sub_2231874DC((uint64_t)&a21);
  if (a35 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233AE750(uint64_t *a1, void **a2, double a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t (**v13)();
  void *v14;
  void **v15;
  void *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  double v22;
  unsigned __int8 v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  size_t v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::mutex *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t (**v43)();
  void *v44;
  void **v45;
  void *v46;
  void **v47;
  void *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  std::mutex *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  size_t v59;
  unint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (**v64)();
  std::string *v65;
  __int128 v66;
  void *v67;
  void **v68;
  uint64_t v69;
  __int128 v70;
  std::string *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (**v77)();
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unsigned __int8 v95;
  std::string *v96;
  __int128 v97;
  int v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  void **v103;
  size_t v104;
  uint64_t v105;
  int v106;
  unsigned __int8 v107;
  std::string *v108;
  __int128 v109;
  int v110;
  const std::string::value_type *v111;
  std::string::size_type v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  __int128 v116;
  std::string *v117;
  __int128 v118;
  void **v119;
  size_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (**v126)();
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  void *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  void *__p[2];
  __int128 v155;
  int v156;
  std::string v157;
  __int128 v158;
  void *v159[2];
  void *v160;
  std::string v161;
  _BYTE __dst[32];
  std::string *v163;
  std::string v164;
  void *v165[2];
  uint64_t (**v166)();
  _BYTE v167[24];
  __int128 v168;
  int v169;
  uint64_t v170;

  v170 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v5 = sub_2241471F8();
    v6 = v5[2];
    if (!v6)
    {
      v7 = v5;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = v7[2];
    }
    v8 = *(_QWORD *)(v6 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      v165[0] = "cv3d.recon.";
      v165[1] = (void *)11;
      v12 = (void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v12 >= 0)
        v13 = (uint64_t (**)())a2;
      else
        v13 = (uint64_t (**)())*a2;
      if ((char)v12 < 0)
        v12 = a2[1];
      v166 = v13;
      *(_QWORD *)v167 = v12;
      sub_2231A9820((uint64_t)v165, (uint64_t)&v167[8], 0, 0, (std::string *)__p);
      v14 = (void *)BYTE7(v155);
      v15 = (void **)__p[0];
      v16 = __p[1];
      sub_2241471F8();
      if ((char)v14 >= 0)
        v17 = __p;
      else
        v17 = v15;
      if ((char)v14 >= 0)
        v18 = v14;
      else
        v18 = v16;
      v19 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v17, v18);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v21 = v20;
      if (SBYTE7(v155) < 0)
      {
        operator delete(__p[0]);
        if (!v21)
          goto LABEL_27;
      }
      else if (!v20)
      {
        goto LABEL_27;
      }
      kdebug_trace();
      if (*(double *)&qword_255788F20 != a3)
      {
        v22 = a3 - *(double *)&qword_255788F20;
        if (*(double *)&qword_255788F20 >= a3)
          v22 = *(double *)&qword_255788F20 - a3;
        if (v22 > 0.00000001)
          qword_255788F20 = *(_QWORD *)&a3;
      }
      kdebug_trace();
    }
  }
LABEL_27:
  v23 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v23 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v24 = std::string::append((std::string *)__dst, ".", 1uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(_QWORD *)&v155 = *((_QWORD *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = *((char *)a2 + 23);
  if (v26 >= 0)
    v27 = (const std::string::value_type *)a2;
  else
    v27 = (const std::string::value_type *)*a2;
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)a2 + 23);
  else
    v28 = (std::string::size_type)a2[1];
  v29 = std::string::append((std::string *)__p, v27, v28);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v166 = (uint64_t (**)())v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)v165 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v166) >= 0)
    v31 = v165;
  else
    v31 = (void **)v165[0];
  v32 = strlen((const char *)v31);
  sub_2241471F8();
  v33 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v31, v32);
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33);
  if (SHIBYTE(v166) < 0)
  {
    operator delete(v165[0]);
    if ((SBYTE7(v155) & 0x80000000) == 0)
    {
LABEL_42:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_43;
LABEL_47:
      operator delete(*(void **)__dst);
      if (!v34)
        goto LABEL_50;
LABEL_48:
      v35 = atomic_load((unsigned __int8 *)&unk_25578BB10);
      if ((v35 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
      {
        __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
        __cxa_guard_release((__guard *)&unk_25578BB10);
      }
      qword_25578BAF0 = *(_QWORD *)&a3;
      goto LABEL_50;
    }
  }
  else if ((SBYTE7(v155) & 0x80000000) == 0)
  {
    goto LABEL_42;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_47;
LABEL_43:
  if (v34)
    goto LABEL_48;
LABEL_50:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v36 = sub_2241471F8();
    v37 = v36[2];
    if (!v37)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v37 = v36[2];
    }
    v38 = *(_QWORD *)(v37 + 64);
    v39 = (std::mutex *)(v38 + 32);
    std::mutex::lock((std::mutex *)(v38 + 32));
    v41 = *(_QWORD *)(v38 + 96);
    v40 = *(_QWORD *)(v38 + 104);
    std::mutex::unlock(v39);
    if (v41 != v40)
    {
      v165[0] = "cv3d.recon.";
      v165[1] = (void *)11;
      v42 = (void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v42 >= 0)
        v43 = (uint64_t (**)())a2;
      else
        v43 = (uint64_t (**)())*a2;
      if ((char)v42 < 0)
        v42 = a2[1];
      v166 = v43;
      *(_QWORD *)v167 = v42;
      sub_2231A9820((uint64_t)v165, (uint64_t)&v167[8], 0, 0, (std::string *)__p);
      v44 = (void *)BYTE7(v155);
      v45 = (void **)__p[0];
      v46 = __p[1];
      sub_2241471F8();
      v47 = (char)v44 >= 0 ? __p : v45;
      v48 = (char)v44 >= 0 ? v44 : v46;
      v49 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v47, v48);
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      v51 = v50;
      if (SBYTE7(v155) < 0)
      {
        operator delete(__p[0]);
        if (!v51)
          goto LABEL_146;
      }
      else if (!v50)
      {
        goto LABEL_146;
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v52 = sub_2241471F8();
        v53 = v52[2];
        if (!v53)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v53 = v52[2];
        }
        v54 = *(_QWORD *)(v53 + 64);
        v55 = (std::mutex *)(v54 + 32);
        std::mutex::lock((std::mutex *)(v54 + 32));
        v57 = *(_QWORD *)(v54 + 96);
        v56 = *(_QWORD *)(v54 + 104);
        std::mutex::unlock(v55);
        if (v57 != v56)
        {
          v58 = *((char *)a2 + 23);
          if (v58 >= 0)
            v59 = *((unsigned __int8 *)a2 + 23);
          else
            v59 = (size_t)a2[1];
          v60 = v59 + 1;
          if (v59 + 1 >= 0x7FFFFFFFFFFFFFF8)
            sub_22316DBC0();
          if (v60 >= 0x17)
          {
            v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v60 | 7) != 0x17)
              v62 = v60 | 7;
            v63 = v62 + 1;
            v61 = operator new(v62 + 1);
            *(_QWORD *)&__dst[8] = v59 + 1;
            *(_QWORD *)&__dst[16] = v63 | 0x8000000000000000;
            *(_QWORD *)__dst = v61;
          }
          else
          {
            memset(__dst, 0, 24);
            v61 = __dst;
            __dst[23] = v59 + 1;
            if (!v59)
            {
LABEL_89:
              *(_WORD *)&v61[v59] = 46;
              v65 = std::string::append((std::string *)__dst, "Planes", 6uLL);
              v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              *(_QWORD *)&v155 = *((_QWORD *)&v65->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              v165[0] = "cv3d.recon.";
              v165[1] = (void *)11;
              v67 = (void *)BYTE7(v155);
              v68 = __p;
              if (SBYTE7(v155) < 0)
              {
                v68 = (void **)__p[0];
                v67 = __p[1];
              }
              v166 = (uint64_t (**)())v68;
              *(_QWORD *)v167 = v67;
              sub_2231A9820((uint64_t)v165, (uint64_t)&v167[8], 0, 0, &v157);
              if (SBYTE7(v155) < 0)
                operator delete(__p[0]);
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              v69 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
              v70 = *(_OWORD *)&v157.__r_.__value_.__l.__data_;
              sub_2241471F8();
              if ((v69 & 0x80u) == 0)
                v71 = &v157;
              else
                v71 = (std::string *)v70;
              if ((v69 & 0x80u) == 0)
                v72 = v69;
              else
                v72 = *((_QWORD *)&v70 + 1);
              v73 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v71, v72);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
              {
                *(_OWORD *)__p = 0u;
                v155 = 0u;
                v156 = 728325616;
                kdebug_trace();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
                {
                  if (*((char *)a2 + 23) < 0)
                  {
                    sub_223197FA4(v159, *a2, (unint64_t)a2[1]);
                  }
                  else
                  {
                    *(_OWORD *)v159 = *(_OWORD *)a2;
                    v160 = a2[2];
                  }
                  *(_QWORD *)&v158 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  *((_QWORD *)&v158 + 1) = 2;
                  v74 = sub_2241471F8();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
                  {
                    sub_2241498F4((uint64_t)v165, 0);
                    sub_22339E3C8((uint64_t)v165, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
                    v76 = *a1;
                    v75 = a1[1];
                    if (*a1 != v75)
                    {
                      v77 = (uint64_t (**)())v165[1];
                      do
                      {
                        if (v77 < v166)
                        {
                          v78 = *(_QWORD *)v76;
                          *((_DWORD *)v77 + 2) = *(_DWORD *)(v76 + 8);
                          *v77 = (uint64_t (*)())v78;
                          v77 = (uint64_t (**)())((char *)v77 + 12);
                        }
                        else
                        {
                          v77 = (uint64_t (**)())sub_2233B3A8C((unint64_t *)v165, (uint64_t *)v76);
                        }
                        v165[1] = v77;
                        v76 += 12;
                      }
                      while (v76 != v75);
                    }
                    v79 = atomic_load((unsigned __int8 *)&qword_2540CABB8);
                    if ((v79 & 1) == 0 && __cxa_guard_acquire(&qword_2540CABB8))
                    {
                      qword_2540CABE8 = 0x3F0000003F000000;
                      dword_2540CABF0 = 1056964608;
                      __cxa_guard_release(&qword_2540CABB8);
                    }
                    v169 = 1;
                    sub_22339EBD4((uint64_t)__dst, 0xAAAAAAAAAAAAAAABLL * (((char *)v165[1] - (char *)v165[0]) >> 2), (uint64_t)&qword_2540CABE8);
                    if (*(_QWORD *)&v167[8])
                    {
                      *(_QWORD *)&v167[16] = *(_QWORD *)&v167[8];
                      v161.__r_.__value_.__r.__words[0] = *(_QWORD *)&v167[8];
                      LODWORD(v161.__r_.__value_.__r.__words[1]) = -1431655765
                                                                 * (((_QWORD)v168 - *(_QWORD *)&v167[8]) >> 2);
                      if (HIDWORD(v168) == -1)
                        sub_22316DD70();
                      v163 = &v161;
                      ((void (*)(std::string **, char *))off_24EC35DB0[HIDWORD(v168)])(&v163, (char *)&v168 + 8);
                    }
                    *(_OWORD *)&v167[8] = *(_OWORD *)__dst;
                    v168 = *(_OWORD *)&__dst[16];
                    *(_OWORD *)__dst = *(_OWORD *)v159;
                    *(_QWORD *)&__dst[16] = v160;
                    v159[0] = 0;
                    v159[1] = 0;
                    v160 = 0;
                    __dst[24] = 1;
                    sub_22329F414((uint64_t)v165, (__int128 *)__dst, &v158, &v164);
                    if (__dst[24] && (__dst[23] & 0x80000000) != 0)
                      operator delete(*(void **)__dst);
                    sub_22316F8F4((uint64_t *)v165);
                    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 56))(v73);
                    v81 = *(void **)v80;
                    v82 = *(std::__shared_weak_count **)(v80 + 8);
                    if (v82)
                    {
                      p_shared_owners = (unint64_t *)&v82->__shared_owners_;
                      do
                        v84 = __ldxr(p_shared_owners);
                      while (__stxr(v84 + 1, p_shared_owners));
                    }
                    v85 = *(_OWORD *)&v164.__r_.__value_.__r.__words[1];
                    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                    *(_OWORD *)&v161.__r_.__value_.__r.__words[1] = *(_OWORD *)&v164.__r_.__value_.__r.__words[1];
                    *(_OWORD *)&v164.__r_.__value_.__r.__words[1] = 0uLL;
                    v165[0] = v81;
                    v165[1] = v82;
                    if (v82)
                    {
                      v86 = (unint64_t *)&v82->__shared_owners_;
                      do
                        v87 = __ldxr(v86);
                      while (__stxr(v87 + 1, v86));
                    }
                    v166 = &off_24EC6A3B8;
                    *(_OWORD *)v167 = v85;
                    if (*((_QWORD *)&v85 + 1))
                    {
                      v88 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
                      do
                        v89 = __ldxr(v88);
                      while (__stxr(v89 + 1, v88));
                    }
                    (*(void (**)(uint64_t *, void **))(*v74 + 16))(v74, v165);
                    sub_2241231D8((uint64_t)&v166);
                    v90 = (std::__shared_weak_count *)v165[1];
                    if (v165[1])
                    {
                      v91 = (unint64_t *)((char *)v165[1] + 8);
                      do
                        v92 = __ldaxr(v91);
                      while (__stlxr(v92 - 1, v91));
                      if (!v92)
                      {
                        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                        std::__shared_weak_count::__release_weak(v90);
                      }
                    }
                    sub_2241231D8((uint64_t)&v161);
                    if (v82)
                    {
                      v93 = (unint64_t *)&v82->__shared_owners_;
                      do
                        v94 = __ldaxr(v93);
                      while (__stlxr(v94 - 1, v93));
                      if (!v94)
                      {
                        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                        std::__shared_weak_count::__release_weak(v82);
                      }
                    }
                    sub_2241231D8((uint64_t)&v164);
                  }
                  if (SHIBYTE(v160) < 0)
                    operator delete(v159[0]);
                }
                kdebug_trace();
              }
              if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v157.__r_.__value_.__l.__data_);
              goto LABEL_146;
            }
          }
          if (v58 >= 0)
            v64 = (uint64_t (**)())a2;
          else
            v64 = (uint64_t (**)())*a2;
          memmove(v61, v64, v59);
          goto LABEL_89;
        }
      }
    }
  }
LABEL_146:
  v95 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v95 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
  {
    sub_223197FA4(__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)byte_25578BAF8;
    *(_QWORD *)&__dst[16] = *(_QWORD *)&byte_25578BAF8[16];
  }
  v96 = std::string::append((std::string *)__dst, ".", 1uLL);
  v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  *(_QWORD *)&v155 = *((_QWORD *)&v96->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  v98 = *((char *)a2 + 23);
  if (v98 >= 0)
    v99 = (const std::string::value_type *)a2;
  else
    v99 = (const std::string::value_type *)*a2;
  if (v98 >= 0)
    v100 = *((unsigned __int8 *)a2 + 23);
  else
    v100 = (std::string::size_type)a2[1];
  v101 = std::string::append((std::string *)__p, v99, v100);
  v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
  v166 = (uint64_t (**)())v101->__r_.__value_.__r.__words[2];
  *(_OWORD *)v165 = v102;
  v101->__r_.__value_.__l.__size_ = 0;
  v101->__r_.__value_.__r.__words[2] = 0;
  v101->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v166) >= 0)
    v103 = v165;
  else
    v103 = (void **)v165[0];
  v104 = strlen((const char *)v103);
  sub_2241471F8();
  v105 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v103, v104);
  v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 24))(v105);
  if (SHIBYTE(v166) < 0)
  {
    operator delete(v165[0]);
    if ((SBYTE7(v155) & 0x80000000) == 0)
    {
LABEL_161:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_162;
      goto LABEL_166;
    }
  }
  else if ((SBYTE7(v155) & 0x80000000) == 0)
  {
    goto LABEL_161;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_162:
    if (!v106)
      return;
    goto LABEL_167;
  }
LABEL_166:
  operator delete(*(void **)__dst);
  if (!v106)
    return;
LABEL_167:
  v107 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v107 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&v161, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    v161 = *(std::string *)byte_25578BAF8;
  v108 = std::string::append(&v161, ".", 1uLL);
  v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v164.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  v110 = *((char *)a2 + 23);
  if (v110 >= 0)
    v111 = (const std::string::value_type *)a2;
  else
    v111 = (const std::string::value_type *)*a2;
  if (v110 >= 0)
    v112 = *((unsigned __int8 *)a2 + 23);
  else
    v112 = (std::string::size_type)a2[1];
  v113 = std::string::append(&v164, v111, v112);
  v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
  *(_QWORD *)&__dst[16] = *((_QWORD *)&v113->__r_.__value_.__l + 2);
  *(_OWORD *)__dst = v114;
  v113->__r_.__value_.__l.__size_ = 0;
  v113->__r_.__value_.__r.__words[2] = 0;
  v113->__r_.__value_.__r.__words[0] = 0;
  v115 = std::string::append((std::string *)__dst, ".", 1uLL);
  v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
  *(_QWORD *)&v155 = *((_QWORD *)&v115->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v116;
  v115->__r_.__value_.__l.__size_ = 0;
  v115->__r_.__value_.__r.__words[2] = 0;
  v115->__r_.__value_.__r.__words[0] = 0;
  v117 = std::string::append((std::string *)__p, "Planes", 6uLL);
  v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
  v166 = (uint64_t (**)())v117->__r_.__value_.__r.__words[2];
  *(_OWORD *)v165 = v118;
  v117->__r_.__value_.__l.__size_ = 0;
  v117->__r_.__value_.__r.__words[2] = 0;
  v117->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v166) >= 0)
    v119 = v165;
  else
    v119 = (void **)v165[0];
  v120 = strlen((const char *)v119);
  sub_2241471F8();
  v121 = (*(uint64_t (**)(uint64_t *, void **, size_t))(qword_2557952E0 + 48))(&qword_2557952E0, v119, v120);
  if (SHIBYTE(v166) < 0)
  {
    operator delete(v165[0]);
    if ((SBYTE7(v155) & 0x80000000) == 0)
    {
LABEL_182:
      if ((__dst[23] & 0x80000000) == 0)
        goto LABEL_183;
      goto LABEL_197;
    }
  }
  else if ((SBYTE7(v155) & 0x80000000) == 0)
  {
    goto LABEL_182;
  }
  operator delete(__p[0]);
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_183:
    if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_184;
LABEL_198:
    operator delete(v164.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_185;
    goto LABEL_199;
  }
LABEL_197:
  operator delete(*(void **)__dst);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_198;
LABEL_184:
  if ((SHIBYTE(v161.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_185;
LABEL_199:
  operator delete(v161.__r_.__value_.__l.__data_);
LABEL_185:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121))
  {
    v122 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v122 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121))
    {
      v161.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      v161.__r_.__value_.__l.__size_ = 2;
      v123 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v121 + 24))(v121))
      {
        sub_2241498F4((uint64_t)v165, 0);
        sub_22339E3C8((uint64_t)v165, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
        v125 = *a1;
        v124 = a1[1];
        if (*a1 != v124)
        {
          v126 = (uint64_t (**)())v165[1];
          do
          {
            if (v126 < v166)
            {
              v127 = *(_QWORD *)v125;
              *((_DWORD *)v126 + 2) = *(_DWORD *)(v125 + 8);
              *v126 = (uint64_t (*)())v127;
              v126 = (uint64_t (**)())((char *)v126 + 12);
            }
            else
            {
              v126 = (uint64_t (**)())sub_2233B3A8C((unint64_t *)v165, (uint64_t *)v125);
            }
            v165[1] = v126;
            v125 += 12;
          }
          while (v125 != v124);
        }
        v128 = atomic_load((unsigned __int8 *)&qword_2540CABC0);
        if ((v128 & 1) == 0 && __cxa_guard_acquire(&qword_2540CABC0))
        {
          qword_2540CABF8 = 0x3F0000003F000000;
          dword_2540CAC00 = 1056964608;
          __cxa_guard_release(&qword_2540CABC0);
        }
        v169 = 1;
        sub_22339EBD4((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v165[1] - (char *)v165[0]) >> 2), (uint64_t)&qword_2540CABF8);
        if (*(_QWORD *)&v167[8])
        {
          *(_QWORD *)&v167[16] = *(_QWORD *)&v167[8];
          v164.__r_.__value_.__r.__words[0] = *(_QWORD *)&v167[8];
          LODWORD(v164.__r_.__value_.__r.__words[1]) = -1431655765 * (((_QWORD)v168 - *(_QWORD *)&v167[8]) >> 2);
          if (HIDWORD(v168) == -1)
            sub_22316DD70();
          v159[0] = &v164;
          ((void (*)(void **, char *))off_24EC35DB0[HIDWORD(v168)])(v159, (char *)&v168 + 8);
        }
        *(_OWORD *)&v167[8] = *(_OWORD *)__p;
        v168 = v155;
        if (*((char *)a2 + 23) < 0)
        {
          sub_223197FA4(__p, *a2, (unint64_t)a2[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)a2;
          *(_QWORD *)&v155 = a2[2];
        }
        BYTE8(v155) = 1;
        sub_22329F414((uint64_t)v165, (__int128 *)__p, (__int128 *)&v161, __dst);
        if (BYTE8(v155) && SBYTE7(v155) < 0)
          operator delete(__p[0]);
        sub_22316F8F4((uint64_t *)v165);
        v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 56))(v121);
        v130 = *(void **)v129;
        v131 = *(std::__shared_weak_count **)(v129 + 8);
        if (v131)
        {
          v132 = (unint64_t *)&v131->__shared_owners_;
          do
            v133 = __ldxr(v132);
          while (__stxr(v133 + 1, v132));
        }
        v134 = *(_OWORD *)&__dst[8];
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
        *(_OWORD *)&v164.__r_.__value_.__r.__words[1] = *(_OWORD *)&__dst[8];
        *(_OWORD *)&__dst[8] = 0uLL;
        v165[0] = v130;
        v165[1] = v131;
        if (v131)
        {
          v135 = (unint64_t *)&v131->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
        v166 = &off_24EC6A3B8;
        *(_OWORD *)v167 = v134;
        if (*((_QWORD *)&v134 + 1))
        {
          v137 = (unint64_t *)(*((_QWORD *)&v134 + 1) + 8);
          do
            v138 = __ldxr(v137);
          while (__stxr(v138 + 1, v137));
        }
        (*(void (**)(uint64_t *, void **))(*v123 + 16))(v123, v165);
        v139 = *(std::__shared_weak_count **)&v167[8];
        if (*(_QWORD *)&v167[8])
        {
          v140 = (unint64_t *)(*(_QWORD *)&v167[8] + 8);
          do
            v141 = __ldaxr(v140);
          while (__stlxr(v141 - 1, v140));
          if (!v141)
          {
            ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
            std::__shared_weak_count::__release_weak(v139);
          }
        }
        v142 = (std::__shared_weak_count *)v165[1];
        if (v165[1])
        {
          v143 = (unint64_t *)((char *)v165[1] + 8);
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        v145 = (std::__shared_weak_count *)v164.__r_.__value_.__r.__words[2];
        if (v164.__r_.__value_.__r.__words[2])
        {
          v146 = (unint64_t *)(v164.__r_.__value_.__r.__words[2] + 8);
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
        if (v131)
        {
          v148 = (unint64_t *)&v131->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
            std::__shared_weak_count::__release_weak(v131);
          }
        }
        v150 = *(std::__shared_weak_count **)&__dst[16];
        if (*(_QWORD *)&__dst[16])
        {
          v151 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
      }
    }
  }
}

