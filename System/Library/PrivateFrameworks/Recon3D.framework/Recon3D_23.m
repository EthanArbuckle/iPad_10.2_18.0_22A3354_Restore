void sub_223A39574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (*(_BYTE *)(v59 - 232) && *(char *)(v59 - 233) < 0)
    operator delete(*(void **)(v59 - 256));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a39);
  if (a53 < 0)
  {
    operator delete(__p);
    sub_223195348((uint64_t)&a54);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a54);
  _Unwind_Resume(a1);
}

uint64_t sub_223A3975C(uint64_t result, _DWORD *a2, unsigned int a3, _WORD *a4)
{
  unsigned int v4;
  int v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;

  v4 = (8u >> a3) + 1;
  v5 = (*a2 >> a3) + (a2[1] >> a3) * v4 + (a2[2] >> a3) * v4 * v4;
  v6 = *(_WORD *)(result + 2 * a3 + 24);
  v7 = (*a2 >> a3) + (a2[1] >> a3) * ((8u >> a3) + 1) + (a2[2] >> a3) * ((8u >> a3) + 1) * ((8u >> a3) + 1);
  v8 = 3 * v5 + v6;
  *a4 = v8;
  v9 = v7 + 1;
  a4[1] = 3 * (v7 + 1) + v6 + 1;
  v10 = v7 + v4;
  a4[2] = 3 * v10 + v6;
  a4[3] = v8 + 1;
  LOWORD(v5) = 3 * (v5 + ((8u >> a3) + 1) * ((8u >> a3) + 1)) + v6;
  a4[4] = v5;
  a4[5] = v6 + 3 * (v9 + ((8u >> a3) + 1) * ((8u >> a3) + 1)) + 1;
  a4[6] = 3 * (v10 + ((8u >> a3) + 1) * ((8u >> a3) + 1)) + v6;
  a4[7] = v5 + 1;
  a4[8] = v8 + 2;
  a4[9] = 3 * v9 + v6 + 2;
  a4[10] = v6 + 3 * (v9 + (8u >> a3) + 1) + 2;
  a4[11] = 3 * v10 + v6 + 2;
  return result;
}

unsigned __int8 *sub_223A39838(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int *v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 v16[6];

  v5 = 0;
  v6 = (uint64_t)(result + 32);
  v7 = result + 40;
  do
  {
    while (1)
    {
      v8 = (int *)(a2 + 12 * byte_224659760[v5]);
      v9 = (int *)(a2 + 12 * byte_224659760[v5 + 1]);
      v10 = *v8;
      v11 = *v9;
      if (*v8 != *v9)
        break;
      v12 = v8[1];
      v13 = v9[1];
      if (v12 != v13)
        goto LABEL_8;
      v13 = v8[1];
      if (v8[2] != v9[2])
        goto LABEL_8;
      *(_WORD *)(a3 + v5) = -1;
      v5 += 2;
      if (v5 == 24)
        return result;
    }
    v12 = v8[1];
    v13 = v9[1];
LABEL_8:
    v14 = v8[2];
    v15 = v9[2];
    v16[0] = v10;
    v16[1] = v12;
    v16[2] = v14;
    v16[3] = v11;
    v16[4] = v13;
    v16[5] = v15;
    result = sub_223A39978(v6, v16);
    if (v7 == result)
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 177, (uint64_t)&unk_22459CE1E, 0, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
      abort();
    }
    *(_WORD *)(a3 + v5) = *((_WORD *)result + 16);
    v5 += 2;
  }
  while (v5 != 24);
  return result;
}

unsigned __int8 *sub_223A39978(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v4 = *(unsigned __int8 **)(a1 + 8);
  v2 = (unsigned __int8 *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = v2;
  v11 = a2[5];
  do
  {
    v15 = v3[26];
    v16 = v15 >= v5;
    if (v15 == v5)
    {
      v17 = v3[27];
      v16 = v17 >= v6;
      if (v17 == v6)
      {
        v18 = v3[28];
        v16 = v18 >= v7;
        if (v18 == v7)
        {
          v19 = v3[29];
          v16 = v19 >= v8;
          if (v19 == v8)
          {
            v20 = v3[30];
            v16 = v20 >= v9;
            if (v20 == v9)
              v16 = v3[31] >= v11;
          }
        }
      }
    }
    v12 = !v16;
    v13 = v12 == 0;
    if (v12)
      v14 = v3 + 8;
    else
      v14 = v3;
    if (v13)
      v10 = v3;
    v3 = *(unsigned __int8 **)v14;
  }
  while (*(_QWORD *)v14);
  if (v10 == v2)
    return v2;
  v21 = v10[26];
  v22 = v5 >= v21;
  if (v5 == v21)
  {
    v23 = v10[27];
    v22 = v6 >= v23;
    if (v6 == v23)
    {
      v24 = v10[28];
      v22 = v7 >= v24;
      if (v7 == v24)
      {
        v25 = v10[29];
        v22 = v8 >= v25;
        if (v8 == v25)
        {
          v26 = v10[30];
          v22 = v9 >= v26;
          if (v9 == v26)
            v22 = v11 >= v10[31];
        }
      }
    }
  }
  if (!v22)
    return v2;
  return v10;
}

uint64_t sub_223A39A60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;

  result = operator new();
  v5 = result;
  *(_QWORD *)result = &off_24EC5DAA0;
  if (!*(_BYTE *)(a1 + 48))
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 231, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
LABEL_14:
      abort();
  }
  *(_BYTE *)(v5 + 8) = *(_BYTE *)(a1 + 218);
  if (!*(_BYTE *)(a1 + 84))
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
      goto LABEL_14;
    }
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 8);
    goto LABEL_11;
  }
  v6 = *(unsigned __int8 *)(a1 + 48);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(a1 + 64);
  if (v6)
  {
LABEL_11:
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a1 + 20);
    goto LABEL_12;
  }
  result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 172, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C);
  if ((result & 1) != 0)
    goto LABEL_14;
  v7 = *(unsigned __int8 *)(a1 + 48);
  *(_DWORD *)(v5 + 16) = *(_DWORD *)(a1 + 20);
  if (!v7)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 684, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      goto LABEL_14;
  }
LABEL_12:
  *(_QWORD *)(v5 + 20) = *(_QWORD *)(a1 + 228);
  *a2 = v5;
  return result;
}

void sub_223A39BE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1081C40D0DA33EBLL);
  _Unwind_Resume(a1);
}

void sub_223A39C0C()
{
  JUMPOUT(0x227684CE8);
}

void sub_223A39C20(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t *v50;
  uint64_t **v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t **v56;
  char v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t **v60;
  uint64_t *v61;
  int v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t **v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  std::mutex *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v90;
  std::string::size_type v91;
  int v92;
  __n128 *v95;
  std::string *v96;
  size_t v97;
  unint64_t v101;
  std::string __p;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t **v106;
  uint64_t *v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  int v111[4];
  uint64_t v112;

  v112 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v107 = 0;
  v108 = 0;
  v106 = &v107;
  v12 = (_QWORD *)*a7;
  v10 = a7 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    v13 = a6 + 1;
    v14 = (_QWORD *)*a6;
    if ((_QWORD *)*a6 == a6 + 1)
    {
      v15 = (uint64_t *)&v107;
      goto LABEL_40;
    }
    v15 = (uint64_t *)&v107;
    while (1)
    {
      v16 = *((_DWORD *)v11 + 7);
      v17 = *((_DWORD *)v14 + 7);
      if (v16 >= v17)
      {
        if (v17 >= v16)
        {
          v23 = (_QWORD *)v11[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (_QWORD *)v11[2];
              v55 = *v24 == (_QWORD)v11;
              v11 = v24;
            }
            while (!v55);
          }
          v25 = (_QWORD *)v14[1];
          if (v25)
          {
            do
            {
              v14 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = v14;
              v14 = (_QWORD *)v14[2];
            }
            while ((_QWORD *)*v14 != v26);
          }
          v11 = v24;
        }
        else
        {
          v21 = (_QWORD *)v14[1];
          if (v21)
          {
            do
            {
              v14 = v21;
              v21 = (_QWORD *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              v22 = v14;
              v14 = (_QWORD *)v14[2];
            }
            while ((_QWORD *)*v14 != v22);
          }
        }
        goto LABEL_35;
      }
      v18 = sub_223A3C618(&v106, v15, (uint64_t **)&v109, &v103, (unsigned int *)v11 + 7);
      v19 = *v18;
      if (*v18)
      {
        v20 = *(uint64_t **)(v19 + 8);
        if (v20)
          goto LABEL_27;
      }
      else
      {
        v19 = (uint64_t)operator new(0x20uLL);
        *(_DWORD *)(v19 + 28) = *((_DWORD *)v11 + 7);
        v27 = v109;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = v27;
        *v18 = v19;
        v28 = (uint64_t *)v19;
        if (*v106)
        {
          v106 = (uint64_t **)*v106;
          v28 = (uint64_t *)*v18;
        }
        sub_2231A9A8C(v107, v28);
        ++v108;
        v20 = *(uint64_t **)(v19 + 8);
        if (v20)
        {
          do
          {
LABEL_27:
            v15 = v20;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
          goto LABEL_31;
        }
      }
      do
      {
        v15 = *(uint64_t **)(v19 + 16);
        v55 = *v15 == v19;
        v19 = (uint64_t)v15;
      }
      while (!v55);
LABEL_31:
      v29 = (_QWORD *)v11[1];
      if (v29)
      {
        do
        {
          v11 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = v11;
          v11 = (_QWORD *)v11[2];
        }
        while ((_QWORD *)*v11 != v30);
      }
LABEL_35:
      if (v11 == v10)
        break;
      if (v14 == v13)
      {
        while (1)
        {
LABEL_40:
          v31 = sub_223A3C618(&v106, v15, (uint64_t **)&v109, &v103, (unsigned int *)v11 + 7);
          v32 = *v31;
          if (*v31)
          {
            v33 = *(uint64_t **)(v32 + 8);
            if (!v33)
              goto LABEL_48;
          }
          else
          {
            v32 = (uint64_t)operator new(0x20uLL);
            *(_DWORD *)(v32 + 28) = *((_DWORD *)v11 + 7);
            v34 = v109;
            *(_QWORD *)v32 = 0;
            *(_QWORD *)(v32 + 8) = 0;
            *(_QWORD *)(v32 + 16) = v34;
            *v31 = v32;
            v35 = (uint64_t *)v32;
            if (*v106)
            {
              v106 = (uint64_t **)*v106;
              v35 = (uint64_t *)*v31;
            }
            sub_2231A9A8C(v107, v35);
            ++v108;
            v33 = *(uint64_t **)(v32 + 8);
            if (!v33)
            {
              do
              {
LABEL_48:
                v15 = *(uint64_t **)(v32 + 16);
                v55 = *v15 == v32;
                v32 = (uint64_t)v15;
              }
              while (!v55);
              goto LABEL_50;
            }
          }
          do
          {
            v15 = v33;
            v33 = (uint64_t *)*v33;
          }
          while (v33);
LABEL_50:
          v36 = (_QWORD *)v11[1];
          if (v36)
          {
            do
            {
              v37 = v36;
              v36 = (_QWORD *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              v37 = (_QWORD *)v11[2];
              v55 = *v37 == (_QWORD)v11;
              v11 = v37;
            }
            while (!v55);
          }
          v11 = v37;
          if (v37 == v10)
            goto LABEL_56;
        }
      }
    }
  }
LABEL_56:
  v38 = v108;
  v104 = 0;
  v105 = 0;
  v103 = 0;
  if (v108)
  {
    if (v108 >= 0x1555555555555556)
      sub_22316E078();
    v39 = (uint64_t *)operator new(12 * v108);
    v103 = v39;
    v104 = (uint64_t *)((char *)v39 + 12 * v38);
    v105 = v104;
    v40 = v106;
    if (v106 == &v107)
      goto LABEL_76;
  }
  else
  {
    v39 = 0;
    v40 = v106;
    if (v106 == &v107)
      goto LABEL_76;
  }
  v41 = 0;
  do
  {
    v42 = *((unsigned int *)v40 + 7);
    if (a2[11] <= v42
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
    {
LABEL_156:
      abort();
    }
    v43 = a2[10] + v42;
    v44 = *(_QWORD *)(a2[7] + 8 * (v43 / 0x1F));
    v45 = v43 % 0x1F;
    if (*(_BYTE *)(v44 + 132 * v45 + 20))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_156;
      }
      v46 = a2[10] + v42;
      v45 = v46 % 0x1F;
      v44 = *(_QWORD *)(a2[7] + 8 * (v46 / 0x1F));
    }
    v47 = (uint64_t *)(v44 + 132 * v45);
    v48 = *v47;
    DWORD2(v109) = *((_DWORD *)v47 + 2);
    *(_QWORD *)&v109 = v48;
    sub_2235196C0((uint64_t)a2, (uint64_t)&v109, a3);
    v49 = (__int128 *)((char *)v39 + 12 * v41);
    if (v49 != &v109)
    {
      *(_QWORD *)v49 = v109;
      *((_DWORD *)v49 + 2) = DWORD2(v109);
    }
    v50 = v40[1];
    if (v50)
    {
      do
      {
        v51 = (uint64_t **)v50;
        v50 = (uint64_t *)*v50;
      }
      while (v50);
    }
    else
    {
      do
      {
        v51 = (uint64_t **)v40[2];
        v55 = *v51 == (uint64_t *)v40;
        v40 = v51;
      }
      while (!v55);
    }
    ++v41;
    v40 = v51;
  }
  while (v51 != &v107);
LABEL_76:
  v52 = (_QWORD *)*a5;
  if ((_QWORD *)*a5 != a5 + 1)
  {
    v53 = a4;
    do
    {
      v54 = *(_QWORD *)((char *)v52 + 25);
      v109 = xmmword_2246597A0;
      v55 = v54 == 0x580F634E2C70C937 && *(_QWORD *)((char *)v52 + 33) == 0xEEF6525C0A449C8;
      if (!v55)
      {
        v56 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 56))(v53);
        if (!v57
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/KeyframingAdaptorConnector.cpp", 78, (uint64_t)"blocks.has_value()", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v39 = v103;
        v58 = v104;
        if (v103 != v104)
        {
          v60 = v56 + 1;
          v59 = v56[1];
          if (v59)
          {
            v61 = v103;
LABEL_89:
            v63 = *(_DWORD *)v61;
            v62 = *((_DWORD *)v61 + 1);
            v64 = (uint64_t *)(v56 + 1);
            v65 = v59;
            v66 = *((_DWORD *)v61 + 2);
            do
            {
              v70 = *((_DWORD *)v65 + 7);
              v71 = v70 < v63;
              if (v70 == v63)
              {
                v72 = *((_DWORD *)v65 + 8);
                v71 = v72 < v62;
                if (v72 == v62)
                  v71 = *((_DWORD *)v65 + 9) < v66;
              }
              v67 = v71;
              v68 = v67 == 0;
              if (v67)
                v69 = (uint64_t **)(v65 + 1);
              else
                v69 = (uint64_t **)v65;
              if (v68)
                v64 = v65;
              v65 = *v69;
            }
            while (*v69);
            if (v64 != (uint64_t *)v60)
            {
              v73 = *((_DWORD *)v64 + 7);
              v74 = v63 < v73;
              if (v63 == v73)
              {
                v75 = *((_DWORD *)v64 + 8);
                v74 = v62 < v75;
                if (v62 == v75)
                  v74 = v66 < *((_DWORD *)v64 + 9);
              }
              if (!v74)
              {
                v76 = (uint64_t *)v64[1];
                v77 = v64;
                if (v76)
                {
                  do
                  {
                    v78 = v76;
                    v76 = (uint64_t *)*v76;
                  }
                  while (v76);
                }
                else
                {
                  do
                  {
                    v78 = (uint64_t *)v77[2];
                    v55 = *v78 == (_QWORD)v77;
                    v77 = v78;
                  }
                  while (!v55);
                }
                if (*v56 == v64)
                  *v56 = v78;
                v56[2] = (uint64_t *)((char *)v56[2] - 1);
                sub_2231AFE60(v59, v64);
                operator delete(v64);
              }
            }
            while (1)
            {
              v61 = (uint64_t *)((char *)v61 + 12);
              if (v61 == v58)
                break;
              v59 = *v60;
              if (*v60)
                goto LABEL_89;
            }
            v53 = a4;
          }
        }
      }
      v79 = (_QWORD *)v52[1];
      if (v79)
      {
        do
        {
          v80 = v79;
          v79 = (_QWORD *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          v80 = (_QWORD *)v52[2];
          v55 = *v80 == (_QWORD)v52;
          v52 = v80;
        }
        while (!v55);
      }
      v52 = v80;
    }
    while (v80 != a5 + 1);
  }
  *(_QWORD *)&v109 = "cv3d.recon.";
  *((_QWORD *)&v109 + 1) = 11;
  *(_QWORD *)&v110 = "Stats.Volumetric.VBEraser";
  *((_QWORD *)&v110 + 1) = 25;
  sub_2231A9820((uint64_t)&v109, (uint64_t)v111, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v81 = sub_2241471F8();
    v82 = v81[2];
    if (!v82)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v82 = v81[2];
    }
    v83 = *(_QWORD *)(v82 + 64);
    v84 = (std::mutex *)(v83 + 32);
    std::mutex::lock((std::mutex *)(v83 + 32));
    v86 = *(_QWORD *)(v83 + 96);
    v85 = *(_QWORD *)(v83 + 104);
    std::mutex::unlock(v84);
    if (v86 != v85)
    {
      sub_2241471F8();
      v87 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 24))(v87))
      {
        v109 = 0u;
        v110 = 0u;
        v111[0] = 728325608;
        kdebug_trace();
        v101 = v108;
        sub_223875C34((double *)&qword_255788F20, v87, (uint64_t *)&v101, "post_integration");
        kdebug_trace();
      }
    }
  }
  v109 = 0u;
  v110 = 0u;
  v111[0] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v90 = p_p->__r_.__value_.__r.__words[0];
    v91 = p_p->__r_.__value_.__l.__size_;
    v92 = p_p->__r_.__value_.__s.__data_[16];
    if (v90 == 0x6365722E64337663 && v91 == 0x73746174532E6E6FLL && v92 == 46)
    {
      v95 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v96 = &__p;
      else
        v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v97 = __p.__r_.__value_.__l.__size_;
      v101 = v108;
      sub_22318760C((uint64_t *)v95, v96, v97, (uint64_t *)&v101, (uint64_t)"post_integration", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kdebug_trace();
  if (v39)
  {
    v104 = v39;
    operator delete(v39);
  }
  sub_223198030((uint64_t)&v106, v107);
}

void sub_223A3A638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A3A6EC(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t **a7, uint64_t **a8, uint64_t **a9, uint64_t a10)
{
  float32x4_t v13;
  float32x4_t v14;
  unsigned __int8 v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t **v40;
  uint64_t **v41;
  unsigned int v42;
  uint64_t **v43;
  unsigned int v44;
  BOOL v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int8 **v54;
  int v55;
  _QWORD *v56;
  unsigned __int8 *i;
  unsigned __int8 *j;
  unsigned __int8 *k;
  unsigned __int8 *v60;
  float32x2_t v61;
  int32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x2_t v65;
  int8x16_t v66;
  uint64_t **v67;
  unsigned int v68;
  unsigned int v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  unint64_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  __int128 v91;
  int32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  __int128 v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  float32x4_t v100;
  float32x2_t v101;
  float32x2_t v102;
  double v103;
  float32x2_t v104;
  float32x4_t v105;
  uint64_t v106;
  float v107;
  uint64_t v108;
  int v109;
  __int16 v110;
  __int128 v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  BOOL v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  float32x2_t v148;
  float32x2_t v149;
  float32x2_t v150;
  int8x16_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x2_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  float32x4_t v170;
  float32x2_t v171;
  float32x2_t v172;
  double v173;
  float32x2_t v174;
  float32x4_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int8 v187;
  __int8 v188;
  __int8 v189;
  __int8 v190;
  __int8 v191;
  __int8 v192;
  __int8 v193;
  __int8 v194;
  __int8 v195;
  __int8 v196;
  __int8 v197;
  __int8 v198;
  __int8 v199;
  __int8 v200;
  __int8 v201;
  __int8 v202;
  __int8 v203;
  __int8 v204;
  __int8 v205;
  __int8 v206;
  __int8 v207;
  __int8 v208;
  __int8 v209;
  __int8 v210;
  __int8 v211;
  __int8 v212;
  __int8 v213;
  __int8 v214;
  __int8 v215;
  __int8 v216;
  __int8 v217;
  __int8 v218;
  __int8 v219;
  __int8 v220;
  __int8 v221;
  __int8 v222;
  __int8 v223;
  __int8 v224;
  __int8 v225;
  __int8 v226;
  __int8 v227;
  __int8 v228;
  __int8 v229;
  __int8 v230;
  __int8 v231;
  __int8 v232;
  __int8 v233;
  __int8 v234;
  __int8 v235;
  __int8 v236;
  __int8 v237;
  __int8 v238;
  __int8 v239;
  __int8 v240;
  __int8 v241;
  __int8 v242;
  __int8 v243;
  __int8 v244;
  __int8 v245;
  __int8 v246;
  __int8 v247;
  __int8 v248;
  __int8 v249;
  unsigned __int8 v250;
  float32x4_t *v251;
  int v252;
  int32x2_t *v253;
  uint64_t v255;
  uint64_t v257;
  uint64_t v258;
  uint64_t v261;
  __int128 *v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  _BYTE v266[64];
  char v267;
  uint64_t v268;

  v268 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (*(_QWORD *)(a10 + 16)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/KeyframingAdaptorConnector.cpp", 96, (uint64_t)"integration_keyframes.empty()", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v253 = (int32x2_t *)(a3 + 205);
  v251 = (float32x4_t *)(a3 + 170);
  v15 = *((_BYTE *)a3 + 1848);
  v252 = v15;
  if (v15)
  {
    if (*((_BYTE *)a3 + 1768))
    {
      v16.i32[0] = *((_DWORD *)a3 + 412);
      v17 = (float32x2_t)a3[207];
      v18 = (float32x2_t)a3[209];
      v13.i32[0] = *((_DWORD *)a3 + 420);
      v14.i64[0] = (uint64_t)a3[211];
      v14.i32[2] = *((_DWORD *)a3 + 424);
      v19 = (int8x16_t)vnegq_f32(v14);
      v20 = *((float32x4_t *)a3 + 85);
      v21 = vmulq_n_f32(v20, v16.f32[0]);
      v16.i32[1] = *((_DWORD *)a3 + 416);
      v22 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v253, (int32x2_t)v17), *(float *)v19.i32), (float32x2_t)vzip2_s32(*v253, (int32x2_t)v17), *(float32x2_t *)v14.f32, 1), v16, v14, 2);
      v16.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v18, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v18, 1), *(float32x2_t *)v14.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), *(float32x2_t *)v13.f32).u32[0];
      v23 = *((float32x4_t *)a3 + 86);
      v24 = *((float32x4_t *)a3 + 87);
      v25 = *((float32x4_t *)a3 + 88);
      v26 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v20, COERCE_FLOAT(*v253)), v23, v17.f32[0]), v24, v18.f32[0]), (float32x4_t)0, v25);
      v27 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v20, (float32x2_t)*v253, 1), v23, v17, 1), v24, v18, 1), (float32x4_t)0, v25);
      v28 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v21, v23, v16.f32[1]), v24, v13.f32[0]), (float32x4_t)0, v25);
      v29 = vaddq_f32(v25, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v22.f32[0]), v23, v22, 1), v24, v16.f32[0]));
      v14 = *(float32x4_t *)(a3 + 219);
      v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a3 + 213))), v27, (float32x2_t)a3[213], 1), v28, *(float32x4_t *)(a3 + 213), 2), v29, *(float32x4_t *)(a3 + 213), 3);
      v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a3 + 215))), v27, (float32x2_t)a3[215], 1), v28, *(float32x4_t *)(a3 + 215), 2), v29, *(float32x4_t *)(a3 + 215), 3);
      v31 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a3 + 217))), v27, (float32x2_t)a3[217], 1), v28, *(float32x4_t *)(a3 + 217), 2), v29, *(float32x4_t *)(a3 + 217), 3);
      v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, v14.f32[0]), v27, *(float32x2_t *)v14.f32, 1), v28, v14, 2), v29, v14, 3);
    }
    else
    {
      v31 = *((float32x4_t *)a3 + 87);
      v32 = *((float32x4_t *)a3 + 88);
      v13 = *v251;
      v30 = *((float32x4_t *)a3 + 86);
    }
    v15 = v13.i8[0];
    v235 = v13.i8[15];
    v236 = v13.i8[14];
    v237 = v13.i8[13];
    v238 = v13.i8[12];
    v239 = v13.i8[11];
    v240 = v13.i8[10];
    v241 = v13.i8[9];
    v242 = v13.i8[8];
    v243 = v13.i8[7];
    v244 = v13.i8[6];
    v245 = v13.i8[5];
    v246 = v13.i8[4];
    v247 = v13.i8[3];
    v248 = v13.i8[2];
    v249 = v13.i8[1];
    v219 = v30.i8[15];
    v220 = v30.i8[14];
    v221 = v30.i8[13];
    v222 = v30.i8[12];
    v223 = v30.i8[11];
    v224 = v30.i8[10];
    v225 = v30.i8[9];
    v226 = v30.i8[8];
    v227 = v30.i8[7];
    v228 = v30.i8[6];
    v229 = v30.i8[5];
    v230 = v30.i8[4];
    v231 = v30.i8[3];
    v232 = v30.i8[2];
    v233 = v30.i8[1];
    v234 = v30.i8[0];
    v203 = v31.i8[15];
    v204 = v31.i8[14];
    v205 = v31.i8[13];
    v206 = v31.i8[12];
    v207 = v31.i8[11];
    v208 = v31.i8[10];
    v209 = v31.i8[9];
    v210 = v31.i8[8];
    v211 = v31.i8[7];
    v212 = v31.i8[6];
    v213 = v31.i8[5];
    v214 = v31.i8[4];
    v215 = v31.i8[3];
    v216 = v31.i8[2];
    v217 = v31.i8[1];
    v218 = v31.i8[0];
    v187 = v32.i8[15];
    v188 = v32.i8[14];
    v189 = v32.i8[13];
    v190 = v32.i8[12];
    v191 = v32.i8[11];
    v192 = v32.i8[10];
    v193 = v32.i8[9];
    v194 = v32.i8[8];
    v195 = v32.i8[7];
    v196 = v32.i8[6];
    v197 = v32.i8[5];
    v198 = v32.i8[4];
    v199 = v32.i8[3];
    v200 = v32.i8[2];
    v201 = v32.i8[1];
    v202 = v32.i8[0];
    v33 = (int8x16_t *)*a3;
    v34 = a3[1];
    if (*a3 != v34)
      goto LABEL_17;
  }
  else
  {
    v33 = (int8x16_t *)*a3;
    v34 = a3[1];
    if (*a3 != v34)
    {
LABEL_17:
      v250 = v15;
      v257 = 0;
      v258 = 0;
      v35 = 0;
      v255 = a1;
      while (1)
      {
        v41 = *(uint64_t ***)(a5 + 8);
        if (!v41)
          goto LABEL_19;
        v42 = v33->u8[0];
        v43 = *(uint64_t ***)(a5 + 8);
        while (1)
        {
          v44 = *((unsigned __int8 *)v43 + 32);
          v45 = v42 >= v44;
          if (v42 != v44)
          {
            v46 = v33->u8[0];
LABEL_56:
            if (!v45)
              goto LABEL_24;
            goto LABEL_22;
          }
          v46 = v33->u8[1];
          v44 = *((unsigned __int8 *)v43 + 33);
          v45 = v46 >= v44;
          if (v46 != v44)
            goto LABEL_56;
          v46 = v33->u8[2];
          v44 = *((unsigned __int8 *)v43 + 34);
          v45 = v46 >= v44;
          if (v46 != v44)
            goto LABEL_56;
          v46 = v33->u8[3];
          v44 = *((unsigned __int8 *)v43 + 35);
          v45 = v46 >= v44;
          if (v46 != v44)
            goto LABEL_56;
          v47 = v33->u8[4];
          v48 = *((unsigned __int8 *)v43 + 36);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[5];
          v48 = *((unsigned __int8 *)v43 + 37);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[6];
          v48 = *((unsigned __int8 *)v43 + 38);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[7];
          v48 = *((unsigned __int8 *)v43 + 39);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[8];
          v48 = *((unsigned __int8 *)v43 + 40);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[9];
          v48 = *((unsigned __int8 *)v43 + 41);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[10];
          v48 = *((unsigned __int8 *)v43 + 42);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[11];
          v48 = *((unsigned __int8 *)v43 + 43);
          if (v47 != v48)
            goto LABEL_41;
          v47 = v33->u8[12];
          v48 = *((unsigned __int8 *)v43 + 44);
          if (v47 != v48
            || (v47 = v33->u8[13], v48 = *((unsigned __int8 *)v43 + 45), v47 != v48)
            || (v47 = v33->u8[14], v48 = *((unsigned __int8 *)v43 + 46), v47 != v48)
            || (v47 = v33->u8[15], v48 = *((unsigned __int8 *)v43 + 47), v47 != v48))
          {
LABEL_41:
            if (v47 < v48)
              goto LABEL_24;
          }
          v44 = *((unsigned __int8 *)v43 + 36);
          v46 = v33->u8[4];
          if (v44 == v46)
          {
            v44 = *((unsigned __int8 *)v43 + 37);
            v46 = v33->u8[5];
            if (v44 == v46)
            {
              v44 = *((unsigned __int8 *)v43 + 38);
              v46 = v33->u8[6];
              if (v44 == v46)
              {
                v44 = *((unsigned __int8 *)v43 + 39);
                v46 = v33->u8[7];
                if (v44 == v46)
                {
                  v44 = *((unsigned __int8 *)v43 + 40);
                  v46 = v33->u8[8];
                  if (v44 == v46)
                  {
                    v44 = *((unsigned __int8 *)v43 + 41);
                    v46 = v33->u8[9];
                    if (v44 == v46)
                    {
                      v44 = *((unsigned __int8 *)v43 + 42);
                      v46 = v33->u8[10];
                      if (v44 == v46)
                      {
                        v44 = *((unsigned __int8 *)v43 + 43);
                        v46 = v33->u8[11];
                        if (v44 == v46)
                        {
                          v44 = *((unsigned __int8 *)v43 + 44);
                          v46 = v33->u8[12];
                          if (v44 == v46)
                          {
                            v44 = *((unsigned __int8 *)v43 + 45);
                            v46 = v33->u8[13];
                            if (v44 == v46)
                            {
                              v44 = *((unsigned __int8 *)v43 + 46);
                              v46 = v33->u8[14];
                              if (v44 == v46)
                              {
                                v44 = *((unsigned __int8 *)v43 + 47);
                                v46 = v33->u8[15];
                                if (v44 == v46)
                                  break;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_22:
          if (v44 >= v46)
            break;
          ++v43;
LABEL_24:
          v43 = (uint64_t **)*v43;
          if (!v43)
            goto LABEL_19;
        }
        while (1)
        {
          v49 = *((unsigned __int8 *)v41 + 32);
          v50 = v42 >= v49;
          if (v42 == v49)
            break;
          v51 = v33->u8[0];
LABEL_90:
          if (v50)
          {
LABEL_92:
            if (v49 >= v51)
              goto LABEL_95;
            v41 = (uint64_t **)v41[1];
            if (!v41)
LABEL_308:
              sub_223198218("map::at:  key not found");
          }
          else
          {
LABEL_58:
            v41 = (uint64_t **)*v41;
            if (!v41)
              goto LABEL_308;
          }
        }
        v51 = v33->u8[1];
        v49 = *((unsigned __int8 *)v41 + 33);
        v50 = v51 >= v49;
        if (v51 != v49)
          goto LABEL_90;
        v51 = v33->u8[2];
        v49 = *((unsigned __int8 *)v41 + 34);
        v50 = v51 >= v49;
        if (v51 != v49)
          goto LABEL_90;
        v51 = v33->u8[3];
        v49 = *((unsigned __int8 *)v41 + 35);
        v50 = v51 >= v49;
        if (v51 != v49)
          goto LABEL_90;
        v52 = v33->u8[4];
        v53 = *((unsigned __int8 *)v41 + 36);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[5];
        v53 = *((unsigned __int8 *)v41 + 37);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[6];
        v53 = *((unsigned __int8 *)v41 + 38);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[7];
        v53 = *((unsigned __int8 *)v41 + 39);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[8];
        v53 = *((unsigned __int8 *)v41 + 40);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[9];
        v53 = *((unsigned __int8 *)v41 + 41);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[10];
        v53 = *((unsigned __int8 *)v41 + 42);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[11];
        v53 = *((unsigned __int8 *)v41 + 43);
        if (v52 != v53)
          goto LABEL_75;
        v52 = v33->u8[12];
        v53 = *((unsigned __int8 *)v41 + 44);
        if (v52 != v53
          || (v52 = v33->u8[13], v53 = *((unsigned __int8 *)v41 + 45), v52 != v53)
          || (v52 = v33->u8[14], v53 = *((unsigned __int8 *)v41 + 46), v52 != v53)
          || (v52 = v33->u8[15], v53 = *((unsigned __int8 *)v41 + 47), v52 != v53))
        {
LABEL_75:
          if (v52 < v53)
            goto LABEL_58;
        }
        v49 = *((unsigned __int8 *)v41 + 36);
        v51 = v33->u8[4];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 37);
        v51 = v33->u8[5];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 38);
        v51 = v33->u8[6];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 39);
        v51 = v33->u8[7];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 40);
        v51 = v33->u8[8];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 41);
        v51 = v33->u8[9];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 42);
        v51 = v33->u8[10];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 43);
        v51 = v33->u8[11];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 44);
        v51 = v33->u8[12];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 45);
        v51 = v33->u8[13];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 46);
        v51 = v33->u8[14];
        if (v49 != v51)
          goto LABEL_92;
        v49 = *((unsigned __int8 *)v41 + 47);
        v51 = v33->u8[15];
        if (v49 != v51)
          goto LABEL_92;
LABEL_95:
        v261 = v35;
        v54 = a3;
        v55 = *((unsigned __int8 *)a3 + 1952);
        v56 = *(_QWORD **)(a2 + 120);
        for (i = (unsigned __int8 *)v56[18]; i; i = *(unsigned __int8 **)i)
        {
          if (((char)sub_22319835C((unsigned __int8 *)v33, i + 25) & 0x80000000) == 0)
          {
            if (((char)sub_22319835C(i + 25, (unsigned __int8 *)v33) & 0x80000000) == 0)
              goto LABEL_113;
            i += 8;
          }
        }
        for (j = (unsigned __int8 *)v56[24]; j; j = *(unsigned __int8 **)j)
        {
          if (((char)sub_22319835C((unsigned __int8 *)v33, j + 25) & 0x80000000) == 0)
          {
            if (((char)sub_22319835C(j + 25, (unsigned __int8 *)v33) & 0x80000000) == 0)
              goto LABEL_113;
            j += 8;
          }
        }
        for (k = (unsigned __int8 *)v56[27]; k; k = *(unsigned __int8 **)k)
        {
          if (((char)sub_22319835C((unsigned __int8 *)v33, k + 25) & 0x80000000) == 0)
          {
            if (((char)sub_22319835C(k + 25, (unsigned __int8 *)v33) & 0x80000000) == 0)
              goto LABEL_113;
            k += 8;
          }
        }
        v60 = (unsigned __int8 *)v56[21];
        if (!v60)
          goto LABEL_157;
        a3 = v54;
        while (2)
        {
          if ((char)sub_22319835C((unsigned __int8 *)v33, v60 + 25) < 0)
            goto LABEL_152;
          if ((char)sub_22319835C(v60 + 25, (unsigned __int8 *)v33) < 0)
          {
            v60 += 8;
LABEL_152:
            v60 = *(unsigned __int8 **)v60;
            if (!v60)
              goto LABEL_18;
            continue;
          }
          break;
        }
        if (v55 == 1)
        {
LABEL_18:
          v35 = v261;
          goto LABEL_19;
        }
        if (*(_BYTE *)(a1 + 8))
        {
LABEL_157:
          v35 = v261;
          goto LABEL_168;
        }
LABEL_113:
        v62.i64[0] = v33[11].i64[0];
        v62.i32[2] = v33[11].i32[2];
        v63.i64[0] = v33[12].i64[0];
        v63.i32[2] = v33[12].i32[2];
        v65 = *(float32x2_t *)v33[13].i8;
        v64.i64[0] = v33[14].i64[0];
        v64.i32[2] = v33[14].i32[2];
        v66 = v33[4];
        v67 = *(uint64_t ***)(a6 + 8);
        if (!v67)
        {
LABEL_158:
          v74 = 0;
          v75.i64[0] = vzip1q_s32(v62, v63).u64[0];
          v76 = (int8x16_t)vnegq_f32(v64);
          v75.i64[1] = v65.u32[0];
          v77 = (int8x16_t)vtrn2q_s32(v62, v63);
          v77.i32[2] = HIDWORD(v33[13].i64[0]);
          v78 = (float32x4_t)vzip2q_s32(v62, v63);
          *(float32x2_t *)v79.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v75.f32, *(float *)v76.i32), *(float32x2_t *)v77.i8, *(float32x2_t *)v64.f32, 1), *(float32x2_t *)v78.f32, v64, 2);
          v78.i32[2] = v33[13].i32[2];
          v61.i32[0] = v78.i32[2];
          v79.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v65, *(float32x2_t *)v76.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1), *(float32x2_t *)v64.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), v61).u32[0]);
          v80.i32[3] = 0;
          v80.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v77, 0).i32[3];
          *(uint64_t *)((char *)v80.i64 + 4) = vextq_s8(v77, v66, 4uLL).u64[0];
          v78.i64[1] = vdupq_laneq_s32((int32x4_t)v78, 2).u32[0];
          v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v75, COERCE_FLOAT(*(_OWORD *)&v33[7])), v80, *(float32x2_t *)v33[7].i8, 1), v78, (float32x4_t)v33[7], 2), v79, (float32x4_t)v33[7], 3);
          v82 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v75, COERCE_FLOAT(*(_OWORD *)&v33[8])), v80, *(float32x2_t *)v33[8].i8, 1), v78, (float32x4_t)v33[8], 2), v79, (float32x4_t)v33[8], 3);
          v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v75, COERCE_FLOAT(*(_OWORD *)&v33[9])), v80, *(float32x2_t *)v33[9].i8, 1), v78, (float32x4_t)v33[9], 2), v79, (float32x4_t)v33[9], 3);
          v84 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v75, COERCE_FLOAT(*(_OWORD *)&v33[10])), v80, *(float32x2_t *)v33[10].i8, 1), v78, (float32x4_t)v33[10], 2), v79, (float32x4_t)v33[10], 3);
          v85 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, COERCE_FLOAT(*(_OWORD *)&v33[5])), v82, *(float32x2_t *)v33[5].i8, 1), v83, (float32x4_t)v33[5], 2), v84, (float32x4_t)v33[5], 3);
          v86 = v85.i64[1];
          v87 = v85.i64[0] ^ 0x8000000080000000;
          v88 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, COERCE_FLOAT(*(_OWORD *)&v33[2])), v82, *(float32x2_t *)v33[2].i8, 1), v83, (float32x4_t)v33[2], 2), v84, (float32x4_t)v33[2], 3);
          v89 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, COERCE_FLOAT(*(_OWORD *)&v33[3])), v82, *(float32x2_t *)v33[3].i8, 1), v83, (float32x4_t)v33[3], 2), v84, (float32x4_t)v33[3], 3);
          v90 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, *(float *)v66.i32), v82, *(float32x2_t *)v66.i8, 1), v83, (float32x4_t)v66, 2), v84, (float32x4_t)v66, 3);
          *(_QWORD *)&v91 = vzip1q_s32(v88, v89).u64[0];
          *((_QWORD *)&v91 + 1) = v90.u32[0];
          v92 = vtrn2q_s32(v88, v89);
          v93 = (int8x16_t)v92;
          v93.i32[2] = v90.i32[1];
          v94 = (int8x16_t)vzip2q_s32(v88, v89);
          *(float32x2_t *)v84.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)&v91, *(float *)&v87), *(float32x2_t *)v92.i8, (float32x2_t)v87, 1), *(float32x2_t *)v94.i8, COERCE_FLOAT(v86 ^ 0x80000000));
          v94.i32[2] = v90.i32[2];
          v92.i32[0] = vdupq_laneq_s32((int32x4_t)v94, 2).u32[0];
          v84.i64[1] = __PAIR64__(1.0, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v90.i8, (float32x2_t)v87), (float32x2_t)vdup_lane_s32((int32x2_t)v87, 1), *(float32x2_t *)v90.i8, 1), (float32x2_t)(v86 ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)).u32[0]);
          v90.i32[0] = v93.i32[0];
          v95 = vextq_s8(vextq_s8(v93, v93, 0xCuLL), v94, 8uLL);
          v90.i32[1] = v95.i32[0];
          v90.i64[1] = v95.u32[1];
          *(_QWORD *)&v96 = v95.i64[1];
          *((_QWORD *)&v96 + 1) = v92.u32[0];
          *(_OWORD *)v266 = v91;
          *(int8x16_t *)&v266[16] = v90;
          *(_OWORD *)&v266[32] = v96;
          *(float32x4_t *)&v266[48] = v84;
          goto LABEL_159;
        }
        v68 = v33->u8[0];
        while (2)
        {
          v69 = *((unsigned __int8 *)v67 + 25);
          v70 = v68 >= v69;
          if (v68 != v69)
          {
            v71 = v33->u8[0];
LABEL_147:
            if (v70)
            {
LABEL_149:
              if (v69 >= v71)
                goto LABEL_164;
              ++v67;
            }
LABEL_115:
            v67 = (uint64_t **)*v67;
            if (!v67)
              goto LABEL_158;
            continue;
          }
          break;
        }
        v71 = v33->u8[1];
        v69 = *((unsigned __int8 *)v67 + 26);
        v70 = v71 >= v69;
        if (v71 != v69)
          goto LABEL_147;
        v71 = v33->u8[2];
        v69 = *((unsigned __int8 *)v67 + 27);
        v70 = v71 >= v69;
        if (v71 != v69)
          goto LABEL_147;
        v71 = v33->u8[3];
        v69 = *((unsigned __int8 *)v67 + 28);
        v70 = v71 >= v69;
        if (v71 != v69)
          goto LABEL_147;
        v72 = v33->u8[4];
        v73 = *((unsigned __int8 *)v67 + 29);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[5];
        v73 = *((unsigned __int8 *)v67 + 30);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[6];
        v73 = *((unsigned __int8 *)v67 + 31);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[7];
        v73 = *((unsigned __int8 *)v67 + 32);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[8];
        v73 = *((unsigned __int8 *)v67 + 33);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[9];
        v73 = *((unsigned __int8 *)v67 + 34);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[10];
        v73 = *((unsigned __int8 *)v67 + 35);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[11];
        v73 = *((unsigned __int8 *)v67 + 36);
        if (v72 != v73)
          goto LABEL_132;
        v72 = v33->u8[12];
        v73 = *((unsigned __int8 *)v67 + 37);
        if (v72 != v73
          || (v72 = v33->u8[13], v73 = *((unsigned __int8 *)v67 + 38), v72 != v73)
          || (v72 = v33->u8[14], v73 = *((unsigned __int8 *)v67 + 39), v72 != v73)
          || (v72 = v33->u8[15], v73 = *((unsigned __int8 *)v67 + 40), v72 != v73))
        {
LABEL_132:
          if (v72 < v73)
            goto LABEL_115;
        }
        v69 = *((unsigned __int8 *)v67 + 29);
        v71 = v33->u8[4];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 30);
        v71 = v33->u8[5];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 31);
        v71 = v33->u8[6];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 32);
        v71 = v33->u8[7];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 33);
        v71 = v33->u8[8];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 34);
        v71 = v33->u8[9];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 35);
        v71 = v33->u8[10];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 36);
        v71 = v33->u8[11];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 37);
        v71 = v33->u8[12];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 38);
        v71 = v33->u8[13];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 39);
        v71 = v33->u8[14];
        if (v69 != v71)
          goto LABEL_149;
        v69 = *((unsigned __int8 *)v67 + 40);
        v71 = v33->u8[15];
        if (v69 != v71)
          goto LABEL_149;
LABEL_164:
        v266[0] = 0;
        v267 = 0;
        if (v252)
        {
          LOBYTE(v108) = v201;
          BYTE1(v108) = v200;
          BYTE2(v108) = v199;
          BYTE3(v108) = v198;
          BYTE4(v108) = v197;
          BYTE5(v108) = v196;
          BYTE6(v108) = v195;
          HIBYTE(v108) = v194;
          LOBYTE(v109) = v193;
          BYTE1(v109) = v192;
          BYTE2(v109) = v191;
          HIBYTE(v109) = v190;
          LOBYTE(v110) = v189;
          HIBYTE(v110) = v188;
          v266[0] = v250;
          *(_WORD *)&v266[61] = v110;
          *(_DWORD *)&v266[57] = v109;
          LOBYTE(v111) = v249;
          BYTE1(v111) = v248;
          BYTE2(v111) = v247;
          BYTE3(v111) = v246;
          BYTE4(v111) = v245;
          BYTE5(v111) = v244;
          BYTE6(v111) = v243;
          BYTE7(v111) = v242;
          BYTE8(v111) = v241;
          BYTE9(v111) = v240;
          BYTE10(v111) = v239;
          BYTE11(v111) = v238;
          BYTE12(v111) = v237;
          BYTE13(v111) = v236;
          BYTE14(v111) = v235;
          HIBYTE(v111) = v234;
          *(_OWORD *)&v266[1] = v111;
          LOBYTE(v111) = v233;
          BYTE1(v111) = v232;
          BYTE2(v111) = v231;
          BYTE3(v111) = v230;
          BYTE4(v111) = v229;
          BYTE5(v111) = v228;
          BYTE6(v111) = v227;
          BYTE7(v111) = v226;
          BYTE8(v111) = v225;
          BYTE9(v111) = v224;
          BYTE10(v111) = v223;
          BYTE11(v111) = v222;
          BYTE12(v111) = v221;
          BYTE13(v111) = v220;
          BYTE14(v111) = v219;
          HIBYTE(v111) = v218;
          *(_OWORD *)&v266[17] = v111;
          LOBYTE(v111) = v217;
          BYTE1(v111) = v216;
          BYTE2(v111) = v215;
          BYTE3(v111) = v214;
          BYTE4(v111) = v213;
          BYTE5(v111) = v212;
          BYTE6(v111) = v211;
          BYTE7(v111) = v210;
          BYTE8(v111) = v209;
          BYTE9(v111) = v208;
          BYTE10(v111) = v207;
          BYTE11(v111) = v206;
          BYTE12(v111) = v205;
          BYTE13(v111) = v204;
          BYTE14(v111) = v203;
          HIBYTE(v111) = v202;
          *(_OWORD *)&v266[33] = v111;
          v266[63] = v187;
          *(_QWORD *)&v266[49] = v108;
          v74 = 1;
LABEL_159:
          v267 = 1;
        }
        else
        {
          v74 = 1;
        }
        *(_QWORD *)&v265 = v33;
        v97 = sub_223A3C7C8(a7, (unsigned __int8 *)v33, (_OWORD **)&v265);
        *(_QWORD *)&v265 = v33;
        v98 = sub_223A3C7C8(a8, (unsigned __int8 *)v33, (_OWORD **)&v265);
        *(_QWORD *)&v265 = v33;
        v99 = sub_223A3C7C8(a9, (unsigned __int8 *)v33, (_OWORD **)&v265);
        if (v74)
        {
          v106 = v255;
          if (*(_BYTE *)(v255 + 24))
            v107 = *(float *)(v255 + 20);
          else
            v107 = 0.0;
        }
        else
        {
          v106 = v255;
          v107 = *(float *)(v255 + 16);
        }
        v100.i32[0] = *(_DWORD *)(v106 + 12);
        sub_223A3C054((uint64_t)(v41 + 6), (uint64_t)v266, v74, (uint64_t)(v97 + 6), (int32x2_t **)v98 + 6, (int32x2_t **)v99 + 6, v100, v107, v101, v102, v103, v104, v105);
        *(_QWORD *)&v265 = v33;
        v112 = sub_223A3C7C8(a7, (unsigned __int8 *)v33, (_OWORD **)&v265);
        v114 = v112[6];
        v113 = v112[7];
        *(_QWORD *)&v265 = v33;
        v115 = sub_223A3C7C8(a8, (unsigned __int8 *)v33, (_OWORD **)&v265);
        v117 = v115[6];
        v116 = v115[7];
        *(_QWORD *)&v265 = v33;
        v118 = sub_223A3C7C8(a9, (unsigned __int8 *)v33, (_OWORD **)&v265);
        v119 = v118[6];
        v120 = v118[7];
        sub_2231A9984((uint64_t **)a10, (unsigned __int8 *)v33, v33);
        v35 = v261 - 0x5555555555555555 * ((v116 - v117) >> 2);
        v257 -= 0x5555555555555555 * ((v113 - v114) >> 2);
        v258 -= 0x5555555555555555 * ((v120 - v119) >> 2);
        a1 = v255;
LABEL_168:
        a3 = v54;
LABEL_19:
        v33 = (int8x16_t *)((char *)v33 + 248);
        if (v33 == (int8x16_t *)v34)
          goto LABEL_8;
      }
    }
  }
  v257 = 0;
  v258 = 0;
  v35 = 0;
LABEL_8:
  v36 = v257;
  v37 = *(_QWORD *)(a2 + 120);
  v38 = v258;
  if (!*(_BYTE *)(v37 + 496)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 71, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_309;
  }
  if (!*(_BYTE *)(v37 + 368))
    goto LABEL_307;
  if (!*((_BYTE *)a3 + 1848)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/KeyframingAdaptorConnector.cpp", 153, (uint64_t)"keyframe_list.input_frame.has_value()", 37, (uint64_t)"Raw frame unavailable", 21, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_309;
  }
  v39 = *(uint64_t ***)(a5 + 8);
  if (v39)
  {
    v40 = *(uint64_t ***)(a5 + 8);
    while (1)
    {
      v122 = *((unsigned __int8 *)v40 + 32);
      v123 = v122 > 0x37;
      if (v122 != 55
        || (v124 = *((unsigned __int8 *)v40 + 33), v123 = v124 > 0xC9, v124 != 201)
        || (v125 = *((unsigned __int8 *)v40 + 34), v123 = v125 > 0x70, v125 != 112)
        || (v126 = *((unsigned __int8 *)v40 + 35), v123 = v126 > 0x2C, v126 != 44))
      {
        if (v123)
          goto LABEL_173;
        goto LABEL_172;
      }
      v127 = *((unsigned __int8 *)v40 + 36);
      if (v127 != 78)
      {
        v128 = 78;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 37);
      if (v127 != 99)
      {
        v128 = 99;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 38);
      if (v127 != 15)
      {
        v128 = 15;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 39);
      if (v127 != 88)
      {
        v128 = 88;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 40);
      if (v127 != 200)
      {
        v128 = 200;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 41);
      if (v127 != 73)
      {
        v128 = 73;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 42);
      if (v127 != 164)
      {
        v128 = 164;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 43);
      if (v127 != 192)
      {
        v128 = 192;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 44);
      if (v127 != 37)
      {
        v128 = 37;
        goto LABEL_205;
      }
      v127 = *((unsigned __int8 *)v40 + 45);
      if (v127 != 101)
        break;
      v127 = *((unsigned __int8 *)v40 + 46);
      if (v127 != 239)
      {
        v128 = 239;
LABEL_205:
        if (v128 < v127)
          goto LABEL_173;
        goto LABEL_206;
      }
      v127 = *((unsigned __int8 *)v40 + 47);
      if (v127 != 14)
      {
        v128 = 14;
        goto LABEL_205;
      }
LABEL_206:
      v129 = *((unsigned __int8 *)v40 + 36);
      if (v129 == 78)
      {
        v129 = *((unsigned __int8 *)v40 + 37);
        if (v129 == 99)
        {
          v129 = *((unsigned __int8 *)v40 + 38);
          if (v129 == 15)
          {
            v129 = *((unsigned __int8 *)v40 + 39);
            if (v129 == 88)
            {
              v129 = *((unsigned __int8 *)v40 + 40);
              if (v129 == 200)
              {
                v129 = *((unsigned __int8 *)v40 + 41);
                if (v129 == 73)
                {
                  v129 = *((unsigned __int8 *)v40 + 42);
                  if (v129 == 164)
                  {
                    v129 = *((unsigned __int8 *)v40 + 43);
                    if (v129 == 192)
                    {
                      v129 = *((unsigned __int8 *)v40 + 44);
                      if (v129 == 37)
                      {
                        v129 = *((unsigned __int8 *)v40 + 45);
                        if (v129 == 101)
                        {
                          v129 = *((unsigned __int8 *)v40 + 46);
                          if (v129 == 239)
                          {
                            v129 = *((unsigned __int8 *)v40 + 47);
                            if (v129 == 14)
                              goto LABEL_231;
                            v121 = 14;
                          }
                          else
                          {
                            v121 = 239;
                          }
                        }
                        else
                        {
                          v121 = 101;
                        }
                      }
                      else
                      {
                        v121 = 37;
                      }
                    }
                    else
                    {
                      v121 = 192;
                    }
                  }
                  else
                  {
                    v121 = 164;
                  }
                }
                else
                {
                  v121 = 73;
                }
              }
              else
              {
                v121 = 200;
              }
            }
            else
            {
              v121 = 88;
            }
          }
          else
          {
            v121 = 15;
          }
        }
        else
        {
          v121 = 99;
        }
      }
      else
      {
        v121 = 78;
      }
      if (v129 >= v121)
        goto LABEL_231;
LABEL_172:
      ++v40;
LABEL_173:
      v40 = (uint64_t **)*v40;
      if (!v40)
        goto LABEL_229;
    }
    v128 = 101;
    goto LABEL_205;
  }
LABEL_229:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/KeyframingAdaptorConnector.cpp", 155, (uint64_t)"kf_integration_blocks.count(RawframeId()) != 0", 46, (uint64_t)"No integration blocks for the frame", 35, (void (*)(void **))sub_22457406C))
  {
LABEL_309:
    abort();
  }
  v39 = *(uint64_t ***)(a5 + 8);
LABEL_231:
  if (!v39)
LABEL_232:
    sub_223198218("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v130 = *((unsigned __int8 *)v39 + 32);
      if (v130 != 55)
      {
        if (v130 < 0x38)
          goto LABEL_254;
        goto LABEL_233;
      }
      v131 = *((unsigned __int8 *)v39 + 33);
      v132 = v131 > 0xC9;
      if (v131 != 201
        || (v133 = *((unsigned __int8 *)v39 + 34), v132 = v133 > 0x70, v133 != 112)
        || (v134 = *((unsigned __int8 *)v39 + 35), v132 = v134 > 0x2C, v134 != 44))
      {
        if (!v132)
          goto LABEL_254;
        goto LABEL_233;
      }
      v135 = *((unsigned __int8 *)v39 + 36);
      if (v135 != 78)
        break;
      v136 = *((unsigned __int8 *)v39 + 37);
      if (v136 != 99)
      {
        if (v136 > 0x63)
          goto LABEL_233;
        goto LABEL_277;
      }
      v137 = *((unsigned __int8 *)v39 + 38);
      if (v137 != 15)
      {
        if (v137 > 0xF)
          goto LABEL_233;
        goto LABEL_277;
      }
      v138 = *((unsigned __int8 *)v39 + 39);
      if (v138 != 88)
      {
        if (v138 > 0x58)
          goto LABEL_233;
        goto LABEL_277;
      }
      v139 = *((unsigned __int8 *)v39 + 40);
      if (v139 != 200)
      {
        if (v139 > 0xC8)
          goto LABEL_233;
        goto LABEL_277;
      }
      v140 = *((unsigned __int8 *)v39 + 41);
      if (v140 != 73)
      {
        if (v140 > 0x49)
          goto LABEL_233;
        goto LABEL_277;
      }
      v141 = *((unsigned __int8 *)v39 + 42);
      if (v141 != 164)
      {
        if (v141 > 0xA4)
          goto LABEL_233;
        goto LABEL_277;
      }
      v142 = *((unsigned __int8 *)v39 + 43);
      if (v142 != 192)
      {
        if (v142 > 0xC0)
          goto LABEL_233;
        goto LABEL_277;
      }
      v143 = *((unsigned __int8 *)v39 + 44);
      if (v143 != 37)
      {
        if (v143 > 0x25)
          goto LABEL_233;
        goto LABEL_277;
      }
      v144 = *((unsigned __int8 *)v39 + 45);
      if (v144 != 101)
      {
        if (v144 > 0x65)
          goto LABEL_233;
        goto LABEL_277;
      }
      v145 = *((unsigned __int8 *)v39 + 46);
      if (v145 == 239)
      {
        if (*((unsigned __int8 *)v39 + 47) <= 0xEu)
          goto LABEL_277;
      }
      else if (v145 <= 0xEF)
      {
        goto LABEL_277;
      }
LABEL_233:
      v39 = (uint64_t **)*v39;
      if (!v39)
        goto LABEL_232;
    }
    if (v135 > 0x4E)
      goto LABEL_233;
LABEL_277:
    v146 = *((unsigned __int8 *)v39 + 36);
    if (v146 == 78)
    {
      v146 = *((unsigned __int8 *)v39 + 37);
      if (v146 == 99)
      {
        v146 = *((unsigned __int8 *)v39 + 38);
        if (v146 == 15)
        {
          v146 = *((unsigned __int8 *)v39 + 39);
          if (v146 == 88)
          {
            v146 = *((unsigned __int8 *)v39 + 40);
            if (v146 == 200)
            {
              v146 = *((unsigned __int8 *)v39 + 41);
              if (v146 == 73)
              {
                v146 = *((unsigned __int8 *)v39 + 42);
                if (v146 == 164)
                {
                  v146 = *((unsigned __int8 *)v39 + 43);
                  if (v146 == 192)
                  {
                    v146 = *((unsigned __int8 *)v39 + 44);
                    if (v146 == 37)
                    {
                      v146 = *((unsigned __int8 *)v39 + 45);
                      if (v146 == 101)
                      {
                        v146 = *((unsigned __int8 *)v39 + 46);
                        if (v146 == 239)
                        {
                          v146 = *((unsigned __int8 *)v39 + 47);
                          if (v146 == 14)
                            break;
                          v147 = 14;
                        }
                        else
                        {
                          v147 = 239;
                        }
                      }
                      else
                      {
                        v147 = 101;
                      }
                    }
                    else
                    {
                      v147 = 37;
                    }
                  }
                  else
                  {
                    v147 = 192;
                  }
                }
                else
                {
                  v147 = 164;
                }
              }
              else
              {
                v147 = 73;
              }
            }
            else
            {
              v147 = 200;
            }
          }
          else
          {
            v147 = 88;
          }
        }
        else
        {
          v147 = 15;
        }
      }
      else
      {
        v147 = 99;
      }
    }
    else
    {
      v147 = 78;
    }
    if (v146 >= v147)
      break;
LABEL_254:
    v39 = (uint64_t **)v39[1];
    if (!v39)
      goto LABEL_232;
  }
  if (!*((_BYTE *)a3 + 1848))
    sub_22324A974();
  if (*((_BYTE *)a3 + 1768))
  {
    v148.i32[0] = v253[1].i32[0];
    v149 = (float32x2_t)v253[2];
    v150 = (float32x2_t)v253[4];
    v13.i32[0] = v253[5].i32[0];
    *(int32x2_t *)v14.f32 = v253[6];
    v14.i32[2] = v253[7].i32[0];
    v151 = (int8x16_t)vnegq_f32(v14);
    v152 = *((float32x4_t *)a3 + 85);
    v153 = vmulq_n_f32(v152, v148.f32[0]);
    v148.i32[1] = v253[3].i32[0];
    v154 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v253, (int32x2_t)v149), *(float *)v151.i32), (float32x2_t)vzip2_s32(*v253, (int32x2_t)v149), *(float32x2_t *)v14.f32, 1), v148, v14, 2);
    v148.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v150, *(float32x2_t *)v151.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v150, 1), *(float32x2_t *)v14.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), *(float32x2_t *)v13.f32).u32[0];
    v155 = *((float32x4_t *)a3 + 86);
    v156 = *((float32x4_t *)a3 + 87);
    v157 = *((float32x4_t *)a3 + 88);
    v158 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v152, COERCE_FLOAT(*v253)), v155, v149.f32[0]), v156, v150.f32[0]), (float32x4_t)0, v157);
    v159 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v152, (float32x2_t)*v253, 1), v155, v149, 1), v156, v150, 1), (float32x4_t)0, v157);
    v160 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v153, v155, v148.f32[1]), v156, v13.f32[0]), (float32x4_t)0, v157);
    v161 = vaddq_f32(v157, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v152, v154.f32[0]), v155, v154, 1), v156, v148.f32[0]));
    v162 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v158, COERCE_FLOAT(*(_OWORD *)v253[8].i8)), v159, (float32x2_t)v253[8], 1), v160, *(float32x4_t *)v253[8].i8, 2), v161, *(float32x4_t *)v253[8].i8, 3);
    v163 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v158, COERCE_FLOAT(*(_OWORD *)v253[10].i8)), v159, (float32x2_t)v253[10], 1), v160, *(float32x4_t *)v253[10].i8, 2), v161, *(float32x4_t *)v253[10].i8, 3);
    v164 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v158, COERCE_FLOAT(*(_OWORD *)v253[12].i8)), v159, (float32x2_t)v253[12], 1), v160, *(float32x4_t *)v253[12].i8, 2), v161, *(float32x4_t *)v253[12].i8, 3);
    v165 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v158, COERCE_FLOAT(*(_OWORD *)v253[14].i8)), v159, (float32x2_t)v253[14], 1), v160, *(float32x4_t *)v253[14].i8, 2), v161, *(float32x4_t *)v253[14].i8, 3);
  }
  else
  {
    v164 = v251[2];
    v165 = v251[3];
    v162 = *v251;
    v163 = v251[1];
  }
  *(float32x4_t *)v266 = v162;
  *(float32x4_t *)&v266[16] = v163;
  *(float32x4_t *)&v266[32] = v164;
  *(float32x4_t *)&v266[48] = v165;
  v267 = 1;
  v265 = xmmword_2246597A0;
  *(_QWORD *)&v264 = &v265;
  v166 = sub_223A3C7C8(a7, (unsigned __int8 *)&v265, (_OWORD **)&v264);
  v264 = xmmword_2246597A0;
  *(_QWORD *)&v263 = &v264;
  v167 = sub_223A3C7C8(a8, (unsigned __int8 *)&v264, (_OWORD **)&v263);
  v168 = v35;
  v263 = xmmword_2246597A0;
  v262 = &v263;
  v169 = sub_223A3C7C8(a9, (unsigned __int8 *)&v263, &v262);
  v170.i32[0] = *(_DWORD *)(a1 + 12);
  sub_223A3C054((uint64_t)(v39 + 6), (uint64_t)v266, 0, (uint64_t)(v166 + 6), (int32x2_t **)v167 + 6, (int32x2_t **)v169 + 6, v170, *(float *)(a1 + 16), v171, v172, v173, v174, v175);
  *(_OWORD *)v266 = xmmword_2246597A0;
  *(_QWORD *)&v265 = v266;
  v176 = sub_223A3C7C8(a7, v266, (_OWORD **)&v265);
  v178 = v176[6];
  v177 = v176[7];
  *(_QWORD *)&v265 = v266;
  v179 = sub_223A3C7C8(a8, v266, (_OWORD **)&v265);
  v181 = v179[6];
  v180 = v179[7];
  *(_QWORD *)&v265 = v266;
  v182 = sub_223A3C7C8(a9, v266, (_OWORD **)&v265);
  v184 = v182[6];
  v183 = v182[7];
  sub_2231A9984((uint64_t **)a10, v266, v266);
  v36 = v257 - 0x5555555555555555 * ((v177 - v178) >> 2);
  v185 = v183 - v184;
  v35 = v168 - 0x5555555555555555 * ((v180 - v181) >> 2);
  v38 = v258 - 0x5555555555555555 * (v185 >> 2);
LABEL_307:
  sub_223A692E4((unsigned __int8 **)a10, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)a9, v36, v35, v38);
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  return kdebug_trace();
}

void sub_223A3BFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_2231874DC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_223A3C054(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int32x2_t **a5, int32x2_t **a6, float32x4_t a7, float a8, float32x2_t a9, float32x2_t a10, double a11, float32x2_t a12, float32x4_t a13)
{
  uint64_t v14;
  int v16;
  float32x2_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int32x2_t *v20;
  int32x2_t *v21;
  uint64_t v22;
  int32x2_t *v25;
  int32x2_t *v26;
  _DWORD *v27;
  _DWORD *v28;
  unint64_t v30;
  int32x2_t *v31;
  int32x2_t v32;
  float32x2_t v33;
  int8x16_t v34;
  float32x2_t v35;
  int32x2_t **v36;
  unint64_t v37;
  int32x2_t *v38;
  int32x2_t v39;
  int32x2_t *v40;
  int32x2_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  int32x2_t *v48;
  _DWORD *v49;
  int32x2_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  int32x2_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t v59;
  __int32 v60;
  int32x2_t *v61;
  int32x2_t v62;
  int32x2_t *v63;
  int32x2_t *v64;
  int32x2_t v65;
  __int32 v66;
  int32x2_t *v67;
  float32x4_t v69;
  int8x16_t v70;
  float32x2_t v71;
  int32x2_t **v72;
  unint64_t v73;
  int32x2_t *v74;
  int32x2_t v75;
  int32x2_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  int32x2_t v82;
  int32x2_t *v83;
  int32x2_t *v84;
  int32x2_t v85;
  __int32 v86;
  int32x2_t *v87;
  uint64_t v88;
  int32x2_t **v89;
  float32x4_t v90;
  unint64_t v91;
  uint64_t v92;
  int32x2_t **v93;

  v91 = a7.i64[0];
  v14 = a2;
  v92 = a4;
  v93 = a5;
  v16 = *(unsigned __int8 *)(a2 + 64);
  if (a3)
  {
    if (*(_BYTE *)(a2 + 64))
    {
      v17.i32[0] = *(_DWORD *)(a2 + 8);
      a12.i32[0] = *(_DWORD *)(a2 + 40);
      a13.i64[0] = *(_QWORD *)(a2 + 48);
      a13.i32[2] = *(_DWORD *)(a2 + 56);
      v18 = (int8x16_t)vnegq_f32(a13);
      v17.i32[1] = *(_DWORD *)(a2 + 24);
      *(float32x2_t *)v19.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a2, *(int32x2_t *)(a2 + 16)), *(float *)v18.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)a2, *(int32x2_t *)(a2 + 16)), *(float32x2_t *)a13.f32, 1), v17, a13, 2);
      *(float32x2_t *)&v19.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 32), *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 32), 1), *(float32x2_t *)a13.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), a12);
      v20 = *(int32x2_t **)a1;
      v21 = *(int32x2_t **)(a1 + 8);
      v22 = *(_QWORD *)(a1 + 24);
      v88 = *(_QWORD *)(a1 + 32);
      if (*(int32x2_t **)a1 != v21 || v22 != *(_QWORD *)(a1 + 32))
      {
LABEL_61:
        v69 = vnegq_f32(v19);
        v90 = v69;
        while (1)
        {
          while (!v16)
          {
            v72 = v93;
            v74 = v93[1];
            v73 = (unint64_t)v93[2];
            if ((unint64_t)v74 < v73)
              goto LABEL_64;
LABEL_67:
            v76 = *v72;
            v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)*v72) >> 2);
            v78 = v77 + 1;
            if (v77 + 1 > 0x1555555555555555)
              sub_22316E078();
            v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v76) >> 2);
            if (2 * v79 > v78)
              v78 = 2 * v79;
            if (v79 >= 0xAAAAAAAAAAAAAAALL)
              v80 = 0x1555555555555555;
            else
              v80 = v78;
            if (v80)
            {
              if (v80 > 0x1555555555555555)
                goto LABEL_85;
              v81 = (char *)operator new(12 * v80);
            }
            else
            {
              v81 = 0;
            }
            v82 = *v20;
            v83 = (int32x2_t *)&v81[12 * v77];
            v83[1].i32[0] = v20[1].i32[0];
            *v83 = v82;
            v84 = v83;
            if (v74 != v76)
            {
              do
              {
                v85 = *(int32x2_t *)((char *)v74 - 12);
                v74 = (int32x2_t *)((char *)v74 - 12);
                v86 = v74[1].i32[0];
                *(int32x2_t *)((char *)v84 - 12) = v85;
                v84 = (int32x2_t *)((char *)v84 - 12);
                v84[1].i32[0] = v86;
              }
              while (v74 != v76);
              v74 = *v72;
            }
            v87 = (int32x2_t *)((char *)v83 + 12);
            *v72 = v84;
            v72[1] = (int32x2_t *)((char *)v83 + 12);
            v72[2] = (int32x2_t *)&v81[12 * v80];
            if (v74)
              operator delete(v74);
            v72[1] = v87;
            v20 = (int32x2_t *)((char *)v20 + 12);
            v22 += 4;
            if (v20 == v21)
              goto LABEL_83;
          }
          *(float32x2_t *)v69.f32 = vcvt_f32_s32(vadd_s32(*v20, (int32x2_t)0x400000004));
          v69.f32[2] = (float)(v20[1].i32[0] + 4);
          v70 = (int8x16_t)vmlaq_n_f32(v90, v69, *(float *)&v91);
          v71 = (float32x2_t)vextq_s8(v70, v70, 8uLL).u64[0];
          v72 = (int32x2_t **)*(&v92
                              + (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1), *(float32x2_t *)v70.i8, 1), v71, v71).f32[0]) >= a8));
          v74 = v72[1];
          v73 = (unint64_t)v72[2];
          if ((unint64_t)v74 >= v73)
            goto LABEL_67;
LABEL_64:
          v75 = *v20;
          v74[1].i32[0] = v20[1].i32[0];
          *v74 = v75;
          v72[1] = (int32x2_t *)((char *)v74 + 12);
          v20 = (int32x2_t *)((char *)v20 + 12);
          v22 += 4;
          if (v20 == v21)
          {
LABEL_83:
            if (v22 == v88)
              return;
          }
        }
      }
    }
    else
    {
      v19 = 0uLL;
      v20 = *(int32x2_t **)a1;
      v21 = *(int32x2_t **)(a1 + 8);
      v22 = *(_QWORD *)(a1 + 24);
      v88 = *(_QWORD *)(a1 + 32);
      if (*(int32x2_t **)a1 != v21 || v22 != *(_QWORD *)(a1 + 32))
        goto LABEL_61;
    }
  }
  else
  {
    if (!*(_BYTE *)(a2 + 64)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/KeyframingAdaptorConnector.cpp", 202, (uint64_t)"tr_world_to_frame.has_value()", 29, (uint64_t)"Expect to have valid transformation.", 36, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v25 = *(int32x2_t **)a1;
    v26 = *(int32x2_t **)(a1 + 8);
    v27 = *(_DWORD **)(a1 + 24);
    v28 = *(_DWORD **)(a1 + 32);
    if (*(int32x2_t **)a1 != v26 || v27 != v28)
    {
      v89 = a6;
      do
      {
        if (*v27 == 2)
        {
          v31 = a6[1];
          v30 = (unint64_t)a6[2];
          if ((unint64_t)v31 >= v30)
          {
            v41 = *a6;
            v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)*a6) >> 2);
            v43 = v42 + 1;
            if (v42 + 1 > 0x1555555555555555)
              sub_22316E078();
            v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - (_QWORD)v41) >> 2);
            if (2 * v44 > v43)
              v43 = 2 * v44;
            if (v44 >= 0xAAAAAAAAAAAAAAALL)
              v45 = 0x1555555555555555;
            else
              v45 = v43;
            if (v45)
            {
              if (v45 > 0x1555555555555555)
                goto LABEL_85;
              v46 = (char *)operator new(12 * v45);
            }
            else
            {
              v46 = 0;
            }
            v56 = *v25;
            v57 = (int32x2_t *)&v46[12 * v42];
            v57[1].i32[0] = v25[1].i32[0];
            *v57 = v56;
            v58 = v57;
            if (v31 != v41)
            {
              do
              {
                v59 = *(int32x2_t *)((char *)v31 - 12);
                v31 = (int32x2_t *)((char *)v31 - 12);
                v60 = v31[1].i32[0];
                *(int32x2_t *)((char *)v58 - 12) = v59;
                v58 = (int32x2_t *)((char *)v58 - 12);
                v58[1].i32[0] = v60;
              }
              while (v31 != v41);
              v31 = *a6;
            }
            v61 = (int32x2_t *)((char *)v57 + 12);
            *a6 = v58;
            a6[1] = (int32x2_t *)((char *)v57 + 12);
            a6[2] = (int32x2_t *)&v46[12 * v45];
            if (v31)
              operator delete(v31);
            a6[1] = v61;
          }
          else
          {
            v32 = *v25;
            v31[1].i32[0] = v25[1].i32[0];
            *v31 = v32;
            a6[1] = (int32x2_t *)((char *)v31 + 12);
          }
        }
        else
        {
          *(float32x2_t *)a7.f32 = vcvt_f32_s32(vadd_s32(*v25, (int32x2_t)0x400000004));
          a7.f32[2] = (float)(v25[1].i32[0] + 4);
          v33.i32[1] = HIDWORD(v91);
          v34 = (int8x16_t)vmulq_n_f32(a7, *(float *)&v91);
          v33.i32[0] = *(_DWORD *)(v14 + 8);
          a9.i32[0] = *(_DWORD *)(v14 + 24);
          a10.i32[0] = *(_DWORD *)(v14 + 40);
          v35 = vmla_lane_f32(vmul_f32(v33, *(float32x2_t *)v34.i8), a9, *(float32x2_t *)v34.i8, 1);
          a7 = (float32x4_t)vextq_s8(v34, v34, 8uLL);
          v36 = (int32x2_t **)*(&v92
                              + ((float)(*(float *)(v14 + 56) + vmla_f32(v35, *(float32x2_t *)a7.f32, a10).f32[0]) >= a8));
          v38 = v36[1];
          v37 = (unint64_t)v36[2];
          if ((unint64_t)v38 >= v37)
          {
            v47 = v14;
            v48 = v26;
            v49 = v28;
            v50 = *v36;
            v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)*v36) >> 2);
            v52 = v51 + 1;
            if (v51 + 1 > 0x1555555555555555)
              sub_22316E078();
            v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v50) >> 2);
            if (2 * v53 > v52)
              v52 = 2 * v53;
            if (v53 >= 0xAAAAAAAAAAAAAAALL)
              v54 = 0x1555555555555555;
            else
              v54 = v52;
            if (v54)
            {
              if (v54 > 0x1555555555555555)
LABEL_85:
                sub_223174E94();
              v55 = (char *)operator new(12 * v54);
            }
            else
            {
              v55 = 0;
            }
            v62 = *v25;
            v63 = (int32x2_t *)&v55[12 * v51];
            v63[1].i32[0] = v25[1].i32[0];
            *v63 = v62;
            v64 = v63;
            if (v38 != v50)
            {
              do
              {
                v65 = *(int32x2_t *)((char *)v38 - 12);
                v38 = (int32x2_t *)((char *)v38 - 12);
                v66 = v38[1].i32[0];
                *(int32x2_t *)((char *)v64 - 12) = v65;
                v64 = (int32x2_t *)((char *)v64 - 12);
                v64[1].i32[0] = v66;
              }
              while (v38 != v50);
              v38 = *v36;
            }
            v67 = (int32x2_t *)&v55[12 * v54];
            v40 = (int32x2_t *)((char *)v63 + 12);
            *v36 = v64;
            v36[1] = (int32x2_t *)((char *)v63 + 12);
            v36[2] = v67;
            v28 = v49;
            if (v38)
              operator delete(v38);
            v26 = v48;
            v14 = v47;
            a6 = v89;
          }
          else
          {
            v39 = *v25;
            v38[1].i32[0] = v25[1].i32[0];
            *v38 = v39;
            v40 = (int32x2_t *)((char *)v38 + 12);
          }
          v36[1] = v40;
        }
        v25 = (int32x2_t *)((char *)v25 + 12);
        ++v27;
      }
      while (v25 != v26 || v27 != v28);
    }
  }
}

uint64_t *sub_223A3C618(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t *sub_223A3C7C8(uint64_t **a1, unsigned __int8 *a2, _OWORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x48uLL);
    *((_OWORD *)v10 + 2) = **a3;
    v10[7] = 0;
    v10[8] = 0;
    v10[6] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v11 = (uint64_t *)**a1;
    v12 = v10;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_2231A9A8C(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)(v5 + 4);
      if ((sub_22319835C(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_22319835C(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t sub_223A3C8BC(uint64_t a1, uint64_t a2, _QWORD *a3, __int16 *a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int16 v18;
  uint64_t (***v19)();
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t (***v25)();
  uint64_t v26;
  uint64_t (***v27)();
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t (**v31)();
  uint64_t v32;
  uint64_t (***v33)();
  _QWORD v34[4];

  v34[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24EC5DAD8;
  v8 = a1 + 8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 32;
  v9 = operator new(0x68uLL);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = &off_24EC5DB28;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  v9[10] = 0;
  v9[11] = v8;
  *(_QWORD *)(a1 + 64) = v9;
  v9[3] = 850045863;
  *(_QWORD *)(a1 + 56) = v9 + 3;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 32;
  v10 = operator new(0x68uLL);
  *v10 = &off_24EC5DB78;
  v10[1] = 0;
  v10[3] = 850045863;
  v10[2] = 0;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  v10[10] = 0;
  v10[11] = a1 + 72;
  *(_QWORD *)(a1 + 120) = v10 + 3;
  *(_QWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 32;
  v11 = operator new(0x68uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = &off_24EC5DBC8;
  v11[3] = 850045863;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  v11[10] = 0;
  v11[11] = a1 + 136;
  *(_QWORD *)(a1 + 184) = v11 + 3;
  *(_QWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0x200000001;
  *(_QWORD *)(a1 + 392) = 0x412000003C23D70ALL;
  sub_2232291A8((_QWORD *)(a1 + 400));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = sub_223CDB7D4;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = sub_223CDB800;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = sub_223CDB82C;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = sub_223CDB858;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = sub_223CDB884;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = sub_223CDB8B0;
  *(_BYTE *)(a1 + 528) = 0;
  v13 = *(_QWORD *)(a2 + 24);
  if (!v13)
    goto LABEL_4;
  if (v13 != a2)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
LABEL_4:
    *(_QWORD *)(a1 + 560) = v13;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 560) = a1 + 536;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
LABEL_6:
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  v14 = (uint64_t (***)())(a1 + 632);
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 760) = *a3;
  v15 = a3[1];
  *(_QWORD *)(a1 + 768) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a4;
  *(_BYTE *)(a1 + 778) = *((_BYTE *)a4 + 2);
  *(_WORD *)(a1 + 776) = v18;
  v31 = &off_24EC5DC18;
  v32 = a1;
  v19 = &v31;
  v33 = &v31;
  if (v14 == &v31)
  {
    v20 = 4;
    goto LABEL_17;
  }
  v19 = *(uint64_t (****)())(a1 + 656);
  if (v19 == v14)
  {
    v34[0] = &off_24EC5DC18;
    v34[1] = a1;
    v33 = 0;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(a1 + 632) + 24))(a1 + 632, &v31);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 656) + 32))(*(_QWORD *)(a1 + 656));
    *(_QWORD *)(a1 + 656) = 0;
    v33 = &v31;
    (*(void (**)(_QWORD *, uint64_t))(v34[0] + 24))(v34, a1 + 632);
    (*(void (**)(_QWORD *))(v34[0] + 32))(v34);
    *(_QWORD *)(a1 + 656) = v14;
    v19 = v33;
    if (v33 != &v31)
      goto LABEL_12;
LABEL_16:
    v20 = 4;
    v19 = &v31;
    goto LABEL_17;
  }
  *(_QWORD *)(a1 + 632) = &off_24EC5DC18;
  *(_QWORD *)(a1 + 640) = a1;
  v33 = v19;
  *(_QWORD *)(a1 + 656) = v14;
  if (v19 == &v31)
    goto LABEL_16;
LABEL_12:
  if (!v19)
    goto LABEL_18;
  v20 = 5;
LABEL_17:
  ((void (*)(uint64_t (***)(), uint64_t))(*v19)[v20])(v19, v12);
LABEL_18:
  v21 = (uint64_t (***)())(a1 + 664);
  v31 = &off_24EC5DCA8;
  v32 = a1;
  v22 = &v31;
  v33 = &v31;
  if ((uint64_t (***)())(a1 + 664) == &v31)
  {
    v23 = 4;
  }
  else
  {
    v22 = *(uint64_t (****)())(a1 + 688);
    if (v22 == v21)
    {
      v33 = 0;
      v22 = &v31;
      ((void (*)(uint64_t, uint64_t (***)()))(*v21)[3])(a1 + 664, &v31);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 688) + 32))(*(_QWORD *)(a1 + 688));
      v33 = &v31;
      *(_QWORD *)(a1 + 664) = &off_24EC5DCA8;
      *(_QWORD *)(a1 + 672) = a1;
      v23 = 4;
      *(_QWORD *)(a1 + 688) = v21;
    }
    else
    {
      *(_QWORD *)(a1 + 664) = &off_24EC5DCA8;
      *(_QWORD *)(a1 + 672) = a1;
      v33 = v22;
      *(_QWORD *)(a1 + 688) = v21;
      if (v22 == &v31)
      {
        v23 = 4;
        v22 = &v31;
      }
      else
      {
        if (!v22)
          goto LABEL_27;
        v23 = 5;
      }
    }
  }
  ((void (*)(uint64_t (***)()))(*v22)[v23])(v22);
LABEL_27:
  if (!*(_BYTE *)(a1 + 777))
    return a1;
  v24 = (uint64_t (***)())(a1 + 696);
  v31 = &off_24EC5DD38;
  v32 = a1;
  v25 = &v31;
  v33 = &v31;
  if ((uint64_t (***)())(a1 + 696) == &v31)
  {
    v26 = 4;
    goto LABEL_36;
  }
  v25 = *(uint64_t (****)())(a1 + 720);
  if (v25 == v24)
  {
    v33 = 0;
    v25 = &v31;
    ((void (*)(uint64_t, uint64_t (***)()))(*v24)[3])(a1 + 696, &v31);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 32))(*(_QWORD *)(a1 + 720));
    v33 = &v31;
    *(_QWORD *)(a1 + 696) = &off_24EC5DD38;
    *(_QWORD *)(a1 + 704) = a1;
    v26 = 4;
    *(_QWORD *)(a1 + 720) = v24;
    goto LABEL_36;
  }
  *(_QWORD *)(a1 + 696) = &off_24EC5DD38;
  *(_QWORD *)(a1 + 704) = a1;
  v33 = v25;
  *(_QWORD *)(a1 + 720) = v24;
  if (v25 == &v31)
  {
    v26 = 4;
    v25 = &v31;
    goto LABEL_36;
  }
  if (v25)
  {
    v26 = 5;
LABEL_36:
    ((void (*)(uint64_t (***)()))(*v25)[v26])(v25);
  }
  v27 = (uint64_t (***)())(a1 + 728);
  v31 = &off_24EC5DDC8;
  v32 = a1;
  v28 = &v31;
  v33 = &v31;
  if ((uint64_t (***)())(a1 + 728) == &v31)
  {
    v29 = 4;
    goto LABEL_45;
  }
  v28 = *(uint64_t (****)())(a1 + 752);
  if (v28 == v27)
  {
    v33 = 0;
    v28 = &v31;
    ((void (*)(uint64_t, uint64_t (***)()))(*v27)[3])(a1 + 728, &v31);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 752) + 32))(*(_QWORD *)(a1 + 752));
    v33 = &v31;
    *(_QWORD *)(a1 + 728) = &off_24EC5DDC8;
    *(_QWORD *)(a1 + 736) = a1;
    v29 = 4;
    *(_QWORD *)(a1 + 752) = v27;
    goto LABEL_45;
  }
  *(_QWORD *)(a1 + 728) = &off_24EC5DDC8;
  *(_QWORD *)(a1 + 736) = a1;
  v33 = v28;
  *(_QWORD *)(a1 + 752) = v27;
  if (v28 == &v31)
  {
    v29 = 4;
    v28 = &v31;
    goto LABEL_45;
  }
  if (v28)
  {
    v29 = 5;
LABEL_45:
    ((void (*)(uint64_t (***)()))(*v28)[v29])(v28);
  }
  return a1;
}

void sub_223A3CE64(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A3CF38(uint64_t a1, unsigned int **a2)
{
  uint64_t result;
  char v4;
  _DWORD v5[6];
  int v6;
  _QWORD v7[5];
  _QWORD *v8;

  v6 = 0;
  sub_22388D128(v5, "MSP: not all query poses are found in cache pose (indices = ");
  sub_223A4C910((uint64_t)&v4, (uint64_t)v5, a2);
  v7[0] = v5;
  v7[1] = ")\n";
  v7[2] = v5;
  v7[3] = ")\n";
  v7[4] = ")\n";
  if (v6 == -1)
    sub_22316DD70();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24EC5DEA8[v6])(&v8, v5);
  if (v6 == -1)
    sub_22316DD70();
  v7[0] = &v8;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5DEC0[v6])(v7, v5);
  if (v6 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC5DE48[v6])(v7, v5);
  return result;
}

void sub_223A3D038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A3D04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A3D060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A3D074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A3D088(uint64_t a1, uint64_t *a2, float32x2_t *a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  __int32 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int16 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  float32x2_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  int8x16_t v83;
  int8x16_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int32 v95;
  int8x16_t v97;
  int8x16_t v98;
  uint64_t v99;
  float32x2_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  unsigned __int32 v104;
  BOOL v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  int v119;
  __int128 v120;
  uint64_t v121;
  __int16 v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t (**v135)();
  uint64_t v136;
  std::__shared_weak_count *v137;
  float32x4_t v138;
  uint64_t v139;
  __int16 v140;
  _BYTE v141[56];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t (**v148)();
  uint64_t v149;
  std::__shared_weak_count *v150;

  v6 = atomic_load((unsigned __int8 *)&qword_2540CCB70);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCB70))
  {
    sub_223A3DF18();
    __cxa_atexit((void (*)(void *))sub_223A3DF90, &qword_2540CCBA8, &dword_22314D000);
    __cxa_guard_release(&qword_2540CCB70);
  }
  if (!*(_DWORD *)(*a2 + 112) || !*(_DWORD *)(*a2 + 116))
  {
    *(_QWORD *)v141 = &off_24EC24BA0;
    sub_223203A34((_DWORD *)(a1 + 64), &v141[8]);
    v7 = *a2;
    v8 = *(_OWORD *)&v141[8];
    *(_QWORD *)&v141[8] = 0;
    *(_QWORD *)&v141[16] = 0;
    v9 = *(std::__shared_weak_count **)(v7 + 16);
    *(_OWORD *)(v7 + 8) = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(_OWORD *)&v141[24];
    v13 = *(_OWORD *)&v141[40];
    *(_OWORD *)(v7 + 56) = v142;
    *(_OWORD *)(v7 + 40) = v13;
    *(_OWORD *)(v7 + 24) = v12;
    v14 = v143;
    v15 = v144;
    v16 = v145;
    v17 = *(std::__shared_weak_count **)&v141[16];
    *(_QWORD *)(v7 + 120) = v146;
    *(_OWORD *)(v7 + 104) = v16;
    *(_OWORD *)(v7 + 88) = v15;
    *(_OWORD *)(v7 + 72) = v14;
    *(_WORD *)(v7 + 128) = v147;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (*(_DWORD *)(a1 + 64) >= 7u)
    v20 = 7;
  else
    v20 = 0;
  if (*(_DWORD *)(a1 + 68) <= 6u)
    v21 = 0;
  else
    v21 = v20;
  v135 = &off_24EC21230;
  sub_2231BE6D4(a1, &v136);
  sub_2231DCB14(*a2, &v129);
  v27 = v138.i32[2];
  if (v138.i64[1] != v133)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/NormalEstimation.h", 250, (uint64_t)"depth.Size() == normal.Size()", 29, (uint64_t)"depth and normal size must match", 32, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_141;
    }
    v27 = v138.i32[2];
  }
  if (__PAIR64__(v138.u32[3], v27) != *(_QWORD *)&a3[11]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/NormalEstimation.h", 251, (uint64_t)"depth.Size() == camera.ImageSize()", 34, (uint64_t)"depth and camera image size must match", 38, (void (*)(void **))sub_22457406C))
  {
LABEL_141:
    abort();
  }
  if (v21 > 1)
  {
    if (qword_2540CCBE8 == v138.i64[1])
      goto LABEL_46;
    *(_QWORD *)v141 = &off_24EC216B8;
    sub_22321B00C(&v138.i32[2], dword_22465B03C, &v141[8]);
    v28 = *(_OWORD *)&v141[8];
    *(_QWORD *)&v141[8] = 0;
    *(_QWORD *)&v141[16] = 0;
    v29 = (std::__shared_weak_count *)qword_2540CCBB8;
    *(_OWORD *)word_2540CCBB0 = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    xmmword_2540CCBC0 = *(_OWORD *)&v141[24];
    xmmword_2540CCBD0 = *(_OWORD *)&v141[40];
    unk_2540CCBE0 = v142;
    v32 = *(std::__shared_weak_count **)&v141[16];
    qword_2540CCBF0 = v143;
    word_2540CCBF8 = WORD4(v143);
    if (*(_QWORD *)&v141[16])
    {
      v33 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    *(_QWORD *)v141 = &off_24EC216B8;
    sub_22321B00C(&v138.i32[2], dword_22465B03C, &v141[8]);
    v35 = *(_OWORD *)&v141[8];
    *(_QWORD *)&v141[8] = 0;
    *(_QWORD *)&v141[16] = 0;
    v36 = (std::__shared_weak_count *)qword_2540CCC10;
    *(_OWORD *)word_2540CCC08 = v35;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    xmmword_2540CCC18 = *(_OWORD *)&v141[24];
    unk_2540CCC28 = *(_OWORD *)&v141[40];
    xmmword_2540CCC38 = v142;
    v39 = *(std::__shared_weak_count **)&v141[16];
    qword_2540CCC48 = v143;
    word_2540CCC50 = WORD4(v143);
    if (!*(_QWORD *)&v141[16])
      goto LABEL_46;
    v40 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (v41)
    {
LABEL_46:
      v42 = vcvtms_u32_f32((float)v21 * 0.5);
      if (!v42)
      {
LABEL_52:
        *(_QWORD *)v141 = &off_24EC21230;
        sub_2231BE6D4((uint64_t)&qword_2540CCBA8, (uint64_t *)&v141[8]);
        goto LABEL_68;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      v42 = vcvtms_u32_f32((float)v21 * 0.5);
      if (!v42)
        goto LABEL_52;
    }
    *(_QWORD *)v141 = &off_24EC21FE8;
    sub_2231DCF04((uint64_t)&qword_2540CCBA8, (uint64_t *)&v141[8]);
    sub_223A4CB5C((uint64_t)&v135, (uint64_t)v141);
    v43 = *(std::__shared_weak_count **)&v141[16];
    if (!*(_QWORD *)&v141[16])
      goto LABEL_51;
    v44 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if (v42 == 1)
        goto LABEL_52;
    }
    else
    {
LABEL_51:
      if (v42 == 1)
        goto LABEL_52;
    }
    v119 = 1;
    while (1)
    {
      v120 = *(_OWORD *)word_2540CCBB0;
      *(_OWORD *)v141 = xmmword_2540CCBC0;
      *(_OWORD *)&v141[16] = xmmword_2540CCBD0;
      *(_OWORD *)&v141[32] = unk_2540CCBE0;
      v121 = qword_2540CCBF0;
      v122 = word_2540CCBF8;
      qword_2540CCBF0 = qword_2540CCC48;
      xmmword_2540CCBD0 = unk_2540CCC28;
      unk_2540CCBE0 = xmmword_2540CCC38;
      word_2540CCBF8 = word_2540CCC50;
      *(_OWORD *)word_2540CCBB0 = *(_OWORD *)word_2540CCC08;
      xmmword_2540CCBC0 = xmmword_2540CCC18;
      *(_OWORD *)word_2540CCC08 = v120;
      *(_QWORD *)&v141[48] = v121;
      qword_2540CCC48 = v121;
      xmmword_2540CCC38 = *(_OWORD *)&v141[32];
      unk_2540CCC28 = *(_OWORD *)&v141[16];
      xmmword_2540CCC18 = *(_OWORD *)v141;
      word_2540CCC50 = v122;
      *(_QWORD *)v141 = &off_24EC21230;
      sub_2231BE6D4((uint64_t)&qword_2540CCC00, (uint64_t *)&v141[8]);
      v148 = &off_24EC21FE8;
      sub_2231DCF04((uint64_t)&qword_2540CCBA8, &v149);
      sub_223A4CB5C((uint64_t)v141, (uint64_t)&v148);
      v123 = v150;
      if (!v150)
        goto LABEL_134;
      v124 = (unint64_t *)&v150->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
        v126 = *(std::__shared_weak_count **)&v141[16];
        if (*(_QWORD *)&v141[16])
        {
LABEL_135:
          v127 = (unint64_t *)&v126->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
      }
      else
      {
LABEL_134:
        v126 = *(std::__shared_weak_count **)&v141[16];
        if (*(_QWORD *)&v141[16])
          goto LABEL_135;
      }
      if (++v119 == v42)
        goto LABEL_52;
    }
  }
  *(_QWORD *)v141 = &off_24EC21230;
  v47 = v136;
  v48 = v137;
  if (v137)
  {
    v49 = (unint64_t *)&v137->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    v51 = v140;
    do
      v52 = __ldxr(v49);
    while (__stxr(v52 + 1, v49));
    v46 = v138;
    *(float32x4_t *)&v141[24] = v138;
    *(_QWORD *)&v141[40] = v139;
    do
      v53 = __ldxr(v49);
    while (__stxr(v53 + 1, v49));
    *(_QWORD *)&v141[8] = v47;
    *(_QWORD *)&v141[16] = v48;
    *(_WORD *)&v141[48] = v51;
    do
      v54 = __ldaxr(v49);
    while (__stlxr(v54 - 1, v49));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
    do
      v55 = __ldaxr(v49);
    while (__stlxr(v55 - 1, v49));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  else
  {
    *(_QWORD *)&v141[8] = v136;
    *(_QWORD *)&v141[16] = 0;
    v46 = v138;
    *(float32x4_t *)&v141[24] = v138;
    *(_QWORD *)&v141[40] = v139;
    *(_WORD *)&v141[48] = v140;
  }
LABEL_68:
  v56 = a3[11];
  v57 = 0xAAAAAAAAAAAAAAABLL * ((qword_2540CCC60 - qword_2540CCC58) >> 2);
  if (v56.u32[0] <= v57)
  {
    if (v56.u32[0] < v57)
      qword_2540CCC60 = qword_2540CCC58 + 12 * v56.u32[0];
  }
  else
  {
    sub_2231DC564((char **)&qword_2540CCC58, v56.u32[0] - v57);
  }
  if (v56.i32[0])
  {
    v58 = 0;
    v59 = 0;
    do
    {
      *(float32x2_t *)v22.f32 = vadd_f32(a3[5], vmul_f32(a3[4], (float32x2_t)COERCE_UNSIGNED_INT((float)(int)v59)));
      v22.i32[2] = 1.0;
      v60 = qword_2540CCC58 + v58;
      v22 = vmulq_n_f32(v22, *(float *)(*(_QWORD *)&v141[24] + 4 * (*(_DWORD *)&v141[40] * v59)));
      *(_DWORD *)(v60 + 8) = v22.i32[2];
      *(_QWORD *)v60 = v22.i64[0];
      ++v59;
      v58 += 12;
    }
    while (v56.u32[0] != v59);
  }
  v61 = v56.i32[1] - 1;
  if (v56.i32[1] == 1)
  {
    v63 = (v56.i32[0] - 1);
  }
  else
  {
    v62 = 0;
    v63 = (v56.i32[0] - 1);
    do
    {
      v65 = v134 * v62++;
      v66 = *(_DWORD *)&v141[40];
      v67 = *(_QWORD *)&v141[24] + 4 * (*(_DWORD *)&v141[44] * v62);
      v68 = HIDWORD(v132);
      v69 = v131 + 4 * v65;
      if (v56.i32[0] != 1)
      {
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        do
        {
          v75 = qword_2540CCC58 + v73;
          v24.f32[0] = (float)v70;
          v24.f32[1] = (float)v62;
          *(float32x2_t *)v24.f32 = vadd_f32(vmul_f32(a3[4], *(float32x2_t *)v24.f32), a3[5]);
          v24.i32[2] = 1.0;
          v24 = vmulq_n_f32(v24, *(float *)(v67 + 4 * v71));
          v25.i64[0] = 0;
          v26.i32[0] = 0;
          v76 = *(float *)(qword_2540CCC58 + v73 + 8) <= -65504.0 || *(float *)(qword_2540CCC58 + v73 + 20) <= -65504.0;
          if (!v76 && v24.f32[2] > -65504.0)
          {
            v25.i64[0] = *(_QWORD *)(v75 + 12);
            v25.i32[2] = *(_DWORD *)(v75 + 20);
            v26.i64[0] = *(_QWORD *)(qword_2540CCC58 + v73);
            v26.i32[2] = *(_DWORD *)(qword_2540CCC58 + v73 + 8);
            v77 = (int8x16_t)vsubq_f32(v25, (float32x4_t)v26);
            v78 = (int8x16_t)vsubq_f32((float32x4_t)v26, v24);
            v79 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v77, v77, 0xCuLL), v77, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), v78, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), v77, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v78, v78, 0xCuLL), v78, 8uLL));
            v26 = vextq_s8(v79, v79, 8uLL);
            v25 = vmulq_n_f32((float32x4_t)v79, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v79.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1), *(float32x2_t *)v79.i8, 1), *(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8).f32[0]));
            v26.i32[0] = v25.i32[2];
          }
          v25.i64[1] = v26.u32[0];
          *(float32x4_t *)(v69 + 4 * v72) = v25;
          v74 = qword_2540CCC58 + v73;
          *(_QWORD *)v74 = v24.i64[0];
          v73 += 12;
          *(_DWORD *)(v74 + 8) = v24.i32[2];
          v72 += v68;
          v71 += v66;
          ++v70;
        }
        while (12 * (v56.i32[0] - 1) != v73);
      }
      v80 = qword_2540CCC58 + 12 * v63;
      v46.f32[0] = (float)(int)v63;
      v24 = v46;
      v24.f32[1] = (float)v62;
      *(float32x2_t *)v23.f32 = vadd_f32(vmul_f32(a3[4], *(float32x2_t *)v24.f32), a3[5]);
      v23.i32[2] = 1.0;
      v23 = vmulq_n_f32(v23, *(float *)(v67 + 4 * (v66 * v63)));
      v24.i64[0] = 0;
      v25.i32[0] = 0;
      if (*(float *)(v80 + 8) > -65504.0)
      {
        v81 = qword_2540CCC58 + 12 * (v56.i32[0] - 2);
        if (v23.f32[2] > -65504.0 && *(float *)(v81 + 8) > -65504.0)
        {
          v24.i64[0] = *(_QWORD *)v80;
          v24.i32[2] = *(_DWORD *)(v80 + 8);
          v83 = (int8x16_t)vsubq_f32(v23, v24);
          v26.i64[0] = *(_QWORD *)v81;
          v26.i32[2] = *(_DWORD *)(v81 + 8);
          v84 = (int8x16_t)vsubq_f32(v24, (float32x4_t)v26);
          v26 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v83, v83, 0xCuLL), v83, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), v84, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), v83, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v84, v84, 0xCuLL), v84, 8uLL));
          v25 = (float32x4_t)vextq_s8(v26, v26, 8uLL);
          v24 = vmulq_n_f32((float32x4_t)v26, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v25.f32, *(float32x2_t *)v25.f32).f32[0]));
          v25.i32[0] = v24.i32[2];
        }
      }
      v24.i64[1] = v25.u32[0];
      *(float32x4_t *)(v69 + 4 * (v63 * v68)) = v24;
      v64 = qword_2540CCC58 + 12 * v63;
      *(_QWORD *)v64 = v23.i64[0];
      *(_DWORD *)(v64 + 8) = v23.i32[2];
    }
    while (v62 != v61);
  }
  v85 = *(_DWORD *)&v141[40];
  v86 = *(_QWORD *)&v141[24] + 4 * (*(_DWORD *)&v141[44] * (v56.i32[1] - 2));
  v87 = HIDWORD(v132);
  v88 = v131 + 4 * (v134 * v61);
  if ((_DWORD)v63)
  {
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    do
    {
      v94 = qword_2540CCC58 + v91;
      v23.f32[0] = (float)(int)v92;
      v23.f32[1] = (float)(v56.i32[1] - 2);
      *(float32x2_t *)v23.f32 = vadd_f32(vmul_f32(a3[4], *(float32x2_t *)v23.f32), a3[5]);
      v23.i32[2] = 1.0;
      v23 = vmulq_n_f32(v23, *(float *)(v86 + 4 * v89));
      v24.i64[0] = 0;
      v95 = 0;
      if (*(float *)(qword_2540CCC58 + v91 + 8) > -65504.0 && v23.f32[2] > -65504.0 && *(float *)(v94 + 20) > -65504.0)
      {
        v24.i64[0] = *(_QWORD *)(qword_2540CCC58 + v91);
        v24.i32[2] = *(_DWORD *)(qword_2540CCC58 + v91 + 8);
        v97 = (int8x16_t)vsubq_f32(v23, v24);
        v26.i64[0] = *(_QWORD *)(v94 + 12);
        v26.i32[2] = *(_DWORD *)(v94 + 20);
        v98 = (int8x16_t)vsubq_f32(v24, (float32x4_t)v26);
        v26 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v97, v97, 0xCuLL), v97, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), v98, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), v97, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v98, v98, 0xCuLL), v98, 8uLL));
        v97.i64[0] = vextq_s8(v26, v26, 8uLL).u64[0];
        v24 = vmulq_n_f32((float32x4_t)v26, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v26.i8, 1), *(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8).f32[0]));
        v95 = v24.u32[2];
      }
      ++v92;
      v24.i64[1] = v95;
      *(float32x4_t *)(v88 + 4 * v90) = v24;
      v93 = qword_2540CCC58 + v91;
      *(_QWORD *)v93 = v23.i64[0];
      *(_DWORD *)(v93 + 8) = v23.i32[2];
      v91 += 12;
      v90 += v87;
      v89 += v85;
    }
    while (v63 != v92);
  }
  v99 = qword_2540CCC58 + 12 * v63;
  v100.f32[0] = (float)(int)v63;
  v100.f32[1] = (float)(v56.i32[1] - 2);
  *(float32x2_t *)v46.f32 = vadd_f32(vmul_f32(a3[4], v100), a3[5]);
  v46.i32[2] = 1.0;
  v100.i32[0] = *(_DWORD *)(v86 + 4 * (v85 * v63));
  v101 = qword_2540CCC58 + 12 * (v56.i32[0] - 2);
  v102 = vmulq_n_f32(v46, v100.f32[0]);
  v103.i64[0] = 0;
  v104 = 0;
  v105 = *(float *)(v99 + 8) <= -65504.0 || *(float *)(v101 + 8) <= -65504.0;
  if (!v105 && v102.f32[2] > -65504.0)
  {
    v22.i64[0] = *(_QWORD *)v101;
    v22.i32[2] = *(_DWORD *)(v101 + 8);
    v23.i64[0] = *(_QWORD *)v99;
    v23.i32[2] = *(_DWORD *)(v99 + 8);
    v106 = (int8x16_t)vsubq_f32(v22, v23);
    v107 = (int8x16_t)vsubq_f32(v23, v102);
    v108 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v106, v106, 0xCuLL), v106, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), v107, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v106, (int32x4_t)v106), v106, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v107, v107, 0xCuLL), v107, 8uLL));
    v107.i64[0] = vextq_s8(v108, v108, 8uLL).u64[0];
    v103 = vmulq_n_f32((float32x4_t)v108, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v108.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1), *(float32x2_t *)v108.i8, 1), *(float32x2_t *)v107.i8, *(float32x2_t *)v107.i8).f32[0]));
    v104 = v103.u32[2];
  }
  v103.i64[1] = v104;
  *(float32x4_t *)(v88 + 4 * (v63 * v87)) = v103;
  v109 = qword_2540CCC58 + 12 * v63;
  *(_QWORD *)v109 = v102.i64[0];
  *(_DWORD *)(v109 + 8) = v102.i32[2];
  v110 = *(std::__shared_weak_count **)&v141[16];
  if (*(_QWORD *)&v141[16])
  {
    v111 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
  v113 = v130;
  if (v130)
  {
    v114 = (unint64_t *)&v130->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  v116 = v137;
  if (v137)
  {
    v117 = (unint64_t *)&v137->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
}

void sub_223A3DE64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CCB70);
  _Unwind_Resume(a1);
}

void sub_223A3DE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2231DCE9C((uint64_t)&a27);
  sub_2231DCAAC((uint64_t)&a10);
  sub_2231BD9DC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_223A3DEA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2231DCAAC((uint64_t)va);
  sub_2231BD9DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_223A3DEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_2231BD9DC(&a27);
  sub_2231DCAAC(&a10);
  sub_2231BD9DC(&a20);
  _Unwind_Resume(a1);
}

void sub_223A3DEEC()
{
  uint64_t v0;

  sub_2231DCE9C(v0 - 152);
  JUMPOUT(0x223A3DEF8);
}

uint64_t sub_223A3DF18()
{
  uint64_t result;

  qword_2540CCBA8 = (uint64_t)&off_24EC216B8;
  sub_2231C1D58(word_2540CCBB0);
  qword_2540CCC00 = (uint64_t)&off_24EC216B8;
  result = sub_2231C1D58(word_2540CCC08);
  qword_2540CCC58 = 0;
  qword_2540CCC60 = 0;
  qword_2540CCC68 = 0;
  qword_2540CCC80 = 0;
  qword_2540CCC88 = 0;
  qword_2540CCC78 = 0;
  qword_2540CCCA0 = 0;
  qword_2540CCCA8 = 0;
  qword_2540CCC98 = 0;
  return result;
}

void sub_223A3DF78(_Unwind_Exception *a1)
{
  sub_223167354((uint64_t)&unk_2540CCBB0);
  _Unwind_Resume(a1);
}

_QWORD *sub_223A3DF90(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (void *)a1[32];
  if (v2)
  {
    free(v2);
    a1[32] = 0;
  }
  v3 = (void *)a1[28];
  if (v3)
  {
    free(v3);
    a1[28] = 0;
  }
  v4 = (void *)a1[22];
  if (v4)
  {
    a1[23] = v4;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)a1[13];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v8 = (std::__shared_weak_count *)a1[2];
      if (v8)
        goto LABEL_12;
      return a1;
    }
  }
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
LABEL_12:
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223A3E06C(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v22;
  std::string::size_type v23;
  int v24;
  BOOL v25;
  __n128 *v27;
  std::string *v28;
  size_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  std::mutex *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  int v43;
  __n128 *v46;
  std::string *v47;
  size_t v48;
  unsigned __int8 v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  const char *v60;
  size_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  double v70;
  size_t v71;
  void *v72;
  _QWORD *v73;
  size_t v74;
  size_t v75;
  void **p_dst;
  void *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  char v82;
  _QWORD *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  char *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  __int128 v105;
  std::string::size_type v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  void **v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  const char *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  float32x4_t *v130;
  float32x4_t *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  float32x4_t *v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t *v139;
  float32x4_t *v140;
  float32x4_t *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  char *v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t *v150;
  char *v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  uint64_t v155;
  void *v156;
  _QWORD *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  std::mutex *v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  std::string *v165;
  std::string *v166;
  uint64_t v167;
  std::string::size_type v168;
  std::string *v169;
  std::string::size_type v170;
  std::string::size_type v171;
  int v172;
  __n128 *v175;
  std::string *v176;
  size_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  _QWORD *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  unint64_t *v195;
  unint64_t v196;
  char *v197;
  _QWORD *v198;
  __int128 v199;
  _QWORD *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  void **v207;
  void **v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  unint64_t *v227;
  unint64_t v228;
  char *v229;
  char *v230;
  __int128 v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void **v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  unint64_t v253;
  _QWORD *v254;
  unint64_t *v255;
  void **v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  char *v271;
  char *v272;
  unint64_t *v273;
  unint64_t v274;
  char *v275;
  _QWORD *v276;
  __int128 v277;
  _QWORD *v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  float32x4_t *v286;
  float32x4_t *v287;
  uint64_t v288;
  float32x4_t *v289;
  float32x4_t *v290;
  unint64_t v291;
  unsigned int *v292;
  std::string::size_type v293;
  uint64_t v294;
  char v295;
  float32x4_t v296;
  unsigned int v297;
  float32x4_t *v298;
  _BYTE *v299;
  uint64_t v300;
  uint64_t v301;
  __int128 v302;
  unint64_t *v303;
  unint64_t v304;
  __int128 v305;
  unint64_t *v306;
  unint64_t v307;
  __int128 v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  _OWORD *v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  int v322;
  unint64_t v323;
  unint64_t v324;
  BOOL v325;
  uint64_t v326;
  const char *v327;
  size_t v328;
  unsigned __int8 v329;
  unsigned __int8 v330;
  const char *v331;
  size_t v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v335;
  _BYTE *v336;
  NSObject *v337;
  uint64_t v338;
  uint64_t v339;
  size_t v340;
  std::__shared_weak_count_vtbl *v341;
  std::__shared_weak_count *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  const char *v350;
  uint64_t v351;
  __int128 v352;
  std::string::size_type v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  int v368;
  unint64_t *v369;
  unint64_t v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  void *v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t v378;
  _OWORD *v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  _OWORD *v383;
  _OWORD *v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  char *v389;
  char *v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  char *v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  _OWORD *v398;
  char *v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  __int128 v403;
  unint64_t v404;
  char *v405;
  char *v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  char *v411;
  char *v412;
  _OWORD *v413;
  char *v414;
  __int128 v415;
  char *v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  __int128 v423;
  unint64_t v424;
  char *v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  char *v432;
  char *v433;
  _OWORD *v434;
  char *v435;
  __int128 v436;
  char *v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void *v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  std::mutex *v451;
  uint64_t v452;
  uint64_t v453;
  char v454;
  std::string *v455;
  std::string *v456;
  uint64_t v457;
  std::string::size_type v458;
  std::string *v459;
  std::string::size_type v460;
  std::string::size_type v461;
  int v462;
  __n128 *v465;
  std::string *v466;
  size_t v467;
  _QWORD *v468;
  _QWORD *v469;
  void *v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  char *v474;
  char *v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  void *v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  uint64_t v485;
  _QWORD *v486;
  void **v488;
  uint64_t v489;
  const char *v490;
  const char *v491;
  _QWORD *v492;
  int v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  char *v497;
  uint64_t v498;
  int v499;
  __int128 v500;
  __int128 v501;
  uint64_t *v502;
  uint64_t v503;
  float32x2_t *v504;
  _QWORD *v505;
  const char *v506;
  float32x4_t v507;
  char *v508;
  uint64_t v509;
  void *v510;
  _QWORD *v511;
  char *v512;
  uint64_t v513[2];
  void *v514;
  char *v515;
  char *v516;
  std::string __p;
  int v518;
  const char *v519;
  int v520;
  const char *v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  void *v524;
  __int128 v525;
  std::string v526;
  char *v527;
  std::__shared_weak_count *v528;
  void **__dst;
  __int128 v530;
  uint64_t v531;
  __int128 v532;
  char *v533;
  _BYTE v534[48];
  size_t v535;
  unint64_t v536;
  char v537;
  uint64_t v538;

  v538 = *MEMORY[0x24BDAC8D0];
  v11 = a1 + 216;
  kdebug_trace();
  v502 = a2;
  v504 = (float32x2_t *)a4;
  sub_223A418B4(a1, *a2, a4);
  v12 = operator new(0x20uLL);
  v524 = v12;
  v525 = xmmword_2245B8D70;
  strcpy((char *)v12, "Stats.Volumetric.MSP.count");
  *(_QWORD *)v534 = "cv3d.recon.";
  *(_QWORD *)&v534[8] = 11;
  *(_QWORD *)&v534[16] = v12;
  *(_QWORD *)&v534[24] = 26;
  sub_2231A9820((uint64_t)v534, (uint64_t)&v534[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v13 = sub_2241471F8();
    v14 = v13[2];
    if (!v14)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = v13[2];
    }
    v15 = *(_QWORD *)(v14 + 64);
    v16 = (std::mutex *)(v15 + 32);
    std::mutex::lock((std::mutex *)(v15 + 32));
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    std::mutex::unlock(v16);
    if (v18 != v17)
    {
      sub_2241471F8();
      v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19))
      {
        memset(v534, 0, 32);
        *(_DWORD *)&v534[32] = 728325608;
        kdebug_trace();
        v526.__r_.__value_.__r.__words[0] = (uint64_t)(a3[1] - *a3) >> 6;
        sub_223A41A90((double *)&qword_255788F20, v19, (uint64_t *)&v526, "query");
        kdebug_trace();
      }
    }
  }
  memset(v534, 0, 32);
  *(_DWORD *)&v534[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = p_p->__r_.__value_.__r.__words[0];
    v23 = p_p->__r_.__value_.__l.__size_;
    v24 = p_p->__r_.__value_.__s.__data_[16];
    v25 = v22 == 0x6365722E64337663 && v23 == 0x73746174532E6E6FLL;
    if (v25 && v24 == 46)
    {
      v27 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &__p;
      else
        v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v29 = __p.__r_.__value_.__l.__size_;
      v526.__r_.__value_.__r.__words[0] = (uint64_t)(a3[1] - *a3) >> 6;
      sub_22318760C((uint64_t *)v27, v28, v29, (uint64_t *)&v526, (uint64_t)"query", 5);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)v534 = "cv3d.recon.";
  *(_QWORD *)&v534[8] = 11;
  v30 = HIBYTE(v525);
  v31 = &v524;
  if (v525 < 0)
  {
    v31 = v524;
    v30 = v525;
  }
  *(_QWORD *)&v534[16] = v31;
  *(_QWORD *)&v534[24] = v30;
  sub_2231A9820((uint64_t)v534, (uint64_t)&v534[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v32 = sub_2241471F8();
    v33 = v32[2];
    if (!v33)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v33 = v32[2];
    }
    v34 = *(_QWORD *)(v33 + 64);
    v35 = (std::mutex *)(v34 + 32);
    std::mutex::lock((std::mutex *)(v34 + 32));
    v37 = *(_QWORD *)(v34 + 96);
    v36 = *(_QWORD *)(v34 + 104);
    std::mutex::unlock(v35);
    if (v37 != v36)
    {
      sub_2241471F8();
      v38 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38))
      {
        memset(v534, 0, 32);
        *(_DWORD *)&v534[32] = 728325608;
        kdebug_trace();
        v526.__r_.__value_.__r.__words[0] = (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 6;
        sub_22386D76C((double *)&qword_255788F20, v38, (uint64_t *)&v526, "init_cache");
        kdebug_trace();
      }
    }
  }
  memset(v534, 0, 32);
  *(_DWORD *)&v534[32] = 728325624;
  kdebug_trace();
  v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v39 = __p.__r_.__value_.__l.__size_;
  if (v39 >= 0x11)
  {
    v40 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v41 = v40->__r_.__value_.__r.__words[0];
    v42 = v40->__r_.__value_.__l.__size_;
    v43 = v40->__r_.__value_.__s.__data_[16];
    if (v41 == 0x6365722E64337663 && v42 == 0x73746174532E6E6FLL && v43 == 46)
    {
      v46 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &__p;
      else
        v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v48 = __p.__r_.__value_.__l.__size_;
      v526.__r_.__value_.__r.__words[0] = (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 6;
      sub_22318760C((uint64_t *)v46, v47, v48, (uint64_t *)&v526, (uint64_t)"init_cache", 10);
    }
  }
  kdebug_trace();
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v485 = a6;
    v486 = a3;
    v492 = (_QWORD *)v11;
    if (*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216) < 0x241uLL)
      goto LABEL_184;
LABEL_63:
    v49 = atomic_load((unsigned __int8 *)&qword_2540CCB80);
    if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCB80))
    {
      sub_22455F53C(&__p);
      sub_223174DE4(v534, "cv3dapi.recon3d");
      sub_2232300E0((uint64_t **)&__p, (uint64_t)v534, &qword_2540CCB78);
      if ((v534[23] & 0x80000000) != 0)
        operator delete(*(void **)v534);
      __cxa_guard_release(&qword_2540CCB80);
      a3 = v486;
    }
    v514 = (void *)qword_2540CCB78;
    if (**(int **)(qword_2540CCB78 + 56) > 4)
      goto LABEL_184;
    v50 = *(unsigned __int8 *)(qword_2540CCB78 + 72);
    v51 = sub_22322F254(qword_2540CCB78, "OSLogSurrogateAppender", 1, 0);
    v52 = v51;
    if (!v50 && !v51)
      goto LABEL_184;
    v493 = v50;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v514;
    __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
    __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
    v518 = 4;
    v519 = "unknown file";
    v520 = 317;
    v522 = 0;
    v523 = 0;
    v521 = "unknown function";
    v53 = *(const char **)a5;
    if (a5[23] >= 0)
      v53 = a5;
    v54 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
    v55 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
    v490 = v55;
    v506 = v53;
    if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
    {
      v55 = *(const char **)(v54 + 16);
      v56 = *(_QWORD *)(v54 + 24);
    }
    else
    {
      v56 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
    }
    v57 = *(_QWORD *)(a1 + 216);
    v58 = *v502;
    v496 = v486[1];
    v498 = *(_QWORD *)(a1 + 224);
    v494 = *v486;
    v59 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)v534);
      sub_223199C58("com.apple.cv3d", (unint64_t)v534, byte_255788F40);
      if (v534[24] && (v534[23] & 0x80000000) != 0)
        operator delete(*(void **)v534);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F40[23] >= 0)
      v60 = byte_255788F40;
    else
      v60 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v61 = byte_255788F40[23];
    else
      v61 = *(_QWORD *)&byte_255788F40[8];
    *(_QWORD *)v534 = os_log_create(v60, v55);
    v62 = &v534[8];
    if (v61 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v61 >= 0x17)
    {
      v63 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v61 | 7) != 0x17)
        v63 = v61 | 7;
      v64 = v63 + 1;
      v62 = operator new(v63 + 1);
      *(_QWORD *)&v534[16] = v61;
      *(_QWORD *)&v534[24] = v64 | 0x8000000000000000;
      *(_QWORD *)&v534[8] = v62;
    }
    else
    {
      v534[31] = v61;
      if (!v61)
      {
LABEL_87:
        v62[v61] = 0;
        v534[32] = 1;
        v65 = &v534[40];
        if (v56 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v56 >= 0x17)
        {
          v66 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v56 | 7) != 0x17)
            v66 = v56 | 7;
          v67 = v66 + 1;
          v65 = operator new(v66 + 1);
          v535 = v56;
          v536 = v67 | 0x8000000000000000;
          *(_QWORD *)&v534[40] = v65;
        }
        else
        {
          HIBYTE(v536) = v56;
          if (!v56)
          {
LABEL_95:
            v65[v56] = 0;
            v537 = 1;
            v68 = *(NSObject **)v534;
            if (SHIBYTE(v536) < 0)
              operator delete(*(void **)&v534[40]);
            if (v534[32] && (v534[31] & 0x80000000) != 0)
              operator delete(*(void **)&v534[8]);
            if (*(_QWORD *)v534)
              os_release(*(void **)v534);
            v69 = (v498 - v57) >> 6;
            v70 = (double)v58 / 1000000000.0;
            if (!v52 || !*(_QWORD *)(v52 + 24))
            {
              os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
              *(_DWORD *)v534 = 134218754;
              *(_QWORD *)&v534[4] = (v498 - v57) >> 6;
              *(_WORD *)&v534[12] = 2048;
              *(double *)&v534[14] = v70;
              *(_WORD *)&v534[22] = 2048;
              *(_QWORD *)&v534[24] = (v496 - v494) >> 6;
              *(_WORD *)&v534[32] = 2080;
              *(_QWORD *)&v534[34] = v506;
              v77 = (void *)_os_log_send_and_compose_impl();
              a3 = v486;
              v78 = v493;
              if (v77)
                free(v77);
              goto LABEL_174;
            }
            v71 = _os_log_pack_size();
            v72 = operator new(v71, (std::align_val_t)8uLL);
            v73 = (_QWORD *)operator new();
            *v73 = &off_24EC1F7F0;
            v73[1] = 0;
            v73[2] = 0;
            v73[3] = v72;
            v526.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
            v526.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
            v527 = 0;
            v528 = 0;
            v526.__r_.__value_.__r.__words[2] = (std::string::size_type)v73;
            v74 = strlen(v506);
            if (v74 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v75 = v74;
            if (v74 >= 0x17)
            {
              v79 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v74 | 7) != 0x17)
                v79 = v74 | 7;
              v80 = v79 + 1;
              p_dst = (void **)operator new(v79 + 1);
              *(_QWORD *)&v530 = v75;
              *((_QWORD *)&v530 + 1) = v80 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v530) = v74;
              p_dst = (void **)&__dst;
              if (!v74)
              {
LABEL_114:
                *((_BYTE *)p_dst + v75) = 0;
                v81 = __dst;
                *(_QWORD *)&v532 = v530;
                *(_QWORD *)((char *)&v532 + 7) = *(_QWORD *)((char *)&v530 + 7);
                v82 = HIBYTE(v530);
                v83 = operator new(0x38uLL);
                v83[1] = 0;
                v83[2] = 0;
                v83[3] = off_24EC5DF38;
                *v83 = &off_24EC5DEE8;
                v84 = v532;
                v83[4] = v81;
                v83[5] = v84;
                *(_QWORD *)((char *)v83 + 47) = *(_QWORD *)((char *)&v532 + 7);
                *((_BYTE *)v83 + 55) = v82;
                *(_QWORD *)&v532 = 0;
                *(_QWORD *)((char *)&v532 + 7) = 0;
                v85 = v528;
                v527 = (char *)(v83 + 3);
                v528 = (std::__shared_weak_count *)v83;
                if (v85)
                {
                  p_shared_owners = (unint64_t *)&v85->__shared_owners_;
                  do
                    v87 = __ldaxr(p_shared_owners);
                  while (__stlxr(v87 - 1, p_shared_owners));
                  if (!v87)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                }
                *(std::string *)v534 = v526;
                v88 = v527;
                if (v526.__r_.__value_.__r.__words[2])
                {
                  v89 = (unint64_t *)(v526.__r_.__value_.__r.__words[2] + 8);
                  do
                    v90 = __ldxr(v89);
                  while (__stxr(v90 + 1, v89));
                }
                v91 = v528;
                *(_QWORD *)&v534[24] = v88;
                *(_QWORD *)&v534[32] = v528;
                if (v528)
                {
                  v92 = (unint64_t *)&v528->__shared_owners_;
                  do
                    v93 = __ldxr(v92);
                  while (__stxr(v93 + 1, v92));
                  *(_QWORD *)&v534[40] = v88;
                  do
                    v94 = __ldaxr(v92);
                  while (__stlxr(v94 - 1, v92));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
                else
                {
                  *(_QWORD *)&v534[40] = v88;
                }
                v95 = (std::__shared_weak_count *)v526.__r_.__value_.__r.__words[2];
                if (v526.__r_.__value_.__r.__words[2])
                {
                  v96 = (unint64_t *)(v526.__r_.__value_.__r.__words[2] + 8);
                  do
                    v97 = __ldaxr(v96);
                  while (__stlxr(v97 - 1, v96));
                  if (!v97)
                  {
                    ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                    std::__shared_weak_count::__release_weak(v95);
                  }
                }
                v98 = *(_QWORD *)v534;
                if (*(char *)(*(_QWORD *)&v534[40] + 31) >= 0)
                  v99 = *(_QWORD *)&v534[40] + 8;
                else
                  v99 = *(_QWORD *)(*(_QWORD *)&v534[40] + 8);
                v100 = _os_log_pack_fill();
                *(_DWORD *)v100 = 134218754;
                *(_QWORD *)(v100 + 4) = v69;
                *(_WORD *)(v100 + 12) = 2048;
                *(double *)(v100 + 14) = v70;
                *(_WORD *)(v100 + 22) = 2048;
                *(_QWORD *)(v100 + 24) = (v496 - v494) >> 6;
                *(_WORD *)(v100 + 32) = 2080;
                *(_QWORD *)(v100 + 34) = v99;
                v101 = operator new();
                v102 = *(unsigned __int8 *)(v54 + 39);
                v103 = *(const char **)(v54 + 16);
                v104 = *(_QWORD *)(v54 + 24);
                v105 = *(_OWORD *)&v534[24];
                *(_OWORD *)(v101 + 8) = *(_OWORD *)&v534[8];
                if ((v102 & 0x80u) != 0)
                  v102 = v104;
                else
                  v103 = v490;
                *(_QWORD *)v101 = v98;
                *(_QWORD *)&v534[8] = 0;
                *(_QWORD *)&v534[16] = 0;
                *(_OWORD *)(v101 + 24) = v105;
                *(_QWORD *)&v534[24] = 0;
                *(_QWORD *)&v534[32] = 0;
                *(_QWORD *)(v101 + 40) = v103;
                *(_QWORD *)(v101 + 48) = v102;
                *(_BYTE *)(v101 + 56) = 16;
                __dst = 0;
                v526.__r_.__value_.__r.__words[0] = v101;
                (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v52 + 24) + 40))(*(_QWORD *)(v52 + 24), &v526);
                a3 = v486;
                v106 = v526.__r_.__value_.__r.__words[0];
                v526.__r_.__value_.__r.__words[0] = 0;
                v78 = v493;
                if (v106)
                {
                  v107 = *(std::__shared_weak_count **)(v106 + 32);
                  if (v107)
                  {
                    v108 = (unint64_t *)&v107->__shared_owners_;
                    do
                      v109 = __ldaxr(v108);
                    while (__stlxr(v109 - 1, v108));
                    if (!v109)
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                  }
                  v110 = *(std::__shared_weak_count **)(v106 + 16);
                  if (v110)
                  {
                    v111 = (unint64_t *)&v110->__shared_owners_;
                    do
                      v112 = __ldaxr(v111);
                    while (__stlxr(v112 - 1, v111));
                    if (!v112)
                    {
                      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                      std::__shared_weak_count::__release_weak(v110);
                    }
                  }
                  MEMORY[0x227684CE8](v106, 0x10F0C40B62ED6C6);
                  v113 = __dst;
                  __dst = 0;
                  if (v113)
                  {
                    v114 = (std::__shared_weak_count *)v113[4];
                    if (v114)
                    {
                      v115 = (unint64_t *)&v114->__shared_owners_;
                      do
                        v116 = __ldaxr(v115);
                      while (__stlxr(v116 - 1, v115));
                      if (!v116)
                      {
                        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                        std::__shared_weak_count::__release_weak(v114);
                      }
                    }
                    v117 = (std::__shared_weak_count *)v113[2];
                    if (v117)
                    {
                      v118 = (unint64_t *)&v117->__shared_owners_;
                      do
                        v119 = __ldaxr(v118);
                      while (__stlxr(v119 - 1, v118));
                      if (!v119)
                      {
                        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                        std::__shared_weak_count::__release_weak(v117);
                      }
                    }
                    MEMORY[0x227684CE8](v113, 0x10F0C40B62ED6C6);
                  }
                }
                v120 = *(std::__shared_weak_count **)&v534[32];
                if (*(_QWORD *)&v534[32])
                {
                  v121 = (unint64_t *)(*(_QWORD *)&v534[32] + 8);
                  do
                    v122 = __ldaxr(v121);
                  while (__stlxr(v122 - 1, v121));
                  if (!v122)
                  {
                    ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                    std::__shared_weak_count::__release_weak(v120);
                  }
                }
                v123 = *(std::__shared_weak_count **)&v534[16];
                if (*(_QWORD *)&v534[16])
                {
                  v124 = (unint64_t *)(*(_QWORD *)&v534[16] + 8);
                  do
                    v125 = __ldaxr(v124);
                  while (__stlxr(v125 - 1, v124));
                  if (!v125)
                  {
                    ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                    std::__shared_weak_count::__release_weak(v123);
                  }
                }
LABEL_174:
                if (v78)
                {
                  if (a5[23] >= 0)
                    v126 = a5;
                  else
                    v126 = *(const char **)a5;
                  sub_22322C138((uint64_t)&__p, "High number of cached viewpoints for MappedStateProvider: %zu at time: %lf and receiving additional: %zu viewpoint requests from %s", (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 6, (double)*v502 / 1000000000.0, (uint64_t)(a3[1] - *a3) >> 6, v126);
                  sub_223182C08((uint64_t)&__p);
                }
                sub_223182C08((uint64_t)&__p);
                v127 = v523;
                if (v523)
                {
                  v128 = (unint64_t *)&v523->__shared_owners_;
                  do
                    v129 = __ldaxr(v128);
                  while (__stlxr(v129 - 1, v128));
                  if (!v129)
                  {
                    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                    std::__shared_weak_count::__release_weak(v127);
                  }
                }
                goto LABEL_184;
              }
            }
            memcpy(p_dst, v506, v75);
            goto LABEL_114;
          }
        }
        memmove(v65, v55, v56);
        goto LABEL_95;
      }
    }
    memmove(v62, v60, v61);
    goto LABEL_87;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v485 = a6;
  v486 = a3;
  v492 = (_QWORD *)v11;
  if (*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216) >= 0x241uLL)
    goto LABEL_63;
LABEL_184:
  v130 = (float32x4_t *)*a3;
  v131 = (float32x4_t *)a3[1];
  v530 = 0uLL;
  __dst = 0;
  if (v130 != v131)
  {
    v132 = 0;
    v133 = 0;
    v134 = 0;
    v135 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    v507 = v135;
    while (1)
    {
      v139 = *(float32x4_t **)(a1 + 216);
      v140 = *(float32x4_t **)(a1 + 224);
      if (v139 != v140)
      {
        while ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(*v139, *v130))), (int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(v139[1], v130[1])))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(v139[2], v130[2]))), (int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(v139[3], v130[3]))))))) & 1) != 0)
        {
          v139 += 4;
          if (v139 == v140)
            goto LABEL_192;
        }
        goto LABEL_188;
      }
LABEL_192:
      if (v134 != v133)
      {
        v141 = v134;
        while ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(*v141, *v130))), (int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(v141[1], v130[1])))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(v141[2], v130[2]))), (int16x8_t)vcgeq_f32(v135, vabsq_f32(vsubq_f32(v141[3], v130[3]))))))) & 1) != 0)
        {
          v141 += 4;
          if (v141 == v133)
            goto LABEL_196;
        }
        goto LABEL_188;
      }
LABEL_196:
      if (v133 >= v132)
        break;
      v136 = *v130;
      v137 = v130[1];
      v138 = v130[3];
      v133[2] = v130[2];
      v133[3] = v138;
      *v133 = v136;
      v133[1] = v137;
      v133 += 4;
LABEL_187:
      *(_QWORD *)&v530 = v133;
LABEL_188:
      v130 += 4;
      if (v130 == v131)
        goto LABEL_215;
    }
    v142 = ((char *)v133 - (char *)v134) >> 6;
    v143 = v142 + 1;
    if ((unint64_t)(v142 + 1) >> 58)
      sub_223257BE4();
    if (((char *)v132 - (char *)v134) >> 5 > v143)
      v143 = ((char *)v132 - (char *)v134) >> 5;
    if ((unint64_t)((char *)v132 - (char *)v134) >= 0x7FFFFFFFFFFFFFC0)
      v144 = 0x3FFFFFFFFFFFFFFLL;
    else
      v144 = v143;
    if (v144)
    {
      if (v144 >> 58)
        sub_223174E94();
      v145 = (char *)operator new(v144 << 6);
      v135 = v507;
    }
    else
    {
      v145 = 0;
    }
    v146 = (float32x4_t *)&v145[64 * v142];
    v147 = *v130;
    v148 = v130[1];
    v149 = v130[3];
    v146[2] = v130[2];
    v146[3] = v149;
    *v146 = v147;
    v146[1] = v148;
    if (v134 == v133)
    {
      v151 = &v145[64 * v142];
      v132 = (float32x4_t *)&v145[64 * v144];
      v133 = v146 + 4;
      __dst = (void **)v146;
      *((_QWORD *)&v530 + 1) = v132;
      if (!v134)
        goto LABEL_212;
    }
    else
    {
      v150 = (float32x4_t *)&v145[64 * v142];
      do
      {
        v151 = (char *)&v150[-4];
        v152 = v133[-4];
        v153 = v133[-3];
        v154 = v133[-1];
        v150[-2] = v133[-2];
        v150[-1] = v154;
        v150[-4] = v152;
        v150[-3] = v153;
        v133 -= 4;
        v150 -= 4;
      }
      while (v133 != v134);
      v132 = (float32x4_t *)&v145[64 * v144];
      v133 = v146 + 4;
      __dst = (void **)v151;
      *((_QWORD *)&v530 + 1) = v132;
      if (!v134)
        goto LABEL_212;
    }
    operator delete(v134);
    v135 = v507;
LABEL_212:
    v134 = (float32x4_t *)v151;
    goto LABEL_187;
  }
LABEL_215:
  *(_QWORD *)v534 = "cv3d.recon.";
  *(_QWORD *)&v534[8] = 11;
  v155 = HIBYTE(v525);
  v156 = &v524;
  if (v525 < 0)
  {
    v156 = v524;
    v155 = v525;
  }
  *(_QWORD *)&v534[16] = v156;
  *(_QWORD *)&v534[24] = v155;
  sub_2231A9820((uint64_t)v534, (uint64_t)&v534[32], 0, 0, &__p);
  sub_224569D7C();
  v157 = v492;
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v158 = sub_2241471F8();
    v159 = v158[2];
    if (!v159)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v159 = v158[2];
    }
    v160 = *(_QWORD *)(v159 + 64);
    v161 = (std::mutex *)(v160 + 32);
    std::mutex::lock((std::mutex *)(v160 + 32));
    v163 = *(_QWORD *)(v160 + 96);
    v162 = *(_QWORD *)(v160 + 104);
    std::mutex::unlock(v161);
    if (v163 != v162)
    {
      v164 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v165 = (std::string *)__p.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v166 = v164 >= 0 ? &__p : v165;
      v167 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v166);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v167 + 24))(v167))
      {
        memset(v534, 0, 32);
        *(_DWORD *)&v534[32] = 728325608;
        kdebug_trace();
        v526.__r_.__value_.__r.__words[0] = (uint64_t)(v530 - (_QWORD)__dst) >> 6;
        sub_22386D76C((double *)&qword_255788F20, v167, (uint64_t *)&v526, "non-cached");
        kdebug_trace();
      }
    }
  }
  memset(v534, 0, 32);
  *(_DWORD *)&v534[32] = 728325624;
  kdebug_trace();
  v168 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v168 = __p.__r_.__value_.__l.__size_;
  if (v168 >= 0x11)
  {
    v169 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v169 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v170 = v169->__r_.__value_.__r.__words[0];
    v171 = v169->__r_.__value_.__l.__size_;
    v172 = v169->__r_.__value_.__s.__data_[16];
    if (v170 == 0x6365722E64337663 && v171 == 0x73746174532E6E6FLL && v172 == 46)
    {
      v175 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v176 = &__p;
      else
        v176 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v177 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v177 = __p.__r_.__value_.__l.__size_;
      v526.__r_.__value_.__r.__words[0] = (uint64_t)(v530 - (_QWORD)__dst) >> 6;
      sub_22318760C((uint64_t *)v175, v176, v177, (uint64_t *)&v526, (uint64_t)"non-cached", 10);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v532 = 0uLL;
    v533 = 0;
    v178 = v530 - (_QWORD)__dst;
    if ((_QWORD)v530 == (_QWORD)__dst)
      goto LABEL_293;
  }
  else
  {
    v532 = 0uLL;
    v533 = 0;
    v178 = v530 - (_QWORD)__dst;
    if ((_QWORD)v530 == (_QWORD)__dst)
      goto LABEL_293;
  }
  v179 = 0;
  v180 = v178 >> 6;
  do
  {
    sub_223A41BCC((uint64_t *)v534, (_QWORD *)(a1 + 8));
    v181 = *(_QWORD *)v534;
    if (!*(_QWORD *)v534
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 329, (uint64_t)"ptr", 3, (uint64_t)"Expected ptr to have been allocated", 35, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v182 = (_QWORD *)*((_QWORD *)&v532 + 1);
    if (*((_QWORD *)&v532 + 1) >= (unint64_t)v533)
    {
      v187 = (_QWORD *)v532;
      v188 = (uint64_t)(*((_QWORD *)&v532 + 1) - v532) >> 4;
      v189 = v188 + 1;
      if ((unint64_t)(v188 + 1) >> 60)
        sub_22316E078();
      v190 = (uint64_t)&v533[-v532];
      if ((uint64_t)&v533[-v532] >> 3 > v189)
        v189 = v190 >> 3;
      if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0)
        v191 = 0xFFFFFFFFFFFFFFFLL;
      else
        v191 = v189;
      if (v191 >> 60)
        sub_223174E94();
      v192 = *(_QWORD *)&v534[8];
      v193 = (char *)operator new(16 * v191);
      v194 = &v193[16 * v188];
      *(_QWORD *)v194 = v181;
      *((_QWORD *)v194 + 1) = v192;
      if (v192)
      {
        v195 = (unint64_t *)(v192 + 8);
        do
          v196 = __ldxr(v195);
        while (__stxr(v196 + 1, v195));
        v182 = (_QWORD *)*((_QWORD *)&v532 + 1);
      }
      v197 = &v193[16 * v191];
      v198 = v194 + 16;
      if (v182 == v187)
      {
        *(_QWORD *)&v532 = &v193[16 * v188];
        *((_QWORD *)&v532 + 1) = v194 + 16;
        v533 = &v193[16 * v191];
      }
      else
      {
        do
        {
          v199 = *((_OWORD *)v182 - 1);
          v182 -= 2;
          *((_OWORD *)v194 - 1) = v199;
          v194 -= 16;
          *v182 = 0;
          v182[1] = 0;
        }
        while (v182 != v187);
        v200 = (_QWORD *)*((_QWORD *)&v532 + 1);
        v187 = (_QWORD *)v532;
        *(_QWORD *)&v532 = v194;
        *((_QWORD *)&v532 + 1) = v198;
        v533 = v197;
        while (v200 != v187)
        {
          v201 = (std::__shared_weak_count *)*(v200 - 1);
          if (v201)
          {
            v202 = (unint64_t *)&v201->__shared_owners_;
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 - 1, v202));
            if (!v203)
            {
              ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
              std::__shared_weak_count::__release_weak(v201);
            }
          }
          v200 -= 2;
        }
      }
      if (v187)
        operator delete(v187);
      *((_QWORD *)&v532 + 1) = v198;
      v186 = *(std::__shared_weak_count **)&v534[8];
      if (*(_QWORD *)&v534[8])
      {
LABEL_286:
        v204 = (unint64_t *)&v186->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
    }
    else
    {
      **((_QWORD **)&v532 + 1) = v181;
      v183 = *(_QWORD *)&v534[8];
      v182[1] = *(_QWORD *)&v534[8];
      if (v183)
      {
        v184 = (unint64_t *)(v183 + 8);
        do
          v185 = __ldxr(v184);
        while (__stxr(v185 + 1, v184));
      }
      *((_QWORD *)&v532 + 1) = v182 + 2;
      v186 = *(std::__shared_weak_count **)&v534[8];
      if (*(_QWORD *)&v534[8])
        goto LABEL_286;
    }
    ++v179;
  }
  while (v179 != v180);
  v157 = v492;
  if (__dst != (void **)v530)
  {
    v206 = *(_QWORD *)(a1 + 688);
    if (!v206)
      sub_223198474();
    (*(void (**)(uint64_t, uint64_t *, void ***, float32x2_t *, char *, __int128 *))(*(_QWORD *)v206 + 48))(v206, v502, &__dst, v504, a5, &v532);
  }
LABEL_293:
  v514 = 0;
  v515 = 0;
  v516 = 0;
  if (!*(_BYTE *)(a1 + 778))
  {
    v208 = __dst;
    v238 = (void **)v530;
    if (__dst != (void **)v530)
    {
      *(_QWORD *)v534 = 0;
      *(_QWORD *)&v534[8] = 0;
      v239 = v530 - (_QWORD)__dst;
      if ((uint64_t)(v530 - (_QWORD)__dst) < 0)
        sub_22316E078();
      v240 = (char *)operator new((unint64_t)v239 >> 2);
      v241 = 0;
      v242 = 16 * (v239 >> 6);
      do
      {
        v243 = &v240[v241];
        *(_QWORD *)v243 = 0;
        *((_QWORD *)v243 + 1) = 0;
        v241 += 16;
      }
      while (v242 != v241);
      v514 = v240;
      v515 = &v240[v242];
      v516 = &v240[v242];
      goto LABEL_363;
    }
LABEL_361:
    v510 = 0;
    v511 = 0;
    v256 = v208;
    v512 = 0;
    if (*(_BYTE *)(a1 + 777))
      goto LABEL_405;
    goto LABEL_408;
  }
  v207 = __dst;
  v208 = (void **)v530;
  v209 = v530 - (_QWORD)__dst;
  if ((void **)v530 == __dst)
    goto LABEL_361;
  if (v209 < 0)
    sub_22316E078();
  v210 = (char *)operator new((unint64_t)v209 >> 2);
  v211 = v209 >> 6;
  v514 = v210;
  v515 = v210;
  v516 = &v210[16 * v211];
  if (v208 == v207)
    goto LABEL_361;
  v212 = 0;
  do
  {
    sub_223A41E94(v534, (_QWORD *)(a1 + 72));
    v213 = *(_QWORD *)v534;
    if (!*(_QWORD *)v534
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 343, (uint64_t)"ptr", 3, (uint64_t)"Expected ptr to have been allocated", 35, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v214 = v515;
    if (v515 >= v516)
    {
      v219 = (char *)v514;
      v220 = (v515 - (_BYTE *)v514) >> 4;
      v221 = v220 + 1;
      if ((unint64_t)(v220 + 1) >> 60)
        sub_22316E078();
      v222 = v516 - (_BYTE *)v514;
      if ((v516 - (_BYTE *)v514) >> 3 > v221)
        v221 = v222 >> 3;
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF0)
        v223 = 0xFFFFFFFFFFFFFFFLL;
      else
        v223 = v221;
      if (v223 >> 60)
        sub_223174E94();
      v224 = *(_QWORD *)&v534[8];
      v225 = (char *)operator new(16 * v223);
      v226 = &v225[16 * v220];
      *(_QWORD *)v226 = v213;
      *((_QWORD *)v226 + 1) = v224;
      if (v224)
      {
        v227 = (unint64_t *)(v224 + 8);
        do
          v228 = __ldxr(v227);
        while (__stxr(v228 + 1, v227));
      }
      v229 = &v225[16 * v223];
      v218 = v226 + 16;
      if (v214 == v219)
      {
        v514 = &v225[16 * v220];
        v516 = v229;
        if (!v214)
          goto LABEL_328;
LABEL_327:
        operator delete(v214);
        goto LABEL_328;
      }
      v230 = v214;
      do
      {
        v231 = *((_OWORD *)v230 - 1);
        v230 -= 16;
        *((_OWORD *)v226 - 1) = v231;
        v226 -= 16;
        *(_QWORD *)v230 = 0;
        *((_QWORD *)v230 + 1) = 0;
      }
      while (v230 != v219);
      v514 = v226;
      v515 = v218;
      v516 = v229;
      do
      {
        v232 = (std::__shared_weak_count *)*((_QWORD *)v214 - 1);
        if (v232)
        {
          v233 = (unint64_t *)&v232->__shared_owners_;
          do
            v234 = __ldaxr(v233);
          while (__stlxr(v234 - 1, v233));
          if (!v234)
          {
            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
            std::__shared_weak_count::__release_weak(v232);
          }
        }
        v214 -= 16;
      }
      while (v214 != v219);
      v214 = v219;
      if (v219)
        goto LABEL_327;
    }
    else
    {
      *(_QWORD *)v515 = v213;
      v215 = *(_QWORD *)&v534[8];
      *((_QWORD *)v214 + 1) = *(_QWORD *)&v534[8];
      if (v215)
      {
        v216 = (unint64_t *)(v215 + 8);
        do
          v217 = __ldxr(v216);
        while (__stxr(v217 + 1, v216));
      }
      v218 = v214 + 16;
    }
LABEL_328:
    v515 = v218;
    v235 = *(std::__shared_weak_count **)&v534[8];
    if (*(_QWORD *)&v534[8])
    {
      v236 = (unint64_t *)(*(_QWORD *)&v534[8] + 8);
      do
        v237 = __ldaxr(v236);
      while (__stlxr(v237 - 1, v236));
      if (!v237)
      {
        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
        std::__shared_weak_count::__release_weak(v235);
      }
    }
    ++v212;
  }
  while (v212 != v211);
  v208 = __dst;
  v238 = (void **)v530;
  if (__dst == (void **)v530)
  {
    v157 = v492;
    goto LABEL_361;
  }
  v245 = (uint64_t *)*((_QWORD *)&v532 + 1);
  v244 = (uint64_t *)v532;
  v246 = (uint64_t *)v514;
  v247 = (uint64_t *)v515;
  if ((_QWORD)v532 != *((_QWORD *)&v532 + 1) || v514 != v515)
  {
    while (1)
    {
      v248 = *v244;
      if (*v244)
      {
        v249 = (std::__shared_weak_count *)v246[1];
        v513[0] = *v246;
        v513[1] = (uint64_t)v249;
        if (v249)
        {
          v250 = (unint64_t *)&v249->__shared_owners_;
          do
            v251 = __ldxr(v250);
          while (__stxr(v251 + 1, v250));
        }
        sub_223A3D088(v248, v513, v504);
        if (!v249)
        {
LABEL_355:
          v244 += 2;
          v246 += 2;
          if (v244 != v245)
            continue;
          goto LABEL_356;
        }
        v252 = (unint64_t *)&v249->__shared_owners_;
        do
          v253 = __ldaxr(v252);
        while (__stlxr(v253 - 1, v252));
      }
      else
      {
        v254 = operator new(0xA0uLL);
        v254[1] = 0;
        v254[2] = 0;
        *v254 = &off_24EC5E010;
        v254[3] = &off_24EC24BA0;
        sub_223A4DB04(v254 + 4);
        v249 = (std::__shared_weak_count *)v246[1];
        *v246 = (uint64_t)(v254 + 3);
        v246[1] = (uint64_t)v254;
        if (!v249)
          goto LABEL_355;
        v255 = (unint64_t *)&v249->__shared_owners_;
        do
          v253 = __ldaxr(v255);
        while (__stlxr(v253 - 1, v255));
      }
      if (v253)
        goto LABEL_355;
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
      v244 += 2;
      v246 += 2;
      if (v244 != v245)
        continue;
LABEL_356:
      if (v246 == v247)
      {
        v208 = __dst;
        v238 = (void **)v530;
        break;
      }
    }
  }
LABEL_363:
  v510 = 0;
  v511 = 0;
  v256 = v208;
  v512 = 0;
  v157 = v492;
  if (v238 == v208)
    goto LABEL_404;
  v257 = 0;
  v258 = ((char *)v238 - (char *)v208) >> 6;
  while (2)
  {
    sub_223A42158(v534, (_QWORD *)(a1 + 136));
    v259 = *(_QWORD *)v534;
    if (!*(_QWORD *)v534
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 366, (uint64_t)"ptr", 3, (uint64_t)"Expected ptr to have been allocated", 35, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v260 = v511;
    if (v511 < (_QWORD *)v512)
    {
      *v511 = v259;
      v261 = *(_QWORD *)&v534[8];
      v260[1] = *(_QWORD *)&v534[8];
      if (v261)
      {
        v262 = (unint64_t *)(v261 + 8);
        do
          v263 = __ldxr(v262);
        while (__stxr(v263 + 1, v262));
      }
      v511 = v260 + 2;
      v264 = *(std::__shared_weak_count **)&v534[8];
      if (!*(_QWORD *)&v534[8])
        goto LABEL_365;
LABEL_399:
      v282 = (unint64_t *)&v264->__shared_owners_;
      do
        v283 = __ldaxr(v282);
      while (__stlxr(v283 - 1, v282));
      if (!v283)
      {
        ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
        std::__shared_weak_count::__release_weak(v264);
      }
      goto LABEL_365;
    }
    v265 = v510;
    v266 = ((char *)v511 - (_BYTE *)v510) >> 4;
    v267 = v266 + 1;
    if ((unint64_t)(v266 + 1) >> 60)
      sub_22316E078();
    v268 = v512 - (_BYTE *)v510;
    if ((v512 - (_BYTE *)v510) >> 3 > v267)
      v267 = v268 >> 3;
    if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF0)
      v269 = 0xFFFFFFFFFFFFFFFLL;
    else
      v269 = v267;
    if (v269 >> 60)
      sub_223174E94();
    v270 = *(_QWORD *)&v534[8];
    v271 = (char *)operator new(16 * v269);
    v272 = &v271[16 * v266];
    *(_QWORD *)v272 = v259;
    *((_QWORD *)v272 + 1) = v270;
    if (v270)
    {
      v273 = (unint64_t *)(v270 + 8);
      do
        v274 = __ldxr(v273);
      while (__stxr(v274 + 1, v273));
      v260 = v511;
    }
    v275 = &v271[16 * v269];
    v276 = v272 + 16;
    if (v260 == v265)
    {
      v510 = &v271[16 * v266];
      v511 = v272 + 16;
      v512 = &v271[16 * v269];
    }
    else
    {
      do
      {
        v277 = *((_OWORD *)v260 - 1);
        v260 -= 2;
        *((_OWORD *)v272 - 1) = v277;
        v272 -= 16;
        *v260 = 0;
        v260[1] = 0;
      }
      while (v260 != v265);
      v265 = v510;
      v278 = v511;
      v510 = v272;
      v511 = v276;
      v512 = v275;
      while (v278 != v265)
      {
        v279 = (std::__shared_weak_count *)*(v278 - 1);
        if (v279)
        {
          v280 = (unint64_t *)&v279->__shared_owners_;
          do
            v281 = __ldaxr(v280);
          while (__stlxr(v281 - 1, v280));
          if (!v281)
          {
            ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
            std::__shared_weak_count::__release_weak(v279);
          }
        }
        v278 -= 2;
      }
    }
    if (v265)
      operator delete(v265);
    v511 = v276;
    v264 = *(std::__shared_weak_count **)&v534[8];
    if (*(_QWORD *)&v534[8])
      goto LABEL_399;
LABEL_365:
    if (++v257 != v258)
      continue;
    break;
  }
  v256 = __dst;
  v208 = (void **)v530;
  v157 = v492;
LABEL_404:
  if (*(_BYTE *)(a1 + 777))
  {
LABEL_405:
    v25 = v256 == v208;
    v256 = v208;
    if (!v25)
    {
      v284 = *(_QWORD *)(a1 + 752);
      if (!v284)
        sub_223198474();
      (*(void (**)(uint64_t, uint64_t *, void ***, float32x2_t *, char *, void **))(*(_QWORD *)v284 + 48))(v284, v502, &__dst, v504, a5, &v510);
      v256 = __dst;
      v208 = (void **)v530;
    }
  }
LABEL_408:
  v285 = v532;
  v508 = (char *)v514;
  v503 = *((_QWORD *)&v532 + 1);
  v505 = v510;
  v495 = v511;
  v497 = v515;
  if (v256 != v208 || (_QWORD)v532 != *((_QWORD *)&v532 + 1) || v514 != v515 || v510 != v511)
  {
    v488 = v208;
    do
    {
      sub_223A42420(&v509);
      if (**(int **)(v509 + 56) > 2
        || ((v322 = *(unsigned __int8 *)(v509 + 72),
             v323 = sub_22322F254(v509, "OSLogSurrogateAppender", 1, 0),
             v324 = v323,
             !v322)
          ? (v325 = v323 == 0)
          : (v325 = 0),
            v325))
      {
LABEL_561:
        v379 = *(_OWORD **)(a1 + 224);
        v378 = *(_QWORD *)(a1 + 232);
        if ((unint64_t)v379 < v378)
          goto LABEL_562;
        goto LABEL_564;
      }
      v499 = v322;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v509;
      __p.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
      __p.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
      v518 = 2;
      v519 = "unknown file";
      v520 = 377;
      v521 = "unknown function";
      v522 = 0;
      v523 = 0;
      v326 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
      v327 = (const char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 16);
      v491 = v327;
      if (*(char *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39) < 0)
      {
        v327 = *(const char **)(v326 + 16);
        v328 = *(_QWORD *)(v326 + 24);
        v489 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v330 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v330 & 1) != 0)
          goto LABEL_480;
      }
      else
      {
        v328 = *(unsigned __int8 *)(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 39);
        v489 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
        v329 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v329 & 1) != 0)
          goto LABEL_480;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&v526);
        sub_223199C58("com.apple.cv3d", (unint64_t)&v526, byte_255788F40);
        if ((_BYTE)v527 && SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v526.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_480:
      if (byte_255788F40[23] >= 0)
        v331 = byte_255788F40;
      else
        v331 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v332 = byte_255788F40[23];
      else
        v332 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)v534 = os_log_create(v331, v327);
      if (v332 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v332 >= 0x17)
      {
        v334 = (v332 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v332 | 7) != 0x17)
          v334 = v332 | 7;
        v335 = v334 + 1;
        v333 = operator new(v334 + 1);
        *(_QWORD *)&v534[16] = v332;
        *(_QWORD *)&v534[24] = v335 | 0x8000000000000000;
        *(_QWORD *)&v534[8] = v333;
LABEL_493:
        memmove(v333, v331, v332);
        goto LABEL_494;
      }
      v534[31] = v332;
      v333 = &v534[8];
      if (v332)
        goto LABEL_493;
LABEL_494:
      v333[v332] = 0;
      v534[32] = 1;
      if (v328 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v208 = v488;
      if (v328 >= 0x17)
      {
        v338 = (v328 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v328 | 7) != 0x17)
          v338 = v328 | 7;
        v339 = v338 + 1;
        v336 = operator new(v338 + 1);
        v535 = v328;
        v536 = v339 | 0x8000000000000000;
        *(_QWORD *)&v534[40] = v336;
        v157 = v492;
      }
      else
      {
        HIBYTE(v536) = v328;
        v336 = &v534[40];
        v157 = v492;
        if (!v328)
        {
          v534[40] = 0;
          v537 = 1;
          v337 = *(NSObject **)v534;
          if ((SHIBYTE(v536) & 0x80000000) == 0)
            goto LABEL_498;
          goto LABEL_504;
        }
      }
      memmove(v336, v327, v328);
      v336[v328] = 0;
      v537 = 1;
      v337 = *(NSObject **)v534;
      if ((SHIBYTE(v536) & 0x80000000) == 0)
      {
LABEL_498:
        if (!v534[32])
          goto LABEL_507;
        goto LABEL_505;
      }
LABEL_504:
      operator delete(*(void **)&v534[40]);
      if (!v534[32])
        goto LABEL_507;
LABEL_505:
      if ((v534[31] & 0x80000000) != 0)
        operator delete(*(void **)&v534[8]);
LABEL_507:
      if (*(_QWORD *)v534)
        os_release(*(void **)v534);
      if (v324 && *(_QWORD *)(v324 + 24))
      {
        v340 = _os_log_pack_size();
        v341 = (std::__shared_weak_count_vtbl *)operator new(v340, (std::align_val_t)8uLL);
        v342 = (std::__shared_weak_count *)operator new();
        v343 = v342;
        v342->__shared_owners_ = 0;
        v344 = (unint64_t *)&v342->__shared_owners_;
        v342->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v342->__shared_weak_owners_ = 0;
        v342[1].__vftable = v341;
        *(_QWORD *)v534 = v341;
        *(_QWORD *)&v534[8] = v341;
        *(_QWORD *)&v534[16] = v342;
        do
          v345 = __ldxr(v344);
        while (__stxr(v345 + 1, v344));
        memset(&v534[24], 0, 24);
        do
          v346 = __ldaxr(v344);
        while (__stlxr(v346 - 1, v344));
        if (!v346)
        {
          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
          std::__shared_weak_count::__release_weak(v343);
        }
        v347 = *(_QWORD *)v534;
        *(_WORD *)_os_log_pack_fill() = 0;
        v348 = operator new();
        v349 = *(unsigned __int8 *)(v489 + 39);
        v350 = *(const char **)(v489 + 16);
        v351 = *(_QWORD *)(v489 + 24);
        v352 = *(_OWORD *)&v534[24];
        *(_OWORD *)(v348 + 8) = *(_OWORD *)&v534[8];
        if ((v349 & 0x80u) != 0)
          v349 = v351;
        else
          v350 = v491;
        *(_QWORD *)v348 = v347;
        *(_QWORD *)&v534[8] = 0;
        *(_QWORD *)&v534[16] = 0;
        *(_OWORD *)(v348 + 24) = v352;
        *(_QWORD *)&v534[24] = 0;
        *(_QWORD *)&v534[32] = 0;
        *(_QWORD *)(v348 + 40) = v350;
        *(_QWORD *)(v348 + 48) = v349;
        *(_BYTE *)(v348 + 56) = 2;
        v531 = 0;
        v526.__r_.__value_.__r.__words[0] = v348;
        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v324 + 24) + 40))(*(_QWORD *)(v324 + 24), &v526);
        v353 = v526.__r_.__value_.__r.__words[0];
        v526.__r_.__value_.__r.__words[0] = 0;
        if (v353)
        {
          v354 = *(std::__shared_weak_count **)(v353 + 32);
          if (v354)
          {
            v355 = (unint64_t *)&v354->__shared_owners_;
            do
              v356 = __ldaxr(v355);
            while (__stlxr(v356 - 1, v355));
            if (!v356)
            {
              ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
              std::__shared_weak_count::__release_weak(v354);
            }
          }
          v357 = *(std::__shared_weak_count **)(v353 + 16);
          if (v357)
          {
            v358 = (unint64_t *)&v357->__shared_owners_;
            do
              v359 = __ldaxr(v358);
            while (__stlxr(v359 - 1, v358));
            if (!v359)
            {
              ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
              std::__shared_weak_count::__release_weak(v357);
            }
          }
          MEMORY[0x227684CE8](v353, 0x10F0C40B62ED6C6);
          v360 = v531;
          v531 = 0;
          if (v360)
          {
            v361 = *(std::__shared_weak_count **)(v360 + 32);
            if (v361)
            {
              v362 = (unint64_t *)&v361->__shared_owners_;
              do
                v363 = __ldaxr(v362);
              while (__stlxr(v363 - 1, v362));
              if (!v363)
              {
                ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                std::__shared_weak_count::__release_weak(v361);
              }
            }
            v364 = *(std::__shared_weak_count **)(v360 + 16);
            if (v364)
            {
              v365 = (unint64_t *)&v364->__shared_owners_;
              do
                v366 = __ldaxr(v365);
              while (__stlxr(v366 - 1, v365));
              if (!v366)
              {
                ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                std::__shared_weak_count::__release_weak(v364);
              }
            }
            MEMORY[0x227684CE8](v360, 0x10F0C40B62ED6C6);
          }
        }
        v367 = *(std::__shared_weak_count **)&v534[32];
        v368 = v499;
        if (*(_QWORD *)&v534[32])
        {
          v369 = (unint64_t *)(*(_QWORD *)&v534[32] + 8);
          do
            v370 = __ldaxr(v369);
          while (__stlxr(v370 - 1, v369));
          if (!v370)
          {
            ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
            std::__shared_weak_count::__release_weak(v367);
          }
        }
        v371 = *(std::__shared_weak_count **)&v534[16];
        if (*(_QWORD *)&v534[16])
        {
          v372 = (unint64_t *)(*(_QWORD *)&v534[16] + 8);
          do
            v373 = __ldaxr(v372);
          while (__stlxr(v373 - 1, v372));
          if (!v373)
          {
            ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
            std::__shared_weak_count::__release_weak(v371);
          }
        }
      }
      else
      {
        os_log_type_enabled(v337, OS_LOG_TYPE_DEBUG);
        *(_WORD *)v534 = 0;
        v374 = (void *)_os_log_send_and_compose_impl();
        v368 = v499;
        if (v374)
          free(v374);
      }
      if (v368)
      {
        sub_22322C138((uint64_t)&__p, "Received depth state request for a non-cached pose.");
        sub_223182C08((uint64_t)&__p);
      }
      sub_223182C08((uint64_t)&__p);
      v375 = v523;
      if (!v523)
        goto LABEL_561;
      v376 = (unint64_t *)&v523->__shared_owners_;
      do
        v377 = __ldaxr(v376);
      while (__stlxr(v377 - 1, v376));
      if (v377)
        goto LABEL_561;
      ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
      std::__shared_weak_count::__release_weak(v375);
      v379 = *(_OWORD **)(a1 + 224);
      v378 = *(_QWORD *)(a1 + 232);
      if ((unint64_t)v379 < v378)
      {
LABEL_562:
        v380 = *(_OWORD *)v256;
        v381 = *((_OWORD *)v256 + 1);
        v382 = *((_OWORD *)v256 + 3);
        v379[2] = *((_OWORD *)v256 + 2);
        v379[3] = v382;
        *v379 = v380;
        v379[1] = v381;
        v383 = v379 + 4;
        goto LABEL_579;
      }
LABEL_564:
      v384 = (_OWORD *)*v157;
      v385 = ((uint64_t)v379 - *v157) >> 6;
      v386 = v385 + 1;
      if ((unint64_t)(v385 + 1) >> 58)
        sub_223257BE4();
      v387 = v378 - (_QWORD)v384;
      if (v387 >> 5 > v386)
        v386 = v387 >> 5;
      if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFC0)
        v388 = 0x3FFFFFFFFFFFFFFLL;
      else
        v388 = v386;
      if (v388)
      {
        if (v388 >> 58)
          sub_223174E94();
        v389 = (char *)operator new(v388 << 6);
      }
      else
      {
        v389 = 0;
      }
      v390 = &v389[64 * v385];
      v391 = *(_OWORD *)v256;
      v392 = *((_OWORD *)v256 + 1);
      v393 = *((_OWORD *)v256 + 3);
      *((_OWORD *)v390 + 2) = *((_OWORD *)v256 + 2);
      *((_OWORD *)v390 + 3) = v393;
      *(_OWORD *)v390 = v391;
      *((_OWORD *)v390 + 1) = v392;
      v394 = v390;
      if (v379 != v384)
      {
        do
        {
          v395 = *(v379 - 4);
          v396 = *(v379 - 3);
          v397 = *(v379 - 1);
          *((_OWORD *)v394 - 2) = *(v379 - 2);
          *((_OWORD *)v394 - 1) = v397;
          *((_OWORD *)v394 - 4) = v395;
          *((_OWORD *)v394 - 3) = v396;
          v394 -= 64;
          v379 -= 4;
        }
        while (v379 != v384);
        v379 = (_OWORD *)*v157;
      }
      v383 = v390 + 64;
      *(_QWORD *)(a1 + 216) = v394;
      *(_QWORD *)(a1 + 224) = v390 + 64;
      *(_QWORD *)(a1 + 232) = &v389[64 * v388];
      if (v379)
        operator delete(v379);
LABEL_579:
      *(_QWORD *)(a1 + 224) = v383;
      *(_OWORD *)v534 = *(_OWORD *)v285;
      *(_QWORD *)v285 = 0;
      *(_QWORD *)(v285 + 8) = 0;
      v398 = *(_OWORD **)(a1 + 248);
      if ((unint64_t)v398 >= *(_QWORD *)(a1 + 256))
      {
        v399 = sub_223524C1C((char **)(a1 + 240), (uint64_t)v534);
        v400 = *(std::__shared_weak_count **)&v534[8];
        *(_QWORD *)(a1 + 248) = v399;
        if (v400)
        {
          v401 = (unint64_t *)&v400->__shared_owners_;
          do
            v402 = __ldaxr(v401);
          while (__stlxr(v402 - 1, v401));
          if (!v402)
          {
            ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
            std::__shared_weak_count::__release_weak(v400);
          }
        }
      }
      else
      {
        *v398 = *(_OWORD *)v534;
        *(_QWORD *)(a1 + 248) = v398 + 1;
      }
      v403 = *(_OWORD *)v508;
      *(_OWORD *)v534 = *(_OWORD *)v508;
      *(_QWORD *)v508 = 0;
      *((_QWORD *)v508 + 1) = 0;
      v405 = *(char **)(a1 + 272);
      v404 = *(_QWORD *)(a1 + 280);
      if ((unint64_t)v405 >= v404)
      {
        v406 = *(char **)(a1 + 264);
        v407 = (v405 - v406) >> 4;
        v408 = v407 + 1;
        if ((unint64_t)(v407 + 1) >> 60)
          sub_22316E078();
        v500 = v403;
        v409 = v404 - (_QWORD)v406;
        if (v409 >> 3 > v408)
          v408 = v409 >> 3;
        if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFF0)
          v410 = 0xFFFFFFFFFFFFFFFLL;
        else
          v410 = v408;
        if (v410 >> 60)
          sub_223174E94();
        v411 = (char *)operator new(16 * v410);
        v412 = &v411[16 * v407];
        *(_OWORD *)v412 = v500;
        v413 = v412 + 16;
        v414 = &v411[16 * v410];
        *(_QWORD *)v534 = 0;
        *(_QWORD *)&v534[8] = 0;
        if (v405 == v406)
        {
          *(_QWORD *)(a1 + 264) = v412;
          *(_QWORD *)(a1 + 272) = v413;
          *(_QWORD *)(a1 + 280) = v414;
        }
        else
        {
          do
          {
            v415 = *((_OWORD *)v405 - 1);
            v405 -= 16;
            *((_OWORD *)v412 - 1) = v415;
            v412 -= 16;
            *(_QWORD *)v405 = 0;
            *((_QWORD *)v405 + 1) = 0;
          }
          while (v405 != v406);
          v405 = *(char **)(a1 + 264);
          v416 = *(char **)(a1 + 272);
          *(_QWORD *)(a1 + 264) = v412;
          *(_QWORD *)(a1 + 272) = v413;
          *(_QWORD *)(a1 + 280) = v414;
          while (v416 != v405)
          {
            v417 = (std::__shared_weak_count *)*((_QWORD *)v416 - 1);
            if (v417)
            {
              v418 = (unint64_t *)&v417->__shared_owners_;
              do
                v419 = __ldaxr(v418);
              while (__stlxr(v419 - 1, v418));
              if (!v419)
              {
                ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
                std::__shared_weak_count::__release_weak(v417);
              }
            }
            v416 -= 16;
          }
        }
        if (v405)
          operator delete(v405);
        v420 = *(std::__shared_weak_count **)&v534[8];
        *(_QWORD *)(a1 + 272) = v413;
        if (v420)
        {
          v421 = (unint64_t *)&v420->__shared_owners_;
          do
            v422 = __ldaxr(v421);
          while (__stlxr(v422 - 1, v421));
          if (!v422)
          {
            ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
            std::__shared_weak_count::__release_weak(v420);
          }
        }
      }
      else
      {
        *(_OWORD *)v405 = v403;
        *(_QWORD *)(a1 + 272) = v405 + 16;
      }
      v423 = *(_OWORD *)v505;
      *(_OWORD *)v534 = *(_OWORD *)v505;
      *v505 = 0;
      v505[1] = 0;
      v425 = *(char **)(a1 + 296);
      v424 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v425 >= v424)
      {
        v427 = *(char **)(a1 + 288);
        v428 = (v425 - v427) >> 4;
        v429 = v428 + 1;
        if ((unint64_t)(v428 + 1) >> 60)
          sub_22316E078();
        v501 = v423;
        v430 = v424 - (_QWORD)v427;
        if (v430 >> 3 > v429)
          v429 = v430 >> 3;
        if ((unint64_t)v430 >= 0x7FFFFFFFFFFFFFF0)
          v431 = 0xFFFFFFFFFFFFFFFLL;
        else
          v431 = v429;
        if (v431 >> 60)
          sub_223174E94();
        v432 = (char *)operator new(16 * v431);
        v433 = &v432[16 * v428];
        *(_OWORD *)v433 = v501;
        v434 = v433 + 16;
        v435 = &v432[16 * v431];
        *(_QWORD *)v534 = 0;
        *(_QWORD *)&v534[8] = 0;
        if (v425 == v427)
        {
          *(_QWORD *)(a1 + 288) = v433;
          *(_QWORD *)(a1 + 296) = v434;
          *(_QWORD *)(a1 + 304) = v435;
        }
        else
        {
          do
          {
            v436 = *((_OWORD *)v425 - 1);
            v425 -= 16;
            *((_OWORD *)v433 - 1) = v436;
            v433 -= 16;
            *(_QWORD *)v425 = 0;
            *((_QWORD *)v425 + 1) = 0;
          }
          while (v425 != v427);
          v425 = *(char **)(a1 + 288);
          v437 = *(char **)(a1 + 296);
          *(_QWORD *)(a1 + 288) = v433;
          *(_QWORD *)(a1 + 296) = v434;
          *(_QWORD *)(a1 + 304) = v435;
          while (v437 != v425)
          {
            v438 = (std::__shared_weak_count *)*((_QWORD *)v437 - 1);
            if (v438)
            {
              v439 = (unint64_t *)&v438->__shared_owners_;
              do
                v440 = __ldaxr(v439);
              while (__stlxr(v440 - 1, v439));
              if (!v440)
              {
                ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                std::__shared_weak_count::__release_weak(v438);
              }
            }
            v437 -= 16;
          }
        }
        if (v425)
          operator delete(v425);
        v441 = *(std::__shared_weak_count **)&v534[8];
        *(_QWORD *)(a1 + 296) = v434;
        if (!v441)
          goto LABEL_640;
        v442 = (unint64_t *)&v441->__shared_owners_;
        do
          v443 = __ldaxr(v442);
        while (__stlxr(v443 - 1, v442));
        if (!v443)
        {
          ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
          std::__shared_weak_count::__release_weak(v441);
          v426 = *(_QWORD *)(*(_QWORD *)(a1 + 248) - 16);
          if (!v426)
            goto LABEL_645;
        }
        else
        {
LABEL_640:
          v426 = *(_QWORD *)(*(_QWORD *)(a1 + 248) - 16);
          if (!v426)
            goto LABEL_645;
        }
      }
      else
      {
        *(_OWORD *)v425 = v423;
        *(_QWORD *)(a1 + 296) = v425 + 16;
        v426 = *(_QWORD *)(*(_QWORD *)(a1 + 248) - 16);
        if (!v426)
          goto LABEL_645;
      }
      if (!*(_DWORD *)(v426 + 64) || !*(_DWORD *)(v426 + 68))
      {
LABEL_645:
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 383, (uint64_t)"raster_depths_.back() && (!raster_depths_.back()->Empty())", 58, (uint64_t)"Raster depth should not be empty", 32, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_741;
        }
      }
      if (*(_BYTE *)(a1 + 777)
        && ((v444 = *(_QWORD *)(*(_QWORD *)(a1 + 296) - 16)) == 0 || !*(_DWORD *)(v444 + 64)
                                                                    || !*(_DWORD *)(v444 + 68))
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 386, (uint64_t)"!config_.render_semantics || (raster_semantics_.back() && (!raster_semantics_.back()->Empty()))", 95, (uint64_t)"Raster semantics should not be empty", 36, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(a1 + 778)&& ((v445 = *(_QWORD *)(*(_QWORD *)(a1 + 272) - 16)) == 0|| !*(_DWORD *)(v445 + 112)|| !*(_DWORD *)(v445 + 116))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 389, (uint64_t)"!config_.compute_normals || raster_normals_.back() && (!raster_normals_.back()->Empty())", 88, (uint64_t)"Raster normal should not be empty", 33, (void (*)(void **))sub_22457406C))
      {
LABEL_741:
        abort();
      }
      v256 += 8;
      v285 += 16;
      v505 += 2;
      v508 += 16;
    }
    while (v256 != v208 || v285 != v503 || v508 != v497 || v505 != v495);
  }
  v287 = *(float32x4_t **)(a1 + 216);
  v286 = *(float32x4_t **)(a1 + 224);
  v288 = ((char *)v286 - (char *)v287) >> 6;
  if (v288 == (uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 4)
    goto LABEL_415;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 393, (uint64_t)"trs_world_to_frame_.size() == raster_depths_.size()", 51, (uint64_t)"poses and depths size do not match", 34, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_761;
  }
  v287 = *(float32x4_t **)(a1 + 216);
  v286 = *(float32x4_t **)(a1 + 224);
  v288 = ((char *)v286 - (char *)v287) >> 6;
LABEL_415:
  if (v288 != (uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 4)
  {
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 395, (uint64_t)"trs_world_to_frame_.size() == raster_normals_.size()", 52, (uint64_t)"poses and normals size do not match", 35, (void (*)(void **))sub_22457406C))
    {
      v287 = *(float32x4_t **)(a1 + 216);
      v286 = *(float32x4_t **)(a1 + 224);
      v288 = ((char *)v286 - (char *)v287) >> 6;
      goto LABEL_418;
    }
LABEL_761:
    abort();
  }
LABEL_418:
  if (v288 != (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 397, (uint64_t)"trs_world_to_frame_.size() == raster_semantics_.size()", 54, (uint64_t)"poses and semantics size do not match", 37, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_761;
    }
    v287 = *(float32x4_t **)(a1 + 216);
    v286 = *(float32x4_t **)(a1 + 224);
  }
  v289 = (float32x4_t *)*v486;
  v290 = (float32x4_t *)v486[1];
  memset(&__p, 0, sizeof(__p));
  v291 = (char *)v290 - (char *)v289;
  if (v290 != v289)
  {
    if ((v291 & 0x8000000000000000) != 0)
      sub_22316E078();
    v292 = (unsigned int *)operator new(v291 >> 4);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v292;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v292[(uint64_t)v291 >> 6];
    bzero(v292, v291 >> 4);
    v293 = (std::string::size_type)v292 + (v291 >> 4);
    __p.__r_.__value_.__l.__size_ = v293;
    if (v287 == v286)
    {
      memset(v292, 255, (((v291 - 64) >> 4) & 0xFFFFFFFFFFFFFFCLL) + 4);
      goto LABEL_430;
    }
    v294 = 0;
    v295 = 1;
    v296 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
    while (1)
    {
LABEL_426:
      v297 = 0;
      v298 = v287;
      while ((vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v296, vabsq_f32(vsubq_f32(*v298, *v289))), (int16x8_t)vcgeq_f32(v296, vabsq_f32(vsubq_f32(v298[1], v289[1])))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v296, vabsq_f32(vsubq_f32(v298[2], v289[2]))), (int16x8_t)vcgeq_f32(v296, vabsq_f32(vsubq_f32(v298[3], v289[3]))))))) & 1) != 0)
      {
        v298 += 4;
        ++v297;
        if (v298 == v286)
        {
          v295 = 0;
          v292[v294] = -1;
          v289 += 4;
          ++v294;
          if (v289 == v290)
            goto LABEL_430;
          goto LABEL_426;
        }
      }
      v292[v294] = v297;
      v289 += 4;
      ++v294;
      if (v289 == v290)
      {
        if ((v295 & 1) != 0)
        {
          *(_QWORD *)v485 = 0;
          *(_QWORD *)(v485 + 8) = 0;
          *(_QWORD *)(v485 + 16) = 0;
          while (1)
          {
            v301 = *v292;
            v302 = *(_OWORD *)(*(_QWORD *)(a1 + 240) + 16 * v301);
            *(_OWORD *)v534 = v302;
            if (*((_QWORD *)&v302 + 1))
            {
              v303 = (unint64_t *)(*((_QWORD *)&v302 + 1) + 8);
              do
                v304 = __ldxr(v303);
              while (__stxr(v304 + 1, v303));
              v301 = *v292;
            }
            v305 = *(_OWORD *)(*(_QWORD *)(a1 + 288) + 16 * v301);
            *(_OWORD *)&v534[16] = v305;
            if (*((_QWORD *)&v305 + 1))
            {
              v306 = (unint64_t *)(*((_QWORD *)&v305 + 1) + 8);
              do
                v307 = __ldxr(v306);
              while (__stxr(v307 + 1, v306));
              v301 = *v292;
            }
            v308 = *(_OWORD *)(*(_QWORD *)(a1 + 264) + 16 * v301);
            *(_OWORD *)&v534[32] = v308;
            if (*((_QWORD *)&v308 + 1))
            {
              v309 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
              do
                v310 = __ldxr(v309);
              while (__stxr(v310 + 1, v309));
            }
            v311 = *(_QWORD *)(v485 + 8);
            if (v311 >= *(_QWORD *)(v485 + 16))
            {
              v313 = sub_223A466B4((void **)v485, (__int128 *)v534);
              v314 = *(std::__shared_weak_count **)&v534[40];
              *(_QWORD *)(v485 + 8) = v313;
              if (!v314)
                goto LABEL_458;
              v315 = (unint64_t *)&v314->__shared_owners_;
              do
                v316 = __ldaxr(v315);
              while (__stlxr(v316 - 1, v315));
              if (!v316)
              {
                ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                std::__shared_weak_count::__release_weak(v314);
                v312 = *(std::__shared_weak_count **)&v534[24];
                if (*(_QWORD *)&v534[24])
                {
LABEL_459:
                  v317 = (unint64_t *)&v312->__shared_owners_;
                  do
                    v318 = __ldaxr(v317);
                  while (__stlxr(v318 - 1, v317));
                  if (!v318)
                  {
                    ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                    std::__shared_weak_count::__release_weak(v312);
                  }
                }
              }
              else
              {
LABEL_458:
                v312 = *(std::__shared_weak_count **)&v534[24];
                if (*(_QWORD *)&v534[24])
                  goto LABEL_459;
              }
            }
            else
            {
              *(_QWORD *)v311 = v302;
              *(_QWORD *)(v311 + 8) = *(_QWORD *)&v534[8];
              *(_QWORD *)v534 = 0;
              *(_QWORD *)&v534[8] = 0;
              *(_OWORD *)(v311 + 16) = *(_OWORD *)&v534[16];
              *(_QWORD *)&v534[16] = 0;
              *(_QWORD *)&v534[24] = 0;
              *(_OWORD *)(v311 + 32) = *(_OWORD *)&v534[32];
              *(_QWORD *)&v534[32] = 0;
              *(_QWORD *)&v534[40] = 0;
              *(_QWORD *)(v485 + 8) = v311 + 48;
              v312 = *(std::__shared_weak_count **)&v534[24];
              if (*(_QWORD *)&v534[24])
                goto LABEL_459;
            }
            v319 = *(std::__shared_weak_count **)&v534[8];
            if (*(_QWORD *)&v534[8])
            {
              v320 = (unint64_t *)(*(_QWORD *)&v534[8] + 8);
              do
                v321 = __ldaxr(v320);
              while (__stlxr(v321 - 1, v320));
              if (!v321)
              {
                ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
                std::__shared_weak_count::__release_weak(v319);
              }
            }
            if (++v292 == (unsigned int *)v293)
              goto LABEL_667;
          }
        }
LABEL_430:
        sub_223A3CF38((uint64_t)v534, (unsigned int **)&__p);
        if (v534[23] >= 0)
          v299 = v534;
        else
          v299 = *(_BYTE **)v534;
        if (v534[23] >= 0)
          v300 = v534[23];
        else
          v300 = *(_QWORD *)&v534[8];
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 195, (uint64_t)"", 0, (uint64_t)v299, v300, (void (*)(void **))sub_22457406C);
        abort();
      }
    }
  }
  *(_QWORD *)v485 = 0;
  *(_QWORD *)(v485 + 8) = 0;
  *(_QWORD *)(v485 + 16) = 0;
LABEL_667:
  *(_QWORD *)v534 = "cv3d.recon.";
  *(_QWORD *)&v534[8] = 11;
  v446 = HIBYTE(v525);
  v447 = &v524;
  if (v525 < 0)
  {
    v447 = v524;
    v446 = v525;
  }
  *(_QWORD *)&v534[16] = v447;
  *(_QWORD *)&v534[24] = v446;
  sub_2231A9820((uint64_t)v534, (uint64_t)&v534[32], 0, 0, &v526);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v448 = sub_2241471F8();
    v449 = v448[2];
    if (!v449)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v449 = v448[2];
    }
    v450 = *(_QWORD *)(v449 + 64);
    v451 = (std::mutex *)(v450 + 32);
    std::mutex::lock((std::mutex *)(v450 + 32));
    v453 = *(_QWORD *)(v450 + 96);
    v452 = *(_QWORD *)(v450 + 104);
    std::mutex::unlock(v451);
    if (v453 != v452)
    {
      v454 = HIBYTE(v526.__r_.__value_.__r.__words[2]);
      v455 = (std::string *)v526.__r_.__value_.__r.__words[0];
      sub_2241471F8();
      v456 = v454 >= 0 ? &v526 : v455;
      v457 = (*(uint64_t (**)(uint64_t *, std::string *))(qword_2557952E0 + 48))(&qword_2557952E0, v456);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v457 + 24))(v457))
      {
        memset(v534, 0, 32);
        *(_DWORD *)&v534[32] = 728325608;
        kdebug_trace();
        v531 = (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 6;
        sub_223197768((double *)&qword_255788F20, v457, &v531, "final_cache");
        kdebug_trace();
      }
    }
  }
  memset(v534, 0, 32);
  *(_DWORD *)&v534[32] = 728325624;
  kdebug_trace();
  v458 = HIBYTE(v526.__r_.__value_.__r.__words[2]);
  if ((v526.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v458 = v526.__r_.__value_.__l.__size_;
  if (v458 >= 0x11)
  {
    v459 = &v526;
    if ((v526.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v459 = (std::string *)v526.__r_.__value_.__r.__words[0];
    v460 = v459->__r_.__value_.__r.__words[0];
    v461 = v459->__r_.__value_.__l.__size_;
    v462 = v459->__r_.__value_.__s.__data_[16];
    if (v460 == 0x6365722E64337663 && v461 == 0x73746174532E6E6FLL && v462 == 46)
    {
      v465 = sub_223187510();
      if ((v526.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v466 = &v526;
      else
        v466 = (std::string *)v526.__r_.__value_.__r.__words[0];
      if ((v526.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v467 = HIBYTE(v526.__r_.__value_.__r.__words[2]);
      else
        v467 = v526.__r_.__value_.__l.__size_;
      v531 = (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 6;
      sub_22318760C((uint64_t *)v465, v466, v467, &v531, (uint64_t)"final_cache", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v526.__r_.__value_.__l.__data_);
  kdebug_trace();
  sub_223A42514(a1, (unsigned int *)__p.__r_.__value_.__l.__data_, (unsigned int *)__p.__r_.__value_.__l.__size_, (const void **)a5);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v468 = v510;
  if (v510)
  {
    v469 = v511;
    v470 = v510;
    if (v511 != v510)
    {
      do
      {
        v471 = (std::__shared_weak_count *)*(v469 - 1);
        if (v471)
        {
          v472 = (unint64_t *)&v471->__shared_owners_;
          do
            v473 = __ldaxr(v472);
          while (__stlxr(v473 - 1, v472));
          if (!v473)
          {
            ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
            std::__shared_weak_count::__release_weak(v471);
          }
        }
        v469 -= 2;
      }
      while (v469 != v468);
      v470 = v510;
    }
    v511 = v468;
    operator delete(v470);
  }
  v474 = (char *)v514;
  if (v514)
  {
    v475 = v515;
    if (v515 != v514)
    {
      do
      {
        v476 = (std::__shared_weak_count *)*((_QWORD *)v475 - 1);
        if (v476)
        {
          v477 = (unint64_t *)&v476->__shared_owners_;
          do
            v478 = __ldaxr(v477);
          while (__stlxr(v478 - 1, v477));
          if (!v478)
          {
            ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
            std::__shared_weak_count::__release_weak(v476);
          }
        }
        v475 -= 16;
      }
      while (v475 != v474);
      v474 = (char *)v514;
    }
    operator delete(v474);
  }
  v479 = v532;
  if ((_QWORD)v532)
  {
    v480 = *((_QWORD *)&v532 + 1);
    v481 = (void *)v532;
    if (*((_QWORD *)&v532 + 1) != (_QWORD)v532)
    {
      do
      {
        v482 = *(std::__shared_weak_count **)(v480 - 8);
        if (v482)
        {
          v483 = (unint64_t *)&v482->__shared_owners_;
          do
            v484 = __ldaxr(v483);
          while (__stlxr(v484 - 1, v483));
          if (!v484)
          {
            ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
            std::__shared_weak_count::__release_weak(v482);
          }
        }
        v480 -= 16;
      }
      while (v480 != v479);
      v481 = (void *)v532;
    }
    *((_QWORD *)&v532 + 1) = v479;
    operator delete(v481);
  }
  if (__dst)
  {
    *(_QWORD *)&v530 = __dst;
    operator delete(__dst);
  }
  if (SHIBYTE(v525) < 0)
    operator delete(v524);
}

void sub_223A413E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  if (*(_BYTE *)(v57 - 168) && *(char *)(v57 - 169) < 0)
    operator delete(*(void **)(v57 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a43);
  if (a57 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223A418B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t j;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t k;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 200) == a2)
  {
    v5 = *(_DWORD *)(a1 + 208);
    if (v5)
      goto LABEL_3;
LABEL_31:
    if (*(_DWORD *)(a1 + 212))
    {
      if (*(_DWORD *)(a3 + 88))
        goto LABEL_35;
    }
    else
    {
      v21 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a1 + 208) = v21;
      if ((_DWORD)v21 != *(_DWORD *)(a3 + 88))
        goto LABEL_35;
    }
LABEL_4:
    if (*(_DWORD *)(a1 + 212) == *(_DWORD *)(a3 + 92))
      return;
    goto LABEL_35;
  }
  *(_QWORD *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 240);
  for (i = *(_QWORD *)(a1 + 248); i != v6; i -= 16)
  {
    v8 = *(std::__shared_weak_count **)(i - 8);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  *(_QWORD *)(a1 + 248) = v6;
  v11 = *(_QWORD *)(a1 + 288);
  for (j = *(_QWORD *)(a1 + 296); j != v11; j -= 16)
  {
    v13 = *(std::__shared_weak_count **)(j - 8);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  *(_QWORD *)(a1 + 296) = v11;
  v16 = *(_QWORD *)(a1 + 264);
  for (k = *(_QWORD *)(a1 + 272); k != v16; k -= 16)
  {
    v18 = *(std::__shared_weak_count **)(k - 8);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  *(_QWORD *)(a1 + 272) = v16;
  v5 = *(_DWORD *)(a1 + 208);
  if (!v5)
    goto LABEL_31;
LABEL_3:
  if (v5 == *(_DWORD *)(a3 + 88))
    goto LABEL_4;
LABEL_35:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 535, (uint64_t)"img_size_ == camera.ImageSize()", 31, (uint64_t)"Can't handle requests for multiple res", 38, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
}

void sub_223A41A90(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AD778((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223A41BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A41BCC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *exception;

  v4 = a2[6];
  v5 = (std::__shared_weak_count *)a2[7];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a2[2];
  if (a2[1] == v8)
  {
    v17 = a2[4];
    if (v17 >= a2[5])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    a2[4] = v17 + 1;
    v9 = operator new();
    *(_QWORD *)v9 = &off_24EC216B8;
    sub_2231C1D58((_WORD *)(v9 + 8));
  }
  else
  {
    v9 = *(_QWORD *)(v8 - 8);
    *(_QWORD *)(v8 - 8) = 0;
    v10 = a2[2];
    v13 = *(_QWORD *)(v10 - 8);
    v12 = (_QWORD *)(v10 - 8);
    v11 = v13;
    *v12 = 0;
    if (v13)
    {
      v14 = *(std::__shared_weak_count **)(v11 + 16);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      MEMORY[0x227684CE8](v11, 0x10E1C40F356210ALL);
    }
    a2[2] = v12;
  }
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a1 = v9;
  v20 = (_QWORD *)operator new();
  *v20 = &off_24EC5DF70;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = v9;
  v20[4] = v4;
  v20[5] = v5;
  a1[1] = (uint64_t)v20;
  if (v5)
  {
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_223A41DC4()
{
  __break(1u);
}

void sub_223A41E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  __cxa_end_catch();
  sub_223167354((uint64_t)va);
  sub_2231FED24((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223A41E94(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *exception;

  v4 = a2[6];
  v5 = (std::__shared_weak_count *)a2[7];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a2[2];
  if (a2[1] == v8)
  {
    v17 = a2[4];
    if (v17 >= a2[5])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    a2[4] = v17 + 1;
    v9 = (_QWORD *)operator new();
    *v9 = &off_24EC24BA0;
    sub_223A4DB04(v9 + 1);
  }
  else
  {
    v9 = *(_QWORD **)(v8 - 8);
    *(_QWORD *)(v8 - 8) = 0;
    v10 = a2[2];
    v13 = *(_QWORD *)(v10 - 8);
    v12 = (_QWORD *)(v10 - 8);
    v11 = v13;
    *v12 = 0;
    if (v13)
    {
      v14 = *(std::__shared_weak_count **)(v11 + 16);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      MEMORY[0x227684CE8](v11, 0x10E1C404B2A450ELL);
    }
    a2[2] = v12;
  }
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a1 = v9;
  v20 = (_QWORD *)operator new();
  *v20 = &off_24EC5DFC0;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = v9;
  v20[4] = v4;
  v20[5] = v5;
  a1[1] = v20;
  if (v5)
  {
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_223A42088()
{
  __break(1u);
}

void sub_223A4212C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  __cxa_end_catch();
  sub_223167354((uint64_t)va);
  sub_223203124((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223A42158(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::runtime_error *exception;

  v4 = a2[6];
  v5 = (std::__shared_weak_count *)a2[7];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a2[2];
  if (a2[1] == v8)
  {
    v17 = a2[4];
    if (v17 >= a2[5])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    a2[4] = v17 + 1;
    v9 = (_QWORD *)operator new();
    *v9 = &off_24EC24788;
    sub_223484C70(v9 + 1);
  }
  else
  {
    v9 = *(_QWORD **)(v8 - 8);
    *(_QWORD *)(v8 - 8) = 0;
    v10 = a2[2];
    v13 = *(_QWORD *)(v10 - 8);
    v12 = (_QWORD *)(v10 - 8);
    v11 = v13;
    *v12 = 0;
    if (v13)
    {
      v14 = *(std::__shared_weak_count **)(v11 + 16);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      MEMORY[0x227684CE8](v11, 0x10F1C405026F4E9);
    }
    a2[2] = v12;
  }
  if (v5)
  {
    v18 = (unint64_t *)&v5->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  *a1 = v9;
  v20 = (_QWORD *)operator new();
  *v20 = &off_24EC5E060;
  v20[1] = 0;
  v20[2] = 0;
  v20[3] = v9;
  v20[4] = v4;
  v20[5] = v5;
  a1[1] = v20;
  if (v5)
  {
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_223A42350()
{
  __break(1u);
}

void sub_223A423F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  __cxa_end_catch();
  sub_223167354((uint64_t)va);
  sub_2231F840C((uint64_t *)va1);
  sub_223167354((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223A42420(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCB90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCB90))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.vlm");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCB88);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCB90);
  }
  *a1 = qword_2540CCB88;
}

void sub_223A424BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCB90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCB90);
  _Unwind_Resume(a1);
}

void sub_223A42514(uint64_t a1, unsigned int *a2, unsigned int *a3, const void **a4)
{
  unsigned int *v5;
  uint64_t v6;
  float32x2_t v11;
  int v12;
  size_t v13;
  unint64_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void *v23;
  void **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  std::mutex *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v41;
  void *v42;
  void **v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  std::mutex *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  std::mutex *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void **v70;
  uint64_t v71;
  uint64_t *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  unsigned __int8 *v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  void **v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  std::mutex *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  unsigned __int8 v143;
  char *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  __int128 v148;
  __int128 v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::string::size_type size;
  std::string *v158;
  std::string::size_type v159;
  std::string::size_type v160;
  int v161;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  std::mutex *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  void **v171;
  uint64_t v172;
  uint64_t *v173;
  __n128 v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int32x2_t v208;
  unsigned __int32 v209;
  float v210;
  float32x2_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  __int128 v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  const void **v248;
  uint64_t v249;
  uint64_t *v250;
  std::string::size_type v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  _BYTE v259[32];
  int v260;
  std::string v261;
  void *v262[2];
  int64_t v263;
  std::string v264;
  uint64_t v265;
  uint64_t v266;
  _BYTE v267[54];
  void *__p[4];
  int v269;
  __int128 v270;
  uint64_t v271;
  __int16 v272;
  std::string v273;
  __int128 __dst;
  _BYTE v275[25];
  char v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  char v284;
  char v285;
  char v286;
  char v287;
  char v288;
  char v289;
  uint64_t v290;

  v290 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v5 = a2;
    v6 = a1;
    __asm { FMOV            V8.2S, #1.0 }
    v11 = (float32x2_t)vdup_n_s32(0x42FF0000u);
    while (1)
    {
      v12 = *((char *)a4 + 23);
      if (v12 >= 0)
        v13 = *((unsigned __int8 *)a4 + 23);
      else
        v13 = (size_t)a4[1];
      v14 = v13 + 1;
      if (v13 + 1 >= 0x7FFFFFFFFFFFFFF8)
        sub_22316DBC0();
      if (v14 >= 0x17)
      {
        v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v16 = v14 | 7;
        v17 = v16 + 1;
        p_dst = (__int128 *)operator new(v16 + 1);
        *(_QWORD *)v275 = v17 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        *((_QWORD *)&__dst + 1) = v13 + 1;
        v6 = a1;
      }
      else
      {
        *(_QWORD *)v275 = 0;
        __dst = 0uLL;
        p_dst = &__dst;
        v275[7] = v13 + 1;
        if (!v13)
          goto LABEL_22;
      }
      if (v12 >= 0)
        v18 = a4;
      else
        v18 = *a4;
      memmove(p_dst, v18, v13);
LABEL_22:
      *(_WORD *)((char *)p_dst + v13) = 46;
      sub_2231C4FB4(v5);
      if (SHIBYTE(__p[2]) >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if (SHIBYTE(__p[2]) >= 0)
        v20 = HIBYTE(__p[2]);
      else
        v20 = (std::string::size_type)__p[1];
      v21 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v19, v20);
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v263 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)v262 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p[2]) < 0)
      {
        operator delete(__p[0]);
        if ((v275[7] & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((v275[7] & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete((void *)__dst);
LABEL_30:
      *(_QWORD *)&__dst = "cv3d.recon.";
      *((_QWORD *)&__dst + 1) = 11;
      v23 = (void *)HIBYTE(v263);
      v24 = v262;
      if (v263 < 0)
      {
        v24 = (void **)v262[0];
        v23 = v262[1];
      }
      *(_QWORD *)v275 = v24;
      *(_QWORD *)&v275[8] = v23;
      sub_2231A9820((uint64_t)&__dst, (uint64_t)&v275[16], 0, 0, (std::string *)v267);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v25 = sub_2241471F8();
        v26 = v25[2];
        if (!v26)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v26 = v25[2];
        }
        v27 = *(_QWORD *)(v26 + 64);
        v28 = (std::mutex *)(v27 + 32);
        std::mutex::lock((std::mutex *)(v27 + 32));
        v30 = *(_QWORD *)(v27 + 96);
        v29 = *(_QWORD *)(v27 + 104);
        std::mutex::unlock(v28);
        if (v30 != v29)
        {
          sub_2241471F8();
          v31 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
          {
            __dst = 0u;
            *(_OWORD *)v275 = 0u;
            *(_DWORD *)&v275[16] = 728325608;
            kdebug_trace();
            v32 = *(_QWORD *)(*(_QWORD *)(v6 + 240) + 16 * *v5);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31))
            {
              HIBYTE(__p[2]) = 5;
              strcpy((char *)__p, "Depth");
              *(_QWORD *)v259 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              *(_QWORD *)&v259[8] = 2;
              v33 = sub_2241471F8();
              sub_22390C450((uint64_t)v33, v31, v32, (uint64_t)__p, (__int128 *)v259);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
            }
            kdebug_trace();
          }
        }
      }
      __dst = 0u;
      *(_OWORD *)v275 = 0u;
      *(_DWORD *)&v275[16] = 728325624;
      kdebug_trace();
      v34 = v267[23];
      if (v267[23] < 0)
        v34 = *(_QWORD *)&v267[8];
      if (v34 >= 0x11)
      {
        v35 = v267;
        if (v267[23] < 0)
          v35 = *(_BYTE **)v267;
        v36 = *(_QWORD *)v35;
        v37 = *((_QWORD *)v35 + 1);
        v38 = v35[16];
        if (v36 == 0x6365722E64337663 && v37 == 0x73746174532E6E6FLL && v38 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v267[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v267);
        if (!*(_BYTE *)(v6 + 777))
          goto LABEL_206;
      }
      else if (!*(_BYTE *)(v6 + 777))
      {
        goto LABEL_206;
      }
      v41 = *(_QWORD *)(*(_QWORD *)(v6 + 288) + 16 * *v5);
      if (!v41)
        goto LABEL_206;
      *(_QWORD *)&__dst = "cv3d.recon.";
      *((_QWORD *)&__dst + 1) = 11;
      v42 = (void *)HIBYTE(v263);
      v43 = v262;
      if (v263 < 0)
      {
        v43 = (void **)v262[0];
        v42 = v262[1];
      }
      *(_QWORD *)v275 = v43;
      *(_QWORD *)&v275[8] = v42;
      sub_2231A9820((uint64_t)&__dst, (uint64_t)&v275[16], 0, 0, (std::string *)v259);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v44 = sub_2241471F8();
        v45 = v44[2];
        if (!v45)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v45 = v44[2];
        }
        v46 = *(_QWORD *)(v45 + 64);
        v47 = (std::mutex *)(v46 + 32);
        std::mutex::lock((std::mutex *)(v46 + 32));
        v49 = *(_QWORD *)(v46 + 96);
        v48 = *(_QWORD *)(v46 + 104);
        std::mutex::unlock(v47);
        if (v49 != v48)
        {
          sub_2241471F8();
          v50 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
          {
            __dst = 0u;
            *(_OWORD *)v275 = 0u;
            *(_DWORD *)&v275[16] = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
            {
              v264.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v264.__r_.__value_.__l.__size_ = 2;
              v51 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v50 + 24))(v50))
              {
                v52 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 56))(v50);
                strcpy((char *)__p, "SemanticsLabel");
                *(void **)((char *)&__p[1] + 7) = 0;
                *(_WORD *)((char *)&__p[2] + 7) = 270;
                sub_223704E54(v41, (__int128 *)__p, (__int128 *)&v264, v267);
                sub_2231AA5A4((uint64_t)v51, v52, (uint64_t)v267);
                v53 = *(std::__shared_weak_count **)&v267[16];
                if (*(_QWORD *)&v267[16])
                {
                  v54 = (unint64_t *)(*(_QWORD *)&v267[16] + 8);
                  do
                    v55 = __ldaxr(v54);
                  while (__stlxr(v55 - 1, v54));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                    std::__shared_weak_count::__release_weak(v53);
                  }
                }
                if (LOBYTE(__p[3]) && SHIBYTE(__p[2]) < 0)
                  operator delete(__p[0]);
              }
            }
            kdebug_trace();
          }
        }
      }
      __dst = 0u;
      *(_OWORD *)v275 = 0u;
      *(_DWORD *)&v275[16] = 728325624;
      kdebug_trace();
      v56 = v259[23];
      if (v259[23] < 0)
        v56 = *(_QWORD *)&v259[8];
      if (v56 >= 0x11)
      {
        v57 = v259;
        if (v259[23] < 0)
          v57 = *(_BYTE **)v259;
        v58 = *(_QWORD *)v57;
        v59 = *((_QWORD *)v57 + 1);
        v60 = v57[16];
        if (v58 == 0x6365722E64337663 && v59 == 0x73746174532E6E6FLL && v60 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v259[23] & 0x80000000) != 0)
        operator delete(*(void **)v259);
      sub_224569D7C();
      sub_224569A80();
      if (!os_variant_has_internal_diagnostics())
        goto LABEL_206;
      v63 = sub_2241471F8();
      v64 = v63[2];
      if (!v64)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v64 = v63[2];
      }
      v65 = *(_QWORD *)(v64 + 64);
      v66 = (std::mutex *)(v65 + 32);
      std::mutex::lock((std::mutex *)(v65 + 32));
      v68 = *(_QWORD *)(v65 + 96);
      v67 = *(_QWORD *)(v65 + 104);
      std::mutex::unlock(v66);
      if (v68 == v67)
      {
LABEL_206:
        if (*(_BYTE *)(v6 + 778))
          goto LABEL_207;
        goto LABEL_6;
      }
      *(_QWORD *)&__dst = "cv3d.recon.";
      *((_QWORD *)&__dst + 1) = 11;
      v69 = (void *)HIBYTE(v263);
      v70 = v262;
      if (v263 < 0)
      {
        v70 = (void **)v262[0];
        v69 = v262[1];
      }
      *(_QWORD *)v275 = v70;
      *(_QWORD *)&v275[8] = v69;
      sub_2231A9820((uint64_t)&__dst, (uint64_t)&v275[16], 0, 0, &v261);
      sub_2241471F8();
      v71 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71))
      {
        memset(__p, 0, sizeof(__p));
        v269 = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71))
        {
          *(_QWORD *)&v270 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v270 + 1) = v252 & 0xFFFFFFFFFFFFFF00 | 2;
          v252 = *((_QWORD *)&v270 + 1);
          v72 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71))
          {
            *(_QWORD *)&__dst = &off_24EC21B18;
            sub_2231C5C38((_DWORD *)(v41 + 64), (_WORD *)&__dst + 4);
            v74 = *(_QWORD *)(v41 + 8);
            v73 = *(std::__shared_weak_count **)(v41 + 16);
            if (v73)
            {
              p_shared_owners = (unint64_t *)&v73->__shared_owners_;
              do
                v76 = __ldxr(p_shared_owners);
              while (__stxr(v76 + 1, p_shared_owners));
              do
                v77 = __ldaxr(p_shared_owners);
              while (__stlxr(v77 - 1, p_shared_owners));
              if (v77)
              {
                if (!v74)
                  goto LABEL_130;
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
                if (!v74)
                  goto LABEL_130;
              }
              v74 = *(_QWORD *)(v41 + 8);
              v78 = *(std::__shared_weak_count **)(v41 + 16);
              if (v78)
              {
                v79 = (unint64_t *)&v78->__shared_owners_;
                do
                  v80 = __ldxr(v79);
                while (__stxr(v80 + 1, v79));
                do
                  v81 = __ldaxr(v79);
                while (__stlxr(v81 - 1, v79));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
LABEL_127:
              if (!*(_BYTE *)(v41 + 81))
                goto LABEL_130;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v74 + 96))(&v266, v74, 0);
              v82 = *((_QWORD *)&__dst + 1);
              v83 = *(std::__shared_weak_count **)v275;
              if (!*(_QWORD *)v275)
                goto LABEL_135;
LABEL_131:
              v84 = (unint64_t *)&v83->__shared_owners_;
              do
                v85 = __ldxr(v84);
              while (__stxr(v85 + 1, v84));
              do
                v86 = __ldaxr(v84);
              while (__stlxr(v86 - 1, v84));
              if (v86)
                goto LABEL_135;
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
              if (!v82)
                goto LABEL_140;
LABEL_136:
              if (!v286)
                goto LABEL_140;
              (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)&__dst + 1) + 96))(&v265, *((_QWORD *)&__dst + 1), 1);
              v87 = *(_DWORD *)(v41 + 64);
              if (!v87)
                goto LABEL_158;
LABEL_141:
              v88 = *(_DWORD *)(v41 + 68);
              if (v88)
              {
                *(_QWORD *)v267 = (unint64_t)v281 << 32;
                v89 = *(unsigned int *)(v41 + 76);
                *(_DWORD *)&v267[12] = *(_DWORD *)(v41 + 72);
                *(_DWORD *)&v267[16] = v282;
                *(_DWORD *)&v267[8] = v87 - 1;
                *(_DWORD *)&v267[20] = v88 - 1;
                *(_QWORD *)&v267[24] = v89 | ((unint64_t)v283 << 32);
                v90 = *(unsigned __int8 **)(v41 + 56);
                if (*(_BYTE *)(v41 + 80) && v90)
                {
                  v92 = *(_QWORD *)(v41 + 8);
                  v91 = *(std::__shared_weak_count **)(v41 + 16);
                  if (v91)
                  {
                    v93 = (unint64_t *)&v91->__shared_owners_;
                    do
                      v94 = __ldxr(v93);
                    while (__stxr(v94 + 1, v93));
                    do
                      v95 = __ldaxr(v93);
                    while (__stlxr(v95 - 1, v93));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                      std::__shared_weak_count::__release_weak(v91);
                    }
                  }
                  (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v92 + 88))(v92, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
                  v90 = *(unsigned __int8 **)(v41 + 56);
                }
                v96 = *(char **)&v275[16];
                if (v285 && *(_QWORD *)&v275[16])
                {
                  (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)&__dst + 1) + 88))(*((_QWORD *)&__dst + 1), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
                  v96 = *(char **)&v275[16];
                }
                memset(&v264, 0, sizeof(v264));
                v97 = *(_DWORD *)&v267[20];
                if (*(_DWORD *)&v267[20])
                {
                  v98 = *(unsigned int *)&v267[24];
                  v99 = *(unsigned int *)&v267[28];
                  do
                  {
                    sub_223A4E694((_BOOL8)v267, &v264, v90, v96);
                    v90 += v98;
                    v96 += v99;
                    --v97;
                  }
                  while (v97);
                }
                sub_223A4E694((_BOOL8)v267, &v264, v90, v96);
              }
              goto LABEL_158;
            }
            if (v74)
              goto LABEL_127;
LABEL_130:
            v266 = 0;
            v82 = *((_QWORD *)&__dst + 1);
            v83 = *(std::__shared_weak_count **)v275;
            if (*(_QWORD *)v275)
              goto LABEL_131;
LABEL_135:
            if (v82)
              goto LABEL_136;
LABEL_140:
            v265 = 0;
            v87 = *(_DWORD *)(v41 + 64);
            if (v87)
              goto LABEL_141;
LABEL_158:
            v100 = v265;
            v265 = 0;
            if (v100)
              (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
            v101 = v266;
            v266 = 0;
            if (v101)
              (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
            strcpy(v259, "SemanticsRGB");
            *(_QWORD *)&v259[13] = v271;
            *(_WORD *)&v259[21] = v272;
            *(_WORD *)&v259[23] = 268;
            v271 = 0;
            v272 = 0;
            sub_2231C6C30(&__dst, (__int128 *)v259, &v270, &v273);
            if (v259[24] && (v259[23] & 0x80000000) != 0)
              operator delete(*(void **)v259);
            v102 = *(std::__shared_weak_count **)v275;
            if (*(_QWORD *)v275)
            {
              v103 = (unint64_t *)(*(_QWORD *)v275 + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 56))(v71);
            v106 = *v105;
            v107 = (std::__shared_weak_count *)v105[1];
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldxr(v108);
              while (__stxr(v109 + 1, v108));
            }
            v110 = *(_OWORD *)&v273.__r_.__value_.__r.__words[1];
            *(_QWORD *)v267 = &off_24EC6A3B8;
            *(_OWORD *)&v267[8] = *(_OWORD *)&v273.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v273.__r_.__value_.__r.__words[1] = 0uLL;
            *(_QWORD *)&__dst = v106;
            *((_QWORD *)&__dst + 1) = v107;
            if (v107)
            {
              v111 = (unint64_t *)&v107->__shared_owners_;
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            *(_QWORD *)v275 = &off_24EC6A3B8;
            *(_OWORD *)&v275[8] = v110;
            if (*((_QWORD *)&v110 + 1))
            {
              v113 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
            }
            (*(void (**)(uint64_t *, __int128 *))(*v72 + 16))(v72, &__dst);
            v115 = *(std::__shared_weak_count **)&v275[16];
            if (*(_QWORD *)&v275[16])
            {
              v116 = (unint64_t *)(*(_QWORD *)&v275[16] + 8);
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v118 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
            if (*((_QWORD *)&__dst + 1))
            {
              v119 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
            v121 = *(std::__shared_weak_count **)&v267[16];
            if (*(_QWORD *)&v267[16])
            {
              v122 = (unint64_t *)(*(_QWORD *)&v267[16] + 8);
              do
                v123 = __ldaxr(v122);
              while (__stlxr(v123 - 1, v122));
              if (!v123)
              {
                ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                std::__shared_weak_count::__release_weak(v121);
              }
            }
            v6 = a1;
            if (v107)
            {
              v124 = (unint64_t *)&v107->__shared_owners_;
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v126 = (std::__shared_weak_count *)v273.__r_.__value_.__r.__words[2];
            if (v273.__r_.__value_.__r.__words[2])
            {
              v127 = (unint64_t *)(v273.__r_.__value_.__r.__words[2] + 8);
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
          }
        }
        kdebug_trace();
      }
      if ((SHIBYTE(v261.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_206;
      operator delete(v261.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(v6 + 778))
      {
LABEL_207:
        v129 = *(_QWORD *)(*(_QWORD *)(v6 + 264) + 16 * *v5);
        if (!v129)
          goto LABEL_6;
        *(_QWORD *)&__dst = "cv3d.recon.";
        *((_QWORD *)&__dst + 1) = 11;
        v130 = (void *)HIBYTE(v263);
        v131 = v262;
        if (v263 < 0)
        {
          v131 = (void **)v262[0];
          v130 = v262[1];
        }
        *(_QWORD *)v275 = v131;
        *(_QWORD *)&v275[8] = v130;
        sub_2231A9820((uint64_t)&__dst, (uint64_t)&v275[16], 0, 0, &v264);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v132 = sub_2241471F8();
          v133 = v132[2];
          if (!v133)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v133 = v132[2];
          }
          v134 = *(_QWORD *)(v133 + 64);
          v135 = (std::mutex *)(v134 + 32);
          std::mutex::lock((std::mutex *)(v134 + 32));
          v137 = *(_QWORD *)(v134 + 96);
          v136 = *(_QWORD *)(v134 + 104);
          std::mutex::unlock(v135);
          if (v137 != v136)
          {
            sub_2241471F8();
            v138 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138))
            {
              memset(v259, 0, sizeof(v259));
              v260 = 728325608;
              kdebug_trace();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138))
              {
                v139 = *(double *)&qword_255788F20;
                v140 = sub_2241471F8();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 24))(v138))
                {
                  v141 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v138 + 56))(v138);
                  v142 = mach_continuous_time();
                  v143 = atomic_load((unsigned __int8 *)&qword_255795560);
                  if ((v143 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
                  {
                    mach_timebase_info((mach_timebase_info_t)__p);
                    LODWORD(v247) = HIDWORD(__p[0]);
                    LODWORD(v246) = __p[0];
                    *(double *)&qword_255795558 = (double)v246 / (double)v247;
                    __cxa_guard_release(&qword_255795560);
                  }
                  *(_QWORD *)&__dst = llround(*(double *)&qword_255795558 * (double)v142);
                  *((_QWORD *)&__dst + 1) = 2;
                  strcpy(v275, "Normals");
                  *(_QWORD *)&v275[8] = v273.__r_.__value_.__r.__words[0];
                  *(_QWORD *)&v275[15] = *(std::string::size_type *)((char *)v273.__r_.__value_.__r.__words + 7);
                  *(_WORD *)&v275[23] = 263;
                  v273.__r_.__value_.__r.__words[0] = 0;
                  *(std::string::size_type *)((char *)v273.__r_.__value_.__r.__words + 7) = 0;
                  v276 = 0;
                  v277 = 0;
                  v278 = (uint64_t)(v139 * 1000000000.0);
                  v279 = 2;
                  v280 = 1;
                  v284 = 0;
                  v287 = 0;
                  v288 = 0;
                  v289 = 0;
                  v144 = (char *)operator new();
                  __p[0] = &off_24EC1F958;
                  sub_223A4E7F0(v129, (uint64_t)&__p[1]);
                  *(_QWORD *)v267 = &off_24EC219D8;
                  sub_2231F9F68((uint64_t)__p, (uint64_t)&v267[8]);
                  v145 = (std::__shared_weak_count *)__p[2];
                  if (__p[2])
                  {
                    v146 = (unint64_t *)((char *)__p[2] + 8);
                    do
                      v147 = __ldaxr(v146);
                    while (__stlxr(v147 - 1, v146));
                    if (!v147)
                    {
                      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                      std::__shared_weak_count::__release_weak(v145);
                    }
                  }
                  *(_QWORD *)v144 = &off_24EC21AC8;
                  *((_QWORD *)v144 + 1) = &off_24EC219D8;
                  v148 = *(_OWORD *)&v267[8];
                  *(_QWORD *)&v267[8] = 0;
                  *(_QWORD *)&v267[16] = 0;
                  v149 = *(_OWORD *)&v267[24];
                  *((_OWORD *)v144 + 1) = v148;
                  *((_OWORD *)v144 + 2) = v149;
                  *(_OWORD *)(v144 + 46) = *(_OWORD *)&v267[38];
                  sub_2231AB0FC((uint64_t)(v144 + 64), (uint64_t)&__dst);
                  *(_QWORD *)v144 = &off_24EC21A48;
                  *(_QWORD *)v267 = &off_24EC219D8;
                  v150 = *(std::__shared_weak_count **)&v267[16];
                  if (*(_QWORD *)&v267[16])
                  {
                    v151 = (unint64_t *)(*(_QWORD *)&v267[16] + 8);
                    do
                      v152 = __ldaxr(v151);
                    while (__stlxr(v152 - 1, v151));
                    if (!v152)
                    {
                      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                      std::__shared_weak_count::__release_weak(v150);
                    }
                  }
                  *(_QWORD *)v144 = &off_24EC6A528;
                  *(_QWORD *)v267 = 0;
                  __p[0] = &off_24EC6A3B8;
                  __p[1] = v144;
                  v153 = (_QWORD *)operator new();
                  *v153 = &off_24EC6A4B0;
                  v153[1] = 0;
                  v153[2] = 0;
                  v153[3] = v144;
                  __p[2] = v153;
                  sub_2231AD66C((uint64_t)&__dst);
                  sub_2231AA5A4((uint64_t)v140, v141, (uint64_t)__p);
                  v6 = a1;
                  v154 = (std::__shared_weak_count *)__p[2];
                  if (__p[2])
                  {
                    v155 = (unint64_t *)((char *)__p[2] + 8);
                    do
                      v156 = __ldaxr(v155);
                    while (__stlxr(v156 - 1, v155));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                      std::__shared_weak_count::__release_weak(v154);
                    }
                  }
                }
              }
              kdebug_trace();
            }
          }
        }
        __dst = 0u;
        *(_OWORD *)v275 = 0u;
        *(_DWORD *)&v275[16] = 728325624;
        kdebug_trace();
        size = HIBYTE(v264.__r_.__value_.__r.__words[2]);
        if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v264.__r_.__value_.__l.__size_;
        if (size >= 0x11)
        {
          v158 = &v264;
          if ((v264.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v158 = (std::string *)v264.__r_.__value_.__r.__words[0];
          v159 = v158->__r_.__value_.__r.__words[0];
          v160 = v158->__r_.__value_.__l.__size_;
          v161 = v158->__r_.__value_.__s.__data_[16];
          if (v159 == 0x6365722E64337663 && v160 == 0x73746174532E6E6FLL && v161 == 46)
            sub_223187510();
        }
        kdebug_trace();
        if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v264.__r_.__value_.__l.__data_);
        sub_224569D7C();
        sub_224569A80();
        if (!os_variant_has_internal_diagnostics())
          goto LABEL_6;
        v164 = sub_2241471F8();
        v165 = v164[2];
        if (!v165)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v165 = v164[2];
        }
        v166 = *(_QWORD *)(v165 + 64);
        v167 = (std::mutex *)(v166 + 32);
        std::mutex::lock((std::mutex *)(v166 + 32));
        v169 = *(_QWORD *)(v166 + 96);
        v168 = *(_QWORD *)(v166 + 104);
        std::mutex::unlock(v167);
        if (v169 == v168)
          goto LABEL_6;
        *(_QWORD *)&__dst = "cv3d.recon.";
        *((_QWORD *)&__dst + 1) = 11;
        v170 = (void *)HIBYTE(v263);
        v171 = v262;
        if (v263 < 0)
        {
          v171 = (void **)v262[0];
          v170 = v262[1];
        }
        *(_QWORD *)v275 = v171;
        *(_QWORD *)&v275[8] = v170;
        sub_2231A9820((uint64_t)&__dst, (uint64_t)&v275[16], 0, 0, &v273);
        sub_2241471F8();
        v172 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172))
        {
          memset(__p, 0, sizeof(__p));
          v269 = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172))
          {
            v261.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v261.__r_.__value_.__l.__size_ = v251 & 0xFFFFFFFFFFFFFF00 | 2;
            v251 = v261.__r_.__value_.__l.__size_;
            v173 = sub_2241471F8();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v172 + 24))(v172))
            {
              *(_QWORD *)&__dst = &off_24EC21B18;
              sub_2231C5C38((_DWORD *)(v129 + 112), (_WORD *)&__dst + 4);
              v176 = *(_QWORD *)(v129 + 8);
              v175 = *(std::__shared_weak_count **)(v129 + 16);
              if (v175)
              {
                v177 = (unint64_t *)&v175->__shared_owners_;
                do
                  v178 = __ldxr(v177);
                while (__stxr(v178 + 1, v177));
                do
                  v179 = __ldaxr(v177);
                while (__stlxr(v179 - 1, v177));
                if (v179)
                {
                  if (!v176)
                    goto LABEL_282;
                }
                else
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                  if (!v176)
                    goto LABEL_282;
                }
                v176 = *(_QWORD *)(v129 + 8);
                v180 = *(std::__shared_weak_count **)(v129 + 16);
                if (v180)
                {
                  v181 = (unint64_t *)&v180->__shared_owners_;
                  do
                    v182 = __ldxr(v181);
                  while (__stxr(v182 + 1, v181));
                  do
                    v183 = __ldaxr(v181);
                  while (__stlxr(v183 - 1, v181));
                  if (!v183)
                  {
                    ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                    std::__shared_weak_count::__release_weak(v180);
                  }
                }
LABEL_279:
                if (!*(_BYTE *)(v129 + 129))
                  goto LABEL_282;
                (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v176 + 96))(&v266, v176, 0);
                v184 = *((_QWORD *)&__dst + 1);
                v185 = *(std::__shared_weak_count **)v275;
                v250 = v173;
                if (!*(_QWORD *)v275)
                  goto LABEL_287;
LABEL_283:
                v186 = (unint64_t *)&v185->__shared_owners_;
                do
                  v187 = __ldxr(v186);
                while (__stxr(v187 + 1, v186));
                do
                  v188 = __ldaxr(v186);
                while (__stlxr(v188 - 1, v186));
                if (v188)
                  goto LABEL_287;
                ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                std::__shared_weak_count::__release_weak(v185);
                if (!v184)
                  goto LABEL_292;
LABEL_288:
                if (!v286)
                  goto LABEL_292;
                (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)&__dst + 1) + 96))(&v265, *((_QWORD *)&__dst + 1), 1);
                if (!*(_DWORD *)(v129 + 88))
                  goto LABEL_327;
LABEL_293:
                v189 = *(_DWORD *)(v129 + 92);
                if (!v189)
                  goto LABEL_327;
                v190 = *(_DWORD *)(v129 + 96);
                if (!v190)
                  goto LABEL_327;
                v192 = *(unsigned int *)(v129 + 104);
                v191 = *(unsigned int *)(v129 + 108);
                v193 = v282;
                v256 = v283;
                v194 = *(_QWORD *)(v129 + 80);
                if (*(_BYTE *)(v129 + 128) && v194)
                {
                  v195 = *(_QWORD *)(v129 + 8);
                  v196 = *(std::__shared_weak_count **)(v129 + 16);
                  if (v196)
                  {
                    v197 = (unint64_t *)&v196->__shared_owners_;
                    do
                      v198 = __ldxr(v197);
                    while (__stxr(v198 + 1, v197));
                    do
                      v199 = __ldaxr(v197);
                    while (__stlxr(v199 - 1, v197));
                    if (!v199)
                    {
                      v255 = v195;
                      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                      std::__shared_weak_count::__release_weak(v196);
                      v195 = v255;
                    }
                  }
                  (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v195 + 88))(v195, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1196");
                  v194 = *(_QWORD *)(v129 + 80);
                }
                v249 = v172;
                v200 = *(_QWORD *)&v275[16];
                if (v285 && *(_QWORD *)&v275[16])
                {
                  (*(void (**)(_QWORD, uint64_t, const char *))(**((_QWORD **)&__dst + 1) + 88))(*((_QWORD *)&__dst + 1), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
                  v200 = *(_QWORD *)&v275[16];
                }
                v201 = v189 - 1;
                memset(v267, 0, 32);
                v202 = 4 * v192;
                v203 = v190 - 1;
                v248 = a4;
                if (v190 == 1)
                {
LABEL_318:
                  v271 = v200;
                  *(_QWORD *)v267 = v194;
                  *(_QWORD *)&v267[16] = v200;
                  if (!v201)
                    goto LABEL_325;
                  v212 = v200 + v193;
                  a4 = v248;
                  v172 = v249;
                  do
                  {
                    sub_223A4E934(v267, v194, &v271);
                    v271 = v212;
                    v194 += v202;
                    v212 += v193;
                    --v201;
                  }
                  while (v201);
                }
                else
                {
                  if (v201)
                  {
                    v204 = 0;
                    v253 = 4 * v191;
                    v254 = v203;
                    do
                    {
                      v205 = v201;
                      v206 = v194;
                      v207 = v200;
                      do
                      {
                        if (!v206
                          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C)|| (v210 = *(float *)v206, v211 = *(float32x2_t *)(v206 + 4), !v207)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                        {
                          abort();
                        }
                        v208 = (int32x2_t)vshl_u32((uint32x2_t)vcvt_s32_f32(vmul_f32(vsub_f32(_D8, v211), v11)), (uint32x2_t)0x1000000008);
                        v209 = vorr_s8((int8x8_t)vdup_lane_s32(v208, 1), (int8x8_t)v208).u32[0];
                        *(_BYTE *)(v207 + 2) = BYTE2(v209);
                        *(_WORD *)v207 = v209 | (int)(float)((float)(1.0 - v210) * 127.5);
                        v207 += v193;
                        v206 += v202;
                        --v205;
                      }
                      while (v205);
                      *(_QWORD *)v267 = v206 - v202;
                      *(_QWORD *)&v267[16] = v207 - v193;
                      v271 = v207;
                      sub_223A4E934(v267, v206, &v271);
                      v194 += v253;
                      v200 += v256;
                      ++v204;
                    }
                    while (v204 != v254);
                    goto LABEL_318;
                  }
                  v213 = 0;
                  v214 = v191;
                  v215 = 0;
                  v216 = 4 * v214;
                  do
                  {
                    v271 = v200 + v213;
                    *(_QWORD *)v267 = v194 + v215;
                    *(_QWORD *)&v267[16] = v200 + v213;
                    sub_223A4E934(v267, v194 + v215, &v271);
                    v215 += v216;
                    v213 += v256;
                    --v203;
                  }
                  while (v203);
                  v194 += v215;
                  v271 = v200 + v213;
                  *(_QWORD *)v267 = v194;
                  *(_QWORD *)&v267[16] = v200 + v213;
LABEL_325:
                  a4 = v248;
                  v172 = v249;
                }
                v174.n128_f32[0] = sub_223A4E934(v267, v194, &v271);
                goto LABEL_327;
              }
              if (v176)
                goto LABEL_279;
LABEL_282:
              v266 = 0;
              v184 = *((_QWORD *)&__dst + 1);
              v185 = *(std::__shared_weak_count **)v275;
              v250 = v173;
              if (*(_QWORD *)v275)
                goto LABEL_283;
LABEL_287:
              if (v184)
                goto LABEL_288;
LABEL_292:
              v265 = 0;
              if (*(_DWORD *)(v129 + 88))
                goto LABEL_293;
LABEL_327:
              v217 = v265;
              v265 = 0;
              if (v217)
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v217 + 8))(v217, v174);
              v218 = v266;
              v266 = 0;
              if (v218)
                (*(void (**)(uint64_t, __n128))(*(_QWORD *)v218 + 8))(v218, v174);
              strcpy(v259, "NormalsRGB");
              *(_QWORD *)&v259[11] = v270;
              *(_DWORD *)&v259[19] = DWORD2(v270);
              *(_WORD *)&v259[23] = 266;
              *(_QWORD *)&v270 = 0;
              DWORD2(v270) = 0;
              sub_2231C6C30(&__dst, (__int128 *)v259, (__int128 *)&v261, &v264);
              if (v259[24] && (v259[23] & 0x80000000) != 0)
                operator delete(*(void **)v259);
              v219 = *(std::__shared_weak_count **)v275;
              if (*(_QWORD *)v275)
              {
                v220 = (unint64_t *)(*(_QWORD *)v275 + 8);
                do
                  v221 = __ldaxr(v220);
                while (__stlxr(v221 - 1, v220));
                if (!v221)
                {
                  ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
                  std::__shared_weak_count::__release_weak(v219);
                }
              }
              v222 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v172 + 56))(v172);
              v223 = *v222;
              v224 = (std::__shared_weak_count *)v222[1];
              if (v224)
              {
                v225 = (unint64_t *)&v224->__shared_owners_;
                do
                  v226 = __ldxr(v225);
                while (__stxr(v226 + 1, v225));
              }
              v227 = *(_OWORD *)&v264.__r_.__value_.__r.__words[1];
              *(_QWORD *)v267 = &off_24EC6A3B8;
              *(_OWORD *)&v267[8] = *(_OWORD *)&v264.__r_.__value_.__r.__words[1];
              *(_OWORD *)&v264.__r_.__value_.__r.__words[1] = 0uLL;
              *(_QWORD *)&__dst = v223;
              *((_QWORD *)&__dst + 1) = v224;
              if (v224)
              {
                v228 = (unint64_t *)&v224->__shared_owners_;
                do
                  v229 = __ldxr(v228);
                while (__stxr(v229 + 1, v228));
              }
              *(_QWORD *)v275 = &off_24EC6A3B8;
              *(_OWORD *)&v275[8] = v227;
              if (*((_QWORD *)&v227 + 1))
              {
                v230 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
                do
                  v231 = __ldxr(v230);
                while (__stxr(v231 + 1, v230));
              }
              (*(void (**)(uint64_t *, __int128 *))(*v250 + 16))(v250, &__dst);
              v232 = *(std::__shared_weak_count **)&v275[16];
              if (*(_QWORD *)&v275[16])
              {
                v233 = (unint64_t *)(*(_QWORD *)&v275[16] + 8);
                do
                  v234 = __ldaxr(v233);
                while (__stlxr(v234 - 1, v233));
                if (!v234)
                {
                  ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                  std::__shared_weak_count::__release_weak(v232);
                }
              }
              v235 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
              if (*((_QWORD *)&__dst + 1))
              {
                v236 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
                do
                  v237 = __ldaxr(v236);
                while (__stlxr(v237 - 1, v236));
                if (!v237)
                {
                  ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                  std::__shared_weak_count::__release_weak(v235);
                }
              }
              v238 = *(std::__shared_weak_count **)&v267[16];
              if (*(_QWORD *)&v267[16])
              {
                v239 = (unint64_t *)(*(_QWORD *)&v267[16] + 8);
                do
                  v240 = __ldaxr(v239);
                while (__stlxr(v240 - 1, v239));
                if (!v240)
                {
                  ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                  std::__shared_weak_count::__release_weak(v238);
                }
              }
              v6 = a1;
              if (v224)
              {
                v241 = (unint64_t *)&v224->__shared_owners_;
                do
                  v242 = __ldaxr(v241);
                while (__stlxr(v242 - 1, v241));
                if (!v242)
                {
                  ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                  std::__shared_weak_count::__release_weak(v224);
                }
              }
              v243 = (std::__shared_weak_count *)v264.__r_.__value_.__r.__words[2];
              if (v264.__r_.__value_.__r.__words[2])
              {
                v244 = (unint64_t *)(v264.__r_.__value_.__r.__words[2] + 8);
                do
                  v245 = __ldaxr(v244);
                while (__stlxr(v245 - 1, v244));
                if (!v245)
                {
                  ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                  std::__shared_weak_count::__release_weak(v243);
                }
              }
            }
          }
          kdebug_trace();
        }
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v273.__r_.__value_.__l.__data_);
      }
LABEL_6:
      if (SHIBYTE(v263) < 0)
      {
        operator delete(v262[0]);
        if (++v5 == a3)
          return;
      }
      else if (++v5 == a3)
      {
        return;
      }
    }
  }
}

void sub_223A443AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  __cxa_guard_abort(&qword_255795560);
  sub_2231874DC((uint64_t)&a33);
  if (a52 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  _Unwind_Resume(a1);
}

_QWORD *sub_223A448AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X2>, float32x2_t *a4@<X3>, const void **a5@<X4>, _OWORD *a6@<X8>)
{
  char **v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unsigned int *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  size_t v32;
  const char *v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  size_t v46;
  std::__shared_weak_count_vtbl *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  const void **v91;
  float32x2_t *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  void *v104;
  uint64_t *v105;
  uint64_t *v106;
  float32x2_t *v107;
  unint64_t v108;
  void **v109;
  _QWORD *v110;
  uint64_t *v111;
  _QWORD *v112;
  void **v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  void *v119;
  char *v120;
  char *v121;
  __int128 v122;
  void **v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  _QWORD *v143;
  _QWORD *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  char *v166;
  __int128 v167;
  char *v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  __int128 v179;
  char *v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  _QWORD *v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  char *v200;
  __int128 v201;
  char *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  _QWORD *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  __int128 v225;
  char *v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  _QWORD *result;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  int v257;
  float32x2_t *v258;
  const char *__src;
  const void **v260;
  _QWORD *v261;
  __int128 v262;
  __int128 v263;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v265;
  const char *v266;
  int v267;
  const char *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  uint64_t v271;
  void *object;
  void *v273[2];
  __int128 v274;
  void *__p[2];
  unint64_t v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  _QWORD v280[3];
  _QWORD *v281;
  uint64_t v282;

  v282 = *MEMORY[0x24BDAC8D0];
  v12 = (char **)(a1 + 216);
  kdebug_trace();
  v280[0] = &off_24EC5E0B0;
  v280[1] = a1;
  v280[2] = 0;
  v281 = v280;
  sub_223A418B4(a1, *a2, (uint64_t)a4);
  v13 = *(char **)(a1 + 216);
  v14 = *(char **)(a1 + 224);
  if (v13 != v14)
  {
    while (1)
    {
      object = v13;
      v273[0] = a3;
      if (sub_2231F73E4((float **)&object))
        break;
      v13 += 64;
      if (v13 == v14)
      {
        v13 = v14;
        break;
      }
    }
    v15 = v13;
    if (v13 != *(char **)(a1 + 224))
    {
      v16 = *v12;
      v17 = (unsigned int *)operator new(4uLL);
      v18 = (unint64_t)(v15 - v16) >> 6;
      *v17 = v18;
      sub_223A42514(a1, v17, v17 + 1, a5);
      operator delete(v17);
      v19 = *(_OWORD *)(*(_QWORD *)(a1 + 240) + 16 * v18);
      *a6 = v19;
      if (*((_QWORD *)&v19 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = *(_OWORD *)(*(_QWORD *)(a1 + 288) + 16 * v18);
      a6[1] = v22;
      if (*((_QWORD *)&v22 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = *(_OWORD *)(*(_QWORD *)(a1 + 264) + 16 * v18);
      a6[2] = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      goto LABEL_318;
    }
  }
  sub_223A42420(&v271);
  if (**(int **)(v271 + 56) <= 2)
  {
    v28 = *(unsigned __int8 *)(v271 + 72);
    v29 = sub_22322F254(v271, "OSLogSurrogateAppender", 1, 0);
    v30 = v29;
    if (v28 || v29 != 0)
    {
      v258 = a4;
      *(_QWORD *)&v263 = &v271;
      *((std::chrono::steady_clock::time_point *)&v263 + 1) = std::chrono::steady_clock::now();
      rep = std::chrono::system_clock::now().__d_.__rep_;
      v265 = 2;
      v266 = "unknown file";
      v267 = 441;
      v269 = 0;
      v270 = 0;
      v268 = "unknown function";
      v255 = v271;
      if (*(char *)(v271 + 39) < 0)
      {
        v33 = *(const char **)(v271 + 16);
        v32 = *(_QWORD *)(v271 + 24);
      }
      else
      {
        v32 = *(unsigned __int8 *)(v271 + 39);
        v33 = (const char *)(v271 + 16);
      }
      v254 = v271 + 16;
      v257 = v28;
      v260 = a5;
      v34 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
        if ((_BYTE)v274 && SHIBYTE(v273[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
      if (byte_255788F40[23] >= 0)
        v35 = byte_255788F40;
      else
        v35 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v36 = byte_255788F40[23];
      else
        v36 = *(_QWORD *)&byte_255788F40[8];
      __src = v33;
      object = os_log_create(v35, v33);
      v37 = v273;
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v36 >= 0x17)
      {
        v256 = v30;
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = operator new(v38 + 1);
        v273[1] = (void *)v36;
        *(_QWORD *)&v274 = v39 | 0x8000000000000000;
        v273[0] = v37;
        v30 = v256;
      }
      else
      {
        BYTE7(v274) = v36;
        if (!v36)
        {
LABEL_39:
          *((_BYTE *)v37 + v36) = 0;
          BYTE8(v274) = 1;
          v40 = __p;
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          a5 = v260;
          if (v32 >= 0x17)
          {
            v42 = v30;
            v43 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v43 = v32 | 7;
            v44 = v43 + 1;
            v40 = operator new(v43 + 1);
            __p[1] = (void *)v32;
            v276 = v44 | 0x8000000000000000;
            __p[0] = v40;
            v30 = v42;
            v41 = __src;
          }
          else
          {
            HIBYTE(v276) = v32;
            v41 = __src;
            if (!v32)
              goto LABEL_47;
          }
          memmove(v40, v41, v32);
LABEL_47:
          *((_BYTE *)v40 + v32) = 0;
          v277 = 1;
          v45 = object;
          if (SHIBYTE(v276) < 0)
            operator delete(__p[0]);
          if (BYTE8(v274) && SBYTE7(v274) < 0)
            operator delete(v273[0]);
          if (object)
            os_release(object);
          if (v30 && *(_QWORD *)(v30 + 24))
          {
            v46 = _os_log_pack_size();
            v47 = (std::__shared_weak_count_vtbl *)operator new(v46, (std::align_val_t)8uLL);
            v48 = (std::__shared_weak_count *)operator new();
            v49 = v48;
            v48->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v48->__shared_owners_;
            v48->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v48->__shared_weak_owners_ = 0;
            v48[1].__vftable = v47;
            object = v47;
            v273[0] = v47;
            v273[1] = v48;
            do
              v51 = __ldxr(p_shared_owners);
            while (__stxr(v51 + 1, p_shared_owners));
            v274 = 0uLL;
            __p[0] = 0;
            do
              v52 = __ldaxr(p_shared_owners);
            while (__stlxr(v52 - 1, p_shared_owners));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v49);
            }
            v53 = object;
            *(_WORD *)_os_log_pack_fill() = 0;
            v54 = operator new();
            v55 = *(unsigned __int8 *)(v255 + 39);
            v56 = v254;
            if ((v55 & 0x80u) != 0)
            {
              v56 = *(_QWORD *)(v255 + 16);
              v55 = *(_QWORD *)(v255 + 24);
            }
            *(_QWORD *)v54 = v53;
            *(_OWORD *)(v54 + 8) = *(_OWORD *)v273;
            v273[0] = 0;
            v273[1] = 0;
            *(_OWORD *)(v54 + 24) = v274;
            v274 = 0uLL;
            *(_QWORD *)(v54 + 40) = v56;
            *(_QWORD *)(v54 + 48) = v55;
            *(_BYTE *)(v54 + 56) = 2;
            v278 = 0;
            v279 = v54;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v30 + 24) + 40))(*(_QWORD *)(v30 + 24), &v279);
            a4 = v258;
            v57 = v279;
            v279 = 0;
            if (v57)
            {
              v58 = *(std::__shared_weak_count **)(v57 + 32);
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v61 = *(std::__shared_weak_count **)(v57 + 16);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
              v64 = v278;
              v278 = 0;
              if (v64)
              {
                v65 = *(std::__shared_weak_count **)(v64 + 32);
                if (v65)
                {
                  v66 = (unint64_t *)&v65->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                    std::__shared_weak_count::__release_weak(v65);
                  }
                }
                v68 = *(std::__shared_weak_count **)(v64 + 16);
                if (v68)
                {
                  v69 = (unint64_t *)&v68->__shared_owners_;
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                MEMORY[0x227684CE8](v64, 0x10F0C40B62ED6C6);
              }
            }
            v71 = (std::__shared_weak_count *)*((_QWORD *)&v274 + 1);
            if (*((_QWORD *)&v274 + 1))
            {
              v72 = (unint64_t *)(*((_QWORD *)&v274 + 1) + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            v74 = (std::__shared_weak_count *)v273[1];
            if (v273[1])
            {
              v75 = (unint64_t *)((char *)v273[1] + 8);
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
          }
          else
          {
            os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG);
            LOWORD(object) = 0;
            v77 = (void *)_os_log_send_and_compose_impl();
            a4 = v258;
            if (v77)
              free(v77);
          }
          if (v257)
          {
            sub_22322C138((uint64_t)&v263, "Received depth state request for a non-cached pose.");
            sub_223182C08((uint64_t)&v263);
          }
          sub_223182C08((uint64_t)&v263);
          v78 = v270;
          if (v270)
          {
            v79 = (unint64_t *)&v270->__shared_owners_;
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          goto LABEL_106;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_39;
    }
  }
LABEL_106:
  v82 = *(char **)(a1 + 224);
  v81 = *(_QWORD *)(a1 + 232);
  v261 = a6;
  if ((unint64_t)v82 >= v81)
  {
    v87 = *v12;
    v88 = (v82 - *v12) >> 6;
    v89 = v88 + 1;
    if ((unint64_t)(v88 + 1) >> 58)
      sub_223257BE4();
    v90 = a2;
    v91 = a5;
    v92 = a4;
    v93 = v81 - (_QWORD)v87;
    if (v93 >> 5 > v89)
      v89 = v93 >> 5;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFC0)
      v94 = 0x3FFFFFFFFFFFFFFLL;
    else
      v94 = v89;
    if (v94)
    {
      if (v94 >> 58)
        sub_223174E94();
      v95 = (char *)operator new(v94 << 6);
    }
    else
    {
      v95 = 0;
    }
    v96 = &v95[64 * v88];
    v97 = &v95[64 * v94];
    v98 = a3[1];
    *(_OWORD *)v96 = *a3;
    *((_OWORD *)v96 + 1) = v98;
    v99 = a3[3];
    *((_OWORD *)v96 + 2) = a3[2];
    *((_OWORD *)v96 + 3) = v99;
    v86 = v96 + 64;
    a4 = v92;
    if (v82 != v87)
    {
      do
      {
        v100 = *((_OWORD *)v82 - 4);
        v101 = *((_OWORD *)v82 - 3);
        v102 = *((_OWORD *)v82 - 1);
        *((_OWORD *)v96 - 2) = *((_OWORD *)v82 - 2);
        *((_OWORD *)v96 - 1) = v102;
        *((_OWORD *)v96 - 4) = v100;
        *((_OWORD *)v96 - 3) = v101;
        v96 -= 64;
        v82 -= 64;
      }
      while (v82 != v87);
      v82 = *v12;
    }
    a5 = v91;
    *(_QWORD *)(a1 + 216) = v96;
    *(_QWORD *)(a1 + 224) = v86;
    *(_QWORD *)(a1 + 232) = v97;
    a2 = v90;
    if (v82)
      operator delete(v82);
  }
  else
  {
    v83 = *a3;
    v84 = a3[1];
    v85 = a3[3];
    *((_OWORD *)v82 + 2) = a3[2];
    *((_OWORD *)v82 + 3) = v85;
    *(_OWORD *)v82 = v83;
    *((_OWORD *)v82 + 1) = v84;
    v86 = v82 + 64;
  }
  *(_QWORD *)(a1 + 224) = v86;
  sub_223A41BCC((uint64_t *)&object, (_QWORD *)(a1 + 8));
  if (!object)
  {
    v127 = operator new(0x70uLL);
    v127[1] = 0;
    v127[2] = 0;
    *v127 = &off_24EC5E130;
    v127[3] = &off_24EC216B8;
    sub_2231C1D58((_WORD *)v127 + 16);
    v128 = (std::__shared_weak_count *)v273[0];
    object = v127 + 3;
    v273[0] = v127;
    if (v128)
    {
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
  }
  v103 = *(_QWORD *)(a1 + 656);
  if (!v103)
    sub_223198474();
  v104 = object;
  v105 = a2;
  v106 = a2;
  v107 = a4;
  (*(void (**)(uint64_t, uint64_t *, _OWORD *, float32x2_t *, const void **, void *))(*(_QWORD *)v103 + 48))(v103, v106, a3, a4, a5, object);
  v109 = *(void ***)(a1 + 248);
  v108 = *(_QWORD *)(a1 + 256);
  if ((unint64_t)v109 < v108)
  {
    *v109 = v104;
    v109[1] = v273[0];
    object = 0;
    v273[0] = 0;
    v110 = v109 + 2;
    v111 = v105;
    v112 = v261;
    goto LABEL_153;
  }
  v113 = *(void ***)(a1 + 240);
  v114 = ((char *)v109 - (char *)v113) >> 4;
  v115 = v114 + 1;
  if ((unint64_t)(v114 + 1) >> 60)
    sub_22352449C();
  v116 = v108 - (_QWORD)v113;
  if (v116 >> 3 > v115)
    v115 = v116 >> 3;
  if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
    v117 = 0xFFFFFFFFFFFFFFFLL;
  else
    v117 = v115;
  if (v117 >> 60)
    sub_223174E94();
  v118 = (char *)operator new(16 * v117);
  v119 = v273[0];
  v120 = &v118[16 * v114];
  *(_QWORD *)v120 = v104;
  *((_QWORD *)v120 + 1) = v119;
  v121 = &v118[16 * v117];
  object = 0;
  v273[0] = 0;
  v110 = v120 + 16;
  if (v109 == v113)
  {
    *(_QWORD *)(a1 + 240) = v120;
    *(_QWORD *)(a1 + 248) = v110;
    *(_QWORD *)(a1 + 256) = v121;
    a4 = v107;
  }
  else
  {
    do
    {
      v122 = *((_OWORD *)v109 - 1);
      v109 -= 2;
      *((_OWORD *)v120 - 1) = v122;
      v120 -= 16;
      *v109 = 0;
      v109[1] = 0;
    }
    while (v109 != v113);
    v109 = *(void ***)(a1 + 240);
    v123 = *(void ***)(a1 + 248);
    *(_QWORD *)(a1 + 240) = v120;
    *(_QWORD *)(a1 + 248) = v110;
    *(_QWORD *)(a1 + 256) = v121;
    a4 = v107;
    if (v123 != v109)
    {
      v111 = v105;
      v112 = v261;
      do
      {
        v124 = (std::__shared_weak_count *)*(v123 - 1);
        if (v124)
        {
          v125 = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(v125);
          while (__stlxr(v126 - 1, v125));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            std::__shared_weak_count::__release_weak(v124);
          }
        }
        v123 -= 2;
      }
      while (v123 != v109);
      goto LABEL_151;
    }
  }
  v111 = v105;
  v112 = v261;
LABEL_151:
  if (v109)
    operator delete(v109);
LABEL_153:
  *(_QWORD *)(a1 + 248) = v110;
  v131 = *(v110 - 2);
  if (!*(_DWORD *)(v131 + 64) || !*(_DWORD *)(v131 + 68))
  {
    v132 = (std::__shared_weak_count *)*(v110 - 1);
    *(v110 - 2) = 0;
    *(v110 - 1) = 0;
    if (v132)
    {
      v133 = (unint64_t *)&v132->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
        if (*(_BYTE *)(a1 + 778))
          goto LABEL_160;
LABEL_177:
        v149 = *(char **)(a1 + 272);
        v148 = *(_QWORD *)(a1 + 280);
        if ((unint64_t)v149 < v148)
        {
          *(_QWORD *)v149 = 0;
          *((_QWORD *)v149 + 1) = 0;
          v150 = (uint64_t)(v149 + 16);
LABEL_235:
          *(_QWORD *)(a1 + 272) = v150;
          goto LABEL_236;
        }
        v151 = *(char **)(a1 + 264);
        v152 = (v149 - v151) >> 4;
        v153 = v152 + 1;
        if ((unint64_t)(v152 + 1) >> 60)
          sub_22316E078();
        v154 = v148 - (_QWORD)v151;
        if (v154 >> 3 > v153)
          v153 = v154 >> 3;
        if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0)
          v155 = 0xFFFFFFFFFFFFFFFLL;
        else
          v155 = v153;
        if (v155)
        {
          if (v155 >> 60)
            sub_223174E94();
          v156 = (char *)operator new(16 * v155);
          v157 = &v156[16 * v152];
          v158 = &v156[16 * v155];
          *(_QWORD *)v157 = 0;
          *((_QWORD *)v157 + 1) = 0;
          v150 = (uint64_t)(v157 + 16);
          if (v149 == v151)
            goto LABEL_232;
        }
        else
        {
          v157 = (char *)(16 * v152);
          v158 = 0;
          *(_QWORD *)v157 = 0;
          *((_QWORD *)v157 + 1) = 0;
          v150 = 16 * v152 + 16;
          if (v149 == v151)
          {
LABEL_232:
            *(_QWORD *)(a1 + 264) = v157;
            *(_QWORD *)(a1 + 272) = v150;
            *(_QWORD *)(a1 + 280) = v158;
LABEL_233:
            if (v149)
              operator delete(v149);
            goto LABEL_235;
          }
        }
        do
        {
          v179 = *((_OWORD *)v149 - 1);
          v149 -= 16;
          *((_OWORD *)v157 - 1) = v179;
          v157 -= 16;
          *(_QWORD *)v149 = 0;
          *((_QWORD *)v149 + 1) = 0;
        }
        while (v149 != v151);
        v149 = *(char **)(a1 + 264);
        v180 = *(char **)(a1 + 272);
        *(_QWORD *)(a1 + 264) = v157;
        *(_QWORD *)(a1 + 272) = v150;
        *(_QWORD *)(a1 + 280) = v158;
        while (v180 != v149)
        {
          v181 = (std::__shared_weak_count *)*((_QWORD *)v180 - 1);
          if (v181)
          {
            v182 = (unint64_t *)&v181->__shared_owners_;
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
          }
          v180 -= 16;
        }
        goto LABEL_233;
      }
    }
  }
  if (!*(_BYTE *)(a1 + 778))
    goto LABEL_177;
LABEL_160:
  sub_223A41E94(&v263, (_QWORD *)(a1 + 72));
  if (!(_QWORD)v263)
  {
    v144 = operator new(0xA0uLL);
    v144[1] = 0;
    v144[2] = 0;
    *v144 = &off_24EC5E010;
    v144[3] = &off_24EC24BA0;
    sub_223A4DB04(v144 + 4);
    v145 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    *(_QWORD *)&v263 = v144 + 3;
    *((_QWORD *)&v263 + 1) = v144;
    if (v145)
    {
      v146 = (unint64_t *)&v145->__shared_owners_;
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
  }
  v135 = *(_QWORD *)(*(_QWORD *)(a1 + 248) - 16);
  if (v135)
  {
    v136 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    v262 = v263;
    if (*((_QWORD *)&v263 + 1))
    {
      v137 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v138 = __ldxr(v137);
      while (__stxr(v138 + 1, v137));
    }
    sub_223A3D088(v135, (uint64_t *)&v262, a4);
    if (v136)
    {
      v139 = (unint64_t *)&v136->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
        v142 = *(char **)(a1 + 272);
        v141 = *(_QWORD *)(a1 + 280);
        if ((unint64_t)v142 < v141)
          goto LABEL_170;
LABEL_190:
        v159 = *(char **)(a1 + 264);
        v160 = (v142 - v159) >> 4;
        v161 = v160 + 1;
        if ((unint64_t)(v160 + 1) >> 60)
          sub_22316E078();
        v162 = v141 - (_QWORD)v159;
        if (v162 >> 3 > v161)
          v161 = v162 >> 3;
        if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF0)
          v163 = 0xFFFFFFFFFFFFFFFLL;
        else
          v163 = v161;
        if (v163 >> 60)
          sub_223174E94();
        v164 = (char *)operator new(16 * v163);
        v165 = &v164[16 * v160];
        *(_OWORD *)v165 = v263;
        v143 = v165 + 16;
        v166 = &v164[16 * v163];
        v263 = 0uLL;
        if (v142 == v159)
        {
          *(_QWORD *)(a1 + 264) = v165;
          *(_QWORD *)(a1 + 272) = v143;
          *(_QWORD *)(a1 + 280) = v166;
        }
        else
        {
          do
          {
            v167 = *((_OWORD *)v142 - 1);
            v142 -= 16;
            *((_OWORD *)v165 - 1) = v167;
            v165 -= 16;
            *(_QWORD *)v142 = 0;
            *((_QWORD *)v142 + 1) = 0;
          }
          while (v142 != v159);
          v142 = *(char **)(a1 + 264);
          v168 = *(char **)(a1 + 272);
          *(_QWORD *)(a1 + 264) = v165;
          *(_QWORD *)(a1 + 272) = v143;
          *(_QWORD *)(a1 + 280) = v166;
          while (v168 != v142)
          {
            v169 = (std::__shared_weak_count *)*((_QWORD *)v168 - 1);
            if (v169)
            {
              v170 = (unint64_t *)&v169->__shared_owners_;
              do
                v171 = __ldaxr(v170);
              while (__stlxr(v171 - 1, v170));
              if (!v171)
              {
                ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                std::__shared_weak_count::__release_weak(v169);
              }
            }
            v168 -= 16;
          }
        }
        if (v142)
          operator delete(v142);
        goto LABEL_210;
      }
    }
  }
  v142 = *(char **)(a1 + 272);
  v141 = *(_QWORD *)(a1 + 280);
  if ((unint64_t)v142 >= v141)
    goto LABEL_190;
LABEL_170:
  *(_OWORD *)v142 = v263;
  v263 = 0uLL;
  v143 = v142 + 16;
LABEL_210:
  *(_QWORD *)(a1 + 272) = v143;
  v172 = *(v143 - 2);
  if (!*(_DWORD *)(v172 + 112) || !*(_DWORD *)(v172 + 116))
  {
    v173 = (std::__shared_weak_count *)*(v143 - 1);
    *(v143 - 2) = 0;
    *(v143 - 1) = 0;
    if (v173)
    {
      v174 = (unint64_t *)&v173->__shared_owners_;
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
  }
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
  if (*((_QWORD *)&v263 + 1))
  {
    v177 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
LABEL_236:
  if (*(_BYTE *)(a1 + 777))
  {
    sub_223A42158(&v263, (_QWORD *)(a1 + 136));
    if (!(_QWORD)v263)
    {
      v206 = operator new(0x70uLL);
      v206[1] = 0;
      v206[2] = 0;
      *v206 = &off_24EC5E180;
      v206[3] = &off_24EC24788;
      sub_223484C70(v206 + 4);
      v207 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
      *(_QWORD *)&v263 = v206 + 3;
      *((_QWORD *)&v263 + 1) = v206;
      if (v207)
      {
        v208 = (unint64_t *)&v207->__shared_owners_;
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
        if (!v209)
        {
          ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
          std::__shared_weak_count::__release_weak(v207);
        }
      }
    }
    v184 = *(_QWORD *)(a1 + 720);
    if (!v184)
      sub_223198474();
    v185 = v263;
    (*(void (**)(uint64_t, uint64_t *, _OWORD *, float32x2_t *, const void **, _QWORD))(*(_QWORD *)v184 + 48))(v184, v111, a3, a4, a5, v263);
    v187 = *(char **)(a1 + 296);
    v186 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v187 >= v186)
    {
      v192 = *(char **)(a1 + 288);
      v193 = (v187 - v192) >> 4;
      v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 60)
        sub_22316E078();
      v195 = v186 - (_QWORD)v192;
      if (v195 >> 3 > v194)
        v194 = v195 >> 3;
      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF0)
        v196 = 0xFFFFFFFFFFFFFFFLL;
      else
        v196 = v194;
      if (v196 >> 60)
        sub_223174E94();
      v197 = (char *)operator new(16 * v196);
      v198 = *((_QWORD *)&v263 + 1);
      v199 = &v197[16 * v193];
      *(_QWORD *)v199 = v185;
      *((_QWORD *)v199 + 1) = v198;
      v200 = &v197[16 * v196];
      v263 = 0uLL;
      v188 = v199 + 16;
      if (v187 == v192)
      {
        *(_QWORD *)(a1 + 288) = v199;
        *(_QWORD *)(a1 + 296) = v188;
        *(_QWORD *)(a1 + 304) = v200;
      }
      else
      {
        do
        {
          v201 = *((_OWORD *)v187 - 1);
          v187 -= 16;
          *((_OWORD *)v199 - 1) = v201;
          v199 -= 16;
          *(_QWORD *)v187 = 0;
          *((_QWORD *)v187 + 1) = 0;
        }
        while (v187 != v192);
        v187 = *(char **)(a1 + 288);
        v202 = *(char **)(a1 + 296);
        *(_QWORD *)(a1 + 288) = v199;
        *(_QWORD *)(a1 + 296) = v188;
        *(_QWORD *)(a1 + 304) = v200;
        while (v202 != v187)
        {
          v203 = (std::__shared_weak_count *)*((_QWORD *)v202 - 1);
          if (v203)
          {
            v204 = (unint64_t *)&v203->__shared_owners_;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
            if (!v205)
            {
              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
              std::__shared_weak_count::__release_weak(v203);
            }
          }
          v202 -= 16;
        }
      }
      if (v187)
        operator delete(v187);
    }
    else
    {
      *(_QWORD *)v187 = v185;
      *((_QWORD *)v187 + 1) = *((_QWORD *)&v263 + 1);
      v263 = 0uLL;
      v188 = v187 + 16;
    }
    *(_QWORD *)(a1 + 296) = v188;
    v218 = *(v188 - 2);
    if (!*(_DWORD *)(v218 + 64) || !*(_DWORD *)(v218 + 68))
    {
      v219 = (std::__shared_weak_count *)*(v188 - 1);
      *(v188 - 2) = 0;
      *(v188 - 1) = 0;
      if (v219)
      {
        v220 = (unint64_t *)&v219->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }
    }
    v222 = (std::__shared_weak_count *)*((_QWORD *)&v263 + 1);
    if (*((_QWORD *)&v263 + 1))
    {
      v223 = (unint64_t *)(*((_QWORD *)&v263 + 1) + 8);
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
    goto LABEL_304;
  }
  v190 = *(char **)(a1 + 296);
  v189 = *(_QWORD *)(a1 + 304);
  if ((unint64_t)v190 >= v189)
  {
    v210 = *(char **)(a1 + 288);
    v211 = (v190 - v210) >> 4;
    v212 = v211 + 1;
    if ((unint64_t)(v211 + 1) >> 60)
      sub_22316E078();
    v213 = v189 - (_QWORD)v210;
    if (v213 >> 3 > v212)
      v212 = v213 >> 3;
    if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFF0)
      v214 = 0xFFFFFFFFFFFFFFFLL;
    else
      v214 = v212;
    if (v214)
    {
      if (v214 >> 60)
        sub_223174E94();
      v215 = (char *)operator new(16 * v214);
      v216 = &v215[16 * v211];
      v217 = &v215[16 * v214];
      *(_QWORD *)v216 = 0;
      *((_QWORD *)v216 + 1) = 0;
      v191 = (uint64_t)(v216 + 16);
      if (v190 == v210)
        goto LABEL_300;
    }
    else
    {
      v216 = (char *)(16 * v211);
      v217 = 0;
      *(_QWORD *)v216 = 0;
      *((_QWORD *)v216 + 1) = 0;
      v191 = 16 * v211 + 16;
      if (v190 == v210)
      {
LABEL_300:
        *(_QWORD *)(a1 + 288) = v216;
        *(_QWORD *)(a1 + 296) = v191;
        *(_QWORD *)(a1 + 304) = v217;
LABEL_301:
        if (v190)
          operator delete(v190);
        goto LABEL_303;
      }
    }
    do
    {
      v225 = *((_OWORD *)v190 - 1);
      v190 -= 16;
      *((_OWORD *)v216 - 1) = v225;
      v216 -= 16;
      *(_QWORD *)v190 = 0;
      *((_QWORD *)v190 + 1) = 0;
    }
    while (v190 != v210);
    v190 = *(char **)(a1 + 288);
    v226 = *(char **)(a1 + 296);
    *(_QWORD *)(a1 + 288) = v216;
    *(_QWORD *)(a1 + 296) = v191;
    *(_QWORD *)(a1 + 304) = v217;
    while (v226 != v190)
    {
      v227 = (std::__shared_weak_count *)*((_QWORD *)v226 - 1);
      if (v227)
      {
        v228 = (unint64_t *)&v227->__shared_owners_;
        do
          v229 = __ldaxr(v228);
        while (__stlxr(v229 - 1, v228));
        if (!v229)
        {
          ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
          std::__shared_weak_count::__release_weak(v227);
        }
      }
      v226 -= 16;
    }
    goto LABEL_301;
  }
  *(_QWORD *)v190 = 0;
  *((_QWORD *)v190 + 1) = 0;
  v191 = (uint64_t)(v190 + 16);
LABEL_303:
  *(_QWORD *)(a1 + 296) = v191;
LABEL_304:
  v231 = *(_QWORD *)(a1 + 240);
  v230 = *(_QWORD *)(a1 + 248);
  v232 = (unsigned int *)operator new(4uLL);
  *v232 = ((unint64_t)(v230 - v231) >> 4) - 1;
  sub_223A42514(a1, v232, v232 + 1, a5);
  operator delete(v232);
  v233 = *(_QWORD *)(a1 + 248);
  v235 = *(_QWORD *)(v233 - 16);
  v234 = *(_QWORD *)(v233 - 8);
  *v112 = v235;
  v112[1] = v234;
  if (v234)
  {
    v236 = (unint64_t *)(v234 + 8);
    do
      v237 = __ldxr(v236);
    while (__stxr(v237 + 1, v236));
  }
  v238 = *(_QWORD *)(a1 + 296);
  v240 = *(_QWORD *)(v238 - 16);
  v239 = *(_QWORD *)(v238 - 8);
  v112[2] = v240;
  v112[3] = v239;
  if (v239)
  {
    v241 = (unint64_t *)(v239 + 8);
    do
      v242 = __ldxr(v241);
    while (__stxr(v242 + 1, v241));
  }
  v243 = *(_QWORD *)(a1 + 272);
  v245 = *(_QWORD *)(v243 - 16);
  v244 = *(_QWORD *)(v243 - 8);
  v112[4] = v245;
  v112[5] = v244;
  if (v244)
  {
    v246 = (unint64_t *)(v244 + 8);
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
  }
  v248 = (std::__shared_weak_count *)v273[0];
  if (v273[0])
  {
    v249 = (unint64_t *)((char *)v273[0] + 8);
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
LABEL_318:
  if (!v281)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v281 + 48))(v281);
  result = v281;
  if (v281 == v280)
  {
    v253 = 4;
    result = v280;
  }
  else
  {
    if (!v281)
      return result;
    v253 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v253))(result, v251);
}

void sub_223A45D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a37)
  {
    if (a36 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a21);
  sub_22318A1C8((_QWORD *)(v41 - 128));
  _Unwind_Resume(a1);
}

void sub_223A45F14(uint64_t a1, unsigned int *a2)
{
  int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  if (!*(_BYTE *)(a1 + 528))
  {
    v3 = *(unsigned __int8 *)(a1 + 776);
    v4 = a1 + 360;
    if (v3)
    {
      v14 = 0;
      v15 = 0;
      sub_223CDB450(v4, a2, &v14);
      v5 = v15;
      if (!v15)
      {
LABEL_15:
        *(_DWORD *)(a1 + 388) = 0;
        *(_BYTE *)(a1 + 528) = 1;
        return;
      }
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
    }
    else
    {
      v8 = *(std::__shared_weak_count **)(a1 + 768);
      v12 = *(_QWORD *)(a1 + 760);
      v13 = v8;
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      sub_223CDB450(v4, a2, &v12);
      v5 = v13;
      if (!v13)
        goto LABEL_15;
      v11 = (unint64_t *)&v13->__shared_owners_;
      do
        v7 = __ldaxr(v11);
      while (__stlxr(v7 - 1, v11));
    }
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    goto LABEL_15;
  }
}

void sub_223A45FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223A4600C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A46020(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t *v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t *v23;
  float32x2_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  const char **v27;
  const char *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string v52;
  __int128 v53;
  __int128 __p;
  char v55;
  char v56;
  uint64_t v57[2];
  std::__shared_weak_count *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  const char *v62;
  uint64_t v63;
  uint64_t (**v64)();
  uint64_t v65;
  _QWORD v66[45];

  v66[44] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      v6 = v4;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v6[2];
    }
    v7 = *(_QWORD *)(v5 + 64);
    v8 = (std::mutex *)(v7 + 32);
    std::mutex::lock((std::mutex *)(v7 + 32));
    v10 = *(_QWORD *)(v7 + 96);
    v9 = *(_QWORD *)(v7 + 104);
    std::mutex::unlock(v8);
    if (v10 != v9)
    {
      v62 = "cv3d.recon.";
      v63 = 11;
      v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) == 0)
        v12 = (uint64_t (**)())a2;
      else
        v12 = *(uint64_t (***)())a2;
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(a2 + 8);
      v64 = v12;
      v65 = v11;
      sub_2231A9820((uint64_t)&v62, (uint64_t)v66, 0, 0, &v52);
      sub_2241471F8();
      v13 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
        {
          *(_QWORD *)&v53 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v53 + 1) = 2;
          v14 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13))
          {
            sub_2241498F4((uint64_t)v57, 0);
            v16 = *a1;
            for (i = a1[1]; v16 != i; v16 += 3)
            {
              v17 = *v16;
              v18 = v16[1];
              if (*v16 != v18)
              {
                do
                {
                  sub_223180698((uint64_t)&v62, *(_QWORD *)v17);
                  v23 = (float32x2_t *)v62;
                  v24 = (float32x2_t *)v63;
                  if (v62 != (const char *)v63)
                  {
                    do
                    {
                      v19.i32[0] = *(_DWORD *)(v17 + 16);
                      v20.i32[0] = *(_DWORD *)(v17 + 32);
                      v21.i32[0] = *(_DWORD *)(v17 + 48);
                      v22.i32[0] = v23[1].i32[0];
                      *(float32x2_t *)v25.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(v17 + 8), COERCE_FLOAT(*v23)), *(float32x2_t *)(v17 + 24), *v23, 1), *(float32x2_t *)(v17 + 40), v22.f32[0]);
                      *(float32x2_t *)&v25.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v19.f32, *v23), v20, *v23, 1), v22, v21);
                      v19.i64[0] = *(_QWORD *)(v17 + 56);
                      v19.i32[2] = *(_DWORD *)(v17 + 64);
                      v26 = vaddq_f32(v25, v19);
                      v23[1].i32[0] = v26.i32[2];
                      *v23 = *(float32x2_t *)v26.f32;
                      v23 = (float32x2_t *)((char *)v23 + 12);
                    }
                    while (v23 != v24);
                  }
                  sub_22414E9E0((uint64_t)v57, (uint64_t)&v62);
                  sub_22316F8F4((uint64_t *)&v62);
                  v17 += 72;
                }
                while (v17 != v18);
              }
            }
            LOBYTE(__p) = 0;
            v56 = 0;
            sub_22329F414((uint64_t)v57, &__p, &v53, &v59);
            if (v56 && v55 < 0)
              operator delete((void *)__p);
            sub_22316F8F4(v57);
            v27 = (const char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
            v28 = *v27;
            v29 = (std::__shared_weak_count *)v27[1];
            if (v29)
            {
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              do
                v31 = __ldxr(p_shared_owners);
              while (__stxr(v31 + 1, p_shared_owners));
            }
            v33 = v60;
            v32 = v61;
            v57[0] = (uint64_t)&off_24EC6A3B8;
            v57[1] = v60;
            v58 = v61;
            v60 = 0;
            v61 = 0;
            v62 = v28;
            v63 = (uint64_t)v29;
            if (v29)
            {
              v34 = (unint64_t *)&v29->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            v64 = &off_24EC6A3B8;
            v65 = v33;
            v66[0] = v32;
            if (v32)
            {
              v36 = (unint64_t *)&v32->__shared_owners_;
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }
            (*(void (**)(uint64_t *, const char **))(*v14 + 16))(v14, &v62);
            v38 = (std::__shared_weak_count *)v66[0];
            if (v66[0])
            {
              v39 = (unint64_t *)(v66[0] + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            v41 = (std::__shared_weak_count *)v63;
            if (v63)
            {
              v42 = (unint64_t *)(v63 + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v44 = v58;
            if (v58)
            {
              v45 = (unint64_t *)&v58->__shared_owners_;
              do
                v46 = __ldaxr(v45);
              while (__stlxr(v46 - 1, v45));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            if (v29)
            {
              v47 = (unint64_t *)&v29->__shared_owners_;
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v49 = v61;
            if (v61)
            {
              v50 = (unint64_t *)&v61->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223A46538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;

  sub_2241231D8(v73);
  v75 = (std::__shared_weak_count *)STACK[0x210];
  if (STACK[0x210])
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(p_shared_owners);
    while (__stlxr(v77 - 1, p_shared_owners));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  sub_2241231D8((uint64_t)&a26);
  if (v72)
  {
    v78 = (unint64_t *)&v72->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  sub_2241231D8((uint64_t)&a72);
  sub_2231874DC((uint64_t)&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_223A46654(uint64_t a1)
{
  sub_223A468A8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A46678()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/include/Reconstruction/VolumetricMapper/MappedStateProvider.h", 153, (uint64_t)"", 0, (uint64_t)"ComputeOccupancyState is not supported by MappedStateProvider", 61, (void (*)(void **))sub_22457406C);
  abort();
}

_OWORD *sub_223A466B4(void **a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v4;
  if (v5 > 0x555555555555555)
    sub_223174E94();
  v7 = 48 * v5;
  v8 = (char *)operator new(48 * v5);
  v9 = *a2;
  v10 = a2[1];
  v11 = &v8[48 * v3];
  v12 = &v8[v7];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v11 = v9;
  *((_OWORD *)v11 + 1) = v10;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_OWORD *)v11 + 2) = a2[2];
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v13 = v11 + 48;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 != *a1)
  {
    do
    {
      v16 = *((_OWORD *)v15 - 3);
      v15 -= 48;
      *((_OWORD *)v11 - 3) = v16;
      v11 -= 48;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_OWORD *)v11 + 1) = *((_OWORD *)v15 + 1);
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = 0;
      *((_OWORD *)v11 + 2) = *((_OWORD *)v15 + 2);
      *((_QWORD *)v15 + 4) = 0;
      *((_QWORD *)v15 + 5) = 0;
    }
    while (v15 != v14);
    v15 = (char *)*a1;
    v17 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (1)
    {
      if (v17 == v15)
        goto LABEL_29;
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (!v18)
        goto LABEL_17;
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        v21 = (std::__shared_weak_count *)*((_QWORD *)v17 - 3);
        if (!v21)
          goto LABEL_23;
      }
      else
      {
LABEL_17:
        v21 = (std::__shared_weak_count *)*((_QWORD *)v17 - 3);
        if (!v21)
          goto LABEL_23;
      }
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
LABEL_23:
      v24 = (std::__shared_weak_count *)*((_QWORD *)v17 - 5);
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v17 -= 48;
    }
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
LABEL_29:
  if (v15)
    operator delete(v15);
  return v13;
}

uint64_t sub_223A468A8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;

  *(_QWORD *)a1 = &off_24EC5DAD8;
  v2 = *(std::__shared_weak_count **)(a1 + 768);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (_QWORD *)(a1 + 728);
      v6 = *(_QWORD **)(a1 + 752);
      if (v6 != (_QWORD *)(a1 + 728))
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = (_QWORD *)(a1 + 728);
  v6 = *(_QWORD **)(a1 + 752);
  if (v6 == (_QWORD *)(a1 + 728))
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = *(_QWORD **)(a1 + 720);
  if (v8 == (_QWORD *)(a1 + 696))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 696);
  }
  else
  {
    if (!v8)
      goto LABEL_16;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_16:
  v10 = *(_QWORD **)(a1 + 688);
  if (v10 == (_QWORD *)(a1 + 664))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 664);
  }
  else
  {
    if (!v10)
      goto LABEL_21;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_21:
  v12 = *(_QWORD **)(a1 + 656);
  if (v12 == (_QWORD *)(a1 + 632))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 632);
  }
  else
  {
    if (!v12)
      goto LABEL_26;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_26:
  v14 = *(_QWORD **)(a1 + 624);
  if (v14 == (_QWORD *)(a1 + 600))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 600);
  }
  else
  {
    if (!v14)
      goto LABEL_31;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_31:
  v16 = *(_QWORD **)(a1 + 592);
  if (v16 == (_QWORD *)(a1 + 568))
  {
    v17 = 4;
    v16 = (_QWORD *)(a1 + 568);
  }
  else
  {
    if (!v16)
      goto LABEL_36;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_36:
  v18 = *(_QWORD **)(a1 + 560);
  if (v18 == (_QWORD *)(a1 + 536))
  {
    v19 = 4;
    v18 = (_QWORD *)(a1 + 536);
  }
  else
  {
    if (!v18)
      goto LABEL_41;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_41:
  sub_223CDB2E8(a1 + 360);
  sub_223A47030(*(_QWORD **)(a1 + 344));
  sub_223A47030(*(_QWORD **)(a1 + 320));
  v20 = *(_QWORD *)(a1 + 288);
  if (v20)
  {
    v21 = *(_QWORD *)(a1 + 296);
    v22 = *(void **)(a1 + 288);
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *(void **)(a1 + 288);
    }
    *(_QWORD *)(a1 + 296) = v20;
    operator delete(v22);
  }
  v26 = *(_QWORD *)(a1 + 264);
  if (v26)
  {
    v27 = *(_QWORD *)(a1 + 272);
    v28 = *(void **)(a1 + 264);
    if (v27 != v26)
    {
      do
      {
        v29 = *(std::__shared_weak_count **)(v27 - 8);
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v27 -= 16;
      }
      while (v27 != v26);
      v28 = *(void **)(a1 + 264);
    }
    *(_QWORD *)(a1 + 272) = v26;
    operator delete(v28);
  }
  v32 = *(_QWORD *)(a1 + 240);
  if (v32)
  {
    v33 = *(_QWORD *)(a1 + 248);
    v34 = *(void **)(a1 + 240);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *(void **)(a1 + 240);
    }
    *(_QWORD *)(a1 + 248) = v32;
    operator delete(v34);
  }
  v38 = *(void **)(a1 + 216);
  if (v38)
  {
    *(_QWORD *)(a1 + 224) = v38;
    operator delete(v38);
  }
  sub_223A46F18(a1 + 136);
  sub_223A46E00(a1 + 72);
  sub_223A46CE8(a1 + 8);
  return a1;
}

void sub_223A46C04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223A46C14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A46C44(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_223A46C50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223A46C60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DB78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A46C90(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_223A46C9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223A46CAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A46CDC(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t sub_223A46CE8(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          v11 = *(std::__shared_weak_count **)(v9 + 16);
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          MEMORY[0x227684CE8](v9, 0x10E1C40F356210ALL);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_223A46E00(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          v11 = *(std::__shared_weak_count **)(v9 + 16);
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          MEMORY[0x227684CE8](v9, 0x10E1C404B2A450ELL);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_223A46F18(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    v7 = *(_QWORD **)(a1 + 16);
    v8 = *(void **)(a1 + 8);
    if (v7 != v6)
    {
      do
      {
        v10 = *--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          v11 = *(std::__shared_weak_count **)(v9 + 16);
          if (v11)
          {
            v12 = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          MEMORY[0x227684CE8](v9, 0x10F1C405026F4E9);
        }
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v8);
  }
  return a1;
}

void sub_223A47030(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (a1)
  {
    sub_223A47030(*a1);
    sub_223A47030(a1[1]);
    v2 = (std::__shared_weak_count *)a1[13];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      operator delete(a1);
    }
    else
    {
LABEL_11:
      operator delete(a1);
    }
  }
}

void sub_223A470EC()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A47100(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5DC18;
  result[1] = v3;
  return result;
}

uint64_t sub_223A47134(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5DC18;
  a2[1] = v2;
  return result;
}

void sub_223A47150(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x2_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  int v31;
  unsigned int v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *__p;
  _OWORD v44[4];
  uint64_t v45;
  __int16 v46;
  void *v47;
  char *v48;
  void *v49;
  char *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 8);
  v12 = a4 + 11;
  sub_223A45F14(v11, (unsigned int *)&a4[11]);
  v13 = *(_QWORD *)(v11 + 560);
  if (!v13)
    sub_223198474();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, float32x4_t *, float32x2_t *))(*(_QWORD *)v13 + 48))(&v47, v13, a2, a3, a4);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v14 = (char *)v47;
  v15 = v48;
  v16 = v48 - (_BYTE *)v47;
  if (v48 != v47)
  {
    v17 = 0x8E38E38E38E38E39 * (v16 >> 3);
    if (v17 >= 0x38E38E38E38E38FLL)
      sub_22352449C();
    v18 = (char *)operator new(v16);
    v19 = 0;
    v49 = v18;
    v51 = (std::__shared_weak_count *)&v18[72 * v17];
    do
    {
      v20 = &v14[v19];
      v21 = &v18[v19];
      *(_QWORD *)v21 = *(_QWORD *)&v14[v19];
      v22 = *(_OWORD *)&v14[v19 + 8];
      v23 = *(_OWORD *)&v14[v19 + 24];
      v24 = *(_OWORD *)&v14[v19 + 40];
      *(_OWORD *)(v21 + 56) = *(_OWORD *)&v14[v19 + 56];
      *(_OWORD *)(v21 + 40) = v24;
      *(_OWORD *)(v21 + 24) = v23;
      *(_OWORD *)(v21 + 8) = v22;
      v19 += 72;
    }
    while (v20 + 72 != v15);
    v50 = &v18[v19];
  }
  __p = operator new(0x18uLL);
  *((_QWORD *)&v44[0] + 1) = (char *)__p + 24;
  *(_QWORD *)&v44[0] = sub_223A47678((uint64_t)v44 + 8, (uint64_t *)&v49, &v52, __p);
  sub_223A46020((uint64_t **)&__p, a5);
  v25 = (char *)__p;
  if (__p)
  {
    v26 = *(char **)&v44[0];
    v27 = __p;
    if (*(void **)&v44[0] != __p)
    {
      v28 = *(char **)&v44[0];
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 3);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v26 - 2) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = __p;
    }
    *(_QWORD *)&v44[0] = v25;
    operator delete(v27);
  }
  if (v49)
  {
    v50 = (char *)v49;
    operator delete(v49);
  }
  v31 = *(unsigned __int8 *)(v11 + 776);
  sub_223CDAB6C(v11 + 360);
  if (v31)
    v32 = 1;
  else
    v32 = 5;
  sub_223CDCDE8(*(_QWORD *)(v11 + 432), (uint64_t *)&v47, a3, a4, v32, 0, &v49);
  if (v53 && v54)
  {
    if (!*(_DWORD *)(a6 + 64) || !*(_DWORD *)(a6 + 68))
    {
      __p = &off_24EC216B8;
      sub_2231FF60C(v12, v44);
      v33 = v44[0];
      v44[0] = 0uLL;
      v34 = *(std::__shared_weak_count **)(a6 + 16);
      *(_OWORD *)(a6 + 8) = v33;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      *(_OWORD *)(a6 + 24) = v44[1];
      *(_OWORD *)(a6 + 40) = v44[2];
      *(_OWORD *)(a6 + 56) = v44[3];
      *(_QWORD *)(a6 + 72) = v45;
      *(_WORD *)(a6 + 80) = v46;
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v44[0] + 1);
      if (*((_QWORD *)&v44[0] + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v44[0] + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    sub_223206984((uint64_t)&v49, a6);
  }
  v40 = v51;
  if (v51)
  {
    v41 = (unint64_t *)&v51->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v47)
  {
    v48 = (char *)v47;
    operator delete(v47);
  }
}

void sub_223A474D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,std::__shared_weak_count *a27)
{
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
      std::__shared_weak_count::__release_weak(a27);
    }
  }
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A47600(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPo"
                     "seIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl10000"
                     "00000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST"
                     "_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14M"
                                "eshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIx"
                                "NS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEER"
                                "KNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25Map"
                                "pedStateProviderConfigEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A4766C()
{
  return &unk_24EC5DC88;
}

_QWORD *sub_223A47678(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v7 = *v6;
      v8 = v6[1];
      v9 = v8 - *v6;
      if (v8 != *v6)
      {
        v10 = 0x8E38E38E38E38E39 * (v9 >> 3);
        if (v10 >= 0x38E38E38E38E38FLL)
          sub_22352449C();
        v11 = (char *)operator new(v9);
        v12 = 0;
        *a4 = v11;
        a4[1] = v11;
        a4[2] = &v11[72 * v10];
        do
        {
          v13 = v7 + v12;
          v14 = &v11[v12];
          *(_QWORD *)v14 = *(_QWORD *)(v7 + v12);
          v15 = *(_OWORD *)(v7 + v12 + 8);
          v16 = *(_OWORD *)(v7 + v12 + 24);
          v17 = *(_OWORD *)(v7 + v12 + 40);
          *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + v12 + 56);
          *(_OWORD *)(v14 + 40) = v17;
          *(_OWORD *)(v14 + 24) = v16;
          *(_OWORD *)(v14 + 8) = v15;
          v12 += 72;
        }
        while (v13 + 72 != v8);
        a4[1] = &v11[v12];
      }
      v6 += 3;
      a4 += 3;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_223A477B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223A477C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223A477F0()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A47804(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5DCA8;
  result[1] = v3;
  return result;
}

uint64_t sub_223A47838(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5DCA8;
  a2[1] = v2;
  return result;
}

void sub_223A47854(uint64_t a1, uint64_t a2, _QWORD *a3, float32x2_t *a4, uint64_t a5, unint64_t **a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (**v13)();
  uint64_t (**v14)();
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (**v19)();
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  int v25;
  unint64_t **v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char **v33;
  char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char **v50;
  unint64_t v51;
  BOOL v52;
  char **v53;
  __int128 v54;
  __int128 v55;
  char v56;
  char **v57;
  char **v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  BOOL v74;
  char **v75;
  char *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int16 v81;
  unint64_t v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  char *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  __int16 v96;
  unint64_t v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  __int16 v102;
  __int128 v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  __int16 v107;
  __int128 v108;
  char *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  __int128 v119;
  char *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  char *v148;
  char *v149;
  void *v150;
  char *v151;
  void *v152;
  void *v153;
  unsigned int v154;
  _QWORD *v155;
  float32x2_t *v156;
  unint64_t *v158;
  uint64_t v161;
  void **v162;
  std::__shared_weak_count *v163;
  void *v164;
  void *__p;
  char *v166;
  unint64_t v167;
  void *v168;
  char *v169;
  unint64_t v170;
  uint64_t (**v171)();
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t (**v174)();
  __int128 v175;
  _OWORD v176[2];
  __int128 v177;
  uint64_t v178;
  __int16 v179;

  v161 = *(_QWORD *)(a1 + 8);
  v156 = a4 + 11;
  sub_223A45F14(v161, (unsigned int *)&a4[11]);
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v155 = a3;
  sub_223A48800((uint64_t)&v168, (uint64_t)(a3[1] - *a3) >> 6);
  v8 = a3;
  v10 = *a3;
  v9 = a3[1];
  if (*v8 != v9)
  {
    do
    {
      v11 = *(_QWORD *)(v161 + 560);
      if (!v11)
        sub_223198474();
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t, float32x2_t *))(*(_QWORD *)v11 + 48))(&v174, v11, a2, v10, a4);
      v12 = v169;
      if ((unint64_t)v169 >= v170)
      {
        v24 = sub_223A48AC0((char **)&v168, (uint64_t)v174, v175);
      }
      else
      {
        *(_QWORD *)v169 = 0;
        *((_QWORD *)v12 + 1) = 0;
        *((_QWORD *)v12 + 2) = 0;
        v14 = v174;
        v13 = (uint64_t (**)())v175;
        v15 = v175 - (_QWORD)v174;
        if ((uint64_t (**)())v175 != v174)
        {
          v16 = 0x8E38E38E38E38E39 * (v15 >> 3);
          if (v16 >= 0x38E38E38E38E38FLL)
            sub_22352449C();
          v17 = (char *)operator new(v15);
          v18 = 0;
          *(_QWORD *)v12 = v17;
          *((_QWORD *)v12 + 1) = v17;
          *((_QWORD *)v12 + 2) = &v17[72 * v16];
          do
          {
            v19 = &v14[v18];
            v20 = &v17[v18 * 8];
            *(_QWORD *)v20 = v14[v18];
            v21 = *(_OWORD *)&v14[v18 + 1];
            v22 = *(_OWORD *)&v14[v18 + 3];
            v23 = *(_OWORD *)&v14[v18 + 5];
            *(_OWORD *)(v20 + 56) = *(_OWORD *)&v14[v18 + 7];
            *(_OWORD *)(v20 + 40) = v23;
            *(_OWORD *)(v20 + 24) = v22;
            *(_OWORD *)(v20 + 8) = v21;
            v18 += 9;
          }
          while (v19 + 9 != v13);
          *((_QWORD *)v12 + 1) = &v17[v18 * 8];
        }
        v24 = v12 + 24;
      }
      v169 = v24;
      if (v174)
      {
        *(_QWORD *)&v175 = v174;
        operator delete(v174);
      }
      v10 += 64;
    }
    while (v10 != v9);
  }
  sub_223A46020((uint64_t **)&v168, a5);
  if (*(_BYTE *)(v161 + 776))
    v25 = 1;
  else
    v25 = 5;
  __p = 0;
  v166 = 0;
  v167 = 0;
  v26 = a6;
  sub_223A48920((uint64_t)&__p, ((char *)a6[1] - (char *)*a6) >> 4);
  sub_223227930((uint64_t *)&v164);
  v154 = v25;
  sub_223226E78((void ***)(v161 + 760), v27, v28, v29, v30, v31, &v162);
  v32 = *a6;
  v158 = a6[1];
  if (*v26 != v158)
  {
    v33 = (char **)(v161 + 320);
    do
    {
      v35 = *v32;
      if (*(_DWORD *)(*v32 + 64) && *(_DWORD *)(v35 + 68))
      {
        v36 = *v33;
        if (*v33)
          goto LABEL_74;
        goto LABEL_86;
      }
      v174 = &off_24EC216B8;
      sub_2231FF60C(v156, &v175);
      v37 = *v32;
      v38 = v175;
      v175 = 0uLL;
      v39 = *(std::__shared_weak_count **)(v37 + 16);
      *(_OWORD *)(v37 + 8) = v38;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = v176[0];
      v43 = v176[1];
      v44 = v177;
      *(_QWORD *)(v37 + 72) = v178;
      *(_OWORD *)(v37 + 56) = v44;
      *(_OWORD *)(v37 + 40) = v43;
      *(_OWORD *)(v37 + 24) = v42;
      *(_WORD *)(v37 + 80) = v179;
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
      if (!*((_QWORD *)&v175 + 1))
        goto LABEL_35;
      v46 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
        v48 = *v32;
        v49 = *v33;
        if (!*v33)
          goto LABEL_49;
      }
      else
      {
LABEL_35:
        v48 = *v32;
        v49 = *v33;
        if (!*v33)
          goto LABEL_49;
      }
      v50 = (char **)(v161 + 320);
      do
      {
        v51 = *((_QWORD *)v49 + 4);
        v52 = v51 >= v48;
        if (v51 >= v48)
          v53 = (char **)v49;
        else
          v53 = (char **)(v49 + 8);
        if (v52)
          v50 = (char **)v49;
        v49 = *v53;
      }
      while (*v53);
      if (v50 != v33 && v48 >= (unint64_t)v50[4])
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 267, (uint64_t)"!ContainsKey(raster_buffer, out_rendering.get())", 48, (uint64_t)"Expect no buffer for unallocated image", 38, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_198;
        }
        v48 = *v32;
      }
LABEL_49:
      v171 = &off_24EC21FE8;
      sub_2231DCF04(v48, &v172);
      sub_223A48D1C((uint64_t)&v174, (uint64_t)&v171, &v162);
      v54 = v175;
      v175 = 0uLL;
      v55 = v177;
      v177 = 0uLL;
      v56 = v178;
      v57 = (char **)(v161 + 320);
      v58 = (char **)(v161 + 320);
      v59 = *v33;
      if (*v33)
      {
        while (1)
        {
          while (1)
          {
            v58 = (char **)v59;
            v60 = *((_QWORD *)v59 + 4);
            if (v48 >= v60)
              break;
            v59 = *v58;
            v57 = v58;
            if (!*v58)
              goto LABEL_56;
          }
          if (v60 >= v48)
            break;
          v59 = v58[1];
          if (!v59)
          {
            v57 = v58 + 1;
            goto LABEL_56;
          }
        }
        if (!*((_QWORD *)&v55 + 1))
          goto LABEL_159;
        v127 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v55 + 1) + 16))(*((_QWORD *)&v55 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v55 + 1));
          if (!*((_QWORD *)&v54 + 1))
            goto LABEL_59;
        }
        else
        {
LABEL_159:
          if (!*((_QWORD *)&v54 + 1))
            goto LABEL_59;
        }
        v129 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
        }
      }
      else
      {
LABEL_56:
        v61 = (char *)operator new(0x78uLL);
        *((_QWORD *)v61 + 4) = v48;
        *((_QWORD *)v61 + 5) = &off_24EC21FE8;
        *((_OWORD *)v61 + 3) = v54;
        *((_OWORD *)v61 + 4) = v176[0];
        *(_OWORD *)(v61 + 74) = *(_OWORD *)((char *)v176 + 10);
        *((_OWORD *)v61 + 6) = v55;
        v61[112] = v56;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
        *((_QWORD *)v61 + 2) = v58;
        *v57 = v61;
        v62 = **(_QWORD **)(v161 + 312);
        if (v62)
        {
          *(_QWORD *)(v161 + 312) = v62;
          v61 = *v57;
        }
        sub_2231A9A8C(*(uint64_t **)(v161 + 320), (uint64_t *)v61);
        ++*(_QWORD *)(v161 + 328);
      }
LABEL_59:
      v63 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
      if (!*((_QWORD *)&v177 + 1))
        goto LABEL_63;
      v64 = (unint64_t *)(*((_QWORD *)&v177 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        v66 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
        if (!*((_QWORD *)&v175 + 1))
          goto LABEL_69;
      }
      else
      {
LABEL_63:
        v66 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
        if (!*((_QWORD *)&v175 + 1))
          goto LABEL_69;
      }
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
LABEL_69:
      v69 = v173;
      if (!v173)
        goto LABEL_73;
      v70 = (unint64_t *)&v173->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
        v35 = *v32;
        v36 = *v33;
        if (*v33)
        {
LABEL_74:
          v72 = v161 + 320;
          do
          {
            v73 = *((_QWORD *)v36 + 4);
            v74 = v73 >= v35;
            if (v73 >= v35)
              v75 = (char **)v36;
            else
              v75 = (char **)(v36 + 8);
            if (v74)
              v72 = (uint64_t)v36;
            v36 = *v75;
          }
          while (*v75);
          if ((char **)v72 != v33 && v35 >= *(_QWORD *)(v72 + 32))
            goto LABEL_87;
        }
      }
      else
      {
LABEL_73:
        v35 = *v32;
        v36 = *v33;
        if (*v33)
          goto LABEL_74;
      }
LABEL_86:
      v72 = v161 + 320;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 272, (uint64_t)"iter != raster_buffer.end()", 27, (uint64_t)"Expect buffer for allocated image", 33, (void (*)(void **))sub_22457406C))
      {
LABEL_198:
        abort();
      }
LABEL_87:
      v76 = v166;
      if ((unint64_t)v166 < v167)
      {
        *(_QWORD *)v166 = &off_24EC21FE8;
        v77 = *(_QWORD *)(v72 + 48);
        v78 = *(std::__shared_weak_count **)(v72 + 56);
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
          v81 = *(_WORD *)(v72 + 88);
          do
            v82 = __ldxr(v79);
          while (__stxr(v82 + 1, v79));
          v83 = *(_OWORD *)(v72 + 64);
          *((_QWORD *)v76 + 5) = *(_QWORD *)(v72 + 80);
          *(_OWORD *)(v76 + 24) = v83;
          do
            v84 = __ldxr(v79);
          while (__stxr(v84 + 1, v79));
          *((_QWORD *)v76 + 1) = v77;
          *((_QWORD *)v76 + 2) = v78;
          *((_WORD *)v76 + 24) = v81;
          do
            v85 = __ldaxr(v79);
          while (__stlxr(v85 - 1, v79));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
          do
            v86 = __ldaxr(v79);
          while (__stlxr(v86 - 1, v79));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        else
        {
          v102 = *(_WORD *)(v72 + 88);
          *((_QWORD *)v76 + 1) = v77;
          *((_QWORD *)v76 + 2) = 0;
          v103 = *(_OWORD *)(v72 + 64);
          *((_QWORD *)v76 + 5) = *(_QWORD *)(v72 + 80);
          *(_OWORD *)(v76 + 24) = v103;
          *((_WORD *)v76 + 24) = v102;
        }
        *((_QWORD *)v76 + 7) = *(_QWORD *)(v72 + 96);
        v104 = *(_QWORD *)(v72 + 104);
        *((_QWORD *)v76 + 8) = v104;
        if (v104)
        {
          v105 = (unint64_t *)(v104 + 8);
          do
            v106 = __ldxr(v105);
          while (__stxr(v106 + 1, v105));
        }
        v76[72] = *(_BYTE *)(v72 + 112);
        v34 = v76 + 80;
        goto LABEL_21;
      }
      v87 = 0xCCCCCCCCCCCCCCCDLL * ((v166 - (_BYTE *)__p) >> 4);
      v88 = v87 + 1;
      if (v87 + 1 > 0x333333333333333)
        sub_22316E078();
      if (0x999999999999999ALL * ((uint64_t)(v167 - (_QWORD)__p) >> 4) > v88)
        v88 = 0x999999999999999ALL * ((uint64_t)(v167 - (_QWORD)__p) >> 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v167 - (_QWORD)__p) >> 4) >= 0x199999999999999)
        v89 = 0x333333333333333;
      else
        v89 = v88;
      if (v89)
      {
        if (v89 > 0x333333333333333)
          sub_223174E94();
        v90 = operator new(80 * v89);
        v91 = &v90[80 * v87];
        *(_QWORD *)v91 = &off_24EC21FE8;
        v92 = *(_QWORD *)(v72 + 48);
        v93 = *(std::__shared_weak_count **)(v72 + 56);
        if (!v93)
        {
LABEL_130:
          v107 = *(_WORD *)(v72 + 88);
          *((_QWORD *)v91 + 1) = v92;
          *((_QWORD *)v91 + 2) = 0;
          v108 = *(_OWORD *)(v72 + 64);
          *((_QWORD *)v91 + 5) = *(_QWORD *)(v72 + 80);
          *(_OWORD *)(v91 + 24) = v108;
          *((_WORD *)v91 + 24) = v107;
          goto LABEL_131;
        }
      }
      else
      {
        v90 = 0;
        v91 = (char *)(16 * ((v166 - (_BYTE *)__p) >> 4));
        *(_QWORD *)v91 = &off_24EC21FE8;
        v92 = *(_QWORD *)(v72 + 48);
        v93 = *(std::__shared_weak_count **)(v72 + 56);
        if (!v93)
          goto LABEL_130;
      }
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
      v96 = *(_WORD *)(v72 + 88);
      do
        v97 = __ldxr(v94);
      while (__stxr(v97 + 1, v94));
      v98 = *(_OWORD *)(v72 + 64);
      *((_QWORD *)v91 + 5) = *(_QWORD *)(v72 + 80);
      *(_OWORD *)(v91 + 24) = v98;
      do
        v99 = __ldxr(v94);
      while (__stxr(v99 + 1, v94));
      *((_QWORD *)v91 + 1) = v92;
      *((_QWORD *)v91 + 2) = v93;
      *((_WORD *)v91 + 24) = v96;
      do
        v100 = __ldaxr(v94);
      while (__stlxr(v100 - 1, v94));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
      do
        v101 = __ldaxr(v94);
      while (__stlxr(v101 - 1, v94));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
LABEL_131:
      v109 = &v90[80 * v87];
      *((_QWORD *)v109 + 7) = *(_QWORD *)(v72 + 96);
      v110 = *(_QWORD *)(v72 + 104);
      *((_QWORD *)v109 + 8) = v110;
      if (v110)
      {
        v111 = (unint64_t *)(v110 + 8);
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      v113 = &v90[80 * v89];
      v90[80 * v87 + 72] = *(_BYTE *)(v72 + 112);
      v34 = v91 + 80;
      v114 = (char *)__p;
      v115 = v166;
      if (v166 != __p)
      {
        v116 = 0;
        do
        {
          v117 = &v91[v116];
          *((_QWORD *)v117 - 10) = &off_24EC21FE8;
          v118 = &v115[v116];
          *(_OWORD *)(v117 - 72) = *(_OWORD *)&v115[v116 - 72];
          *((_QWORD *)v118 - 9) = 0;
          *((_QWORD *)v118 - 8) = 0;
          v119 = *(_OWORD *)&v115[v116 - 56];
          *(_OWORD *)(v117 - 46) = *(_OWORD *)&v115[v116 - 46];
          *(_OWORD *)(v117 - 56) = v119;
          *(_OWORD *)(v117 - 24) = *(_OWORD *)&v115[v116 - 24];
          *((_QWORD *)v118 - 3) = 0;
          *((_QWORD *)v118 - 2) = 0;
          *(v117 - 8) = v115[v116 - 8];
          v116 -= 80;
        }
        while (&v115[v116] != v114);
        v115 = (char *)__p;
        v120 = v166;
        __p = &v91[v116];
        v166 = v91 + 80;
        v167 = (unint64_t)v113;
        if (v120 == v115)
        {
LABEL_151:
          if (!v115)
            goto LABEL_21;
LABEL_154:
          operator delete(v115);
          goto LABEL_21;
        }
        while (2)
        {
          v121 = (std::__shared_weak_count *)*((_QWORD *)v120 - 2);
          if (!v121)
            goto LABEL_144;
          v122 = (unint64_t *)&v121->__shared_owners_;
          do
            v123 = __ldaxr(v122);
          while (__stlxr(v123 - 1, v122));
          if (!v123)
          {
            ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
            std::__shared_weak_count::__release_weak(v121);
            v124 = (std::__shared_weak_count *)*((_QWORD *)v120 - 8);
            if (v124)
            {
LABEL_145:
              v125 = (unint64_t *)&v124->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
          }
          else
          {
LABEL_144:
            v124 = (std::__shared_weak_count *)*((_QWORD *)v120 - 8);
            if (v124)
              goto LABEL_145;
          }
          v120 -= 80;
          if (v120 == v115)
            goto LABEL_151;
          continue;
        }
      }
      __p = v91;
      v166 = v91 + 80;
      v167 = (unint64_t)v113;
      if (v115)
        goto LABEL_154;
LABEL_21:
      v166 = v34;
      v32 += 2;
    }
    while (v32 != v158);
  }
  LOBYTE(v174) = 0;
  sub_223CDAB6C(v161 + 360);
  sub_223CDE2B0(*(_QWORD *)(v161 + 432), &v168, v155, (char *)&v174, a4, v154, &__p);
  v136 = v163;
  if (v163)
  {
    v137 = (unint64_t *)&v163->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  sub_22322797C(&v164, v131, v132, v133, v134, v135);
  v139 = (char *)__p;
  if (__p)
  {
    v140 = v166;
    v141 = __p;
    if (v166 == __p)
    {
LABEL_187:
      v166 = v139;
      operator delete(v141);
      goto LABEL_188;
    }
    while (1)
    {
      v142 = (std::__shared_weak_count *)*((_QWORD *)v140 - 2);
      if (!v142)
        goto LABEL_179;
      v143 = (unint64_t *)&v142->__shared_owners_;
      do
        v144 = __ldaxr(v143);
      while (__stlxr(v144 - 1, v143));
      if (!v144)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
        v145 = (std::__shared_weak_count *)*((_QWORD *)v140 - 8);
        if (v145)
        {
LABEL_180:
          v146 = (unint64_t *)&v145->__shared_owners_;
          do
            v147 = __ldaxr(v146);
          while (__stlxr(v147 - 1, v146));
          if (!v147)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v145);
          }
        }
      }
      else
      {
LABEL_179:
        v145 = (std::__shared_weak_count *)*((_QWORD *)v140 - 8);
        if (v145)
          goto LABEL_180;
      }
      v140 -= 80;
      if (v140 == v139)
      {
        v141 = __p;
        goto LABEL_187;
      }
    }
  }
LABEL_188:
  v148 = (char *)v168;
  if (v168)
  {
    v149 = v169;
    v150 = v168;
    if (v169 != v168)
    {
      v151 = v169;
      do
      {
        v153 = (void *)*((_QWORD *)v151 - 3);
        v151 -= 24;
        v152 = v153;
        if (v153)
        {
          *((_QWORD *)v149 - 2) = v152;
          operator delete(v152);
        }
        v149 = v151;
      }
      while (v151 != v148);
      v150 = v168;
    }
    v169 = v148;
    operator delete(v150);
  }
}

void sub_223A484B0(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,char *__p,char *a23,uint64_t a24,char *a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  char *v31;
  char *v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;

  sub_22322797C(&a21, a2, a3, a4, a5, a6);
  v31 = __p;
  if (!__p)
  {
LABEL_18:
    v40 = a25;
    if (a25)
    {
      v41 = a26;
      v42 = a25;
      if (a26 != a25)
      {
        v43 = a26;
        do
        {
          v45 = (void *)*((_QWORD *)v43 - 3);
          v43 -= 24;
          v44 = v45;
          if (v45)
          {
            *((_QWORD *)v41 - 2) = v44;
            operator delete(v44);
          }
          v41 = v43;
        }
        while (v43 != v40);
        v42 = a25;
      }
      a26 = v40;
      operator delete(v42);
    }
    _Unwind_Resume(a1);
  }
  v32 = a23;
  v33 = __p;
  if (a23 == __p)
  {
LABEL_17:
    a23 = v31;
    operator delete(v33);
    goto LABEL_18;
  }
  while (1)
  {
    v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
    if (!v34)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      v37 = (std::__shared_weak_count *)*((_QWORD *)v32 - 8);
      if (v37)
      {
LABEL_10:
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
LABEL_9:
      v37 = (std::__shared_weak_count *)*((_QWORD *)v32 - 8);
      if (v37)
        goto LABEL_10;
    }
    v32 -= 80;
    if (v32 == v31)
    {
      v33 = __p;
      goto LABEL_17;
    }
  }
}

uint64_t sub_223A48788(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPo"
                     "seIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl10000"
                     "00000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST"
                     "_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14M"
                                "eshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIx"
                                "NS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEER"
                                "KNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25Map"
                                "pedStateProviderConfigEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A487F4()
{
  return &unk_24EC5DD18;
}

void sub_223A48800(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_223A48920(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 != v2)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        *((_QWORD *)v10 - 10) = &off_24EC21FE8;
        v11 = &v4[v9];
        *(_OWORD *)(v10 - 72) = *(_OWORD *)&v4[v9 - 72];
        *((_QWORD *)v11 - 9) = 0;
        *((_QWORD *)v11 - 8) = 0;
        v12 = *(_OWORD *)&v4[v9 - 56];
        *(_OWORD *)(v10 - 46) = *(_OWORD *)&v4[v9 - 46];
        *(_OWORD *)(v10 - 56) = v12;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *(v10 - 8) = v4[v9 - 8];
        v9 -= 80;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (1)
      {
        if (v13 == v2)
          goto LABEL_21;
        v14 = (std::__shared_weak_count *)*((_QWORD *)v13 - 2);
        if (!v14)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          v17 = (std::__shared_weak_count *)*((_QWORD *)v13 - 8);
          if (!v17)
            goto LABEL_7;
        }
        else
        {
LABEL_13:
          v17 = (std::__shared_weak_count *)*((_QWORD *)v13 - 8);
          if (!v17)
            goto LABEL_7;
        }
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
LABEL_7:
        v13 -= 80;
      }
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
LABEL_21:
    if (v2)
      operator delete(v2);
  }
}

char *sub_223A48AC0(char **a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  __int128 v29;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v5];
  v13 = &v11[24 * v10];
  *((_QWORD *)v12 + 1) = 0;
  v14 = v12 + 8;
  *((_QWORD *)&v29 + 1) = v13;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = 0;
  v15 = a3 - a2;
  if (a3 != a2)
  {
    v16 = 0x8E38E38E38E38E39 * (v15 >> 3);
    if (v16 >= 0x38E38E38E38E38FLL)
      sub_22352449C();
    v17 = (char *)operator new(v15);
    v18 = 0;
    *(_QWORD *)v12 = v17;
    *v14 = v17;
    *((_QWORD *)v12 + 2) = &v17[72 * v16];
    do
    {
      v19 = a2 + v18;
      v20 = &v17[v18];
      *(_QWORD *)v20 = *(_QWORD *)(a2 + v18);
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(a2 + v18 + 8);
      *(_OWORD *)(v20 + 24) = *(_OWORD *)(a2 + v18 + 24);
      *(_OWORD *)(v20 + 40) = *(_OWORD *)(a2 + v18 + 40);
      *(_OWORD *)(v20 + 56) = *(_OWORD *)(a2 + v18 + 56);
      v18 += 72;
    }
    while (v19 + 72 != a3);
    *v14 = &v17[v18];
  }
  v21 = v12 + 24;
  *(_QWORD *)&v29 = v12 + 24;
  if (v3 == v4)
  {
    *a1 = v12;
    a1[1] = v21;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v22 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v23 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v12 - 24) = v23;
      v12 -= 24;
      *((_QWORD *)v22 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v3 = *a1;
    v24 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v29;
    v21 = (char *)v29;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v24 - 2) = v26;
          operator delete(v26);
        }
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v21;
}

void sub_223A48CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_223452E9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223A48D1C(uint64_t a1, uint64_t a2, void ***a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  char v26;

  *(_QWORD *)a1 = &off_24EC21FE8;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_WORD *)(a2 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v11;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_WORD *)(a1 + 48) = v9;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v15 = *(_WORD *)(a2 + 48);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = 0;
    v16 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v16;
    *(_WORD *)(a1 + 48) = v15;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  sub_223A48F0C(a1, a3, (uint64_t)&v25);
  v17 = v25;
  v25 = 0uLL;
  v18 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_BYTE *)(a1 + 72) = v26;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (!*((_QWORD *)&v25 + 1))
    return a1;
  v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_223A48EF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223167354(v2);
  sub_2231DCE9C(v1);
  _Unwind_Resume(a1);
}

void **sub_223A48F0C@<X0>(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  void **v44;
  const char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  const char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v66;
  int v67;
  const char *v68;
  int v69;
  const char *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  void *v74;
  void *object[2];
  size_t v76;
  void **v77;
  char v78;
  void *__p[2];
  unint64_t v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  sub_223227930((uint64_t *)&v74);
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 36);
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a1 + 48))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v10 + 88))(v10, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(_QWORD *)(a1 + 24);
  }
  v15 = 4 * v6 * v7;
  if ((v8 & 0xFFF) != 0)
  {
    sub_223A49664(&v73);
    if (**(int **)(v73 + 56) > 3)
      goto LABEL_83;
    v16 = *(unsigned __int8 *)(v73 + 72);
    v17 = sub_22322F254(v73, "OSLogSurrogateAppender", 1, 0);
    v18 = v17 + 16;
    if (!v17)
      v18 = 0;
    if (!v16 && !v17)
      goto LABEL_83;
    v63 = v18;
    v64 = &v73;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v66 = std::chrono::system_clock::now().__d_.__rep_;
    v67 = 3;
    v68 = "unknown file";
    v69 = 150;
    v71 = 0;
    v72 = 0;
    v70 = "unknown function";
    v19 = (uint64_t *)(v73 + 16);
    if (*(char *)(v73 + 39) < 0)
    {
      v21 = *(const char **)(v73 + 16);
      v20 = *(_QWORD *)(v73 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v41 & 1) != 0)
        goto LABEL_47;
    }
    else
    {
      v20 = *(unsigned __int8 *)(v73 + 39);
      v21 = (const char *)(*v64 + 16);
      v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v22 & 1) != 0)
        goto LABEL_47;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if ((_BYTE)v77 && SHIBYTE(v76) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_47:
    if (byte_255788F40[23] >= 0)
      v42 = byte_255788F40;
    else
      v42 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v43 = byte_255788F40[23];
    else
      v43 = *(_QWORD *)&byte_255788F40[8];
    object[0] = os_log_create(v42, v21);
    v44 = &object[1];
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v43 >= 0x17)
    {
      v62 = v16;
      v45 = v21;
      v46 = v19;
      v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v47 = v43 | 7;
      v48 = v47 + 1;
      v44 = (void **)operator new(v47 + 1);
      v76 = v43;
      v77 = (void **)(v48 | 0x8000000000000000);
      object[1] = v44;
      v19 = v46;
      v21 = v45;
      v16 = v62;
    }
    else
    {
      HIBYTE(v77) = v43;
      if (!v43)
      {
LABEL_61:
        *((_BYTE *)v44 + v43) = 0;
        v78 = 1;
        v49 = __p;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v20 >= 0x17)
        {
          v50 = v16;
          v51 = v21;
          v52 = v19;
          v53 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v53 = v20 | 7;
          v54 = v53 + 1;
          v49 = operator new(v53 + 1);
          __p[1] = (void *)v20;
          v80 = v54 | 0x8000000000000000;
          __p[0] = v49;
          v19 = v52;
          v21 = v51;
          v16 = v50;
        }
        else
        {
          HIBYTE(v80) = v20;
          if (!v20)
            goto LABEL_69;
        }
        memmove(v49, v21, v20);
LABEL_69:
        *((_BYTE *)v49 + v20) = 0;
        v81 = 1;
        v55 = object[0];
        if (SHIBYTE(v80) < 0)
          operator delete(__p[0]);
        if (v78 && SHIBYTE(v77) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        sub_223A49758((int)object, v63, v19, v55, OS_LOG_TYPE_INFO);
        if (v16)
        {
          sub_22322C138((uint64_t)&v64, "Output image is not aligned : it will be copied to the Metal buffer");
          sub_223182C08((uint64_t)&v64);
        }
        sub_223182C08((uint64_t)&v64);
        v56 = v72;
        if (v72)
        {
          v57 = (unint64_t *)&v72->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
LABEL_83:
        nullsub_30(a2);
        sub_223226080(object, a2, v15, 0, v59, v60);
        *(_OWORD *)a3 = *(_OWORD *)object;
        *(_BYTE *)(a3 + 16) = 1;
        return sub_22322797C(&v74, v30, v31, v32, v33, v34);
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_61;
  }
  if (v8 && *(_BYTE *)(a1 + 48))
  {
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(std::__shared_weak_count **)(a1 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v23 + 88))(v23, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(_QWORD *)(a1 + 24);
  }
  nullsub_30(a2);
  v77 = 0;
  sub_2232264FC(&v64, a2, v8, (v15 + 4095) & 0xFFFFF000, 0, object);
  v28 = v77;
  if (v77 == object)
  {
    v29 = 4;
    v28 = object;
  }
  else
  {
    if (!v77)
      goto LABEL_35;
    v29 = 5;
  }
  (*((void (**)(void))*v28 + v29))();
LABEL_35:
  if (!sub_223225C34(&v64)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/include/Reconstruction/MeshUtil/TriMeshRenderingTypes.h", 145, (uint64_t)"buffer_no_copy", 14, (uint64_t)"Buffer not created", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v35 = rep;
  *(_QWORD *)a3 = v64;
  *(_QWORD *)(a3 + 8) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v38 = (std::__shared_weak_count *)rep;
    *(_BYTE *)(a3 + 16) = 0;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  return sub_22322797C(&v74, v30, v31, v32, v33, v34);
}

void sub_223A49538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a12);
  sub_22322797C(&a22, v34, v35, v36, v37, v38);
  _Unwind_Resume(a1);
}

void sub_223A495DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      JUMPOUT(0x223A49654);
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22322797C(&a22, v30, v31, v32, v33, v34);
  _Unwind_Resume(a1);
}

void sub_223A49628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_22322797C((void **)va1, v5, v6, v7, v8, v9);
  _Unwind_Resume(a1);
}

void sub_223A49650(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, ...)
{
  va_list va;

  va_start(va, a19);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

void sub_223A49664(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCBA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCBA0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.recon.mesh_util");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCB98);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCBA0);
  }
  *a1 = qword_2540CCB98;
}

void sub_223A49700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCBA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCBA0);
  _Unwind_Resume(a1);
}

uint64_t sub_223A49758(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x227684CE8](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_223A49AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A49B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A49B24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_223A49B4C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A49B60(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5DD38;
  result[1] = v3;
  return result;
}

uint64_t sub_223A49B94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5DD38;
  a2[1] = v2;
  return result;
}

void sub_223A49BB0(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x2_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  float32x2_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *__p;
  _OWORD v42[4];
  uint64_t v43;
  __int16 v44;
  void *v45;
  char *v46;
  void *v47;
  char *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a1 + 8);
  v12 = a4 + 11;
  sub_223A45F14(v11, (unsigned int *)&a4[11]);
  v13 = *(_QWORD *)(v11 + 560);
  if (!v13)
    sub_223198474();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, float32x4_t *, float32x2_t *))(*(_QWORD *)v13 + 48))(&v45, v13, a2, a3, a4);
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v14 = (char *)v45;
  v15 = v46;
  v16 = v46 - (_BYTE *)v45;
  if (v46 != v45)
  {
    v17 = 0x8E38E38E38E38E39 * (v16 >> 3);
    if (v17 >= 0x38E38E38E38E38FLL)
      sub_22352449C();
    v18 = (char *)operator new(v16);
    v19 = 0;
    v47 = v18;
    v49 = (std::__shared_weak_count *)&v18[72 * v17];
    do
    {
      v20 = &v14[v19];
      v21 = &v18[v19];
      *(_QWORD *)v21 = *(_QWORD *)&v14[v19];
      v22 = *(_OWORD *)&v14[v19 + 8];
      v23 = *(_OWORD *)&v14[v19 + 24];
      v24 = *(_OWORD *)&v14[v19 + 40];
      *(_OWORD *)(v21 + 56) = *(_OWORD *)&v14[v19 + 56];
      *(_OWORD *)(v21 + 40) = v24;
      *(_OWORD *)(v21 + 24) = v23;
      *(_OWORD *)(v21 + 8) = v22;
      v19 += 72;
    }
    while (v20 + 72 != v15);
    v48 = &v18[v19];
  }
  __p = operator new(0x18uLL);
  *((_QWORD *)&v42[0] + 1) = (char *)__p + 24;
  *(_QWORD *)&v42[0] = sub_223A47678((uint64_t)v42 + 8, (uint64_t *)&v47, &v50, __p);
  sub_223A46020((uint64_t **)&__p, a5);
  v25 = (char *)__p;
  if (__p)
  {
    v26 = *(char **)&v42[0];
    v27 = __p;
    if (*(void **)&v42[0] != __p)
    {
      v28 = *(char **)&v42[0];
      do
      {
        v30 = (void *)*((_QWORD *)v28 - 3);
        v28 -= 24;
        v29 = v30;
        if (v30)
        {
          *((_QWORD *)v26 - 2) = v29;
          operator delete(v29);
        }
        v26 = v28;
      }
      while (v28 != v25);
      v27 = __p;
    }
    *(_QWORD *)&v42[0] = v25;
    operator delete(v27);
  }
  if (v47)
  {
    v48 = (char *)v47;
    operator delete(v47);
  }
  sub_223CDAC64(v11 + 360);
  sub_223CDD854(*(_QWORD *)(v11 + 512), (uint64_t *)&v45, a3, a4, 1u, 0, &v47);
  if (v51 && v52)
  {
    if (!*(_DWORD *)(a6 + 64) || !*(_DWORD *)(a6 + 68))
    {
      __p = &off_24EC24788;
      sub_2231F8D1C(v12, v42);
      v31 = v42[0];
      v42[0] = 0uLL;
      v32 = *(std::__shared_weak_count **)(a6 + 16);
      *(_OWORD *)(a6 + 8) = v31;
      if (v32)
      {
        p_shared_owners = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      *(_OWORD *)(a6 + 24) = v42[1];
      *(_OWORD *)(a6 + 40) = v42[2];
      *(_OWORD *)(a6 + 56) = v42[3];
      *(_QWORD *)(a6 + 72) = v43;
      *(_WORD *)(a6 + 80) = v44;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v42[0] + 1);
      if (*((_QWORD *)&v42[0] + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v42[0] + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
    }
    sub_223A4A0CC((uint64_t)&v47, a6);
  }
  v38 = v49;
  if (v49)
  {
    v39 = (unint64_t *)&v49->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v45)
  {
    v46 = (char *)v45;
    operator delete(v45);
  }
}

void sub_223A49F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,std::__shared_weak_count *a27)
{
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))a27->__on_zero_shared)(a27);
      std::__shared_weak_count::__release_weak(a27);
    }
  }
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A4A054(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPo"
                     "seIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl10000"
                     "00000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST"
                     "_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14M"
                                "eshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIx"
                                "NS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEER"
                                "KNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25Map"
                                "pedStateProviderConfigEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A4A0C0()
{
  return &unk_24EC5DDA8;
}

uint64_t sub_223A4A0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_18;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_14;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
LABEL_18:
    v21 = 0;
    v14 = *(_QWORD *)(a2 + 8);
    v13 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v13)
      goto LABEL_23;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_18;
LABEL_15:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v21, v4, 0);
  v14 = *(_QWORD *)(a2 + 8);
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v13)
    goto LABEL_23;
LABEL_19:
  v15 = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
LABEL_23:
    if (!v14)
      goto LABEL_27;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!v14)
    goto LABEL_27;
LABEL_24:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v20, *(_QWORD *)(a2 + 8), 1);
    goto LABEL_28;
  }
LABEL_27:
  v20 = 0;
LABEL_28:
  sub_223A4A2F0(a1, a2);
  v18 = v20;
  v20 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223A4A28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A4A2F0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  size_t v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  size_t v16;

  v3 = result;
  v4 = *(_DWORD *)(result + 32);
  v5 = *(_DWORD *)(result + 44);
  if (v5 != *(_DWORD *)(a2 + 76) || v5 != v4)
  {
    v16 = *(unsigned int *)(result + 32);
    return sub_223A4A4AC(result, a2, &v16);
  }
  v7 = *(unsigned int *)(result + 36) * (unint64_t)v4;
  v8 = *(const void **)(result + 24);
  if (*(_BYTE *)(result + 48))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(result + 8);
    v11 = *(std::__shared_weak_count **)(result + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    result = (*(uint64_t (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v10 + 88))(v10, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(const void **)(v3 + 24);
  }
  if (v7)
  {
    if (!v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_27:
        abort();
    }
  }
  v15 = *(void **)(a2 + 32);
  if (*(_BYTE *)(a2 + 80) && v15)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
    v15 = *(void **)(a2 + 32);
  }
  if (v7 && !v15)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_27;
    }
    return (uint64_t)memmove(v15, v8, v7);
  }
  if (v7)
    return (uint64_t)memmove(v15, v8, v7);
  return result;
}

uint64_t sub_223A4A4AC(uint64_t a1, uint64_t a2, size_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    goto LABEL_18;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    v6 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11)
      goto LABEL_14;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (v14)
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_15;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (*(_BYTE *)(a1 + 49))
  {
LABEL_15:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 96))(&v23, v6, 0);
    v16 = *(_QWORD *)(a2 + 8);
    v15 = *(std::__shared_weak_count **)(a2 + 16);
    if (!v15)
      goto LABEL_23;
    goto LABEL_19;
  }
LABEL_18:
  v23 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v15)
    goto LABEL_23;
LABEL_19:
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v16)
      goto LABEL_28;
    goto LABEL_24;
  }
LABEL_23:
  if (!v16)
    goto LABEL_28;
LABEL_24:
  if (*(_BYTE *)(a2 + 81))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 96))(&v22, *(_QWORD *)(a2 + 8), 1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_31;
    goto LABEL_29;
  }
LABEL_28:
  v22 = 0;
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)(a1 + 36))
    sub_223A4A6F8(a3, a1, a2);
LABEL_31:
  v20 = v22;
  v22 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = v23;
  v23 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_223A4A694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

size_t *sub_223A4A6F8(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  size_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD v23[2];

  v4 = *(_DWORD *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 36);
  if (v4)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = result;
    v19 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 44);
    v10 = *(unsigned int *)(a3 + 76);
    v20 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned int *)(a3 + 72) << 32);
    v18 = 0;
    v21 = v3 - 1;
    v22 = v9 | (v10 << 32);
    v11 = *(char **)(a2 + 24);
    if (*(_BYTE *)(a2 + 48) && v11)
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      v11 = *(char **)(a2 + 24);
    }
    v17 = *(char **)(a3 + 32);
    if (*(_BYTE *)(a3 + 80))
    {
      if (v17)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(a3 + 8) + 88))(*(_QWORD *)(a3 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v17 = *(char **)(a3 + 32);
      }
    }
    memset(v23, 0, sizeof(v23));
    return (size_t *)sub_223A4A834((uint64_t)&v18, (uint64_t)v23, v8, v11, v17);
  }
  return result;
}

uint64_t sub_223A4A834(uint64_t result, uint64_t a2, size_t *a3, char *__src, char *__dst)
{
  char *v5;
  char *v6;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  size_t v13;
  void *v14;
  size_t v15;
  size_t v16;
  size_t v17;

  v5 = __dst;
  v6 = __src;
  v9 = *(_DWORD *)(result + 12);
  v10 = *(_DWORD *)(result + 16);
  *(_QWORD *)a2 = __src;
  *(_DWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = __dst;
  *(_DWORD *)(a2 + 24) = v10;
  if (*(_DWORD *)(result + 20))
  {
    v11 = (_DWORD *)result;
    v12 = 0;
    do
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v5;
      v13 = *a3;
      v14 = v5;
      v15 = *a3;
      if (!v6)
      {
        v14 = v5;
        v15 = *a3;
        if (v13)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((result & 1) != 0)
            goto LABEL_23;
          v15 = *a3;
          v14 = *(void **)(a2 + 16);
        }
      }
      if (!v14)
      {
        if (v15)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_23;
        }
      }
      if (v13)
        result = (uint64_t)memmove(v14, v6, v13);
      v6 += v11[6];
      v5 += v11[7];
    }
    while (++v12 < v11[5]);
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v5;
  v16 = *a3;
  v17 = *a3;
  if (!v6 && v16)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if ((result & 1) != 0)
      goto LABEL_23;
    v17 = *a3;
    v5 = *(char **)(a2 + 16);
  }
  if (!v5)
  {
    if (v17)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_23:
        abort();
    }
  }
  if (v16)
    return (uint64_t)memmove(v5, v6, v16);
  return result;
}

void sub_223A4AA38()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A4AA4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5DDC8;
  result[1] = v3;
  return result;
}

uint64_t sub_223A4AA80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5DDC8;
  a2[1] = v2;
  return result;
}

void sub_223A4AA9C(uint64_t a1, uint64_t a2, _QWORD *a3, float32x2_t *a4, uint64_t a5, unint64_t **a6)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (**v14)();
  uint64_t (**v15)();
  int64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t (**v20)();
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  __int128 v53;
  __int128 v54;
  char v55;
  char **v56;
  char **v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  BOOL v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int16 v80;
  unint64_t v81;
  __int128 v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  char *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  __int16 v95;
  unint64_t v96;
  __int128 v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int16 v101;
  __int128 v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  __int16 v106;
  __int128 v107;
  char *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  __int128 v118;
  char *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char *v138;
  char *v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  char *v147;
  char *v148;
  void *v149;
  char *v150;
  void *v151;
  void *v152;
  _QWORD *v153;
  float32x2_t *v154;
  unint64_t *v155;
  uint64_t v158;
  void **v160;
  std::__shared_weak_count *v161;
  void *v162;
  void *__p;
  char *v164;
  unint64_t v165;
  void *v166;
  char *v167;
  unint64_t v168;
  uint64_t (**v169)();
  uint64_t v170;
  std::__shared_weak_count *v171;
  uint64_t (**v172)();
  __int128 v173;
  _OWORD v174[2];
  __int128 v175;
  uint64_t v176;
  __int16 v177;

  v8 = *(_QWORD *)(a1 + 8);
  v154 = a4 + 11;
  sub_223A45F14(v8, (unsigned int *)&a4[11]);
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v153 = a3;
  sub_223A48800((uint64_t)&v166, (uint64_t)(a3[1] - *a3) >> 6);
  v9 = a3;
  v11 = *a3;
  v10 = a3[1];
  v158 = v8;
  if (*v9 != v10)
  {
    do
    {
      v12 = *(_QWORD *)(v8 + 560);
      if (!v12)
        sub_223198474();
      (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t, float32x2_t *))(*(_QWORD *)v12 + 48))(&v172, v12, a2, v11, a4);
      v13 = v167;
      if ((unint64_t)v167 >= v168)
      {
        v25 = sub_223A48AC0((char **)&v166, (uint64_t)v172, v173);
      }
      else
      {
        *(_QWORD *)v167 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = 0;
        v15 = v172;
        v14 = (uint64_t (**)())v173;
        v16 = v173 - (_QWORD)v172;
        if ((uint64_t (**)())v173 != v172)
        {
          v17 = 0x8E38E38E38E38E39 * (v16 >> 3);
          if (v17 >= 0x38E38E38E38E38FLL)
            sub_22352449C();
          v18 = (char *)operator new(v16);
          v19 = 0;
          *(_QWORD *)v13 = v18;
          *((_QWORD *)v13 + 1) = v18;
          *((_QWORD *)v13 + 2) = &v18[72 * v17];
          do
          {
            v20 = &v15[v19];
            v21 = &v18[v19 * 8];
            *(_QWORD *)v21 = v15[v19];
            v22 = *(_OWORD *)&v15[v19 + 1];
            v23 = *(_OWORD *)&v15[v19 + 3];
            v24 = *(_OWORD *)&v15[v19 + 5];
            *(_OWORD *)(v21 + 56) = *(_OWORD *)&v15[v19 + 7];
            *(_OWORD *)(v21 + 40) = v24;
            *(_OWORD *)(v21 + 24) = v23;
            *(_OWORD *)(v21 + 8) = v22;
            v19 += 9;
          }
          while (v20 + 9 != v14);
          *((_QWORD *)v13 + 1) = &v18[v19 * 8];
        }
        v25 = v13 + 24;
        v8 = v158;
      }
      v167 = v25;
      if (v172)
      {
        *(_QWORD *)&v173 = v172;
        operator delete(v172);
      }
      v11 += 64;
    }
    while (v11 != v10);
  }
  sub_223A46020((uint64_t **)&v166, a5);
  __p = 0;
  v164 = 0;
  v165 = 0;
  sub_223A4BA3C((uint64_t)&__p, ((char *)a6[1] - (char *)*a6) >> 4);
  sub_223227930((uint64_t *)&v162);
  sub_223226E78((void ***)(v8 + 760), v26, v27, v28, v29, v30, &v160);
  v31 = *a6;
  v155 = a6[1];
  if (*a6 != v155)
  {
    v32 = (_QWORD *)(v8 + 344);
    do
    {
      v34 = *v31;
      if (*(_DWORD *)(*v31 + 64) && *(_DWORD *)(v34 + 68))
      {
        v35 = (_QWORD *)*v32;
        if (*v32)
          goto LABEL_71;
        goto LABEL_83;
      }
      v172 = &off_24EC24788;
      sub_2231F8D1C(v154, &v173);
      v36 = *v31;
      v37 = v173;
      v173 = 0uLL;
      v38 = *(std::__shared_weak_count **)(v36 + 16);
      *(_OWORD *)(v36 + 8) = v37;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = v174[0];
      v42 = v174[1];
      v43 = v175;
      *(_QWORD *)(v36 + 72) = v176;
      *(_OWORD *)(v36 + 56) = v43;
      *(_OWORD *)(v36 + 40) = v42;
      *(_OWORD *)(v36 + 24) = v41;
      *(_WORD *)(v36 + 80) = v177;
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
      if (!*((_QWORD *)&v173 + 1))
        goto LABEL_32;
      v45 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        v47 = *v31;
        v48 = (_QWORD *)*v32;
        if (!*v32)
          goto LABEL_46;
      }
      else
      {
LABEL_32:
        v47 = *v31;
        v48 = (_QWORD *)*v32;
        if (!*v32)
          goto LABEL_46;
      }
      v49 = v32;
      do
      {
        v50 = v48[4];
        v51 = v50 >= v47;
        if (v50 >= v47)
          v52 = v48;
        else
          v52 = v48 + 1;
        if (v51)
          v49 = v48;
        v48 = (_QWORD *)*v52;
      }
      while (*v52);
      if (v49 != v32 && v47 >= v49[4])
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 267, (uint64_t)"!ContainsKey(raster_buffer, out_rendering.get())", 48, (uint64_t)"Expect no buffer for unallocated image", 38, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_195;
        }
        v47 = *v31;
      }
LABEL_46:
      v169 = &off_24EC22138;
      sub_2236B487C(v47, &v170);
      sub_223A4BBDC((uint64_t)&v172, (uint64_t)&v169, &v160);
      v53 = v173;
      v173 = 0uLL;
      v54 = v175;
      v175 = 0uLL;
      v55 = v176;
      v56 = (char **)v32;
      v57 = (char **)v32;
      v58 = (char *)*v32;
      if (*v32)
      {
        while (1)
        {
          while (1)
          {
            v57 = (char **)v58;
            v59 = *((_QWORD *)v58 + 4);
            if (v47 >= v59)
              break;
            v58 = *v57;
            v56 = v57;
            if (!*v57)
              goto LABEL_53;
          }
          if (v59 >= v47)
            break;
          v58 = v57[1];
          if (!v58)
          {
            v56 = v57 + 1;
            goto LABEL_53;
          }
        }
        v8 = v158;
        if (!*((_QWORD *)&v54 + 1))
          goto LABEL_156;
        v126 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v54 + 1) + 16))(*((_QWORD *)&v54 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v54 + 1));
          if (!*((_QWORD *)&v53 + 1))
            goto LABEL_56;
        }
        else
        {
LABEL_156:
          if (!*((_QWORD *)&v53 + 1))
            goto LABEL_56;
        }
        v128 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 16))(*((_QWORD *)&v53 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v53 + 1));
        }
      }
      else
      {
LABEL_53:
        v60 = (char *)operator new(0x78uLL);
        *((_QWORD *)v60 + 4) = v47;
        *((_QWORD *)v60 + 5) = &off_24EC22138;
        *((_OWORD *)v60 + 3) = v53;
        *((_OWORD *)v60 + 4) = v174[0];
        *(_OWORD *)(v60 + 74) = *(_OWORD *)((char *)v174 + 10);
        *((_OWORD *)v60 + 6) = v54;
        v60[112] = v55;
        *(_QWORD *)v60 = 0;
        *((_QWORD *)v60 + 1) = 0;
        *((_QWORD *)v60 + 2) = v57;
        *v56 = v60;
        v8 = v158;
        v61 = **(_QWORD **)(v158 + 336);
        if (v61)
        {
          *(_QWORD *)(v158 + 336) = v61;
          v60 = *v56;
        }
        sub_2231A9A8C(*(uint64_t **)(v158 + 344), (uint64_t *)v60);
        ++*(_QWORD *)(v158 + 352);
      }
LABEL_56:
      v62 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
      if (!*((_QWORD *)&v175 + 1))
        goto LABEL_60;
      v63 = (unint64_t *)(*((_QWORD *)&v175 + 1) + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
        if (!*((_QWORD *)&v173 + 1))
          goto LABEL_66;
      }
      else
      {
LABEL_60:
        v65 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
        if (!*((_QWORD *)&v173 + 1))
          goto LABEL_66;
      }
      v66 = (unint64_t *)&v65->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
LABEL_66:
      v68 = v171;
      if (!v171)
        goto LABEL_70;
      v69 = (unint64_t *)&v171->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
        v34 = *v31;
        v35 = (_QWORD *)*v32;
        if (*v32)
        {
LABEL_71:
          v71 = v32;
          do
          {
            v72 = v35[4];
            v73 = v72 >= v34;
            if (v72 >= v34)
              v74 = v35;
            else
              v74 = v35 + 1;
            if (v73)
              v71 = v35;
            v35 = (_QWORD *)*v74;
          }
          while (*v74);
          if (v71 != v32 && v34 >= v71[4])
            goto LABEL_84;
        }
      }
      else
      {
LABEL_70:
        v34 = *v31;
        v35 = (_QWORD *)*v32;
        if (*v32)
          goto LABEL_71;
      }
LABEL_83:
      v71 = v32;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MappedStateProvider.cpp", 272, (uint64_t)"iter != raster_buffer.end()", 27, (uint64_t)"Expect buffer for allocated image", 33, (void (*)(void **))sub_22457406C))
      {
LABEL_195:
        abort();
      }
LABEL_84:
      v75 = v164;
      if ((unint64_t)v164 < v165)
      {
        *(_QWORD *)v164 = &off_24EC22138;
        v76 = v71[6];
        v77 = (std::__shared_weak_count *)v71[7];
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
          v80 = *((_WORD *)v71 + 44);
          do
            v81 = __ldxr(v78);
          while (__stxr(v81 + 1, v78));
          v82 = *((_OWORD *)v71 + 4);
          *((_QWORD *)v75 + 5) = v71[10];
          *(_OWORD *)(v75 + 24) = v82;
          do
            v83 = __ldxr(v78);
          while (__stxr(v83 + 1, v78));
          *((_QWORD *)v75 + 1) = v76;
          *((_QWORD *)v75 + 2) = v77;
          *((_WORD *)v75 + 24) = v80;
          do
            v84 = __ldaxr(v78);
          while (__stlxr(v84 - 1, v78));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
          do
            v85 = __ldaxr(v78);
          while (__stlxr(v85 - 1, v78));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        else
        {
          v101 = *((_WORD *)v71 + 44);
          *((_QWORD *)v75 + 1) = v76;
          *((_QWORD *)v75 + 2) = 0;
          v102 = *((_OWORD *)v71 + 4);
          *((_QWORD *)v75 + 5) = v71[10];
          *(_OWORD *)(v75 + 24) = v102;
          *((_WORD *)v75 + 24) = v101;
        }
        *((_QWORD *)v75 + 7) = v71[12];
        v103 = v71[13];
        *((_QWORD *)v75 + 8) = v103;
        if (v103)
        {
          v104 = (unint64_t *)(v103 + 8);
          do
            v105 = __ldxr(v104);
          while (__stxr(v105 + 1, v104));
        }
        v75[72] = *((_BYTE *)v71 + 112);
        v33 = v75 + 80;
        goto LABEL_18;
      }
      v86 = 0xCCCCCCCCCCCCCCCDLL * ((v164 - (_BYTE *)__p) >> 4);
      v87 = v86 + 1;
      if (v86 + 1 > 0x333333333333333)
        sub_22316E078();
      if (0x999999999999999ALL * ((uint64_t)(v165 - (_QWORD)__p) >> 4) > v87)
        v87 = 0x999999999999999ALL * ((uint64_t)(v165 - (_QWORD)__p) >> 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v165 - (_QWORD)__p) >> 4) >= 0x199999999999999)
        v88 = 0x333333333333333;
      else
        v88 = v87;
      if (v88)
      {
        if (v88 > 0x333333333333333)
          sub_223174E94();
        v89 = operator new(80 * v88);
        v90 = &v89[80 * v86];
        *(_QWORD *)v90 = &off_24EC22138;
        v91 = v71[6];
        v92 = (std::__shared_weak_count *)v71[7];
        if (!v92)
        {
LABEL_127:
          v106 = *((_WORD *)v71 + 44);
          *((_QWORD *)v90 + 1) = v91;
          *((_QWORD *)v90 + 2) = 0;
          v107 = *((_OWORD *)v71 + 4);
          *((_QWORD *)v90 + 5) = v71[10];
          *(_OWORD *)(v90 + 24) = v107;
          *((_WORD *)v90 + 24) = v106;
          goto LABEL_128;
        }
      }
      else
      {
        v89 = 0;
        v90 = (char *)(16 * ((v164 - (_BYTE *)__p) >> 4));
        *(_QWORD *)v90 = &off_24EC22138;
        v91 = v71[6];
        v92 = (std::__shared_weak_count *)v71[7];
        if (!v92)
          goto LABEL_127;
      }
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
      v95 = *((_WORD *)v71 + 44);
      do
        v96 = __ldxr(v93);
      while (__stxr(v96 + 1, v93));
      v97 = *((_OWORD *)v71 + 4);
      *((_QWORD *)v90 + 5) = v71[10];
      *(_OWORD *)(v90 + 24) = v97;
      do
        v98 = __ldxr(v93);
      while (__stxr(v98 + 1, v93));
      *((_QWORD *)v90 + 1) = v91;
      *((_QWORD *)v90 + 2) = v92;
      *((_WORD *)v90 + 24) = v95;
      do
        v99 = __ldaxr(v93);
      while (__stlxr(v99 - 1, v93));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
      do
        v100 = __ldaxr(v93);
      while (__stlxr(v100 - 1, v93));
      v8 = v158;
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
LABEL_128:
      v108 = &v89[80 * v86];
      *((_QWORD *)v108 + 7) = v71[12];
      v109 = v71[13];
      *((_QWORD *)v108 + 8) = v109;
      if (v109)
      {
        v110 = (unint64_t *)(v109 + 8);
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      v112 = &v89[80 * v88];
      v89[80 * v86 + 72] = *((_BYTE *)v71 + 112);
      v33 = v90 + 80;
      v113 = (char *)__p;
      v114 = v164;
      if (v164 != __p)
      {
        v115 = 0;
        do
        {
          v116 = &v90[v115];
          *((_QWORD *)v116 - 10) = &off_24EC22138;
          v117 = &v114[v115];
          *(_OWORD *)(v116 - 72) = *(_OWORD *)&v114[v115 - 72];
          *((_QWORD *)v117 - 9) = 0;
          *((_QWORD *)v117 - 8) = 0;
          v118 = *(_OWORD *)&v114[v115 - 56];
          *(_OWORD *)(v116 - 46) = *(_OWORD *)&v114[v115 - 46];
          *(_OWORD *)(v116 - 56) = v118;
          *(_OWORD *)(v116 - 24) = *(_OWORD *)&v114[v115 - 24];
          *((_QWORD *)v117 - 3) = 0;
          *((_QWORD *)v117 - 2) = 0;
          *(v116 - 8) = v114[v115 - 8];
          v115 -= 80;
        }
        while (&v114[v115] != v113);
        v114 = (char *)__p;
        v119 = v164;
        __p = &v90[v115];
        v164 = v90 + 80;
        v165 = (unint64_t)v112;
        if (v119 == v114)
        {
LABEL_148:
          if (!v114)
            goto LABEL_18;
LABEL_151:
          operator delete(v114);
          goto LABEL_18;
        }
        while (2)
        {
          v120 = (std::__shared_weak_count *)*((_QWORD *)v119 - 2);
          if (!v120)
            goto LABEL_141;
          v121 = (unint64_t *)&v120->__shared_owners_;
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          if (!v122)
          {
            ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
            std::__shared_weak_count::__release_weak(v120);
            v123 = (std::__shared_weak_count *)*((_QWORD *)v119 - 8);
            if (v123)
            {
LABEL_142:
              v124 = (unint64_t *)&v123->__shared_owners_;
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
          }
          else
          {
LABEL_141:
            v123 = (std::__shared_weak_count *)*((_QWORD *)v119 - 8);
            if (v123)
              goto LABEL_142;
          }
          v119 -= 80;
          if (v119 == v114)
            goto LABEL_148;
          continue;
        }
      }
      __p = v90;
      v164 = v90 + 80;
      v165 = (unint64_t)v112;
      if (v114)
        goto LABEL_151;
LABEL_18:
      v164 = v33;
      v31 += 2;
    }
    while (v31 != v155);
  }
  LOBYTE(v172) = 0;
  sub_223CDAC64(v8 + 360);
  sub_223CDF798(*(_QWORD *)(v8 + 512), &v166, v153, (char *)&v172, a4, 1u, &__p);
  v135 = v161;
  if (v161)
  {
    v136 = (unint64_t *)&v161->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  sub_22322797C(&v162, v130, v131, v132, v133, v134);
  v138 = (char *)__p;
  if (__p)
  {
    v139 = v164;
    v140 = __p;
    if (v164 == __p)
    {
LABEL_184:
      v164 = v138;
      operator delete(v140);
      goto LABEL_185;
    }
    while (1)
    {
      v141 = (std::__shared_weak_count *)*((_QWORD *)v139 - 2);
      if (!v141)
        goto LABEL_176;
      v142 = (unint64_t *)&v141->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
        v144 = (std::__shared_weak_count *)*((_QWORD *)v139 - 8);
        if (v144)
        {
LABEL_177:
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
      }
      else
      {
LABEL_176:
        v144 = (std::__shared_weak_count *)*((_QWORD *)v139 - 8);
        if (v144)
          goto LABEL_177;
      }
      v139 -= 80;
      if (v139 == v138)
      {
        v140 = __p;
        goto LABEL_184;
      }
    }
  }
LABEL_185:
  v147 = (char *)v166;
  if (v166)
  {
    v148 = v167;
    v149 = v166;
    if (v167 != v166)
    {
      v150 = v167;
      do
      {
        v152 = (void *)*((_QWORD *)v150 - 3);
        v150 -= 24;
        v151 = v152;
        if (v152)
        {
          *((_QWORD *)v148 - 2) = v151;
          operator delete(v151);
        }
        v148 = v150;
      }
      while (v150 != v147);
      v149 = v166;
    }
    v167 = v147;
    operator delete(v149);
  }
}

void sub_223A4B6EC(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,char *__p,char *a23,uint64_t a24,char *a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  char *v31;
  char *v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;

  sub_22322797C(&a21, a2, a3, a4, a5, a6);
  v31 = __p;
  if (!__p)
  {
LABEL_18:
    v40 = a25;
    if (a25)
    {
      v41 = a26;
      v42 = a25;
      if (a26 != a25)
      {
        v43 = a26;
        do
        {
          v45 = (void *)*((_QWORD *)v43 - 3);
          v43 -= 24;
          v44 = v45;
          if (v45)
          {
            *((_QWORD *)v41 - 2) = v44;
            operator delete(v44);
          }
          v41 = v43;
        }
        while (v43 != v40);
        v42 = a25;
      }
      a26 = v40;
      operator delete(v42);
    }
    _Unwind_Resume(a1);
  }
  v32 = a23;
  v33 = __p;
  if (a23 == __p)
  {
LABEL_17:
    a23 = v31;
    operator delete(v33);
    goto LABEL_18;
  }
  while (1)
  {
    v34 = (std::__shared_weak_count *)*((_QWORD *)v32 - 2);
    if (!v34)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      v37 = (std::__shared_weak_count *)*((_QWORD *)v32 - 8);
      if (v37)
      {
LABEL_10:
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
LABEL_9:
      v37 = (std::__shared_weak_count *)*((_QWORD *)v32 - 8);
      if (v37)
        goto LABEL_10;
    }
    v32 -= 80;
    if (v32 == v31)
    {
      v33 = __p;
      goto LABEL_17;
    }
  }
}

uint64_t sub_223A4B9C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPo"
                     "seIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl10000"
                     "00000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST"
                     "_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14M"
                                "eshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIx"
                                "NS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEER"
                                "KNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25Map"
                                "pedStateProviderConfigEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm19MappedStateProviderC1ENSt3__18functionIFNS3_6vectorINS0_9mesh_util14MeshPtrAndPoseIKNS6_18PetalBackedTriMeshEEENS3_9allocatorISA_EEEERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSL_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNST_11PixelOriginE1EEEEEEN5petal12CommandQueueERKNS1_25MappedStateProviderConfigEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A4BA30()
{
  return &unk_24EC5DE38;
}

void sub_223A4BA3C(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 != v2)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        *((_QWORD *)v10 - 10) = &off_24EC22138;
        v11 = &v4[v9];
        *(_OWORD *)(v10 - 72) = *(_OWORD *)&v4[v9 - 72];
        *((_QWORD *)v11 - 9) = 0;
        *((_QWORD *)v11 - 8) = 0;
        v12 = *(_OWORD *)&v4[v9 - 56];
        *(_OWORD *)(v10 - 46) = *(_OWORD *)&v4[v9 - 46];
        *(_OWORD *)(v10 - 56) = v12;
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *(v10 - 8) = v4[v9 - 8];
        v9 -= 80;
      }
      while (&v4[v9] != v2);
      v2 = *(char **)a1;
      v13 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (1)
      {
        if (v13 == v2)
          goto LABEL_21;
        v14 = (std::__shared_weak_count *)*((_QWORD *)v13 - 2);
        if (!v14)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
          v17 = (std::__shared_weak_count *)*((_QWORD *)v13 - 8);
          if (!v17)
            goto LABEL_7;
        }
        else
        {
LABEL_13:
          v17 = (std::__shared_weak_count *)*((_QWORD *)v13 - 8);
          if (!v17)
            goto LABEL_7;
        }
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
LABEL_7:
        v13 -= 80;
      }
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
LABEL_21:
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_223A4BBDC(uint64_t a1, uint64_t a2, void ***a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v25;
  char v26;

  *(_QWORD *)a1 = &off_24EC22138;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_WORD *)(a2 + 48);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v11;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    *(_WORD *)(a1 + 48) = v9;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v15 = *(_WORD *)(a2 + 48);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = 0;
    v16 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v16;
    *(_WORD *)(a1 + 48) = v15;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  sub_223A4BDCC(a1, a3, (uint64_t)&v25);
  v17 = v25;
  v25 = 0uLL;
  v18 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_BYTE *)(a1 + 72) = v26;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (!*((_QWORD *)&v25 + 1))
    return a1;
  v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_223A4BDB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_223167354(v2);
  sub_2231DE1B4(v1);
  _Unwind_Resume(a1);
}

void **sub_223A4BDCC@<X0>(uint64_t a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  size_t v20;
  const char *v21;
  unsigned __int8 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned __int8 v41;
  const char *v42;
  size_t v43;
  void **v44;
  const char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  const char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v66;
  int v67;
  const char *v68;
  int v69;
  const char *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  void *v74;
  void *object[2];
  size_t v76;
  void **v77;
  char v78;
  void *__p[2];
  unint64_t v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  sub_223227930((uint64_t *)&v74);
  v6 = *(_DWORD *)(a1 + 44);
  v7 = *(_DWORD *)(a1 + 36);
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(a1 + 48))
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v10 + 88))(v10, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(_QWORD *)(a1 + 24);
  }
  v15 = v7 * v6;
  if ((v8 & 0xFFF) != 0)
  {
    sub_223A49664(&v73);
    if (**(int **)(v73 + 56) > 3)
      goto LABEL_83;
    v16 = *(unsigned __int8 *)(v73 + 72);
    v17 = sub_22322F254(v73, "OSLogSurrogateAppender", 1, 0);
    v18 = v17 + 16;
    if (!v17)
      v18 = 0;
    if (!v16 && !v17)
      goto LABEL_83;
    v63 = v18;
    v64 = &v73;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v66 = std::chrono::system_clock::now().__d_.__rep_;
    v67 = 3;
    v68 = "unknown file";
    v69 = 150;
    v71 = 0;
    v72 = 0;
    v70 = "unknown function";
    v19 = (uint64_t *)(v73 + 16);
    if (*(char *)(v73 + 39) < 0)
    {
      v21 = *(const char **)(v73 + 16);
      v20 = *(_QWORD *)(v73 + 24);
      v41 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v41 & 1) != 0)
        goto LABEL_47;
    }
    else
    {
      v20 = *(unsigned __int8 *)(v73 + 39);
      v21 = (const char *)(*v64 + 16);
      v22 = atomic_load((unsigned __int8 *)&qword_255788F58);
      if ((v22 & 1) != 0)
        goto LABEL_47;
    }
    if (__cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)object);
      sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
      if ((_BYTE)v77 && SHIBYTE(v76) < 0)
        operator delete(object[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
LABEL_47:
    if (byte_255788F40[23] >= 0)
      v42 = byte_255788F40;
    else
      v42 = *(const char **)byte_255788F40;
    if (byte_255788F40[23] >= 0)
      v43 = byte_255788F40[23];
    else
      v43 = *(_QWORD *)&byte_255788F40[8];
    object[0] = os_log_create(v42, v21);
    v44 = &object[1];
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v43 >= 0x17)
    {
      v62 = v16;
      v45 = v21;
      v46 = v19;
      v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v47 = v43 | 7;
      v48 = v47 + 1;
      v44 = (void **)operator new(v47 + 1);
      v76 = v43;
      v77 = (void **)(v48 | 0x8000000000000000);
      object[1] = v44;
      v19 = v46;
      v21 = v45;
      v16 = v62;
    }
    else
    {
      HIBYTE(v77) = v43;
      if (!v43)
      {
LABEL_61:
        *((_BYTE *)v44 + v43) = 0;
        v78 = 1;
        v49 = __p;
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v20 >= 0x17)
        {
          v50 = v16;
          v51 = v21;
          v52 = v19;
          v53 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v53 = v20 | 7;
          v54 = v53 + 1;
          v49 = operator new(v53 + 1);
          __p[1] = (void *)v20;
          v80 = v54 | 0x8000000000000000;
          __p[0] = v49;
          v19 = v52;
          v21 = v51;
          v16 = v50;
        }
        else
        {
          HIBYTE(v80) = v20;
          if (!v20)
            goto LABEL_69;
        }
        memmove(v49, v21, v20);
LABEL_69:
        *((_BYTE *)v49 + v20) = 0;
        v81 = 1;
        v55 = object[0];
        if (SHIBYTE(v80) < 0)
          operator delete(__p[0]);
        if (v78 && SHIBYTE(v77) < 0)
          operator delete(object[1]);
        if (object[0])
          os_release(object[0]);
        sub_223A4C520((int)object, v63, v19, v55, OS_LOG_TYPE_INFO);
        if (v16)
        {
          sub_22322C138((uint64_t)&v64, "Output image is not aligned : it will be copied to the Metal buffer");
          sub_223182C08((uint64_t)&v64);
        }
        sub_223182C08((uint64_t)&v64);
        v56 = v72;
        if (v72)
        {
          v57 = (unint64_t *)&v72->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
LABEL_83:
        nullsub_30(a2);
        sub_223226080(object, a2, v15, 0, v59, v60);
        *(_OWORD *)a3 = *(_OWORD *)object;
        *(_BYTE *)(a3 + 16) = 1;
        return sub_22322797C(&v74, v30, v31, v32, v33, v34);
      }
    }
    memmove(v44, v42, v43);
    goto LABEL_61;
  }
  if (v8 && *(_BYTE *)(a1 + 48))
  {
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(std::__shared_weak_count **)(a1 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v23 + 88))(v23, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
    v8 = *(_QWORD *)(a1 + 24);
  }
  nullsub_30(a2);
  v77 = 0;
  sub_2232264FC(&v64, a2, v8, (v15 + 4095) & 0xFFFFF000, 0, object);
  v28 = v77;
  if (v77 == object)
  {
    v29 = 4;
    v28 = object;
  }
  else
  {
    if (!v77)
      goto LABEL_35;
    v29 = 5;
  }
  (*((void (**)(void))*v28 + v29))();
LABEL_35:
  if (!sub_223225C34(&v64)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/MeshUtil/include/Reconstruction/MeshUtil/TriMeshRenderingTypes.h", 145, (uint64_t)"buffer_no_copy", 14, (uint64_t)"Buffer not created", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v35 = rep;
  *(_QWORD *)a3 = v64;
  *(_QWORD *)(a3 + 8) = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    v38 = (std::__shared_weak_count *)rep;
    *(_BYTE *)(a3 + 16) = 0;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  else
  {
    *(_BYTE *)(a3 + 16) = 0;
  }
  return sub_22322797C(&v74, v30, v31, v32, v33, v34);
}

void sub_223A4C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *__p,void *a24,int a25,__int16 a26,char a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a12);
  sub_22322797C(&a22, v34, v35, v36, v37, v38);
  _Unwind_Resume(a1);
}

void sub_223A4C498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
      JUMPOUT(0x223A4C510);
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22322797C(&a22, v30, v31, v32, v33, v34);
  _Unwind_Resume(a1);
}

void sub_223A4C4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_22322797C((void **)va1, v5, v6, v7, v8, v9);
  _Unwind_Resume(a1);
}

void sub_223A4C50C(_Unwind_Exception *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, ...)
{
  va_list va;

  va_start(va, a19);
  sub_22322797C((void **)va, a2, a3, a4, a5, a6);
  _Unwind_Resume(a1);
}

uint64_t sub_223A4C520(int a1, uint64_t a2, uint64_t *a3, os_log_t oslog, os_log_type_t type)
{
  size_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  __int128 v27;
  uint64_t v28;

  if (a2 && *(_QWORD *)(a2 + 8))
  {
    v8 = _os_log_pack_size();
    v9 = (std::__shared_weak_count_vtbl *)operator new(v8, (std::align_val_t)8uLL);
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v10;
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = v9;
    *(_QWORD *)&v27 = v9;
    *((_QWORD *)&v27 + 1) = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v15 = operator new();
    v16 = *((unsigned __int8 *)a3 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = a3;
    else
      v17 = (uint64_t *)*a3;
    if ((v16 & 0x80u) != 0)
      v16 = a3[1];
    *(_QWORD *)v15 = v9;
    *(_OWORD *)(v15 + 8) = v27;
    *(_OWORD *)(v15 + 24) = 0uLL;
    *(_QWORD *)(v15 + 40) = v17;
    *(_QWORD *)(v15 + 48) = v16;
    *(_BYTE *)(v15 + 56) = type;
    v28 = v15;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), &v28);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      v19 = *(std::__shared_weak_count **)(v18 + 32);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = *(std::__shared_weak_count **)(v18 + 16);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      MEMORY[0x227684CE8](v18, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v25 = (void *)_os_log_send_and_compose_impl();
    if (v25)
      free(v25);
  }
  return 0;
}

void sub_223A4C8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_22319A054((uint64_t *)va2);
  sub_22319A054((uint64_t *)va1);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A4C8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223199DE8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A4C8EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_223A4C910(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t *v21;

  if ((char *)a3[1] - (char *)*a3 <= 3)
  {
    v16 = a2;
    v17 = (std::string *)"{}";
    v18 = a2;
    v19 = (std::string *)"{}";
    v20 = (std::string *)"{}";
    v4 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v4 != -1)
    {
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
      return ((uint64_t (*)(std::string *, uint64_t))off_24EC5DE60[v4])(&v15, a2);
    }
LABEL_19:
    sub_22316DD70();
  }
  v16 = a2;
  v17 = (std::string *)"{";
  v18 = a2;
  v19 = (std::string *)"{";
  v20 = (std::string *)"{";
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  ((void (*)(std::string *, uint64_t))off_24EC5DE78[v6])(&v15, a2);
  v8 = *a3;
  std::to_string(&v15, **a3);
  v16 = a2;
  v17 = &v15;
  v18 = a2;
  v19 = &v15;
  v20 = &v15;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
    sub_22316DD70();
  v21 = &v16;
  ((void (*)(uint64_t **, uint64_t))off_24EC5DE90[v9])(&v21, a2);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
    {
LABEL_12:
      do
      {
        v16 = a2;
        v17 = (std::string *)",";
        v18 = a2;
        v19 = (std::string *)",";
        v20 = (std::string *)",";
        v12 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v12 == -1)
          goto LABEL_19;
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
        ((void (*)(std::string *, uint64_t))off_24EC5DE78[v12])(&v15, a2);
        std::to_string(&v15, *v11);
        v16 = a2;
        v17 = &v15;
        v18 = a2;
        v19 = &v15;
        v20 = &v15;
        v13 = *(unsigned int *)(a2 + 24);
        if ((_DWORD)v13 == -1)
          sub_22316DD70();
        v21 = &v16;
        ((void (*)(uint64_t **, uint64_t))off_24EC5DE90[v13])(&v21, a2);
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__r_.__value_.__l.__data_);
        ++v11;
      }
      while (v11 != v10);
    }
  }
  else
  {
    v10 = a3[1];
    v11 = v8 + 1;
    if (v11 != v10)
      goto LABEL_12;
  }
  v16 = a2;
  v17 = (std::string *)"}";
  v18 = a2;
  v19 = (std::string *)"}";
  v20 = (std::string *)"}";
  v14 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v14 == -1)
    goto LABEL_19;
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  return ((uint64_t (*)(std::string *, uint64_t))off_24EC5DE78[v14])(&v15, a2);
}

void sub_223A4CB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A4CB5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v6;
  void *v7;
  void *v9;
  void *v10;
  int v11;
  float *v12;
  uint64_t v13;
  _DWORD *v14;
  float v15;
  int v16;
  double v17;
  int v18;
  int v19;
  int v20;
  float v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  _DWORD *v25;
  double *v26;
  int v27;
  int v28;
  float v29;
  BOOL v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  float *v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  float v42;
  BOOL v43;
  int v44;
  int v45;
  _DWORD *v46;
  _DWORD *v47;
  double *v48;
  double *v49;
  int v50;
  int v51;
  float v52;
  BOOL v53;
  double v54;
  int v55;
  int v56;
  int v57;
  int v58;
  float *v59;
  uint64_t v60;
  double *v61;
  _DWORD *v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  unsigned int v68;
  float v69;
  unsigned int v70;
  float v71;
  float v72;
  unsigned int v73;
  float v74;
  double *v75;
  _DWORD *v76;
  uint64_t v77;
  float *v78;
  unsigned int v79;
  float v80;
  unsigned int v81;
  float v82;
  uint64_t result;
  unsigned int v84;
  float v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  double v90;
  float v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  float v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  float *v99;
  unsigned int v100;
  float v101;
  unsigned int v102;
  float v103;
  uint64_t v104;
  int v105;
  float v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  float *v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  float v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  double v128;
  float v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  char *v133;
  char *v134;
  unsigned int v135;
  double v136;
  uint64_t v137;
  float *v138;
  float *v139;
  float v140;
  unsigned int v141;
  uint64_t v142;
  float v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  double v147;
  float v148;
  uint64_t v149;
  int v150;
  int v151;
  float v152;
  uint64_t v153;
  int v154;
  float v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  float v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t size;
  unint64_t sizea;

  if ((*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32) || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/ImageProcessing/include/Kit/ImageProcessing/BoxFilter.h", 141, (uint64_t)"input.Size() == result.Size()", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v3 = *(_QWORD *)(a1 + 32);
  v4 = HIDWORD(v3);
  if ((_DWORD)qword_2540CCC78 != (_DWORD)v3 || HIDWORD(qword_2540CCC78) != HIDWORD(v3))
  {
    size = ((8 * (_DWORD)v3 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v3);
    if (size)
    {
      v6 = malloc_type_malloc(size, 0xAE2F145AuLL);
      qword_2540CCC70 = 0;
      qword_2540CCC78 = v3;
      v7 = (void *)qword_2540CCC88;
      qword_2540CCC80 = ((unint64_t)(((8 * (_DWORD)v3 + 15) & 0xFFFFFFF0) >> 4) << 36) | 8;
      qword_2540CCC88 = (uint64_t)v6;
      if (!v7)
        goto LABEL_11;
      goto LABEL_10;
    }
    qword_2540CCC70 = 0;
    qword_2540CCC78 = v3;
    v7 = (void *)qword_2540CCC88;
    qword_2540CCC80 = ((unint64_t)(((8 * (_DWORD)v3 + 15) & 0xFFFFFFF0) >> 4) << 36) | 8;
    qword_2540CCC88 = 0;
    if (v7)
LABEL_10:
      free(v7);
  }
LABEL_11:
  if ((_DWORD)qword_2540CCC98 != (_DWORD)v3 || HIDWORD(qword_2540CCC98) != HIDWORD(v3))
  {
    sizea = ((4 * (_DWORD)v3 + 15) & 0xFFFFFFF0) * (unint64_t)HIDWORD(v3);
    if (sizea)
    {
      v9 = malloc_type_malloc(sizea, 0xAE2F145AuLL);
      qword_2540CCC90 = 0;
      qword_2540CCC98 = v3;
      v10 = (void *)qword_2540CCCA8;
      qword_2540CCCA0 = ((unint64_t)(((4 * (_DWORD)v3 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
      qword_2540CCCA8 = (uint64_t)v9;
      if (!v10)
        goto LABEL_18;
      goto LABEL_17;
    }
    qword_2540CCC90 = 0;
    qword_2540CCC98 = v3;
    v10 = (void *)qword_2540CCCA8;
    qword_2540CCCA0 = ((unint64_t)(((4 * (_DWORD)v3 + 15) & 0xFFFFFFF0) >> 4) << 36) | 4;
    qword_2540CCCA8 = 0;
    if (v10)
LABEL_17:
      free(v10);
  }
LABEL_18:
  v11 = *(_DWORD *)(a1 + 40);
  v12 = *(float **)(a1 + 24);
  v13 = qword_2540CCC88;
  v14 = (_DWORD *)qword_2540CCCA8;
  v15 = *v12;
  v16 = *v12 > -65504.0;
  if (*v12 <= -65504.0)
    v15 = 0.0;
  v17 = v15;
  *(double *)qword_2540CCC88 = v17;
  *v14 = v16;
  v18 = v3 - 1;
  if ((_DWORD)v3 == 1)
  {
    if (HIDWORD(v3) != 1)
    {
      v19 = 1;
      do
      {
        v20 = HIDWORD(qword_2540CCCA0);
        v21 = v12[*(_DWORD *)(a1 + 44) * v19];
        v22 = HIDWORD(qword_2540CCCA0) * (v19 - 1);
        v23 = v21 <= -65504.0;
        if (v21 <= -65504.0)
          v21 = 0.0;
        *(double *)(v13 + (HIDWORD(qword_2540CCC80) * v19)) = *(double *)(v13
                                                                                      + (HIDWORD(qword_2540CCC80) * (v19 - 1)))
                                                                          + v21;
        v24 = *(_DWORD *)((char *)v14 + v22);
        if (!v23)
          ++v24;
        *(_DWORD *)((char *)v14 + (v20 * v19++)) = v24;
      }
      while (HIDWORD(v3) != v19);
    }
  }
  else
  {
    v25 = v14 + 1;
    v26 = (double *)(v13 + 8);
    v27 = v11;
    v28 = v3 - 1;
    do
    {
      v29 = v12[v27];
      v30 = v29 <= -65504.0;
      if (v29 <= -65504.0)
        v29 = 0.0;
      v17 = v17 + v29;
      *v26++ = v17;
      if (!v30)
        ++v16;
      *v25++ = v16;
      v27 += v11;
      --v28;
    }
    while (v28);
    if (HIDWORD(v3) != 1)
    {
      v31 = 0;
      v32 = v14 + 1;
      v33 = v13 + 8;
      v34 = 1;
      do
      {
        v35 = *(_DWORD *)(a1 + 40);
        v36 = &v12[*(_DWORD *)(a1 + 44) * v34];
        v37 = HIDWORD(qword_2540CCC80);
        v38 = (HIDWORD(qword_2540CCC80) * v34);
        v39 = HIDWORD(qword_2540CCCA0);
        v40 = HIDWORD(qword_2540CCCA0) * (v34 - 1);
        v41 = (HIDWORD(qword_2540CCCA0) * v34);
        v42 = *v36;
        v43 = *v36 <= -65504.0;
        if (*v36 <= -65504.0)
          v42 = 0.0;
        *(double *)(v13 + v38) = *(double *)(v13 + (HIDWORD(qword_2540CCC80) * (v34 - 1))) + v42;
        v44 = *(_DWORD *)((char *)v14 + v40);
        v45 = !v43;
        if (!v43)
          ++v44;
        *(_DWORD *)((char *)v14 + v41) = v44;
        v46 = (_DWORD *)((char *)v32 + v41);
        v47 = (_DWORD *)((char *)v32 + (v39 * v31));
        v48 = (double *)(v33 + v38);
        v49 = (double *)(v33 + (v37 * v31));
        v50 = v35;
        v51 = v18;
        do
        {
          v52 = v36[v50];
          v53 = v52 <= -65504.0;
          if (v52 <= -65504.0)
            v52 = 0.0;
          v42 = v42 + v52;
          v54 = *v49++;
          *v48++ = v54 + v42;
          LODWORD(v54) = *v47++;
          v55 = LODWORD(v54);
          if (!v53)
            ++v45;
          *v46++ = v55 + v45;
          v50 += v35;
          --v51;
        }
        while (v51);
        ++v34;
        ++v31;
      }
      while (v34 != (_DWORD)v4);
    }
  }
  v56 = *(_DWORD *)(a2 + 32);
  v57 = HIDWORD(qword_2540CCC80);
  v58 = HIDWORD(qword_2540CCCA0);
  v59 = *(float **)(a2 + 24);
  v60 = (v56 - 1);
  v61 = (double *)(v13 + HIDWORD(qword_2540CCC80));
  v62 = (_DWORD *)((char *)v14 + HIDWORD(qword_2540CCCA0));
  v63 = *(unsigned int *)(a2 + 40);
  v164 = *(unsigned int *)(a2 + 44);
  v64 = v62[1];
  v65 = (2 * HIDWORD(qword_2540CCC80));
  v66 = (2 * HIDWORD(qword_2540CCCA0));
  v161 = v56;
  if (v56 == 3)
  {
    if (v64)
    {
      v67 = v61[1] / (double)v64;
      *v59 = v67;
      v68 = v62[2];
      if (v68)
        goto LABEL_54;
    }
    else
    {
      *v59 = NAN;
      v68 = v62[2];
      if (v68)
      {
LABEL_54:
        v69 = v61[2] / (double)v68;
        v59[v63] = v69;
        v70 = v62[v60] - *v62;
        if (!v70)
        {
LABEL_55:
          v71 = NAN;
          goto LABEL_66;
        }
LABEL_65:
        v71 = (v61[v60] - *v61) / (double)v70;
LABEL_66:
        v59[(2 * v63)] = v71;
        v75 = (double *)(v13 + v65);
        v76 = (_DWORD *)((char *)v14 + v66);
        v77 = *(unsigned int *)(a2 + 40);
        v78 = &v59[v164];
        v79 = v76[1];
        if (v79)
        {
          v80 = v75[1] / (double)v79;
          *v78 = v80;
          v81 = v76[2];
          if (v81)
            goto LABEL_68;
        }
        else
        {
          *v78 = NAN;
          v81 = v76[2];
          if (v81)
          {
LABEL_68:
            v82 = v75[2] / (double)v81;
            v78[v77] = v82;
            result = v76[v60];
            v84 = result - *v76;
            if (!v84)
            {
LABEL_69:
              v85 = NAN;
              v86 = 2 * v77;
              goto LABEL_96;
            }
            goto LABEL_85;
          }
        }
        v78[v77] = NAN;
        result = v76[v60];
        v84 = result - *v76;
        if (!v84)
          goto LABEL_69;
LABEL_85:
        v85 = (v75[v60] - *v75) / (double)v84;
        v86 = 2 * v77;
        goto LABEL_96;
      }
    }
    v59[v63] = NAN;
    v70 = v62[v60] - *v62;
    if (!v70)
      goto LABEL_55;
    goto LABEL_65;
  }
  if (!v64)
  {
    *v59 = NAN;
    v73 = v62[2];
    if (v73)
      goto LABEL_58;
LABEL_71:
    v74 = NAN;
    goto LABEL_72;
  }
  v72 = v61[1] / (double)v64;
  *v59 = v72;
  v73 = v62[2];
  if (!v73)
    goto LABEL_71;
LABEL_58:
  v74 = v61[2] / (double)v73;
LABEL_72:
  v87 = 0;
  v59[v63] = v74;
  v88 = 2 * v63;
  v89 = (v56 - 3);
  do
  {
    v92 = (v87 + 3);
    v93 = v62[v92] - v62[v87];
    if (v93)
      v90 = (v61[v92] - v61[v87]) / (double)v93;
    else
      v90 = NAN;
    v91 = v90;
    v59[v88] = v91;
    v88 += v63;
    ++v87;
  }
  while ((_DWORD)v89 != (_DWORD)v87);
  v94 = v62[v60] - v62[v89];
  if (v94)
    v95 = (v61[v60] - v61[v89]) / (double)v94;
  else
    v95 = NAN;
  v59[(v63 * v60)] = v95;
  v96 = v13 + v65;
  v97 = (char *)v14 + v66;
  v98 = *(unsigned int *)(a2 + 40);
  v99 = &v59[v164];
  v100 = *((_DWORD *)v97 + 1);
  if (v100)
  {
    v101 = *(double *)(v96 + 8) / (double)v100;
    *v99 = v101;
    v102 = *((_DWORD *)v97 + 2);
    if (v102)
    {
LABEL_82:
      v103 = *(double *)(v96 + 16) / (double)v102;
      goto LABEL_88;
    }
  }
  else
  {
    *v99 = NAN;
    v102 = *((_DWORD *)v97 + 2);
    if (v102)
      goto LABEL_82;
  }
  v103 = NAN;
LABEL_88:
  v104 = 0;
  v99[v98] = v103;
  v105 = 2 * v98;
  do
  {
    while (1)
    {
      v107 = (v104 + 3);
      v108 = *(_DWORD *)&v97[4 * v107] - *(_DWORD *)&v97[4 * v104];
      if (!v108)
        break;
      v106 = (*(double *)(v96 + 8 * v107) - *(double *)(v96 + 8 * v104)) / (double)v108;
      v99[v105] = v106;
      v105 += v98;
      if ((_DWORD)v89 == (_DWORD)++v104)
        goto LABEL_92;
    }
    v99[v105] = NAN;
    v105 += v98;
    ++v104;
  }
  while ((_DWORD)v89 != (_DWORD)v104);
LABEL_92:
  v109 = *(_DWORD *)&v97[4 * v60];
  result = *(unsigned int *)&v97[4 * v89];
  v110 = v109 - result;
  if (v110)
    v85 = (*(double *)(v96 + 8 * v60) - *(double *)(v96 + 8 * v89)) / (double)v110;
  else
    v85 = NAN;
  v86 = v98 * v60;
LABEL_96:
  v59[v164 + v86] = v85;
  v160 = *(_DWORD *)(a2 + 36);
  v162 = 8 * v60;
  v163 = v160 - 1;
  if (v160 != 3)
  {
    v122 = 0;
    v123 = 0;
    v124 = (v56 - 3);
    v125 = 2;
    v126 = 3 * v57;
    v127 = 3 * v58;
    do
    {
      v130 = v13 + ((v125 - 2) * v57);
      v131 = v125 + 1;
      v132 = v13 + ((v125 + 1) * v57);
      v133 = (char *)v14 + ((v125 - 2) * v58);
      v134 = (char *)v14 + ((v125 + 1) * v58);
      v135 = *((_DWORD *)v134 + 1) - *((_DWORD *)v133 + 1);
      if (v135)
        v136 = (*(double *)(v132 + 8) - *(double *)(v130 + 8)) / (double)v135;
      else
        v136 = NAN;
      v137 = *(unsigned int *)(a2 + 40);
      v138 = v59;
      v139 = &v59[(v125 * v164)];
      v140 = v136;
      *v139 = v140;
      v141 = *((_DWORD *)v134 + 2) - *((_DWORD *)v133 + 2);
      if (v141)
      {
        v143 = (*(double *)(v132 + 16) - *(double *)(v130 + 16)) / (double)v141;
        v139[v137] = v143;
        v142 = v60;
        if ((_DWORD)v60 != 2)
        {
LABEL_113:
          v145 = 0;
          v146 = 2 * v137;
          do
          {
            v149 = 4 * (v145 + 3);
            v150 = *(_DWORD *)((char *)&v14[v145] + v122) + *(_DWORD *)&v134[v149];
            v151 = *(_DWORD *)&v133[v149] + *(_DWORD *)((char *)&v14[v145] + v127);
            if (v150 == v151)
              v147 = NAN;
            else
              v147 = (*(double *)(v132 + 8 * (v145 + 3))
                    - *(double *)(v13 + v126 + 8 * v145)
                    - *(double *)(v130 + 8 * (v145 + 3))
                    + *(double *)(v13 + v123 + 8 * v145))
                   / (double)(v150 - v151);
            v148 = v147;
            v139[v146] = v148;
            v146 += v137;
            ++v145;
          }
          while ((_DWORD)v124 != (_DWORD)v145);
        }
      }
      else
      {
        v139[v137] = NAN;
        v142 = v60;
        if ((_DWORD)v60 != 2)
          goto LABEL_113;
      }
      v60 = v142;
      result = (*(_DWORD *)&v133[4 * v124] + *(_DWORD *)&v134[4 * v142]);
      v144 = result - (*(_DWORD *)&v134[4 * v124] + *(_DWORD *)&v133[4 * v142]);
      if (v144)
        v128 = (*(double *)(v132 + v162)
              - *(double *)(v132 + 8 * v124)
              - *(double *)(v130 + v162)
              + *(double *)(v130 + 8 * v124))
             / (double)v144;
      else
        v128 = NAN;
      v129 = v128;
      v139[(v137 * v142)] = v129;
      v123 += v57;
      v126 += v57;
      v127 += v58;
      v122 += v58;
      v125 = v131;
      v59 = v138;
    }
    while (v131 != v163);
  }
  v111 = v13 + (v163 * v57);
  v112 = (char *)v14 + (v163 * v58);
  v113 = v13 + ((v160 - 3) * v57);
  v114 = (char *)v14 + ((v160 - 3) * v58);
  v115 = *(unsigned int *)(a2 + 40);
  v116 = &v59[(v163 * v164)];
  v117 = *((_DWORD *)v112 + 1) - *((_DWORD *)v114 + 1);
  if (v117)
  {
    v152 = (*(double *)(v111 + 8) - *(double *)(v113 + 8)) / (double)v117;
    v118 = *(_DWORD *)&v112[4 * v60];
    *v116 = v152;
    v119 = *((_DWORD *)v112 + 2) - *((_DWORD *)v114 + 2);
    if (v119)
    {
LABEL_99:
      v120 = (*(double *)(v111 + 16) - *(double *)(v113 + 16)) / (double)v119;
      v121 = v161;
      v116[v115] = v120;
      if ((_DWORD)v60 == 2)
        goto LABEL_124;
      goto LABEL_120;
    }
  }
  else
  {
    v118 = *(_DWORD *)&v112[4 * v60];
    *v116 = NAN;
    v119 = *((_DWORD *)v112 + 2) - *((_DWORD *)v114 + 2);
    if (v119)
      goto LABEL_99;
  }
  v121 = v161;
  v116[v115] = NAN;
  if ((_DWORD)v60 == 2)
    goto LABEL_124;
LABEL_120:
  v153 = 0;
  v154 = 2 * v115;
  result = (v121 - 3);
  do
  {
    while (1)
    {
      v156 = *(_DWORD *)&v114[4 * v153]
           + *(_DWORD *)&v112[4 * (v153 + 3)]
           - (*(_DWORD *)&v114[4 * (v153 + 3)]
            + *(_DWORD *)&v112[4 * v153]);
      if (!v156)
        break;
      v155 = (*(double *)(v111 + 8 * (v153 + 3))
            - *(double *)(v111 + 8 * v153)
            - *(double *)(v113 + 8 * (v153 + 3))
            + *(double *)(v113 + 8 * v153))
           / (double)v156;
      v116[v154] = v155;
      v154 += v115;
      if ((_DWORD)result == (_DWORD)++v153)
        goto LABEL_124;
    }
    v116[v154] = NAN;
    v154 += v115;
    ++v153;
  }
  while ((_DWORD)result != (_DWORD)v153);
LABEL_124:
  v157 = *(_DWORD *)&v114[4 * (v121 - 3)] + v118 - (*(_DWORD *)&v112[4 * (v121 - 3)] + *(_DWORD *)&v114[4 * v60]);
  if (v157)
  {
    v159 = (*(double *)(v111 + v162)
          - *(double *)(v111 + 8 * (v121 - 3))
          - *(double *)(v113 + v162)
          + *(double *)(v113 + 8 * (v121 - 3)))
         / (double)v157;
    v158 = (v115 * v60);
    v116[v158] = v159;
  }
  else
  {
    v158 = (v115 * v60);
    v159 = NAN;
  }
  v116[v158] = v159;
  return result;
}

uint64_t sub_223A4D708(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_223A4D748(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223A4D758(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A4D788(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_223A4D7A0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

void sub_223A4D7E0(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DF70;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_223A4D854(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DF70;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_223A4D8CC(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_223A4DA10(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v5 = *(std::__shared_weak_count **)(v2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10E1C40F356210ALL);
  }
  v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t sub_223A4D9A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18AutoReturni"
                     "ngMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_pt"
                     "rIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18"
                                "AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_"
                                "EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default"
                                "_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE4ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_223A4DA10(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v12 = a2;
    v5 = (uint64_t *)sig[2];
    if ((unint64_t)v5 >= sig[3])
    {
      v6 = sub_2231FFB58(sig + 1, &v12);
      v7 = v12;
      sig[2] = v6;
      v12 = 0;
      if (v7)
      {
        v8 = *(std::__shared_weak_count **)(v7 + 16);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        MEMORY[0x227684CE8](v7, 0x10E1C40F356210ALL);
      }
    }
    else
    {
      *v5 = a2;
      sig[2] = v5 + 1;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_223A4DAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2231FED24((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_223A4DB04(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t (**v22)();

  v22 = &off_24EC24C98;
  sub_22449ACFC((uint64_t)&v13);
  v2 = operator new();
  *(_QWORD *)v2 = &off_24EC24CE0;
  *(_OWORD *)(v2 + 8) = v14;
  *(_OWORD *)(v2 + 24) = v15;
  *(_OWORD *)(v2 + 40) = v16;
  *(_QWORD *)(v2 + 56) = v17;
  *(_OWORD *)(v2 + 64) = v18;
  *(_QWORD *)(v2 + 80) = v19;
  *(_QWORD *)(v2 + 104) = v21;
  *(_OWORD *)(v2 + 88) = v20;
  v3 = (std::__shared_weak_count *)operator new();
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24D78;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
  *a1 = v2;
  a1[1] = (uint64_t)v3;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  a1[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v2 + 64))(&v13, v2, 32);
  v7 = v13[1];
  v6 = v13[2];
  *(_OWORD *)(a1 + 3) = *v13;
  *(_OWORD *)(a1 + 5) = v7;
  *(_OWORD *)(a1 + 7) = v6;
  v13 = 0;
  MEMORY[0x227684CE8]();
  a1[9] = a1[3];
  a1[14] = a1[8];
  v8 = *((_OWORD *)a1 + 3);
  *((_OWORD *)a1 + 5) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 6) = v8;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 104))(*a1);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a1 + 60) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223A4DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_223167354(v10);
  sub_223167354((uint64_t)&a10);
  sub_223203D80(&a9);
  _Unwind_Resume(a1);
}

void sub_223A4DD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223203D80(&a9);
  _Unwind_Resume(a1);
}

void sub_223A4DD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21)
    free(a21);
  _Unwind_Resume(exception_object);
}

void sub_223A4DD54(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DFC0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_223A4DDC8(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5DFC0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_223A4DE40(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_223A4DF84(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v5 = *(std::__shared_weak_count **)(v2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10E1C404B2A450ELL);
  }
  v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t sub_223A4DF14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_18AutoReturn"
                     "ingMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_p"
                     "trIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_1"
                                "8AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7"
                                "_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14defaul"
                                "t_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE32ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_223A4DF84(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v12 = a2;
    v5 = (uint64_t *)sig[2];
    if ((unint64_t)v5 >= sig[3])
    {
      v6 = sub_223204760(sig + 1, &v12);
      v7 = v12;
      sig[2] = v6;
      v12 = 0;
      if (v7)
      {
        v8 = *(std::__shared_weak_count **)(v7 + 16);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        MEMORY[0x227684CE8](v7, 0x10E1C404B2A450ELL);
      }
    }
    else
    {
      *v5 = a2;
      sig[2] = v5 + 1;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_223A4E05C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_223203124((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_223A4E078(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223A4E088(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A4E0B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_223A4E114(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E060;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_223A4E188(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E060;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x227684CE8);
}

void sub_223A4E200(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  char v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = sub_223A4E344(*(std::mutex **)(a1 + 32), v2);
  if (v2)
    v4 = v3;
  else
    v4 = 1;
  if ((v4 & 1) == 0)
  {
    v5 = *(std::__shared_weak_count **)(v2 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x10F1C405026F4E9);
  }
  v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t sub_223A4E2D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturni"
                     "ngMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_pt"
                     "rIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18"
                                "AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_"
                                "EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default"
                                "_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS0_3img5ImageILNS3_6FormatE1ENS3_13DynamicBufferEEENS1_18AutoReturningMakeTIS7_NS1_21PoolObjectInitializerIS7_EENS1_23PoolObjectDeinitializerIS7_EEEENSt3__110shared_ptrIS7_EENS1_19ObjectBorrowingPoolINSE_10unique_ptrIS7_NSE_14default_deleteIS7_EEEESD_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

BOOL sub_223A4E344(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v12 = a2;
    v5 = (uint64_t *)sig[2];
    if ((unint64_t)v5 >= sig[3])
    {
      v6 = sub_2231F945C(sig + 1, &v12);
      v7 = v12;
      sig[2] = v6;
      v12 = 0;
      if (v7)
      {
        v8 = *(std::__shared_weak_count **)(v7 + 16);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        MEMORY[0x227684CE8](v7, 0x10F1C405026F4E9);
      }
    }
    else
    {
      *v5 = a2;
      sig[2] = v5 + 1;
    }
  }
  std::mutex::unlock(a1);
  return sig != 0;
}

void sub_223A4E41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_2231F840C((uint64_t *)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_223A4E43C()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223A4E450(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC5E0B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223A4E488(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC5E0B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_223A4E4A8()
{
  return kdebug_trace();
}

uint64_t sub_223A4E4E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3vlm19MappedStateProvider16ComputeMeshState"
                     "ERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSF_6MatrixIfLj4"
                     "ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNSN_11PixelOriginE1EEERKNS3_12basic_stringIcNS3_11char_"
                     "traitsIcEENS3_9allocatorIcEEEEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3vlm19MappedStateProvider16Compu"
                                "teMeshStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupSto"
                                "rageIfNSF_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNSN_11PixelOriginE1EEE"
                                "RKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3vlm19MappedStateProvider16ComputeMeshStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSF_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNSN_11PixelOriginE1EEERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_5recon3vlm19MappedStateProvider16ComputeMeshStateERKNS3_6chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEERKN3cva15SE3GroupStorageIfNSF_6MatrixIfLj4ELj4ELb1EEEEERKNS_3kit3cam13PinholeCameraIfLNSN_11PixelOriginE1EEERKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A4E550()
{
  return &unk_24EC5E110;
}

void sub_223A4E55C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223A4E56C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A4E59C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_223A4E5F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223A4E608(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5E180;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A4E638(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL sub_223A4E694(_BOOL8 result, _QWORD *a2, unsigned __int8 *a3, char *a4)
{
  char *v4;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  char v18;

  v4 = a4;
  a2[1] = a4;
  if (*(_DWORD *)(result + 8))
  {
    v7 = (_DWORD *)result;
    v8 = 0;
    while (1)
    {
      *a2 = a3;
      a2[1] = v4;
      v9 = *a3;
      v10 = v9 >= 0x2A ? &byte_2245C9FE2 : &byte_2245C3FE4[3 * v9];
      v11 = *v10;
      v12 = v10[1];
      v13 = v10[2];
      if (!v4)
      {
        result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        if (result)
          break;
      }
      *v4 = v11;
      v4[1] = v12;
      v4[2] = v13;
      a3 += v7[3];
      v4 += v7[4];
      if (++v8 >= v7[2])
        goto LABEL_10;
    }
LABEL_9:
    abort();
  }
LABEL_10:
  *a2 = a3;
  a2[1] = v4;
  v14 = *a3;
  if (v14 >= 0x2A)
    v15 = &byte_2245C9FE2;
  else
    v15 = &byte_2245C3FE4[3 * v14];
  v16 = *v15;
  v17 = v15[1];
  v18 = v15[2];
  if (!v4)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    if (result)
      goto LABEL_9;
  }
  *v4 = v16;
  v4[1] = v17;
  v4[2] = v18;
  return result;
}

_QWORD *sub_223A4E7F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v17, v4);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 48))(v17);
  v10 = v17;
  if (v17)
  {
    result = (_QWORD *)operator new();
    v12 = v17;
    *result = &off_24EC20DE8;
    result[1] = 0;
    result[2] = 0;
    result[3] = v12;
  }
  else
  {
    result = 0;
  }
  if (*(_BYTE *)(a1 + 28))
    v13 = (4 * *(_DWORD *)(a1 + 24)) | 0x100000000;
  else
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 92);
  v15 = 4 * *(_DWORD *)(a1 + 108);
  v16 = *(_WORD *)(a1 + 128);
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 48) = 32;
  *(_WORD *)(a2 + 52) = v16;
  return result;
}

void sub_223A4E910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

float sub_223A4E934(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  float v4;
  float32x2_t v5;
  int32x2_t v12;
  unsigned __int32 v13;
  float result;

  *a1 = a2;
  v3 = *a3;
  a1[2] = *a3;
  if (a2)
  {
    v4 = *(float *)a2;
    v5 = *(float32x2_t *)(a2 + 4);
    if (!v3)
      goto LABEL_6;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_8;
    }
    v3 = a1[2];
    v4 = MEMORY[0];
    v5 = (float32x2_t)MEMORY[4];
    if (!v3)
    {
LABEL_6:
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))goto LABEL_7;
LABEL_8:
      abort();
    }
  }
LABEL_7:
  __asm { FMOV            V0.2S, #1.0 }
  v12 = (int32x2_t)vshl_u32((uint32x2_t)vcvt_s32_f32(vmul_f32(vsub_f32(_D0, v5), (float32x2_t)vdup_n_s32(0x42FF0000u))), (uint32x2_t)0x1000000008);
  v13 = vorr_s8((int8x8_t)vdup_lane_s32(v12, 1), (int8x8_t)v12).u32[0];
  result = (float)(1.0 - v4) * 127.5;
  *(_BYTE *)(v3 + 2) = BYTE2(v13);
  *(_WORD *)v3 = v13 | (int)result;
  return result;
}

BOOL sub_223A4EA54(_BOOL8 result, unsigned int a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v3 = (unsigned __int8 *)result;
  if (a2 >= 0x1A)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/MaterialVoxel.cpp", 35, (uint64_t)"label < kNumMaterialLabels", 26, (uint64_t)"Cannot integrate an invalid material label", 42, (void (*)(void **))sub_22457406C);
    if (result)
      abort();
  }
  if (v3[26] == 30)
  {
    v4 = *v3 >> 1;
    *v3 = v4;
    v5 = v3[1] >> 1;
    v3[1] = v5;
    LOBYTE(v4) = v5 + v4;
    v6 = v3[2] >> 1;
    v3[2] = v6;
    v7 = v3[3] >> 1;
    v3[3] = v7;
    LOBYTE(v4) = v4 + v6 + v7;
    v8 = v3[4] >> 1;
    v3[4] = v8;
    v9 = v3[5] >> 1;
    v3[5] = v9;
    LOBYTE(v8) = v8 + v9;
    v10 = v3[6] >> 1;
    v3[6] = v10;
    LOBYTE(v4) = v4 + v8 + v10;
    v11 = v3[7] >> 1;
    v3[7] = v11;
    v12 = v3[8] >> 1;
    v3[8] = v12;
    LOBYTE(v11) = v11 + v12;
    v13 = v3[9] >> 1;
    v3[9] = v13;
    LOBYTE(v11) = v11 + v13;
    v14 = v3[10] >> 1;
    v3[10] = v14;
    LOBYTE(v4) = v4 + v11 + v14;
    v15 = v3[11] >> 1;
    v3[11] = v15;
    v16 = v3[12] >> 1;
    v3[12] = v16;
    LOBYTE(v15) = v15 + v16;
    v17 = v3[13] >> 1;
    v3[13] = v17;
    LOBYTE(v15) = v15 + v17;
    v18 = v3[14] >> 1;
    v3[14] = v18;
    LOBYTE(v15) = v15 + v18;
    v19 = v3[15] >> 1;
    v3[15] = v19;
    LOBYTE(v4) = v4 + v15 + v19;
    v20 = v3[16] >> 1;
    v3[16] = v20;
    v21 = v3[17] >> 1;
    v3[17] = v21;
    LOBYTE(v20) = v20 + v21;
    v22 = v3[18] >> 1;
    v3[18] = v22;
    LOBYTE(v20) = v20 + v22;
    v23 = v3[19] >> 1;
    v3[19] = v23;
    LOBYTE(v20) = v20 + v23;
    v24 = v3[20] >> 1;
    v3[20] = v24;
    LOBYTE(v20) = v20 + v24;
    v25 = v3[21] >> 1;
    v3[21] = v25;
    LOBYTE(v4) = v4 + v20 + v25;
    v26 = v3[22] >> 1;
    v3[22] = v26;
    v27 = v3[23] >> 1;
    v3[23] = v27;
    LOBYTE(v26) = v26 + v27;
    v28 = v3[24] >> 1;
    v3[24] = v28;
    LOBYTE(v26) = v26 + v28;
    v29 = v3[25] >> 1;
    v3[25] >>= 1;
    v3[26] = v4 + v26 + v29;
  }
  ++v3[a2];
  ++v3[26];
  v30 = v3[27];
  if (v30 == 255 || v3[a2] >= v3[v30])
    v3[27] = a2;
  return result;
}

unint64_t sub_223A4EC9C(unint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  char v6;
  int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  __int16 v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  __int16 v26;
  unsigned int v27;
  unsigned int v29;
  uint64_t v30;
  _WORD *v31;
  unint64_t v32;

  v32 = a1;
  if (!(_BYTE)a2)
    return v32;
  v3 = a2 | ((a2 >> 8) << 8);
  if (!(_BYTE)a1)
  {
    v4 = 0;
    LOWORD(v32) = a2 | (unsigned __int16)((unsigned __int16)(a2 >> 8) << 8);
LABEL_9:
    v6 = 1;
    v7 = a2;
    goto LABEL_13;
  }
  if (BYTE1(a2) == BYTE1(a1))
  {
    if (a1 <= 0x1Du)
    {
      v4 = 0;
      v5 = (a2 + a1);
      if (v5 >= 0x1E)
        LOWORD(v5) = 30;
      LOWORD(v32) = a1 & 0xFF00 | v5;
      goto LABEL_9;
    }
    v7 = 0;
    v6 = 1;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v4 = 0x80000000;
LABEL_13:
  if (a1 + v7 >= 0xFF)
    v8 = 255;
  else
    v8 = a1 + v7;
  v9 = v7 + a1;
  v10 = a1 >> 16;
  if ((v6 & 1) != 0)
    goto LABEL_25;
  v11 = a2 | ((a2 >> 8) << 8);
  if (!BYTE2(a1))
    goto LABEL_24;
  if (BYTE3(a1) == BYTE1(a2))
  {
    if (BYTE2(a1) > 0x1Du)
      goto LABEL_25;
    v12 = (BYTE2(a1) + a2);
    if (v12 >= 0x1E)
      LOWORD(v12) = 30;
    LOWORD(v11) = WORD1(a1) & 0xFF00 | v12;
LABEL_24:
    WORD1(v32) = v11;
    v9 += a2;
    v4 = 1;
LABEL_25:
    v13 = HIDWORD(a1);
    v14 = v9 + v10;
    goto LABEL_37;
  }
  v13 = HIDWORD(a1);
  if (BYTE2(a1) >= v8)
    v16 = v8;
  else
    v16 = BYTE2(a1);
  v14 = v9 + v10;
  if (!BYTE4(a1))
  {
LABEL_32:
    WORD2(v32) = v3;
    v14 += a2;
    v4 = 2;
    goto LABEL_37;
  }
  if (BYTE5(a1) != BYTE1(a2))
  {
    v17 = HIWORD(a1) + HIDWORD(a1) + v14;
    if (BYTE4(a1) >= v16)
      v29 = v16;
    else
      v29 = BYTE4(a1);
    if (v29 <= BYTE6(a1))
    {
      v30 = BYTE2(a1) < v8;
      if (v16 > BYTE4(a1))
        v30 = 2;
      v31 = (_WORD *)((unint64_t)&v32 | (2 * v30));
      if (*v31 == 1)
      {
        *v31 = a2 | (unsigned __int16)((unsigned __int16)(a2 >> 8) << 8);
      }
      else
      {
        *v31 = *v31 & 0xFF00 | (*v31 - 1);
        LOBYTE(v17) = v17 - 1;
      }
    }
    else
    {
      HIWORD(v32) = (BYTE6(a1) + 1) | (a3 << 8);
      LOBYTE(v17) = v17 + 1;
      v4 = 3;
    }
    goto LABEL_38;
  }
  if (BYTE4(a1) <= 0x1Du)
  {
    v15 = (BYTE4(a1) + a2);
    if (v15 >= 0x1E)
      LOWORD(v15) = 30;
    LOWORD(v3) = WORD2(a1) & 0xFF00 | v15;
    goto LABEL_32;
  }
LABEL_37:
  v17 = HIWORD(a1) + v13 + v14;
LABEL_38:
  if (v17 >= 0x1Fu)
  {
    v18 = (BYTE2(a1) + 2 * v13 + 3 * BYTE6(a1)) / v17;
    v19 = v18 & 3;
    if ((_DWORD)v19 != v4)
    {
      v20 = *(_WORD *)((unint64_t)&v32 | (2 * v19));
      if ((_BYTE)v20)
        goto LABEL_47;
    }
    if ((v19 = ((_BYTE)v18 + 1) & 3, (_DWORD)v19 != v4)
      && (v20 = *(_WORD *)((unint64_t)&v32 | (2 * v19)), (_BYTE)v20)
      || (v19 = ((_BYTE)v18 + 2) & 3, (_DWORD)v19 != v4)
      && (v20 = *(_WORD *)((unint64_t)&v32 | (2 * v19)), (_BYTE)v20)
      || (v19 = ((_BYTE)v18 - 1) & 3, (_DWORD)v19 != v4)
      && (v20 = *(_WORD *)((unint64_t)&v32 | (2 * v19)), (_BYTE)v20))
    {
LABEL_47:
      *(_WORD *)((unint64_t)&v32 | (2 * v19)) = v20 & 0xFF00 | (v20 - 1);
    }
  }
  v21 = v32;
  v22 = v32;
  v23 = WORD1(v32);
  v24 = BYTE2(v32);
  if (v32 >= BYTE2(v32))
  {
    v25 = WORD1(v32);
    v23 = v32;
    v26 = WORD2(v32);
    v27 = BYTE4(v32);
    if (v32 >= BYTE4(v32))
    {
LABEL_50:
      v23 = v26;
      if (v27 <= v25)
        return v32;
      goto LABEL_54;
    }
  }
  else
  {
    LOWORD(v32) = WORD1(v32);
    WORD1(v32) = v21;
    v22 = v24;
    v25 = v21;
    v26 = WORD2(v32);
    v27 = BYTE4(v32);
    if (v22 >= BYTE4(v32))
      goto LABEL_50;
  }
  LOWORD(v32) = v26;
  WORD2(v32) = v23;
  if (v22 > v25)
  {
LABEL_54:
    WORD1(v32) = v23;
    WORD2(v32) = v25;
  }
  return v32;
}

uint64_t sub_223A4F004(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v6;
  int v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24EC5E1D0;
  if (*(_BYTE *)(a2 + 84))
  {
    v6 = *(unsigned __int8 *)(a2 + 48);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 64);
    if (!v6
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 167, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_13;
    }
    *(float *)(a1 + 12) = *(float *)(a2 + 8) * *(float *)(a2 + 16);
    if (*(_BYTE *)(a2 + 48))
      goto LABEL_9;
LABEL_8:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 172, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))goto LABEL_9;
LABEL_13:
    abort();
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
    abort();
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(float *)(a1 + 12) = *(float *)(a2 + 8) * *(float *)(a2 + 16);
  if (!*(_BYTE *)(a2 + 48))
    goto LABEL_8;
LABEL_9:
  v7 = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 20) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 284);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 96);
  v8 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 36) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v9 = (uint64_t *)(a1 + 64);
  v10 = *a3;
  if (*a3)
  {
    *a3 = 0;
    *v9 = v10;
  }
  else
  {
    sub_223A73360(a2, v9);
  }
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_223A4F1A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223A4F1C0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *a1 = &off_24EC5E1D0;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[8];
  a1[8] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_223A4F244(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *a1 = &off_24EC5E1D0;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[8];
  a1[8] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223A4F2D8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, unsigned int a11, void ***a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  int32x4_t v22;
  int32x4_t v23;
  float32x2_t v24;
  __int128 v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x2_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  double v39;
  void **v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  unsigned int *v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD **v58;
  _DWORD *v59;
  int v60;
  int v61;
  _QWORD **v62;
  int v63;
  int v64;
  _QWORD *v65;
  _DWORD *v66;
  _QWORD **v67;
  int v68;
  BOOL v69;
  int v70;
  _DWORD *v71;
  int v72;
  BOOL v73;
  _QWORD **v74;
  int v75;
  _QWORD *v76;
  _QWORD **v77;
  BOOL v78;
  _QWORD **v79;
  _DWORD *v80;
  int v81;
  int v82;
  _QWORD **v83;
  int v84;
  int v85;
  _QWORD *v86;
  _DWORD *v87;
  _QWORD **v88;
  int v89;
  BOOL v90;
  int v91;
  _DWORD *v92;
  int v93;
  BOOL v94;
  _QWORD **v95;
  int v96;
  _QWORD *v97;
  _QWORD **v98;
  float32x4_t v102;
  uint64_t v103;
  int v104;
  void *__p;
  unsigned int *v106;
  _OWORD v107[3];
  float32x2_t v108;
  unsigned __int32 v109;
  int v110;
  _QWORD **v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD **v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD **v117;
  _QWORD *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  int v122;

  v120 = 0u;
  v121 = 0u;
  v122 = 728301652;
  kdebug_trace();
  v118 = 0;
  v119 = 0;
  v116 = 0;
  v117 = &v118;
  v114 = &v115;
  v115 = 0;
  v112 = 0;
  v113 = 0;
  v111 = &v112;
  v22.i64[0] = *(_QWORD *)a9;
  v22.i32[2] = *(_DWORD *)(a9 + 8);
  v23.i64[0] = *(_QWORD *)(a9 + 16);
  v23.i32[2] = *(_DWORD *)(a9 + 24);
  v24.i32[0] = *(_DWORD *)(a9 + 40);
  *(_QWORD *)&v25 = vzip1q_s32(v22, v23).u64[0];
  v26.i64[0] = *(_QWORD *)(a9 + 48);
  v26.i32[2] = *(_DWORD *)(a9 + 56);
  v27 = (int8x16_t)vnegq_f32(v26);
  v28 = (int8x16_t)vtrn2q_s32(v22, v23);
  v28.i32[2] = HIDWORD(*(_QWORD *)(a9 + 32));
  v29 = (int8x16_t)vzip2q_s32(v22, v23);
  v30 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v25, *(float *)v27.i32), *(float32x2_t *)v28.i8, *(float32x2_t *)v26.f32, 1), *(float32x2_t *)v29.i8, v26, 2);
  v29.i32[2] = v24.i32[0];
  v31 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(a9 + 32), *(float32x2_t *)v27.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a9 + 32), 1), *(float32x2_t *)v26.f32, 1);
  *((_QWORD *)&v25 + 1) = *(_QWORD *)(a9 + 32);
  v26.i32[3] = 0;
  v26.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v28, 0).i32[3];
  *(uint64_t *)((char *)v26.i64 + 4) = vextq_s8(v28, v29, 4uLL).u64[0];
  v29.i64[1] = vdupq_laneq_s32((int32x4_t)v29, 2).u32[0];
  v107[2] = v29;
  v107[1] = v26;
  v107[0] = v25;
  v108 = v30;
  v109 = vmla_f32(v31, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL), v24).u32[0];
  v110 = 1065353216;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD ***, _QWORD ***, _QWORD ***))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), a3, a4, a5, a6, a7, a8, v107, a1 + 40, &v114, &v117, &v111);
  sub_223A661D8(a2, (uint64_t *)(a1 + 40), a9, *(_QWORD *)(a8 + 88), 1);
  if (a16 && a2[16])
  {
    v34.i32[0] = *(_DWORD *)(a9 + 8);
    v32.i32[0] = *(_DWORD *)(a9 + 40);
    v33.i64[0] = *(_QWORD *)(a9 + 48);
    v33.i32[2] = *(_DWORD *)(a9 + 56);
    v35 = (int8x16_t)vnegq_f32(v33);
    v34.i32[1] = *(_DWORD *)(a9 + 24);
    v36 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a9, *(int32x2_t *)(a9 + 16)), *(float *)v35.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)a9, *(int32x2_t *)(a9 + 16)), *(float32x2_t *)v33.f32, 1), v34, v33, 2);
    v37 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a15 + 32), v36.f32[0]), *(float32x4_t *)(a15 + 48), v36, 1), *(float32x4_t *)(a15 + 64), vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a9 + 32), *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a9 + 32), 1), *(float32x2_t *)v33.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), v32).f32[0]);
    v38 = vaddq_f32(*(float32x4_t *)(a15 + 80), v37);
    v37.i32[0] = *(_DWORD *)(a1 + 8);
    LODWORD(v106) = v38.i32[2];
    v102 = v38;
    __p = (void *)v38.i64[0];
    sub_223C01910((float32x2_t *)a15, (float32x2_t *)&__p, &v114, *(double *)v37.i64);
    LODWORD(v39) = *(_DWORD *)(a1 + 8);
    LODWORD(v106) = v102.i32[2];
    __p = (void *)v102.i64[0];
    sub_223C01910((float32x2_t *)a15, (float32x2_t *)&__p, &v117, v39);
  }
  v40 = *a12;
  v41 = (char *)**a12;
  if (v41 != (*a12)[1])
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricAllocator.cpp", 102, (uint64_t)"integration_blocks.IsEmpty()", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v40 = *a12;
    v41 = (char *)**a12;
  }
  v42 = (v119 + v116 + v113);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v40[2] - v41) >> 2) < v42)
  {
    v43 = (char *)v40[1];
    v44 = (char *)operator new(12 * v42);
    v45 = &v44[12 * ((v43 - v41) / 12)];
    v46 = v45;
    if (v43 != v41)
    {
      v46 = &v44[12 * ((v43 - v41) / 12)];
      do
      {
        v47 = *(_QWORD *)(v43 - 12);
        v43 -= 12;
        v48 = *((_DWORD *)v43 + 2);
        *(_QWORD *)(v46 - 12) = v47;
        v46 -= 12;
        *((_DWORD *)v46 + 2) = v48;
      }
      while (v43 != v41);
    }
    *v40 = v46;
    v40[1] = v45;
    v40[2] = &v44[12 * v42];
    if (v41)
      operator delete(v41);
  }
  (*(void (**)(void **__return_ptr, _QWORD *, _QWORD ***, _QWORD, uint64_t, uint64_t))(*a10 + 16))(&__p, a10, &v114, a11, a13, a14);
  v50 = (unsigned int *)__p;
  v49 = v106;
  if (__p != v106)
  {
    do
    {
      v53 = *v50;
      if ((_DWORD)v53 != -1)
      {
        if (a10[13] <= v53
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 667, (uint64_t)"index < metadata_blocks_.size()", 31, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
        {
LABEL_98:
          abort();
        }
        v54 = a10[12] + v53;
        v55 = *(_QWORD *)(a10[9] + 8 * (v54 / 0x1F));
        v56 = v54 % 0x1F;
        if (*(_BYTE *)(v55 + 132 * v56 + 20))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 668, (uint64_t)"!metadata_blocks_[index].IsErased()", 35, (uint64_t)"Cannot get an erased block", 26, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_98;
          }
          v57 = a10[12] + v53;
          v56 = v57 % 0x1F;
          v55 = *(_QWORD *)(a10[9] + 8 * (v57 / 0x1F));
        }
        v51 = v55 + 132 * v56;
        v52 = *(_QWORD *)v51;
        v104 = *(_DWORD *)(v51 + 8);
        v103 = v52;
        sub_223AB6E74(a12, &v103, 0);
      }
      ++v50;
    }
    while (v50 != v49);
  }
  v58 = v117;
  if (v117 != &v118)
  {
    do
    {
      v59 = v115;
      if (!v115)
        goto LABEL_102;
      v61 = *((_DWORD *)v58 + 7);
      v60 = *((_DWORD *)v58 + 8);
      v62 = &v115;
      v63 = *((_DWORD *)v58 + 9);
      do
      {
        v66 = v59;
        v67 = v62;
        v68 = v59[7];
        v69 = v68 < v61;
        if (v68 == v61)
        {
          v70 = v59[8];
          v69 = v70 < v60;
          if (v70 == v60)
            v69 = v59[9] < v63;
        }
        v64 = v69;
        v65 = v59 + 2;
        if (!v64)
        {
          v65 = v66;
          v62 = (_QWORD **)v66;
        }
        v59 = (_DWORD *)*v65;
      }
      while (v59);
      if (v62 == &v115)
        goto LABEL_102;
      if (v64)
        v71 = v67;
      else
        v71 = v66;
      v72 = v71[7];
      v73 = v61 < v72;
      if (v61 == v72)
      {
        v74 = v64 ? v67 : (_QWORD **)v66;
        v75 = *((_DWORD *)v74 + 8);
        v73 = v60 < v75;
        if (v60 == v75)
        {
          if (v64)
            v66 = v67;
          v73 = v63 < v66[9];
        }
      }
      if (v73)
      {
LABEL_102:
        if (sub_223A31E2C(a10 + 2, (uint64_t *)((char *)v58 + 28), a11))
          sub_223AB6E74(a12, (uint64_t *)((char *)v58 + 28), 1);
      }
      v76 = v58[1];
      if (v76)
      {
        do
        {
          v77 = (_QWORD **)v76;
          v76 = (_QWORD *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (_QWORD **)v58[2];
          v78 = *v77 == v58;
          v58 = v77;
        }
        while (!v78);
      }
      v58 = v77;
    }
    while (v77 != &v118);
  }
  v79 = v111;
  if (v111 != &v112)
  {
    do
    {
      v80 = v115;
      if (!v115)
        goto LABEL_103;
      v82 = *((_DWORD *)v79 + 7);
      v81 = *((_DWORD *)v79 + 8);
      v83 = &v115;
      v84 = *((_DWORD *)v79 + 9);
      do
      {
        v87 = v80;
        v88 = v83;
        v89 = v80[7];
        v90 = v89 < v82;
        if (v89 == v82)
        {
          v91 = v80[8];
          v90 = v91 < v81;
          if (v91 == v81)
            v90 = v80[9] < v84;
        }
        v85 = v90;
        v86 = v80 + 2;
        if (!v85)
        {
          v86 = v87;
          v83 = (_QWORD **)v87;
        }
        v80 = (_DWORD *)*v86;
      }
      while (v80);
      if (v83 == &v115)
        goto LABEL_103;
      if (v85)
        v92 = v88;
      else
        v92 = v87;
      v93 = v92[7];
      v94 = v82 < v93;
      if (v82 == v93)
      {
        v95 = v85 ? v88 : (_QWORD **)v87;
        v96 = *((_DWORD *)v95 + 8);
        v94 = v81 < v96;
        if (v81 == v96)
        {
          if (v85)
            v87 = v88;
          v94 = v84 < v87[9];
        }
      }
      if (v94)
      {
LABEL_103:
        if (sub_223A31E2C(a10 + 2, (uint64_t *)((char *)v79 + 28), a11))
          sub_223AB6E74(a12, (uint64_t *)((char *)v79 + 28), 2);
      }
      v97 = v79[1];
      if (v97)
      {
        do
        {
          v98 = (_QWORD **)v97;
          v97 = (_QWORD *)*v97;
        }
        while (v97);
      }
      else
      {
        do
        {
          v98 = (_QWORD **)v79[2];
          v78 = *v98 == v79;
          v79 = v98;
        }
        while (!v78);
      }
      v79 = v98;
    }
    while (v98 != &v112);
  }
  if (__p)
  {
    v106 = (unsigned int *)__p;
    operator delete(__p);
  }
  sub_223198030((uint64_t)&v111, v112);
  sub_223198030((uint64_t)&v114, v115);
  sub_223198030((uint64_t)&v117, v118);
  return kdebug_trace();
}

void sub_223A4FA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,_QWORD *a31)
{
  uint64_t v31;

  sub_223198030((uint64_t)&a30, a31);
  sub_223198030(v31 - 176, *(_QWORD **)(v31 - 168));
  sub_223198030(v31 - 152, *(_QWORD **)(v31 - 144));
  sub_2231874DC(v31 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_223A4FAC8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void **a5)
{
  std::__shared_weak_count *v10;
  __int128 v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  __n128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  int v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  _BYTE *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  _OWORD v101[5];
  __int128 v102;
  int v103;
  _BYTE v104[64];
  uint64_t (**v105)();
  uint64_t (**v106)(_QWORD);
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t (**v114)();
  uint64_t v115[6];
  uint64_t (**v116)();
  __n128 v117;
  _OWORD v118[2];
  __int128 v119;
  uint64_t (**v120)();
  __int128 v121;
  _OWORD v122[2];
  uint64_t (**v123)();
  __int128 v124;
  _BYTE v125[26];
  double v126;
  __int128 v127;
  uint64_t v128;
  int v129;
  unsigned __int8 v130[17];
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v126 = (double)*(uint64_t *)(a2 + 1232) / 1000000000.0;
  v127 = xmmword_22465BD30;
  v128 = 0;
  v129 = 728301608;
  kdebug_trace();
  if (*(_BYTE *)(a2 + 56))
  {
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)v101);
    v10 = *(std::__shared_weak_count **)&v101[1];
    *(_QWORD *)v104 = &off_24EC200A8;
    *(_QWORD *)&v104[8] = *((_QWORD *)&v101[0] + 1);
    *(_QWORD *)&v104[16] = *(_QWORD *)&v101[1];
    *(_OWORD *)&v104[24] = *(_OWORD *)((char *)&v101[1] + 8);
    v11 = *(_OWORD *)((char *)&v101[2] + 2);
    *(_OWORD *)&v104[34] = *(_OWORD *)((char *)&v101[2] + 2);
    v104[56] = 1;
    v12 = *(unsigned __int8 *)(a2 + 120);
    if (*(_BYTE *)(a2 + 120))
    {
      if ((!*(_DWORD *)(a2 + 96) || !*(_DWORD *)(a2 + 100))
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223C3BF78(a2 + 64, (uint64_t)v101);
      v13 = *(std::__shared_weak_count **)&v101[1];
      if (!*(_QWORD *)&v101[1])
        goto LABEL_13;
      v14 = (unint64_t *)(*(_QWORD *)&v101[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (!v104[56])
          goto LABEL_21;
      }
      else
      {
LABEL_13:
        if (!v104[56])
          goto LABEL_21;
      }
      v10 = *(std::__shared_weak_count **)&v104[16];
    }
    if (!v10)
      goto LABEL_19;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v12)
        goto LABEL_21;
    }
    else
    {
LABEL_19:
      if (v12)
        goto LABEL_21;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricAllocator.cpp", 155, (uint64_t)"fb.Depth() && fb.Confidence()", 29, (uint64_t)"Input frame data should have valid depth and confidence frame!", 62, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_21:
  if (*(_BYTE *)(a2 + 56))
  {
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)v104);
    v11 = *(_OWORD *)&v104[8];
    v101[0] = *(_OWORD *)&v104[24];
    *(_OWORD *)((char *)v101 + 10) = *(_OWORD *)&v104[34];
  }
  v123 = &off_24EC200A8;
  v124 = v11;
  *(_OWORD *)v125 = v101[0];
  v18 = *(_OWORD *)((char *)v101 + 10);
  *(_OWORD *)&v125[10] = *(_OWORD *)((char *)v101 + 10);
  if (*(_BYTE *)(a2 + 120))
  {
    if ((!*(_DWORD *)(a2 + 96) || !*(_DWORD *)(a2 + 100))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2 + 64, (uint64_t)v104);
    v18 = *(_OWORD *)&v104[8];
    v101[0] = *(_OWORD *)&v104[24];
    *(_OWORD *)((char *)v101 + 10) = *(_OWORD *)&v104[34];
  }
  v120 = &off_24EC200A8;
  v121 = v18;
  v122[0] = v101[0];
  *(_OWORD *)((char *)v122 + 10) = *(_OWORD *)((char *)v101 + 10);
  v119 = 0uLL;
  v116 = &off_24EC21230;
  v117 = 0u;
  memset(v118, 0, 26);
  if (*(_BYTE *)(a2 + 688))
  {
    if ((!*(_DWORD *)(a2 + 664) || !*(_DWORD *)(a2 + 668))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1157, (uint64_t)"!derived.raster_depth->Empty()", 30, (uint64_t)"Rasterized depth buffer not valid", 33, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v19 = sub_223C3C8D8(a2 + 632, (uint64_t)v104);
    v20 = *(std::__shared_weak_count **)&v104[16];
    if (!*(_QWORD *)&v104[16])
      goto LABEL_186;
    v21 = (unint64_t *)(*(_QWORD *)&v104[16] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v19);
      std::__shared_weak_count::__release_weak(v20);
      if (*(_BYTE *)(a2 + 688))
        goto LABEL_40;
    }
    else
    {
LABEL_186:
      if (*(_BYTE *)(a2 + 688))
      {
LABEL_40:
        if ((!*(_DWORD *)(a2 + 664) || !*(_DWORD *)(a2 + 668))
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1157, (uint64_t)"!derived.raster_depth->Empty()", 30, (uint64_t)"Rasterized depth buffer not valid", 33, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3C8D8(a2 + 632, (uint64_t)v104);
        v19 = *(__n128 *)&v104[8];
        v101[0] = *(_OWORD *)&v104[24];
        *(_OWORD *)((char *)v101 + 10) = *(_OWORD *)&v104[34];
      }
    }
    v44 = (std::__shared_weak_count *)v117.n128_u64[1];
    v117 = v19;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v118[0] = v101[0];
    *(_OWORD *)((char *)v118 + 10) = *(_OWORD *)((char *)v101 + 10);
    *(_QWORD *)v104 = &off_24EC204C0;
    sub_223212780((uint64_t)&v104[8]);
    *(_QWORD *)&v101[0] = &off_24EC21420;
    memset((char *)v101 + 8, 0, 42);
    v114 = &off_24EC21230;
    memset(v115, 0, 42);
    sub_223AB3C10((uint64_t)&v123, (uint64_t)&v116, (uint64_t)&v114, (uint64_t)v104, (uint64_t)v101, 1, *(unsigned __int8 *)(a1 + 36), (uint64_t *)&v102, 1.0);
    v47 = v102;
    v102 = 0uLL;
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    v119 = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)v115[1];
    if (v115[1])
    {
      v55 = (unint64_t *)(v115[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = *(std::__shared_weak_count **)&v101[1];
    if (*(_QWORD *)&v101[1])
    {
      v58 = (unint64_t *)(*(_QWORD *)&v101[1] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(std::__shared_weak_count **)&v104[16];
    if (*(_QWORD *)&v104[16])
    {
      v61 = (unint64_t *)(*(_QWORD *)&v104[16] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    goto LABEL_137;
  }
  sub_2231F761C(*(NSObject **)&v125[8], (const void **)v104);
  sub_2231F8060(*(uint64_t *)v104, v101);
  v23 = *(std::__shared_weak_count **)&v104[8];
  if (*(_QWORD *)&v104[8])
  {
    v24 = (unint64_t *)(*(_QWORD *)&v104[8] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v101[0];
  v101[0] = 0uLL;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  v119 = v26;
  if (!v27)
    goto LABEL_53;
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v101[0] + 1);
    if (!*((_QWORD *)&v101[0] + 1))
      goto LABEL_57;
  }
  else
  {
LABEL_53:
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v101[0] + 1);
    if (!*((_QWORD *)&v101[0] + 1))
      goto LABEL_57;
  }
  v31 = (unint64_t *)&v30->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = v119;
    v35 = *(_QWORD *)(v119 + 8);
    v34 = *(std::__shared_weak_count **)(v119 + 16);
    if (!v34)
      goto LABEL_62;
    goto LABEL_58;
  }
LABEL_57:
  v33 = v119;
  v35 = *(_QWORD *)(v119 + 8);
  v34 = *(std::__shared_weak_count **)(v119 + 16);
  if (!v34)
    goto LABEL_62;
LABEL_58:
  v36 = (unint64_t *)&v34->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  do
    v38 = __ldaxr(v36);
  while (__stlxr(v38 - 1, v36));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (!v35)
      goto LABEL_118;
    goto LABEL_63;
  }
LABEL_62:
  if (!v35)
    goto LABEL_118;
LABEL_63:
  if (*(_BYTE *)(v33 + 81))
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v33 + 8) + 96))(v104, *(_QWORD *)(v33 + 8), 1);
    v39 = *(unsigned int *)(v33 + 72);
    if ((_DWORD)v39 == 1)
      goto LABEL_65;
LABEL_119:
    v66 = *(_DWORD *)(v33 + 64);
    if (v66)
    {
      v67 = *(_DWORD *)(v33 + 68);
      if (v67)
      {
        v68 = *(unsigned int *)(v33 + 76);
        v69 = *(_BYTE **)(v33 + 32);
        if (*(_BYTE *)(v33 + 80) && v69)
        {
          (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v33 + 8) + 88))(*(_QWORD *)(v33 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
          v69 = *(_BYTE **)(v33 + 32);
        }
        v70 = v66 - 1;
        v71 = v67 - 1;
        if (v67 != 1)
        {
          if (v66 == 1)
          {
            do
            {
              *v69 = 1;
              v69 += v68;
              --v71;
            }
            while (v71);
          }
          else
          {
            v72 = 0;
            do
            {
              v73 = v66 - 1;
              v74 = v69;
              do
              {
                *v74 = 1;
                v74 += v39;
                --v73;
              }
              while (v73);
              *v74 = 1;
              v69 += v68;
              ++v72;
            }
            while (v72 != v71);
          }
        }
        if (v66 != 1)
        {
          do
          {
            *v69 = 1;
            v69 += v39;
            --v70;
          }
          while (v70);
        }
        *v69 = 1;
      }
    }
    goto LABEL_135;
  }
LABEL_118:
  *(_QWORD *)v104 = 0;
  v39 = *(unsigned int *)(v33 + 72);
  if ((_DWORD)v39 != 1)
    goto LABEL_119;
LABEL_65:
  v40 = *(unsigned int *)(v33 + 76);
  v41 = *(unsigned int *)(v33 + 64);
  if ((_DWORD)v40 == (_DWORD)v41)
  {
    v42 = *(_DWORD *)(v33 + 68);
    v43 = *(void **)(v33 + 32);
    if (*(_BYTE *)(v33 + 80) && v43)
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v33 + 8) + 88))(*(_QWORD *)(v33 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
      v43 = *(void **)(v33 + 32);
    }
    memset(v43, 1, (v42 * v40));
  }
  else if ((_DWORD)v41)
  {
    v63 = *(_DWORD *)(v33 + 68);
    if (v63)
    {
      v64 = *(char **)(v33 + 32);
      if (*(_BYTE *)(v33 + 80) && v64)
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v33 + 8) + 88))(*(_QWORD *)(v33 + 8), 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
        v64 = *(char **)(v33 + 32);
      }
      v65 = v63 - 1;
      if (v63 != 1)
      {
        do
        {
          memset(v64, 1, v41);
          v64 += v40;
          --v65;
        }
        while (v65);
      }
      memset(v64, 1, v41);
    }
  }
LABEL_135:
  v75 = *(_QWORD *)v104;
  *(_QWORD *)v104 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
LABEL_137:
  v76 = *(_OWORD *)(a2 + 1352);
  *(_OWORD *)v104 = *(_OWORD *)(a2 + 1336);
  *(_OWORD *)&v104[16] = v76;
  v77 = *(_OWORD *)(a2 + 1384);
  *(_OWORD *)&v104[32] = *(_OWORD *)(a2 + 1368);
  *(_OWORD *)&v104[48] = v77;
  v78 = *(_OWORD *)(a2 + 1272);
  v107 = *(_OWORD *)(a2 + 1256);
  v108 = v78;
  v111 = *(_DWORD *)(a2 + 1320);
  v79 = *(_OWORD *)(a2 + 1304);
  v109 = *(_OWORD *)(a2 + 1288);
  v110 = v79;
  v112 = *(_QWORD *)(a2 + 1328);
  v105 = &off_24EC207B8;
  v106 = &off_24EC20868;
  v113 = *(_DWORD *)(a1 + 32);
  sub_223AB6D8C((uint64_t *)&v102);
  v130[0] = 0;
  v130[16] = 0;
  *(_QWORD *)&v101[0] = &off_24EC21DF8;
  sub_2238B68A8((uint64_t)v101 + 8);
  v114 = &off_24EC21420;
  sub_2231F9830(v119, v115);
  sub_223A4F2D8(a1, v130, (uint64_t)&v123, (uint64_t)&v120, (uint64_t)&v116, (uint64_t)v101, (uint64_t)&v114, a2 + 1240, a2 + 1336, a4, 0, (void ***)&v102, (uint64_t)v104, 1, 0, 0);
  v80 = (std::__shared_weak_count *)v115[1];
  if (v115[1])
  {
    v81 = (unint64_t *)(v115[1] + 8);
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = *(std::__shared_weak_count **)&v101[1];
  if (*(_QWORD *)&v101[1])
  {
    v84 = (unint64_t *)(*(_QWORD *)&v101[1] + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  sub_223A63944(a2, a3, (uint64_t *)(a1 + 40));
  sub_223A679EC(a4, SDWORD2(v102), SHIDWORD(v102), v103);
  if ((void **)v102 == a5)
  {
    *(_QWORD *)&v102 = 0;
    v86 = a5[3];
    if (!v86)
      goto LABEL_151;
    goto LABEL_150;
  }
  sub_2239A506C(a5, *(char **)v102, *(char **)(v102 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v102 + 8) - *(_QWORD *)v102) >> 2));
  a5 = (void **)v102;
  *(_QWORD *)&v102 = 0;
  if (!a5)
    goto LABEL_154;
  v86 = a5[3];
  if (v86)
  {
LABEL_150:
    a5[4] = v86;
    operator delete(v86);
  }
LABEL_151:
  v87 = *a5;
  if (*a5)
  {
    a5[1] = v87;
    operator delete(v87);
  }
  MEMORY[0x227684CE8](a5, 0xA0C40054C61C9);
LABEL_154:
  v88 = (std::__shared_weak_count *)v117.n128_u64[1];
  if (v117.n128_u64[1])
  {
    v89 = (unint64_t *)(v117.n128_u64[1] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
  if (*((_QWORD *)&v124 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  return kdebug_trace();
}

void sub_223A5079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a70;
  uint64_t v70;

  if (a31)
    (*(void (**)(uint64_t))(*(_QWORD *)a31 + 8))(a31);
  sub_2231BD9DC((uint64_t)&a60);
  sub_223167354((uint64_t)&a67);
  sub_22319EF60((uint64_t)&a70);
  sub_22319EF60(v70 - 224);
  sub_2231874DC(v70 - 168);
  _Unwind_Resume(a1);
}

uint64_t *sub_223A508C0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 24);
    if (v3)
    {
      *(_QWORD *)(v2 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v4;
      operator delete(v4);
    }
    MEMORY[0x227684CE8](v2, 0xA0C40054C61C9);
  }
  return a1;
}

uint64_t sub_223A50924(uint64_t a1, unsigned __int8 **a2, uint64_t a3, _QWORD *a4, unsigned int a5, uint64_t **a6, uint64_t a7, char a8)
{
  double v11;
  int32x2_t *v12;
  std::chrono::steady_clock::time_point v13;
  std::chrono::steady_clock::time_point v14;
  float32x4_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  float32x4_t *v37;
  unsigned __int8 *v38;
  int v39;
  int32x4_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int v45;
  int32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x2_t v49;
  int v50;
  uint64_t **v51;
  unsigned int v52;
  unsigned int v53;
  BOOL v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t **v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x4_t v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int32x4_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t **v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t **v107;
  unsigned int v108;
  uint64_t **v109;
  unsigned int v110;
  BOOL v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  BOOL v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int32x2_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __int16 v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  __int16 v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  int32x2_t v157;
  int v158;
  char **v159;
  uint64_t *v160;
  uint64_t v161;
  void *v162;
  void *v163;
  uint64_t v164;
  void *v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  __int128 v182;
  unint64_t *v183;
  unint64_t v184;
  int v185;
  uint64_t **v186;
  uint64_t **v187;
  unsigned int v188;
  unsigned int v189;
  BOOL v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t **v198;
  unsigned int v199;
  unsigned int v200;
  BOOL v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  float32x2_t v208;
  float32x4_t v209;
  unsigned int v210;
  unsigned int v211;
  BOOL v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t **v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  int v225;
  uint64_t v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x2_t v229;
  int8x16_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x2_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  int32x2_t v253;
  int v254;
  char **v255;
  uint64_t *v256;
  double v257;
  void *v258;
  void *v259;
  void **v260;
  void *v261;
  void *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  std::mutex *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  unint64_t v280;
  _BYTE *v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  __n128 *v287;
  _BYTE *v288;
  size_t v289;
  unint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  std::mutex *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t *v299;
  unint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  __n128 *v307;
  _BYTE *v308;
  size_t v309;
  unint64_t v310;
  __int128 *v311;
  unint64_t v312;
  unsigned __int8 v313;
  unsigned __int8 v314;
  double v315;
  double v316;
  __int128 v317;
  double v318;
  __int128 v319;
  unint64_t v321;
  unint64_t v322;
  int32x2_t *v323;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  float32x4_t *v325;
  uint64_t v330;
  unsigned __int8 *v332;
  int v333;
  __int128 v334;
  uint64_t v335;
  _BYTE v336[64];
  void **v337;
  int32x2_t v338;
  std::__shared_weak_count *v339;
  uint64_t v340;
  __int128 v341;
  __int16 v342;
  _BYTE __p[24];
  _BYTE v344[32];
  __int128 v345;
  __int16 v346;
  _BYTE v347[56];
  unsigned __int32 v348;
  int v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  __int128 v352;
  float32x4_t v353;
  __int128 v354;
  float32x4_t v355;
  uint64_t (**v356)();
  uint64_t (**v357)(_QWORD);
  __int128 v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int v362;
  unsigned __int8 *v363;
  int v364;
  double v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  double v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  double v373;
  _OWORD v374[3];
  __int128 v375;
  std::__shared_weak_count *v376;
  uint64_t v377;
  __int128 v378;
  __int16 v379;
  _BYTE v380[72];
  __int16 v381;
  __int128 v382;
  char v383;
  __int128 v384;
  int v385;
  uint64_t v386;

  v386 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 1848))
    v11 = (double)(uint64_t)a2[157] / 1000000000.0;
  else
    v11 = 0.0;
  v365 = v11;
  v366 = 0x464B726F46;
  v368 = 0;
  v367 = 0;
  v369 = 728301608;
  kdebug_trace();
  v12 = (int32x2_t *)(a2 + 205);
  v13.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v352 = xmmword_22465BD68;
  v353 = (float32x4_t)unk_22465BD78;
  v354 = xmmword_22465BD88;
  v355 = (float32x4_t)unk_22465BD98;
  v358 = 0uLL;
  v359 = vdupq_n_s32(0x7FC00000u);
  v360 = v359;
  v361 = v359;
  v362 = 2143289344;
  v363 = 0;
  v357 = &off_24EC20868;
  v356 = &off_24EC207B8;
  v323 = (int32x2_t *)(a2 + 205);
  if (*((_BYTE *)a2 + 1848))
  {
    if (*((_BYTE *)a2 + 1768))
    {
      v16.i32[0] = *((_DWORD *)a2 + 412);
      v17 = (float32x2_t)a2[207];
      v18 = (float32x2_t)a2[209];
      LODWORD(v14.__d_.__rep_) = *((_DWORD *)a2 + 420);
      v15.i64[0] = (uint64_t)a2[211];
      v15.i32[2] = *((_DWORD *)a2 + 424);
      v19 = (int8x16_t)vnegq_f32(v15);
      v20 = *((float32x4_t *)a2 + 85);
      v21 = vmulq_n_f32(v20, v16.f32[0]);
      v16.i32[1] = *((_DWORD *)a2 + 416);
      v22 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v12, (int32x2_t)v17), *(float *)v19.i32), (float32x2_t)vzip2_s32(*v12, (int32x2_t)v17), *(float32x2_t *)v15.f32, 1), v16, v15, 2);
      v16.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v18, *(float32x2_t *)v19.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v18, 1), *(float32x2_t *)v15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (float32x2_t)v14.__d_.__rep_).u32[0];
      v23 = *((float32x4_t *)a2 + 86);
      v24 = *((float32x4_t *)a2 + 87);
      v25 = *((float32x4_t *)a2 + 88);
      v26 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v20, COERCE_FLOAT(*v12)), v23, v17.f32[0]), v24, v18.f32[0]), (float32x4_t)0, v25);
      v27 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v20, (float32x2_t)*v12, 1), v23, v17, 1), v24, v18, 1), (float32x4_t)0, v25);
      v28 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v21, v23, v16.f32[1]), v24, *(float *)&v14.__d_.__rep_), (float32x4_t)0, v25);
      v29 = vaddq_f32(v25, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v22.f32[0]), v23, v22, 1), v24, v16.f32[0]));
      v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 213))), v27, (float32x2_t)a2[213], 1), v28, *(float32x4_t *)(a2 + 213), 2), v29, *(float32x4_t *)(a2 + 213), 3);
      v31 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 215))), v27, (float32x2_t)a2[215], 1), v28, *(float32x4_t *)(a2 + 215), 2), v29, *(float32x4_t *)(a2 + 215), 3);
      v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 217))), v27, (float32x2_t)a2[217], 1), v28, *(float32x4_t *)(a2 + 217), 2), v29, *(float32x4_t *)(a2 + 217), 3);
      v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)(a2 + 219))), v27, (float32x2_t)a2[219], 1), v28, *(float32x4_t *)(a2 + 219), 2), v29, *(float32x4_t *)(a2 + 219), 3);
    }
    else
    {
      v32 = *((float32x4_t *)a2 + 87);
      v33 = *((float32x4_t *)a2 + 88);
      v30 = *((float32x4_t *)a2 + 85);
      v31 = *((float32x4_t *)a2 + 86);
    }
    v38 = a2[169];
    v39 = *(_DWORD *)(a1 + 32);
    v352 = (__int128)v30;
    v353 = v31;
    v354 = (__int128)v32;
    v355 = v33;
    v358 = *((_OWORD *)a2 + 80);
    v359 = *((int32x4_t *)a2 + 81);
    v40 = *((int32x4_t *)a2 + 83);
    v360 = *((int32x4_t *)a2 + 82);
    v361 = v40;
    v362 = *((_DWORD *)a2 + 336);
    v363 = v38;
    v335 = (uint64_t)&v352;
    v34 = 1;
    v364 = v39;
    v330 = a1;
    v35 = *a2;
    rep = v13.__d_.__rep_;
    v325 = (float32x4_t *)a2;
    v332 = a2[1];
    if (*a2 != v332)
      goto LABEL_16;
  }
  else
  {
    v335 = 0;
    v34 = 0;
    v330 = a1;
    v35 = *a2;
    rep = v13.__d_.__rep_;
    v325 = (float32x4_t *)a2;
    v332 = a2[1];
    if (*a2 != v332)
    {
LABEL_16:
      v333 = 0;
      v41 = (uint64_t *)(a3 + 408);
      v334 = 0u;
      while (1)
      {
        v42 = (std::__shared_weak_count *)*((_QWORD *)v35 + 3);
        v350 = *((_QWORD *)v35 + 2);
        v351 = v42;
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v44 = __ldxr(p_shared_owners);
          while (__stxr(v44 + 1, p_shared_owners));
        }
        v45 = sub_223AB8B20(a3, (uint64_t)v35);
        v50 = v45;
        v51 = *(uint64_t ***)(a3 + 192);
        if (v51)
        {
          v52 = *v35;
          while (1)
          {
            v53 = *((unsigned __int8 *)v51 + 25);
            v54 = v52 >= v53;
            if (v52 != v53)
              break;
            v55 = v35[1];
            v53 = *((unsigned __int8 *)v51 + 26);
            v54 = v55 >= v53;
            if (v55 != v53)
              goto LABEL_59;
            v56 = v35[2];
            v57 = *((unsigned __int8 *)v51 + 27);
            if (v56 == v57)
            {
              v56 = v35[3];
              v57 = *((unsigned __int8 *)v51 + 28);
              if (v56 == v57)
              {
                v56 = v35[4];
                v57 = *((unsigned __int8 *)v51 + 29);
                if (v56 == v57)
                {
                  v56 = v35[5];
                  v57 = *((unsigned __int8 *)v51 + 30);
                  if (v56 == v57)
                  {
                    v56 = v35[6];
                    v57 = *((unsigned __int8 *)v51 + 31);
                    if (v56 == v57)
                    {
                      v56 = v35[7];
                      v57 = *((unsigned __int8 *)v51 + 32);
                      if (v56 == v57)
                      {
                        v56 = v35[8];
                        v57 = *((unsigned __int8 *)v51 + 33);
                        if (v56 == v57)
                        {
                          v56 = v35[9];
                          v57 = *((unsigned __int8 *)v51 + 34);
                          if (v56 == v57)
                          {
                            v56 = v35[10];
                            v57 = *((unsigned __int8 *)v51 + 35);
                            if (v56 == v57)
                            {
                              v56 = v35[11];
                              v57 = *((unsigned __int8 *)v51 + 36);
                              if (v56 == v57)
                              {
                                v56 = v35[12];
                                v57 = *((unsigned __int8 *)v51 + 37);
                                if (v56 == v57)
                                {
                                  v56 = v35[13];
                                  v57 = *((unsigned __int8 *)v51 + 38);
                                  if (v56 == v57)
                                  {
                                    v56 = v35[14];
                                    v57 = *((unsigned __int8 *)v51 + 39);
                                    if (v56 == v57)
                                    {
                                      v56 = v35[15];
                                      v57 = *((unsigned __int8 *)v51 + 40);
                                      if (v56 == v57)
                                        goto LABEL_43;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v56 >= v57)
            {
LABEL_43:
              v53 = *((unsigned __int8 *)v51 + 27);
              v55 = v35[2];
              if (v53 == v55)
              {
                v53 = *((unsigned __int8 *)v51 + 28);
                v55 = v35[3];
                if (v53 == v55)
                {
                  v53 = *((unsigned __int8 *)v51 + 29);
                  v55 = v35[4];
                  if (v53 == v55)
                  {
                    v53 = *((unsigned __int8 *)v51 + 30);
                    v55 = v35[5];
                    if (v53 == v55)
                    {
                      v53 = *((unsigned __int8 *)v51 + 31);
                      v55 = v35[6];
                      if (v53 == v55)
                      {
                        v53 = *((unsigned __int8 *)v51 + 32);
                        v55 = v35[7];
                        if (v53 == v55)
                        {
                          v53 = *((unsigned __int8 *)v51 + 33);
                          v55 = v35[8];
                          if (v53 == v55)
                          {
                            v53 = *((unsigned __int8 *)v51 + 34);
                            v55 = v35[9];
                            if (v53 == v55)
                            {
                              v53 = *((unsigned __int8 *)v51 + 35);
                              v55 = v35[10];
                              if (v53 == v55)
                              {
                                v53 = *((unsigned __int8 *)v51 + 36);
                                v55 = v35[11];
                                if (v53 == v55)
                                {
                                  v53 = *((unsigned __int8 *)v51 + 37);
                                  v55 = v35[12];
                                  if (v53 == v55)
                                  {
                                    v53 = *((unsigned __int8 *)v51 + 38);
                                    v55 = v35[13];
                                    if (v53 == v55)
                                    {
                                      v53 = *((unsigned __int8 *)v51 + 39);
                                      v55 = v35[14];
                                      if (v53 == v55)
                                      {
                                        v53 = *((unsigned __int8 *)v51 + 40);
                                        v55 = v35[15];
                                        if (v53 == v55)
                                          goto LABEL_102;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_23:
              if (v53 >= v55)
                goto LABEL_102;
              ++v51;
            }
LABEL_25:
            v51 = (uint64_t **)*v51;
            if (!v51)
              goto LABEL_61;
          }
          v55 = *v35;
LABEL_59:
          if (v54)
            goto LABEL_23;
          goto LABEL_25;
        }
LABEL_61:
        v58 = *(uint64_t ***)(a3 + 216);
        if (v58)
        {
          v59 = *v35;
          while (1)
          {
            v60 = *((unsigned __int8 *)v58 + 25);
            v61 = v59 >= v60;
            if (v59 != v60)
              break;
            v62 = v35[1];
            v60 = *((unsigned __int8 *)v58 + 26);
            v61 = v62 >= v60;
            if (v62 != v60)
              goto LABEL_97;
            v63 = v35[2];
            v64 = *((unsigned __int8 *)v58 + 27);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[3];
            v64 = *((unsigned __int8 *)v58 + 28);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[4];
            v64 = *((unsigned __int8 *)v58 + 29);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[5];
            v64 = *((unsigned __int8 *)v58 + 30);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[6];
            v64 = *((unsigned __int8 *)v58 + 31);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[7];
            v64 = *((unsigned __int8 *)v58 + 32);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[8];
            v64 = *((unsigned __int8 *)v58 + 33);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[9];
            v64 = *((unsigned __int8 *)v58 + 34);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[10];
            v64 = *((unsigned __int8 *)v58 + 35);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[11];
            v64 = *((unsigned __int8 *)v58 + 36);
            if (v63 != v64)
              goto LABEL_80;
            v63 = v35[12];
            v64 = *((unsigned __int8 *)v58 + 37);
            if (v63 != v64
              || (v63 = v35[13], v64 = *((unsigned __int8 *)v58 + 38), v63 != v64)
              || (v63 = v35[14], v64 = *((unsigned __int8 *)v58 + 39), v63 != v64)
              || (v63 = v35[15], v64 = *((unsigned __int8 *)v58 + 40), v63 != v64))
            {
LABEL_80:
              if (v63 < v64)
                goto LABEL_63;
            }
            v60 = *((unsigned __int8 *)v58 + 27);
            v62 = v35[2];
            if (v60 == v62)
            {
              v60 = *((unsigned __int8 *)v58 + 28);
              v62 = v35[3];
              if (v60 == v62)
              {
                v60 = *((unsigned __int8 *)v58 + 29);
                v62 = v35[4];
                if (v60 == v62)
                {
                  v60 = *((unsigned __int8 *)v58 + 30);
                  v62 = v35[5];
                  if (v60 == v62)
                  {
                    v60 = *((unsigned __int8 *)v58 + 31);
                    v62 = v35[6];
                    if (v60 == v62)
                    {
                      v60 = *((unsigned __int8 *)v58 + 32);
                      v62 = v35[7];
                      if (v60 == v62)
                      {
                        v60 = *((unsigned __int8 *)v58 + 33);
                        v62 = v35[8];
                        if (v60 == v62)
                        {
                          v60 = *((unsigned __int8 *)v58 + 34);
                          v62 = v35[9];
                          if (v60 == v62)
                          {
                            v60 = *((unsigned __int8 *)v58 + 35);
                            v62 = v35[10];
                            if (v60 == v62)
                            {
                              v60 = *((unsigned __int8 *)v58 + 36);
                              v62 = v35[11];
                              if (v60 == v62)
                              {
                                v60 = *((unsigned __int8 *)v58 + 37);
                                v62 = v35[12];
                                if (v60 == v62)
                                {
                                  v60 = *((unsigned __int8 *)v58 + 38);
                                  v62 = v35[13];
                                  if (v60 == v62)
                                  {
                                    v60 = *((unsigned __int8 *)v58 + 39);
                                    v62 = v35[14];
                                    if (v60 == v62)
                                    {
                                      v60 = *((unsigned __int8 *)v58 + 40);
                                      v62 = v35[15];
                                      if (v60 == v62)
                                        goto LABEL_102;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_99:
            if (v60 >= v62)
              goto LABEL_102;
            ++v58;
LABEL_63:
            v58 = (uint64_t **)*v58;
            if (!v58)
              goto LABEL_101;
          }
          v62 = *v35;
LABEL_97:
          if (!v61)
            goto LABEL_63;
          goto LABEL_99;
        }
LABEL_101:
        if ((v45 & 1) == 0)
          goto LABEL_349;
LABEL_102:
        v46.i64[0] = *((_QWORD *)v35 + 22);
        v46.i32[2] = *((_DWORD *)v35 + 46);
        v47.i64[0] = *((_QWORD *)v35 + 24);
        v47.i32[2] = *((_DWORD *)v35 + 50);
        v65 = (float32x4_t)vzip1q_s32(v46, v47);
        v66 = (int8x16_t)v65;
        v66.i32[2] = *((_QWORD *)v35 + 26);
        v48.i64[0] = *((_QWORD *)v35 + 28);
        v48.i32[2] = *((_DWORD *)v35 + 58);
        v67 = (int8x16_t)vnegq_f32(v48);
        v68 = (int8x16_t)vtrn2q_s32(v46, v47);
        v68.i32[2] = HIDWORD(*((_QWORD *)v35 + 26));
        v49.i32[0] = *((_DWORD *)v35 + 54);
        v69 = (float32x4_t)vzip2q_s32(v46, v47);
        *(float32x2_t *)v65.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v65.f32, *(float *)v67.i32), *(float32x2_t *)v68.i8, *(float32x2_t *)v48.f32, 1), *(float32x2_t *)v69.f32, v48, 2);
        v69.i32[2] = v49.i32[0];
        v65.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v35 + 208), *(float32x2_t *)v67.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v35 + 208), 1), *(float32x2_t *)v48.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), v49).u32[0]);
        v70 = vextq_s8(v68, v66, 4uLL).u64[0];
        v66.i32[3] = 0;
        v71.i32[3] = 0;
        v71.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v68, 0).i32[3];
        *(uint64_t *)((char *)v71.i64 + 4) = v70;
        v69.i64[1] = vdupq_laneq_s32((int32x4_t)v69, 2).u32[0];
        v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v66, COERCE_FLOAT(*((_OWORD *)v35 + 7))), v71, *(float32x2_t *)(v35 + 112), 1), v69, *((float32x4_t *)v35 + 7), 2), v65, *((float32x4_t *)v35 + 7), 3);
        v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v66, COERCE_FLOAT(*((_OWORD *)v35 + 8))), v71, *(float32x2_t *)(v35 + 128), 1), v69, *((float32x4_t *)v35 + 8), 2), v65, *((float32x4_t *)v35 + 8), 3);
        v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v66, COERCE_FLOAT(*((_OWORD *)v35 + 9))), v71, *(float32x2_t *)(v35 + 144), 1), v69, *((float32x4_t *)v35 + 9), 2), v65, *((float32x4_t *)v35 + 9), 3);
        v75 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v66, COERCE_FLOAT(*((_OWORD *)v35 + 10))), v71, *(float32x2_t *)(v35 + 160), 1), v69, *((float32x4_t *)v35 + 10), 2), v65, *((float32x4_t *)v35 + 10), 3);
        v76 = *((float32x4_t *)v35 + 5);
        v77 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*((_OWORD *)v35 + 2))), v73, *(float32x2_t *)(v35 + 32), 1), v74, *((float32x4_t *)v35 + 2), 2), (float32x4_t)v75, *((float32x4_t *)v35 + 2), 3);
        v78 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*((_OWORD *)v35 + 3))), v73, *(float32x2_t *)(v35 + 48), 1), v74, *((float32x4_t *)v35 + 3), 2), (float32x4_t)v75, *((float32x4_t *)v35 + 3), 3);
        v79 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, COERCE_FLOAT(*((_OWORD *)v35 + 4))), v73, *(float32x2_t *)(v35 + 64), 1), v74, *((float32x4_t *)v35 + 4), 2), (float32x4_t)v75, *((float32x4_t *)v35 + 4), 3);
        v80 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v72, v76.f32[0]), v73, *(float32x2_t *)v76.f32, 1), v74, v76, 2);
        v74.i64[0] = vzip1q_s32(v77, v78).u64[0];
        v74.i64[1] = v79.u32[0];
        v81 = vmlaq_laneq_f32(v80, (float32x4_t)v75, v76, 3);
        v82 = v81.i64[1];
        v75.i64[0] = v81.i64[0] ^ 0x8000000080000000;
        *(float32x2_t *)v73.f32 = vmul_n_f32(*(float32x2_t *)v74.f32, COERCE_FLOAT(v81.i32[0] ^ 0x80000000));
        v83 = (int8x16_t)vtrn2q_s32(v77, v78);
        v83.i32[2] = v79.i32[1];
        v84 = vzip2q_s32(v77, v78);
        v85 = v84;
        v85.i32[2] = v79.i32[2];
        HIDWORD(v86) = 0;
        LODWORD(v86) = vdupq_lane_s32(*(int32x2_t *)&v83, 0).i32[3];
        *(_QWORD *)((char *)&v86 + 4) = vextq_s8(v83, v75, 4uLL).u64[0];
        v85.i64[1] = vdupq_laneq_s32(v85, 2).u32[0];
        *(_OWORD *)&v347[16] = v86;
        *(int32x4_t *)&v347[32] = v85;
        *(float32x4_t *)v347 = v74;
        *(float32x2_t *)&v347[48] = vmla_n_f32(vmla_lane_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v83.i8, *(float32x2_t *)v75.i8, 1), *(float32x2_t *)v84.i8, COERCE_FLOAT(v82 ^ 0x80000000));
        v348 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v79.i8, *(float32x2_t *)v75.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1), *(float32x2_t *)v79.i8, 1), (float32x2_t)(v82 ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)).u32[0];
        v349 = 1065353216;
        v373 = COERCE_DOUBLE(&off_24EC21230);
        memset(v374, 0, 42);
        *(_QWORD *)v380 = &off_24EC21DF8;
        sub_2238B68A8((uint64_t)&v380[8]);
        v87 = *v41;
        if (!*v41)
          goto LABEL_745;
        v88 = a3 + 408;
        do
        {
          v89 = *(unsigned __int8 *)(v87 + 32);
          v90 = *v35;
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 33);
          v90 = v35[1];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 34);
          v90 = v35[2];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 35);
          v90 = v35[3];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 36);
          v90 = v35[4];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 37);
          v90 = v35[5];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 38);
          v90 = v35[6];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 39);
          v90 = v35[7];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 40);
          v90 = v35[8];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 41);
          v90 = v35[9];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 42);
          v90 = v35[10];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 43);
          v90 = v35[11];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 44);
          v90 = v35[12];
          if (v89 != v90)
            goto LABEL_121;
          v89 = *(unsigned __int8 *)(v87 + 45);
          v90 = v35[13];
          if (v89 == v90
            && (v89 = *(unsigned __int8 *)(v87 + 46), v90 = v35[14], v89 == v90)
            && (v89 = *(unsigned __int8 *)(v87 + 47), v90 = v35[15], v89 == v90))
          {
            v88 = v87;
          }
          else
          {
LABEL_121:
            if (v89 < v90)
              v87 += 8;
            else
              v88 = v87;
          }
          v87 = *(_QWORD *)v87;
        }
        while (v87);
        if ((uint64_t *)v88 == v41 || (char)sub_22319835C(v35, (unsigned __int8 *)(v88 + 32)) < 0)
        {
LABEL_745:
          v88 = a3 + 408;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricAllocator.cpp", 260, (uint64_t)"iter != kf_to_novelty_mask.end() && \"novelty mask not found\"", 60, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
        v91 = *(_QWORD *)(v88 + 48);
        v370 = COERCE_DOUBLE(&off_24EC21420);
        sub_2231FBAA0(v91, &v371);
        if (!v50)
          goto LABEL_267;
        v92 = *(uint64_t ***)(a3 + 480);
        if (!v92)
LABEL_728:
          sub_223198218("map::at:  key not found");
        v93 = *v35;
        while (1)
        {
          v94 = *((unsigned __int8 *)v92 + 32);
          v95 = v93 >= v94;
          if (v93 == v94)
            break;
          v96 = *v35;
LABEL_163:
          if (v95)
          {
LABEL_165:
            if (v94 >= v96)
              goto LABEL_168;
            v92 = (uint64_t **)v92[1];
            if (!v92)
              goto LABEL_728;
          }
          else
          {
LABEL_131:
            v92 = (uint64_t **)*v92;
            if (!v92)
              goto LABEL_728;
          }
        }
        v96 = v35[1];
        v94 = *((unsigned __int8 *)v92 + 33);
        v95 = v96 >= v94;
        if (v96 != v94)
          goto LABEL_163;
        v96 = v35[2];
        v94 = *((unsigned __int8 *)v92 + 34);
        v95 = v96 >= v94;
        if (v96 != v94)
          goto LABEL_163;
        v96 = v35[3];
        v94 = *((unsigned __int8 *)v92 + 35);
        v95 = v96 >= v94;
        if (v96 != v94)
          goto LABEL_163;
        v97 = v35[4];
        v98 = *((unsigned __int8 *)v92 + 36);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[5];
        v98 = *((unsigned __int8 *)v92 + 37);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[6];
        v98 = *((unsigned __int8 *)v92 + 38);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[7];
        v98 = *((unsigned __int8 *)v92 + 39);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[8];
        v98 = *((unsigned __int8 *)v92 + 40);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[9];
        v98 = *((unsigned __int8 *)v92 + 41);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[10];
        v98 = *((unsigned __int8 *)v92 + 42);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[11];
        v98 = *((unsigned __int8 *)v92 + 43);
        if (v97 != v98)
          goto LABEL_148;
        v97 = v35[12];
        v98 = *((unsigned __int8 *)v92 + 44);
        if (v97 != v98
          || (v97 = v35[13], v98 = *((unsigned __int8 *)v92 + 45), v97 != v98)
          || (v97 = v35[14], v98 = *((unsigned __int8 *)v92 + 46), v97 != v98)
          || (v97 = v35[15], v98 = *((unsigned __int8 *)v92 + 47), v97 != v98))
        {
LABEL_148:
          if (v97 < v98)
            goto LABEL_131;
        }
        v94 = *((unsigned __int8 *)v92 + 36);
        v96 = v35[4];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 37);
        v96 = v35[5];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 38);
        v96 = v35[6];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 39);
        v96 = v35[7];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 40);
        v96 = v35[8];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 41);
        v96 = v35[9];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 42);
        v96 = v35[10];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 43);
        v96 = v35[11];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 44);
        v96 = v35[12];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 45);
        v96 = v35[13];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 46);
        v96 = v35[14];
        if (v94 != v96)
          goto LABEL_165;
        v94 = *((unsigned __int8 *)v92 + 47);
        v96 = v35[15];
        if (v94 != v96)
          goto LABEL_165;
LABEL_168:
        v99 = (uint64_t)v92[6];
        *(_QWORD *)__p = &off_24EC21230;
        sub_2231BE6D4(v99, (uint64_t *)&__p[8]);
        v100 = *(_OWORD *)&__p[8];
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        v101 = (std::__shared_weak_count *)*((_QWORD *)&v374[0] + 1);
        v374[0] = v100;
        if (v101)
        {
          v102 = (unint64_t *)&v101->__shared_owners_;
          do
            v103 = __ldaxr(v102);
          while (__stlxr(v103 - 1, v102));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        v374[1] = *(_OWORD *)v344;
        *(_OWORD *)((char *)&v374[1] + 10) = *(_OWORD *)&v344[10];
        v104 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v105 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v106 = __ldaxr(v105);
          while (__stlxr(v106 - 1, v105));
          if (!v106)
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        v107 = *(uint64_t ***)(a3 + 480);
        if (!v107)
LABEL_726:
          sub_223198218("map::at:  key not found");
        v108 = *v35;
        v109 = *(uint64_t ***)(a3 + 480);
        while (2)
        {
          while (2)
          {
            v110 = *((unsigned __int8 *)v109 + 32);
            v111 = v108 >= v110;
            if (v108 != v110)
            {
              v112 = *v35;
LABEL_212:
              if (!v111)
                goto LABEL_180;
LABEL_214:
              if (v110 >= v112)
                goto LABEL_217;
              v109 = (uint64_t **)v109[1];
              if (!v109)
                goto LABEL_726;
              continue;
            }
            break;
          }
          v112 = v35[1];
          v110 = *((unsigned __int8 *)v109 + 33);
          v111 = v112 >= v110;
          if (v112 != v110)
            goto LABEL_212;
          v112 = v35[2];
          v110 = *((unsigned __int8 *)v109 + 34);
          v111 = v112 >= v110;
          if (v112 != v110)
            goto LABEL_212;
          v112 = v35[3];
          v110 = *((unsigned __int8 *)v109 + 35);
          v111 = v112 >= v110;
          if (v112 != v110)
            goto LABEL_212;
          v113 = v35[4];
          v114 = *((unsigned __int8 *)v109 + 36);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[5];
          v114 = *((unsigned __int8 *)v109 + 37);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[6];
          v114 = *((unsigned __int8 *)v109 + 38);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[7];
          v114 = *((unsigned __int8 *)v109 + 39);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[8];
          v114 = *((unsigned __int8 *)v109 + 40);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[9];
          v114 = *((unsigned __int8 *)v109 + 41);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[10];
          v114 = *((unsigned __int8 *)v109 + 42);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[11];
          v114 = *((unsigned __int8 *)v109 + 43);
          if (v113 != v114)
            goto LABEL_197;
          v113 = v35[12];
          v114 = *((unsigned __int8 *)v109 + 44);
          if (v113 != v114
            || (v113 = v35[13], v114 = *((unsigned __int8 *)v109 + 45), v113 != v114)
            || (v113 = v35[14], v114 = *((unsigned __int8 *)v109 + 46), v113 != v114)
            || (v113 = v35[15], v114 = *((unsigned __int8 *)v109 + 47), v113 != v114))
          {
LABEL_197:
            if (v113 < v114)
            {
LABEL_180:
              v109 = (uint64_t **)*v109;
              if (!v109)
                goto LABEL_726;
              continue;
            }
          }
          break;
        }
        v110 = *((unsigned __int8 *)v109 + 36);
        v112 = v35[4];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 37);
        v112 = v35[5];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 38);
        v112 = v35[6];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 39);
        v112 = v35[7];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 40);
        v112 = v35[8];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 41);
        v112 = v35[9];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 42);
        v112 = v35[10];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 43);
        v112 = v35[11];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 44);
        v112 = v35[12];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 45);
        v112 = v35[13];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 46);
        v112 = v35[14];
        if (v110 != v112)
          goto LABEL_214;
        v110 = *((unsigned __int8 *)v109 + 47);
        v112 = v35[15];
        if (v110 != v112)
          goto LABEL_214;
LABEL_217:
        if (v109[10])
        {
          while (1)
          {
            v115 = *((unsigned __int8 *)v107 + 32);
            v116 = v108 >= v115;
            if (v108 != v115)
              break;
            v117 = v35[1];
            v115 = *((unsigned __int8 *)v107 + 33);
            v116 = v117 >= v115;
            if (v117 == v115
              && (v117 = v35[2], v115 = *((unsigned __int8 *)v107 + 34), v116 = v117 >= v115, v117 == v115)
              && (v117 = v35[3], v115 = *((unsigned __int8 *)v107 + 35), v116 = v117 >= v115, v117 == v115))
            {
              v118 = v35[4];
              v119 = *((unsigned __int8 *)v107 + 36);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[5];
              v119 = *((unsigned __int8 *)v107 + 37);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[6];
              v119 = *((unsigned __int8 *)v107 + 38);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[7];
              v119 = *((unsigned __int8 *)v107 + 39);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[8];
              v119 = *((unsigned __int8 *)v107 + 40);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[9];
              v119 = *((unsigned __int8 *)v107 + 41);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[10];
              v119 = *((unsigned __int8 *)v107 + 42);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[11];
              v119 = *((unsigned __int8 *)v107 + 43);
              if (v118 != v119)
                goto LABEL_236;
              v118 = v35[12];
              v119 = *((unsigned __int8 *)v107 + 44);
              if (v118 != v119
                || (v118 = v35[13], v119 = *((unsigned __int8 *)v107 + 45), v118 != v119)
                || (v118 = v35[14], v119 = *((unsigned __int8 *)v107 + 46), v118 != v119)
                || (v118 = v35[15], v119 = *((unsigned __int8 *)v107 + 47), v118 != v119))
              {
LABEL_236:
                if (v118 < v119)
                  goto LABEL_219;
              }
              v115 = *((unsigned __int8 *)v107 + 36);
              v117 = v35[4];
              if (v115 == v117)
              {
                v115 = *((unsigned __int8 *)v107 + 37);
                v117 = v35[5];
                if (v115 == v117)
                {
                  v115 = *((unsigned __int8 *)v107 + 38);
                  v117 = v35[6];
                  if (v115 == v117)
                  {
                    v115 = *((unsigned __int8 *)v107 + 39);
                    v117 = v35[7];
                    if (v115 == v117)
                    {
                      v115 = *((unsigned __int8 *)v107 + 40);
                      v117 = v35[8];
                      if (v115 == v117)
                      {
                        v115 = *((unsigned __int8 *)v107 + 41);
                        v117 = v35[9];
                        if (v115 == v117)
                        {
                          v115 = *((unsigned __int8 *)v107 + 42);
                          v117 = v35[10];
                          if (v115 == v117)
                          {
                            v115 = *((unsigned __int8 *)v107 + 43);
                            v117 = v35[11];
                            if (v115 == v117)
                            {
                              v115 = *((unsigned __int8 *)v107 + 44);
                              v117 = v35[12];
                              if (v115 == v117)
                              {
                                v115 = *((unsigned __int8 *)v107 + 45);
                                v117 = v35[13];
                                if (v115 == v117)
                                {
                                  v115 = *((unsigned __int8 *)v107 + 46);
                                  v117 = v35[14];
                                  if (v115 == v117)
                                  {
                                    v115 = *((unsigned __int8 *)v107 + 47);
                                    v117 = v35[15];
                                    if (v115 == v117)
                                    {
LABEL_256:
                                      v120 = (uint64_t)v107[10];
                                      *(_QWORD *)__p = &off_24EC21DF8;
                                      sub_2237212D0(v120, (uint64_t *)&__p[8]);
                                      goto LABEL_257;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_253:
              if (v115 >= v117)
                goto LABEL_256;
              v107 = (uint64_t **)v107[1];
              if (!v107)
                goto LABEL_726;
            }
            else
            {
LABEL_251:
              if (v116)
                goto LABEL_253;
LABEL_219:
              v107 = (uint64_t **)*v107;
              if (!v107)
                goto LABEL_726;
            }
          }
          v117 = *v35;
          goto LABEL_251;
        }
        *(_QWORD *)__p = &off_24EC21DF8;
        sub_2238B68A8((uint64_t)&__p[8]);
LABEL_257:
        v121 = *(_OWORD *)&__p[8];
        *(_QWORD *)&__p[8] = 0;
        *(_QWORD *)&__p[16] = 0;
        v122 = *(std::__shared_weak_count **)&v380[16];
        *(_OWORD *)&v380[8] = v121;
        if (v122)
        {
          v123 = (unint64_t *)&v122->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        *(_OWORD *)&v380[24] = *(_OWORD *)v344;
        *(_OWORD *)&v380[40] = *(_OWORD *)&v344[16];
        *(_OWORD *)&v380[56] = v345;
        v381 = v346;
        v125 = *(std::__shared_weak_count **)&__p[16];
        if (*(_QWORD *)&__p[16])
        {
          v126 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
LABEL_267:
        v128 = v350;
        sub_2231CC34C(v350, (uint64_t)&v337);
        sub_2231CC3F0(v128, (uint64_t)&v375);
        v129 = sub_2231D0224(v128);
        sub_223AB6D8C((uint64_t *)&v384);
        v382 = *(_OWORD *)v35;
        v383 = 1;
        *(_QWORD *)__p = &off_24EC200A8;
        v130 = v338;
        v131 = v339;
        if (!v339)
        {
          *(int32x2_t *)&__p[8] = v338;
          *(_QWORD *)&__p[16] = 0;
          *(_QWORD *)v344 = v340;
          *(_OWORD *)&v344[8] = v341;
          *(_WORD *)&v344[24] = v342;
          *(_QWORD *)v336 = &off_24EC200A8;
          v140 = *((_QWORD *)&v375 + 1);
          v141 = v376;
          if (v376)
            goto LABEL_281;
          goto LABEL_295;
        }
        v132 = (unint64_t *)&v339->__shared_owners_;
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
        v134 = v342;
        do
          v135 = __ldxr(v132);
        while (__stxr(v135 + 1, v132));
        v136 = v340;
        *(_OWORD *)&v344[8] = v341;
        do
          v137 = __ldxr(v132);
        while (__stxr(v137 + 1, v132));
        *(int32x2_t *)&__p[8] = v130;
        *(_QWORD *)&__p[16] = v131;
        *(_QWORD *)v344 = v136;
        *(_WORD *)&v344[24] = v134;
        do
          v138 = __ldaxr(v132);
        while (__stlxr(v138 - 1, v132));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
        }
        do
          v139 = __ldaxr(v132);
        while (__stlxr(v139 - 1, v132));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
          std::__shared_weak_count::__release_weak(v131);
          *(_QWORD *)v336 = &off_24EC200A8;
          v140 = *((_QWORD *)&v375 + 1);
          v141 = v376;
          if (v376)
            goto LABEL_281;
          goto LABEL_295;
        }
        *(_QWORD *)v336 = &off_24EC200A8;
        v140 = *((_QWORD *)&v375 + 1);
        v141 = v376;
        if (!v376)
        {
LABEL_295:
          *(_QWORD *)&v336[8] = v140;
          *(_QWORD *)&v336[16] = 0;
          *(_QWORD *)&v336[24] = v377;
          *(_OWORD *)&v336[32] = v378;
          *(_WORD *)&v336[48] = v379;
          goto LABEL_296;
        }
LABEL_281:
        v142 = (unint64_t *)&v141->__shared_owners_;
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
        v144 = v379;
        do
          v145 = __ldxr(v142);
        while (__stxr(v145 + 1, v142));
        v146 = v377;
        *(_OWORD *)&v336[32] = v378;
        do
          v147 = __ldxr(v142);
        while (__stxr(v147 + 1, v142));
        *(_QWORD *)&v336[8] = v140;
        *(_QWORD *)&v336[16] = v141;
        *(_QWORD *)&v336[24] = v146;
        *(_WORD *)&v336[48] = v144;
        do
          v148 = __ldaxr(v142);
        while (__stlxr(v148 - 1, v142));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
        do
          v149 = __ldaxr(v142);
        while (__stlxr(v149 - 1, v142));
        if (!v149)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
LABEL_296:
        sub_223A4F2D8(v330, (unsigned __int8 *)&v382, (uint64_t)__p, (uint64_t)v336, (uint64_t)&v373, (uint64_t)v380, (uint64_t)&v370, v129, (uint64_t)v347, a4, a5, (void ***)&v384, v335, v34, a7, a8);
        v150 = *(std::__shared_weak_count **)&v336[16];
        if (!*(_QWORD *)&v336[16])
          goto LABEL_300;
        v151 = (unint64_t *)(*(_QWORD *)&v336[16] + 8);
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
          v153 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
LABEL_301:
            v154 = (unint64_t *)&v153->__shared_owners_;
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
        }
        else
        {
LABEL_300:
          v153 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
            goto LABEL_301;
        }
        v156 = *(_QWORD *)(v330 + 96);
        if (!v156)
          sub_223198474();
        (*(void (**)(uint64_t, unsigned __int8 *, __int128 *))(*(_QWORD *)v156 + 48))(v156, v35, &v384);
        v157 = *(int32x2_t *)((char *)&v384 + 8);
        v158 = v385;
        sub_223AB7154((uint64_t *)&v384, v336);
        v159 = *(char ***)v336;
        *(_QWORD *)__p = v35;
        v160 = sub_223A53C24(a6, v35, (__int128 **)__p);
        if (v160 + 6 != (uint64_t *)v159)
        {
          sub_2239A506C(v160 + 6, *v159, v159[1], 0xAAAAAAAAAAAAAAABLL * ((v159[1] - *v159) >> 2));
          sub_22342D7E8(v160 + 9, v159[3], v159[4], (v159[4] - v159[3]) >> 2);
        }
        v161 = *(_QWORD *)v336;
        *(_QWORD *)v336 = 0;
        if (v161)
        {
          v162 = *(void **)(v161 + 24);
          if (v162)
          {
            *(_QWORD *)(v161 + 32) = v162;
            operator delete(v162);
          }
          v163 = *(void **)v161;
          if (*(_QWORD *)v161)
          {
            *(_QWORD *)(v161 + 8) = v163;
            operator delete(v163);
          }
          MEMORY[0x227684CE8](v161, 0xA0C40054C61C9);
        }
        v164 = v384;
        *(_QWORD *)&v384 = 0;
        if (v164)
        {
          v165 = *(void **)(v164 + 24);
          if (v165)
          {
            *(_QWORD *)(v164 + 32) = v165;
            operator delete(v165);
          }
          v166 = *(void **)v164;
          if (*(_QWORD *)v164)
          {
            *(_QWORD *)(v164 + 8) = v166;
            operator delete(v166);
          }
          MEMORY[0x227684CE8](v164, 0xA0C40054C61C9);
        }
        v167 = v376;
        if (!v376)
          goto LABEL_327;
        v168 = (unint64_t *)&v376->__shared_owners_;
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
          v170 = v339;
          if (v339)
          {
LABEL_328:
            v171 = (unint64_t *)&v170->__shared_owners_;
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
        }
        else
        {
LABEL_327:
          v170 = v339;
          if (v339)
            goto LABEL_328;
        }
        v173 = v372;
        if (!v372)
          goto LABEL_337;
        v174 = (unint64_t *)&v372->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
          v176 = *(std::__shared_weak_count **)&v380[16];
          if (*(_QWORD *)&v380[16])
          {
LABEL_338:
            v177 = (unint64_t *)&v176->__shared_owners_;
            do
              v178 = __ldaxr(v177);
            while (__stlxr(v178 - 1, v177));
            if (!v178)
            {
              ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
              std::__shared_weak_count::__release_weak(v176);
            }
          }
        }
        else
        {
LABEL_337:
          v176 = *(std::__shared_weak_count **)&v380[16];
          if (*(_QWORD *)&v380[16])
            goto LABEL_338;
        }
        v179 = (std::__shared_weak_count *)*((_QWORD *)&v374[0] + 1);
        if (*((_QWORD *)&v374[0] + 1))
        {
          v180 = (unint64_t *)(*((_QWORD *)&v374[0] + 1) + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        v34 = 0;
        v335 &= 0xFFFFFFFFFFFFFF00;
        *((_QWORD *)&v182 + 1) = *((_QWORD *)&v334 + 1);
        *(int32x2_t *)&v182 = vadd_s32(v157, *(int32x2_t *)&v334);
        v334 = v182;
        v333 += v158;
        v42 = v351;
LABEL_349:
        if (v42)
        {
          v183 = (unint64_t *)&v42->__shared_owners_;
          do
            v184 = __ldaxr(v183);
          while (__stlxr(v184 - 1, v183));
          if (!v184)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v35 += 248;
        if (v35 == v332)
          goto LABEL_9;
      }
    }
  }
  v333 = 0;
  *(_QWORD *)&v334 = 0;
LABEL_9:
  v36 = v330;
  v37 = v325;
  if (!*(_BYTE *)(a3 + 496)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 71, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_736;
  }
  if (!*(_BYTE *)(a3 + 368))
  {
LABEL_586:
    v225 = v333;
    goto LABEL_643;
  }
  if (v325[115].i8[8])
  {
    v384 = xmmword_2246597A0;
    goto LABEL_356;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricAllocator.cpp", 274, (uint64_t)"keyframe_list.input_frame.has_value()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_736:
    abort();
  }
  v185 = v325[115].u8[8];
  v384 = xmmword_2246597A0;
  if (!v185)
    sub_22324A974();
LABEL_356:
  if (!*(_BYTE *)(a3 + 464))
    goto LABEL_586;
  v186 = *(uint64_t ***)(a3 + 480);
  if (!v186)
LABEL_729:
    sub_223198218("map::at:  key not found");
  v187 = *(uint64_t ***)(a3 + 480);
  while (1)
  {
    while (1)
    {
      v188 = *((unsigned __int8 *)v187 + 32);
      if (v188 != 55)
      {
        if (v188 < 0x38)
          goto LABEL_380;
        goto LABEL_359;
      }
      v189 = *((unsigned __int8 *)v187 + 33);
      v190 = v189 > 0xC9;
      if (v189 != 201
        || (v191 = *((unsigned __int8 *)v187 + 34), v190 = v191 > 0x70, v191 != 112)
        || (v192 = *((unsigned __int8 *)v187 + 35), v190 = v192 > 0x2C, v192 != 44))
      {
        if (!v190)
          goto LABEL_380;
        goto LABEL_359;
      }
      v193 = *((unsigned __int8 *)v187 + 36);
      if (v193 == 78)
      {
        v193 = *((unsigned __int8 *)v187 + 37);
        if (v193 == 99)
        {
          v193 = *((unsigned __int8 *)v187 + 38);
          if (v193 == 15)
          {
            v193 = *((unsigned __int8 *)v187 + 39);
            if (v193 == 88)
            {
              v193 = *((unsigned __int8 *)v187 + 40);
              if (v193 == 200)
              {
                v193 = *((unsigned __int8 *)v187 + 41);
                if (v193 == 73)
                {
                  v193 = *((unsigned __int8 *)v187 + 42);
                  if (v193 == 164)
                  {
                    v193 = *((unsigned __int8 *)v187 + 43);
                    if (v193 == 192)
                    {
                      v193 = *((unsigned __int8 *)v187 + 44);
                      if (v193 == 37)
                      {
                        v193 = *((unsigned __int8 *)v187 + 45);
                        if (v193 == 101)
                        {
                          v193 = *((unsigned __int8 *)v187 + 46);
                          if (v193 == 239)
                          {
                            v193 = *((unsigned __int8 *)v187 + 47);
                            if (v193 == 14)
                              break;
                            v194 = 14;
                          }
                          else
                          {
                            v194 = 239;
                          }
                        }
                        else
                        {
                          v194 = 101;
                        }
                      }
                      else
                      {
                        v194 = 37;
                      }
                    }
                    else
                    {
                      v194 = 192;
                    }
                  }
                  else
                  {
                    v194 = 164;
                  }
                }
                else
                {
                  v194 = 73;
                }
              }
              else
              {
                v194 = 200;
              }
            }
            else
            {
              v194 = 88;
            }
          }
          else
          {
            v194 = 15;
          }
        }
        else
        {
          v194 = 99;
        }
      }
      else
      {
        v194 = 78;
      }
      if (v194 >= v193)
        break;
LABEL_359:
      v187 = (uint64_t **)*v187;
      if (!v187)
        goto LABEL_729;
    }
    v195 = *((unsigned __int8 *)v187 + 36);
    if (v195 == 78)
    {
      v195 = *((unsigned __int8 *)v187 + 37);
      if (v195 == 99)
      {
        v195 = *((unsigned __int8 *)v187 + 38);
        if (v195 == 15)
        {
          v195 = *((unsigned __int8 *)v187 + 39);
          if (v195 == 88)
          {
            v195 = *((unsigned __int8 *)v187 + 40);
            if (v195 == 200)
            {
              v195 = *((unsigned __int8 *)v187 + 41);
              if (v195 == 73)
              {
                v195 = *((unsigned __int8 *)v187 + 42);
                if (v195 == 164)
                {
                  v195 = *((unsigned __int8 *)v187 + 43);
                  if (v195 == 192)
                  {
                    v195 = *((unsigned __int8 *)v187 + 44);
                    if (v195 == 37)
                    {
                      v195 = *((unsigned __int8 *)v187 + 45);
                      if (v195 == 101)
                      {
                        v195 = *((unsigned __int8 *)v187 + 46);
                        if (v195 == 239)
                        {
                          v195 = *((unsigned __int8 *)v187 + 47);
                          if (v195 == 14)
                            break;
                          v196 = 14;
                        }
                        else
                        {
                          v196 = 239;
                        }
                      }
                      else
                      {
                        v196 = 101;
                      }
                    }
                    else
                    {
                      v196 = 37;
                    }
                  }
                  else
                  {
                    v196 = 192;
                  }
                }
                else
                {
                  v196 = 164;
                }
              }
              else
              {
                v196 = 73;
              }
            }
            else
            {
              v196 = 200;
            }
          }
          else
          {
            v196 = 88;
          }
        }
        else
        {
          v196 = 15;
        }
      }
      else
      {
        v196 = 99;
      }
    }
    else
    {
      v196 = 78;
    }
    if (v195 >= v196)
      break;
LABEL_380:
    v187 = (uint64_t **)v187[1];
    if (!v187)
      goto LABEL_729;
  }
  v197 = (uint64_t)v187[6];
  v198 = *(uint64_t ***)(a3 + 480);
  while (1)
  {
    while (1)
    {
      v199 = *((unsigned __int8 *)v198 + 32);
      if (v199 != 55)
      {
        if (v199 < 0x38)
          goto LABEL_441;
        goto LABEL_420;
      }
      v200 = *((unsigned __int8 *)v198 + 33);
      v201 = v200 > 0xC9;
      if (v200 != 201
        || (v202 = *((unsigned __int8 *)v198 + 34), v201 = v202 > 0x70, v202 != 112)
        || (v203 = *((unsigned __int8 *)v198 + 35), v201 = v203 > 0x2C, v203 != 44))
      {
        if (!v201)
          goto LABEL_441;
        goto LABEL_420;
      }
      v204 = *((unsigned __int8 *)v198 + 36);
      if (v204 == 78)
      {
        v204 = *((unsigned __int8 *)v198 + 37);
        if (v204 == 99)
        {
          v204 = *((unsigned __int8 *)v198 + 38);
          if (v204 == 15)
          {
            v204 = *((unsigned __int8 *)v198 + 39);
            if (v204 == 88)
            {
              v204 = *((unsigned __int8 *)v198 + 40);
              if (v204 == 200)
              {
                v204 = *((unsigned __int8 *)v198 + 41);
                if (v204 == 73)
                {
                  v204 = *((unsigned __int8 *)v198 + 42);
                  if (v204 == 164)
                  {
                    v204 = *((unsigned __int8 *)v198 + 43);
                    if (v204 == 192)
                    {
                      v204 = *((unsigned __int8 *)v198 + 44);
                      if (v204 == 37)
                      {
                        v204 = *((unsigned __int8 *)v198 + 45);
                        if (v204 == 101)
                        {
                          v204 = *((unsigned __int8 *)v198 + 46);
                          if (v204 == 239)
                          {
                            v204 = *((unsigned __int8 *)v198 + 47);
                            if (v204 == 14)
                              break;
                            v205 = 14;
                          }
                          else
                          {
                            v205 = 239;
                          }
                        }
                        else
                        {
                          v205 = 101;
                        }
                      }
                      else
                      {
                        v205 = 37;
                      }
                    }
                    else
                    {
                      v205 = 192;
                    }
                  }
                  else
                  {
                    v205 = 164;
                  }
                }
                else
                {
                  v205 = 73;
                }
              }
              else
              {
                v205 = 200;
              }
            }
            else
            {
              v205 = 88;
            }
          }
          else
          {
            v205 = 15;
          }
        }
        else
        {
          v205 = 99;
        }
      }
      else
      {
        v205 = 78;
      }
      if (v205 >= v204)
        break;
LABEL_420:
      v198 = (uint64_t **)*v198;
      if (!v198)
        goto LABEL_727;
    }
    v206 = *((unsigned __int8 *)v198 + 36);
    if (v206 == 78)
    {
      v206 = *((unsigned __int8 *)v198 + 37);
      if (v206 == 99)
      {
        v206 = *((unsigned __int8 *)v198 + 38);
        if (v206 == 15)
        {
          v206 = *((unsigned __int8 *)v198 + 39);
          if (v206 == 88)
          {
            v206 = *((unsigned __int8 *)v198 + 40);
            if (v206 == 200)
            {
              v206 = *((unsigned __int8 *)v198 + 41);
              if (v206 == 73)
              {
                v206 = *((unsigned __int8 *)v198 + 42);
                if (v206 == 164)
                {
                  v206 = *((unsigned __int8 *)v198 + 43);
                  if (v206 == 192)
                  {
                    v206 = *((unsigned __int8 *)v198 + 44);
                    if (v206 == 37)
                    {
                      v206 = *((unsigned __int8 *)v198 + 45);
                      if (v206 == 101)
                      {
                        v206 = *((unsigned __int8 *)v198 + 46);
                        if (v206 == 239)
                        {
                          v206 = *((unsigned __int8 *)v198 + 47);
                          if (v206 == 14)
                            break;
                          v207 = 14;
                        }
                        else
                        {
                          v207 = 239;
                        }
                      }
                      else
                      {
                        v207 = 101;
                      }
                    }
                    else
                    {
                      v207 = 37;
                    }
                  }
                  else
                  {
                    v207 = 192;
                  }
                }
                else
                {
                  v207 = 164;
                }
              }
              else
              {
                v207 = 73;
              }
            }
            else
            {
              v207 = 200;
            }
          }
          else
          {
            v207 = 88;
          }
        }
        else
        {
          v207 = 15;
        }
      }
      else
      {
        v207 = 99;
      }
    }
    else
    {
      v207 = 78;
    }
    if (v206 >= v207)
      break;
LABEL_441:
    v198 = (uint64_t **)v198[1];
    if (!v198)
LABEL_727:
      sub_223198218("map::at:  key not found");
  }
  if (v198[10])
  {
    while (1)
    {
      v210 = *((unsigned __int8 *)v186 + 32);
      if (v210 != 55)
        break;
      v211 = *((unsigned __int8 *)v186 + 33);
      v212 = v211 > 0xC9;
      if (v211 != 201
        || (v213 = *((unsigned __int8 *)v186 + 34), v212 = v213 > 0x70, v213 != 112)
        || (v214 = *((unsigned __int8 *)v186 + 35), v212 = v214 > 0x2C, v214 != 44))
      {
        if (!v212)
          goto LABEL_503;
        goto LABEL_482;
      }
      v215 = *((unsigned __int8 *)v186 + 36);
      if (v215 == 78)
      {
        v215 = *((unsigned __int8 *)v186 + 37);
        if (v215 == 99)
        {
          v215 = *((unsigned __int8 *)v186 + 38);
          if (v215 == 15)
          {
            v215 = *((unsigned __int8 *)v186 + 39);
            if (v215 == 88)
            {
              v215 = *((unsigned __int8 *)v186 + 40);
              if (v215 == 200)
              {
                v215 = *((unsigned __int8 *)v186 + 41);
                if (v215 == 73)
                {
                  v215 = *((unsigned __int8 *)v186 + 42);
                  if (v215 == 164)
                  {
                    v215 = *((unsigned __int8 *)v186 + 43);
                    if (v215 == 192)
                    {
                      v215 = *((unsigned __int8 *)v186 + 44);
                      if (v215 == 37)
                      {
                        v215 = *((unsigned __int8 *)v186 + 45);
                        if (v215 == 101)
                        {
                          v215 = *((unsigned __int8 *)v186 + 46);
                          if (v215 == 239)
                          {
                            v215 = *((unsigned __int8 *)v186 + 47);
                            if (v215 == 14)
                              goto LABEL_517;
                            v216 = 14;
                          }
                          else
                          {
                            v216 = 239;
                          }
                        }
                        else
                        {
                          v216 = 101;
                        }
                      }
                      else
                      {
                        v216 = 37;
                      }
                    }
                    else
                    {
                      v216 = 192;
                    }
                  }
                  else
                  {
                    v216 = 164;
                  }
                }
                else
                {
                  v216 = 73;
                }
              }
              else
              {
                v216 = 200;
              }
            }
            else
            {
              v216 = 88;
            }
          }
          else
          {
            v216 = 15;
          }
        }
        else
        {
          v216 = 99;
        }
      }
      else
      {
        v216 = 78;
      }
      if (v216 < v215)
      {
LABEL_482:
        v186 = (uint64_t **)*v186;
        if (!v186)
          goto LABEL_727;
      }
      else
      {
LABEL_517:
        v217 = *((unsigned __int8 *)v186 + 36);
        if (v217 == 78)
        {
          v217 = *((unsigned __int8 *)v186 + 37);
          if (v217 == 99)
          {
            v217 = *((unsigned __int8 *)v186 + 38);
            if (v217 == 15)
            {
              v217 = *((unsigned __int8 *)v186 + 39);
              if (v217 == 88)
              {
                v217 = *((unsigned __int8 *)v186 + 40);
                if (v217 == 200)
                {
                  v217 = *((unsigned __int8 *)v186 + 41);
                  if (v217 == 73)
                  {
                    v217 = *((unsigned __int8 *)v186 + 42);
                    if (v217 == 164)
                    {
                      v217 = *((unsigned __int8 *)v186 + 43);
                      if (v217 == 192)
                      {
                        v217 = *((unsigned __int8 *)v186 + 44);
                        if (v217 == 37)
                        {
                          v217 = *((unsigned __int8 *)v186 + 45);
                          if (v217 == 101)
                          {
                            v217 = *((unsigned __int8 *)v186 + 46);
                            if (v217 == 239)
                            {
                              v217 = *((unsigned __int8 *)v186 + 47);
                              if (v217 == 14)
                                goto LABEL_542;
                              v218 = 14;
                            }
                            else
                            {
                              v218 = 239;
                            }
                          }
                          else
                          {
                            v218 = 101;
                          }
                        }
                        else
                        {
                          v218 = 37;
                        }
                      }
                      else
                      {
                        v218 = 192;
                      }
                    }
                    else
                    {
                      v218 = 164;
                    }
                  }
                  else
                  {
                    v218 = 73;
                  }
                }
                else
                {
                  v218 = 200;
                }
              }
              else
              {
                v218 = 88;
              }
            }
            else
            {
              v218 = 15;
            }
          }
          else
          {
            v218 = 99;
          }
        }
        else
        {
          v218 = 78;
        }
        if (v217 >= v218)
        {
LABEL_542:
          v219 = (uint64_t)v186[10];
          *(_QWORD *)v380 = &off_24EC21DF8;
          sub_2237212D0(v219, (uint64_t *)&v380[8]);
          goto LABEL_543;
        }
LABEL_503:
        v186 = (uint64_t **)v186[1];
        if (!v186)
          goto LABEL_727;
      }
    }
    if (v210 < 0x38)
      goto LABEL_503;
    goto LABEL_482;
  }
  *(_QWORD *)v380 = &off_24EC21DF8;
  sub_2238B68A8((uint64_t)&v380[8]);
LABEL_543:
  v220 = *(uint64_t ***)(a3 + 408);
  if (!v220)
LABEL_585:
    sub_223198218("map::at:  key not found");
  while (2)
  {
    while (2)
    {
      v221 = *((unsigned __int8 *)v220 + 32);
      if (v384 != v221)
      {
        v224 = v384;
        if (v384 < v221)
          goto LABEL_545;
LABEL_583:
        if (v221 >= v224)
          goto LABEL_587;
        v220 = (uint64_t **)v220[1];
        if (!v220)
          goto LABEL_585;
        continue;
      }
      break;
    }
    v221 = *((unsigned __int8 *)v220 + 33);
    if (BYTE1(v384) != v221)
    {
      v224 = BYTE1(v384);
      if (BYTE1(v384) < v221)
        goto LABEL_545;
      goto LABEL_583;
    }
    v221 = *((unsigned __int8 *)v220 + 34);
    if (BYTE2(v384) != v221)
    {
      v224 = BYTE2(v384);
      if (BYTE2(v384) < v221)
        goto LABEL_545;
      goto LABEL_583;
    }
    v221 = *((unsigned __int8 *)v220 + 35);
    if (BYTE3(v384) != v221)
    {
      v224 = BYTE3(v384);
      if (BYTE3(v384) < v221)
        goto LABEL_545;
      goto LABEL_583;
    }
    v222 = *((unsigned __int8 *)v220 + 36);
    v223 = BYTE4(v384);
    if (BYTE4(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 37);
    v223 = BYTE5(v384);
    if (BYTE5(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 38);
    v223 = BYTE6(v384);
    if (BYTE6(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 39);
    v223 = BYTE7(v384);
    if (BYTE7(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 40);
    v223 = BYTE8(v384);
    if (BYTE8(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 41);
    v223 = BYTE9(v384);
    if (BYTE9(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 42);
    v223 = BYTE10(v384);
    if (BYTE10(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 43);
    v223 = BYTE11(v384);
    if (BYTE11(v384) != v222)
      goto LABEL_562;
    v222 = *((unsigned __int8 *)v220 + 44);
    v223 = BYTE12(v384);
    if (BYTE12(v384) != v222
      || (v222 = *((unsigned __int8 *)v220 + 45), v223 = BYTE13(v384), BYTE13(v384) != v222)
      || (v222 = *((unsigned __int8 *)v220 + 46), v223 = BYTE14(v384), BYTE14(v384) != v222)
      || (v222 = *((unsigned __int8 *)v220 + 47), v223 = HIBYTE(v384), HIBYTE(v384) != v222))
    {
LABEL_562:
      if (v223 < v222)
      {
LABEL_545:
        v220 = (uint64_t **)*v220;
        if (!v220)
          goto LABEL_585;
        continue;
      }
    }
    break;
  }
  v221 = *((unsigned __int8 *)v220 + 36);
  v224 = BYTE4(v384);
  if (v221 != BYTE4(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 37);
  v224 = BYTE5(v384);
  if (v221 != BYTE5(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 38);
  v224 = BYTE6(v384);
  if (v221 != BYTE6(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 39);
  v224 = BYTE7(v384);
  if (v221 != BYTE7(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 40);
  v224 = BYTE8(v384);
  if (v221 != BYTE8(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 41);
  v224 = BYTE9(v384);
  if (v221 != BYTE9(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 42);
  v224 = BYTE10(v384);
  if (v221 != BYTE10(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 43);
  v224 = BYTE11(v384);
  if (v221 != BYTE11(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 44);
  v224 = BYTE12(v384);
  if (v221 != BYTE12(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 45);
  v224 = BYTE13(v384);
  if (v221 != BYTE13(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 46);
  v224 = BYTE14(v384);
  if (v221 != BYTE14(v384))
    goto LABEL_583;
  v221 = *((unsigned __int8 *)v220 + 47);
  v224 = HIBYTE(v384);
  if (v221 != HIBYTE(v384))
    goto LABEL_583;
LABEL_587:
  v226 = (uint64_t)v220[6];
  if (!v325[40].i8[8])
  {
    __p[0] = 0;
    LOBYTE(v345) = 0;
    if (v325[9].i8[0])
      goto LABEL_592;
LABEL_598:
    v347[0] = 0;
    LOBYTE(v348) = 0;
    if (v325[110].i8[8])
      goto LABEL_596;
    goto LABEL_599;
  }
  if ((!v325[39].i32[0] || !v325[39].i32[1])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1163, (uint64_t)"!derived.processed_depth->Empty()", 33, (uint64_t)"Processed depth buffer not valid", 32, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78((uint64_t)&v325[37], (uint64_t)v347);
  *(_QWORD *)__p = &off_24EC200A8;
  *(_OWORD *)&__p[8] = *(_OWORD *)&v347[8];
  *(_OWORD *)v344 = *(_OWORD *)&v347[24];
  *(_OWORD *)&v344[10] = *(_OWORD *)&v347[34];
  LOBYTE(v345) = 1;
  if (!v325[9].i8[0])
    goto LABEL_598;
LABEL_592:
  if ((!v325[7].i32[2] || !v325[7].i32[3])
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78((uint64_t)&v325[5].i64[1], (uint64_t)v336);
  *(_QWORD *)v347 = &off_24EC200A8;
  *(_OWORD *)&v347[8] = *(_OWORD *)&v336[8];
  *(_OWORD *)&v347[24] = *(_OWORD *)&v336[24];
  *(_OWORD *)&v347[34] = *(_OWORD *)&v336[34];
  LOBYTE(v348) = 1;
  if (!v325[110].i8[8])
  {
LABEL_599:
    v244 = v325[86];
    *(float32x4_t *)v336 = v325[85];
    *(float32x4_t *)&v336[16] = v244;
    v245 = v325[88];
    *(float32x4_t *)&v336[32] = v325[87];
    *(float32x4_t *)&v336[48] = v245;
    goto LABEL_600;
  }
LABEL_596:
  v227.i32[0] = v323[1].i32[0];
  v228 = (float32x2_t)v323[2];
  v229 = (float32x2_t)v323[4];
  v208.i32[0] = v323[5].i32[0];
  *(int32x2_t *)v209.f32 = v323[6];
  v209.i32[2] = v323[7].i32[0];
  v230 = (int8x16_t)vnegq_f32(v209);
  v231 = v325[85];
  v232 = vmulq_n_f32(v231, v227.f32[0]);
  v227.i32[1] = v323[3].i32[0];
  v233 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v323, (int32x2_t)v228), *(float *)v230.i32), (float32x2_t)vzip2_s32(*v323, (int32x2_t)v228), *(float32x2_t *)v209.f32, 1), v227, v209, 2);
  v227.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v229, *(float32x2_t *)v230.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v229, 1), *(float32x2_t *)v209.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v230, v230, 8uLL), v208).u32[0];
  v234 = v325[86];
  v235 = v325[87];
  v236 = v325[88];
  v237 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v231, COERCE_FLOAT(*v323)), v234, v228.f32[0]), v235, v229.f32[0]), (float32x4_t)0, v236);
  v238 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v231, (float32x2_t)*v323, 1), v234, v228, 1), v235, v229, 1), (float32x4_t)0, v236);
  v239 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v232, v234, v227.f32[1]), v235, v208.f32[0]), (float32x4_t)0, v236);
  v240 = vaddq_f32(v236, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v231, v233.f32[0]), v234, v233, 1), v235, v227.f32[0]));
  v241 = *(float32x4_t *)v323[14].i8;
  v242 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v237, COERCE_FLOAT(*(_OWORD *)v323[10].i8)), v238, (float32x2_t)v323[10], 1), v239, *(float32x4_t *)v323[10].i8, 2), v240, *(float32x4_t *)v323[10].i8, 3);
  v243 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v237, COERCE_FLOAT(*(_OWORD *)v323[12].i8)), v238, (float32x2_t)v323[12], 1), v239, *(float32x4_t *)v323[12].i8, 2), v240, *(float32x4_t *)v323[12].i8, 3);
  *(float32x4_t *)v336 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v237, COERCE_FLOAT(*(_OWORD *)v323[8].i8)), v238, (float32x2_t)v323[8], 1), v239, *(float32x4_t *)v323[8].i8, 2), v240, *(float32x4_t *)v323[8].i8, 3);
  *(float32x4_t *)&v336[16] = v242;
  *(float32x4_t *)&v336[32] = v243;
  *(float32x4_t *)&v336[48] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v237, v241.f32[0]), v238, *(float32x2_t *)v241.f32, 1), v239, v241, 2), v240, v241, 3);
LABEL_600:
  sub_223AB6D8C((uint64_t *)&v337);
  v375 = v384;
  LOBYTE(v376) = 1;
  v373 = COERCE_DOUBLE(&off_24EC21230);
  sub_2231BE6D4(v197, (uint64_t *)v374);
  v370 = COERCE_DOUBLE(&off_24EC21420);
  sub_2231F9830(v226, &v371);
  sub_223A4F2D8(v330, (unsigned __int8 *)&v375, (uint64_t)__p, (uint64_t)v347, (uint64_t)&v373, (uint64_t)v380, (uint64_t)&v370, (uint64_t)&v325[79], (uint64_t)v336, a4, a5, &v337, v335, v34, a7, a8);
  v246 = v372;
  if (v372)
  {
    v247 = (unint64_t *)&v372->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  v249 = (std::__shared_weak_count *)*((_QWORD *)&v374[0] + 1);
  if (*((_QWORD *)&v374[0] + 1))
  {
    v250 = (unint64_t *)(*((_QWORD *)&v374[0] + 1) + 8);
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
      std::__shared_weak_count::__release_weak(v249);
    }
  }
  v252 = *(_QWORD *)(v330 + 96);
  if (!v252)
    sub_223198474();
  (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v252 + 48))(v252, a3 + 448, &v337);
  v253 = v338;
  v254 = (int)v339;
  sub_223AB7154((uint64_t *)&v337, &v370);
  v255 = *(char ***)&v370;
  v373 = COERCE_DOUBLE(&v384);
  v256 = sub_223A53C24(a6, (unsigned __int8 *)&v384, (__int128 **)&v373);
  if (v256 + 6 != (uint64_t *)v255)
  {
    sub_2239A506C(v256 + 6, *v255, v255[1], 0xAAAAAAAAAAAAAAABLL * ((v255[1] - *v255) >> 2));
    sub_22342D7E8(v256 + 9, v255[3], v255[4], (v255[4] - v255[3]) >> 2);
  }
  v257 = v370;
  v370 = 0.0;
  if (v257 != 0.0)
  {
    v258 = *(void **)(*(_QWORD *)&v257 + 24);
    if (v258)
    {
      *(_QWORD *)(*(_QWORD *)&v257 + 32) = v258;
      operator delete(v258);
    }
    v259 = **(void ***)&v257;
    if (**(_QWORD **)&v257)
    {
      *(_QWORD *)(*(_QWORD *)&v257 + 8) = v259;
      operator delete(v259);
    }
    MEMORY[0x227684CE8](*(_QWORD *)&v257, 0xA0C40054C61C9);
  }
  v260 = v337;
  v337 = 0;
  if (v260)
  {
    v261 = v260[3];
    if (v261)
    {
      v260[4] = v261;
      operator delete(v261);
    }
    v262 = *v260;
    if (*v260)
    {
      v260[1] = v262;
      operator delete(v262);
    }
    MEMORY[0x227684CE8](v260, 0xA0C40054C61C9);
  }
  if ((_BYTE)v348)
  {
    v263 = *(std::__shared_weak_count **)&v347[16];
    if (*(_QWORD *)&v347[16])
    {
      v264 = (unint64_t *)(*(_QWORD *)&v347[16] + 8);
      do
        v265 = __ldaxr(v264);
      while (__stlxr(v265 - 1, v264));
      if (!v265)
      {
        ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
        std::__shared_weak_count::__release_weak(v263);
      }
    }
  }
  if ((_BYTE)v345)
  {
    v266 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v267 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v268 = __ldaxr(v267);
      while (__stlxr(v268 - 1, v267));
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
  }
  v225 = v254 + v333;
  v269 = *(std::__shared_weak_count **)&v380[16];
  if (*(_QWORD *)&v380[16])
  {
    v270 = (unint64_t *)(*(_QWORD *)&v380[16] + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  *(int32x2_t *)&v334 = vadd_s32(v253, *(int32x2_t *)&v334);
LABEL_643:
  v373 = 0.0;
  v373 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  *(_QWORD *)v380 = "cv3d.recon.";
  *(_QWORD *)&v380[8] = 11;
  *(_QWORD *)&v380[16] = "Stats.Volumetric.Time";
  *(_QWORD *)&v380[24] = 21;
  sub_2231A9820((uint64_t)v380, (uint64_t)&v380[32], 0, 0, (std::string *)v347);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v272 = sub_2241471F8();
    v273 = v272[2];
    if (!v273)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v273 = v272[2];
    }
    v274 = *(_QWORD *)(v273 + 64);
    v275 = (std::mutex *)(v274 + 32);
    std::mutex::lock((std::mutex *)(v274 + 32));
    v277 = *(_QWORD *)(v274 + 96);
    v276 = *(_QWORD *)(v274 + 104);
    std::mutex::unlock(v275);
    if (v277 != v276)
    {
      sub_2241471F8();
      v278 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v278 + 24))(v278))
      {
        memset(v380, 0, 32);
        *(_DWORD *)&v380[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v278 + 24))(v278))
        {
          __p[23] = 15;
          strcpy(__p, "allocation (ms)");
          *(_QWORD *)v336 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v336[8] = 2;
          v279 = sub_2241471F8();
          sub_2238C7990((uint64_t)v279, v278, (uint64_t *)&v373, (uint64_t)__p, (__int128 *)v336);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v380, 0, 32);
  *(_DWORD *)&v380[32] = 728325624;
  kdebug_trace();
  v280 = v347[23];
  if (v347[23] < 0)
    v280 = *(_QWORD *)&v347[8];
  if (v280 >= 0x11)
  {
    v281 = v347;
    if (v347[23] < 0)
      v281 = *(_BYTE **)v347;
    v282 = *(_QWORD *)v281;
    v283 = *((_QWORD *)v281 + 1);
    v284 = v281[16];
    if (v282 == 0x6365722E64337663 && v283 == 0x73746174532E6E6FLL && v284 == 46)
    {
      v287 = sub_223187510();
      if (v347[23] >= 0)
        v288 = v347;
      else
        v288 = *(_BYTE **)v347;
      if (v347[23] >= 0)
        v289 = v347[23];
      else
        v289 = *(_QWORD *)&v347[8];
      sub_2231AA374((uint64_t *)v287, v288, v289, (uint64_t *)&v373, (uint64_t)"allocation (ms)", 15);
    }
  }
  kdebug_trace();
  if ((v347[23] & 0x80000000) != 0)
    operator delete(*(void **)v347);
  *(_QWORD *)v380 = "cv3d.recon.";
  *(_QWORD *)&v380[8] = 11;
  *(_QWORD *)&v380[16] = "Stats.Volumetric.Time";
  *(_QWORD *)&v380[24] = 21;
  sub_2231A9820((uint64_t)v380, (uint64_t)&v380[32], 0, 0, (std::string *)v347);
  sub_224569D7C();
  sub_224569A80();
  v290 = (DWORD1(v334) + v334);
  if (os_variant_has_internal_diagnostics())
  {
    v291 = sub_2241471F8();
    v292 = v291[2];
    if (!v292)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v292 = v291[2];
    }
    v293 = *(_QWORD *)(v292 + 64);
    v294 = (std::mutex *)(v293 + 32);
    std::mutex::lock((std::mutex *)(v293 + 32));
    v296 = *(_QWORD *)(v293 + 96);
    v295 = *(_QWORD *)(v293 + 104);
    std::mutex::unlock(v294);
    if (v296 != v295)
    {
      sub_2241471F8();
      v297 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v297 + 24))(v297))
      {
        memset(v380, 0, 32);
        *(_DWORD *)&v380[32] = 728325608;
        kdebug_trace();
        if (v290 <= 1)
          v298 = 1;
        else
          v298 = (DWORD1(v334) + v334);
        v370 = v373 / (double)v298;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v297 + 24))(v297))
        {
          *(_QWORD *)__p = operator new(0x20uLL);
          *(_OWORD *)&__p[8] = xmmword_2245C6420;
          strcpy(*(char **)__p, "allocation time (ms) per block");
          *(_QWORD *)v336 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v336[8] = 2;
          v299 = sub_2241471F8();
          sub_2231AA49C((uint64_t)v299, v297, &v370, (uint64_t)__p, (__int128 *)v336);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(v380, 0, 32);
  *(_DWORD *)&v380[32] = 728325624;
  kdebug_trace();
  v300 = v347[23];
  if (v347[23] < 0)
    v300 = *(_QWORD *)&v347[8];
  if (v300 >= 0x11)
  {
    v301 = v347;
    if (v347[23] < 0)
      v301 = *(_BYTE **)v347;
    v302 = *(_QWORD *)v301;
    v303 = *((_QWORD *)v301 + 1);
    v304 = v301[16];
    if (v302 == 0x6365722E64337663 && v303 == 0x73746174532E6E6FLL && v304 == 46)
    {
      v307 = sub_223187510();
      if (v347[23] >= 0)
        v308 = v347;
      else
        v308 = *(_BYTE **)v347;
      if (v347[23] >= 0)
        v309 = v347[23];
      else
        v309 = *(_QWORD *)&v347[8];
      if (v290 <= 1)
        v310 = 1;
      else
        v310 = (DWORD1(v334) + v334);
      *(double *)__p = v373 / (double)v310;
      sub_2231AA374((uint64_t *)v307, v308, v309, (uint64_t *)__p, (uint64_t)"allocation time (ms) per block", 30);
    }
  }
  kdebug_trace();
  if ((v347[23] & 0x80000000) != 0)
    operator delete(*(void **)v347);
  memset(v380, 0, 32);
  *(_DWORD *)&v380[32] = 728325632;
  kdebug_trace();
  *(double *)&v311 = v373;
  if (v290 <= 1)
    v312 = 1;
  else
    v312 = (DWORD1(v334) + v334);
  mach_absolute_time();
  v313 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v313 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v322) = *(_DWORD *)&__p[4];
    LODWORD(v321) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v321 / (double)v322;
    __cxa_guard_release(&qword_255795560);
    v36 = v330;
    v37 = v325;
  }
  v314 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v314 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
    v36 = v330;
    v37 = v325;
  }
  std::mutex::lock(&stru_25578CC98);
  v315 = *(double *)&v311 / (double)v312;
  v316 = *(double *)&qword_25578CCD8;
  if (*(double *)&qword_25578CCD8 <= v315)
    v316 = *(double *)&v311 / (double)v312;
  if (byte_25578CCE0)
    v315 = v316;
  qword_25578CCD8 = *(_QWORD *)&v315;
  byte_25578CCE0 = 1;
  std::mutex::unlock(&stru_25578CC98);
  kdebug_trace();
  sub_223A679EC(a4, v334, SDWORD1(v334), v225);
  if (v37[115].i8[8] && v37[110].i8[8])
  {
    v317 = *(__int128 *)((char *)&v37[107] + 8);
    *(float32x4_t *)v380 = *(float32x4_t *)((char *)v37 + 1704);
    *(_OWORD *)&v380[16] = v317;
    v319 = *(__int128 *)((char *)&v37[109] + 8);
    *(float32x4_t *)&v380[32] = *(float32x4_t *)((char *)v37 + 1736);
    HIDWORD(v318) = *(_DWORD *)&v380[36];
    *(_OWORD *)&v380[48] = v319;
    LODWORD(v318) = *(_DWORD *)(v36 + 8);
    v380[64] = 1;
    sub_223A640C4(a6, (uint64_t)v380, v318);
  }
  return kdebug_trace();
}

void sub_223A539B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC(v1 - 256);
  sub_2231874DC((uint64_t)&STACK[0x2C8]);
  _Unwind_Resume(a1);
}

uint64_t sub_223A53C18(uint64_t result)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(result + 40);
  return result;
}

uint64_t *sub_223A53C24(uint64_t **a1, unsigned __int8 *a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x60uLL);
    v11 = **a3;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = v11;
    *((_OWORD *)v10 + 3) = 0u;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v12 = (uint64_t *)**a1;
    v13 = v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    sub_2231A9A8C(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)(v5 + 4);
      if ((sub_22319835C(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((sub_22319835C(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t sub_223A53D18(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  if (!*(_BYTE *)(a2 + 84))
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
      abort();
    }
    *(_DWORD *)a1 = *(_DWORD *)(a2 + 8);
    goto LABEL_11;
  }
  v4 = *(unsigned __int8 *)(a2 + 48);
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 64);
  if (v4)
  {
LABEL_11:
    *(float *)(a1 + 4) = *(float *)(a2 + 8) * *(float *)(a2 + 16);
LABEL_12:
    v8 = *(_DWORD *)(a2 + 280);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 12) = v8;
    goto LABEL_13;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 167, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_16;
  }
  v5 = *(unsigned __int8 *)(a2 + 48);
  *(float *)(a1 + 4) = *(float *)(a2 + 8) * *(float *)(a2 + 16);
  if (v5)
    goto LABEL_12;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 172, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C)|| (v6 = *(unsigned __int8 *)(a2 + 48), v7 = *(_DWORD *)(a2 + 280), *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 20), *(_DWORD *)(a1 + 12) = v7, !v6)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 157, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0,
         (void (*)(void **))sub_22457406C))
  {
LABEL_16:
    abort();
  }
LABEL_13:
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 12);
  v9 = *(unsigned __int8 *)(a2 + 105);
  *(_BYTE *)(a1 + 20) = v9;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 44);
  if ((v9 & ~*(unsigned __int8 *)(a2 + 284)) != 0
  {
    goto LABEL_16;
  }
  return a1;
}

void sub_223A53EF8()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223A53F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, char a12, int a13, __int16 a14, int a15, char a16, float32x2_t **a17, uint64_t a18, uint64_t a19, _QWORD *a20,int a21,uint64_t **a22,uint64_t **a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x2_t *v28;
  float32x2_t *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  float32x4_t v36;
  double v37;
  double v38;
  __n128 v39;
  float32x2_t v40;
  double v41;
  float32x2_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unsigned int v49;
  _DWORD *v50;
  uint64_t *v51;
  int8x16_t v52;
  __n128 v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  int *v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t **v61;
  _DWORD *v62;
  int v63;
  float32x2_t *v64;
  float32x2_t *v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  size_t v70;
  char *v71;
  size_t v72;
  int8x16_t v73;
  uint64_t v74;
  float *v75;
  float32x2_t *v76;
  uint64_t (***v77)();
  uint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  double v91;
  _OWORD *v92;
  unint64_t v93;
  const float *v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  unint64_t v103;
  float32x2_t *v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x4_t v109;
  float32x2_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint64_t (***v113)();
  uint64_t v114;
  uint64_t (***v115)();
  float32x2_t v116;
  uint64_t (***v117)();
  uint64_t v118;
  uint64_t (***v119)();
  uint64_t v120;
  int8x16_t *v121;
  char *v122;
  float32x2_t *v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  float32x4_t v129;
  int8x16_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  uint64_t v134;
  uint64_t (***v135)();
  uint64_t v136;
  __int32 *v137;
  __int32 *v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x4_t v142;
  float32x2_t v143;
  int8x16_t v144;
  uint64_t (***v145)();
  uint64_t v146;
  uint64_t (***v147)();
  __int32 v148;
  uint64_t (***v149)();
  uint64_t v150;
  uint64_t (***v151)();
  uint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int8x16_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  int32x2_t *v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  BOOL v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  int32x2_t *v170;
  int v171;
  float32x4_t v172;
  float32x4_t v173;
  unsigned __int8 v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float32x2_t *v180;
  float32x2_t *v181;
  float v182;
  uint64_t v183;
  size_t v184;
  char *v185;
  uint64_t (**v186)();
  uint64_t v187;
  float *v188;
  BOOL v189;
  float *v190;
  float v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  BOOL v200;
  float v201;
  float v202;
  int v204;
  int v205;
  float32x4_t v206;
  double v207;
  float32x2_t v208;
  unsigned int v209;
  _QWORD *v210;
  uint64_t v211;
  _QWORD *v212;
  unsigned int v213;
  _DWORD *v214;
  uint64_t *v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  unsigned int v219;
  _DWORD *v220;
  uint64_t *v221;
  char v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t *v234;
  float32x2_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t **v241;
  _DWORD *v242;
  uint64_t v243;
  uint64_t v244;
  float32x4_t v245;
  int8x16_t v246;
  uint64_t v247;
  int8x16_t v248;
  __int32 v249;
  float32x4_t v250;
  float32x2_t v251;
  float32x4_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  uint64_t v257;
  void *v258[2];
  void *v259[2];
  void *v260[2];
  unint64_t v261;
  float *v262;
  void *v263;
  void *v264;
  _OWORD *v265;
  int v266[2];
  int v267[2];
  int v268;
  char v269;
  uint64_t v270;
  float v271;
  float32x2_t v272;
  void *__p;
  uint64_t (**v274)();
  float32x2_t *v275;
  uint64_t (***v276)();
  __int32 *v277;
  uint64_t (**v278)();
  float32x2_t *v279;
  uint64_t (***v280)();
  __int32 *v281;
  uint64_t (**v282)();
  float32x2_t *v283;
  uint64_t (***v284)();
  __int32 *v285;
  uint64_t (**v286)();
  float32x2_t *v287;
  uint64_t (***v288)();
  int *v289;
  uint64_t (**v290)();
  float32x2_t *v291;
  uint64_t (***v292)();
  uint64_t v293;

  v23 = MEMORY[0x24BDAC7A8]();
  v236 = v24;
  v237 = v25;
  v239 = v26;
  v240 = v27;
  v29 = v28;
  v243 = v30;
  v244 = v23;
  v293 = *MEMORY[0x24BDAC8D0];
  v241 = v31;
  kdebug_trace();
  if (a16)
  {
    if ((a14 & 0xFF00) == 0
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricIntegrator.cpp", 245, (uint64_t)"!level.has_value()", 18, (uint64_t)"Semantics-only integration should not have level", 48, (void (*)(void **))sub_22457406C))
    {
      if ((a12 & 1) == 0)
        return kdebug_trace();
      v32 = *v241;
      v33 = v241[1];
      if (*v241 == v33)
        return kdebug_trace();
      v34 = (uint64_t *)(a22 + 1);
      while (1)
      {
        v266[0] = a21;
        *(_QWORD *)v267 = *v32;
        v268 = *((_DWORD *)v32 + 2);
        v35 = sub_22353408C(a20 + 1, v266);
        v43 = *((unsigned int *)v35 + 8);
        if (*(_BYTE *)(*(_QWORD *)(a20[7] + 8 * ((a20[10] + v43) / 0x1F)) + 132 * ((a20[10] + v43) % 0x1F) + 20))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 706, (uint64_t)"!metadata_blocks_[iter->second].IsErased()", 42, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
          {
            break;
          }
          v43 = *((unsigned int *)v35 + 8);
        }
        if (a20[11] <= v43
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a20[7] + 8 * ((a20[10] + v43) / 0x1F)) + 132 * ((a20[10] + v43) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
        {
          break;
        }
        v44 = *(_QWORD *)(a20[30] + (((a20[33] + v43) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 1016 * ((*((_DWORD *)a20 + 66) + (_DWORD)v43) & 0xF);
        v45 = *((_DWORD *)v35 + 8);
        v36.i32[0] = *(_DWORD *)(v244 + 8);
        LOBYTE(v266[0]) = 0;
        LOBYTE(v267[1]) = 0;
        sub_223A7B22C(a9, v243, v29, (uint64_t)v266, v44, v36, v37, v38, v39, v40, v41, v42);
        v46 = *v34;
        v47 = a22 + 1;
        v48 = a22 + 1;
        if (*v34)
        {
          while (1)
          {
            while (1)
            {
              v48 = (_QWORD *)v46;
              v49 = *(_DWORD *)(v46 + 28);
              if (v49 <= v45)
                break;
              v46 = *v48;
              v47 = v48;
              if (!*v48)
                goto LABEL_23;
            }
            if (v49 >= v45)
              break;
            v46 = v48[1];
            if (!v46)
            {
              v47 = v48 + 1;
              goto LABEL_23;
            }
          }
        }
        else
        {
LABEL_23:
          v50 = operator new(0x20uLL);
          v50[7] = v45;
          *(_QWORD *)v50 = 0;
          *((_QWORD *)v50 + 1) = 0;
          *((_QWORD *)v50 + 2) = v48;
          *v47 = v50;
          v51 = (uint64_t *)**a22;
          if (v51)
          {
            *a22 = v51;
            v50 = (_DWORD *)*v47;
          }
          sub_2231A9A8C(a22[1], (uint64_t *)v50);
          a22[2] = (uint64_t *)((char *)a22[2] + 1);
        }
        v32 = (uint64_t *)((char *)v32 + 12);
        if (v32 == v33)
          return kdebug_trace();
      }
    }
    abort();
  }
  kdebug_trace();
  v55 = 0;
  v56.i32[0] = *(_DWORD *)(v244 + 8);
  v245 = v56;
  v56.i32[1] = 0x800000;
  do
  {
    v57 = &v266[v55];
    *(_BYTE *)v57 = 0;
    *(_QWORD *)(v57 + 1) = 0x80000000800000;
    v57[3] = -947920896;
    v55 += 4;
  }
  while (v55 != 2048);
  v269 = 0;
  v270 = 0;
  v59 = *v241;
  v58 = v241[1];
  if (v58 == *v241)
  {
    v234 = 0;
    v238 = 0;
    v242 = 0;
  }
  else
  {
    v60 = ((char *)v58 - (char *)*v241) / 12;
    if (v60 >> 61)
      sub_22316E078();
    v61 = (uint64_t **)operator new(8 * v60);
    bzero(v61, 8 * v60);
    v62 = operator new(4 * v60);
    v238 = (uint64_t *)&v61[v60];
    memset(v62, 255, 4 * v60);
    v234 = (uint64_t *)v61;
    v242 = v62;
    do
    {
      *v61++ = sub_223A5BD5C(a20, v59, a21);
      *v62++ = v63;
      v59 = (uint64_t *)((char *)v59 + 12);
    }
    while (v59 != v58);
  }
  v65 = *a17;
  v64 = a17[1];
  v264 = 0;
  v265 = 0;
  v263 = 0;
  if (v64 == v65)
  {
    v75 = 0;
    v262 = 0;
    if (v234 == v238)
      goto LABEL_228;
    goto LABEL_127;
  }
  v235 = v64;
  v66 = ((char *)v64 - (char *)v65) / 464;
  if (v66 >> 58)
    sub_223257BE4();
  v67 = v66 << 6;
  v68 = operator new(v66 << 6);
  v69 = &v68[4 * v66];
  v263 = v68;
  v265 = v69;
  do
  {
    *v68 = xmmword_22465BDD0;
    v68[1] = unk_22465BDE0;
    v68[2] = xmmword_22465BDF0;
    v68[3] = unk_22465BE00;
    v68 += 4;
    v67 -= 64;
  }
  while (v67);
  v264 = v69;
  v70 = 24 * v66;
  v71 = (char *)operator new(v70);
  v72 = 24 * ((v70 - 24) / 0x18) + 24;
  bzero(v71, v72);
  v74 = 0;
  v75 = (float *)&v71[v72];
  v76 = v235;
  do
  {
    *(float32x2_t *)v56.f32 = v65[5];
    v56.i32[2] = v65[6].i32[0];
    *(float32x2_t *)v52.i8 = v65[7];
    v52.i32[2] = v65[8].i32[0];
    v53.n128_u32[0] = v65[10].u32[0];
    v54.i64[0] = vzip1q_s32((int32x4_t)v56, (int32x4_t)v52).u64[0];
    *(float32x2_t *)v73.i8 = v65[11];
    v73.i32[2] = v65[12].i32[0];
    v79 = (int8x16_t)vnegq_f32((float32x4_t)v73);
    v80 = (int8x16_t)vtrn2q_s32((int32x4_t)v56, (int32x4_t)v52);
    v80.i32[2] = HIDWORD(*(_QWORD *)&v65[9]);
    v81 = (int8x16_t)vzip2q_s32((int32x4_t)v56, (int32x4_t)v52);
    *(float32x2_t *)v82.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v54.f32, *(float *)v79.i32), *(float32x2_t *)v80.i8, *(float32x2_t *)v73.i8, 1), *(float32x2_t *)v81.i8, (float32x4_t)v73, 2);
    v81.i32[2] = v53.n128_u32[0];
    v52 = vextq_s8(vextq_s8(v80, v80, 0xCuLL), v81, 8uLL);
    v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2);
    v82.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(v65[9], *(float32x2_t *)v79.i8), (float32x2_t)vdup_lane_s32((int32x2_t)v65[9], 1), *(float32x2_t *)v73.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL), (float32x2_t)v53.n128_u64[0]).u32[0]);
    v83.i32[3] = 0;
    v83.i32[0] = v80.i32[0];
    v53.n128_u64[0] = v52.u64[1];
    *(uint64_t *)((char *)v83.i64 + 4) = v52.i64[0];
    v53.n128_u64[1] = v56.u32[0];
    v54.i64[1] = *(_QWORD *)&v65[9];
    v84 = (float32x4_t *)((char *)v263 + 64 * v74);
    *v84 = v54;
    v84[1] = (float32x4_t)v83;
    v84[2] = (float32x4_t)v53;
    v84[3] = (float32x4_t)v82;
    if (!v65[48].i8[0])
      goto LABEL_41;
    v85 = (char *)v65[45];
    v86 = (char *)v65[46];
    v87 = v86 - v85;
    if ((unint64_t)(v86 - v85) < 0x18)
      goto LABEL_41;
    v88 = v87 & 0xFFFFFFFFFFFFFFF8;
    if ((unint64_t)(v87 >> 3) <= 1)
      v89 = 1;
    else
      v89 = v87 >> 3;
    v52.i64[0] = *(_QWORD *)&v85[v88 - 8];
    if (v89 < 8)
    {
      v90 = 0;
      v91 = 0.0;
      goto LABEL_53;
    }
    v83.i64[1] = *(_QWORD *)&v85[v88 - 8];
    v90 = v89 & 0xFFFFFFFFFFFFFFF8;
    v53 = (__n128)vdupq_lane_s32(*(int32x2_t *)v52.i8, 0);
    v92 = v85 + 32;
    v91 = 0.0;
    v93 = v89 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v94 = (const float *)(v92 - 2);
      *(float32x4x2_t *)(&v73 - 1) = vld2q_f32(v94);
      v95 = *(int32x4_t *)v92;
      v52 = *((int8x16_t *)v92 + 1);
      v92 += 4;
      v82 = (int8x16_t)vuzp1q_s32(v95, (int32x4_t)v52);
      v96 = (int8x16_t)vuzp2q_s32(v95, (int32x4_t)v52);
      v80 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v97, v82, 0xCuLL), (float32x4_t)v82);
      v98 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v53, v97, 0xCuLL), (float32x4_t)v97), vsubq_f32((float32x4_t)v73, (float32x4_t)vextq_s8(v83, v73, 0xCuLL)));
      v99 = vmulq_f32((float32x4_t)v80, vsubq_f32((float32x4_t)v96, (float32x4_t)vextq_s8(v73, v96, 0xCuLL)));
      v54 = (float32x4_t)vcvt_hight_f64_f32(v98);
      v73.i32[1] = v54.i32[3];
      v100 = vcvtq_f64_f32(*(float32x2_t *)v98.f32);
      v101 = vcvt_hight_f64_f32(v99);
      v102 = vcvtq_f64_f32(*(float32x2_t *)v99.f32);
      v91 = v91
          + v100.f64[0]
          + v100.f64[1]
          + *(double *)v54.i64
          + *(double *)&v54.i64[1]
          + v102.f64[0]
          + v102.f64[1]
          + v101.f64[0]
          + v101.f64[1];
      v83 = v96;
      v53 = (__n128)v82;
      v93 -= 8;
    }
    while (v93);
    if (v89 != v90)
    {
      v52 = vextq_s8(v52, v52, 8uLL);
LABEL_53:
      v103 = v89 - v90;
      v104 = (float32x2_t *)&v85[8 * v90];
      do
      {
        v105 = *v104++;
        v53.n128_u64[0] = (unint64_t)vadd_f32(v105, *(float32x2_t *)v52.i8);
        v91 = v91 + vmul_lane_f32((float32x2_t)v53.n128_u64[0], vsub_f32(v105, *(float32x2_t *)v52.i8), 1).f32[0];
        *(float32x2_t *)v52.i8 = v105;
        --v103;
      }
      while (v103);
    }
    *(double *)v56.i64 = v91 * 0.5;
    if (*(double *)v56.i64 >= 0.5)
    {
      __p = (void *)v65[45];
      v274 = &off_24EC5E250;
      v276 = &v274;
      v275 = v65;
      v277 = (__int32 *)v86;
      v278 = &off_24EC5E250;
      v280 = &v278;
      v279 = v65;
      if (v85 == v86)
      {
        v54.i64[0] = 0;
        v73.i32[0] = 0;
        v115 = &v278;
        v82.i32[0] = 0;
        v116 = 0;
      }
      else
      {
        v289 = (int *)v85;
        v290 = &off_24EC5E250;
        v292 = &v290;
        v291 = v65;
        v56.i32[0] = *(_DWORD *)v85;
        v52.i32[0] = *((_DWORD *)v85 + 1);
        v106 = v65[5];
        v53.n128_u32[0] = v65[6].u32[0];
        v107 = v65[7];
        v73.i32[0] = v65[8].i32[0];
        v108 = v65[9];
        v82.i32[0] = v65[10].i32[0];
        *(float32x2_t *)v80.i8 = v65[11];
        v80.i32[2] = v65[12].i32[0];
        v285 = (__int32 *)v85;
        v286 = &off_24EC5E250;
        v287 = v65;
        v288 = &v286;
        v289 = (int *)(v85 + 8);
        v281 = (__int32 *)v86;
        v282 = &off_24EC5E250;
        v284 = &v282;
        v283 = v65;
        *(float32x2_t *)v109.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v106, v56.f32[0]), v107, *(float *)v52.i32), (float32x2_t)vdup_n_s32(0xBDF5C28F), v108);
        v110 = vmla_f32(vmul_f32((float32x2_t)v53.n128_u64[0], *(float32x2_t *)v56.f32), *(float32x2_t *)v52.i8, *(float32x2_t *)v73.i8);
        v52.i32[0] = -1107967345;
        *(float32x2_t *)&v109.u32[2] = vmla_f32(v110, *(float32x2_t *)v52.i8, *(float32x2_t *)v82.i8);
        v111 = (int8x16_t)vaddq_f32(v109, (float32x4_t)v80);
        v112 = vextq_s8(v111, v111, 4uLL);
        v73.i32[0] = v111.i32[0];
        v54.i64[0] = v112.i64[0];
        do
        {
          v246 = v73;
          v250 = v54;
          v254 = v111;
          *(int8x16_t *)v258 = v112;
          if (!v288)
            sub_223198474();
          ((void (*)(float *__return_ptr))(*v288)[6])(&v271);
          v73 = v246;
          v54.i64[1] = v250.i64[1];
          if (v271 < *(float *)v246.i32)
            *(float *)v73.i32 = v271;
          v111 = v254;
          v112.i64[1] = (uint64_t)v258[1];
          if (*(float *)v254.i32 < v271)
            *(float *)v111.i32 = v271;
          *(int8x8_t *)v112.i8 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v258[0], v272), (int8x8_t)v272, (int8x8_t)v258[0]);
          *(int8x8_t *)v54.f32 = vbsl_s8((int8x8_t)vcgt_f32(v272, *(float32x2_t *)v250.f32), (int8x8_t)v272, *(int8x8_t *)v250.f32);
          v285 += 2;
        }
        while (v285 != v281);
        v247 = v73.i64[0];
        v251 = *(float32x2_t *)v54.f32;
        v255 = v111;
        *(int8x16_t *)v259 = v112;
        v113 = v284;
        if (v284 == &v282)
        {
          v113 = &v282;
          v114 = 4;
LABEL_69:
          (*v113)[v114]();
        }
        else if (v284)
        {
          v114 = 5;
          goto LABEL_69;
        }
        v117 = v288;
        if (v288 == &v286)
        {
          v117 = &v286;
          v118 = 4;
LABEL_74:
          (*v117)[v118]();
        }
        else if (v288)
        {
          v118 = 5;
          goto LABEL_74;
        }
        v119 = v292;
        if (v292 == &v290)
        {
          v119 = &v290;
          v120 = 4;
LABEL_79:
          (*v119)[v120]();
        }
        else if (v292)
        {
          v120 = 5;
          goto LABEL_79;
        }
        v115 = v280;
        v73 = v255;
        v54 = *(float32x4_t *)v259;
        v82.i64[0] = v247;
        v116 = v251;
      }
      v122 = v71;
      v121 = (int8x16_t *)&v71[24 * v74];
      v124 = *(float32x2_t *)v121[1].i8;
      v123 = (float32x2_t *)&v121[1];
      v125.i32[3] = HIDWORD(*(unsigned __int128 *)v121);
      v125.i32[0] = v82.i32[0];
      *(uint64_t *)((char *)v125.i64 + 4) = v54.i64[0];
      v126 = *(float32x4_t *)v121;
      v126.i32[3] = v82.i32[0];
      v127 = (int8x16_t)vcgtq_f32(v126, v125);
      v125.i32[3] = v82.i32[0];
      v128 = vbslq_s8(v127, (int8x16_t)v125, *v121);
      v125.i64[0] = __PAIR64__(v116.u32[0], v73.u32[0]);
      v125.i64[1] = __PAIR64__(v128.u32[3], v116.u32[1]);
      v129 = (float32x4_t)v128;
      v129.i32[3] = v73.i32[0];
      v130 = (int8x16_t)vcgtq_f32(v129, v125);
      v125.i32[3] = v73.i32[0];
      *v121 = vbslq_s8(v130, (int8x16_t)v125, v128);
      v131 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v54.f32, v124), *(int8x8_t *)v54.f32, (int8x8_t)v124);
      v132 = (float32x2_t)vcgt_f32(v116, v131);
      v133 = (float32x2_t)vbsl_s8((int8x8_t)v132, (int8x8_t)v116, (int8x8_t)v131);
      *(float32x2_t *)v121[1].i8 = v133;
      if (v115 == &v278)
      {
        v115 = &v278;
        v134 = 4;
LABEL_85:
        (*v115)[v134]();
      }
      else if (v115)
      {
        v134 = 5;
        goto LABEL_85;
      }
      v135 = v276;
      if (v276 == &v274)
      {
        v135 = &v274;
        v136 = 4;
LABEL_90:
        (*v135)[v136]();
      }
      else if (v276)
      {
        v136 = 5;
        goto LABEL_90;
      }
      v137 = (__int32 *)v65[45];
      v138 = (__int32 *)v65[46];
      __p = v137;
      v274 = &off_24EC5E2E0;
      v276 = &v274;
      v275 = v65;
      v277 = v138;
      v278 = &off_24EC5E2E0;
      v280 = &v278;
      v279 = v65;
      if (v137 == v138)
      {
        v53.n128_u64[0] = 0;
        v54.i32[0] = 0;
        v147 = &v278;
        v148 = 0;
        v73.i64[0] = 0;
      }
      else
      {
        v289 = v137;
        v290 = &off_24EC5E2E0;
        v292 = &v290;
        v291 = v65;
        v133.i32[0] = *v137;
        v132.i32[0] = v137[1];
        v139 = v65[5];
        v130.i32[0] = v65[6].i32[0];
        v140 = v65[7];
        v73.i32[0] = v65[8].i32[0];
        v141 = v65[9];
        v82.i32[0] = v65[10].i32[0];
        *(float32x2_t *)v80.i8 = v65[11];
        v80.i32[2] = v65[12].i32[0];
        v285 = v137;
        v286 = &off_24EC5E2E0;
        v287 = v65;
        v288 = &v286;
        v289 = v137 + 2;
        v281 = v138;
        v282 = &off_24EC5E2E0;
        v284 = &v282;
        v283 = v65;
        *(float32x2_t *)v142.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v139, v133.f32[0]), v140, v132.f32[0]), (float32x2_t)vdup_n_s32(0x3E3851ECu), v141);
        v143 = vmla_f32(vmul_f32(*(float32x2_t *)v130.i8, v133), v132, *(float32x2_t *)v73.i8);
        v132.i32[0] = 1043878380;
        *(float32x2_t *)&v142.u32[2] = vmla_f32(v143, v132, *(float32x2_t *)v82.i8);
        v144 = (int8x16_t)vaddq_f32(v142, (float32x4_t)v80);
        v53 = (__n128)vextq_s8(v144, v144, 4uLL);
        v73.i32[0] = v144.i32[0];
        v54.i64[0] = v53.n128_u64[0];
        do
        {
          v248 = v73;
          v252 = v54;
          v256 = v144;
          *(__n128 *)v260 = v53;
          if (!v288)
            sub_223198474();
          ((void (*)(float *__return_ptr))(*v288)[6])(&v271);
          v73 = v248;
          v54.i64[1] = v252.i64[1];
          if (v271 < *(float *)v248.i32)
            *(float *)v73.i32 = v271;
          v144 = v256;
          v53.n128_u64[1] = (unint64_t)v260[1];
          if (*(float *)v256.i32 < v271)
            *(float *)v144.i32 = v271;
          v53.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v260[0], v272), (int8x8_t)v272, (int8x8_t)v260[0]);
          *(int8x8_t *)v54.f32 = vbsl_s8((int8x8_t)vcgt_f32(v272, *(float32x2_t *)v252.f32), (int8x8_t)v272, *(int8x8_t *)v252.f32);
          v285 += 2;
        }
        while (v285 != v281);
        v249 = v73.i32[0];
        v253 = (int8x16_t)v54;
        v257 = v144.i64[0];
        v261 = v53.n128_u64[0];
        v145 = v284;
        if (v284 == &v282)
        {
          v145 = &v282;
          v146 = 4;
LABEL_104:
          (*v145)[v146]();
          v53.n128_u64[0] = v261;
        }
        else if (v284)
        {
          v146 = 5;
          goto LABEL_104;
        }
        v149 = v288;
        if (v288 == &v286)
        {
          v149 = &v286;
          v150 = 4;
LABEL_109:
          (*v149)[v150]();
          v53.n128_u64[0] = v261;
        }
        else if (v288)
        {
          v150 = 5;
          goto LABEL_109;
        }
        v151 = v292;
        if (v292 == &v290)
        {
          v151 = &v290;
          v152 = 4;
LABEL_114:
          (*v151)[v152]();
          v53.n128_u64[0] = v261;
        }
        else if (v292)
        {
          v152 = 5;
          goto LABEL_114;
        }
        v147 = v280;
        v73 = v253;
        v54.i64[0] = v257;
        v148 = v249;
      }
      v153.i32[3] = HIDWORD(*(unsigned __int128 *)v121);
      v153.i32[0] = v148;
      *(uint64_t *)((char *)v153.i64 + 4) = v53.n128_u64[0];
      v154 = *(float32x4_t *)v121;
      v154.i32[3] = v148;
      v155 = (int8x16_t)vcgtq_f32(v154, v153);
      v153.i32[3] = v148;
      v156 = vbslq_s8(v155, (int8x16_t)v153, *v121);
      v52.i64[0] = __PAIR64__(v73.u32[0], v54.u32[0]);
      v52.i64[1] = __PAIR64__(v156.u32[3], v73.u32[1]);
      v157 = (float32x4_t)v156;
      v157.i32[3] = v54.i32[0];
      v158 = (int8x16_t)vcgtq_f32(v157, (float32x4_t)v52);
      v52.i32[3] = v54.i32[0];
      v56 = (float32x4_t)vbslq_s8(v158, v52, v156);
      *v121 = (int8x16_t)v56;
      *(int8x8_t *)v56.f32 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v53.n128_u64[0], *v123), (int8x8_t)v53.n128_u64[0], (int8x8_t)*v123);
      *(int8x8_t *)v56.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v73.i8, *(float32x2_t *)v56.f32), *(int8x8_t *)v73.i8, *(int8x8_t *)v56.f32);
      *v123 = *(float32x2_t *)v56.f32;
      if (v147 == &v278)
      {
        v147 = &v278;
        v159 = 4;
        v71 = v122;
LABEL_120:
        (*v147)[v159]();
      }
      else
      {
        v71 = v122;
        if (v147)
        {
          v159 = 5;
          goto LABEL_120;
        }
      }
      v77 = v276;
      if (v276 != &v274)
      {
        if (v276)
        {
          v78 = 5;
LABEL_39:
          (*v77)[v78]();
        }
        v76 = v235;
        goto LABEL_41;
      }
      v77 = &v274;
      v78 = 4;
      goto LABEL_39;
    }
LABEL_41:
    v65 += 58;
    ++v74;
  }
  while (v65 != v76);
  v262 = (float *)v71;
  if (v234 != v238)
  {
LABEL_127:
    v160 = 0;
    v161 = v234;
    while (1)
    {
      v162 = (int32x2_t *)((char *)*v241 + 12 * v160);
      v56.i32[0] = *(_DWORD *)(v244 + 16);
      *(float32x2_t *)v52.i8 = vcvt_f32_s32(vadd_s32(*v162, (int32x2_t)0x400000004));
      *(float *)&v52.i32[2] = (float)(v162[1].i32[0] + 4);
      v164 = v245;
      v163 = (int8x16_t)vmulq_n_f32((float32x4_t)v52, v245.f32[0]);
      v164.i32[0] = v29[1].i32[0];
      v53.n128_u32[0] = v29[3].u32[0];
      v54.i32[0] = v29[5].i32[0];
      *(float32x2_t *)v164.f32 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v163.i8), (float32x2_t)v53.n128_u64[0], *(float32x2_t *)v163.i8, 1);
      v165 = (float32x4_t)vextq_s8(v163, v163, 8uLL);
      *(float32x2_t *)v164.f32 = vmla_f32(*(float32x2_t *)v164.f32, *(float32x2_t *)v165.f32, *(float32x2_t *)v54.f32);
      v165.f32[0] = v29[7].f32[0] + v164.f32[0];
      if ((a14 & 0xFF00) != 0)
        v166 = a14;
      else
        v166 = v165.f32[0] >= v56.f32[0];
      v167 = *v161;
      v168 = *(unsigned __int8 *)(*v161 + 2916);
      v169 = *v161;
      if (v168 != v166)
      {
        sub_223A7EC38(v166, v168, *v161, *(double *)v56.i64, *(double *)v165.i64, *(double *)v164.i64);
        v169 = *v161;
      }
      *(_BYTE *)(v167 + 2916) = v166;
      v170 = *(int32x2_t **)(v169 + 2920);
      v171 = v170[1].i32[0];
      *(float32x2_t *)v164.f32 = vcvt_f32_s32(*v170);
      v164.f32[2] = (float)v171;
      v172 = vmulq_n_f32(v164, v245.f32[0]);
      *(float32x2_t *)v165.f32 = vcvt_f32_s32(vadd_s32(*v170, (int32x2_t)0x800000008));
      v165.f32[2] = (float)(v171 + 8);
      v173 = vmulq_n_f32(v165, v245.f32[0]);
      v174 = vmovn_s32(vcgtq_f32(v172, v173)).u8[0];
      if ((v174 & 1) != 0)
        v175 = v172.f32[0];
      else
        v175 = v173.f32[0];
      if ((v174 & 1) != 0)
        v176 = v173.f32[0];
      else
        v176 = v172.f32[0];
      if (v172.f32[1] <= v173.f32[1])
        v177 = v173.f32[1];
      else
        v177 = v172.f32[1];
      if (v172.f32[1] <= v173.f32[1])
        v178 = v172.f32[1];
      else
        v178 = v173.f32[1];
      if (v172.f32[2] <= v173.f32[2])
        v179 = v173.f32[2];
      else
        v179 = v172.f32[2];
      v181 = *a17;
      v180 = a17[1];
      v275 = 0;
      if (v172.f32[2] <= v173.f32[2])
        v182 = v172.f32[2];
      else
        v182 = v173.f32[2];
      __p = 0;
      v274 = 0;
      v183 = (char *)v180 - (char *)v181;
      if (v183)
      {
        if (v183 < 0)
          sub_22316E078();
        v184 = 0x34F72C234F72C235 * (v183 >> 4);
        v185 = (char *)operator new(v184);
        v186 = (uint64_t (**)())&v185[v184];
        __p = v185;
        v275 = (float32x2_t *)&v185[v184];
        bzero(v185, v184);
        v274 = v186;
      }
      if (v262 != v75)
        break;
LABEL_182:
      v204 = *(unsigned __int8 *)(v244 + 44);
      if (*(_BYTE *)(v244 + 45))
      {
        v205 = sub_223A7A3B0(v239, v240, v243, (uint64_t)v29, a11, v204 != 0, (a12 & 0x15) != 0, (uint64_t)a17, a18, a19, &v263, &__p, v169, (uint64_t)v266);
      }
      else if ((a12 & 0x15) != 0)
      {
        v205 = sub_223A77C0C(v239, v240, v237, v243, (uint64_t)v29, a11, v204 != 0, v169, (uint64_t)v266);
      }
      else
      {
        v205 = sub_223A789F4();
      }
      v209 = v242[v160];
      if (v205)
      {
        v210 = a23 + 1;
        while (1)
        {
          v211 = *v210;
          v212 = v210;
          if (!*v210)
            break;
          while (1)
          {
            v210 = (_QWORD *)v211;
            v213 = *(_DWORD *)(v211 + 28);
            if (v209 < v213)
              break;
            if (v213 >= v209)
              goto LABEL_226;
            v211 = v210[1];
            if (!v211)
            {
              v212 = v210 + 1;
              goto LABEL_194;
            }
          }
        }
LABEL_194:
        v214 = operator new(0x20uLL);
        v214[7] = v209;
        *(_QWORD *)v214 = 0;
        *((_QWORD *)v214 + 1) = 0;
        *((_QWORD *)v214 + 2) = v210;
        *v212 = v214;
        v215 = (uint64_t *)**a23;
        if (v215)
        {
          *a23 = v215;
          v214 = (_DWORD *)*v212;
        }
        sub_2231A9A8C(a23[1], (uint64_t *)v214);
        a23[2] = (uint64_t *)((char *)a23[2] + 1);
      }
      else
      {
        v216 = a22 + 1;
        while (1)
        {
          v217 = *v216;
          v218 = v216;
          if (!*v216)
            break;
          while (1)
          {
            v216 = (_QWORD *)v217;
            v219 = *(_DWORD *)(v217 + 28);
            if (v209 < v219)
              break;
            if (v219 >= v209)
              goto LABEL_206;
            v217 = v216[1];
            if (!v217)
            {
              v218 = v216 + 1;
              goto LABEL_203;
            }
          }
        }
LABEL_203:
        v220 = operator new(0x20uLL);
        v220[7] = v209;
        *(_QWORD *)v220 = 0;
        *((_QWORD *)v220 + 1) = 0;
        *((_QWORD *)v220 + 2) = v216;
        *v218 = v220;
        v221 = (uint64_t *)**a22;
        if (v221)
        {
          *a22 = v221;
          v220 = (_DWORD *)*v218;
        }
        sub_2231A9A8C(a22[1], (uint64_t *)v220);
        a22[2] = (uint64_t *)((char *)a22[2] + 1);
LABEL_206:
        v222 = a12;
        if ((a12 & 1) != 0)
        {
          v223 = v242[v160];
          if (a20[11] <= v223
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a20[7] + 8 * ((a20[10] + v223) / 0x1F)) + 132 * ((a20[10] + v223) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v224 = *(_QWORD *)(a20[30] + (((a20[33] + v223) >> 1) & 0x7FFFFFFFFFFFFFF8))
               + 1016 * ((*((_DWORD *)a20 + 66) + (_DWORD)v223) & 0xF);
          v289 = v266;
          LOBYTE(v290) = 1;
          sub_223A7B22C(a9, v243, v29, (uint64_t)&v289, v224, v245, *(double *)v52.i64, *(double *)v206.i64, v53, *(float32x2_t *)v54.f32, v207, v208);
        }
        if ((a12 & 4) != 0)
        {
          v225 = v242[v160];
          if (a20[11] <= v225
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a20[7] + 8 * ((a20[10] + v225) / 0x1F)) + 132 * ((a20[10] + v225) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v226 = a20[39] + v225;
          v227 = *(_QWORD *)(a20[36] + ((v226 >> 1) & 0x7FFFFFFFFFFFFFF8));
          v228 = v226 & 0xF;
          v229 = v227 + 2928 * v228;
          v230 = *(unsigned __int8 *)(v229 + 2916);
          if (v230 != v166)
            sub_223A7F14C((unsigned __int8 *)v166, v230, v227 + 2928 * v228, v56, *(double *)v52.i64, v206, (float32x4_t)v53, v54, *(float *)&v207, v208.f32[0]);
          *(_BYTE *)(v229 + 2916) = v166;
          v289 = v266;
          LOBYTE(v290) = 1;
          sub_223A7C044(v236, *(double *)v245.i64, (float32x4_t)v52, *(double *)v206.i64, v53.n128_f32[0], v243, (uint64_t)v29, (uint64_t)&v289, v229);
          v222 = a12;
        }
        if ((v222 & 0x10) != 0)
        {
          v231 = v242[v160];
          if (a20[11] <= v231
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a20[7] + 8 * ((a20[10] + v231) / 0x1F)) + 132 * ((a20[10] + v231) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v232 = *(_QWORD *)(a20[42] + (((a20[45] + v231) >> 1) & 0x7FFFFFFFFFFFFFF8))
               + 3512 * ((*((_DWORD *)a20 + 90) + (_DWORD)v231) & 0xF);
          v289 = v266;
          LOBYTE(v290) = 1;
          sub_223A7C3E4(a10, v243, (uint64_t)v29, (uint64_t)&v289, v232);
        }
      }
LABEL_226:
      if (__p)
      {
        v274 = (uint64_t (**)())__p;
        operator delete(__p);
      }
      ++v161;
      ++v160;
      if (v161 == v238)
        goto LABEL_228;
    }
    v187 = 0;
    v188 = v262 + 4;
    while (1)
    {
      v190 = v188 - 4;
      v191 = *(v188 - 4);
      v192 = *(v188 - 1);
      if (v191 != v192)
      {
        v193 = v191 - v192;
        if (v191 < v192)
          v193 = v192 - v191;
        if (v193 > 0.000001)
          goto LABEL_167;
      }
      v194 = *(v188 - 3);
      v195 = *v188;
      if (v194 == *v188)
        goto LABEL_169;
      v196 = v194 - v195;
      v197 = v195 - v194;
      if (v194 >= *v188)
        v197 = v196;
      if (v197 <= 0.000001)
      {
LABEL_169:
        v198 = *(v188 - 2);
        v199 = v188[1];
        v200 = v198 < v199;
        if (v198 == v199)
          goto LABEL_157;
        v201 = v198 - v199;
        v202 = v199 - v198;
        if (!v200)
          v202 = v201;
        if (v202 <= 0.000001 || v191 > v175)
          goto LABEL_157;
      }
      else
      {
LABEL_167:
        if (v191 > v175)
          goto LABEL_157;
        v194 = *(v188 - 3);
      }
      v189 = 0;
      if (v194 > v177 || *(v188 - 2) > v179 || v192 < v176)
        goto LABEL_158;
      if (*v188 >= v178)
      {
        v189 = v188[1] >= v182;
        goto LABEL_158;
      }
LABEL_157:
      v189 = 0;
LABEL_158:
      *((_BYTE *)__p + v187++) = v189;
      v188 += 6;
      if (v190 + 6 == v75)
      {
        v169 = *v161;
        goto LABEL_182;
      }
    }
  }
LABEL_228:
  if (v262)
    operator delete(v262);
  if (v263)
  {
    v264 = v263;
    operator delete(v263);
  }
  if (v242)
    operator delete(v242);
  if (v234)
    operator delete(v234);
  kdebug_trace();
  return kdebug_trace();
}

void sub_223A55680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  void *a64;

  if (__p)
  {
    a64 = __p;
    operator delete(__p);
  }
  if (a44)
    operator delete(a44);
  if (a17)
    operator delete(a17);
  kdebug_trace();
  sub_2231874DC((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_223A557D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,_QWORD *a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;

  if ((_QWORD *)STACK[0x2258] == a28)
  {
    v65 = 4;
  }
  else
  {
    if (!STACK[0x2258])
      goto LABEL_6;
    v65 = 5;
    a28 = (_QWORD *)STACK[0x2258];
  }
  (*(void (**)(void))(*a28 + 8 * v65))();
LABEL_6:
  v66 = *(_QWORD **)(v64 - 208);
  if (v66 == a24)
  {
    v67 = 4;
  }
  else
  {
    if (!v66)
      goto LABEL_11;
    v67 = 5;
    a24 = *(_QWORD **)(v64 - 208);
  }
  (*(void (**)(void))(*a24 + 8 * v67))();
LABEL_11:
  v68 = *(_QWORD **)(v64 - 168);
  if (v68 == a25)
  {
    v69 = 4;
  }
  else
  {
    if (!v68)
      goto LABEL_16;
    v69 = 5;
    a25 = *(_QWORD **)(v64 - 168);
  }
  (*(void (**)(void))(*a25 + 8 * v69))();
LABEL_16:
  sub_2236CE728(&STACK[0x21E8]);
  operator delete(v63);
  if (!a63)
    JUMPOUT(0x223A55788);
  JUMPOUT(0x223A55780);
}

void sub_223A55894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,_QWORD *a25,uint64_t a26,uint64_t a27,_QWORD *a28)
{
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  if ((_QWORD *)STACK[0x2258] == a28)
  {
    v29 = 4;
  }
  else
  {
    if (!STACK[0x2258])
      goto LABEL_6;
    v29 = 5;
    a28 = (_QWORD *)STACK[0x2258];
  }
  (*(void (**)(void))(*a28 + 8 * v29))();
LABEL_6:
  v30 = *(_QWORD **)(v28 - 208);
  if (v30 == a24)
  {
    v31 = 4;
  }
  else
  {
    if (!v30)
      goto LABEL_11;
    v31 = 5;
    a24 = *(_QWORD **)(v28 - 208);
  }
  (*(void (**)(void))(*a24 + 8 * v31))();
LABEL_11:
  v32 = *(_QWORD **)(v28 - 168);
  if (v32 == a25)
  {
    v33 = 4;
  }
  else
  {
    if (!v32)
    {
LABEL_16:
      sub_2236CE728(&STACK[0x21E8]);
      JUMPOUT(0x223A55950);
    }
    v33 = 5;
    a25 = *(_QWORD **)(v28 - 168);
  }
  (*(void (**)(void))(*a25 + 8 * v33))();
  goto LABEL_16;
}

uint64_t sub_223A55978(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  std::__shared_weak_count *v10;
  __int128 v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int128 v18;
  __n128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __n128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __n128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  char v74;
  std::string::size_type v75;
  std::string::size_type size;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t **v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  unsigned int v87;
  BOOL v88;
  uint64_t **v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  std::mutex *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string::size_type v106;
  std::string *v107;
  std::string::size_type v108;
  std::string::size_type v109;
  int v110;
  BOOL v111;
  __n128 *v113;
  std::string *v114;
  size_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  std::mutex *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  std::string::size_type v123;
  std::string *v124;
  std::string::size_type v125;
  std::string::size_type v126;
  int v127;
  __n128 *v130;
  std::string *v131;
  size_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  int v149;
  std::chrono::steady_clock::time_point v150;
  uint64_t v151;
  uint64_t **v152;
  uint64_t v153[2];
  std::__shared_weak_count *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  __int16 v159;
  std::string __p[2];
  uint64_t (**v161)();
  _OWORD v162[4];
  __int16 v163;
  uint64_t (**v164)();
  _OWORD v165[4];
  __int16 v166;
  uint64_t (**v167)();
  _OWORD v168[4];
  __int16 v169;
  uint64_t (**v170)();
  __int128 v171;
  _OWORD v172[2];
  uint64_t (**v173)();
  __int128 v174;
  _OWORD v175[2];
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  _BYTE v181[56];
  __int128 v182;
  __int16 v183;
  char v184;
  _BYTE v185[56];
  __int128 v186;
  __int16 v187;
  uint64_t v188;

  v188 = *MEMORY[0x24BDAC8D0];
  v176 = 1;
  v177 = 0;
  v179 = 0;
  v178 = 0;
  v180 = 728301732;
  kdebug_trace();
  v150.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  qword_255795048 = 0;
  v151 = a1;
  if (*(_BYTE *)(a2 + 56))
  {
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)v185);
    v10 = *(std::__shared_weak_count **)&v185[16];
    *(_QWORD *)v181 = &off_24EC200A8;
    *(_QWORD *)&v181[8] = *(_QWORD *)&v185[8];
    *(_QWORD *)&v181[16] = *(_QWORD *)&v185[16];
    *(_OWORD *)&v181[24] = *(_OWORD *)&v185[24];
    v11 = *(_OWORD *)&v185[34];
    *(_OWORD *)&v181[34] = *(_OWORD *)&v185[34];
    LOBYTE(v182) = 1;
    v12 = *(unsigned __int8 *)(a2 + 120);
    if (*(_BYTE *)(a2 + 120))
    {
      if ((!*(_DWORD *)(a2 + 96) || !*(_DWORD *)(a2 + 100))
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223C3BF78(a2 + 64, (uint64_t)v185);
      v13 = *(std::__shared_weak_count **)&v185[16];
      if (*(_QWORD *)&v185[16])
      {
        v14 = (unint64_t *)(*(_QWORD *)&v185[16] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v10 = *(std::__shared_weak_count **)&v181[16];
    }
    if (!v10)
      goto LABEL_19;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v12)
        goto LABEL_21;
    }
    else
    {
LABEL_19:
      if (v12)
        goto LABEL_21;
    }
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricIntegrator.cpp", 274, (uint64_t)"frame_data.Depth() && frame_data.Confidence()", 45, (uint64_t)"Input frame data should have valid depth and confidence frame!", 62, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_21:
  if (*(_BYTE *)(a2 + 56))
  {
    if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)v181);
    v11 = *(_OWORD *)&v181[8];
    *(_OWORD *)v185 = *(_OWORD *)&v181[24];
    *(_OWORD *)&v185[10] = *(_OWORD *)&v181[34];
  }
  v173 = &off_24EC200A8;
  v174 = v11;
  v175[0] = *(_OWORD *)v185;
  v18 = *(_OWORD *)&v185[10];
  *(_OWORD *)((char *)v175 + 10) = *(_OWORD *)&v185[10];
  if (*(_BYTE *)(a2 + 120))
  {
    if ((!*(_DWORD *)(a2 + 96) || !*(_DWORD *)(a2 + 100))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2 + 64, (uint64_t)v181);
    v18 = *(_OWORD *)&v181[8];
    *(_OWORD *)v185 = *(_OWORD *)&v181[24];
    *(_OWORD *)&v185[10] = *(_OWORD *)&v181[34];
  }
  v170 = &off_24EC200A8;
  v171 = v18;
  v172[0] = *(_OWORD *)v185;
  *(_OWORD *)((char *)v172 + 10) = *(_OWORD *)&v185[10];
  v167 = &off_24EC204C0;
  sub_223212780((uint64_t)v168);
  v19 = sub_223C41A24(a2, (uint64_t)v181);
  if (v184)
  {
    v20 = *(std::__shared_weak_count **)&v181[16];
    if (*(_QWORD *)&v181[16])
    {
      v21 = (unint64_t *)(*(_QWORD *)&v181[16] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v19);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    sub_223C41A24(a2, (uint64_t)v181);
    v23 = *(_OWORD *)&v181[8];
    *(_QWORD *)&v181[16] = 0;
    *(_QWORD *)&v181[8] = 0;
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v168[0] + 1);
    v168[0] = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v168[1] = *(_OWORD *)&v181[24];
    v168[2] = *(_OWORD *)&v181[40];
    v168[3] = v182;
    v169 = v183;
    if (v184)
    {
      v27 = *(std::__shared_weak_count **)&v181[16];
      if (*(_QWORD *)&v181[16])
      {
        v28 = (unint64_t *)(*(_QWORD *)&v181[16] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  v164 = &off_24EC25150;
  sub_223210C10((uint64_t)v165);
  v152 = a5;
  if (*(_BYTE *)(a2 + 440))
  {
    if ((!*(_DWORD *)(a2 + 416) || !*(_DWORD *)(a2 + 420))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v30 = sub_223C3E368(a2 + 360, (uint64_t)v181);
    v31 = *(std::__shared_weak_count **)&v181[16];
    if (!*(_QWORD *)&v181[16])
      goto LABEL_262;
    v32 = (unint64_t *)(*(_QWORD *)&v181[16] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v31->__on_zero_shared)(v31, v30);
      std::__shared_weak_count::__release_weak(v31);
      if (*(_BYTE *)(a2 + 440))
      {
LABEL_57:
        a5 = v152;
        if ((!*(_DWORD *)(a2 + 416) || !*(_DWORD *)(a2 + 420))
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3E368(a2 + 360, (uint64_t)v185);
        v34 = *(_QWORD *)&v185[8];
        v35 = *(std::__shared_weak_count **)&v185[16];
        *(_QWORD *)v181 = &off_24EC21DF8;
        *(_QWORD *)&v181[8] = *(_QWORD *)&v185[8];
        *(_QWORD *)&v181[16] = *(_QWORD *)&v185[16];
        *(_OWORD *)&v181[24] = *(_OWORD *)&v185[24];
        *(_OWORD *)&v181[40] = *(_OWORD *)&v185[40];
        v182 = v186;
        v183 = v187;
        v184 = 1;
        v153[0] = (uint64_t)&off_24EC1F8C8;
        if (*(_QWORD *)&v185[16])
          goto LABEL_61;
        goto LABEL_69;
      }
    }
    else
    {
LABEL_262:
      if (*(_BYTE *)(a2 + 440))
        goto LABEL_57;
    }
    v181[0] = 0;
    v184 = 0;
    v34 = *(_QWORD *)&v181[8];
    v35 = *(std::__shared_weak_count **)&v181[16];
    a5 = v152;
    v153[0] = (uint64_t)&off_24EC1F8C8;
    if (*(_QWORD *)&v181[16])
    {
LABEL_61:
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      v38 = *(_QWORD *)&v181[36];
      v39 = *(_DWORD *)&v181[52];
      v40 = *(_QWORD *)&v181[24];
      v41 = v183;
      do
        v42 = __ldxr(v36);
      while (__stxr(v42 + 1, v36));
      do
        v43 = __ldxr(v36);
      while (__stxr(v43 + 1, v36));
      goto LABEL_70;
    }
LABEL_69:
    v38 = *(_QWORD *)&v181[36];
    v39 = *(_DWORD *)&v181[52];
    v40 = *(_QWORD *)&v181[24];
    v41 = v183;
LABEL_70:
    v153[1] = v34;
    v154 = v35;
    v155 = v38;
    v156 = 4 * v39;
    v157 = v40;
    v158 = 32;
    v159 = v41;
    if (v35)
    {
      v44 = (unint64_t *)&v35->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      do
        v46 = __ldaxr(v44);
      while (__stlxr(v46 - 1, v44));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v185[8] = 0;
    v185[24] = 0;
    v185[32] = 0;
    v185[48] = 0;
    LOBYTE(v186) = 1;
    DWORD2(v186) = 0;
    sub_22432B21C((uint64_t)v153, 0x1Fu, (uint64_t)__p);
    v161 = &off_24EC25150;
    sub_223A5BF34((uint64_t *)v162, (uint64_t)__p);
    v47 = v162[0];
    v162[0] = 0uLL;
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v165[0] + 1);
    v165[0] = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v165[1] = v162[1];
    v165[2] = v162[2];
    v165[3] = v162[3];
    v166 = v163;
    v51 = (std::__shared_weak_count *)*((_QWORD *)&v162[0] + 1);
    if (*((_QWORD *)&v162[0] + 1))
    {
      v52 = (unint64_t *)(*((_QWORD *)&v162[0] + 1) + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
    if (__p[0].__r_.__value_.__r.__words[2])
    {
      v55 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = v154;
    if (v154)
    {
      v58 = (unint64_t *)&v154->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (v184)
    {
      v60 = *(std::__shared_weak_count **)&v181[16];
      if (*(_QWORD *)&v181[16])
      {
        v61 = (unint64_t *)(*(_QWORD *)&v181[16] + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
    }
  }
  *(_QWORD *)v185 = &off_24EC204C0;
  sub_223212780((uint64_t)&v185[8]);
  v63 = sub_223C41BC8(a2, (uint64_t)v181);
  if (v184)
  {
    v64 = *(std::__shared_weak_count **)&v181[16];
    if (*(_QWORD *)&v181[16])
    {
      v65 = (unint64_t *)(*(_QWORD *)&v181[16] + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v64->__on_zero_shared)(v64, v63);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    sub_223C41BC8(a2, (uint64_t)v181);
    v67 = *(_OWORD *)&v181[8];
    *(_QWORD *)&v181[16] = 0;
    *(_QWORD *)&v181[8] = 0;
    v68 = *(std::__shared_weak_count **)&v185[16];
    *(_OWORD *)&v185[8] = v67;
    if (v68)
    {
      v69 = (unint64_t *)&v68->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    *(_OWORD *)&v185[24] = *(_OWORD *)&v181[24];
    *(_OWORD *)&v185[40] = *(_OWORD *)&v181[40];
    v186 = v182;
    v187 = v183;
    if (v184)
    {
      v71 = *(std::__shared_weak_count **)&v181[16];
      if (*(_QWORD *)&v181[16])
      {
        v72 = (unint64_t *)(*(_QWORD *)&v181[16] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
    }
  }
  v162[0] = 0uLL;
  v161 = (uint64_t (**)())v162;
  *(_QWORD *)v181 = &off_24EC21230;
  memset(&v181[8], 0, 42);
  v74 = *(_BYTE *)(v151 + 28);
  memset(__p, 0, 24);
  sub_223A53F0C(v151, a3, a2 + 1240, a2 + 1336, (uint64_t)&v173, (uint64_t)&v170, (uint64_t)v181, (uint64_t)&v164, (uint64_t)&v167, (uint64_t)v185, 0, v74, v149, 0, 0, 0, (float32x2_t **)__p, 0, 0,
    a4,
    0,
    a5,
    (uint64_t **)&v161);
  v75 = __p[0].__r_.__value_.__r.__words[0];
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    size = __p[0].__r_.__value_.__l.__size_;
    v77 = (void *)__p[0].__r_.__value_.__r.__words[0];
    if (__p[0].__r_.__value_.__l.__size_ != __p[0].__r_.__value_.__r.__words[0])
    {
      do
      {
        size -= 464;
        sub_22324A5A0(size);
      }
      while (size != v75);
      v77 = (void *)__p[0].__r_.__value_.__r.__words[0];
    }
    __p[0].__r_.__value_.__l.__size_ = v75;
    operator delete(v77);
  }
  v78 = *(std::__shared_weak_count **)&v181[16];
  if (!*(_QWORD *)&v181[16])
    goto LABEL_130;
  v79 = (unint64_t *)(*(_QWORD *)&v181[16] + 8);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (!v80)
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
    v81 = (uint64_t *)v161;
    if (v161 == (uint64_t (**)())v162)
      goto LABEL_164;
  }
  else
  {
LABEL_130:
    v81 = (uint64_t *)v161;
    if (v161 == (uint64_t (**)())v162)
      goto LABEL_164;
  }
  v82 = v152 + 1;
  do
  {
    v83 = *((unsigned int *)v81 + 7);
    v84 = *v82;
    if (*v82)
    {
      v85 = (uint64_t *)(v152 + 1);
      v86 = *v82;
      do
      {
        v87 = *((_DWORD *)v86 + 7);
        v88 = v87 >= v83;
        if (v87 >= v83)
          v89 = (uint64_t **)v86;
        else
          v89 = (uint64_t **)(v86 + 1);
        if (v88)
          v85 = v86;
        v86 = *v89;
      }
      while (*v89);
      if (v85 != (uint64_t *)v82 && v83 >= *((_DWORD *)v85 + 7))
      {
        v90 = (uint64_t *)v85[1];
        v91 = v85;
        if (v90)
        {
          do
          {
            v92 = v90;
            v90 = (uint64_t *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            v92 = (uint64_t *)v91[2];
            v111 = *v92 == (_QWORD)v91;
            v91 = v92;
          }
          while (!v111);
        }
        if (*v152 == v85)
          *v152 = v92;
        v152[2] = (uint64_t *)((char *)v152[2] - 1);
        sub_2231AFE60(v84, v85);
        operator delete(v85);
      }
    }
    if (a4[11] <= v83
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
    {
LABEL_250:
      abort();
    }
    v93 = a4[10] + v83;
    v94 = *(_QWORD *)(a4[7] + 8 * (v93 / 0x1F));
    v95 = v93 % 0x1F;
    if (*(_BYTE *)(v94 + 132 * v95 + 20))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_250;
      }
      v96 = a4[10] + v83;
      v95 = v96 % 0x1F;
      v94 = *(_QWORD *)(a4[7] + 8 * (v96 / 0x1F));
    }
    sub_2235196C0((uint64_t)a4, v94 + 132 * v95, 0);
    v97 = (uint64_t *)v81[1];
    if (v97)
    {
      do
      {
        v98 = v97;
        v97 = (uint64_t *)*v97;
      }
      while (v97);
    }
    else
    {
      do
      {
        v98 = (uint64_t *)v81[2];
        v111 = *v98 == (_QWORD)v81;
        v81 = v98;
      }
      while (!v111);
    }
    v81 = v98;
  }
  while (v98 != (uint64_t *)v162);
LABEL_164:
  *(_QWORD *)v181 = "cv3d.recon.";
  *(_QWORD *)&v181[8] = 11;
  *(_QWORD *)&v181[16] = "Stats.Volumetric.Time";
  *(_QWORD *)&v181[24] = 21;
  sub_2231A9820((uint64_t)v181, (uint64_t)&v181[32], 0, 0, __p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v99 = sub_2241471F8();
    v100 = v99[2];
    if (!v100)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v100 = v99[2];
    }
    v101 = *(_QWORD *)(v100 + 64);
    v102 = (std::mutex *)(v101 + 32);
    std::mutex::lock((std::mutex *)(v101 + 32));
    v104 = *(_QWORD *)(v101 + 96);
    v103 = *(_QWORD *)(v101 + 104);
    std::mutex::unlock(v102);
    if (v104 != v103)
    {
      sub_2241471F8();
      v105 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v105 + 24))(v105))
      {
        memset(v181, 0, 32);
        *(_DWORD *)&v181[32] = 728325608;
        kdebug_trace();
        *(double *)v153 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v150.__d_.__rep_) / 1000000.0;
        sub_223A56E64((double *)&qword_255788F20, v105, (double *)v153, "integration (ms)");
        kdebug_trace();
      }
    }
  }
  memset(v181, 0, 32);
  *(_DWORD *)&v181[32] = 728325624;
  kdebug_trace();
  v106 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v106 = __p[0].__r_.__value_.__l.__size_;
  if (v106 >= 0x11)
  {
    v107 = __p;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v107 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v108 = v107->__r_.__value_.__r.__words[0];
    v109 = v107->__r_.__value_.__l.__size_;
    v110 = v107->__r_.__value_.__s.__data_[16];
    v111 = v108 == 0x6365722E64337663 && v109 == 0x73746174532E6E6FLL;
    if (v111 && v110 == 46)
    {
      v113 = sub_223187510();
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = __p;
      else
        v114 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v115 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      else
        v115 = __p[0].__r_.__value_.__l.__size_;
      *(double *)v153 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v150.__d_.__rep_) / 1000000.0;
      sub_2231AA374((uint64_t *)v113, v114, v115, v153, (uint64_t)"integration (ms)", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  *(_QWORD *)v181 = "cv3d.recon.";
  *(_QWORD *)&v181[8] = 11;
  *(_QWORD *)&v181[16] = "Stats.Volumetric.Blocks";
  *(_QWORD *)&v181[24] = 23;
  sub_2231A9820((uint64_t)v181, (uint64_t)&v181[32], 0, 0, __p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v116 = sub_2241471F8();
    v117 = v116[2];
    if (!v117)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v117 = v116[2];
    }
    v118 = *(_QWORD *)(v117 + 64);
    v119 = (std::mutex *)(v118 + 32);
    std::mutex::lock((std::mutex *)(v118 + 32));
    v121 = *(_QWORD *)(v118 + 96);
    v120 = *(_QWORD *)(v118 + 104);
    std::mutex::unlock(v119);
    if (v121 != v120)
    {
      sub_2241471F8();
      v122 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v122 + 24))(v122))
      {
        memset(v181, 0, 32);
        *(_DWORD *)&v181[32] = 728325608;
        kdebug_trace();
        v153[0] = *((_QWORD *)&v162[0] + 1);
        sub_223995E3C((double *)&qword_255788F20, v122, v153, "empty blocks erased");
        kdebug_trace();
      }
    }
  }
  memset(v181, 0, 32);
  *(_DWORD *)&v181[32] = 728325624;
  kdebug_trace();
  v123 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v123 = __p[0].__r_.__value_.__l.__size_;
  if (v123 >= 0x11)
  {
    v124 = __p;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v124 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v125 = v124->__r_.__value_.__r.__words[0];
    v126 = v124->__r_.__value_.__l.__size_;
    v127 = v124->__r_.__value_.__s.__data_[16];
    if (v125 == 0x6365722E64337663 && v126 == 0x73746174532E6E6FLL && v127 == 46)
    {
      v130 = sub_223187510();
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = __p;
      else
        v131 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      else
        v132 = __p[0].__r_.__value_.__l.__size_;
      v153[0] = *((_QWORD *)&v162[0] + 1);
      sub_22318760C((uint64_t *)v130, v131, v132, v153, (uint64_t)"empty blocks erased", 19);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  sub_223198030((uint64_t)&v161, *(_QWORD **)&v162[0]);
  v133 = *(std::__shared_weak_count **)&v185[16];
  if (*(_QWORD *)&v185[16])
  {
    v134 = (unint64_t *)(*(_QWORD *)&v185[16] + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  v136 = (std::__shared_weak_count *)*((_QWORD *)&v165[0] + 1);
  if (*((_QWORD *)&v165[0] + 1))
  {
    v137 = (unint64_t *)(*((_QWORD *)&v165[0] + 1) + 8);
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v139 = (std::__shared_weak_count *)*((_QWORD *)&v168[0] + 1);
  if (*((_QWORD *)&v168[0] + 1))
  {
    v140 = (unint64_t *)(*((_QWORD *)&v168[0] + 1) + 8);
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
  if (*((_QWORD *)&v171 + 1))
  {
    v143 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
    do
      v144 = __ldaxr(v143);
    while (__stlxr(v144 - 1, v143));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  v145 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
  if (*((_QWORD *)&v174 + 1))
  {
    v146 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
    do
      v147 = __ldaxr(v146);
    while (__stlxr(v147 - 1, v146));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  return kdebug_trace();
}

void sub_223A56CDC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223A56E64(double *a1, uint64_t a2, double *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2231AA49C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223A56F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A56FA0(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, char a7, _QWORD *a8, double a9, double a10, double a11, double a12, double a13, double a14, float32x4_t a15, int a16, uint64_t **a17, uint64_t **a18)
{
  char v18;
  unsigned __int8 *v19;
  float32x4_t *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  __int128 v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int16 v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned int v105;
  unsigned int v106;
  _QWORD *v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  int v111;
  BOOL v114;
  int v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  __int16 v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  size_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  __int16 v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  unsigned int v139;
  unsigned int v140;
  char v141;
  unsigned __int8 v142;
  uint64_t v143;
  char *v144;
  char *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  unsigned __int8 *v180;
  int32x2_t *v181;
  unsigned __int8 *v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned __int8 *v187;
  unsigned __int8 *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  float32x4_t *v193;
  uint64_t v194;
  float32x2_t v195;
  float32x2_t v196;
  float32x2_t v197;
  int8x16_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x2_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  __n128 v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unsigned __int8 v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  size_t v224;
  uint64_t (***p_dst)();
  unint64_t v226;
  const void **v227;
  const void *v228;
  uint64_t v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  const char *v233;
  size_t v234;
  unsigned __int8 v235;
  const char *v236;
  size_t v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE *v241;
  uint64_t v242;
  uint64_t v243;
  NSObject *v244;
  size_t v245;
  void *v246;
  _QWORD *v247;
  size_t v248;
  size_t v249;
  _BYTE *v250;
  void *v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  _QWORD *v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  const char *v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  unsigned __int8 **v303;
  int v304;
  _BOOL4 v305;
  int64_t v306;
  void **v307;
  __int128 *v308;
  void *v309;
  _BYTE *v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  unsigned __int8 **v317;
  _BOOL4 v318;
  uint64_t v319;
  __n128 v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  __int16 v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  unint64_t v336;
  __int128 v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  BOOL v353;
  void **v354;
  void *v355;
  __int128 *v356;
  char *v357;
  uint64_t v358;
  _BYTE *v359;
  __int128 v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  BOOL v370;
  void **v371;
  void *v372;
  __int128 *v373;
  char *v374;
  uint64_t v375;
  _BYTE *v376;
  __int128 v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  unsigned __int8 **v387;
  BOOL v388;
  int v389;
  _BOOL4 v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  int v413;
  _QWORD *v414;
  unsigned __int8 *v417;
  char v421;
  unint64_t v422;
  const char *v423;
  uint64_t v424;
  int v425;
  unsigned __int8 *v426;
  unint64_t v427;
  unsigned __int8 *v430;
  uint64_t v431;
  _BYTE v432[56];
  unsigned __int32 v433;
  int v434;
  void *v435;
  __int128 v436;
  _BYTE v437[48];
  unint64_t v438;
  char v439;
  void *v440;
  char v441;
  unint64_t v442;
  int v443;
  uint64_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  void *__p;
  char *v450;
  uint64_t v451;
  uint64_t (**v452)();
  __int128 v453;
  _BYTE v454[26];
  _BYTE v455[72];
  __int16 v456;
  _BYTE v457[72];
  __int16 v458;
  uint64_t (**__dst)();
  size_t v460;
  int64_t v461;
  _BYTE v462[26];
  __int128 v463;
  __int128 v464;
  __int128 v465;
  int v466;
  __int16 v467;
  _BYTE v468[24];
  _BYTE v469[48];
  __int16 v470;
  uint64_t v471;

  v471 = *MEMORY[0x24BDAC8D0];
  v18 = *(_BYTE *)(a1 + 28);
  v20 = (float32x4_t *)*a2;
  v19 = a2[1];
  v421 = v18;
  if (*a2 != v19)
  {
    v22 = (unsigned __int8 *)(a3 + 8);
    v21 = *(unsigned __int8 **)(a3 + 8);
    if (v21)
    {
      v430 = (unsigned __int8 *)(a5 + 8);
      v414 = a2 + 236;
      v426 = (unsigned __int8 *)(a4 + 8);
LABEL_5:
      v23 = v22;
      do
      {
        v24 = v21[25];
        v25 = v20->u8[0];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[26];
        v25 = v20->u8[1];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[27];
        v25 = v20->u8[2];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[28];
        v25 = v20->u8[3];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[29];
        v25 = v20->u8[4];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[30];
        v25 = v20->u8[5];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[31];
        v25 = v20->u8[6];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[32];
        v25 = v20->u8[7];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[33];
        v25 = v20->u8[8];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[34];
        v25 = v20->u8[9];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[35];
        v25 = v20->u8[10];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[36];
        v25 = v20->u8[11];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[37];
        v25 = v20->u8[12];
        if (v24 != v25)
          goto LABEL_23;
        v24 = v21[38];
        v25 = v20->u8[13];
        if (v24 == v25
          && (v24 = v21[39], v25 = v20->u8[14], v24 == v25)
          && (v24 = v21[40], v25 = v20->u8[15], v24 == v25))
        {
          v23 = v21;
        }
        else
        {
LABEL_23:
          if (v24 < v25)
            v21 += 8;
          else
            v23 = v21;
        }
        v21 = *(unsigned __int8 **)v21;
      }
      while (v21);
      if (v23 == v22 || (char)sub_22319835C((unsigned __int8 *)v20, v23 + 25) < 0)
        goto LABEL_296;
      v26 = *(unsigned __int8 **)v430;
      if (!*(_QWORD *)v430)
        goto LABEL_817;
      v27 = v430;
      do
      {
        v28 = v26[32];
        v29 = v20->u8[0];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[33];
        v29 = v20->u8[1];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[34];
        v29 = v20->u8[2];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[35];
        v29 = v20->u8[3];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[36];
        v29 = v20->u8[4];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[37];
        v29 = v20->u8[5];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[38];
        v29 = v20->u8[6];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[39];
        v29 = v20->u8[7];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[40];
        v29 = v20->u8[8];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[41];
        v29 = v20->u8[9];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[42];
        v29 = v20->u8[10];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[43];
        v29 = v20->u8[11];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[44];
        v29 = v20->u8[12];
        if (v28 != v29)
          goto LABEL_48;
        v28 = v26[45];
        v29 = v20->u8[13];
        if (v28 == v29
          && (v28 = v26[46], v29 = v20->u8[14], v28 == v29)
          && (v28 = v26[47], v29 = v20->u8[15], v28 == v29))
        {
          v27 = v26;
        }
        else
        {
LABEL_48:
          if (v28 < v29)
            v26 += 8;
          else
            v27 = v26;
        }
        v26 = *(unsigned __int8 **)v26;
      }
      while (v26);
      if (v27 == v430 || (char)sub_22319835C((unsigned __int8 *)v20, v27 + 32) < 0)
      {
LABEL_817:
        v27 = v430;
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricIntegrator.cpp", 361, (uint64_t)"iter != kf_block_indices.end()", 30, (uint64_t)"Keyframe not found", 18, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      v424 = sub_2231D0224(v20[1].i64[0]);
      v30.i64[0] = v20[11].i64[0];
      v30.i32[2] = v20[11].i32[2];
      v31.i64[0] = v20[12].i64[0];
      v31.i32[2] = v20[12].i32[2];
      v32.i32[0] = v20[13].i32[2];
      v33.i64[0] = v20[14].i64[0];
      v33.i32[2] = v20[14].i32[2];
      v34.i64[0] = vzip1q_s32(v30, v31).u64[0];
      v35 = (int8x16_t)vnegq_f32(v33);
      v36 = (int8x16_t)vtrn2q_s32(v30, v31);
      v36.i32[2] = HIDWORD(v20[13].i64[0]);
      v37 = (float32x4_t)vzip2q_s32(v30, v31);
      *(float32x2_t *)v38.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v34.f32, *(float *)v35.i32), *(float32x2_t *)v36.i8, *(float32x2_t *)v33.f32, 1), *(float32x2_t *)v37.f32, v33, 2);
      v37.i32[2] = v32.i32[0];
      v38.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v20[13].f32, *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20[13].f32, 1), *(float32x2_t *)v33.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), *(float32x2_t *)v32.f32);
      v34.i64[1] = v20[13].i64[0];
      v32.i32[3] = 0;
      v32.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v36, 0).i32[3];
      *(uint64_t *)((char *)v32.i64 + 4) = vextq_s8(v36, v38, 4uLL).u64[0];
      v37.i64[1] = vdupq_laneq_s32((int32x4_t)v37, 2).u32[0];
      v38.i32[3] = 1.0;
      v39 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)&v20[7])), v32, *(float32x2_t *)v20[7].f32, 1), v37, v20[7], 2), (float32x4_t)v38, v20[7], 3);
      v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)&v20[8])), v32, *(float32x2_t *)v20[8].f32, 1), v37, v20[8], 2), (float32x4_t)v38, v20[8], 3);
      v41 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)&v20[9])), v32, *(float32x2_t *)v20[9].f32, 1), v37, v20[9], 2), (float32x4_t)v38, v20[9], 3);
      v42 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(*(_OWORD *)&v20[10])), v32, *(float32x2_t *)v20[10].f32, 1), v37, v20[10], 2), (float32x4_t)v38, v20[10], 3);
      v43 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)&v20[2])), v40, *(float32x2_t *)v20[2].f32, 1), v41, v20[2], 2), v42, v20[2], 3);
      v44 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)&v20[3])), v40, *(float32x2_t *)v20[3].f32, 1), v41, v20[3], 2), v42, v20[3], 3);
      v45 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)&v20[4])), v40, *(float32x2_t *)v20[4].f32, 1), v41, v20[4], 2), v42, v20[4], 3);
      v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)&v20[5])), v40, *(float32x2_t *)v20[5].f32, 1), v41, v20[5], 2), v42, v20[5], 3);
      v40.i64[0] = vzip1q_s32(v43, v44).u64[0];
      v40.i64[1] = v45.u32[0];
      v47 = (int8x16_t)vtrn2q_s32(v43, v44);
      v47.i32[2] = v45.i32[1];
      v48 = (int8x16_t)vzip2q_s32(v43, v44);
      v49 = (int32x4_t)v48;
      v49.i32[2] = v45.i32[2];
      HIDWORD(v50) = 0;
      LODWORD(v50) = vdupq_lane_s32(*(int32x2_t *)&v47, 0).i32[3];
      *(_QWORD *)((char *)&v50 + 4) = vextq_s8(v47, v48, 4uLL).u64[0];
      v49.i64[1] = vdupq_laneq_s32(v49, 2).u32[0];
      *(_OWORD *)&v432[16] = v50;
      *(int32x4_t *)&v432[32] = v49;
      *(float32x4_t *)v432 = v40;
      *(float32x2_t *)&v432[48] = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v40.f32, COERCE_FLOAT(v46.i32[0] ^ 0x80000000)), *(float32x2_t *)v47.i8, (float32x2_t)(v46.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v48.i8, COERCE_FLOAT(v46.i32[2] ^ 0x80000000));
      v433 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.i8, (float32x2_t)(v46.i64[0] ^ 0x8000000080000000)), (float32x2_t)vdup_lane_s32((int32x2_t)(v46.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v45.i8, 1), (float32x2_t)(v46.i64[1] ^ 0xFFFFFFFF80000000), (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)).u32[0];
      v434 = 1065353216;
      sub_2231CC34C(v20[1].i64[0], (uint64_t)&v445);
      sub_2231CC3F0(v20[1].i64[0], (uint64_t)&__dst);
      v435 = &off_24EC25150;
      sub_223210C10((uint64_t)&v436);
      if ((v18 & 4) != 0)
      {
        sub_2231CD8A8(v20[1].i64[0], (uint64_t)v468);
        v51 = *(_QWORD *)&v468[8];
        v52 = *(std::__shared_weak_count **)&v468[16];
        if (*(_QWORD *)&v468[16])
        {
          v53 = (unint64_t *)(*(_QWORD *)&v468[16] + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
          v55 = v470;
          do
            v56 = __ldxr(v53);
          while (__stxr(v56 + 1, v53));
          v57 = *(_QWORD *)v469;
          *(_OWORD *)v457 = *(_OWORD *)&v469[8];
          *(_OWORD *)&v457[16] = *(_OWORD *)&v469[24];
          *(_QWORD *)&v457[32] = *(_QWORD *)&v469[40];
          do
            v58 = __ldxr(v53);
          while (__stxr(v58 + 1, v53));
          do
            v59 = __ldaxr(v53);
          while (__stlxr(v59 - 1, v53));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
          do
            v60 = __ldaxr(v53);
          while (__stlxr(v60 - 1, v53));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        else
        {
          v55 = v470;
          v57 = *(_QWORD *)v469;
          *(_OWORD *)v457 = *(_OWORD *)&v469[8];
          *(_OWORD *)&v457[16] = *(_OWORD *)&v469[24];
          *(_QWORD *)&v457[32] = *(_QWORD *)&v469[40];
        }
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
        *(_QWORD *)&v436 = v51;
        *((_QWORD *)&v436 + 1) = v52;
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(p_shared_owners);
          while (__stlxr(v63 - 1, p_shared_owners));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        *(_QWORD *)v437 = v57;
        *(_OWORD *)&v437[8] = *(_OWORD *)v457;
        *(_OWORD *)&v437[24] = *(_OWORD *)&v457[16];
        *(_QWORD *)&v437[40] = *(_QWORD *)&v457[32];
        LOWORD(v438) = v55;
        v64 = *(std::__shared_weak_count **)&v468[16];
        v18 = v421;
        if (*(_QWORD *)&v468[16])
        {
          v65 = (unint64_t *)(*(_QWORD *)&v468[16] + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      *(_QWORD *)v468 = &off_24EC204C0;
      sub_223212780((uint64_t)&v468[8]);
      if ((v18 & 0x10) != 0)
      {
        sub_2231CDCA4(v20[1].i64[0], (uint64_t)v457);
        v67 = *(_QWORD *)&v457[8];
        v68 = *(std::__shared_weak_count **)&v457[16];
        if (*(_QWORD *)&v457[16])
        {
          v69 = (unint64_t *)(*(_QWORD *)&v457[16] + 8);
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
          v71 = v458;
          do
            v72 = __ldxr(v69);
          while (__stxr(v72 + 1, v69));
          v73 = *(_QWORD *)&v457[24];
          *(_OWORD *)v455 = *(_OWORD *)&v457[32];
          *(_OWORD *)&v455[16] = *(_OWORD *)&v457[48];
          *(_QWORD *)&v455[32] = *(_QWORD *)&v457[64];
          do
            v74 = __ldxr(v69);
          while (__stxr(v74 + 1, v69));
          do
            v75 = __ldaxr(v69);
          while (__stlxr(v75 - 1, v69));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
          do
            v76 = __ldaxr(v69);
          while (__stlxr(v76 - 1, v69));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        else
        {
          v71 = v458;
          v73 = *(_QWORD *)&v457[24];
          *(_OWORD *)v455 = *(_OWORD *)&v457[32];
          *(_OWORD *)&v455[16] = *(_OWORD *)&v457[48];
          *(_QWORD *)&v455[32] = *(_QWORD *)&v457[64];
        }
        v77 = *(std::__shared_weak_count **)&v468[16];
        *(_QWORD *)&v468[8] = v67;
        *(_QWORD *)&v468[16] = v68;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        *(_QWORD *)v469 = v73;
        *(_OWORD *)&v469[8] = *(_OWORD *)v455;
        *(_OWORD *)&v469[24] = *(_OWORD *)&v455[16];
        *(_QWORD *)&v469[40] = *(_QWORD *)&v455[32];
        v470 = v71;
        v80 = *(std::__shared_weak_count **)&v457[16];
        v18 = v421;
        if (*(_QWORD *)&v457[16])
        {
          v81 = (unint64_t *)(*(_QWORD *)&v457[16] + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      *(_QWORD *)v457 = &off_24EC204C0;
      sub_223212780((uint64_t)&v457[8]);
      if ((v18 & 1) == 0)
        goto LABEL_129;
      sub_2231CDAE0(v20[1].i64[0], (uint64_t)v455);
      v83 = *(_QWORD *)&v455[8];
      v84 = *(std::__shared_weak_count **)&v455[16];
      if (*(_QWORD *)&v455[16])
      {
        v85 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
        do
          v86 = __ldxr(v85);
        while (__stxr(v86 + 1, v85));
        v87 = v456;
        do
          v88 = __ldxr(v85);
        while (__stxr(v88 + 1, v85));
        v89 = *(_QWORD *)&v455[24];
        v463 = *(_OWORD *)&v455[32];
        v464 = *(_OWORD *)&v455[48];
        *(_QWORD *)&v465 = *(_QWORD *)&v455[64];
        do
          v90 = __ldxr(v85);
        while (__stxr(v90 + 1, v85));
        do
          v91 = __ldaxr(v85);
        while (__stlxr(v91 - 1, v85));
        if (!v91)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
        do
          v92 = __ldaxr(v85);
        while (__stlxr(v92 - 1, v85));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      else
      {
        v87 = v456;
        v89 = *(_QWORD *)&v455[24];
        v463 = *(_OWORD *)&v455[32];
        v464 = *(_OWORD *)&v455[48];
        *(_QWORD *)&v465 = *(_QWORD *)&v455[64];
      }
      v93 = *(std::__shared_weak_count **)&v457[16];
      *(_QWORD *)&v457[8] = v83;
      *(_QWORD *)&v457[16] = v84;
      if (v93)
      {
        v94 = (unint64_t *)&v93->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      *(_QWORD *)&v457[24] = v89;
      *(_OWORD *)&v457[32] = v463;
      *(_OWORD *)&v457[48] = v464;
      *(_QWORD *)&v457[64] = v465;
      v458 = v87;
      v96 = *(std::__shared_weak_count **)&v455[16];
      v18 = v421;
      if (!*(_QWORD *)&v455[16])
        goto LABEL_129;
      v97 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
        v99 = a2[248];
        v100 = a2[249];
        v101 = v100 - v99;
        if (v100 == v99)
          goto LABEL_158;
      }
      else
      {
LABEL_129:
        v99 = a2[248];
        v100 = a2[249];
        v101 = v100 - v99;
        if (v100 == v99)
          goto LABEL_158;
      }
      v102 = 0xCCCCCCCCCCCCCCCDLL * (v101 >> 3);
      do
      {
        v103 = v102 >> 1;
        v104 = &v99[40 * (v102 >> 1)];
        v105 = *v104;
        v106 = v20->u8[0];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[1];
        v106 = v20->u8[1];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[2];
        v106 = v20->u8[2];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[3];
        v106 = v20->u8[3];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[4];
        v106 = v20->u8[4];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[5];
        v106 = v20->u8[5];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[6];
        v106 = v20->u8[6];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[7];
        v106 = v20->u8[7];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[8];
        v106 = v20->u8[8];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[9];
        v106 = v20->u8[9];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[10];
        v106 = v20->u8[10];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[11];
        v106 = v20->u8[11];
        if (v105 != v106)
          goto LABEL_148;
        v105 = v104[12];
        v106 = v20->u8[12];
        if (v105 != v106
          || (v105 = v104[13], v106 = v20->u8[13], v105 != v106)
          || (v105 = v104[14], v106 = v20->u8[14], v105 != v106)
          || (v105 = v104[15], v106 = v20->u8[15], v105 != v106))
        {
LABEL_148:
          if (v105 < v106)
          {
            v103 = v102 + ~v103;
            v99 = v104 + 40;
          }
        }
        v102 = v103;
      }
      while (v103);
      if (v100 != v99 && ((char)sub_22319835C(v99, (unsigned __int8 *)v20) & 0x80000000) == 0)
      {
        v107 = 0;
        if ((char)sub_22319835C((unsigned __int8 *)v20, v99) < 0 || a2[249] == v99)
          goto LABEL_159;
        if (sub_223340F28(v414, (uint64_t)v20))
        {
          v108 = sub_223340F28(v414, (uint64_t)v20);
          if (!v108)
            sub_223198218("unordered_map::at: key not found");
          v107 = v108 + 4;
LABEL_159:
          v109 = *(unsigned __int8 *)(a1 + 46);
          v110 = sub_2231D04FC(v20[1].i64[0]);
          v111 = *(_DWORD *)(v110 + 4);
          if (*(_DWORD *)v110 == 1 && v111 != 0 && v111 == 1)
          {
            if (v109)
              v114 = *(_BYTE *)(*(_QWORD *)(v110 + 40) + 164) == 2;
            else
              v114 = 1;
          }
          else
          {
            v114 = v109 == 0;
          }
          v115 = !v114;
          *(_QWORD *)v455 = &off_24EC200A8;
          v116 = v445.i64[1];
          v117 = (std::__shared_weak_count *)v446.i64[0];
          if (v446.i64[0])
          {
            v118 = (unint64_t *)(v446.i64[0] + 8);
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
            v120 = v448.i16[0];
            do
              v121 = __ldxr(v118);
            while (__stxr(v121 + 1, v118));
            v122 = v446.i64[1];
            *(float32x4_t *)&v455[32] = v447;
            do
              v123 = __ldxr(v118);
            while (__stxr(v123 + 1, v118));
            *(_QWORD *)&v455[8] = v116;
            *(_QWORD *)&v455[16] = v117;
            *(_QWORD *)&v455[24] = v122;
            *(_WORD *)&v455[48] = v120;
            do
              v124 = __ldaxr(v118);
            while (__stlxr(v124 - 1, v118));
            if (!v124)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v117);
            }
            do
              v125 = __ldaxr(v118);
            while (__stlxr(v125 - 1, v118));
            if (v125)
            {
              *(_QWORD *)&v463 = &off_24EC200A8;
              v126 = v460;
              v127 = (std::__shared_weak_count *)v461;
              if (v461)
                goto LABEL_187;
LABEL_201:
              *((_QWORD *)&v463 + 1) = v126;
              *(_QWORD *)&v464 = 0;
              *((_QWORD *)&v464 + 1) = *(_QWORD *)v462;
              v465 = *(_OWORD *)&v462[8];
              LOWORD(v466) = *(_WORD *)&v462[24];
              goto LABEL_202;
            }
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
            *(_QWORD *)&v463 = &off_24EC200A8;
            v126 = v460;
            v127 = (std::__shared_weak_count *)v461;
            if (!v461)
              goto LABEL_201;
          }
          else
          {
            *(_QWORD *)&v455[8] = v445.i64[1];
            *(_OWORD *)&v455[16] = __PAIR128__(v446.u64[1], 0);
            *(float32x4_t *)&v455[32] = v447;
            *(_WORD *)&v455[48] = v448.i16[0];
            *(_QWORD *)&v463 = &off_24EC200A8;
            v126 = v460;
            v127 = (std::__shared_weak_count *)v461;
            if (!v461)
              goto LABEL_201;
          }
LABEL_187:
          v128 = (unint64_t *)&v127->__shared_owners_;
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
          v130 = *(_WORD *)&v462[24];
          do
            v131 = __ldxr(v128);
          while (__stxr(v131 + 1, v128));
          v132 = *(_QWORD *)v462;
          v465 = *(_OWORD *)&v462[8];
          do
            v133 = __ldxr(v128);
          while (__stxr(v133 + 1, v128));
          *((_QWORD *)&v463 + 1) = v126;
          *(_QWORD *)&v464 = v127;
          *((_QWORD *)&v464 + 1) = v132;
          LOWORD(v466) = v130;
          do
            v134 = __ldaxr(v128);
          while (__stlxr(v134 - 1, v128));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
          do
            v135 = __ldaxr(v128);
          while (__stlxr(v135 - 1, v128));
          if (!v135)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
LABEL_202:
          v452 = &off_24EC21230;
          v453 = 0u;
          memset(v454, 0, sizeof(v454));
          v136 = v426;
          v137 = *(unsigned __int8 **)v426;
          if (!*(_QWORD *)v426)
            goto LABEL_227;
          v138 = v426;
          do
          {
            v139 = v137[25];
            v140 = v20->u8[0];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[26];
            v140 = v20->u8[1];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[27];
            v140 = v20->u8[2];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[28];
            v140 = v20->u8[3];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[29];
            v140 = v20->u8[4];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[30];
            v140 = v20->u8[5];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[31];
            v140 = v20->u8[6];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[32];
            v140 = v20->u8[7];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[33];
            v140 = v20->u8[8];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[34];
            v140 = v20->u8[9];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[35];
            v140 = v20->u8[10];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[36];
            v140 = v20->u8[11];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[37];
            v140 = v20->u8[12];
            if (v139 != v140)
              goto LABEL_221;
            v139 = v137[38];
            v140 = v20->u8[13];
            if (v139 == v140
              && (v139 = v137[39], v140 = v20->u8[14], v139 == v140)
              && (v139 = v137[40], v140 = v20->u8[15], v139 == v140))
            {
              v138 = v137;
            }
            else
            {
LABEL_221:
              if (v139 < v140)
                v137 += 8;
              else
                v138 = v137;
            }
            v137 = *(unsigned __int8 **)v137;
          }
          while (v137);
          v136 = v426;
          if (v138 == v426 || (v141 = sub_22319835C((unsigned __int8 *)v20, v138 + 25), v136 = v426, v141 < 0))
LABEL_227:
            v138 = v136;
          v142 = v138 != v136;
          v450 = 0;
          __p = 0;
          v451 = 0;
          if (v115)
            v143 = (uint64_t)v107;
          else
            v143 = 0;
          v422 = v422 & 0xFFFFFFFFFFFF0000 | a6;
          sub_223A53F0C(a1, (uint64_t)(v27 + 48), v424, (uint64_t)v432, (uint64_t)v455, (uint64_t)&v463, (uint64_t)&v452, (uint64_t)&v435, (uint64_t)v457, (uint64_t)v468, v142, v18, v413, v422, SHIDWORD(v422), a7, (float32x2_t **)&__p, v143, 0,
            a8,
            a16,
            a17,
            a18);
          v144 = (char *)__p;
          if (__p)
          {
            v145 = v450;
            v146 = __p;
            if (v450 != __p)
            {
              do
              {
                if (*(v145 - 16))
                {
                  v147 = *((_QWORD *)v145 - 5);
                  if (v147)
                  {
                    v148 = *((_QWORD *)v145 - 4);
                    v149 = (void *)*((_QWORD *)v145 - 5);
                    if (v148 != v147)
                    {
                      v150 = *((_QWORD *)v145 - 4);
                      do
                      {
                        v152 = *(void **)(v150 - 24);
                        v150 -= 24;
                        v151 = v152;
                        if (v152)
                        {
                          *(_QWORD *)(v148 - 16) = v151;
                          operator delete(v151);
                        }
                        v148 = v150;
                      }
                      while (v150 != v147);
                      v149 = (void *)*((_QWORD *)v145 - 5);
                    }
                    *((_QWORD *)v145 - 4) = v147;
                    operator delete(v149);
                  }
                }
                if (*(v145 - 48))
                {
                  v153 = (void *)*((_QWORD *)v145 - 9);
                  if (v153)
                  {
                    *((_QWORD *)v145 - 8) = v153;
                    operator delete(v153);
                  }
                }
                if (*(v145 - 80))
                {
                  v154 = (void *)*((_QWORD *)v145 - 13);
                  if (v154)
                  {
                    *((_QWORD *)v145 - 12) = v154;
                    operator delete(v154);
                  }
                }
                v155 = (void *)*((_QWORD *)v145 - 23);
                if (v155)
                {
                  *((_QWORD *)v145 - 22) = v155;
                  operator delete(v155);
                }
                v145 -= 464;
              }
              while (v145 != v144);
              v146 = __p;
            }
            v450 = v144;
            operator delete(v146);
          }
          v156 = (std::__shared_weak_count *)*((_QWORD *)&v453 + 1);
          if (!*((_QWORD *)&v453 + 1))
            goto LABEL_258;
          v157 = (unint64_t *)(*((_QWORD *)&v453 + 1) + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
            v159 = (std::__shared_weak_count *)v464;
            if (!(_QWORD)v464)
              goto LABEL_266;
          }
          else
          {
LABEL_258:
            v159 = (std::__shared_weak_count *)v464;
            if (!(_QWORD)v464)
              goto LABEL_266;
          }
          v160 = (unint64_t *)&v159->__shared_owners_;
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
LABEL_266:
          v162 = *(std::__shared_weak_count **)&v455[16];
          if (!*(_QWORD *)&v455[16])
            goto LABEL_270;
          v163 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
          do
            v164 = __ldaxr(v163);
          while (__stlxr(v164 - 1, v163));
          if (!v164)
          {
            ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
            std::__shared_weak_count::__release_weak(v162);
            v165 = *(std::__shared_weak_count **)&v457[16];
            if (!*(_QWORD *)&v457[16])
              goto LABEL_276;
          }
          else
          {
LABEL_270:
            v165 = *(std::__shared_weak_count **)&v457[16];
            if (!*(_QWORD *)&v457[16])
              goto LABEL_276;
          }
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
LABEL_276:
          v168 = *(std::__shared_weak_count **)&v468[16];
          if (!*(_QWORD *)&v468[16])
            goto LABEL_280;
          v169 = (unint64_t *)(*(_QWORD *)&v468[16] + 8);
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
            v171 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
            if (!*((_QWORD *)&v436 + 1))
              goto LABEL_286;
          }
          else
          {
LABEL_280:
            v171 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
            if (!*((_QWORD *)&v436 + 1))
              goto LABEL_286;
          }
          v172 = (unint64_t *)&v171->__shared_owners_;
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
LABEL_286:
          v174 = (std::__shared_weak_count *)v461;
          if (!v461)
            goto LABEL_290;
          v175 = (unint64_t *)(v461 + 8);
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
            v177 = (std::__shared_weak_count *)v446.i64[0];
            if (!v446.i64[0])
              goto LABEL_296;
          }
          else
          {
LABEL_290:
            v177 = (std::__shared_weak_count *)v446.i64[0];
            if (!v446.i64[0])
              goto LABEL_296;
          }
          v178 = (unint64_t *)&v177->__shared_owners_;
          do
            v179 = __ldaxr(v178);
          while (__stlxr(v179 - 1, v178));
          if (!v179)
          {
            ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
            std::__shared_weak_count::__release_weak(v177);
          }
LABEL_296:
          while (1)
          {
            v20 = (float32x4_t *)((char *)v20 + 248);
            if (v20 == (float32x4_t *)v19)
              goto LABEL_297;
            v21 = *(unsigned __int8 **)v22;
            if (*(_QWORD *)v22)
              goto LABEL_5;
          }
        }
      }
LABEL_158:
      v107 = 0;
      goto LABEL_159;
    }
  }
LABEL_297:
  v180 = *(unsigned __int8 **)(a3 + 8);
  if (!v180)
    return;
  v181 = (int32x2_t *)(a2 + 205);
  v182 = (unsigned __int8 *)(a3 + 8);
  do
  {
    v183 = v180[25];
    if (v183 == 55)
    {
      v183 = v180[26];
      if (v183 == 201)
      {
        v183 = v180[27];
        if (v183 == 112)
        {
          v183 = v180[28];
          if (v183 == 44)
          {
            v183 = v180[29];
            if (v183 == 78)
            {
              v183 = v180[30];
              if (v183 == 99)
              {
                v183 = v180[31];
                if (v183 == 15)
                {
                  v183 = v180[32];
                  if (v183 == 88)
                  {
                    v183 = v180[33];
                    if (v183 == 200)
                    {
                      v183 = v180[34];
                      if (v183 == 73)
                      {
                        v183 = v180[35];
                        if (v183 == 164)
                        {
                          v183 = v180[36];
                          if (v183 == 192)
                          {
                            v183 = v180[37];
                            if (v183 == 37)
                            {
                              v183 = v180[38];
                              if (v183 == 101)
                              {
                                v183 = v180[39];
                                if (v183 == 239)
                                {
                                  v183 = v180[40];
                                  if (v183 == 14)
                                  {
                                    v182 = v180;
                                    goto LABEL_335;
                                  }
                                  v184 = 14;
                                }
                                else
                                {
                                  v184 = 239;
                                }
                              }
                              else
                              {
                                v184 = 101;
                              }
                            }
                            else
                            {
                              v184 = 37;
                            }
                          }
                          else
                          {
                            v184 = 192;
                          }
                        }
                        else
                        {
                          v184 = 164;
                        }
                      }
                      else
                      {
                        v184 = 73;
                      }
                    }
                    else
                    {
                      v184 = 200;
                    }
                  }
                  else
                  {
                    v184 = 88;
                  }
                }
                else
                {
                  v184 = 15;
                }
              }
              else
              {
                v184 = 99;
              }
            }
            else
            {
              v184 = 78;
            }
          }
          else
          {
            v184 = 44;
          }
        }
        else
        {
          v184 = 112;
        }
      }
      else
      {
        v184 = 201;
      }
    }
    else
    {
      v184 = 55;
    }
    if (v183 < v184)
      v180 += 8;
    else
      v182 = v180;
LABEL_335:
    v180 = *(unsigned __int8 **)v180;
  }
  while (v180);
  if (v182 == (unsigned __int8 *)(a3 + 8))
    return;
  v185 = v182[25];
  if (v185 != 55)
  {
    v186 = 55;
    goto LABEL_370;
  }
  v185 = v182[26];
  if (v185 != 201)
  {
    v186 = 201;
    goto LABEL_370;
  }
  v185 = v182[27];
  if (v185 != 112)
  {
    v186 = 112;
    goto LABEL_370;
  }
  v185 = v182[28];
  if (v185 != 44)
  {
    v186 = 44;
    goto LABEL_370;
  }
  v185 = v182[29];
  if (v185 != 78)
  {
    v186 = 78;
    goto LABEL_370;
  }
  v185 = v182[30];
  if (v185 != 99)
  {
    v186 = 99;
    goto LABEL_370;
  }
  v185 = v182[31];
  if (v185 != 15)
  {
    v186 = 15;
    goto LABEL_370;
  }
  v185 = v182[32];
  if (v185 != 88)
  {
    v186 = 88;
    goto LABEL_370;
  }
  v185 = v182[33];
  if (v185 != 200)
  {
    v186 = 200;
    goto LABEL_370;
  }
  v185 = v182[34];
  if (v185 != 73)
  {
    v186 = 73;
    goto LABEL_370;
  }
  v185 = v182[35];
  if (v185 != 164)
  {
    v186 = 164;
    goto LABEL_370;
  }
  v185 = v182[36];
  if (v185 != 192)
  {
    v186 = 192;
    goto LABEL_370;
  }
  v185 = v182[37];
  if (v185 != 37)
  {
    v186 = 37;
    goto LABEL_370;
  }
  v185 = v182[38];
  if (v185 != 101)
  {
    v186 = 101;
LABEL_369:
    v18 = v421;
    goto LABEL_370;
  }
  v185 = v182[39];
  if (v185 != 239)
  {
    v186 = 239;
    goto LABEL_369;
  }
  v185 = v182[40];
  v18 = v421;
  if (v185 != 14)
  {
    v186 = 14;
LABEL_370:
    if (v186 < v185)
      return;
  }
  v187 = *(unsigned __int8 **)(a5 + 8);
  v417 = (unsigned __int8 *)(a5 + 8);
  if (!v187)
    goto LABEL_447;
  v188 = v417;
  while (2)
  {
    v189 = v187[32];
    if (v189 == 55)
    {
      v189 = v187[33];
      if (v189 == 201)
      {
        v189 = v187[34];
        if (v189 == 112)
        {
          v189 = v187[35];
          if (v189 == 44)
          {
            v189 = v187[36];
            if (v189 == 78)
            {
              v189 = v187[37];
              if (v189 == 99)
              {
                v189 = v187[38];
                if (v189 == 15)
                {
                  v189 = v187[39];
                  if (v189 == 88)
                  {
                    v189 = v187[40];
                    if (v189 == 200)
                    {
                      v189 = v187[41];
                      if (v189 == 73)
                      {
                        v189 = v187[42];
                        if (v189 == 164)
                        {
                          v189 = v187[43];
                          if (v189 == 192)
                          {
                            v189 = v187[44];
                            if (v189 == 37)
                            {
                              v189 = v187[45];
                              if (v189 == 101)
                              {
                                v189 = v187[46];
                                if (v189 == 239)
                                {
                                  v189 = v187[47];
                                  if (v189 == 14)
                                  {
                                    v188 = v187;
                                    goto LABEL_409;
                                  }
                                  v190 = 14;
                                }
                                else
                                {
                                  v190 = 239;
                                }
                              }
                              else
                              {
                                v190 = 101;
                              }
                            }
                            else
                            {
                              v190 = 37;
                            }
                          }
                          else
                          {
                            v190 = 192;
                          }
                        }
                        else
                        {
                          v190 = 164;
                        }
                      }
                      else
                      {
                        v190 = 73;
                      }
                    }
                    else
                    {
                      v190 = 200;
                    }
                  }
                  else
                  {
                    v190 = 88;
                  }
                }
                else
                {
                  v190 = 15;
                }
              }
              else
              {
                v190 = 99;
              }
            }
            else
            {
              v190 = 78;
            }
          }
          else
          {
            v190 = 44;
          }
        }
        else
        {
          v190 = 112;
        }
      }
      else
      {
        v190 = 201;
      }
    }
    else
    {
      v190 = 55;
    }
    if (v189 < v190)
      v187 += 8;
    else
      v188 = v187;
LABEL_409:
    v187 = *(unsigned __int8 **)v187;
    if (v187)
      continue;
    break;
  }
  if (v188 == v417)
    goto LABEL_447;
  v191 = v188[32];
  if (v191 == 55)
  {
    v191 = v188[33];
    if (v191 == 201)
    {
      v191 = v188[34];
      if (v191 == 112)
      {
        v191 = v188[35];
        if (v191 == 44)
        {
          v191 = v188[36];
          if (v191 == 78)
          {
            v191 = v188[37];
            if (v191 == 99)
            {
              v191 = v188[38];
              if (v191 == 15)
              {
                v191 = v188[39];
                if (v191 == 88)
                {
                  v191 = v188[40];
                  if (v191 == 200)
                  {
                    v191 = v188[41];
                    if (v191 == 73)
                    {
                      v191 = v188[42];
                      if (v191 == 164)
                      {
                        v191 = v188[43];
                        if (v191 == 192)
                        {
                          v191 = v188[44];
                          if (v191 == 37)
                          {
                            v191 = v188[45];
                            if (v191 == 101)
                            {
                              v191 = v188[46];
                              if (v191 == 239)
                              {
                                v191 = v188[47];
                                if (v191 == 14)
                                {
                                  v18 = v421;
                                  goto LABEL_448;
                                }
                                v192 = 14;
                              }
                              else
                              {
                                v192 = 239;
                              }
                            }
                            else
                            {
                              v192 = 101;
                            }
                          }
                          else
                          {
                            v192 = 37;
                          }
                        }
                        else
                        {
                          v192 = 192;
                        }
                      }
                      else
                      {
                        v192 = 164;
                      }
                      v18 = v421;
                    }
                    else
                    {
                      v192 = 73;
                    }
                  }
                  else
                  {
                    v192 = 200;
                  }
                }
                else
                {
                  v192 = 88;
                }
              }
              else
              {
                v192 = 15;
              }
            }
            else
            {
              v192 = 99;
            }
          }
          else
          {
            v192 = 78;
          }
        }
        else
        {
          v192 = 44;
        }
      }
      else
      {
        v192 = 112;
      }
    }
    else
    {
      v192 = 201;
    }
  }
  else
  {
    v192 = 55;
  }
  if (v192 < v191)
  {
LABEL_447:
    v188 = v417;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricIntegrator.cpp", 403, (uint64_t)"iter_block_idx != kf_block_indices.end()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
LABEL_448:
  v193 = (float32x4_t *)a2;
  if (!*((_BYTE *)a2 + 1848))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricIntegrator.cpp", 404, (uint64_t)"keyframe_list.input_frame.has_value()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v193 = (float32x4_t *)a2;
    if (!*((_BYTE *)a2 + 1848))
      sub_22324A974();
  }
  v194 = (uint64_t)&v193[1].i64[1];
  if (v193[110].i8[8])
  {
    v195.i32[0] = *((_DWORD *)a2 + 412);
    v196 = (float32x2_t)a2[207];
    v197 = (float32x2_t)a2[209];
    LODWORD(a12) = *((_DWORD *)a2 + 420);
    a15.i64[0] = (uint64_t)a2[211];
    a15.i32[2] = *((_DWORD *)a2 + 424);
    v198 = (int8x16_t)vnegq_f32(a15);
    v199 = v193[85];
    v200 = vmulq_n_f32(v199, v195.f32[0]);
    v195.i32[1] = *((_DWORD *)a2 + 416);
    v201 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v181, (int32x2_t)v196), *(float *)v198.i32), (float32x2_t)vzip2_s32(*v181, (int32x2_t)v196), *(float32x2_t *)a15.f32, 1), v195, a15, 2);
    v195.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v197, *(float32x2_t *)v198.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v197, 1), *(float32x2_t *)a15.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL), *(float32x2_t *)&a12).u32[0];
    v202 = v193[86];
    v203 = v193[87];
    v204 = v193[88];
    v205 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v199, COERCE_FLOAT(*v181)), v202, v196.f32[0]), v203, v197.f32[0]), (float32x4_t)0, v204);
    v206 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v199, (float32x2_t)*v181, 1), v202, v196, 1), v203, v197, 1), (float32x4_t)0, v204);
    v207 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v200, v202, v195.f32[1]), v203, *(float *)&a12), (float32x4_t)0, v204);
    v208 = vaddq_f32(v204, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v199, v201.f32[0]), v202, v201, 1), v203, v195.f32[0]));
    v209 = *(float32x4_t *)(a2 + 219);
    v210 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v205, COERCE_FLOAT(*(_OWORD *)(a2 + 215))), v206, (float32x2_t)a2[215], 1), v207, *(float32x4_t *)(a2 + 215), 2), v208, *(float32x4_t *)(a2 + 215), 3);
    v211 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v205, COERCE_FLOAT(*(_OWORD *)(a2 + 217))), v206, (float32x2_t)a2[217], 1), v207, *(float32x4_t *)(a2 + 217), 2), v208, *(float32x4_t *)(a2 + 217), 3);
    v445 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v205, COERCE_FLOAT(*(_OWORD *)(a2 + 213))), v206, (float32x2_t)a2[213], 1), v207, *(float32x4_t *)(a2 + 213), 2), v208, *(float32x4_t *)(a2 + 213), 3);
    v446 = v210;
    v447 = v211;
    v448 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v205, v209.f32[0]), v206, *(float32x2_t *)v209.f32, 1), v207, v209, 2), v208, v209, 3);
  }
  else
  {
    v212 = v193[86];
    v445 = v193[85];
    v446 = v212;
    v213 = v193[88];
    v447 = v193[87];
    v448 = v213;
  }
  v214 = sub_223C41BC8((uint64_t)&v193[1].i64[1], (uint64_t)&v435);
  if (!v439)
  {
    v218 = atomic_load((unsigned __int8 *)&qword_2540CCCB8);
    if ((v218 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCCB8))
    {
      sub_22455F53C(v468);
      sub_223174DE4(&v435, "cv3d.recon.vlm");
      sub_2232300E0((uint64_t **)v468, (uint64_t)&v435, &qword_2540CCCB0);
      if (SHIBYTE(v436) < 0)
        operator delete(v435);
      __cxa_guard_release(&qword_2540CCCB8);
      v18 = v421;
    }
    v452 = (uint64_t (**)())qword_2540CCCB0;
    if (**(int **)(qword_2540CCCB0 + 56) > 2)
      goto LABEL_611;
    v219 = *(unsigned __int8 *)(qword_2540CCCB0 + 72);
    v220 = sub_22322F254(qword_2540CCCB0, "OSLogSurrogateAppender", 1, 0);
    v221 = v220;
    if (!v219 && !v220)
      goto LABEL_611;
    sub_223195210((uint64_t)&v435);
    *(_DWORD *)v469 = 0;
    sub_2232CFAFC(v468, "Received no materials in mode ");
    sub_223A5C2B0((uint64_t)v468, (unsigned __int8 *)a2 + 1952);
    if (*(_DWORD *)v469 == -1)
      sub_22316DD70();
    *(_QWORD *)v455 = v432;
    ((void (*)(_BYTE *__return_ptr, _BYTE *, _BYTE *))off_24EC5E380[*(unsigned int *)v469])(v457, v455, v468);
    if (*(_DWORD *)v469 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24EC5E350[*(unsigned int *)v469])(v455, v468);
    if (v457[23] >= 0)
      v222 = v457;
    else
      v222 = *(_BYTE **)v457;
    if (v457[23] >= 0)
      v223 = v457[23];
    else
      v223 = *(_QWORD *)&v457[8];
    sub_2231813E8((_QWORD *)&v436 + 1, (uint64_t)v222, v223);
    if ((v457[23] & 0x80000000) != 0)
      operator delete(*(void **)v457);
    v425 = v219;
    v427 = v221;
    if ((v443 & 0x10) != 0)
    {
      v226 = v442;
      if (v442 < v438)
      {
        v442 = v438;
        v226 = v438;
      }
      v227 = (const void **)&v437[40];
    }
    else
    {
      if ((v443 & 8) == 0)
      {
        v224 = 0;
        HIBYTE(v461) = 0;
        p_dst = &__dst;
        goto LABEL_490;
      }
      v227 = (const void **)&v437[16];
      v226 = *(_QWORD *)&v437[32];
    }
    v228 = *v227;
    v224 = v226 - (_QWORD)*v227;
    if (v224 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    if (v224 >= 0x17)
    {
      v229 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v224 | 7) != 0x17)
        v229 = v224 | 7;
      v230 = v229 + 1;
      p_dst = (uint64_t (***)())operator new(v229 + 1);
      v461 = v230 | 0x8000000000000000;
      __dst = (uint64_t (**)())p_dst;
      v460 = v224;
    }
    else
    {
      HIBYTE(v461) = v226 - *(_BYTE *)v227;
      p_dst = &__dst;
      if (!v224)
      {
LABEL_490:
        *((_BYTE *)p_dst + v224) = 0;
        *(_QWORD *)v457 = &v452;
        *(std::chrono::steady_clock::time_point *)&v457[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v457[16] = std::chrono::system_clock::now();
        *(_DWORD *)&v457[24] = 2;
        *(_QWORD *)&v457[32] = "unknown file";
        *(_DWORD *)&v457[40] = 420;
        *(_QWORD *)&v457[64] = 0;
        *(_QWORD *)&v457[48] = "unknown function";
        *(_QWORD *)&v457[56] = 0;
        if (v461 >= 0)
          v231 = (const char *)&__dst;
        else
          v231 = (const char *)__dst;
        v232 = **(_QWORD **)v457;
        v233 = (const char *)(**(_QWORD **)v457 + 16);
        v423 = v233;
        if (*(char *)(**(_QWORD **)v457 + 39) < 0)
        {
          v233 = *(const char **)(v232 + 16);
          v234 = *(_QWORD *)(v232 + 24);
        }
        else
        {
          v234 = *(unsigned __int8 *)(**(_QWORD **)v457 + 39);
        }
        v431 = v194;
        v235 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v235 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
        {
          sub_224568628((uint64_t)v468);
          sub_223199C58("com.apple.cv3d", (unint64_t)v468, byte_255788F40);
          if (v469[0] && (v468[23] & 0x80000000) != 0)
            operator delete(*(void **)v468);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
          __cxa_guard_release(&qword_255788F58);
        }
        if (byte_255788F40[23] >= 0)
          v236 = byte_255788F40;
        else
          v236 = *(const char **)byte_255788F40;
        if (byte_255788F40[23] >= 0)
          v237 = byte_255788F40[23];
        else
          v237 = *(_QWORD *)&byte_255788F40[8];
        *(_QWORD *)v468 = os_log_create(v236, v233);
        v238 = &v468[8];
        if (v237 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v237 >= 0x17)
        {
          v239 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v237 | 7) != 0x17)
            v239 = v237 | 7;
          v240 = v239 + 1;
          v238 = operator new(v239 + 1);
          *(_QWORD *)&v468[16] = v237;
          *(_QWORD *)v469 = v240 | 0x8000000000000000;
          *(_QWORD *)&v468[8] = v238;
        }
        else
        {
          v469[7] = v237;
          if (!v237)
          {
LABEL_511:
            v238[v237] = 0;
            v469[8] = 1;
            v241 = &v469[16];
            if (v234 > 0x7FFFFFFFFFFFFFF7)
              sub_22316DBC0();
            v18 = v421;
            v194 = v431;
            if (v234 >= 0x17)
            {
              v242 = (v234 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v234 | 7) != 0x17)
                v242 = v234 | 7;
              v243 = v242 + 1;
              v241 = operator new(v242 + 1);
              *(_QWORD *)&v469[24] = v234;
              *(_QWORD *)&v469[32] = v243 | 0x8000000000000000;
              *(_QWORD *)&v469[16] = v241;
            }
            else
            {
              v469[39] = v234;
              if (!v234)
              {
LABEL_519:
                v241[v234] = 0;
                v469[40] = 1;
                v244 = *(NSObject **)v468;
                if ((v469[39] & 0x80000000) != 0)
                  operator delete(*(void **)&v469[16]);
                if (v469[8] && (v469[7] & 0x80000000) != 0)
                  operator delete(*(void **)&v468[8]);
                if (*(_QWORD *)v468)
                  os_release(*(void **)v468);
                if (!v427 || !*(_QWORD *)(v427 + 24))
                {
                  os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v468 = 136315138;
                  *(_QWORD *)&v468[4] = v231;
                  v251 = (void *)_os_log_send_and_compose_impl();
                  v252 = v425;
                  if (v251)
                    free(v251);
                  goto LABEL_597;
                }
                v245 = _os_log_pack_size();
                v246 = operator new(v245, (std::align_val_t)8uLL);
                v247 = (_QWORD *)operator new();
                *v247 = &off_24EC1F7F0;
                v247[1] = 0;
                v247[2] = 0;
                v247[3] = v246;
                *(_QWORD *)v455 = v246;
                *(_QWORD *)&v455[8] = v246;
                *(_QWORD *)&v455[32] = 0;
                *(_OWORD *)&v455[16] = (unint64_t)v247;
                v248 = strlen(v231);
                if (v248 > 0x7FFFFFFFFFFFFFF7)
                  sub_22316DBC0();
                v249 = v248;
                if (v248 >= 0x17)
                {
                  v253 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v248 | 7) != 0x17)
                    v253 = v248 | 7;
                  v254 = v253 + 1;
                  v250 = operator new(v253 + 1);
                  *(_QWORD *)&v432[8] = v249;
                  *(_QWORD *)&v432[16] = v254 | 0x8000000000000000;
                  *(_QWORD *)v432 = v250;
                }
                else
                {
                  v432[23] = v248;
                  v250 = v432;
                  if (!v248)
                  {
LABEL_538:
                    v250[v249] = 0;
                    *(_QWORD *)&v463 = *(_QWORD *)&v432[8];
                    v255 = *(_QWORD *)v432;
                    *(_QWORD *)((char *)&v463 + 7) = *(_QWORD *)&v432[15];
                    v256 = v432[23];
                    v257 = operator new(0x38uLL);
                    v257[1] = 0;
                    v257[2] = 0;
                    v257[3] = off_24EC1FA48;
                    *v257 = &off_24EC1F9F8;
                    v258 = v463;
                    v257[4] = v255;
                    v257[5] = v258;
                    *(_QWORD *)((char *)v257 + 47) = *(_QWORD *)((char *)&v463 + 7);
                    *((_BYTE *)v257 + 55) = v256;
                    *(_QWORD *)&v463 = 0;
                    *(_QWORD *)((char *)&v463 + 7) = 0;
                    v259 = *(std::__shared_weak_count **)&v455[32];
                    *(_QWORD *)&v455[24] = v257 + 3;
                    *(_QWORD *)&v455[32] = v257;
                    v194 = v431;
                    if (v259)
                    {
                      v260 = (unint64_t *)&v259->__shared_owners_;
                      do
                        v261 = __ldaxr(v260);
                      while (__stlxr(v261 - 1, v260));
                      if (!v261)
                      {
                        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                        std::__shared_weak_count::__release_weak(v259);
                      }
                    }
                    *(_OWORD *)v468 = *(_OWORD *)v455;
                    v262 = *(_QWORD *)&v455[24];
                    *(_QWORD *)&v468[16] = *(_QWORD *)&v455[16];
                    if (*(_QWORD *)&v455[16])
                    {
                      v263 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
                      do
                        v264 = __ldxr(v263);
                      while (__stxr(v264 + 1, v263));
                    }
                    v265 = *(std::__shared_weak_count **)&v455[32];
                    *(_QWORD *)v469 = v262;
                    *(_QWORD *)&v469[8] = *(_QWORD *)&v455[32];
                    if (*(_QWORD *)&v455[32])
                    {
                      v266 = (unint64_t *)(*(_QWORD *)&v455[32] + 8);
                      do
                        v267 = __ldxr(v266);
                      while (__stxr(v267 + 1, v266));
                      *(_QWORD *)&v469[16] = v262;
                      do
                        v268 = __ldaxr(v266);
                      while (__stlxr(v268 - 1, v266));
                      if (!v268)
                      {
                        ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                        std::__shared_weak_count::__release_weak(v265);
                      }
                    }
                    else
                    {
                      *(_QWORD *)&v469[16] = v262;
                    }
                    v269 = *(std::__shared_weak_count **)&v455[16];
                    if (*(_QWORD *)&v455[16])
                    {
                      v270 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
                      do
                        v271 = __ldaxr(v270);
                      while (__stlxr(v271 - 1, v270));
                      if (!v271)
                      {
                        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                        std::__shared_weak_count::__release_weak(v269);
                      }
                    }
                    v272 = *(_QWORD *)v468;
                    if (*(char *)(*(_QWORD *)&v469[16] + 31) >= 0)
                      v273 = *(_QWORD *)&v469[16] + 8;
                    else
                      v273 = *(_QWORD *)(*(_QWORD *)&v469[16] + 8);
                    v274 = _os_log_pack_fill();
                    *(_DWORD *)v274 = 136315138;
                    *(_QWORD *)(v274 + 4) = v273;
                    v275 = operator new();
                    v276 = *(unsigned __int8 *)(v232 + 39);
                    v277 = v423;
                    if ((v276 & 0x80u) != 0)
                    {
                      v277 = *(const char **)(v232 + 16);
                      v276 = *(_QWORD *)(v232 + 24);
                    }
                    *(_QWORD *)v275 = v272;
                    *(_OWORD *)(v275 + 8) = *(_OWORD *)&v468[8];
                    *(_QWORD *)&v468[8] = 0;
                    *(_QWORD *)&v468[16] = 0;
                    *(_OWORD *)(v275 + 24) = *(_OWORD *)v469;
                    *(_QWORD *)v469 = 0;
                    *(_QWORD *)&v469[8] = 0;
                    *(_QWORD *)(v275 + 40) = v277;
                    *(_QWORD *)(v275 + 48) = v276;
                    *(_BYTE *)(v275 + 56) = 2;
                    *(_QWORD *)v432 = 0;
                    *(_QWORD *)v455 = v275;
                    (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v427 + 24) + 40))(*(_QWORD *)(v427 + 24), v455);
                    v278 = *(_QWORD *)v455;
                    *(_QWORD *)v455 = 0;
                    v252 = v425;
                    if (v278)
                    {
                      v279 = *(std::__shared_weak_count **)(v278 + 32);
                      if (v279)
                      {
                        v280 = (unint64_t *)&v279->__shared_owners_;
                        do
                          v281 = __ldaxr(v280);
                        while (__stlxr(v281 - 1, v280));
                        if (!v281)
                        {
                          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                          std::__shared_weak_count::__release_weak(v279);
                        }
                      }
                      v282 = *(std::__shared_weak_count **)(v278 + 16);
                      if (v282)
                      {
                        v283 = (unint64_t *)&v282->__shared_owners_;
                        do
                          v284 = __ldaxr(v283);
                        while (__stlxr(v284 - 1, v283));
                        if (!v284)
                        {
                          ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                          std::__shared_weak_count::__release_weak(v282);
                        }
                      }
                      MEMORY[0x227684CE8](v278, 0x10F0C40B62ED6C6);
                      v285 = *(_QWORD *)v432;
                      *(_QWORD *)v432 = 0;
                      if (v285)
                      {
                        v286 = *(std::__shared_weak_count **)(v285 + 32);
                        if (v286)
                        {
                          v287 = (unint64_t *)&v286->__shared_owners_;
                          do
                            v288 = __ldaxr(v287);
                          while (__stlxr(v288 - 1, v287));
                          if (!v288)
                          {
                            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                            std::__shared_weak_count::__release_weak(v286);
                          }
                        }
                        v289 = *(std::__shared_weak_count **)(v285 + 16);
                        if (v289)
                        {
                          v290 = (unint64_t *)&v289->__shared_owners_;
                          do
                            v291 = __ldaxr(v290);
                          while (__stlxr(v291 - 1, v290));
                          if (!v291)
                          {
                            ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                            std::__shared_weak_count::__release_weak(v289);
                          }
                        }
                        MEMORY[0x227684CE8](v285, 0x10F0C40B62ED6C6);
                      }
                    }
                    v292 = *(std::__shared_weak_count **)&v469[8];
                    if (*(_QWORD *)&v469[8])
                    {
                      v293 = (unint64_t *)(*(_QWORD *)&v469[8] + 8);
                      do
                        v294 = __ldaxr(v293);
                      while (__stlxr(v294 - 1, v293));
                      if (!v294)
                      {
                        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                        std::__shared_weak_count::__release_weak(v292);
                      }
                    }
                    v295 = *(std::__shared_weak_count **)&v468[16];
                    if (*(_QWORD *)&v468[16])
                    {
                      v296 = (unint64_t *)(*(_QWORD *)&v468[16] + 8);
                      do
                        v297 = __ldaxr(v296);
                      while (__stlxr(v297 - 1, v296));
                      if (!v297)
                      {
                        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                        std::__shared_weak_count::__release_weak(v295);
                      }
                    }
LABEL_597:
                    if (v252)
                    {
                      v298 = (const char *)&__dst;
                      if (v461 < 0)
                        v298 = (const char *)__dst;
                      sub_22322C138((uint64_t)v457, "%s", v298);
                      sub_223182C08((uint64_t)v457);
                    }
                    sub_223182C08((uint64_t)v457);
                    v299 = *(std::__shared_weak_count **)&v457[64];
                    if (*(_QWORD *)&v457[64])
                    {
                      v300 = (unint64_t *)(*(_QWORD *)&v457[64] + 8);
                      do
                        v301 = __ldaxr(v300);
                      while (__stlxr(v301 - 1, v300));
                      if (!v301)
                      {
                        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                        std::__shared_weak_count::__release_weak(v299);
                      }
                    }
                    if (SHIBYTE(v461) < 0)
                      operator delete(__dst);
                    v435 = (void *)*MEMORY[0x24BEDB7F0];
                    v302 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(void **)((char *)&v435 + *((_QWORD *)v435 - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                    *((_QWORD *)&v436 + 1) = v302;
                    *(_QWORD *)v437 = MEMORY[0x24BEDB848] + 16;
                    if (v441 < 0)
                      operator delete(v440);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x227684BE0](&v444);
LABEL_611:
                    v18 &= ~0x10u;
                    goto LABEL_612;
                  }
                }
                memcpy(v250, v231, v249);
                goto LABEL_538;
              }
            }
            memmove(v241, v233, v234);
            goto LABEL_519;
          }
        }
        memmove(v238, v236, v237);
        goto LABEL_511;
      }
    }
    memmove(p_dst, v228, v224);
    goto LABEL_490;
  }
  v215 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
  if (*((_QWORD *)&v436 + 1))
  {
    v216 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
    do
      v217 = __ldaxr(v216);
    while (__stlxr(v217 - 1, v216));
    if (!v217)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v215->__on_zero_shared)(v215, v214);
      std::__shared_weak_count::__release_weak(v215);
    }
  }
LABEL_612:
  v303 = a2;
  v304 = *((unsigned __int8 *)a2 + 144);
  if (*((_BYTE *)a2 + 144))
  {
    if (!*((_DWORD *)a2 + 30) || !*((_DWORD *)a2 + 31))
    {
      v305 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C);
      v303 = a2;
      if (v305)
        abort();
    }
    sub_223C3BF78((uint64_t)(v303 + 11), (uint64_t)v468);
    v306 = *(_QWORD *)&v468[16];
    v435 = &off_24EC200A8;
    v436 = *(_OWORD *)&v468[8];
    *(_OWORD *)v437 = *(_OWORD *)v469;
    *(_OWORD *)&v437[10] = *(_OWORD *)&v469[10];
    v437[32] = 1;
  }
  else
  {
    v306 = 0;
    LOBYTE(v435) = 0;
    v437[32] = 0;
  }
  *(_QWORD *)v468 = &off_24EC200A8;
  v307 = (void **)v468;
  v308 = (__int128 *)&v468[8];
  *(_OWORD *)&v468[8] = 0u;
  memset(v469, 0, 26);
  if (v304)
  {
    v307 = &v435;
    v308 = &v436;
  }
  v309 = v307[1];
  *(_QWORD *)v308 = 0;
  *((_QWORD *)v308 + 1) = 0;
  v310 = v437;
  if (!v304)
    v310 = v469;
  *(_OWORD *)v462 = *(_OWORD *)v310;
  *(_OWORD *)&v462[10] = *(_OWORD *)(v310 + 10);
  __dst = &off_24EC200A8;
  v460 = (size_t)v309;
  v461 = v306;
  v311 = *(std::__shared_weak_count **)&v468[16];
  if (*(_QWORD *)&v468[16])
  {
    v312 = (unint64_t *)(*(_QWORD *)&v468[16] + 8);
    do
      v313 = __ldaxr(v312);
    while (__stlxr(v313 - 1, v312));
    if (!v313)
    {
      ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
      std::__shared_weak_count::__release_weak(v311);
    }
  }
  if (v437[32])
  {
    v314 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
    if (*((_QWORD *)&v436 + 1))
    {
      v315 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
      do
        v316 = __ldaxr(v315);
      while (__stlxr(v316 - 1, v315));
      if (!v316)
      {
        ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
        std::__shared_weak_count::__release_weak(v314);
      }
    }
  }
  *(_QWORD *)v457 = &off_24EC25150;
  sub_223210C10((uint64_t)&v457[8]);
  if ((v18 & 4) == 0 || !*((_BYTE *)a2 + 464))
    goto LABEL_690;
  v317 = a2;
  if (!*((_DWORD *)a2 + 110) || !*((_DWORD *)a2 + 111))
  {
    v318 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C);
    v317 = a2;
    if (v318)
      abort();
  }
  v319 = (uint64_t)(v317 + 48);
  v320 = sub_223C3E368((uint64_t)(v317 + 48), (uint64_t)&v435);
  v321 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
  if (*((_QWORD *)&v436 + 1))
  {
    v322 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v321->__on_zero_shared)(v321, v320);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
  if (!*((_BYTE *)a2 + 464))
  {
    LOBYTE(v435) = 0;
    v439 = 0;
    v325 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
    v324 = v436;
    *(_QWORD *)&v463 = &off_24EC1F8C8;
    if (*((_QWORD *)&v436 + 1))
      goto LABEL_648;
    goto LABEL_655;
  }
  if ((!*((_DWORD *)a2 + 110) || !*((_DWORD *)a2 + 111))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3E368(v319, (uint64_t)v468);
  v324 = *(_QWORD *)&v468[8];
  v325 = *(std::__shared_weak_count **)&v468[16];
  v435 = &off_24EC21DF8;
  v436 = *(_OWORD *)&v468[8];
  *(_OWORD *)v437 = *(_OWORD *)v469;
  *(_OWORD *)&v437[16] = *(_OWORD *)&v469[16];
  *(_OWORD *)&v437[32] = *(_OWORD *)&v469[32];
  LOWORD(v438) = v470;
  v439 = 1;
  *(_QWORD *)&v463 = &off_24EC1F8C8;
  if (!*(_QWORD *)&v468[16])
  {
LABEL_655:
    v328 = *(_QWORD *)&v437[12];
    v329 = *(_DWORD *)&v437[28];
    v330 = *(_QWORD *)v437;
    v331 = v438;
    goto LABEL_656;
  }
LABEL_648:
  v326 = (unint64_t *)&v325->__shared_owners_;
  do
    v327 = __ldxr(v326);
  while (__stxr(v327 + 1, v326));
  v328 = *(_QWORD *)&v437[12];
  v329 = *(_DWORD *)&v437[28];
  v330 = *(_QWORD *)v437;
  v331 = v438;
  do
    v332 = __ldxr(v326);
  while (__stxr(v332 + 1, v326));
  do
    v333 = __ldxr(v326);
  while (__stxr(v333 + 1, v326));
LABEL_656:
  *((_QWORD *)&v463 + 1) = v324;
  *(_QWORD *)&v464 = v325;
  *((_QWORD *)&v464 + 1) = v328;
  LODWORD(v465) = 4 * v329;
  *((_QWORD *)&v465 + 1) = v330;
  v466 = 32;
  v467 = v331;
  if (v325)
  {
    v334 = (unint64_t *)&v325->__shared_owners_;
    do
      v335 = __ldaxr(v334);
    while (__stlxr(v335 - 1, v334));
    if (!v335)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
    do
      v336 = __ldaxr(v334);
    while (__stlxr(v336 - 1, v334));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v468[8] = 0;
  v469[0] = 0;
  v469[8] = 0;
  v469[24] = 0;
  v469[32] = 1;
  *(_DWORD *)&v469[40] = 0;
  sub_22432B21C((uint64_t)&v463, 0x1Fu, (uint64_t)v432);
  *(_QWORD *)v455 = &off_24EC25150;
  sub_223A5BF34((uint64_t *)&v455[8], (uint64_t)v432);
  v337 = *(_OWORD *)&v455[8];
  *(_QWORD *)&v455[8] = 0;
  *(_QWORD *)&v455[16] = 0;
  v338 = *(std::__shared_weak_count **)&v457[16];
  *(_OWORD *)&v457[8] = v337;
  if (v338)
  {
    v339 = (unint64_t *)&v338->__shared_owners_;
    do
      v340 = __ldaxr(v339);
    while (__stlxr(v340 - 1, v339));
    if (!v340)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v338);
    }
  }
  *(_OWORD *)&v457[24] = *(_OWORD *)&v455[24];
  *(_OWORD *)&v457[40] = *(_OWORD *)&v455[40];
  *(_OWORD *)&v457[56] = *(_OWORD *)&v455[56];
  v458 = v456;
  v341 = *(std::__shared_weak_count **)&v455[16];
  if (*(_QWORD *)&v455[16])
  {
    v342 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
    do
      v343 = __ldaxr(v342);
    while (__stlxr(v343 - 1, v342));
    if (!v343)
    {
      ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
      std::__shared_weak_count::__release_weak(v341);
    }
  }
  v344 = *(std::__shared_weak_count **)&v432[16];
  if (*(_QWORD *)&v432[16])
  {
    v345 = (unint64_t *)(*(_QWORD *)&v432[16] + 8);
    do
      v346 = __ldaxr(v345);
    while (__stlxr(v346 - 1, v345));
    if (!v346)
    {
      ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
      std::__shared_weak_count::__release_weak(v344);
    }
  }
  v347 = (std::__shared_weak_count *)v464;
  if ((_QWORD)v464)
  {
    v348 = (unint64_t *)(v464 + 8);
    do
      v349 = __ldaxr(v348);
    while (__stlxr(v349 - 1, v348));
    if (!v349)
    {
      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
      std::__shared_weak_count::__release_weak(v347);
    }
  }
  if (v439)
  {
    v350 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
    if (*((_QWORD *)&v436 + 1))
    {
      v351 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
      do
        v352 = __ldaxr(v351);
      while (__stlxr(v352 - 1, v351));
      if (!v352)
      {
        ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
        std::__shared_weak_count::__release_weak(v350);
      }
    }
  }
LABEL_690:
  *(_QWORD *)v468 = &off_24EC204C0;
  sub_223212780((uint64_t)&v468[8]);
  if ((v18 & 0x10) != 0)
  {
    sub_223C41BC8(v194, (uint64_t)&v435);
    *(_QWORD *)v455 = &off_24EC204C0;
    sub_223212780((uint64_t)&v455[8]);
    v353 = v439 == 0;
    if (v439)
      v354 = &v435;
    else
      v354 = (void **)v455;
    v355 = v354[1];
    v356 = &v436;
    if (!v439)
      v356 = (__int128 *)&v455[8];
    v357 = &v455[16];
    if (v439)
      v357 = (char *)&v436 + 8;
    v358 = *(_QWORD *)v357;
    *(_QWORD *)v356 = 0;
    *((_QWORD *)v356 + 1) = 0;
    v359 = v437;
    if (v353)
      v359 = &v455[24];
    v360 = *((_OWORD *)v359 + 1);
    *(_OWORD *)v432 = *(_OWORD *)v359;
    *(_OWORD *)&v432[16] = v360;
    *(_OWORD *)&v432[32] = *((_OWORD *)v359 + 2);
    *(_WORD *)&v432[48] = *((_WORD *)v359 + 24);
    v361 = *(std::__shared_weak_count **)&v468[16];
    *(_QWORD *)&v468[8] = v355;
    *(_QWORD *)&v468[16] = v358;
    if (v361)
    {
      v362 = (unint64_t *)&v361->__shared_owners_;
      do
        v363 = __ldaxr(v362);
      while (__stlxr(v363 - 1, v362));
      if (!v363)
      {
        ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
        std::__shared_weak_count::__release_weak(v361);
      }
    }
    *(_OWORD *)v469 = *(_OWORD *)v432;
    *(_OWORD *)&v469[16] = *(_OWORD *)&v432[16];
    *(_OWORD *)&v469[32] = *(_OWORD *)&v432[32];
    v470 = *(_WORD *)&v432[48];
    v364 = *(std::__shared_weak_count **)&v455[16];
    if (*(_QWORD *)&v455[16])
    {
      v365 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
      do
        v366 = __ldaxr(v365);
      while (__stlxr(v366 - 1, v365));
      if (!v366)
      {
        ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
        std::__shared_weak_count::__release_weak(v364);
      }
    }
    if (v439)
    {
      v367 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
      if (*((_QWORD *)&v436 + 1))
      {
        v368 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
        do
          v369 = __ldaxr(v368);
        while (__stlxr(v369 - 1, v368));
        if (!v369)
        {
          ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
          std::__shared_weak_count::__release_weak(v367);
        }
      }
    }
  }
  *(_QWORD *)v455 = &off_24EC204C0;
  sub_223212780((uint64_t)&v455[8]);
  if ((v18 & 1) != 0)
  {
    sub_223C40588(v194, (uint64_t)&v435);
    *(_QWORD *)v432 = &off_24EC204C0;
    sub_223212780((uint64_t)&v432[8]);
    v370 = v439 == 0;
    if (v439)
      v371 = &v435;
    else
      v371 = (void **)v432;
    v372 = v371[1];
    v373 = &v436;
    if (!v439)
      v373 = (__int128 *)&v432[8];
    v374 = &v432[16];
    if (v439)
      v374 = (char *)&v436 + 8;
    v375 = *(_QWORD *)v374;
    *(_QWORD *)v373 = 0;
    *((_QWORD *)v373 + 1) = 0;
    v376 = v437;
    if (v370)
      v376 = &v432[24];
    v377 = *((_OWORD *)v376 + 1);
    v463 = *(_OWORD *)v376;
    v464 = v377;
    v465 = *((_OWORD *)v376 + 2);
    LOWORD(v466) = *((_WORD *)v376 + 24);
    v378 = *(std::__shared_weak_count **)&v455[16];
    *(_QWORD *)&v455[8] = v372;
    *(_QWORD *)&v455[16] = v375;
    if (v378)
    {
      v379 = (unint64_t *)&v378->__shared_owners_;
      do
        v380 = __ldaxr(v379);
      while (__stlxr(v380 - 1, v379));
      if (!v380)
      {
        ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
        std::__shared_weak_count::__release_weak(v378);
      }
    }
    *(_OWORD *)&v455[24] = v463;
    *(_OWORD *)&v455[40] = v464;
    *(_OWORD *)&v455[56] = v465;
    v456 = v466;
    v381 = *(std::__shared_weak_count **)&v432[16];
    if (*(_QWORD *)&v432[16])
    {
      v382 = (unint64_t *)(*(_QWORD *)&v432[16] + 8);
      do
        v383 = __ldaxr(v382);
      while (__stlxr(v383 - 1, v382));
      if (!v383)
      {
        ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
        std::__shared_weak_count::__release_weak(v381);
      }
    }
    if (v439)
    {
      v384 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
      if (*((_QWORD *)&v436 + 1))
      {
        v385 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
        do
          v386 = __ldaxr(v385);
        while (__stlxr(v386 - 1, v385));
        if (!v386)
        {
          ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
          std::__shared_weak_count::__release_weak(v384);
        }
      }
    }
  }
  v387 = a2;
  if (*(_BYTE *)(a1 + 46))
    v388 = *((_BYTE *)a2 + 1240) == 2;
  else
    v388 = 1;
  v389 = !v388;
  if (*((_BYTE *)a2 + 648))
  {
    if (!*((_DWORD *)a2 + 156) || !*((_DWORD *)a2 + 157))
    {
      v390 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1163, (uint64_t)"!derived.processed_depth->Empty()", 33, (uint64_t)"Processed depth buffer not valid", 32, (void (*)(void **))sub_22457406C);
      v387 = a2;
      if (v390)
        abort();
    }
    sub_223C3BF78((uint64_t)(v387 + 74), (uint64_t)v432);
    v435 = &off_24EC200A8;
    v436 = *(_OWORD *)&v432[8];
    *(_OWORD *)v437 = *(_OWORD *)&v432[24];
    *(_OWORD *)&v437[10] = *(_OWORD *)&v432[34];
    v437[32] = 1;
  }
  else
  {
    LOBYTE(v435) = 0;
    v437[32] = 0;
  }
  *(_QWORD *)v432 = &off_24EC21230;
  memset(&v432[8], 0, 42);
  v463 = 0uLL;
  v391 = (uint64_t)(a2 + 252);
  if (!v389)
    v391 = 0;
  *(_QWORD *)&v464 = 0;
  sub_223A53F0C(a1, (uint64_t)(v188 + 48), (uint64_t)(a2 + 158), (uint64_t)&v445, (uint64_t)&v435, (uint64_t)&__dst, (uint64_t)v432, (uint64_t)v457, (uint64_t)v455, (uint64_t)v468, 0, v18, v413, a6, 0, a7, (float32x2_t **)&v463, 0, v391,
    a8,
    a16,
    a17,
    a18);
  v392 = v463;
  if ((_QWORD)v463)
  {
    v393 = *((_QWORD *)&v463 + 1);
    v394 = (void *)v463;
    if (*((_QWORD *)&v463 + 1) != (_QWORD)v463)
    {
      do
      {
        v393 -= 464;
        sub_22324A5A0(v393);
      }
      while (v393 != v392);
      v394 = (void *)v463;
    }
    *((_QWORD *)&v463 + 1) = v392;
    operator delete(v394);
  }
  v395 = *(std::__shared_weak_count **)&v432[16];
  if (*(_QWORD *)&v432[16])
  {
    v396 = (unint64_t *)(*(_QWORD *)&v432[16] + 8);
    do
      v397 = __ldaxr(v396);
    while (__stlxr(v397 - 1, v396));
    if (!v397)
    {
      ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
      std::__shared_weak_count::__release_weak(v395);
    }
  }
  if (v437[32])
  {
    v398 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
    if (*((_QWORD *)&v436 + 1))
    {
      v399 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
      do
        v400 = __ldaxr(v399);
      while (__stlxr(v400 - 1, v399));
      if (!v400)
      {
        ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
        std::__shared_weak_count::__release_weak(v398);
      }
    }
  }
  v401 = *(std::__shared_weak_count **)&v455[16];
  if (*(_QWORD *)&v455[16])
  {
    v402 = (unint64_t *)(*(_QWORD *)&v455[16] + 8);
    do
      v403 = __ldaxr(v402);
    while (__stlxr(v403 - 1, v402));
    if (!v403)
    {
      ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
      std::__shared_weak_count::__release_weak(v401);
    }
  }
  v404 = *(std::__shared_weak_count **)&v468[16];
  if (*(_QWORD *)&v468[16])
  {
    v405 = (unint64_t *)(*(_QWORD *)&v468[16] + 8);
    do
      v406 = __ldaxr(v405);
    while (__stlxr(v406 - 1, v405));
    if (!v406)
    {
      ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
      std::__shared_weak_count::__release_weak(v404);
    }
  }
  v407 = *(std::__shared_weak_count **)&v457[16];
  if (*(_QWORD *)&v457[16])
  {
    v408 = (unint64_t *)(*(_QWORD *)&v457[16] + 8);
    do
      v409 = __ldaxr(v408);
    while (__stlxr(v409 - 1, v408));
    if (!v409)
    {
      ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
      std::__shared_weak_count::__release_weak(v407);
    }
  }
  v410 = (std::__shared_weak_count *)v461;
  if (v461)
  {
    v411 = (unint64_t *)(v461 + 8);
    do
      v412 = __ldaxr(v411);
    while (__stlxr(v412 - 1, v411));
    if (!v412)
    {
      ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
      std::__shared_weak_count::__release_weak(v410);
    }
  }
}

void sub_223A5A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;

  if (*(_BYTE *)(v60 - 168) && *(char *)(v60 - 169) < 0)
    operator delete(*(void **)(v60 - 192));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x390]);
  if (SLOBYTE(STACK[0x3FF]) < 0)
  {
    operator delete((void *)STACK[0x3E8]);
    sub_223195348((uint64_t)&a60);
    _Unwind_Resume(a1);
  }
  sub_223195348((uint64_t)&a60);
  _Unwind_Resume(a1);
}

void sub_223A5A3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319B358((uint64_t)&a49);
  sub_22319A5E0(v60 - 256);
  sub_2231BD3DC((uint64_t)&a60);
  sub_2231D4840((uint64_t)&STACK[0x390]);
  sub_22319EF60((uint64_t)&STACK[0x3E8]);
  _Unwind_Resume(a1);
}

void sub_223A5A3DC(_Unwind_Exception *a1)
{
  sub_2231D4840((uint64_t)&STACK[0x390]);
  sub_22319EF60((uint64_t)&STACK[0x3E8]);
  _Unwind_Resume(a1);
}

void sub_223A5A454(_Unwind_Exception *a1)
{
  sub_22319EF60((uint64_t)&STACK[0x3E8]);
  _Unwind_Resume(a1);
}

void sub_223A5A498()
{
  uint64_t v0;

  sub_2231BD9DC((uint64_t)&STACK[0x308]);
  sub_22319EF60(v0 - 256);
  sub_22319EF60((uint64_t)&STACK[0x340]);
  JUMPOUT(0x223A5A510);
}

void sub_223A5A50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  uint64_t v60;

  sub_22319F500((uint64_t)&STACK[0x390]);
  sub_22319F500(v60 - 192);
  sub_2231D4840((uint64_t)&a60);
  sub_2231BD974((uint64_t)&STACK[0x3E8]);
  sub_2231BD974((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_223A5A548()
{
  JUMPOUT(0x223A5A528);
}

void sub_223A5A550(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A5A55C(uint64_t a1, unsigned __int8 **a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int a9, uint64_t a10, uint64_t **a11)
{
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float32x4_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float32x4_t v33;
  _QWORD *v34;
  uint64_t *p_size;
  int v36;
  uint64_t **v37;
  uint64_t **v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int *v45;
  uint64_t v46;
  int8x8_t v47;
  uint8x8_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  std::string::size_type size;
  uint64_t *v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  _DWORD *v64;
  std::string::size_type v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  float32x4_t v92;
  int v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  std::mutex *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  std::string::size_type v103;
  std::string *p_p;
  std::string::size_type v105;
  std::string::size_type v106;
  int v107;
  BOOL v108;
  __n128 *v110;
  std::string *v111;
  size_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  std::mutex *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t *v122;
  std::string::size_type v123;
  std::string *v124;
  std::string::size_type v125;
  std::string::size_type v126;
  int v127;
  __n128 *v130;
  std::string *v131;
  size_t v132;
  unint64_t v133;
  double v134;
  unsigned __int8 v135;
  unsigned __int8 v136;
  double v137;
  double v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  std::mutex *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::string::size_type v146;
  std::string *p_info;
  std::string::size_type v148;
  std::string::size_type v149;
  int v150;
  __n128 *v153;
  std::string *v154;
  size_t v155;
  unint64_t v157;
  unint64_t v158;
  std::chrono::steady_clock::time_point v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 **v165;
  _QWORD *v166;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  int *v171;
  uint64_t v172;
  double v173;
  std::string __p;
  double v175;
  uint64_t *v176;
  _QWORD *v177;
  std::string::size_type v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  __int128 v184;
  std::string info;
  __int128 v186;
  __int128 v187;
  int v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  v18 = a3[2];
  v19 = *(_QWORD *)(a4 + 16);
  v179 = v18;
  v180 = v19;
  v181 = 0;
  v182 = 0;
  v183 = 728301732;
  kdebug_trace();
  v162 = a7;
  v159.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v160 = *(_DWORD *)(a10 + 16);
  v163 = a4;
  v164 = a1;
  v165 = a2;
  v169 = a8;
  sub_223A56FA0(a1, a2, (uint64_t)a3, a4, a6, 0x101u, 0, a8, v20, v21, v22, v23, v24, v25, v26, a9, (uint64_t **)a10, a11);
  v177 = 0;
  v178 = 0;
  v176 = (uint64_t *)&v177;
  v161 = (uint64_t)a3;
  v34 = (_QWORD *)*a3;
  v166 = a3 + 1;
  if ((_QWORD *)*a3 == a3 + 1)
    goto LABEL_132;
  p_size = (uint64_t *)&info.__r_.__value_.__l.__size_;
  v36 = a9;
  v168 = 73856093 * a9;
  v37 = (uint64_t **)a10;
  do
  {
    v38 = *(uint64_t ***)(a5 + 8);
    if (!v38)
LABEL_243:
      sub_223198218("map::at:  key not found");
    v39 = *((unsigned __int8 *)v34 + 25);
    while (1)
    {
      v40 = *((unsigned __int8 *)v38 + 32);
      v41 = v39 >= v40;
      if (v39 == v40)
        break;
      v42 = *((unsigned __int8 *)v34 + 25);
LABEL_36:
      if (v41)
      {
LABEL_38:
        if (v40 >= v42)
          goto LABEL_41;
        v38 = (uint64_t **)v38[1];
        if (!v38)
          goto LABEL_243;
      }
      else
      {
LABEL_6:
        v38 = (uint64_t **)*v38;
        if (!v38)
          goto LABEL_243;
      }
    }
    v42 = *((unsigned __int8 *)v34 + 26);
    v40 = *((unsigned __int8 *)v38 + 33);
    v41 = v42 >= v40;
    if (v42 != v40)
      goto LABEL_36;
    v42 = *((unsigned __int8 *)v34 + 27);
    v40 = *((unsigned __int8 *)v38 + 34);
    v41 = v42 >= v40;
    if (v42 != v40)
      goto LABEL_36;
    v42 = *((unsigned __int8 *)v34 + 28);
    v40 = *((unsigned __int8 *)v38 + 35);
    v41 = v42 >= v40;
    if (v42 != v40)
      goto LABEL_36;
    v42 = *((unsigned __int8 *)v34 + 29);
    v40 = *((unsigned __int8 *)v38 + 36);
    v41 = v42 >= v40;
    if (v42 != v40)
      goto LABEL_36;
    v42 = *((unsigned __int8 *)v34 + 30);
    v40 = *((unsigned __int8 *)v38 + 37);
    v41 = v42 >= v40;
    if (v42 != v40)
      goto LABEL_36;
    v43 = *((unsigned __int8 *)v34 + 31);
    v44 = *((unsigned __int8 *)v38 + 38);
    if (v43 != v44)
      goto LABEL_23;
    v43 = *((unsigned __int8 *)v34 + 32);
    v44 = *((unsigned __int8 *)v38 + 39);
    if (v43 != v44)
      goto LABEL_23;
    v43 = *((unsigned __int8 *)v34 + 33);
    v44 = *((unsigned __int8 *)v38 + 40);
    if (v43 != v44)
      goto LABEL_23;
    v43 = *((unsigned __int8 *)v34 + 34);
    v44 = *((unsigned __int8 *)v38 + 41);
    if (v43 != v44)
      goto LABEL_23;
    v43 = *((unsigned __int8 *)v34 + 35);
    v44 = *((unsigned __int8 *)v38 + 42);
    if (v43 != v44)
      goto LABEL_23;
    v43 = *((unsigned __int8 *)v34 + 36);
    v44 = *((unsigned __int8 *)v38 + 43);
    if (v43 != v44)
      goto LABEL_23;
    v43 = *((unsigned __int8 *)v34 + 37);
    v44 = *((unsigned __int8 *)v38 + 44);
    if (v43 != v44
      || (v43 = *((unsigned __int8 *)v34 + 38), v44 = *((unsigned __int8 *)v38 + 45), v43 != v44)
      || (v43 = *((unsigned __int8 *)v34 + 39), v44 = *((unsigned __int8 *)v38 + 46), v43 != v44)
      || (v43 = *((unsigned __int8 *)v34 + 40), v44 = *((unsigned __int8 *)v38 + 47), v43 != v44))
    {
LABEL_23:
      if (v43 < v44)
        goto LABEL_6;
    }
    v40 = *((unsigned __int8 *)v38 + 38);
    v42 = *((unsigned __int8 *)v34 + 31);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 39);
    v42 = *((unsigned __int8 *)v34 + 32);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 40);
    v42 = *((unsigned __int8 *)v34 + 33);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 41);
    v42 = *((unsigned __int8 *)v34 + 34);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 42);
    v42 = *((unsigned __int8 *)v34 + 35);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 43);
    v42 = *((unsigned __int8 *)v34 + 36);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 44);
    v42 = *((unsigned __int8 *)v34 + 37);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 45);
    v42 = *((unsigned __int8 *)v34 + 38);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 46);
    v42 = *((unsigned __int8 *)v34 + 39);
    if (v40 != v42)
      goto LABEL_38;
    v40 = *((unsigned __int8 *)v38 + 47);
    v42 = *((unsigned __int8 *)v34 + 40);
    if (v40 != v42)
      goto LABEL_38;
LABEL_41:
    *p_size = 0;
    p_size[1] = 0;
    info.__r_.__value_.__r.__words[0] = (std::string::size_type)p_size;
    v45 = (int *)v38[6];
    v171 = (int *)v38[7];
    if (v45 != v171)
    {
      v46 = 0;
      v47 = (int8x8_t)v169[2];
      v48 = (uint8x8_t)vcnt_s8(v47);
      v48.i16[0] = vaddlv_u8(v48);
      v170 = v48.u32[0];
      v172 = *(_QWORD *)&v47 - 1;
      while (1)
      {
        if (!*(_QWORD *)&v47)
          goto LABEL_75;
        v49 = *v45;
        v50 = v45[1];
        v51 = v45[2];
        v52 = (19349669 * *v45) ^ v168 ^ (83492791 * v50) ^ (37783632 * v51);
        if (v170 > 1)
        {
          v53 = (19349669 * v49) ^ v168 ^ (83492791 * v50) ^ (37783632 * v51);
          if (v52 >= *(_QWORD *)&v47)
            v53 = v52 % *(_QWORD *)&v47;
        }
        else
        {
          v53 = v52 & v172;
        }
        v54 = *(uint64_t ***)(v169[1] + 8 * v53);
        if (!v54 || (v55 = *v54) == 0)
        {
LABEL_75:
          v57 = -1;
          size = info.__r_.__value_.__l.__size_;
          v59 = p_size;
          v60 = p_size;
          if (!info.__r_.__value_.__l.__size_)
            goto LABEL_82;
          goto LABEL_76;
        }
        if (v170 < 2)
        {
          while (1)
          {
            v56 = v55[1];
            if (v52 == v56)
            {
              if (*((_DWORD *)v55 + 4) == v36
                && *((_DWORD *)v55 + 5) == v49
                && *((_DWORD *)v55 + 6) == v50
                && *((_DWORD *)v55 + 7) == v51)
              {
                goto LABEL_63;
              }
            }
            else if ((v56 & v172) != v53)
            {
              goto LABEL_75;
            }
            v55 = (uint64_t *)*v55;
            if (!v55)
              goto LABEL_75;
          }
        }
        while (1)
        {
          v61 = v55[1];
          if (v52 == v61)
            break;
          if (v61 >= *(_QWORD *)&v47)
            v61 %= *(_QWORD *)&v47;
          if (v61 != v53)
            goto LABEL_75;
LABEL_66:
          v55 = (uint64_t *)*v55;
          if (!v55)
            goto LABEL_75;
        }
        if (*((_DWORD *)v55 + 4) != v36
          || *((_DWORD *)v55 + 5) != v49
          || *((_DWORD *)v55 + 6) != v50
          || *((_DWORD *)v55 + 7) != v51)
        {
          goto LABEL_66;
        }
LABEL_63:
        v57 = *((_DWORD *)v55 + 8);
        size = info.__r_.__value_.__l.__size_;
        v59 = p_size;
        v60 = p_size;
        if (info.__r_.__value_.__l.__size_)
        {
LABEL_76:
          v62 = size;
          while (1)
          {
            while (1)
            {
              p_size = (uint64_t *)v62;
              v63 = *(_DWORD *)(v62 + 28);
              if (v57 >= v63)
                break;
              v62 = *p_size;
              v59 = p_size;
              if (!*p_size)
                goto LABEL_82;
            }
            if (v63 >= v57)
              break;
            v62 = p_size[1];
            if (!v62)
            {
              v59 = p_size + 1;
              goto LABEL_82;
            }
          }
          v36 = a9;
          p_size = v60;
          v45 += 3;
          if (v45 == v171)
          {
LABEL_111:
            v78 = (uint64_t *)info.__r_.__value_.__r.__words[0];
            v37 = (uint64_t **)a10;
            goto LABEL_113;
          }
        }
        else
        {
LABEL_82:
          v64 = operator new(0x20uLL);
          v64[7] = v57;
          *(_QWORD *)v64 = 0;
          *((_QWORD *)v64 + 1) = 0;
          *((_QWORD *)v64 + 2) = p_size;
          *v59 = (uint64_t)v64;
          if (*(_QWORD *)info.__r_.__value_.__l.__data_)
          {
            info.__r_.__value_.__r.__words[0] = *(_QWORD *)info.__r_.__value_.__l.__data_;
            v64 = (_DWORD *)*v59;
          }
          v65 = info.__r_.__value_.__l.__size_;
          *((_BYTE *)v64 + 24) = v64 == (_DWORD *)info.__r_.__value_.__l.__size_;
          v36 = a9;
          p_size = v60;
          if (v64 != (_DWORD *)v65)
          {
            do
            {
              v66 = *((_QWORD *)v64 + 2);
              if (*(_BYTE *)(v66 + 24))
                break;
              v67 = *(_BYTE **)(v66 + 16);
              v68 = *(_QWORD *)v67;
              if (*(_QWORD *)v67 == v66)
              {
                v71 = *((_QWORD *)v67 + 1);
                if (!v71 || (v72 = *(unsigned __int8 *)(v71 + 24), v69 = (_BYTE *)(v71 + 24), v72))
                {
                  if (*(_DWORD **)v66 == v64)
                  {
                    *(_BYTE *)(v66 + 24) = 1;
                    v67[24] = 0;
                    v75 = *(_QWORD *)(v66 + 8);
                    *(_QWORD *)v67 = v75;
                    if (v75)
                      goto LABEL_98;
                  }
                  else
                  {
                    v73 = *(uint64_t **)(v66 + 8);
                    v74 = *v73;
                    *(_QWORD *)(v66 + 8) = *v73;
                    if (v74)
                    {
                      *(_QWORD *)(v74 + 16) = v66;
                      v67 = *(_BYTE **)(v66 + 16);
                    }
                    v73[2] = (uint64_t)v67;
                    *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v73;
                    *v73 = v66;
                    *(_QWORD *)(v66 + 16) = v73;
                    v67 = (_BYTE *)v73[2];
                    v66 = *(_QWORD *)v67;
                    *((_BYTE *)v73 + 24) = 1;
                    v67[24] = 0;
                    v75 = *(_QWORD *)(v66 + 8);
                    *(_QWORD *)v67 = v75;
                    if (v75)
LABEL_98:
                      *(_QWORD *)(v75 + 16) = v67;
                  }
                  *(_QWORD *)(v66 + 16) = *((_QWORD *)v67 + 2);
                  *(_QWORD *)(*((_QWORD *)v67 + 2) + 8 * (**((_QWORD **)v67 + 2) != (_QWORD)v67)) = v66;
                  *(_QWORD *)(v66 + 8) = v67;
LABEL_45:
                  *((_QWORD *)v67 + 2) = v66;
                  break;
                }
              }
              else if (!v68 || (v70 = *(unsigned __int8 *)(v68 + 24), v69 = (_BYTE *)(v68 + 24), v70))
              {
                if (*(_DWORD **)v66 == v64)
                {
                  v77 = *((_QWORD *)v64 + 1);
                  *(_QWORD *)v66 = v77;
                  if (v77)
                  {
                    *(_QWORD *)(v77 + 16) = v66;
                    v67 = *(_BYTE **)(v66 + 16);
                  }
                  *((_QWORD *)v64 + 2) = v67;
                  *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * (**(_QWORD **)(v66 + 16) != v66)) = v64;
                  *((_QWORD *)v64 + 1) = v66;
                  *(_QWORD *)(v66 + 16) = v64;
                  v67 = (_BYTE *)*((_QWORD *)v64 + 2);
                  *((_BYTE *)v64 + 24) = 1;
                  v67[24] = 0;
                  v66 = *((_QWORD *)v67 + 1);
                  v76 = *(_DWORD **)v66;
                  *((_QWORD *)v67 + 1) = *(_QWORD *)v66;
                  if (!v76)
                    goto LABEL_44;
                }
                else
                {
                  *(_BYTE *)(v66 + 24) = 1;
                  v67[24] = 0;
                  v66 = *((_QWORD *)v67 + 1);
                  v76 = *(_DWORD **)v66;
                  *((_QWORD *)v67 + 1) = *(_QWORD *)v66;
                  if (!v76)
                    goto LABEL_44;
                }
                *((_QWORD *)v76 + 2) = v67;
LABEL_44:
                *(_QWORD *)(v66 + 16) = *((_QWORD *)v67 + 2);
                *(_QWORD *)(*((_QWORD *)v67 + 2) + 8 * (**((_QWORD **)v67 + 2) != (_QWORD)v67)) = v66;
                *(_QWORD *)v66 = v67;
                goto LABEL_45;
              }
              *(_BYTE *)(v66 + 24) = 1;
              v64 = v67;
              v67[24] = v67 == (_BYTE *)v65;
              *v69 = 1;
            }
            while (v67 != (_BYTE *)v65);
          }
          info.__r_.__value_.__r.__words[2] = ++v46;
          v45 += 3;
          if (v45 == v171)
            goto LABEL_111;
        }
      }
    }
    v78 = p_size;
LABEL_113:
    sub_223A5C0E0(v78, p_size, *v37, (uint64_t *)(a10 + 8), (uint64_t *)&v176, v176, (uint64_t **)&v186);
    sub_223198030((uint64_t)&info, (_QWORD *)info.__r_.__value_.__l.__size_);
    v79 = (_QWORD *)v34[1];
    if (v79)
    {
      do
      {
        v80 = v79;
        v79 = (_QWORD *)*v79;
      }
      while (v79);
    }
    else
    {
      do
      {
        v80 = (_QWORD *)v34[2];
        v108 = *v80 == (_QWORD)v34;
        v34 = v80;
      }
      while (!v108);
    }
    v34 = v80;
  }
  while (v80 != v166);
  v81 = v176;
  if (v176 != (uint64_t *)&v177)
  {
    do
    {
      v82 = *((unsigned int *)v81 + 7);
      if (v169[11] <= v82
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(v169[7] + 8 * ((v169[10] + v82) / 0x1F)) + 132 * ((v169[10] + v82) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v83 = *(_QWORD *)(v169[18] + (((v169[21] + v82) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 2936 * ((*((_DWORD *)v169 + 42) + (_DWORD)v82) & 0xF);
      sub_223A75350((uint64_t)v169, v83);
      sub_223A75504((unint64_t)v169, v83);
      sub_223A756B0((unint64_t)v169, v83);
      sub_223A75858((_BOOL8)v169, v83);
      sub_223A759DC((_BOOL8)v169, v83);
      sub_223A75B6C((_BOOL8)v169, v83);
      sub_223A75D00((_BOOL8)v169, v83);
      v84 = (uint64_t *)v81[1];
      if (v84)
      {
        do
        {
          v85 = v84;
          v84 = (uint64_t *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          v85 = (uint64_t *)v81[2];
          v108 = *v85 == (_QWORD)v81;
          v81 = v85;
        }
        while (!v108);
      }
      v81 = v85;
    }
    while (v85 != (uint64_t *)&v177);
  }
LABEL_132:
  sub_223A56FA0(v164, v165, v161, v163, a5, 0x100u, 0, v169, v27, v28, v29, v30, v31, v32, v33, a9, (uint64_t **)a10, a11);
  *((_QWORD *)&v186 + 1) = 0;
  *(_QWORD *)&v187 = 0;
  *(_QWORD *)&v186 = (char *)&v186 + 8;
  sub_223A56FA0(v164, v165, v161, (uint64_t)&v186, v162, 0, 1, v169, v86, v87, v88, v89, v90, v91, v92, a9, (uint64_t **)a10, a11);
  sub_223198030((uint64_t)&v186, *((_QWORD **)&v186 + 1));
  v175 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v159.__d_.__rep_) / 1000000.0;
  v93 = *(_DWORD *)(a10 + 16) - v160;
  if (v93 >= 0)
    v94 = v93;
  else
    v94 = (v160 - *(_DWORD *)(a10 + 16));
  *(_QWORD *)&v186 = "cv3d.recon.";
  *((_QWORD *)&v186 + 1) = 11;
  *(_QWORD *)&v187 = "Stats.Volumetric.Time";
  *((_QWORD *)&v187 + 1) = 21;
  sub_2231A9820((uint64_t)&v186, (uint64_t)&v188, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v95 = sub_2241471F8();
    v96 = v95[2];
    if (!v96)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v96 = v95[2];
    }
    v97 = *(_QWORD *)(v96 + 64);
    v98 = (std::mutex *)(v97 + 32);
    std::mutex::lock((std::mutex *)(v97 + 32));
    v100 = *(_QWORD *)(v97 + 96);
    v99 = *(_QWORD *)(v97 + 104);
    std::mutex::unlock(v98);
    if (v100 != v99)
    {
      sub_2241471F8();
      v101 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101))
      {
        v186 = 0u;
        v187 = 0u;
        v188 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101))
        {
          *((_BYTE *)&info.__r_.__value_.__s + 23) = 16;
          strcpy((char *)&info, "integration (ms)");
          *(_QWORD *)&v184 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v184 + 1) = 2;
          v102 = sub_2241471F8();
          sub_2238C7990((uint64_t)v102, v101, (uint64_t *)&v175, (uint64_t)&info, &v184);
          if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
            operator delete(info.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v186 = 0u;
  v187 = 0u;
  v188 = 728325624;
  kdebug_trace();
  v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v103 = __p.__r_.__value_.__l.__size_;
  if (v103 >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v105 = p_p->__r_.__value_.__r.__words[0];
    v106 = p_p->__r_.__value_.__l.__size_;
    v107 = p_p->__r_.__value_.__s.__data_[16];
    v108 = v105 == 0x6365722E64337663 && v106 == 0x73746174532E6E6FLL;
    if (v108 && v107 == 46)
    {
      v110 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v111 = &__p;
      else
        v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v112 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v112 = __p.__r_.__value_.__l.__size_;
      sub_2231AA374((uint64_t *)v110, v111, v112, (uint64_t *)&v175, (uint64_t)"integration (ms)", 16);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v186 = "cv3d.recon.";
  *((_QWORD *)&v186 + 1) = 11;
  *(_QWORD *)&v187 = "Stats.Volumetric.Time";
  *((_QWORD *)&v187 + 1) = 21;
  sub_2231A9820((uint64_t)&v186, (uint64_t)&v188, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v113 = sub_2241471F8();
    v114 = v113[2];
    if (!v114)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v114 = v113[2];
    }
    v115 = *(_QWORD *)(v114 + 64);
    v116 = (std::mutex *)(v115 + 32);
    std::mutex::lock((std::mutex *)(v115 + 32));
    v118 = *(_QWORD *)(v115 + 96);
    v117 = *(_QWORD *)(v115 + 104);
    std::mutex::unlock(v116);
    if (v118 != v117)
    {
      sub_2241471F8();
      v119 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119))
      {
        v186 = 0u;
        v187 = 0u;
        v188 = 728325608;
        kdebug_trace();
        if (v94 <= 1)
          v120 = 1;
        else
          v120 = v94;
        v173 = v175 / (double)v120;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v119 + 24))(v119))
        {
          v121 = (char *)operator new(0x20uLL);
          *(_OWORD *)&info.__r_.__value_.__r.__words[1] = xmmword_2245B8EA0;
          strcpy(v121, "integration time (ms) per block");
          *(_QWORD *)&v184 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v184 + 1) = 2;
          info.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
          v122 = sub_2241471F8();
          sub_2231AA49C((uint64_t)v122, v119, &v173, (uint64_t)&info, &v184);
          if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
            operator delete(info.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v186 = 0u;
  v187 = 0u;
  v188 = 728325624;
  kdebug_trace();
  v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v123 = __p.__r_.__value_.__l.__size_;
  if (v123 >= 0x11)
  {
    v124 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v124 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v125 = v124->__r_.__value_.__r.__words[0];
    v126 = v124->__r_.__value_.__l.__size_;
    v127 = v124->__r_.__value_.__s.__data_[16];
    if (v125 == 0x6365722E64337663 && v126 == 0x73746174532E6E6FLL && v127 == 46)
    {
      v130 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v131 = &__p;
      else
        v131 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v132 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v132 = __p.__r_.__value_.__l.__size_;
      if (v94 <= 1)
        v133 = 1;
      else
        v133 = v94;
      *(double *)&info.__r_.__value_.__l.__data_ = v175 / (double)v133;
      sub_2231AA374((uint64_t *)v130, v131, v132, (uint64_t *)&info, (uint64_t)"integration time (ms) per block", 31);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v186 = 0u;
  v187 = 0u;
  v188 = 728325632;
  kdebug_trace();
  v134 = v175;
  if (v94 <= 1)
    v94 = 1;
  mach_absolute_time();
  v135 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)&info);
    LODWORD(v158) = HIDWORD(info.__r_.__value_.__r.__words[0]);
    LODWORD(v157) = info.__r_.__value_.__l.__data_;
    *(double *)&qword_255795558 = (double)v157 / (double)v158;
    __cxa_guard_release(&qword_255795560);
  }
  v136 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v136 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578CC18);
  v137 = v134 / (double)v94;
  v138 = *(double *)&qword_25578CC58;
  if (*(double *)&qword_25578CC58 <= v137)
    v138 = v134 / (double)v94;
  if (byte_25578CC60)
    v137 = v138;
  qword_25578CC58 = *(_QWORD *)&v137;
  byte_25578CC60 = 1;
  std::mutex::unlock(&stru_25578CC18);
  kdebug_trace();
  *(_QWORD *)&v186 = "cv3d.recon.";
  *((_QWORD *)&v186 + 1) = 11;
  *(_QWORD *)&v187 = "Stats.Volumetric.Blocks";
  *((_QWORD *)&v187 + 1) = 23;
  sub_2231A9820((uint64_t)&v186, (uint64_t)&v188, 0, 0, &info);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v139 = sub_2241471F8();
    v140 = v139[2];
    if (!v140)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v140 = v139[2];
    }
    v141 = *(_QWORD *)(v140 + 64);
    v142 = (std::mutex *)(v141 + 32);
    std::mutex::lock((std::mutex *)(v141 + 32));
    v144 = *(_QWORD *)(v141 + 96);
    v143 = *(_QWORD *)(v141 + 104);
    std::mutex::unlock(v142);
    if (v144 != v143)
    {
      sub_2241471F8();
      v145 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v145 + 24))(v145))
      {
        v186 = 0u;
        v187 = 0u;
        v188 = 728325608;
        kdebug_trace();
        __p.__r_.__value_.__r.__words[0] = v178;
        sub_223197768((double *)&qword_255788F20, v145, (uint64_t *)&__p, "sync blocks");
        kdebug_trace();
      }
    }
  }
  v186 = 0u;
  v187 = 0u;
  v188 = 728325624;
  kdebug_trace();
  v146 = HIBYTE(info.__r_.__value_.__r.__words[2]);
  if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v146 = info.__r_.__value_.__l.__size_;
  if (v146 >= 0x11)
  {
    p_info = &info;
    if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_info = (std::string *)info.__r_.__value_.__r.__words[0];
    v148 = p_info->__r_.__value_.__r.__words[0];
    v149 = p_info->__r_.__value_.__l.__size_;
    v150 = p_info->__r_.__value_.__s.__data_[16];
    if (v148 == 0x6365722E64337663 && v149 == 0x73746174532E6E6FLL && v150 == 46)
    {
      v153 = sub_223187510();
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v154 = &info;
      else
        v154 = (std::string *)info.__r_.__value_.__r.__words[0];
      if ((info.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v155 = HIBYTE(info.__r_.__value_.__r.__words[2]);
      else
        v155 = info.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = v178;
      sub_22318760C((uint64_t *)v153, v154, v155, (uint64_t *)&__p, (uint64_t)"sync blocks", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(info.__r_.__value_.__r.__words[2]) < 0)
    operator delete(info.__r_.__value_.__l.__data_);
  sub_223198030((uint64_t)&v176, v177);
  return kdebug_trace();
}

void sub_223A5B934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,_QWORD *a38,uint64_t a39,char a40)
{
  uint64_t v40;

  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC(v40 - 160);
  sub_223198030((uint64_t)&a37, a38);
  sub_2231874DC((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_223A5BAC8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A5BADC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5E250;
  result[1] = v3;
  return result;
}

uint64_t sub_223A5BB10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5E250;
  a2[1] = v2;
  return result;
}

float32x4_t sub_223A5BB2C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, double a5@<D1>, float32x2_t a6@<D3>, float32x2_t a7@<D5>, float32x2_t a8@<D7>)
{
  float32x2_t *v8;
  float32x4_t v9;
  float32x4_t result;

  v8 = *(float32x2_t **)(a1 + 8);
  a4.i32[0] = *(_DWORD *)a2;
  LODWORD(a5) = *(_DWORD *)(a2 + 4);
  a6.i32[0] = v8[6].i32[0];
  a7.i32[0] = v8[8].i32[0];
  a8.i32[0] = v8[10].i32[0];
  *(float32x2_t *)v9.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v8[5], *(float *)a2), v8[7], *(float *)&a5), (float32x2_t)vdup_n_s32(0xBDF5C28F), v8[9]);
  *(float32x2_t *)a4.f32 = vmla_f32(vmul_f32(a6, *(float32x2_t *)a4.f32), *(float32x2_t *)&a5, a7);
  LODWORD(a5) = -1107967345;
  *(float32x2_t *)&v9.u32[2] = vmla_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)&a5, a8);
  *(float32x2_t *)a4.f32 = v8[11];
  a4.i32[2] = v8[12].i32[0];
  result = vaddq_f32(v9, a4);
  *(_DWORD *)(a3 + 8) = result.i32[2];
  *(_QWORD *)a3 = result.i64[0];
  return result;
}

uint64_t sub_223A5BB98(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorIN3cva6Matri"
                     "xIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11PixelOriginE1EEERKNS5_1"
                     "5SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_6FormatE3ENSP_13DynamicBufferELNS"
                     "P_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILSR_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15"
                     "_bNS0_16MappingAttributeENS3_8optionalIhEERKNS4_INS_3acv16surfacedetection24ContinuousTrackingResul"
                     "tENS8_IS1B_EEEEPKNS0_5frame17KeyframePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10Block"
                     "TableEiRNS3_3setIjNS3_4lessIjEENS8_IjEEEES1U_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorI"
                                "N3cva6MatrixIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11P"
                                "ixelOriginE1EEERKNS5_15SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_"
                                "6FormatE3ENSP_13DynamicBufferELNSP_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILS"
                                "R_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15_bNS0_16MappingAttributeENS3_8optionalIhEERK"
                                "NS4_INS_3acv16surfacedetection24ContinuousTrackingResultENS8_IS1B_EEEEPKNS0_5frame17Keyf"
                                "ramePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10BlockTableEiRNS3_3setIjNS3_"
                                "4lessIjEENS8_IjEEEES1U_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11PixelOriginE1EEERKNS5_15SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_6FormatE3ENSP_13DynamicBufferELNSP_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILSR_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15_bNS0_16MappingAttributeENS3_8optionalIhEERKNS4_INS_3acv16surfacedetection24ContinuousTrackingResultENS8_IS1B_EEEEPKNS0_5frame17KeyframePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10BlockTableEiRNS3_3setIjNS3_4lessIjEENS8_IjEEEES1U_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11PixelOriginE1EEERKNS5_15SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_6FormatE3ENSP_13DynamicBufferELNSP_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILSR_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15_bNS0_16MappingAttributeENS3_8optionalIhEERKNS4_INS_3acv16surfacedetection24ContinuousTrackingResultENS8_IS1B_EEEEPKNS0_5frame17KeyframePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10BlockTableEiRNS3_3setIjNS3_4lessIjEENS8_IjEEEES1U_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A5BC04()
{
  return &unk_24EC5E2C0;
}

void sub_223A5BC14()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A5BC28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC5E2E0;
  result[1] = v3;
  return result;
}

uint64_t sub_223A5BC5C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC5E2E0;
  a2[1] = v2;
  return result;
}

float32x4_t sub_223A5BC78@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, double a5@<D1>, float32x2_t a6@<D3>, float32x2_t a7@<D5>, float32x2_t a8@<D7>)
{
  float32x2_t *v8;
  float32x4_t v9;
  float32x4_t result;

  v8 = *(float32x2_t **)(a1 + 8);
  a4.i32[0] = *(_DWORD *)a2;
  LODWORD(a5) = *(_DWORD *)(a2 + 4);
  a6.i32[0] = v8[6].i32[0];
  a7.i32[0] = v8[8].i32[0];
  a8.i32[0] = v8[10].i32[0];
  *(float32x2_t *)v9.f32 = vmla_f32(vmla_n_f32(vmul_n_f32(v8[5], *(float *)a2), v8[7], *(float *)&a5), (float32x2_t)vdup_n_s32(0x3E3851ECu), v8[9]);
  *(float32x2_t *)a4.f32 = vmla_f32(vmul_f32(a6, *(float32x2_t *)a4.f32), *(float32x2_t *)&a5, a7);
  LODWORD(a5) = 1043878380;
  *(float32x2_t *)&v9.u32[2] = vmla_f32(*(float32x2_t *)a4.f32, *(float32x2_t *)&a5, a8);
  *(float32x2_t *)a4.f32 = v8[11];
  a4.i32[2] = v8[12].i32[0];
  result = vaddq_f32(v9, a4);
  *(_DWORD *)(a3 + 8) = result.i32[2];
  *(_QWORD *)a3 = result.i64[0];
  return result;
}

uint64_t sub_223A5BCE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorIN3cva6Matri"
                     "xIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11PixelOriginE1EEERKNS5_1"
                     "5SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_6FormatE3ENSP_13DynamicBufferELNS"
                     "P_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILSR_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15"
                     "_bNS0_16MappingAttributeENS3_8optionalIhEERKNS4_INS_3acv16surfacedetection24ContinuousTrackingResul"
                     "tENS8_IS1B_EEEEPKNS0_5frame17KeyframePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10Block"
                     "TableEiRNS3_3setIjNS3_4lessIjEENS8_IjEEEES1U_E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorI"
                                "N3cva6MatrixIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11P"
                                "ixelOriginE1EEERKNS5_15SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_"
                                "6FormatE3ENSP_13DynamicBufferELNSP_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILS"
                                "R_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15_bNS0_16MappingAttributeENS3_8optionalIhEERK"
                                "NS4_INS_3acv16surfacedetection24ContinuousTrackingResultENS8_IS1B_EEEEPKNS0_5frame17Keyf"
                                "ramePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10BlockTableEiRNS3_3setIjNS3_"
                                "4lessIjEENS8_IjEEEES1U_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11PixelOriginE1EEERKNS5_15SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_6FormatE3ENSP_13DynamicBufferELNSP_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILSR_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15_bNS0_16MappingAttributeENS3_8optionalIhEERKNS4_INS_3acv16surfacedetection24ContinuousTrackingResultENS8_IS1B_EEEEPKNS0_5frame17KeyframePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10BlockTableEiRNS3_3setIjNS3_4lessIjEENS8_IjEEEES1U_E3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm20VolumetricIntegrator29IntegrateFrameInternalGenericERKNSt3__16vectorIN3cva6MatrixIiLj3ELj1ELb0EEENS3_9allocatorIS7_EEEERKNS_3kit3cam13PinholeCameraIfLNSE_11PixelOriginE1EEERKNS5_15SE3GroupStorageIfNS6_IfLj4ELj4ELb1EEEEERKNSD_3img9ImageViewILNSP_6FormatE3ENSP_13DynamicBufferELNSP_10MutabilityE0EEESW_RKNSQ_ILSR_4ESS_LST_0EEERKNSQ_ILSR_31ESS_LST_0EEERKNSQ_ILSR_38ESS_LST_0EEES15_bNS0_16MappingAttributeENS3_8optionalIhEERKNS4_INS_3acv16surfacedetection24ContinuousTrackingResultENS8_IS1B_EEEEPKNS0_5frame17KeyframePlaneDataEPKNS1G_30FrameBundlePlaneDetectorResultERNS1_10BlockTableEiRNS3_3setIjNS3_4lessIjEENS8_IjEEEES1U_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A5BD50()
{
  return &unk_24EC5E340;
}

uint64_t *sub_223A5BD5C(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t *result;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v7 = a3;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  result = sub_22353408C(a1 + 1, &v7);
  if (result)
  {
    v5 = result;
    v6 = *((unsigned int *)result + 8);
    if (*(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v6) / 0x1F)) + 132 * ((a1[10] + v6) % 0x1F) + 20))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 706, (uint64_t)"!metadata_blocks_[iter->second].IsErased()", 42, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_11;
      }
      v6 = *((unsigned int *)v5 + 8);
    }
    if ((a1[11] > v6
       || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))&& (!*(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v6) / 0x1F)) + 132 * ((a1[10] + v6) % 0x1F) + 20)|| !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      return (uint64_t *)(*(_QWORD *)(a1[18] + (((a1[21] + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
                       + 2936 * ((*((_DWORD *)a1 + 42) + (_DWORD)v6) & 0xF));
    }
LABEL_11:
    abort();
  }
  return result;
}

void sub_223A5BF34(uint64_t *a1, uint64_t a2)
{
  std::string::size_type v3;
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::logic_error *exception;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  std::string v17;

  if (*(_DWORD *)(a2 + 56) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_223211100(a2);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24EC1E3A8, MEMORY[0x24BEDAB88]);
  }
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v17.__r_.__value_.__r.__words[0] = v3;
  v17.__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v15 = v3;
    v16 = (std::__shared_weak_count *)v4;
    do
      v7 = __ldxr(v5);
    while (__stxr(v7 + 1, v5));
  }
  else
  {
    v15 = v3;
    v16 = 0;
  }
  sub_223211434(a1, (uint64_t *)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
  if (v17.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_223A5C08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t *sub_223A5C0E0@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t **a7@<X8>)
{
  uint64_t *v11;
  uint64_t *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;

  if (result != a2)
  {
    v11 = a3;
    if (a3 != a4)
    {
      v12 = result;
      while (1)
      {
        v13 = *((_DWORD *)v12 + 7);
        v14 = *((_DWORD *)v11 + 7);
        if (v13 >= v14)
          break;
        v15 = (uint64_t *)v12[1];
        if (v15)
        {
          do
          {
            v12 = v15;
            v15 = (uint64_t *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = v12;
            v12 = (uint64_t *)v12[2];
          }
          while ((uint64_t *)*v12 != v16);
        }
LABEL_29:
        if (v12 == a2 || v11 == a4)
          goto LABEL_31;
      }
      if (v14 < v13)
      {
LABEL_25:
        v26 = (uint64_t *)v11[1];
        if (v26)
        {
          do
          {
            v11 = v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = v11;
            v11 = (uint64_t *)v11[2];
          }
          while ((uint64_t *)*v11 != v27);
        }
        goto LABEL_29;
      }
      result = sub_223A3C618(a5, a6, &v29, &v28, (unsigned int *)v12 + 7);
      v17 = *result;
      if (*result)
      {
        v18 = *(uint64_t **)(v17 + 8);
        if (!v18)
        {
          do
          {
LABEL_19:
            a6 = *(uint64_t **)(v17 + 16);
            v23 = *a6 == v17;
            v17 = (uint64_t)a6;
          }
          while (!v23);
LABEL_21:
          v24 = (uint64_t *)v12[1];
          if (v24)
          {
            do
            {
              v12 = v24;
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = v12;
              v12 = (uint64_t *)v12[2];
            }
            while ((uint64_t *)*v12 != v25);
          }
          goto LABEL_25;
        }
      }
      else
      {
        v19 = result;
        v17 = (uint64_t)operator new(0x20uLL);
        *(_DWORD *)(v17 + 28) = *((_DWORD *)v12 + 7);
        v20 = v29;
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = v20;
        *v19 = v17;
        v21 = *(_QWORD **)*a5;
        v22 = (uint64_t *)v17;
        if (v21)
        {
          *a5 = (uint64_t)v21;
          v22 = (uint64_t *)*v19;
        }
        result = sub_2231A9A8C((uint64_t *)a5[1], v22);
        ++a5[2];
        v18 = *(uint64_t **)(v17 + 8);
        if (!v18)
          goto LABEL_19;
      }
      do
      {
        a6 = v18;
        v18 = (uint64_t *)*v18;
      }
      while (v18);
      goto LABEL_21;
    }
  }
LABEL_31:
  *a7 = a2;
  a7[1] = a4;
  a7[2] = a5;
  a7[3] = a6;
  return result;
}

void sub_223A5C2B0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD v23[5];
  _QWORD *v24;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_223195210(v4);
  v23[0] = v4;
  v5 = *a2;
  if (v5 == 1)
    v6 = "Monitor";
  else
    v6 = "Update";
  if (v5 == 1)
    v7 = 7;
  else
    v7 = 6;
  sub_2231813E8((_QWORD *)(v4 + 16), (uint64_t)v6, v7);
  v8 = *(_DWORD *)(v4 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v4 + 112);
    v12 = *(_QWORD *)(v4 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v4 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v4 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_20;
    }
    v13 = *(const void **)(v4 + 40);
    v9 = *(_QWORD *)(v4 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_22316DBC0();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_19;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_19:
    memmove(v10, v13, v9);
LABEL_20:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v23[0];
  if (v23[0])
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v23[0] = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)(v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    *(_QWORD *)(v16 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v16 + 16) = v19;
    if (*(char *)(v16 + 111) < 0)
      operator delete(*(void **)(v16 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v16 + 128);
    MEMORY[0x227684CE8](v16, 0x10B2C40EED050F3);
  }
  v23[0] = a1;
  v23[1] = __dst;
  v23[2] = a1;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v20 == -1)
    sub_22316DD70();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24EC5E368[v20])(&v24, a1);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_223A5C520(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_223A5C544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A5C560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223A5C574(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD **a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  const char *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  const char *v26;
  size_t v27;
  void *v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v75;
  _QWORD v76[3];
  int v77;
  const char *v78;
  int v79;
  const char *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  void *object;
  void *v85[2];
  __int128 v86;
  void *__p[2];
  unint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;

  *(_QWORD *)a1 = &off_24EC5E3A8;
  v11 = a1 + 8;
  sub_223A631A0(a1 + 8, a2);
  v12 = *a3;
  if (*a3)
  {
    *a3 = 0;
  }
  else
  {
    v12 = operator new();
    object = 0;
    sub_223A4F004(v12, v11, (uint64_t *)&object);
    if (object)
      (*(void (**)(void *))(*(_QWORD *)object + 8))(object);
  }
  *(_QWORD *)(a1 + 304) = v12;
  v13 = *a4;
  if (*a4)
  {
    *a4 = 0;
  }
  else
  {
    v13 = (_QWORD *)operator new();
    *v13 = &off_24EC5E210;
    sub_223A53D18((uint64_t)(v13 + 1), v11);
  }
  *(_QWORD *)(a1 + 312) = v13;
  v14 = *a5;
  if (!*a5)
  {
    sub_223A6BB48((uint64_t)&object, v11);
    v17 = operator new();
    sub_223A6BCC0(v17, (__int128 *)&object);
    *(_QWORD *)(a1 + 320) = v17;
    v15 = (uint64_t *)(a1 + 328);
    v16 = *a6;
    if (*a6)
      goto LABEL_10;
LABEL_12:
    sub_223A39A60(v11, v15);
    goto LABEL_13;
  }
  *a5 = 0;
  *(_QWORD *)(a1 + 320) = v14;
  v15 = (uint64_t *)(a1 + 328);
  v16 = *a6;
  if (!*a6)
    goto LABEL_12;
LABEL_10:
  *a6 = 0;
  *v15 = v16;
LABEL_13:
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  *(_BYTE *)(a1 + 384) = 0;
  sub_2232BD040(a1 + 392);
  *(_BYTE *)(a1 + 2216) = 0;
  *(_BYTE *)(a1 + 2232) = 0;
  *(_BYTE *)(a1 + 2236) = 0;
  *(_BYTE *)(a1 + 2240) = 0;
  *(_QWORD *)(a1 + 2248) = 0;
  sub_223A5D178(&v83);
  if (**(int **)(v83 + 56) > 3)
    return a1;
  v18 = *(unsigned __int8 *)(v83 + 72);
  v19 = sub_22322F254(v83, "OSLogSurrogateAppender", 1, 0);
  v20 = v19;
  if (!v18 && !v19)
    return a1;
  v76[0] = &v83;
  v76[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v76[2] = std::chrono::system_clock::now().__d_.__rep_;
  v77 = 3;
  v78 = "unknown file";
  v79 = 229;
  v81 = 0;
  v82 = 0;
  v80 = "unknown function";
  v21 = v83;
  if (*(char *)(v83 + 39) < 0)
  {
    v23 = *(const char **)(v83 + 16);
    v22 = *(_QWORD *)(v83 + 24);
    v75 = *(_QWORD *)v76[0] + 16;
    v25 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v25 & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v22 = *(unsigned __int8 *)(v83 + 39);
    v23 = (const char *)(*(_QWORD *)v76[0] + 16);
    v75 = (uint64_t)v23;
    v24 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v24 & 1) != 0)
      goto LABEL_20;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)&object);
    sub_223199C58("com.apple.cv3d", (unint64_t)&object, &xmmword_255788F40);
    if ((_BYTE)v86 && SHIBYTE(v85[1]) < 0)
      operator delete(object);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_20:
  if (byte_255788F57 >= 0)
    v26 = (const char *)&xmmword_255788F40;
  else
    v26 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v27 = byte_255788F57;
  else
    v27 = *((_QWORD *)&xmmword_255788F40 + 1);
  object = os_log_create(v26, v23);
  v28 = v85;
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v27 >= 0x17)
  {
    v29 = v20;
    v30 = v23;
    v31 = v21;
    v32 = v18;
    v33 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v33 = v27 | 7;
    v34 = v33 + 1;
    v28 = operator new(v33 + 1);
    v85[1] = (void *)v27;
    *(_QWORD *)&v86 = v34 | 0x8000000000000000;
    v85[0] = v28;
    v18 = v32;
    v21 = v31;
    v23 = v30;
    v20 = v29;
    goto LABEL_33;
  }
  BYTE7(v86) = v27;
  if (v27)
LABEL_33:
    memmove(v28, v26, v27);
  *((_BYTE *)v28 + v27) = 0;
  BYTE8(v86) = 1;
  v35 = __p;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v22 >= 0x17)
  {
    v37 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v37 = v22 | 7;
    v38 = v37 + 1;
    v35 = operator new(v37 + 1);
    __p[1] = (void *)v22;
    v88 = v38 | 0x8000000000000000;
    __p[0] = v35;
  }
  else
  {
    HIBYTE(v88) = v22;
    if (!v22)
    {
      LOBYTE(__p[0]) = 0;
      v89 = 1;
      v36 = object;
      if ((SHIBYTE(v88) & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_44;
    }
  }
  memmove(v35, v23, v22);
  *((_BYTE *)v35 + v22) = 0;
  v89 = 1;
  v36 = object;
  if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
LABEL_38:
    if (!BYTE8(v86))
      goto LABEL_47;
LABEL_45:
    if (SBYTE7(v86) < 0)
      operator delete(v85[0]);
    goto LABEL_47;
  }
LABEL_44:
  operator delete(__p[0]);
  if (BYTE8(v86))
    goto LABEL_45;
LABEL_47:
  if (object)
    os_release(object);
  if (v20 && *(_QWORD *)(v20 + 24))
  {
    v39 = _os_log_pack_size();
    v40 = (std::__shared_weak_count_vtbl *)operator new(v39, (std::align_val_t)8uLL);
    v41 = (std::__shared_weak_count *)operator new();
    v42 = v41;
    v41->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    v41->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v41->__shared_weak_owners_ = 0;
    v41[1].__vftable = v40;
    object = v40;
    v85[0] = v40;
    v85[1] = v41;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
    v86 = 0uLL;
    __p[0] = 0;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v42);
    }
    v46 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v47 = operator new();
    v48 = *(unsigned __int8 *)(v21 + 39);
    v49 = v75;
    if ((v48 & 0x80u) != 0)
    {
      v49 = *(_QWORD *)(v21 + 16);
      v48 = *(_QWORD *)(v21 + 24);
    }
    *(_QWORD *)v47 = v46;
    *(_OWORD *)(v47 + 8) = *(_OWORD *)v85;
    v85[0] = 0;
    v85[1] = 0;
    *(_OWORD *)(v47 + 24) = v86;
    v86 = 0uLL;
    *(_QWORD *)(v47 + 40) = v49;
    *(_QWORD *)(v47 + 48) = v48;
    *(_BYTE *)(v47 + 56) = 1;
    v90 = 0;
    v91 = v47;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v20 + 24) + 40))(*(_QWORD *)(v20 + 24), &v91);
    v50 = v91;
    v91 = 0;
    if (v50)
    {
      v51 = *(std::__shared_weak_count **)(v50 + 32);
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = *(std::__shared_weak_count **)(v50 + 16);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      MEMORY[0x227684CE8](v50, 0x10F0C40B62ED6C6);
      v57 = v90;
      v90 = 0;
      if (v57)
      {
        v58 = *(std::__shared_weak_count **)(v57 + 32);
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)(v57 + 16);
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        MEMORY[0x227684CE8](v57, 0x10F0C40B62ED6C6);
      }
    }
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v67 = (std::__shared_weak_count *)v85[1];
    if (v85[1])
    {
      v68 = (unint64_t *)((char *)v85[1] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
  else
  {
    os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
    LOWORD(object) = 0;
    v70 = (void *)_os_log_send_and_compose_impl();
    if (v70)
      free(v70);
  }
  if (v18)
  {
    sub_22322C138((uint64_t)v76, "VLM:Initializing");
    sub_223182C08((uint64_t)v76);
  }
  sub_223182C08((uint64_t)v76);
  v71 = v82;
  if (v82)
  {
    v72 = (unint64_t *)&v82->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  return a1;
}

void sub_223A5CDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13, _QWORD **a14, uint64_t *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a17);
  sub_223A5D26C(v37 + 281);
  sub_2232555B8(a12);
  sub_223198030((uint64_t)(v37 + 45), *a13);
  sub_223198030((uint64_t)(v37 + 42), *a14);
  v39 = *a15;
  *a15 = 0;
  if (v39)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v37[40];
    v37[40] = 0;
    if (!v40)
    {
LABEL_6:
      v41 = v37[39];
      v37[39] = 0;
      if (!v41)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else
  {
    v40 = v37[40];
    v37[40] = 0;
    if (!v40)
      goto LABEL_6;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = v37[39];
  v37[39] = 0;
  if (!v41)
  {
LABEL_7:
    v42 = v37[38];
    v37[38] = 0;
    if (!v42)
      goto LABEL_8;
    goto LABEL_12;
  }
LABEL_11:
  (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = v37[38];
  v37[38] = 0;
  if (!v42)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_12:
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  _Unwind_Resume(a1);
}

uint64_t sub_223A5D068(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  v4 = 0;
  v5 = 0;
  sub_223A5C574(a1, a2, &v7, &v6, &v5, &v4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_223A5D0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v13 = a10;
    if (!a10)
    {
LABEL_3:
      v14 = a11;
      if (!a11)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v13 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = a11;
  if (!a11)
  {
LABEL_4:
    v15 = a12;
    if (!a12)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = a12;
  if (!a12)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

void sub_223A5D178(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CCCC8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCCC8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3dapi.recon3d");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CCCC0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CCCC8);
  }
  *a1 = qword_2540CCCC0;
}

void sub_223A5D214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CCCC8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CCCC8);
  _Unwind_Resume(a1);
}

uint64_t *sub_223A5D26C(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1020C40648E76B4);
  }
  return a1;
}

void sub_223A5D2F0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  const char *v16;
  size_t v17;
  void *v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD v65[3];
  int v66;
  const char *v67;
  int v68;
  const char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  void *object;
  void *v74[2];
  __int128 v75;
  void *__p[2];
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 304) + 24))(*(_QWORD *)(a1 + 304));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 24))(*(_QWORD *)(a1 + 312));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 24))(*(_QWORD *)(a1 + 320));
  sub_223198030(a1 + 336, *(_QWORD **)(a1 + 344));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  sub_223198030(a1 + 360, *(_QWORD **)(a1 + 368));
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  *(_BYTE *)(a1 + 384) = 0;
  bzero(&object, 0x720uLL);
  sub_2232BD040((uint64_t)&object);
  sub_22347F36C(a1 + 392, (uint64_t)&object);
  sub_2232555B8((uint64_t)&object);
  if (*(_BYTE *)(a1 + 2232))
    *(_BYTE *)(a1 + 2232) = 0;
  if (*(_BYTE *)(a1 + 2240))
    *(_BYTE *)(a1 + 2240) = 0;
  v2 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1020C40648E76B4);
  }
  sub_223A5D178(&v72);
  if (**(int **)(v72 + 56) <= 3)
  {
    v6 = *(unsigned __int8 *)(v72 + 72);
    v7 = sub_22322F254(v72, "OSLogSurrogateAppender", 1, 0);
    if (v6 || v7 != 0)
    {
      v9 = v7;
      v65[0] = &v72;
      v65[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v65[2] = std::chrono::system_clock::now().__d_.__rep_;
      v66 = 3;
      v67 = "unknown file";
      v68 = 243;
      v70 = 0;
      v71 = 0;
      v69 = "unknown function";
      v10 = v72;
      v11 = v72 + 16;
      if (*(char *)(v72 + 39) < 0)
      {
        v13 = *(const char **)(v72 + 16);
        v12 = *(_QWORD *)(v72 + 24);
        v15 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v15 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        v12 = *(unsigned __int8 *)(v72 + 39);
        v13 = (const char *)(*(_QWORD *)v65[0] + 16);
        v14 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v14 & 1) != 0)
          goto LABEL_21;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&object);
        sub_223199C58("com.apple.cv3d", (unint64_t)&object, byte_255788F40);
        if ((_BYTE)v75 && SHIBYTE(v74[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_21:
      if (byte_255788F40[23] >= 0)
        v16 = byte_255788F40;
      else
        v16 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v17 = byte_255788F40[23];
      else
        v17 = *(_QWORD *)&byte_255788F40[8];
      object = os_log_create(v16, v13);
      v18 = v74;
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v17 >= 0x17)
      {
        v19 = v9;
        v20 = v13;
        v21 = v10;
        v22 = v6;
        v23 = v11;
        v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v24 = v17 | 7;
        v25 = v24 + 1;
        v18 = operator new(v24 + 1);
        v74[1] = (void *)v17;
        *(_QWORD *)&v75 = v25 | 0x8000000000000000;
        v74[0] = v18;
        v11 = v23;
        v6 = v22;
        v10 = v21;
        v13 = v20;
        v9 = v19;
      }
      else
      {
        BYTE7(v75) = v17;
        if (!v17)
        {
LABEL_35:
          *((_BYTE *)v18 + v17) = 0;
          BYTE8(v75) = 1;
          v26 = __p;
          if (v12 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v12 >= 0x17)
          {
            v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v12 | 7) != 0x17)
              v28 = v12 | 7;
            v29 = v28 + 1;
            v26 = operator new(v28 + 1);
            __p[1] = (void *)v12;
            v77 = v29 | 0x8000000000000000;
            __p[0] = v26;
          }
          else
          {
            HIBYTE(v77) = v12;
            if (!v12)
            {
              LOBYTE(__p[0]) = 0;
              v78 = 1;
              v27 = object;
              if ((SHIBYTE(v77) & 0x80000000) == 0)
                goto LABEL_39;
              goto LABEL_45;
            }
          }
          memmove(v26, v13, v12);
          *((_BYTE *)v26 + v12) = 0;
          v78 = 1;
          v27 = object;
          if ((SHIBYTE(v77) & 0x80000000) == 0)
          {
LABEL_39:
            if (!BYTE8(v75))
              goto LABEL_48;
            goto LABEL_46;
          }
LABEL_45:
          operator delete(__p[0]);
          if (!BYTE8(v75))
          {
LABEL_48:
            if (object)
              os_release(object);
            if (v9 && *(_QWORD *)(v9 + 24))
            {
              v30 = _os_log_pack_size();
              v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
              v32 = (std::__shared_weak_count *)operator new();
              v33 = v32;
              v32->__shared_owners_ = 0;
              v34 = (unint64_t *)&v32->__shared_owners_;
              v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
              v32->__shared_weak_owners_ = 0;
              v32[1].__vftable = v31;
              object = v31;
              v74[0] = v31;
              v74[1] = v32;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
              v75 = 0uLL;
              __p[0] = 0;
              do
                v36 = __ldaxr(v34);
              while (__stlxr(v36 - 1, v34));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v33);
              }
              v37 = object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v38 = operator new();
              v39 = *(unsigned __int8 *)(v10 + 39);
              if ((v39 & 0x80u) == 0)
                v40 = v11;
              else
                v40 = *(_QWORD *)(v10 + 16);
              if ((v39 & 0x80u) != 0)
                v39 = *(_QWORD *)(v10 + 24);
              *(_QWORD *)v38 = v37;
              *(_OWORD *)(v38 + 8) = *(_OWORD *)v74;
              v74[0] = 0;
              v74[1] = 0;
              *(_OWORD *)(v38 + 24) = v75;
              v75 = 0uLL;
              *(_QWORD *)(v38 + 40) = v40;
              *(_QWORD *)(v38 + 48) = v39;
              *(_BYTE *)(v38 + 56) = 1;
              v79 = 0;
              v80 = v38;
              (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), &v80);
              v41 = v80;
              v80 = 0;
              if (v41)
              {
                v42 = *(std::__shared_weak_count **)(v41 + 32);
                if (v42)
                {
                  v43 = (unint64_t *)&v42->__shared_owners_;
                  do
                    v44 = __ldaxr(v43);
                  while (__stlxr(v44 - 1, v43));
                  if (!v44)
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                }
                v45 = *(std::__shared_weak_count **)(v41 + 16);
                if (v45)
                {
                  v46 = (unint64_t *)&v45->__shared_owners_;
                  do
                    v47 = __ldaxr(v46);
                  while (__stlxr(v47 - 1, v46));
                  if (!v47)
                  {
                    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                    std::__shared_weak_count::__release_weak(v45);
                  }
                }
                MEMORY[0x227684CE8](v41, 0x10F0C40B62ED6C6);
                v48 = v79;
                v79 = 0;
                if (v48)
                {
                  v49 = *(std::__shared_weak_count **)(v48 + 32);
                  if (v49)
                  {
                    v50 = (unint64_t *)&v49->__shared_owners_;
                    do
                      v51 = __ldaxr(v50);
                    while (__stlxr(v51 - 1, v50));
                    if (!v51)
                    {
                      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                      std::__shared_weak_count::__release_weak(v49);
                    }
                  }
                  v52 = *(std::__shared_weak_count **)(v48 + 16);
                  if (v52)
                  {
                    v53 = (unint64_t *)&v52->__shared_owners_;
                    do
                      v54 = __ldaxr(v53);
                    while (__stlxr(v54 - 1, v53));
                    if (!v54)
                    {
                      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                      std::__shared_weak_count::__release_weak(v52);
                    }
                  }
                  MEMORY[0x227684CE8](v48, 0x10F0C40B62ED6C6);
                }
              }
              v55 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
              if (*((_QWORD *)&v75 + 1))
              {
                v56 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v58 = (std::__shared_weak_count *)v74[1];
              if (v74[1])
              {
                v59 = (unint64_t *)((char *)v74[1] + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
            }
            else
            {
              os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
              LOWORD(object) = 0;
              v61 = (void *)_os_log_send_and_compose_impl();
              if (v61)
                free(v61);
            }
            if (v6)
            {
              sub_22322C138((uint64_t)v65, "VLM:Reset");
              sub_223182C08((uint64_t)v65);
            }
            sub_223182C08((uint64_t)v65);
            v62 = v71;
            if (v71)
            {
              v63 = (unint64_t *)&v71->__shared_owners_;
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            return;
          }
LABEL_46:
          if (SBYTE7(v75) < 0)
            operator delete(v74[0]);
          goto LABEL_48;
        }
      }
      memmove(v18, v16, v17);
      goto LABEL_35;
    }
  }
}

void sub_223A5DAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_223A5DB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_22319A054((uint64_t *)(v3 - 96));
  sub_22319A054((uint64_t *)(v3 - 104));
  sub_223199DE8((uint64_t)va1);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A5DB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x227684CE8](v3, 0x10D0C40B950D02ALL);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A5DB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A5DB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_223182DAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A5DBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_223182DAC((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_223A5DBE8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 304);
  v3 = (_QWORD *)a2[3];
  if (!v3)
  {
    v10 = 0;
    v4 = (_QWORD *)(v2 + 72);
    goto LABEL_9;
  }
  if (v3 == a2)
  {
    v10 = v9;
    (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v9);
    v3 = v10;
    v4 = (_QWORD *)(v2 + 72);
    if (v10)
      goto LABEL_7;
LABEL_9:
    v12 = v3;
    goto LABEL_10;
  }
  v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
  v10 = v3;
  v4 = (_QWORD *)(v2 + 72);
  if (!v3)
    goto LABEL_9;
LABEL_7:
  if (v3 != v9)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    goto LABEL_9;
  }
  v12 = v11;
  (*(void (**)(_QWORD *, _QWORD *))(v9[0] + 24))(v9, v11);
LABEL_10:
  sub_223A62E6C(v11, v4);
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_15;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_15:
  result = v10;
  if (v10 == v9)
  {
    v8 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_223A5DD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A5DDA0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_24EC5E3A8;
  v2 = *(_QWORD *)(a1 + 2248);
  *(_QWORD *)(a1 + 2248) = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1020C40648E76B4);
  }
  sub_2232555B8(a1 + 392);
  sub_223198030(a1 + 360, *(_QWORD **)(a1 + 368));
  sub_223198030(a1 + 336, *(_QWORD **)(a1 + 344));
  v6 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_223A5DEB4(uint64_t a1)
{
  sub_223A5DDA0(a1);
  JUMPOUT(0x227684CE8);
}

__n128 sub_223A5DED8(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __n128 result;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (*(_BYTE *)(a1 + 252))
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = v8 + 2424;
      v10 = *(_QWORD *)(v8 + 2424);
      if (!v10)
        goto LABEL_13;
      v11 = v8 + 2424;
      do
      {
        v12 = sub_22319835C((unsigned __int8 *)(v10 + 25), (unsigned __int8 *)a3);
        if (v12 >= 0)
          v13 = (uint64_t *)v10;
        else
          v13 = (uint64_t *)(v10 + 8);
        if (v12 >= 0)
          v11 = v10;
        v10 = *v13;
      }
      while (*v13);
      if (v11 == v9 || (sub_22319835C((unsigned __int8 *)a3, (unsigned __int8 *)(v11 + 25)) & 0x80) != 0)
LABEL_13:
        v11 = v9;
      *(_BYTE *)(a1 + 384) = v11 != v9;
    }
    if (!*(_BYTE *)(a1 + 2232)
      || (*(_QWORD *)(a1 + 2216) == *(_QWORD *)a3 ? (v14 = *(_QWORD *)(a1 + 2224) == *(_QWORD *)(a3 + 8)) : (v14 = 0),
          !v14))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapper.cpp", 277, (uint64_t)"cluster_id_.cluster_id && *cluster_id_.cluster_id == cluster_id", 63, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
    v15 = operator new();
    v16 = v15;
    v17 = *a2;
    v18 = (std::__shared_weak_count *)a2[1];
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      *(_QWORD *)v15 = v17;
      *(_QWORD *)(v15 + 8) = v18;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      v22 = *a4;
      v23 = a4[1];
      *(_OWORD *)(v15 + 16) = *(_OWORD *)a3;
      *(_OWORD *)(v15 + 32) = v22;
      result = (__n128)a4[2];
      v25 = a4[3];
      *(_OWORD *)(v15 + 48) = v23;
      *(__n128 *)(v15 + 64) = result;
      *(_OWORD *)(v15 + 80) = v25;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v27 = *(_QWORD *)(a1 + 2248);
      *(_QWORD *)(a1 + 2248) = v16;
      if (v27)
      {
LABEL_31:
        v28 = *(std::__shared_weak_count **)(v27 + 8);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        JUMPOUT(0x227684CE8);
      }
    }
    else
    {
      *(_QWORD *)v15 = v17;
      *(_QWORD *)(v15 + 8) = 0;
      v31 = *a4;
      v32 = a4[1];
      *(_OWORD *)(v15 + 16) = *(_OWORD *)a3;
      *(_OWORD *)(v15 + 32) = v31;
      result = (__n128)a4[2];
      v33 = a4[3];
      *(_OWORD *)(v15 + 48) = v32;
      *(__n128 *)(v15 + 64) = result;
      *(_OWORD *)(v15 + 80) = v33;
      v27 = *(_QWORD *)(a1 + 2248);
      *(_QWORD *)(a1 + 2248) = v15;
      if (v27)
        goto LABEL_31;
    }
  }
  return result;
}

float sub_223A5E108(uint64_t a1, double a2)
{
  BOOL v4;
  BOOL v5;
  float result;

  v4 = a2 < 0.0 || a2 > 255.0;
  if (v4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapper.cpp", 285, (uint64_t)"(new_weight >= 0 && new_weight <= std::numeric_limits<SdfVoxel::WeightType>::max())", 83, (uint64_t)"Invalid weight value", 20, (void (*)(void **))sub_22457406C)|| (a2 > 0.0 ? (v5 = a2 > 255.0) : (v5 = 1), v5&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapperConfig.cpp", 42, (uint64_t)"max_weight > 0. && max_weight <= static_cast<double>(std::numeric_limits<SDFConfig::VoxelWeightType>::max())", 108, (uint64_t)"Maximum voxel weight should be in range [0,255]", 47, (void (*)(void **))sub_22457406C)))
  {
    abort();
  }
  result = a2;
  *(float *)(a1 + 20) = result;
  *(float *)(*(_QWORD *)(a1 + 312) + 24) = result;
  return result;
}

uint64_t sub_223A5E1DC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 112) = *(_BYTE *)(result + 113) & a2;
  *(_BYTE *)(*(_QWORD *)(result + 320) + 17) = *(_BYTE *)(*(_QWORD *)(result + 320) + 16) & a2;
  return result;
}

void sub_223A5E1FC(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  BOOL v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];
  std::__shared_weak_count *v11;
  _OWORD v12[112];
  uint64_t (**v13)();
  uint64_t v14;
  std::__shared_weak_count *v15;
  _OWORD v16[2];
  char v17;

  if (*(_BYTE *)(a2 + 56))
  {
    if (*(_DWORD *)(a2 + 32))
      v6 = *(_DWORD *)(a2 + 36) == 0;
    else
      v6 = 1;
    if (v6
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2, (uint64_t)v10);
    v7 = v11;
    v13 = &off_24EC200A8;
    v14 = v10[1];
    v15 = v11;
    v16[0] = v12[0];
    *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v12 + 10);
    v17 = 1;
    kdebug_trace();
    sub_223481BB8(a1 + 392, a2);
    sub_223257000((uint64_t)v10, a2);
    kdebug_trace();
    sub_2232568B4((uint64_t)a3, (uint64_t)v10);
    a3[1824] = 1;
    sub_2232555B8((uint64_t)v10);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[1824] = 0;
  }
}

void sub_223A5E3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231BD90C(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_223A5E3CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2231BD90C(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_223A5E3E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *__p;
  void *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v10 = (double)*(uint64_t *)(a2 + 1232) / 1000000000.0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = 728301600;
  kdebug_trace();
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_223A4FAC8(*(_QWORD *)(a1 + 304), a2, a2 + 1336, a3, &__p);
  sub_223A55978(*(_QWORD *)(a1 + 312), a2, (uint64_t)&__p, a3 + 2, (uint64_t **)(a1 + 336));
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return kdebug_trace();
}

void sub_223A5E4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
    operator delete(__p);
  sub_2231874DC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_223A5E4F8(uint64_t a1, float32x4_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  float32x4_t *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int32x2_t *v15;
  unint64_t v16;
  void **v17;
  size_t v18;
  std::chrono::steady_clock::time_point v19;
  uint64_t v20;
  float32x2_t v21;
  __int128 *p_dst;
  uint64_t v23;
  _OWORD *v24;
  uint64_t **v25;
  __int32 v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  unsigned int v32;
  BOOL v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  unsigned int v38;
  _QWORD *v39;
  _OWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  std::mutex *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  int v49;
  size_t v50;
  unint64_t v51;
  std::string::value_type *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void **v56;
  uint64_t *v57;
  void *v58;
  std::string::size_type size;
  std::string *v60;
  std::string::size_type v61;
  std::string::size_type v62;
  int v63;
  BOOL v64;
  __n128 *v66;
  std::string *v67;
  size_t v68;
  float v69;
  int v70;
  size_t v71;
  unint64_t v72;
  std::string::value_type *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void **v77;
  std::string *v78;
  std::string::size_type v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  std::mutex *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  unint64_t v88;
  __int128 *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  __n128 *v95;
  __int128 *v96;
  size_t v97;
  float v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t **v101;
  __int32 v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned int v108;
  BOOL v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  unsigned int v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  std::mutex *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  unint64_t v125;
  __int128 *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  __n128 *v132;
  __int128 *v133;
  size_t v134;
  float v135;
  float32x2_t v136;
  float32x4_t v137;
  BOOL v138;
  float32x4_t **v139;
  char v140;
  float32x4_t *v141;
  BOOL v142;
  uint64_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x2_t v146;
  int8x16_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x2_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  int8x16_t v162;
  float32x2_t v163;
  double v164;
  _DWORD *v165;
  float32x4_t *v166;
  unsigned __int8 *v167;
  unsigned int v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  unsigned int v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  std::mutex *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  float v190;
  unint64_t v191;
  __int128 *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  __n128 *v198;
  __int128 *v199;
  size_t v200;
  float v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  std::mutex *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  float v210;
  unint64_t v211;
  uint64_t v212;
  __int128 *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  __n128 *v219;
  __int128 *v220;
  size_t v221;
  float v222;
  uint64_t *v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unsigned __int8 *v230;
  uint64_t *v231;
  uint64_t *v232;
  unsigned __int8 *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t *v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  uint64_t v240;
  uint64_t *v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  _QWORD *v244;
  int32x4_t v245;
  int32x4_t v246;
  float32x4_t v247;
  int8x16_t v248;
  float32x4_t v249;
  int8x16_t v250;
  int8x16_t v251;
  float32x2_t v252;
  float32x4_t v253;
  uint64_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  uint64_t v260;
  float32x2_t v261;
  float32x2_t v262;
  float32x2_t v263;
  int8x16_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x2_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int8x16_t v277;
  float32x4_t v278;
  float *v279;
  int8x16_t v280;
  float32x2_t v281;
  double v282;
  _DWORD *v283;
  uint64_t *v284;
  uint64_t *v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  float32x4_t *v290;
  float v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  std::chrono::steady_clock::time_point v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  std::mutex *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  float v304;
  unint64_t v305;
  void **v306;
  uint64_t *v307;
  void *v308;
  std::string::size_type v309;
  std::string *v310;
  std::string::size_type v311;
  std::string::size_type v312;
  int v313;
  __n128 *v316;
  std::string *v317;
  size_t v318;
  float v319;
  unint64_t v320;
  void **v321;
  void **v322;
  uint64_t v323;
  _BOOL4 v324;
  uint64_t v325;
  double v326;
  _DWORD *v327;
  uint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  float32x4_t *v332;
  unsigned __int8 *v333;
  unsigned __int8 *v334;
  unsigned __int8 *v335;
  unsigned int v336;
  unsigned __int8 *v337;
  unsigned __int8 *v338;
  unsigned __int8 *v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  float *v344;
  float32x4_t *v345;
  float v346;
  unsigned int v347;
  unsigned int v348;
  unsigned int v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  std::mutex *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  float v357;
  std::string::size_type v358;
  std::string *v359;
  std::string::size_type v360;
  std::string::size_type v361;
  int v362;
  __n128 *v365;
  std::string *v366;
  size_t v367;
  float v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  std::mutex *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  float v376;
  std::string::size_type v377;
  std::string *v378;
  std::string::size_type v379;
  std::string::size_type v380;
  int v381;
  __n128 *v384;
  std::string *v385;
  size_t v386;
  float v387;
  int32x2_t *v389;
  std::chrono::steady_clock::time_point v390;
  uint64_t *v391;
  uint64_t v392;
  _QWORD *v393;
  std::chrono::steady_clock::time_point v395;
  float32x4_t *v396;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t **v398;
  uint64_t v399;
  uint64_t v400;
  std::string v401;
  _QWORD **v402;
  _QWORD *v403[2];
  __int128 v404;
  uint64_t v405;
  double v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  std::string __p;
  float v413;
  std::string v414;
  __int128 v415;
  uint64_t v416;
  void *v417[2];
  uint64_t v418;
  std::string v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422[2];
  float32x4_t v423;
  __int128 __dst;
  __int128 v425;
  _DWORD v426[6];
  uint64_t v427;

  v427 = *MEMORY[0x24BDAC8D0];
  if (a2[115].i8[8])
    v7 = a2[78].i64[1];
  else
    v7 = 0;
  v411 = v7;
  v8 = (float32x4_t *)(a1 + 2216);
  sub_223A62A3C((unsigned __int8 *)(a1 + 2216), (uint64_t)&v420);
  v406 = (double)v7 / 1000000000.0;
  if (v421.i8[7] >= 0)
    v9 = (const char *)&v420;
  else
    v9 = (const char *)v420.i64[0];
  *(_QWORD *)&__dst = 0;
  v10 = strnlen(v9, 8uLL);
  memcpy(&__dst, v9, v10);
  v408 = 0;
  v409 = 0;
  v407 = __dst;
  v410 = 728301600;
  *(_QWORD *)&__dst = 0;
  v11 = strnlen(v9, 8uLL);
  memcpy(&__dst, v9, v11);
  kdebug_trace();
  if (v421.i8[7] < 0)
  {
    operator delete((void *)v420.i64[0]);
    v392 = (uint64_t)&a2[1].i64[1];
    if (!a2[115].i8[8])
      goto LABEL_12;
    goto LABEL_11;
  }
  v392 = (uint64_t)&a2[1].i64[1];
  if (a2[115].i8[8])
LABEL_11:
    sub_223481BB8(a1 + 392, v392);
LABEL_12:
  v391 = (uint64_t *)(a1 + 260);
  v12 = *(_QWORD *)(a1 + 2236);
  if ((v12 & 0xFF00000000) == 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapper.cpp", 343, (uint64_t)"bundle_id_.GetId().has_value()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v12 = *(_QWORD *)(a1 + 2236);
  }
  if ((v12 & 0xFF00000000) == 0)
    sub_22324A974();
  if (*(_BYTE *)(a1 + 2232))
  {
    v420 = *v8;
    v13 = a1;
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapper.cpp", 345, (uint64_t)"cluster_id_.GetId().has_value()", 31, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v14 = *(unsigned __int8 *)(a1 + 2232);
    v420 = *v8;
    v13 = a1;
    if (!v14)
      sub_22324A974();
  }
  v423 = v420;
  v399 = *(_QWORD *)(a3 + 120);
  v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v390.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v400 = v13;
  v396 = a2;
  v393 = a4;
  if (*(_BYTE *)(v13 + 252) && *(_BYTE *)(v13 + 384))
  {
    v15 = *(int32x2_t **)(v13 + 2248);
    LODWORD(v401.__r_.__value_.__l.__data_) = v12;
    v421.i32[2] = 0;
    sub_22319B83C((uint64_t)&__dst, (uint64_t)&v420, (unsigned __int8 *)&v15[2]);
    if (v421.i32[2] == -1)
      sub_22316DD70();
    v419.__r_.__value_.__r.__words[0] = (std::string::size_type)&v415;
    ((void (*)(__int128 *__return_ptr, std::string *, float32x4_t *))off_24EC5E420[v421.u32[2]])(&__dst, &v419, &v420);
    if (v421.i32[2] != -1)
      ((void (*)(std::string *, float32x4_t *))off_24EC5E408[v421.u32[2]])(&v419, &v420);
    v16 = BYTE7(v425);
    if (SBYTE7(v425) < 0)
      v16 = *((_QWORD *)&__dst + 1);
    if (v16 >= 4)
      v16 = 4;
    v418 = v425;
    *(_OWORD *)v417 = __dst;
    __dst = 0uLL;
    *(_QWORD *)&v425 = 0;
    if (SHIBYTE(v418) < 0)
    {
      v417[1] = (void *)v16;
      *((_BYTE *)v417[0] + v16) = 0;
      if ((SBYTE7(v425) & 0x80000000) == 0)
      {
LABEL_32:
        if (v418 >= 0)
          v17 = v417;
        else
          v17 = (void **)v417[0];
        v420.i64[0] = 0;
        v18 = strnlen((const char *)v17, 8uLL);
        memcpy(&v420, v17, v18);
        kdebug_trace();
        v19.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v20 = (uint64_t)*v15;
        v21 = *(float32x2_t *)(*(_QWORD *)v15 + 2272);
        LODWORD(v403[0]) = *(_DWORD *)(*(_QWORD *)v15 + 2280);
        v402 = (_QWORD **)v21;
        *(_QWORD *)&__dst = &off_24EC5E448;
        *((_QWORD *)&v425 + 1) = &__dst;
        sub_223C02B6C(v20, a4 + 57, (__int32 *)&v401, (unsigned __int8 *)&v15[2], v15 + 4, (float32x2_t *)&v402, (uint64_t)&__dst, (uint64_t)&v415);
        p_dst = (__int128 *)*((_QWORD *)&v425 + 1);
        if (*((__int128 **)&v425 + 1) == &__dst)
        {
          v23 = 4;
          p_dst = &__dst;
        }
        else
        {
          if (!*((_QWORD *)&v425 + 1))
            goto LABEL_42;
          v23 = 5;
        }
        (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v23))();
LABEL_42:
        rep = v19.__d_.__rep_;
        v24 = (_OWORD *)v415;
        if ((__int128 *)v415 != (__int128 *)((char *)&v415 + 8))
        {
          v25 = (uint64_t **)(v400 + 344);
          do
          {
            *(uint64_t *)((char *)v420.i64 + 4) = *(_QWORD *)((char *)v24 + 28);
            v26 = *((_DWORD *)v24 + 9);
            v420.i32[0] = (__int32)v401.__r_.__value_.__l.__data_;
            v420.i32[3] = v26;
            v27 = sub_22353408C(a4 + 3, (int *)&v420);
            if (v27)
            {
              v28 = *((_DWORD *)v27 + 8);
              v29 = *v25;
              if (*v25)
                goto LABEL_49;
            }
            else
            {
              v28 = -1;
              v29 = *v25;
              if (*v25)
              {
LABEL_49:
                v30 = (uint64_t *)(v400 + 344);
                v31 = v29;
                do
                {
                  v32 = *((_DWORD *)v31 + 7);
                  v33 = v32 >= v28;
                  if (v32 >= v28)
                    v34 = (uint64_t **)v31;
                  else
                    v34 = (uint64_t **)(v31 + 1);
                  if (v33)
                    v30 = v31;
                  v31 = *v34;
                }
                while (*v34);
                if (v30 != (uint64_t *)v25 && v28 >= *((_DWORD *)v30 + 7))
                {
                  v35 = (uint64_t *)v30[1];
                  v36 = v30;
                  if (v35)
                  {
                    do
                    {
                      v37 = v35;
                      v35 = (uint64_t *)*v35;
                    }
                    while (v35);
                  }
                  else
                  {
                    do
                    {
                      v37 = (uint64_t *)v36[2];
                      v64 = *v37 == (_QWORD)v36;
                      v36 = v37;
                    }
                    while (!v64);
                  }
                  if (*(uint64_t **)(v400 + 336) == v30)
                    *(_QWORD *)(v400 + 336) = v37;
                  --*(_QWORD *)(v400 + 352);
                  sub_2231AFE60(v29, v30);
                  operator delete(v30);
                }
              }
            }
            sub_2235196C0((uint64_t)(a4 + 2), (uint64_t)v24 + 28, (int)v401.__r_.__value_.__l.__data_);
            v38 = *((_DWORD *)v24 + 9) & 0xFFFFFFC0;
            v420.i64[0] = *(_QWORD *)((_BYTE *)v24 + 28) & 0xFFFFFFC0FFFFFFC0;
            v420.i32[2] = v38;
            sub_22397FD34((uint64_t **)(v400 + 360), (int *)&v420, (uint64_t)&v420);
            v39 = (_QWORD *)*((_QWORD *)v24 + 1);
            if (v39)
            {
              do
              {
                v40 = v39;
                v39 = (_QWORD *)*v39;
              }
              while (v39);
            }
            else
            {
              do
              {
                v40 = (_OWORD *)*((_QWORD *)v24 + 2);
                v64 = *(_QWORD *)v40 == (_QWORD)v24;
                v24 = v40;
              }
              while (!v64);
            }
            v24 = v40;
          }
          while (v40 != (__int128 *)((char *)&v415 + 8));
        }
        v420.i64[0] = (uint64_t)"cv3d.recon.";
        v420.i64[1] = 11;
        v421.i64[0] = (uint64_t)"Stats.KFCluster.Times.BoundaryTrim";
        v421.i64[1] = 34;
        sub_2231A9820((uint64_t)&v420, (uint64_t)v422, 0, 0, &v414);
        sub_224569D7C();
        sub_224569A80();
        if (!os_variant_has_internal_diagnostics())
          goto LABEL_100;
        v41 = sub_2241471F8();
        v42 = v41[2];
        if (!v42)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v42 = v41[2];
        }
        v43 = *(_QWORD *)(v42 + 64);
        v44 = (std::mutex *)(v43 + 32);
        std::mutex::lock((std::mutex *)(v43 + 32));
        v46 = *(_QWORD *)(v43 + 96);
        v45 = *(_QWORD *)(v43 + 104);
        std::mutex::unlock(v44);
        if (v46 == v45
          || (sub_2241471F8(),
              v47 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))(),
              !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47)))
        {
LABEL_100:
          v420 = 0u;
          v421 = 0u;
          v422[0].i32[0] = 728325624;
          kdebug_trace();
          size = HIBYTE(v414.__r_.__value_.__r.__words[2]);
          if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v414.__r_.__value_.__l.__size_;
          if (size < 0x11)
            goto LABEL_141;
          v60 = &v414;
          if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v60 = (std::string *)v414.__r_.__value_.__r.__words[0];
          v61 = v60->__r_.__value_.__r.__words[0];
          v62 = v60->__r_.__value_.__l.__size_;
          v63 = v60->__r_.__value_.__s.__data_[16];
          v64 = v61 == 0x6365722E64337663 && v62 == 0x73746174532E6E6FLL;
          if (!v64 || v63 != 46)
            goto LABEL_141;
          v66 = sub_223187510();
          if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v414;
          else
            v67 = (std::string *)v414.__r_.__value_.__r.__words[0];
          if ((v414.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v68 = HIBYTE(v414.__r_.__value_.__r.__words[2]);
          else
            v68 = v414.__r_.__value_.__l.__size_;
          v69 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
          std::chrono::steady_clock::now();
          *(float *)&__p.__r_.__value_.__l.__data_ = v69;
          v70 = SHIBYTE(v418);
          if (v418 >= 0)
            v71 = HIBYTE(v418);
          else
            v71 = (size_t)v417[1];
          v72 = v71 + 5;
          if (v71 + 5 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v72 >= 0x17)
          {
            v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v72 | 7) != 0x17)
              v74 = v72 | 7;
            v75 = v74 + 1;
            v76 = (char *)operator new(v74 + 1);
            v419.__r_.__value_.__l.__size_ = v71 + 5;
            v419.__r_.__value_.__r.__words[2] = v75 | 0x8000000000000000;
            v419.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
            *(_DWORD *)v76 = 1835627124;
            v73 = v76 + 5;
            v76[4] = 95;
          }
          else
          {
            HIDWORD(v419.__r_.__value_.__r.__words[1]) = 0;
            v419.__r_.__value_.__r.__words[2] = 0;
            *((_BYTE *)&v419.__r_.__value_.__s + 23) = v71 + 5;
            *(std::string::size_type *)((char *)v419.__r_.__value_.__r.__words + 4) = 95;
            v73 = &v419.__r_.__value_.__s.__data_[5];
            LODWORD(v419.__r_.__value_.__l.__data_) = 1835627124;
            if (!v71)
              goto LABEL_133;
          }
          if (v70 >= 0)
            v77 = v417;
          else
            v77 = (void **)v417[0];
          memmove(v73, v77, v71);
LABEL_133:
          v73[v71] = 0;
          if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v78 = &v419;
          else
            v78 = (std::string *)v419.__r_.__value_.__r.__words[0];
          if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v79 = HIBYTE(v419.__r_.__value_.__r.__words[2]);
          else
            v79 = v419.__r_.__value_.__l.__size_;
          sub_2231897A8((uint64_t *)v66, v67, v68, (float *)&__p, (uint64_t)v78, v79);
          a4 = v393;
          if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v419.__r_.__value_.__l.__data_);
LABEL_141:
          kdebug_trace();
          if (SHIBYTE(v414.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v414.__r_.__value_.__l.__data_);
          kdebug_trace();
          sub_223198030((uint64_t)&v415, *((_QWORD **)&v415 + 1));
          if (SHIBYTE(v418) < 0)
            operator delete(v417[0]);
          *(_BYTE *)(v400 + 384) = 0;
          goto LABEL_146;
        }
        v420 = 0u;
        v421 = 0u;
        v422[0].i32[0] = 728325608;
        kdebug_trace();
        v48 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v413 = v48;
        v49 = SHIBYTE(v418);
        if (v418 >= 0)
          v50 = HIBYTE(v418);
        else
          v50 = (size_t)v417[1];
        v51 = v50 + 5;
        if (v50 + 5 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v51 >= 0x17)
        {
          v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v51 | 7) != 0x17)
            v53 = v51 | 7;
          v54 = v53 + 1;
          v55 = (char *)operator new(v53 + 1);
          __p.__r_.__value_.__l.__size_ = v50 + 5;
          __p.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
          *(_DWORD *)v55 = 1835627124;
          v52 = v55 + 5;
          v55[4] = 95;
        }
        else
        {
          HIDWORD(__p.__r_.__value_.__r.__words[1]) = 0;
          __p.__r_.__value_.__r.__words[2] = 0;
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v50 + 5;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 95;
          v52 = &__p.__r_.__value_.__s.__data_[5];
          LODWORD(__p.__r_.__value_.__l.__data_) = 1835627124;
          if (!v50)
            goto LABEL_93;
        }
        if (v49 >= 0)
          v56 = v417;
        else
          v56 = (void **)v417[0];
        memmove(v52, v56, v50);
LABEL_93:
        v52[v50] = 0;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47))
        {
          v419 = __p;
          *(_QWORD *)&v404 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v404 + 1) = 2;
          v57 = sub_2241471F8();
          sub_2231FBBA8((uint64_t)v57, v47, &v413, (uint64_t)&v419, &v404);
          if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
          {
            v58 = (void *)v419.__r_.__value_.__r.__words[0];
LABEL_98:
            operator delete(v58);
          }
        }
        else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v58 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_98;
        }
        kdebug_trace();
        goto LABEL_100;
      }
    }
    else
    {
      HIBYTE(v418) = v16;
      *((_BYTE *)v417 + v16) = 0;
      if ((SBYTE7(v425) & 0x80000000) == 0)
        goto LABEL_32;
    }
    operator delete((void *)__dst);
    goto LABEL_32;
  }
LABEL_146:
  v420.i64[0] = (uint64_t)"cv3d.recon.";
  v420.i64[1] = 11;
  v421.i64[0] = (uint64_t)"Stats.Volumetric.TimeKeyVolMapper";
  v421.i64[1] = 33;
  sub_2231A9820((uint64_t)&v420, (uint64_t)v422, 0, 0, (std::string *)&__dst);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v80 = sub_2241471F8();
    v81 = v80[2];
    if (!v81)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v81 = v80[2];
    }
    v82 = *(_QWORD *)(v81 + 64);
    v83 = (std::mutex *)(v82 + 32);
    std::mutex::lock((std::mutex *)(v82 + 32));
    v85 = *(_QWORD *)(v82 + 96);
    v84 = *(_QWORD *)(v82 + 104);
    std::mutex::unlock(v83);
    if (v85 != v84)
    {
      sub_2241471F8();
      v86 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v86 + 24))(v86))
      {
        v420 = 0u;
        v421 = 0u;
        v422[0].i32[0] = 728325608;
        kdebug_trace();
        v87 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
        v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&v419.__r_.__value_.__l.__data_ = v87;
        sub_2238B02A0((double *)&qword_255788F20, v86, (float *)&v419, "trim boundary");
        kdebug_trace();
      }
    }
  }
  v420 = 0u;
  v421 = 0u;
  v422[0].i32[0] = 728325624;
  kdebug_trace();
  v88 = BYTE7(v425);
  if (SBYTE7(v425) < 0)
    v88 = *((_QWORD *)&__dst + 1);
  if (v88 >= 0x11)
  {
    v89 = &__dst;
    if (SBYTE7(v425) < 0)
      v89 = (__int128 *)__dst;
    v90 = *(_QWORD *)v89;
    v91 = *((_QWORD *)v89 + 1);
    v92 = *((unsigned __int8 *)v89 + 16);
    if (v90 == 0x6365722E64337663 && v91 == 0x73746174532E6E6FLL && v92 == 46)
    {
      v95 = sub_223187510();
      if ((SBYTE7(v425) & 0x80u) == 0)
        v96 = &__dst;
      else
        v96 = (__int128 *)__dst;
      if ((SBYTE7(v425) & 0x80u) == 0)
        v97 = BYTE7(v425);
      else
        v97 = *((_QWORD *)&__dst + 1);
      v98 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
      v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)&v419.__r_.__value_.__l.__data_ = v98;
      sub_2231897A8((uint64_t *)v95, v96, v97, (float *)&v419, (uint64_t)"trim boundary", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v425) < 0)
    operator delete((void *)__dst);
  v99 = a4 + 2;
  v398 = (uint64_t **)(v400 + 336);
  v100 = *(_QWORD **)(v399 + 376);
  if (v100 != (_QWORD *)(v399 + 384))
  {
    v101 = (uint64_t **)(v400 + 344);
    do
    {
      *(uint64_t *)((char *)v420.i64 + 4) = *(_QWORD *)((char *)v100 + 28);
      v102 = *((_DWORD *)v100 + 9);
      v420.i32[0] = v12;
      v420.i32[3] = v102;
      v103 = sub_22353408C(v393 + 3, (int *)&v420);
      if (v103)
      {
        v104 = *((_DWORD *)v103 + 8);
        v105 = *v101;
        if (*v101)
          goto LABEL_182;
      }
      else
      {
        v104 = -1;
        v105 = *v101;
        if (*v101)
        {
LABEL_182:
          v106 = (uint64_t *)(v400 + 344);
          v107 = v105;
          do
          {
            v108 = *((_DWORD *)v107 + 7);
            v109 = v108 >= v104;
            if (v108 >= v104)
              v110 = (uint64_t **)v107;
            else
              v110 = (uint64_t **)(v107 + 1);
            if (v109)
              v106 = v107;
            v107 = *v110;
          }
          while (*v110);
          if (v106 != (uint64_t *)v101 && v104 >= *((_DWORD *)v106 + 7))
          {
            v111 = (uint64_t *)v106[1];
            v112 = v106;
            if (v111)
            {
              do
              {
                v113 = v111;
                v111 = (uint64_t *)*v111;
              }
              while (v111);
            }
            else
            {
              do
              {
                v113 = (uint64_t *)v112[2];
                v64 = *v113 == (_QWORD)v112;
                v112 = v113;
              }
              while (!v64);
            }
            if (*v398 == v106)
              *v398 = v113;
            --*(_QWORD *)(v400 + 352);
            sub_2231AFE60(v105, v106);
            operator delete(v106);
          }
        }
      }
      sub_2235196C0((uint64_t)v99, (uint64_t)v100 + 28, v12);
      v114 = *((_DWORD *)v100 + 9) & 0xFFFFFFC0;
      v420.i64[0] = *(_QWORD *)((char *)v100 + 28) & 0xFFFFFFC0FFFFFFC0;
      v420.i32[2] = v114;
      sub_22397FD34((uint64_t **)(v400 + 360), (int *)&v420, (uint64_t)&v420);
      v115 = (_QWORD *)v100[1];
      if (v115)
      {
        do
        {
          v116 = v115;
          v115 = (_QWORD *)*v115;
        }
        while (v115);
      }
      else
      {
        do
        {
          v116 = (_QWORD *)v100[2];
          v64 = *v116 == (_QWORD)v100;
          v100 = v116;
        }
        while (!v64);
      }
      v100 = v116;
    }
    while (v116 != (_QWORD *)(v399 + 384));
  }
  v420.i64[0] = (uint64_t)"cv3d.recon.";
  v420.i64[1] = 11;
  v421.i64[0] = (uint64_t)"Stats.Volumetric.TimeKeyVolMapper";
  v421.i64[1] = 33;
  sub_2231A9820((uint64_t)&v420, (uint64_t)v422, 0, 0, (std::string *)&__dst);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v117 = sub_2241471F8();
    v118 = v117[2];
    if (!v118)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v118 = v117[2];
    }
    v119 = *(_QWORD *)(v118 + 64);
    v120 = (std::mutex *)(v119 + 32);
    std::mutex::lock((std::mutex *)(v119 + 32));
    v122 = *(_QWORD *)(v119 + 96);
    v121 = *(_QWORD *)(v119 + 104);
    std::mutex::unlock(v120);
    if (v122 != v121)
    {
      sub_2241471F8();
      v123 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123))
      {
        v420 = 0u;
        v421 = 0u;
        v422[0].i32[0] = 728325608;
        kdebug_trace();
        v124 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
        v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&v419.__r_.__value_.__l.__data_ = v124;
        sub_2238B02A0((double *)&qword_255788F20, v123, (float *)&v419, "remove blocks");
        kdebug_trace();
      }
    }
  }
  v420 = 0u;
  v421 = 0u;
  v422[0].i32[0] = 728325624;
  kdebug_trace();
  v125 = BYTE7(v425);
  if (SBYTE7(v425) < 0)
    v125 = *((_QWORD *)&__dst + 1);
  if (v125 >= 0x11)
  {
    v126 = &__dst;
    if (SBYTE7(v425) < 0)
      v126 = (__int128 *)__dst;
    v127 = *(_QWORD *)v126;
    v128 = *((_QWORD *)v126 + 1);
    v129 = *((unsigned __int8 *)v126 + 16);
    if (v127 == 0x6365722E64337663 && v128 == 0x73746174532E6E6FLL && v129 == 46)
    {
      v132 = sub_223187510();
      if ((SBYTE7(v425) & 0x80u) == 0)
        v133 = &__dst;
      else
        v133 = (__int128 *)__dst;
      if ((SBYTE7(v425) & 0x80u) == 0)
        v134 = BYTE7(v425);
      else
        v134 = *((_QWORD *)&__dst + 1);
      v135 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
      v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)&v419.__r_.__value_.__l.__data_ = v135;
      sub_2231897A8((uint64_t *)v132, v133, v134, (float *)&v419, (uint64_t)"remove blocks", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v425) < 0)
  {
    operator delete((void *)__dst);
    if (v396->i64[0] != v396->i64[1])
    {
LABEL_235:
      v138 = 0;
      v389 = (int32x2_t *)&v396[102].u32[2];
      v139 = *(float32x4_t ***)(v400 + 2248);
      if (!v139)
        goto LABEL_348;
      goto LABEL_241;
    }
  }
  else if (v396->i64[0] != v396->i64[1])
  {
    goto LABEL_235;
  }
  if (!*(_BYTE *)(v399 + 496)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 71, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_857;
  }
  v138 = *(_BYTE *)(v399 + 368) == 0;
  v389 = (int32x2_t *)&v396[102].u32[2];
  v139 = *(float32x4_t ***)(v400 + 2248);
  if (!v139)
    goto LABEL_348;
LABEL_241:
  v140 = !v138;
  if (!v396[115].i8[8])
    v140 = 1;
  if ((v140 & 1) == 0 && v396[122].i8[0] == 1)
  {
    v141 = *v139;
    if (*v139)
    {
      if (v141[8].i8[0])
      {
        v420 = v141[7];
        v142 = (float32x4_t *)v420.i64[0] == v139[2] && v420.i64[1] == (_QWORD)v139[3];
        if (v142 && *(_BYTE *)(v400 + 248) && *(float *)(v400 + 244) > 0.0)
        {
          v143 = *(_QWORD *)(v400 + 244);
          if ((v143 & 0xFF00000000) == 0)
            sub_22324A974();
          if (v396[110].i8[8])
          {
            v144.i32[0] = v389[1].i32[0];
            v145 = (float32x2_t)v389[2];
            v146 = (float32x2_t)v389[4];
            v136.i32[0] = v389[5].i32[0];
            *(int32x2_t *)v137.f32 = v389[6];
            v137.i32[2] = v389[7].i32[0];
            v147 = (int8x16_t)vnegq_f32(v137);
            v148 = v396[85];
            v149 = vmulq_n_f32(v148, v144.f32[0]);
            v144.i32[1] = v389[3].i32[0];
            v150 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v389, (int32x2_t)v145), *(float *)v147.i32), (float32x2_t)vzip2_s32(*v389, (int32x2_t)v145), *(float32x2_t *)v137.f32, 1), v144, v137, 2);
            v144.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v146, *(float32x2_t *)v147.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v146, 1), *(float32x2_t *)v137.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), v136).u32[0];
            v151 = v396[86];
            v152 = v396[87];
            v153 = v396[88];
            v154 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v148, COERCE_FLOAT(*v389)), v151, v145.f32[0]), v152, v146.f32[0]), (float32x4_t)0, v153);
            v155 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v148, (float32x2_t)*v389, 1), v151, v145, 1), v152, v146, 1), (float32x4_t)0, v153);
            v156 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v149, v151, v144.f32[1]), v152, v136.f32[0]), (float32x4_t)0, v153);
            v157 = vaddq_f32(v153, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v150.f32[0]), v151, v150, 1), v152, v144.f32[0]));
            v158 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v154, COERCE_FLOAT(*(_OWORD *)v389[8].i8)), v155, (float32x2_t)v389[8], 1), v156, *(float32x4_t *)v389[8].i8, 2), v157, *(float32x4_t *)v389[8].i8, 3);
            v159 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v154, COERCE_FLOAT(*(_OWORD *)v389[10].i8)), v155, (float32x2_t)v389[10], 1), v156, *(float32x4_t *)v389[10].i8, 2), v157, *(float32x4_t *)v389[10].i8, 3);
            v160 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v154, COERCE_FLOAT(*(_OWORD *)v389[12].i8)), v155, (float32x2_t)v389[12], 1), v156, *(float32x4_t *)v389[12].i8, 2), v157, *(float32x4_t *)v389[12].i8, 3);
            v161 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v154, COERCE_FLOAT(*(_OWORD *)v389[14].i8)), v155, (float32x2_t)v389[14], 1), v156, *(float32x4_t *)v389[14].i8, 2), v157, *(float32x4_t *)v389[14].i8, 3);
          }
          else
          {
            v158 = (int32x4_t)v396[85];
            v159 = (int32x4_t)v396[86];
            v160 = (int8x16_t)v396[87];
            v161 = v396[88];
          }
          v162 = (int8x16_t)vnegq_f32(v161);
          v163 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v158.i8, *(int32x2_t *)v159.i8), *(float *)v162.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)v158.i8, *(int32x2_t *)v159.i8), *(float32x2_t *)v161.f32, 1), (float32x2_t)*(_OWORD *)&vzip2q_s32(v158, v159), v161, 2);
          v164 = COERCE_DOUBLE(vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v160.i8, *(float32x2_t *)v162.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v160.i8, 1), *(float32x2_t *)v161.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v162, v162, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v160, v160, 8uLL)));
          DWORD2(__dst) = LODWORD(v164);
          *(float32x2_t *)&__dst = v163;
          if (*(_BYTE *)(v400 + 92))
          {
            v165 = (_DWORD *)(v400 + 72);
LABEL_262:
            LODWORD(v164) = *v165;
            sub_223A88E40((uint64_t)&__dst, v139 + 4, v99, v12, v398, v164, *(float *)&v143);
            v139 = *(float32x4_t ***)(v400 + 2248);
            goto LABEL_263;
          }
          if (*(_BYTE *)(v400 + 56))
          {
            v165 = (_DWORD *)(v400 + 16);
            goto LABEL_262;
          }
          sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
LABEL_857:
          abort();
        }
      }
    }
  }
LABEL_263:
  v166 = *v139;
  if (!*(_BYTE *)(v399 + 496)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 71, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_850;
  }
  if (*(_BYTE *)(v399 + 368))
  {
    v167 = (unsigned __int8 *)v166[153].i64[0];
    if (!v167)
      goto LABEL_860;
    v168 = v423.u8[0];
    v169 = (unsigned __int8 *)&v166[153];
    do
    {
      v170 = v167[25];
      v171 = v423.u8[0];
      if (v170 != v423.u8[0])
        goto LABEL_285;
      v170 = v167[26];
      v171 = v423.u8[1];
      if (v170 != v423.u8[1])
        goto LABEL_285;
      v170 = v167[27];
      v171 = v423.u8[2];
      if (v170 != v423.u8[2])
        goto LABEL_285;
      v170 = v167[28];
      v171 = v423.u8[3];
      if (v170 != v423.u8[3])
        goto LABEL_285;
      v170 = v167[29];
      v171 = v423.u8[4];
      if (v170 != v423.u8[4])
        goto LABEL_285;
      v170 = v167[30];
      v171 = v423.u8[5];
      if (v170 != v423.u8[5])
        goto LABEL_285;
      v170 = v167[31];
      v171 = v423.u8[6];
      if (v170 != v423.u8[6])
        goto LABEL_285;
      v170 = v167[32];
      v171 = v423.u8[7];
      if (v170 != v423.u8[7])
        goto LABEL_285;
      v170 = v167[33];
      v171 = v423.u8[8];
      if (v170 != v423.u8[8])
        goto LABEL_285;
      v170 = v167[34];
      v171 = v423.u8[9];
      if (v170 != v423.u8[9])
        goto LABEL_285;
      v170 = v167[35];
      v171 = v423.u8[10];
      if (v170 != v423.u8[10])
        goto LABEL_285;
      v170 = v167[36];
      v171 = v423.u8[11];
      if (v170 != v423.u8[11])
        goto LABEL_285;
      v170 = v167[37];
      v171 = v423.u8[12];
      if (v170 != v423.u8[12])
        goto LABEL_285;
      v170 = v167[38];
      v171 = v423.u8[13];
      if (v170 == v423.u8[13]
        && (v170 = v167[39], v171 = v423.u8[14], v170 == v423.u8[14])
        && (v170 = v167[40], v171 = v423.u8[15], v170 == v423.u8[15]))
      {
        v169 = v167;
      }
      else
      {
LABEL_285:
        if (v170 < v171)
          v167 += 8;
        else
          v169 = v167;
      }
      v167 = *(unsigned __int8 **)v167;
    }
    while (v167);
    if (v169 == (unsigned __int8 *)&v166[153])
      goto LABEL_860;
    v172 = v169[25];
    if (v423.u8[0] != v172)
      goto LABEL_306;
    v172 = v169[26];
    v168 = v423.u8[1];
    if (v423.u8[1] != v172)
      goto LABEL_306;
    v172 = v169[27];
    v168 = v423.u8[2];
    if (v423.u8[2] != v172)
      goto LABEL_306;
    v172 = v169[28];
    v168 = v423.u8[3];
    if (v423.u8[3] != v172)
      goto LABEL_306;
    v172 = v169[29];
    v168 = v423.u8[4];
    if (v423.u8[4] != v172)
      goto LABEL_306;
    v172 = v169[30];
    v168 = v423.u8[5];
    if (v423.u8[5] != v172)
      goto LABEL_306;
    v172 = v169[31];
    v168 = v423.u8[6];
    if (v423.u8[6] != v172)
      goto LABEL_306;
    v172 = v169[32];
    v168 = v423.u8[7];
    if (v423.u8[7] != v172)
      goto LABEL_306;
    v172 = v169[33];
    v168 = v423.u8[8];
    if (v423.u8[8] != v172)
      goto LABEL_306;
    v172 = v169[34];
    v168 = v423.u8[9];
    if (v423.u8[9] != v172)
      goto LABEL_306;
    v172 = v169[35];
    v168 = v423.u8[10];
    if (v423.u8[10] != v172)
      goto LABEL_306;
    v172 = v169[36];
    v168 = v423.u8[11];
    if (v423.u8[11] != v172)
      goto LABEL_306;
    v172 = v169[37];
    v168 = v423.u8[12];
    if (v423.u8[12] != v172
      || (v172 = v169[38], v168 = v423.u8[13], v423.u8[13] != v172)
      || (v172 = v169[39], v168 = v423.u8[14], v423.u8[14] != v172)
      || (v172 = v169[40], v168 = v423.u8[15], v423.u8[15] != v172))
    {
LABEL_306:
      if (v168 < v172)
      {
LABEL_860:
        v173 = (unsigned __int8 *)v166[150].i64[0];
        if (v173)
        {
          v174 = (unsigned __int8 *)&v166[150];
          v175 = v423.u8[0];
          v176 = (unsigned __int8 *)&v166[150];
          v177 = (unsigned __int8 *)&v166[150];
          v178 = v173;
          do
          {
            v179 = v178[32];
            v180 = v423.u8[0];
            if (v179 != v423.u8[0])
              goto LABEL_326;
            v179 = v178[33];
            v180 = v423.u8[1];
            if (v179 != v423.u8[1])
              goto LABEL_326;
            v179 = v178[34];
            v180 = v423.u8[2];
            if (v179 != v423.u8[2])
              goto LABEL_326;
            v179 = v178[35];
            v180 = v423.u8[3];
            if (v179 != v423.u8[3])
              goto LABEL_326;
            v179 = v178[36];
            v180 = v423.u8[4];
            if (v179 != v423.u8[4])
              goto LABEL_326;
            v179 = v178[37];
            v180 = v423.u8[5];
            if (v179 != v423.u8[5])
              goto LABEL_326;
            v179 = v178[38];
            v180 = v423.u8[6];
            if (v179 != v423.u8[6])
              goto LABEL_326;
            v179 = v178[39];
            v180 = v423.u8[7];
            if (v179 != v423.u8[7])
              goto LABEL_326;
            v179 = v178[40];
            v180 = v423.u8[8];
            if (v179 != v423.u8[8])
              goto LABEL_326;
            v179 = v178[41];
            v180 = v423.u8[9];
            if (v179 != v423.u8[9])
              goto LABEL_326;
            v179 = v178[42];
            v180 = v423.u8[10];
            if (v179 != v423.u8[10])
              goto LABEL_326;
            v179 = v178[43];
            v180 = v423.u8[11];
            if (v179 != v423.u8[11])
              goto LABEL_326;
            v179 = v178[44];
            v180 = v423.u8[12];
            if (v179 != v423.u8[12])
              goto LABEL_326;
            v179 = v178[45];
            v180 = v423.u8[13];
            if (v179 == v423.u8[13]
              && (v179 = v178[46], v180 = v423.u8[14], v179 == v423.u8[14])
              && (v179 = v178[47], v180 = v423.u8[15], v179 == v423.u8[15]))
            {
              v177 = v178;
            }
            else
            {
LABEL_326:
              if (v179 < v180)
                v178 += 8;
              else
                v177 = v178;
            }
            v178 = *(unsigned __int8 **)v178;
          }
          while (v178);
          if (v177 != v174)
          {
            v181 = v177[32];
            v182 = v423.u8[0];
            if (v423.u8[0] == v181)
            {
              v181 = v177[33];
              v182 = v423.u8[1];
              if (v423.u8[1] == v181)
              {
                v181 = v177[34];
                v182 = v423.u8[2];
                if (v423.u8[2] == v181)
                {
                  v181 = v177[35];
                  v182 = v423.u8[3];
                  if (v423.u8[3] == v181)
                  {
                    v181 = v177[36];
                    v182 = v423.u8[4];
                    if (v423.u8[4] == v181)
                    {
                      v181 = v177[37];
                      v182 = v423.u8[5];
                      if (v423.u8[5] == v181)
                      {
                        v181 = v177[38];
                        v182 = v423.u8[6];
                        if (v423.u8[6] == v181)
                        {
                          v181 = v177[39];
                          v182 = v423.u8[7];
                          if (v423.u8[7] == v181)
                          {
                            v181 = v177[40];
                            v182 = v423.u8[8];
                            if (v423.u8[8] == v181)
                            {
                              v181 = v177[41];
                              v182 = v423.u8[9];
                              if (v423.u8[9] == v181)
                              {
                                v181 = v177[42];
                                v182 = v423.u8[10];
                                if (v423.u8[10] == v181)
                                {
                                  v181 = v177[43];
                                  v182 = v423.u8[11];
                                  if (v423.u8[11] == v181)
                                  {
                                    v181 = v177[44];
                                    v182 = v423.u8[12];
                                    if (v423.u8[12] == v181)
                                    {
                                      v181 = v177[45];
                                      v182 = v423.u8[13];
                                      if (v423.u8[13] == v181)
                                      {
                                        v181 = v177[46];
                                        v182 = v423.u8[14];
                                        if (v423.u8[14] == v181)
                                        {
                                          v181 = v177[47];
                                          v182 = v423.u8[15];
                                          if (v423.u8[15] == v181)
                                            goto LABEL_467;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (v182 >= v181)
            {
LABEL_467:
              if (!v396[115].i8[8])
                sub_22324A974();
              if (*(_BYTE *)(v400 + 92))
              {
                v279 = (float *)(v400 + 72);
                goto LABEL_542;
              }
              if (*(_BYTE *)(v400 + 56))
              {
                v279 = (float *)(v400 + 16);
LABEL_542:
                v290 = (float32x4_t *)(*(_QWORD *)(v400 + 2248) + 32);
                v291 = *v279;
                do
                {
                  v292 = v173[32];
                  v293 = v423.u8[0];
                  if (v292 != v423.u8[0])
                    goto LABEL_560;
                  v292 = v173[33];
                  v293 = v423.u8[1];
                  if (v292 != v423.u8[1])
                    goto LABEL_560;
                  v292 = v173[34];
                  v293 = v423.u8[2];
                  if (v292 != v423.u8[2])
                    goto LABEL_560;
                  v292 = v173[35];
                  v293 = v423.u8[3];
                  if (v292 != v423.u8[3])
                    goto LABEL_560;
                  v292 = v173[36];
                  v293 = v423.u8[4];
                  if (v292 != v423.u8[4])
                    goto LABEL_560;
                  v292 = v173[37];
                  v293 = v423.u8[5];
                  if (v292 != v423.u8[5])
                    goto LABEL_560;
                  v292 = v173[38];
                  v293 = v423.u8[6];
                  if (v292 != v423.u8[6])
                    goto LABEL_560;
                  v292 = v173[39];
                  v293 = v423.u8[7];
                  if (v292 != v423.u8[7])
                    goto LABEL_560;
                  v292 = v173[40];
                  v293 = v423.u8[8];
                  if (v292 != v423.u8[8])
                    goto LABEL_560;
                  v292 = v173[41];
                  v293 = v423.u8[9];
                  if (v292 != v423.u8[9])
                    goto LABEL_560;
                  v292 = v173[42];
                  v293 = v423.u8[10];
                  if (v292 != v423.u8[10])
                    goto LABEL_560;
                  v292 = v173[43];
                  v293 = v423.u8[11];
                  if (v292 != v423.u8[11])
                    goto LABEL_560;
                  v292 = v173[44];
                  v293 = v423.u8[12];
                  if (v292 != v423.u8[12])
                    goto LABEL_560;
                  v292 = v173[45];
                  v293 = v423.u8[13];
                  if (v292 == v423.u8[13]
                    && (v292 = v173[46], v293 = v423.u8[14], v292 == v423.u8[14])
                    && (v292 = v173[47], v293 = v423.u8[15], v292 == v423.u8[15]))
                  {
                    v176 = v173;
                  }
                  else
                  {
LABEL_560:
                    if (v292 < v293)
                      v173 += 8;
                    else
                      v176 = v173;
                  }
                  v173 = *(unsigned __int8 **)v173;
                }
                while (v173);
                if (v176 == v174)
                  goto LABEL_582;
                v294 = v176[32];
                if (v423.u8[0] == v294)
                {
                  v294 = v176[33];
                  v175 = v423.u8[1];
                  if (v423.u8[1] == v294)
                  {
                    v294 = v176[34];
                    v175 = v423.u8[2];
                    if (v423.u8[2] == v294)
                    {
                      v294 = v176[35];
                      v175 = v423.u8[3];
                      if (v423.u8[3] == v294)
                      {
                        v294 = v176[36];
                        v175 = v423.u8[4];
                        if (v423.u8[4] == v294)
                        {
                          v294 = v176[37];
                          v175 = v423.u8[5];
                          if (v423.u8[5] == v294)
                          {
                            v294 = v176[38];
                            v175 = v423.u8[6];
                            if (v423.u8[6] == v294)
                            {
                              v294 = v176[39];
                              v175 = v423.u8[7];
                              if (v423.u8[7] == v294)
                              {
                                v294 = v176[40];
                                v175 = v423.u8[8];
                                if (v423.u8[8] == v294)
                                {
                                  v294 = v176[41];
                                  v175 = v423.u8[9];
                                  if (v423.u8[9] == v294)
                                  {
                                    v294 = v176[42];
                                    v175 = v423.u8[10];
                                    if (v423.u8[10] == v294)
                                    {
                                      v294 = v176[43];
                                      v175 = v423.u8[11];
                                      if (v423.u8[11] == v294)
                                      {
                                        v294 = v176[44];
                                        v175 = v423.u8[12];
                                        if (v423.u8[12] == v294)
                                        {
                                          v294 = v176[45];
                                          v175 = v423.u8[13];
                                          if (v423.u8[13] == v294)
                                          {
                                            v294 = v176[46];
                                            v175 = v423.u8[14];
                                            if (v423.u8[14] == v294)
                                            {
                                              v294 = v176[47];
                                              v175 = v423.u8[15];
                                              if (v423.u8[15] == v294)
                                                goto LABEL_583;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                if (v175 >= v294)
                {
LABEL_583:
                  *(_OWORD *)&v414.__r_.__value_.__r.__words[1] = 0uLL;
                  v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414.__r_.__value_.__l.__size_;
                  sub_2235246CC((uint64_t *)&v414, *((int **)v176 + 6), (int *)v176 + 14);
                }
                else
                {
LABEL_582:
                  *(_OWORD *)&v414.__r_.__value_.__r.__words[1] = 0uLL;
                  v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414.__r_.__value_.__l.__size_;
                }
                v295 = *(unsigned __int8 *)(v400 + 48);
                v296.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                sub_223A887CC(v392, v290, v12, &v414, v295, a4 + 2, v398, v291);
                v420.i64[0] = (uint64_t)"cv3d.recon.";
                v420.i64[1] = 11;
                v421.i64[0] = (uint64_t)"Stats.KFCluster.Times.DepthCarve";
                v421.i64[1] = 32;
                sub_2231A9820((uint64_t)&v420, (uint64_t)v422, 0, 0, &v419);
                sub_224569D7C();
                sub_224569A80();
                if (!os_variant_has_internal_diagnostics())
                  goto LABEL_611;
                v297 = sub_2241471F8();
                v298 = v297[2];
                if (!v298)
                {
                  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v298 = v297[2];
                }
                v299 = *(_QWORD *)(v298 + 64);
                v300 = (std::mutex *)(v299 + 32);
                std::mutex::lock((std::mutex *)(v299 + 32));
                v302 = *(_QWORD *)(v299 + 96);
                v301 = *(_QWORD *)(v299 + 104);
                std::mutex::unlock(v300);
                if (v302 == v301)
                  goto LABEL_611;
                sub_2241471F8();
                v303 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v303 + 24))(v303))
                  goto LABEL_611;
                v420 = 0u;
                v421 = 0u;
                v422[0].i32[0] = 728325608;
                kdebug_trace();
                v304 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v296.__d_.__rep_) / 1000000.0;
                v296.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                *(float *)&v404 = v304;
                DWORD2(v425) = 0;
                sub_22319B83C((uint64_t)&__p, (uint64_t)&__dst, (unsigned __int8 *)&v423);
                if (DWORD2(v425) == -1)
                  sub_22316DD70();
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v402;
                ((void (*)(__int128 *__return_ptr, std::string *, __int128 *))off_24EC5E420[DWORD2(v425)])(&v415, &__p, &__dst);
                if (DWORD2(v425) != -1)
                  ((void (*)(std::string *, __int128 *))off_24EC5E408[DWORD2(v425)])(&__p, &__dst);
                v305 = HIBYTE(v416);
                if (v416 < 0)
                  v305 = *((_QWORD *)&v415 + 1);
                if (v305 >= 4)
                  v305 = 4;
                v418 = v416;
                *(_OWORD *)v417 = v415;
                v415 = 0uLL;
                v416 = 0;
                if (SHIBYTE(v418) < 0)
                {
                  v417[1] = (void *)v305;
                  v306 = (void **)v417[0];
                }
                else
                {
                  HIBYTE(v418) = v305;
                  v306 = v417;
                }
                *((_BYTE *)v306 + v305) = 0;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v303 + 24))(v303))
                {
                  __dst = *(_OWORD *)v417;
                  *(_QWORD *)&v425 = v418;
                  __p.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                  __p.__r_.__value_.__l.__size_ = 2;
                  v307 = sub_2241471F8();
                  sub_2231FBBA8((uint64_t)v307, v303, (float *)&v404, (uint64_t)&__dst, (__int128 *)&__p);
                  if (SBYTE7(v425) < 0)
                  {
                    v308 = (void *)__dst;
LABEL_607:
                    operator delete(v308);
                  }
                }
                else if (SHIBYTE(v418) < 0)
                {
                  v308 = v417[0];
                  goto LABEL_607;
                }
                if (SHIBYTE(v416) < 0)
                  operator delete((void *)v415);
                kdebug_trace();
LABEL_611:
                v420 = 0u;
                v421 = 0u;
                v422[0].i32[0] = 728325624;
                kdebug_trace();
                v309 = HIBYTE(v419.__r_.__value_.__r.__words[2]);
                if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v309 = v419.__r_.__value_.__l.__size_;
                if (v309 >= 0x11)
                {
                  v310 = &v419;
                  if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v310 = (std::string *)v419.__r_.__value_.__r.__words[0];
                  v311 = v310->__r_.__value_.__r.__words[0];
                  v312 = v310->__r_.__value_.__l.__size_;
                  v313 = v310->__r_.__value_.__s.__data_[16];
                  if (v311 == 0x6365722E64337663 && v312 == 0x73746174532E6E6FLL && v313 == 46)
                  {
                    v316 = sub_223187510();
                    if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v317 = &v419;
                    else
                      v317 = (std::string *)v419.__r_.__value_.__r.__words[0];
                    if ((v419.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v318 = HIBYTE(v419.__r_.__value_.__r.__words[2]);
                    else
                      v318 = v419.__r_.__value_.__l.__size_;
                    v319 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v296.__d_.__rep_) / 1000000.0;
                    std::chrono::steady_clock::now();
                    *(float *)&v404 = v319;
                    DWORD2(v425) = 0;
                    sub_22319B83C((uint64_t)&__p, (uint64_t)&__dst, (unsigned __int8 *)&v423);
                    if (DWORD2(v425) == -1)
                      sub_22316DD70();
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v402;
                    ((void (*)(__int128 *__return_ptr, std::string *, __int128 *))off_24EC5E420[DWORD2(v425)])(&v415, &__p, &__dst);
                    if (DWORD2(v425) != -1)
                      ((void (*)(std::string *, __int128 *))off_24EC5E408[DWORD2(v425)])(&__p, &__dst);
                    v320 = HIBYTE(v416);
                    if (v416 < 0)
                      v320 = *((_QWORD *)&v415 + 1);
                    if (v320 >= 4)
                      v320 = 4;
                    v418 = v416;
                    *(_OWORD *)v417 = v415;
                    v415 = 0uLL;
                    v416 = 0;
                    if (SHIBYTE(v418) < 0)
                    {
                      v417[1] = (void *)v320;
                      v321 = (void **)v417[0];
                    }
                    else
                    {
                      HIBYTE(v418) = v320;
                      v321 = v417;
                    }
                    *((_BYTE *)v321 + v320) = 0;
                    if (v418 >= 0)
                      v322 = v417;
                    else
                      v322 = (void **)v417[0];
                    if (v418 >= 0)
                      v323 = HIBYTE(v418);
                    else
                      v323 = (uint64_t)v417[1];
                    sub_2231897A8((uint64_t *)v316, v317, v318, (float *)&v404, (uint64_t)v322, v323);
                    if (SHIBYTE(v418) < 0)
                      operator delete(v417[0]);
                    if (SHIBYTE(v416) < 0)
                      operator delete((void *)v415);
                  }
                }
                kdebug_trace();
                if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v419.__r_.__value_.__l.__data_);
                sub_223198030((uint64_t)&v414, (_QWORD *)v414.__r_.__value_.__l.__size_);
                return kdebug_trace();
              }
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
LABEL_850:
              abort();
            }
          }
        }
      }
    }
  }
LABEL_348:
  v420.i64[0] = (uint64_t)"cv3d.recon.";
  v420.i64[1] = 11;
  v421.i64[0] = (uint64_t)"Stats.Volumetric.TimeKeyVolMapper";
  v421.i64[1] = 33;
  sub_2231A9820((uint64_t)&v420, (uint64_t)v422, 0, 0, (std::string *)&__dst);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v183 = sub_2241471F8();
    v184 = v183[2];
    if (!v184)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v184 = v183[2];
    }
    v185 = *(_QWORD *)(v184 + 64);
    v186 = (std::mutex *)(v185 + 32);
    std::mutex::lock((std::mutex *)(v185 + 32));
    v188 = *(_QWORD *)(v185 + 96);
    v187 = *(_QWORD *)(v185 + 104);
    std::mutex::unlock(v186);
    if (v188 != v187)
    {
      sub_2241471F8();
      v189 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v189 + 24))(v189))
      {
        v420 = 0u;
        v421 = 0u;
        v422[0].i32[0] = 728325608;
        kdebug_trace();
        v190 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
        v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)&v419.__r_.__value_.__l.__data_ = v190;
        sub_2238B02A0((double *)&qword_255788F20, v189, (float *)&v419, "early process");
        kdebug_trace();
      }
    }
  }
  v420 = 0u;
  v421 = 0u;
  v422[0].i32[0] = 728325624;
  kdebug_trace();
  v191 = BYTE7(v425);
  if (SBYTE7(v425) < 0)
    v191 = *((_QWORD *)&__dst + 1);
  if (v191 >= 0x11)
  {
    v192 = &__dst;
    if (SBYTE7(v425) < 0)
      v192 = (__int128 *)__dst;
    v193 = *(_QWORD *)v192;
    v194 = *((_QWORD *)v192 + 1);
    v195 = *((unsigned __int8 *)v192 + 16);
    if (v193 == 0x6365722E64337663 && v194 == 0x73746174532E6E6FLL && v195 == 46)
    {
      v198 = sub_223187510();
      if ((SBYTE7(v425) & 0x80u) == 0)
        v199 = &__dst;
      else
        v199 = (__int128 *)__dst;
      if ((SBYTE7(v425) & 0x80u) == 0)
        v200 = BYTE7(v425);
      else
        v200 = *((_QWORD *)&__dst + 1);
      v201 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
      v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)&v419.__r_.__value_.__l.__data_ = v201;
      sub_2231897A8((uint64_t *)v198, v199, v200, (float *)&v419, (uint64_t)"early process", 13);
    }
  }
  kdebug_trace();
  if (SBYTE7(v425) < 0)
  {
    operator delete((void *)__dst);
    if (v138)
      return kdebug_trace();
  }
  else if (v138)
  {
    return kdebug_trace();
  }
  *(_OWORD *)&v419.__r_.__value_.__r.__words[1] = 0uLL;
  v419.__r_.__value_.__r.__words[0] = (std::string::size_type)&v419.__r_.__value_.__l.__size_;
  if (*(_QWORD *)(v400 + 2248) && *(_BYTE *)(v400 + 252))
  {
    if (*(_BYTE *)(v400 + 253))
      v202 = *(_QWORD *)(v400 + 2248);
    else
      v202 = 0;
  }
  else
  {
    v202 = 0;
  }
  (*(void (**)(_QWORD, float32x4_t *, uint64_t, _QWORD *, uint64_t, std::string *, uint64_t))(**(_QWORD **)(v400 + 304) + 16))(*(_QWORD *)(v400 + 304), v396, v399, v393, v12, &v419, v202);
  v420.i64[0] = (uint64_t)"cv3d.recon.";
  v420.i64[1] = 11;
  v421.i64[0] = (uint64_t)"Stats.Volumetric.TimeKeyVolMapper";
  v421.i64[1] = 33;
  sub_2231A9820((uint64_t)&v420, (uint64_t)v422, 0, 0, (std::string *)&__dst);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v203 = sub_2241471F8();
    v204 = v203[2];
    if (!v204)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v204 = v203[2];
    }
    v205 = *(_QWORD *)(v204 + 64);
    v206 = (std::mutex *)(v205 + 32);
    std::mutex::lock((std::mutex *)(v205 + 32));
    v208 = *(_QWORD *)(v205 + 96);
    v207 = *(_QWORD *)(v205 + 104);
    std::mutex::unlock(v206);
    if (v208 != v207)
    {
      sub_2241471F8();
      v209 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v209 + 24))(v209))
      {
        v420 = 0u;
        v421 = 0u;
        v422[0].i32[0] = 728325608;
        kdebug_trace();
        v210 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
        v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        *(float *)v417 = v210;
        sub_22386E598((double *)&qword_255788F20, v209, (float *)v417, "allocation");
        kdebug_trace();
      }
    }
  }
  v420 = 0u;
  v421 = 0u;
  v422[0].i32[0] = 728325624;
  kdebug_trace();
  v211 = BYTE7(v425);
  if (SBYTE7(v425) < 0)
    v211 = *((_QWORD *)&__dst + 1);
  v212 = v400;
  if (v211 >= 0x11)
  {
    v213 = &__dst;
    if (SBYTE7(v425) < 0)
      v213 = (__int128 *)__dst;
    v214 = *(_QWORD *)v213;
    v215 = *((_QWORD *)v213 + 1);
    v216 = *((unsigned __int8 *)v213 + 16);
    if (v214 == 0x6365722E64337663 && v215 == 0x73746174532E6E6FLL && v216 == 46)
    {
      v219 = sub_223187510();
      if ((SBYTE7(v425) & 0x80u) == 0)
        v220 = &__dst;
      else
        v220 = (__int128 *)__dst;
      if ((SBYTE7(v425) & 0x80u) == 0)
        v221 = BYTE7(v425);
      else
        v221 = *((_QWORD *)&__dst + 1);
      v222 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
      v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      *(float *)v417 = v222;
      sub_2231897A8((uint64_t *)v219, v220, v221, (float *)v417, (uint64_t)"allocation", 10);
    }
  }
  kdebug_trace();
  if (SBYTE7(v425) < 0)
    operator delete((void *)__dst);
  v417[1] = 0;
  v418 = 0;
  v416 = 0;
  v417[0] = &v417[1];
  *(_QWORD *)&v415 = (char *)&v415 + 8;
  *((_QWORD *)&v415 + 1) = 0;
  *(_OWORD *)&v414.__r_.__value_.__r.__words[1] = 0uLL;
  v414.__r_.__value_.__r.__words[0] = (std::string::size_type)&v414.__r_.__value_.__l.__size_;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  v223 = (uint64_t *)&v404 + 1;
  *((_QWORD *)&v404 + 1) = 0;
  v405 = 0;
  *(_QWORD *)&v404 = (char *)&v404 + 8;
  v224 = *(unsigned __int8 **)(v399 + 184);
  v225 = (unsigned __int8 *)(v399 + 192);
  v226 = (unsigned __int8 *)(v399 + 216);
  v227 = *(unsigned __int8 **)(v399 + 208);
  if (v224 == (unsigned __int8 *)(v399 + 192))
    goto LABEL_460;
  do
  {
    if (v227 == v226)
    {
      sub_2238C5C64(v224, v225, (unsigned __int8 *)&v404, v223, (unsigned __int8 **)&v420);
      v212 = v400;
      goto LABEL_461;
    }
    if ((char)sub_22319835C(v227 + 25, v224 + 25) < 0)
    {
      v230 = sub_223426D4C(&v404, v223, (unsigned __int8 **)&v420, (uint64_t *)&__dst, v227 + 25);
      v231 = *(uint64_t **)v230;
      if (*(_QWORD *)v230)
      {
        v232 = (uint64_t *)v231[1];
        if (!v232)
        {
          do
          {
LABEL_451:
            v223 = (uint64_t *)v231[2];
            v64 = *v223 == (_QWORD)v231;
            v231 = v223;
          }
          while (!v64);
LABEL_453:
          v242 = (unsigned __int8 *)*((_QWORD *)v227 + 1);
          if (v242)
          {
            do
            {
              v227 = v242;
              v242 = *(unsigned __int8 **)v242;
            }
            while (v242);
          }
          else
          {
            do
            {
              v243 = v227;
              v227 = (unsigned __int8 *)*((_QWORD *)v227 + 2);
            }
            while (*(unsigned __int8 **)v227 != v243);
          }
          continue;
        }
      }
      else
      {
        v231 = (uint64_t *)operator new(0x30uLL);
        *(_OWORD *)((char *)v231 + 25) = *(_OWORD *)(v227 + 25);
        v240 = v420.i64[0];
        *v231 = 0;
        v231[1] = 0;
        v231[2] = v240;
        *(_QWORD *)v230 = v231;
        v241 = v231;
        if (*(_QWORD *)v404)
        {
          *(_QWORD *)&v404 = *(_QWORD *)v404;
          v241 = *(uint64_t **)v230;
        }
        sub_2231A9A8C(*((uint64_t **)&v404 + 1), v241);
        ++v405;
        v232 = (uint64_t *)v231[1];
        if (!v232)
          goto LABEL_451;
      }
      do
      {
        v223 = v232;
        v232 = (uint64_t *)*v232;
      }
      while (v232);
      goto LABEL_453;
    }
    if ((char)sub_22319835C(v224 + 25, v227 + 25) < 0)
    {
      v229 = v227;
    }
    else
    {
      v228 = (unsigned __int8 *)*((_QWORD *)v227 + 1);
      if (v228)
      {
        do
        {
          v229 = v228;
          v228 = *(unsigned __int8 **)v228;
        }
        while (v228);
      }
      else
      {
        do
        {
          v229 = (unsigned __int8 *)*((_QWORD *)v227 + 2);
          v64 = *(_QWORD *)v229 == (_QWORD)v227;
          v227 = v229;
        }
        while (!v64);
      }
    }
    v233 = sub_223426D4C(&v404, v223, (unsigned __int8 **)&v420, (uint64_t *)&__dst, v224 + 25);
    v234 = *(uint64_t **)v233;
    if (*(_QWORD *)v233)
    {
      v235 = (uint64_t *)v234[1];
      if (!v235)
        goto LABEL_439;
    }
    else
    {
      v234 = (uint64_t *)operator new(0x30uLL);
      *(_OWORD *)((char *)v234 + 25) = *(_OWORD *)(v224 + 25);
      v236 = v420.i64[0];
      *v234 = 0;
      v234[1] = 0;
      v234[2] = v236;
      *(_QWORD *)v233 = v234;
      v237 = v234;
      if (*(_QWORD *)v404)
      {
        *(_QWORD *)&v404 = *(_QWORD *)v404;
        v237 = *(uint64_t **)v233;
      }
      sub_2231A9A8C(*((uint64_t **)&v404 + 1), v237);
      ++v405;
      v235 = (uint64_t *)v234[1];
      if (!v235)
      {
        do
        {
LABEL_439:
          v223 = (uint64_t *)v234[2];
          v64 = *v223 == (_QWORD)v234;
          v234 = v223;
        }
        while (!v64);
        goto LABEL_441;
      }
    }
    do
    {
      v223 = v235;
      v235 = (uint64_t *)*v235;
    }
    while (v235);
LABEL_441:
    v238 = (unsigned __int8 *)*((_QWORD *)v224 + 1);
    if (v238)
    {
      do
      {
        v224 = v238;
        v238 = *(unsigned __int8 **)v238;
      }
      while (v238);
    }
    else
    {
      do
      {
        v239 = v224;
        v224 = (unsigned __int8 *)*((_QWORD *)v224 + 2);
      }
      while (*(unsigned __int8 **)v224 != v239);
    }
    v227 = v229;
  }
  while (v224 != v225);
  v212 = v400;
LABEL_460:
  sub_2238C5C64(v227, v226, (unsigned __int8 *)&v404, v223, (unsigned __int8 **)&v420);
LABEL_461:
  v244 = v99;
  (*(void (**)(_QWORD, uint64_t, float32x4_t *, uint64_t *, std::string *, __int128 *, __int128 *, std::string *, std::string *, void **))(**(_QWORD **)(v212 + 328) + 16))(*(_QWORD *)(v212 + 328), a3, v396, &v411, &v419, &v404, &v415, &v414, &__p, v417);
  v403[0] = 0;
  v403[1] = 0;
  v402 = v403;
  (*(void (**)(_QWORD, float32x4_t *, void **, __int128 *, __int128 *, std::string *, std::string *, _QWORD *, _DWORD, uint64_t **, _QWORD ***))(**(_QWORD **)(v212 + 312) + 16))(*(_QWORD *)(v212 + 312), v396, v417, &v404, &v415, &v414, &__p, v99, v12, v398, &v402);
  sub_223A39C20(*(_QWORD *)(v212 + 328), v99, v12, a3, v417, v398, &v402);
  v245.i64[0] = *(_QWORD *)(v399 + 8);
  v245.i32[2] = *(_DWORD *)(v399 + 16);
  v246.i64[0] = *(_QWORD *)(v399 + 24);
  v246.i32[2] = *(_DWORD *)(v399 + 32);
  v247 = (float32x4_t)vzip1q_s32(v245, v246);
  v248 = (int8x16_t)v247;
  v248.i32[2] = *(_QWORD *)(v399 + 40);
  v249.i64[0] = *(_QWORD *)(v399 + 56);
  v249.i32[2] = *(_DWORD *)(v399 + 64);
  v250 = (int8x16_t)vnegq_f32(v249);
  v251 = (int8x16_t)vtrn2q_s32(v245, v246);
  v251.i32[2] = HIDWORD(*(_QWORD *)(v399 + 40));
  v252.i32[0] = *(_DWORD *)(v399 + 48);
  v253 = (float32x4_t)vzip2q_s32(v245, v246);
  *(float32x2_t *)v247.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)v247.f32, *(float *)v250.i32), *(float32x2_t *)v251.i8, *(float32x2_t *)v249.f32, 1), *(float32x2_t *)v253.f32, v249, 2);
  v253.i32[2] = v252.i32[0];
  v247.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v399 + 40), *(float32x2_t *)v250.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v399 + 40), 1), *(float32x2_t *)v249.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL), v252).u32[0]);
  v254 = vextq_s8(v251, v248, 4uLL).u64[0];
  v248.i32[3] = 0;
  v249.i32[3] = 0;
  v249.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v251, 0).i32[3];
  *(uint64_t *)((char *)v249.i64 + 4) = v254;
  v253.i64[1] = vdupq_laneq_s32((int32x4_t)v253, 2).u32[0];
  v255 = *(float32x4_t *)(v399 + 104);
  v256 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v248, COERCE_FLOAT(*(_OWORD *)(v399 + 72))), v249, *(float32x2_t *)(v399 + 72), 1), v253, *(float32x4_t *)(v399 + 72), 2), v247, *(float32x4_t *)(v399 + 72), 3);
  v257 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v248, COERCE_FLOAT(*(_OWORD *)(v399 + 88))), v249, *(float32x2_t *)(v399 + 88), 1), v253, *(float32x4_t *)(v399 + 88), 2), v247, *(float32x4_t *)(v399 + 88), 3);
  v258 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v248, v255.f32[0]), v249, *(float32x2_t *)v255.f32, 1), v253, v255, 2), v247, v255, 3);
  v259 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v248, COERCE_FLOAT(*(_OWORD *)(v399 + 120))), v249, *(float32x2_t *)(v399 + 120), 1), v253, *(float32x4_t *)(v399 + 120), 2), v247, *(float32x4_t *)(v399 + 120), 3);
  v420 = v256;
  v421 = v257;
  v422[0] = v258;
  v422[1] = v259;
  if (v396[115].i8[8] && *(_BYTE *)(v212 + 248) && *(float *)(v212 + 244) > 0.0)
  {
    v260 = *(_QWORD *)(v212 + 244);
    if ((v260 & 0xFF00000000) == 0)
      sub_22324A974();
    if (v396[110].i8[8])
    {
      v261.i32[0] = v389[1].i32[0];
      v262 = (float32x2_t)v389[2];
      v263 = (float32x2_t)v389[4];
      v257.i32[0] = v389[5].i32[0];
      *(int32x2_t *)v255.f32 = v389[6];
      v255.i32[2] = v389[7].i32[0];
      v264 = (int8x16_t)vnegq_f32(v255);
      v265 = v396[85];
      v266 = vmulq_n_f32(v265, v261.f32[0]);
      v261.i32[1] = v389[3].i32[0];
      v267 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v389, (int32x2_t)v262), *(float *)v264.i32), (float32x2_t)vzip2_s32(*v389, (int32x2_t)v262), *(float32x2_t *)v255.f32, 1), v261, v255, 2);
      v261.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v263, *(float32x2_t *)v264.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v263, 1), *(float32x2_t *)v255.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v264, v264, 8uLL), *(float32x2_t *)v257.f32).u32[0];
      v268 = v396[86];
      v269 = v396[87];
      v270 = v396[88];
      v271 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v265, COERCE_FLOAT(*v389)), v268, v262.f32[0]), v269, v263.f32[0]), (float32x4_t)0, v270);
      v272 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v265, (float32x2_t)*v389, 1), v268, v262, 1), v269, v263, 1), (float32x4_t)0, v270);
      v273 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v266, v268, v261.f32[1]), v269, v257.f32[0]), (float32x4_t)0, v270);
      v274 = vaddq_f32(v270, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v265, v267.f32[0]), v268, v267, 1), v269, v261.f32[0]));
      v275 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v271, COERCE_FLOAT(*(_OWORD *)v389[8].i8)), v272, (float32x2_t)v389[8], 1), v273, *(float32x4_t *)v389[8].i8, 2), v274, *(float32x4_t *)v389[8].i8, 3);
      v276 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v271, COERCE_FLOAT(*(_OWORD *)v389[10].i8)), v272, (float32x2_t)v389[10], 1), v273, *(float32x4_t *)v389[10].i8, 2), v274, *(float32x4_t *)v389[10].i8, 3);
      v277 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v271, COERCE_FLOAT(*(_OWORD *)v389[12].i8)), v272, (float32x2_t)v389[12], 1), v273, *(float32x4_t *)v389[12].i8, 2), v274, *(float32x4_t *)v389[12].i8, 3);
      v278 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v271, COERCE_FLOAT(*(_OWORD *)v389[14].i8)), v272, (float32x2_t)v389[14], 1), v273, *(float32x4_t *)v389[14].i8, 2), v274, *(float32x4_t *)v389[14].i8, 3);
    }
    else
    {
      v275 = (int32x4_t)v396[85];
      v276 = (int32x4_t)v396[86];
      v277 = (int8x16_t)v396[87];
      v278 = v396[88];
    }
    v280 = (int8x16_t)vnegq_f32(v278);
    v281 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v275.i8, *(int32x2_t *)v276.i8), *(float *)v280.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)v275.i8, *(int32x2_t *)v276.i8), *(float32x2_t *)v278.f32, 1), (float32x2_t)*(_OWORD *)&vzip2q_s32(v275, v276), v278, 2);
    v282 = COERCE_DOUBLE(vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v277.i8, *(float32x2_t *)v280.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v277.i8, 1), *(float32x2_t *)v278.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v280, v280, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v277, v277, 8uLL)));
    DWORD2(__dst) = LODWORD(v282);
    *(float32x2_t *)&__dst = v281;
    if (*(_BYTE *)(v212 + 92))
    {
      v283 = (_DWORD *)(v212 + 72);
    }
    else
    {
      if (!*(_BYTE *)(v212 + 56))
      {
        sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
        goto LABEL_848;
      }
      v283 = (_DWORD *)(v212 + 16);
    }
    LODWORD(v282) = *v283;
    sub_223A88E40((uint64_t)&__dst, &v420, v99, v12, v398, v282, *(float *)&v260);
  }
  if (!*(_BYTE *)(v399 + 496)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Mapper/src/KeyframeBatchMetadata.cpp", 71, (uint64_t)"volumetric", 10, (uint64_t)"Only for volumetric mapper", 26, (void (*)(void **))sub_22457406C))
  {
LABEL_848:
    abort();
  }
  if (!*(_BYTE *)(v399 + 368) || !v396[115].i8[8] || !*(_BYTE *)(v212 + 264) || *(float *)(v212 + 260) <= 0.0)
    goto LABEL_677;
  v284 = *(uint64_t **)(v399 + 480);
  if (!v284)
    goto LABEL_669;
  v285 = (uint64_t *)(v399 + 480);
  while (2)
  {
    v286 = *((unsigned __int8 *)v284 + 32);
    if (v286 == 55)
    {
      v286 = *((unsigned __int8 *)v284 + 33);
      if (v286 == 201)
      {
        v286 = *((unsigned __int8 *)v284 + 34);
        if (v286 == 112)
        {
          v286 = *((unsigned __int8 *)v284 + 35);
          if (v286 == 44)
          {
            v286 = *((unsigned __int8 *)v284 + 36);
            if (v286 == 78)
            {
              v286 = *((unsigned __int8 *)v284 + 37);
              if (v286 == 99)
              {
                v286 = *((unsigned __int8 *)v284 + 38);
                if (v286 == 15)
                {
                  v286 = *((unsigned __int8 *)v284 + 39);
                  if (v286 == 88)
                  {
                    v286 = *((unsigned __int8 *)v284 + 40);
                    if (v286 == 200)
                    {
                      v286 = *((unsigned __int8 *)v284 + 41);
                      if (v286 == 73)
                      {
                        v286 = *((unsigned __int8 *)v284 + 42);
                        if (v286 == 164)
                        {
                          v286 = *((unsigned __int8 *)v284 + 43);
                          if (v286 == 192)
                          {
                            v286 = *((unsigned __int8 *)v284 + 44);
                            if (v286 == 37)
                            {
                              v286 = *((unsigned __int8 *)v284 + 45);
                              if (v286 == 101)
                              {
                                v286 = *((unsigned __int8 *)v284 + 46);
                                if (v286 == 239)
                                {
                                  v286 = *((unsigned __int8 *)v284 + 47);
                                  if (v286 == 14)
                                  {
                                    v285 = v284;
                                    goto LABEL_520;
                                  }
                                  v287 = 14;
                                }
                                else
                                {
                                  v287 = 239;
                                }
                              }
                              else
                              {
                                v287 = 101;
                              }
                            }
                            else
                            {
                              v287 = 37;
                            }
                          }
                          else
                          {
                            v287 = 192;
                          }
                        }
                        else
                        {
                          v287 = 164;
                        }
                      }
                      else
                      {
                        v287 = 73;
                      }
                    }
                    else
                    {
                      v287 = 200;
                    }
                  }
                  else
                  {
                    v287 = 88;
                  }
                }
                else
                {
                  v287 = 15;
                }
              }
              else
              {
                v287 = 99;
              }
            }
            else
            {
              v287 = 78;
            }
          }
          else
          {
            v287 = 44;
          }
        }
        else
        {
          v287 = 112;
        }
      }
      else
      {
        v287 = 201;
      }
    }
    else
    {
      v287 = 55;
    }
    if (v286 < v287)
      ++v284;
    else
      v285 = v284;
LABEL_520:
    v284 = (uint64_t *)*v284;
    if (v284)
      continue;
    break;
  }
  if (v285 == (uint64_t *)(v399 + 480))
    goto LABEL_669;
  v288 = *((unsigned __int8 *)v285 + 32);
  if (v288 == 55)
  {
    v288 = *((unsigned __int8 *)v285 + 33);
    if (v288 == 201)
    {
      v288 = *((unsigned __int8 *)v285 + 34);
      if (v288 == 112)
      {
        v288 = *((unsigned __int8 *)v285 + 35);
        if (v288 == 44)
        {
          v288 = *((unsigned __int8 *)v285 + 36);
          if (v288 == 78)
          {
            v288 = *((unsigned __int8 *)v285 + 37);
            if (v288 == 99)
            {
              v288 = *((unsigned __int8 *)v285 + 38);
              if (v288 == 15)
              {
                v288 = *((unsigned __int8 *)v285 + 39);
                if (v288 == 88)
                {
                  v288 = *((unsigned __int8 *)v285 + 40);
                  if (v288 == 200)
                  {
                    v288 = *((unsigned __int8 *)v285 + 41);
                    if (v288 == 73)
                    {
                      v288 = *((unsigned __int8 *)v285 + 42);
                      if (v288 == 164)
                      {
                        v288 = *((unsigned __int8 *)v285 + 43);
                        if (v288 == 192)
                        {
                          v288 = *((unsigned __int8 *)v285 + 44);
                          if (v288 == 37)
                          {
                            v288 = *((unsigned __int8 *)v285 + 45);
                            if (v288 == 101)
                            {
                              v288 = *((unsigned __int8 *)v285 + 46);
                              if (v288 == 239)
                              {
                                v288 = *((unsigned __int8 *)v285 + 47);
                                if (v288 == 14)
                                {
                                  v212 = v400;
                                  v244 = v99;
                                  goto LABEL_670;
                                }
                                v289 = 14;
                              }
                              else
                              {
                                v289 = 239;
                              }
                            }
                            else
                            {
                              v289 = 101;
                            }
                          }
                          else
                          {
                            v289 = 37;
                          }
                        }
                        else
                        {
                          v289 = 192;
                        }
                      }
                      else
                      {
                        v289 = 164;
                      }
                      v212 = v400;
                      v244 = v99;
                    }
                    else
                    {
                      v289 = 73;
                    }
                  }
                  else
                  {
                    v289 = 200;
                  }
                }
                else
                {
                  v289 = 88;
                }
              }
              else
              {
                v289 = 15;
              }
            }
            else
            {
              v289 = 99;
            }
          }
          else
          {
            v289 = 78;
          }
        }
        else
        {
          v289 = 44;
        }
      }
      else
      {
        v289 = 112;
      }
    }
    else
    {
      v289 = 201;
    }
  }
  else
  {
    v289 = 55;
  }
  if (v289 < v288)
  {
LABEL_669:
    v324 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapper.cpp", 204, (uint64_t)"iter != batch_metadata.volumetric->kf_to_mesh_rendering.end()", 61, (uint64_t)"Raw frame mesh depth not found!", 31, (void (*)(void **))sub_22457406C);
    v285 = (uint64_t *)(v399 + 480);
    if (!v324)
      goto LABEL_670;
    goto LABEL_848;
  }
LABEL_670:
  v325 = v285[6];
  *(_QWORD *)&__dst = &off_24EC21230;
  sub_2231BE6D4(v325, (uint64_t *)&__dst + 1);
  if (*(_BYTE *)(v212 + 92))
  {
    v327 = (_DWORD *)(v212 + 72);
    v328 = *v391;
    if ((*v391 & 0xFF00000000) != 0)
      goto LABEL_672;
LABEL_724:
    sub_22324A974();
  }
  if (!*(_BYTE *)(v212 + 56))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
    abort();
  }
  v327 = (_DWORD *)(v212 + 16);
  v328 = *v391;
  if ((*v391 & 0xFF00000000) == 0)
    goto LABEL_724;
LABEL_672:
  LODWORD(v326) = *v327;
  sub_223A8B0F0(v392, (uint64_t)&__dst, v244, v12, v398, v326, *(float *)&v328, *(float *)(v212 + 296));
  v329 = (std::__shared_weak_count *)v425;
  if ((_QWORD)v425)
  {
    v330 = (unint64_t *)(v425 + 8);
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
LABEL_677:
  v332 = *(float32x4_t **)(v212 + 2248);
  if (v332)
  {
    v333 = *(unsigned __int8 **)(v332->i64[0] + 2400);
    if (v333)
    {
      v334 = (unsigned __int8 *)v212;
      v335 = (unsigned __int8 *)(v332->i64[0] + 2400);
      v336 = v423.u8[0];
      v337 = v335;
      v338 = v335;
      v339 = *(unsigned __int8 **)v335;
      do
      {
        v340 = v339[32];
        v341 = v423.u8[0];
        if (v340 != v423.u8[0])
          goto LABEL_697;
        v340 = v339[33];
        v341 = v423.u8[1];
        if (v340 != v423.u8[1])
          goto LABEL_697;
        v340 = v339[34];
        v341 = v423.u8[2];
        if (v340 != v423.u8[2])
          goto LABEL_697;
        v340 = v339[35];
        v341 = v423.u8[3];
        if (v340 != v423.u8[3])
          goto LABEL_697;
        v340 = v339[36];
        v341 = v423.u8[4];
        if (v340 != v423.u8[4])
          goto LABEL_697;
        v340 = v339[37];
        v341 = v423.u8[5];
        if (v340 != v423.u8[5])
          goto LABEL_697;
        v340 = v339[38];
        v341 = v423.u8[6];
        if (v340 != v423.u8[6])
          goto LABEL_697;
        v340 = v339[39];
        v341 = v423.u8[7];
        if (v340 != v423.u8[7])
          goto LABEL_697;
        v340 = v339[40];
        v341 = v423.u8[8];
        if (v340 != v423.u8[8])
          goto LABEL_697;
        v340 = v339[41];
        v341 = v423.u8[9];
        if (v340 != v423.u8[9])
          goto LABEL_697;
        v340 = v339[42];
        v341 = v423.u8[10];
        if (v340 != v423.u8[10])
          goto LABEL_697;
        v340 = v339[43];
        v341 = v423.u8[11];
        if (v340 != v423.u8[11])
          goto LABEL_697;
        v340 = v339[44];
        v341 = v423.u8[12];
        if (v340 != v423.u8[12])
          goto LABEL_697;
        v340 = v339[45];
        v341 = v423.u8[13];
        if (v340 == v423.u8[13]
          && (v340 = v339[46], v341 = v423.u8[14], v340 == v423.u8[14])
          && (v340 = v339[47], v341 = v423.u8[15], v340 == v423.u8[15]))
        {
          v338 = v339;
        }
        else
        {
LABEL_697:
          if (v340 < v341)
            v339 += 8;
          else
            v338 = v339;
        }
        v339 = *(unsigned __int8 **)v339;
      }
      while (v339);
      if (v338 != v335)
      {
        v342 = v338[32];
        v343 = v423.u8[0];
        if (v423.u8[0] == v342)
        {
          v342 = v338[33];
          v343 = v423.u8[1];
          if (v423.u8[1] == v342)
          {
            v342 = v338[34];
            v343 = v423.u8[2];
            if (v423.u8[2] == v342)
            {
              v342 = v338[35];
              v343 = v423.u8[3];
              if (v423.u8[3] == v342)
              {
                v342 = v338[36];
                v343 = v423.u8[4];
                if (v423.u8[4] == v342)
                {
                  v342 = v338[37];
                  v343 = v423.u8[5];
                  if (v423.u8[5] == v342)
                  {
                    v342 = v338[38];
                    v343 = v423.u8[6];
                    if (v423.u8[6] == v342)
                    {
                      v342 = v338[39];
                      v343 = v423.u8[7];
                      if (v423.u8[7] == v342)
                      {
                        v342 = v338[40];
                        v343 = v423.u8[8];
                        if (v423.u8[8] == v342)
                        {
                          v342 = v338[41];
                          v343 = v423.u8[9];
                          if (v423.u8[9] == v342)
                          {
                            v342 = v338[42];
                            v343 = v423.u8[10];
                            if (v423.u8[10] == v342)
                            {
                              v342 = v338[43];
                              v343 = v423.u8[11];
                              if (v423.u8[11] == v342)
                              {
                                v342 = v338[44];
                                v343 = v423.u8[12];
                                if (v423.u8[12] == v342)
                                {
                                  v342 = v338[45];
                                  v343 = v423.u8[13];
                                  if (v423.u8[13] == v342)
                                  {
                                    v342 = v338[46];
                                    v343 = v423.u8[14];
                                    if (v423.u8[14] == v342)
                                    {
                                      v342 = v338[47];
                                      v343 = v423.u8[15];
                                      if (v423.u8[15] == v342)
                                        goto LABEL_719;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v343 >= v342)
        {
LABEL_719:
          if (!v396[115].i8[8])
            sub_22324A974();
          if (v334[92])
          {
            v344 = (float *)(v334 + 72);
          }
          else
          {
            if (!v334[56])
            {
              sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
              abort();
            }
            v344 = (float *)(v334 + 16);
          }
          v345 = v332 + 2;
          v346 = *v344;
          do
          {
            v347 = v333[32];
            v348 = v423.u8[0];
            if (v347 != v423.u8[0])
              goto LABEL_745;
            v347 = v333[33];
            v348 = v423.u8[1];
            if (v347 != v423.u8[1])
              goto LABEL_745;
            v347 = v333[34];
            v348 = v423.u8[2];
            if (v347 != v423.u8[2])
              goto LABEL_745;
            v347 = v333[35];
            v348 = v423.u8[3];
            if (v347 != v423.u8[3])
              goto LABEL_745;
            v347 = v333[36];
            v348 = v423.u8[4];
            if (v347 != v423.u8[4])
              goto LABEL_745;
            v347 = v333[37];
            v348 = v423.u8[5];
            if (v347 != v423.u8[5])
              goto LABEL_745;
            v347 = v333[38];
            v348 = v423.u8[6];
            if (v347 != v423.u8[6])
              goto LABEL_745;
            v347 = v333[39];
            v348 = v423.u8[7];
            if (v347 != v423.u8[7])
              goto LABEL_745;
            v347 = v333[40];
            v348 = v423.u8[8];
            if (v347 != v423.u8[8])
              goto LABEL_745;
            v347 = v333[41];
            v348 = v423.u8[9];
            if (v347 != v423.u8[9])
              goto LABEL_745;
            v347 = v333[42];
            v348 = v423.u8[10];
            if (v347 != v423.u8[10])
              goto LABEL_745;
            v347 = v333[43];
            v348 = v423.u8[11];
            if (v347 != v423.u8[11])
              goto LABEL_745;
            v347 = v333[44];
            v348 = v423.u8[12];
            if (v347 != v423.u8[12])
              goto LABEL_745;
            v347 = v333[45];
            v348 = v423.u8[13];
            if (v347 == v423.u8[13]
              && (v347 = v333[46], v348 = v423.u8[14], v347 == v423.u8[14])
              && (v347 = v333[47], v348 = v423.u8[15], v347 == v423.u8[15]))
            {
              v337 = v333;
            }
            else
            {
LABEL_745:
              if (v347 < v348)
                v333 += 8;
              else
                v337 = v333;
            }
            v333 = *(unsigned __int8 **)v333;
          }
          while (v333);
          if (v337 == v335)
            goto LABEL_767;
          v349 = v337[32];
          if (v423.u8[0] == v349)
          {
            v349 = v337[33];
            v336 = v423.u8[1];
            if (v423.u8[1] == v349)
            {
              v349 = v337[34];
              v336 = v423.u8[2];
              if (v423.u8[2] == v349)
              {
                v349 = v337[35];
                v336 = v423.u8[3];
                if (v423.u8[3] == v349)
                {
                  v349 = v337[36];
                  v336 = v423.u8[4];
                  if (v423.u8[4] == v349)
                  {
                    v349 = v337[37];
                    v336 = v423.u8[5];
                    if (v423.u8[5] == v349)
                    {
                      v349 = v337[38];
                      v336 = v423.u8[6];
                      if (v423.u8[6] == v349)
                      {
                        v349 = v337[39];
                        v336 = v423.u8[7];
                        if (v423.u8[7] == v349)
                        {
                          v349 = v337[40];
                          v336 = v423.u8[8];
                          if (v423.u8[8] == v349)
                          {
                            v349 = v337[41];
                            v336 = v423.u8[9];
                            if (v423.u8[9] == v349)
                            {
                              v349 = v337[42];
                              v336 = v423.u8[10];
                              if (v423.u8[10] == v349)
                              {
                                v349 = v337[43];
                                v336 = v423.u8[11];
                                if (v423.u8[11] == v349)
                                {
                                  v349 = v337[44];
                                  v336 = v423.u8[12];
                                  if (v423.u8[12] == v349)
                                  {
                                    v349 = v337[45];
                                    v336 = v423.u8[13];
                                    if (v423.u8[13] == v349)
                                    {
                                      v349 = v337[46];
                                      v336 = v423.u8[14];
                                      if (v423.u8[14] == v349)
                                      {
                                        v349 = v337[47];
                                        v336 = v423.u8[15];
                                        if (v423.u8[15] == v349)
                                          goto LABEL_768;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v336 >= v349)
          {
LABEL_768:
            *((_QWORD *)&__dst + 1) = 0;
            *(_QWORD *)&v425 = 0;
            *(_QWORD *)&__dst = (char *)&__dst + 8;
            sub_2235246CC((uint64_t *)&__dst, *((int **)v337 + 6), (int *)v337 + 14);
          }
          else
          {
LABEL_767:
            *((_QWORD *)&__dst + 1) = 0;
            *(_QWORD *)&v425 = 0;
            *(_QWORD *)&__dst = (char *)&__dst + 8;
          }
          sub_223A887CC(v392, v345, v12, &__dst, v334[48], v99, v398, v346);
          sub_223198030((uint64_t)&__dst, *((_QWORD **)&__dst + 1));
        }
      }
    }
  }
  *(_QWORD *)&__dst = "cv3d.recon.";
  *((_QWORD *)&__dst + 1) = 11;
  *(_QWORD *)&v425 = "Stats.Volumetric.TimeKeyVolMapper";
  *((_QWORD *)&v425 + 1) = 33;
  sub_2231A9820((uint64_t)&__dst, (uint64_t)v426, 0, 0, &v401);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v350 = sub_2241471F8();
    v351 = v350[2];
    if (!v351)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v351 = v350[2];
    }
    v352 = *(_QWORD *)(v351 + 64);
    v353 = (std::mutex *)(v352 + 32);
    std::mutex::lock((std::mutex *)(v352 + 32));
    v355 = *(_QWORD *)(v352 + 96);
    v354 = *(_QWORD *)(v352 + 104);
    std::mutex::unlock(v353);
    if (v355 != v354)
    {
      sub_2241471F8();
      v356 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v356 + 24))(v356))
      {
        __dst = 0u;
        v425 = 0u;
        v426[0] = 728325608;
        kdebug_trace();
        v357 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
        v395.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v413 = v357;
        sub_2238F9880((double *)&qword_255788F20, v356, &v413, "integration");
        kdebug_trace();
      }
    }
  }
  __dst = 0u;
  v425 = 0u;
  v426[0] = 728325624;
  kdebug_trace();
  v358 = HIBYTE(v401.__r_.__value_.__r.__words[2]);
  if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v358 = v401.__r_.__value_.__l.__size_;
  if (v358 >= 0x11)
  {
    v359 = &v401;
    if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v359 = (std::string *)v401.__r_.__value_.__r.__words[0];
    v360 = v359->__r_.__value_.__r.__words[0];
    v361 = v359->__r_.__value_.__l.__size_;
    v362 = v359->__r_.__value_.__s.__data_[16];
    if (v360 == 0x6365722E64337663 && v361 == 0x73746174532E6E6FLL && v362 == 46)
    {
      v365 = sub_223187510();
      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v366 = &v401;
      else
        v366 = (std::string *)v401.__r_.__value_.__r.__words[0];
      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v367 = HIBYTE(v401.__r_.__value_.__r.__words[2]);
      else
        v367 = v401.__r_.__value_.__l.__size_;
      v368 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v395.__d_.__rep_) / 1000000.0;
      std::chrono::steady_clock::now();
      v413 = v368;
      sub_2231897A8((uint64_t *)v365, v366, v367, &v413, (uint64_t)"integration", 11);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  *(_QWORD *)&__dst = "cv3d.recon.";
  *((_QWORD *)&__dst + 1) = 11;
  *(_QWORD *)&v425 = "Stats.Volumetric.TimeKeyVolMapper";
  *((_QWORD *)&v425 + 1) = 33;
  sub_2231A9820((uint64_t)&__dst, (uint64_t)v426, 0, 0, &v401);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v369 = sub_2241471F8();
    v370 = v369[2];
    if (!v370)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v370 = v369[2];
    }
    v371 = *(_QWORD *)(v370 + 64);
    v372 = (std::mutex *)(v371 + 32);
    std::mutex::lock((std::mutex *)(v371 + 32));
    v374 = *(_QWORD *)(v371 + 96);
    v373 = *(_QWORD *)(v371 + 104);
    std::mutex::unlock(v372);
    if (v374 != v373)
    {
      sub_2241471F8();
      v375 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v375 + 24))(v375))
      {
        __dst = 0u;
        v425 = 0u;
        v426[0] = 728325608;
        kdebug_trace();
        v376 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v390.__d_.__rep_) / 1000000.0;
        v390.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v413 = v376;
        sub_223468AC4((double *)&qword_255788F20, v375, &v413, "Func-UpdateWithKeyframes");
        kdebug_trace();
      }
    }
  }
  __dst = 0u;
  v425 = 0u;
  v426[0] = 728325624;
  kdebug_trace();
  v377 = HIBYTE(v401.__r_.__value_.__r.__words[2]);
  if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v377 = v401.__r_.__value_.__l.__size_;
  if (v377 >= 0x11)
  {
    v378 = &v401;
    if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v378 = (std::string *)v401.__r_.__value_.__r.__words[0];
    v379 = v378->__r_.__value_.__r.__words[0];
    v380 = v378->__r_.__value_.__l.__size_;
    v381 = v378->__r_.__value_.__s.__data_[16];
    if (v379 == 0x6365722E64337663 && v380 == 0x73746174532E6E6FLL && v381 == 46)
    {
      v384 = sub_223187510();
      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v385 = &v401;
      else
        v385 = (std::string *)v401.__r_.__value_.__r.__words[0];
      if ((v401.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v386 = HIBYTE(v401.__r_.__value_.__r.__words[2]);
      else
        v386 = v401.__r_.__value_.__l.__size_;
      v387 = (float)(std::chrono::steady_clock::now().__d_.__rep_ - v390.__d_.__rep_) / 1000000.0;
      std::chrono::steady_clock::now();
      v413 = v387;
      sub_2231897A8((uint64_t *)v384, v385, v386, &v413, (uint64_t)"Func-UpdateWithKeyframes", 24);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v401.__r_.__value_.__l.__data_);
  sub_223198030((uint64_t)&v402, v403[0]);
  sub_223198030((uint64_t)&v404, *((_QWORD **)&v404 + 1));
  sub_223A63158((_QWORD *)__p.__r_.__value_.__l.__size_);
  sub_223A63158((_QWORD *)v414.__r_.__value_.__l.__size_);
  sub_223A63158(*((_QWORD **)&v415 + 1));
  sub_223198030((uint64_t)v417, (_QWORD *)v417[1]);
  sub_223A63100((_QWORD *)v419.__r_.__value_.__l.__size_);
  return kdebug_trace();
}

void sub_223A6253C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

void sub_223A628FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_2231874DC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223A62928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,_QWORD *a31,uint64_t a32,char a33,_QWORD *a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,_QWORD *a43,uint64_t a44,uint64_t a45,uint64_t a46,_QWORD *a47,uint64_t a48,uint64_t a49,_QWORD *a50,uint64_t a51,char a52,_QWORD *a53,uint64_t a54,uint64_t a55,uint64_t a56,_QWORD *a57)
{
  if (a29 < 0)
    operator delete(a24);
  sub_223198030((uint64_t)&a30, a31);
  sub_223198030((uint64_t)&a33, a34);
  sub_223A63158(a43);
  sub_223A63158(a47);
  sub_223A63158(a50);
  sub_223198030((uint64_t)&a52, a53);
  sub_223A63100(a57);
  sub_2231874DC((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_223A62984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 153) < 0)
  {
    operator delete(*(void **)(v33 - 176));
    sub_2231874DC((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  sub_2231874DC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223A629F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,_QWORD *a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_223198030((uint64_t)&a46, a47);
  if (a54 < 0)
  {
    operator delete(__p);
    sub_2231874DC((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  sub_2231874DC((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void sub_223A62A3C(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  void *__p[2];
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if (!a1[16])
  {
    *(_BYTE *)(a2 + 23) = 4;
    strcpy((char *)a2, "null");
    return;
  }
  v7 = 0;
  sub_22319B83C((uint64_t)__p, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_22316DD70();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24EC5E420[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24EC5E408[v7])(&v9, v6);
  v3 = HIBYTE(v5);
  if (v5 < 0)
    v3 = (unint64_t)__p[1];
  if (v3 >= 4)
    v3 = 4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)(a2 + 23) = v3;
    *(_BYTE *)(a2 + v3) = 0;
    if ((SHIBYTE(v5) & 0x80000000) == 0)
      return;
LABEL_14:
    operator delete(__p[0]);
    return;
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(*(_QWORD *)a2 + v3) = 0;
  if (SHIBYTE(v5) < 0)
    goto LABEL_14;
}

void sub_223A62B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A62B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A62BA4(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void **v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD **v18;
  BOOL v19;
  uint64_t *v20[48];
  void *__p[2];
  char v22;
  _QWORD **v23;
  _QWORD *v24[2];

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v8 = __p;
  sub_223A62A3C((unsigned __int8 *)(a1 + 2216), (uint64_t)__p);
  if (v22 < 0)
    v8 = (void **)__p[0];
  v20[0] = 0;
  v9 = strnlen((const char *)v8, 8uLL);
  memcpy(v20, v8, v9);
  kdebug_trace();
  if (v22 < 0)
    operator delete(__p[0]);
  kdebug_trace();
  v10 = &v23;
  v11 = *(_QWORD **)(a1 + 368);
  v23 = *(_QWORD ***)(a1 + 360);
  v24[0] = v11;
  v12 = *(_QWORD **)(a1 + 376);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v24[1] = v12;
  v13 = v11 + 2;
  if (v12)
    v10 = v13;
  *v10 = v24;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  if (*a2)
  {
    sub_223257000((uint64_t)__p, a1 + 392);
  }
  else
  {
    bzero(__p, 0x720uLL);
    sub_2232BD040((uint64_t)__p);
  }
  if ((*(_QWORD *)(a1 + 2236) & 0xFF00000000) == 0)
    sub_22324A974();
  (*(void (**)(_QWORD, void **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 320) + 16))(*(_QWORD *)(a1 + 320), __p, a1 + 336, a3);
  v14 = v23;
  if (v23 != v24)
  {
    do
    {
      v20[0] = (_QWORD *)((char *)v14 + 28);
      v15 = sub_223939EBC(a4, (int *)v14 + 7, (uint64_t)&unk_2245BA939, v20);
      if (v15[18] == v15[19])
      {
        v17 = v15 + 4;
        sub_2241498F4((uint64_t)v20, 0);
        sub_2237C2E74(v17, (uint64_t)v20);
        sub_22316F8F4((uint64_t *)v20);
        v16 = (_QWORD *)v14[1];
        if (v16)
        {
          do
          {
LABEL_18:
            v18 = (_QWORD **)v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
          goto LABEL_13;
        }
      }
      else
      {
        v16 = (_QWORD *)v14[1];
        if (v16)
          goto LABEL_18;
      }
      do
      {
        v18 = (_QWORD **)v14[2];
        v19 = *v18 == v14;
        v14 = v18;
      }
      while (!v19);
LABEL_13:
      v14 = v18;
    }
    while (v18 != v24);
  }
  sub_223198030(a1 + 336, *(_QWORD **)(a1 + 344));
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  sub_2232555B8((uint64_t)__p);
  sub_223198030((uint64_t)&v23, v24[0]);
}

void sub_223A62E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;
  uint64_t v58;

  sub_2232555B8((uint64_t)&a57);
  sub_223198030(v58 - 96, *(_QWORD **)(v58 - 88));
  sub_223530D14(v57);
  _Unwind_Resume(a1);
}

_QWORD *sub_223A62E6C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_223A63000(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_22316DC48(a1);
}

void sub_223A63010()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A63024()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24EC5E448;
  return result;
}

void sub_223A63048(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24EC5E448;
}

uint64_t sub_223A63060(float32x4_t a1, float32x4_t a2, float32x4_t a3, uint64_t a4, int32x2_t *a5, unsigned __int32 *a6, uint64_t a7, float32x2_t *a8, unsigned __int8 *a9, unsigned __int8 *a10, unsigned __int8 *a11)
{
  a1.i32[0] = *a6;
  return sub_223C01678(a5, a7, a8, a9, *a10, *a11, a1, a2, a3);
}

uint64_t sub_223A63088(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon3vlm6detail30EraseBlocksOutsideRoomBoundaryERKNS0_5frame18MapperRoomBoundaryERNS1_10Bl"
                     "ockStoreEiRNSt3__13setIjNS9_4lessIjEENS9_9allocatorIjEEEERNSA_IN3cva6MatrixIiLj3ELj1ELb0EEENS0_8geo"
                     "metry6detail11Vector3LessILNSK_4AxisE0EiEENSD_ISJ_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon3vlm6detail30EraseBlocksOutsideRoomBoundaryERKNS0_5frame18MapperRoomBoundar"
                                "yERNS1_10BlockStoreEiRNSt3__13setIjNS9_4lessIjEENS9_9allocatorIjEEEERNSA_IN3cva6MatrixIi"
                                "Lj3ELj1ELb0EEENS0_8geometry6detail11Vector3LessILNSK_4AxisE0EiEENSD_ISJ_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon3vlm6detail30EraseBlocksOutsideRoomBoundaryERKNS0_5frame18MapperRoomBoundaryERNS1_10BlockStoreEiRNSt3__13setIjNS9_4lessIjEENS9_9allocatorIjEEEERNSA_IN3cva6MatrixIiLj3ELj1ELb0EEENS0_8geometry6detail11Vector3LessILNSK_4AxisE0EiEENSD_ISJ_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon3vlm6detail30EraseBlocksOutsideRoomBoundaryERKNS0_5frame18MapperRoomBoundaryERNS1_10BlockStoreEiRNSt3__13setIjNS9_4lessIjEENS9_9allocatorIjEEEERNSA_IN3cva6MatrixIiLj3ELj1ELb0EEENS0_8geometry6detail11Vector3LessILNSK_4AxisE0EiEENSD_ISJ_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A630F4()
{
  return &unk_24EC5E4B8;
}

void sub_223A63100(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    sub_223A63100(*a1);
    sub_223A63100(a1[1]);
    v2 = (void *)a1[9];
    if (v2)
    {
      a1[10] = v2;
      operator delete(v2);
    }
    v3 = (void *)a1[6];
    if (v3)
    {
      a1[7] = v3;
      operator delete(v3);
    }
    operator delete(a1);
  }
}

void sub_223A63158(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_223A63158(*a1);
    sub_223A63158(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_223A631A0(uint64_t a1, uint64_t a2)
{
  int v3;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2245C7810;
  *(_WORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1065353216;
  *(_QWORD *)(a1 + 32) = 0x100000000;
  *(_DWORD *)(a1 + 40) = 0x1000000;
  *(_WORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0x20000;
  *(_BYTE *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 96) = 0x409000003E4CCCCDLL;
  *(_WORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 108) = 1;
  *(_WORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x3D8F5C29BCA3D70ALL;
  *(_WORD *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 144) = 2816;
  *(_QWORD *)(a1 + 152) = 0x4013000000000000;
  *(_DWORD *)(a1 + 160) = 2139095039;
  *(_QWORD *)(a1 + 164) = -1;
  *(_WORD *)(a1 + 172) = 769;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 188) = xmmword_2245C7820;
  *(_DWORD *)(a1 + 204) = 0x1000000;
  *(_QWORD *)(a1 + 208) = 0x3FD0000000000000;
  *(_QWORD *)(a1 + 216) = 0x3D4CCCCD00000000;
  *(_BYTE *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 236) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = 16777472;
  *(_DWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 252) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 260) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 268) = 65792;
  *(_BYTE *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 284) = 0;
  if (!*(_BYTE *)(a2 + 560))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapperConfig.cpp", 48, (uint64_t)"", 0, (uint64_t)"Meshing is not supported", 24, (void (*)(void **))sub_22457406C);
    abort();
  }
  if (!*(_BYTE *)(a2 + 328))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapperConfig.cpp", 53, (uint64_t)"", 0, (uint64_t)"Volumetric Mapper is not supported", 34, (void (*)(void **))sub_22457406C);
    abort();
  }
  v3 = *(unsigned __int8 *)(a2 + 385);
  if ((*(unsigned __int8 *)(a2 + 92) | v3) != *(unsigned __int8 *)(a2 + 92))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapperConfig.cpp", 64, (uint64_t)"", 0, (uint64_t)"Integrate and mapping attributes are not compatible", 51, (void (*)(void **))sub_22457406C);
    abort();
  }
  if ((*(unsigned __int8 *)(a2 + 384) | v3) != v3)
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMapperConfig.cpp", 69, (uint64_t)"", 0, (uint64_t)"Integrate and perframe attributes are not compatible", 52, (void (*)(void **))sub_22457406C);
    abort();
  }
  memcpy((void *)a1, (const void *)(a2 + 280), 0x111uLL);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 284) = *(_BYTE *)(a2 + 92);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t sub_223A63404(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  float32x2_t v5;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  float32x4_t v15;
  __int128 v16;
  uint64_t v18;
  char v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unint64_t *v28;
  int32x2_t v29;
  uint64_t v34;
  float v35;
  float32x4_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  float32x4_t v61;
  int32x2_t v62;
  float32x4_t v63;
  int32x2_t v64;
  float32x2_t v65[3];
  char v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  float32x4_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int32 v75;
  uint64_t v76;

  v11 = a5[16];
  v12 = *(_DWORD *)(a4 + 56);
  v13 = *(_DWORD *)(a4 + 60);
  result = sub_2241498F4(a1, 0);
  if ((_DWORD)v11)
    _ZF = 1;
  else
    _ZF = v12 == 0;
  v18 = v11;
  v64 = *(int32x2_t *)a3;
  LODWORD(v16) = *(_DWORD *)(a3 + 8);
  v62 = *(int32x2_t *)(a3 + 16);
  v70 = *(float32x2_t *)(a3 + 32);
  v5.i32[0] = *(_DWORD *)(a3 + 40);
  v15.i64[0] = *(_QWORD *)(a3 + 48);
  v15.i32[2] = *(_DWORD *)(a3 + 56);
  v68 = v15;
  DWORD1(v16) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)v65[0].f32 = v16;
  v20 = _ZF || v13 == 0;
  v66 = v20;
  if (!(_DWORD)v11)
  {
    v61.i64[0] = 0x3F0000003F000000;
    v61.i64[1] = 0x3F0000003F000000;
    v67 = v61;
    v22 = *a2;
    v23 = a2[1];
    if (*a2 != v23)
      goto LABEL_12;
LABEL_60:
    *(_DWORD *)(a1 + 64) = 1;
    return result;
  }
  result = sub_22456636C(a5);
  *(float32x2_t *)v21.f32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vmul_s32(vdup_n_s32((int)result + 1), (int32x2_t)0xDF000000D7), (int8x8_t)0xFF000000FFLL));
  v21.f32[2] = (float)(-27 * (result + 1));
  v67 = vdivq_f32(v21, (float32x4_t)vdupq_n_s32(0x437F0000u));
  v22 = *a2;
  v23 = a2[1];
  if (*a2 == v23)
    goto LABEL_60;
LABEL_12:
  v24 = 0;
  v25 = (int8x16_t)vnegq_f32(v68);
  *(float32x2_t *)&v27.u32[2] = v65[1];
  *(float32x2_t *)v26.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(v64, v62), *(float *)v25.i32), (float32x2_t)vzip2_s32(v64, v62), *(float32x2_t *)v68.f32, 1), v65[0], v68, 2);
  *(int32x2_t *)v27.f32 = vdup_lane_s32((int32x2_t)v70, 1);
  *(float32x2_t *)&v26.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(v70, *(float32x2_t *)v25.i8), *(float32x2_t *)v27.f32, *(float32x2_t *)v68.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL), v5);
  v69 = v26;
  v28 = (unint64_t *)(a1 + 32);
  v29 = vdup_n_s32(0x3F666666u);
  __asm { FMOV            V0.4S, #1.0 }
  v63 = _Q0;
  do
  {
    v35 = *(float *)(v22 + 12);
    v27.i32[0] = *(_DWORD *)(v22 + 20);
    v71 = v27;
    if (v35 <= -65504.0)
      goto LABEL_45;
    v27.i64[0] = *(_QWORD *)v22;
    v27.i32[2] = *(_DWORD *)(v22 + 8);
    v36 = vmlaq_n_f32(v69, v27, v35);
    v75 = v36.i32[2];
    v74 = v36.i64[0];
    v37 = *(_QWORD *)(a1 + 8);
    if (v37 >= *(_QWORD *)(a1 + 16))
    {
      v38 = sub_223A6AE98((unint64_t *)a1, &v74);
    }
    else
    {
      *(_QWORD *)v37 = v74;
      *(_DWORD *)(v37 + 8) = v75;
      v38 = v37 + 12;
    }
    *(_QWORD *)(a1 + 8) = v38;
    if ((v66 & 1) == 0)
    {
      v39 = *(_QWORD *)(a4 + 8);
      if (!v39)
        goto LABEL_37;
      v40 = v28;
      v41 = v18;
      v42 = *(std::__shared_weak_count **)(a4 + 16);
      if (v42)
      {
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (v45)
        {
          v39 = *(_QWORD *)(a4 + 8);
          v46 = *(std::__shared_weak_count **)(a4 + 16);
          if (!v46)
            goto LABEL_35;
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
          v39 = *(_QWORD *)(a4 + 8);
          v46 = *(std::__shared_weak_count **)(a4 + 16);
          if (!v46)
            goto LABEL_35;
        }
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
          v18 = v41;
          if (*(_BYTE *)(a4 + 73))
            goto LABEL_36;
          goto LABEL_55;
        }
      }
LABEL_35:
      v18 = v41;
      if (*(_BYTE *)(a4 + 73))
      {
LABEL_36:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v39 + 96))(&v76, v39, 0);
        v28 = v40;
        v39 = v76;
LABEL_37:
        v76 = 0;
        if (v24)
          goto LABEL_38;
        goto LABEL_40;
      }
LABEL_55:
      v39 = 0;
      v28 = v40;
      v76 = 0;
      if (v24)
      {
LABEL_38:
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v50 = v76;
        v76 = 0;
        if (v50)
          _Q0 = (float32x4_t)((__n128 (*)(uint64_t))*(_QWORD *)(*(_QWORD *)v50 + 8))(v50);
      }
LABEL_40:
      v51 = *(_QWORD *)(a4 + 24)
          + 2
          * (*(_DWORD *)(a4 + 64) * *(unsigned __int16 *)(v22 + 26)
           + *(_DWORD *)(a4 + 68) * *(unsigned __int16 *)(v22 + 28));
      _Q0.i32[0] = *(_DWORD *)v51;
      v52 = vcvtq_f32_f16(*(float16x4_t *)_Q0.f32);
      _H1 = *(_WORD *)(v51 + 4);
      __asm { FCVT            S1, H1 }
      v52.i32[2] = _S1;
      v55.i64[0] = 0x3F0000003F000000;
      v55.i64[1] = 0x3F0000003F000000;
      _Q0 = vmulq_f32(vsubq_f32(v63, v52), v55);
      goto LABEL_41;
    }
    _Q0 = v67;
    v39 = v24;
LABEL_41:
    v73 = _Q0.i32[2];
    v72 = _Q0.i64[0];
    v56 = *(_QWORD *)(a1 + 40);
    if (v56 >= *(_QWORD *)(a1 + 48))
    {
      result = sub_2233B3A8C(v28, &v72);
    }
    else
    {
      v57 = v72;
      *(_DWORD *)(v56 + 8) = v73;
      *(_QWORD *)v56 = v57;
      result = v56 + 12;
    }
    *(_QWORD *)(a1 + 40) = result;
    v24 = v39;
LABEL_45:
    v27 = v71;
    if (v71.f32[0] > -65504.0)
    {
      _Q0.i32[3] = v71.i32[3];
      _Q0.i64[0] = *(_QWORD *)v22;
      _Q0.i32[2] = *(_DWORD *)(v22 + 8);
      v27 = vmlaq_n_f32(v69, _Q0, v71.f32[0]);
      v75 = v27.i32[2];
      v74 = v27.i64[0];
      v58 = *(_QWORD *)(a1 + 8);
      if (v58 >= *(_QWORD *)(a1 + 16))
      {
        v59 = sub_223A6AE98((unint64_t *)a1, &v74);
      }
      else
      {
        *(_QWORD *)v58 = v74;
        *(_DWORD *)(v58 + 8) = v75;
        v59 = v58 + 12;
      }
      *(_QWORD *)(a1 + 8) = v59;
      if ((_DWORD)v18)
      {
        v73 = v67.i32[2];
        _Q0.i32[1] = v67.i32[1];
        v72 = v67.i64[0];
        v60 = *(_QWORD *)(a1 + 40);
        if (v60 >= *(_QWORD *)(a1 + 48))
        {
LABEL_53:
          result = sub_2233B3A8C(v28, &v72);
          goto LABEL_14;
        }
      }
      else
      {
        v72 = (uint64_t)v29;
        v73 = 1063675494;
        v60 = *(_QWORD *)(a1 + 40);
        if (v60 >= *(_QWORD *)(a1 + 48))
          goto LABEL_53;
      }
      v34 = v72;
      *(_DWORD *)(v60 + 8) = v73;
      *(_QWORD *)v60 = v34;
      result = v60 + 12;
LABEL_14:
      *(_QWORD *)(a1 + 40) = result;
    }
    v22 += 36;
  }
  while (v22 != v23);
  *(_DWORD *)(a1 + 64) = 1;
  if (v24)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return result;
}

void sub_223A638FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_22316F8F4(v1);
  _Unwind_Resume(a1);
}

void sub_223A63910(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_22316F8F4(v1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_223A63944(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t (***v15)();
  __int128 *v16;
  __int128 v17;
  __int128 *v18;
  uint64_t (**v19)();
  std::__shared_weak_count *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v33;
  std::string::size_type v34;
  int v35;
  int v38;
  std::__shared_weak_count **v39;
  std::__shared_weak_count *v40;
  __int128 *v41;
  __int128 v42;
  uint64_t (***v43)();
  uint64_t (**v44)();
  __int128 *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t (**v55)();
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int16 v60;
  char v61;
  uint64_t (**v62)();
  uint64_t (**v63)();
  std::__shared_weak_count *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  std::string __p;
  __int128 v73;
  uint64_t (**v74)();
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int16 v79;
  unsigned __int8 v80[17];
  unsigned __int8 v81[17];
  uint64_t v82[4];
  _QWORD v83[47];

  v83[44] = *MEMORY[0x24BDAC8D0];
  v82[0] = (uint64_t)"cv3d.recon.";
  v82[1] = 11;
  v82[2] = (uint64_t)"Volumetric.IntegrationPoints";
  v82[3] = 28;
  sub_2231A9820((uint64_t)v82, (uint64_t)v83, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v6[2];
    }
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        v69 = 0u;
        v70 = 0u;
        v71 = 728325608;
        kdebug_trace();
        v13 = *(unsigned __int8 *)(a1 + 208);
        v54 = a2;
        if (*(_BYTE *)(a1 + 208))
        {
          if ((!*(_DWORD *)(a1 + 184) || !*(_DWORD *)(a1 + 188))
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          sub_223C3D9D0(a1 + 128, (uint64_t)&v74);
          v14 = a3;
          a3 = (uint64_t *)*((_QWORD *)&v75 + 1);
          v55 = &off_24EC25150;
          v56 = v75;
          v57 = v76;
          v58 = v77;
          v59 = v78;
          v60 = v79;
          v61 = 1;
        }
        else
        {
          v14 = a3;
          LOBYTE(v55) = 0;
          v61 = 0;
        }
        v74 = &off_24EC25150;
        sub_223210C10((uint64_t)&v75);
        v15 = &v55;
        v16 = &v76;
        if (v13)
          v16 = &v57;
        v17 = v16[1];
        v65 = *v16;
        v18 = &v56;
        if (!v13)
          v15 = &v74;
        v19 = v15[1];
        if (v13)
        {
          v20 = (std::__shared_weak_count *)a3;
        }
        else
        {
          v18 = &v75;
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
        }
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        v66 = v17;
        v67 = v16[2];
        v68 = *((_WORD *)v16 + 24);
        v62 = &off_24EC25150;
        v63 = v19;
        v64 = v20;
        v81[0] = 0;
        v81[16] = 0;
        a3 = v14;
        v21 = v14;
        a2 = v54;
        sub_223A63404((uint64_t)v82, v21, v54, (uint64_t)&v62, v81);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          *(_QWORD *)&v73 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v73 + 1) = 2;
          v22 = sub_2241471F8();
          sub_2238BB49C((uint64_t)v22, v12, (uint64_t)v82, (uint64_t)&unk_2245C9EFE, &v73);
        }
        sub_22316F8F4(v82);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
        if (*((_QWORD *)&v75 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (v61)
        {
          v28 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          if (*((_QWORD *)&v56 + 1))
          {
            v29 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        kdebug_trace();
      }
    }
  }
  v69 = 0u;
  v70 = 0u;
  v71 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v33 = p_p->__r_.__value_.__r.__words[0];
    v34 = p_p->__r_.__value_.__l.__size_;
    v35 = p_p->__r_.__value_.__s.__data_[16];
    if (v33 == 0x6365722E64337663 && v34 == 0x73746174532E6E6FLL && v35 == 46)
    {
      sub_223187510();
      v38 = *(unsigned __int8 *)(a1 + 208);
      if (*(_BYTE *)(a1 + 208))
      {
        if ((!*(_DWORD *)(a1 + 184) || !*(_DWORD *)(a1 + 188))
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1169, (uint64_t)"!depth.normals->Empty()", 23, (uint64_t)"Normals buffer not valid", 24, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3D9D0(a1 + 128, (uint64_t)&v74);
        v55 = &off_24EC25150;
        v56 = v75;
        v57 = v76;
        v58 = v77;
        v59 = v78;
        v60 = v79;
        v61 = 1;
      }
      else
      {
        LOBYTE(v55) = 0;
        v61 = 0;
      }
      v74 = &off_24EC25150;
      sub_223210C10((uint64_t)&v75);
      v39 = (std::__shared_weak_count **)&v75 + 1;
      if (v38)
        v39 = (std::__shared_weak_count **)&v56 + 1;
      v40 = *v39;
      v41 = &v76;
      if (v38)
        v41 = &v57;
      v42 = v41[1];
      v65 = *v41;
      if (v38)
        v43 = &v55;
      else
        v43 = &v74;
      v44 = v43[1];
      v45 = &v56;
      if (!v38)
        v45 = &v75;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = 0;
      v66 = v42;
      v67 = v41[2];
      v68 = *((_WORD *)v41 + 24);
      v62 = &off_24EC25150;
      v63 = v44;
      v64 = v40;
      v80[0] = 0;
      v80[16] = 0;
      sub_223A63404((uint64_t)v82, a3, a2, (uint64_t)&v62, v80);
      sub_22316F8F4(v82);
      if (v40)
      {
        v46 = (unint64_t *)&v40->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v48 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1))
      {
        v49 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      if (v61)
      {
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
        if (*((_QWORD *)&v56 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_223A64024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223A640C4(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int32x2_t v15;
  _QWORD *v16;
  int32x2_t v17;
  int32x2_t *v18;
  int32x2_t *v19;
  int *v20;
  int *v21;
  BOOL v22;
  int v23;
  _QWORD *v24;
  _QWORD **v25;
  _QWORD *v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int32 v32;
  _QWORD *v33;
  float32x4_t v34;
  int32x2_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD **v48;
  _QWORD *v49;
  __int32 v50;
  __int32 v51;
  __int32 v52;
  __int32 v53;
  __int32 v54;
  __int32 v55;
  _QWORD *v56;
  float32x4_t v57;
  int32x2_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD **v72;
  __int32 v73;
  __int32 v74;
  __int32 v75;
  __int32 v76;
  __int32 v77;
  __int32 v78;
  _QWORD *v79;
  float32x4_t v80;
  int32x2_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  float32x4_t v94;
  float32x4_t v95;
  signed int v96;
  signed int v97;
  signed int v98;
  uint64_t *v99;
  uint64_t **v100;
  uint64_t **v101;
  signed int v102;
  signed int v103;
  signed int v104;
  char *v105;
  _QWORD *v106;
  float32x4_t v107;
  float32x4_t v108;
  signed int v109;
  signed int v110;
  signed int v111;
  uint64_t *v112;
  uint64_t **v113;
  uint64_t **v114;
  signed int v115;
  signed int v116;
  signed int v117;
  _QWORD *v118;
  float32x4_t v119;
  float32x4_t v120;
  signed int v121;
  signed int v122;
  signed int v123;
  uint64_t *v124;
  uint64_t **v125;
  uint64_t **v126;
  signed int v127;
  signed int v128;
  signed int v129;
  float32x4_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  std::mutex *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int128 v143;
  std::string *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  void *v148;
  uint64_t v149;
  std::string::size_type size;
  std::string *v151;
  std::string::size_type v152;
  std::string::size_type v153;
  int v154;
  void *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  std::mutex *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void **v166;
  void *v167;
  void **v168;
  void *v169;
  uint64_t v170;
  unint64_t v171;
  void **v172;
  void *v173;
  void *v174;
  int v175;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  std::mutex *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void **v185;
  void *v186;
  void **v187;
  void *v188;
  uint64_t v189;
  unint64_t v190;
  void **v191;
  void *v192;
  void *v193;
  int v194;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  std::mutex *v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  void **v204;
  void *v205;
  void **v206;
  void *v207;
  uint64_t v208;
  unint64_t v209;
  void **v210;
  void *v211;
  void *v212;
  int v213;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  std::mutex *v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  void **v223;
  void *v224;
  void **v225;
  void *v226;
  uint64_t v227;
  unint64_t v228;
  void **v229;
  void *v230;
  void *v231;
  int v232;
  uint64_t v235;
  _QWORD *v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  __int128 v240;
  char v241;
  char v242;
  std::string v243;
  char v244;
  __int128 v245;
  char v246;
  char v247;
  std::string v248;
  std::string v249;
  char v250;
  uint64_t v251;
  void *v252[2];
  __int128 v253;
  int v254;
  std::string v255;
  __int16 v256;
  char v257;
  __int16 v258;
  char v259;
  __int16 v260;
  char v261;
  __int16 v262;
  char v263;
  uint64_t **v264;
  uint64_t *v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  _QWORD *v274;
  uint64_t v275;
  uint64_t v276[48];
  uint64_t v277[48];
  std::string __p[16];
  void *v279[2];
  __int128 v280;
  int v281;
  void *v282;
  char v283;
  char v284;
  uint64_t v285[4];
  uint64_t v286;
  __int128 v287;
  const char *v288;
  uint64_t v289;
  _QWORD v290[3];

  *(double *)v239.i64 = a3;
  v290[0] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v5 = sub_2241471F8();
    v6 = v5[2];
    if (!v6)
    {
      v7 = v5;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v6 = v7[2];
    }
    v8 = *(_QWORD *)(v6 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      v285[0] = (uint64_t)"cv3d.recon.";
      v285[1] = 11;
      v285[2] = (uint64_t)"Volumetric.KeyVol.Integration";
      v285[3] = 29;
      sub_2231A9820((uint64_t)v285, (uint64_t)&v286, 0, 0, __p);
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v14 = v13;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((v14 & 1) == 0)
          return;
      }
      else if ((v13 & 1) == 0)
      {
        return;
      }
      v235 = a2;
      sub_2241498F4((uint64_t)v285, 0);
      sub_2241498F4((uint64_t)__p, 0);
      sub_2241498F4((uint64_t)v277, 0);
      sub_2241498F4((uint64_t)v276, 0);
      v274 = 0;
      v275 = 0;
      v272 = 0;
      v273 = &v274;
      v270 = &v271;
      v271 = 0;
      v268 = 0;
      v269 = 0;
      v266 = 0;
      v267 = &v268;
      v264 = &v265;
      v265 = 0;
      v262 = 0;
      v263 = -1;
      v260 = -256;
      v261 = 0;
      v258 = 255;
      v259 = 0;
      v256 = 200;
      v257 = 0;
      v16 = (_QWORD *)*a1;
      v236 = a1 + 1;
      if ((_QWORD *)*a1 != a1 + 1)
      {
        v17.i32[1] = v239.i32[1];
        *(float *)v15.i32 = v239.f32[0] * 8.0;
        *(float *)v17.i32 = (float)((float)(v239.f32[0] * 8.0) * 0.0) * 0.5;
        v237 = (float32x4_t)vdupq_lane_s32(v15, 0);
        v238 = (float32x4_t)vdupq_lane_s32(v17, 0);
        do
        {
          v19 = (int32x2_t *)v16[6];
          v18 = (int32x2_t *)v16[7];
          v20 = (int *)v16[9];
          v21 = (int *)v16[10];
          v22 = v19 == v18 && v20 == v21;
          if (v22)
            goto LABEL_212;
          do
          {
            v23 = *v20;
            if (*v20 == 2)
            {
              v70 = v268;
              v71 = &v268;
              v72 = &v268;
              if (!v268)
                goto LABEL_103;
              v73 = v19->i32[0];
              v74 = v19->i32[1];
              v75 = v19[1].i32[0];
              while (1)
              {
                v72 = (_QWORD **)v70;
                v76 = *((_DWORD *)v70 + 7);
                if (v73 == v76)
                {
                  v77 = *((_DWORD *)v72 + 8);
                  if (v74 == v77)
                  {
                    v78 = *((_DWORD *)v72 + 9);
                    if (v75 < v78)
                      goto LABEL_90;
                    if (v78 >= v75)
                      goto LABEL_191;
                  }
                  else
                  {
                    if (v74 < v77)
                    {
LABEL_90:
                      v70 = *v72;
                      v71 = v72;
                      if (!*v72)
                        goto LABEL_103;
                      continue;
                    }
                    if (v77 >= v74)
                      goto LABEL_191;
                  }
                }
                else
                {
                  if (v73 < v76)
                    goto LABEL_90;
                  if (v76 >= v73)
                    goto LABEL_191;
                }
                v70 = v72[1];
                if (!v70)
                {
                  v71 = v72 + 1;
LABEL_103:
                  v79 = operator new(0x28uLL);
                  v81 = *v19;
                  *((_DWORD *)v79 + 9) = v19[1].i32[0];
                  *(int32x2_t *)((char *)v79 + 28) = v81;
                  *v79 = 0;
                  v79[1] = 0;
                  v79[2] = v72;
                  *v71 = v79;
                  if (*v267)
                  {
                    v267 = (_QWORD *)*v267;
                    v79 = (_QWORD *)*v71;
                  }
                  v82 = v268;
                  v22 = v79 == v268;
                  *((_BYTE *)v79 + 24) = v79 == v268;
                  if (v22)
                    goto LABEL_150;
                  while (1)
                  {
                    v83 = v79[2];
                    if (*(_BYTE *)(v83 + 24))
                      goto LABEL_150;
                    v84 = *(_QWORD **)(v83 + 16);
                    v85 = *v84;
                    if (*v84 == v83)
                    {
                      v88 = v84[1];
                      if (!v88 || (v89 = *(unsigned __int8 *)(v88 + 24), v86 = (_BYTE *)(v88 + 24), v89))
                      {
                        if (*(_QWORD **)v83 == v79)
                        {
                          *(_BYTE *)(v83 + 24) = 1;
                          *((_BYTE *)v84 + 24) = 0;
                          v92 = *(_QWORD *)(v83 + 8);
                          *v84 = v92;
                          if (v92)
                            goto LABEL_120;
                        }
                        else
                        {
                          v90 = *(uint64_t **)(v83 + 8);
                          v91 = *v90;
                          *(_QWORD *)(v83 + 8) = *v90;
                          if (v91)
                          {
                            *(_QWORD *)(v91 + 16) = v83;
                            v84 = *(_QWORD **)(v83 + 16);
                          }
                          v90[2] = (uint64_t)v84;
                          *(_QWORD *)(*(_QWORD *)(v83 + 16) + 8 * (**(_QWORD **)(v83 + 16) != v83)) = v90;
                          *v90 = v83;
                          *(_QWORD *)(v83 + 16) = v90;
                          v84 = (_QWORD *)v90[2];
                          v83 = *v84;
                          *((_BYTE *)v90 + 24) = 1;
                          *((_BYTE *)v84 + 24) = 0;
                          v92 = *(_QWORD *)(v83 + 8);
                          *v84 = v92;
                          if (v92)
LABEL_120:
                            *(_QWORD *)(v92 + 16) = v84;
                        }
                        *(_QWORD *)(v83 + 16) = v84[2];
                        *(_QWORD *)(v84[2] + 8 * (*(_QWORD *)v84[2] != (_QWORD)v84)) = v83;
                        *(_QWORD *)(v83 + 8) = v84;
LABEL_149:
                        v84[2] = v83;
LABEL_150:
                        ++v269;
                        *(float32x2_t *)v80.f32 = vcvt_f32_s32(*v19);
                        v80.f32[2] = (float)v19[1].i32[0];
                        v107 = vaddq_f32(v238, vmulq_n_f32(v80, v239.f32[0]));
                        LODWORD(v279[1]) = v107.i32[2];
                        v279[0] = (void *)v107.i64[0];
                        v108 = vaddq_f32(v237, v107);
                        LODWORD(v252[1]) = v108.i32[2];
                        v252[0] = (void *)v108.i64[0];
                        sub_223CF1130((uint64_t)v279, (uint64_t)v252, 1, (__int8 *)&v258, (uint64_t)v277, v239, v108, v237);
                        v109 = v19->i32[0] & 0xFFFFFFC0;
                        v110 = v19->i32[1] & 0xFFFFFFC0;
                        v111 = v19[1].i32[0] & 0xFFFFFFC0;
                        v279[0] = (void *)__PAIR64__(v110, v109);
                        LODWORD(v279[1]) = v111;
                        v112 = v265;
                        v113 = &v265;
                        v114 = &v265;
                        if (!v265)
                        {
LABEL_165:
                          v105 = (char *)operator new(0x28uLL);
                          *(void **)(v105 + 28) = v279[0];
                          *((_DWORD *)v105 + 9) = v279[1];
                          *(_QWORD *)v105 = 0;
                          *((_QWORD *)v105 + 1) = 0;
                          *((_QWORD *)v105 + 2) = v114;
                          *v113 = (uint64_t *)v105;
                          if (*v264)
                          {
                            v264 = (uint64_t **)*v264;
                            v105 = (char *)*v113;
                          }
                          goto LABEL_190;
                        }
                        while (1)
                        {
                          v114 = (uint64_t **)v112;
                          v115 = *((_DWORD *)v112 + 7);
                          if (v109 == v115)
                          {
                            v116 = *((_DWORD *)v114 + 8);
                            if (v110 == v116)
                            {
                              v117 = *((_DWORD *)v114 + 9);
                              if (v111 < v117)
                                goto LABEL_152;
                              if (v117 >= v111)
                                goto LABEL_191;
                            }
                            else
                            {
                              if (v110 < v116)
                              {
LABEL_152:
                                v112 = *v114;
                                v113 = v114;
                                if (!*v114)
                                  goto LABEL_165;
                                continue;
                              }
                              if (v116 >= v110)
                                goto LABEL_191;
                            }
                          }
                          else
                          {
                            if (v109 < v115)
                              goto LABEL_152;
                            if (v115 >= v109)
                              goto LABEL_191;
                          }
                          v112 = v114[1];
                          if (!v112)
                          {
                            v113 = v114 + 1;
                            goto LABEL_165;
                          }
                        }
                      }
                    }
                    else if (!v85 || (v87 = *(unsigned __int8 *)(v85 + 24), v86 = (_BYTE *)(v85 + 24), v87))
                    {
                      if (*(_QWORD **)v83 == v79)
                      {
                        v132 = v79[1];
                        *(_QWORD *)v83 = v132;
                        if (v132)
                        {
                          *(_QWORD *)(v132 + 16) = v83;
                          v84 = *(_QWORD **)(v83 + 16);
                        }
                        v79[2] = v84;
                        *(_QWORD *)(*(_QWORD *)(v83 + 16) + 8 * (**(_QWORD **)(v83 + 16) != v83)) = v79;
                        v79[1] = v83;
                        *(_QWORD *)(v83 + 16) = v79;
                        v84 = (_QWORD *)v79[2];
                        *((_BYTE *)v79 + 24) = 1;
                        *((_BYTE *)v84 + 24) = 0;
                        v83 = v84[1];
                        v106 = *(_QWORD **)v83;
                        v84[1] = *(_QWORD *)v83;
                        if (v106)
LABEL_147:
                          v106[2] = v84;
                      }
                      else
                      {
                        *(_BYTE *)(v83 + 24) = 1;
                        *((_BYTE *)v84 + 24) = 0;
                        v83 = v84[1];
                        v106 = *(_QWORD **)v83;
                        v84[1] = *(_QWORD *)v83;
                        if (v106)
                          goto LABEL_147;
                      }
                      *(_QWORD *)(v83 + 16) = v84[2];
                      *(_QWORD *)(v84[2] + 8 * (*(_QWORD *)v84[2] != (_QWORD)v84)) = v83;
                      *(_QWORD *)v83 = v84;
                      goto LABEL_149;
                    }
                    *(_BYTE *)(v83 + 24) = 1;
                    v79 = v84;
                    *((_BYTE *)v84 + 24) = v84 == v82;
                    *v86 = 1;
                    if (v84 == v82)
                      goto LABEL_150;
                  }
                }
              }
            }
            if (v23 == 1)
            {
              v47 = v271;
              v48 = &v271;
              v49 = &v271;
              if (!v271)
                goto LABEL_69;
              v50 = v19->i32[0];
              v51 = v19->i32[1];
              v52 = v19[1].i32[0];
              while (1)
              {
                v48 = (_QWORD **)v47;
                v53 = *((_DWORD *)v47 + 7);
                if (v50 == v53)
                {
                  v54 = *((_DWORD *)v48 + 8);
                  if (v51 == v54)
                  {
                    v55 = *((_DWORD *)v48 + 9);
                    if (v52 < v55)
                      goto LABEL_56;
                    if (v55 >= v52)
                      goto LABEL_191;
                  }
                  else
                  {
                    if (v51 < v54)
                    {
LABEL_56:
                      v47 = *v48;
                      v49 = v48;
                      if (!*v48)
                        goto LABEL_69;
                      continue;
                    }
                    if (v54 >= v51)
                      goto LABEL_191;
                  }
                }
                else
                {
                  if (v50 < v53)
                    goto LABEL_56;
                  if (v53 >= v50)
                    goto LABEL_191;
                }
                v47 = v48[1];
                if (!v47)
                {
                  v49 = v48 + 1;
LABEL_69:
                  v56 = operator new(0x28uLL);
                  v58 = *v19;
                  *((_DWORD *)v56 + 9) = v19[1].i32[0];
                  *(int32x2_t *)((char *)v56 + 28) = v58;
                  *v56 = 0;
                  v56[1] = 0;
                  v56[2] = v48;
                  *v49 = v56;
                  if (*v270)
                  {
                    v270 = (_QWORD *)*v270;
                    v56 = (_QWORD *)*v49;
                  }
                  v59 = v271;
                  v22 = v56 == v271;
                  *((_BYTE *)v56 + 24) = v56 == v271;
                  if (v22)
                    goto LABEL_127;
                  while (1)
                  {
                    v60 = v56[2];
                    if (*(_BYTE *)(v60 + 24))
                      goto LABEL_127;
                    v61 = *(_QWORD **)(v60 + 16);
                    v62 = *v61;
                    if (*v61 == v60)
                    {
                      v65 = v61[1];
                      if (!v65 || (v66 = *(unsigned __int8 *)(v65 + 24), v63 = (_BYTE *)(v65 + 24), v66))
                      {
                        if (*(_QWORD **)v60 == v56)
                        {
                          *(_BYTE *)(v60 + 24) = 1;
                          *((_BYTE *)v61 + 24) = 0;
                          v69 = *(_QWORD *)(v60 + 8);
                          *v61 = v69;
                          if (v69)
                            goto LABEL_86;
                        }
                        else
                        {
                          v67 = *(uint64_t **)(v60 + 8);
                          v68 = *v67;
                          *(_QWORD *)(v60 + 8) = *v67;
                          if (v68)
                          {
                            *(_QWORD *)(v68 + 16) = v60;
                            v61 = *(_QWORD **)(v60 + 16);
                          }
                          v67[2] = (uint64_t)v61;
                          *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v67;
                          *v67 = v60;
                          *(_QWORD *)(v60 + 16) = v67;
                          v61 = (_QWORD *)v67[2];
                          v60 = *v61;
                          *((_BYTE *)v67 + 24) = 1;
                          *((_BYTE *)v61 + 24) = 0;
                          v69 = *(_QWORD *)(v60 + 8);
                          *v61 = v69;
                          if (v69)
LABEL_86:
                            *(_QWORD *)(v69 + 16) = v61;
                        }
                        *(_QWORD *)(v60 + 16) = v61[2];
                        *(_QWORD *)(v61[2] + 8 * (*(_QWORD *)v61[2] != (_QWORD)v61)) = v60;
                        *(_QWORD *)(v60 + 8) = v61;
LABEL_126:
                        v61[2] = v60;
LABEL_127:
                        ++v272;
                        *(float32x2_t *)v57.f32 = vcvt_f32_s32(*v19);
                        v57.f32[2] = (float)v19[1].i32[0];
                        v94 = vaddq_f32(v238, vmulq_n_f32(v57, v239.f32[0]));
                        LODWORD(v279[1]) = v94.i32[2];
                        v279[0] = (void *)v94.i64[0];
                        v95 = vaddq_f32(v237, v94);
                        LODWORD(v252[1]) = v95.i32[2];
                        v252[0] = (void *)v95.i64[0];
                        sub_223CF1130((uint64_t)v279, (uint64_t)v252, 1, (__int8 *)&v260, (uint64_t)__p, v239, v95, v237);
                        v96 = v19->i32[0] & 0xFFFFFFC0;
                        v97 = v19->i32[1] & 0xFFFFFFC0;
                        v98 = v19[1].i32[0] & 0xFFFFFFC0;
                        v279[0] = (void *)__PAIR64__(v97, v96);
                        LODWORD(v279[1]) = v98;
                        v99 = v265;
                        v100 = &v265;
                        v101 = &v265;
                        if (!v265)
                        {
LABEL_142:
                          v105 = (char *)operator new(0x28uLL);
                          *(void **)(v105 + 28) = v279[0];
                          *((_DWORD *)v105 + 9) = v279[1];
                          *(_QWORD *)v105 = 0;
                          *((_QWORD *)v105 + 1) = 0;
                          *((_QWORD *)v105 + 2) = v101;
                          *v100 = (uint64_t *)v105;
                          if (*v264)
                          {
                            v264 = (uint64_t **)*v264;
                            v105 = (char *)*v100;
                          }
                          goto LABEL_190;
                        }
                        while (1)
                        {
                          v101 = (uint64_t **)v99;
                          v102 = *((_DWORD *)v99 + 7);
                          if (v96 == v102)
                          {
                            v103 = *((_DWORD *)v101 + 8);
                            if (v97 == v103)
                            {
                              v104 = *((_DWORD *)v101 + 9);
                              if (v98 < v104)
                                goto LABEL_129;
                              if (v104 >= v98)
                                goto LABEL_191;
                            }
                            else
                            {
                              if (v97 < v103)
                              {
LABEL_129:
                                v99 = *v101;
                                v100 = v101;
                                if (!*v101)
                                  goto LABEL_142;
                                continue;
                              }
                              if (v103 >= v97)
                                goto LABEL_191;
                            }
                          }
                          else
                          {
                            if (v96 < v102)
                              goto LABEL_129;
                            if (v102 >= v96)
                              goto LABEL_191;
                          }
                          v99 = v101[1];
                          if (!v99)
                          {
                            v100 = v101 + 1;
                            goto LABEL_142;
                          }
                        }
                      }
                    }
                    else if (!v62 || (v64 = *(unsigned __int8 *)(v62 + 24), v63 = (_BYTE *)(v62 + 24), v64))
                    {
                      if (*(_QWORD **)v60 == v56)
                      {
                        v131 = v56[1];
                        *(_QWORD *)v60 = v131;
                        if (v131)
                        {
                          *(_QWORD *)(v131 + 16) = v60;
                          v61 = *(_QWORD **)(v60 + 16);
                        }
                        v56[2] = v61;
                        *(_QWORD *)(*(_QWORD *)(v60 + 16) + 8 * (**(_QWORD **)(v60 + 16) != v60)) = v56;
                        v56[1] = v60;
                        *(_QWORD *)(v60 + 16) = v56;
                        v61 = (_QWORD *)v56[2];
                        *((_BYTE *)v56 + 24) = 1;
                        *((_BYTE *)v61 + 24) = 0;
                        v60 = v61[1];
                        v93 = *(_QWORD **)v60;
                        v61[1] = *(_QWORD *)v60;
                        if (v93)
LABEL_124:
                          v93[2] = v61;
                      }
                      else
                      {
                        *(_BYTE *)(v60 + 24) = 1;
                        *((_BYTE *)v61 + 24) = 0;
                        v60 = v61[1];
                        v93 = *(_QWORD **)v60;
                        v61[1] = *(_QWORD *)v60;
                        if (v93)
                          goto LABEL_124;
                      }
                      *(_QWORD *)(v60 + 16) = v61[2];
                      *(_QWORD *)(v61[2] + 8 * (*(_QWORD *)v61[2] != (_QWORD)v61)) = v60;
                      *(_QWORD *)v60 = v61;
                      goto LABEL_126;
                    }
                    *(_BYTE *)(v60 + 24) = 1;
                    v56 = v61;
                    *((_BYTE *)v61 + 24) = v61 == v59;
                    *v63 = 1;
                    if (v61 == v59)
                      goto LABEL_127;
                  }
                }
              }
            }
            if (v23)
              goto LABEL_191;
            v24 = v274;
            v25 = &v274;
            v26 = &v274;
            if (v274)
            {
              v27 = v19->i32[0];
              v28 = v19->i32[1];
              v29 = v19[1].i32[0];
              while (1)
              {
                v25 = (_QWORD **)v24;
                v30 = *((_DWORD *)v24 + 7);
                if (v27 == v30)
                {
                  v31 = *((_DWORD *)v25 + 8);
                  if (v28 == v31)
                  {
                    v32 = *((_DWORD *)v25 + 9);
                    if (v29 >= v32)
                    {
                      if (v32 >= v29)
                        goto LABEL_191;
                      goto LABEL_33;
                    }
                  }
                  else if (v28 >= v31)
                  {
                    if (v31 >= v28)
                      goto LABEL_191;
                    goto LABEL_33;
                  }
LABEL_22:
                  v24 = *v25;
                  v26 = v25;
                  if (!*v25)
                    break;
                }
                else
                {
                  if (v27 < v30)
                    goto LABEL_22;
                  if (v30 >= v27)
                    goto LABEL_191;
LABEL_33:
                  v24 = v25[1];
                  if (!v24)
                  {
                    v26 = v25 + 1;
                    break;
                  }
                }
              }
            }
            v33 = operator new(0x28uLL);
            v35 = *v19;
            *((_DWORD *)v33 + 9) = v19[1].i32[0];
            *(int32x2_t *)((char *)v33 + 28) = v35;
            *v33 = 0;
            v33[1] = 0;
            v33[2] = v25;
            *v26 = v33;
            if (*v273)
            {
              v273 = (_QWORD *)*v273;
              v33 = (_QWORD *)*v26;
            }
            v36 = v274;
            v22 = v33 == v274;
            *((_BYTE *)v33 + 24) = v33 == v274;
            if (!v22)
            {
              do
              {
                v37 = v33[2];
                if (*(_BYTE *)(v37 + 24))
                  break;
                v38 = *(_QWORD **)(v37 + 16);
                v39 = *v38;
                if (*v38 == v37)
                {
                  v42 = v38[1];
                  if (!v42 || (v43 = *(unsigned __int8 *)(v42 + 24), v40 = (_BYTE *)(v42 + 24), v43))
                  {
                    if (*(_QWORD **)v37 == v33)
                    {
                      *(_BYTE *)(v37 + 24) = 1;
                      *((_BYTE *)v38 + 24) = 0;
                      v46 = *(_QWORD *)(v37 + 8);
                      *v38 = v46;
                      if (v46)
                        goto LABEL_52;
                    }
                    else
                    {
                      v44 = *(uint64_t **)(v37 + 8);
                      v45 = *v44;
                      *(_QWORD *)(v37 + 8) = *v44;
                      if (v45)
                      {
                        *(_QWORD *)(v45 + 16) = v37;
                        v38 = *(_QWORD **)(v37 + 16);
                      }
                      v44[2] = (uint64_t)v38;
                      *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v44;
                      *v44 = v37;
                      *(_QWORD *)(v37 + 16) = v44;
                      v38 = (_QWORD *)v44[2];
                      v37 = *v38;
                      *((_BYTE *)v44 + 24) = 1;
                      *((_BYTE *)v38 + 24) = 0;
                      v46 = *(_QWORD *)(v37 + 8);
                      *v38 = v46;
                      if (v46)
LABEL_52:
                        *(_QWORD *)(v46 + 16) = v38;
                    }
                    *(_QWORD *)(v37 + 16) = v38[2];
                    *(_QWORD *)(v38[2] + 8 * (*(_QWORD *)v38[2] != (_QWORD)v38)) = v37;
                    *(_QWORD *)(v37 + 8) = v38;
LABEL_172:
                    v38[2] = v37;
                    break;
                  }
                }
                else if (!v39 || (v41 = *(unsigned __int8 *)(v39 + 24), v40 = (_BYTE *)(v39 + 24), v41))
                {
                  if (*(_QWORD **)v37 == v33)
                  {
                    v133 = v33[1];
                    *(_QWORD *)v37 = v133;
                    if (v133)
                    {
                      *(_QWORD *)(v133 + 16) = v37;
                      v38 = *(_QWORD **)(v37 + 16);
                    }
                    v33[2] = v38;
                    *(_QWORD *)(*(_QWORD *)(v37 + 16) + 8 * (**(_QWORD **)(v37 + 16) != v37)) = v33;
                    v33[1] = v37;
                    *(_QWORD *)(v37 + 16) = v33;
                    v38 = (_QWORD *)v33[2];
                    *((_BYTE *)v33 + 24) = 1;
                    *((_BYTE *)v38 + 24) = 0;
                    v37 = v38[1];
                    v118 = *(_QWORD **)v37;
                    v38[1] = *(_QWORD *)v37;
                    if (v118)
LABEL_170:
                      v118[2] = v38;
                  }
                  else
                  {
                    *(_BYTE *)(v37 + 24) = 1;
                    *((_BYTE *)v38 + 24) = 0;
                    v37 = v38[1];
                    v118 = *(_QWORD **)v37;
                    v38[1] = *(_QWORD *)v37;
                    if (v118)
                      goto LABEL_170;
                  }
                  *(_QWORD *)(v37 + 16) = v38[2];
                  *(_QWORD *)(v38[2] + 8 * (*(_QWORD *)v38[2] != (_QWORD)v38)) = v37;
                  *(_QWORD *)v37 = v38;
                  goto LABEL_172;
                }
                *(_BYTE *)(v37 + 24) = 1;
                v33 = v38;
                *((_BYTE *)v38 + 24) = v38 == v36;
                *v40 = 1;
              }
              while (v38 != v36);
            }
            ++v275;
            *(float32x2_t *)v34.f32 = vcvt_f32_s32(*v19);
            v34.f32[2] = (float)v19[1].i32[0];
            v119 = vaddq_f32(v238, vmulq_n_f32(v34, v239.f32[0]));
            LODWORD(v279[1]) = v119.i32[2];
            v279[0] = (void *)v119.i64[0];
            v120 = vaddq_f32(v237, v119);
            LODWORD(v252[1]) = v120.i32[2];
            v252[0] = (void *)v120.i64[0];
            sub_223CF1130((uint64_t)v279, (uint64_t)v252, 1, (__int8 *)&v262, (uint64_t)v285, v239, v120, v237);
            v121 = v19->i32[0] & 0xFFFFFFC0;
            v122 = v19->i32[1] & 0xFFFFFFC0;
            v123 = v19[1].i32[0] & 0xFFFFFFC0;
            v279[0] = (void *)__PAIR64__(v122, v121);
            LODWORD(v279[1]) = v123;
            v124 = v265;
            v125 = &v265;
            v126 = &v265;
            if (!v265)
              goto LABEL_188;
            do
            {
              while (1)
              {
                v126 = (uint64_t **)v124;
                v127 = *((_DWORD *)v124 + 7);
                if (v121 != v127)
                  break;
                v128 = *((_DWORD *)v126 + 8);
                if (v122 != v128)
                {
                  if (v122 < v128)
                    goto LABEL_175;
                  if (v128 >= v122)
                    goto LABEL_191;
                  goto LABEL_186;
                }
                v129 = *((_DWORD *)v126 + 9);
                if (v123 >= v129)
                {
                  if (v129 >= v123)
                    goto LABEL_191;
                  goto LABEL_186;
                }
LABEL_175:
                v124 = *v126;
                v125 = v126;
                if (!*v126)
                  goto LABEL_188;
              }
              if (v121 < v127)
                goto LABEL_175;
              if (v127 >= v121)
                goto LABEL_191;
LABEL_186:
              v124 = v126[1];
            }
            while (v124);
            v125 = v126 + 1;
LABEL_188:
            v105 = (char *)operator new(0x28uLL);
            *(void **)(v105 + 28) = v279[0];
            *((_DWORD *)v105 + 9) = v279[1];
            *(_QWORD *)v105 = 0;
            *((_QWORD *)v105 + 1) = 0;
            *((_QWORD *)v105 + 2) = v126;
            *v125 = (uint64_t *)v105;
            if (*v264)
            {
              v264 = (uint64_t **)*v264;
              v105 = (char *)*v125;
            }
LABEL_190:
            sub_2231A9A8C(v265, (uint64_t *)v105);
            ++v266;
            sub_223CF1628((int32x2_t *)v279, 8u, (__int8 *)&v256, (uint64_t)v276, v239.f32[0], v130);
LABEL_191:
            v19 = (int32x2_t *)((char *)v19 + 12);
            ++v20;
          }
          while (v19 != v18 || v20 != v21);
LABEL_212:
          v134 = (_QWORD *)v16[1];
          if (v134)
          {
            do
            {
              v135 = v134;
              v134 = (_QWORD *)*v134;
            }
            while (v134);
          }
          else
          {
            do
            {
              v135 = (_QWORD *)v16[2];
              v22 = *v135 == (_QWORD)v16;
              v16 = v135;
            }
            while (!v22);
          }
          v16 = v135;
        }
        while (v135 != v236);
      }
      if (*(_BYTE *)(v235 + 64))
      {
        v279[0] = "cv3d.recon.";
        v279[1] = (void *)11;
        *(_QWORD *)&v280 = "Volumetric.KeyVol.Integration";
        *((_QWORD *)&v280 + 1) = 29;
        sub_2231A9820((uint64_t)v279, (uint64_t)&v281, 0, 0, &v255);
        sub_224569D7C();
        sub_224569A80();
        if (os_variant_has_internal_diagnostics())
        {
          v136 = sub_2241471F8();
          v137 = v136[2];
          if (!v137)
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            v137 = v136[2];
          }
          v138 = *(_QWORD *)(v137 + 64);
          v139 = (std::mutex *)(v138 + 32);
          std::mutex::lock((std::mutex *)(v138 + 32));
          v141 = *(_QWORD *)(v138 + 96);
          v140 = *(_QWORD *)(v138 + 104);
          std::mutex::unlock(v139);
          if (v141 != v140)
          {
            v142 = HIBYTE(v255.__r_.__value_.__r.__words[2]);
            v143 = *(_OWORD *)&v255.__r_.__value_.__l.__data_;
            sub_2241471F8();
            v144 = (v142 & 0x80u) == 0 ? &v255 : (std::string *)v143;
            v145 = (v142 & 0x80u) == 0 ? v142 : *((_QWORD *)&v143 + 1);
            v146 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v144, v145);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v146 + 24))(v146))
            {
              *(_OWORD *)v252 = 0u;
              v253 = 0u;
              v254 = 728325608;
              kdebug_trace();
              sub_224141CD8(&v251, (_QWORD *)v235, flt_22469B46C);
              *(_QWORD *)&v287 = "cv3d.recon.";
              *((_QWORD *)&v287 + 1) = 11;
              v288 = "Volumetric.KeyVol.Integration";
              v289 = 29;
              sub_2231A9820((uint64_t)&v287, (uint64_t)v290, 0, 0, &v248);
              v249 = v248;
              memset(&v248, 0, sizeof(v248));
              v250 = 1;
              LOBYTE(v245) = 0;
              v247 = 0;
              sub_22414372C((uint64_t)v279, &v251, (__int128 *)&v249, &v245);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v146 + 24))(v146))
              {
                *(_QWORD *)&v287 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                *((_QWORD *)&v287 + 1) = 2;
                v147 = sub_2241471F8();
                sub_2235335A0((uint64_t)v147, v146, (uint64_t)v279, (uint64_t)&unk_2245C9EFE, &v287);
              }
              if (v284 && v283 < 0)
                operator delete(v282);
              if ((_BYTE)v281 && SHIBYTE(v280) < 0)
                operator delete(v279[1]);
              v148 = v279[0];
              v279[0] = 0;
              if (v148)
                MEMORY[0x227684CE8](v148, 0x1000C4072FAA15ELL);
              if (v247 && v246 < 0)
                operator delete((void *)v245);
              if (v250 && SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v249.__r_.__value_.__l.__data_);
              if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v248.__r_.__value_.__l.__data_);
              v149 = v251;
              v251 = 0;
              if (v149)
                MEMORY[0x227684CE8](v149, 0x1000C4072FAA15ELL);
              kdebug_trace();
            }
          }
        }
        *(_OWORD *)v252 = 0u;
        v253 = 0u;
        v254 = 728325624;
        kdebug_trace();
        size = HIBYTE(v255.__r_.__value_.__r.__words[2]);
        if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v255.__r_.__value_.__l.__size_;
        if (size >= 0x11)
        {
          v151 = &v255;
          if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v151 = (std::string *)v255.__r_.__value_.__r.__words[0];
          v152 = v151->__r_.__value_.__r.__words[0];
          v153 = v151->__r_.__value_.__l.__size_;
          v154 = v151->__r_.__value_.__s.__data_[16];
          if (v152 == 0x6365722E64337663 && v153 == 0x73746174532E6E6FLL && v154 == 46)
          {
            sub_223187510();
            sub_224141CD8(&v251, (_QWORD *)v235, flt_22469B46C);
            *(_QWORD *)&v287 = "cv3d.recon.";
            *((_QWORD *)&v287 + 1) = 11;
            v288 = "Volumetric.KeyVol.Integration";
            v289 = 29;
            sub_2231A9820((uint64_t)&v287, (uint64_t)v290, 0, 0, &v248);
            v243 = v248;
            memset(&v248, 0, sizeof(v248));
            v244 = 1;
            LOBYTE(v240) = 0;
            v242 = 0;
            sub_22414372C((uint64_t)v279, &v251, (__int128 *)&v243, &v240);
            if (v284 && v283 < 0)
              operator delete(v282);
            if ((_BYTE)v281 && SHIBYTE(v280) < 0)
              operator delete(v279[1]);
            v157 = v279[0];
            v279[0] = 0;
            if (v157)
              MEMORY[0x227684CE8](v157, 0x1000C4072FAA15ELL);
            if (v242 && v241 < 0)
              operator delete((void *)v240);
            if (v244 && SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v243.__r_.__value_.__l.__data_);
            if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v248.__r_.__value_.__l.__data_);
            v158 = v251;
            v251 = 0;
            if (v158)
              MEMORY[0x227684CE8](v158, 0x1000C4072FAA15ELL);
          }
        }
        kdebug_trace();
        if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v255.__r_.__value_.__l.__data_);
      }
      v279[0] = "cv3d.recon.";
      v279[1] = (void *)11;
      *(_QWORD *)&v280 = "Volumetric.KeyVol.Integration";
      *((_QWORD *)&v280 + 1) = 29;
      sub_2231A9820((uint64_t)v279, (uint64_t)&v281, 0, 0, (std::string *)v252);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v159 = sub_2241471F8();
        v160 = v159[2];
        if (!v160)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v160 = v159[2];
        }
        v161 = *(_QWORD *)(v160 + 64);
        v162 = (std::mutex *)(v161 + 32);
        std::mutex::lock((std::mutex *)(v161 + 32));
        v164 = *(_QWORD *)(v161 + 96);
        v163 = *(_QWORD *)(v161 + 104);
        std::mutex::unlock(v162);
        if (v164 != v163)
        {
          v165 = (void *)BYTE7(v253);
          v166 = (void **)v252[0];
          v167 = v252[1];
          sub_2241471F8();
          v168 = (char)v165 >= 0 ? v252 : v166;
          v169 = (char)v165 >= 0 ? v165 : v167;
          v170 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v168, v169);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v170 + 24))(v170))
          {
            v280 = 0u;
            *(_OWORD *)v279 = 0u;
            v281 = 728325608;
            kdebug_trace();
            sub_223A65F60(v170, (uint64_t)v285);
            kdebug_trace();
          }
        }
      }
      v280 = 0u;
      *(_OWORD *)v279 = 0u;
      v281 = 728325624;
      kdebug_trace();
      v171 = BYTE7(v253);
      if (SBYTE7(v253) < 0)
        v171 = (unint64_t)v252[1];
      if (v171 >= 0x11)
      {
        v172 = v252;
        if (SBYTE7(v253) < 0)
          v172 = (void **)v252[0];
        v173 = *v172;
        v174 = v172[1];
        v175 = *((unsigned __int8 *)v172 + 16);
        if (v173 == (void *)0x6365722E64337663 && v174 == (void *)0x73746174532E6E6FLL && v175 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SBYTE7(v253) < 0)
        operator delete(v252[0]);
      v279[0] = "cv3d.recon.";
      v279[1] = (void *)11;
      *(_QWORD *)&v280 = "Volumetric.KeyVol.Integration";
      *((_QWORD *)&v280 + 1) = 29;
      sub_2231A9820((uint64_t)v279, (uint64_t)&v281, 0, 0, (std::string *)v252);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v178 = sub_2241471F8();
        v179 = v178[2];
        if (!v179)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v179 = v178[2];
        }
        v180 = *(_QWORD *)(v179 + 64);
        v181 = (std::mutex *)(v180 + 32);
        std::mutex::lock((std::mutex *)(v180 + 32));
        v183 = *(_QWORD *)(v180 + 96);
        v182 = *(_QWORD *)(v180 + 104);
        std::mutex::unlock(v181);
        if (v183 != v182)
        {
          v184 = (void *)BYTE7(v253);
          v185 = (void **)v252[0];
          v186 = v252[1];
          sub_2241471F8();
          v187 = (char)v184 >= 0 ? v252 : v185;
          v188 = (char)v184 >= 0 ? v184 : v186;
          v189 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v187, v188);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v189 + 24))(v189))
          {
            v280 = 0u;
            *(_OWORD *)v279 = 0u;
            v281 = 728325608;
            kdebug_trace();
            sub_223A66034(v189, (uint64_t)__p);
            kdebug_trace();
          }
        }
      }
      v280 = 0u;
      *(_OWORD *)v279 = 0u;
      v281 = 728325624;
      kdebug_trace();
      v190 = BYTE7(v253);
      if (SBYTE7(v253) < 0)
        v190 = (unint64_t)v252[1];
      if (v190 >= 0x11)
      {
        v191 = v252;
        if (SBYTE7(v253) < 0)
          v191 = (void **)v252[0];
        v192 = *v191;
        v193 = v191[1];
        v194 = *((unsigned __int8 *)v191 + 16);
        if (v192 == (void *)0x6365722E64337663 && v193 == (void *)0x73746174532E6E6FLL && v194 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SBYTE7(v253) < 0)
        operator delete(v252[0]);
      v279[0] = "cv3d.recon.";
      v279[1] = (void *)11;
      *(_QWORD *)&v280 = "Volumetric.KeyVol.Integration";
      *((_QWORD *)&v280 + 1) = 29;
      sub_2231A9820((uint64_t)v279, (uint64_t)&v281, 0, 0, (std::string *)v252);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v197 = sub_2241471F8();
        v198 = v197[2];
        if (!v198)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v198 = v197[2];
        }
        v199 = *(_QWORD *)(v198 + 64);
        v200 = (std::mutex *)(v199 + 32);
        std::mutex::lock((std::mutex *)(v199 + 32));
        v202 = *(_QWORD *)(v199 + 96);
        v201 = *(_QWORD *)(v199 + 104);
        std::mutex::unlock(v200);
        if (v202 != v201)
        {
          v203 = (void *)BYTE7(v253);
          v204 = (void **)v252[0];
          v205 = v252[1];
          sub_2241471F8();
          v206 = (char)v203 >= 0 ? v252 : v204;
          v207 = (char)v203 >= 0 ? v203 : v205;
          v208 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v206, v207);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v208 + 24))(v208))
          {
            v280 = 0u;
            *(_OWORD *)v279 = 0u;
            v281 = 728325608;
            kdebug_trace();
            sub_223A6610C(v208, (uint64_t)v277);
            kdebug_trace();
          }
        }
      }
      v280 = 0u;
      *(_OWORD *)v279 = 0u;
      v281 = 728325624;
      kdebug_trace();
      v209 = BYTE7(v253);
      if (SBYTE7(v253) < 0)
        v209 = (unint64_t)v252[1];
      if (v209 >= 0x11)
      {
        v210 = v252;
        if (SBYTE7(v253) < 0)
          v210 = (void **)v252[0];
        v211 = *v210;
        v212 = v210[1];
        v213 = *((unsigned __int8 *)v210 + 16);
        if (v211 == (void *)0x6365722E64337663 && v212 == (void *)0x73746174532E6E6FLL && v213 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SBYTE7(v253) < 0)
        operator delete(v252[0]);
      v279[0] = "cv3d.recon.";
      v279[1] = (void *)11;
      *(_QWORD *)&v280 = "Volumetric.KeyVol.Integration";
      *((_QWORD *)&v280 + 1) = 29;
      sub_2231A9820((uint64_t)v279, (uint64_t)&v281, 0, 0, (std::string *)v252);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v216 = sub_2241471F8();
        v217 = v216[2];
        if (!v217)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v217 = v216[2];
        }
        v218 = *(_QWORD *)(v217 + 64);
        v219 = (std::mutex *)(v218 + 32);
        std::mutex::lock((std::mutex *)(v218 + 32));
        v221 = *(_QWORD *)(v218 + 96);
        v220 = *(_QWORD *)(v218 + 104);
        std::mutex::unlock(v219);
        if (v221 != v220)
        {
          v222 = (void *)BYTE7(v253);
          v223 = (void **)v252[0];
          v224 = v252[1];
          sub_2241471F8();
          v225 = (char)v222 >= 0 ? v252 : v223;
          v226 = (char)v222 >= 0 ? v222 : v224;
          v227 = (*(uint64_t (**)(uint64_t *, void **, void *))(qword_2557952E0 + 48))(&qword_2557952E0, v225, v226);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v227 + 24))(v227))
          {
            v280 = 0u;
            *(_OWORD *)v279 = 0u;
            v281 = 728325608;
            kdebug_trace();
            sub_22386D8A8((double *)&qword_255788F20, v227, (uint64_t)v276, "Chunks");
            kdebug_trace();
          }
        }
      }
      v280 = 0u;
      *(_OWORD *)v279 = 0u;
      v281 = 728325624;
      kdebug_trace();
      v228 = BYTE7(v253);
      if (SBYTE7(v253) < 0)
        v228 = (unint64_t)v252[1];
      if (v228 >= 0x11)
      {
        v229 = v252;
        if (SBYTE7(v253) < 0)
          v229 = (void **)v252[0];
        v230 = *v229;
        v231 = v229[1];
        v232 = *((unsigned __int8 *)v229 + 16);
        if (v230 == (void *)0x6365722E64337663 && v231 == (void *)0x73746174532E6E6FLL && v232 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SBYTE7(v253) < 0)
        operator delete(v252[0]);
      sub_223198030((uint64_t)&v264, v265);
      sub_223198030((uint64_t)&v267, v268);
      sub_223198030((uint64_t)&v270, v271);
      sub_223198030((uint64_t)&v273, v274);
      sub_22316F8F4(v276);
      sub_22316F8F4(v277);
      sub_22316F8F4((uint64_t *)__p);
      sub_22316F8F4(v285);
    }
  }
}

void sub_223A65D1C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223A65F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,_QWORD *a52,uint64_t a53,char a54,_QWORD *a55,uint64_t a56,char a57,_QWORD *a58,uint64_t a59,char a60,_QWORD *a61,uint64_t a62,uint64_t a63)
{
  sub_223198030((uint64_t)&a51, a52);
  sub_223198030((uint64_t)&a54, a55);
  sub_223198030((uint64_t)&a57, a58);
  sub_223198030((uint64_t)&a60, a61);
  sub_22316F8F4(&a63);
  sub_22316F8F4((uint64_t *)&STACK[0x330]);
  sub_22316F8F4((uint64_t *)&STACK[0x4B0]);
  sub_22316F8F4((uint64_t *)&STACK[0x678]);
  _Unwind_Resume(a1);
}

void sub_223A65F60(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 15;
    strcpy((char *)__p, "Blocks:Occupied");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22329D76C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223A66018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A66034(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[20];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 19;
    strcpy(__p, "Blocks:SpaceCarving");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22329D76C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223A660F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A6610C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[17];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 16;
    strcpy(__p, "Blocks:Semantics");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22329D76C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223A661BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A661D8(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::mutex *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x2_t v32;
  int8x16_t v33;
  float32x2_t v34;
  float32x2_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  std::string::size_type size;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  int v43;
  int32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  int8x16_t v50;
  float32x2_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  void *v57;
  int v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  std::string::size_type v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  std::mutex *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  void **v74;
  std::string::size_type v75;
  std::string *v76;
  std::string::size_type v77;
  std::string::size_type v78;
  int v79;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  std::mutex *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  const char *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  int v101;
  void **v102;
  uint64_t *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *p_shared_owners;
  unint64_t v107;
  __int128 v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  std::mutex *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  std::string v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  __int128 v148;
  char v149;
  char v150;
  std::string v151;
  char v152;
  uint64_t v153;
  int v154;
  __int128 v155;
  std::string v156;
  std::string v157;
  __int128 v158;
  unsigned __int8 v159;
  __int128 v160;
  int8x16_t v161;
  int32x4_t v162;
  float32x2_t v163;
  unsigned __int32 v164;
  int v165;
  char v166;
  __int128 v167;
  __int128 v168;
  int v169[4];
  __int128 __p;
  _BYTE v171[32];
  float32x2_t v172;
  unsigned __int32 v173;
  int v174;
  int v175;
  int v176;
  std::string v177;
  uint64_t v178;
  _QWORD v179[3];

  v179[0] = *MEMORY[0x24BDAC8D0];
  v153 = a4;
  v154 = a5;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      v10 = v8;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v10[2];
    }
    v11 = *(_QWORD *)(v9 + 64);
    v12 = (std::mutex *)(v11 + 32);
    std::mutex::lock((std::mutex *)(v11 + 32));
    v14 = *(_QWORD *)(v11 + 96);
    v13 = *(_QWORD *)(v11 + 104);
    std::mutex::unlock(v12);
    if (v14 != v13)
    {
      v15 = "cv3d.recon.";
      *(_QWORD *)&v160 = "cv3d.recon.";
      *((_QWORD *)&v160 + 1) = 11;
      v161.i64[0] = (uint64_t)"Volumetric.KeyVol.Integration";
      v161.i64[1] = 29;
      sub_2231A9820((uint64_t)&v160, (uint64_t)&v162, 0, 0, (std::string *)&__p);
      sub_2241471F8();
      v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      v18 = v17;
      if ((v171[7] & 0x80000000) != 0)
      {
        operator delete((void *)__p);
        if ((v18 & 1) == 0)
          return;
      }
      else if ((v17 & 1) == 0)
      {
        return;
      }
      *(_QWORD *)&v160 = "cv3d.recon.";
      *((_QWORD *)&v160 + 1) = 11;
      v161.i64[0] = (uint64_t)"Volumetric.KeyVol.Integration";
      v161.i64[1] = 29;
      sub_2231A9820((uint64_t)&v160, (uint64_t)&v162, 0, 0, &v157);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v19 = sub_2241471F8();
        v20 = v19[2];
        if (!v20)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v20 = v19[2];
        }
        v21 = *(_QWORD *)(v20 + 64);
        v22 = (std::mutex *)(v21 + 32);
        std::mutex::lock((std::mutex *)(v21 + 32));
        v24 = *(_QWORD *)(v21 + 96);
        v23 = *(_QWORD *)(v21 + 104);
        std::mutex::unlock(v22);
        if (v24 != v23)
        {
          sub_2241471F8();
          v25 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
          {
            v167 = 0u;
            v168 = 0u;
            v169[0] = 728325608;
            kdebug_trace();
            v26.i64[0] = *(_QWORD *)a3;
            v26.i32[2] = *(_DWORD *)(a3 + 8);
            v27.i64[0] = *(_QWORD *)(a3 + 16);
            v27.i32[2] = *(_DWORD *)(a3 + 24);
            *(_QWORD *)&v28 = vzip1q_s32(v26, v27).u64[0];
            v29.i64[0] = *(_QWORD *)(a3 + 48);
            v29.i32[2] = *(_DWORD *)(a3 + 56);
            v30 = (int8x16_t)vnegq_f32(v29);
            v31 = (int8x16_t)vtrn2q_s32(v26, v27);
            v31.i32[2] = HIDWORD(*(_QWORD *)(a3 + 32));
            v32.i32[0] = *(_DWORD *)(a3 + 40);
            v33 = (int8x16_t)vzip2q_s32(v26, v27);
            v34 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v28, *(float *)v30.i32), *(float32x2_t *)v31.i8, *(float32x2_t *)v29.f32, 1), *(float32x2_t *)v33.i8, v29, 2);
            v33.i32[2] = v32.i32[0];
            v35 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(a3 + 32), *(float32x2_t *)v30.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a3 + 32), 1), *(float32x2_t *)v29.f32, 1);
            *((_QWORD *)&v28 + 1) = *(_QWORD *)(a3 + 32);
            v29.i32[3] = 0;
            v29.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v31, 0).i32[3];
            *(uint64_t *)((char *)v29.i64 + 4) = vextq_s8(v31, v33, 4uLL).u64[0];
            v33.i64[1] = vdupq_laneq_s32((int32x4_t)v33, 2).u32[0];
            *(float32x4_t *)v171 = v29;
            *(int8x16_t *)&v171[16] = v33;
            __p = v28;
            v172 = v34;
            v173 = vmla_f32(v35, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), v32).u32[0];
            v174 = 1065353216;
            sub_224141CD8((uint64_t *)v146, &__p, flt_22469B46C);
            v177.__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
            v177.__r_.__value_.__l.__size_ = 11;
            v177.__r_.__value_.__r.__words[2] = (std::string::size_type)"Volumetric.KeyVol.Integration";
            v178 = 29;
            sub_2231A9820((uint64_t)&v177, (uint64_t)v179, 0, 0, &v156);
            v151 = v156;
            memset(&v156, 0, sizeof(v156));
            v152 = 1;
            LOBYTE(v148) = 0;
            v150 = 0;
            sub_22414372C((uint64_t)&v160, (uint64_t *)v146, (__int128 *)&v151, &v148);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25))
            {
              v177.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v177.__r_.__value_.__l.__size_ = 2;
              v36 = sub_2241471F8();
              sub_2235335A0((uint64_t)v36, v25, (uint64_t)&v160, (uint64_t)&unk_2245C9EFE, (__int128 *)&v177);
            }
            if (v166 && SHIBYTE(v165) < 0)
              operator delete((void *)v162.i64[1]);
            if (v162.i8[0] && v161.i8[15] < 0)
              operator delete(*((void **)&v160 + 1));
            v37 = v160;
            *(_QWORD *)&v160 = 0;
            if (v37)
              MEMORY[0x227684CE8](v37, 0x1000C4072FAA15ELL);
            if (v150 && v149 < 0)
              operator delete((void *)v148);
            if (v152 && SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v151.__r_.__value_.__l.__data_);
            if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v156.__r_.__value_.__l.__data_);
            v38 = v146[0];
            v146[0] = 0;
            if (v38)
              MEMORY[0x227684CE8](v38, 0x1000C4072FAA15ELL);
            kdebug_trace();
          }
        }
      }
      __p = 0u;
      *(_OWORD *)v171 = 0u;
      *(_DWORD *)&v171[16] = 728325624;
      kdebug_trace();
      size = HIBYTE(v157.__r_.__value_.__r.__words[2]);
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v157.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        v40 = &v157;
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v40 = (std::string *)v157.__r_.__value_.__r.__words[0];
        v41 = v40->__r_.__value_.__r.__words[0];
        v42 = v40->__r_.__value_.__l.__size_;
        v43 = v40->__r_.__value_.__s.__data_[16];
        if (v41 == 0x6365722E64337663 && v42 == 0x73746174532E6E6FLL && v43 == 46)
        {
          sub_223187510();
          v46.i64[0] = *(_QWORD *)a3;
          v46.i32[2] = *(_DWORD *)(a3 + 8);
          v47.i64[0] = *(_QWORD *)(a3 + 16);
          v47.i32[2] = *(_DWORD *)(a3 + 24);
          v48.i64[0] = *(_QWORD *)(a3 + 48);
          v48.i32[2] = *(_DWORD *)(a3 + 56);
          *(_QWORD *)&v49 = vzip1q_s32(v46, v47).u64[0];
          v50 = (int8x16_t)vnegq_f32(v48);
          v51.i32[0] = *(_DWORD *)(a3 + 40);
          v52 = (int8x16_t)vtrn2q_s32(v46, v47);
          v52.i32[2] = HIDWORD(*(_QWORD *)(a3 + 32));
          v53 = (int8x16_t)vzip2q_s32(v46, v47);
          v54 = (int32x4_t)v53;
          v54.i32[2] = v51.i32[0];
          v55 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v49, *(float *)v50.i32), *(float32x2_t *)v52.i8, *(float32x2_t *)v48.f32, 1), *(float32x2_t *)v53.i8, v48, 2);
          v56 = vmls_lane_f32(vmul_f32(*(float32x2_t *)(a3 + 32), *(float32x2_t *)v50.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a3 + 32), 1), *(float32x2_t *)v48.f32, 1);
          v48.i64[0] = vextq_s8(v50, v50, 8uLL).u64[0];
          *((_QWORD *)&v49 + 1) = *(_QWORD *)(a3 + 32);
          v50.i32[3] = 0;
          v50.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v52, 0).i32[3];
          *(uint64_t *)((char *)v50.i64 + 4) = vextq_s8(v52, v53, 4uLL).u64[0];
          v54.i64[1] = vdupq_laneq_s32(v54, 2).u32[0];
          v161 = v50;
          v162 = v54;
          v160 = v49;
          v163 = v55;
          v164 = vmla_f32(v56, *(float32x2_t *)v48.f32, v51).u32[0];
          v165 = 1065353216;
          sub_224141CD8((uint64_t *)&v156, &v160, flt_22469B46C);
          *(_QWORD *)&v167 = "cv3d.recon.";
          *((_QWORD *)&v167 + 1) = 11;
          *(_QWORD *)&v168 = "Volumetric.KeyVol.Integration";
          *((_QWORD *)&v168 + 1) = 29;
          sub_2231A9820((uint64_t)&v167, (uint64_t)v169, 0, 0, &v177);
          v57 = (void *)v177.__r_.__value_.__r.__words[0];
          v58 = SHIBYTE(v177.__r_.__value_.__r.__words[2]);
          memset(&v177, 0, sizeof(v177));
          v59 = v156.__r_.__value_.__r.__words[0];
          v60 = operator new();
          *(_BYTE *)v60 = 0;
          *(_DWORD *)(v60 + 128) = -1;
          v61 = *(unsigned int *)(v59 + 128);
          if ((_DWORD)v61 != -1)
          {
            ((void (*)(__int128 *, uint64_t, std::string::size_type))off_24EC6BD10[v61])(&v167, v60, v59);
            *(_DWORD *)(v60 + 128) = v61;
          }
          *(_BYTE *)(v60 + 136) = *(_BYTE *)(v59 + 136);
          if (v58 < 0)
            operator delete(v57);
          MEMORY[0x227684CE8](v60, 0x1000C4072FAA15ELL);
          v15 = "cv3d.recon.";
          if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v177.__r_.__value_.__l.__data_);
          v62 = v156.__r_.__value_.__r.__words[0];
          v156.__r_.__value_.__r.__words[0] = 0;
          if (v62)
            MEMORY[0x227684CE8](v62, 0x1000C4072FAA15ELL);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v157.__r_.__value_.__l.__data_);
      *(_QWORD *)&__p = &off_24EC25150;
      sub_223210C10((uint64_t)&__p + 8);
      v158 = *(_OWORD *)a1;
      v159 = a1[16];
      sub_223A63404((uint64_t)&v160, a2, a3, (uint64_t)&__p, (unsigned __int8 *)&v158);
      v63 = *(std::__shared_weak_count **)v171;
      if (*(_QWORD *)v171)
      {
        v64 = (unint64_t *)(*(_QWORD *)v171 + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      *(_QWORD *)&__p = "cv3d.recon.";
      *((_QWORD *)&__p + 1) = 11;
      *(_QWORD *)v171 = "Volumetric.KeyVol.Integration";
      *(_QWORD *)&v171[8] = 29;
      sub_2231A9820((uint64_t)&__p, (uint64_t)&v171[16], 0, 0, &v177);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v66 = sub_2241471F8();
        v67 = v66[2];
        if (!v67)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v67 = v66[2];
        }
        v68 = *(_QWORD *)(v67 + 64);
        v69 = (std::mutex *)(v68 + 32);
        std::mutex::lock((std::mutex *)(v68 + 32));
        v71 = *(_QWORD *)(v68 + 96);
        v70 = *(_QWORD *)(v68 + 104);
        std::mutex::unlock(v69);
        if (v71 != v70)
        {
          sub_2241471F8();
          v72 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 24))(v72))
          {
            __p = 0u;
            *(_OWORD *)v171 = 0u;
            *(_DWORD *)&v171[16] = 728325608;
            kdebug_trace();
            v73 = a1[16];
            if (a1[16])
            {
              DWORD2(v168) = 0;
              sub_22319B83C((uint64_t)&v156, (uint64_t)&v167, a1);
              if (DWORD2(v168) == -1)
                sub_22316DD70();
              v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v144;
              ((void (*)(void **__return_ptr, std::string *, __int128 *))off_24EC5E518[DWORD2(v168)])(v146, &v156, &v167);
              if (DWORD2(v168) != -1)
                ((void (*)(std::string *, __int128 *))off_24EC5E500[DWORD2(v168)])(&v156, &v167);
              v74 = v146;
              if (v147 < 0)
                v74 = (void **)v146[0];
            }
            else
            {
              v74 = (void **)"raw";
            }
            sub_22456D250("Points[%s]", &v157, v74);
            sub_223473118((double *)&qword_255788F20, v72, (uint64_t)&v160, (uint64_t)&v157);
            if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v157.__r_.__value_.__l.__data_);
            if (v73 && v147 < 0)
              operator delete(v146[0]);
            kdebug_trace();
          }
        }
      }
      __p = 0u;
      *(_OWORD *)v171 = 0u;
      *(_DWORD *)&v171[16] = 728325624;
      kdebug_trace();
      v75 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
      if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v75 = v177.__r_.__value_.__l.__size_;
      if (v75 >= 0x11)
      {
        v76 = &v177;
        if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v76 = (std::string *)v177.__r_.__value_.__r.__words[0];
        v77 = v76->__r_.__value_.__r.__words[0];
        v78 = v76->__r_.__value_.__l.__size_;
        v79 = v76->__r_.__value_.__s.__data_[16];
        if (v77 == 0x6365722E64337663 && v78 == 0x73746174532E6E6FLL && v79 == 46)
        {
          sub_223187510();
          v101 = a1[16];
          if (a1[16])
          {
            DWORD2(v168) = 0;
            sub_22319B83C((uint64_t)&v156, (uint64_t)&v167, a1);
            if (DWORD2(v168) == -1)
              sub_22316DD70();
            v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
            ((void (*)(void **__return_ptr, std::string *, __int128 *))off_24EC5E518[DWORD2(v168)])(v144, &v156, &v167);
            if (DWORD2(v168) != -1)
              ((void (*)(std::string *, __int128 *))off_24EC5E500[DWORD2(v168)])(&v156, &v167);
            v102 = v144;
            if (v145 < 0)
              v102 = (void **)v144[0];
          }
          else
          {
            v102 = (void **)"raw";
          }
          sub_22456D250("Points[%s]", &v157, v102);
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v157.__r_.__value_.__l.__data_);
          if (v101 && v145 < 0)
            operator delete(v144[0]);
        }
      }
      kdebug_trace();
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v177.__r_.__value_.__l.__data_);
        if (!(_BYTE)v154)
          goto LABEL_195;
      }
      else if (!(_BYTE)v154)
      {
        goto LABEL_195;
      }
      sub_224569D7C();
      sub_224569A80();
      if (!os_variant_has_internal_diagnostics())
        goto LABEL_112;
      v82 = sub_2241471F8();
      v83 = v82[2];
      if (!v83)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_198;
        }
        v83 = v82[2];
      }
      v84 = *(_QWORD *)(v83 + 64);
      v85 = (std::mutex *)(v84 + 32);
      std::mutex::lock((std::mutex *)(v84 + 32));
      v87 = *(_QWORD *)(v84 + 96);
      v86 = *(_QWORD *)(v84 + 104);
      std::mutex::unlock(v85);
      if (v87 == v86)
      {
LABEL_112:
        v92 = 0;
      }
      else
      {
        *(_QWORD *)&__p = "cv3d.recon.";
        *((_QWORD *)&__p + 1) = 11;
        *(_QWORD *)v171 = "Volumetric.KeyVol.Integration.FilteredSpaceCarvingMask";
        *(_QWORD *)&v171[8] = 54;
        sub_2231A9820((uint64_t)&__p, (uint64_t)&v171[16], 0, 0, &v143);
        sub_2241471F8();
        v88 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88))
        {
          v167 = 0u;
          v168 = 0u;
          v169[0] = 728325616;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88)
            && (*(_QWORD *)&v155 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0),
                *((_QWORD *)&v155 + 1) = 2,
                v89 = sub_2241471F8(),
                (*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 24))(v88)))
          {
            if (!(_BYTE)v154)
              sub_22324A974();
            LOWORD(v177.__r_.__value_.__l.__data_) = 0;
            v177.__r_.__value_.__s.__data_[2] = 0;
            *(_QWORD *)&__p = &off_24EC21B18;
            sub_2231C5C38(&v153, (_WORD *)&__p + 4);
            sub_22370325C((uint64_t)&__p, (__int16 *)&v177);
            v142 = v88;
            v141 = v89;
            v91 = *a2;
            v90 = a2[1];
            if (v91 == v90)
            {
              v92 = 0;
            }
            else
            {
              v92 = 0;
              do
              {
                if (*(_BYTE *)(v91 + 32))
                {
                  v94 = v92;
                  v95 = v15;
                  v96 = *(unsigned __int16 *)(v91 + 26);
                  v97 = *(unsigned __int16 *)(v91 + 28);
                  v98 = v175;
                  v99 = v176;
                  v100 = *(_QWORD *)&v171[16];
                  if (!*(_QWORD *)&v171[16]
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                  v93 = v100 + (v98 * v96 + v99 * v97);
                  *(_WORD *)v93 = 8447;
                  *(_BYTE *)(v93 + 2) = 32;
                  v92 = v94 + 1;
                  v15 = v95;
                }
                v91 += 36;
              }
              while (v91 != v90);
            }
            v177.__r_.__value_.__s.__data_[0] = 0;
            LOBYTE(v178) = 0;
            sub_2231C6C30(&__p, (__int128 *)&v177, &v155, &v157);
            if ((_BYTE)v178 && SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v177.__r_.__value_.__l.__data_);
            sub_223167354((uint64_t)&__p + 8);
            v103 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 56))(v142);
            v104 = *v103;
            v105 = (std::__shared_weak_count *)v103[1];
            if (v105)
            {
              p_shared_owners = (unint64_t *)&v105->__shared_owners_;
              do
                v107 = __ldxr(p_shared_owners);
              while (__stxr(v107 + 1, p_shared_owners));
            }
            v108 = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
            v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
            *(_OWORD *)&v156.__r_.__value_.__r.__words[1] = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
            *(_OWORD *)&v157.__r_.__value_.__r.__words[1] = 0uLL;
            *(_QWORD *)&__p = v104;
            *((_QWORD *)&__p + 1) = v105;
            if (v105)
            {
              v109 = (unint64_t *)&v105->__shared_owners_;
              do
                v110 = __ldxr(v109);
              while (__stxr(v110 + 1, v109));
            }
            *(_QWORD *)v171 = &off_24EC6A3B8;
            *(_OWORD *)&v171[8] = v108;
            if (*((_QWORD *)&v108 + 1))
            {
              v111 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            (*(void (**)(uint64_t *, __int128 *))(*v141 + 16))(v141, &__p);
            sub_2241231D8((uint64_t)v171);
            v113 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v114 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            sub_2241231D8((uint64_t)&v156);
            if (v105)
            {
              v116 = (unint64_t *)&v105->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
            sub_2241231D8((uint64_t)&v157);
          }
          else
          {
            v92 = 0;
          }
          kdebug_trace();
        }
        else
        {
          v92 = 0;
        }
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
      }
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v118 = sub_2241471F8();
        v119 = v118[2];
        if (v119)
          goto LABEL_165;
        if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          v119 = v118[2];
LABEL_165:
          v120 = *(_QWORD *)(v119 + 64);
          v121 = (std::mutex *)(v120 + 32);
          std::mutex::lock((std::mutex *)(v120 + 32));
          v123 = *(_QWORD *)(v120 + 96);
          v122 = *(_QWORD *)(v120 + 104);
          std::mutex::unlock(v121);
          if (v123 != v122)
          {
            *(_QWORD *)&__p = v15;
            *((_QWORD *)&__p + 1) = 11;
            *(_QWORD *)v171 = "Stats.Volumetric.FilterSpaceCarvingMaskCount";
            *(_QWORD *)&v171[8] = 44;
            sub_2231A9820((uint64_t)&__p, (uint64_t)&v171[16], 0, 0, &v143);
            sub_2241471F8();
            v124 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124))
            {
              v167 = 0u;
              v168 = 0u;
              v169[0] = 728325616;
              kdebug_trace();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124))
              {
                *(_QWORD *)&v155 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
                *((_QWORD *)&v155 + 1) = 2;
                v125 = sub_2241471F8();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124))
                {
                  LODWORD(__p) = v92;
                  v177.__r_.__value_.__s.__data_[0] = 0;
                  LOBYTE(v178) = 0;
                  sub_2235353F4((int *)&__p, (__int128 *)&v177, &v155, &v157);
                  if ((_BYTE)v178 && SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v177.__r_.__value_.__l.__data_);
                  v126 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 56))(v124);
                  v127 = *v126;
                  v128 = (std::__shared_weak_count *)v126[1];
                  if (v128)
                  {
                    v129 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v130 = __ldxr(v129);
                    while (__stxr(v130 + 1, v129));
                  }
                  v131 = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
                  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                  *(_OWORD *)&v156.__r_.__value_.__r.__words[1] = *(_OWORD *)&v157.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&v157.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_QWORD *)&__p = v127;
                  *((_QWORD *)&__p + 1) = v128;
                  if (v128)
                  {
                    v132 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v133 = __ldxr(v132);
                    while (__stxr(v133 + 1, v132));
                  }
                  *(_QWORD *)v171 = &off_24EC6A3B8;
                  *(_OWORD *)&v171[8] = v131;
                  if (*((_QWORD *)&v131 + 1))
                  {
                    v134 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
                    do
                      v135 = __ldxr(v134);
                    while (__stxr(v135 + 1, v134));
                  }
                  (*(void (**)(uint64_t *, __int128 *))(*v125 + 16))(v125, &__p);
                  sub_2241231D8((uint64_t)v171);
                  v136 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
                  if (*((_QWORD *)&__p + 1))
                  {
                    v137 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                    do
                      v138 = __ldaxr(v137);
                    while (__stlxr(v138 - 1, v137));
                    if (!v138)
                    {
                      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                      std::__shared_weak_count::__release_weak(v136);
                    }
                  }
                  sub_2241231D8((uint64_t)&v156);
                  if (v128)
                  {
                    v139 = (unint64_t *)&v128->__shared_owners_;
                    do
                      v140 = __ldaxr(v139);
                    while (__stlxr(v140 - 1, v139));
                    if (!v140)
                    {
                      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                      std::__shared_weak_count::__release_weak(v128);
                    }
                  }
                  sub_2241231D8((uint64_t)&v157);
                }
              }
              kdebug_trace();
            }
            if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143.__r_.__value_.__l.__data_);
          }
          goto LABEL_195;
        }
LABEL_198:
        abort();
      }
LABEL_195:
      sub_22316F8F4((uint64_t *)&v160);
    }
  }
}

void sub_223A675A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;

  sub_2241231D8(v49);
  v51 = (std::__shared_weak_count *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  sub_2241231D8((uint64_t)&a38);
  if (v48)
  {
    v54 = (unint64_t *)&v48->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  sub_2241231D8((uint64_t)&a41);
  sub_2231874DC((uint64_t)&STACK[0x2A0]);
  if (a19 < 0)
  {
    operator delete(__p);
    sub_22316F8F4(&a48);
    _Unwind_Resume(a1);
  }
  sub_22316F8F4(&a48);
  _Unwind_Resume(a1);
}

void sub_223A679D0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  _Unwind_Resume(a1);
}

void sub_223A679EC(_QWORD *a1, int a2, int a3, int a4)
{
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  int v18;
  __n128 *v21;
  std::string *v22;
  size_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  std::mutex *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string::size_type v37;
  int v38;
  __n128 *v41;
  std::string *v42;
  size_t v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  std::mutex *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  std::string *p_p;
  std::string::size_type v55;
  std::string::size_type v56;
  int v57;
  __n128 *v60;
  std::string *v61;
  size_t v62;
  uint64_t v63;
  void *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  std::mutex *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  std::string::size_type v75;
  int v76;
  __n128 *v79;
  std::string *v80;
  size_t v81;
  uint64_t v82;
  void *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  std::mutex *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::string::size_type v91;
  std::string *v92;
  std::string::size_type v93;
  std::string::size_type v94;
  int v95;
  __n128 *v98;
  std::string *v99;
  size_t v100;
  uint64_t v101;
  void *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  std::mutex *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::string::size_type v110;
  std::string *v111;
  std::string::size_type v112;
  std::string::size_type v113;
  int v114;
  __n128 *v117;
  std::string *v118;
  size_t v119;
  std::string v120;
  void *v121;
  __int128 v122;
  int v123;
  int v124;
  int v125;
  __int128 v126;
  std::string __p;
  __int128 v128;
  __int128 v129;
  int v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v124 = a3;
  v125 = a2;
  v123 = a4;
  v5 = operator new(0x19uLL);
  v121 = v5;
  v122 = xmmword_2245B9430;
  strcpy((char *)v5, "Stats.Volumetric.Blocks");
  *(_QWORD *)&v128 = "cv3d.recon.";
  *((_QWORD *)&v128 + 1) = 11;
  *(_QWORD *)&v129 = v5;
  *((_QWORD *)&v129 + 1) = 23;
  sub_2231A9820((uint64_t)&v128, (uint64_t)&v130, 0, 0, &v120);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v6[2];
    }
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (std::mutex *)(v8 + 32);
    std::mutex::lock((std::mutex *)(v8 + 32));
    v11 = *(_QWORD *)(v8 + 96);
    v10 = *(_QWORD *)(v8 + 104);
    std::mutex::unlock(v9);
    if (v11 != v10)
    {
      sub_2241471F8();
      v12 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
      {
        v128 = 0u;
        v129 = 0u;
        v130 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20;
          strcpy((char *)&__p, "ray trace (occupied)");
          *(_QWORD *)&v126 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v126 + 1) = 2;
          v13 = sub_2241471F8();
          sub_2235347B4((uint64_t)v13, v12, &v125, (uint64_t)&__p, &v126);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v128 = 0u;
  v129 = 0u;
  v130 = 728325624;
  kdebug_trace();
  size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v120.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v15 = &v120;
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v120.__r_.__value_.__r.__words[0];
    v16 = v15->__r_.__value_.__r.__words[0];
    v17 = v15->__r_.__value_.__l.__size_;
    v18 = v15->__r_.__value_.__s.__data_[16];
    if (v16 == 0x6365722E64337663 && v17 == 0x73746174532E6E6FLL && v18 == 46)
    {
      v21 = sub_223187510();
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v120;
      else
        v22 = (std::string *)v120.__r_.__value_.__r.__words[0];
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
      else
        v23 = v120.__r_.__value_.__l.__size_;
      sub_223532E4C(v21, v22, v23, (unsigned int *)&v125, (uint64_t)"ray trace (occupied)", 20);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  *(_QWORD *)&v128 = "cv3d.recon.";
  *((_QWORD *)&v128 + 1) = 11;
  v24 = HIBYTE(v122);
  v25 = &v121;
  if (v122 < 0)
  {
    v25 = v121;
    v24 = v122;
  }
  *(_QWORD *)&v129 = v25;
  *((_QWORD *)&v129 + 1) = v24;
  sub_2231A9820((uint64_t)&v128, (uint64_t)&v130, 0, 0, &v120);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v26 = sub_2241471F8();
    v27 = v26[2];
    if (!v27)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v27 = v26[2];
    }
    v28 = *(_QWORD *)(v27 + 64);
    v29 = (std::mutex *)(v28 + 32);
    std::mutex::lock((std::mutex *)(v28 + 32));
    v31 = *(_QWORD *)(v28 + 96);
    v30 = *(_QWORD *)(v28 + 104);
    std::mutex::unlock(v29);
    if (v31 != v30)
    {
      sub_2241471F8();
      v32 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
      {
        v128 = 0u;
        v129 = 0u;
        v130 = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32))
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
          strcpy((char *)&__p, "ray trace (carving)");
          *(_QWORD *)&v126 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v126 + 1) = 2;
          v33 = sub_2241471F8();
          sub_2235347B4((uint64_t)v33, v32, &v124, (uint64_t)&__p, &v126);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        kdebug_trace();
      }
    }
  }
  v128 = 0u;
  v129 = 0u;
  v130 = 728325624;
  kdebug_trace();
  v34 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v34 = v120.__r_.__value_.__l.__size_;
  if (v34 >= 0x11)
  {
    v35 = &v120;
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v120.__r_.__value_.__r.__words[0];
    v36 = v35->__r_.__value_.__r.__words[0];
    v37 = v35->__r_.__value_.__l.__size_;
    v38 = v35->__r_.__value_.__s.__data_[16];
    if (v36 == 0x6365722E64337663 && v37 == 0x73746174532E6E6FLL && v38 == 46)
    {
      v41 = sub_223187510();
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v120;
      else
        v42 = (std::string *)v120.__r_.__value_.__r.__words[0];
      if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
      else
        v43 = v120.__r_.__value_.__l.__size_;
      sub_223532E4C(v41, v42, v43, (unsigned int *)&v124, (uint64_t)"ray trace (carving)", 19);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  *(_QWORD *)&v128 = "cv3d.recon.";
  *((_QWORD *)&v128 + 1) = 11;
  v44 = HIBYTE(v122);
  v45 = &v121;
  if (v122 < 0)
  {
    v45 = v121;
    v44 = v122;
  }
  *(_QWORD *)&v129 = v45;
  *((_QWORD *)&v129 + 1) = v44;
  sub_2231A9820((uint64_t)&v128, (uint64_t)&v130, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v46 = sub_2241471F8();
    v47 = v46[2];
    if (!v47)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v47 = v46[2];
    }
    v48 = *(_QWORD *)(v47 + 64);
    v49 = (std::mutex *)(v48 + 32);
    std::mutex::lock((std::mutex *)(v48 + 32));
    v51 = *(_QWORD *)(v48 + 96);
    v50 = *(_QWORD *)(v48 + 104);
    std::mutex::unlock(v49);
    if (v51 != v50)
    {
      sub_2241471F8();
      v52 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52))
      {
        v128 = 0u;
        v129 = 0u;
        v130 = 728325608;
        kdebug_trace();
        sub_223A68B6C((double *)&qword_255788F20, v52, &v123, "ray trace (semantics)");
        kdebug_trace();
      }
    }
  }
  v128 = 0u;
  v129 = 0u;
  v130 = 728325624;
  kdebug_trace();
  v53 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = __p.__r_.__value_.__l.__size_;
  if (v53 >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v55 = p_p->__r_.__value_.__r.__words[0];
    v56 = p_p->__r_.__value_.__l.__size_;
    v57 = p_p->__r_.__value_.__s.__data_[16];
    if (v55 == 0x6365722E64337663 && v56 == 0x73746174532E6E6FLL && v57 == 46)
    {
      v60 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &__p;
      else
        v61 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v62 = __p.__r_.__value_.__l.__size_;
      sub_223532E4C(v60, v61, v62, (unsigned int *)&v123, (uint64_t)"ray trace (semantics)", 21);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v128 = "cv3d.recon.";
  *((_QWORD *)&v128 + 1) = 11;
  v63 = HIBYTE(v122);
  v64 = &v121;
  if (v122 < 0)
  {
    v64 = v121;
    v63 = v122;
  }
  *(_QWORD *)&v129 = v64;
  *((_QWORD *)&v129 + 1) = v63;
  sub_2231A9820((uint64_t)&v128, (uint64_t)&v130, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v65 = sub_2241471F8();
    v66 = v65[2];
    if (!v66)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v66 = v65[2];
    }
    v67 = *(_QWORD *)(v66 + 64);
    v68 = (std::mutex *)(v67 + 32);
    std::mutex::lock((std::mutex *)(v67 + 32));
    v70 = *(_QWORD *)(v67 + 96);
    v69 = *(_QWORD *)(v67 + 104);
    std::mutex::unlock(v68);
    if (v70 != v69)
    {
      sub_2241471F8();
      v71 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71))
      {
        v128 = 0u;
        v129 = 0u;
        v130 = 728325608;
        kdebug_trace();
        v120.__r_.__value_.__r.__words[0] = a1[13];
        sub_22346BEEC((double *)&qword_255788F20, v71, (uint64_t *)&v120, "total with erased");
        kdebug_trace();
      }
    }
  }
  v128 = 0u;
  v129 = 0u;
  v130 = 728325624;
  kdebug_trace();
  v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v72 = __p.__r_.__value_.__l.__size_;
  if (v72 >= 0x11)
  {
    v73 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v74 = v73->__r_.__value_.__r.__words[0];
    v75 = v73->__r_.__value_.__l.__size_;
    v76 = v73->__r_.__value_.__s.__data_[16];
    if (v74 == 0x6365722E64337663 && v75 == 0x73746174532E6E6FLL && v76 == 46)
    {
      v79 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v80 = &__p;
      else
        v80 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v81 = __p.__r_.__value_.__l.__size_;
      v120.__r_.__value_.__r.__words[0] = a1[13];
      sub_22318760C((uint64_t *)v79, v80, v81, (uint64_t *)&v120, (uint64_t)"total with erased", 17);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v128 = "cv3d.recon.";
  *((_QWORD *)&v128 + 1) = 11;
  v82 = HIBYTE(v122);
  v83 = &v121;
  if (v122 < 0)
  {
    v83 = v121;
    v82 = v122;
  }
  *(_QWORD *)&v129 = v83;
  *((_QWORD *)&v129 + 1) = v82;
  sub_2231A9820((uint64_t)&v128, (uint64_t)&v130, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v84 = sub_2241471F8();
    v85 = v84[2];
    if (!v85)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v85 = v84[2];
    }
    v86 = *(_QWORD *)(v85 + 64);
    v87 = (std::mutex *)(v86 + 32);
    std::mutex::lock((std::mutex *)(v86 + 32));
    v89 = *(_QWORD *)(v86 + 96);
    v88 = *(_QWORD *)(v86 + 104);
    std::mutex::unlock(v87);
    if (v89 != v88)
    {
      sub_2241471F8();
      v90 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90))
      {
        v128 = 0u;
        v129 = 0u;
        v130 = 728325608;
        kdebug_trace();
        v120.__r_.__value_.__r.__words[0] = a1[6];
        sub_223A41A90((double *)&qword_255788F20, v90, (uint64_t *)&v120, "total");
        kdebug_trace();
      }
    }
  }
  v128 = 0u;
  v129 = 0u;
  v130 = 728325624;
  kdebug_trace();
  v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v91 = __p.__r_.__value_.__l.__size_;
  if (v91 >= 0x11)
  {
    v92 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v92 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v93 = v92->__r_.__value_.__r.__words[0];
    v94 = v92->__r_.__value_.__l.__size_;
    v95 = v92->__r_.__value_.__s.__data_[16];
    if (v93 == 0x6365722E64337663 && v94 == 0x73746174532E6E6FLL && v95 == 46)
    {
      v98 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v99 = &__p;
      else
        v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v100 = __p.__r_.__value_.__l.__size_;
      v120.__r_.__value_.__r.__words[0] = a1[6];
      sub_22318760C((uint64_t *)v98, v99, v100, (uint64_t *)&v120, (uint64_t)"total", 5);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v128 = "cv3d.recon.";
  *((_QWORD *)&v128 + 1) = 11;
  v101 = HIBYTE(v122);
  v102 = &v121;
  if (v122 < 0)
  {
    v102 = v121;
    v101 = v122;
  }
  *(_QWORD *)&v129 = v102;
  *((_QWORD *)&v129 + 1) = v101;
  sub_2231A9820((uint64_t)&v128, (uint64_t)&v130, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v103 = sub_2241471F8();
    v104 = v103[2];
    if (!v104)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v104 = v103[2];
    }
    v105 = *(_QWORD *)(v104 + 64);
    v106 = (std::mutex *)(v105 + 32);
    std::mutex::lock((std::mutex *)(v105 + 32));
    v108 = *(_QWORD *)(v105 + 96);
    v107 = *(_QWORD *)(v105 + 104);
    std::mutex::unlock(v106);
    if (v108 != v107)
    {
      sub_2241471F8();
      v109 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v109 + 24))(v109))
      {
        v128 = 0u;
        v129 = 0u;
        v130 = 728325608;
        kdebug_trace();
        v120.__r_.__value_.__r.__words[0] = 100 * a1[60];
        sub_22346BEEC((double *)&qword_255788F20, v109, (uint64_t *)&v120, "total chunks x100");
        kdebug_trace();
      }
    }
  }
  v128 = 0u;
  v129 = 0u;
  v130 = 728325624;
  kdebug_trace();
  v110 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v110 = __p.__r_.__value_.__l.__size_;
  if (v110 >= 0x11)
  {
    v111 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v111 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v112 = v111->__r_.__value_.__r.__words[0];
    v113 = v111->__r_.__value_.__l.__size_;
    v114 = v111->__r_.__value_.__s.__data_[16];
    if (v112 == 0x6365722E64337663 && v113 == 0x73746174532E6E6FLL && v114 == 46)
    {
      v117 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v118 = &__p;
      else
        v118 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v119 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v119 = __p.__r_.__value_.__l.__size_;
      v120.__r_.__value_.__r.__words[0] = 100 * a1[60];
      sub_22318760C((uint64_t *)v117, v118, v119, (uint64_t *)&v120, (uint64_t)"total chunks x100", 17);
    }
  }
  kdebug_trace();
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v122) & 0x80000000) == 0)
      return;
LABEL_193:
    operator delete(v121);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122) < 0)
    goto LABEL_193;
}

void sub_223A689F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223A68B6C(double *a1, uint64_t a2, int *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2235347B4((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223A68C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A68CA8(int a1, int a2)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v12;
  std::string::size_type v13;
  int v14;
  __n128 *v17;
  std::string *v18;
  size_t v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  __n128 *v36;
  std::string *v37;
  size_t v38;
  std::string __p;
  void *v40;
  __int128 v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v42 = a2;
  v43 = a1;
  v2 = operator new(0x19uLL);
  v40 = v2;
  v41 = xmmword_2245B9430;
  strcpy((char *)v2, "Stats.Volumetric.Blocks");
  *(_QWORD *)&v44 = "cv3d.recon.";
  *((_QWORD *)&v44 + 1) = 11;
  *(_QWORD *)&v45 = v2;
  *((_QWORD *)&v45 + 1) = 23;
  sub_2231A9820((uint64_t)&v44, (uint64_t)&v46, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v3 = sub_2241471F8();
    v4 = v3[2];
    if (!v4)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 = v3[2];
    }
    v5 = *(_QWORD *)(v4 + 64);
    v6 = (std::mutex *)(v5 + 32);
    std::mutex::lock((std::mutex *)(v5 + 32));
    v8 = *(_QWORD *)(v5 + 96);
    v7 = *(_QWORD *)(v5 + 104);
    std::mutex::unlock(v6);
    if (v8 != v7)
    {
      sub_2241471F8();
      v9 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
      {
        v44 = 0u;
        v45 = 0u;
        v46 = 728325608;
        kdebug_trace();
        sub_223532D10((double *)&qword_255788F20, v9, &v43, "meshing");
        kdebug_trace();
      }
    }
  }
  v44 = 0u;
  v45 = 0u;
  v46 = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = p_p->__r_.__value_.__r.__words[0];
    v13 = p_p->__r_.__value_.__l.__size_;
    v14 = p_p->__r_.__value_.__s.__data_[16];
    if (v12 == 0x6365722E64337663 && v13 == 0x73746174532E6E6FLL && v14 == 46)
    {
      v17 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &__p;
      else
        v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v19 = __p.__r_.__value_.__l.__size_;
      sub_223532E4C(v17, v18, v19, (unsigned int *)&v43, (uint64_t)"meshing", 7);
    }
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v44 = "cv3d.recon.";
  *((_QWORD *)&v44 + 1) = 11;
  v20 = HIBYTE(v41);
  v21 = &v40;
  if (v41 < 0)
  {
    v21 = v40;
    v20 = v41;
  }
  *(_QWORD *)&v45 = v21;
  *((_QWORD *)&v45 + 1) = v20;
  sub_2231A9820((uint64_t)&v44, (uint64_t)&v46, 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v22 = sub_2241471F8();
    v23 = v22[2];
    if (!v23)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v23 = v22[2];
    }
    v24 = *(_QWORD *)(v23 + 64);
    v25 = (std::mutex *)(v24 + 32);
    std::mutex::lock((std::mutex *)(v24 + 32));
    v27 = *(_QWORD *)(v24 + 96);
    v26 = *(_QWORD *)(v24 + 104);
    std::mutex::unlock(v25);
    if (v27 != v26)
    {
      sub_2241471F8();
      v28 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
      {
        v44 = 0u;
        v45 = 0u;
        v46 = 728325608;
        kdebug_trace();
        sub_22353311C((double *)&qword_255788F20, v28, &v42, "meshing_additional");
        kdebug_trace();
      }
    }
  }
  v44 = 0u;
  v45 = 0u;
  v46 = 728325624;
  kdebug_trace();
  v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v29 = __p.__r_.__value_.__l.__size_;
  if (v29 >= 0x11)
  {
    v30 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v31 = v30->__r_.__value_.__r.__words[0];
    v32 = v30->__r_.__value_.__l.__size_;
    v33 = v30->__r_.__value_.__s.__data_[16];
    if (v31 == 0x6365722E64337663 && v32 == 0x73746174532E6E6FLL && v33 == 46)
    {
      v36 = sub_223187510();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &__p;
      else
        v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v38 = __p.__r_.__value_.__l.__size_;
      sub_223532E4C(v36, v37, v38, (unsigned int *)&v42, (uint64_t)"meshing_additional", 18);
    }
  }
  kdebug_trace();
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      return;
LABEL_63:
    operator delete(v40);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    goto LABEL_63;
}

void sub_223A69254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223A692E4(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::mutex *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  __n128 *v36;
  std::string *v37;
  size_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::mutex *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  int v50;
  __n128 *v53;
  std::string *v54;
  size_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  std::mutex *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  std::string::size_type v66;
  int v67;
  __n128 *v70;
  std::string *v71;
  size_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  uint64_t **v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 **v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  std::mutex *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  std::string::size_type v113;
  std::string *v114;
  std::string::size_type v115;
  std::string::size_type v116;
  int v117;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unsigned __int8 *v123;
  unsigned __int8 *v125;
  void *v126[2];
  char v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  std::string __p;
  int v133;
  std::string v134;
  __int128 *v135;
  __int128 v136;
  __int128 v137;
  _QWORD v138[4];

  v138[1] = *MEMORY[0x24BDAC8D0];
  v130 = a7;
  v131 = a6;
  v129 = a8;
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v12 = sub_2241471F8();
    v13 = v12[2];
    if (!v13)
    {
      v14 = v12;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v13 = v14[2];
    }
    v15 = *(_QWORD *)(v13 + 64);
    v16 = (std::mutex *)(v15 + 32);
    std::mutex::lock((std::mutex *)(v15 + 32));
    v18 = *(_QWORD *)(v15 + 96);
    v17 = *(_QWORD *)(v15 + 104);
    std::mutex::unlock(v16);
    if (v18 != v17)
    {
      *(_QWORD *)&v136 = "cv3d.recon.";
      *((_QWORD *)&v136 + 1) = 11;
      *(_QWORD *)&v137 = "Stats.Volumetric.CurateItgBlocks";
      *((_QWORD *)&v137 + 1) = 32;
      sub_2231A9820((uint64_t)&v136, (uint64_t)v138, 0, 0, &__p);
      sub_2241471F8();
      v19 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
      v21 = v20;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v21 & 1) == 0)
          return;
      }
      else if ((v20 & 1) == 0)
      {
        return;
      }
      *(_QWORD *)&v136 = "cv3d.recon.";
      *((_QWORD *)&v136 + 1) = 11;
      *(_QWORD *)&v137 = "Stats.Volumetric.CurateItgBlocks.BlockCount";
      *((_QWORD *)&v137 + 1) = 43;
      sub_2231A9820((uint64_t)&v136, (uint64_t)v138, 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v22 = sub_2241471F8();
        v23 = v22[2];
        if (!v23)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v23 = v22[2];
        }
        v24 = *(_QWORD *)(v23 + 64);
        v25 = (std::mutex *)(v24 + 32);
        std::mutex::lock((std::mutex *)(v24 + 32));
        v27 = *(_QWORD *)(v24 + 96);
        v26 = *(_QWORD *)(v24 + 104);
        std::mutex::unlock(v25);
        if (v27 != v26)
        {
          sub_2241471F8();
          v28 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28))
          {
            v136 = 0u;
            v137 = 0u;
            LODWORD(v138[0]) = 728325608;
            kdebug_trace();
            sub_223A6ABC4(v28, &v131);
            kdebug_trace();
          }
        }
      }
      v136 = 0u;
      v137 = 0u;
      LODWORD(v138[0]) = 728325624;
      kdebug_trace();
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v31 = p_p->__r_.__value_.__r.__words[0];
        v32 = p_p->__r_.__value_.__l.__size_;
        v33 = p_p->__r_.__value_.__s.__data_[16];
        v34 = v31 == 0x6365722E64337663 && v32 == 0x73746174532E6E6FLL;
        if (v34 && v33 == 46)
        {
          v36 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = &__p;
          else
            v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v38 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v36, v37, v38, &v131, (uint64_t)"fine", 4);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)&v136 = "cv3d.recon.";
      *((_QWORD *)&v136 + 1) = 11;
      *(_QWORD *)&v137 = "Stats.Volumetric.CurateItgBlocks.BlockCount";
      *((_QWORD *)&v137 + 1) = 43;
      sub_2231A9820((uint64_t)&v136, (uint64_t)v138, 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v39 = sub_2241471F8();
        v40 = v39[2];
        if (!v40)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v40 = v39[2];
        }
        v41 = *(_QWORD *)(v40 + 64);
        v42 = (std::mutex *)(v41 + 32);
        std::mutex::lock((std::mutex *)(v41 + 32));
        v44 = *(_QWORD *)(v41 + 96);
        v43 = *(_QWORD *)(v41 + 104);
        std::mutex::unlock(v42);
        if (v44 != v43)
        {
          sub_2241471F8();
          v45 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 24))(v45))
          {
            v136 = 0u;
            v137 = 0u;
            LODWORD(v138[0]) = 728325608;
            kdebug_trace();
            sub_223A6AC8C(v45, &v130);
            kdebug_trace();
          }
        }
      }
      v136 = 0u;
      v137 = 0u;
      LODWORD(v138[0]) = 728325624;
      kdebug_trace();
      v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v46 = __p.__r_.__value_.__l.__size_;
      if (v46 >= 0x11)
      {
        v47 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v48 = v47->__r_.__value_.__r.__words[0];
        v49 = v47->__r_.__value_.__l.__size_;
        v50 = v47->__r_.__value_.__s.__data_[16];
        if (v48 == 0x6365722E64337663 && v49 == 0x73746174532E6E6FLL && v50 == 46)
        {
          v53 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &__p;
          else
            v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v55 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v53, v54, v55, &v130, (uint64_t)"coarse", 6);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_QWORD *)&v136 = "cv3d.recon.";
      *((_QWORD *)&v136 + 1) = 11;
      *(_QWORD *)&v137 = "Stats.Volumetric.CurateItgBlocks.BlockCount";
      *((_QWORD *)&v137 + 1) = 43;
      sub_2231A9820((uint64_t)&v136, (uint64_t)v138, 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v56 = sub_2241471F8();
        v57 = v56[2];
        if (!v57)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v57 = v56[2];
        }
        v58 = *(_QWORD *)(v57 + 64);
        v59 = (std::mutex *)(v58 + 32);
        std::mutex::lock((std::mutex *)(v58 + 32));
        v61 = *(_QWORD *)(v58 + 96);
        v60 = *(_QWORD *)(v58 + 104);
        std::mutex::unlock(v59);
        if (v61 != v60)
        {
          sub_2241471F8();
          v62 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62))
          {
            v136 = 0u;
            v137 = 0u;
            LODWORD(v138[0]) = 728325608;
            kdebug_trace();
            sub_223A6AD5C((double *)&qword_255788F20, v62, &v129, "semantics");
            kdebug_trace();
          }
        }
      }
      v136 = 0u;
      v137 = 0u;
      LODWORD(v138[0]) = 728325624;
      kdebug_trace();
      v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v63 = __p.__r_.__value_.__l.__size_;
      if (v63 >= 0x11)
      {
        v64 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v65 = v64->__r_.__value_.__r.__words[0];
        v66 = v64->__r_.__value_.__l.__size_;
        v67 = v64->__r_.__value_.__s.__data_[16];
        if (v65 == 0x6365722E64337663 && v66 == 0x73746174532E6E6FLL && v67 == 46)
        {
          v70 = sub_223187510();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v71 = &__p;
          else
            v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v72 = __p.__r_.__value_.__l.__size_;
          sub_22365B208(v70, v71, v72, &v129, (uint64_t)"semantics", 9);
        }
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *((_QWORD *)&v136 + 1) = 0;
      *(_QWORD *)&v137 = 0;
      *(_QWORD *)&v136 = (char *)&v136 + 8;
      sub_2245314F4(&v136, &__p);
      v128 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      sub_22323DF84((uint64_t)&v136, *((char **)&v136 + 1));
      v73 = *a1;
      if (*a1 != (unsigned __int8 *)(a1 + 1))
      {
        v74 = (unsigned __int8 *)(a3 + 8);
        v123 = (unsigned __int8 *)(a4 + 8);
        v75 = (unsigned __int8 *)(a5 + 8);
        v125 = (unsigned __int8 *)(a3 + 8);
        do
        {
          v76 = v74;
          v77 = *(unsigned __int8 **)v74;
          if (v77)
          {
            do
            {
              v78 = v77[32];
              v79 = v73[25];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[33];
              v79 = v73[26];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[34];
              v79 = v73[27];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[35];
              v79 = v73[28];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[36];
              v79 = v73[29];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[37];
              v79 = v73[30];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[38];
              v79 = v73[31];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[39];
              v79 = v73[32];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[40];
              v79 = v73[33];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[41];
              v79 = v73[34];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[42];
              v79 = v73[35];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[43];
              v79 = v73[36];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[44];
              v79 = v73[37];
              if (v78 != v79)
                goto LABEL_118;
              v78 = v77[45];
              v79 = v73[38];
              if (v78 == v79
                && (v78 = v77[46], v79 = v73[39], v78 == v79)
                && (v78 = v77[47], v79 = v73[40], v78 == v79))
              {
                v76 = v77;
              }
              else
              {
LABEL_118:
                if (v78 < v79)
                  v77 += 8;
                else
                  v76 = v77;
              }
              v77 = *(unsigned __int8 **)v77;
            }
            while (v77);
            v80 = v123;
            if (v76 == v125 || (char)sub_22319835C(v73 + 25, v76 + 32) < 0)
            {
              v81 = 0;
              v82 = *(unsigned __int8 **)v123;
              if (!*(_QWORD *)v123)
                goto LABEL_155;
            }
            else
            {
              v81 = -1431655765 * ((*((_QWORD *)v76 + 7) - *((_QWORD *)v76 + 6)) >> 2);
              v82 = *(unsigned __int8 **)v123;
              if (!*(_QWORD *)v123)
                goto LABEL_155;
            }
          }
          else
          {
            v81 = 0;
            v80 = v123;
            v82 = *(unsigned __int8 **)v123;
            if (!*(_QWORD *)v123)
              goto LABEL_155;
          }
          v83 = v80;
          do
          {
            v84 = v82[32];
            v85 = v73[25];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[33];
            v85 = v73[26];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[34];
            v85 = v73[27];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[35];
            v85 = v73[28];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[36];
            v85 = v73[29];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[37];
            v85 = v73[30];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[38];
            v85 = v73[31];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[39];
            v85 = v73[32];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[40];
            v85 = v73[33];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[41];
            v85 = v73[34];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[42];
            v85 = v73[35];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[43];
            v85 = v73[36];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[44];
            v85 = v73[37];
            if (v84 != v85)
              goto LABEL_147;
            v84 = v82[45];
            v85 = v73[38];
            if (v84 == v85 && (v84 = v82[46], v85 = v73[39], v84 == v85) && (v84 = v82[47], v85 = v73[40], v84 == v85))
            {
              v83 = v82;
            }
            else
            {
LABEL_147:
              if (v84 < v85)
                v82 += 8;
              else
                v83 = v82;
            }
            v82 = *(unsigned __int8 **)v82;
          }
          while (v82);
          if (v83 != v80 && ((char)sub_22319835C(v73 + 25, v83 + 32) & 0x80000000) == 0)
          {
            v86 = -1431655765 * ((*((_QWORD *)v83 + 7) - *((_QWORD *)v83 + 6)) >> 2);
            v87 = *(unsigned __int8 **)v75;
            if (!*(_QWORD *)v75)
              goto LABEL_182;
            goto LABEL_156;
          }
LABEL_155:
          v86 = 0;
          v87 = *(unsigned __int8 **)v75;
          if (!*(_QWORD *)v75)
            goto LABEL_182;
LABEL_156:
          v88 = v75;
          do
          {
            v89 = v87[32];
            v90 = v73[25];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[33];
            v90 = v73[26];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[34];
            v90 = v73[27];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[35];
            v90 = v73[28];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[36];
            v90 = v73[29];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[37];
            v90 = v73[30];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[38];
            v90 = v73[31];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[39];
            v90 = v73[32];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[40];
            v90 = v73[33];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[41];
            v90 = v73[34];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[42];
            v90 = v73[35];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[43];
            v90 = v73[36];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[44];
            v90 = v73[37];
            if (v89 != v90)
              goto LABEL_174;
            v89 = v87[45];
            v90 = v73[38];
            if (v89 == v90 && (v89 = v87[46], v90 = v73[39], v89 == v90) && (v89 = v87[47], v90 = v73[40], v89 == v90))
            {
              v88 = v87;
            }
            else
            {
LABEL_174:
              if (v89 < v90)
                v87 += 8;
              else
                v88 = v87;
            }
            v87 = *(unsigned __int8 **)v87;
          }
          while (v87);
          if (v88 == v75 || (char)sub_22319835C(v73 + 25, v88 + 32) < 0)
          {
LABEL_182:
            v91 = 0;
            v92 = *(uint64_t ***)(a2 + 8);
            if (!v92)
            {
LABEL_220:
              v99 = 0;
              goto LABEL_222;
            }
            goto LABEL_183;
          }
          v91 = -1431655765 * ((*((_QWORD *)v88 + 7) - *((_QWORD *)v88 + 6)) >> 2);
          v92 = *(uint64_t ***)(a2 + 8);
          if (!v92)
            goto LABEL_220;
LABEL_183:
          v93 = v73[25];
          while (1)
          {
            v94 = *((unsigned __int8 *)v92 + 25);
            v95 = v93 >= v94;
            if (v93 != v94)
            {
              v96 = v73[25];
LABEL_218:
              if (!v95)
                goto LABEL_186;
              goto LABEL_184;
            }
            v96 = v73[26];
            v94 = *((unsigned __int8 *)v92 + 26);
            v95 = v96 >= v94;
            if (v96 != v94)
              goto LABEL_218;
            v96 = v73[27];
            v94 = *((unsigned __int8 *)v92 + 27);
            v95 = v96 >= v94;
            if (v96 != v94)
              goto LABEL_218;
            v96 = v73[28];
            v94 = *((unsigned __int8 *)v92 + 28);
            v95 = v96 >= v94;
            if (v96 != v94)
              goto LABEL_218;
            v97 = v73[29];
            v98 = *((unsigned __int8 *)v92 + 29);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[30];
            v98 = *((unsigned __int8 *)v92 + 30);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[31];
            v98 = *((unsigned __int8 *)v92 + 31);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[32];
            v98 = *((unsigned __int8 *)v92 + 32);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[33];
            v98 = *((unsigned __int8 *)v92 + 33);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[34];
            v98 = *((unsigned __int8 *)v92 + 34);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[35];
            v98 = *((unsigned __int8 *)v92 + 35);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[36];
            v98 = *((unsigned __int8 *)v92 + 36);
            if (v97 != v98)
              goto LABEL_203;
            v97 = v73[37];
            v98 = *((unsigned __int8 *)v92 + 37);
            if (v97 != v98
              || (v97 = v73[38], v98 = *((unsigned __int8 *)v92 + 38), v97 != v98)
              || (v97 = v73[39], v98 = *((unsigned __int8 *)v92 + 39), v97 != v98)
              || (v97 = v73[40], v98 = *((unsigned __int8 *)v92 + 40), v97 != v98))
            {
LABEL_203:
              if (v97 < v98)
                goto LABEL_186;
            }
            v94 = *((unsigned __int8 *)v92 + 29);
            v96 = v73[29];
            if (v94 == v96)
            {
              v94 = *((unsigned __int8 *)v92 + 30);
              v96 = v73[30];
              if (v94 == v96)
              {
                v94 = *((unsigned __int8 *)v92 + 31);
                v96 = v73[31];
                if (v94 == v96)
                {
                  v94 = *((unsigned __int8 *)v92 + 32);
                  v96 = v73[32];
                  if (v94 == v96)
                  {
                    v94 = *((unsigned __int8 *)v92 + 33);
                    v96 = v73[33];
                    if (v94 == v96)
                    {
                      v94 = *((unsigned __int8 *)v92 + 34);
                      v96 = v73[34];
                      if (v94 == v96)
                      {
                        v94 = *((unsigned __int8 *)v92 + 35);
                        v96 = v73[35];
                        if (v94 == v96)
                        {
                          v94 = *((unsigned __int8 *)v92 + 36);
                          v96 = v73[36];
                          if (v94 == v96)
                          {
                            v94 = *((unsigned __int8 *)v92 + 37);
                            v96 = v73[37];
                            if (v94 == v96)
                            {
                              v94 = *((unsigned __int8 *)v92 + 38);
                              v96 = v73[38];
                              if (v94 == v96)
                              {
                                v94 = *((unsigned __int8 *)v92 + 39);
                                v96 = v73[39];
                                if (v94 == v96)
                                {
                                  v94 = *((unsigned __int8 *)v92 + 40);
                                  v96 = v73[40];
                                  if (v94 == v96)
                                    break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_184:
            if (v94 >= v96)
              break;
            ++v92;
LABEL_186:
            v92 = (uint64_t **)*v92;
            if (!v92)
              goto LABEL_220;
          }
          v99 = 1;
LABEL_222:
          v133 = 0;
          sub_2231C0CF0(&__p, "SLAM event: ");
          std::to_string(&v134, v99);
          *(_QWORD *)&v136 = &__p;
          *((_QWORD *)&v136 + 1) = &v134;
          *(_QWORD *)&v137 = &__p;
          *((_QWORD *)&v137 + 1) = &v134;
          v138[0] = &v134;
          if (v133 == -1)
            sub_22316DD70();
          v135 = &v136;
          ((void (*)(__int128 **, std::string *))off_24EC5E4E8[v133])(&v135, &__p);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          *(_QWORD *)&v136 = &__p;
          *((_QWORD *)&v136 + 1) = "\n#fine = ";
          *(_QWORD *)&v137 = &__p;
          *((_QWORD *)&v137 + 1) = "\n#fine = ";
          v138[0] = "\n#fine = ";
          if (v133 == -1)
            sub_22316DD70();
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          ((void (*)(std::string *, std::string *))off_24EC5E530[v133])(&v134, &__p);
          std::to_string(&v134, v81);
          *(_QWORD *)&v136 = &__p;
          *((_QWORD *)&v136 + 1) = &v134;
          *(_QWORD *)&v137 = &__p;
          *((_QWORD *)&v137 + 1) = &v134;
          v138[0] = &v134;
          if (v133 == -1)
            sub_22316DD70();
          v135 = &v136;
          ((void (*)(__int128 **, std::string *))off_24EC5E4E8[v133])(&v135, &__p);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          *(_QWORD *)&v136 = &__p;
          *((_QWORD *)&v136 + 1) = "\n#coarse = ";
          *(_QWORD *)&v137 = &__p;
          *((_QWORD *)&v137 + 1) = "\n#coarse = ";
          v138[0] = "\n#coarse = ";
          if (v133 == -1)
            sub_22316DD70();
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          ((void (*)(std::string *, std::string *))off_24EC5E548[v133])(&v134, &__p);
          std::to_string(&v134, v86);
          *(_QWORD *)&v136 = &__p;
          *((_QWORD *)&v136 + 1) = &v134;
          *(_QWORD *)&v137 = &__p;
          *((_QWORD *)&v137 + 1) = &v134;
          v138[0] = &v134;
          if (v133 == -1)
            sub_22316DD70();
          v135 = &v136;
          ((void (*)(__int128 **, std::string *))off_24EC5E4E8[v133])(&v135, &__p);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          *(_QWORD *)&v136 = &__p;
          *((_QWORD *)&v136 + 1) = "\n#semantics =";
          *(_QWORD *)&v137 = &__p;
          *((_QWORD *)&v137 + 1) = "\n#semantics =";
          v138[0] = "\n#semantics =";
          if (v133 == -1)
            sub_22316DD70();
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v136;
          ((void (*)(std::string *, std::string *))off_24EC5E560[v133])(&v134, &__p);
          std::to_string(&v134, v91);
          *(_QWORD *)&v136 = &__p;
          *((_QWORD *)&v136 + 1) = &v134;
          *(_QWORD *)&v137 = &__p;
          *((_QWORD *)&v137 + 1) = &v134;
          v138[0] = &v134;
          if (v133 == -1)
            sub_22316DD70();
          v135 = &v136;
          ((void (*)(__int128 **, std::string *))off_24EC5E4E8[v133])(&v135, &__p);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          if (v133 == -1)
            sub_22316DD70();
          *(_QWORD *)&v136 = &v134;
          ((void (*)(void **__return_ptr, __int128 *, std::string *))off_24EC5E518[v133])(v126, &v136, &__p);
          if (v133 != -1)
            ((void (*)(__int128 *, std::string *))off_24EC5E500[v133])(&v136, &__p);
          DWORD2(v137) = 0;
          sub_22319B83C((uint64_t)&v134, (uint64_t)&v136, v73 + 25);
          if (DWORD2(v137) == -1)
            sub_22316DD70();
          v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
          ((void (*)(std::string *__return_ptr, std::string *, __int128 *))off_24EC5E518[DWORD2(v137)])(&__p, &v134, &v136);
          if (DWORD2(v137) != -1)
            ((void (*)(std::string *, __int128 *))off_24EC5E500[DWORD2(v137)])(&v134, &v136);
          sub_224527BAC((uint64_t)&__p, (CFStringRef *)&v136);
          sub_2231AEDB8((uint64_t)&v128, (const void *)v136, (uint64_t)v126);
          v100 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
          if (!*((_QWORD *)&v136 + 1))
            goto LABEL_247;
          v101 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_252;
LABEL_248:
            if ((v127 & 0x80000000) == 0)
              goto LABEL_249;
LABEL_253:
            operator delete(v126[0]);
            v103 = (unsigned __int8 *)*((_QWORD *)v73 + 1);
            if (v103)
              goto LABEL_254;
            do
            {
LABEL_256:
              v104 = (unsigned __int8 **)*((_QWORD *)v73 + 2);
              v34 = *v104 == v73;
              v73 = (unsigned __int8 *)v104;
            }
            while (!v34);
          }
          else
          {
LABEL_247:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_248;
LABEL_252:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v127 < 0)
              goto LABEL_253;
LABEL_249:
            v103 = (unsigned __int8 *)*((_QWORD *)v73 + 1);
            if (!v103)
              goto LABEL_256;
            do
            {
LABEL_254:
              v104 = (unsigned __int8 **)v103;
              v103 = *(unsigned __int8 **)v103;
            }
            while (v103);
          }
          v73 = (unsigned __int8 *)v104;
          v34 = v104 == a1 + 1;
          v74 = v125;
        }
        while (!v34);
      }
      *(_QWORD *)&v136 = "cv3d.recon.";
      *((_QWORD *)&v136 + 1) = 11;
      *(_QWORD *)&v137 = "Stats.Volumetric.CurateItgBlocks.KeyframeItgBlocks";
      *((_QWORD *)&v137 + 1) = 50;
      sub_2231A9820((uint64_t)&v136, (uint64_t)v138, 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v105 = sub_2241471F8();
        v106 = v105[2];
        if (!v106)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v106 = v105[2];
        }
        v107 = *(_QWORD *)(v106 + 64);
        v108 = (std::mutex *)(v107 + 32);
        std::mutex::lock((std::mutex *)(v107 + 32));
        v110 = *(_QWORD *)(v107 + 96);
        v109 = *(_QWORD *)(v107 + 104);
        std::mutex::unlock(v108);
        if (v110 != v109)
        {
          sub_2241471F8();
          v111 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111))
          {
            v136 = 0u;
            v137 = 0u;
            LODWORD(v138[0]) = 728325608;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111))
            {
              v134.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              v134.__r_.__value_.__l.__size_ = 2;
              v112 = sub_2241471F8();
              sub_2234277D4((uint64_t)v112, v111, (uint64_t)&v128, (uint64_t)&unk_2245C9EFE, (__int128 *)&v134);
            }
            kdebug_trace();
          }
        }
      }
      v136 = 0u;
      v137 = 0u;
      LODWORD(v138[0]) = 728325624;
      kdebug_trace();
      v113 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v113 = __p.__r_.__value_.__l.__size_;
      if (v113 >= 0x11)
      {
        v114 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v114 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v115 = v114->__r_.__value_.__r.__words[0];
        v116 = v114->__r_.__value_.__l.__size_;
        v117 = v114->__r_.__value_.__s.__data_[16];
        if (v115 == 0x6365722E64337663 && v116 == 0x73746174532E6E6FLL && v117 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v120 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
      if (*((_QWORD *)&v128 + 1))
      {
        v121 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
    }
  }
}

void sub_223A6A994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223A6ABC4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 4;
    strcpy((char *)__p, "fine");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2238C677C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223A6AC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A6AC8C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 6;
    strcpy((char *)__p, "coarse");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_2238C677C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223A6AD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A6AD5C(double *a1, uint64_t a2, uint64_t *a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_2238C677C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223A6AE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_223A6AE98(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC5E4C8[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC5E4D8[v18])(&v22, a1 + 3);
  }
  return v12;
}

_DWORD *sub_223A6B020(_DWORD ***a1)
{
  return sub_22329B258(**a1, (char *)(*a1)[1]);
}

void sub_223A6B02C(uint64_t a1, uint64_t a2)
{
  sub_223A6B03C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_223A6B03C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5E500[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223A6B1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223A6B234(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223A6B32C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223A6B324(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223A6B32C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223A6B528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_223A6B53C(_DWORD ***a1)
{
  return sub_223A6B558(**a1, (char *)(*a1)[1]);
}

void sub_223A6B548(uint64_t a1, uint64_t a2)
{
  sub_223A6B648((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_223A6B558(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC5E500[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_223A6B648(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24EC5E500[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_22319BD1C((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_223A6B7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_223A6B840(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_223A6B938((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_223A6B930(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_223A6B938(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_223A6BB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319C040((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223A6BB48(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _BOOL4 v5;
  int v6;

  *(_BYTE *)a1 = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 268);
  *(_BYTE *)(a1 + 3) = 0;
  if (*(_BYTE *)(a2 + 84))
  {
    v4 = (_DWORD *)(a2 + 64);
    v5 = *(_BYTE *)(a2 + 48) == 0;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
      goto LABEL_12;
    }
    v5 = 0;
    v4 = (_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a1 + 4) = *v4;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 16) = 1025758986;
  *(_DWORD *)(a1 + 20) = 256;
  if (v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 88, (uint64_t)"config.meshing.sdf_config.has_value()", 37, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C)|| (*(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 24), *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 36), *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 40), *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 43), v6 = *(unsigned __int8 *)(a2 + 44), *(_BYTE *)(a1 + 22) = v6, v6)&& *(float *)(a2 + 20) < 3.4028e38&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 97, (uint64_t)"config.meshing.sdf_config->coarse_voxel_threshold >= std::numeric_limits<float>::max()",
         86,
         (uint64_t)&unk_22459E31A,
         0,
         (void (*)(void **))sub_22457406C))
  {
LABEL_12:
    abort();
  }
  return a1;
}

uint64_t sub_223A6BCC0(uint64_t a1, __int128 *a2)
{
  uint64_t *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = &off_24EC5E588;
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 40) = 0;
  v6 = a1 + 40;
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_223A23C6C(a1 + 64);
  sub_223A2AE38(v6 + 65808);
  v7 = operator new();
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_QWORD *)(v7 + 48) = 0;
  *(_OWORD *)v7 = 0u;
  *(_QWORD *)(v7 + 32) = v7 + 40;
  v8 = *v3;
  *v3 = v7;
  if (v8)
  {
    sub_223198030(v8 + 32, *(_QWORD **)(v8 + 40));
    v9 = *(void **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)(v8 + 8) = v9;
      operator delete(v9);
    }
    MEMORY[0x227684CE8](v8, 0x1020C40AD7188B3);
    v7 = *v3;
  }
  sub_223A33C5C(v7, 3u);
  sub_223A6BE84(v6, 0x100uLL, 0);
  **(_QWORD **)(a1 + 40) = **(_QWORD **)(a1 + 40) & 0xFFFFFFFDFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a1 + 19) << 33);
  *(_OWORD *)(a1 + 83488) = 0u;
  *(_DWORD *)(a1 + 83504) = 0;
  return a1;
}

void sub_223A6BDF0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void **v2;
  _QWORD *v3;

  sub_223A6C0FC(v3);
  if (*v2)
    operator delete(*v2);
  sub_223A6BE24(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223A6BE24(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_223198030(v2 + 32, *(_QWORD **)(v2 + 40));
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x227684CE8](v2, 0x1020C40AD7188B3);
  }
  return a1;
}

void sub_223A6BE84(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__dst;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v24 = 0;
    v25 = 0;
    if ((a2 & 0x8000000000000000) != 0)
      sub_2233DCD38();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_2239996F4((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = v13 + v5;
    v24 = v13 + v5;
    v15 = (char *)__dst;
    if (v13 < 1)
    {
      LODWORD(v17) = 0;
      v16 = (char *)__dst;
    }
    else
    {
      v17 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v17);
      v16 = &v15[8 * v17];
      if ((v13 & 0x3F) != 0)
      {
        *(_QWORD *)v16 = *(_QWORD *)v16 & ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F)) | *((_QWORD *)v12 + v17) & (0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
        LODWORD(v17) = v13 & 0x3F;
      }
      else
      {
        LODWORD(v17) = 0;
      }
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8);
      v15 = (char *)__dst;
      v14 = v24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14;
    __dst = v12;
    v24 = v13;
    v18 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    v25 = v18;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v16 = (char *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v17 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v19 = v5;
        else
          v19 = (64 - v17);
        *(_QWORD *)v16 |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v19)) & (-1 << v17);
        v16 += 8;
        v5 -= v19;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        memset(v16, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_44:
        *(_QWORD *)&v16[v20] = v21;
      }
    }
    else
    {
      if ((_DWORD)v17)
      {
        if ((64 - v17) >= v5)
          v22 = v5;
        else
          v22 = (64 - v17);
        *(_QWORD *)v16 &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v17 - v22)) & (-1 << v17));
        v16 += 8;
        v5 -= v22;
      }
      v20 = 8 * (v5 >> 6);
      if (v5 >= 0x40)
        bzero(v16, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v21 = *(_QWORD *)&v16[v20] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_44;
      }
    }
  }
}

void sub_223A6C0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223A6C0FC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[2202];
  if (v2)
  {
    a1[2203] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2199];
  if (v3)
  {
    a1[2200] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2196];
  if (v4)
  {
    a1[2197] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[2193];
  if (v5)
  {
    a1[2194] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[2190];
  if (v6)
  {
    a1[2191] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[2187];
  if (v7)
  {
    a1[2188] = v7;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_223A6C17C(_QWORD *a1)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;

  v2 = (void **)(a1 + 10418);
  *a1 = &off_24EC5E588;
  v3 = (void *)a1[10433];
  if (v3)
  {
    v2[16] = v3;
    operator delete(v3);
  }
  v4 = v2[12];
  if (v4)
  {
    v2[13] = v4;
    operator delete(v4);
  }
  v5 = v2[9];
  if (v5)
  {
    v2[10] = v5;
    operator delete(v5);
  }
  v6 = v2[6];
  if (v6)
  {
    v2[7] = v6;
    operator delete(v6);
  }
  v7 = v2[3];
  if (v7)
  {
    v2[4] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v2[1] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[5];
  if (v9)
    operator delete(v9);
  v10 = a1[1];
  a1[1] = 0;
  if (v10)
  {
    sub_223198030(v10 + 32, *(_QWORD **)(v10 + 40));
    v11 = *(void **)v10;
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)(v10 + 8) = v11;
      operator delete(v11);
    }
    MEMORY[0x227684CE8](v10, 0x1020C40AD7188B3);
  }
  return a1;
}

void sub_223A6C260(_QWORD *a1)
{
  sub_223A6C17C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A6C284(int32x2_t *a1, _QWORD *a2, uint64_t a3, unsigned __int8 a4, _QWORD *a5, int a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  int *v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  _BYTE *v24;
  char *v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t i;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t j;
  unsigned __int8 v36;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t k;
  unsigned __int8 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t m;
  unsigned __int8 v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  int32x2_t *v54;
  int32x2_t v55;
  uint64_t v56;
  char *v57;
  int32x2_t *v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int32x2_t *v67;
  _BYTE *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int32x2_t v79;
  __int32 v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  _BYTE *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  int64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  unsigned __int16 *v154;
  unsigned __int16 *v155;
  unsigned __int16 *v156;
  _DWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  unint64_t v180;
  char *v181;
  uint64_t *v182;
  uint64_t *v183;
  unsigned int v184;
  void *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t n;
  unsigned __int8 v200;
  unsigned __int8 v201;
  uint64_t v202;
  uint64_t ii;
  unsigned __int8 v204;
  unint64_t v205;
  unsigned __int8 v206;
  uint64_t v207;
  uint64_t jj;
  unsigned __int8 v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unsigned __int8 v213;
  uint64_t v214;
  uint64_t kk;
  unsigned __int8 v216;
  unint64_t v217;
  uint64_t v218;
  unsigned __int16 *v219;
  unsigned __int16 *v220;
  uint64_t v221;
  int32x2_t *v222;
  int32x2_t v223;
  _QWORD *v224;
  uint64_t v225;
  char *v226;
  int32x2_t *v227;
  uint64_t v228;
  int v229;
  char *v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int32x2_t *v236;
  _BYTE *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int32x2_t v248;
  __int32 v249;
  char *v250;
  uint64_t v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  int v256;
  unint64_t v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  int64_t v270;
  unint64_t v271;
  char *v272;
  _BYTE *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  _BYTE *v278;
  uint64_t v279;
  uint64_t v280;
  _OWORD *v281;
  char *v282;
  uint64_t v283;
  __int128 v284;
  int v285;
  unint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  unint64_t v297;
  uint64_t v298;
  int v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  uint64_t v310;
  int v311;
  unint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  int64_t v325;
  unint64_t v326;
  char *v327;
  int v328;
  unint64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  char *v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  unint64_t v342;
  uint64_t v343;
  int v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _OWORD *v348;
  char *v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  _QWORD *v353;
  unsigned __int16 *v354;
  unsigned __int16 *v355;
  unsigned __int16 *v356;
  _DWORD *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _DWORD *v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  unint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  unint64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  char *v379;
  unint64_t v380;
  char *v381;
  uint64_t *v382;
  uint64_t *v383;
  int64_t v384;
  size_t v385;
  _QWORD *v386;
  void *v387;
  char *v388;
  float32x4_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  float32x2_t v393;
  float32x2_t v394;
  float32x2_t v395;
  float32x4_t v397;
  uint64_t v398;
  float32x2_t v399;
  float32x4_t v400;
  char *v401;
  uint64_t v402;
  int32x2_t v403;
  uint64_t v404;
  float32x2_t v405;
  float32x2_t v406;
  float32x2_t *v407;
  BOOL v409;
  int32x2_t v411;
  uint64_t v413;
  float v414;
  float v415;
  float v416;
  float v417;
  uint64_t v418;
  int v420;
  _BOOL4 v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unsigned int *v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  int64x2_t v437;
  int64x2_t v438;
  int64x2_t v439;
  float32x4_t v440;
  _BYTE *v441;
  char *v442;
  unsigned __int8 *v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  BOOL v447;
  char v448;
  unint64_t v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  _BYTE *v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _BYTE *v461;
  unint64_t v462;
  unint64_t v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  int v467;
  float v468;
  int32x2_t v469;
  float32x4_t v470;
  float32x4_t v471;
  _QWORD *v472;
  char v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t v477;
  _QWORD *v478;
  uint64_t *v479;
  _QWORD *v480;
  unsigned int v483;
  char *v486;
  unsigned int v487;
  _QWORD *v488;
  int32x2_t *v489;
  unsigned int v490;
  uint64_t v491;
  int32x2_t *v492;
  uint64_t v493;
  _QWORD *v494;
  uint64_t *v495;
  uint64_t *v496;
  _QWORD *v497;
  _QWORD *v498;
  int v499;
  _QWORD *v500;
  int v501;
  _QWORD *v502;
  char *v503;
  int *v504;
  int32x2_t *v505;
  char *v506;
  _BYTE *v507;
  unint64_t v508;
  _BYTE v509[4];
  int v510;
  unint64_t v511;
  char *v512;
  unint64_t v513;
  _BYTE v514[4];
  int v515;
  char *v516;
  int v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  _BYTE v521[4];
  int v522;
  void *v523;
  void *__dst;
  int v525;
  void *v526;
  void *v527;
  int v528;
  char *v529;
  char *v530;
  unint64_t v531;
  _BYTE v532[4];
  int v533;
  int v534;
  uint64_t v535;
  __int32 v536;
  uint64_t v537;
  __int32 v538;
  char v539;
  uint64_t *v540;
  _QWORD *v541[2];
  _QWORD **v542;
  char *v543;
  char *v544;
  _QWORD *v545;
  uint64_t v546;
  char *v547;
  _QWORD v548[2];

  v7 = (_QWORD *)*a2;
  v480 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v8 = a5;
    v9 = a1;
    v10 = a1 + 10418;
    v486 = (char *)&a1[2] + 1;
    v505 = a1 + 8231;
    v478 = a5 + 2;
    v479 = a5 + 57;
    v477 = a4;
    v492 = a1 + 10427;
    v503 = (char *)&a1[9324] + 4;
    v489 = a1 + 10418;
    while (1)
    {
      v11 = (int *)v7 + 7;
      sub_223CF5E88(v479, (_DWORD *)v7 + 7, a6, &v540);
      sub_2241498F4((uint64_t)&v506, 1);
      if (!v9[4].i8[6])
      {
        v10[20].i32[0] += sub_223A8737C(*(uint64_t **)&v9[1], &v540, (_QWORD *)((char *)v7 + 28), v478, (uint64_t)&v506);
        goto LABEL_547;
      }
      v488 = v7;
      v504 = (int *)v7 + 7;
      if ((*v486 & 4) == 0)
      {
        v12 = sub_223A2B328(&v540, v478, v486, (uint64_t)&v506);
        if ((uint64_t)(*(_QWORD *)&v10[1] - *(_QWORD *)v10) > 0)
          memset(*(void **)v10, 255, 4 * (((*(_QWORD *)&v10[1] - *(_QWORD *)v10) >> 2) - (*(_QWORD *)&v10[1] - *(_QWORD *)v10 > 3uLL)) + 4);
        v13 = (void *)v10[9];
        v14 = *(_QWORD *)&v10[10] - (_QWORD)v13;
        if (v14 >= 1)
          memset(v13, 255, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
        v15 = (void *)v10[3];
        v16 = *(_QWORD *)&v10[4] - (_QWORD)v15;
        if (v16 >= 1)
          memset(v15, 255, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
        v17 = (void *)v10[12];
        v18 = *(_QWORD *)&v10[13] - (_QWORD)v17;
        if (v18 >= 1)
          memset(v17, 255, 4 * (((unint64_t)v18 >> 2) - ((unint64_t)v18 > 3)) + 4);
        v19 = (void *)v10[6];
        v20 = *(_QWORD *)&v10[7] - (_QWORD)v19;
        if (v20 >= 1)
          memset(v19, 255, 4 * (((unint64_t)v20 >> 2) - ((unint64_t)v20 > 3)) + 4);
        v483 = v12;
        v21 = (void *)v10[15];
        v22 = *(_QWORD *)&v10[16] - (_QWORD)v21;
        if (v22 >= 1)
          memset(v21, 255, 4 * (((unint64_t)v22 >> 2) - ((unint64_t)v22 > 3)) + 4);
        v23 = v540;
        if (v540 == (uint64_t *)v541)
        {
LABEL_19:
          v25 = v506;
          v24 = v507;
          v26 = v507 - v506;
          v27 = v483;
          if (0xAAAAAAAAAAAAAAABLL * ((v507 - v506) >> 2) <= v483)
            goto LABEL_460;
          goto LABEL_229;
        }
        while (1)
        {
          v28 = *((unsigned int *)v23 + 7);
          if (v8[13] <= v28)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
            v29 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v30 = qword_255795648;
              for (i = qword_255795650; v30 != i; v30 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v30)(*(_QWORD *)(v30 + 8), "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
            }
            v32 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_627;
            qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
          }
          if (*(_BYTE *)(*(_QWORD *)(v8[9] + 8 * ((v8[12] + v28) / 0x1F)) + 132 * ((v8[12] + v28) % 0x1F) + 20))
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
            v33 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v34 = qword_255795648;
              for (j = qword_255795650; v34 != j; v34 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v34)(*(_QWORD *)(v34 + 8), "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
            }
            v36 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_627;
            qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
          }
          v37 = v8[29] + v28;
          v493 = *(_QWORD *)(v8[26] + ((v37 >> 1) & 0x7FFFFFFFFFFFFFF8));
          if (v8[13] <= v28)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 667, (uint64_t)"index < metadata_blocks_.size()", 31, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
            v38 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v39 = qword_255795648;
              for (k = qword_255795650; v39 != k; v39 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v39)(*(_QWORD *)(v39 + 8), "index < metadata_blocks_.size()", 31, "Out of range", 12);
            }
            v41 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v7 = v488;
            if (!byte_255795670)
              goto LABEL_627;
            qword_255795660(*(_QWORD *)algn_255795668, "index < metadata_blocks_.size()", 31, "Out of range", 12);
          }
          v42 = v8[12] + v28;
          v43 = *(_QWORD *)(v8[9] + 8 * (v42 / 0x1F));
          v44 = v42 % 0x1F;
          if (*(_BYTE *)(v43 + 132 * v44 + 20))
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 668, (uint64_t)"!metadata_blocks_[index].IsErased()", 35, (uint64_t)"Cannot get an erased block", 26, (void (*)(void **))sub_22457406C);
            v45 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v45 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v46 = qword_255795648;
              for (m = qword_255795650; v46 != m; v46 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v46)(*(_QWORD *)(v46 + 8), "!metadata_blocks_[index].IsErased()", 35, "Cannot get an erased block", 26);
            }
            v48 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            v7 = v488;
            if (!byte_255795670)
              goto LABEL_627;
            qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[index].IsErased()", 35, "Cannot get an erased block", 26);
            v49 = v8[12] + v28;
            v44 = v49 % 0x1F;
            v43 = *(_QWORD *)(v8[9] + 8 * (v49 / 0x1F));
          }
          v490 = v37 & 0xF;
          v50 = v493 + 248 * (v37 & 0xF);
          v51 = *(unsigned __int16 **)(v50 + 160);
          v52 = *(unsigned __int16 **)(v50 + 168);
          if (v51 != v52)
          {
            v53 = 0;
            v54 = (int32x2_t *)(v43 + 132 * v44);
            v55 = vsub_s32(*v54, *(int32x2_t *)((char *)v7 + 28));
            v499 = v54[1].i32[0] - *((_DWORD *)v7 + 9);
            v56 = v493 + 248 * (v37 & 0xF);
            v495 = (uint64_t *)(v56 + 64);
            v497 = (_QWORD *)(v56 + 40);
            while (1)
            {
              while (1)
              {
                v58 = (int32x2_t *)&v503[12 * *v51];
                v542 = (_QWORD **)vadd_s32(v55, *v58);
                LODWORD(v543) = v499 + v58[1].i32[0];
                v59 = v51[1];
                v60 = *((_DWORD *)&v542 + v59);
                v61 = (char *)&unk_22465CD38 + 4 * v59;
                v62 = *((unsigned int *)v61 + 2);
                v63 = *((_DWORD *)&v542 + *((unsigned int *)v61 + 1));
                v64 = *((_DWORD *)&v542 + v62);
                if ((v63 & 7) != 0)
                  break;
                if (v60 != 64 && v63 != 64 && v64 != 64)
                {
                  v66 = v63 << 9;
                  v65 = v64 << 6;
                  v67 = v489;
                  goto LABEL_82;
                }
LABEL_69:
                v69 = v506;
                v68 = v507;
                v70 = (v507 - v506) / 12;
                v505->i32[v53] = v70;
                v71 = *v497 + 12 * v53;
                if ((unint64_t)v68 >= v508)
                {
                  v74 = v70 + 1;
                  if ((unint64_t)(v70 + 1) > 0x1555555555555555)
                    goto LABEL_619;
                  v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v508 - (_QWORD)v69) >> 2);
                  if (2 * v75 > v74)
                    v74 = 2 * v75;
                  if (v75 >= 0xAAAAAAAAAAAAAAALL)
                    v74 = 0x1555555555555555;
                  if (v74)
                  {
                    LODWORD(v548[0]) = v74;
                    if (v510 == -1)
                      goto LABEL_615;
                    v545 = v548;
                    v76 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E618[v510])(&v545, v509);
                    v11 = v504;
                  }
                  else
                  {
                    v76 = 0;
                    v77 = 0;
                  }
                  v81 = (char *)(v76 + 12 * v70);
                  v82 = *(_QWORD *)v71;
                  *((_DWORD *)v81 + 2) = *(_DWORD *)(v71 + 8);
                  *(_QWORD *)v81 = v82;
                  v84 = v506;
                  v83 = v507;
                  v85 = v81;
                  if (v507 != v506)
                  {
                    do
                    {
                      v86 = *(_QWORD *)(v83 - 12);
                      v83 -= 12;
                      v87 = *((_DWORD *)v83 + 2);
                      *(_QWORD *)(v85 - 12) = v86;
                      v85 -= 12;
                      *((_DWORD *)v85 + 2) = v87;
                    }
                    while (v83 != v84);
                    v83 = v506;
                  }
                  v73 = v81 + 12;
                  v506 = v85;
                  v507 = v81 + 12;
                  v88 = v508;
                  v508 = v76 + 12 * v77;
                  if (v83)
                  {
                    v545 = v83;
                    LODWORD(v546) = -1431655765 * ((v88 - (unint64_t)v83) >> 2);
                    if (v510 == -1)
                      sub_22316DD70();
                    v548[0] = &v545;
                    ((void (*)(_QWORD *, _BYTE *))off_24EC5E608[v510])(v548, v509);
                  }
                }
                else
                {
                  v72 = *(_QWORD *)v71;
                  *((_DWORD *)v68 + 2) = *(_DWORD *)(v71 + 8);
                  *(_QWORD *)v68 = v72;
                  v73 = v68 + 12;
                }
                v507 = v73;
                v89 = *v495;
                v90 = v530;
                if ((unint64_t)v530 >= v531)
                {
                  v91 = v529;
                  v92 = (char *)(v530 - v529);
                  v93 = (v530 - v529) >> 2;
                  v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62)
                    goto LABEL_618;
                  v95 = v531 - (_QWORD)v529;
                  if ((uint64_t)(v531 - (_QWORD)v529) >> 1 > v94)
                    v94 = v95 >> 1;
                  _CF = (unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL;
                  v97 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!_CF)
                    v97 = v94;
                  if (v97)
                  {
                    LODWORD(v548[0]) = v97;
                    if (v533 == -1)
                      goto LABEL_615;
                    v545 = v548;
                    v98 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E628[v533])(&v545, v532);
                    v90 = v530;
                    v91 = v529;
                  }
                  else
                  {
                    v98 = 0;
                    v99 = 0;
                  }
                  v11 = v504;
                  v100 = (char *)(v98 + 4 * v93);
                  *(_DWORD *)v100 = *(_DWORD *)(v89 + 4 * v53);
                  v57 = v100 + 4;
                  if (v90 != v91)
                  {
                    v101 = v90 - v91 - 4;
                    if (v101 < 0x2C)
                    {
                      v102 = v90;
                      goto LABEL_112;
                    }
                    if ((unint64_t)(&v90[-v98] - v92) < 0x20)
                    {
                      v102 = v90;
                      goto LABEL_112;
                    }
                    v109 = (v101 >> 2) + 1;
                    v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
                    v102 = &v90[-v110];
                    v100 -= v110;
                    v111 = (_OWORD *)(v98 + 4 * v93 - 16);
                    v112 = v90 - 16;
                    v113 = v109 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v114 = *(_OWORD *)v112;
                      *(v111 - 1) = *((_OWORD *)v112 - 1);
                      *v111 = v114;
                      v111 -= 2;
                      v112 -= 32;
                      v113 -= 8;
                    }
                    while (v113);
                    if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_112:
                        v115 = *((_DWORD *)v102 - 1);
                        v102 -= 4;
                        *((_DWORD *)v100 - 1) = v115;
                        v100 -= 4;
                      }
                      while (v102 != v91);
                    }
                  }
                  v529 = v100;
                  v530 = v57;
                  v116 = v531;
                  v531 = v98 + 4 * v99;
                  if (v91)
                  {
                    v545 = v91;
                    LODWORD(v546) = (v116 - (unint64_t)v91) >> 2;
                    if (v533 == -1)
                      sub_22316DD70();
                    v548[0] = &v545;
                    ((void (*)(_QWORD *, _BYTE *))off_24EC5E5F8[v533])(v548, v532);
                  }
                  goto LABEL_61;
                }
                *(_DWORD *)v530 = *(_DWORD *)(v89 + 4 * v53);
                v57 = v90 + 4;
LABEL_61:
                v530 = v57;
                v51 += 2;
                ++v53;
                if (v51 == v52)
                  goto LABEL_155;
              }
              if ((v64 & 7) != 0 || v60 == 64 || v63 == 64 || v64 == 64)
                goto LABEL_69;
              v65 = v64 << 9;
              v66 = v63 << 6;
              v67 = v492;
LABEL_82:
              v78 = (v66 + v60 + v65);
              v79 = v67[3 * v51[1]];
              v80 = *(_DWORD *)(*(_QWORD *)&v79 + 4 * v78);
              if (v80 == -1)
              {
                v104 = v506;
                v103 = v507;
                v105 = (v507 - v506) / 12;
                *(_DWORD *)(*(_QWORD *)&v79 + 4 * v78) = v105;
                v106 = *v497 + 12 * v53;
                if ((unint64_t)v103 >= v508)
                {
                  v117 = v105 + 1;
                  if ((unint64_t)(v105 + 1) > 0x1555555555555555)
                    goto LABEL_619;
                  v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v508 - (_QWORD)v104) >> 2);
                  if (2 * v118 > v117)
                    v117 = 2 * v118;
                  if (v118 >= 0xAAAAAAAAAAAAAAALL)
                    v117 = 0x1555555555555555;
                  if (v117)
                  {
                    LODWORD(v548[0]) = v117;
                    if (v510 == -1)
                      goto LABEL_615;
                    v545 = v548;
                    v119 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E618[v510])(&v545, v509);
                  }
                  else
                  {
                    v119 = 0;
                    v120 = 0;
                  }
                  v121 = (char *)(v119 + 12 * v105);
                  v122 = *(_QWORD *)v106;
                  *((_DWORD *)v121 + 2) = *(_DWORD *)(v106 + 8);
                  *(_QWORD *)v121 = v122;
                  v124 = v506;
                  v123 = v507;
                  v125 = v121;
                  if (v507 != v506)
                  {
                    do
                    {
                      v126 = *(_QWORD *)(v123 - 12);
                      v123 -= 12;
                      v127 = *((_DWORD *)v123 + 2);
                      *(_QWORD *)(v125 - 12) = v126;
                      v125 -= 12;
                      *((_DWORD *)v125 + 2) = v127;
                    }
                    while (v123 != v124);
                    v123 = v506;
                  }
                  v108 = v121 + 12;
                  v506 = v125;
                  v507 = v121 + 12;
                  v128 = v508;
                  v508 = v119 + 12 * v120;
                  if (v123)
                  {
                    v545 = v123;
                    LODWORD(v546) = -1431655765 * ((v128 - (unint64_t)v123) >> 2);
                    if (v510 == -1)
                      sub_22316DD70();
                    v548[0] = &v545;
                    ((void (*)(_QWORD *, _BYTE *))off_24EC5E608[v510])(v548, v509);
                  }
                }
                else
                {
                  v107 = *(_QWORD *)v106;
                  *((_DWORD *)v103 + 2) = *(_DWORD *)(v106 + 8);
                  *(_QWORD *)v103 = v107;
                  v108 = v103 + 12;
                }
                v507 = v108;
                v129 = *v495;
                v130 = v530;
                if ((unint64_t)v530 >= v531)
                {
                  v132 = v529;
                  v133 = (char *)(v530 - v529);
                  v134 = (v530 - v529) >> 2;
                  v135 = v134 + 1;
                  if ((unint64_t)(v134 + 1) >> 62)
                    goto LABEL_618;
                  v136 = v531 - (_QWORD)v529;
                  if ((uint64_t)(v531 - (_QWORD)v529) >> 1 > v135)
                    v135 = v136 >> 1;
                  _CF = (unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL;
                  v137 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!_CF)
                    v137 = v135;
                  if (v137)
                  {
                    LODWORD(v548[0]) = v137;
                    if (v533 == -1)
                      goto LABEL_615;
                    v545 = v548;
                    v138 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E628[v533])(&v545, v532);
                    v130 = v530;
                    v132 = v529;
                    v140 = (char *)(v138 + 4 * v134);
                    *(_DWORD *)v140 = *(_DWORD *)(v129 + 4 * v53);
                    v131 = (uint64_t)(v140 + 4);
                    v141 = v130 - v132;
                    if (v130 == v132)
                      goto LABEL_151;
LABEL_143:
                    v142 = v141 - 4;
                    if (v142 < 0x2C)
                    {
                      v143 = v130;
                      goto LABEL_150;
                    }
                    if ((unint64_t)(&v130[-v138] - v133) < 0x20)
                    {
                      v143 = v130;
                      goto LABEL_150;
                    }
                    v144 = (v142 >> 2) + 1;
                    v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
                    v143 = &v130[-v145];
                    v140 -= v145;
                    v146 = (_OWORD *)(v138 + 4 * v134 - 16);
                    v147 = v130 - 16;
                    v148 = v144 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v149 = *(_OWORD *)v147;
                      *(v146 - 1) = *((_OWORD *)v147 - 1);
                      *v146 = v149;
                      v146 -= 2;
                      v147 -= 32;
                      v148 -= 8;
                    }
                    while (v148);
                    if (v144 != (v144 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_150:
                        v150 = *((_DWORD *)v143 - 1);
                        v143 -= 4;
                        *((_DWORD *)v140 - 1) = v150;
                        v140 -= 4;
                      }
                      while (v143 != v132);
                    }
                  }
                  else
                  {
                    v138 = 0;
                    v139 = 0;
                    v140 = (char *)(4 * v134);
                    *(_DWORD *)(4 * v134) = *(_DWORD *)(v129 + 4 * v53);
                    v131 = 4 * v134 + 4;
                    v141 = v130 - v132;
                    if (v130 != v132)
                      goto LABEL_143;
                  }
LABEL_151:
                  v529 = v140;
                  v530 = (char *)v131;
                  v151 = v531;
                  v531 = v138 + 4 * v139;
                  if (v132)
                  {
                    v545 = v132;
                    LODWORD(v546) = (v151 - (unint64_t)v132) >> 2;
                    if (v533 == -1)
                      sub_22316DD70();
                    v548[0] = &v545;
                    ((void (*)(_QWORD *, _BYTE *))off_24EC5E5F8[v533])(v548, v532);
                  }
                  goto LABEL_154;
                }
                *(_DWORD *)v530 = *(_DWORD *)(v129 + 4 * v53);
                v131 = (uint64_t)(v130 + 4);
LABEL_154:
                v530 = (char *)v131;
                v11 = v504;
                v505->i32[v53] = *(_DWORD *)(*(_QWORD *)&v67[3 * v51[1]] + 4 * v78);
                v51 += 2;
                ++v53;
                if (v51 == v52)
                  break;
              }
              else
              {
                v505->i32[v53] = v80;
                v51 += 2;
                ++v53;
                if (v51 == v52)
                  break;
              }
            }
          }
LABEL_155:
          v152 = v493 + 248 * v490;
          v155 = *(unsigned __int16 **)(v152 + 16);
          v153 = (_QWORD *)(v152 + 16);
          v154 = v155;
          v156 = (unsigned __int16 *)v153[1];
          v500 = v153 + 1;
          if (v155 != v156)
            break;
LABEL_178:
          v8 = a5;
          v7 = v488;
          if ((*v486 & 1) != 0)
          {
            v172 = v493 + 248 * v490;
            v173 = *(char **)(v172 + 88);
            v174 = *(char **)(v172 + 96);
            v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v500 - *v153) >> 1);
            if (v174 - v173 == v175)
            {
              sub_223A2BD50((uint64_t)&v523, (char *)__dst, v173, v174, v174 - v173);
            }
            else
            {
              v176 = (char *)((_BYTE *)__dst - (_BYTE *)v523 - 0x5555555555555555 * ((uint64_t)(*v500 - *v153) >> 1));
              LOBYTE(v545) = -1;
              if ((_BYTE *)__dst - (_BYTE *)v523 >= (unint64_t)v176)
              {
                if ((_BYTE *)__dst - (_BYTE *)v523 > (unint64_t)v176)
                  __dst = &v176[(_QWORD)v523];
              }
              else
              {
                sub_223A72CE0((uint64_t)&v523, v175, (const char *)&v545);
              }
            }
          }
          if ((*v486 & 0x10) != 0)
          {
            v177 = v493 + 248 * v490;
            v178 = *(char **)(v177 + 112);
            v179 = *(char **)(v177 + 120);
            v180 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v500 - *v153) >> 1);
            if (v179 - v178 == v180)
            {
              sub_223A2BD50((uint64_t)&v526, (char *)v527, v178, v179, v179 - v178);
            }
            else
            {
              v181 = (char *)((_BYTE *)v527 - (_BYTE *)v526 - 0x5555555555555555 * ((uint64_t)(*v500 - *v153) >> 1));
              LOBYTE(v545) = -1;
              if ((_BYTE *)v527 - (_BYTE *)v526 >= (unint64_t)v181)
              {
                if ((_BYTE *)v527 - (_BYTE *)v526 > (unint64_t)v181)
                  v527 = &v181[(_QWORD)v526];
              }
              else
              {
                sub_223A72CE0((uint64_t)&v526, v180, (const char *)&v545);
              }
            }
          }
          v182 = (uint64_t *)v23[1];
          if (v182)
          {
            do
            {
              v183 = v182;
              v182 = (uint64_t *)*v182;
            }
            while (v182);
          }
          else
          {
            do
            {
              v183 = (uint64_t *)v23[2];
              _ZF = *v183 == (_QWORD)v23;
              v23 = v183;
            }
            while (!_ZF);
          }
          v23 = v183;
          if (v183 == (uint64_t *)v541)
            goto LABEL_19;
        }
        v157 = (_DWORD *)v519;
        while (1)
        {
          v158 = *v154;
          v159 = v154[1];
          v160 = v154[2];
          if ((unint64_t)v157 < v520)
          {
            *v157 = v505->i32[v158];
            v157[1] = v505->i32[v159];
            v157[2] = v505->i32[v160];
            v157 += 3;
            v11 = v504;
          }
          else
          {
            v161 = v518;
            v162 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v157 - v518) >> 2);
            v163 = v162 + 1;
            if (v162 + 1 > 0x1555555555555555)
              goto LABEL_616;
            if (0x5555555555555556 * ((uint64_t)(v520 - v518) >> 2) > v163)
              v163 = 0x5555555555555556 * ((uint64_t)(v520 - v518) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v520 - v518) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v164 = 0x1555555555555555;
            else
              v164 = v163;
            if (v164)
            {
              LODWORD(v542) = v164;
              if (v522 == -1)
                goto LABEL_615;
              v545 = &v542;
              v165 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E5B8[v522])(&v545, v521);
              v161 = v518;
              v157 = (_DWORD *)v519;
            }
            else
            {
              v165 = 0;
              v166 = 0;
            }
            v167 = (_DWORD *)(v165 + 12 * v162);
            *v167 = v505->i32[v158];
            v167[1] = v505->i32[v159];
            v167[2] = v505->i32[v160];
            v168 = (uint64_t)v167;
            if (v157 == (_DWORD *)v161)
            {
              v11 = v504;
              v157 = v167 + 3;
              v518 = v165 + 12 * v162;
              v519 = (uint64_t)(v167 + 3);
              v171 = v520;
              v520 = v165 + 12 * v166;
              if (v161)
                goto LABEL_176;
            }
            else
            {
              v11 = v504;
              do
              {
                v169 = *(_QWORD *)(v157 - 3);
                v157 -= 3;
                v170 = v157[2];
                *(_QWORD *)(v168 - 12) = v169;
                v168 -= 12;
                *(_DWORD *)(v168 + 8) = v170;
              }
              while (v157 != (_DWORD *)v161);
              v161 = v518;
              v157 = v167 + 3;
              v518 = v168;
              v519 = (uint64_t)(v167 + 3);
              v171 = v520;
              v520 = v165 + 12 * v166;
              if (v161)
              {
LABEL_176:
                v545 = (_QWORD *)v161;
                LODWORD(v546) = -1431655765 * ((v171 - v161) >> 2);
                if (v522 == -1)
                  sub_22316DD70();
                v542 = &v545;
                ((void (*)(_QWORD ***, _BYTE *))off_24EC5E5C8[v522])(&v542, v521);
              }
            }
          }
          v519 = (uint64_t)v157;
          v154 += 3;
          if (v154 == v156)
            goto LABEL_178;
        }
      }
      v184 = sub_223A2B328(&v540, v478, v486, (uint64_t)&v506);
      if ((uint64_t)(*(_QWORD *)&v10[1] - *(_QWORD *)v10) > 0)
        memset(*(void **)v10, 255, 4 * (((*(_QWORD *)&v10[1] - *(_QWORD *)v10) >> 2) - (*(_QWORD *)&v10[1] - *(_QWORD *)v10 > 3uLL)) + 4);
      v185 = (void *)v10[9];
      v186 = *(_QWORD *)&v10[10] - (_QWORD)v185;
      if (v186 >= 1)
        memset(v185, 255, 4 * (((unint64_t)v186 >> 2) - ((unint64_t)v186 > 3)) + 4);
      v187 = (void *)v10[3];
      v188 = *(_QWORD *)&v10[4] - (_QWORD)v187;
      if (v188 >= 1)
        memset(v187, 255, 4 * (((unint64_t)v188 >> 2) - ((unint64_t)v188 > 3)) + 4);
      v189 = (void *)v10[12];
      v190 = *(_QWORD *)&v10[13] - (_QWORD)v189;
      if (v190 >= 1)
        memset(v189, 255, 4 * (((unint64_t)v190 >> 2) - ((unint64_t)v190 > 3)) + 4);
      v191 = (void *)v10[6];
      v192 = *(_QWORD *)&v10[7] - (_QWORD)v191;
      if (v192 >= 1)
        memset(v191, 255, 4 * (((unint64_t)v192 >> 2) - ((unint64_t)v192 > 3)) + 4);
      v483 = v184;
      v193 = (void *)v10[15];
      v194 = *(_QWORD *)&v10[16] - (_QWORD)v193;
      if (v194 >= 1)
        memset(v193, 255, 4 * (((unint64_t)v194 >> 2) - ((unint64_t)v194 > 3)) + 4);
      v195 = v540;
      if (v540 != (uint64_t *)v541)
        break;
LABEL_228:
      v25 = v506;
      v24 = v507;
      v26 = v507 - v506;
      v27 = v483;
      if (0xAAAAAAAAAAAAAAABLL * ((v507 - v506) >> 2) <= v483)
      {
LABEL_460:
        v9 = a1;
        v10 = v489;
        goto LABEL_461;
      }
LABEL_229:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/include/Reconstruction/VolumetricMapper/BlockMarchingCubesMeshMerger.h", 201, (uint64_t)"allocated_vertex_count >= chunk_mesh.vertices.size()", 52, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_627;
      }
      v25 = v506;
      v24 = v507;
      v26 = v507 - v506;
      v9 = a1;
      v10 = v489;
      v27 = v483;
LABEL_461:
      v10[20].i32[0] += v27 + 1431655765 * (v26 >> 2);
      if (v477)
      {
        v545 = 0;
        v546 = 0;
        v547 = 0;
        v384 = v24 - v25;
        if (v24 != v25)
        {
          v385 = v384 / 12;
          if ((unint64_t)(v384 / 12) > 0x1555555555555555)
            sub_22316E078();
          v386 = operator new(v384);
          v545 = v386;
          v547 = (char *)v386 + 12 * v385;
          v387 = operator new(4 * v385);
          memset_pattern16(v387, &unk_22465CD50, 4 * v385);
          v542 = 0;
          v543 = 0;
          v544 = 0;
          if (v384 < 0)
            sub_22316E078();
          v388 = (char *)operator new(v384 / 12);
          v542 = (_QWORD **)v388;
          v544 = &v388[v385];
          memset(v388, 1, v385);
          v390 = 0;
          v543 = &v388[v385];
          v391 = *(_QWORD *)(a3 + 112);
          LODWORD(v392) = *(_DWORD *)(a3 + 120);
          v393 = *(float32x2_t *)(a3 + 128);
          v394.i32[0] = *(_DWORD *)(a3 + 136);
          v395 = *(float32x2_t *)(a3 + 144);
          _D5.i32[0] = *(_DWORD *)(a3 + 152);
          v397.i64[0] = *(_QWORD *)(a3 + 160);
          v397.i32[2] = *(_DWORD *)(a3 + 168);
          do
          {
            v398 = 12 * v390;
            v389.i32[0] = *(_DWORD *)&v25[v398 + 8];
            v399 = *(float32x2_t *)&v25[v398];
            *(float32x2_t *)v400.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)v391, v399.f32[0]), v393, v399, 1), v395, v389.f32[0]);
            *(float32x2_t *)&v400.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)v392, v399), v394, v399, 1), *(float32x2_t *)v389.f32, _D5);
            v389 = vaddq_f32(v397, v400);
            v401 = (char *)v386 + v398;
            *((_DWORD *)v401 + 2) = v389.i32[2];
            *(_QWORD *)v401 = v389.i64[0];
            ++v390;
          }
          while (v385 != v390);
          v402 = 0;
          LODWORD(v391) = *(_DWORD *)(a3 + 264);
          *(float *)&v391 = (double)v391 + -0.5;
          LODWORD(v392) = *(_DWORD *)(a3 + 268);
          *(float *)&v392 = (double)v392 + -0.5;
          v403 = *(int32x2_t *)(a3 + 40);
          v404 = *(_QWORD *)(a3 + 24);
          v405 = *(float32x2_t *)(a3 + 192);
          v406 = *(float32x2_t *)(a3 + 200);
          do
          {
            v407 = (float32x2_t *)((char *)v386 + 12 * v402);
            _D5.i32[0] = v407[1].i32[0];
            if (_D5.f32[0] > 0.000001)
            {
              _D5 = vadd_f32(v406, vdiv_f32(vmul_f32(v405, *v407), (float32x2_t)vdup_lane_s32((int32x2_t)_D5, 0)));
              _NF = _D5.f32[0] >= -0.5 && _D5.f32[0] < *(float *)&v391;
              v409 = !_NF || _D5.f32[1] < -0.5;
              if (!v409 && _D5.f32[1] < *(float *)&v392)
              {
                v411 = vmul_s32(v403, vcvt_s32_f32(vrndm_f32(vadd_f32(_D5, (float32x2_t)0x3F0000003F000000))));
                _D5 = (float32x2_t)vadd_s32(vdup_lane_s32(v411, 1), v411);
                _D5.i16[0] = *(_WORD *)(v404 + 2 * _D5.u32[0]);
                __asm { FCVT            S5, H5 }
                *((_DWORD *)v387 + v402) = _D5.i32[0];
              }
            }
            ++v402;
          }
          while (v385 != v402);
          v413 = 0;
          do
          {
            v415 = *((float *)v387 + v413);
            if (v415 > 0.0)
            {
              v416 = 0.4;
              if (a1[4].i8[4])
                v416 = 0.8;
              v414 = 0.16;
              if (v415 > 3.5)
              {
                v417 = v416 * 0.5;
                if (v415 <= 4.5)
                  v414 = (float)((float)(v415 + -3.5) * (float)((float)(v415 + -3.5) * v417)) + 0.16;
                else
                  v414 = (float)(v415 * v416) + (float)((float)(v417 + (float)(v416 * -4.5)) + 0.16);
              }
              v388[v413] = (float)(v415 - *((float *)v386 + 3 * v413 + 2)) <= (float)(v414 * 3.0);
            }
            ++v413;
          }
          while (v385 != v413);
          if ((unint64_t)v384 >= 0xC)
          {
            v418 = 0;
            while (v388[v418] == 1)
            {
              if (v385 == ++v418)
                goto LABEL_546;
            }
            _ZF = v525 != 2 || v523 == __dst;
            v420 = !_ZF;
            v422 = v528 == 2 && v526 != v527;
            v423 = v518;
            v424 = v519;
            if (v420 == 1 && (_BYTE *)__dst - (_BYTE *)v523 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v519 - v518) >> 2))
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 344, (uint64_t)"mesh.semantics.size() == mesh.faces.size()", 42, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_636;
              }
              v423 = v518;
              v424 = v519;
            }
            if (v422 && (_BYTE *)v527 - (_BYTE *)v526 != 0xAAAAAAAAAAAAAAABLL * ((v424 - v423) >> 2))
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 347, (uint64_t)"mesh.materials.size() == mesh.faces.size()", 42, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
              {
LABEL_636:
                abort();
              }
              v423 = v518;
              v424 = v519;
            }
            v425 = 0;
            v426 = v424 - v423;
            if (v424 != v423)
            {
              v427 = 0;
              v428 = v426 / 12;
              while (1)
              {
                v429 = (unsigned int *)(v518 + 12 * v427);
                if (v388[*v429] < 1 || v388[v429[1]] < 1 || v388[v429[2]] < 1)
                  goto LABEL_519;
                if (v420)
                {
                  *((_BYTE *)v523 + v425) = *((_BYTE *)v523 + v427);
                  v430 = v425;
                  if (!v422)
                    goto LABEL_525;
                }
                else
                {
                  v430 = v425;
                  if (!v422)
                  {
LABEL_525:
                    ++v425;
                    if (v427 != v430)
                      goto LABEL_529;
                    goto LABEL_519;
                  }
                }
                *((_BYTE *)v526 + v430) = *((_BYTE *)v526 + v427);
                ++v425;
                if (v427 != v430)
                {
LABEL_529:
                  v431 = v518 + 12 * v427;
                  v432 = *(_QWORD *)v431;
                  v433 = v518 + 12 * v430;
                  *(_DWORD *)(v433 + 8) = *(_DWORD *)(v431 + 8);
                  *(_QWORD *)v433 = v432;
                }
LABEL_519:
                if (v428 == ++v427)
                {
                  v424 = v518;
                  v434 = v519;
                  v423 = v518;
                  goto LABEL_532;
                }
              }
            }
            v434 = v424;
LABEL_532:
            v435 = v425;
            v436 = 0xAAAAAAAAAAAAAAABLL * ((v434 - v424) >> 2);
            if (v435 <= v436)
            {
              if (v435 < v436)
                v519 = v423 + 12 * v435;
            }
            else
            {
              sub_22317F10C((uint64_t)&v518, v435 - v436);
            }
            if (v420)
            {
              if (v435 <= (_BYTE *)__dst - (_BYTE *)v523)
              {
                if (v435 < (_BYTE *)__dst - (_BYTE *)v523)
                  __dst = (char *)v523 + v435;
              }
              else
              {
                sub_22317F2E8((uint64_t)&v523, v435 - ((_BYTE *)__dst - (_BYTE *)v523));
              }
            }
            if (v422)
            {
              if (v435 <= (_BYTE *)v527 - (_BYTE *)v526)
              {
                if (v435 < (_BYTE *)v527 - (_BYTE *)v526)
                  v527 = (char *)v526 + v435;
              }
              else
              {
                sub_22317F2E8((uint64_t)&v526, v435 - ((_BYTE *)v527 - (_BYTE *)v526));
              }
            }
          }
LABEL_546:
          operator delete(v388);
          operator delete(v387);
          operator delete(v386);
          v9 = a1;
          v7 = v488;
          v10 = v489;
        }
      }
LABEL_547:
      v438.i64[0] = v518;
      v437.i64[0] = v519;
      v438.i64[1] = (uint64_t)v506;
      v437.i64[1] = (uint64_t)v507;
      v439 = (int64x2_t)vshrq_n_u64((uint64x2_t)vsubq_s64(v437, v438), 2uLL);
      v439.i64[0] = (-1431655765 * v439.i32[0]);
      v439.i64[1] = (-1431655765 * v439.i32[2]);
      v10[19] = vadd_s32(v10[19], vmovn_s64(v439));
      sub_223CD920C((const void **)&v506, (uint64_t *)&v518, &v516);
      v517 = 1;
      if ((*v486 & 1) != 0)
      {
        v441 = v523;
        v442 = (char *)__dst;
        if (v523 != __dst)
        {
          v443 = (unsigned __int8 *)v523;
          while (1)
          {
            v444 = *v443;
            if (*(_QWORD *)&v9[6] <= v444)
              sub_2236C5448();
            if (((*(_QWORD *)(*(_QWORD *)&v9[5] + ((v444 >> 3) & 0x18)) >> v444) & 1) != 0)
              break;
            if (++v443 == __dst)
              goto LABEL_600;
          }
          v446 = v518;
          v445 = v519;
          if (v518 != v519)
          {
            if (v525 != 2)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 54, (uint64_t)"mesh.semantics_type == kmesh::TriMeshMetadataType::PerFace", 58, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_627;
              }
              v446 = v518;
              v445 = v519;
              v442 = (char *)__dst;
              v441 = v523;
              v9 = a1;
              v10 = v489;
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v445 - v446) >> 2) != v442 - v441)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 55, (uint64_t)"mesh.faces.size() == mesh.semantics.size()", 42, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_627;
              }
              v446 = v518;
              v445 = v519;
              v9 = a1;
              v10 = v489;
            }
            v447 = v526 != v527 && v528 == 2;
            v448 = v447;
            if (v447)
            {
              v449 = 0xAAAAAAAAAAAAAAABLL * ((v445 - v446) >> 2);
              if ((_BYTE *)__dst - (_BYTE *)v523 != v449)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 60, (uint64_t)"mesh.semantics.size() == mesh.faces.size()", 42, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
                {
LABEL_627:
                  abort();
                }
                v446 = v518;
                v445 = v519;
                v449 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v519 - v518) >> 2);
                v9 = a1;
                v10 = v489;
              }
              if (v445 != v446)
              {
                v450 = 0;
                v451 = 0;
                v452 = 0;
                do
                {
                  v453 = v523;
                  v454 = *((unsigned __int8 *)v523 + v452);
                  if (((*(_QWORD *)(*(_QWORD *)&v9[5] + ((v454 >> 3) & 0x18)) >> v454) & 1) == 0)
                  {
                    if (v452 != v451)
                    {
                      v455 = v518 + 12 * v451;
                      v456 = *(_QWORD *)(v518 + v450);
                      *(_DWORD *)(v455 + 8) = *(_DWORD *)(v518 + v450 + 8);
                      *(_QWORD *)v455 = v456;
                      v453 = v523;
                      LOBYTE(v454) = *((_BYTE *)v523 + v452);
                    }
                    v453[v451] = v454;
                    *((_BYTE *)v526 + v451++) = *((_BYTE *)v526 + v452);
                  }
                  ++v452;
                  v450 += 12;
                }
                while (v449 != v452);
                goto LABEL_587;
              }
            }
            else
            {
              v457 = v445 - v446;
              if (v445 != v446)
              {
                v458 = 0;
                v451 = 0;
                v459 = 0;
                v460 = v457 / 12;
                do
                {
                  v461 = v523;
                  v462 = *((unsigned __int8 *)v523 + v459);
                  if (((*(_QWORD *)(*(_QWORD *)&v9[5] + ((v462 >> 3) & 0x18)) >> v462) & 1) == 0)
                  {
                    if (v459 != v451)
                    {
                      v463 = v518 + 12 * v451;
                      v464 = *(_QWORD *)(v518 + v458);
                      *(_DWORD *)(v463 + 8) = *(_DWORD *)(v518 + v458 + 8);
                      *(_QWORD *)v463 = v464;
                      v461 = v523;
                      LOBYTE(v462) = *((_BYTE *)v523 + v459);
                    }
                    v461[v451++] = v462;
                  }
                  ++v459;
                  v458 += 12;
                }
                while (v460 != v459);
                goto LABEL_587;
              }
            }
            v451 = 0;
LABEL_587:
            v465 = v451;
            v466 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v519 - v518) >> 2);
            if (v451 <= v466)
            {
              if (v451 < v466)
                v519 = v518 + 12 * v451;
            }
            else
            {
              sub_22317F10C((uint64_t)&v518, v451 - v466);
            }
            if (v465 <= (_BYTE *)__dst - (_BYTE *)v523)
            {
              if (v465 < (_BYTE *)__dst - (_BYTE *)v523)
                __dst = (char *)v523 + v465;
            }
            else
            {
              sub_22317F2E8((uint64_t)&v523, v465 - ((_BYTE *)__dst - (_BYTE *)v523));
            }
            if ((v448 & 1) != 0)
            {
              if (v465 <= (_BYTE *)v527 - (_BYTE *)v526)
              {
                if (v465 < (_BYTE *)v527 - (_BYTE *)v526)
                  v527 = (char *)v526 + v465;
              }
              else
              {
                sub_22317F2E8((uint64_t)&v526, v465 - ((_BYTE *)v527 - (_BYTE *)v526));
              }
            }
          }
        }
      }
LABEL_600:
      v467 = *((_DWORD *)v7 + 9);
      v468 = *(float *)&v9[2].i32[1];
      v440.i64[0] = *(_QWORD *)((char *)v7 + 28);
      v469 = vadd_s32(*(int32x2_t *)v440.f32, (int32x2_t)0x4000000040);
      *(float32x2_t *)v440.f32 = vcvt_f32_s32(*(int32x2_t *)v440.f32);
      v440.f32[2] = (float)v467;
      v470 = vmulq_n_f32(v440, v468);
      *(float32x2_t *)v440.f32 = vcvt_f32_s32(v469);
      v440.f32[2] = (float)(v467 + 64);
      v471 = vmulq_n_f32(v440, v468);
      v536 = v470.i32[2];
      v535 = v470.i64[0];
      v538 = v471.i32[2];
      v537 = v471.i64[0];
      if (v539)
      {
        if (v9[3].i32[0] == 2)
          goto LABEL_604;
      }
      else
      {
        v539 = 1;
        if (v9[3].i32[0] == 2)
        {
LABEL_604:
          if (v534 != 2)
            sub_223CE8414((uint64_t)&v506);
        }
      }
      v472 = sub_223995A9C(a7, v11, (uint64_t)v11, (uint64_t)&v506);
      if (!v473)
        sub_2237C2E74(v472 + 4, (uint64_t)&v506);
      sub_22316F8F4((uint64_t *)&v506);
      sub_223198030((uint64_t)&v540, v541[0]);
      v474 = (_QWORD *)v7[1];
      if (v474)
      {
        do
        {
          v475 = v474;
          v474 = (_QWORD *)*v474;
        }
        while (v474);
      }
      else
      {
        do
        {
          v475 = (_QWORD *)v7[2];
          _ZF = *v475 == (_QWORD)v7;
          v7 = v475;
        }
        while (!_ZF);
      }
      v7 = v475;
      if (v475 == v480)
        return;
    }
    while (1)
    {
      v196 = *((unsigned int *)v195 + 7);
      if (v8[13] <= v196)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
        v197 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v197 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v198 = qword_255795648;
          for (n = qword_255795650; v198 != n; v198 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v198)(*(_QWORD *)(v198 + 8), "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
        }
        v200 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v200 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_627;
        qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
      }
      if (*(_BYTE *)(*(_QWORD *)(v8[9] + 8 * ((v8[12] + v196) / 0x1F)) + 132 * ((v8[12] + v196) % 0x1F) + 20))
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
        v201 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v202 = qword_255795648;
          for (ii = qword_255795650; v202 != ii; v202 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v202)(*(_QWORD *)(v202 + 8), "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
        }
        v204 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_627;
        qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
      }
      v205 = v8[29] + v196;
      v491 = *(_QWORD *)(v8[26] + ((v205 >> 1) & 0x7FFFFFFFFFFFFFF8));
      if (v8[13] <= v196)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 667, (uint64_t)"index < metadata_blocks_.size()", 31, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
        v206 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v206 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v207 = qword_255795648;
          for (jj = qword_255795650; v207 != jj; v207 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v207)(*(_QWORD *)(v207 + 8), "index < metadata_blocks_.size()", 31, "Out of range", 12);
        }
        v209 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v209 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_627;
        qword_255795660(*(_QWORD *)algn_255795668, "index < metadata_blocks_.size()", 31, "Out of range", 12);
      }
      v210 = v8[12] + v196;
      v211 = *(_QWORD *)(v8[9] + 8 * (v210 / 0x1F));
      v212 = v210 % 0x1F;
      if (*(_BYTE *)(v211 + 132 * v212 + 20))
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 668, (uint64_t)"!metadata_blocks_[index].IsErased()", 35, (uint64_t)"Cannot get an erased block", 26, (void (*)(void **))sub_22457406C);
        v213 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v213 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v214 = qword_255795648;
          for (kk = qword_255795650; v214 != kk; v214 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v214)(*(_QWORD *)(v214 + 8), "!metadata_blocks_[index].IsErased()", 35, "Cannot get an erased block", 26);
        }
        v216 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v216 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_627;
        qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[index].IsErased()", 35, "Cannot get an erased block", 26);
        v217 = v8[12] + v196;
        v212 = v217 % 0x1F;
        v211 = *(_QWORD *)(v8[9] + 8 * (v217 / 0x1F));
      }
      v487 = v205 & 0xF;
      v218 = v491 + 248 * (v205 & 0xF);
      v219 = *(unsigned __int16 **)(v218 + 160);
      v220 = *(unsigned __int16 **)(v218 + 168);
      if (v219 != v220)
      {
        v221 = 0;
        v222 = (int32x2_t *)(v211 + 132 * v212);
        v223 = vsub_s32(*v222, *(int32x2_t *)((char *)v488 + 28));
        v501 = v222[1].i32[0] - *((_DWORD *)v488 + 9);
        v224 = (_QWORD *)(v491 + 248 * (v205 & 0xF));
        v496 = v224 + 8;
        v498 = v224 + 5;
        v494 = v224 + 17;
        while (1)
        {
          while (1)
          {
            v227 = (int32x2_t *)&v503[12 * *v219];
            v542 = (_QWORD **)vadd_s32(v223, *v227);
            LODWORD(v543) = v501 + v227[1].i32[0];
            v228 = v219[1];
            v229 = *((_DWORD *)&v542 + v228);
            v230 = (char *)&unk_22465CD38 + 4 * v228;
            v231 = *((unsigned int *)v230 + 2);
            v232 = *((_DWORD *)&v542 + *((unsigned int *)v230 + 1));
            v233 = *((_DWORD *)&v542 + v231);
            if ((v232 & 7) != 0)
              break;
            if (v229 != 64 && v232 != 64 && v233 != 64)
            {
              v235 = v232 << 9;
              v234 = v233 << 6;
              v236 = v489;
              goto LABEL_292;
            }
LABEL_279:
            v238 = v506;
            v237 = v507;
            v239 = (v507 - v506) / 12;
            v505->i32[v221] = v239;
            v240 = *v498 + 12 * v221;
            if ((unint64_t)v237 >= v508)
            {
              v243 = v239 + 1;
              if ((unint64_t)(v239 + 1) > 0x1555555555555555)
                goto LABEL_619;
              v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v508 - (_QWORD)v238) >> 2);
              if (2 * v244 > v243)
                v243 = 2 * v244;
              if (v244 >= 0xAAAAAAAAAAAAAAALL)
                v243 = 0x1555555555555555;
              if (v243)
              {
                LODWORD(v548[0]) = v243;
                if (v510 == -1)
                  goto LABEL_615;
                v545 = v548;
                v245 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E618[v510])(&v545, v509);
                v11 = v504;
              }
              else
              {
                v245 = 0;
                v246 = 0;
              }
              v250 = (char *)(v245 + 12 * v239);
              v251 = *(_QWORD *)v240;
              *((_DWORD *)v250 + 2) = *(_DWORD *)(v240 + 8);
              *(_QWORD *)v250 = v251;
              v253 = v506;
              v252 = v507;
              v254 = v250;
              if (v507 != v506)
              {
                do
                {
                  v255 = *(_QWORD *)(v252 - 12);
                  v252 -= 12;
                  v256 = *((_DWORD *)v252 + 2);
                  *(_QWORD *)(v254 - 12) = v255;
                  v254 -= 12;
                  *((_DWORD *)v254 + 2) = v256;
                }
                while (v252 != v253);
                v252 = v506;
              }
              v242 = v250 + 12;
              v506 = v254;
              v507 = v250 + 12;
              v257 = v508;
              v508 = v245 + 12 * v246;
              if (v252)
              {
                v545 = v252;
                LODWORD(v546) = -1431655765 * ((v257 - (unint64_t)v252) >> 2);
                if (v510 == -1)
                  sub_22316DD70();
                v548[0] = &v545;
                ((void (*)(_QWORD *, _BYTE *))off_24EC5E608[v510])(v548, v509);
              }
            }
            else
            {
              v241 = *(_QWORD *)v240;
              *((_DWORD *)v237 + 2) = *(_DWORD *)(v240 + 8);
              *(_QWORD *)v237 = v241;
              v242 = v237 + 12;
            }
            v507 = v242;
            v258 = *v496;
            v259 = v530;
            if ((unint64_t)v530 < v531)
            {
              *(_DWORD *)v530 = *(_DWORD *)(v258 + 4 * v221);
              v260 = (uint64_t)(v259 + 4);
              goto LABEL_327;
            }
            v261 = v529;
            v262 = (char *)(v530 - v529);
            v263 = (v530 - v529) >> 2;
            v264 = v263 + 1;
            if ((unint64_t)(v263 + 1) >> 62)
              goto LABEL_618;
            v265 = v531 - (_QWORD)v529;
            if ((uint64_t)(v531 - (_QWORD)v529) >> 1 > v264)
              v264 = v265 >> 1;
            _CF = (unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL;
            v266 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF)
              v266 = v264;
            if (v266)
            {
              LODWORD(v548[0]) = v266;
              if (v533 == -1)
                goto LABEL_615;
              v545 = v548;
              v267 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E628[v533])(&v545, v532);
              v259 = v530;
              v261 = v529;
              v269 = (char *)(v267 + 4 * v263);
              *(_DWORD *)v269 = *(_DWORD *)(v258 + 4 * v221);
              v260 = (uint64_t)(v269 + 4);
              v270 = v259 - v261;
              if (v259 == v261)
              {
LABEL_315:
                v11 = v504;
                goto LABEL_324;
              }
            }
            else
            {
              v267 = 0;
              v268 = 0;
              v269 = (char *)(4 * v263);
              *(_DWORD *)(4 * v263) = *(_DWORD *)(v258 + 4 * v221);
              v260 = 4 * v263 + 4;
              v270 = v259 - v261;
              if (v259 == v261)
                goto LABEL_315;
            }
            v271 = v270 - 4;
            v11 = v504;
            if (v271 < 0x2C)
            {
              v272 = v259;
              goto LABEL_323;
            }
            if ((unint64_t)(&v259[-v267] - v262) < 0x20)
            {
              v272 = v259;
              do
              {
LABEL_323:
                v285 = *((_DWORD *)v272 - 1);
                v272 -= 4;
                *((_DWORD *)v269 - 1) = v285;
                v269 -= 4;
              }
              while (v272 != v261);
              goto LABEL_324;
            }
            v279 = (v271 >> 2) + 1;
            v280 = 4 * (v279 & 0x7FFFFFFFFFFFFFF8);
            v272 = &v259[-v280];
            v269 -= v280;
            v281 = (_OWORD *)(v267 + 4 * v263 - 16);
            v282 = v259 - 16;
            v283 = v279 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v284 = *(_OWORD *)v282;
              *(v281 - 1) = *((_OWORD *)v282 - 1);
              *v281 = v284;
              v281 -= 2;
              v282 -= 32;
              v283 -= 8;
            }
            while (v283);
            if (v279 != (v279 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_323;
LABEL_324:
            v529 = v269;
            v530 = (char *)v260;
            v286 = v531;
            v531 = v267 + 4 * v268;
            if (v261)
            {
              v545 = v261;
              LODWORD(v546) = (v286 - (unint64_t)v261) >> 2;
              if (v533 == -1)
                sub_22316DD70();
              v548[0] = &v545;
              ((void (*)(_QWORD *, _BYTE *))off_24EC5E5F8[v533])(v548, v532);
            }
LABEL_327:
            v530 = (char *)v260;
            v287 = *v494 + 12 * v221;
            v288 = v512;
            if ((unint64_t)v512 < v513)
            {
              v225 = *(_QWORD *)v287;
              *((_DWORD *)v512 + 2) = *(_DWORD *)(v287 + 8);
              *v288 = v225;
              v226 = (char *)v288 + 12;
            }
            else
            {
              v289 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v512[-v511] >> 2);
              v290 = v289 + 1;
              if (v289 + 1 > 0x1555555555555555)
                goto LABEL_619;
              if (0x5555555555555556 * ((uint64_t)(v513 - v511) >> 2) > v290)
                v290 = 0x5555555555555556 * ((uint64_t)(v513 - v511) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v513 - v511) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v290 = 0x1555555555555555;
              if (v290)
              {
                LODWORD(v548[0]) = v290;
                if (v515 == -1)
                  goto LABEL_615;
                v545 = v548;
                v291 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E618[v515])(&v545, v514);
                v11 = v504;
              }
              else
              {
                v291 = 0;
                v292 = 0;
              }
              v293 = v291 + 12 * v289;
              v294 = *(_QWORD *)v287;
              *(_DWORD *)(v293 + 8) = *(_DWORD *)(v287 + 8);
              *(_QWORD *)v293 = v294;
              v296 = (char *)v511;
              v295 = v512;
              v297 = v293;
              if (v512 != (char *)v511)
              {
                do
                {
                  v298 = *(_QWORD *)(v295 - 12);
                  v295 -= 12;
                  v299 = *((_DWORD *)v295 + 2);
                  *(_QWORD *)(v297 - 12) = v298;
                  v297 -= 12;
                  *(_DWORD *)(v297 + 8) = v299;
                }
                while (v295 != v296);
                v295 = (char *)v511;
              }
              v226 = (char *)(v293 + 12);
              v511 = v297;
              v512 = (char *)(v293 + 12);
              v300 = v513;
              v513 = v291 + 12 * v292;
              if (v295)
              {
                v545 = v295;
                LODWORD(v546) = -1431655765 * ((v300 - (unint64_t)v295) >> 2);
                if (v515 == -1)
                  sub_22316DD70();
                v548[0] = &v545;
                ((void (*)(_QWORD *, _BYTE *))off_24EC5E608[v515])(v548, v514);
              }
            }
            v512 = v226;
            v219 += 2;
            ++v221;
            if (v219 == v220)
              goto LABEL_401;
          }
          if ((v233 & 7) != 0 || v229 == 64 || v232 == 64 || v233 == 64)
            goto LABEL_279;
          v234 = v233 << 9;
          v235 = v232 << 6;
          v236 = v492;
LABEL_292:
          v247 = (v235 + v229 + v234);
          v248 = v236[3 * v219[1]];
          v249 = *(_DWORD *)(*(_QWORD *)&v248 + 4 * v247);
          if (v249 == -1)
          {
            v274 = v506;
            v273 = v507;
            v275 = (v507 - v506) / 12;
            *(_DWORD *)(*(_QWORD *)&v248 + 4 * v247) = v275;
            v276 = *v498 + 12 * v221;
            if ((unint64_t)v273 >= v508)
            {
              v301 = v275 + 1;
              if ((unint64_t)(v275 + 1) > 0x1555555555555555)
                goto LABEL_619;
              v302 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v508 - (_QWORD)v274) >> 2);
              if (2 * v302 > v301)
                v301 = 2 * v302;
              if (v302 >= 0xAAAAAAAAAAAAAAALL)
                v301 = 0x1555555555555555;
              if (v301)
              {
                LODWORD(v548[0]) = v301;
                if (v510 == -1)
                  goto LABEL_615;
                v545 = v548;
                v303 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E618[v510])(&v545, v509);
                v11 = v504;
              }
              else
              {
                v303 = 0;
                v304 = 0;
              }
              v305 = (char *)(v303 + 12 * v275);
              v306 = *(_QWORD *)v276;
              *((_DWORD *)v305 + 2) = *(_DWORD *)(v276 + 8);
              *(_QWORD *)v305 = v306;
              v308 = v506;
              v307 = v507;
              v309 = v305;
              if (v507 != v506)
              {
                do
                {
                  v310 = *(_QWORD *)(v307 - 12);
                  v307 -= 12;
                  v311 = *((_DWORD *)v307 + 2);
                  *(_QWORD *)(v309 - 12) = v310;
                  v309 -= 12;
                  *((_DWORD *)v309 + 2) = v311;
                }
                while (v307 != v308);
                v307 = v506;
              }
              v278 = v305 + 12;
              v506 = v309;
              v507 = v305 + 12;
              v312 = v508;
              v508 = v303 + 12 * v304;
              if (v307)
              {
                v545 = v307;
                LODWORD(v546) = -1431655765 * ((v312 - (unint64_t)v307) >> 2);
                if (v510 == -1)
                  sub_22316DD70();
                v548[0] = &v545;
                ((void (*)(_QWORD *, _BYTE *))off_24EC5E608[v510])(v548, v509);
              }
            }
            else
            {
              v277 = *(_QWORD *)v276;
              *((_DWORD *)v273 + 2) = *(_DWORD *)(v276 + 8);
              *(_QWORD *)v273 = v277;
              v278 = v273 + 12;
            }
            v507 = v278;
            v313 = *v496;
            v314 = v530;
            if ((unint64_t)v530 < v531)
            {
              *(_DWORD *)v530 = *(_DWORD *)(v313 + 4 * v221);
              v315 = (uint64_t)(v314 + 4);
              goto LABEL_378;
            }
            v316 = v529;
            v317 = (char *)(v530 - v529);
            v318 = (v530 - v529) >> 2;
            v319 = v318 + 1;
            if ((unint64_t)(v318 + 1) >> 62)
LABEL_618:
              sub_22316E078();
            v320 = v531 - (_QWORD)v529;
            if ((uint64_t)(v531 - (_QWORD)v529) >> 1 > v319)
              v319 = v320 >> 1;
            _CF = (unint64_t)v320 >= 0x7FFFFFFFFFFFFFFCLL;
            v321 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF)
              v321 = v319;
            if (v321)
            {
              LODWORD(v548[0]) = v321;
              if (v533 == -1)
                goto LABEL_615;
              v545 = v548;
              v322 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E628[v533])(&v545, v532);
              v314 = v530;
              v316 = v529;
              v324 = (char *)(v322 + 4 * v318);
              *(_DWORD *)v324 = *(_DWORD *)(v313 + 4 * v221);
              v315 = (uint64_t)(v324 + 4);
              v325 = v314 - v316;
              if (v314 != v316)
              {
LABEL_368:
                v326 = v325 - 4;
                if (v326 < 0x2C || (unint64_t)(&v314[-v322] - v317) < 0x20)
                {
                  v327 = v314;
                  v11 = v504;
                  goto LABEL_371;
                }
                v346 = (v326 >> 2) + 1;
                v347 = 4 * (v346 & 0x7FFFFFFFFFFFFFF8);
                v327 = &v314[-v347];
                v324 -= v347;
                v348 = (_OWORD *)(v322 + 4 * v318 - 16);
                v349 = v314 - 16;
                v350 = v346 & 0x7FFFFFFFFFFFFFF8;
                v11 = v504;
                do
                {
                  v351 = *(_OWORD *)v349;
                  *(v348 - 1) = *((_OWORD *)v349 - 1);
                  *v348 = v351;
                  v348 -= 2;
                  v349 -= 32;
                  v350 -= 8;
                }
                while (v350);
                if (v346 != (v346 & 0x7FFFFFFFFFFFFFF8))
                {
                  do
                  {
LABEL_371:
                    v328 = *((_DWORD *)v327 - 1);
                    v327 -= 4;
                    *((_DWORD *)v324 - 1) = v328;
                    v324 -= 4;
                  }
                  while (v327 != v316);
                }
                v529 = v324;
                v530 = (char *)v315;
                v329 = v531;
                v531 = v322 + 4 * v323;
                if (v316)
                  goto LABEL_376;
                goto LABEL_378;
              }
            }
            else
            {
              v322 = 0;
              v323 = 0;
              v324 = (char *)(4 * v318);
              *(_DWORD *)(4 * v318) = *(_DWORD *)(v313 + 4 * v221);
              v315 = 4 * v318 + 4;
              v325 = v314 - v316;
              if (v314 != v316)
                goto LABEL_368;
            }
            v11 = v504;
            v529 = v324;
            v530 = (char *)v315;
            v329 = v531;
            v531 = v322 + 4 * v323;
            if (v316)
            {
LABEL_376:
              v545 = v316;
              LODWORD(v546) = (v329 - (unint64_t)v316) >> 2;
              if (v533 == -1)
                sub_22316DD70();
              v548[0] = &v545;
              ((void (*)(_QWORD *, _BYTE *))off_24EC5E5F8[v533])(v548, v532);
            }
LABEL_378:
            v530 = (char *)v315;
            v330 = *v494 + 12 * v221;
            v331 = v512;
            if ((unint64_t)v512 >= v513)
            {
              v334 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v512[-v511] >> 2);
              v335 = v334 + 1;
              if (v334 + 1 > 0x1555555555555555)
LABEL_619:
                sub_22316E078();
              if (0x5555555555555556 * ((uint64_t)(v513 - v511) >> 2) > v335)
                v335 = 0x5555555555555556 * ((uint64_t)(v513 - v511) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v513 - v511) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v335 = 0x1555555555555555;
              if (v335)
              {
                LODWORD(v548[0]) = v335;
                if (v515 == -1)
LABEL_615:
                  sub_22316DD70();
                v545 = v548;
                v336 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E618[v515])(&v545, v514);
                v11 = v504;
              }
              else
              {
                v336 = 0;
                v337 = 0;
              }
              v338 = v336 + 12 * v334;
              v339 = *(_QWORD *)v330;
              *(_DWORD *)(v338 + 8) = *(_DWORD *)(v330 + 8);
              *(_QWORD *)v338 = v339;
              v341 = (char *)v511;
              v340 = v512;
              v342 = v338;
              if (v512 != (char *)v511)
              {
                do
                {
                  v343 = *(_QWORD *)(v340 - 12);
                  v340 -= 12;
                  v344 = *((_DWORD *)v340 + 2);
                  *(_QWORD *)(v342 - 12) = v343;
                  v342 -= 12;
                  *(_DWORD *)(v342 + 8) = v344;
                }
                while (v340 != v341);
                v340 = (char *)v511;
              }
              v333 = (char *)(v338 + 12);
              v511 = v342;
              v512 = (char *)(v338 + 12);
              v345 = v513;
              v513 = v336 + 12 * v337;
              if (v340)
              {
                v545 = v340;
                LODWORD(v546) = -1431655765 * ((v345 - (unint64_t)v340) >> 2);
                if (v515 == -1)
                  sub_22316DD70();
                v548[0] = &v545;
                ((void (*)(_QWORD *, _BYTE *))off_24EC5E608[v515])(v548, v514);
              }
            }
            else
            {
              v332 = *(_QWORD *)v330;
              *((_DWORD *)v512 + 2) = *(_DWORD *)(v330 + 8);
              *v331 = v332;
              v333 = (char *)v331 + 12;
            }
            v512 = v333;
            v505->i32[v221] = *(_DWORD *)(*(_QWORD *)&v236[3 * v219[1]] + 4 * v247);
            v219 += 2;
            ++v221;
            if (v219 == v220)
              break;
          }
          else
          {
            v505->i32[v221] = v249;
            v219 += 2;
            ++v221;
            if (v219 == v220)
              break;
          }
        }
      }
LABEL_401:
      v352 = v491 + 248 * v487;
      v355 = *(unsigned __int16 **)(v352 + 16);
      v353 = (_QWORD *)(v352 + 16);
      v354 = v355;
      v356 = (unsigned __int16 *)v353[1];
      v502 = v353 + 1;
      if (v355 != v356)
        break;
LABEL_424:
      v8 = a5;
      v7 = v488;
      if ((*v486 & 1) != 0)
      {
        v372 = v491 + 248 * v487;
        v373 = *(char **)(v372 + 88);
        v374 = *(char **)(v372 + 96);
        v375 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v502 - *v353) >> 1);
        if (v374 - v373 == v375)
        {
          sub_223A2BD50((uint64_t)&v523, (char *)__dst, v373, v374, v374 - v373);
        }
        else
        {
          v376 = (char *)((_BYTE *)__dst - (_BYTE *)v523 - 0x5555555555555555 * ((uint64_t)(*v502 - *v353) >> 1));
          LOBYTE(v545) = -1;
          if ((_BYTE *)__dst - (_BYTE *)v523 >= (unint64_t)v376)
          {
            if ((_BYTE *)__dst - (_BYTE *)v523 > (unint64_t)v376)
              __dst = &v376[(_QWORD)v523];
          }
          else
          {
            sub_223A72CE0((uint64_t)&v523, v375, (const char *)&v545);
          }
        }
      }
      if ((*v486 & 0x10) != 0)
      {
        v377 = v491 + 248 * v487;
        v378 = *(char **)(v377 + 112);
        v379 = *(char **)(v377 + 120);
        v380 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v502 - *v353) >> 1);
        if (v379 - v378 == v380)
        {
          sub_223A2BD50((uint64_t)&v526, (char *)v527, v378, v379, v379 - v378);
        }
        else
        {
          v381 = (char *)((_BYTE *)v527 - (_BYTE *)v526 - 0x5555555555555555 * ((uint64_t)(*v502 - *v353) >> 1));
          LOBYTE(v545) = -1;
          if ((_BYTE *)v527 - (_BYTE *)v526 >= (unint64_t)v381)
          {
            if ((_BYTE *)v527 - (_BYTE *)v526 > (unint64_t)v381)
              v527 = &v381[(_QWORD)v526];
          }
          else
          {
            sub_223A72CE0((uint64_t)&v526, v380, (const char *)&v545);
          }
        }
      }
      v382 = (uint64_t *)v195[1];
      if (v382)
      {
        do
        {
          v383 = v382;
          v382 = (uint64_t *)*v382;
        }
        while (v382);
      }
      else
      {
        do
        {
          v383 = (uint64_t *)v195[2];
          _ZF = *v383 == (_QWORD)v195;
          v195 = v383;
        }
        while (!_ZF);
      }
      v195 = v383;
      if (v383 == (uint64_t *)v541)
        goto LABEL_228;
    }
    v357 = (_DWORD *)v519;
    while (1)
    {
      v358 = *v354;
      v359 = v354[1];
      v360 = v354[2];
      if ((unint64_t)v357 < v520)
      {
        *v357 = v505->i32[v358];
        v357[1] = v505->i32[v359];
        v357[2] = v505->i32[v360];
        v357 += 3;
        v11 = v504;
      }
      else
      {
        v361 = v518;
        v362 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v357 - v518) >> 2);
        v363 = v362 + 1;
        if (v362 + 1 > 0x1555555555555555)
LABEL_616:
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(v520 - v518) >> 2) > v363)
          v363 = 0x5555555555555556 * ((uint64_t)(v520 - v518) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v520 - v518) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v364 = 0x1555555555555555;
        else
          v364 = v363;
        if (v364)
        {
          LODWORD(v542) = v364;
          if (v522 == -1)
            goto LABEL_615;
          v545 = &v542;
          v365 = ((uint64_t (*)(_QWORD **, _BYTE *))off_24EC5E5B8[v522])(&v545, v521);
          v361 = v518;
          v357 = (_DWORD *)v519;
        }
        else
        {
          v365 = 0;
          v366 = 0;
        }
        v367 = (_DWORD *)(v365 + 12 * v362);
        *v367 = v505->i32[v358];
        v367[1] = v505->i32[v359];
        v367[2] = v505->i32[v360];
        v368 = (uint64_t)v367;
        if (v357 == (_DWORD *)v361)
        {
          v11 = v504;
          v357 = v367 + 3;
          v518 = v365 + 12 * v362;
          v519 = (uint64_t)(v367 + 3);
          v371 = v520;
          v520 = v365 + 12 * v366;
          if (v361)
            goto LABEL_422;
        }
        else
        {
          v11 = v504;
          do
          {
            v369 = *(_QWORD *)(v357 - 3);
            v357 -= 3;
            v370 = v357[2];
            *(_QWORD *)(v368 - 12) = v369;
            v368 -= 12;
            *(_DWORD *)(v368 + 8) = v370;
          }
          while (v357 != (_DWORD *)v361);
          v361 = v518;
          v357 = v367 + 3;
          v518 = v368;
          v519 = (uint64_t)(v367 + 3);
          v371 = v520;
          v520 = v365 + 12 * v366;
          if (v361)
          {
LABEL_422:
            v545 = (_QWORD *)v361;
            LODWORD(v546) = -1431655765 * ((v371 - v361) >> 2);
            if (v522 == -1)
              sub_22316DD70();
            v542 = &v545;
            ((void (*)(_QWORD ***, _BYTE *))off_24EC5E5C8[v522])(&v542, v521);
          }
        }
      }
      v519 = (uint64_t)v357;
      v354 += 3;
      if (v354 == v356)
        goto LABEL_424;
    }
  }
}

void sub_223A6F94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;

  operator delete(v44);
  operator delete(v46);
  operator delete(v45);
  sub_22316F8F4(&a44);
  sub_223198030(v47 - 232, *(_QWORD **)(v47 - 224));
  _Unwind_Resume(a1);
}

void sub_223A6FA7C(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4, unsigned __int8 a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 **v16;
  void **v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  char v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  void **v43;
  float v44;
  void *v45;
  unsigned __int16 *v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  void *v52;
  char *v53;
  uint64_t *v54;
  int32x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  unsigned int v63;
  char v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  size_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  float32x4_t *v75;
  float32x4_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char v83;
  char *v84;
  _BYTE *v85;
  _BYTE *v86;
  _BYTE *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  size_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  float32x4_t *v96;
  float32x4_t *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  float *v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  float *v112;
  uint64_t v113;
  float32x4_t v114;
  unsigned __int16 **v115;
  float32x4_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;

  v9 = a2;
  if (a3[11] <= (unint64_t)a2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_135;
  }
  if (*(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v9) / 0x1F)) + 132 * ((a3[10] + v9) % 0x1F) + 20)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_135;
  }
  v10 = a3[21] + v9;
  v11 = *(_QWORD *)(a3[18] + ((v10 >> 1) & 0x7FFFFFFFFFFFFFF8));
  if (a3[11] <= v9
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_135;
  }
  v122 = a1;
  v118 = a4;
  if (*(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v9) / 0x1F)) + 132 * ((a3[10] + v9) % 0x1F) + 20))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_135;
    }
  }
  v12 = v10 & 0xF;
  v127 = v11 + 2936 * v12;
  v13 = a3[27] + v9;
  v14 = *(_QWORD *)(a3[24] + ((v13 >> 1) & 0x7FFFFFFFFFFFFFF8));
  v15 = v14 + 248 * (v13 & 0xF);
  *(_DWORD *)(v15 + 8) = -1;
  v16 = (unsigned __int16 **)(v15 + 16);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v15 + 16);
  v115 = (unsigned __int16 **)(v15 + 24);
  v125 = (_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 48) = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v15 + 96) = *(_QWORD *)(v15 + 88);
  v126 = (_QWORD *)(v15 + 96);
  *(_QWORD *)(v15 + 120) = *(_QWORD *)(v15 + 112);
  v128 = (_QWORD *)(v15 + 120);
  *(_QWORD *)(v15 + 168) = *(_QWORD *)(v15 + 160);
  *(_QWORD *)(v15 + 192) = *(_QWORD *)(v15 + 184);
  v17 = (void **)(v15 + 208);
  v19 = (_QWORD *)(v15 + 232);
  v18 = *(_QWORD *)(v15 + 232);
  v120 = v14;
  v117 = v13 & 0xF;
  if (v18 < 0x80)
  {
    if (v18)
    {
      v21 = v14 + 248 * (v13 & 0xF);
      *(_QWORD *)(v21 + 224) = 0;
      v22 = *v17;
      memset(v22, 128, v18 + 8);
      *((_BYTE *)v22 + v18) = -1;
      v23 = 6;
      if (*v19 != 7)
        v23 = *v19 - (*v19 >> 3);
      *(_QWORD *)(v21 + 240) = v23 - *(_QWORD *)(v21 + 224);
      v16 = (unsigned __int16 **)(v15 + 16);
    }
  }
  else
  {
    v20 = v14 + 248 * (v13 & 0xF);
    operator delete(*v17);
    *v17 = &unk_2245C5160;
    *(_OWORD *)(v20 + 216) = 0u;
    *(_OWORD *)(v20 + 232) = 0u;
  }
  if (*(_BYTE *)(v122 + 38))
  {
    sub_223A7CBA8((_BOOL8)a3, 0, v127);
    if (!*(_WORD *)(v11 + 2936 * v12 + 2928))
      return;
  }
  else
  {
    sub_223A75350((uint64_t)a3, v127);
    sub_223A75504((unint64_t)a3, v127);
    sub_223A756B0((unint64_t)a3, v127);
    sub_223A75858((_BOOL8)a3, v127);
    sub_223A759DC((_BOOL8)a3, v127);
    sub_223A75B6C((_BOOL8)a3, v127);
    sub_223A75D00((_BOOL8)a3, v127);
    if (!*(_WORD *)(v11 + 2936 * v12 + 2928))
      return;
  }
  if (*(_WORD *)(v11 + 2936 * v12 + 2930))
  {
    v32 = *(_BYTE *)(v122 + 17);
    if ((v32 & 1) != 0)
    {
      if (a3[11] <= v9
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v9) / 0x1F)) + 132 * ((a3[10] + v9) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_135;
      }
      v105 = *(_QWORD *)(a3[30] + (((a3[33] + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 1016 * ((*((_DWORD *)a3 + 66) + (_DWORD)v9) & 0xF);
      sub_223A768F8((_BOOL8)a3, v105);
      sub_223A76A68((_BOOL8)a3, v105);
      sub_223A76BD0((_BOOL8)a3, v105);
      sub_223A76D34((_BOOL8)a3, v105);
      sub_223A76E78((_BOOL8)a3, v105);
      sub_223A76FC8((_BOOL8)a3, v105);
      v124 = v105;
      sub_223A7711C((_BOOL8)a3, v105);
      v32 = *(_BYTE *)(v122 + 17);
      if ((v32 & 4) == 0)
      {
LABEL_22:
        v113 = 0;
        if ((v32 & 0x10) == 0)
          goto LABEL_23;
        goto LABEL_113;
      }
    }
    else
    {
      v124 = 0;
      if ((*(_BYTE *)(v122 + 17) & 4) == 0)
        goto LABEL_22;
    }
    if (a3[11] <= v9
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v9) / 0x1F)) + 132 * ((a3[10] + v9) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_135;
    }
    v106 = *(_QWORD *)(a3[36] + (((a3[39] + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 2928 * ((*((_DWORD *)a3 + 78) + (_DWORD)v9) & 0xF);
    sub_223A75E58((uint64_t)a3, v106);
    sub_223A76000((unint64_t)a3, v106);
    sub_223A7619C((unint64_t)a3, v106);
    sub_223A76334((_BOOL8)a3, v106);
    sub_223A764AC((_BOOL8)a3, v106);
    sub_223A76630((_BOOL8)a3, v106);
    sub_223A767B8((_BOOL8)a3, v106);
    v113 = v106;
    if ((*(_BYTE *)(v122 + 17) & 0x10) == 0)
    {
LABEL_23:
      v33 = 0;
      v34 = (_DWORD *)(v122 + 83488);
      v35 = (void **)(v15 + 88);
      if (*(_BYTE *)(v122 + 38))
      {
LABEL_24:
        v111 = v34;
        v112 = (float *)(v122 + 64);
        sub_223A23DCC(v122 + 64, (__int16 *)v127, (_QWORD *)v15, *(float *)(v122 + 20), v25, v26);
        v43 = (void **)(v15 + 112);
        if (!(v124 | v33))
          goto LABEL_124;
        if (v124 && v33)
        {
          v44 = *v112;
          v45 = *v35;
          *v126 = *v35;
          v46 = *v16;
          v119 = *v115;
          v47 = (char *)*v115 - (char *)*v16;
          v48 = 0xAAAAAAAAAAAAAAABLL * (v47 >> 1);
          v49 = v120;
          v50 = v117;
          v123 = (_QWORD *)(v120 + 248 * v117 + 104);
          if (*v123 - (_QWORD)v45 < v48)
          {
            if (v47 < 0)
              sub_22316E078();
            v51 = (char *)operator new(0xAAAAAAAAAAAAAAABLL * (v119 - v46));
            *v35 = v51;
            *v126 = v51;
            *v123 = &v51[0xAAAAAAAAAAAAAAABLL * (v47 >> 1)];
            v43 = (void **)(v15 + 112);
            v49 = v120;
            v50 = v117;
            if (v45)
            {
              operator delete(v45);
              v50 = v117;
              v49 = v120;
              v43 = (void **)(v15 + 112);
              v46 = *v16;
              v119 = *v115;
              v47 = (char *)*v115 - (char *)*v16;
              v48 = 0xAAAAAAAAAAAAAAABLL * (v47 >> 1);
            }
          }
          v52 = *v43;
          *v128 = *v43;
          v121 = (_QWORD *)(v49 + 248 * v50 + 128);
          if (*v121 - (_QWORD)v52 < v48)
          {
            if (v47 < 0)
              sub_22316E078();
            v53 = (char *)operator new(v48);
            v43 = (void **)(v15 + 112);
            *(_QWORD *)(v15 + 112) = v53;
            *v128 = v53;
            *v121 = &v53[v48];
            if (v52)
            {
              operator delete(v52);
              v43 = (void **)(v15 + 112);
              v46 = *v16;
              v119 = *v115;
            }
          }
          v54 = (uint64_t *)(v15 + 96);
          if (v46 != v119)
          {
            v55 = *(int32x2_t **)(v127 + 2920);
            *(float32x2_t *)v36.f32 = vcvt_f32_s32(*v55);
            v36.f32[2] = (float)v55[1].i32[0];
            v38 = vmulq_n_f32(v36, *v112);
            v36 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
            v114 = v36;
            v116 = v38;
            while (1)
            {
              v56 = v33;
              v57 = *v125 + 12 * *v46;
              v58 = *v125 + 12 * v46[1];
              v59 = *v125 + 12 * v46[2];
              v36.i64[0] = *(_QWORD *)v57;
              v36.i32[2] = *(_DWORD *)(v57 + 8);
              v37.i64[0] = *(_QWORD *)v58;
              v37.i32[2] = *(_DWORD *)(v58 + 8);
              v60 = vaddq_f32(v36, v37);
              v37.i64[0] = *(_QWORD *)v59;
              v37.i32[2] = *(_DWORD *)(v59 + 8);
              v61 = vmulq_n_f32(vsubq_f32(vmulq_f32(vaddq_f32(v60, v37), v114), v116), 1.0 / (float)(v44 + v44));
              v37.i64[0] = 0x3F0000003F000000;
              v37.i64[1] = 0x3F0000003F000000;
              v62 = (int8x16_t)vaddq_f32(v61, v37);
              LODWORD(v57) = (int)*(float *)v62.i32;
              v36 = (float32x4_t)vextq_s8(v62, v62, 4uLL);
              *(int32x2_t *)v36.f32 = vmul_s32(vcvt_s32_f32(*(float32x2_t *)v36.f32), (int32x2_t)0x1900000005);
              v63 = v36.i32[0] + v57 + v36.i32[1];
              v64 = *(_WORD *)(v124 + 8 * v63) ? HIBYTE(*(_WORD *)(v124 + 8 * v63)) : -1;
              v65 = (_BYTE *)*v54;
              if ((unint64_t)*v54 >= *v123)
                break;
              *v65 = v64;
              v66 = (uint64_t)(v65 + 1);
              v33 = v56;
LABEL_72:
              *v54 = v66;
              v85 = (_BYTE *)(v33 + 28 * v63 + 27);
              v86 = (_BYTE *)*v128;
              if (*v128 < *v121)
              {
                *v86 = *v85;
                *v128 = v86 + 1;
                v46 += 3;
                if (v46 == v119)
                  goto LABEL_124;
              }
              else
              {
                v87 = *v43;
                v88 = v86 - (_BYTE *)*v43;
                v89 = v88 + 1;
                if ((uint64_t)(v88 + 1) < 0)
                  sub_22316E078();
                v90 = *v121 - (_QWORD)v87;
                if (2 * v90 > v89)
                  v89 = 2 * v90;
                if (v90 >= 0x3FFFFFFFFFFFFFFFLL)
                  v91 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v91 = v89;
                if (v91)
                {
                  v92 = (char *)operator new(v91);
                  v43 = (void **)(v15 + 112);
                  v93 = &v92[v88];
                  v92[v88] = *v85;
                  v94 = (uint64_t)&v92[v88 + 1];
                  if (v86 == v87)
                    goto LABEL_99;
LABEL_83:
                  if (v88 >= 8 && (unint64_t)(v87 - v92) >= 0x20)
                  {
                    if (v88 >= 0x20)
                    {
                      v95 = v88 & 0xFFFFFFFFFFFFFFE0;
                      v96 = (float32x4_t *)&v92[v88 - 16];
                      v97 = (float32x4_t *)(v86 - 16);
                      v98 = v88 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        v37 = v97[-1];
                        v36 = *v97;
                        v96[-1] = v37;
                        *v96 = v36;
                        v96 -= 2;
                        v97 -= 2;
                        v98 -= 32;
                      }
                      while (v98);
                      if (v88 == v95)
                        goto LABEL_98;
                      if ((v88 & 0x18) != 0)
                        goto LABEL_91;
                      v93 -= v95;
                      v86 -= v95;
                    }
                    else
                    {
                      v95 = 0;
LABEL_91:
                      v93 -= v88 & 0xFFFFFFFFFFFFFFF8;
                      v99 = (uint64_t *)&v92[&v86[-v95] - v87 - 8];
                      v100 = (uint64_t *)&v86[-v95 - 8];
                      v101 = v95 - (v88 & 0xFFFFFFFFFFFFFFF8);
                      do
                      {
                        v102 = *v100--;
                        v36.i64[0] = v102;
                        *v99-- = v102;
                        v101 += 8;
                      }
                      while (v101);
                      v86 -= v88 & 0xFFFFFFFFFFFFFFF8;
                      if (v88 == (v88 & 0xFFFFFFFFFFFFFFF8))
                      {
LABEL_98:
                        v86 = *v43;
                        v93 = v92;
                        goto LABEL_99;
                      }
                    }
                  }
                  v103 = v93 - 1;
                  do
                  {
                    v104 = *--v86;
                    *v103-- = v104;
                  }
                  while (v86 != v87);
                  goto LABEL_98;
                }
                v92 = 0;
                v93 = (char *)(v86 - (_BYTE *)*v43);
                *(_BYTE *)v88 = *v85;
                v94 = v88 + 1;
                if (v86 != v87)
                  goto LABEL_83;
LABEL_99:
                *v43 = v93;
                *v128 = v94;
                *v121 = &v92[v91];
                if (v86)
                {
                  operator delete(v86);
                  v43 = (void **)(v15 + 112);
                }
                v54 = (uint64_t *)(v15 + 96);
                *v128 = v94;
                v46 += 3;
                if (v46 == v119)
                  goto LABEL_124;
              }
            }
            v67 = *v35;
            v68 = v65 - (_BYTE *)*v35;
            v69 = v68 + 1;
            if ((uint64_t)(v68 + 1) < 0)
              sub_22316E078();
            v70 = *v123 - (_QWORD)v67;
            if (2 * v70 > v69)
              v69 = 2 * v70;
            if (v70 >= 0x3FFFFFFFFFFFFFFFLL)
              v71 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              v72 = (char *)operator new(v71);
              v73 = &v72[v68];
              v72[v68] = v64;
              v66 = (uint64_t)&v72[v68 + 1];
              if (v65 != v67)
              {
LABEL_51:
                v33 = v56;
                if (v68 >= 8 && (unint64_t)(v67 - v72) >= 0x20)
                {
                  if (v68 < 0x20)
                  {
                    v74 = 0;
                    goto LABEL_61;
                  }
                  v74 = v68 & 0xFFFFFFFFFFFFFFE0;
                  v75 = (float32x4_t *)&v72[v68 - 16];
                  v76 = (float32x4_t *)(v65 - 16);
                  v77 = v68 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v37 = v76[-1];
                    v36 = *v76;
                    v75[-1] = v37;
                    *v75 = v36;
                    v75 -= 2;
                    v76 -= 2;
                    v77 -= 32;
                  }
                  while (v77);
                  if (v68 == v74)
                    goto LABEL_68;
                  if ((v68 & 0x18) != 0)
                  {
LABEL_61:
                    v73 -= v68 & 0xFFFFFFFFFFFFFFF8;
                    v78 = (uint64_t *)&v72[&v65[-v74] - v67 - 8];
                    v79 = (uint64_t *)&v65[-v74 - 8];
                    v80 = v74 - (v68 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v81 = *v79--;
                      v36.i64[0] = v81;
                      *v78-- = v81;
                      v80 += 8;
                    }
                    while (v80);
                    v65 -= v68 & 0xFFFFFFFFFFFFFFF8;
                    if (v68 == (v68 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_68;
                    goto LABEL_66;
                  }
                  v73 -= v74;
                  v65 -= v74;
                }
LABEL_66:
                v82 = v73 - 1;
                do
                {
                  v83 = *--v65;
                  *v82-- = v83;
                }
                while (v65 != v67);
LABEL_68:
                v35 = (void **)(v15 + 88);
                v65 = *(_BYTE **)(v15 + 88);
                v73 = v72;
                goto LABEL_69;
              }
            }
            else
            {
              v72 = 0;
              v73 = (char *)v68;
              *(_BYTE *)v68 = v64;
              v66 = v68 + 1;
              if (v65 != v67)
                goto LABEL_51;
            }
            v35 = (void **)(v15 + 88);
            v33 = v56;
LABEL_69:
            v84 = &v72[v71];
            *v35 = v73;
            v54 = (uint64_t *)(v15 + 96);
            *v126 = v66;
            *v123 = v84;
            if (v65)
              operator delete(v65);
            v43 = (void **)(v15 + 112);
            goto LABEL_72;
          }
LABEL_124:
          v107 = v113;
          if (!v113)
          {
LABEL_126:
            v34 = v111;
LABEL_127:
            ++*v34;
            return;
          }
LABEL_125:
          sub_223A2AB48(v112, v127, v107, (_QWORD *)v15, *(double *)v36.i64, v37, *(double *)v38.i64, v39, v40, v41, v42);
          goto LABEL_126;
        }
        if (!v124)
        {
          if (v33)
          {
            v108 = (float *)(v122 + 64);
            v109 = v127;
            v110 = v33;
          }
          else
          {
            if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 263, (uint64_t)"material_block", 14, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_135;
            }
            v108 = (float *)(v122 + 64);
            v109 = v127;
            v110 = 0;
          }
          sub_223A70D20(v108, v109, v110, (_QWORD *)v15, v36, v37, v38);
          v107 = v113;
          if (!v113)
            goto LABEL_126;
          goto LABEL_125;
        }
        if (!v33
          || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 258, (uint64_t)"!material_block", 15, (uint64_t)&unk_22459E31A, 0, (void (*)(void **))sub_22457406C))
        {
          sub_223A70980(v112, v127, v124, (_QWORD *)v15, v36, v37, *(double *)v38.i64, v39);
          goto LABEL_124;
        }
LABEL_135:
        abort();
      }
LABEL_118:
      v24.n128_u32[0] = *(_DWORD *)(v122 + 20);
      if (sub_223A800DC(*(unsigned __int8 **)(v122 + 8), a3, v118, a5, v127, *(unsigned __int8 *)(v122 + 36), (_QWORD *)v15, (float32x4_t)v24, v25, v26, v27, v28, v29, v30, v31))
      {
        ++v34;
      }
      goto LABEL_127;
    }
LABEL_113:
    if (a3[11] <= v9
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v9) / 0x1F)) + 132 * ((a3[10] + v9) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_135;
    }
    v33 = *(_QWORD *)(a3[42] + (((a3[45] + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 3512 * ((*((_DWORD *)a3 + 90) + (_DWORD)v9) & 0xF);
    sub_223A77240((uint64_t)a3, v33);
    sub_223A773C4((_BOOL8)a3, v33);
    sub_223A77540((_BOOL8)a3, v33);
    sub_223A776B8(a3, v33);
    sub_223A77810(a3, v33);
    sub_223A77974(a3, v33);
    v24 = sub_223A77ADC(a3, v33);
    v34 = (_DWORD *)(v122 + 83488);
    v35 = (void **)(v15 + 88);
    if (*(_BYTE *)(v122 + 38))
      goto LABEL_24;
    goto LABEL_118;
  }
}

void sub_223A70980(float *a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8)
{
  float v11;
  void *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  char *v16;
  int32x2_t *v17;
  float v18;
  float32x4_t v19;
  _BYTE *v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  int8x16_t v28;
  __int16 v29;
  char v30;
  unint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  void *v39;
  char *v40;
  uint64_t v41;
  _BYTE *v42;
  char *v43;
  char v44;
  unint64_t v45;
  __n128 *v46;
  float32x4_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  unint64_t *v55;

  v11 = *a1;
  v12 = (void *)a4[11];
  a4[12] = v12;
  v14 = (unsigned __int16 *)a4[2];
  v13 = (unsigned __int16 *)a4[3];
  v55 = a4 + 11;
  if (a4[13] - (_QWORD)v12 >= 0xAAAAAAAAAAAAAAABLL * (v13 - v14))
  {
    a5.f32[0] = v11;
    if (v14 == v13)
      return;
    goto LABEL_8;
  }
  if ((char *)v13 - (char *)v14 < 0)
LABEL_48:
    sub_22316E078();
  v16 = (char *)operator new(0xAAAAAAAAAAAAAAABLL * (v13 - v14));
  a4[11] = v16;
  a4[12] = v16;
  a4[13] = &v16[0xAAAAAAAAAAAAAAABLL * (v13 - v14)];
  a5.f32[0] = v11;
  if (v12)
  {
    operator delete(v12);
    a5.f32[0] = *a1;
    v14 = (unsigned __int16 *)a4[2];
    v13 = (unsigned __int16 *)a4[3];
  }
  if (v14 != v13)
  {
LABEL_8:
    v17 = *(int32x2_t **)(a2 + 2920);
    *(float32x2_t *)a8.f32 = vcvt_f32_s32(*v17);
    a8.f32[2] = (float)v17[1].i32[0];
    v18 = 1.0 / (float)(v11 + v11);
    v19 = vmulq_n_f32(a8, a5.f32[0]);
    v20 = (_BYTE *)a4[12];
    v21 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    v22.i64[0] = 0x3F0000003F000000;
    v22.i64[1] = 0x3F0000003F000000;
    v54 = v19;
    v53 = v21;
    while (1)
    {
      while (1)
      {
        v23 = a4[5];
        v24 = v23 + 12 * *v14;
        v25 = v23 + 12 * v14[1];
        v26 = v23 + 12 * v14[2];
        a5.i64[0] = *(_QWORD *)v24;
        a5.i32[2] = *(_DWORD *)(v24 + 8);
        a6.i64[0] = *(_QWORD *)v25;
        a6.i32[2] = *(_DWORD *)(v25 + 8);
        v27 = vaddq_f32(a5, a6);
        a6.i64[0] = *(_QWORD *)v26;
        a6.i32[2] = *(_DWORD *)(v26 + 8);
        v28 = (int8x16_t)vaddq_f32(vmulq_n_f32(vsubq_f32(vmulq_f32(vaddq_f32(v27, a6), v21), v19), v18), v22);
        LODWORD(v24) = (int)*(float *)v28.i32;
        a5 = (float32x4_t)vextq_s8(v28, v28, 4uLL);
        *(int32x2_t *)a5.f32 = vmul_s32(vcvt_s32_f32(*(float32x2_t *)a5.f32), (int32x2_t)0x1900000005);
        v29 = *(_WORD *)(a3 + 8 * (a5.i32[0] + v24 + a5.i32[1]));
        v30 = (_BYTE)v29 ? HIBYTE(v29) : -1;
        v31 = a4[13];
        if ((unint64_t)v20 >= v31)
          break;
        *v20++ = v30;
        a4[12] = v20;
        v14 += 3;
        if (v14 == v13)
          return;
      }
      v32 = v13;
      v33 = a3;
      v34 = *v55;
      v35 = (unint64_t)&v20[-*v55];
      v36 = v35 + 1;
      if ((uint64_t)(v35 + 1) < 0)
        goto LABEL_48;
      v37 = v31 - v34;
      if (2 * v37 > v36)
        v36 = 2 * v37;
      v38 = v37 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v36;
      if (v38)
        break;
      v39 = 0;
      v40 = &v20[-*v55];
      *(_BYTE *)v35 = v30;
      v41 = v35 + 1;
      if (v20 != (_BYTE *)v34)
        goto LABEL_24;
LABEL_29:
      a4[11] = v40;
      a4[12] = v41;
      a4[13] = (char *)v39 + v38;
      a3 = v33;
      if (v20)
        operator delete(v20);
      v13 = v32;
      v19 = v54;
      v18 = 1.0 / (float)(v11 + v11);
      v21 = v53;
      v22.i64[0] = 0x3F0000003F000000;
      v22.i64[1] = 0x3F0000003F000000;
      a4[12] = v41;
      v14 += 3;
      v20 = (_BYTE *)v41;
      if (v14 == v32)
        return;
    }
    v39 = operator new(v38);
    v40 = (char *)v39 + v35;
    *((_BYTE *)v39 + v35) = v30;
    v41 = (uint64_t)v39 + v35 + 1;
    if (v20 == (_BYTE *)v34)
      goto LABEL_29;
LABEL_24:
    if (v35 < 8
      || (char *)v39 + v35 - 1 - &v20[~v34] > (unint64_t)v39 + v35 - 1
      || v34 > (unint64_t)(v20 - 1)
      || v34 - (unint64_t)v39 < 0x20)
    {
      v42 = v20;
    }
    else
    {
      if (v35 < 0x20)
      {
        v45 = 0;
        goto LABEL_42;
      }
      v45 = v35 & 0xFFFFFFFFFFFFFFE0;
      v46 = (__n128 *)((char *)v39 + v35 - 16);
      v47 = (float32x4_t *)(v20 - 16);
      v48 = v35 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        a6 = v47[-1];
        a5 = *v47;
        v46[-1] = (__n128)a6;
        *v46 = (__n128)a5;
        v46 -= 2;
        v47 -= 2;
        v48 -= 32;
      }
      while (v48);
      if (v35 == v45)
        goto LABEL_28;
      if ((v35 & 0x18) != 0)
      {
LABEL_42:
        v42 = &v20[-(v35 & 0xFFFFFFFFFFFFFFF8)];
        v40 -= v35 & 0xFFFFFFFFFFFFFFF8;
        v49 = &v20[-v45 - v34 - 8 + (_QWORD)v39];
        v50 = (uint64_t *)&v20[-v45 - 8];
        v51 = v45 - (v35 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v52 = *v50--;
          *v49-- = v52;
          v51 += 8;
        }
        while (v51);
        if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_28;
        goto LABEL_26;
      }
      v40 -= v45;
      v42 = &v20[-v45];
    }
LABEL_26:
    v43 = v40 - 1;
    do
    {
      v44 = *--v42;
      *v43-- = v44;
    }
    while (v42 != (_BYTE *)v34);
LABEL_28:
    v20 = (_BYTE *)*v55;
    v40 = (char *)v39;
    goto LABEL_29;
  }
}

void sub_223A70D20(float *a1, uint64_t a2, uint64_t a3, _QWORD *a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  float v10;
  void *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  char *v15;
  int32x2_t *v16;
  float v17;
  float32x4_t v18;
  _BYTE *v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  char v39;
  unint64_t v40;
  __n128 *v41;
  float32x4_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  unint64_t *v50;

  v10 = *a1;
  v11 = (void *)a4[14];
  a4[15] = v11;
  v13 = (unsigned __int16 *)a4[2];
  v12 = (unsigned __int16 *)a4[3];
  v50 = a4 + 14;
  if (a4[16] - (_QWORD)v11 >= 0xAAAAAAAAAAAAAAABLL * (v12 - v13))
  {
    a5.f32[0] = v10;
    if (v13 == v12)
      return;
    goto LABEL_8;
  }
  if ((char *)v12 - (char *)v13 < 0)
LABEL_45:
    sub_22316E078();
  v15 = (char *)operator new(0xAAAAAAAAAAAAAAABLL * (v12 - v13));
  a4[14] = v15;
  a4[15] = v15;
  a4[16] = &v15[0xAAAAAAAAAAAAAAABLL * (v12 - v13)];
  a5.f32[0] = v10;
  if (v11)
  {
    operator delete(v11);
    a5.f32[0] = *a1;
    v13 = (unsigned __int16 *)a4[2];
    v12 = (unsigned __int16 *)a4[3];
  }
  if (v13 != v12)
  {
LABEL_8:
    v16 = *(int32x2_t **)(a2 + 2920);
    *(float32x2_t *)a7.f32 = vcvt_f32_s32(*v16);
    a7.f32[2] = (float)v16[1].i32[0];
    v17 = 1.0 / (float)(v10 + v10);
    v18 = vmulq_n_f32(a7, a5.f32[0]);
    v19 = (_BYTE *)a4[15];
    v20 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    v21.i64[0] = 0x3F0000003F000000;
    v21.i64[1] = 0x3F0000003F000000;
    v49 = v18;
    v48 = v20;
    while (1)
    {
      while (1)
      {
        v22 = a4[5];
        v23 = v22 + 12 * *v13;
        v24 = v22 + 12 * v13[1];
        a5.i64[0] = *(_QWORD *)v23;
        a5.i32[2] = *(_DWORD *)(v23 + 8);
        v25 = v22 + 12 * v13[2];
        a6.i64[0] = *(_QWORD *)v24;
        a6.i32[2] = *(_DWORD *)(v24 + 8);
        v26 = vaddq_f32(a5, a6);
        a6.i64[0] = *(_QWORD *)v25;
        a6.i32[2] = *(_DWORD *)(v25 + 8);
        a5 = vaddq_f32(vmulq_n_f32(vsubq_f32(vmulq_f32(vaddq_f32(v26, a6), v20), v18), v17), v21);
        v27 = (_BYTE *)(a3 + 28 * (5 * (int)a5.f32[1] + (int)a5.f32[0] + 25 * (int)a5.f32[2]) + 27);
        v28 = a4[16];
        if ((unint64_t)v19 >= v28)
          break;
        *v19++ = *v27;
        a4[15] = v19;
        v13 += 3;
        if (v13 == v12)
          return;
      }
      v29 = *v50;
      v30 = (unint64_t)&v19[-*v50];
      v31 = v30 + 1;
      if ((uint64_t)(v30 + 1) < 0)
        goto LABEL_45;
      v32 = v28 - v29;
      if (2 * v32 > v31)
        v31 = 2 * v32;
      v33 = v32 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v31;
      if (v33)
        break;
      v34 = 0;
      v35 = &v19[-*v50];
      *(_BYTE *)v30 = *v27;
      v36 = v30 + 1;
      if (v19 != (_BYTE *)v29)
        goto LABEL_21;
LABEL_26:
      a4[14] = v35;
      a4[15] = v36;
      a4[16] = (char *)v34 + v33;
      if (v19)
        operator delete(v19);
      v18 = v49;
      v17 = 1.0 / (float)(v10 + v10);
      v20 = v48;
      v21.i64[0] = 0x3F0000003F000000;
      v21.i64[1] = 0x3F0000003F000000;
      a4[15] = v36;
      v13 += 3;
      v19 = (_BYTE *)v36;
      if (v13 == v12)
        return;
    }
    v34 = operator new(v33);
    v35 = (char *)v34 + v30;
    *((_BYTE *)v34 + v30) = *v27;
    v36 = (uint64_t)v34 + v30 + 1;
    if (v19 == (_BYTE *)v29)
      goto LABEL_26;
LABEL_21:
    if (v30 < 8
      || (char *)v34 + v30 - 1 - &v19[~v29] > (unint64_t)v34 + v30 - 1
      || v29 > (unint64_t)(v19 - 1)
      || v29 - (unint64_t)v34 < 0x20)
    {
      v37 = v19;
    }
    else
    {
      if (v30 < 0x20)
      {
        v40 = 0;
        goto LABEL_39;
      }
      v40 = v30 & 0xFFFFFFFFFFFFFFE0;
      v41 = (__n128 *)((char *)v34 + v30 - 16);
      v42 = (float32x4_t *)(v19 - 16);
      v43 = v30 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        a6 = v42[-1];
        a5 = *v42;
        v41[-1] = (__n128)a6;
        *v41 = (__n128)a5;
        v41 -= 2;
        v42 -= 2;
        v43 -= 32;
      }
      while (v43);
      if (v30 == v40)
        goto LABEL_25;
      if ((v30 & 0x18) != 0)
      {
LABEL_39:
        v37 = &v19[-(v30 & 0xFFFFFFFFFFFFFFF8)];
        v35 -= v30 & 0xFFFFFFFFFFFFFFF8;
        v44 = &v19[-v40 - v29 - 8 + (_QWORD)v34];
        v45 = (uint64_t *)&v19[-v40 - 8];
        v46 = v40 - (v30 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v47 = *v45--;
          *v44-- = v47;
          v46 += 8;
        }
        while (v46);
        if (v30 == (v30 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_25;
        goto LABEL_23;
      }
      v35 -= v40;
      v37 = &v19[-v40];
    }
LABEL_23:
    v38 = v35 - 1;
    do
    {
      v39 = *--v37;
      *v38-- = v39;
    }
    while (v37 != (_BYTE *)v29);
LABEL_25:
    v19 = (_BYTE *)*v50;
    v35 = (char *)v34;
    goto LABEL_26;
  }
}

_QWORD *sub_223A710B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  a1[22] = &off_24EC20828;
  v2 = (std::__shared_weak_count *)a1[9];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_223A71168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v7;
  __int128 v10;
  float32x2_t v11;
  float32x4_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  float v16;
  float v17;
  __n128 v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __int128 v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t i;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  BOOL v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unsigned int v71;
  _DWORD *v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  _OWORD *v88;
  double v89;
  std::chrono::steady_clock::time_point v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  std::mutex *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  std::string::size_type size;
  std::string *v100;
  std::string::size_type v101;
  std::string::size_type v102;
  int v103;
  BOOL v104;
  __n128 *v106;
  std::string *v107;
  size_t v108;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t *v110;
  _QWORD *v111;
  _OWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t *v121;
  double v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  std::mutex *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  std::string::size_type v131;
  std::string *v132;
  std::string::size_type v133;
  std::string::size_type v134;
  int v135;
  __n128 *v138;
  std::string *v139;
  size_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  std::mutex *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  std::string::size_type v150;
  std::string *v151;
  std::string::size_type v152;
  std::string::size_type v153;
  int v154;
  __n128 *v157;
  std::string *v158;
  size_t v159;
  unint64_t v160;
  double v161;
  double v162;
  unint64_t v163;
  unsigned __int8 v164;
  unsigned __int8 v165;
  double v166;
  double v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v175;
  unint64_t v176;
  std::chrono::steady_clock::time_point v179;
  int32x2_t *v181;
  _QWORD *v183;
  uint64_t (***v184)();
  unsigned __int8 v185;
  unsigned int v186;
  double v188;
  double v189;
  double v190;
  uint64_t (**v191)();
  __int128 v192;
  _OWORD v193[2];
  uint64_t (**v194)();
  __int128 v195;
  _OWORD v196[2];
  __int128 v197;
  float32x4_t v198;
  __int128 v199;
  float32x4_t v200;
  uint64_t (**v201)();
  uint64_t (**v202)(_QWORD);
  __int128 v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int v207;
  uint64_t v208;
  float v209;
  __int128 v210;
  __int128 v211;
  int v212;
  _BYTE v213[26];
  _BYTE __p[24];
  _OWORD v215[2];
  char v216;
  std::string v217;
  _OWORD v218[2];
  __int128 v219;
  _BYTE v220[34];
  uint64_t (**v221)();
  __int128 v222;
  _OWORD v223[2];
  float32x4_t v224;
  float32x4_t v225;
  __int128 v226;
  float32x4_t v227;
  uint64_t (**v228)();
  uint64_t (**v229)(_QWORD);
  __int128 v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int v234;
  uint64_t v235;
  float v236;
  uint64_t v237;

  v237 = *MEMORY[0x24BDAC8D0];
  v210 = 0u;
  v211 = 0u;
  v212 = 728301840;
  kdebug_trace();
  v179.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *(_OWORD *)(a1 + 83488) = 0u;
  *(_DWORD *)(a1 + 83504) = 0;
  v191 = &off_24EC200A8;
  v192 = 0u;
  memset(v193, 0, 26);
  v194 = &off_24EC200A8;
  v195 = 0u;
  memset(v196, 0, 26);
  v197 = xmmword_22465CCF8;
  v198 = (float32x4_t)unk_22465CD08;
  v199 = xmmword_22465CD18;
  v200 = (float32x4_t)unk_22465CD28;
  v203 = 0uLL;
  v204 = vdupq_n_s32(0x7FC00000u);
  v205 = v204;
  v206 = v204;
  v207 = 2143289344;
  v208 = 0;
  v201 = &off_24EC207B8;
  v202 = &off_24EC20868;
  v209 = 0.0;
  v181 = (int32x2_t *)a1;
  if (!*(_BYTE *)(a1 + 37) || !*(_BYTE *)(a2 + 56))
  {
    v184 = 0;
    v185 = 0;
    if (*(_BYTE *)(a4 + 450) != 1)
      goto LABEL_48;
    goto LABEL_49;
  }
  if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_264;
  }
  sub_223C3BF78(a2, (uint64_t)&v219);
  v13 = *(std::__shared_weak_count **)v220;
  if (*(_QWORD *)v220)
  {
    v14 = (unint64_t *)(*(_QWORD *)v220 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = *(float *)(a1 + 28);
      v17 = *(float *)(a1 + 32);
      if (*(_BYTE *)(a2 + 56))
        goto LABEL_11;
LABEL_18:
      __p[0] = 0;
      v216 = 0;
      goto LABEL_19;
    }
  }
  v16 = *(float *)(a1 + 28);
  v17 = *(float *)(a1 + 32);
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_18;
LABEL_11:
  if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_264;
  }
  sub_223C3BF78(a2, (uint64_t)&v219);
  *(_QWORD *)__p = &off_24EC200A8;
  a1 = *((_QWORD *)&v219 + 1);
  v7 = *(_QWORD *)v220;
  v215[0] = *(_OWORD *)&v220[8];
  *(_OWORD *)((char *)v215 + 10) = *(_OWORD *)&v220[18];
  v216 = 1;
LABEL_19:
  *(_QWORD *)&v219 = &off_24EC200A8;
  *((_QWORD *)&v219 + 1) = a1;
  *(_QWORD *)v220 = v7;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)&__p[16] = 0;
  *(_OWORD *)&v220[8] = v215[0];
  v18 = *(__n128 *)((char *)v215 + 10);
  *(_OWORD *)&v220[18] = *(_OWORD *)((char *)v215 + 10);
  if (*(_BYTE *)(a2 + 120))
  {
    if ((!*(_DWORD *)(a2 + 96) || !*(_DWORD *)(a2 + 100))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1151, (uint64_t)"!depth.confidence->Empty()", 26, (uint64_t)"Confidence buffer not valid", 27, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3BF78(a2 + 64, (uint64_t)&v217);
    v10 = *(_OWORD *)&v217.__r_.__value_.__r.__words[1];
    *(_OWORD *)v213 = v218[0];
    v18 = *(__n128 *)((char *)v218 + 10);
    *(_OWORD *)&v213[10] = *(_OWORD *)((char *)v218 + 10);
  }
  v221 = &off_24EC200A8;
  v222 = v10;
  v223[0] = *(_OWORD *)v213;
  *(_OWORD *)((char *)v223 + 10) = *(_OWORD *)&v213[10];
  if (*(_BYTE *)(a2 + 1744))
  {
    v19 = *(float32x2_t *)(a2 + 1616);
    v20.i32[0] = *(_DWORD *)(a2 + 1624);
    v21 = *(float32x2_t *)(a2 + 1632);
    v22 = *(float32x2_t *)(a2 + 1648);
    v11.i32[0] = *(_DWORD *)(a2 + 1656);
    v12.i64[0] = *(_QWORD *)(a2 + 1664);
    v12.i32[2] = *(_DWORD *)(a2 + 1672);
    v23 = (int8x16_t)vnegq_f32(v12);
    v24 = *(float32x4_t *)(a2 + 1336);
    v25 = *(float32x4_t *)(a2 + 1352);
    v26 = vmulq_n_f32(v24, v20.f32[0]);
    v20.i32[1] = *(_DWORD *)(a2 + 1640);
    v27 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v19, (int32x2_t)v21), *(float *)v23.i32), (float32x2_t)vzip2_s32((int32x2_t)v19, (int32x2_t)v21), *(float32x2_t *)v12.f32, 1), v20, v12, 2);
    v20.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v22, *(float32x2_t *)v23.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v22, 1), *(float32x2_t *)v12.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL), v11).u32[0];
    v28 = *(float32x4_t *)(a2 + 1368);
    v29 = *(float32x4_t *)(a2 + 1384);
    v30 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v24, v19.f32[0]), v25, v21.f32[0]), v28, v22.f32[0]), (float32x4_t)0, v29);
    v31 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v24, v19, 1), v25, v21, 1), v28, v22, 1), (float32x4_t)0, v29);
    v32 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v26, v25, v20.f32[1]), v28, v11.f32[0]), (float32x4_t)0, v29);
    v33 = vaddq_f32(v29, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v27.f32[0]), v25, v27, 1), v28, v20.f32[0]));
    v34 = *(float32x4_t *)(a2 + 1728);
    v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(_OWORD *)(a2 + 1696))), v31, *(float32x2_t *)(a2 + 1696), 1), v32, *(float32x4_t *)(a2 + 1696), 2), v33, *(float32x4_t *)(a2 + 1696), 3);
    v36 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(_OWORD *)(a2 + 1712))), v31, *(float32x2_t *)(a2 + 1712), 1), v32, *(float32x4_t *)(a2 + 1712), 2), v33, *(float32x4_t *)(a2 + 1712), 3);
    v224 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, COERCE_FLOAT(*(_OWORD *)(a2 + 1680))), v31, *(float32x2_t *)(a2 + 1680), 1), v32, *(float32x4_t *)(a2 + 1680), 2), v33, *(float32x4_t *)(a2 + 1680), 3);
    v225 = v35;
    v226 = (__int128)v36;
    v227 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, v34.f32[0]), v31, *(float32x2_t *)v34.f32, 1), v32, v34, 2), v33, v34, 3);
  }
  else
  {
    v37 = *(float32x4_t *)(a2 + 1352);
    v224 = *(float32x4_t *)(a2 + 1336);
    v225 = v37;
    v38 = *(float32x4_t *)(a2 + 1384);
    v226 = *(_OWORD *)(a2 + 1368);
    v227 = v38;
  }
  v39 = *(_OWORD *)(a2 + 1256);
  v234 = *(_DWORD *)(a2 + 1320);
  v40 = *(int32x4_t *)(a2 + 1272);
  v41 = *(int32x4_t *)(a2 + 1288);
  v230 = v39;
  v231 = v40;
  v42 = *(int32x4_t *)(a2 + 1304);
  v232 = v41;
  v233 = v42;
  v235 = *(_QWORD *)(a2 + 1328);
  v229 = &off_24EC20868;
  v228 = &off_24EC207B8;
  v236 = v16 + v17;
  *((_QWORD *)&v219 + 1) = 0;
  *(_QWORD *)v220 = 0;
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  *(_QWORD *)&v192 = a1;
  *((_QWORD *)&v192 + 1) = v7;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      v18.n128_f32[0] = v16 + v17;
      ((void (*)(std::__shared_weak_count *, __n128))v43->__on_zero_shared)(v43, v18);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v193[0] = *(_OWORD *)&v220[8];
  *(_OWORD *)((char *)v193 + 10) = *(_OWORD *)&v220[18];
  v46 = v222;
  v222 = 0uLL;
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
  v195 = v46;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v196[0] = v223[0];
  *(_OWORD *)((char *)v196 + 10) = *(_OWORD *)((char *)v223 + 10);
  v197 = (__int128)v224;
  v198 = v225;
  v199 = v226;
  v200 = v227;
  v203 = v230;
  v204 = v231;
  v207 = v234;
  v205 = v232;
  v206 = v233;
  v208 = v235;
  v209 = v236;
  v228 = &off_24EC20828;
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v222 + 1);
  if (*((_QWORD *)&v222 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v222 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *(std::__shared_weak_count **)v220;
  if (*(_QWORD *)v220)
  {
    v54 = (unint64_t *)(*(_QWORD *)v220 + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v184 = &v191;
  v185 = 1;
  if (*(_BYTE *)(a4 + 450) != 1)
  {
LABEL_48:
    if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VolumetricMeshMaker.cpp", 425, (uint64_t)"voxel_block_table.NeighborCacheType() == NeighborCache::Fifteen", 63, (uint64_t)"Block table is expected to cache 15 neighbors", 45, (void (*)(void **))sub_22457406C))goto LABEL_49;
LABEL_264:
    abort();
  }
LABEL_49:
  *(_QWORD *)v220 = 0;
  *((_QWORD *)&v219 + 1) = 0;
  *(_QWORD *)&v219 = (char *)&v219 + 8;
  v56 = (uint64_t *)(a3 + 8);
  v57 = *(uint64_t **)a3;
  if (*(_QWORD *)a3 != a3 + 8)
  {
    v183 = (_QWORD *)(a4 + 16);
    do
    {
      v58 = *((unsigned int *)v57 + 7);
      if (*(_QWORD *)(a4 + 104) <= v58
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 72) + 8 * ((*(_QWORD *)(a4 + 96) + v58) / 0x1F))+ 132 * ((*(_QWORD *)(a4 + 96) + v58) % 0x1F)+ 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v186 = v58;
      v59 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 160) + (((*(_QWORD *)(a4 + 184) + v58) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 2936 * ((*(_DWORD *)(a4 + 184) + (_DWORD)v58) & 0xF)
                     + 2920);
      v60 = *(_QWORD *)v220;
      for (i = 8; i != 15; ++i)
      {
        v62 = *(_DWORD *)(*v59 + 4 * i + 24);
        if (v62 != -1)
        {
          v63 = *v56;
          if (!*v56)
            goto LABEL_74;
          v64 = a3 + 8;
          do
          {
            v65 = *(_DWORD *)(v63 + 28);
            v66 = v65 >= v62;
            if (v65 >= v62)
              v67 = (uint64_t *)v63;
            else
              v67 = (uint64_t *)(v63 + 8);
            if (v66)
              v64 = v63;
            v63 = *v67;
          }
          while (*v67);
          if ((uint64_t *)v64 == v56 || v62 < *(_DWORD *)(v64 + 28))
          {
LABEL_74:
            v68 = *((_QWORD *)&v219 + 1);
            v69 = (_QWORD *)&v219 + 1;
            v70 = (_QWORD *)&v219 + 1;
            if (*((_QWORD *)&v219 + 1))
            {
              while (1)
              {
                while (1)
                {
                  v70 = (_QWORD *)v68;
                  v71 = *(_DWORD *)(v68 + 28);
                  if (v62 >= v71)
                    break;
                  v68 = *v70;
                  v69 = v70;
                  if (!*v70)
                    goto LABEL_81;
                }
                if (v71 >= v62)
                  break;
                v68 = v70[1];
                if (!v68)
                {
                  v69 = v70 + 1;
                  goto LABEL_81;
                }
              }
            }
            else
            {
LABEL_81:
              v72 = operator new(0x20uLL);
              v72[7] = v62;
              *(_QWORD *)v72 = 0;
              *((_QWORD *)v72 + 1) = 0;
              *((_QWORD *)v72 + 2) = v70;
              *v69 = v72;
              if (*(_QWORD *)v219)
              {
                *(_QWORD *)&v219 = *(_QWORD *)v219;
                v72 = (_DWORD *)*v69;
              }
              v73 = (_BYTE *)*((_QWORD *)&v219 + 1);
              v104 = v72 == *((_DWORD **)&v219 + 1);
              *((_BYTE *)v72 + 24) = v72 == *((_DWORD **)&v219 + 1);
              if (!v104)
              {
                do
                {
                  v74 = *((_QWORD *)v72 + 2);
                  if (*(_BYTE *)(v74 + 24))
                    break;
                  v75 = *(_BYTE **)(v74 + 16);
                  v76 = *(_QWORD *)v75;
                  if (*(_QWORD *)v75 == v74)
                  {
                    v79 = *((_QWORD *)v75 + 1);
                    if (!v79 || (v80 = *(unsigned __int8 *)(v79 + 24), v77 = (_BYTE *)(v79 + 24), v80))
                    {
                      if (*(_DWORD **)v74 == v72)
                      {
                        *(_BYTE *)(v74 + 24) = 1;
                        v75[24] = 0;
                        v83 = *(_QWORD *)(v74 + 8);
                        *(_QWORD *)v75 = v83;
                        if (v83)
                          goto LABEL_98;
                      }
                      else
                      {
                        v81 = *(uint64_t **)(v74 + 8);
                        v82 = *v81;
                        *(_QWORD *)(v74 + 8) = *v81;
                        if (v82)
                        {
                          *(_QWORD *)(v82 + 16) = v74;
                          v75 = *(_BYTE **)(v74 + 16);
                        }
                        v81[2] = (uint64_t)v75;
                        *(_QWORD *)(*(_QWORD *)(v74 + 16) + 8 * (**(_QWORD **)(v74 + 16) != v74)) = v81;
                        *v81 = v74;
                        *(_QWORD *)(v74 + 16) = v81;
                        v75 = (_BYTE *)v81[2];
                        v74 = *(_QWORD *)v75;
                        *((_BYTE *)v81 + 24) = 1;
                        v75[24] = 0;
                        v83 = *(_QWORD *)(v74 + 8);
                        *(_QWORD *)v75 = v83;
                        if (v83)
LABEL_98:
                          *(_QWORD *)(v83 + 16) = v75;
                      }
                      *(_QWORD *)(v74 + 16) = *((_QWORD *)v75 + 2);
                      *(_QWORD *)(*((_QWORD *)v75 + 2) + 8 * (**((_QWORD **)v75 + 2) != (_QWORD)v75)) = v74;
                      *(_QWORD *)(v74 + 8) = v75;
LABEL_59:
                      *((_QWORD *)v75 + 2) = v74;
                      break;
                    }
                  }
                  else if (!v76 || (v78 = *(unsigned __int8 *)(v76 + 24), v77 = (_BYTE *)(v76 + 24), v78))
                  {
                    if (*(_DWORD **)v74 == v72)
                    {
                      v85 = *((_QWORD *)v72 + 1);
                      *(_QWORD *)v74 = v85;
                      if (v85)
                      {
                        *(_QWORD *)(v85 + 16) = v74;
                        v75 = *(_BYTE **)(v74 + 16);
                      }
                      *((_QWORD *)v72 + 2) = v75;
                      *(_QWORD *)(*(_QWORD *)(v74 + 16) + 8 * (**(_QWORD **)(v74 + 16) != v74)) = v72;
                      *((_QWORD *)v72 + 1) = v74;
                      *(_QWORD *)(v74 + 16) = v72;
                      v75 = (_BYTE *)*((_QWORD *)v72 + 2);
                      *((_BYTE *)v72 + 24) = 1;
                      v75[24] = 0;
                      v74 = *((_QWORD *)v75 + 1);
                      v84 = *(_DWORD **)v74;
                      *((_QWORD *)v75 + 1) = *(_QWORD *)v74;
                      if (!v84)
                        goto LABEL_58;
                    }
                    else
                    {
                      *(_BYTE *)(v74 + 24) = 1;
                      v75[24] = 0;
                      v74 = *((_QWORD *)v75 + 1);
                      v84 = *(_DWORD **)v74;
                      *((_QWORD *)v75 + 1) = *(_QWORD *)v74;
                      if (!v84)
                        goto LABEL_58;
                    }
                    *((_QWORD *)v84 + 2) = v75;
LABEL_58:
                    *(_QWORD *)(v74 + 16) = *((_QWORD *)v75 + 2);
                    *(_QWORD *)(*((_QWORD *)v75 + 2) + 8 * (**((_QWORD **)v75 + 2) != (_QWORD)v75)) = v74;
                    *(_QWORD *)v74 = v75;
                    goto LABEL_59;
                  }
                  *(_BYTE *)(v74 + 24) = 1;
                  v72 = v75;
                  v75[24] = v75 == v73;
                  *v77 = 1;
                }
                while (v75 != v73);
              }
              *(_QWORD *)v220 = ++v60;
            }
          }
        }
      }
      sub_223A6FA7C((uint64_t)v181, v186, v183, (uint64_t)v184, v185);
      v86 = (uint64_t *)v57[1];
      if (v86)
      {
        do
        {
          v87 = v86;
          v86 = (uint64_t *)*v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          v87 = (uint64_t *)v57[2];
          v104 = *v87 == (_QWORD)v57;
          v57 = v87;
        }
        while (!v104);
      }
      v57 = v87;
    }
    while (v87 != v56);
    v88 = (_OWORD *)v219;
    if ((__int128 *)v219 != (__int128 *)((char *)&v219 + 8))
    {
      do
      {
        sub_223A6FA7C((uint64_t)v181, *((_DWORD *)v88 + 7), v183, (uint64_t)v184, v185);
        v111 = (_QWORD *)*((_QWORD *)v88 + 1);
        if (v111)
        {
          do
          {
            v112 = v111;
            v111 = (_QWORD *)*v111;
          }
          while (v111);
        }
        else
        {
          do
          {
            v112 = (_OWORD *)*((_QWORD *)v88 + 2);
            v104 = *(_QWORD *)v112 == (_QWORD)v88;
            v88 = v112;
          }
          while (!v104);
        }
        v88 = v112;
      }
      while (v112 != (__int128 *)((char *)&v219 + 8));
    }
  }
  sub_223A68CA8(*(_DWORD *)(a3 + 16), *(int *)v220);
  sub_223198030((uint64_t)&v219, *((_QWORD **)&v219 + 1));
  v89 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v179.__d_.__rep_) / 1000000.0;
  v90.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v190 = v89;
  *(_QWORD *)&v219 = "cv3d.recon.";
  *((_QWORD *)&v219 + 1) = 11;
  *(_QWORD *)v220 = "Stats.Volumetric.Time";
  *(_QWORD *)&v220[8] = 21;
  sub_2231A9820((uint64_t)&v219, (uint64_t)&v220[16], 0, 0, &v217);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v91 = sub_2241471F8();
    v92 = v91[2];
    if (!v92)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v92 = v91[2];
    }
    v93 = *(_QWORD *)(v92 + 64);
    v94 = (std::mutex *)(v93 + 32);
    std::mutex::lock((std::mutex *)(v93 + 32));
    v96 = *(_QWORD *)(v93 + 96);
    v95 = *(_QWORD *)(v93 + 104);
    std::mutex::unlock(v94);
    if (v96 != v95)
    {
      sub_2241471F8();
      v97 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97))
      {
        v219 = 0u;
        *(_OWORD *)v220 = 0u;
        *(_DWORD *)&v220[16] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v97))
        {
          __p[23] = 9;
          strcpy(__p, "make (ms)");
          *(_QWORD *)v213 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v213[8] = 2;
          v98 = sub_2241471F8();
          sub_2238C7990((uint64_t)v98, v97, (uint64_t *)&v190, (uint64_t)__p, (__int128 *)v213);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  v219 = 0u;
  *(_OWORD *)v220 = 0u;
  *(_DWORD *)&v220[16] = 728325624;
  kdebug_trace();
  size = HIBYTE(v217.__r_.__value_.__r.__words[2]);
  if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v217.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v100 = &v217;
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v100 = (std::string *)v217.__r_.__value_.__r.__words[0];
    v101 = v100->__r_.__value_.__r.__words[0];
    v102 = v100->__r_.__value_.__l.__size_;
    v103 = v100->__r_.__value_.__s.__data_[16];
    v104 = v101 == 0x6365722E64337663 && v102 == 0x73746174532E6E6FLL;
    if (v104 && v103 == 46)
    {
      v106 = sub_223187510();
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v107 = &v217;
      else
        v107 = (std::string *)v217.__r_.__value_.__r.__words[0];
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v108 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
      else
        v108 = v217.__r_.__value_.__l.__size_;
      sub_2231AA374((uint64_t *)v106, v107, v108, (uint64_t *)&v190, (uint64_t)"make (ms)", 9);
    }
  }
  kdebug_trace();
  rep = v90.__d_.__rep_;
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v217.__r_.__value_.__l.__data_);
    v110 = *(uint64_t **)a3;
    if (*(uint64_t **)a3 != v56)
      goto LABEL_159;
  }
  else
  {
    v110 = *(uint64_t **)a3;
    if (*(uint64_t **)a3 != v56)
    {
      do
      {
LABEL_159:
        v113 = *((unsigned int *)v110 + 7);
        if (*(_QWORD *)(a4 + 104) <= v113
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 667, (uint64_t)"index < metadata_blocks_.size()", 31, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
        {
LABEL_258:
          abort();
        }
        v114 = *(_QWORD *)(a4 + 96) + v113;
        v115 = *(_QWORD *)(*(_QWORD *)(a4 + 72) + 8 * (v114 / 0x1F));
        v116 = v114 % 0x1F;
        if (*(_BYTE *)(v115 + 132 * v116 + 20))
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 668, (uint64_t)"!metadata_blocks_[index].IsErased()", 35, (uint64_t)"Cannot get an erased block", 26, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_258;
          }
          v117 = *(_QWORD *)(a4 + 96) + v113;
          v116 = v117 % 0x1F;
          v115 = *(_QWORD *)(*(_QWORD *)(a4 + 72) + 8 * (v117 / 0x1F));
        }
        v118 = v115 + 132 * v116;
        v119 = *(_DWORD *)(v118 + 8) & 0xFFFFFFC0;
        *(_QWORD *)&v219 = *(_QWORD *)v118 & 0xFFFFFFC0FFFFFFC0;
        DWORD2(v219) = v119;
        sub_22397FD34(a7, (int *)&v219, (uint64_t)&v219);
        v120 = (uint64_t *)v110[1];
        if (v120)
        {
          do
          {
            v121 = v120;
            v120 = (uint64_t *)*v120;
          }
          while (v120);
        }
        else
        {
          do
          {
            v121 = (uint64_t *)v110[2];
            v104 = *v121 == (_QWORD)v110;
            v110 = v121;
          }
          while (!v104);
        }
        v110 = v121;
      }
      while (v121 != v56);
    }
  }
  sub_223A6C284(v181, a7, (uint64_t)v184, v185, (_QWORD *)a4, a5, a6);
  v122 = (double)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000.0;
  std::chrono::steady_clock::now();
  v189 = v122;
  *(_QWORD *)&v219 = "cv3d.recon.";
  *((_QWORD *)&v219 + 1) = 11;
  *(_QWORD *)v220 = "Stats.Volumetric.Time";
  *(_QWORD *)&v220[8] = 21;
  sub_2231A9820((uint64_t)&v219, (uint64_t)&v220[16], 0, 0, &v217);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v123 = sub_2241471F8();
    v124 = v123[2];
    if (!v124)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v124 = v123[2];
    }
    v125 = *(_QWORD *)(v124 + 64);
    v126 = (std::mutex *)(v125 + 32);
    std::mutex::lock((std::mutex *)(v125 + 32));
    v128 = *(_QWORD *)(v125 + 96);
    v127 = *(_QWORD *)(v125 + 104);
    std::mutex::unlock(v126);
    if (v128 != v127)
    {
      sub_2241471F8();
      v129 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v129 + 24))(v129))
      {
        v219 = 0u;
        *(_OWORD *)v220 = 0u;
        *(_DWORD *)&v220[16] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v129 + 24))(v129))
        {
          __p[23] = 10;
          strcpy(__p, "merge (ms)");
          *(_QWORD *)v213 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v213[8] = 2;
          v130 = sub_2241471F8();
          sub_2238C7990((uint64_t)v130, v129, (uint64_t *)&v189, (uint64_t)__p, (__int128 *)v213);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  v219 = 0u;
  *(_OWORD *)v220 = 0u;
  *(_DWORD *)&v220[16] = 728325624;
  kdebug_trace();
  v131 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
  if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v131 = v217.__r_.__value_.__l.__size_;
  if (v131 >= 0x11)
  {
    v132 = &v217;
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v132 = (std::string *)v217.__r_.__value_.__r.__words[0];
    v133 = v132->__r_.__value_.__r.__words[0];
    v134 = v132->__r_.__value_.__l.__size_;
    v135 = v132->__r_.__value_.__s.__data_[16];
    if (v133 == 0x6365722E64337663 && v134 == 0x73746174532E6E6FLL && v135 == 46)
    {
      v138 = sub_223187510();
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v139 = &v217;
      else
        v139 = (std::string *)v217.__r_.__value_.__r.__words[0];
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v140 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
      else
        v140 = v217.__r_.__value_.__l.__size_;
      sub_2231AA374((uint64_t *)v138, v139, v140, (uint64_t *)&v189, (uint64_t)"merge (ms)", 10);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  *(_QWORD *)&v219 = "cv3d.recon.";
  *((_QWORD *)&v219 + 1) = 11;
  *(_QWORD *)v220 = "Stats.Volumetric.Time";
  *(_QWORD *)&v220[8] = 21;
  sub_2231A9820((uint64_t)&v219, (uint64_t)&v220[16], 0, 0, &v217);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v141 = sub_2241471F8();
    v142 = v141[2];
    if (!v142)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v142 = v141[2];
    }
    v143 = *(_QWORD *)(v142 + 64);
    v144 = (std::mutex *)(v143 + 32);
    std::mutex::lock((std::mutex *)(v143 + 32));
    v146 = *(_QWORD *)(v143 + 96);
    v145 = *(_QWORD *)(v143 + 104);
    std::mutex::unlock(v144);
    if (v146 != v145)
    {
      sub_2241471F8();
      v147 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147))
      {
        v219 = 0u;
        *(_OWORD *)v220 = 0u;
        *(_DWORD *)&v220[16] = 728325608;
        kdebug_trace();
        v148 = *(_QWORD *)(a3 + 16);
        if (v148 <= 1)
          v148 = 1;
        v188 = (v189 + v190) / (double)v148;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v147 + 24))(v147))
        {
          strcpy(__p, "meshing time per block");
          __p[23] = 22;
          *(_QWORD *)v213 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *(_QWORD *)&v213[8] = 2;
          v149 = sub_2241471F8();
          sub_2231AA49C((uint64_t)v149, v147, &v188, (uint64_t)__p, (__int128 *)v213);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        kdebug_trace();
      }
    }
  }
  v219 = 0u;
  *(_OWORD *)v220 = 0u;
  *(_DWORD *)&v220[16] = 728325624;
  kdebug_trace();
  v150 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
  if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v150 = v217.__r_.__value_.__l.__size_;
  if (v150 >= 0x11)
  {
    v151 = &v217;
    if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v151 = (std::string *)v217.__r_.__value_.__r.__words[0];
    v152 = v151->__r_.__value_.__r.__words[0];
    v153 = v151->__r_.__value_.__l.__size_;
    v154 = v151->__r_.__value_.__s.__data_[16];
    if (v152 == 0x6365722E64337663 && v153 == 0x73746174532E6E6FLL && v154 == 46)
    {
      v157 = sub_223187510();
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v158 = &v217;
      else
        v158 = (std::string *)v217.__r_.__value_.__r.__words[0];
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v159 = HIBYTE(v217.__r_.__value_.__r.__words[2]);
      else
        v159 = v217.__r_.__value_.__l.__size_;
      v160 = *(_QWORD *)(a3 + 16);
      if (v160 <= 1)
        v160 = 1;
      *(double *)__p = (v189 + v190) / (double)v160;
      sub_2231AA374((uint64_t *)v157, v158, v159, (uint64_t *)__p, (uint64_t)"meshing time per block", 22);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v217.__r_.__value_.__l.__data_);
  v219 = 0u;
  *(_OWORD *)v220 = 0u;
  *(_DWORD *)&v220[16] = 728325632;
  kdebug_trace();
  v161 = v189;
  v162 = v190;
  if (*(_QWORD *)(a3 + 16) <= 1uLL)
    v163 = 1;
  else
    v163 = *(_QWORD *)(a3 + 16);
  mach_absolute_time();
  v164 = atomic_load((unsigned __int8 *)&qword_255795560);
  if ((v164 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
  {
    mach_timebase_info((mach_timebase_info_t)__p);
    LODWORD(v176) = *(_DWORD *)&__p[4];
    LODWORD(v175) = *(_DWORD *)__p;
    *(double *)&qword_255795558 = (double)v175 / (double)v176;
    __cxa_guard_release(&qword_255795560);
  }
  v165 = atomic_load((unsigned __int8 *)&qword_25578DF68);
  if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_25578DF68))
  {
    qword_25578BBC8 = (uint64_t)&off_24EC37778;
    sub_223476B20((uint64_t)&qword_25578BBD0);
    __cxa_atexit((void (*)(void *))sub_223FDB180, &qword_25578BBC8, &dword_22314D000);
    __cxa_guard_release(&qword_25578DF68);
  }
  std::mutex::lock(&stru_25578CB98);
  v166 = (v161 + v162) / (double)v163;
  v167 = *(double *)&qword_25578CBD8;
  if (*(double *)&qword_25578CBD8 <= v166)
    v167 = (v161 + v162) / (double)v163;
  if (byte_25578CBE0)
    v166 = v167;
  qword_25578CBD8 = *(_QWORD *)&v166;
  byte_25578CBE0 = 1;
  std::mutex::unlock(&stru_25578CB98);
  kdebug_trace();
  v201 = &off_24EC20828;
  v168 = (std::__shared_weak_count *)*((_QWORD *)&v195 + 1);
  if (*((_QWORD *)&v195 + 1))
  {
    v169 = (unint64_t *)(*((_QWORD *)&v195 + 1) + 8);
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
      std::__shared_weak_count::__release_weak(v168);
    }
  }
  v171 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v172 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  return kdebug_trace();
}

void sub_223A7299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  __cxa_guard_abort(&qword_25578DF68);
  sub_2231874DC((uint64_t)&STACK[0x260]);
  sub_223A710B0(&a24);
  sub_2231874DC((uint64_t)&a59);
  _Unwind_Resume(a1);
}

_DWORD *sub_223A72B1C(uint64_t a1, _DWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v27;
  int v28;
  char **v29;

  v3 = *(char **)a1;
  v4 = *(char **)(a1 + 8);
  v5 = (uint64_t)&v4[-*(_QWORD *)a1];
  v6 = v5 >> 2;
  v7 = (v5 >> 2) + 1;
  if (v7 >> 62)
    sub_22316E078();
  v9 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v9 >> 1 > v7)
    v7 = v9 >> 1;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
    v7 = 0x3FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    LODWORD(v29) = v7;
    v10 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
    v27 = (char *)&v29;
    v11 = ((uint64_t (*)(char **, uint64_t))off_24EC5E628[v10])(&v27, a1 + 24);
    v3 = *(char **)a1;
    v4 = *(char **)(a1 + 8);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = (_DWORD *)(v11 + 4 * v6);
  *v13 = *a2;
  v14 = v13 + 1;
  if (v4 != v3)
  {
    v15 = v4 - v3 - 4;
    if (v15 < 0x2C)
    {
      v16 = v4;
      goto LABEL_18;
    }
    if ((unint64_t)&v4[-v11 - v5] < 0x20)
    {
      v16 = v4;
      do
      {
LABEL_18:
        v23 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *--v13 = v23;
      }
      while (v16 != v3);
      goto LABEL_19;
    }
    v17 = (v15 >> 2) + 1;
    v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
    v16 = &v4[-v18];
    v13 = (_DWORD *)((char *)v13 - v18);
    v19 = (_OWORD *)(v11 + 4 * v6 - 16);
    v20 = (__int128 *)(v4 - 16);
    v21 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v22 = *v20;
      *(v19 - 1) = *(v20 - 1);
      *v19 = v22;
      v19 -= 2;
      v20 -= 2;
      v21 -= 8;
    }
    while (v21);
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_18;
  }
LABEL_19:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  v24 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11 + 4 * v12;
  if (v3)
  {
    v27 = v3;
    v28 = (unint64_t)(v24 - (_QWORD)v3) >> 2;
    v25 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v25 == -1)
      sub_22316DD70();
    v29 = &v27;
    ((void (*)(char ***, uint64_t))off_24EC5E5F8[v25])(&v29, a1 + 24);
  }
  return v14;
}

uint64_t sub_223A72CE0(uint64_t result, unint64_t a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  unint64_t v25;
  int8x8_t v26;
  int8x8_t *v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t *v30;
  unint64_t v31;
  int8x8_t v32;
  int8x8_t *v33;
  unint64_t v34;
  _QWORD **v35;
  _QWORD **v36;
  unint64_t v37;
  _QWORD **v38;
  char *v39;
  __int128 *v40;
  unint64_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD **v46;
  int v47;
  _QWORD *v48;

  v5 = result;
  v7 = *(char **)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (!a2)
    {
LABEL_56:
      *(_QWORD *)(result + 8) = v7;
      return result;
    }
    v19 = &v7[a2];
    if (a2 >= 8 && (v7 >= a3 + 1 || v19 <= a3))
    {
      if (a2 < 0x20)
      {
        v21 = 0;
        goto LABEL_36;
      }
      v21 = a2 & 0xFFFFFFFFFFFFFFE0;
      v29 = vld1q_dup_s8(a3);
      v30 = (int8x16_t *)(v7 + 16);
      v31 = a2 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v30[-1] = v29;
        *v30 = v29;
        v30 += 2;
        v31 -= 32;
      }
      while (v31);
      if (v21 == a2)
        goto LABEL_55;
      if ((a2 & 0x18) != 0)
      {
LABEL_36:
        v32 = vld1_dup_s8(a3);
        v33 = (int8x8_t *)&v7[v21];
        v34 = v21 - (a2 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          *v33++ = v32;
          v34 += 8;
        }
        while (v34);
        v7 += a2 & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
          goto LABEL_55;
        goto LABEL_54;
      }
      v7 += v21;
    }
    do
LABEL_54:
      *v7++ = *a3;
    while (v7 != v19);
LABEL_55:
    v7 = v19;
    goto LABEL_56;
  }
  v8 = *(_QWORD *)result;
  v9 = &v7[-*(_QWORD *)result];
  v10 = (unint64_t)&v9[a2];
  if ((uint64_t)&v9[a2] < 0)
    sub_22316E078();
  v11 = v6 - v8;
  if (2 * v11 > v10)
    v10 = 2 * v11;
  v12 = v11 >= 0x3FFFFFFFFFFFFFFFLL;
  v13 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v10;
  if (v13)
  {
    LODWORD(v48) = v13;
    v14 = *(unsigned int *)(result + 28);
    if ((_DWORD)v14 == -1)
      sub_22316DD70();
    v46 = &v48;
    result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC5E5D8[v14])(&v46, result + 24);
    v16 = (unint64_t)&v9[result];
    v17 = &v9[result + a2];
    v18 = &v9[result];
    if (a2 < 8)
      goto LABEL_41;
  }
  else
  {
    result = 0;
    v15 = 0;
    v16 = (unint64_t)&v7[-*(_QWORD *)v5];
    v17 = &v9[a2];
    v18 = (char *)v16;
    if (a2 < 8)
      goto LABEL_41;
  }
  if (v16 >= (unint64_t)(a3 + 1) || (v18 = (char *)v16, v17 <= a3))
  {
    if (a2 < 0x20)
    {
      v22 = 0;
      goto LABEL_28;
    }
    v22 = a2 & 0xFFFFFFFFFFFFFFE0;
    v23 = vld1q_dup_s8(a3);
    v24 = (int8x16_t *)&v9[result + 16];
    v25 = a2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v24[-1] = v23;
      *v24 = v23;
      v24 += 2;
      v25 -= 32;
    }
    while (v25);
    if (v22 == a2)
      goto LABEL_42;
    if ((a2 & 0x18) != 0)
    {
LABEL_28:
      v18 = (char *)(v16 + (a2 & 0xFFFFFFFFFFFFFFF8));
      v26 = vld1_dup_s8(a3);
      v27 = (int8x8_t *)&v7[v22 - v8 + result];
      v28 = v22 - (a2 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        *v27++ = v26;
        v28 += 8;
      }
      while (v28);
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
        goto LABEL_42;
      goto LABEL_41;
    }
    v18 = (char *)(v16 + v22);
  }
  do
LABEL_41:
    *v18++ = *a3;
  while (v18 != v17);
LABEL_42:
  v35 = *(_QWORD ***)v5;
  v36 = *(_QWORD ***)(v5 + 8);
  v37 = (unint64_t)v36 - *(_QWORD *)v5;
  if (v36 != *(_QWORD ***)v5)
  {
    if (v37 < 0x20)
      goto LABEL_63;
    if ((unint64_t)v36 + v8 - (_QWORD)&v7[result] < 0x20)
      goto LABEL_63;
    v38 = (_QWORD **)((char *)v36 - (v37 & 0xFFFFFFFFFFFFFFE0));
    v16 -= v37 & 0xFFFFFFFFFFFFFFE0;
    v39 = &v9[result - 16];
    v40 = (__int128 *)(v36 - 2);
    v41 = v37 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v42 = *v40;
      *((_OWORD *)v39 - 1) = *(v40 - 1);
      *(_OWORD *)v39 = v42;
      v39 -= 32;
      v40 -= 2;
      v41 -= 32;
    }
    while (v41);
    v36 = v38;
    if (v37 != (v37 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_63:
      do
      {
        v43 = *((_BYTE *)v36 - 1);
        v36 = (_QWORD **)((char *)v36 - 1);
        *(_BYTE *)--v16 = v43;
      }
      while (v36 != v35);
    }
    v36 = *(_QWORD ***)v5;
  }
  *(_QWORD *)v5 = v16;
  *(_QWORD *)(v5 + 8) = v17;
  v44 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = result + v15;
  if (v36)
  {
    v46 = v36;
    v47 = v44 - (_DWORD)v36;
    v45 = *(unsigned int *)(v5 + 28);
    if ((_DWORD)v45 == -1)
      sub_22316DD70();
    v48 = &v46;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_24EC5E5E8[v45])(&v48, v5 + 24);
  }
  return result;
}

unsigned __int8 *sub_223A73004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X8>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>, float32x4_t a7@<Q4>, unsigned int a8@<S5>, unsigned int a9@<S6>)
{
  uint64_t v13;
  float v14;
  float32x4_t v15;
  signed int v16;
  int32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  _BOOL4 v37;
  uint64_t v38;
  unsigned __int8 *result;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  float32x4_t v46;
  unsigned int v47;
  unsigned int v48;
  float32x4_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  float v56;
  float v57;
  unint64_t v58;
  float32x2_t v59;
  __int32 v60;
  int v61;
  char v62;
  int v63;

  if (a3 >= 4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlock.cpp", 44, (uint64_t)"level <= cfg::kNumMeshLevels", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v13 = (1 << a3);
  v14 = 1.0 / (float)(int)v13;
  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  v15 = vmulq_n_f32(a5, v14);
  v16 = vcvtms_s32_f32(v15.f32[2]) << a3;
  v17 = (int32x2_t)vshl_u32((uint32x2_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v15.f32)), (uint32x2_t)vdup_n_s32(a3));
  *(float32x2_t *)a6.f32 = vcvt_f32_s32(v17);
  a6.f32[2] = (float)v16;
  v18 = vsubq_f32(a5, a6);
  v19 = vmulq_n_f32(v18, v14);
  v60 = v19.i32[2];
  v59 = *(float32x2_t *)v19.f32;
  a7.i32[0] = v19.i32[1];
  a6.i32[0] = v19.i32[2];
  v20 = floorf(v19.f32[0]);
  v21 = v19.i32[0] | 0x80000000;
  if (v19.i32[0] < 0)
    v21 = -v19.i32[0];
  if (v20 < 0)
    v22 = -v20;
  else
    v22 = v20 | 0x80000000;
  v23 = v22 - v21;
  v24 = v21 >= v22;
  v25 = v21 - v22;
  if (!v24)
    v25 = v23;
  v26 = v25 < 5;
  v27 = floorf(v19.f32[1]);
  if (v19.i32[1] < 0)
    v28 = -v19.i32[1];
  else
    v28 = v19.i32[1] | 0x80000000;
  if (v27 < 0)
    v29 = -v27;
  else
    v29 = v27 | 0x80000000;
  v30 = v29 - v28;
  v24 = v28 >= v29;
  v31 = v28 - v29;
  if (!v24)
    v31 = v30;
  v32 = v31 < 5;
  v18.f32[0] = floorf(v19.f32[2]);
  v33 = v19.i32[2] | 0x80000000;
  if (v19.i32[2] < 0)
    v33 = -v19.i32[2];
  if (v18.i32[0] < 0)
    v34 = -v18.i32[0];
  else
    v34 = v18.i32[0] | 0x80000000;
  v35 = v34 - v33;
  v24 = v33 >= v34;
  v36 = v33 - v34;
  if (!v24)
    v36 = v35;
  v37 = v36 < 5;
  v38 = (9 * v17.i32[1] + v17.i32[0] + 81 * v16);
  result = (unsigned __int8 *)(a1 + 4 * v38);
  v40 = !v37;
  if (v26 && v32 && (v40 & 1) == 0)
  {
    *(_WORD *)a4 = *(_WORD *)result;
    a4[2] = result[2];
    a4[3] = *(_BYTE *)(a1 + 4 * v38 + 3);
LABEL_37:
    a4[4] = 1;
    return result;
  }
  if (((!v32 | v40) & 1) == 0)
  {
    v52 = &result[4 * (1 << a3)];
LABEL_36:
    result = sub_223A33B94(result, v52, (uint64_t)&v58, v19.f32[0], a6, v19.u32[1], a8);
    *(_DWORD *)a4 = v58;
    goto LABEL_37;
  }
  v41 = (9 * v13);
  if (((!v26 | v40) & 1) == 0)
  {
    v52 = &result[4 * v41];
    v19.i32[0] = v19.i32[1];
    goto LABEL_36;
  }
  v42 = 81 * v13;
  if (v26 && v32)
  {
    v52 = &result[4 * v42];
    v19.i32[0] = v19.i32[2];
    goto LABEL_36;
  }
  if (v26)
  {
    v43 = 4 * (9 * v13);
    v44 = &result[4 * v42];
    v45 = &v44[v43];
    v56 = v19.f32[1];
    v57 = v19.f32[2];
    sub_223A33B94(result, &result[v43], (uint64_t)&v61, v19.f32[1], a6, v19.u32[1], a8);
    LODWORD(v58) = v61;
    BYTE4(v58) = 1;
    sub_223A33B94(v44, v45, (uint64_t)&v63, v56, v46, v47, v48);
    v61 = v63;
    v62 = 1;
    result = sub_223A33B94((unsigned __int8 *)&v58, (unsigned __int8 *)&v61, (uint64_t)&v63, v57, v49, v50, v51);
    *(_DWORD *)a4 = v63;
    a4[4] = 1;
    return result;
  }
  v53 = &result[4 * (1 << a3)];
  if (v32)
  {
    v54 = &result[4 * v42];
    v55 = &v54[4 * v13];
    v58 = __PAIR64__(v19.u32[2], v19.u32[0]);
    return sub_223A8DF60(result, v53, v54, v55, (uint64_t)&v58, a4, v19, *(double *)&v17, v18, a6, a7, a8);
  }
  v54 = &result[4 * v41];
  v55 = &v54[4 * v13];
  if (v37)
  {
    v58 = v19.i64[0];
    return sub_223A8DF60(result, v53, v54, v55, (uint64_t)&v58, a4, v19, *(double *)&v17, v18, a6, a7, a8);
  }
  return sub_223A8E1DC(result, v53, v54, v55, &result[4 * v42], &result[4 * v42 + 4 * v13], &result[4 * v42 + 4 * v41], &result[4 * v42 + 4 * v41 + 4 * v13], a4, v19, v18, a6, a7, a8, a9, &v59);
}

uint64_t sub_223A73360@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  float v5;
  int v6;
  int v7;
  float v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;

  if (!*(_BYTE *)(a1 + 84))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)(a1 + 8);
      v5 = *(float *)(a1 + 100);
      v6 = *(_DWORD *)(a1 + 280);
      v7 = *(_DWORD *)(a1 + 20);
      goto LABEL_9;
    }
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 152, (uint64_t)&unk_2245AD60A, 0, (uint64_t)"No valid meshing mapper exists.", 31, (void (*)(void **))sub_22457406C);
    goto LABEL_14;
  }
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(float *)(a1 + 100);
  v6 = *(_DWORD *)(a1 + 280);
  if (*(_BYTE *)(a1 + 48))
  {
    v7 = *(_DWORD *)(a1 + 20);
    goto LABEL_9;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 172, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C)|| (v7 = *(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 48))&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Common/src/MeshingConfig.cpp", 167, (uint64_t)"HasMapper(MeshingMapperType::Volumetric)", 40, (uint64_t)&unk_2245AD60A, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_14:
    abort();
  }
LABEL_9:
  v8 = (float)(*(float *)(a1 + 8) * *(float *)(a1 + 16)) * 4.0;
  v9 = *(_BYTE *)(a1 + 25);
  v10 = *(_BYTE *)(a1 + 40);
  result = operator new();
  v12 = result;
  *(_QWORD *)result = &off_24EC5E648;
  *(_DWORD *)(result + 8) = v4;
  *(float *)(result + 12) = v5;
  *(_DWORD *)(result + 16) = v6;
  *(_DWORD *)(result + 20) = v7;
  *(float *)(result + 24) = v8;
  *(_BYTE *)(result + 28) = v9;
  *(_BYTE *)(result + 29) = v10;
  if (v5 <= 0.0)
  {
    result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockFinder.cpp", 63, (uint64_t)"config_.max_depth > 0.0f", 24, (uint64_t)"max_depth should be positive.", 29, (void (*)(void **))sub_22457406C);
    if ((_DWORD)result)
      abort();
  }
  *a2 = v12;
  return result;
}

void sub_223A73528(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x1081C40752B76BFLL);
  _Unwind_Resume(a1);
}

void sub_223A73550()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223A73564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x2_t *a7, float32x2_t *a8, uint64_t *a9, uint64_t a10, _QWORD **a11, uint64_t a12)
{
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint64_t *v22;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  float *v34;
  int v35;
  float v36;
  float v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  __int16 *v43;
  __int16 *v44;
  float v45;
  int v46;
  _DWORD *v50;
  __int16 v51;
  int v53;
  int v54;
  float v58;
  _BOOL4 v60;
  char v61;
  char v62;
  float v64;
  float v65;
  float v66;
  char v67;
  __int128 v70;
  BOOL v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  __int32 *v103;
  _QWORD *v106;
  __int128 v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x2_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t v122;
  int32x2_t v123;
  __int128 v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float v130;
  float32x4_t v131;
  float32x4_t v132;
  int v133;
  float v134;
  signed int v135;
  int v136;
  int v137;
  int32x2_t v138;
  int32x2_t v139;
  float32x4_t v140;
  int32x4_t v141;
  float v142;
  float v143;
  int32x4_t v144;
  __int32 v145;
  __int32 v146;
  float v147;
  float v148;
  __int32 v149;
  _DWORD *v150;
  unint64_t i;
  _DWORD *v152;
  _DWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int32 *v158;
  _DWORD *v159;
  _DWORD *v160;
  uint64_t v161;
  _DWORD *v162;
  _QWORD *v163;
  uint64_t v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int32 *v170;
  _DWORD *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  int v175;
  BOOL v176;
  int v177;
  signed int v178;
  _DWORD *v179;
  uint64_t v180;
  _DWORD *v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  _BYTE *v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  _DWORD *v192;
  uint64_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float v196;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  __int32 v200;
  __int32 v201;
  __int32 v202;
  int v203;
  uint64_t v204;
  __int32 v205;
  __int32 v206;
  __int32 v207;
  int v208;
  int v209;
  unint64_t v210;
  float v211;
  float32x4_t v212;
  float32x4_t v213;
  unsigned int v214;
  unint64_t v215;
  _DWORD *v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float32x4_t v229;
  signed int v230;
  int v231;
  int v232;
  unint64_t v233;
  int8x8_t v234;
  int32x2_t v235;
  int32x4_t v236;
  float v237;
  float v238;
  float v239;
  float v240;
  int v241;
  int v242;
  float v243;
  float v244;
  __int32 v245;
  _DWORD *v246;
  unint64_t j;
  _DWORD *v248;
  _DWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  _DWORD *v254;
  _DWORD *v255;
  _DWORD *v256;
  uint64_t v257;
  _DWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _DWORD *v263;
  _DWORD *v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  _QWORD **v268;
  _QWORD *v269;
  _QWORD *v270;
  int v271;
  BOOL v272;
  int v273;
  signed int v274;
  _DWORD *v275;
  _QWORD *v276;
  _DWORD *v277;
  uint64_t v278;
  _BYTE *v279;
  uint64_t v280;
  _BYTE *v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  _DWORD *v288;
  uint64_t v289;
  float32x4_t v290;
  float32x4_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  char *v295;
  __int32 v296;
  unsigned int v297;
  int v298;
  int32x2_t v299;
  uint64_t v300;
  int v301;
  __int32 v302;
  int v303;
  int v304;
  __int32 v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  __int32 v309;
  BOOL v310;
  int v311;
  int v312;
  _DWORD *v313;
  uint64_t v314;
  _DWORD *v315;
  uint64_t v316;
  _BYTE *v317;
  uint64_t v318;
  _BYTE *v319;
  int v320;
  uint64_t v321;
  int v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  _DWORD *v326;
  uint64_t v327;
  uint64_t v329;
  float32x2_t *v332;
  float32x2_t *v333;
  __int32 v334;
  int v335;
  __int128 v336;
  int v338;
  int v339;
  int v340;
  __int128 v341;
  __int32 v342;
  uint64_t v343;
  __int32 v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  float32x4_t v349;
  int v350;
  int v351;
  float32x4_t v352;
  __int32 v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  __int32 v358;
  unint64_t v359;
  void **v360;
  unsigned int v361;
  int v362;
  float32x4_t v363;
  float32x4_t v364;
  int v365;
  BOOL v366;
  __int128 v367;
  float32x4_t v368;
  float32x4_t v369;
  void **v370;
  unint64_t v371;
  __int128 v372;
  __int128 v373;
  int v374;
  unint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  void *v381;
  void *v382;
  void *v383;
  void *v384;
  void *__p;
  void *v386;
  __int128 v387;
  __int128 v388;
  int v389;
  void *v390;
  void *v391;
  void *v392;
  void *v393;
  uint64_t v394;
  int v395;
  float32x2_t v396;
  __int32 v397;
  int32x2_t v398;
  int v399;
  int v400;
  __int32 v401;
  _BYTE v402[12];
  uint64_t v403;
  uint64_t v404;
  int32x2_t v405;
  __int32 v406;
  int32x2_t v407;
  __int32 v408;
  _BYTE v409[20];
  __int32 v410;
  __int128 v411;
  __int128 v412;
  int v413;

  v372 = 0u;
  v373 = 0u;
  v374 = 728301660;
  kdebug_trace();
  v345 = a2;
  v333 = a7;
  v371 = 2139095039;
  v387 = 0u;
  v388 = 0u;
  v389 = 728301668;
  kdebug_trace();
  v22 = a9;
  if (*(_DWORD *)(a4 + 32))
    _ZF = *(_DWORD *)(a4 + 36) == 0;
  else
    _ZF = 1;
  v24 = !_ZF;
  v340 = *(_DWORD *)(a2 + 36);
  v25 = (v340 * *(_DWORD *)(a2 + 32));
  v26 = (void *)*a9;
  v335 = v24;
  if (0x8E38E38E38E38E39 * ((a9[2] - *a9) >> 2) < v25)
  {
    v27 = a9[1];
    v28 = (char *)operator new(36 * v25);
    v29 = &v28[v27 - (_QWORD)v26];
    v30 = v29;
    if ((void *)v27 != v26)
    {
      v30 = &v28[v27 - (_QWORD)v26];
      do
      {
        v31 = *(_QWORD *)(v27 - 36);
        v27 -= 36;
        v32 = *(_DWORD *)(v27 + 8);
        *(_QWORD *)(v30 - 36) = v31;
        v30 -= 36;
        *((_DWORD *)v30 + 2) = v32;
        v33 = *(_QWORD *)(v27 + 12);
        *(_QWORD *)(v30 + 17) = *(_QWORD *)(v27 + 17);
        *(_QWORD *)(v30 + 12) = v33;
        *(_DWORD *)(v30 + 26) = *(_DWORD *)(v27 + 26);
        LOWORD(v33) = *(_WORD *)(v27 + 30);
        v30[32] = *(_BYTE *)(v27 + 32);
        *((_WORD *)v30 + 15) = v33;
      }
      while ((void *)v27 != v26);
    }
    *a9 = (uint64_t)v30;
    a9[1] = (uint64_t)v29;
    a9[2] = (uint64_t)&v28[36 * v25];
    v24 = v335;
    if (v26)
    {
      operator delete(v26);
      v24 = v335;
      v30 = (char *)*a9;
      v340 = *(_DWORD *)(v345 + 36);
    }
    a9[1] = (uint64_t)v30;
    v343 = a1;
    if (v340)
      goto LABEL_14;
LABEL_83:
    v34 = (float *)v333;
    goto LABEL_85;
  }
  v30 = (char *)*a9;
  a9[1] = (uint64_t)v26;
  v343 = a1;
  if (!v340)
    goto LABEL_83;
LABEL_14:
  v34 = (float *)v333;
  if (!*(_DWORD *)(v345 + 32))
    goto LABEL_85;
  v329 = a5;
  v35 = 0;
  v37 = *((float *)&v371 + 1);
  LODWORD(v36) = v371;
  v332 = a8;
  do
  {
    if (*(_DWORD *)(a4 + 36))
      v38 = *(_DWORD *)(a4 + 32) == 0;
    else
      v38 = 1;
    if (v38)
      v39 = 0;
    else
      v39 = *(_QWORD *)(a4 + 24) + 4 * (*(_DWORD *)(a4 + 44) * v35);
    v40 = *(unsigned int *)(v345 + 32);
    if ((_DWORD)v40)
    {
      v41 = 0;
      v42 = (unsigned __int8 *)(*(_QWORD *)(a6 + 24) + (*(_DWORD *)(a6 + 44) * v35));
      v43 = (__int16 *)(*(_QWORD *)(a3 + 24) + 2 * (*(_DWORD *)(a3 + 44) * v35));
      v44 = (__int16 *)(*(_QWORD *)(v345 + 24) + 2 * (*(_DWORD *)(v345 + 44) * v35));
      v45 = (float)v35;
      v46 = v35 << 16;
      v357 = v35;
      v355 = v39;
      v351 = v35 << 16;
      v348 = *(unsigned int *)(v345 + 32);
      do
      {
        v51 = *v43++;
        _H1 = v51;
        v54 = *v42++;
        v53 = v54;
        if (v54)
        {
          _H10 = *v44;
          __asm { FCVT            S0, H10 }
          if (_S0 > -65504.0 && _S0 >= 0.00001)
          {
            if (*(float *)(a1 + 12) <= _S0)
            {
              if (v24)
              {
                v60 = 0;
                goto LABEL_47;
              }
            }
            else
            {
              v58 = *(float *)(a1 + 16);
              __asm { FCVT            S1, H1 }
              v60 = v58 <= _S1;
              if (v58 <= _S1)
                v61 = 1;
              else
                v61 = v24;
              if ((v61 & 1) != 0)
              {
                if (v58 <= _S1)
                {
                  v62 = *(float *)(a1 + 20) <= _S0;
                  if (v36 > _S0)
                    v36 = _S0;
                  if (v37 < _S0)
                    v37 = _S0;
                  v371 = __PAIR64__(LODWORD(v37), LODWORD(v36));
                  if (!v39)
                  {
LABEL_55:
                    v67 = 2;
                    _H1 = -1025;
LABEL_56:
                    __asm { FCVT            S11, H1 }
                    if (v60 || _S11 > -65504.0)
                    {
                      v20.f32[0] = (float)(v34[8] * (float)(int)v41) + v34[10];
                      v21.f32[0] = (float)(v34[9] * v45) + v34[11];
                      *(float32x2_t *)&v70 = vadd_f32(a8[4], vmla_n_f32(vmul_n_f32(*a8, v20.f32[0]), a8[2], v21.f32[0]));
                      _D0.i32[0] = a8[3].i32[0];
                      v19.i32[0] = a8[1].i32[0];
                      v19 = vmla_f32(vmul_f32(v19, v20), v21, _D0);
                      v18.i32[0] = a8[5].i32[0];
                      _D0 = vadd_f32(v18, v19);
                      *((float32x2_t *)&v70 + 1) = _D0;
                      v72 = _S11 <= -65504.0 && v53 == 2;
                      v73 = a9[2];
                      if ((unint64_t)v30 < v73)
                      {
                        __asm { FCVT            S0, H10 }
                        *(_QWORD *)v30 = v70;
                        v50 = v30 + 8;
                        *((_DWORD *)v30 + 3) = _S0;
                        v30[16] = v62;
                        *((float *)v30 + 5) = _S11;
                        v30[24] = v67;
                        *(_DWORD *)(v30 + 26) = (unsigned __int16)v41 | v46;
                        v30[30] = v60;
                        v30[31] = v72;
                        v30[32] = 0;
                        v30 += 36;
                        *v50 = DWORD2(v70);
                      }
                      else
                      {
                        v74 = (char *)*a9;
                        v75 = 0x8E38E38E38E38E39 * ((uint64_t)&v30[-*a9] >> 2);
                        v76 = v75 + 1;
                        if (v75 + 1 > 0x71C71C71C71C71CLL)
                          sub_22316E078();
                        v362 = (unsigned __int16)v41 | v46;
                        v366 = v72;
                        v367 = v70;
                        v77 = 0x8E38E38E38E38E39 * ((uint64_t)(v73 - (_QWORD)v74) >> 2);
                        if (2 * v77 > v76)
                          v76 = 2 * v77;
                        if (v77 >= 0x38E38E38E38E38ELL)
                          v78 = 0x71C71C71C71C71CLL;
                        else
                          v78 = v76;
                        if (v78 > 0x71C71C71C71C71CLL)
                          sub_223174E94();
                        v79 = v60;
                        v359 = v78;
                        v80 = (char *)operator new(36 * v78);
                        v81 = &v80[36 * v75];
                        _D0.i32[1] = DWORD1(v367);
                        *(_QWORD *)v81 = v367;
                        *((_DWORD *)v81 + 2) = DWORD2(v367);
                        __asm { FCVT            S0, H10 }
                        *((_DWORD *)v81 + 3) = _D0.i32[0];
                        v81[16] = v62;
                        *((float *)v81 + 5) = _S11;
                        v81[24] = v67;
                        *(_DWORD *)(v81 + 26) = v362;
                        v81[30] = v79;
                        v81[31] = v366;
                        v81[32] = 0;
                        v82 = v81;
                        if (v30 == v74)
                        {
                          a1 = v343;
                        }
                        else
                        {
                          a1 = v343;
                          do
                          {
                            v83 = *(_QWORD *)(v30 - 36);
                            v30 -= 36;
                            v84 = *((_DWORD *)v30 + 2);
                            *(_QWORD *)(v82 - 36) = v83;
                            v82 -= 36;
                            *((_DWORD *)v82 + 2) = v84;
                            v85 = *(_QWORD *)(v30 + 12);
                            *(_QWORD *)(v82 + 17) = *(_QWORD *)(v30 + 17);
                            *(_QWORD *)(v82 + 12) = v85;
                            *(_DWORD *)(v82 + 26) = *(_DWORD *)(v30 + 26);
                            LOWORD(v85) = *((_WORD *)v30 + 15);
                            v82[32] = v30[32];
                            *((_WORD *)v82 + 15) = v85;
                          }
                          while (v30 != v74);
                        }
                        v30 = v81 + 36;
                        *a9 = (uint64_t)v82;
                        a9[1] = (uint64_t)(v81 + 36);
                        a9[2] = (uint64_t)&v80[36 * v359];
                        if (v74)
                          operator delete(v74);
                        a8 = v332;
                        v34 = (float *)v333;
                        v24 = v335;
                        v35 = v357;
                        v39 = v355;
                        v46 = v351;
                        v40 = v348;
                      }
                      a9[1] = (uint64_t)v30;
                    }
                    goto LABEL_27;
                  }
LABEL_48:
                  _S1 = *(float *)(v39 + 4 * v41);
                  if (_S1 <= -65504.0)
                    goto LABEL_55;
                  v64 = 0.4;
                  if (*(_BYTE *)(a1 + 29))
                    v64 = 0.8;
                  v65 = 0.16;
                  if (_S0 <= 3.5)
                  {
LABEL_54:
                    if ((float)(_S0 - _S1) < v65)
                      goto LABEL_55;
                  }
                  else
                  {
                    v66 = v64 * 0.5;
                    if (_S0 > 4.5)
                    {
                      v65 = (float)(v64 * _S0) + (float)((float)(v66 + (float)(v64 * -4.5)) + 0.16);
                      goto LABEL_54;
                    }
                    if ((float)(_S0 - _S1) < (float)((float)((float)(_S0 + -3.5) * (float)((float)(_S0 + -3.5) * v66))
                                                    + 0.16))
                      goto LABEL_55;
                  }
                  __asm
                  {
                    FCVT            H1, S1
                    FCVT            S0, H1
                  }
                  v67 = *(float *)(a1 + 20) <= _S0;
                  goto LABEL_56;
                }
LABEL_47:
                v62 = 2;
                _H10 = -1025;
                if (!v39)
                  goto LABEL_55;
                goto LABEL_48;
              }
            }
          }
        }
LABEL_27:
        ++v44;
        ++v41;
      }
      while (v41 != v40);
    }
    ++v35;
  }
  while (v35 != v340);
  v22 = a9;
  a5 = v329;
LABEL_85:
  kdebug_trace();
  if (*(_BYTE *)(a1 + 29))
  {
    kdebug_trace();
    if (*(_DWORD *)(a5 + 56))
    {
      if (*(_DWORD *)(a5 + 60))
      {
        v93 = *v22;
        v94 = v22[1];
        if (*v22 != v94)
        {
          v95 = *(_DWORD *)(a5 + 64);
          v96 = *(_DWORD *)(a5 + 68);
          v97 = *(_QWORD *)(a5 + 24);
          v98 = *(_QWORD *)(v345 + 24);
          v99 = *(_DWORD *)(v345 + 40);
          v100 = *(_DWORD *)(v345 + 44);
          do
          {
            if (*(float *)(v93 + 20) > -65504.0)
            {
              v101 = *(unsigned __int16 *)(v93 + 26);
              v102 = *(unsigned __int16 *)(v93 + 28);
              v87.f32[0] = (float)(v34[8] * (float)v101) + v34[10];
              v88.f32[0] = (float)(v34[9] * (float)v102) + v34[11];
              v89.f32[0] = v87.f32[0] * v87.f32[0];
              v89 = vmla_f32(v89, v88, v88);
              v89.f32[0] = 1.0 / sqrtf(v89.f32[0] + 1.0);
              v103 = (__int32 *)(v97 + 4 * (v95 * v101 + v96 * v102));
              v90.i32[0] = *v103;
              v91.i32[0] = v103[1];
              v92.i32[0] = v103[2];
              v88 = vmul_f32(v88, v89);
              v87 = vmla_f32(vmla_f32(vmul_f32(vmul_f32(v87, v89), v90), v91, v88), v92, v89);
              if (v87.f32[0] > -0.5)
              {
                _H3 = *(_WORD *)(v98 + 2 * (v99 * v101 + v100 * v102));
                __asm { FCVT            S3, H3 }
                if (_S3 > 2.5)
                {
                  *(_DWORD *)(v93 + 20) = -947920896;
                  *(_BYTE *)(v93 + 24) = 2;
                  *(_BYTE *)(v93 + 32) = 1;
                }
              }
            }
            v93 += 36;
          }
          while (v93 != v94);
        }
      }
    }
    kdebug_trace();
  }
  v411 = 0u;
  v412 = 0u;
  v413 = 728301684;
  kdebug_trace();
  sub_223198030(a10, *(_QWORD **)(a10 + 8));
  *(_QWORD *)a10 = a10 + 8;
  *(_QWORD *)(a10 + 16) = 0;
  v370 = (void **)(a10 + 8);
  *(_QWORD *)(a10 + 8) = 0;
  sub_223198030((uint64_t)a11, a11[1]);
  *a11 = a11 + 1;
  a11[2] = 0;
  v360 = (void **)(a11 + 1);
  a11[1] = 0;
  v106 = (_QWORD *)(a12 + 8);
  sub_223198030(a12, *(_QWORD **)(a12 + 8));
  *(_QWORD *)a12 = a12 + 8;
  *(_QWORD *)(a12 + 16) = 0;
  *(_QWORD *)(a12 + 8) = 0;
  LODWORD(v107) = *(_DWORD *)(a1 + 8);
  v336 = v107;
  sub_223EA5FD0((float32x2_t *)&v371, a8, v333, (uint64_t)v409, v108, v109);
  if (*(float *)&v371 > *((float *)&v371 + 1))
  {
    *(_QWORD *)&v409[12] = 0;
    v410 = 0;
    *(_QWORD *)v409 = *(_QWORD *)((unint64_t)v409 | 0xC);
    *(_DWORD *)&v409[8] = *(_DWORD *)(((unint64_t)v409 | 0xC) + 8);
  }
  v111 = 1.0 / *(float *)(a1 + 8);
  v404 = 0;
  *(_DWORD *)&v402[8] = 0;
  v403 = 0;
  v112 = (int32x4_t)vmulq_n_f32(*(float32x4_t *)v409, v111);
  v110.i64[0] = *(_QWORD *)&v409[12];
  v110.i32[2] = v410;
  v113 = (int32x4_t)vmulq_n_f32(v110, v111);
  v114 = vadd_s32((int32x2_t)(*(_QWORD *)&vcvt_s32_f32(vrndm_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v113, v112))) & 0xFFFFFFF8FFFFFFF8), (int32x2_t)0xFFFFFFF800000008);
  v406 = v114.i32[1];
  v408 = v114.i32[0];
  v405 = vadd_s32((int32x2_t)(*(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v112.i8)) & 0xFFFFFFF8FFFFFFF8), (int32x2_t)0x700000007);
  v407 = vadd_s32((int32x2_t)(*(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v113.i8)) & 0xFFFFFFF8FFFFFFF8), (int32x2_t)0x800000008);
  v398 = vsra_n_s32((int32x2_t)0x100000001, vsub_s32(v407, v405), 3uLL);
  v401 = v398.i32[0];
  v399 = ((v114.i32[0] - v114.i32[1]) >> 3) + 1;
  v400 = 1;
  *(_QWORD *)v402 = (v398.i32[1] * v398.i32[0]);
  sub_223A6BE84((uint64_t)&v402[4], *(_DWORD *)v402 * v399, 0);
  *(float32x2_t *)v115.f32 = a8[6];
  v115.i32[2] = a8[7].i32[0];
  v349 = v115;
  v115.i32[0] = *(_DWORD *)(a1 + 24);
  v396 = vmul_n_f32((float32x2_t)0x3F0000003E800000, v115.f32[0]);
  v397 = v115.i32[0];
  v394 = 0x8000000080000000;
  v395 = 0x7FFFFFFF;
  sub_223902174((uint64_t)&v387, &v394, 8);
  sub_223902174((uint64_t)&v377, &v394, 8);
  v122 = *v22;
  v346 = v22[1];
  if (*v22 != v346)
  {
    v123 = vdup_n_s32(0x7F7FFFFFu);
    v124 = v336;
    *(float *)&v124 = 1.0 / *(float *)&v336;
    v341 = v124;
    while (1)
    {
      v117.i64[0] = *(_QWORD *)v122;
      v131 = v117;
      v118.i32[0] = *(_DWORD *)(v122 + 8);
      v130 = *(float *)(v122 + 12);
      v356 = v122;
      v131.i32[2] = v118.i32[0];
      v117 = vmulq_n_f32(v131, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v131.f32, *(float32x2_t *)v131.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v122, 1), *(float32x2_t *)v122, 1), *(float32x2_t *)v118.f32, *(float32x2_t *)v118.f32).f32[0]));
      v352 = v117;
      if (v130 <= -65504.0 || !*(_BYTE *)(v122 + 30))
        goto LABEL_195;
      v117.i32[0] = v396.i32[*(unsigned __int8 *)(v122 + 16)];
      v132 = vmlsq_lane_f32(vmlaq_n_f32(v349, v131, v130), v352, *(float32x2_t *)v117.f32, 0);
      v133 = *(unsigned __int8 *)(v122 + 31);
      v131 = vmulq_n_f32(v132, *(float *)&v341);
      v134 = v117.f32[0] + v117.f32[0];
      v135 = vcvtms_s32_f32(v131.f32[2]) & 0xFFFFFFF8;
      v136 = v135 + 8;
      if (v352.f32[2] <= 0.0)
        v137 = -8;
      else
        v137 = 8;
      if (v352.f32[2] <= 0.0)
        v136 = v135;
      v338 = v137;
      v118.i64[0] = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v131.f32)) & 0xFFFFFFF8FFFFFFF8;
      *(int32x2_t *)v131.f32 = vcgtz_f32(*(float32x2_t *)v352.f32);
      v138 = (int32x2_t)vbsl_s8(*(int8x8_t *)v131.f32, (int8x8_t)vadd_s32(*(int32x2_t *)v118.f32, (int32x2_t)0x800000008), *(int8x8_t *)v118.f32);
      v139 = (int32x2_t)vorr_s8(vand_s8(*(int8x8_t *)v131.f32, (int8x8_t)0x800000008), (int8x8_t)(*(_QWORD *)&vmvn_s8(*(int8x8_t *)v131.f32) & 0xFFFFFFF8FFFFFFF8));
      *(float32x2_t *)v131.f32 = vcvt_f32_s32(v139);
      v131.f32[2] = (float)v137;
      v121 = vmulq_n_f32(v131, *(float *)&v336);
      *(float32x2_t *)v131.f32 = vcvt_f32_s32(v138);
      v131.f32[2] = (float)v136;
      v140 = vmulq_n_f32(v131, *(float *)&v336);
      if (v133)
      {
        v141 = (int32x4_t)vsubq_f32(v140, v132);
        if (v352.f32[0] == 0.0)
        {
          v142 = 3.4028e38;
          v143 = 3.4028e38;
          *(int32x2_t *)v116.f32 = vdup_n_s32(0x7F7FFFFFu);
          v368 = v116;
          v119.i64[0] = v116.i64[0];
          if (v352.f32[1] != 0.0)
          {
LABEL_112:
            v119 = v121;
            v119.i32[0] = v141.i32[1];
            *(float32x2_t *)v119.f32 = vmul_n_f32(*(float32x2_t *)v119.f32, 1.0 / v352.f32[1]);
          }
        }
        else
        {
          v142 = (float)(1.0 / v352.f32[0]) * *(float *)v141.i32;
          v143 = (float)(1.0 / v352.f32[0]) * v121.f32[0];
          *(int32x2_t *)v116.f32 = vdup_n_s32(0x7F7FFFFFu);
          v368 = v116;
          v119.i64[0] = v116.i64[0];
          if (v352.f32[1] != 0.0)
            goto LABEL_112;
        }
        if (v352.f32[2] != 0.0)
        {
          v144 = vzip2q_s32(v141, (int32x4_t)v121);
          *(float32x2_t *)v144.i8 = vmul_n_f32(*(float32x2_t *)v144.i8, 1.0 / v352.f32[2]);
          v368 = (float32x4_t)v144;
        }
        v145 = v118.i32[1];
        v146 = v118.i32[0];
        v147 = v368.f32[1];
        v363 = v119;
        v148 = v119.f32[1];
        v149 = v139.i32[0];
        v334 = v139.i32[1];
        while (1)
        {
          v150 = __p;
          for (i = *((unsigned int *)__p + v377); i < v378; i = *((unsigned int *)__p + i))
          {
            v152 = (char *)v381 + 12 * i;
            if (v146 == *v152 && v145 == v152[1] && v135 == v152[2])
              break;
          }
          if (i != v378)
          {
            v165 = v383;
            v166 = i;
            v167 = *((unsigned int *)v383 + i);
            v168 = *((unsigned int *)__p + i);
            *((_DWORD *)__p + v167) = v168;
            v165[v168] = v167;
            v169 = v150[v377];
            v150[v166] = v169;
            v165[v169] = i;
            v150[v377] = i;
            v165[v166] = v377;
            goto LABEL_163;
          }
          if (v380 <= v379)
          {
            v170 = (__int32 *)((char *)v381 + 12 * v380);
            *v170 = v146;
            v170[1] = v145;
            v170[2] = v135;
            LODWORD(v170) = v380;
            v171 = __p;
            v172 = *((unsigned int *)__p + v377);
            v173 = 4 * v380;
            *(_DWORD *)((char *)__p + v173) = v172;
            v174 = (char *)v383;
            *((_DWORD *)v383 + v172) = (_DWORD)v170;
            v171[v377] = (_DWORD)v170;
            *(_DWORD *)&v174[v173] = v377;
            ++v380;
            v162 = (_DWORD *)*v106;
            v163 = (_QWORD *)(a12 + 8);
            v164 = a12 + 8;
            if (*v106)
              goto LABEL_130;
            goto LABEL_138;
          }
          v153 = v383;
          v154 = *((unsigned int *)v383 + v378);
          v155 = v154;
          v156 = *((unsigned int *)v383 + v154);
          v157 = *((unsigned int *)__p + v154);
          *((_DWORD *)__p + v156) = v157;
          v153[v157] = v156;
          v158 = (__int32 *)((char *)v381 + 12 * v154);
          *v158 = v146;
          v158[1] = v145;
          v158[2] = v135;
          v159 = __p;
          v160 = v383;
          v161 = *((unsigned int *)__p + v377);
          *(_DWORD *)((char *)__p + v155 * 4) = v161;
          v160[v161] = v154;
          v159[v377] = v154;
          v160[v155] = v377;
          v162 = (_DWORD *)*v106;
          v163 = (_QWORD *)(a12 + 8);
          v164 = a12 + 8;
          if (*v106)
            break;
LABEL_138:
          v179 = operator new(0x28uLL);
          v179[7] = v146;
          v179[8] = v145;
          v179[9] = v135;
          *(_QWORD *)v179 = 0;
          *((_QWORD *)v179 + 1) = 0;
          *((_QWORD *)v179 + 2) = v164;
          *v163 = v179;
          v180 = **(_QWORD **)a12;
          if (v180)
          {
            *(_QWORD *)a12 = v180;
            v179 = (_DWORD *)*v163;
          }
          v181 = (_DWORD *)*v106;
          _ZF = v179 == (_DWORD *)*v106;
          *((_BYTE *)v179 + 24) = _ZF;
          if (!_ZF)
          {
            do
            {
              v182 = *((_QWORD *)v179 + 2);
              if (*(_BYTE *)(v182 + 24))
                break;
              v183 = *(_BYTE **)(v182 + 16);
              v184 = *(_QWORD *)v183;
              if (*(_QWORD *)v183 == v182)
              {
                v187 = *((_QWORD *)v183 + 1);
                if (!v187 || (v188 = *(unsigned __int8 *)(v187 + 24), v185 = (_BYTE *)(v187 + 24), v188))
                {
                  if (*(_DWORD **)v182 == v179)
                  {
                    *(_BYTE *)(v182 + 24) = 1;
                    v183[24] = 0;
                    v191 = *(_QWORD *)(v182 + 8);
                    *(_QWORD *)v183 = v191;
                    if (v191)
                      goto LABEL_155;
                  }
                  else
                  {
                    v189 = *(uint64_t **)(v182 + 8);
                    v190 = *v189;
                    *(_QWORD *)(v182 + 8) = *v189;
                    if (v190)
                    {
                      *(_QWORD *)(v190 + 16) = v182;
                      v183 = *(_BYTE **)(v182 + 16);
                    }
                    v189[2] = (uint64_t)v183;
                    *(_QWORD *)(*(_QWORD *)(v182 + 16) + 8 * (**(_QWORD **)(v182 + 16) != v182)) = v189;
                    *v189 = v182;
                    *(_QWORD *)(v182 + 16) = v189;
                    v183 = (_BYTE *)v189[2];
                    v182 = *(_QWORD *)v183;
                    *((_BYTE *)v189 + 24) = 1;
                    v183[24] = 0;
                    v191 = *(_QWORD *)(v182 + 8);
                    *(_QWORD *)v183 = v191;
                    if (v191)
LABEL_155:
                      *(_QWORD *)(v191 + 16) = v183;
                  }
                  *(_QWORD *)(v182 + 16) = *((_QWORD *)v183 + 2);
                  *(_QWORD *)(*((_QWORD *)v183 + 2) + 8 * (**((_QWORD **)v183 + 2) != (_QWORD)v183)) = v182;
                  *(_QWORD *)(v182 + 8) = v183;
LABEL_161:
                  *((_QWORD *)v183 + 2) = v182;
                  break;
                }
              }
              else if (!v184 || (v186 = *(unsigned __int8 *)(v184 + 24), v185 = (_BYTE *)(v184 + 24), v186))
              {
                if (*(_DWORD **)v182 == v179)
                {
                  v193 = *((_QWORD *)v179 + 1);
                  *(_QWORD *)v182 = v193;
                  if (v193)
                  {
                    *(_QWORD *)(v193 + 16) = v182;
                    v183 = *(_BYTE **)(v182 + 16);
                  }
                  *((_QWORD *)v179 + 2) = v183;
                  *(_QWORD *)(*(_QWORD *)(v182 + 16) + 8 * (**(_QWORD **)(v182 + 16) != v182)) = v179;
                  *((_QWORD *)v179 + 1) = v182;
                  *(_QWORD *)(v182 + 16) = v179;
                  v183 = (_BYTE *)*((_QWORD *)v179 + 2);
                  *((_BYTE *)v179 + 24) = 1;
                  v183[24] = 0;
                  v182 = *((_QWORD *)v183 + 1);
                  v192 = *(_DWORD **)v182;
                  *((_QWORD *)v183 + 1) = *(_QWORD *)v182;
                  if (v192)
LABEL_159:
                    *((_QWORD *)v192 + 2) = v183;
                }
                else
                {
                  *(_BYTE *)(v182 + 24) = 1;
                  v183[24] = 0;
                  v182 = *((_QWORD *)v183 + 1);
                  v192 = *(_DWORD **)v182;
                  *((_QWORD *)v183 + 1) = *(_QWORD *)v182;
                  if (v192)
                    goto LABEL_159;
                }
                *(_QWORD *)(v182 + 16) = *((_QWORD *)v183 + 2);
                *(_QWORD *)(*((_QWORD *)v183 + 2) + 8 * (**((_QWORD **)v183 + 2) != (_QWORD)v183)) = v182;
                *(_QWORD *)v182 = v183;
                goto LABEL_161;
              }
              *(_BYTE *)(v182 + 24) = 1;
              v179 = v183;
              v183[24] = v183 == (_BYTE *)v181;
              *v185 = 1;
            }
            while (v183 != (_BYTE *)v181);
          }
          ++*(_QWORD *)(a12 + 16);
LABEL_163:
          if (v142 >= v363.f32[0])
          {
            v131.i32[1] = v368.i32[1];
            v116.i64[1] = v363.i64[1];
            if (v363.f32[0] < v368.f32[0])
            {
              if (v363.f32[0] > v134)
                goto LABEL_195;
              v145 += v334;
              v194 = v363;
              v194.f32[0] = v148 + v363.f32[0];
              v363 = v194;
              continue;
            }
          }
          else
          {
            v131.i32[1] = v368.i32[1];
            if (v142 < v368.f32[0])
            {
              if (v142 > v134)
                goto LABEL_195;
              v146 += v149;
              v142 = v143 + v142;
              continue;
            }
          }
          v131.i32[1] = v368.i32[1];
          if (v368.f32[0] > v134)
            goto LABEL_195;
          v195 = v368;
          v195.f32[0] = v147 + v368.f32[0];
          v368 = v195;
          v135 += v338;
        }
        while (1)
        {
LABEL_130:
          v164 = (uint64_t)v162;
          v175 = v162[7];
          v176 = v146 < v175;
          if (v146 == v175 && (v177 = *(_DWORD *)(v164 + 32), v176 = v145 < v177, v145 == v177))
          {
            v178 = *(_DWORD *)(v164 + 36);
            if (v135 < v178)
              goto LABEL_129;
            if (v178 >= v135)
              goto LABEL_163;
          }
          else if (v176)
          {
LABEL_129:
            v162 = *(_DWORD **)v164;
            v163 = (_QWORD *)v164;
            if (!*(_QWORD *)v164)
              goto LABEL_138;
            continue;
          }
          v162 = *(_DWORD **)(v164 + 8);
          if (!v162)
          {
            v163 = (_QWORD *)(v164 + 8);
            goto LABEL_138;
          }
        }
      }
      if (v352.f32[0] != 0.0)
        break;
      v131.i32[0] = 2139095039;
      v196 = 3.4028e38;
      v197 = (float32x2_t)v123;
      if (v352.f32[1] != 0.0)
        goto LABEL_180;
LABEL_181:
      v199 = (float32x2_t)v123;
      if (v352.f32[2] != 0.0)
      {
        v120 = (float32x4_t)vzip2q_s32((int32x4_t)vsubq_f32(v140, v132), (int32x4_t)v121);
        v199 = vmul_n_f32(*(float32x2_t *)v120.f32, 1.0 / v352.f32[2]);
      }
      v200 = v405.i32[1];
      v201 = v406;
      v202 = v401;
      v203 = *(_DWORD *)v402;
      v204 = *(_QWORD *)&v402[4];
      v205 = v118.i32[0];
      v206 = v118.i32[1];
      v207 = -v405.i32[0];
      while (1)
      {
        v208 = ((v135 - v201) >> 3) * v203;
        while (1)
        {
          v209 = ((v206 - v200) >> 3) * v202;
          while (1)
          {
            v210 = ((unint64_t)(v209 + ((v207 + v205) >> 3) + v208) >> 3) & 0x1FFFFFF8;
            *(_QWORD *)(v204 + v210) |= 1 << (v209 + ((v207 + v205) >> 3) + v208);
            if (v131.f32[0] >= v197.f32[0])
              break;
            if (v131.f32[0] >= v199.f32[0])
              goto LABEL_193;
            if (v131.f32[0] > v134)
              goto LABEL_195;
            v205 += v139.i32[0];
            v131.f32[0] = v196 + v131.f32[0];
          }
          if (v197.f32[0] >= v199.f32[0])
            break;
          if (v197.f32[0] > v134)
            goto LABEL_195;
          v206 += v139.i32[1];
          v197.f32[0] = v197.f32[1] + v197.f32[0];
        }
LABEL_193:
        if (v199.f32[0] > v134)
          break;
        v135 += v338;
        v199.f32[0] = v199.f32[1] + v199.f32[0];
      }
LABEL_195:
      v211 = *(float *)(v356 + 20);
      if (v211 > -65504.0)
      {
        v116.i64[0] = *(_QWORD *)v356;
        v116.i32[2] = *(_DWORD *)(v356 + 8);
        v119 = vmlaq_n_f32(v349, v116, v211);
        if (*(_BYTE *)(v343 + 28))
        {
          v212.i64[0] = 0x3F0000003F000000;
          v212.i64[1] = 0x3F0000003F000000;
          v116.i64[1] = *((_QWORD *)&v341 + 1);
          v213 = vmlaq_n_f32(v212, v119, *(float *)&v341);
          v214 = vcvtms_s32_f32(v213.f32[2]) & 0xFFFFFFF8;
          v215 = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v213.f32)) & 0xFFFFFFF8FFFFFFF8;
          v375 = v215;
          v376 = v214;
          v216 = v392;
          v217 = *((unsigned int *)v392 + v387);
          v218 = v217;
          if (v217 < DWORD1(v387))
          {
            v218 = *((unsigned int *)v392 + v387);
            do
            {
              v219 = v388 + 12 * v218;
              if ((_DWORD)v215 == *(_DWORD *)v219 && __PAIR64__(v214, HIDWORD(v215)) == *(_QWORD *)(v219 + 4))
                break;
              v218 = *((unsigned int *)v392 + v218);
            }
            while (v218 < DWORD1(v387));
          }
          if (v218 == DWORD1(v387))
          {
            v220 = HIDWORD(v387);
            if (HIDWORD(v387) <= DWORD2(v387))
            {
              v292 = v388 + 12 * HIDWORD(v387);
              if ((unint64_t *)v292 != &v375)
              {
                v293 = v375;
                *(_DWORD *)(v292 + 8) = v376;
                *(_QWORD *)v292 = v293;
                v220 = HIDWORD(v387);
                v216 = v392;
                v217 = *((unsigned int *)v392 + v387);
              }
              v294 = v220;
              v216[v294] = v217;
              v295 = (char *)v390;
              *((_DWORD *)v390 + v217) = v220;
              v216[v387] = v220;
              *(_DWORD *)&v295[v294 * 4] = v387;
              ++HIDWORD(v387);
            }
            else
            {
              v221 = v390;
              v222 = *((unsigned int *)v390 + DWORD1(v387));
              v223 = *((unsigned int *)v390 + v222);
              v224 = *((unsigned int *)v392 + v222);
              *((_DWORD *)v392 + v223) = v224;
              v221[v224] = v223;
              v225 = v388 + 12 * v222;
              if ((unint64_t *)v225 != &v375)
              {
                v226 = v375;
                *(_DWORD *)(v225 + 8) = v376;
                *(_QWORD *)v225 = v226;
                v216 = v392;
                v221 = v390;
              }
              v227 = v216[v387];
              v228 = v222;
              v216[v228] = v227;
              v221[v227] = v222;
              v216[v387] = v222;
              v221[v228] = v387;
            }
            sub_22397FD34(a11, (int *)&v375, (uint64_t)&v375);
          }
          else
          {
            v125 = v390;
            v126 = v218;
            v127 = *((unsigned int *)v390 + v218);
            v128 = *((unsigned int *)v392 + v218);
            *((_DWORD *)v392 + v127) = v128;
            v125[v128] = v127;
            v129 = v216[v387];
            v216[v126] = v129;
            v125[v129] = v218;
            v216[v387] = v218;
            v125[v126] = v387;
          }
          goto LABEL_101;
        }
        v131.i32[0] = v396.i32[*(unsigned __int8 *)(v356 + 24)];
        v229 = vmlsq_lane_f32(v119, v352, *(float32x2_t *)v131.f32, 0);
        v116 = vmulq_n_f32(v229, *(float *)&v341);
        v230 = vcvtms_s32_f32(v116.f32[2]) & 0xFFFFFFF8;
        v231 = v230 + 8;
        if (v352.f32[2] <= 0.0)
          v232 = -8;
        else
          v232 = 8;
        if (v352.f32[2] <= 0.0)
          v231 = v230;
        v339 = v232;
        v233 = *(_QWORD *)&vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v116.f32)) & 0xFFFFFFF8FFFFFFF8;
        v234 = (int8x8_t)vcgtz_f32(*(float32x2_t *)v352.f32);
        *(int8x8_t *)v120.f32 = vbsl_s8(v234, (int8x8_t)vadd_s32((int32x2_t)v233, (int32x2_t)0x800000008), (int8x8_t)v233);
        v235 = (int32x2_t)vorr_s8(vand_s8(v234, (int8x8_t)0x800000008), (int8x8_t)(*(_QWORD *)&vmvn_s8(v234) & 0xFFFFFFF8FFFFFFF8));
        *(float32x2_t *)v121.f32 = vcvt_f32_s32(v235);
        v121.f32[2] = (float)v232;
        v236 = (int32x4_t)vmulq_n_f32(v121, *(float *)&v336);
        *(float32x2_t *)v120.f32 = vcvt_f32_s32(*(int32x2_t *)v120.f32);
        v120.f32[2] = (float)v231;
        v120 = vmulq_n_f32(v120, *(float *)&v336);
        v119 = vsubq_f32(v120, v229);
        if (v352.f32[0] == 0.0)
        {
          v237 = 3.4028e38;
          v238 = 3.4028e38;
          v239 = v352.f32[1];
          *(int32x2_t *)v121.f32 = vdup_n_s32(0x7F7FFFFFu);
          v369 = v121;
          if (v352.f32[1] == 0.0)
            goto LABEL_215;
        }
        else
        {
          v237 = (float)(1.0 / v352.f32[0]) * v119.f32[0];
          v238 = (float)(1.0 / v352.f32[0]) * *(float *)v236.i32;
          v239 = v352.f32[1];
          *(int32x2_t *)v121.f32 = vdup_n_s32(0x7F7FFFFFu);
          v369 = v121;
          if (v352.f32[1] == 0.0)
          {
LABEL_215:
            if (v352.f32[2] != 0.0)
            {
              v119 = (float32x4_t)vzip2q_s32((int32x4_t)v119, v236);
              *(float32x2_t *)v118.f32 = vmul_n_f32(*(float32x2_t *)v119.f32, 1.0 / v352.f32[2]);
              v369 = v118;
            }
            v240 = v131.f32[0] + v131.f32[0];
            v241 = HIDWORD(v233);
            v242 = v233;
            v243 = v369.f32[1];
            v364 = v121;
            v244 = v121.f32[1];
            v245 = v235.i32[0];
            v353 = v235.i32[1];
            while (1)
            {
              while (1)
              {
                v246 = v392;
                for (j = *((unsigned int *)v392 + v387); j < DWORD1(v387); j = *((unsigned int *)v392 + j))
                {
                  v248 = (_DWORD *)(v388 + 12 * j);
                  if (v242 == *v248 && v241 == v248[1] && v230 == v248[2])
                    break;
                }
                if (j == DWORD1(v387))
                {
                  if (HIDWORD(v387) <= DWORD2(v387))
                  {
                    v263 = (_DWORD *)(v388 + 12 * HIDWORD(v387));
                    *v263 = v242;
                    v263[1] = v241;
                    v263[2] = v230;
                    LODWORD(v263) = HIDWORD(v387);
                    v264 = v392;
                    v265 = *((unsigned int *)v392 + v387);
                    v266 = 4 * HIDWORD(v387);
                    *(_DWORD *)((char *)v392 + v266) = v265;
                    v267 = (char *)v390;
                    *((_DWORD *)v390 + v265) = (_DWORD)v263;
                    v264[v387] = (_DWORD)v263;
                    *(_DWORD *)&v267[v266] = v387;
                    ++HIDWORD(v387);
                  }
                  else
                  {
                    v249 = v390;
                    v250 = *((unsigned int *)v390 + DWORD1(v387));
                    v251 = v250;
                    v252 = *((unsigned int *)v390 + v250);
                    v253 = *((unsigned int *)v392 + v250);
                    *((_DWORD *)v392 + v252) = v253;
                    v249[v253] = v252;
                    v254 = (_DWORD *)(v388 + 12 * v250);
                    *v254 = v242;
                    v254[1] = v241;
                    v254[2] = v230;
                    v255 = v392;
                    v256 = v390;
                    v257 = *((unsigned int *)v392 + v387);
                    *(_DWORD *)((char *)v392 + v251 * 4) = v257;
                    v256[v257] = v250;
                    v255[v387] = v250;
                    v256[v251] = v387;
                  }
                  v268 = a11 + 1;
LABEL_230:
                  v269 = *v268;
                  v270 = v268;
                  if (*v268)
                  {
                    do
                    {
                      v268 = (_QWORD **)v269;
                      v271 = *((_DWORD *)v269 + 7);
                      v272 = v242 < v271;
                      if (v242 == v271 && (v273 = *((_DWORD *)v268 + 8), v272 = v241 < v273, v241 == v273))
                      {
                        v274 = *((_DWORD *)v268 + 9);
                        if (v230 < v274)
                          goto LABEL_230;
                        if (v274 >= v230)
                          goto LABEL_264;
                      }
                      else if (v272)
                      {
                        goto LABEL_230;
                      }
                      v269 = v268[1];
                    }
                    while (v269);
                    v270 = v268 + 1;
                  }
                  v275 = operator new(0x28uLL);
                  v275[7] = v242;
                  v275[8] = v241;
                  v275[9] = v230;
                  *(_QWORD *)v275 = 0;
                  *((_QWORD *)v275 + 1) = 0;
                  *((_QWORD *)v275 + 2) = v268;
                  *v270 = v275;
                  v276 = (_QWORD *)**a11;
                  if (v276)
                  {
                    *a11 = v276;
                    v275 = (_DWORD *)*v270;
                  }
                  v277 = *v360;
                  _ZF = v275 == *v360;
                  *((_BYTE *)v275 + 24) = _ZF;
                  if (!_ZF)
                  {
                    do
                    {
                      v278 = *((_QWORD *)v275 + 2);
                      if (*(_BYTE *)(v278 + 24))
                        break;
                      v279 = *(_BYTE **)(v278 + 16);
                      v280 = *(_QWORD *)v279;
                      if (*(_QWORD *)v279 == v278)
                      {
                        v283 = *((_QWORD *)v279 + 1);
                        if (!v283 || (v284 = *(unsigned __int8 *)(v283 + 24), v281 = (_BYTE *)(v283 + 24), v284))
                        {
                          if (*(_DWORD **)v278 == v275)
                          {
                            *(_BYTE *)(v278 + 24) = 1;
                            v279[24] = 0;
                            v287 = *(_QWORD *)(v278 + 8);
                            *(_QWORD *)v279 = v287;
                            if (v287)
                              goto LABEL_256;
                          }
                          else
                          {
                            v285 = *(uint64_t **)(v278 + 8);
                            v286 = *v285;
                            *(_QWORD *)(v278 + 8) = *v285;
                            if (v286)
                            {
                              *(_QWORD *)(v286 + 16) = v278;
                              v279 = *(_BYTE **)(v278 + 16);
                            }
                            v285[2] = (uint64_t)v279;
                            *(_QWORD *)(*(_QWORD *)(v278 + 16) + 8 * (**(_QWORD **)(v278 + 16) != v278)) = v285;
                            *v285 = v278;
                            *(_QWORD *)(v278 + 16) = v285;
                            v279 = (_BYTE *)v285[2];
                            v278 = *(_QWORD *)v279;
                            *((_BYTE *)v285 + 24) = 1;
                            v279[24] = 0;
                            v287 = *(_QWORD *)(v278 + 8);
                            *(_QWORD *)v279 = v287;
                            if (v287)
LABEL_256:
                              *(_QWORD *)(v287 + 16) = v279;
                          }
                          *(_QWORD *)(v278 + 16) = *((_QWORD *)v279 + 2);
                          *(_QWORD *)(*((_QWORD *)v279 + 2) + 8 * (**((_QWORD **)v279 + 2) != (_QWORD)v279)) = v278;
                          *(_QWORD *)(v278 + 8) = v279;
LABEL_262:
                          *((_QWORD *)v279 + 2) = v278;
                          break;
                        }
                      }
                      else if (!v280 || (v282 = *(unsigned __int8 *)(v280 + 24), v281 = (_BYTE *)(v280 + 24), v282))
                      {
                        if (*(_DWORD **)v278 == v275)
                        {
                          v289 = *((_QWORD *)v275 + 1);
                          *(_QWORD *)v278 = v289;
                          if (v289)
                          {
                            *(_QWORD *)(v289 + 16) = v278;
                            v279 = *(_BYTE **)(v278 + 16);
                          }
                          *((_QWORD *)v275 + 2) = v279;
                          *(_QWORD *)(*(_QWORD *)(v278 + 16) + 8 * (**(_QWORD **)(v278 + 16) != v278)) = v275;
                          *((_QWORD *)v275 + 1) = v278;
                          *(_QWORD *)(v278 + 16) = v275;
                          v279 = (_BYTE *)*((_QWORD *)v275 + 2);
                          *((_BYTE *)v275 + 24) = 1;
                          v279[24] = 0;
                          v278 = *((_QWORD *)v279 + 1);
                          v288 = *(_DWORD **)v278;
                          *((_QWORD *)v279 + 1) = *(_QWORD *)v278;
                          if (v288)
LABEL_260:
                            *((_QWORD *)v288 + 2) = v279;
                        }
                        else
                        {
                          *(_BYTE *)(v278 + 24) = 1;
                          v279[24] = 0;
                          v278 = *((_QWORD *)v279 + 1);
                          v288 = *(_DWORD **)v278;
                          *((_QWORD *)v279 + 1) = *(_QWORD *)v278;
                          if (v288)
                            goto LABEL_260;
                        }
                        *(_QWORD *)(v278 + 16) = *((_QWORD *)v279 + 2);
                        *(_QWORD *)(*((_QWORD *)v279 + 2) + 8 * (**((_QWORD **)v279 + 2) != (_QWORD)v279)) = v278;
                        *(_QWORD *)v278 = v279;
                        goto LABEL_262;
                      }
                      *(_BYTE *)(v278 + 24) = 1;
                      v275 = v279;
                      v279[24] = v279 == (_BYTE *)v277;
                      *v281 = 1;
                    }
                    while (v279 != (_BYTE *)v277);
                  }
                  a11[2] = (_QWORD *)((char *)a11[2] + 1);
                }
                else
                {
                  v258 = v390;
                  v259 = j;
                  v260 = *((unsigned int *)v390 + j);
                  v261 = *((unsigned int *)v392 + j);
                  *((_DWORD *)v392 + v260) = v261;
                  v258[v261] = v260;
                  v262 = v246[v387];
                  v246[v259] = v262;
                  v258[v262] = j;
                  v246[v387] = j;
                  v258[v259] = v387;
                }
LABEL_264:
                if (v237 < v364.f32[0])
                  break;
                v116.i64[1] = v364.i64[1];
                if (v364.f32[0] >= v369.f32[0])
                {
LABEL_275:
                  if (v369.f32[0] > v240)
                    goto LABEL_101;
                  v291 = v369;
                  v291.f32[0] = v243 + v369.f32[0];
                  v369 = v291;
                  v230 += v339;
                }
                else
                {
                  if (v364.f32[0] > v240)
                    goto LABEL_101;
                  v241 += v353;
                  v290 = v364;
                  v290.f32[0] = v244 + v364.f32[0];
                  v364 = v290;
                }
              }
              if (v237 >= v369.f32[0])
                goto LABEL_275;
              if (v237 > v240)
                goto LABEL_101;
              v242 += v245;
              v237 = v238 + v237;
            }
          }
        }
        v121 = (float32x4_t)v236;
        v121.i32[0] = v119.i32[1];
        *(float32x2_t *)v121.f32 = vmul_n_f32(*(float32x2_t *)v121.f32, 1.0 / v239);
        goto LABEL_215;
      }
LABEL_101:
      v122 = v356 + 36;
      if (v356 + 36 == v346)
        goto LABEL_289;
    }
    v131.i64[0] = vsubq_f32(v140, v132).u64[0];
    v131.f32[0] = (float)(1.0 / v352.f32[0]) * v131.f32[0];
    v196 = (float)(1.0 / v352.f32[0]) * v121.f32[0];
    v197 = (float32x2_t)v123;
    if (v352.f32[1] == 0.0)
      goto LABEL_181;
LABEL_180:
    v198.i32[1] = v121.i32[1];
    v198.i32[0] = vsubq_f32(v140, v132).i32[1];
    v197 = vmul_n_f32(v198, 1.0 / v352.f32[1]);
    goto LABEL_181;
  }
LABEL_289:
  v347 = v399;
  if (v399 >= 1)
  {
    v358 = v398.i32[1];
    if (v398.i32[1] >= 1)
    {
      v296 = v398.i32[0];
      if (v398.i32[0] >= 1)
      {
        v297 = 0;
        v298 = 0;
        v299 = v405;
        v344 = v406;
        v342 = v398.i32[0] * v398.i32[1];
        v300 = *(_QWORD *)(a10 + 16);
        do
        {
          v301 = 0;
          v350 = v298;
          v302 = v344 + 8 * v298;
          v354 = v297;
          do
          {
            v303 = 0;
            v365 = v301;
            v304 = v299.i32[1] + 8 * v301;
            v361 = v297;
            do
            {
              if (((*(_QWORD *)(*(_QWORD *)&v402[4] + (((unint64_t)v297 >> 3) & 0x1FFFFFF8)) >> v297) & 1) != 0)
              {
                v305 = v299.i32[0] + 8 * v303;
                v306 = a10 + 8;
LABEL_304:
                v307 = *(_QWORD *)v306;
                v308 = (_QWORD *)v306;
                if (*(_QWORD *)v306)
                {
                  do
                  {
                    v306 = v307;
                    v309 = *(_DWORD *)(v307 + 28);
                    v310 = v305 < v309;
                    if (v305 == v309 && (v311 = *(_DWORD *)(v306 + 32), v310 = v304 < v311, v304 == v311))
                    {
                      v312 = *(_DWORD *)(v306 + 36);
                      if (v302 < v312)
                        goto LABEL_304;
                      if (v312 >= v302)
                        goto LABEL_301;
                    }
                    else if (v310)
                    {
                      goto LABEL_304;
                    }
                    v307 = *(_QWORD *)(v306 + 8);
                  }
                  while (v307);
                  v308 = (_QWORD *)(v306 + 8);
                }
                v313 = operator new(0x28uLL);
                v313[7] = v305;
                v313[8] = v304;
                v313[9] = v302;
                *(_QWORD *)v313 = 0;
                *((_QWORD *)v313 + 1) = 0;
                *((_QWORD *)v313 + 2) = v306;
                *v308 = v313;
                v314 = **(_QWORD **)a10;
                if (v314)
                {
                  *(_QWORD *)a10 = v314;
                  v313 = (_DWORD *)*v308;
                }
                v315 = *v370;
                _ZF = v313 == *v370;
                *((_BYTE *)v313 + 24) = _ZF;
                if (!_ZF)
                {
                  do
                  {
                    v316 = *((_QWORD *)v313 + 2);
                    if (*(_BYTE *)(v316 + 24))
                      break;
                    v317 = *(_BYTE **)(v316 + 16);
                    v318 = *(_QWORD *)v317;
                    if (*(_QWORD *)v317 == v316)
                    {
                      v321 = *((_QWORD *)v317 + 1);
                      if (!v321 || (v322 = *(unsigned __int8 *)(v321 + 24), v319 = (_BYTE *)(v321 + 24), v322))
                      {
                        if (*(_DWORD **)v316 == v313)
                        {
                          *(_BYTE *)(v316 + 24) = 1;
                          v317[24] = 0;
                          v325 = *(_QWORD *)(v316 + 8);
                          *(_QWORD *)v317 = v325;
                          if (v325)
                            goto LABEL_330;
                        }
                        else
                        {
                          v323 = *(uint64_t **)(v316 + 8);
                          v324 = *v323;
                          *(_QWORD *)(v316 + 8) = *v323;
                          if (v324)
                          {
                            *(_QWORD *)(v324 + 16) = v316;
                            v317 = *(_BYTE **)(v316 + 16);
                          }
                          v323[2] = (uint64_t)v317;
                          *(_QWORD *)(*(_QWORD *)(v316 + 16) + 8 * (**(_QWORD **)(v316 + 16) != v316)) = v323;
                          *v323 = v316;
                          *(_QWORD *)(v316 + 16) = v323;
                          v317 = (_BYTE *)v323[2];
                          v316 = *(_QWORD *)v317;
                          *((_BYTE *)v323 + 24) = 1;
                          v317[24] = 0;
                          v325 = *(_QWORD *)(v316 + 8);
                          *(_QWORD *)v317 = v325;
                          if (v325)
LABEL_330:
                            *(_QWORD *)(v325 + 16) = v317;
                        }
                        *(_QWORD *)(v316 + 16) = *((_QWORD *)v317 + 2);
                        *(_QWORD *)(*((_QWORD *)v317 + 2) + 8 * (**((_QWORD **)v317 + 2) != (_QWORD)v317)) = v316;
                        *(_QWORD *)(v316 + 8) = v317;
LABEL_299:
                        *((_QWORD *)v317 + 2) = v316;
                        break;
                      }
                    }
                    else if (!v318 || (v320 = *(unsigned __int8 *)(v318 + 24), v319 = (_BYTE *)(v318 + 24), v320))
                    {
                      if (*(_DWORD **)v316 == v313)
                      {
                        v327 = *((_QWORD *)v313 + 1);
                        *(_QWORD *)v316 = v327;
                        if (v327)
                        {
                          *(_QWORD *)(v327 + 16) = v316;
                          v317 = *(_BYTE **)(v316 + 16);
                        }
                        *((_QWORD *)v313 + 2) = v317;
                        *(_QWORD *)(*(_QWORD *)(v316 + 16) + 8 * (**(_QWORD **)(v316 + 16) != v316)) = v313;
                        *((_QWORD *)v313 + 1) = v316;
                        *(_QWORD *)(v316 + 16) = v313;
                        v317 = (_BYTE *)*((_QWORD *)v313 + 2);
                        *((_BYTE *)v313 + 24) = 1;
                        v317[24] = 0;
                        v316 = *((_QWORD *)v317 + 1);
                        v326 = *(_DWORD **)v316;
                        *((_QWORD *)v317 + 1) = *(_QWORD *)v316;
                        if (!v326)
                          goto LABEL_298;
                      }
                      else
                      {
                        *(_BYTE *)(v316 + 24) = 1;
                        v317[24] = 0;
                        v316 = *((_QWORD *)v317 + 1);
                        v326 = *(_DWORD **)v316;
                        *((_QWORD *)v317 + 1) = *(_QWORD *)v316;
                        if (!v326)
                          goto LABEL_298;
                      }
                      *((_QWORD *)v326 + 2) = v317;
LABEL_298:
                      *(_QWORD *)(v316 + 16) = *((_QWORD *)v317 + 2);
                      *(_QWORD *)(*((_QWORD *)v317 + 2) + 8 * (**((_QWORD **)v317 + 2) != (_QWORD)v317)) = v316;
                      *(_QWORD *)v316 = v317;
                      goto LABEL_299;
                    }
                    *(_BYTE *)(v316 + 24) = 1;
                    v313 = v317;
                    v317[24] = v317 == (_BYTE *)v315;
                    *v319 = 1;
                  }
                  while (v317 != (_BYTE *)v315);
                }
                *(_QWORD *)(a10 + 16) = ++v300;
              }
LABEL_301:
              ++v303;
              ++v297;
            }
            while (v303 != v296);
            v297 = v361 + v296;
            v301 = v365 + 1;
          }
          while (v365 + 1 != v358);
          v297 = v354 + v342;
          v298 = v350 + 1;
        }
        while (v350 + 1 != v347);
      }
    }
  }
  if (__p)
  {
    v386 = __p;
    operator delete(__p);
  }
  if (v383)
  {
    v384 = v383;
    operator delete(v383);
  }
  if (v381)
  {
    v382 = v381;
    operator delete(v381);
  }
  if (v392)
  {
    v393 = v392;
    operator delete(v392);
  }
  if (v390)
  {
    v391 = v390;
    operator delete(v390);
  }
  if ((_QWORD)v388)
  {
    *((_QWORD *)&v388 + 1) = v388;
    operator delete((void *)v388);
  }
  if (*(_QWORD *)&v402[4])
    operator delete(*(void **)&v402[4]);
  kdebug_trace();
  return kdebug_trace();
}

void sub_223A75294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_2231874DC((uint64_t)&a57);
  sub_2231874DC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_223A75318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  uint64_t v57;

  sub_2238FC088(&a46);
  sub_2238FC088(&a57);
  if (STACK[0x210])
    operator delete((void *)STACK[0x210]);
  sub_2231874DC(v57 - 208);
  sub_2231874DC((uint64_t)&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_223A75350(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 28);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[18] + (((v4[21] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2936 * ((*((_DWORD *)v4 + 42) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    v8 = 8;
    do
    {
      v9 = 0;
      v10 = v8;
      do
      {
        result = v6 + 4 * (v10 - 8);
        *(_DWORD *)(a2 + 4 * v10) = *(_DWORD *)result;
        if (*(_BYTE *)(result + 2))
        {
          if (*(__int16 *)result >= 0)
            result = 2928;
          else
            result = 2930;
          v11 = *(unsigned __int16 *)(a2 + result);
          if (v11 <= (unsigned __int16)(v11 + 1))
            LOWORD(v11) = v11 + 1;
          *(_WORD *)(a2 + result) = v11;
        }
        v9 += v7;
        v10 += 9 * v7;
      }
      while (v9 < 8);
      v5 += v7;
      v8 += 81 * v7;
    }
    while (v5 < 8);
  }
  return result;
}

unint64_t sub_223A75504(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 32);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[18] + (((v4[21] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2936 * ((*((_DWORD *)v4 + 42) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 2916);
    do
    {
      for (i = 0; i < 8; i += v8)
      {
        v10 = (unsigned int *)(v7 + 4 * (v5 + i));
        result = *v10;
        *(_DWORD *)(a2 + 4 * (v5 + i + 72)) = result;
        if (*((_BYTE *)v10 + 2))
        {
          if (*(__int16 *)v10 >= 0)
            v11 = 2928;
          else
            v11 = 2930;
          v12 = *(unsigned __int16 *)(a2 + v11);
          result = (unsigned __int16)(v12 + 1);
          if (v12 <= result)
            LOWORD(v12) = v12 + 1;
          *(_WORD *)(a2 + v11) = v12;
        }
      }
      v6 += v8;
      v5 += 81 * v8;
    }
    while (v6 < 8);
  }
  return result;
}

unint64_t sub_223A756B0(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 40);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[18] + (((v4[21] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2936 * ((*((_DWORD *)v4 + 42) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 2916);
    do
    {
      for (i = 0; i < 8; i += v8)
      {
        v10 = (unsigned int *)(v7 + 4 * (v5 + i));
        result = *v10;
        *(_DWORD *)(a2 + 4 * (v5 + i + 648)) = result;
        if (*((_BYTE *)v10 + 2))
        {
          if (*(__int16 *)v10 >= 0)
            v11 = 2928;
          else
            v11 = 2930;
          v12 = *(unsigned __int16 *)(a2 + v11);
          result = (unsigned __int16)(v12 + 1);
          if (v12 <= result)
            LOWORD(v12) = v12 + 1;
          *(_WORD *)(a2 + v11) = v12;
        }
      }
      v6 += v8;
      v5 += 9 * v8;
    }
    while (v6 < 8);
  }
  return result;
}

BOOL sub_223A75858(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  __int16 *v8;
  uint64_t v9;
  unsigned int v10;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 48);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[18] + (((v4[21] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2936 * ((*((_DWORD *)v4 + 42) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    do
    {
      v8 = (__int16 *)(v6 + 4 * v5);
      *(_DWORD *)(a2 + 4 * (v5 + 720)) = *(_DWORD *)v8;
      if (*((_BYTE *)v8 + 2))
      {
        if (*v8 >= 0)
          v9 = 2928;
        else
          v9 = 2930;
        v10 = *(unsigned __int16 *)(a2 + v9);
        if (v10 <= (unsigned __int16)(v10 + 1))
          LOWORD(v10) = v10 + 1;
        *(_WORD *)(a2 + v9) = v10;
      }
      v5 += v7;
    }
    while (v5 < 8);
  }
  return result;
}

BOOL sub_223A759DC(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  __int16 *v9;
  uint64_t v10;
  unsigned int v11;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 44);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[18] + (((v4[21] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2936 * ((*((_DWORD *)v4 + 42) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    v8 = 656;
    do
    {
      v9 = (__int16 *)(v6 + 4 * (v8 - 656));
      *(_DWORD *)(a2 + 4 * v8) = *(_DWORD *)v9;
      if (*((_BYTE *)v9 + 2))
      {
        if (*v9 >= 0)
          v10 = 2928;
        else
          v10 = 2930;
        v11 = *(unsigned __int16 *)(a2 + v10);
        if (v11 <= (unsigned __int16)(v11 + 1))
          LOWORD(v11) = v11 + 1;
        *(_WORD *)(a2 + v10) = v11;
      }
      v5 += v7;
      v8 += 9 * v7;
    }
    while (v5 < 8);
  }
  return result;
}

BOOL sub_223A75B6C(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  __int16 *v9;
  uint64_t v10;
  unsigned int v11;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 36);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[18] + (((v4[21] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2936 * ((*((_DWORD *)v4 + 42) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    v8 = 80;
    do
    {
      v9 = (__int16 *)(v6 + 4 * (v8 - 80));
      *(_DWORD *)(a2 + 4 * v8) = *(_DWORD *)v9;
      if (*((_BYTE *)v9 + 2))
      {
        if (*v9 >= 0)
          v10 = 2928;
        else
          v10 = 2930;
        v11 = *(unsigned __int16 *)(a2 + v10);
        if (v11 <= (unsigned __int16)(v11 + 1))
          LOWORD(v11) = v11 + 1;
        *(_WORD *)(a2 + v10) = v11;
      }
      v5 += v7;
      v8 += 81 * v7;
    }
    while (v5 < 8);
  }
  return result;
}

BOOL sub_223A75D00(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  __int16 *v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 52);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = (__int16 *)(*(_QWORD *)(v4[18] + (((v4[21] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
                   + 2936 * ((*((_DWORD *)v4 + 42) + (_DWORD)v2) & 0xF));
    *(_DWORD *)(a2 + 2912) = *(_DWORD *)v5;
    if (*((_BYTE *)v5 + 2))
    {
      v6 = *v5 < 0;
      v7 = 2928;
      if (v6)
        v7 = 2930;
      v8 = *(unsigned __int16 *)(a2 + v7);
      if (v8 <= (unsigned __int16)(v8 + 1))
        LOWORD(v8) = v8 + 1;
      *(_WORD *)(a2 + v7) = v8;
    }
  }
  return result;
}

uint64_t sub_223A75E58(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 28);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[36] + (((v4[39] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2928 * ((*((_DWORD *)v4 + 78) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    v8 = 8;
    do
    {
      v9 = 0;
      v10 = v8;
      do
      {
        v11 = v10 - 8;
        result = v6 + 4 * v11;
        v12 = a2 + 4 * v10;
        if (v12 != result)
        {
          v13 = *(_WORD *)result;
          result = *(unsigned __int8 *)(result + 2);
          *(_BYTE *)(v12 + 2) = result;
          *(_WORD *)v12 = v13;
        }
        *(_BYTE *)(a2 + 4 * v10 + 3) = *(_BYTE *)(v6 + 4 * v11 + 3);
        v9 += v7;
        v10 += 9 * v7;
      }
      while (v9 < 8);
      v5 += v7;
      v8 += 81 * v7;
    }
    while (v5 < 8);
  }
  return result;
}

unint64_t sub_223A76000(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 32);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C), (_DWORD)result)|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C),
          (_DWORD)result))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[36] + (((v4[39] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2928 * ((*((_DWORD *)v4 + 78) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 2916);
    do
    {
      for (i = 0; i < 8; i += v8)
      {
        v10 = v5 + i;
        v11 = (unsigned __int16 *)(v7 + 4 * v10);
        v12 = (v10 + 72);
        v13 = a2 + 4 * v12;
        if ((unsigned __int16 *)v13 != v11)
        {
          result = *v11;
          *(_BYTE *)(v13 + 2) = *((_BYTE *)v11 + 2);
          *(_WORD *)v13 = result;
        }
        *(_BYTE *)(a2 + 4 * v12 + 3) = *(_BYTE *)(v7 + 4 * v10 + 3);
      }
      v6 += v8;
      v5 += 81 * v8;
    }
    while (v6 < 8);
  }
  return result;
}

unint64_t sub_223A7619C(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 40);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C), (_DWORD)result)|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C),
          (_DWORD)result))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[36] + (((v4[39] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2928 * ((*((_DWORD *)v4 + 78) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 2916);
    do
    {
      for (i = 0; i < 8; i += v8)
      {
        v10 = v5 + i;
        v11 = (unsigned __int16 *)(v7 + 4 * v10);
        v12 = (v10 + 648);
        v13 = a2 + 4 * v12;
        if ((unsigned __int16 *)v13 != v11)
        {
          result = *v11;
          *(_BYTE *)(v13 + 2) = *((_BYTE *)v11 + 2);
          *(_WORD *)v13 = result;
        }
        *(_BYTE *)(a2 + 4 * v12 + 3) = *(_BYTE *)(v7 + 4 * v10 + 3);
      }
      v6 += v8;
      v5 += 9 * v8;
    }
    while (v6 < 8);
  }
  return result;
}

BOOL sub_223A76334(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 48);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[36] + (((v4[39] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2928 * ((*((_DWORD *)v4 + 78) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    do
    {
      v8 = v6 + 4 * v5;
      v9 = v5 + 720;
      v10 = a2 + 4 * v9;
      if (v10 != v8)
      {
        v11 = *(_WORD *)v8;
        *(_BYTE *)(v10 + 2) = *(_BYTE *)(v8 + 2);
        *(_WORD *)v10 = v11;
      }
      *(_BYTE *)(a2 + 4 * v9 + 3) = *(_BYTE *)(v6 + 4 * v5 + 3);
      v5 += v7;
    }
    while (v5 < 8);
  }
  return result;
}

BOOL sub_223A764AC(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 44);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[36] + (((v4[39] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2928 * ((*((_DWORD *)v4 + 78) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    v8 = 656;
    do
    {
      v9 = v8 - 656;
      v10 = v6 + 4 * v9;
      v11 = a2 + 4 * v8;
      if (v11 != v10)
      {
        v12 = *(_WORD *)v10;
        *(_BYTE *)(v11 + 2) = *(_BYTE *)(v10 + 2);
        *(_WORD *)v11 = v12;
      }
      *(_BYTE *)(a2 + 4 * v8 + 3) = *(_BYTE *)(v6 + 4 * v9 + 3);
      v5 += v7;
      v8 += 9 * v7;
    }
    while (v5 < 8);
  }
  return result;
}

BOOL sub_223A76630(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 36);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[36] + (((v4[39] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2928 * ((*((_DWORD *)v4 + 78) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 2916);
    v8 = 80;
    do
    {
      v9 = v8 - 80;
      v10 = v6 + 4 * v9;
      v11 = a2 + 4 * v8;
      if (v11 != v10)
      {
        v12 = *(_WORD *)v10;
        *(_BYTE *)(v11 + 2) = *(_BYTE *)(v10 + 2);
        *(_WORD *)v11 = v12;
      }
      *(_BYTE *)(a2 + 4 * v8 + 3) = *(_BYTE *)(v6 + 4 * v9 + 3);
      v5 += v7;
      v8 += 81 * v7;
    }
    while (v5 < 8);
  }
  return result;
}

BOOL sub_223A767B8(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  __int16 v6;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 2920) + 52);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = *(_QWORD *)(v4[36] + (((v4[39] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2928 * ((*((_DWORD *)v4 + 78) + (_DWORD)v2) & 0xF);
    if (a2 + 2912 != v5)
    {
      v6 = *(_WORD *)v5;
      *(_BYTE *)(a2 + 2914) = *(_BYTE *)(v5 + 2);
      *(_WORD *)(a2 + 2912) = v6;
    }
    *(_BYTE *)(a2 + 2915) = *(_BYTE *)(v5 + 3);
  }
  return result;
}

BOOL sub_223A768F8(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 1008) + 28);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[30] + (((v4[33] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 1016 * ((*((_DWORD *)v4 + 66) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 1000);
    v8 = 4;
    do
    {
      v9 = 0;
      v10 = v8;
      do
      {
        *(_QWORD *)(a2 + 8 * v10) = *(_QWORD *)(v6 + 8 * (v10 - 4));
        v9 += v7;
        v10 += 5 * v7;
      }
      while (v9 < 4);
      v5 += v7;
      v8 += 25 * v7;
    }
    while (v5 < 4);
  }
  return result;
}

BOOL sub_223A76A68(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 1008) + 32);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[30] + (((v4[33] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 1016 * ((*((_DWORD *)v4 + 66) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 1000);
    do
    {
      for (i = 0; i < 4; i += v8)
        *(_QWORD *)(a2 + 8 * (v5 + i + 20)) = *(_QWORD *)(v7 + 8 * (v5 + i));
      v6 += v8;
      v5 += 25 * v8;
    }
    while (v6 < 4);
  }
  return result;
}

BOOL sub_223A76BD0(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 1008) + 40);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[30] + (((v4[33] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 1016 * ((*((_DWORD *)v4 + 66) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 1000);
    do
    {
      for (i = 0; i < 4; i += v8)
        *(_QWORD *)(a2 + 8 * (v5 + i + 100)) = *(_QWORD *)(v7 + 8 * (v5 + i));
      v6 += v8;
      v5 += 5 * v8;
    }
    while (v6 < 4);
  }
  return result;
}

BOOL sub_223A76D34(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 1008) + 48);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[30] + (((v4[33] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 1016 * ((*((_DWORD *)v4 + 66) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 1000);
    do
    {
      *(_QWORD *)(a2 + 8 * (v5 + 120)) = *(_QWORD *)(v6 + 8 * v5);
      v5 += v7;
    }
    while (v5 < 4);
  }
  return result;
}

BOOL sub_223A76E78(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 1008) + 44);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[30] + (((v4[33] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 1016 * ((*((_DWORD *)v4 + 66) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 1000);
    v8 = 104;
    do
    {
      *(_QWORD *)(a2 + 8 * v8) = *(_QWORD *)(v6 + 8 * (v8 - 104));
      v5 += v7;
      v8 += 5 * v7;
    }
    while (v5 < 4);
  }
  return result;
}

BOOL sub_223A76FC8(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 1008) + 36);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[30] + (((v4[33] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 1016 * ((*((_DWORD *)v4 + 66) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 1000);
    v8 = 24;
    do
    {
      *(_QWORD *)(a2 + 8 * v8) = *(_QWORD *)(v6 + 8 * (v8 - 24));
      v5 += v7;
      v8 += 25 * v7;
    }
    while (v5 < 4);
  }
  return result;
}

BOOL sub_223A7711C(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 1008) + 52);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    *(_QWORD *)(a2 + 992) = *(_QWORD *)(*(_QWORD *)(v4[30] + (((v4[33] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
                                      + 1016 * ((*((_DWORD *)v4 + 66) + (_DWORD)v2) & 0xF));
  }
  return result;
}

uint64_t sub_223A77240(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  __int128 v12;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 3504) + 28);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(v4[42] + (((v4[45] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 3512 * ((*((_DWORD *)v4 + 90) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 3500);
    v8 = 4;
    do
    {
      v9 = 0;
      v10 = v8;
      do
      {
        v11 = (__int128 *)(v6 + 28 * (v10 - 4));
        result = a2 + 28 * v10;
        v12 = *v11;
        *(_OWORD *)(result + 12) = *(__int128 *)((char *)v11 + 12);
        *(_OWORD *)result = v12;
        v9 += v7;
        v10 += 5 * v7;
      }
      while (v9 < 4);
      v5 += v7;
      v8 += 25 * v7;
    }
    while (v5 < 4);
  }
  return result;
}

BOOL sub_223A773C4(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 3504) + 32);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[42] + (((v4[45] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 3512 * ((*((_DWORD *)v4 + 90) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 3500);
    do
    {
      for (i = 0; i < 4; i += v8)
      {
        v10 = (__int128 *)(v7 + 28 * (v5 + i));
        v11 = (_OWORD *)(a2 + 28 * (v5 + i + 20));
        v12 = *v10;
        *(_OWORD *)((char *)v11 + 12) = *(__int128 *)((char *)v10 + 12);
        *v11 = v12;
      }
      v6 += v8;
      v5 += 25 * v8;
    }
    while (v6 < 4);
  }
  return result;
}

BOOL sub_223A77540(_BOOL8 result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int i;
  __int128 *v10;
  _OWORD *v11;
  __int128 v12;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 3504) + 40);
  if ((_DWORD)v2 != -1)
  {
    v4 = (_QWORD *)result;
    if (*(_QWORD *)(result + 88) <= v2
      && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v4[7] + 8 * ((v4[10] + v2) / 0x1F)) + 132 * ((v4[10] + v2) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v5 = 0;
    v6 = 0;
    v7 = *(_QWORD *)(v4[42] + (((v4[45] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 3512 * ((*((_DWORD *)v4 + 90) + (_DWORD)v2) & 0xF);
    v8 = 1 << *(_BYTE *)(v7 + 3500);
    do
    {
      for (i = 0; i < 4; i += v8)
      {
        v10 = (__int128 *)(v7 + 28 * (v5 + i));
        v11 = (_OWORD *)(a2 + 28 * (v5 + i + 100));
        v12 = *v10;
        *(_OWORD *)((char *)v11 + 12) = *(__int128 *)((char *)v10 + 12);
        *v11 = v12;
      }
      v6 += v8;
      v5 += 5 * v8;
    }
    while (v6 < 4);
  }
  return result;
}

__n128 sub_223A776B8(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 3504) + 48);
  if ((_DWORD)v2 != -1)
  {
    if (a1[11] <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v2) / 0x1F)) + 132 * ((a1[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(a1[42] + (((a1[45] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 3512 * ((*((_DWORD *)a1 + 90) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 3500);
    do
    {
      v8 = v6 + 28 * v5;
      v9 = a2 + 28 * (v5 + 120);
      result = *(__n128 *)v8;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)(v8 + 12);
      *(__n128 *)v9 = result;
      v5 += v7;
    }
    while (v5 < 4);
  }
  return result;
}

__n128 sub_223A77810(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 3504) + 44);
  if ((_DWORD)v2 != -1)
  {
    if (a1[11] <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v2) / 0x1F)) + 132 * ((a1[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(a1[42] + (((a1[45] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 3512 * ((*((_DWORD *)a1 + 90) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 3500);
    v8 = 104;
    do
    {
      v9 = v6 + 28 * (v8 - 104);
      v10 = a2 + 28 * v8;
      result = *(__n128 *)v9;
      *(_OWORD *)(v10 + 12) = *(_OWORD *)(v9 + 12);
      *(__n128 *)v10 = result;
      v5 += v7;
      v8 += 5 * v7;
    }
    while (v5 < 4);
  }
  return result;
}

__n128 sub_223A77974(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 3504) + 36);
  if ((_DWORD)v2 != -1)
  {
    if (a1[11] <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v2) / 0x1F)) + 132 * ((a1[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = 0;
    v6 = *(_QWORD *)(a1[42] + (((a1[45] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 3512 * ((*((_DWORD *)a1 + 90) + (_DWORD)v2) & 0xF);
    v7 = 1 << *(_BYTE *)(v6 + 3500);
    v8 = 24;
    do
    {
      v9 = v6 + 28 * (v8 - 24);
      v10 = a2 + 28 * v8;
      result = *(__n128 *)v9;
      *(_OWORD *)(v10 + 12) = *(_OWORD *)(v9 + 12);
      *(__n128 *)v10 = result;
      v5 += v7;
      v8 += 25 * v7;
    }
    while (v5 < 4);
  }
  return result;
}

__n128 sub_223A77ADC(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  __n128 result;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 3504) + 52);
  if ((_DWORD)v2 != -1)
  {
    if (a1[11] <= v2
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v2) / 0x1F)) + 132 * ((a1[10] + v2) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v5 = *(_QWORD *)(a1[42] + (((a1[45] + v2) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 3512 * ((*((_DWORD *)a1 + 90) + (_DWORD)v2) & 0xF);
    result = *(__n128 *)v5;
    *(_OWORD *)(a2 + 3484) = *(_OWORD *)(v5 + 12);
    *(__n128 *)(a2 + 3472) = result;
  }
  return result;
}

BOOL sub_223A77C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int32x2_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x2_t v13;
  __int128 v14;
  float32x2_t v15;
  float32x2_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  float32x2_t *v22;
  float32x2_t *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int32x2_t *v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  signed int v42;
  int *v43;
  int v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int16 *v55;
  int8x16_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  __int32 v60;
  float v62;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  _WORD *v71;
  unsigned int v72;
  _BYTE *v73;
  int32x2_t *v74;
  float32x4_t v75;
  uint64_t v76;
  float32x2_t v77;
  double v78;
  float32x2_t v79;
  float32x2_t v80;
  unint64_t v81;
  unint64_t v82;
  float32x4_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  int v87;
  int8x16_t v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  int32x2_t v96;
  int32x2_t v97;
  int32x2_t v98;
  int32x2_t v99;
  _BYTE *v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t i;
  float *v106;
  float v107;
  float32x2_t v108;
  float v109;
  BOOL v110;
  BOOL v111;
  int32x2_t v113;
  uint64_t v115;
  uint64_t v117;
  float *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  signed int v122;
  uint64_t v123;
  uint64_t v124;
  float *v125;
  float v126;
  float v127;
  float *v128;
  float v129;
  float v130;
  uint64_t v131;
  float v132;
  float *v133;
  float v134;
  float v135;
  float v136;
  float v137;
  BOOL v138;
  uint64_t v139;
  float v140;
  BOOL v141;
  uint64_t v142;
  float v143;
  BOOL v144;
  uint64_t v145;
  float v146;
  BOOL v147;
  uint64_t v148;
  float v149;
  BOOL v150;
  uint64_t v151;
  float v152;
  BOOL v153;
  uint64_t v154;
  float v155;
  BOOL v156;
  uint64_t v157;
  float v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _WORD *v163;
  unsigned int v164;
  BOOL v165;
  uint64_t v166;
  _WORD *v167;
  unsigned int v168;
  BOOL v169;
  _WORD *v170;
  unsigned int v171;
  BOOL v172;
  uint64_t v173;
  _WORD *v174;
  unsigned int v175;
  BOOL v176;
  _WORD *v177;
  unsigned int v178;
  BOOL v179;
  uint64_t v180;
  _WORD *v181;
  unsigned int v182;
  BOOL v183;
  _WORD *v184;
  unsigned int v185;
  BOOL v186;
  uint64_t v187;
  _WORD *v188;
  unsigned int v189;
  BOOL v190;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int32x2_t *v196;
  float v197;
  int v198;
  int v199;
  float v200;
  int32x2_t *v201;
  __int128 v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  float *v211;
  uint64_t v212;
  uint64_t v213;
  _WORD *v214;
  _WORD *v215;
  int v216;
  signed int v217;
  _BYTE v218[2048];
  _BYTE v219[8];
  _QWORD v220[513];
  _BYTE v221[8];
  uint64_t v222;
  _BYTE v223[2056];
  uint64_t v224;
  _BYTE v225[56];
  _BYTE v226[6096];
  uint64_t v227;

  _Q0.f32[0] = MEMORY[0x24BDAC7A8]();
  v19 = v12;
  v20 = v11;
  v216 = v21;
  v23 = v22;
  v24 = v10;
  v25 = v16.f32[0];
  v27 = v26;
  v28 = v15.f32[0];
  v29 = *(float *)&v14;
  v30 = v13.f32[0];
  v32 = v31;
  v33 = _Q0.f32[0];
  v201 = v34;
  v35 = a9;
  v36 = (_WORD *)(v12 + 2930);
  v37 = (_WORD *)(v12 + 2928);
  *(_DWORD *)(v12 + 2928) = 0;
  v38 = *(unsigned __int8 *)(v12 + 2916);
  _Q0.i32[0] = dword_22465CDB8[v38];
  v40 = 513;
  v41 = a9;
  do
  {
    *(_BYTE *)v41 = 0;
    *(_QWORD *)(v41 + 4) = 0xFF7FFFFFFF7FFFFFLL;
    *(_DWORD *)(v41 + 12) = -947920896;
    --v40;
    v41 += 16;
  }
  while (v40 > 1);
  v42 = vcvtps_s32_f32((float)(_Q0.f32[0] * 32767.0) * 1.75);
  v43 = *(int **)(v12 + 2920);
  v44 = *v43;
  v204 = v43[1];
  v192 = v43[2];
  v214 = (_WORD *)(v12 + 2930);
  v215 = (_WORD *)(v12 + 2928);
  v217 = v42;
  v199 = *v43;
  v200 = *(float *)&v14;
  if (!(_DWORD)v38)
  {
    v73 = v225;
    v226[6088] = 0;
    v227 = 0;
    v223[2048] = 0;
    v224 = 0;
    v221[0] = 0;
    v222 = 0;
    v219[0] = 0;
    v220[0] = 0;
    v74 = v9;
    memset_pattern16(v223, &unk_22465CD50, 0x800uLL);
    v76 = 0;
    v77 = *v23;
    LODWORD(v78) = v23[1].i32[0];
    v79 = v23[2];
    v80.i32[0] = v23[3].i32[0];
    v81 = (unint64_t)v23[4];
    LODWORD(v82) = v23[5].i32[0];
    *(float32x2_t *)v83.f32 = v23[6];
    v83.i32[2] = v23[7].i32[0];
    do
    {
      v84 = 0;
      v85 = v73;
      do
      {
        v86 = 0;
        v87 = v199;
        do
        {
          v75.f32[0] = (float)v87;
          v75.f32[1] = (float)(v204 + v84);
          v75.f32[2] = (float)(v192 + v76);
          v88 = (int8x16_t)vmulq_n_f32(v75, v200);
          *(float32x2_t *)v89.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v77, *(float *)v88.i32), v79, *(float32x2_t *)v88.i8, 1), (float32x2_t)v81, (float32x4_t)v88, 2);
          *(float32x2_t *)&v89.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v78, *(float32x2_t *)v88.i8), v80, *(float32x2_t *)v88.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), (float32x2_t)v82);
          v75 = vaddq_f32(v83, v89);
          *(_DWORD *)&v85[v86 + 8] = v75.i32[2];
          *(_QWORD *)&v85[v86] = v75.i64[0];
          v86 += 12;
          ++v87;
        }
        while (v86 != 96);
        ++v84;
        v85 += 96;
      }
      while (v84 != 8);
      ++v76;
      v73 += 768;
    }
    while (v76 != 8);
    v90 = 0;
    v91 = 0;
    v92 = *(float *)(v24 + 16);
    v93 = *(float *)(v24 + 20);
    v94 = *(float *)(v24 + 24);
    v95 = *(float *)(v24 + 28);
    LODWORD(v81) = *(_DWORD *)(v24 + 88);
    LODWORD(v82) = *(_DWORD *)(v24 + 92);
    *(float *)&v81 = (double)v81 + -0.5;
    *(float *)&v82 = (double)v82 + -0.5;
    v96 = v74[5];
    v97 = v74[3];
    v98 = v201[5];
    v99 = v201[3];
    v100 = v225;
    do
    {
      v101 = 0;
      v102 = v100;
      v103 = v90;
      do
      {
        v104 = v103;
        for (i = 8; i != 104; i += 12)
        {
          v106 = (float *)&v102[i];
          v107 = *(float *)&v102[i];
          if (v107 > 0.000001)
          {
            v108.f32[0] = v94 + (float)((float)(v92 * *(v106 - 2)) / v107);
            v109 = v95 + (float)((float)(v93 * *(v106 - 1)) / v107);
            v110 = v108.f32[0] >= -0.5 && v108.f32[0] < *(float *)&v81;
            v111 = !v110 || v109 < -0.5;
            if (!v111 && v109 < *(float *)&v82)
            {
              v108.f32[1] = v109;
              v113 = vcvt_s32_f32(vrndm_f32(vadd_f32(v108, (float32x2_t)0x3F0000003F000000)));
              _D20 = vmul_s32(v96, v113);
              _D20.i16[0] = *(_WORD *)(*(_QWORD *)&v97 + 2 * vadd_s32(vdup_lane_s32(_D20, 1), _D20).u32[0]);
              __asm { FCVT            S20, H20 }
              v115 = 4 * v104;
              *(_DWORD *)&v223[v115] = _D20.i32[0];
              _D19 = vmul_s32(v98, v113);
              _D19.i16[0] = *(_WORD *)(*(_QWORD *)&v99 + 2 * vadd_s32(vdup_lane_s32(_D19, 1), _D19).u32[0]);
              __asm { FCVT            S19, H19 }
              *(_DWORD *)&v218[v115] = _D19.i32[0];
              v220[v104 + 1] = v108;
            }
          }
          ++v104;
        }
        ++v101;
        v103 += 8;
        v102 += 96;
      }
      while (v101 != 8);
      ++v91;
      v90 += 64;
      v100 += 768;
    }
    while (v91 != 8);
    v117 = 0;
    v118 = (float *)v226;
    v119 = 16;
    v120 = 32;
    v121 = v19;
    v122 = v217;
LABEL_62:
    v211 = v118;
    v213 = v117;
    v123 = -1024;
    v205 = v121;
    v207 = v120;
    v209 = v119;
    while (1)
    {
      v124 = v35;
      v125 = (float *)&v223[v119];
      v126 = *(float *)&v221[v119];
      if (v126 > 0.0)
      {
        LODWORD(v78) = *(_DWORD *)&v218[v119 - 16];
        v137 = *(v118 - 12);
        v138 = sub_223A7A124(0, v216, v20, v121, v126, v78, v137, v30, v33, v32, v28, v27, v25);
        v122 = v217;
        v139 = v124 + v123;
        *(_BYTE *)(v139 + 1024) = v138;
        *(_QWORD *)(v124 + v123 + 1028) = *(_QWORD *)&v218[v120 + 2032];
        *(float *)(v139 + 1036) = v137;
        v127 = *(v125 - 3);
        if (v127 <= 0.0)
        {
LABEL_66:
          v128 = (float *)&v223[v119];
          v129 = *(float *)&v223[v119 - 8];
          if (v129 <= 0.0)
            goto LABEL_67;
          goto LABEL_75;
        }
      }
      else
      {
        v127 = *(v125 - 3);
        if (v127 <= 0.0)
          goto LABEL_66;
      }
      LODWORD(v78) = *(_DWORD *)&v218[v119 - 12];
      v140 = *(v118 - 9);
      v141 = sub_223A7A124(0, v216, v20, v121 + 4, v127, v78, v140, v30, v33, v32, v28, v27, v25);
      v122 = v217;
      v142 = v124 + v123;
      *(_BYTE *)(v142 + 1040) = v141;
      *(_QWORD *)(v124 + v123 + 1044) = *(_QWORD *)&v218[v120 + 2040];
      *(float *)(v142 + 1052) = v140;
      v128 = (float *)&v223[v119];
      v129 = *(float *)&v223[v119 - 8];
      if (v129 <= 0.0)
      {
LABEL_67:
        v130 = *(v128 - 1);
        v131 = v124;
        if (v130 <= 0.0)
          goto LABEL_68;
        goto LABEL_76;
      }
LABEL_75:
      LODWORD(v78) = *(_DWORD *)&v218[v119 - 8];
      v143 = *(v118 - 6);
      v144 = sub_223A7A124(0, v216, v20, v121 + 8, v129, v78, v143, v30, v33, v32, v28, v27, v25);
      v122 = v217;
      v145 = v124 + v123;
      *(_BYTE *)(v145 + 1056) = v144;
      *(_QWORD *)(v124 + v123 + 1060) = *(_QWORD *)&v219[v120];
      *(float *)(v145 + 1068) = v143;
      v130 = *(v128 - 1);
      v131 = v124;
      if (v130 <= 0.0)
      {
LABEL_68:
        v132 = *(float *)&v223[v119];
        if (v132 <= 0.0)
          goto LABEL_69;
        goto LABEL_77;
      }
LABEL_76:
      LODWORD(v78) = *(_DWORD *)&v218[v119 - 4];
      v146 = *(v118 - 3);
      v147 = sub_223A7A124(0, v216, v20, v121 + 12, v130, v78, v146, v30, v33, v32, v28, v27, v25);
      v122 = v217;
      v148 = v131 + v123;
      *(_BYTE *)(v148 + 1072) = v147;
      *(_QWORD *)(v131 + v123 + 1076) = *(_QWORD *)((char *)v220 + v120);
      *(float *)(v148 + 1084) = v146;
      v132 = *(float *)&v223[v119];
      if (v132 <= 0.0)
      {
LABEL_69:
        v133 = (float *)&v223[v119];
        v134 = *(float *)&v223[v119 + 4];
        if (v134 <= 0.0)
          goto LABEL_70;
        goto LABEL_78;
      }
LABEL_77:
      LODWORD(v78) = *(_DWORD *)&v218[v119];
      v149 = *v118;
      v150 = sub_223A7A124(0, v216, v20, v121 + 16, v132, v78, *v118, v30, v33, v32, v28, v27, v25);
      v122 = v217;
      v151 = v131 + v123;
      *(_BYTE *)(v151 + 1088) = v150;
      *(_QWORD *)(v131 + v123 + 1092) = *(_QWORD *)((char *)&v220[1] + v120);
      *(float *)(v151 + 1100) = v149;
      v133 = (float *)&v223[v119];
      v134 = *(float *)&v223[v119 + 4];
      if (v134 <= 0.0)
      {
LABEL_70:
        v135 = v133[2];
        v35 = v124;
        if (v135 <= 0.0)
          goto LABEL_71;
        goto LABEL_79;
      }
LABEL_78:
      LODWORD(v78) = *(_DWORD *)&v218[v119 + 4];
      v152 = v118[3];
      v153 = sub_223A7A124(0, v216, v20, v121 + 20, v134, v78, v152, v30, v33, v32, v28, v27, v25);
      v122 = v217;
      v154 = v124 + v123;
      *(_BYTE *)(v154 + 1104) = v153;
      *(_QWORD *)(v124 + v123 + 1108) = *(_QWORD *)((char *)&v220[2] + v120);
      *(float *)(v154 + 1116) = v152;
      v135 = v133[2];
      v35 = v124;
      if (v135 <= 0.0)
      {
LABEL_71:
        v136 = *(float *)&v223[v119 + 12];
        if (v136 > 0.0)
          goto LABEL_80;
        goto LABEL_63;
      }
LABEL_79:
      LODWORD(v78) = *(_DWORD *)&v218[v119 + 8];
      v155 = v118[6];
      v156 = sub_223A7A124(0, v216, v20, v121 + 24, v135, v78, v155, v30, v33, v32, v28, v27, v25);
      v122 = v217;
      v157 = v35 + v123;
      *(_BYTE *)(v157 + 1120) = v156;
      *(_QWORD *)(v35 + v123 + 1124) = *(_QWORD *)((char *)&v220[3] + v120);
      *(float *)(v157 + 1132) = v155;
      v136 = *(float *)&v223[v119 + 12];
      if (v136 > 0.0)
      {
LABEL_80:
        LODWORD(v78) = *(_DWORD *)&v218[v119 + 12];
        v158 = v118[9];
        v159 = sub_223A7A124(0, v216, v20, v121 + 28, v136, v78, v158, v30, v33, v32, v28, v27, v25);
        v122 = v217;
        v160 = v35 + v123;
        *(_BYTE *)(v160 + 1136) = v159;
        *(_QWORD *)(v35 + v123 + 1140) = *(_QWORD *)((char *)&v220[4] + v120);
        *(float *)(v160 + 1148) = v158;
      }
LABEL_63:
      v121 += 36;
      v119 += 32;
      v118 += 24;
      v120 += 64;
      v123 += 128;
      if (!v123)
      {
        v117 = v213 + 1;
        v121 = v205 + 324;
        v35 += 1024;
        v119 = v209 + 256;
        v118 = v211 + 192;
        v120 = v207 + 512;
        if (v213 != 7)
          goto LABEL_62;
        v161 = 0;
        v46 = 1;
        while (2)
        {
          v162 = 0;
LABEL_90:
          v166 = v19 + v162;
          if (*(_BYTE *)(v19 + v162 + 2))
          {
            if (*(__int16 *)(v19 + v162) >= 0)
              v167 = v215;
            else
              v167 = v214;
            v168 = (unsigned __int16)*v167;
            if (v168 <= (unsigned __int16)(v168 + 1))
              LOWORD(v168) = v168 + 1;
            *v167 = v168;
            v169 = *(__int16 *)(v19 + v162) >= v122;
            if (*(_BYTE *)(v166 + 6))
            {
LABEL_97:
              if (*(__int16 *)(v19 + v162 + 4) >= 0)
                v170 = v215;
              else
                v170 = v214;
              v171 = (unsigned __int16)*v170;
              if (v171 <= (unsigned __int16)(v171 + 1))
                LOWORD(v171) = v171 + 1;
              *v170 = v171;
              v172 = *(__int16 *)(v19 + v162 + 4) >= v122;
              v173 = v19 + v162;
              if (*(_BYTE *)(v19 + v162 + 10))
              {
LABEL_103:
                if (*(__int16 *)(v173 + 8) >= 0)
                  v174 = v215;
                else
                  v174 = v214;
                v175 = (unsigned __int16)*v174;
                if (v175 <= (unsigned __int16)(v175 + 1))
                  LOWORD(v175) = v175 + 1;
                *v174 = v175;
                v176 = *(__int16 *)(v173 + 8) >= v122;
                if (*(_BYTE *)(v173 + 14))
                {
LABEL_109:
                  if (*(__int16 *)(v19 + v162 + 12) >= 0)
                    v177 = v215;
                  else
                    v177 = v214;
                  v178 = (unsigned __int16)*v177;
                  if (v178 <= (unsigned __int16)(v178 + 1))
                    LOWORD(v178) = v178 + 1;
                  *v177 = v178;
                  v179 = *(__int16 *)(v19 + v162 + 12) >= v122;
                  v180 = v19 + v162;
                  if (*(_BYTE *)(v19 + v162 + 18))
                  {
LABEL_115:
                    v181 = v215;
                    if (*(__int16 *)(v180 + 16) < 0)
                      v181 = v214;
                    v182 = (unsigned __int16)*v181;
                    if (v182 <= (unsigned __int16)(v182 + 1))
                      LOWORD(v182) = v182 + 1;
                    *v181 = v182;
                    v183 = *(__int16 *)(v180 + 16) >= v122;
                    if (*(_BYTE *)(v180 + 22))
                    {
LABEL_120:
                      v184 = v214;
                      if (*(__int16 *)(v19 + v162 + 20) >= 0)
                        v184 = v215;
                      v185 = (unsigned __int16)*v184;
                      if (v185 <= (unsigned __int16)(v185 + 1))
                        LOWORD(v185) = v185 + 1;
                      *v184 = v185;
                      v186 = *(__int16 *)(v19 + v162 + 20) >= v122;
                      v187 = v19 + v162;
                      if (*(_BYTE *)(v19 + v162 + 26))
                      {
LABEL_125:
                        v188 = v214;
                        if (*(__int16 *)(v187 + 24) >= 0)
                          v188 = v215;
                        v189 = (unsigned __int16)*v188;
                        if (v189 <= (unsigned __int16)(v189 + 1))
                          LOWORD(v189) = v189 + 1;
                        *v188 = v189;
                        v190 = *(__int16 *)(v187 + 24) >= v122;
                        if (!*(_BYTE *)(v187 + 30))
                        {
LABEL_138:
                          v165 = 1;
                          goto LABEL_89;
                        }
LABEL_84:
                        v163 = v214;
                        if (*(__int16 *)(v19 + v162 + 28) >= 0)
                          v163 = v215;
                        v164 = (unsigned __int16)*v163;
                        if (v164 <= (unsigned __int16)(v164 + 1))
                          LOWORD(v164) = v164 + 1;
                        *v163 = v164;
                        v165 = *(__int16 *)(v19 + v162 + 28) >= v122;
LABEL_89:
                        v46 &= v169 && v172 && v176 && v179 && v183 && v186 && v190 && v165;
                        v162 += 36;
                        if (v162 == 288)
                        {
                          ++v161;
                          v19 += 324;
                          if (v161 == 8)
                            return v46 != 0;
                          continue;
                        }
                        goto LABEL_90;
                      }
LABEL_137:
                      v190 = 1;
                      if (!*(_BYTE *)(v187 + 30))
                        goto LABEL_138;
                      goto LABEL_84;
                    }
LABEL_136:
                    v186 = 1;
                    v187 = v19 + v162;
                    if (*(_BYTE *)(v19 + v162 + 26))
                      goto LABEL_125;
                    goto LABEL_137;
                  }
LABEL_135:
                  v183 = 1;
                  if (*(_BYTE *)(v180 + 22))
                    goto LABEL_120;
                  goto LABEL_136;
                }
LABEL_134:
                v179 = 1;
                v180 = v19 + v162;
                if (*(_BYTE *)(v19 + v162 + 18))
                  goto LABEL_115;
                goto LABEL_135;
              }
LABEL_133:
              v176 = 1;
              if (*(_BYTE *)(v173 + 14))
                goto LABEL_109;
              goto LABEL_134;
            }
          }
          else
          {
            v169 = 1;
            if (*(_BYTE *)(v166 + 6))
              goto LABEL_97;
          }
          break;
        }
        v172 = 1;
        v173 = v19 + v162;
        if (*(_BYTE *)(v19 + v162 + 10))
          goto LABEL_103;
        goto LABEL_133;
      }
    }
  }
  v197 = v16.f32[0];
  v198 = v11;
  v45 = 0;
  v46 = 1;
  v47 = -(unsigned __int16)(1 << v38);
  v195 = v10;
  v196 = v9;
  do
  {
    v48 = 0;
    *(float *)&v17 = (float)(v192 + v45);
    v193 = v35;
    v194 = v19;
    v49 = v19;
    v50 = v35;
    v203 = v45;
    v202 = v17;
    do
    {
      v51 = 0;
      v52 = 0;
      v53 = 0;
      v54 = v48 | v45;
      *(float *)&v18 = (float)(v204 + v48);
      do
      {
        if (((v54 | v51) & ~v47) == 0)
        {
          v55 = (__int16 *)(v49 + v53);
          _Q0.f32[0] = (float)(v44 + v51);
          _Q0.i32[1] = v18;
          _Q0.i32[2] = v17;
          v56 = (int8x16_t)vmulq_n_f32(_Q0, v29);
          v13.i32[0] = v23[1].i32[0];
          v15.i32[0] = v23[3].i32[0];
          v16.i32[0] = v23[5].i32[0];
          *(float32x2_t *)v59.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v23, *(float *)v56.i32), v23[2], *(float32x2_t *)v56.i8, 1), v23[4], (float32x4_t)v56, 2);
          v57 = vmla_lane_f32(vmul_f32(v13, *(float32x2_t *)v56.i8), v15, *(float32x2_t *)v56.i8, 1);
          v58 = (float32x4_t)vextq_s8(v56, v56, 8uLL);
          v13 = vmla_f32(v57, *(float32x2_t *)v58.f32, v16);
          *(float32x2_t *)&v59.u32[2] = v13;
          *(float32x2_t *)v58.f32 = v23[6];
          v58.i32[2] = v23[7].i32[0];
          _Q0 = vaddq_f32(v58, v59);
          v60 = _Q0.i32[2];
          if (_Q0.f32[2] > 0.000001)
          {
            *(float *)&v14 = *(float *)(v24 + 24) + (float)((float)(*(float *)(v24 + 16) * _Q0.f32[0]) / _Q0.f32[2]);
            v59.i32[0] = *(_DWORD *)(v24 + 88);
            *(double *)v59.i64 = (double)v59.u64[0] + -0.5;
            v59.f32[0] = *(double *)v59.i64;
            if (*(float *)&v14 >= -0.5 && *(float *)&v14 < v59.f32[0])
            {
              v62 = *(float *)(v24 + 28)
                  + (float)(vmuls_lane_f32(*(float *)(v24 + 20), *(float32x2_t *)_Q0.f32, 1) / _Q0.f32[2]);
              v59.i32[0] = *(_DWORD *)(v24 + 92);
              v59.f32[0] = (double)v59.u64[0] + -0.5;
              if (v62 >= -0.5 && v62 < v59.f32[0])
              {
                *((float *)&v14 + 1) = v62;
                _D1 = vcvt_s32_f32(vrndm_f32(vadd_f32(*(float32x2_t *)&v14, (float32x2_t)0x3F0000003F000000)));
                *(int32x2_t *)_Q0.f32 = vmul_s32(v9[5], _D1);
                v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q0.f32, 1);
                _Q0.i16[0] = *(_WORD *)(*(_QWORD *)&v9[3] + 2 * vadd_s32((int32x2_t)v13, *(int32x2_t *)_Q0.f32).u32[0]);
                __asm { FCVT            S0, H0 }
                if (_Q0.f32[0] > -65504.0)
                {
                  _D1.i16[0] = *(_WORD *)(*(_QWORD *)&v201[3]
                                        + 2
                                        * (v201[5].i32[1] * _D1.i32[1] + v201[5].i32[0] * _D1.i32[0]));
                  __asm { FCVT            S1, H1 }
                  v206 = v14;
                  v208 = v18;
                  v210 = v50;
                  v212 = v48;
                  v68 = v38;
                  v69 = sub_223A7A124(v38, v216, v198, v49 + v53, _Q0.f32[0], *(double *)&_D1, _Q0.f32[2], v30, v33, v32, v28, v27, v197);
                  _Q0.i32[3] = HIDWORD(v206);
                  v18 = v208;
                  v50 = v210;
                  v48 = v212;
                  v17 = v202;
                  v45 = v203;
                  v38 = v68;
                  v44 = v199;
                  v29 = v200;
                  v42 = v217;
                  v36 = v214;
                  v37 = v215;
                  v70 = v210 + v52;
                  *(_BYTE *)v70 = v69;
                  v24 = v195;
                  v9 = v196;
                  *(_QWORD *)(v70 + 4) = v206;
                  *(_DWORD *)(v210 + 4 * v53 + 12) = v60;
                }
              }
            }
          }
          if (*(_BYTE *)(v49 + v53 + 2))
          {
            if (*v55 >= 0)
              v71 = v37;
            else
              v71 = v36;
            v72 = (unsigned __int16)*v71;
            if (v72 <= (unsigned __int16)(v72 + 1))
              LOWORD(v72) = v72 + 1;
            *v71 = v72;
            if (v46 && *(_BYTE *)(v49 + v53 + 2) && *v55 < v42)
              v46 = 0;
          }
        }
        v53 += 4;
        v52 += 16;
        ++v51;
      }
      while (v53 != 32);
      ++v48;
      v50 += 128;
      v49 += 36;
    }
    while (v48 != 8);
    ++v45;
    v35 = v193 + 1024;
    v19 = v194 + 324;
  }
  while (v45 != 8);
  return v46 != 0;
}

BOOL sub_223A789F4()
{
  int32x2_t *v0;
  float32x2_t v1;
  float32x2_t v2;
  float32x2_t v3;
  __int128 v4;
  __int128 v5;
  __int16 *v6;
  __int16 *v7;
  int v8;
  int v9;
  float32x2_t *v10;
  float32x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int32x2_t *v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  float32x4_t v28;
  signed int v29;
  int *v30;
  int v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  __int16 *v36;
  uint64_t v37;
  int8x16_t v38;
  unint64_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x2_t v43;
  double v44;
  float v46;
  uint64_t v53;
  _WORD *v54;
  unsigned int v55;
  uint64_t *v56;
  float32x4_t v57;
  uint64_t v58;
  float32x2_t v59;
  double v60;
  float32x2_t v61;
  float32x2_t v62;
  unint64_t v63;
  unint64_t v64;
  float32x4_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  int8x16_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  int32x2_t v81;
  float *v82;
  uint64_t v83;
  float *v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  float v88;
  float32x2_t v89;
  float v90;
  BOOL v91;
  BOOL v92;
  int32x2_t v94;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  __int16 *v100;
  signed int v101;
  uint64_t v102;
  uint64_t v103;
  float *v104;
  float v105;
  float *v106;
  float v107;
  float v108;
  float *v109;
  float v110;
  float v111;
  float *v112;
  float v113;
  float v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  _WORD *v118;
  unsigned int v119;
  BOOL v120;
  __int16 *v121;
  _WORD *v122;
  unsigned int v123;
  BOOL v124;
  _WORD *v125;
  unsigned int v126;
  BOOL v127;
  __int16 *v128;
  _WORD *v129;
  unsigned int v130;
  BOOL v131;
  _WORD *v132;
  unsigned int v133;
  BOOL v134;
  __int16 *v135;
  _WORD *v136;
  unsigned int v137;
  BOOL v138;
  _WORD *v139;
  unsigned int v140;
  BOOL v141;
  __int16 *v142;
  _WORD *v143;
  unsigned int v144;
  BOOL v145;
  int v147;
  int v148;
  float v149;
  int32x2_t *v150;
  int32x2_t *v151;
  __int128 v152;
  int v153;
  __int128 v154;
  __int16 *v155;
  uint64_t v156;
  _WORD *v157;
  _WORD *v158;
  int v159;
  int v160;
  signed int v161;
  _BYTE v162[2056];
  uint64_t v163;
  _BYTE __b[2056];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE v168[6096];
  uint64_t v169;

  v0 = (int32x2_t *)MEMORY[0x24BDAC7A8]();
  v7 = v6;
  v159 = v8;
  v160 = v9;
  v11 = v10;
  v13 = v12;
  v14 = v3.f32[0];
  v16 = v15;
  v17 = v2.f32[0];
  v19 = v18;
  v20 = v1.f32[0];
  v22 = v21;
  v23 = v28.f32[0];
  v151 = v24;
  v25 = v6 + 1465;
  v26 = v6 + 1464;
  v27 = *((unsigned __int8 *)v6 + 2916);
  v28.i32[0] = dword_22465CDB8[v27];
  *((_DWORD *)v6 + 732) = 0;
  v29 = vcvtps_s32_f32((float)(v28.f32[0] * 32767.0) * 1.75);
  v30 = (int *)*((_QWORD *)v6 + 365);
  v31 = *v30;
  v153 = v30[1];
  v147 = v30[2];
  v157 = v6 + 1465;
  v158 = v6 + 1464;
  v161 = v29;
  v150 = v0;
  v149 = v18;
  if (!v27)
  {
    v56 = &v166;
    v168[6088] = 0;
    v169 = 0;
    __b[2048] = 0;
    v165 = 0;
    v162[2048] = 0;
    v163 = 0;
    memset_pattern16(__b, &unk_22465CD50, 0x800uLL);
    v58 = 0;
    v59 = *v11;
    LODWORD(v60) = v11[1].i32[0];
    v61 = v11[2];
    v62.i32[0] = v11[3].i32[0];
    v63 = (unint64_t)v11[4];
    LODWORD(v64) = v11[5].i32[0];
    *(float32x2_t *)v65.f32 = v11[6];
    v65.i32[2] = v11[7].i32[0];
    do
    {
      v66 = 0;
      v67 = v56;
      do
      {
        v68 = 0;
        v69 = v31;
        do
        {
          v57.f32[0] = (float)v69;
          v57.f32[1] = (float)(v153 + v66);
          v57.f32[2] = (float)(v147 + v58);
          v70 = (int8x16_t)vmulq_n_f32(v57, v149);
          *(float32x2_t *)v71.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v59, *(float *)v70.i32), v61, *(float32x2_t *)v70.i8, 1), (float32x2_t)v63, (float32x4_t)v70, 2);
          *(float32x2_t *)&v71.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v60, *(float32x2_t *)v70.i8), v62, *(float32x2_t *)v70.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), (float32x2_t)v64);
          v57 = vaddq_f32(v65, v71);
          *(_DWORD *)((char *)v67 + v68 + 8) = v57.i32[2];
          *(uint64_t *)((char *)v67 + v68) = v57.i64[0];
          v68 += 12;
          ++v69;
        }
        while (v68 != 96);
        ++v66;
        v67 += 12;
      }
      while (v66 != 8);
      ++v58;
      v56 += 96;
    }
    while (v58 != 8);
    v72 = 0;
    v73 = 0;
    v74 = *(float *)(v13 + 16);
    v75 = *(float *)(v13 + 20);
    v76 = *(float *)(v13 + 24);
    v77 = *(float *)(v13 + 28);
    LODWORD(v63) = *(_DWORD *)(v13 + 88);
    LODWORD(v64) = *(_DWORD *)(v13 + 92);
    *(float *)&v63 = (double)v63 + -0.5;
    *(float *)&v64 = (double)v64 + -0.5;
    v78 = v150[5];
    v79 = v150[3];
    v80 = v151[5];
    v81 = v151[3];
    v82 = (float *)&v167;
    do
    {
      v83 = 0;
      v84 = v82;
      v85 = v72;
      do
      {
        v86 = 0;
        v87 = v84;
        do
        {
          v88 = *v87;
          if (*v87 > 0.000001)
          {
            v89.f32[0] = v76 + (float)((float)(v74 * *(v87 - 2)) / v88);
            v90 = v77 + (float)((float)(v75 * *(v87 - 1)) / v88);
            v91 = v89.f32[0] >= -0.5 && v89.f32[0] < *(float *)&v63;
            v92 = !v91 || v90 < -0.5;
            if (!v92 && v90 < *(float *)&v64)
            {
              v89.f32[1] = v90;
              v94 = vcvt_s32_f32(vrndm_f32(vadd_f32(v89, (float32x2_t)0x3F0000003F000000)));
              _D19 = vmul_s32(v78, v94);
              _D19.i16[0] = *(_WORD *)(*(_QWORD *)&v79 + 2 * vadd_s32(vdup_lane_s32(_D19, 1), _D19).u32[0]);
              __asm { FCVT            S19, H19 }
              *(_DWORD *)&__b[v85 + v86] = _D19.i32[0];
              _D18 = vmul_s32(v80, v94);
              _D18.i16[0] = *(_WORD *)(*(_QWORD *)&v81 + 2 * vadd_s32(vdup_lane_s32(_D18, 1), _D18).u32[0]);
              __asm { FCVT            S18, H18 }
              *(_DWORD *)&v162[v85 + v86] = _D18.i32[0];
            }
          }
          v86 += 4;
          v87 += 3;
        }
        while (v86 != 32);
        ++v83;
        v85 += 32;
        v84 += 24;
      }
      while (v83 != 8);
      ++v73;
      v72 += 256;
      v82 += 192;
    }
    while (v73 != 8);
    v97 = 0;
    v98 = 0;
    v99 = (float *)v168;
    v100 = v7;
    v101 = v161;
LABEL_60:
    v156 = v98;
    v102 = 0;
    v103 = v97;
    v104 = v99;
    while (1)
    {
      v105 = *(float *)&__b[v103];
      if (v105 > 0.0)
      {
        LODWORD(v60) = *(_DWORD *)&v162[v103];
        sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102], v105, v60, *(v104 - 12), v20, v23, v22, v17, v16, v14);
        v101 = v161;
        v106 = (float *)&__b[v103];
        v107 = *(float *)&__b[v103 + 4];
        if (v107 <= 0.0)
        {
LABEL_64:
          v108 = v106[2];
          if (v108 <= 0.0)
            goto LABEL_65;
          goto LABEL_73;
        }
      }
      else
      {
        v106 = (float *)&__b[v103];
        v107 = *(float *)&__b[v103 + 4];
        if (v107 <= 0.0)
          goto LABEL_64;
      }
      LODWORD(v60) = *(_DWORD *)&v162[v103 + 4];
      sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102 + 2], v107, v60, *(v104 - 9), v20, v23, v22, v17, v16, v14);
      v101 = v161;
      v108 = v106[2];
      if (v108 <= 0.0)
      {
LABEL_65:
        v109 = (float *)&__b[v103];
        v110 = *(float *)&__b[v103 + 12];
        if (v110 <= 0.0)
          goto LABEL_66;
        goto LABEL_74;
      }
LABEL_73:
      LODWORD(v60) = *(_DWORD *)&v162[v103 + 8];
      sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102 + 4], v108, v60, *(v104 - 6), v20, v23, v22, v17, v16, v14);
      v101 = v161;
      v109 = (float *)&__b[v103];
      v110 = *(float *)&__b[v103 + 12];
      if (v110 <= 0.0)
      {
LABEL_66:
        v111 = v109[4];
        if (v111 <= 0.0)
          goto LABEL_67;
        goto LABEL_75;
      }
LABEL_74:
      LODWORD(v60) = *(_DWORD *)&v162[v103 + 12];
      sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102 + 6], v110, v60, *(v104 - 3), v20, v23, v22, v17, v16, v14);
      v101 = v161;
      v111 = v109[4];
      if (v111 <= 0.0)
      {
LABEL_67:
        v112 = (float *)&__b[v103];
        v113 = *(float *)&__b[v103 + 20];
        if (v113 <= 0.0)
          goto LABEL_68;
        goto LABEL_76;
      }
LABEL_75:
      LODWORD(v60) = *(_DWORD *)&v162[v103 + 16];
      sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102 + 8], v111, v60, *v104, v20, v23, v22, v17, v16, v14);
      v101 = v161;
      v112 = (float *)&__b[v103];
      v113 = *(float *)&__b[v103 + 20];
      if (v113 <= 0.0)
      {
LABEL_68:
        v114 = v112[6];
        if (v114 <= 0.0)
          goto LABEL_69;
        goto LABEL_77;
      }
LABEL_76:
      LODWORD(v60) = *(_DWORD *)&v162[v103 + 20];
      sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102 + 10], v113, v60, v104[3], v20, v23, v22, v17, v16, v14);
      v101 = v161;
      v114 = v112[6];
      if (v114 <= 0.0)
      {
LABEL_69:
        v115 = *(float *)&__b[v103 + 28];
        if (v115 > 0.0)
          goto LABEL_78;
        goto LABEL_61;
      }
LABEL_77:
      LODWORD(v60) = *(_DWORD *)&v162[v103 + 24];
      sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102 + 12], v114, v60, v104[6], v20, v23, v22, v17, v16, v14);
      v101 = v161;
      v115 = *(float *)&__b[v103 + 28];
      if (v115 > 0.0)
      {
LABEL_78:
        LODWORD(v60) = *(_DWORD *)&v162[v103 + 28];
        sub_223A7A124(0, v159, v160, (uint64_t)&v100[v102 + 14], v115, v60, v104[9], v20, v23, v22, v17, v16, v14);
        v101 = v161;
      }
LABEL_61:
      v102 += 18;
      v104 += 24;
      v103 += 32;
      if (v102 == 144)
      {
        v98 = v156 + 1;
        v100 += 162;
        v99 += 192;
        v97 += 256;
        if (v156 != 7)
          goto LABEL_60;
        v116 = 0;
        v33 = 1;
        while (2)
        {
          v117 = 0;
LABEL_88:
          v121 = &v7[v117];
          if (LOBYTE(v7[v117 + 1]))
          {
            if (v7[v117] >= 0)
              v122 = v158;
            else
              v122 = v157;
            v123 = (unsigned __int16)*v122;
            if (v123 <= (unsigned __int16)(v123 + 1))
              LOWORD(v123) = v123 + 1;
            *v122 = v123;
            v124 = v7[v117] >= v101;
            if (*((_BYTE *)v121 + 6))
            {
LABEL_95:
              if (v7[v117 + 2] >= 0)
                v125 = v158;
              else
                v125 = v157;
              v126 = (unsigned __int16)*v125;
              if (v126 <= (unsigned __int16)(v126 + 1))
                LOWORD(v126) = v126 + 1;
              *v125 = v126;
              v127 = v7[v117 + 2] >= v101;
              v128 = &v7[v117];
              if (LOBYTE(v7[v117 + 5]))
              {
LABEL_101:
                if (v128[4] >= 0)
                  v129 = v158;
                else
                  v129 = v157;
                v130 = (unsigned __int16)*v129;
                if (v130 <= (unsigned __int16)(v130 + 1))
                  LOWORD(v130) = v130 + 1;
                *v129 = v130;
                v131 = v128[4] >= v101;
                if (*((_BYTE *)v128 + 14))
                {
LABEL_107:
                  if (v7[v117 + 6] >= 0)
                    v132 = v158;
                  else
                    v132 = v157;
                  v133 = (unsigned __int16)*v132;
                  if (v133 <= (unsigned __int16)(v133 + 1))
                    LOWORD(v133) = v133 + 1;
                  *v132 = v133;
                  v134 = v7[v117 + 6] >= v101;
                  v135 = &v7[v117];
                  if (LOBYTE(v7[v117 + 9]))
                  {
LABEL_113:
                    v136 = v158;
                    if (v135[8] < 0)
                      v136 = v157;
                    v137 = (unsigned __int16)*v136;
                    if (v137 <= (unsigned __int16)(v137 + 1))
                      LOWORD(v137) = v137 + 1;
                    *v136 = v137;
                    v138 = v135[8] >= v101;
                    if (*((_BYTE *)v135 + 22))
                    {
LABEL_118:
                      v139 = v157;
                      if (v7[v117 + 10] >= 0)
                        v139 = v158;
                      v140 = (unsigned __int16)*v139;
                      if (v140 <= (unsigned __int16)(v140 + 1))
                        LOWORD(v140) = v140 + 1;
                      *v139 = v140;
                      v141 = v7[v117 + 10] >= v101;
                      v142 = &v7[v117];
                      if (LOBYTE(v7[v117 + 13]))
                      {
LABEL_123:
                        v143 = v157;
                        if (v142[12] >= 0)
                          v143 = v158;
                        v144 = (unsigned __int16)*v143;
                        if (v144 <= (unsigned __int16)(v144 + 1))
                          LOWORD(v144) = v144 + 1;
                        *v143 = v144;
                        v145 = v142[12] >= v101;
                        if (!*((_BYTE *)v142 + 30))
                        {
LABEL_136:
                          v120 = 1;
                          goto LABEL_87;
                        }
LABEL_82:
                        v118 = v157;
                        if (v7[v117 + 14] >= 0)
                          v118 = v158;
                        v119 = (unsigned __int16)*v118;
                        if (v119 <= (unsigned __int16)(v119 + 1))
                          LOWORD(v119) = v119 + 1;
                        *v118 = v119;
                        v120 = v7[v117 + 14] >= v101;
LABEL_87:
                        v33 &= v124 && v127 && v131 && v134 && v138 && v141 && v145 && v120;
                        v117 += 18;
                        if (v117 == 144)
                        {
                          ++v116;
                          v7 += 162;
                          if (v116 == 8)
                            return v33 != 0;
                          continue;
                        }
                        goto LABEL_88;
                      }
LABEL_135:
                      v145 = 1;
                      if (!*((_BYTE *)v142 + 30))
                        goto LABEL_136;
                      goto LABEL_82;
                    }
LABEL_134:
                    v141 = 1;
                    v142 = &v7[v117];
                    if (LOBYTE(v7[v117 + 13]))
                      goto LABEL_123;
                    goto LABEL_135;
                  }
LABEL_133:
                  v138 = 1;
                  if (*((_BYTE *)v135 + 22))
                    goto LABEL_118;
                  goto LABEL_134;
                }
LABEL_132:
                v134 = 1;
                v135 = &v7[v117];
                if (LOBYTE(v7[v117 + 9]))
                  goto LABEL_113;
                goto LABEL_133;
              }
LABEL_131:
              v131 = 1;
              if (*((_BYTE *)v128 + 14))
                goto LABEL_107;
              goto LABEL_132;
            }
          }
          else
          {
            v124 = 1;
            if (*((_BYTE *)v121 + 6))
              goto LABEL_95;
          }
          break;
        }
        v127 = 1;
        v128 = &v7[v117];
        if (LOBYTE(v7[v117 + 5]))
          goto LABEL_101;
        goto LABEL_131;
      }
    }
  }
  v32 = 0;
  v33 = 1;
  v34 = -(unsigned __int16)(1 << v27);
  v148 = *v30;
  do
  {
    v35 = 0;
    *(float *)&v4 = (float)(v147 + v32);
    v36 = v7;
    v152 = v4;
    do
    {
      v37 = 0;
      *(float *)&v5 = (float)(v153 + v35);
      v155 = v36;
      do
      {
        if (((v35 | v32 | v37) & ~v34) == 0)
        {
          v28.f32[0] = (float)(v31 + v37);
          v28.i32[1] = v5;
          v28.i32[2] = v4;
          v38 = (int8x16_t)vmulq_n_f32(v28, v19);
          v1.i32[0] = v11[1].i32[0];
          v39 = (unint64_t)v11[2];
          v2.i32[0] = v11[3].i32[0];
          v3.i32[0] = v11[5].i32[0];
          *(float32x2_t *)v40.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*v11, *(float *)v38.i32), (float32x2_t)v39, *(float32x2_t *)v38.i8, 1), v11[4], (float32x4_t)v38, 2);
          v41 = vmla_lane_f32(vmul_f32(v1, *(float32x2_t *)v38.i8), v2, *(float32x2_t *)v38.i8, 1);
          v28 = (float32x4_t)vextq_s8(v38, v38, 8uLL);
          v1 = vmla_f32(v41, *(float32x2_t *)v28.f32, v3);
          *(float32x2_t *)&v40.u32[2] = v1;
          *(float32x2_t *)v28.f32 = v11[6];
          v28.i32[2] = v11[7].i32[0];
          _Q1 = vaddq_f32(v28, v40);
          if (_Q1.f32[2] > 0.000001)
          {
            v43.f32[0] = *(float *)(v13 + 24) + (float)((float)(*(float *)(v13 + 16) * _Q1.f32[0]) / _Q1.f32[2]);
            LODWORD(v39) = *(_DWORD *)(v13 + 88);
            v44 = (double)v39 + -0.5;
            *(float *)&v44 = v44;
            if (v43.f32[0] >= -0.5 && v43.f32[0] < *(float *)&v44)
            {
              v46 = *(float *)(v13 + 28)
                  + (float)(vmuls_lane_f32(*(float *)(v13 + 20), *(float32x2_t *)_Q1.f32, 1) / _Q1.f32[2]);
              LODWORD(v44) = *(_DWORD *)(v13 + 92);
              *(float *)&v44 = (double)*(unint64_t *)&v44 + -0.5;
              if (v46 >= -0.5 && v46 < *(float *)&v44)
              {
                v43.f32[1] = v46;
                *(int32x2_t *)_Q1.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v43, (float32x2_t)0x3F0000003F000000)));
                _D0 = vmul_s32(v0[5], *(int32x2_t *)_Q1.f32);
                _D0.i16[0] = *(_WORD *)(*(_QWORD *)&v0[3] + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                __asm { FCVT            S0, H0 }
                if (_S0 > -65504.0)
                {
                  *(int32x2_t *)_Q1.f32 = vmul_s32(v151[5], *(int32x2_t *)_Q1.f32);
                  *(int32x2_t *)_Q1.f32 = vadd_s32(*(int32x2_t *)_Q1.f32, vdup_lane_s32(*(int32x2_t *)_Q1.f32, 1));
                  _Q1.i16[0] = *(_WORD *)(*(_QWORD *)&v151[3] + 2 * _Q1.u32[0]);
                  __asm { FCVT            S1, H1 }
                  v53 = v27;
                  v154 = v5;
                  sub_223A7A124(v27, v159, v160, (uint64_t)v36, _S0, *(double *)_Q1.i64, _Q1.f32[2], v20, v23, v22, v17, v16, v14);
                  v5 = v154;
                  v4 = v152;
                  v27 = v53;
                  v31 = v148;
                  v19 = v149;
                  v0 = v150;
                  v29 = v161;
                  v25 = v157;
                  v26 = v158;
                }
              }
            }
          }
          if (*((_BYTE *)v36 + 2))
          {
            if (*v36 >= 0)
              v54 = v26;
            else
              v54 = v25;
            v55 = (unsigned __int16)*v54;
            if (v55 <= (unsigned __int16)(v55 + 1))
              LOWORD(v55) = v55 + 1;
            *v54 = v55;
            if (v33 && *((_BYTE *)v36 + 2) && *v36 < v29)
              v33 = 0;
          }
        }
        ++v37;
        v36 += 2;
      }
      while (v37 != 8);
      ++v35;
      v36 = v155 + 18;
    }
    while (v35 != 8);
    ++v32;
    v7 += 162;
  }
  while (v32 != 8);
  return v33 != 0;
}

void sub_223A795C4(float32x2_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  int8x16_t v14;
  int8x16_t v15;
  float32x2_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  float *v27;
  uint64_t v28;
  float *v29;
  float *v30;
  float32x2_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t *v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float *v39;
  float32x2_t *v40;
  float v41;
  float v42;
  BOOL v43;
  uint64_t v44;
  float32x2_t v45;
  float v46;
  float v47;
  float32x2_t v48;
  float v49;
  float32x4_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float v64;
  float32x2_t **v65;
  uint64_t v66;
  uint64_t v67;
  float32x2_t *v68;
  float v69;
  float32x2_t **v70;
  float32x2_t **v71;
  float32x2_t *v72;
  float32x4_t v73;
  float v74;
  _BOOL4 v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  float *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  float *v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float *v94;
  uint64_t v95;
  float *v96;
  uint64_t v97;
  float *v98;
  uint64_t v99;
  uint64_t v103;
  float v104;
  float __b[7];
  _BYTE v107[2028];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[2];
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  if (a5
    && a6
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockIntegrator.cpp", 144, (uint64_t)"!(plane_data && single_shot)", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v107[2020] = 0;
  v108 = 0;
  memset_pattern16(__b, &unk_2246566A0, 0x800uLL);
  if (a5 | a6)
  {
    if (a5)
    {
      sub_2242A773C(a5, v110);
      v17 = v110[0];
      v18 = v111;
      v19 = v112;
    }
    else
    {
      if (*(_BYTE *)(a6 + 136) && *(_QWORD *)(a6 + 112))
      {
        v20 = *(_QWORD *)(a6 + 64);
        v21 = *(std::__shared_weak_count **)(a6 + 72);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v20 + 88))(v20, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1312");
      }
      v17 = *(_QWORD *)(a6 + 112);
      v18 = *(_DWORD *)(a6 + 128);
      v19 = *(_DWORD *)(a6 + 132);
    }
    v25 = 0;
    if (a5)
      v26 = (_QWORD *)(a5 + 184);
    else
      v26 = (_QWORD *)a6;
    v27 = (float *)(a3 + 4);
    v28 = a9;
    v29 = (float *)(a2 + 8);
    v30 = __b;
    v31 = a1;
    v32 = a10;
    do
    {
      v103 = v25;
      v33 = 0;
      v34 = v28;
      v96 = v29;
      v98 = v27;
      v35 = v31;
      v36 = v32;
      v94 = v30;
      do
      {
        v37 = 0;
        v38 = v29;
        v39 = v27;
        v40 = v35;
        do
        {
          if (vabds_f32(*(float *)(v34 + v37 * 4), *v38) <= 0.18)
          {
            v41 = *(v39 - 1);
            v42 = *v39;
            v43 = v41 == -3.4028e38 && v42 == -3.4028e38;
            if (!v43
              && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26[1] - *v26) >> 3) > *(unsigned __int8 *)(v17
                                                                                             + v18 * v41
                                                                                             + v19 * v42))
            {
              v44 = *v26 + 24 * *(unsigned __int8 *)(v17 + v18 * v41 + v19 * v42);
              v16.i32[0] = *(_DWORD *)(v44 + 20);
              v14.i64[0] = *(_QWORD *)(v44 + 12);
              v45 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1);
              v14.i32[2] = v16.i32[0];
              v46 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v14.i8), v45, *(float32x2_t *)v14.i8, 1), v16, v16).f32[0];
              if (v46 != 1.0)
              {
                v47 = v46 + -1.0;
                if (v46 < 1.0)
                  v47 = 1.0 - v46;
                if (v47 > 0.000001)
                  v14 = (int8x16_t)vmulq_n_f32((float32x4_t)v14, 1.0 / sqrtf(v46));
              }
              *(float32x2_t *)v15.i8 = *v40;
              v15.i32[2] = v40[1].i32[0];
              v45.i32[0] = *(_DWORD *)(v44 + 8);
              v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1);
              v16 = (float32x2_t)vextq_s8(v14, v14, 8uLL).u64[0];
              v49 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v40, *(float32x2_t *)v14.i8), v48, *v40, 1), v16, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v44, *(float32x2_t *)v14.i8), v48, *(float32x2_t *)v44, 1), v16, v45)).f32[0];
              if (v49 <= 0.18 && v49 >= -0.12)
              {
                *(float *)(v34 + v37 * 4) = *v38 + v49;
                *(float *)(v36 + v37 * 4) = (float)(0.18 - fabsf(v49)) * 27.778;
                v30[v37] = v49;
              }
            }
          }
          ++v37;
          v40 = (float32x2_t *)((char *)v40 + 12);
          v39 += 2;
          v38 += 3;
        }
        while (v37 != 8);
        ++v33;
        v30 += 8;
        v36 += 32;
        v35 += 12;
        v27 += 16;
        v29 += 24;
        v34 += 32;
      }
      while (v33 != 8);
      v25 = v103 + 1;
      v30 = v94 + 64;
      v32 += 256;
      v31 += 96;
      v27 = v98 + 128;
      v29 = v96 + 192;
      v28 += 256;
    }
    while (v103 != 7);
  }
  if (*a4 == a4[1])
    return;
  v113 = 0;
  bzero(v110, 0x201uLL);
  v55 = 0;
  v57 = a9;
  v56 = a2;
  v58 = a7;
  do
  {
    v59 = 0;
    v95 = v55;
    v97 = v55 << 6;
    do
    {
      v60 = 0;
      v99 = v59;
      v61 = v97 + 8 * v59;
      do
      {
        v62 = v61 + v60;
        if (__b[v61 + v60] >= 3.4028e38)
        {
          v63 = *(float *)(v57 + 4 * v62);
          v64 = *(float *)(v56 + 12 * v62 + 8);
          if (vabds_f32(v63, v64) <= 0.18)
          {
            v65 = (float32x2_t **)a4[1];
            if ((float32x2_t **)*a4 != v65)
            {
              v66 = 0;
              v67 = 0;
              v68 = (float32x2_t *)((char *)a1 + 12 * v62);
              v69 = v63 - v64;
              v70 = (float32x2_t **)(*a4 + 360);
              do
              {
                if (*(_BYTE *)(*a8 + v67))
                {
                  v72 = (float32x2_t *)(*v58 + v66);
                  v51.i32[0] = v72[1].i32[0];
                  v52.i32[0] = v72[3].i32[0];
                  v53.i32[0] = v72[5].i32[0];
                  v54.i32[0] = v68[1].i32[0];
                  *(float32x2_t *)v73.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v72, COERCE_FLOAT(*v68)), v72[2], *v68, 1), v72[4], v54.f32[0]);
                  *(float32x2_t *)&v73.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v51.f32, *v68), *(float32x2_t *)v52.f32, *v68, 1), v54, v53);
                  *(float32x2_t *)v51.f32 = v72[6];
                  v51.i32[2] = v72[7].i32[0];
                  v52 = vaddq_f32(v73, v51);
                  v74 = v52.f32[2];
                  if (v52.f32[2] < 0.18
                    && v52.f32[2] > -0.12
                    && v52.f32[0] >= *((float *)v70 - 14)
                    && v52.f32[0] <= *((float *)v70 - 12)
                    && v52.f32[1] >= *((float *)v70 - 13)
                    && v52.f32[1] <= *((float *)v70 - 11))
                  {
                    v104 = v52.f32[2];
                    v109 = v52.i64[0];
                    v76 = sub_223FBC2C4(v70, (float *)&v109, 0, 0.000001);
                    v57 = a9;
                    v56 = a2;
                    v58 = a7;
                    if (v76)
                    {
                      if (v69 >= -0.06 || (v74 = v104, v104 <= 0.0))
                      {
                        ++*((_BYTE *)v110 + v62);
                        __b[v62] = v74;
                      }
                    }
                  }
                }
                ++v67;
                v66 += 64;
                v71 = v70 + 13;
                v70 += 58;
              }
              while (v71 != v65);
            }
          }
        }
        ++v60;
      }
      while (v60 != 8);
      v59 = v99 + 1;
    }
    while (v99 != 7);
    v55 = v95 + 1;
  }
  while (v95 != 7);
  v77 = 0;
  v78 = v57 + 16;
  v79 = v107;
  v80 = (float *)(v56 + 56);
  v81 = (char *)v110 + 3;
  v82 = a10 + 16;
  while (2)
  {
    v83 = 0;
    v84 = v81;
    v85 = v80;
    do
    {
      if (*(v84 - 3) == 1)
      {
        v86 = *(float *)&v79[v83 - 28];
        *(float *)(v78 + v83 - 16) = *(v85 - 12) + v86;
        *(float *)(v82 + v83 - 16) = (float)(0.18 - fabsf(v86)) * 27.778;
        if (*(v84 - 2) != 1)
        {
LABEL_74:
          if (*(v84 - 1) != 1)
            goto LABEL_75;
          goto LABEL_83;
        }
      }
      else if (*(v84 - 2) != 1)
      {
        goto LABEL_74;
      }
      v87 = *(float *)&v79[v83 - 24];
      *(float *)(v78 + v83 - 12) = *(v85 - 9) + v87;
      *(float *)(v82 + v83 - 12) = (float)(0.18 - fabsf(v87)) * 27.778;
      if (*(v84 - 1) != 1)
      {
LABEL_75:
        if (*v84 != 1)
          goto LABEL_76;
        goto LABEL_84;
      }
LABEL_83:
      v88 = *(float *)&v79[v83 - 20];
      *(float *)(v78 + v83 - 8) = *(v85 - 6) + v88;
      *(float *)(v82 + v83 - 8) = (float)(0.18 - fabsf(v88)) * 27.778;
      if (*v84 != 1)
      {
LABEL_76:
        if (v84[1] != 1)
          goto LABEL_77;
        goto LABEL_85;
      }
LABEL_84:
      v89 = *(float *)&v79[v83 - 16];
      *(float *)(v78 + v83 - 4) = *(v85 - 3) + v89;
      *(float *)(v82 + v83 - 4) = (float)(0.18 - fabsf(v89)) * 27.778;
      if (v84[1] != 1)
      {
LABEL_77:
        if (v84[2] != 1)
          goto LABEL_78;
        goto LABEL_86;
      }
LABEL_85:
      v90 = *(float *)&v79[v83 - 12];
      *(float *)(v78 + v83) = *v85 + v90;
      *(float *)(v82 + v83) = (float)(0.18 - fabsf(v90)) * 27.778;
      if (v84[2] != 1)
      {
LABEL_78:
        if (v84[3] == 1)
          goto LABEL_87;
        goto LABEL_79;
      }
LABEL_86:
      v91 = *(float *)&v79[v83 - 8];
      *(float *)(v78 + v83 + 4) = v85[3] + v91;
      *(float *)(v82 + v83 + 4) = (float)(0.18 - fabsf(v91)) * 27.778;
      if (v84[3] == 1)
      {
LABEL_87:
        v92 = *(float *)&v79[v83 - 4];
        *(float *)(v78 + v83 + 8) = v85[6] + v92;
        *(float *)(v82 + v83 + 8) = (float)(0.18 - fabsf(v92)) * 27.778;
        if (v84[4] != 1)
          goto LABEL_71;
        goto LABEL_88;
      }
LABEL_79:
      if (v84[4] != 1)
        goto LABEL_71;
LABEL_88:
      v93 = *(float *)&v79[v83];
      *(float *)(v78 + v83 + 12) = v85[9] + v93;
      *(float *)(v82 + v83 + 12) = (float)(0.18 - fabsf(v93)) * 27.778;
LABEL_71:
      v83 += 32;
      v85 += 24;
      v84 += 8;
    }
    while (v83 != 256);
    ++v77;
    v78 += 256;
    v79 += 256;
    v80 += 192;
    v81 += 64;
    v82 += 256;
    if (v77 != 8)
      continue;
    break;
  }
}

BOOL sub_223A79E98(int a1, int a2, uint64_t a3, float a4, double a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  _BOOL4 v25;
  unsigned int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  int v42;

  v17 = (float)(a4 + -2.5) * 0.5;
  v18 = 0.4;
  if (v17 <= 0.4)
    v18 = (float)(a4 + -2.5) * 0.5;
  if (v17 >= 0.25)
    v19 = v18;
  else
    v19 = 0.25;
  v20 = a4 - a6;
  v21 = (float)(a4 - a6) * a7;
  if (v21 <= (float)-v19)
    return 0;
  if ((float)(v19 + v19) < v21)
    v21 = v19 + v19;
  LODWORD(qword_255795048) = qword_255795048 + 1;
  v22 = 0.8;
  if (!a2)
    v22 = 0.4;
  v23 = 0.16;
  if (a4 > 3.5)
  {
    v24 = v22 * 0.5;
    if (a4 <= 4.5)
      v23 = (float)((float)(a4 + -3.5) * (float)((float)(a4 + -3.5) * v24)) + 0.16;
    else
      v23 = (float)(v22 * a4) + (float)((float)(v24 + (float)(v22 * -4.5)) + 0.16);
  }
  v25 = a4 < a8;
  if (*(float *)&a5 < a10)
    v25 = 0;
  if (a6 <= a9)
    v25 = 0;
  if (!v25 && v20 < v23)
    return 0;
  if (a1)
    *(_BYTE *)(a3 + 2) = -1;
  if (*(_BYTE *)(a3 + 3))
  {
    v27 = *(unsigned __int8 *)(a3 + 2);
    if (v27 >= 0x64)
      LOBYTE(v27) = 100;
    *(_BYTE *)(a3 + 2) = v27;
  }
  *(_BYTE *)(a3 + 3) = v20 >= v23;
  v28 = v20 < v23 || v25;
  v29 = fminf(v20 * a12, 1.0);
  if (v28)
    v29 = *(float *)&a5;
  v30 = roundf(v29 * 100.0);
  v31 = 255.0;
  if (v30 <= 255.0)
    v31 = v30;
  v32 = v30 < 0.0;
  v33 = 0.0;
  if (!v32)
    v33 = v31;
  v34 = (int)v33;
  if ((int)v33)
  {
    LODWORD(a5) = 0.5;
    v35 = vcvtms_s32_f32((float)(v21 * 32767.0) + 0.5);
    v36 = (int)a11;
    if (v35 <= -16384)
    {
      if (v35 < 0xFFFF8149)
      {
        v34 = 1;
      }
      else
      {
        WORD1(a5) = 18042;
        v34 = (int)(float)((float)((float)((float)v35 + 32439.0) * (float)v34) / 16056.0);
        if (v34 <= 1)
          v34 = 1;
      }
    }
    v37 = *(unsigned __int8 *)(a3 + 2);
    LOWORD(a5) = *(_WORD *)a3;
    v38 = (float)((float)v37 * (float)vmovl_s16(*(int16x4_t *)&a5).i32[0]) + (float)(int)(v34 * v35);
    v39 = v37 + v34;
    v40 = roundf(v38 / (float)v39);
    v41 = 32767.0;
    if (v40 < 32767.0)
      v41 = v40;
    v42 = (int)v41;
    if (v40 <= -32768.0)
      LOWORD(v42) = 0x8000;
    *(_WORD *)a3 = v42;
    if (v39 < v36)
      LOBYTE(v36) = v39;
    *(_BYTE *)(a3 + 2) = v36;
  }
  ++HIDWORD(qword_255795048);
  return v21 < v19;
}

BOOL sub_223A7A124(int a1, int a2, int a3, uint64_t a4, float a5, double a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  _BOOL4 v25;
  unsigned int v27;
  int v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  int v42;

  if (a5 < 0.00001)
    return 0;
  v17 = a5 - a7;
  v18 = (float)(a1 + 1) * 0.25;
  v19 = (float)(a5 - a7) * a8;
  v20 = v19 <= (float)-v18 ? -v18 : v19;
  v21 = (float)(v18 + v18) >= v19 ? v20 : v18 + v18;
  if (v21 <= (float)-v18)
    return 0;
  LODWORD(qword_255795048) = qword_255795048 + 1;
  v22 = 0.8;
  if (!a3)
    v22 = 0.4;
  v23 = 0.16;
  if (a5 > 3.5)
  {
    v24 = v22 * 0.5;
    if (a5 <= 4.5)
      v23 = (float)((float)(a5 + -3.5) * (float)((float)(a5 + -3.5) * v24)) + 0.16;
    else
      v23 = (float)(v22 * a5) + (float)((float)(v24 + (float)(v22 * -4.5)) + 0.16);
  }
  v25 = a5 < a9;
  if (*(float *)&a6 < a11)
    v25 = 0;
  if (a7 <= a10)
    v25 = 0;
  if (!v25 && v17 < v23)
    return 0;
  if (a2)
    *(_BYTE *)(a4 + 2) = -1;
  if (*(_BYTE *)(a4 + 3))
  {
    v27 = *(unsigned __int8 *)(a4 + 2);
    if (v27 >= 0x64)
      LOBYTE(v27) = 100;
    *(_BYTE *)(a4 + 2) = v27;
  }
  *(_BYTE *)(a4 + 3) = v17 >= v23;
  v28 = v17 < v23 || v25;
  v29 = fminf(v17 * a13, 1.0);
  if (v28)
    v29 = *(float *)&a6;
  v30 = roundf(v29 * 100.0);
  v31 = 255.0;
  if (v30 <= 255.0)
    v31 = v30;
  v32 = v30 < 0.0;
  v33 = 0.0;
  if (!v32)
    v33 = v31;
  v34 = (int)v33;
  if ((int)v33)
  {
    LODWORD(a6) = 0.5;
    v35 = vcvtms_s32_f32((float)(v21 * 32767.0) + 0.5);
    v36 = (int)a12;
    if (v35 <= -16384)
    {
      if (v35 < 0xFFFF8149)
      {
        v34 = 1;
      }
      else
      {
        WORD1(a6) = 18042;
        v34 = (int)(float)((float)((float)((float)v35 + 32439.0) * (float)v34) / 16056.0);
        if (v34 <= 1)
          v34 = 1;
      }
    }
    v37 = *(unsigned __int8 *)(a4 + 2);
    LOWORD(a6) = *(_WORD *)a4;
    v38 = (float)((float)v37 * (float)vmovl_s16(*(int16x4_t *)&a6).i32[0]) + (float)(int)(v34 * v35);
    v39 = v37 + v34;
    v40 = roundf(v38 / (float)v39);
    v41 = 32767.0;
    if (v40 < 32767.0)
      v41 = v40;
    v42 = (int)v41;
    if (v40 <= -32768.0)
      LOWORD(v42) = 0x8000;
    *(_WORD *)a4 = v42;
    if (v39 < v36)
      LOBYTE(v36) = v39;
    *(_BYTE *)(a4 + 2) = v36;
  }
  ++HIDWORD(qword_255795048);
  return v21 < v18;
}

uint64_t sub_223A7A3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, _QWORD *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  float32x2_t v48;
  double v49;
  float32x2_t v50;
  float32x2_t v51;
  unint64_t v52;
  unint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint64_t v61;
  float v62;
  float v63;
  float v64;
  float v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  float *v72;
  _BYTE *v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  float *v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  float *v84;
  float v85;
  float32x2_t v86;
  float v87;
  BOOL v89;
  __int32 v92;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float *v99;
  float *v100;
  _DWORD *v101;
  float *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  float v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  float v118;
  uint64_t v119;
  float v120;
  float *v121;
  float *v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  float *v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  uint64_t v137;
  uint64_t result;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _WORD *v142;
  unsigned int v143;
  _BOOL4 v144;
  __int16 *v145;
  int v146;
  _WORD *v147;
  unsigned int v148;
  _BOOL4 v149;
  int v150;
  _WORD *v151;
  unsigned int v152;
  _BOOL4 v153;
  uint64_t v154;
  int v155;
  _WORD *v156;
  unsigned int v157;
  _BOOL4 v158;
  int v159;
  _WORD *v160;
  unsigned int v161;
  _BOOL4 v162;
  uint64_t v163;
  int v164;
  _WORD *v165;
  unsigned int v166;
  _BOOL4 v167;
  int v168;
  _WORD *v169;
  unsigned int v170;
  _BOOL4 v171;
  uint64_t v172;
  int v173;
  _WORD *v174;
  unsigned int v175;
  _BOOL4 v176;
  _QWORD *v177;
  float *v178;
  float v179;
  _DWORD *v180;
  float *v181;
  char v182;
  float *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  float *v188;
  int v189;
  int v190;
  _BYTE v191[16];
  _BYTE v192[2040];
  uint64_t v193;
  _BYTE __b[32];
  _BYTE v195[4072];
  uint64_t v196;
  _BYTE v197[16];
  _BYTE v198[2040];
  uint64_t v199;
  _BYTE v200[16];
  _BYTE v201[2040];
  uint64_t v202;
  float32x2_t v203[768];
  char v204;
  uint64_t v205;
  _BYTE v206[8];
  uint64_t v207;
  _BYTE v208[6096];
  uint64_t v209;

  v14 = MEMORY[0x24BDAC7A8]();
  v185 = v15;
  v189 = v16;
  v190 = v17;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v179 = v28;
  v30 = v29;
  v32 = v31;
  v34 = v33;
  v36 = v35;
  v37 = v14;
  v187 = a14;
  v38 = *(int **)(a13 + 2920);
  *(_DWORD *)(a13 + 2928) = 0;
  v182 = v39;
  if (v39)
  {
    v40 = 513;
    v41 = a14;
    do
    {
      *(_BYTE *)v41 = 0;
      *(_QWORD *)(v41 + 4) = 0xFF7FFFFFFF7FFFFFLL;
      *(_DWORD *)(v41 + 12) = -947920896;
      --v40;
      v41 += 16;
    }
    while (v40 > 1);
  }
  v208[6088] = 0;
  v209 = 0;
  v204 = 0;
  v205 = 0;
  v201[2032] = 0;
  v202 = 0;
  v198[2032] = 0;
  v199 = 0;
  v195[4064] = 0;
  v196 = 0;
  v192[2032] = 0;
  v193 = 0;
  memset_pattern16(v200, &unk_22465CD50, 0x800uLL);
  memset_pattern16(v197, &unk_22465CD50, 0x800uLL);
  memset_pattern16(__b, &unk_2246566B0, 0x1000uLL);
  v43 = 0;
  v44 = 0;
  v45 = *v38;
  v46 = v38[1];
  v47 = v38[2];
  v48 = *(float32x2_t *)v19;
  LODWORD(v49) = *(_DWORD *)(v19 + 8);
  v50 = *(float32x2_t *)(v19 + 16);
  v51.i32[0] = *(_DWORD *)(v19 + 24);
  v52 = *(_QWORD *)(v19 + 32);
  LODWORD(v53) = *(_DWORD *)(v19 + 40);
  v54.i64[0] = *(_QWORD *)(v19 + 48);
  v54.i32[2] = *(_DWORD *)(v19 + 56);
  do
  {
    v55 = 0;
    v56 = v43;
    do
    {
      v57 = 0;
      v58 = v56;
      do
      {
        *(float *)v42.i32 = (float)(v45 + v57);
        *(float *)&v42.i32[1] = (float)(v46 + v55);
        *(float *)&v42.i32[2] = (float)(v47 + v44);
        v42 = (int8x16_t)vmulq_n_f32((float32x4_t)v42, v179);
        *(__int32 *)((char *)v203[1].i32 + v58) = v42.i32[2];
        *(float32x2_t *)v59.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v48, *(float *)v42.i32), v50, *(float32x2_t *)v42.i8, 1), (float32x2_t)v52, (float32x4_t)v42, 2);
        *(float32x2_t *)&v59.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v49, *(float32x2_t *)v42.i8), v51, *(float32x2_t *)v42.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), (float32x2_t)v53);
        v60 = vaddq_f32(v54, v59);
        *(float32x2_t *)((char *)v203 + v58) = *(float32x2_t *)v42.i8;
        *(_DWORD *)&v206[v58 + 8] = v60.i32[2];
        *(_QWORD *)&v206[v58] = v60.i64[0];
        ++v57;
        v58 += 12;
      }
      while (v57 != 8);
      ++v55;
      v56 += 96;
    }
    while (v55 != 8);
    ++v44;
    v43 += 768;
  }
  while (v44 != 8);
  v61 = 0;
  v62 = *(float *)(v21 + 16);
  v63 = *(float *)(v21 + 20);
  v64 = *(float *)(v21 + 24);
  v65 = *(float *)(v21 + 28);
  LODWORD(v52) = *(_DWORD *)(v21 + 88);
  LODWORD(v53) = *(_DWORD *)(v21 + 92);
  *(float *)&v52 = (double)v52 + -0.5;
  *(float *)&v53 = (double)v53 + -0.5;
  v66 = *(_DWORD *)(v37 + 40);
  v67 = *(_DWORD *)(v37 + 44);
  v68 = *(_QWORD *)(v37 + 24);
  v69 = *(_DWORD *)(v36 + 40);
  v70 = *(_DWORD *)(v36 + 44);
  v71 = *(_QWORD *)(v36 + 24);
  v72 = (float *)&v207;
  v73 = v191;
  v74 = v197;
  v75 = v200;
  v76 = __b;
  do
  {
    v77 = 0;
    v78 = v72;
    v79 = v76;
    v80 = v75;
    v81 = v74;
    v82 = v73;
    do
    {
      v83 = 0;
      v84 = v78;
      do
      {
        v85 = *v84;
        if (*v84 > 0.000001)
        {
          v86.f32[0] = v64 + (float)((float)(v62 * *(v84 - 2)) / v85);
          v87 = v65 + (float)((float)(v63 * *(v84 - 1)) / v85);
          _NF = v86.f32[0] >= -0.5 && v86.f32[0] < *(float *)&v52;
          v89 = !_NF || v87 < -0.5;
          if (!v89 && v87 < *(float *)&v53)
          {
            v86.f32[1] = v87;
            _D16 = vcvt_s32_f32(vrndm_f32(vadd_f32(v86, (float32x2_t)0x3F0000003F000000)));
            *(float32x2_t *)&v79[8 * v83] = vcvt_f32_s32(_D16);
            v92 = _D16.i32[0];
            _D16.i16[0] = *(_WORD *)(v68 + 2 * (v66 * _D16.i32[0] + v67 * _D16.i32[1]));
            __asm { FCVT            S16, H16 }
            v96 = 4 * v83;
            *(_DWORD *)&v80[v96] = _D16.i32[0];
            *(_DWORD *)&v81[v96] = _D16.i32[0];
            _D16.i16[0] = *(_WORD *)(v71 + 2 * (v69 * v92 + v70 * _D16.i32[1]));
            __asm { FCVT            S16, H16 }
            *(_DWORD *)&v82[v96] = _D16.i32[0];
          }
        }
        ++v83;
        v84 += 3;
      }
      while (v83 != 8);
      ++v77;
      v82 += 32;
      v81 += 32;
      v80 += 32;
      v79 += 64;
      v78 += 24;
    }
    while (v77 != 8);
    ++v61;
    v73 += 256;
    v74 += 256;
    v75 += 256;
    v76 += 512;
    v72 += 192;
  }
  while (v61 != 8);
  if (*v185 != v185[1]
    || a9 && *(_QWORD *)(v37 + 32) == sub_2242A9824(a9)
    || a10 && *(_DWORD *)(a10 + 120) == *(_DWORD *)(v37 + 32) && *(_DWORD *)(a10 + 124) == *(_DWORD *)(v37 + 36))
  {
    sub_223A795C4(v203, (uint64_t)v206, (uint64_t)__b, v185, a9, a10, a11, a12, (uint64_t)v197, (uint64_t)v191);
  }
  v97 = 0;
  if ((v182 & 1) != 0)
  {
    v98 = a13 + 28;
    v99 = (float *)v201;
    v100 = (float *)v198;
    v101 = v192;
    v102 = (float *)v208;
    v103 = v195;
    while (1)
    {
      v184 = v98;
      v186 = v97;
      v104 = 0;
      v177 = v103;
      v178 = v102;
      v180 = v101;
      v181 = v100;
      v183 = v99;
      do
      {
        if (*(v99 - 4) > 0.00001)
        {
          v105 = v187 + v104;
          LODWORD(v49) = *(v101 - 4);
          v106 = *(v102 - 12);
          *(_BYTE *)v105 = sub_223A79E98(v189, v190, v98 - 28, *(v100 - 4), v49, v106, v30, v34, v32, v27, v25, v23);
          *(_QWORD *)(v105 + 4) = *(v103 - 4);
          *(float *)(v105 + 12) = v106;
          if (*(v99 - 3) <= 0.00001)
          {
LABEL_38:
            if (*(v99 - 2) <= 0.00001)
              goto LABEL_39;
            goto LABEL_47;
          }
        }
        else if (*(v99 - 3) <= 0.00001)
        {
          goto LABEL_38;
        }
        v107 = v187 + v104;
        LODWORD(v49) = *(v101 - 3);
        v108 = *(v102 - 9);
        *(_BYTE *)(v107 + 16) = sub_223A79E98(v189, v190, v98 - 24, *(v100 - 3), v49, v108, v30, v34, v32, v27, v25, v23);
        *(_QWORD *)(v107 + 20) = *(v103 - 3);
        *(float *)(v107 + 28) = v108;
        if (*(v99 - 2) <= 0.00001)
        {
LABEL_39:
          if (*(v99 - 1) <= 0.00001)
            goto LABEL_40;
          goto LABEL_48;
        }
LABEL_47:
        v109 = v187 + v104;
        LODWORD(v49) = *(v101 - 2);
        v110 = *(v102 - 6);
        *(_BYTE *)(v109 + 32) = sub_223A79E98(v189, v190, v98 - 20, *(v100 - 2), v49, v110, v30, v34, v32, v27, v25, v23);
        *(_QWORD *)(v109 + 36) = *(v103 - 2);
        *(float *)(v109 + 44) = v110;
        if (*(v99 - 1) <= 0.00001)
        {
LABEL_40:
          if (*v99 <= 0.00001)
            goto LABEL_41;
          goto LABEL_49;
        }
LABEL_48:
        v111 = v187 + v104;
        LODWORD(v49) = *(v101 - 1);
        v112 = *(v102 - 3);
        *(_BYTE *)(v111 + 48) = sub_223A79E98(v189, v190, v98 - 16, *(v100 - 1), v49, v112, v30, v34, v32, v27, v25, v23);
        *(_QWORD *)(v111 + 52) = *(v103 - 1);
        *(float *)(v111 + 60) = v112;
        if (*v99 <= 0.00001)
        {
LABEL_41:
          if (v99[1] <= 0.00001)
            goto LABEL_42;
          goto LABEL_50;
        }
LABEL_49:
        v113 = v187 + v104;
        LODWORD(v49) = *v101;
        v114 = *v102;
        *(_BYTE *)(v113 + 64) = sub_223A79E98(v189, v190, v98 - 12, *v100, v49, *v102, v30, v34, v32, v27, v25, v23);
        *(_QWORD *)(v113 + 68) = *v103;
        *(float *)(v113 + 76) = v114;
        if (v99[1] <= 0.00001)
        {
LABEL_42:
          if (v99[2] > 0.00001)
            goto LABEL_51;
          goto LABEL_43;
        }
LABEL_50:
        v115 = v187 + v104;
        LODWORD(v49) = v101[1];
        v116 = v102[3];
        *(_BYTE *)(v115 + 80) = sub_223A79E98(v189, v190, v98 - 8, v100[1], v49, v116, v30, v34, v32, v27, v25, v23);
        *(_QWORD *)(v115 + 84) = v103[1];
        *(float *)(v115 + 92) = v116;
        if (v99[2] > 0.00001)
        {
LABEL_51:
          v117 = v187 + v104;
          LODWORD(v49) = v101[2];
          v118 = v102[6];
          *(_BYTE *)(v117 + 96) = sub_223A79E98(v189, v190, v98 - 4, v100[2], v49, v118, v30, v34, v32, v27, v25, v23);
          *(_QWORD *)(v117 + 100) = v103[2];
          *(float *)(v117 + 108) = v118;
          if (v99[3] <= 0.00001)
            goto LABEL_35;
          goto LABEL_52;
        }
LABEL_43:
        if (v99[3] <= 0.00001)
          goto LABEL_35;
LABEL_52:
        v119 = v187 + v104;
        LODWORD(v49) = v101[3];
        v120 = v102[9];
        *(_BYTE *)(v119 + 112) = sub_223A79E98(v189, v190, v98, v100[3], v49, v120, v30, v34, v32, v27, v25, v23);
        *(_QWORD *)(v119 + 116) = v103[3];
        *(float *)(v119 + 124) = v120;
LABEL_35:
        v104 += 128;
        v98 += 36;
        v99 += 8;
        v100 += 8;
        v101 += 8;
        v102 += 24;
        v103 += 8;
      }
      while (v104 != 1024);
      v97 = v186 + 1;
      v187 += 1024;
      v98 = v184 + 324;
      v99 = v183 + 64;
      v100 = v181 + 64;
      v101 = v180 + 64;
      v102 = v178 + 192;
      v103 = v177 + 64;
      if (v186 == 7)
        goto LABEL_74;
    }
  }
  v121 = (float *)v201;
  v122 = (float *)v208;
  v123 = v192;
  v124 = a13;
  v125 = 0;
  while (2)
  {
    v126 = 0;
    v127 = v123;
    v128 = v122;
    v188 = v121;
    do
    {
      v129 = *(v121 - 4);
      if (v129 > 0.00001)
      {
        LODWORD(v49) = *(v127 - 4);
        sub_223A79E98(v189, v190, v124 + v126, v129, v49, *(v128 - 12), v30, v34, v32, v27, v25, v23);
        v130 = *(v121 - 3);
        if (v130 <= 0.00001)
        {
LABEL_59:
          v131 = *(v121 - 2);
          if (v131 <= 0.00001)
            goto LABEL_60;
          goto LABEL_68;
        }
      }
      else
      {
        v130 = *(v121 - 3);
        if (v130 <= 0.00001)
          goto LABEL_59;
      }
      LODWORD(v49) = *(v127 - 3);
      sub_223A79E98(v189, v190, v124 + v126 + 4, v130, v49, *(v128 - 9), v30, v34, v32, v27, v25, v23);
      v131 = *(v121 - 2);
      if (v131 <= 0.00001)
      {
LABEL_60:
        v132 = *(v121 - 1);
        if (v132 <= 0.00001)
          goto LABEL_61;
        goto LABEL_69;
      }
LABEL_68:
      LODWORD(v49) = *(v127 - 2);
      sub_223A79E98(v189, v190, v124 + v126 + 8, v131, v49, *(v128 - 6), v30, v34, v32, v27, v25, v23);
      v132 = *(v121 - 1);
      if (v132 <= 0.00001)
      {
LABEL_61:
        v133 = *v121;
        if (*v121 <= 0.00001)
          goto LABEL_62;
        goto LABEL_70;
      }
LABEL_69:
      LODWORD(v49) = *(v127 - 1);
      sub_223A79E98(v189, v190, v124 + v126 + 12, v132, v49, *(v128 - 3), v30, v34, v32, v27, v25, v23);
      v133 = *v121;
      if (*v121 <= 0.00001)
      {
LABEL_62:
        v134 = v121[1];
        if (v134 <= 0.00001)
          goto LABEL_63;
        goto LABEL_71;
      }
LABEL_70:
      LODWORD(v49) = *v127;
      sub_223A79E98(v189, v190, v124 + v126 + 16, v133, v49, *v128, v30, v34, v32, v27, v25, v23);
      v134 = v121[1];
      if (v134 <= 0.00001)
      {
LABEL_63:
        v135 = v121[2];
        if (v135 > 0.00001)
          goto LABEL_72;
        goto LABEL_64;
      }
LABEL_71:
      LODWORD(v49) = v127[1];
      sub_223A79E98(v189, v190, v124 + v126 + 20, v134, v49, v128[3], v30, v34, v32, v27, v25, v23);
      v135 = v121[2];
      if (v135 > 0.00001)
      {
LABEL_72:
        LODWORD(v49) = v127[2];
        sub_223A79E98(v189, v190, v124 + v126 + 24, v135, v49, v128[6], v30, v34, v32, v27, v25, v23);
        v136 = v121[3];
        if (v136 <= 0.00001)
          goto LABEL_56;
        goto LABEL_73;
      }
LABEL_64:
      v136 = v121[3];
      if (v136 <= 0.00001)
        goto LABEL_56;
LABEL_73:
      LODWORD(v49) = v127[3];
      sub_223A79E98(v189, v190, v124 + v126 + 28, v136, v49, v128[9], v30, v34, v32, v27, v25, v23);
LABEL_56:
      v126 += 36;
      v121 += 8;
      v128 += 24;
      v127 += 8;
    }
    while (v126 != 288);
    ++v125;
    v124 += 324;
    v121 = v188 + 64;
    v122 += 192;
    v123 += 256;
    if (v125 != 8)
      continue;
    break;
  }
LABEL_74:
  v137 = 0;
  LODWORD(result) = 1;
  v139 = a13;
  while (2)
  {
    v140 = 0;
    while (2)
    {
      v145 = (__int16 *)(v139 + v140);
      if (!*(_BYTE *)(v139 + v140 + 2))
      {
        v149 = 1;
        if (*((_BYTE *)v145 + 6))
          goto LABEL_91;
LABEL_129:
        v153 = 1;
        v154 = v139 + v140;
        if (*(_BYTE *)(v139 + v140 + 10))
          goto LABEL_97;
LABEL_130:
        v158 = 1;
        if (*(_BYTE *)(v154 + 14))
          goto LABEL_103;
LABEL_131:
        v162 = 1;
        v163 = v139 + v140;
        if (*(_BYTE *)(v139 + v140 + 18))
          goto LABEL_109;
LABEL_132:
        v167 = 1;
        if (*(_BYTE *)(v163 + 22))
          goto LABEL_115;
LABEL_133:
        v171 = 1;
        v172 = v139 + v140;
        if (*(_BYTE *)(v139 + v140 + 26))
          goto LABEL_121;
LABEL_134:
        v176 = 1;
        if (!*(_BYTE *)(v172 + 30))
          goto LABEL_135;
        goto LABEL_77;
      }
      v146 = *v145;
      if (v146 >= 0)
        v147 = (_WORD *)(a13 + 2928);
      else
        v147 = (_WORD *)(a13 + 2930);
      v148 = (unsigned __int16)*v147;
      if (v148 <= (unsigned __int16)(v148 + 1))
        LOWORD(v148) = v148 + 1;
      *v147 = v148;
      v149 = v146 > 14335;
      if (!*((_BYTE *)v145 + 6))
        goto LABEL_129;
LABEL_91:
      v150 = v145[2];
      if (v150 >= 0)
        v151 = (_WORD *)(a13 + 2928);
      else
        v151 = (_WORD *)(a13 + 2930);
      v152 = (unsigned __int16)*v151;
      if (v152 <= (unsigned __int16)(v152 + 1))
        LOWORD(v152) = v152 + 1;
      *v151 = v152;
      v153 = v150 > 14335;
      v154 = v139 + v140;
      if (!*(_BYTE *)(v139 + v140 + 10))
        goto LABEL_130;
LABEL_97:
      v155 = *(__int16 *)(v154 + 8);
      if (v155 >= 0)
        v156 = (_WORD *)(a13 + 2928);
      else
        v156 = (_WORD *)(a13 + 2930);
      v157 = (unsigned __int16)*v156;
      if (v157 <= (unsigned __int16)(v157 + 1))
        LOWORD(v157) = v157 + 1;
      *v156 = v157;
      v158 = v155 > 14335;
      if (!*(_BYTE *)(v154 + 14))
        goto LABEL_131;
LABEL_103:
      v159 = *(__int16 *)(v154 + 12);
      if (v159 >= 0)
        v160 = (_WORD *)(a13 + 2928);
      else
        v160 = (_WORD *)(a13 + 2930);
      v161 = (unsigned __int16)*v160;
      if (v161 <= (unsigned __int16)(v161 + 1))
        LOWORD(v161) = v161 + 1;
      *v160 = v161;
      v162 = v159 > 14335;
      v163 = v139 + v140;
      if (!*(_BYTE *)(v139 + v140 + 18))
        goto LABEL_132;
LABEL_109:
      v164 = *(__int16 *)(v163 + 16);
      if (v164 >= 0)
        v165 = (_WORD *)(a13 + 2928);
      else
        v165 = (_WORD *)(a13 + 2930);
      v166 = (unsigned __int16)*v165;
      if (v166 <= (unsigned __int16)(v166 + 1))
        LOWORD(v166) = v166 + 1;
      *v165 = v166;
      v167 = v164 > 14335;
      if (!*(_BYTE *)(v163 + 22))
        goto LABEL_133;
LABEL_115:
      v168 = *(__int16 *)(v163 + 20);
      if (v168 >= 0)
        v169 = (_WORD *)(a13 + 2928);
      else
        v169 = (_WORD *)(a13 + 2930);
      v170 = (unsigned __int16)*v169;
      if (v170 <= (unsigned __int16)(v170 + 1))
        LOWORD(v170) = v170 + 1;
      *v169 = v170;
      v171 = v168 > 14335;
      v172 = v139 + v140;
      if (!*(_BYTE *)(v139 + v140 + 26))
        goto LABEL_134;
LABEL_121:
      v173 = *(__int16 *)(v172 + 24);
      if (v173 >= 0)
        v174 = (_WORD *)(a13 + 2928);
      else
        v174 = (_WORD *)(a13 + 2930);
      v175 = (unsigned __int16)*v174;
      if (v175 <= (unsigned __int16)(v175 + 1))
        LOWORD(v175) = v175 + 1;
      *v174 = v175;
      v176 = v173 > 14335;
      if (!*(_BYTE *)(v172 + 30))
      {
LABEL_135:
        v144 = 1;
        goto LABEL_83;
      }
LABEL_77:
      v141 = *(__int16 *)(v172 + 28);
      if (v141 >= 0)
        v142 = (_WORD *)(a13 + 2928);
      else
        v142 = (_WORD *)(a13 + 2930);
      v143 = (unsigned __int16)*v142;
      if (v143 <= (unsigned __int16)(v143 + 1))
        LOWORD(v143) = v143 + 1;
      *v142 = v143;
      v144 = v141 > 14335;
LABEL_83:
      result = v149 & result & v153 & v158 & v162 & v167 & v171 & v176 & v144;
      v140 += 36;
      if (v140 != 288)
        continue;
      break;
    }
    ++v137;
    v139 += 324;
    if (v137 != 8)
      continue;
    return result;
  }
}

uint64_t sub_223A7B22C(uint64_t result, uint64_t a2, float32x2_t *a3, uint64_t a4, uint64_t a5, float32x4_t a6, double a7, double a8, __n128 a9, float32x2_t a10, double a11, float32x2_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  unint64_t v17;
  int v18;
  float32x2_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v29;
  int v30;
  float32x2_t v31;
  unint64_t v32;
  int v33;
  float32x2_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v44;
  int v45;
  float32x2_t v46;
  unint64_t v47;
  int v48;
  float32x2_t v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v59;
  int v60;
  float32x2_t v61;
  unint64_t v62;
  int v63;
  float32x2_t v64;
  int v65;
  int v66;
  uint64_t v67;
  unsigned __int8 v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  float v74;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  float32x2_t v86;
  unint64_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float v93;
  int v95;
  int v96;
  uint64_t v97;
  unsigned __int8 v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int32 v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  int v125;
  __n128 v126;

  v117 = result;
  if (*(_BYTE *)(a4 + 8))
  {
    v13 = 0;
    do
    {
      v14 = 0;
      v118 = 25 * v13;
      v113 = v13;
      v115 = (_DWORD)v13 << 7;
      do
      {
        v15 = 0;
        v120 = v14;
        v122 = 5 * v14 + v118;
        v125 = v115 + 16 * v14;
        while (1)
        {
          v18 = dword_22465CDE4[v15];
          if (*(_BYTE *)(*(_QWORD *)a4
                        + 16 * (dword_22465CDC4[v15] + v125 + 8 * v18 + (dword_22465CE04[v15] << 6))))
          {
            v19 = *(float32x2_t *)(*(_QWORD *)a4
                                 + 16
                                 * (dword_22465CDC4[v15] + v125 + 8 * v18 + (dword_22465CE04[v15] << 6))
                                 + 4);
            v21 = *(_DWORD *)(result + 64);
            v20 = *(_DWORD *)(result + 68);
            v22 = *(_QWORD *)(result + 24);
            if (!v22)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v23 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v26 = qword_255795648;
                v25 = qword_255795650;
                while (v26 != v25)
                {
                  v28 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v26;
                  v27 = *(_QWORD *)(v26 + 8);
                  v26 += 16;
                  v28(v27, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v24 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_129;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              result = v117;
            }
            v16 = vadd_f32(v19, (float32x2_t)0x3F0000003F000000);
            v17 = *(_QWORD *)(v22 + 2 * (v21 * vcvtms_s32_f32(v16.f32[0]) + v20 * vcvtms_s32_f32(v16.f32[1])));
            if (v17 <= BYTE6(v17))
              v17 >>= 48;
            if (BYTE1(v17) <= 0x29u)
              break;
          }
          if (++v15 == 8)
            goto LABEL_28;
        }
        *(_QWORD *)(a5 + 8 * v122) = sub_223A4EC9C(*(_QWORD *)(a5 + 8 * v122), (unsigned __int16)v17 & 0xFF00 | 1, 0xFFu);
        result = v117;
LABEL_28:
        v29 = 0;
        v30 = v125 | 2;
        while (1)
        {
          v33 = dword_22465CDE4[v29];
          if (*(_BYTE *)(*(_QWORD *)a4
                        + 16 * (v30 + dword_22465CDC4[v29] + 8 * v33 + (dword_22465CE04[v29] << 6))))
          {
            v34 = *(float32x2_t *)(*(_QWORD *)a4
                                 + 16
                                 * (v30 + dword_22465CDC4[v29] + 8 * v33 + (dword_22465CE04[v29] << 6))
                                 + 4);
            v35 = *(_DWORD *)(result + 64);
            v36 = *(_DWORD *)(result + 68);
            v37 = *(_QWORD *)(result + 24);
            if (!v37)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v38 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v40 = qword_255795648;
                v41 = qword_255795650;
                while (v40 != v41)
                {
                  v43 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v40;
                  v42 = *(_QWORD *)(v40 + 8);
                  v40 += 16;
                  v43(v42, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v39 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_129;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              result = v117;
            }
            v31 = vadd_f32(v34, (float32x2_t)0x3F0000003F000000);
            v32 = *(_QWORD *)(v37 + 2 * (v35 * vcvtms_s32_f32(v31.f32[0]) + v36 * vcvtms_s32_f32(v31.f32[1])));
            if (v32 <= BYTE6(v32))
              v32 >>= 48;
            if (BYTE1(v32) <= 0x29u)
              break;
          }
          if (++v29 == 8)
            goto LABEL_49;
        }
        *(_QWORD *)(a5 + 8 * (v122 + 1)) = sub_223A4EC9C(*(_QWORD *)(a5 + 8 * (v122 + 1)), (unsigned __int16)v32 & 0xFF00 | 1, 0xFFu);
        result = v117;
LABEL_49:
        v44 = 0;
        v45 = v125 | 4;
        while (1)
        {
          v48 = dword_22465CDE4[v44];
          if (*(_BYTE *)(*(_QWORD *)a4
                        + 16 * (v45 + dword_22465CDC4[v44] + 8 * v48 + (dword_22465CE04[v44] << 6))))
          {
            v49 = *(float32x2_t *)(*(_QWORD *)a4
                                 + 16
                                 * (v45 + dword_22465CDC4[v44] + 8 * v48 + (dword_22465CE04[v44] << 6))
                                 + 4);
            v50 = *(_DWORD *)(result + 64);
            v51 = *(_DWORD *)(result + 68);
            v52 = *(_QWORD *)(result + 24);
            if (!v52)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v53 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v55 = qword_255795648;
                v56 = qword_255795650;
                while (v55 != v56)
                {
                  v58 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v55;
                  v57 = *(_QWORD *)(v55 + 8);
                  v55 += 16;
                  v58(v57, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v54 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_129;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              result = v117;
            }
            v46 = vadd_f32(v49, (float32x2_t)0x3F0000003F000000);
            v47 = *(_QWORD *)(v52 + 2 * (v50 * vcvtms_s32_f32(v46.f32[0]) + v51 * vcvtms_s32_f32(v46.f32[1])));
            if (v47 <= BYTE6(v47))
              v47 >>= 48;
            if (BYTE1(v47) <= 0x29u)
              break;
          }
          if (++v44 == 8)
            goto LABEL_70;
        }
        *(_QWORD *)(a5 + 8 * (v122 + 2)) = sub_223A4EC9C(*(_QWORD *)(a5 + 8 * (v122 + 2)), (unsigned __int16)v47 & 0xFF00 | 1, 0xFFu);
        result = v117;
LABEL_70:
        v59 = 0;
        v123 = v122 + 3;
        v60 = v125 | 6;
        while (1)
        {
          v63 = dword_22465CDE4[v59];
          if (*(_BYTE *)(*(_QWORD *)a4
                        + 16 * (v60 + dword_22465CDC4[v59] + 8 * v63 + (dword_22465CE04[v59] << 6))))
          {
            v64 = *(float32x2_t *)(*(_QWORD *)a4
                                 + 16
                                 * (v60 + dword_22465CDC4[v59] + 8 * v63 + (dword_22465CE04[v59] << 6))
                                 + 4);
            v65 = *(_DWORD *)(result + 64);
            v66 = *(_DWORD *)(result + 68);
            v67 = *(_QWORD *)(result + 24);
            if (!v67)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v68 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v68 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v70 = qword_255795648;
                v71 = qword_255795650;
                while (v70 != v71)
                {
                  v73 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v70;
                  v72 = *(_QWORD *)(v70 + 8);
                  v70 += 16;
                  v73(v72, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v69 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_129;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              result = v117;
            }
            v61 = vadd_f32(v64, (float32x2_t)0x3F0000003F000000);
            v62 = *(_QWORD *)(v67 + 2 * (v65 * vcvtms_s32_f32(v61.f32[0]) + v66 * vcvtms_s32_f32(v61.f32[1])));
            if (v62 <= BYTE6(v62))
              v62 >>= 48;
            if (BYTE1(v62) <= 0x29u)
              break;
          }
          if (++v59 == 8)
            goto LABEL_6;
        }
        *(_QWORD *)(a5 + 8 * v123) = sub_223A4EC9C(*(_QWORD *)(a5 + 8 * v123), (unsigned __int16)v62 & 0xFF00 | 1, 0xFFu);
        result = v117;
LABEL_6:
        v14 = v120 + 1;
      }
      while (v120 != 3);
      v13 = v113 + 1;
    }
    while (v113 != 3);
  }
  else
  {
    v74 = a6.f32[0];
    v77 = 0;
    v78 = *(int **)(a5 + 1008);
    v110 = *v78;
    v106 = v78[1];
    v104 = v78[2];
    v114 = a6.i32[0];
    do
    {
      v79 = 0;
      v107 = 25 * v77;
      v105 = v77;
      v80 = v104 + 2 * v77;
      do
      {
        v81 = 0;
        v111 = 5 * v79 + v107;
        v108 = v79;
        v82 = v106 + 2 * v79;
        do
        {
          v84 = 0;
          v112 = v111 + v81;
          v116 = v81;
          v85 = v110 + 2 * v81;
          while (1)
          {
            a6.f32[0] = (float)(v85 + dword_22465CDC4[v84]);
            a6.f32[1] = (float)(v82 + dword_22465CDE4[v84]);
            a6.f32[2] = (float)(v80 + dword_22465CE04[v84]);
            v88 = (int8x16_t)vmulq_n_f32(a6, v74);
            LODWORD(a8) = a3[1].i32[0];
            a9.n128_u64[0] = (unint64_t)a3[2];
            a10.i32[0] = a3[3].i32[0];
            a12.i32[0] = a3[5].i32[0];
            *(float32x2_t *)v89.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a3, *(float *)v88.i32), (float32x2_t)a9.n128_u64[0], *(float32x2_t *)v88.i8, 1), a3[4], (float32x4_t)v88, 2);
            v90 = vmla_lane_f32(vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)v88.i8), a10, *(float32x2_t *)v88.i8, 1);
            v91 = (float32x4_t)vextq_s8(v88, v88, 8uLL);
            a8 = COERCE_DOUBLE(vmla_f32(v90, *(float32x2_t *)v91.f32, a12));
            *(double *)&v89.i64[1] = a8;
            *(float32x2_t *)v91.f32 = a3[6];
            v91.i32[2] = a3[7].i32[0];
            a6 = vaddq_f32(v91, v89);
            if (a6.f32[2] > 0.000001)
            {
              a9.n128_f32[0] = *(float *)(a2 + 24) + (float)((float)(*(float *)(a2 + 16) * a6.f32[0]) / a6.f32[2]);
              LODWORD(a8) = *(_DWORD *)(a2 + 88);
              a8 = (double)*(unint64_t *)&a8 + -0.5;
              *(float *)&a8 = a8;
              if (a9.n128_f32[0] >= -0.5 && a9.n128_f32[0] < *(float *)&a8)
              {
                v93 = *(float *)(a2 + 28)
                    + (float)(vmuls_lane_f32(*(float *)(a2 + 20), *(float32x2_t *)a6.f32, 1) / a6.f32[2]);
                a6.i32[0] = *(_DWORD *)(a2 + 92);
                a6.f32[0] = (double)a6.u64[0] + -0.5;
                if (v93 >= -0.5 && v93 < a6.f32[0])
                {
                  v96 = *(_DWORD *)(result + 64);
                  v95 = *(_DWORD *)(result + 68);
                  v97 = *(_QWORD *)(result + 24);
                  if (!v97)
                  {
                    v119 = *(_DWORD *)(result + 64);
                    v121 = *(_DWORD *)(result + 68);
                    v124 = v93;
                    v126 = a9;
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                    v98 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v101 = qword_255795648;
                      v100 = qword_255795650;
                      while (v101 != v100)
                      {
                        v103 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v101;
                        v102 = *(_QWORD *)(v101 + 8);
                        v101 += 16;
                        v103(v102, "ptr != nullptr || size == 0", 27, "", 0);
                      }
                    }
                    v99 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
LABEL_129:
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
                    result = v117;
                    v74 = *(float *)&v114;
                    a9 = v126;
                    v93 = v124;
                    v95 = v121;
                    v97 = 0;
                    v96 = v119;
                  }
                  a9.n128_f32[1] = v93;
                  v86 = vadd_f32((float32x2_t)a9.n128_u64[0], (float32x2_t)0x3F0000003F000000);
                  v87 = *(_QWORD *)(v97 + 2 * (v96 * vcvtms_s32_f32(v86.f32[0]) + v95 * vcvtms_s32_f32(v86.f32[1])));
                  if (v87 <= BYTE6(v87))
                    v87 >>= 48;
                  if (BYTE1(v87) <= 0x29u)
                    break;
                }
              }
            }
            if (++v84 == 8)
              goto LABEL_97;
          }
          v83 = sub_223A4EC9C(*(_QWORD *)(a5 + 8 * v112), (unsigned __int16)v87 & 0xFF00 | 1, 0xFFu);
          v74 = *(float *)&v114;
          *(_QWORD *)(a5 + 8 * v112) = v83;
          result = v117;
LABEL_97:
          v81 = v116 + 1;
        }
        while (v116 != 3);
        v79 = v108 + 1;
      }
      while (v108 != 3);
      v77 = v105 + 1;
    }
    while (v105 != 3);
  }
  return result;
}

uint64_t sub_223A7C044(uint64_t result, double a2, float32x4_t a3, double a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x2_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v21;
  float32x4_t v27;
  __int8 *v29;
  unsigned int v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  __int8 *v36;
  unsigned int v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  uint64_t v53;
  uint64_t v54;

  if (!*(_BYTE *)(a8 + 8))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockIntegrator.cpp", 821, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
    abort();
  }
  v9 = result;
  v10 = 0;
  v51 = (int8x16_t)vdupq_n_s32(0x437F0000u);
  v50 = a8;
  do
  {
    v11 = 0;
    v46 = v10;
    v47 = v10 << 6;
    v48 = 81 * v10;
    do
    {
      v12 = 0;
      v49 = v11;
      v54 = 8 * v11 + v11 + v48;
      v13 = 8 * v11 + v47;
      v53 = v13;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)a8 + 16 * (v13 + v12)))
        {
          v14 = *(float32x2_t *)(*(_QWORD *)a8 + 16 * (v13 + v12) + 4);
          v16 = *(_DWORD *)(v9 + 64);
          v15 = *(_DWORD *)(v9 + 68);
          v17 = *(_QWORD *)(v9 + 24);
          if (!v17)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v18 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v42 = qword_255795648;
              v43 = qword_255795650;
              while (v42 != v43)
              {
                v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v42;
                v44 = *(_QWORD *)(v42 + 8);
                v42 += 16;
                v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v19 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            result = qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            a8 = v50;
            v13 = v53;
          }
          _D0 = vadd_f32(v14, (float32x2_t)0x3F0000003F000000);
          v21 = v17 + 2 * (v16 * vcvtms_s32_f32(_D0.f32[0]) + v15 * vcvtms_s32_f32(_D0.f32[1]));
          _D0.i16[0] = *(_WORD *)(v21 + 6);
          __asm { FCVT            S0, H0 }
          if (_D0.f32[0] != 0.0)
          {
            _H0 = *(_WORD *)(v21 + 4);
            a3.i32[0] = *(_DWORD *)v21;
            v27 = vcvtq_f32_f16(*(float16x4_t *)a3.f32);
            __asm { FCVT            S0, H0 }
            v27.i32[2] = _S0;
            v29 = (__int8 *)(a9 + 4 * (v54 + v12));
            v30 = v51.i32[0];
            v31 = vmulq_f32(v27, (float32x4_t)v51);
            v27.i64[0] = 0x3F0000003F000000;
            v27.i64[1] = 0x3F0000003F000000;
            v32 = (int8x16_t)vaddq_f32(v31, v27);
            v33 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v32, (float32x4_t)v51), v51, v32);
            v34 = (int8x16_t)vcltzq_f32((float32x4_t)v33);
            v35 = (float32x4_t)vbicq_s8(v33, v34);
            v34.i32[0] = v35.i32[2];
            v36 = v29;
            v37 = v29[3];
            v34.i8[0] = *v29;
            *(float *)v34.i32 = (float)v34.u32[0];
            LOBYTE(v30) = v29[1];
            LOBYTE(a5) = v29[2];
            *(float *)&v34.i32[1] = (float)v30;
            *(float *)&v34.i32[2] = (float)LODWORD(a5);
            *(float32x2_t *)v35.f32 = vcvt_f32_u32((uint32x2_t)vcvt_s32_f32(*(float32x2_t *)v35.f32));
            a5 = (float)(int)v35.f32[2];
            v35.f32[2] = a5;
            v39 = vmulq_n_f32((float32x4_t)v34, (float)v37);
            v38 = vaddq_f32(v39, v35);
            v39.f32[0] = (float)v37 + 1.0;
            if (v39.f32[0] == 0.0)
              v39.f32[0] = 1.0;
            a3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
            v40 = vdivq_f32(v38, a3);
            *v29 = (int)v40.f32[0];
            v29[1] = (int)v40.f32[1];
            v29[2] = (int)v40.f32[2];
            if (v37 + 1 < 0xFF)
              v41 = v37 + 1;
            else
              v41 = -1;
            v36[3] = v41;
          }
        }
        ++v12;
      }
      while (v12 != 8);
      v11 = v49 + 1;
    }
    while (v49 != 7);
    v10 = v46 + 1;
  }
  while (v46 != 7);
  return result;
}

uint64_t sub_223A7C3E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  float32x2_t v16;
  unint64_t v17;
  float32x2_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  float32x2_t v24;
  unint64_t v25;
  float32x2_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  float32x2_t v32;
  unint64_t v33;
  float32x2_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  float32x2_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;

  if (!*(_BYTE *)(a4 + 8))
  {
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockIntegrator.cpp", 867, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
LABEL_84:
    abort();
  }
  v5 = (_QWORD *)a4;
  v6 = result;
  v7 = 0;
  do
  {
    v8 = 0;
    v58 = v7;
    v60 = v7 << 7;
    v61 = 25 * v7;
    do
    {
      v63 = 5 * v8 + v61;
      v9 = v60 + 16 * v8;
      if (*(_BYTE *)(*v5 + 16 * v9))
      {
        v10 = *(float32x2_t *)(*v5 + 16 * v9 + 4);
        v12 = *(_DWORD *)(v6 + 64);
        v11 = *(_DWORD *)(v6 + 68);
        v13 = *(_QWORD *)(v6 + 24);
        if (!v13)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v14 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v43 = qword_255795648;
            v42 = qword_255795650;
            while (v43 != v42)
            {
              v45 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v43;
              v44 = *(_QWORD *)(v43 + 8);
              v43 += 16;
              v45(v44, "ptr != nullptr || size == 0", 27, "", 0);
            }
          }
          v15 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v5 = (_QWORD *)a4;
          if (!byte_255795670)
            goto LABEL_84;
          result = qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        }
        v16 = vadd_f32(v10, (float32x2_t)0x3F0000003F000000);
        v17 = *(_QWORD *)(v13 + 2 * (v12 * vcvtms_s32_f32(v16.f32[0]) + v11 * vcvtms_s32_f32(v16.f32[1])));
        if (v17 <= BYTE6(v17))
          v17 >>= 48;
        if (BYTE1(v17) <= 0x19u)
          result = sub_223A4EA54(a5 + 28 * v63, BYTE1(v17));
      }
      if (*(_BYTE *)(*v5 + 16 * (v9 | 2)))
      {
        v18 = *(float32x2_t *)(*v5 + 16 * (v9 | 2) + 4);
        v19 = *(_DWORD *)(v6 + 64);
        v20 = *(_DWORD *)(v6 + 68);
        v21 = *(_QWORD *)(v6 + 24);
        if (!v21)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v22 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v47 = qword_255795648;
            v46 = qword_255795650;
            while (v47 != v46)
            {
              v49 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v47;
              v48 = *(_QWORD *)(v47 + 8);
              v47 += 16;
              v49(v48, "ptr != nullptr || size == 0", 27, "", 0);
            }
          }
          v23 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v5 = (_QWORD *)a4;
          if (!byte_255795670)
            goto LABEL_84;
          result = qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        }
        v24 = vadd_f32(v18, (float32x2_t)0x3F0000003F000000);
        v25 = *(_QWORD *)(v21 + 2 * (v19 * vcvtms_s32_f32(v24.f32[0]) + v20 * vcvtms_s32_f32(v24.f32[1])));
        if (v25 <= BYTE6(v25))
          v25 >>= 48;
        if (BYTE1(v25) <= 0x19u)
          result = sub_223A4EA54(a5 + 28 * v63 + 28, BYTE1(v25));
      }
      if (*(_BYTE *)(*v5 + 16 * (v9 | 4)))
      {
        v26 = *(float32x2_t *)(*v5 + 16 * (v9 | 4) + 4);
        v27 = *(_DWORD *)(v6 + 64);
        v28 = *(_DWORD *)(v6 + 68);
        v29 = *(_QWORD *)(v6 + 24);
        if (!v29)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v30 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v51 = qword_255795648;
            v50 = qword_255795650;
            while (v51 != v50)
            {
              v53 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v51;
              v52 = *(_QWORD *)(v51 + 8);
              v51 += 16;
              v53(v52, "ptr != nullptr || size == 0", 27, "", 0);
            }
          }
          v31 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v5 = (_QWORD *)a4;
          if (!byte_255795670)
            goto LABEL_84;
          result = qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        }
        v32 = vadd_f32(v26, (float32x2_t)0x3F0000003F000000);
        v33 = *(_QWORD *)(v29 + 2 * (v27 * vcvtms_s32_f32(v32.f32[0]) + v28 * vcvtms_s32_f32(v32.f32[1])));
        if (v33 <= BYTE6(v33))
          v33 >>= 48;
        if (BYTE1(v33) <= 0x19u)
          result = sub_223A4EA54(a5 + 28 * v63 + 56, BYTE1(v33));
      }
      if (*(_BYTE *)(*v5 + 16 * (v9 | 6)))
      {
        v34 = *(float32x2_t *)(*v5 + 16 * (v9 | 6) + 4);
        v35 = *(_DWORD *)(v6 + 64);
        v36 = *(_DWORD *)(v6 + 68);
        v37 = *(_QWORD *)(v6 + 24);
        if (!v37)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v38 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v55 = qword_255795648;
            v54 = qword_255795650;
            while (v55 != v54)
            {
              v57 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v55;
              v56 = *(_QWORD *)(v55 + 8);
              v55 += 16;
              v57(v56, "ptr != nullptr || size == 0", 27, "", 0);
            }
          }
          v39 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          v5 = (_QWORD *)a4;
          if (!byte_255795670)
            goto LABEL_84;
          result = qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
        }
        v40 = vadd_f32(v34, (float32x2_t)0x3F0000003F000000);
        v41 = *(_QWORD *)(v37 + 2 * (v35 * vcvtms_s32_f32(v40.f32[0]) + v36 * vcvtms_s32_f32(v40.f32[1])));
        if (v41 <= BYTE6(v41))
          v41 >>= 48;
        if (BYTE1(v41) <= 0x19u)
          result = sub_223A4EA54(a5 + 28 * v63 + 84, BYTE1(v41));
      }
      ++v8;
    }
    while (v8 != 4);
    v7 = v58 + 1;
  }
  while (v58 != 3);
  return result;
}

BOOL sub_223A7CBA8(_BOOL8 result, int a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  _WORD *v12;
  unsigned int v13;
  _WORD *v14;
  unsigned int v15;
  uint64_t v16;
  _WORD *v17;
  unsigned int v18;
  _WORD *v19;
  unsigned int v20;
  uint64_t v21;
  _WORD *v22;
  unsigned int v23;
  _WORD *v24;
  unsigned int v25;
  uint64_t v26;
  _WORD *v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  unsigned int v37;
  _WORD *v38;
  unsigned int v39;
  uint64_t v40;
  _WORD *v41;
  unsigned int v42;
  _WORD *v43;
  unsigned int v44;
  uint64_t v45;
  _WORD *v46;
  unsigned int v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  _WORD *v51;
  unsigned int v52;
  _WORD *v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _WORD *v60;
  unsigned int v61;
  _WORD *v62;
  unsigned int v63;
  uint64_t v64;
  _WORD *v65;
  unsigned int v66;
  _WORD *v67;
  unsigned int v68;
  uint64_t v69;
  _WORD *v70;
  unsigned int v71;
  _WORD *v72;
  unsigned int v73;
  uint64_t v74;
  _WORD *v75;
  unsigned int v76;
  _WORD *v77;
  unsigned int v78;
  unint64_t v79;
  __int16 *v80;
  _WORD *v81;
  unsigned int v82;
  _WORD *v83;
  unsigned int v84;
  _WORD *v85;
  unsigned int v86;
  _WORD *v87;
  unsigned int v88;
  _WORD *v89;
  unsigned int v90;
  _WORD *v91;
  unsigned int v92;
  _WORD *v93;
  unsigned int v94;
  _WORD *v95;
  unsigned int v96;
  unint64_t v97;
  __int16 *v98;
  _WORD *v99;
  unsigned int v100;
  _WORD *v101;
  unsigned int v102;
  _WORD *v103;
  unsigned int v104;
  _WORD *v105;
  unsigned int v106;
  _WORD *v107;
  unsigned int v108;
  _WORD *v109;
  unsigned int v110;
  _WORD *v111;
  unsigned int v112;
  _WORD *v113;
  unsigned int v114;
  unint64_t v115;
  __int16 *v116;
  _WORD *v117;
  unsigned int v118;
  _WORD *v119;
  unsigned int v120;
  _WORD *v121;
  unsigned int v122;
  _WORD *v123;
  unsigned int v124;
  _WORD *v125;
  unsigned int v126;
  _WORD *v127;
  unsigned int v128;
  _WORD *v129;
  unsigned int v130;
  _WORD *v131;
  unsigned int v132;
  unint64_t v133;
  __int16 *v134;
  BOOL v135;
  uint64_t v136;
  unsigned int v137;
  unint64_t v138;
  _DWORD *v139;
  unint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  _DWORD *v143;
  unint64_t v144;
  _DWORD *v145;
  unint64_t v146;
  _DWORD *v147;
  unint64_t v148;
  _DWORD *v149;
  unint64_t v150;

  v5 = (_QWORD *)result;
  v6 = *(unsigned int **)(a3 + 2920);
  v7 = v6[7];
  if ((_DWORD)v7 != -1)
  {
    if (*(_QWORD *)(result + 88) <= v7)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v7) / 0x1F)) + 132 * ((v5[10] + v7) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v8 = 0;
    v9 = *(_QWORD *)(v5[18] + (((v5[21] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v7) & 0xF);
    v10 = a3 + 176;
    do
    {
      v11 = (__int16 *)(v9 + v8);
      *(_DWORD *)(v10 + v8 - 144) = *(_DWORD *)(v9 + v8);
      if (*(_BYTE *)(v9 + v8 + 2))
      {
        if (*v11 >= 0)
          v12 = (_WORD *)(a3 + 2928);
        else
          v12 = (_WORD *)(a3 + 2930);
        v13 = (unsigned __int16)*v12;
        if (v13 <= (unsigned __int16)(v13 + 1))
          LOWORD(v13) = v13 + 1;
        *v12 = v13;
      }
      *(_DWORD *)(v10 + v8 - 108) = *((_DWORD *)v11 + 9);
      if (*((_BYTE *)v11 + 38))
      {
        if (v11[18] >= 0)
          v14 = (_WORD *)(a3 + 2928);
        else
          v14 = (_WORD *)(a3 + 2930);
        v15 = (unsigned __int16)*v14;
        if (v15 <= (unsigned __int16)(v15 + 1))
          LOWORD(v15) = v15 + 1;
        *v14 = v15;
      }
      v16 = v9 + v8;
      *(_DWORD *)(v10 + v8 - 72) = *(_DWORD *)(v9 + v8 + 72);
      if (*(_BYTE *)(v9 + v8 + 74))
      {
        if (*(__int16 *)(v16 + 72) >= 0)
          v17 = (_WORD *)(a3 + 2928);
        else
          v17 = (_WORD *)(a3 + 2930);
        v18 = (unsigned __int16)*v17;
        if (v18 <= (unsigned __int16)(v18 + 1))
          LOWORD(v18) = v18 + 1;
        *v17 = v18;
      }
      *(_DWORD *)(v10 + v8 - 36) = *(_DWORD *)(v16 + 108);
      if (*(_BYTE *)(v16 + 110))
      {
        if (*(__int16 *)(v16 + 108) >= 0)
          v19 = (_WORD *)(a3 + 2928);
        else
          v19 = (_WORD *)(a3 + 2930);
        v20 = (unsigned __int16)*v19;
        if (v20 <= (unsigned __int16)(v20 + 1))
          LOWORD(v20) = v20 + 1;
        *v19 = v20;
      }
      v21 = v9 + v8;
      *(_DWORD *)(v10 + v8) = *(_DWORD *)(v9 + v8 + 144);
      if (*(_BYTE *)(v9 + v8 + 146))
      {
        if (*(__int16 *)(v21 + 144) >= 0)
          v22 = (_WORD *)(a3 + 2928);
        else
          v22 = (_WORD *)(a3 + 2930);
        v23 = (unsigned __int16)*v22;
        if (v23 <= (unsigned __int16)(v23 + 1))
          LOWORD(v23) = v23 + 1;
        *v22 = v23;
      }
      *(_DWORD *)(v10 + v8 + 36) = *(_DWORD *)(v21 + 180);
      if (*(_BYTE *)(v21 + 182))
      {
        if (*(__int16 *)(v21 + 180) >= 0)
          v24 = (_WORD *)(a3 + 2928);
        else
          v24 = (_WORD *)(a3 + 2930);
        v25 = (unsigned __int16)*v24;
        if (v25 <= (unsigned __int16)(v25 + 1))
          LOWORD(v25) = v25 + 1;
        *v24 = v25;
      }
      v26 = v9 + v8;
      *(_DWORD *)(v10 + v8 + 72) = *(_DWORD *)(v9 + v8 + 216);
      if (*(_BYTE *)(v9 + v8 + 218))
      {
        if (*(__int16 *)(v26 + 216) >= 0)
          v27 = (_WORD *)(a3 + 2928);
        else
          v27 = (_WORD *)(a3 + 2930);
        v28 = (unsigned __int16)*v27;
        if (v28 <= (unsigned __int16)(v28 + 1))
          LOWORD(v28) = v28 + 1;
        *v27 = v28;
      }
      *(_DWORD *)(v10 + v8 + 108) = *(_DWORD *)(v26 + 252);
      if (*(_BYTE *)(v26 + 254))
      {
        if (*(__int16 *)(v26 + 252) >= 0)
          v29 = (_WORD *)(a3 + 2928);
        else
          v29 = (_WORD *)(a3 + 2930);
        v30 = (unsigned __int16)*v29;
        if (v30 <= (unsigned __int16)(v30 + 1))
          LOWORD(v30) = v30 + 1;
        *v29 = v30;
      }
      v8 += 324;
    }
    while (v8 != 2592);
    v6 = *(unsigned int **)(a3 + 2920);
  }
  v31 = v6[8];
  if ((_DWORD)v31 != -1)
  {
    if (v5[11] <= v31)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v31) / 0x1F)) + 132 * ((v5[10] + v31) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v32 = 0;
    v33 = *(_QWORD *)(v5[18] + (((v5[21] + v31) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v31) & 0xF);
    v34 = a3 + 288;
    do
    {
      v35 = v33 + v32;
      *(_DWORD *)(v34 + v32) = *(_DWORD *)(v33 + v32);
      if (*(_BYTE *)(v33 + v32 + 2))
      {
        if (*(__int16 *)(v33 + v32) >= 0)
          v36 = (_WORD *)(a3 + 2928);
        else
          v36 = (_WORD *)(a3 + 2930);
        v37 = (unsigned __int16)*v36;
        if (v37 <= (unsigned __int16)(v37 + 1))
          LOWORD(v37) = v37 + 1;
        *v36 = v37;
      }
      *(_DWORD *)(v34 + v32 + 4) = *(_DWORD *)(v35 + 4);
      if (*(_BYTE *)(v35 + 6))
      {
        if (*(__int16 *)(v35 + 4) >= 0)
          v38 = (_WORD *)(a3 + 2928);
        else
          v38 = (_WORD *)(a3 + 2930);
        v39 = (unsigned __int16)*v38;
        if (v39 <= (unsigned __int16)(v39 + 1))
          LOWORD(v39) = v39 + 1;
        *v38 = v39;
      }
      v40 = v33 + v32;
      *(_DWORD *)(v34 + v32 + 8) = *(_DWORD *)(v33 + v32 + 8);
      if (*(_BYTE *)(v33 + v32 + 10))
      {
        if (*(__int16 *)(v40 + 8) >= 0)
          v41 = (_WORD *)(a3 + 2928);
        else
          v41 = (_WORD *)(a3 + 2930);
        v42 = (unsigned __int16)*v41;
        if (v42 <= (unsigned __int16)(v42 + 1))
          LOWORD(v42) = v42 + 1;
        *v41 = v42;
      }
      *(_DWORD *)(v34 + v32 + 12) = *(_DWORD *)(v40 + 12);
      if (*(_BYTE *)(v40 + 14))
      {
        if (*(__int16 *)(v40 + 12) >= 0)
          v43 = (_WORD *)(a3 + 2928);
        else
          v43 = (_WORD *)(a3 + 2930);
        v44 = (unsigned __int16)*v43;
        if (v44 <= (unsigned __int16)(v44 + 1))
          LOWORD(v44) = v44 + 1;
        *v43 = v44;
      }
      v45 = v33 + v32;
      *(_DWORD *)(v34 + v32 + 16) = *(_DWORD *)(v33 + v32 + 16);
      if (*(_BYTE *)(v33 + v32 + 18))
      {
        if (*(__int16 *)(v45 + 16) >= 0)
          v46 = (_WORD *)(a3 + 2928);
        else
          v46 = (_WORD *)(a3 + 2930);
        v47 = (unsigned __int16)*v46;
        if (v47 <= (unsigned __int16)(v47 + 1))
          LOWORD(v47) = v47 + 1;
        *v46 = v47;
      }
      *(_DWORD *)(v34 + v32 + 20) = *(_DWORD *)(v45 + 20);
      if (*(_BYTE *)(v45 + 22))
      {
        if (*(__int16 *)(v45 + 20) >= 0)
          v48 = (_WORD *)(a3 + 2928);
        else
          v48 = (_WORD *)(a3 + 2930);
        v49 = (unsigned __int16)*v48;
        if (v49 <= (unsigned __int16)(v49 + 1))
          LOWORD(v49) = v49 + 1;
        *v48 = v49;
      }
      v50 = v33 + v32;
      *(_DWORD *)(v34 + v32 + 24) = *(_DWORD *)(v33 + v32 + 24);
      if (*(_BYTE *)(v33 + v32 + 26))
      {
        if (*(__int16 *)(v50 + 24) >= 0)
          v51 = (_WORD *)(a3 + 2928);
        else
          v51 = (_WORD *)(a3 + 2930);
        v52 = (unsigned __int16)*v51;
        if (v52 <= (unsigned __int16)(v52 + 1))
          LOWORD(v52) = v52 + 1;
        *v51 = v52;
      }
      *(_DWORD *)(v34 + v32 + 28) = *(_DWORD *)(v50 + 28);
      if (*(_BYTE *)(v50 + 30))
      {
        if (*(__int16 *)(v50 + 28) >= 0)
          v53 = (_WORD *)(a3 + 2928);
        else
          v53 = (_WORD *)(a3 + 2930);
        v54 = (unsigned __int16)*v53;
        if (v54 <= (unsigned __int16)(v54 + 1))
          LOWORD(v54) = v54 + 1;
        *v53 = v54;
      }
      v32 += 324;
    }
    while (v32 != 2592);
    v6 = *(unsigned int **)(a3 + 2920);
  }
  v55 = v6[10];
  if ((_DWORD)v55 != -1)
  {
    if (v5[11] <= v55)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v55) / 0x1F)) + 132 * ((v5[10] + v55) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v56 = 0;
    v57 = *(_QWORD *)(v5[18] + (((v5[21] + v55) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v55) & 0xF);
    v58 = a3 + 2592;
    do
    {
      v59 = v57 + v56;
      *(_DWORD *)(v58 + v56) = *(_DWORD *)(v57 + v56);
      if (*(_BYTE *)(v57 + v56 + 2))
      {
        if (*(__int16 *)(v57 + v56) >= 0)
          v60 = (_WORD *)(a3 + 2928);
        else
          v60 = (_WORD *)(a3 + 2930);
        v61 = (unsigned __int16)*v60;
        if (v61 <= (unsigned __int16)(v61 + 1))
          LOWORD(v61) = v61 + 1;
        *v60 = v61;
      }
      *(_DWORD *)(v58 + v56 + 4) = *(_DWORD *)(v59 + 4);
      if (*(_BYTE *)(v59 + 6))
      {
        if (*(__int16 *)(v59 + 4) >= 0)
          v62 = (_WORD *)(a3 + 2928);
        else
          v62 = (_WORD *)(a3 + 2930);
        v63 = (unsigned __int16)*v62;
        if (v63 <= (unsigned __int16)(v63 + 1))
          LOWORD(v63) = v63 + 1;
        *v62 = v63;
      }
      v64 = v57 + v56;
      *(_DWORD *)(v58 + v56 + 8) = *(_DWORD *)(v57 + v56 + 8);
      if (*(_BYTE *)(v57 + v56 + 10))
      {
        if (*(__int16 *)(v64 + 8) >= 0)
          v65 = (_WORD *)(a3 + 2928);
        else
          v65 = (_WORD *)(a3 + 2930);
        v66 = (unsigned __int16)*v65;
        if (v66 <= (unsigned __int16)(v66 + 1))
          LOWORD(v66) = v66 + 1;
        *v65 = v66;
      }
      *(_DWORD *)(v58 + v56 + 12) = *(_DWORD *)(v64 + 12);
      if (*(_BYTE *)(v64 + 14))
      {
        if (*(__int16 *)(v64 + 12) >= 0)
          v67 = (_WORD *)(a3 + 2928);
        else
          v67 = (_WORD *)(a3 + 2930);
        v68 = (unsigned __int16)*v67;
        if (v68 <= (unsigned __int16)(v68 + 1))
          LOWORD(v68) = v68 + 1;
        *v67 = v68;
      }
      v69 = v57 + v56;
      *(_DWORD *)(v58 + v56 + 16) = *(_DWORD *)(v57 + v56 + 16);
      if (*(_BYTE *)(v57 + v56 + 18))
      {
        if (*(__int16 *)(v69 + 16) >= 0)
          v70 = (_WORD *)(a3 + 2928);
        else
          v70 = (_WORD *)(a3 + 2930);
        v71 = (unsigned __int16)*v70;
        if (v71 <= (unsigned __int16)(v71 + 1))
          LOWORD(v71) = v71 + 1;
        *v70 = v71;
      }
      *(_DWORD *)(v58 + v56 + 20) = *(_DWORD *)(v69 + 20);
      if (*(_BYTE *)(v69 + 22))
      {
        if (*(__int16 *)(v69 + 20) >= 0)
          v72 = (_WORD *)(a3 + 2928);
        else
          v72 = (_WORD *)(a3 + 2930);
        v73 = (unsigned __int16)*v72;
        if (v73 <= (unsigned __int16)(v73 + 1))
          LOWORD(v73) = v73 + 1;
        *v72 = v73;
      }
      v74 = v57 + v56;
      *(_DWORD *)(v58 + v56 + 24) = *(_DWORD *)(v57 + v56 + 24);
      if (*(_BYTE *)(v57 + v56 + 26))
      {
        if (*(__int16 *)(v74 + 24) >= 0)
          v75 = (_WORD *)(a3 + 2928);
        else
          v75 = (_WORD *)(a3 + 2930);
        v76 = (unsigned __int16)*v75;
        if (v76 <= (unsigned __int16)(v76 + 1))
          LOWORD(v76) = v76 + 1;
        *v75 = v76;
      }
      *(_DWORD *)(v58 + v56 + 28) = *(_DWORD *)(v74 + 28);
      if (*(_BYTE *)(v74 + 30))
      {
        if (*(__int16 *)(v74 + 28) >= 0)
          v77 = (_WORD *)(a3 + 2928);
        else
          v77 = (_WORD *)(a3 + 2930);
        v78 = (unsigned __int16)*v77;
        if (v78 <= (unsigned __int16)(v78 + 1))
          LOWORD(v78) = v78 + 1;
        *v77 = v78;
      }
      v56 += 36;
    }
    while (v56 != 288);
    v6 = *(unsigned int **)(a3 + 2920);
  }
  v79 = v6[9];
  if ((_DWORD)v79 != -1)
  {
    if (v5[11] <= v79)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v79) / 0x1F)) + 132 * ((v5[10] + v79) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v80 = (__int16 *)(*(_QWORD *)(v5[18] + (((v5[21] + v79) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v79) & 0xF));
    *(_DWORD *)(a3 + 320) = *(_DWORD *)v80;
    if (*((_BYTE *)v80 + 2))
    {
      if (*v80 >= 0)
        v81 = (_WORD *)(a3 + 2928);
      else
        v81 = (_WORD *)(a3 + 2930);
      v82 = (unsigned __int16)*v81;
      if (v82 <= (unsigned __int16)(v82 + 1))
        LOWORD(v82) = v82 + 1;
      *v81 = v82;
    }
    *(_DWORD *)(a3 + 644) = *((_DWORD *)v80 + 81);
    if (*((_BYTE *)v80 + 326))
    {
      if (v80[162] >= 0)
        v83 = (_WORD *)(a3 + 2928);
      else
        v83 = (_WORD *)(a3 + 2930);
      v84 = (unsigned __int16)*v83;
      if (v84 <= (unsigned __int16)(v84 + 1))
        LOWORD(v84) = v84 + 1;
      *v83 = v84;
    }
    *(_DWORD *)(a3 + 968) = *((_DWORD *)v80 + 162);
    if (*((_BYTE *)v80 + 650))
    {
      if (v80[324] >= 0)
        v85 = (_WORD *)(a3 + 2928);
      else
        v85 = (_WORD *)(a3 + 2930);
      v86 = (unsigned __int16)*v85;
      if (v86 <= (unsigned __int16)(v86 + 1))
        LOWORD(v86) = v86 + 1;
      *v85 = v86;
    }
    *(_DWORD *)(a3 + 1292) = *((_DWORD *)v80 + 243);
    if (*((_BYTE *)v80 + 974))
    {
      if (v80[486] >= 0)
        v87 = (_WORD *)(a3 + 2928);
      else
        v87 = (_WORD *)(a3 + 2930);
      v88 = (unsigned __int16)*v87;
      if (v88 <= (unsigned __int16)(v88 + 1))
        LOWORD(v88) = v88 + 1;
      *v87 = v88;
    }
    *(_DWORD *)(a3 + 1616) = *((_DWORD *)v80 + 324);
    if (*((_BYTE *)v80 + 1298))
    {
      if (v80[648] >= 0)
        v89 = (_WORD *)(a3 + 2928);
      else
        v89 = (_WORD *)(a3 + 2930);
      v90 = (unsigned __int16)*v89;
      if (v90 <= (unsigned __int16)(v90 + 1))
        LOWORD(v90) = v90 + 1;
      *v89 = v90;
    }
    *(_DWORD *)(a3 + 1940) = *((_DWORD *)v80 + 405);
    if (*((_BYTE *)v80 + 1622))
    {
      if (v80[810] >= 0)
        v91 = (_WORD *)(a3 + 2928);
      else
        v91 = (_WORD *)(a3 + 2930);
      v92 = (unsigned __int16)*v91;
      if (v92 <= (unsigned __int16)(v92 + 1))
        LOWORD(v92) = v92 + 1;
      *v91 = v92;
    }
    *(_DWORD *)(a3 + 2264) = *((_DWORD *)v80 + 486);
    if (*((_BYTE *)v80 + 1946))
    {
      if (v80[972] >= 0)
        v93 = (_WORD *)(a3 + 2928);
      else
        v93 = (_WORD *)(a3 + 2930);
      v94 = (unsigned __int16)*v93;
      if (v94 <= (unsigned __int16)(v94 + 1))
        LOWORD(v94) = v94 + 1;
      *v93 = v94;
    }
    *(_DWORD *)(a3 + 2588) = *((_DWORD *)v80 + 567);
    if (*((_BYTE *)v80 + 2270))
    {
      if (v80[1134] >= 0)
        v95 = (_WORD *)(a3 + 2928);
      else
        v95 = (_WORD *)(a3 + 2930);
      v96 = (unsigned __int16)*v95;
      if (v96 <= (unsigned __int16)(v96 + 1))
        LOWORD(v96) = v96 + 1;
      *v95 = v96;
    }
  }
  v97 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 44);
  if ((_DWORD)v97 != -1)
  {
    if (v5[11] <= v97)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v97) / 0x1F)) + 132 * ((v5[10] + v97) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v98 = (__int16 *)(*(_QWORD *)(v5[18] + (((v5[21] + v97) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v97) & 0xF));
    *(_DWORD *)(a3 + 2624) = *(_DWORD *)v98;
    if (*((_BYTE *)v98 + 2))
    {
      if (*v98 >= 0)
        v99 = (_WORD *)(a3 + 2928);
      else
        v99 = (_WORD *)(a3 + 2930);
      v100 = (unsigned __int16)*v99;
      if (v100 <= (unsigned __int16)(v100 + 1))
        LOWORD(v100) = v100 + 1;
      *v99 = v100;
    }
    *(_DWORD *)(a3 + 2660) = *((_DWORD *)v98 + 9);
    if (*((_BYTE *)v98 + 38))
    {
      if (v98[18] >= 0)
        v101 = (_WORD *)(a3 + 2928);
      else
        v101 = (_WORD *)(a3 + 2930);
      v102 = (unsigned __int16)*v101;
      if (v102 <= (unsigned __int16)(v102 + 1))
        LOWORD(v102) = v102 + 1;
      *v101 = v102;
    }
    *(_DWORD *)(a3 + 2696) = *((_DWORD *)v98 + 18);
    if (*((_BYTE *)v98 + 74))
    {
      if (v98[36] >= 0)
        v103 = (_WORD *)(a3 + 2928);
      else
        v103 = (_WORD *)(a3 + 2930);
      v104 = (unsigned __int16)*v103;
      if (v104 <= (unsigned __int16)(v104 + 1))
        LOWORD(v104) = v104 + 1;
      *v103 = v104;
    }
    *(_DWORD *)(a3 + 2732) = *((_DWORD *)v98 + 27);
    if (*((_BYTE *)v98 + 110))
    {
      if (v98[54] >= 0)
        v105 = (_WORD *)(a3 + 2928);
      else
        v105 = (_WORD *)(a3 + 2930);
      v106 = (unsigned __int16)*v105;
      if (v106 <= (unsigned __int16)(v106 + 1))
        LOWORD(v106) = v106 + 1;
      *v105 = v106;
    }
    *(_DWORD *)(a3 + 2768) = *((_DWORD *)v98 + 36);
    if (*((_BYTE *)v98 + 146))
    {
      if (v98[72] >= 0)
        v107 = (_WORD *)(a3 + 2928);
      else
        v107 = (_WORD *)(a3 + 2930);
      v108 = (unsigned __int16)*v107;
      if (v108 <= (unsigned __int16)(v108 + 1))
        LOWORD(v108) = v108 + 1;
      *v107 = v108;
    }
    *(_DWORD *)(a3 + 2804) = *((_DWORD *)v98 + 45);
    if (*((_BYTE *)v98 + 182))
    {
      if (v98[90] >= 0)
        v109 = (_WORD *)(a3 + 2928);
      else
        v109 = (_WORD *)(a3 + 2930);
      v110 = (unsigned __int16)*v109;
      if (v110 <= (unsigned __int16)(v110 + 1))
        LOWORD(v110) = v110 + 1;
      *v109 = v110;
    }
    *(_DWORD *)(a3 + 2840) = *((_DWORD *)v98 + 54);
    if (*((_BYTE *)v98 + 218))
    {
      if (v98[108] >= 0)
        v111 = (_WORD *)(a3 + 2928);
      else
        v111 = (_WORD *)(a3 + 2930);
      v112 = (unsigned __int16)*v111;
      if (v112 <= (unsigned __int16)(v112 + 1))
        LOWORD(v112) = v112 + 1;
      *v111 = v112;
    }
    *(_DWORD *)(a3 + 2876) = *((_DWORD *)v98 + 63);
    if (*((_BYTE *)v98 + 254))
    {
      if (v98[126] >= 0)
        v113 = (_WORD *)(a3 + 2928);
      else
        v113 = (_WORD *)(a3 + 2930);
      v114 = (unsigned __int16)*v113;
      if (v114 <= (unsigned __int16)(v114 + 1))
        LOWORD(v114) = v114 + 1;
      *v113 = v114;
    }
  }
  v115 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 48);
  if ((_DWORD)v115 != -1)
  {
    if (v5[11] <= v115)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v115) / 0x1F)) + 132 * ((v5[10] + v115) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v116 = (__int16 *)(*(_QWORD *)(v5[18] + (((v5[21] + v115) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v115) & 0xF));
    *(_DWORD *)(a3 + 2880) = *(_DWORD *)v116;
    if (*((_BYTE *)v116 + 2))
    {
      if (*v116 >= 0)
        v117 = (_WORD *)(a3 + 2928);
      else
        v117 = (_WORD *)(a3 + 2930);
      v118 = (unsigned __int16)*v117;
      if (v118 <= (unsigned __int16)(v118 + 1))
        LOWORD(v118) = v118 + 1;
      *v117 = v118;
    }
    *(_DWORD *)(a3 + 2884) = *((_DWORD *)v116 + 1);
    if (*((_BYTE *)v116 + 6))
    {
      if (v116[2] >= 0)
        v119 = (_WORD *)(a3 + 2928);
      else
        v119 = (_WORD *)(a3 + 2930);
      v120 = (unsigned __int16)*v119;
      if (v120 <= (unsigned __int16)(v120 + 1))
        LOWORD(v120) = v120 + 1;
      *v119 = v120;
    }
    *(_DWORD *)(a3 + 2888) = *((_DWORD *)v116 + 2);
    if (*((_BYTE *)v116 + 10))
    {
      if (v116[4] >= 0)
        v121 = (_WORD *)(a3 + 2928);
      else
        v121 = (_WORD *)(a3 + 2930);
      v122 = (unsigned __int16)*v121;
      if (v122 <= (unsigned __int16)(v122 + 1))
        LOWORD(v122) = v122 + 1;
      *v121 = v122;
    }
    *(_DWORD *)(a3 + 2892) = *((_DWORD *)v116 + 3);
    if (*((_BYTE *)v116 + 14))
    {
      if (v116[6] >= 0)
        v123 = (_WORD *)(a3 + 2928);
      else
        v123 = (_WORD *)(a3 + 2930);
      v124 = (unsigned __int16)*v123;
      if (v124 <= (unsigned __int16)(v124 + 1))
        LOWORD(v124) = v124 + 1;
      *v123 = v124;
    }
    *(_DWORD *)(a3 + 2896) = *((_DWORD *)v116 + 4);
    if (*((_BYTE *)v116 + 18))
    {
      if (v116[8] >= 0)
        v125 = (_WORD *)(a3 + 2928);
      else
        v125 = (_WORD *)(a3 + 2930);
      v126 = (unsigned __int16)*v125;
      if (v126 <= (unsigned __int16)(v126 + 1))
        LOWORD(v126) = v126 + 1;
      *v125 = v126;
    }
    *(_DWORD *)(a3 + 2900) = *((_DWORD *)v116 + 5);
    if (*((_BYTE *)v116 + 22))
    {
      if (v116[10] >= 0)
        v127 = (_WORD *)(a3 + 2928);
      else
        v127 = (_WORD *)(a3 + 2930);
      v128 = (unsigned __int16)*v127;
      if (v128 <= (unsigned __int16)(v128 + 1))
        LOWORD(v128) = v128 + 1;
      *v127 = v128;
    }
    *(_DWORD *)(a3 + 2904) = *((_DWORD *)v116 + 6);
    if (*((_BYTE *)v116 + 26))
    {
      if (v116[12] >= 0)
        v129 = (_WORD *)(a3 + 2928);
      else
        v129 = (_WORD *)(a3 + 2930);
      v130 = (unsigned __int16)*v129;
      if (v130 <= (unsigned __int16)(v130 + 1))
        LOWORD(v130) = v130 + 1;
      *v129 = v130;
    }
    *(_DWORD *)(a3 + 2908) = *((_DWORD *)v116 + 7);
    if (*((_BYTE *)v116 + 30))
    {
      if (v116[14] >= 0)
        v131 = (_WORD *)(a3 + 2928);
      else
        v131 = (_WORD *)(a3 + 2930);
      v132 = (unsigned __int16)*v131;
      if (v132 <= (unsigned __int16)(v132 + 1))
        LOWORD(v132) = v132 + 1;
      *v131 = v132;
    }
  }
  v133 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 52);
  if ((_DWORD)v133 != -1)
  {
    if (v5[11] <= v133)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v133) / 0x1F)) + 132 * ((v5[10] + v133) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v134 = (__int16 *)(*(_QWORD *)(v5[18] + (((v5[21] + v133) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v133) & 0xF));
    *(_DWORD *)(a3 + 2912) = *(_DWORD *)v134;
    if (*((_BYTE *)v134 + 2))
    {
      v135 = *v134 < 0;
      v136 = 2928;
      if (v135)
        v136 = 2930;
      v137 = *(unsigned __int16 *)(a3 + v136);
      if (v137 <= (unsigned __int16)(v137 + 1))
        LOWORD(v137) = v137 + 1;
      *(_WORD *)(a3 + v136) = v137;
    }
  }
  if (!a2)
    return result;
  if ((a2 & 8) != 0)
  {
    v138 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 68);
    if (v5[11] <= v138)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v138) / 0x1F)) + 132 * ((v5[10] + v138) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v139 = (_DWORD *)(*(_QWORD *)(v5[18] + (((v5[21] + v138) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v138) & 0xF));
    *(_DWORD *)a3 = v139[648];
    *(_DWORD *)(a3 + 4) = v139[649];
    *(_DWORD *)(a3 + 8) = v139[650];
    *(_DWORD *)(a3 + 12) = v139[651];
    *(_DWORD *)(a3 + 16) = v139[652];
    *(_DWORD *)(a3 + 20) = v139[653];
    *(_DWORD *)(a3 + 24) = v139[654];
    *(_DWORD *)(a3 + 28) = v139[655];
    *(_DWORD *)(a3 + 32) = v139[656];
    *(_DWORD *)(a3 + 36) = v139[657];
    *(_DWORD *)(a3 + 40) = v139[658];
    *(_DWORD *)(a3 + 44) = v139[659];
    *(_DWORD *)(a3 + 48) = v139[660];
    *(_DWORD *)(a3 + 52) = v139[661];
    *(_DWORD *)(a3 + 56) = v139[662];
    *(_DWORD *)(a3 + 60) = v139[663];
    *(_DWORD *)(a3 + 64) = v139[664];
    *(_DWORD *)(a3 + 68) = v139[665];
    *(_DWORD *)(a3 + 72) = v139[666];
    *(_DWORD *)(a3 + 76) = v139[667];
    *(_DWORD *)(a3 + 80) = v139[668];
    *(_DWORD *)(a3 + 84) = v139[669];
    *(_DWORD *)(a3 + 88) = v139[670];
    *(_DWORD *)(a3 + 92) = v139[671];
    *(_DWORD *)(a3 + 96) = v139[672];
    *(_DWORD *)(a3 + 100) = v139[673];
    *(_DWORD *)(a3 + 104) = v139[674];
    *(_DWORD *)(a3 + 108) = v139[675];
    *(_DWORD *)(a3 + 112) = v139[676];
    *(_DWORD *)(a3 + 116) = v139[677];
    *(_DWORD *)(a3 + 120) = v139[678];
    *(_DWORD *)(a3 + 124) = v139[679];
    *(_DWORD *)(a3 + 128) = v139[680];
    *(_DWORD *)(a3 + 132) = v139[681];
    *(_DWORD *)(a3 + 136) = v139[682];
    *(_DWORD *)(a3 + 140) = v139[683];
    *(_DWORD *)(a3 + 144) = v139[684];
    *(_DWORD *)(a3 + 148) = v139[685];
    *(_DWORD *)(a3 + 152) = v139[686];
    *(_DWORD *)(a3 + 156) = v139[687];
    *(_DWORD *)(a3 + 160) = v139[688];
    *(_DWORD *)(a3 + 164) = v139[689];
    *(_DWORD *)(a3 + 168) = v139[690];
    *(_DWORD *)(a3 + 172) = v139[691];
    *(_DWORD *)(a3 + 176) = v139[692];
    *(_DWORD *)(a3 + 180) = v139[693];
    *(_DWORD *)(a3 + 184) = v139[694];
    *(_DWORD *)(a3 + 188) = v139[695];
    *(_DWORD *)(a3 + 192) = v139[696];
    *(_DWORD *)(a3 + 196) = v139[697];
    *(_DWORD *)(a3 + 200) = v139[698];
    *(_DWORD *)(a3 + 204) = v139[699];
    *(_DWORD *)(a3 + 208) = v139[700];
    *(_DWORD *)(a3 + 212) = v139[701];
    *(_DWORD *)(a3 + 216) = v139[702];
    *(_DWORD *)(a3 + 220) = v139[703];
    *(_DWORD *)(a3 + 224) = v139[704];
    *(_DWORD *)(a3 + 228) = v139[705];
    *(_DWORD *)(a3 + 232) = v139[706];
    *(_DWORD *)(a3 + 236) = v139[707];
    *(_DWORD *)(a3 + 240) = v139[708];
    *(_DWORD *)(a3 + 244) = v139[709];
    *(_DWORD *)(a3 + 248) = v139[710];
    *(_DWORD *)(a3 + 252) = v139[711];
    *(_DWORD *)(a3 + 256) = v139[712];
    *(_DWORD *)(a3 + 260) = v139[713];
    *(_DWORD *)(a3 + 264) = v139[714];
    *(_DWORD *)(a3 + 268) = v139[715];
    *(_DWORD *)(a3 + 272) = v139[716];
    *(_DWORD *)(a3 + 276) = v139[717];
    *(_DWORD *)(a3 + 280) = v139[718];
    *(_DWORD *)(a3 + 284) = v139[719];
    *(_DWORD *)(a3 + 288) = v139[720];
    *(_DWORD *)(a3 + 292) = v139[721];
    *(_DWORD *)(a3 + 296) = v139[722];
    *(_DWORD *)(a3 + 300) = v139[723];
    *(_DWORD *)(a3 + 304) = v139[724];
    *(_DWORD *)(a3 + 308) = v139[725];
    *(_DWORD *)(a3 + 312) = v139[726];
    *(_DWORD *)(a3 + 316) = v139[727];
    *(_DWORD *)(a3 + 320) = v139[728];
  }
  if ((a2 & 0x20) != 0)
  {
    v140 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 76);
    if (v5[11] <= v140)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v140) / 0x1F)) + 132 * ((v5[10] + v140) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v141 = (_DWORD *)(*(_QWORD *)(v5[18] + (((v5[21] + v140) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v140) & 0xF));
    *(_DWORD *)a3 = v141[72];
    *(_DWORD *)(a3 + 4) = v141[73];
    *(_DWORD *)(a3 + 8) = v141[74];
    *(_DWORD *)(a3 + 12) = v141[75];
    *(_DWORD *)(a3 + 16) = v141[76];
    *(_DWORD *)(a3 + 20) = v141[77];
    *(_DWORD *)(a3 + 24) = v141[78];
    *(_DWORD *)(a3 + 28) = v141[79];
    *(_DWORD *)(a3 + 32) = v141[80];
    *(_DWORD *)(a3 + 324) = v141[153];
    *(_DWORD *)(a3 + 328) = v141[154];
    *(_DWORD *)(a3 + 332) = v141[155];
    *(_DWORD *)(a3 + 336) = v141[156];
    *(_DWORD *)(a3 + 340) = v141[157];
    *(_DWORD *)(a3 + 344) = v141[158];
    *(_DWORD *)(a3 + 348) = v141[159];
    *(_DWORD *)(a3 + 352) = v141[160];
    *(_DWORD *)(a3 + 356) = v141[161];
    *(_DWORD *)(a3 + 648) = v141[234];
    *(_DWORD *)(a3 + 652) = v141[235];
    *(_DWORD *)(a3 + 656) = v141[236];
    *(_DWORD *)(a3 + 660) = v141[237];
    *(_DWORD *)(a3 + 664) = v141[238];
    *(_DWORD *)(a3 + 668) = v141[239];
    *(_DWORD *)(a3 + 672) = v141[240];
    *(_DWORD *)(a3 + 676) = v141[241];
    *(_DWORD *)(a3 + 680) = v141[242];
    *(_DWORD *)(a3 + 972) = v141[315];
    *(_DWORD *)(a3 + 976) = v141[316];
    *(_DWORD *)(a3 + 980) = v141[317];
    *(_DWORD *)(a3 + 984) = v141[318];
    *(_DWORD *)(a3 + 988) = v141[319];
    *(_DWORD *)(a3 + 992) = v141[320];
    *(_DWORD *)(a3 + 996) = v141[321];
    *(_DWORD *)(a3 + 1000) = v141[322];
    *(_DWORD *)(a3 + 1004) = v141[323];
    *(_DWORD *)(a3 + 1296) = v141[396];
    *(_DWORD *)(a3 + 1300) = v141[397];
    *(_DWORD *)(a3 + 1304) = v141[398];
    *(_DWORD *)(a3 + 1308) = v141[399];
    *(_DWORD *)(a3 + 1312) = v141[400];
    *(_DWORD *)(a3 + 1316) = v141[401];
    *(_DWORD *)(a3 + 1320) = v141[402];
    *(_DWORD *)(a3 + 1324) = v141[403];
    *(_DWORD *)(a3 + 1328) = v141[404];
    *(_DWORD *)(a3 + 1620) = v141[477];
    *(_DWORD *)(a3 + 1624) = v141[478];
    *(_DWORD *)(a3 + 1628) = v141[479];
    *(_DWORD *)(a3 + 1632) = v141[480];
    *(_DWORD *)(a3 + 1636) = v141[481];
    *(_DWORD *)(a3 + 1640) = v141[482];
    *(_DWORD *)(a3 + 1644) = v141[483];
    *(_DWORD *)(a3 + 1648) = v141[484];
    *(_DWORD *)(a3 + 1652) = v141[485];
    *(_DWORD *)(a3 + 1944) = v141[558];
    *(_DWORD *)(a3 + 1948) = v141[559];
    *(_DWORD *)(a3 + 1952) = v141[560];
    *(_DWORD *)(a3 + 1956) = v141[561];
    *(_DWORD *)(a3 + 1960) = v141[562];
    *(_DWORD *)(a3 + 1964) = v141[563];
    *(_DWORD *)(a3 + 1968) = v141[564];
    *(_DWORD *)(a3 + 1972) = v141[565];
    *(_DWORD *)(a3 + 1976) = v141[566];
    *(_DWORD *)(a3 + 2268) = v141[639];
    *(_DWORD *)(a3 + 2272) = v141[640];
    *(_DWORD *)(a3 + 2276) = v141[641];
    *(_DWORD *)(a3 + 2280) = v141[642];
    *(_DWORD *)(a3 + 2284) = v141[643];
    *(_DWORD *)(a3 + 2288) = v141[644];
    *(_DWORD *)(a3 + 2292) = v141[645];
    *(_DWORD *)(a3 + 2296) = v141[646];
    *(_DWORD *)(a3 + 2300) = v141[647];
    *(_DWORD *)(a3 + 2592) = v141[720];
    *(_DWORD *)(a3 + 2596) = v141[721];
    *(_DWORD *)(a3 + 2600) = v141[722];
    *(_DWORD *)(a3 + 2604) = v141[723];
    *(_DWORD *)(a3 + 2608) = v141[724];
    *(_DWORD *)(a3 + 2612) = v141[725];
    *(_DWORD *)(a3 + 2616) = v141[726];
    *(_DWORD *)(a3 + 2620) = v141[727];
    *(_DWORD *)(a3 + 2624) = v141[728];
  }
  if ((a2 & 0x40) != 0)
  {
    v142 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 80);
    if (v5[11] <= v142)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v142) / 0x1F)) + 132 * ((v5[10] + v142) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v143 = (_DWORD *)(*(_QWORD *)(v5[18] + (((v5[21] + v142) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v142) & 0xF));
    *(_DWORD *)a3 = v143[8];
    *(_DWORD *)(a3 + 36) = v143[17];
    *(_DWORD *)(a3 + 72) = v143[26];
    *(_DWORD *)(a3 + 108) = v143[35];
    *(_DWORD *)(a3 + 144) = v143[44];
    *(_DWORD *)(a3 + 180) = v143[53];
    *(_DWORD *)(a3 + 216) = v143[62];
    *(_DWORD *)(a3 + 252) = v143[71];
    *(_DWORD *)(a3 + 288) = v143[80];
    *(_DWORD *)(a3 + 324) = v143[89];
    *(_DWORD *)(a3 + 360) = v143[98];
    *(_DWORD *)(a3 + 396) = v143[107];
    *(_DWORD *)(a3 + 432) = v143[116];
    *(_DWORD *)(a3 + 468) = v143[125];
    *(_DWORD *)(a3 + 504) = v143[134];
    *(_DWORD *)(a3 + 540) = v143[143];
    *(_DWORD *)(a3 + 576) = v143[152];
    *(_DWORD *)(a3 + 612) = v143[161];
    *(_DWORD *)(a3 + 648) = v143[170];
    *(_DWORD *)(a3 + 684) = v143[179];
    *(_DWORD *)(a3 + 720) = v143[188];
    *(_DWORD *)(a3 + 756) = v143[197];
    *(_DWORD *)(a3 + 792) = v143[206];
    *(_DWORD *)(a3 + 828) = v143[215];
    *(_DWORD *)(a3 + 864) = v143[224];
    *(_DWORD *)(a3 + 900) = v143[233];
    *(_DWORD *)(a3 + 936) = v143[242];
    *(_DWORD *)(a3 + 972) = v143[251];
    *(_DWORD *)(a3 + 1008) = v143[260];
    *(_DWORD *)(a3 + 1044) = v143[269];
    *(_DWORD *)(a3 + 1080) = v143[278];
    *(_DWORD *)(a3 + 1116) = v143[287];
    *(_DWORD *)(a3 + 1152) = v143[296];
    *(_DWORD *)(a3 + 1188) = v143[305];
    *(_DWORD *)(a3 + 1224) = v143[314];
    *(_DWORD *)(a3 + 1260) = v143[323];
    *(_DWORD *)(a3 + 1296) = v143[332];
    *(_DWORD *)(a3 + 1332) = v143[341];
    *(_DWORD *)(a3 + 1368) = v143[350];
    *(_DWORD *)(a3 + 1404) = v143[359];
    *(_DWORD *)(a3 + 1440) = v143[368];
    *(_DWORD *)(a3 + 1476) = v143[377];
    *(_DWORD *)(a3 + 1512) = v143[386];
    *(_DWORD *)(a3 + 1548) = v143[395];
    *(_DWORD *)(a3 + 1584) = v143[404];
    *(_DWORD *)(a3 + 1620) = v143[413];
    *(_DWORD *)(a3 + 1656) = v143[422];
    *(_DWORD *)(a3 + 1692) = v143[431];
    *(_DWORD *)(a3 + 1728) = v143[440];
    *(_DWORD *)(a3 + 1764) = v143[449];
    *(_DWORD *)(a3 + 1800) = v143[458];
    *(_DWORD *)(a3 + 1836) = v143[467];
    *(_DWORD *)(a3 + 1872) = v143[476];
    *(_DWORD *)(a3 + 1908) = v143[485];
    *(_DWORD *)(a3 + 1944) = v143[494];
    *(_DWORD *)(a3 + 1980) = v143[503];
    *(_DWORD *)(a3 + 2016) = v143[512];
    *(_DWORD *)(a3 + 2052) = v143[521];
    *(_DWORD *)(a3 + 2088) = v143[530];
    *(_DWORD *)(a3 + 2124) = v143[539];
    *(_DWORD *)(a3 + 2160) = v143[548];
    *(_DWORD *)(a3 + 2196) = v143[557];
    *(_DWORD *)(a3 + 2232) = v143[566];
    *(_DWORD *)(a3 + 2268) = v143[575];
    *(_DWORD *)(a3 + 2304) = v143[584];
    *(_DWORD *)(a3 + 2340) = v143[593];
    *(_DWORD *)(a3 + 2376) = v143[602];
    *(_DWORD *)(a3 + 2412) = v143[611];
    *(_DWORD *)(a3 + 2448) = v143[620];
    *(_DWORD *)(a3 + 2484) = v143[629];
    *(_DWORD *)(a3 + 2520) = v143[638];
    *(_DWORD *)(a3 + 2556) = v143[647];
    *(_DWORD *)(a3 + 2592) = v143[656];
    *(_DWORD *)(a3 + 2628) = v143[665];
    *(_DWORD *)(a3 + 2664) = v143[674];
    *(_DWORD *)(a3 + 2700) = v143[683];
    *(_DWORD *)(a3 + 2736) = v143[692];
    *(_DWORD *)(a3 + 2772) = v143[701];
    *(_DWORD *)(a3 + 2808) = v143[710];
    *(_DWORD *)(a3 + 2844) = v143[719];
    *(_DWORD *)(a3 + 2880) = v143[728];
  }
  if ((a2 & 0x10) != 0)
  {
    v144 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 72);
    if (v5[11] <= v144)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v144) / 0x1F)) + 132 * ((v5[10] + v144) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v145 = (_DWORD *)(*(_QWORD *)(v5[18] + (((v5[21] + v144) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v144) & 0xF));
    *(_DWORD *)a3 = v145[80];
    *(_DWORD *)(a3 + 324) = v145[161];
    *(_DWORD *)(a3 + 648) = v145[242];
    *(_DWORD *)(a3 + 972) = v145[323];
    *(_DWORD *)(a3 + 1296) = v145[404];
    *(_DWORD *)(a3 + 1620) = v145[485];
    *(_DWORD *)(a3 + 1944) = v145[566];
    *(_DWORD *)(a3 + 2268) = v145[647];
    *(_DWORD *)(a3 + 2592) = v145[728];
  }
  if ((a2 & 2) != 0)
  {
    v146 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 60);
    if (v5[11] <= v146)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v146) / 0x1F)) + 132 * ((v5[10] + v146) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v147 = (_DWORD *)(*(_QWORD *)(v5[18] + (((v5[21] + v146) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v146) & 0xF));
    *(_DWORD *)a3 = v147[720];
    *(_DWORD *)(a3 + 4) = v147[721];
    *(_DWORD *)(a3 + 8) = v147[722];
    *(_DWORD *)(a3 + 12) = v147[723];
    *(_DWORD *)(a3 + 16) = v147[724];
    *(_DWORD *)(a3 + 20) = v147[725];
    *(_DWORD *)(a3 + 24) = v147[726];
    *(_DWORD *)(a3 + 28) = v147[727];
    *(_DWORD *)(a3 + 32) = v147[728];
  }
  if ((a2 & 4) != 0)
  {
    v148 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 64);
    if (v5[11] <= v148)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    if (*(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v148) / 0x1F)) + 132 * ((v5[10] + v148) % 0x1F) + 20))
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
      if (result)
        goto LABEL_431;
    }
    v149 = (_DWORD *)(*(_QWORD *)(v5[18] + (((v5[21] + v148) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v148) & 0xF));
    *(_DWORD *)a3 = v149[656];
    *(_DWORD *)(a3 + 36) = v149[665];
    *(_DWORD *)(a3 + 72) = v149[674];
    *(_DWORD *)(a3 + 108) = v149[683];
    *(_DWORD *)(a3 + 144) = v149[692];
    *(_DWORD *)(a3 + 180) = v149[701];
    *(_DWORD *)(a3 + 216) = v149[710];
    *(_DWORD *)(a3 + 252) = v149[719];
    *(_DWORD *)(a3 + 288) = v149[728];
  }
  if ((a2 & 1) == 0)
    return result;
  v150 = *(unsigned int *)(*(_QWORD *)(a3 + 2920) + 56);
  if (v5[11] <= v150
    && (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))|| *(_BYTE *)(*(_QWORD *)(v5[7] + 8 * ((v5[10] + v150) / 0x1F)) + 132 * ((v5[10] + v150) % 0x1F) + 20)&& (result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
  {
LABEL_431:
    abort();
  }
  *(_DWORD *)a3 = *(_DWORD *)(*(_QWORD *)(v5[18] + (((v5[21] + v150) >> 1) & 0x7FFFFFFFFFFFFFF8))
                            + 2936 * ((*((_DWORD *)v5 + 42) + (_DWORD)v150) & 0xF)
                            + 2912);
  return result;
}

int sub_223A7EC38(unint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  float v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  float v23;
  float v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  int16x4_t v35;
  unsigned int v36;
  float v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  int *v48;
  int *v49;
  int *v50;
  int *v51;
  unsigned int *v52;
  uint64_t v53;
  int *v54;
  double v55;
  double v56;
  unint64_t v57;
  int v58;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  double v64;
  int *v65;
  unsigned int *v66;
  int *v67;
  int v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  _QWORD v72[20];

  if (a1 < a2)
  {
    v72[2] = v13;
    v72[3] = v12;
    v72[4] = v11;
    v72[5] = v10;
    v72[6] = v9;
    v72[7] = v8;
    v72[18] = v6;
    v72[19] = v7;
    v15 = 0;
    v16 = 0;
    v17 = (1 << a2);
    v18 = 1 << a1;
    v19 = 1.0 / (float)v17;
    v20 = (9 << a2);
    v71 = (81 << a2);
    v21 = -1 << a2;
    v60 = 81 * (1 << a1);
    v68 = 9 * (1 << a1);
    v69 = v20;
    v62 = v17;
    do
    {
      v22 = 0;
      v23 = v19 * (float)(v16 - (v16 & v21));
      v24 = 1.0 - v23;
      v61 = v15;
      do
      {
        v25 = 9 * (v22 & v21) + 81 * (v16 & v21);
        if (((v22 | v16) & ~v21) == 0)
        {
          v26 = 0;
          while (2)
          {
            if (((v22 | v16 | v26) & ~v21) == 0)
              goto LABEL_11;
            v32 = (v26 & v21) + v25;
            v33 = a3 + 4 * v32;
            v27 = v33 + 4 * v17;
            if (*(_BYTE *)(v33 + 2))
            {
              if (*(_BYTE *)(v27 + 2))
              {
                v29 = 0;
                v34 = v19 * (float)(v26 - (v26 & v21));
                *(float *)&a6 = (float)((float)((float)(1.0 - v34) * (float)*(unsigned __int8 *)(v33 + 2))
                                      + (float)(v34 * (float)*(unsigned __int8 *)(v27 + 2)))
                              + 0.5;
                LOBYTE(v28) = vcvtms_s32_f32(*(float *)&a6);
                LOWORD(a6) = *(_WORD *)v33;
                v35 = (int16x4_t)vmovl_s16(*(int16x4_t *)&a6).u64[0];
                *(float *)v35.i32 = (float)v35.i32[0];
                *(float *)&a5 = (float)(1.0 - v34) * *(float *)v35.i32;
                v35.i16[0] = *(_WORD *)v27;
                *(_QWORD *)&a6 = vmovl_s16(v35).u64[0];
                *(float *)&a6 = (float)SLODWORD(a6);
                LOWORD(v27) = vcvtms_s32_f32((float)(*(float *)&a5 + (float)(v34 * *(float *)&a6)) + 0.5);
LABEL_10:
                v30 = v29 | (v28 << 16) | (unsigned __int16)v27;
                v31 = a3 + 4 * (v15 + v26);
                *(_DWORD *)v31 = v30;
                *(_BYTE *)(v31 + 3) = *(_BYTE *)(a3 + 4 * v32 + 3);
LABEL_11:
                v26 += v18;
                if (v26 >= 9)
                  goto LABEL_5;
                continue;
              }
              LODWORD(v27) = *(_DWORD *)v33;
            }
            else
            {
              LODWORD(v27) = *(_DWORD *)v27;
            }
            break;
          }
          v28 = WORD1(v27);
          v29 = v27 & 0xFF000000;
          goto LABEL_10;
        }
        v36 = 0;
        *(float *)&a4 = v19 * (float)(v22 - (v22 & v21));
        v70 = a4;
        v37 = 1.0 - *(float *)&a4;
        do
        {
          if (((v36 | v22 | v16) & ~v21) != 0)
          {
            v45 = v36 & v21;
            if (((v36 | v16) & ~v21) == 0)
            {
              v46 = (v45 + v25);
              v47 = (unsigned int *)(a3 + 4 * v46);
              v48 = (int *)&v47[v20];
              if (*((_BYTE *)v47 + 2))
              {
                if (*((_BYTE *)v48 + 2))
                {
                  v40 = 0;
                  a6 = v70;
                  *(float *)&a5 = *(float *)&v70 * (float)*((unsigned __int8 *)v48 + 2);
                  *(float *)&a4 = (float)((float)(v37 * (float)*((unsigned __int8 *)v47 + 2)) + *(float *)&a5) + 0.5;
                  LOBYTE(v39) = vcvtms_s32_f32(*(float *)&a4);
                  LOWORD(a4) = *(_WORD *)v47;
                  *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
                  *(float *)&a4 = v37 * (float)SLODWORD(a4);
                  LOWORD(a5) = *(_WORD *)v48;
                  *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
                  *(float *)&a5 = *(float *)&v70 * (float)SLODWORD(a5);
                  goto LABEL_33;
                }
LABEL_36:
                v38 = *v47;
LABEL_19:
                v39 = HIWORD(v38);
                v40 = v38 & 0xFF000000;
LABEL_20:
                v41 = v40 | (v39 << 16);
                v42 = (unsigned __int16)v38;
LABEL_21:
                v43 = v41 | v42;
                v44 = v15 + v36;
                *(_DWORD *)(a3 + 4 * v44) = v43;
LABEL_22:
                *(_BYTE *)(a3 + 4 * v44 + 3) = *(_BYTE *)(a3 + 4 * v46 + 3);
                goto LABEL_23;
              }
LABEL_18:
              v38 = *v48;
              goto LABEL_19;
            }
            if (((v36 | v22) & v21) == (v36 | v22))
            {
              v46 = (v45 + v25);
              v47 = (unsigned int *)(a3 + 4 * v46);
              v48 = (int *)&v47[v71];
              if (*((_BYTE *)v47 + 2))
              {
                if (!*((_BYTE *)v48 + 2))
                  goto LABEL_36;
                v40 = 0;
                *(float *)&a5 = v23 * (float)*((unsigned __int8 *)v48 + 2);
                *(float *)&a4 = (float)((float)(v24 * (float)*((unsigned __int8 *)v47 + 2)) + *(float *)&a5) + 0.5;
                LOBYTE(v39) = vcvtms_s32_f32(*(float *)&a4);
                LOWORD(a4) = *(_WORD *)v47;
                *(_QWORD *)&a4 = vmovl_s16(*(int16x4_t *)&a4).u64[0];
                *(float *)&a4 = v24 * (float)SLODWORD(a4);
                LOWORD(a5) = *(_WORD *)v48;
                *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
                *(float *)&a5 = v23 * (float)SLODWORD(a5);
LABEL_33:
                LOWORD(v38) = vcvtms_s32_f32((float)(*(float *)&a4 + *(float *)&a5) + 0.5);
                goto LABEL_20;
              }
              goto LABEL_18;
            }
            if (v36 == v45)
            {
              v46 = v25 + v36;
              v49 = (int *)(a3 + 4 * v46);
              v50 = &v49[v20];
              v51 = &v49[v71];
              v52 = (unsigned int *)&v51[v20];
              a4 = v70;
              LODWORD(v72[0]) = LODWORD(v70);
              goto LABEL_39;
            }
            *(float *)&a4 = (float)(v36 - v45);
            *(float *)&a5 = v19 * *(float *)&a4;
            v46 = (v45 + v25);
            v49 = (int *)(a3 + 4 * v46);
            v50 = &v49[v17];
            if (v22 == (v22 & v21))
            {
              v51 = &v49[v71];
              v52 = (unsigned int *)&v51[v17];
              *(float *)v72 = v19 * *(float *)&a4;
LABEL_39:
              *((float *)v72 + 1) = v19 * (float)(v16 - (v16 & v21));
            }
            else
            {
              v51 = &v49[v20];
              v52 = (unsigned int *)&v51[v17];
              if (v16 != (v16 & v21))
              {
                v53 = v17;
                v54 = &v49[v71];
                v53 *= 4;
                v67 = (int *)((char *)v54 + v53);
                v65 = &v54[v20];
                v66 = (unsigned int *)((char *)v65 + v53);
                HIDWORD(a5) = LODWORD(v70);
                v64 = a5;
                *(double *)v72 = a5;
                v63 = sub_223A8DD84(v49, v50, v51, v52, (float *)v72, v70, a5, a6);
                *(double *)v72 = v64;
                a1 = sub_223A8DD84(v54, v67, v65, v66, (float *)v72, v64, v55, v56);
                v57 = a1 >> 16;
                if (BYTE2(v63))
                {
                  if (BYTE2(a1))
                  {
                    v58 = 0;
                    LOBYTE(v57) = vcvtms_s32_f32((float)((float)(v24 * (float)BYTE2(v63))
                                                       + (float)(v23 * (float)BYTE2(a1))) + 0.5);
                    *(float *)&a5 = v23 * (float)(__int16)a1;
                    LODWORD(a1) = vcvtms_s32_f32((float)(*(float *)&a5 + (float)(v24 * (float)(__int16)v63)) + 0.5);
                  }
                  else
                  {
                    v58 = v63 & 0xFF000000;
                    v57 = v63 >> 16;
                    LODWORD(a1) = v63;
                  }
                }
                else
                {
                  v58 = a1 & 0xFF000000;
                }
                v17 = v62;
                v20 = v69;
                v41 = v58 | (v57 << 16);
                v42 = (unsigned __int16)a1;
                goto LABEL_21;
              }
              a4 = v70;
              v72[0] = __PAIR64__(LODWORD(v70), LODWORD(a5));
            }
            LODWORD(a1) = sub_223A8DD84(v49, v50, v51, v52, (float *)v72, a4, a5, a6);
            v20 = v69;
            v44 = v15 + v36;
            *(_DWORD *)(a3 + 4 * v44) = a1;
            goto LABEL_22;
          }
LABEL_23:
          v36 += v18;
        }
        while (v36 < 9);
LABEL_5:
        v22 += v18;
        v15 += v68;
      }
      while (v22 < 9);
      v16 += v18;
      v15 = v61 + v60;
    }
    while (v16 < 9);
  }
  return a1;
}

unsigned __int8 *sub_223A7F14C(unsigned __int8 *result, unsigned int a2, uint64_t a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8, float a9, float a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  unsigned int v18;
  int v19;
  float v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int i;
  unsigned __int8 *v25;
  __int8 v26;
  __int8 v27;
  uint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  float v32;
  __int8 v33;
  __int16 v34;
  __int8 v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  float32x4_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  float v45;
  float v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  float32x4_t v50;
  unsigned int v51;
  unsigned int v52;
  float v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  float32x4_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float32x2_t v65;
  float v66;
  __int16 v67;
  char v68;
  __int32 v69;
  char v70;
  __int32 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  if (result < a2)
  {
    v72 = v15;
    v73 = v14;
    v74 = v13;
    v75 = v12;
    v76 = v10;
    v77 = v11;
    v17 = 0;
    v18 = 0;
    v19 = 1 << (char)result;
    v20 = 1.0 / (float)(1 << a2);
    v63 = (9 << a2);
    v64 = (1 << a2);
    v62 = (81 << a2);
    v21 = -1 << a2;
    v59 = 81 * (1 << (char)result);
    v61 = 9 * (1 << (char)result);
    do
    {
      v22 = 0;
      v60 = v17;
      do
      {
        v23 = 9 * (v22 & v21) + 81 * (v18 & v21);
        if (((v22 | v18) & ~v21) != 0)
        {
          v29 = 0;
          while (2)
          {
            if (((v29 | v22 | v18) & ~v21) == 0)
              goto LABEL_15;
            v37 = v29 & v21;
            if (((v29 | v18) & ~v21) == 0)
            {
              v30 = (unsigned __int8 *)(a3 + 4 * (v37 + v23));
              v31 = &v30[4 * v63];
              v32 = v20 * (float)(v22 - (v22 & v21));
              goto LABEL_13;
            }
            if (((v29 | v22) & v21) == (v29 | v22))
            {
              v30 = (unsigned __int8 *)(a3 + 4 * (v37 + v23));
              v31 = &v30[4 * v62];
              v32 = v20 * (float)(v18 - (v18 & v21));
LABEL_13:
              result = sub_223A33B94(v30, v31, (uint64_t)&v65, v32, a7, a8.u32[0], LODWORD(a9));
              v33 = v65.i8[2];
              BYTE2(v69) = v65.i8[2];
              v34 = v65.i16[0];
              LOWORD(v69) = v65.i16[0];
              v35 = v65.i8[3];
LABEL_14:
              v36 = a3 + 4 * (v17 + v29);
              *(_WORD *)v36 = v34;
              *(_BYTE *)(v36 + 2) = v33;
              *(_BYTE *)(v36 + 3) = v35;
LABEL_15:
              v29 += v19;
              if (v29 >= 9)
                goto LABEL_5;
              continue;
            }
            break;
          }
          if (v29 == v37)
          {
            v38 = (unsigned __int8 *)(a3 + 4 * (v23 + v29));
            v39 = &v38[4 * v62];
            sub_223A33B94(v38, &v38[4 * v63], (uint64_t)&v69, v20 * (float)(v22 - (v22 & v21)), a7, a8.u32[0], LODWORD(a9));
            v65.i32[0] = v69;
            v65.i8[4] = 1;
            v43 = v39;
            v44 = &v39[4 * v63];
            v45 = v20 * (float)(v22 - (v22 & v21));
            goto LABEL_24;
          }
          a4.f32[0] = (float)(v29 - v37);
          v46 = v20 * a4.f32[0];
          v47 = (unsigned __int8 *)(a3 + 4 * (v37 + v23));
          v48 = &v47[4 * v64];
          if (v22 == (v22 & v21))
          {
            v49 = &v47[4 * v62];
            sub_223A33B94(v47, v48, (uint64_t)&v69, v20 * a4.f32[0], a7, a8.u32[0], LODWORD(a9));
            v65.i32[0] = v69;
            v65.i8[4] = 1;
            v43 = v49;
            v44 = &v49[4 * v64];
            v45 = v46;
LABEL_24:
            sub_223A33B94(v43, v44, (uint64_t)&v71, v45, v40, v41, v42);
            v69 = v71;
            v70 = 1;
            v53 = v20 * (float)(v18 - (v18 & v21));
          }
          else
          {
            v54 = &v47[4 * v63];
            v55 = &v54[4 * v64];
            if (v18 != (v18 & v21))
            {
              v65.f32[0] = v20 * a4.f32[0];
              v65.f32[1] = v20 * (float)(v22 - (v22 & v21));
              v66 = v20 * (float)(v18 - (v18 & v21));
              result = sub_223A8E1DC(v47, v48, &v47[4 * v63], v55, &v47[4 * v62], &v47[4 * v62 + 4 * v64], &v47[4 * v62 + 4 * v63], &v47[4 * v62 + 4 * v63 + 4 * v64], &v69, a4, a6, a7, a8, LODWORD(a9), LODWORD(a10), &v65);
              *(_DWORD *)(a3 + 4 * (v17 + v29)) = v69;
              goto LABEL_15;
            }
            sub_223A33B94(v47, v48, (uint64_t)&v69, v20 * a4.f32[0], a7, a8.u32[0], LODWORD(a9));
            v65.i32[0] = v69;
            v65.i8[4] = 1;
            sub_223A33B94(v54, v55, (uint64_t)&v71, v46, v56, v57, v58);
            v69 = v71;
            v70 = 1;
            v53 = v20 * (float)(v22 - (v22 & v21));
          }
          result = sub_223A33B94((unsigned __int8 *)&v65, (unsigned __int8 *)&v69, (uint64_t)&v71, v53, v50, v51, v52);
          v33 = BYTE2(v71);
          v68 = BYTE2(v71);
          v34 = v71;
          v67 = v71;
          v35 = HIBYTE(v71);
          goto LABEL_14;
        }
        for (i = 0; i < 9; i += v19)
        {
          if (((v22 | v18 | i) & ~v21) != 0)
          {
            v25 = (unsigned __int8 *)(a3 + 4 * ((i & v21) + v23));
            result = sub_223A33B94(v25, &v25[4 * v64], (uint64_t)&v65, v20 * (float)(i - (i & v21)), a7, a8.u32[0], LODWORD(a9));
            v26 = v65.i8[2];
            BYTE2(v69) = v65.i8[2];
            LOWORD(v69) = v65.i16[0];
            v27 = v65.i8[3];
            v28 = a3 + 4 * (v17 + i);
            *(_WORD *)v28 = v65.i16[0];
            *(_BYTE *)(v28 + 2) = v26;
            *(_BYTE *)(v28 + 3) = v27;
          }
        }
LABEL_5:
        v22 += v19;
        v17 += v61;
      }
      while (v22 < 9);
      v18 += v19;
      v17 = v60 + v59;
    }
    while (v18 < 9);
  }
  return result;
}

void sub_223A7F534(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  _WORD *v27;
  _WORD *v28;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  _WORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  int v63;
  __int16 v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;

  v8 = 0;
  v9 = a4 + 2;
  while ((*(char *)(a1 + 3 * v8) & 0x80000000) == 0)
  {
    v18 = *a3;
    v19 = a4[29];
    _X9 = a4[26];
    v20 = a4[27];
    v17 = *(unsigned __int16 *)(a2 + 2 * *(unsigned __int8 *)(a1 + 3 * v8));
    if (!*(_BYTE *)(*a3 + 4 * v17))
    {
      v14 = 0;
      __asm { PRFM            #4, [X9] }
      v33 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v17) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                    - 0x622015F714C7D297 * v17) >> 32);
      v15 = (v33 >> 7) ^ 0x13701D;
      v34 = 0x101010101010101 * (v33 & 0x7F);
      while (1)
      {
        v10 = v15 & v19;
        v11 = *(_QWORD *)(_X9 + v10);
        v12 = ((v11 ^ v34) - 0x101010101010101) & ~(v11 ^ v34) & 0x8080808080808080;
        if (v12)
          break;
LABEL_5:
        if ((v11 & (~v11 << 6) & 0x8080808080808080) != 0)
          goto LABEL_40;
        v14 += 8;
        v15 = v14 + v10;
      }
      while (1)
      {
        v13 = (v10 + (__clz(__rbit64(v12)) >> 3)) & v19;
        if (*(unsigned __int16 *)(v20 + 4 * v13) == (_DWORD)v17)
          break;
        v12 &= v12 - 1;
        if (!v12)
          goto LABEL_5;
      }
      if (!_X9)
        goto LABEL_40;
      v16 = *(unsigned __int16 *)(v20 + 4 * v13 + 2);
      if (v16 == 0xFFFF)
        goto LABEL_40;
      LODWORD(v17) = v16 | 0x8000;
    }
    v22 = 3 * v8 + a1;
    v23 = *(unsigned __int16 *)(a2 + 2 * *(unsigned __int8 *)(v22 + 1));
    if (*(_BYTE *)(v18 + 4 * v23))
    {
      v24 = *(unsigned __int16 *)(a2 + 2 * *(unsigned __int8 *)(v22 + 2));
      if (*(_BYTE *)(v18 + 4 * v24))
        goto LABEL_14;
LABEL_31:
      v45 = 0;
      __asm { PRFM            #4, [X9] }
      v47 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v24) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                    - 0x622015F714C7D297 * v24) >> 32);
      v48 = (v47 >> 7) ^ 0x13701D;
      v49 = 0x101010101010101 * (v47 & 0x7F);
      while (1)
      {
        v50 = v48 & v19;
        v51 = *(_QWORD *)(_X9 + v50);
        v52 = ((v51 ^ v49) - 0x101010101010101) & ~(v51 ^ v49) & 0x8080808080808080;
        if (v52)
          break;
LABEL_35:
        if ((v51 & (~v51 << 6) & 0x8080808080808080) != 0)
          goto LABEL_40;
        v45 += 8;
        v48 = v45 + v50;
      }
      while (1)
      {
        v53 = (v50 + (__clz(__rbit64(v52)) >> 3)) & v19;
        if (*(unsigned __int16 *)(v20 + 4 * v53) == (_DWORD)v24)
          break;
        v52 &= v52 - 1;
        if (!v52)
          goto LABEL_35;
      }
      if (!_X9)
        goto LABEL_40;
      v54 = *(unsigned __int16 *)(v20 + 4 * v53 + 2);
      if (v54 == 0xFFFF)
        goto LABEL_40;
      LODWORD(v24) = v54 | 0x8000;
      if ((_DWORD)v17 == (_DWORD)v23)
        goto LABEL_40;
LABEL_15:
      if ((_DWORD)v17 == (_DWORD)v24 || (_DWORD)v23 == (_DWORD)v24)
        goto LABEL_40;
      v27 = (_WORD *)a4[3];
      v26 = a4[4];
      if ((unint64_t)v27 >= v26)
      {
        v68 = a3;
        v55 = (_WORD *)*v9;
        v56 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - *v9) >> 1);
        v57 = v56 + 1;
        if (v56 + 1 > 0x2AAAAAAAAAAAAAAALL)
          sub_22316E078();
        v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)v55) >> 1);
        if (2 * v58 > v57)
          v57 = 2 * v58;
        if (v58 >= 0x1555555555555555)
          v59 = 0x2AAAAAAAAAAAAAAALL;
        else
          v59 = v57;
        v67 = v59;
        if (v59)
        {
          v66 = v9;
          if (v59 > 0x2AAAAAAAAAAAAAAALL)
            sub_223174E94();
          v60 = (char *)operator new(6 * v59);
          v9 = v66;
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[6 * v56];
        *(_WORD *)v61 = v24;
        *((_WORD *)v61 + 1) = v23;
        *((_WORD *)v61 + 2) = v17;
        v62 = v61;
        if (v27 != v55)
        {
          do
          {
            v63 = *(_DWORD *)(v27 - 3);
            v27 -= 3;
            v64 = v27[2];
            *(_DWORD *)(v62 - 6) = v63;
            v62 -= 6;
            *((_WORD *)v62 + 2) = v64;
          }
          while (v27 != v55);
          v27 = (_WORD *)*v9;
        }
        a3 = v68;
        v28 = v61 + 6;
        a4[2] = v62;
        a4[3] = v61 + 6;
        a4[4] = &v60[6 * v67];
        if (v27)
        {
          v65 = v9;
          operator delete(v27);
          v9 = v65;
        }
      }
      else
      {
        *v27 = v24;
        v27[1] = v23;
        v28 = v27 + 3;
        v27[2] = v17;
      }
      a4[3] = v28;
      if (++v8 == 5)
        return;
    }
    else
    {
      v35 = 0;
      __asm { PRFM            #4, [X9] }
      v37 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v23) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                    - 0x622015F714C7D297 * v23) >> 32);
      v38 = (v37 >> 7) ^ 0x13701D;
      v39 = 0x101010101010101 * (v37 & 0x7F);
      while (1)
      {
        v40 = v38 & v19;
        v41 = *(_QWORD *)(_X9 + v40);
        v42 = ((v41 ^ v39) - 0x101010101010101) & ~(v41 ^ v39) & 0x8080808080808080;
        if (v42)
          break;
LABEL_26:
        if ((v41 & (~v41 << 6) & 0x8080808080808080) != 0)
          goto LABEL_40;
        v35 += 8;
        v38 = v35 + v40;
      }
      while (1)
      {
        v43 = (v40 + (__clz(__rbit64(v42)) >> 3)) & v19;
        if (*(unsigned __int16 *)(v20 + 4 * v43) == (_DWORD)v23)
          break;
        v42 &= v42 - 1;
        if (!v42)
          goto LABEL_26;
      }
      if (!_X9)
        goto LABEL_40;
      v44 = *(unsigned __int16 *)(v20 + 4 * v43 + 2);
      if (v44 == 0xFFFF)
        goto LABEL_40;
      LODWORD(v23) = v44 | 0x8000;
      v24 = *(unsigned __int16 *)(a2 + 2 * *(unsigned __int8 *)(v22 + 2));
      if (!*(_BYTE *)(v18 + 4 * v24))
        goto LABEL_31;
LABEL_14:
      if ((_DWORD)v17 != (_DWORD)v23)
        goto LABEL_15;
LABEL_40:
      if (++v8 == 5)
        return;
    }
  }
}

void sub_223A7F9C8(uint64_t a1, int *a2, unsigned int a3, _QWORD *a4, _QWORD *a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _WORD v42[12];
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = 9 * v8;
  v11 = 9 * v8 + *a2;
  v12 = 81 * v9;
  v13 = (v11 + 81 * v9);
  if (a3)
  {
    if (*(_BYTE *)(a1 + 4 * v13 + 2))
    {
      v14 = (1 << a3);
      v15 = v7 + v14;
      v16 = v10 + v7 + v14;
      v17 = (v16 + v12);
      if (*(_BYTE *)(a1 + 4 * v17 + 2))
      {
        v18 = 9 * (v8 + v14);
        v19 = v18 + v15;
        v20 = (v18 + v15 + v12);
        if (*(_BYTE *)(a1 + 4 * v20 + 2))
        {
          v21 = v18 + v7;
          v22 = (v18 + v7 + v12);
          if (*(_BYTE *)(a1 + 4 * v22 + 2))
          {
            v23 = 81 * (v9 + v14);
            v24 = (v23 + v11);
            if (*(_BYTE *)(a1 + 4 * v24 + 2))
            {
              v25 = (v23 + v16);
              if (*(_BYTE *)(a1 + 4 * v25 + 2))
              {
                v26 = (v19 + v23);
                if (*(_BYTE *)(a1 + 4 * v26 + 2))
                {
                  v27 = (v21 + v23);
                  if (*(_BYTE *)(a1 + 4 * v27 + 2))
                  {
                    v28 = (*(unsigned __int16 *)(a1 + 4 * v17) >> 14) & 2;
                    v29 = (*(unsigned __int16 *)(a1 + 4 * v25) >> 10) & 0x20 | (*(unsigned __int16 *)(a1 + 4 * v26) >> 9) & 0x40 | (*(unsigned __int16 *)(a1 + 4 * v24) >> 11) & 0x10 | (*(unsigned __int16 *)(a1 + 4 * v22) >> 12) & 8 | (*(unsigned __int16 *)(a1 + 4 * v20) >> 13) & 4 | (*(unsigned __int16 *)(a1 + 4 * v13) >> 15);
                    goto LABEL_20;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 4 * v13 + 2))
  {
    v30 = v10 + v7 + 1;
    v31 = (v30 + v12);
    if (*(_BYTE *)(a1 + 4 * v31 + 2))
    {
      v32 = v10 + 9;
      v33 = v10 + 9 + v7 + 1;
      v34 = (v33 + v12);
      if (*(_BYTE *)(a1 + 4 * v34 + 2))
      {
        v35 = v32 + v7;
        v36 = (v35 + v12);
        if (*(_BYTE *)(a1 + 4 * v36 + 2))
        {
          v37 = v12 + 81;
          v38 = (v12 + 81 + v11);
          if (*(_BYTE *)(a1 + 4 * v38 + 2))
          {
            v39 = (v37 + v30);
            if (*(_BYTE *)(a1 + 4 * v39 + 2))
            {
              v40 = (v33 + v37);
              if (*(_BYTE *)(a1 + 4 * v40 + 2))
              {
                v27 = (v35 + v37);
                if (*(_BYTE *)(a1 + 4 * v27 + 2))
                {
                  v29 = (*(unsigned __int16 *)(a1 + 4 * v31) >> 14) & 2 | (*(unsigned __int16 *)(a1 + 4 * v13) >> 15) | (*(unsigned __int16 *)(a1 + 4 * v34) >> 13) & 4 | (*(unsigned __int16 *)(a1 + 4 * v36) >> 12) & 8 | (*(unsigned __int16 *)(a1 + 4 * v38) >> 11) & 0x10;
                  v28 = (*(unsigned __int16 *)(a1 + 4 * v39) >> 10) & 0x20 | (*(unsigned __int16 *)(a1 + 4 * v40) >> 9) & 0x40;
LABEL_20:
                  v41 = *(_BYTE *)(a1 + 4 * v27 + 1) & 0x80u | (unsigned __int16)(v29 | v28);
                  if (word_22465CE24[v41])
                  {
                    v43 = xmmword_22465D024[v41];
                    sub_223A3975C((uint64_t)a4, a2, a3, v42);
                    sub_223A7F534((uint64_t)&v43, (uint64_t)v42, a4, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_223A7FCCC(uint64_t a1, int *a2, _BYTE *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[24];
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v8 = a2[1];
  v9 = a2[2];
  v10 = v9;
  v57 = *a2;
  v7 = v57;
  v58 = v8;
  v59 = v9;
  v11 = v9;
  v12 = v8;
  v13 = v57;
  if (*a3)
  {
    v14 = -(unsigned __int16)(1 << *a3);
    v13 = v57 & v14;
    v12 = v8 & v14;
    v11 = v9 & v14;
    v57 = v13;
    v58 = v12;
    v59 = v11;
  }
  v15 = (v13 + 81 * v11 + 9 * v12);
  if (*(_BYTE *)(a1 + 4 * v15 + 2))
  {
    v16 = *(unsigned __int16 *)(a1 + 4 * v15);
    v17 = v7 + 1;
    v60 = v7 + 1;
    v61 = v8;
    v62 = v9;
    v18 = v9;
    v19 = v8;
    v20 = v7 + 1;
    if (a3[1])
    {
      v21 = -(unsigned __int16)(1 << a3[1]);
      v20 = v17 & v21;
      v19 = v8 & v21;
      v18 = v9 & v21;
      v60 = v20;
      v61 = v19;
      v62 = v18;
    }
    v22 = (v20 + 81 * v18 + 9 * v19);
    if (*(_BYTE *)(a1 + 4 * v22 + 2))
    {
      v23 = *(unsigned __int16 *)(a1 + 4 * v22);
      v24 = v8 + 1;
      v63 = v7 + 1;
      v64 = v8 + 1;
      v65 = v9;
      v25 = v9;
      v26 = v8 + 1;
      v27 = v7 + 1;
      if (a3[2])
      {
        v28 = -(unsigned __int16)(1 << a3[2]);
        v27 = v17 & v28;
        v26 = v24 & v28;
        v25 = v9 & v28;
        v63 = v27;
        v64 = v26;
        v65 = v25;
      }
      v29 = (v27 + 81 * v25 + 9 * v26);
      if (*(_BYTE *)(a1 + 4 * v29 + 2))
      {
        v30 = *(unsigned __int16 *)(a1 + 4 * v29);
        v66 = v7;
        v67 = v8 + 1;
        v68 = v9;
        v31 = v8 + 1;
        v32 = v7;
        if (a3[3])
        {
          v33 = -(unsigned __int16)(1 << a3[3]);
          v32 = v7 & v33;
          v31 = v24 & v33;
          v10 = v9 & v33;
          v66 = v32;
          v67 = v31;
          v68 = v10;
        }
        v34 = (v32 + 81 * v10 + 9 * v31);
        if (*(_BYTE *)(a1 + 4 * v34 + 2))
        {
          v35 = *(unsigned __int16 *)(a1 + 4 * v34);
          v36 = v9 + 1;
          v69 = v7;
          v70 = v8;
          v71 = v36;
          v37 = v36;
          v38 = v8;
          v39 = v7;
          if (a3[4])
          {
            v40 = -(unsigned __int16)(1 << a3[4]);
            v39 = v7 & v40;
            v38 = v8 & v40;
            v37 = v36 & v40;
            v69 = v39;
            v70 = v38;
            v71 = v37;
          }
          v41 = (v39 + 81 * v37 + 9 * v38);
          if (*(_BYTE *)(a1 + 4 * v41 + 2))
          {
            v42 = *(unsigned __int16 *)(a1 + 4 * v41);
            v72 = v7 + 1;
            v73 = v8;
            v74 = v36;
            v43 = v36;
            v44 = v7 + 1;
            if (a3[5])
            {
              v45 = -(unsigned __int16)(1 << a3[5]);
              v44 = v17 & v45;
              v8 &= v45;
              v43 = v36 & v45;
              v72 = v44;
              v73 = v8;
              v74 = v43;
            }
            v46 = (v44 + 81 * v43 + 9 * v8);
            if (*(_BYTE *)(a1 + 4 * v46 + 2))
            {
              v47 = *(unsigned __int16 *)(a1 + 4 * v46);
              v75 = v7 + 1;
              v76 = v24;
              v77 = v36;
              v48 = v36;
              v49 = v24;
              if (a3[6])
              {
                v50 = -(unsigned __int16)(1 << a3[6]);
                v17 &= v50;
                v49 = v24 & v50;
                v48 = v36 & v50;
                v75 = v17;
                v76 = v49;
                v77 = v48;
              }
              v51 = (v17 + 81 * v48 + 9 * v49);
              if (*(_BYTE *)(a1 + 4 * v51 + 2))
              {
                v52 = *(unsigned __int16 *)(a1 + 4 * v51);
                v78 = v7;
                v79 = v24;
                v80 = v36;
                if (a3[7])
                {
                  v53 = -(unsigned __int16)(1 << a3[7]);
                  v7 &= v53;
                  v24 &= v53;
                  v36 &= v53;
                  v78 = v7;
                  v79 = v24;
                  v80 = v36;
                }
                v54 = (v7 + 81 * v36 + 9 * v24);
                if (*(_BYTE *)(a1 + 4 * v54 + 2))
                {
                  v55 = (v23 >> 14) & 2 | (v16 >> 15) | (v30 >> 13) & 4 | (v35 >> 12) & 8 | (v42 >> 11) & 0x10 | (v47 >> 10) & 0x20 | (v52 >> 9) & 0x40 | *(_BYTE *)(a1 + 4 * v54 + 1) & 0x80;
                  if (word_22465CE24[v55])
                  {
                    v81 = xmmword_22465D024[v55];
                    sub_223A39838(a4, (uint64_t)&v57, (uint64_t)v56);
                    sub_223A7F534((uint64_t)&v81, (uint64_t)v56, a4, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

BOOL sub_223A800DC(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6, _QWORD *a7, float32x4_t a8, float32x4_t a9, float32x4_t _Q2, float32x4_t _Q3, float32x4_t a12, float32x2_t a13, float32x2_t a14, float32x2_t a15)
{
  float v15;
  unsigned int v16;
  float v17;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  float v37;
  float v38;
  float v39;
  float32x2_t v40;
  int32x2_t *v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x2_t v44;
  float32x4_t v45;
  unint64_t v46;
  float32x2_t v47;
  double v48;
  unsigned __int8 v51;
  int16x4_t v52;
  _BYTE *v53;
  float v54;
  float v55;
  float v56;
  float32x2_t v57;
  float32x4_t v58;
  int32x2_t *v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x2_t v62;
  float32x4_t v63;
  unint64_t v64;
  float32x2_t v65;
  double v66;
  unsigned __int8 v69;
  int16x4_t v70;
  _BYTE *v71;
  float v72;
  float v73;
  float v74;
  float32x4_t v75;
  int32x2_t *v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x2_t v80;
  int32x4_t v81;
  unint64_t v82;
  float32x2_t v83;
  double v84;
  unsigned __int8 v87;
  int32x2_t v88;
  int32x2_t v89;
  float v93;
  int32x2_t v94;
  int32x2_t v95;
  float v96;
  float v99;
  unsigned int i6;
  unint64_t v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  BOOL v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  BOOL v119;
  float v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  __int16 v129;
  int v130;
  uint64_t v131;
  _BYTE *v132;
  float v133;
  float v134;
  float32x4_t v135;
  int32x2_t *v136;
  float32x4_t v137;
  int8x16_t v138;
  float32x2_t v139;
  float32x4_t v140;
  unint64_t v141;
  float32x2_t v142;
  double v143;
  BOOL v144;
  BOOL v145;
  int v146;
  unsigned __int8 *v147;
  unsigned __int8 v148;
  uint64_t v149;
  uint64_t i;
  unsigned __int8 v151;
  uint64_t v152;
  _BYTE *v153;
  float v154;
  float v155;
  float32x4_t v156;
  int32x2_t *v157;
  float32x4_t v158;
  int8x16_t v159;
  float32x2_t v160;
  float32x4_t v161;
  unint64_t v162;
  float32x2_t v163;
  double v164;
  unsigned __int8 *v167;
  unsigned __int8 v168;
  uint64_t v169;
  uint64_t j;
  unsigned __int8 v171;
  uint64_t v172;
  _BYTE *v173;
  float v174;
  float v175;
  float32x4_t v176;
  int32x2_t *v177;
  float32x4_t v178;
  int8x16_t v179;
  float32x2_t v180;
  float32x4_t v181;
  unint64_t v182;
  float32x2_t v183;
  double v184;
  unsigned __int8 *v187;
  unsigned __int8 v188;
  uint64_t v189;
  uint64_t k;
  unsigned __int8 v191;
  uint64_t v192;
  _BYTE *v193;
  float v194;
  float v195;
  float32x4_t v196;
  int32x2_t *v197;
  float32x4_t v198;
  int8x16_t v199;
  float32x4_t v200;
  float32x2_t v201;
  unint64_t v202;
  float32x2_t v203;
  double v204;
  unsigned __int8 *v207;
  unsigned __int8 v208;
  uint64_t v209;
  uint64_t m;
  unsigned __int8 v211;
  uint64_t v212;
  _BYTE *v213;
  float v214;
  float v215;
  float32x4_t v216;
  int32x2_t *v217;
  float32x4_t v218;
  int8x16_t v219;
  float32x2_t v220;
  float32x4_t v221;
  unint64_t v222;
  float32x2_t v223;
  double v224;
  unsigned __int8 *v227;
  unsigned __int8 v228;
  uint64_t v229;
  uint64_t n;
  unsigned __int8 v231;
  unsigned int v232;
  int v233;
  uint64_t v234;
  _BYTE *v235;
  float v236;
  float v237;
  float32x4_t v238;
  int32x2_t *v239;
  float32x4_t v240;
  int8x16_t v241;
  float32x2_t v242;
  float32x4_t v243;
  unint64_t v244;
  float32x2_t v245;
  double v246;
  unsigned __int8 *v249;
  unsigned __int8 v250;
  uint64_t v251;
  uint64_t ii;
  unsigned __int8 v253;
  uint64_t v254;
  _BYTE *v255;
  float v256;
  float v257;
  float32x4_t v258;
  int32x2_t *v259;
  float32x4_t v260;
  int8x16_t v261;
  float32x2_t v262;
  float32x4_t v263;
  unint64_t v264;
  float32x2_t v265;
  double v266;
  unsigned __int8 *v269;
  unsigned __int8 v270;
  uint64_t v271;
  uint64_t jj;
  unsigned __int8 v273;
  uint64_t v274;
  _BYTE *v275;
  float v276;
  float v277;
  float32x4_t v278;
  int32x2_t *v279;
  float32x4_t v280;
  int8x16_t v281;
  float32x4_t v282;
  float32x2_t v283;
  unint64_t v284;
  float32x2_t v285;
  double v286;
  unsigned __int8 *v289;
  unsigned __int8 v290;
  uint64_t v291;
  uint64_t kk;
  unsigned __int8 v293;
  uint64_t v294;
  float v295;
  float v296;
  float32x4_t v297;
  int32x2_t *v298;
  float32x4_t v299;
  int8x16_t v300;
  _BYTE *v301;
  float32x2_t v302;
  float32x4_t v303;
  unint64_t v304;
  float32x2_t v305;
  double v306;
  unsigned __int8 *v309;
  unsigned __int8 v310;
  uint64_t v311;
  uint64_t mm;
  unsigned __int8 v313;
  unsigned int v314;
  uint64_t v315;
  _BYTE *v316;
  float v317;
  float v318;
  float32x4_t v319;
  int32x2_t *v320;
  float32x4_t v321;
  int8x16_t v322;
  float32x2_t v323;
  float32x4_t v324;
  unint64_t v325;
  float32x2_t v326;
  double v327;
  unsigned __int8 *v330;
  unsigned __int8 v331;
  uint64_t v332;
  uint64_t nn;
  unsigned __int8 v334;
  int16x4_t v335;
  uint64_t v336;
  _BYTE *v337;
  float v338;
  float v339;
  float32x4_t v340;
  int32x2_t *v341;
  float32x4_t v342;
  int8x16_t v343;
  float32x2_t v344;
  float32x4_t v345;
  unint64_t v346;
  float32x2_t v347;
  double v348;
  unsigned __int8 *v351;
  unsigned __int8 v352;
  uint64_t v353;
  uint64_t i1;
  unsigned __int8 v355;
  int16x4_t v356;
  uint64_t v357;
  _BYTE *v358;
  float v359;
  float v360;
  float32x4_t v361;
  int32x2_t *v362;
  float32x4_t v363;
  int8x16_t v364;
  float32x4_t v365;
  float32x2_t v366;
  unint64_t v367;
  float32x2_t v368;
  double v369;
  unsigned __int8 *v372;
  unsigned __int8 v373;
  uint64_t v374;
  uint64_t i2;
  unsigned __int8 v376;
  unint64_t v377;
  uint64_t v378;
  _BYTE *v379;
  float v380;
  float v381;
  float32x4_t v382;
  int32x2_t *v383;
  float32x4_t v384;
  int8x16_t v385;
  float32x2_t v386;
  float32x4_t v387;
  unint64_t v388;
  float32x2_t v389;
  double v390;
  unsigned __int8 v393;
  int16x4_t v394;
  uint64_t v395;
  _BYTE *v396;
  float v397;
  float v398;
  float32x4_t v399;
  int32x2_t *v400;
  float32x4_t v401;
  int8x16_t v402;
  float32x2_t v403;
  float32x4_t v404;
  unint64_t v405;
  float32x2_t v406;
  double v407;
  unsigned __int8 v410;
  int16x4_t v411;
  uint64_t v412;
  _BYTE *v413;
  float v414;
  float v415;
  float32x4_t v416;
  float32x4_t v417;
  int32x2_t *v418;
  float32x4_t v419;
  int8x16_t v420;
  float32x4_t v421;
  float32x2_t v422;
  unint64_t v423;
  float32x2_t v424;
  double v425;
  unsigned __int8 v428;
  uint64_t v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  int v433;
  int v434;
  uint64_t v435;
  _BYTE *v436;
  float v437;
  float v438;
  float32x4_t v439;
  int32x2_t *v440;
  float32x4_t v441;
  int8x16_t v442;
  float32x2_t v443;
  float32x4_t v444;
  unint64_t v445;
  float32x2_t v446;
  double v447;
  BOOL v448;
  BOOL v449;
  int v450;
  unsigned __int8 *v451;
  unsigned __int8 v452;
  uint64_t v453;
  uint64_t i3;
  unsigned __int8 v455;
  int16x4_t v456;
  unsigned int v457;
  unsigned int v458;
  unsigned int v459;
  uint64_t v460;
  _BYTE *v461;
  float v462;
  float v463;
  float32x4_t v464;
  int32x2_t *v465;
  float32x4_t v466;
  int8x16_t v467;
  float32x2_t v468;
  float32x4_t v469;
  unint64_t v470;
  float32x2_t v471;
  double v472;
  unsigned __int8 *v475;
  unsigned __int8 v476;
  uint64_t v477;
  uint64_t i4;
  unsigned __int8 v479;
  int16x4_t v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  uint64_t v484;
  _BYTE *v485;
  float v486;
  float v487;
  float32x4_t v488;
  int32x2_t *v489;
  float32x4_t v490;
  int8x16_t v491;
  float32x4_t v492;
  float32x2_t v493;
  unint64_t v494;
  float32x2_t v495;
  double v496;
  unsigned __int8 v499;
  uint64_t v500;
  uint64_t i5;
  unsigned __int8 v502;
  uint64_t v503;
  int v504;
  uint64_t v505;
  int32x2_t v506;
  float v507;
  int32x2_t v508;
  float v509;
  int32x2_t v510;
  float v511;
  int32x2_t v512;
  float v513;
  int32x2_t v514;
  float v515;
  int32x2_t v516;
  float v517;
  int32x2_t v518;
  float v519;
  int32x2_t v520;
  float v521;
  int32x2_t v522;
  float v523;
  int32x2_t v524;
  float v525;
  int32x2_t v526;
  float v527;
  int32x2_t v528;
  float v529;
  int32x2_t v530;
  float v531;
  int32x2_t v532;
  float v533;
  int32x2_t v534;
  float v535;
  int32x2_t v536;
  float v537;
  int32x2_t v538;
  float v539;
  int32x2_t v540;
  float v541;
  unint64_t v597;
  char v598;
  float v599;
  float v600;
  float v601;
  int v602;
  int v603;
  int v604;
  float32x4_t v605;
  unint64_t v606;
  unsigned int v607;
  int v608;
  int v609;
  float32x4_t v610;
  int v611;
  char v612;
  float32x4_t v613;
  unsigned int v614;
  int v615;
  unsigned int v616;
  unsigned __int8 *v617;
  _WORD *v618;
  _WORD *v619;
  unsigned int v620;
  int v621;
  int v622;
  unsigned int v623;
  int v624;
  int v625;
  int v626;
  uint64_t v627;
  uint64_t v628;
  int v629;
  uint64_t v630;
  __int32 v631;
  unsigned int v632;
  uint64_t v633;
  float v634;
  float v635;
  uint64_t v636;
  float v637;
  __int16 *v638;
  int v639;
  unsigned __int8 *v640;
  int v641;
  uint64_t v642;
  float32x4_t v643;
  int v644;
  unsigned __int8 *v645;
  _WORD *v646;
  uint64_t v647;
  _WORD *v648;
  unsigned int v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  float32x4_t v654;
  unsigned int v655;
  float32x4_t v656;
  __int32 v657;
  float32x4_t v658;
  unsigned int v660;
  int v662;
  unint64_t v663;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  int v669;
  int v670;
  __int32 v671;
  _BYTE v672[12];
  unsigned __int8 v673;
  char v674;
  char v675;
  unsigned __int8 v676;
  unsigned __int8 v677;
  char v678;
  BOOL v679;
  char v680;
  char v681;
  unsigned __int8 v682;
  unsigned __int8 v683;
  char v684;
  char v685;
  unsigned __int8 v686;
  unsigned __int8 v687;
  BOOL v688;
  char v689;
  unsigned __int8 v690;
  unsigned __int8 v691;
  unsigned __int8 v692;
  char v693;
  unsigned __int8 v694;
  unsigned __int8 v695;
  unsigned __int8 v696;
  BOOL v697;
  unint64_t v698;
  BOOL v699;
  char v700;
  unsigned __int8 v701;
  unsigned __int8 v702;
  char v703;
  unsigned __int8 v704;
  unsigned __int8 v705;
  unsigned __int8 v706;
  unsigned __int8 v707;
  BOOL v708;
  char v709;
  char v710;
  unsigned __int8 v711;
  unsigned __int8 v712;
  unsigned __int8 v713;
  unsigned __int8 v714;
  unsigned __int8 v715;
  unsigned __int8 v716;
  BOOL v717;
  char v718;
  unsigned __int8 v719;
  unsigned __int8 v720;
  unsigned __int8 v721;
  unsigned __int8 v722;
  unsigned __int8 v723;
  char v724;
  unsigned __int8 v725;
  uint64_t v726;
  __int32 v727;
  char v728;
  unsigned __int8 v729;
  unsigned __int8 v730;
  unsigned __int8 v731;
  unsigned __int8 v732;
  unsigned __int8 v733;
  unsigned __int8 v734;
  char v735;
  uint64_t v736;

  v658.i64[0] = a8.i64[0];
  v20 = 0;
  v736 = *MEMORY[0x24BDAC8D0];
  v667 = *(unsigned __int8 *)(a5 + 2916);
  v728 = *(_BYTE *)(a5 + 2916);
  v598 = 1;
  do
  {
    while (1)
    {
      v21 = *(unsigned int *)(*(_QWORD *)(a5 + 2920) + 4 * v20 + 28);
      if ((_DWORD)v21 != -1)
        break;
      *(&v728 + ++v20) = v667;
      if (v20 == 7)
        goto LABEL_13;
    }
    if (a2[11] <= v21
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a2[7] + 8 * ((a2[10] + v21) / 0x1F)) + 132 * ((a2[10] + v21) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
    {
LABEL_1121:
      abort();
    }
    v22 = a2[21] + v21;
    v23 = *(_QWORD *)(a2[18] + ((v22 >> 1) & 0x7FFFFFFFFFFFFFF8));
    if (v23)
    {
      v24 = v23 + 2936 * (v22 & 0xF) + 2916;
    }
    else
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockMeshMaker.cpp", 603, (uint64_t)"neighbor_block != nullptr", 25, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_1121;
      }
      v24 = 2916;
    }
    v25 = *(unsigned __int8 *)v24;
    v598 &= v25 == (_DWORD)v667;
    *(&v728 + ++v20) = v25;
  }
  while (v20 != 7);
LABEL_13:
  if ((v598 & 1) == 0)
  {
    v110 = 0;
    *(_QWORD *)&v672[1] = 0;
    v672[9] = (_DWORD)v667 != v729;
    v672[10] = v667;
    v672[11] = v729;
    v673 = v729;
    v674 = v667;
    v675 = v667;
    v676 = v729;
    v677 = v729;
    v678 = v667;
    v679 = (_DWORD)v667 != v730;
    v680 = v667;
    v681 = v667;
    v682 = v730;
    v683 = v730;
    v684 = v667;
    v685 = v667;
    v686 = v730;
    v687 = v730;
    v111 = (_DWORD)v667 == v730 && (_DWORD)v667 == v729;
    a8.i32[0] = vdup_n_s8(v667).u32[0];
    *(int8x8_t *)a9.f32 = vdup_n_s8(v732);
    a8.i32[1] = a9.i32[0];
    v697 = (_DWORD)v667 != v732;
    v698 = a8.i64[0];
    v112 = (_DWORD)v667 == v732 && (_DWORD)v667 == v730;
    v113 = (_DWORD)v667 == v732 && (_DWORD)v667 == v729;
    v114 = (_DWORD)v667 == v734 && v112;
    v708 = !v114;
    v709 = v667;
    v710 = v667;
    v711 = v730;
    v712 = v730;
    v713 = v732;
    v714 = v732;
    v715 = v734;
    v115 = (_DWORD)v667 == v733 && v113;
    if ((_DWORD)v667 != v731)
      v111 = 0;
    v116 = (_DWORD)v667 == v732 && v111;
    if ((_DWORD)v667 != v733)
      v116 = 0;
    v716 = v734;
    v699 = !v115;
    v117 = !v111;
    v118 = (_DWORD)v667 == v734 && v116;
    v119 = !v118;
    v700 = v667;
    v701 = v729;
    v666 = (1 << v667);
    v647 = (8 - v666);
    v652 = a4;
    v702 = v729;
    v703 = v667;
    a9.i32[0] = 1061997773;
    v704 = v732;
    v705 = v733;
    if (!a6)
      a9.f32[0] = 0.4;
    v706 = v733;
    v707 = v732;
    v600 = a9.f32[0] * 0.5;
    v601 = a9.f32[0];
    v120 = (float)(a9.f32[0] * 0.5) + (float)(a9.f32[0] * -4.5);
    a9.i16[1] = 15907;
    v688 = v117;
    v689 = v667;
    v599 = v120 + 0.16;
    v642 = (uint64_t)(a1 + 32);
    v640 = a1 + 40;
    v619 = (_WORD *)&qword_255795038 + 2 * v667;
    v617 = a1 + 24;
    v618 = v619 + 1;
    v690 = v729;
    v691 = v731;
    v692 = v730;
    v693 = v667;
    v694 = v729;
    v695 = v731;
    v696 = v730;
    v717 = v119;
    v718 = v667;
    v720 = v731;
    v723 = v733;
    v724 = v735;
    v725 = v734;
    v626 = v729;
    v719 = v729;
    v625 = v730;
    v721 = v730;
    v624 = v732;
    v722 = v732;
    v672[0] = 0;
    while (1)
    {
      v121 = 0;
      v603 = 4 * (v110 == 8);
      v604 = 4 * (v110 == v647);
      v651 = 81 * v110;
      a8.f32[0] = (float)v110;
      v654 = a8;
      v614 = v110 & 0x7FFFFFFE;
      v608 = 81 * (v110 & 0x7FFFFFFE);
      v621 = 81 * v110 + 81;
      a8.f32[0] = (float)(v110 + 1);
      v610 = a8;
      v612 = v110 + 2;
      a8.f32[0] = (float)(v110 + 2);
      v613 = a8;
      v615 = 81 * v110 + 162;
      v616 = v110 + 1;
      v607 = (v110 + 1) & 0xFFFFFFFE;
      v620 = v110 >> v667;
      a8.f32[0] = (float)(v110 + v666);
      v605 = a8;
      v597 = v110 + v666;
      v602 = 81 * (v110 + v666);
      v627 = 4 * ((_DWORD)v110 - (_DWORD)v666 == 7);
      v657 = v110 - v666;
      v631 = v110 - v666 + 1;
      v630 = 4 * ((_DWORD)v110 - (_DWORD)v666 == 6);
      v663 = v110;
      do
      {
        v122 = 0;
        v660 = v121 | v110;
        a8.f32[0] = (float)v121;
        v656 = a8;
        v636 = 9 * v121 + v651;
        v622 = 9 * v121 + 18;
        v623 = v121 >> v667;
        v606 = v121 + v666;
        a8.f32[0] = (float)(v121 + v666);
        v628 = 2 * ((_DWORD)v121 - (_DWORD)v666 == 7);
        v629 = 9 * v121;
        v633 = 2 * ((_DWORD)v121 - (_DWORD)v666 == 6);
        v609 = 9 * v121 + 9;
        v611 = v609 + v615;
        do
        {
          if (v660 > 7 || v122 == 8)
            goto LABEL_749;
          v123 = v604 | (2 * (v121 == v647)) | (v122 == v647);
          if (v123)
          {
            if (v604 & 1 | (v122 == v647))
              v124 = v626;
            else
              v124 = v667;
            if ((v123 & 2) != 0)
              v125 = v625;
            else
              v125 = v667;
            _CF = v123 >= 4;
            v126 = v624;
            if (!_CF)
              v126 = v667;
            v644 = v126;
            if ((_DWORD)v667)
            {
              v127 = a5 + 4 * (v122 + v629 + v651);
              if (!*(_BYTE *)(v127 + 2))
                goto LABEL_749;
              v128 = v122 + 2;
              v129 = *(_WORD *)v127;
              v130 = v122 + 2 + v629;
              v131 = 4 * (v130 + v651);
              v132 = (_BYTE *)(a5 + v131 + 2);
              a8.i16[0] = *(_WORD *)(a5 + v131);
              a8.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
              a8.f32[0] = (float)a8.i32[0];
              if (*v132)
                a9.f32[0] = a8.f32[0];
              else
                a9.f32[0] = 3.4028e38;
              v638 = (__int16 *)(a5 + 4 * (v122 + v629 + v651));
              if (a9.f32[0] != 3.4028e38)
              {
                v133 = (float)v129;
                a8.f32[0] = a9.f32[0] * v133;
                if ((float)(a9.f32[0] * v133) <= 0.0)
                {
                  v134 = 0.5;
                  if (vabds_f32(a9.f32[0], v133) >= 0.00000001)
                    v134 = (float)-v133 / (float)(a9.f32[0] - v133);
                  v17 = 1.0;
                  _Q2.f32[0] = (float)v122;
                  a12 = v654;
                  _Q2.i32[1] = v656.i32[0];
                  _Q2.i32[2] = v654.i32[0];
                  _Q3.f32[0] = (float)v128;
                  _Q3.i32[1] = v656.i32[0];
                  _Q3.i32[2] = v654.i32[0];
                  v135 = vmlaq_n_f32(vmulq_n_f32(_Q2, 1.0 - v134), _Q3, v134);
                  v136 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)_Q2.f32 = vcvt_f32_s32(*v136);
                  _Q2.f32[2] = (float)v136[1].i32[0];
                  v137 = vaddq_f32(v135, _Q2);
                  _Q2 = v658;
                  v138 = (int8x16_t)vmulq_n_f32(v137, v658.f32[0]);
                  v727 = v138.i32[2];
                  v726 = v138.i64[0];
                  if (v134 <= 0.5)
                    v132 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  LOBYTE(v15) = *v132;
                  if (!v652)
                    goto LABEL_220;
                  _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                  a12.i32[0] = *(_DWORD *)(a3 + 136);
                  a13 = *(float32x2_t *)(a3 + 144);
                  a14.i32[0] = *(_DWORD *)(a3 + 152);
                  *(float32x2_t *)a8.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v138.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v138.i8, 1), a13, (float32x4_t)v138, 2);
                  v139 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v138.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v138.i8, 1);
                  v140 = (float32x4_t)vextq_s8(v138, v138, 8uLL);
                  *(float32x2_t *)&a8.u32[2] = vmla_f32(v139, *(float32x2_t *)v140.f32, a14);
                  v140.i64[0] = *(_QWORD *)(a3 + 160);
                  v140.i32[2] = *(_DWORD *)(a3 + 168);
                  a9 = vaddq_f32(a8, v140);
                  if (a9.f32[2] <= 0.000001)
                    goto LABEL_220;
                  v141 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                  v142 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v141, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                  LODWORD(v141) = *(_DWORD *)(a3 + 264);
                  v143 = (double)v141 + -0.5;
                  *(float *)&v143 = v143;
                  v144 = v142.f32[0] >= -0.5 && v142.f32[0] < *(float *)&v143;
                  if (!v144
                    || ((LODWORD(v143) = *(_DWORD *)(a3 + 268),
                         *(float *)&v143 = (double)*(unint64_t *)&v143 + -0.5,
                         v142.f32[1] >= -0.5)
                      ? (v145 = v142.f32[1] < *(float *)&v143)
                      : (v145 = 0),
                        !v145))
                  {
LABEL_220:
                    v146 = v125;
                    goto LABEL_221;
                  }
                  *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v142, (float32x2_t)0x3F0000003F000000)));
                  v506 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                  *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v506, 1);
                  *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v506);
                  _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                  __asm { FCVT            S2, H2 }
                  if (_Q2.f32[0] <= 3.5)
                  {
                    v507 = 0.16 * 3.0;
                    a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                    if ((float)(_Q2.f32[0] - a9.f32[2]) <= (float)(0.16 * 3.0))
                    {
LABEL_860:
                      v146 = v125;
                      _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                      _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                      __asm { FCVT            S1, H1 }
                      if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                      {
                        if ((float)(v507 + v507) < a8.f32[0])
                          a8.f32[0] = v507 + v507;
                        v17 = 1.0 - (float)(a8.f32[0] / (float)(v507 + v507));
                      }
LABEL_221:
                      LOBYTE(v669) = v122;
                      BYTE1(v669) = v121;
                      BYTE2(v669) = v110;
                      HIBYTE(v669) = v122 + 2;
                      LOBYTE(v670) = v121;
                      BYTE1(v670) = v110;
                      v147 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                      if (v640 == v147)
                      {
                        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                        v148 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670 || byte_255795678)
                        {
                          v149 = qword_255795648;
                          for (i = qword_255795650; v149 != i; v149 += 16)
                            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v149)(*(_QWORD *)(v149 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                        }
                        v151 = atomic_load((unsigned __int8 *)&qword_255795680);
                        if ((v151 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                        {
                          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                          __cxa_guard_release(&qword_255795680);
                        }
                        if (!byte_255795670)
                          abort();
                        qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                      }
                      sub_223A86594(a7, &v726, *((unsigned __int16 *)v147 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                      v127 = a5 + 4 * (v122 + v629 + v651);
                      v129 = *v638;
                      v125 = v146;
                      v110 = v663;
                    }
                  }
                  else if (_Q2.f32[0] <= 4.5)
                  {
                    v507 = (float)((float)((float)(_Q2.f32[0] + -3.5) * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                 + 0.16)
                         * 3.0;
                    a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                    if ((float)(_Q2.f32[0] - a9.f32[2]) <= v507)
                      goto LABEL_860;
                  }
                  else
                  {
                    v507 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                    a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                    if ((float)(_Q2.f32[0] - a9.f32[2]) <= v507)
                      goto LABEL_860;
                  }
                }
              }
              if (!v124)
              {
                a8.f32[0] = (float)v129;
                v152 = 4 * (v609 + v128 + v651);
                v153 = (_BYTE *)(a5 + v152 + 2);
                a9.i16[0] = *(_WORD *)(a5 + v152);
                a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
                a9.f32[0] = (float)a9.i32[0];
                if (*v153)
                  v154 = a9.f32[0];
                else
                  v154 = 3.4028e38;
                if (v154 != 3.4028e38)
                {
                  a9.f32[0] = v154 * a8.f32[0];
                  if ((float)(v154 * a8.f32[0]) <= 0.0)
                  {
                    v155 = 0.5;
                    if (vabds_f32(v154, a8.f32[0]) >= 0.00000001)
                      v155 = (float)-a8.f32[0] / (float)(v154 - a8.f32[0]);
                    v17 = 1.0;
                    _Q3.f32[0] = (float)v122;
                    a13.i32[1] = v654.i32[1];
                    _Q3.i32[1] = v656.i32[0];
                    _Q3.i32[2] = v654.i32[0];
                    a12.f32[0] = (float)v128;
                    a12.f32[1] = (float)(v121 + 1);
                    a12.i64[1] = __PAIR64__(v656.u32[3], v654.u32[0]);
                    v156 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v155), a12, v155);
                    v157 = *(int32x2_t **)(a5 + 2920);
                    *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v157);
                    _Q3.f32[2] = (float)v157[1].i32[0];
                    v158 = vaddq_f32(v156, _Q3);
                    _Q3 = v658;
                    v159 = (int8x16_t)vmulq_n_f32(v158, v658.f32[0]);
                    v727 = v159.i32[2];
                    v726 = v159.i64[0];
                    if (v155 <= 0.5)
                      v153 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                    LOBYTE(v15) = *v153;
                    if (v652)
                    {
                      _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                      a13.i32[0] = *(_DWORD *)(a3 + 136);
                      a14 = *(float32x2_t *)(a3 + 144);
                      a15.i32[0] = *(_DWORD *)(a3 + 152);
                      *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v159.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v159.i8, 1), a14, (float32x4_t)v159, 2);
                      v160 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v159.i8), a13, *(float32x2_t *)v159.i8, 1);
                      v161 = (float32x4_t)vextq_s8(v159, v159, 8uLL);
                      *(float32x2_t *)&a9.u32[2] = vmla_f32(v160, *(float32x2_t *)v161.f32, a15);
                      v161.i64[0] = *(_QWORD *)(a3 + 160);
                      v161.i32[2] = *(_DWORD *)(a3 + 168);
                      _Q2 = vaddq_f32(a9, v161);
                      if (_Q2.f32[2] > 0.000001)
                      {
                        v162 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                        v163 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v162, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                        LODWORD(v162) = *(_DWORD *)(a3 + 264);
                        v164 = (double)v162 + -0.5;
                        *(float *)&v164 = v164;
                        if (v163.f32[0] >= -0.5 && v163.f32[0] < *(float *)&v164)
                        {
                          LODWORD(v164) = *(_DWORD *)(a3 + 268);
                          *(float *)&v164 = (double)*(unint64_t *)&v164 + -0.5;
                          if (v163.f32[1] >= -0.5 && v163.f32[1] < *(float *)&v164)
                          {
                            *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v163, (float32x2_t)0x3F0000003F000000)));
                            v524 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                            *(int32x2_t *)a12.f32 = vdup_lane_s32(v524, 1);
                            *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v524);
                            _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                            __asm { FCVT            S3, H3 }
                            if (_Q3.f32[0] <= 3.5)
                            {
                              v525 = 0.16 * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                                goto LABEL_262;
                            }
                            else if (_Q3.f32[0] <= 4.5)
                            {
                              v525 = (float)((float)((float)(_Q3.f32[0] + -3.5)
                                                   * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                           + 0.16)
                                   * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v525)
                                goto LABEL_262;
                            }
                            else
                            {
                              v525 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v525)
                                goto LABEL_262;
                            }
                            _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                            _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                  + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                            __asm { FCVT            S0, H0 }
                            if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                            {
                              if ((float)(v525 + v525) < a9.f32[0])
                                a9.f32[0] = v525 + v525;
                              v17 = 1.0 - (float)(a9.f32[0] / (float)(v525 + v525));
                            }
                          }
                        }
                      }
                    }
                    LOBYTE(v669) = v122;
                    BYTE1(v669) = v121;
                    BYTE2(v669) = v110;
                    HIBYTE(v669) = v122 + 2;
                    LOBYTE(v670) = v121 + 1;
                    BYTE1(v670) = v110;
                    v167 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                    if (v640 == v167)
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                      v168 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v168 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v169 = qword_255795648;
                        for (j = qword_255795650; v169 != j; v169 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v169)(*(_QWORD *)(v169 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                      }
                      v171 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v171 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        abort();
                      qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    sub_223A86594(a7, &v726, *((unsigned __int16 *)v167 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                    v127 = a5 + 4 * (v122 + v629 + v651);
                    v129 = *v638;
                    a8.f32[0] = (float)*v638;
                    v110 = v663;
                  }
                }
LABEL_262:
                v172 = 4 * (v621 + v130);
                v173 = (_BYTE *)(a5 + v172 + 2);
                a9.i16[0] = *(_WORD *)(a5 + v172);
                a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
                a9.f32[0] = (float)a9.i32[0];
                if (*v173)
                  v174 = a9.f32[0];
                else
                  v174 = 3.4028e38;
                if (v174 != 3.4028e38)
                {
                  a9.f32[0] = v174 * a8.f32[0];
                  if ((float)(v174 * a8.f32[0]) <= 0.0)
                  {
                    v175 = 0.5;
                    if (vabds_f32(v174, a8.f32[0]) >= 0.00000001)
                      v175 = (float)-a8.f32[0] / (float)(v174 - a8.f32[0]);
                    v17 = 1.0;
                    _Q3.f32[0] = (float)v122;
                    _Q3.i32[1] = v656.i32[0];
                    _Q3.i32[2] = v654.i32[0];
                    a12.f32[0] = (float)v128;
                    a12.i32[1] = v656.i32[0];
                    a13.i32[1] = v610.i32[1];
                    a12.i64[1] = __PAIR64__(v654.u32[3], v610.u32[0]);
                    v176 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v175), a12, v175);
                    v177 = *(int32x2_t **)(a5 + 2920);
                    *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v177);
                    _Q3.f32[2] = (float)v177[1].i32[0];
                    v178 = vaddq_f32(v176, _Q3);
                    _Q3 = v658;
                    v179 = (int8x16_t)vmulq_n_f32(v178, v658.f32[0]);
                    v727 = v179.i32[2];
                    v726 = v179.i64[0];
                    if (v175 <= 0.5)
                      v173 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                    LOBYTE(v15) = *v173;
                    if (v652)
                    {
                      _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                      a13.i32[0] = *(_DWORD *)(a3 + 136);
                      a14 = *(float32x2_t *)(a3 + 144);
                      a15.i32[0] = *(_DWORD *)(a3 + 152);
                      *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v179.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v179.i8, 1), a14, (float32x4_t)v179, 2);
                      v180 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v179.i8), a13, *(float32x2_t *)v179.i8, 1);
                      v181 = (float32x4_t)vextq_s8(v179, v179, 8uLL);
                      *(float32x2_t *)&a9.u32[2] = vmla_f32(v180, *(float32x2_t *)v181.f32, a15);
                      v181.i64[0] = *(_QWORD *)(a3 + 160);
                      v181.i32[2] = *(_DWORD *)(a3 + 168);
                      _Q2 = vaddq_f32(a9, v181);
                      if (_Q2.f32[2] > 0.000001)
                      {
                        v182 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                        v183 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v182, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                        LODWORD(v182) = *(_DWORD *)(a3 + 264);
                        v184 = (double)v182 + -0.5;
                        *(float *)&v184 = v184;
                        if (v183.f32[0] >= -0.5 && v183.f32[0] < *(float *)&v184)
                        {
                          LODWORD(v184) = *(_DWORD *)(a3 + 268);
                          *(float *)&v184 = (double)*(unint64_t *)&v184 + -0.5;
                          if (v183.f32[1] >= -0.5 && v183.f32[1] < *(float *)&v184)
                          {
                            *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v183, (float32x2_t)0x3F0000003F000000)));
                            v526 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                            *(int32x2_t *)a12.f32 = vdup_lane_s32(v526, 1);
                            *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v526);
                            _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                            __asm { FCVT            S3, H3 }
                            if (_Q3.f32[0] <= 3.5)
                            {
                              v527 = 0.16 * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                                goto LABEL_292;
                            }
                            else if (_Q3.f32[0] <= 4.5)
                            {
                              v527 = (float)((float)((float)(_Q3.f32[0] + -3.5)
                                                   * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                           + 0.16)
                                   * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v527)
                                goto LABEL_292;
                            }
                            else
                            {
                              v527 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v527)
                                goto LABEL_292;
                            }
                            _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                            _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                  + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                            __asm { FCVT            S0, H0 }
                            if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                            {
                              if ((float)(v527 + v527) < a9.f32[0])
                                a9.f32[0] = v527 + v527;
                              v17 = 1.0 - (float)(a9.f32[0] / (float)(v527 + v527));
                            }
                          }
                        }
                      }
                    }
                    LOBYTE(v669) = v122;
                    BYTE1(v669) = v121;
                    BYTE2(v669) = v110;
                    HIBYTE(v669) = v122 + 2;
                    LOBYTE(v670) = v121;
                    BYTE1(v670) = v616;
                    v187 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                    if (v640 == v187)
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                      v188 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v188 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v189 = qword_255795648;
                        for (k = qword_255795650; v189 != k; v189 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v189)(*(_QWORD *)(v189 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                      }
                      v191 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        abort();
                      qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    sub_223A86594(a7, &v726, *((unsigned __int16 *)v187 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                    v127 = a5 + 4 * (v122 + v629 + v651);
                    v129 = *v638;
                    a8.f32[0] = (float)*v638;
                    v110 = v663;
                  }
                }
LABEL_292:
                v192 = 4 * (v609 + v128 + v621);
                v193 = (_BYTE *)(a5 + v192 + 2);
                a9.i16[0] = *(_WORD *)(a5 + v192);
                a9 = (float32x4_t)vmovl_s16(*(int16x4_t *)a9.f32);
                a9.f32[0] = (float)a9.i32[0];
                v194 = *v193 ? a9.f32[0] : 3.4028e38;
                if (v194 != 3.4028e38 && (float)(v194 * a8.f32[0]) <= 0.0)
                {
                  v195 = 0.5;
                  if (vabds_f32(v194, a8.f32[0]) >= 0.00000001)
                    v195 = (float)-a8.f32[0] / (float)(v194 - a8.f32[0]);
                  v17 = 1.0;
                  _Q2.f32[0] = (float)v122;
                  _Q2.i32[1] = v656.i32[0];
                  _Q2.i32[2] = v654.i32[0];
                  _Q3.f32[0] = (float)v128;
                  _Q3.f32[1] = (float)(v121 + 1);
                  a12 = v610;
                  _Q3.i64[1] = __PAIR64__(v654.u32[3], v610.u32[0]);
                  v196 = vmlaq_n_f32(vmulq_n_f32(_Q2, 1.0 - v195), _Q3, v195);
                  v197 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)_Q2.f32 = vcvt_f32_s32(*v197);
                  _Q2.f32[2] = (float)v197[1].i32[0];
                  v198 = vaddq_f32(v196, _Q2);
                  _Q2 = v658;
                  v199 = (int8x16_t)vmulq_n_f32(v198, v658.f32[0]);
                  v727 = v199.i32[2];
                  v726 = v199.i64[0];
                  if (v195 <= 0.5)
                    v193 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  LOBYTE(v15) = *v193;
                  if (v652)
                  {
                    _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                    a12.i32[0] = *(_DWORD *)(a3 + 136);
                    a13 = *(float32x2_t *)(a3 + 144);
                    a14.i32[0] = *(_DWORD *)(a3 + 152);
                    *(float32x2_t *)v200.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v199.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v199.i8, 1), a13, (float32x4_t)v199, 2);
                    v201 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v199.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v199.i8, 1);
                    a8 = (float32x4_t)vextq_s8(v199, v199, 8uLL);
                    *(float32x2_t *)&v200.u32[2] = vmla_f32(v201, *(float32x2_t *)a8.f32, a14);
                    a8.i64[0] = *(_QWORD *)(a3 + 160);
                    a8.i32[2] = *(_DWORD *)(a3 + 168);
                    a9 = vaddq_f32(v200, a8);
                    if (a9.f32[2] > 0.000001)
                    {
                      v202 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                      v203 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v202, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                      LODWORD(v202) = *(_DWORD *)(a3 + 264);
                      v204 = (double)v202 + -0.5;
                      *(float *)&v204 = v204;
                      if (v203.f32[0] >= -0.5 && v203.f32[0] < *(float *)&v204)
                      {
                        LODWORD(v204) = *(_DWORD *)(a3 + 268);
                        *(float *)&v204 = (double)*(unint64_t *)&v204 + -0.5;
                        if (v203.f32[1] >= -0.5 && v203.f32[1] < *(float *)&v204)
                        {
                          *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v203, (float32x2_t)0x3F0000003F000000)));
                          v528 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                          *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v528, 1);
                          *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v528);
                          _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                          __asm { FCVT            S2, H2 }
                          if (_Q2.f32[0] <= 3.5)
                          {
                            v529 = 0.16 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > (float)(0.16 * 3.0))
                              goto LABEL_322;
                          }
                          else if (_Q2.f32[0] <= 4.5)
                          {
                            v529 = (float)((float)((float)(_Q2.f32[0] + -3.5)
                                                 * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                         + 0.16)
                                 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v529)
                              goto LABEL_322;
                          }
                          else
                          {
                            v529 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v529)
                              goto LABEL_322;
                          }
                          _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                          _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                          __asm { FCVT            S1, H1 }
                          if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                          {
                            if ((float)(v529 + v529) < a8.f32[0])
                              a8.f32[0] = v529 + v529;
                            v17 = 1.0 - (float)(a8.f32[0] / (float)(v529 + v529));
                          }
                        }
                      }
                    }
                  }
                  LOBYTE(v669) = v122;
                  BYTE1(v669) = v121;
                  BYTE2(v669) = v110;
                  HIBYTE(v669) = v122 + 2;
                  LOBYTE(v670) = v121 + 1;
                  BYTE1(v670) = v616;
                  v207 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                  if (v640 == v207)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                    v208 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v208 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v209 = qword_255795648;
                      for (m = qword_255795650; v209 != m; v209 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v209)(*(_QWORD *)(v209 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    v211 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v211 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  sub_223A86594(a7, &v726, *((unsigned __int16 *)v207 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                  v127 = a5 + 4 * (v122 + v629 + v651);
                  v129 = *v638;
                  v110 = v663;
                }
              }
LABEL_322:
              v212 = 4 * (v622 + v122 + v651);
              v213 = (_BYTE *)(a5 + v212 + 2);
              a8.i16[0] = *(_WORD *)(a5 + v212);
              a8.i64[0] = vmovl_s16(*(int16x4_t *)a8.f32).u64[0];
              a8.f32[0] = (float)a8.i32[0];
              if (*v213)
                a9.f32[0] = a8.f32[0];
              else
                a9.f32[0] = 3.4028e38;
              if (a9.f32[0] != 3.4028e38)
              {
                v214 = (float)v129;
                a8.f32[0] = a9.f32[0] * v214;
                if ((float)(a9.f32[0] * v214) <= 0.0)
                {
                  v215 = 0.5;
                  if (vabds_f32(a9.f32[0], v214) >= 0.00000001)
                    v215 = (float)-v214 / (float)(a9.f32[0] - v214);
                  v17 = 1.0;
                  _Q2.f32[0] = (float)v122;
                  _Q3 = _Q2;
                  _Q3.i32[1] = v656.i32[0];
                  a12 = v654;
                  _Q3.i32[2] = v654.i32[0];
                  _Q2.f32[1] = (float)(v121 + 2);
                  _Q2.i32[2] = v654.i32[0];
                  v216 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v215), _Q2, v215);
                  v217 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)_Q2.f32 = vcvt_f32_s32(*v217);
                  _Q2.f32[2] = (float)v217[1].i32[0];
                  v218 = vaddq_f32(v216, _Q2);
                  _Q2 = v658;
                  v219 = (int8x16_t)vmulq_n_f32(v218, v658.f32[0]);
                  v727 = v219.i32[2];
                  v726 = v219.i64[0];
                  if (v215 <= 0.5)
                    v213 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  LOBYTE(v15) = *v213;
                  if (v652)
                  {
                    _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                    a12.i32[0] = *(_DWORD *)(a3 + 136);
                    a13 = *(float32x2_t *)(a3 + 144);
                    a14.i32[0] = *(_DWORD *)(a3 + 152);
                    *(float32x2_t *)a8.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v219.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v219.i8, 1), a13, (float32x4_t)v219, 2);
                    v220 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v219.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v219.i8, 1);
                    v221 = (float32x4_t)vextq_s8(v219, v219, 8uLL);
                    *(float32x2_t *)&a8.u32[2] = vmla_f32(v220, *(float32x2_t *)v221.f32, a14);
                    v221.i64[0] = *(_QWORD *)(a3 + 160);
                    v221.i32[2] = *(_DWORD *)(a3 + 168);
                    a9 = vaddq_f32(a8, v221);
                    if (a9.f32[2] > 0.000001)
                    {
                      v222 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                      v223 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v222, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                      LODWORD(v222) = *(_DWORD *)(a3 + 264);
                      v224 = (double)v222 + -0.5;
                      *(float *)&v224 = v224;
                      if (v223.f32[0] >= -0.5 && v223.f32[0] < *(float *)&v224)
                      {
                        LODWORD(v224) = *(_DWORD *)(a3 + 268);
                        *(float *)&v224 = (double)*(unint64_t *)&v224 + -0.5;
                        if (v223.f32[1] >= -0.5 && v223.f32[1] < *(float *)&v224)
                        {
                          *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v223, (float32x2_t)0x3F0000003F000000)));
                          v508 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                          *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v508, 1);
                          *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v508);
                          _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                          __asm { FCVT            S2, H2 }
                          if (_Q2.f32[0] <= 3.5)
                          {
                            v509 = 0.16 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > (float)(0.16 * 3.0))
                              goto LABEL_352;
                          }
                          else if (_Q2.f32[0] <= 4.5)
                          {
                            v509 = (float)((float)((float)(_Q2.f32[0] + -3.5)
                                                 * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                         + 0.16)
                                 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v509)
                              goto LABEL_352;
                          }
                          else
                          {
                            v509 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v509)
                              goto LABEL_352;
                          }
                          _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                          _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                          __asm { FCVT            S1, H1 }
                          if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                          {
                            if ((float)(v509 + v509) < a8.f32[0])
                              a8.f32[0] = v509 + v509;
                            v17 = 1.0 - (float)(a8.f32[0] / (float)(v509 + v509));
                          }
                        }
                      }
                    }
                  }
                  LOBYTE(v669) = v122;
                  BYTE1(v669) = v121;
                  BYTE2(v669) = v110;
                  HIBYTE(v669) = v122;
                  LOBYTE(v670) = v121 + 2;
                  BYTE1(v670) = v110;
                  v227 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                  if (v640 == v227)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                    v228 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v228 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v229 = qword_255795648;
                      for (n = qword_255795650; v229 != n; v229 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v229)(*(_QWORD *)(v229 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    v231 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v231 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  sub_223A86594(a7, &v726, *((unsigned __int16 *)v227 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                  v127 = a5 + 4 * (v122 + v629 + v651);
                  v129 = *v638;
                  v110 = v663;
                }
              }
LABEL_352:
              if (!v125)
              {
                a8.f32[0] = (float)v129;
                v232 = v122 + 1;
                v233 = v122 + 1 + v622;
                v234 = 4 * (v233 + v651);
                v235 = (_BYTE *)(a5 + v234 + 2);
                a9.i16[0] = *(_WORD *)(a5 + v234);
                a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
                a9.f32[0] = (float)a9.i32[0];
                if (*v235)
                  v236 = a9.f32[0];
                else
                  v236 = 3.4028e38;
                if (v236 != 3.4028e38)
                {
                  a9.f32[0] = v236 * a8.f32[0];
                  if ((float)(v236 * a8.f32[0]) <= 0.0)
                  {
                    v237 = 0.5;
                    if (vabds_f32(v236, a8.f32[0]) >= 0.00000001)
                      v237 = (float)-a8.f32[0] / (float)(v236 - a8.f32[0]);
                    v17 = 1.0;
                    _Q3.f32[0] = (float)v122;
                    a13.i32[1] = v654.i32[1];
                    _Q3.i32[1] = v656.i32[0];
                    _Q3.i32[2] = v654.i32[0];
                    a12.f32[0] = (float)v232;
                    a12.f32[1] = (float)(v121 + 2);
                    a12.i64[1] = __PAIR64__(v656.u32[3], v654.u32[0]);
                    v238 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v237), a12, v237);
                    v239 = *(int32x2_t **)(a5 + 2920);
                    *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v239);
                    _Q3.f32[2] = (float)v239[1].i32[0];
                    v240 = vaddq_f32(v238, _Q3);
                    _Q3 = v658;
                    v241 = (int8x16_t)vmulq_n_f32(v240, v658.f32[0]);
                    v727 = v241.i32[2];
                    v726 = v241.i64[0];
                    if (v237 <= 0.5)
                      v235 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                    LOBYTE(v15) = *v235;
                    if (v652)
                    {
                      _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                      a13.i32[0] = *(_DWORD *)(a3 + 136);
                      a14 = *(float32x2_t *)(a3 + 144);
                      a15.i32[0] = *(_DWORD *)(a3 + 152);
                      *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v241.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v241.i8, 1), a14, (float32x4_t)v241, 2);
                      v242 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v241.i8), a13, *(float32x2_t *)v241.i8, 1);
                      v243 = (float32x4_t)vextq_s8(v241, v241, 8uLL);
                      *(float32x2_t *)&a9.u32[2] = vmla_f32(v242, *(float32x2_t *)v243.f32, a15);
                      v243.i64[0] = *(_QWORD *)(a3 + 160);
                      v243.i32[2] = *(_DWORD *)(a3 + 168);
                      _Q2 = vaddq_f32(a9, v243);
                      if (_Q2.f32[2] > 0.000001)
                      {
                        v244 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                        v245 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v244, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                        LODWORD(v244) = *(_DWORD *)(a3 + 264);
                        v246 = (double)v244 + -0.5;
                        *(float *)&v246 = v246;
                        if (v245.f32[0] >= -0.5 && v245.f32[0] < *(float *)&v246)
                        {
                          LODWORD(v246) = *(_DWORD *)(a3 + 268);
                          *(float *)&v246 = (double)*(unint64_t *)&v246 + -0.5;
                          if (v245.f32[1] >= -0.5 && v245.f32[1] < *(float *)&v246)
                          {
                            *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v245, (float32x2_t)0x3F0000003F000000)));
                            v530 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                            *(int32x2_t *)a12.f32 = vdup_lane_s32(v530, 1);
                            *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v530);
                            _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                            __asm { FCVT            S3, H3 }
                            if (_Q3.f32[0] <= 3.5)
                            {
                              v531 = 0.16 * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                                goto LABEL_383;
                            }
                            else if (_Q3.f32[0] <= 4.5)
                            {
                              v531 = (float)((float)((float)(_Q3.f32[0] + -3.5)
                                                   * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                           + 0.16)
                                   * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v531)
                                goto LABEL_383;
                            }
                            else
                            {
                              v531 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v531)
                                goto LABEL_383;
                            }
                            _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                            _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                  + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                            __asm { FCVT            S0, H0 }
                            if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                            {
                              if ((float)(v531 + v531) < a9.f32[0])
                                a9.f32[0] = v531 + v531;
                              v17 = 1.0 - (float)(a9.f32[0] / (float)(v531 + v531));
                            }
                          }
                        }
                      }
                    }
                    LOBYTE(v669) = v122;
                    BYTE1(v669) = v121;
                    BYTE2(v669) = v110;
                    HIBYTE(v669) = v122 + 1;
                    LOBYTE(v670) = v121 + 2;
                    BYTE1(v670) = v110;
                    v249 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                    if (v640 == v249)
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                      v250 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v250 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v251 = qword_255795648;
                        for (ii = qword_255795650; v251 != ii; v251 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v251)(*(_QWORD *)(v251 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                      }
                      v253 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v253 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        abort();
                      qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    sub_223A86594(a7, &v726, *((unsigned __int16 *)v249 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                    v127 = a5 + 4 * (v122 + v629 + v651);
                    v129 = *v638;
                    a8.f32[0] = (float)*v638;
                    v110 = v663;
                  }
                }
LABEL_383:
                v254 = 4 * (v622 + v122 + v621);
                v255 = (_BYTE *)(a5 + v254 + 2);
                a9.i16[0] = *(_WORD *)(a5 + v254);
                a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
                a9.f32[0] = (float)a9.i32[0];
                if (*v255)
                  v256 = a9.f32[0];
                else
                  v256 = 3.4028e38;
                if (v256 != 3.4028e38)
                {
                  a9.f32[0] = v256 * a8.f32[0];
                  if ((float)(v256 * a8.f32[0]) <= 0.0)
                  {
                    v257 = 0.5;
                    if (vabds_f32(v256, a8.f32[0]) >= 0.00000001)
                      v257 = (float)-a8.f32[0] / (float)(v256 - a8.f32[0]);
                    v17 = 1.0;
                    _Q3.f32[0] = (float)v122;
                    a12 = _Q3;
                    a12.i32[1] = v656.i32[0];
                    a12.i32[2] = v654.i32[0];
                    _Q3.f32[1] = (float)(v121 + 2);
                    a13.i32[1] = v610.i32[1];
                    _Q3.i32[2] = v610.i32[0];
                    v258 = vmlaq_n_f32(vmulq_n_f32(a12, 1.0 - v257), _Q3, v257);
                    v259 = *(int32x2_t **)(a5 + 2920);
                    *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v259);
                    _Q3.f32[2] = (float)v259[1].i32[0];
                    v260 = vaddq_f32(v258, _Q3);
                    _Q3 = v658;
                    v261 = (int8x16_t)vmulq_n_f32(v260, v658.f32[0]);
                    v727 = v261.i32[2];
                    v726 = v261.i64[0];
                    if (v257 <= 0.5)
                      v255 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                    LOBYTE(v15) = *v255;
                    if (v652)
                    {
                      _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                      a13.i32[0] = *(_DWORD *)(a3 + 136);
                      a14 = *(float32x2_t *)(a3 + 144);
                      a15.i32[0] = *(_DWORD *)(a3 + 152);
                      *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v261.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v261.i8, 1), a14, (float32x4_t)v261, 2);
                      v262 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v261.i8), a13, *(float32x2_t *)v261.i8, 1);
                      v263 = (float32x4_t)vextq_s8(v261, v261, 8uLL);
                      *(float32x2_t *)&a9.u32[2] = vmla_f32(v262, *(float32x2_t *)v263.f32, a15);
                      v263.i64[0] = *(_QWORD *)(a3 + 160);
                      v263.i32[2] = *(_DWORD *)(a3 + 168);
                      _Q2 = vaddq_f32(a9, v263);
                      if (_Q2.f32[2] > 0.000001)
                      {
                        v264 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                        v265 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v264, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                        LODWORD(v264) = *(_DWORD *)(a3 + 264);
                        v266 = (double)v264 + -0.5;
                        *(float *)&v266 = v266;
                        if (v265.f32[0] >= -0.5 && v265.f32[0] < *(float *)&v266)
                        {
                          LODWORD(v266) = *(_DWORD *)(a3 + 268);
                          *(float *)&v266 = (double)*(unint64_t *)&v266 + -0.5;
                          if (v265.f32[1] >= -0.5 && v265.f32[1] < *(float *)&v266)
                          {
                            *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v265, (float32x2_t)0x3F0000003F000000)));
                            v532 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                            *(int32x2_t *)a12.f32 = vdup_lane_s32(v532, 1);
                            *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v532);
                            _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                            __asm { FCVT            S3, H3 }
                            if (_Q3.f32[0] <= 3.5)
                            {
                              v533 = 0.16 * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                                goto LABEL_413;
                            }
                            else if (_Q3.f32[0] <= 4.5)
                            {
                              v533 = (float)((float)((float)(_Q3.f32[0] + -3.5)
                                                   * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                           + 0.16)
                                   * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v533)
                                goto LABEL_413;
                            }
                            else
                            {
                              v533 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                              a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                              if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v533)
                                goto LABEL_413;
                            }
                            _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                            _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                  + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                            __asm { FCVT            S0, H0 }
                            if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                            {
                              if ((float)(v533 + v533) < a9.f32[0])
                                a9.f32[0] = v533 + v533;
                              v17 = 1.0 - (float)(a9.f32[0] / (float)(v533 + v533));
                            }
                          }
                        }
                      }
                    }
                    LOBYTE(v669) = v122;
                    BYTE1(v669) = v121;
                    BYTE2(v669) = v110;
                    HIBYTE(v669) = v122;
                    LOBYTE(v670) = v121 + 2;
                    BYTE1(v670) = v616;
                    v269 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                    if (v640 == v269)
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                      v270 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v270 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v271 = qword_255795648;
                        for (jj = qword_255795650; v271 != jj; v271 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v271)(*(_QWORD *)(v271 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                      }
                      v273 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v273 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        abort();
                      qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    sub_223A86594(a7, &v726, *((unsigned __int16 *)v269 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                    v127 = a5 + 4 * (v122 + v629 + v651);
                    v129 = *v638;
                    a8.f32[0] = (float)*v638;
                    v110 = v663;
                  }
                }
LABEL_413:
                v274 = 4 * (v233 + v621);
                v275 = (_BYTE *)(a5 + v274 + 2);
                a9.i16[0] = *(_WORD *)(a5 + v274);
                a9 = (float32x4_t)vmovl_s16(*(int16x4_t *)a9.f32);
                a9.f32[0] = (float)a9.i32[0];
                v276 = *v275 ? a9.f32[0] : 3.4028e38;
                if (v276 != 3.4028e38 && (float)(v276 * a8.f32[0]) <= 0.0)
                {
                  v277 = 0.5;
                  if (vabds_f32(v276, a8.f32[0]) >= 0.00000001)
                    v277 = (float)-a8.f32[0] / (float)(v276 - a8.f32[0]);
                  v17 = 1.0;
                  _Q2.f32[0] = (float)v122;
                  _Q2.i32[1] = v656.i32[0];
                  _Q2.i32[2] = v654.i32[0];
                  _Q3.f32[0] = (float)v232;
                  _Q3.f32[1] = (float)(v121 + 2);
                  a12 = v610;
                  _Q3.i64[1] = __PAIR64__(v654.u32[3], v610.u32[0]);
                  v278 = vmlaq_n_f32(vmulq_n_f32(_Q2, 1.0 - v277), _Q3, v277);
                  v279 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)_Q2.f32 = vcvt_f32_s32(*v279);
                  _Q2.f32[2] = (float)v279[1].i32[0];
                  v280 = vaddq_f32(v278, _Q2);
                  _Q2 = v658;
                  v281 = (int8x16_t)vmulq_n_f32(v280, v658.f32[0]);
                  v727 = v281.i32[2];
                  v726 = v281.i64[0];
                  if (v277 <= 0.5)
                    v275 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  LOBYTE(v15) = *v275;
                  if (v652)
                  {
                    _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                    a12.i32[0] = *(_DWORD *)(a3 + 136);
                    a13 = *(float32x2_t *)(a3 + 144);
                    a14.i32[0] = *(_DWORD *)(a3 + 152);
                    *(float32x2_t *)v282.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v281.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v281.i8, 1), a13, (float32x4_t)v281, 2);
                    v283 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v281.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v281.i8, 1);
                    a8 = (float32x4_t)vextq_s8(v281, v281, 8uLL);
                    *(float32x2_t *)&v282.u32[2] = vmla_f32(v283, *(float32x2_t *)a8.f32, a14);
                    a8.i64[0] = *(_QWORD *)(a3 + 160);
                    a8.i32[2] = *(_DWORD *)(a3 + 168);
                    a9 = vaddq_f32(v282, a8);
                    if (a9.f32[2] > 0.000001)
                    {
                      v284 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                      v285 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v284, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                      LODWORD(v284) = *(_DWORD *)(a3 + 264);
                      v286 = (double)v284 + -0.5;
                      *(float *)&v286 = v286;
                      if (v285.f32[0] >= -0.5 && v285.f32[0] < *(float *)&v286)
                      {
                        LODWORD(v286) = *(_DWORD *)(a3 + 268);
                        *(float *)&v286 = (double)*(unint64_t *)&v286 + -0.5;
                        if (v285.f32[1] >= -0.5 && v285.f32[1] < *(float *)&v286)
                        {
                          *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v285, (float32x2_t)0x3F0000003F000000)));
                          v534 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                          *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v534, 1);
                          *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v534);
                          _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                          __asm { FCVT            S2, H2 }
                          if (_Q2.f32[0] <= 3.5)
                          {
                            v535 = 0.16 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > (float)(0.16 * 3.0))
                              goto LABEL_443;
                          }
                          else if (_Q2.f32[0] <= 4.5)
                          {
                            v535 = (float)((float)((float)(_Q2.f32[0] + -3.5)
                                                 * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                         + 0.16)
                                 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v535)
                              goto LABEL_443;
                          }
                          else
                          {
                            v535 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v535)
                              goto LABEL_443;
                          }
                          _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                          _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                          __asm { FCVT            S1, H1 }
                          if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                          {
                            if ((float)(v535 + v535) < a8.f32[0])
                              a8.f32[0] = v535 + v535;
                            v17 = 1.0 - (float)(a8.f32[0] / (float)(v535 + v535));
                          }
                        }
                      }
                    }
                  }
                  LOBYTE(v669) = v122;
                  BYTE1(v669) = v121;
                  BYTE2(v669) = v110;
                  HIBYTE(v669) = v122 + 1;
                  LOBYTE(v670) = v121 + 2;
                  BYTE1(v670) = v616;
                  v289 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                  if (v640 == v289)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                    v290 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v290 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v291 = qword_255795648;
                      for (kk = qword_255795650; v291 != kk; v291 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v291)(*(_QWORD *)(v291 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    v293 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v293 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  sub_223A86594(a7, &v726, *((unsigned __int16 *)v289 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                  v127 = a5 + 4 * (v122 + v629 + v651);
                  v129 = *v638;
                  v110 = v663;
                }
              }
LABEL_443:
              v294 = 4 * (v615 + v122 + v629);
              a8.i16[0] = *(_WORD *)(a5 + v294);
              a8 = (float32x4_t)vmovl_s16(*(int16x4_t *)a8.f32);
              a8.f32[0] = (float)a8.i32[0];
              if (*(_BYTE *)(a5 + v294 + 2))
                a9.f32[0] = a8.f32[0];
              else
                a9.f32[0] = 3.4028e38;
              if (a9.f32[0] != 3.4028e38)
              {
                v295 = (float)v129;
                a8.f32[0] = a9.f32[0] * v295;
                if ((float)(a9.f32[0] * v295) <= 0.0)
                {
                  v296 = 0.5;
                  if (vabds_f32(a9.f32[0], v295) >= 0.00000001)
                    v296 = (float)-v295 / (float)(a9.f32[0] - v295);
                  v17 = 1.0;
                  a9.f32[0] = (float)v122;
                  a9.i32[1] = v656.i32[0];
                  _Q3 = a9;
                  _Q3.i32[2] = v654.i32[0];
                  a12 = v613;
                  a9.i32[2] = v613.i32[0];
                  v297 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v296), a9, v296);
                  v298 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)a9.f32 = vcvt_f32_s32(*v298);
                  a9.f32[2] = (float)v298[1].i32[0];
                  v299 = vaddq_f32(v297, a9);
                  _Q2 = v658;
                  v300 = (int8x16_t)vmulq_n_f32(v299, v658.f32[0]);
                  v727 = v300.i32[2];
                  v726 = v300.i64[0];
                  v301 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  if (v296 > 0.5)
                    v301 = (_BYTE *)(a5 + v294 + 2);
                  LOBYTE(v15) = *v301;
                  if (v652)
                  {
                    _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                    a12.i32[0] = *(_DWORD *)(a3 + 136);
                    a13 = *(float32x2_t *)(a3 + 144);
                    a14.i32[0] = *(_DWORD *)(a3 + 152);
                    *(float32x2_t *)a8.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v300.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v300.i8, 1), a13, (float32x4_t)v300, 2);
                    v302 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v300.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v300.i8, 1);
                    v303 = (float32x4_t)vextq_s8(v300, v300, 8uLL);
                    *(float32x2_t *)&a8.u32[2] = vmla_f32(v302, *(float32x2_t *)v303.f32, a14);
                    v303.i64[0] = *(_QWORD *)(a3 + 160);
                    v303.i32[2] = *(_DWORD *)(a3 + 168);
                    a9 = vaddq_f32(a8, v303);
                    if (a9.f32[2] > 0.000001)
                    {
                      v304 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                      v305 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v304, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                      LODWORD(v304) = *(_DWORD *)(a3 + 264);
                      v306 = (double)v304 + -0.5;
                      *(float *)&v306 = v306;
                      if (v305.f32[0] >= -0.5 && v305.f32[0] < *(float *)&v306)
                      {
                        LODWORD(v306) = *(_DWORD *)(a3 + 268);
                        *(float *)&v306 = (double)*(unint64_t *)&v306 + -0.5;
                        if (v305.f32[1] >= -0.5 && v305.f32[1] < *(float *)&v306)
                        {
                          *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v305, (float32x2_t)0x3F0000003F000000)));
                          v510 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                          *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v510, 1);
                          *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v510);
                          _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                          __asm { FCVT            S2, H2 }
                          if (_Q2.f32[0] <= 3.5)
                          {
                            v511 = 0.16 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > (float)(0.16 * 3.0))
                              goto LABEL_473;
                          }
                          else if (_Q2.f32[0] <= 4.5)
                          {
                            v511 = (float)((float)((float)(_Q2.f32[0] + -3.5)
                                                 * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                         + 0.16)
                                 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v511)
                              goto LABEL_473;
                          }
                          else
                          {
                            v511 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v511)
                              goto LABEL_473;
                          }
                          _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                          _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                          __asm { FCVT            S1, H1 }
                          if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                          {
                            if ((float)(v511 + v511) < a8.f32[0])
                              a8.f32[0] = v511 + v511;
                            v17 = 1.0 - (float)(a8.f32[0] / (float)(v511 + v511));
                          }
                        }
                      }
                    }
                  }
                  LOBYTE(v669) = v122;
                  BYTE1(v669) = v121;
                  BYTE2(v669) = v110;
                  HIBYTE(v669) = v122;
                  LOBYTE(v670) = v121;
                  BYTE1(v670) = v612;
                  v309 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                  if (v640 == v309)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                    v310 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v310 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v311 = qword_255795648;
                      for (mm = qword_255795650; v311 != mm; v311 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v311)(*(_QWORD *)(v311 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    v313 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v313 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  sub_223A86594(a7, &v726, *((unsigned __int16 *)v309 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                  v110 = v663;
LABEL_473:
                  v127 = a5 + 4 * (v122 + v629 + v651);
                }
              }
              if (v644)
                goto LABEL_749;
              a8.i16[0] = *(_WORD *)v127;
              a8 = (float32x4_t)vmovl_s16(*(int16x4_t *)a8.f32);
              a8.f32[0] = (float)a8.i32[0];
              v314 = v122 + 1;
              v315 = 4 * (v615 + 9 * v121 + v122 + 1);
              v316 = (_BYTE *)(a5 + v315 + 2);
              a9.i16[0] = *(_WORD *)(a5 + v315);
              a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
              a9.f32[0] = (float)a9.i32[0];
              if (*v316)
                v317 = a9.f32[0];
              else
                v317 = 3.4028e38;
              if (v317 != 3.4028e38)
              {
                a9.f32[0] = v317 * a8.f32[0];
                if ((float)(v317 * a8.f32[0]) <= 0.0)
                {
                  v318 = 0.5;
                  if (vabds_f32(v317, a8.f32[0]) >= 0.00000001)
                    v318 = (float)-a8.f32[0] / (float)(v317 - a8.f32[0]);
                  v17 = 1.0;
                  _Q3.f32[0] = (float)v122;
                  _Q3.i32[1] = v656.i32[0];
                  _Q3.i32[2] = v654.i32[0];
                  a12.f32[0] = (float)v314;
                  a12.i32[1] = v656.i32[0];
                  a13.i32[1] = v613.i32[1];
                  a12.i64[1] = __PAIR64__(v654.u32[3], v613.u32[0]);
                  v319 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v318), a12, v318);
                  v320 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v320);
                  _Q3.f32[2] = (float)v320[1].i32[0];
                  v321 = vaddq_f32(v319, _Q3);
                  _Q3 = v658;
                  v322 = (int8x16_t)vmulq_n_f32(v321, v658.f32[0]);
                  v727 = v322.i32[2];
                  v726 = v322.i64[0];
                  if (v318 <= 0.5)
                    v316 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  LOBYTE(v15) = *v316;
                  if (v652)
                  {
                    _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                    a13.i32[0] = *(_DWORD *)(a3 + 136);
                    a14 = *(float32x2_t *)(a3 + 144);
                    a15.i32[0] = *(_DWORD *)(a3 + 152);
                    *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v322.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v322.i8, 1), a14, (float32x4_t)v322, 2);
                    v323 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v322.i8), a13, *(float32x2_t *)v322.i8, 1);
                    v324 = (float32x4_t)vextq_s8(v322, v322, 8uLL);
                    *(float32x2_t *)&a9.u32[2] = vmla_f32(v323, *(float32x2_t *)v324.f32, a15);
                    v324.i64[0] = *(_QWORD *)(a3 + 160);
                    v324.i32[2] = *(_DWORD *)(a3 + 168);
                    _Q2 = vaddq_f32(a9, v324);
                    if (_Q2.f32[2] > 0.000001)
                    {
                      v325 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                      v326 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v325, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                      LODWORD(v325) = *(_DWORD *)(a3 + 264);
                      v327 = (double)v325 + -0.5;
                      *(float *)&v327 = v327;
                      if (v326.f32[0] >= -0.5 && v326.f32[0] < *(float *)&v327)
                      {
                        LODWORD(v327) = *(_DWORD *)(a3 + 268);
                        *(float *)&v327 = (double)*(unint64_t *)&v327 + -0.5;
                        if (v326.f32[1] >= -0.5 && v326.f32[1] < *(float *)&v327)
                        {
                          *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v326, (float32x2_t)0x3F0000003F000000)));
                          v536 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                          *(int32x2_t *)a12.f32 = vdup_lane_s32(v536, 1);
                          *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v536);
                          _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                          __asm { FCVT            S3, H3 }
                          if (_Q3.f32[0] <= 3.5)
                          {
                            v537 = 0.16 * 3.0;
                            a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                            if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                              goto LABEL_505;
                          }
                          else if (_Q3.f32[0] <= 4.5)
                          {
                            v537 = (float)((float)((float)(_Q3.f32[0] + -3.5)
                                                 * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                         + 0.16)
                                 * 3.0;
                            a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                            if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v537)
                              goto LABEL_505;
                          }
                          else
                          {
                            v537 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                            a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                            if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v537)
                              goto LABEL_505;
                          }
                          _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                          _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                          __asm { FCVT            S0, H0 }
                          if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                          {
                            if ((float)(v537 + v537) < a9.f32[0])
                              a9.f32[0] = v537 + v537;
                            v17 = 1.0 - (float)(a9.f32[0] / (float)(v537 + v537));
                          }
                        }
                      }
                    }
                  }
                  LOBYTE(v669) = v122;
                  BYTE1(v669) = v121;
                  BYTE2(v669) = v110;
                  HIBYTE(v669) = v122 + 1;
                  LOBYTE(v670) = v121;
                  BYTE1(v670) = v612;
                  v330 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                  if (v640 == v330)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                    v331 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v331 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v332 = qword_255795648;
                      for (nn = qword_255795650; v332 != nn; v332 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v332)(*(_QWORD *)(v332 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    v334 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v334 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  sub_223A86594(a7, &v726, *((unsigned __int16 *)v330 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                  v335.i16[0] = *v638;
                  a8 = (float32x4_t)vmovl_s16(v335);
                  a8.f32[0] = (float)a8.i32[0];
                  v110 = v663;
                }
              }
LABEL_505:
              v336 = 4 * (v611 + v122);
              v337 = (_BYTE *)(a5 + v336 + 2);
              a9.i16[0] = *(_WORD *)(a5 + v336);
              a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
              a9.f32[0] = (float)a9.i32[0];
              if (*v337)
                v338 = a9.f32[0];
              else
                v338 = 3.4028e38;
              if (v338 != 3.4028e38)
              {
                a9.f32[0] = v338 * a8.f32[0];
                if ((float)(v338 * a8.f32[0]) <= 0.0)
                {
                  v339 = 0.5;
                  if (vabds_f32(v338, a8.f32[0]) >= 0.00000001)
                    v339 = (float)-a8.f32[0] / (float)(v338 - a8.f32[0]);
                  v17 = 1.0;
                  _Q3.f32[0] = (float)v122;
                  a12 = _Q3;
                  a12.i32[1] = v656.i32[0];
                  a12.i32[2] = v654.i32[0];
                  _Q3.f32[1] = (float)(v121 + 1);
                  a13.i32[1] = v613.i32[1];
                  _Q3.i32[2] = v613.i32[0];
                  v340 = vmlaq_n_f32(vmulq_n_f32(a12, 1.0 - v339), _Q3, v339);
                  v341 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v341);
                  _Q3.f32[2] = (float)v341[1].i32[0];
                  v342 = vaddq_f32(v340, _Q3);
                  _Q3 = v658;
                  v343 = (int8x16_t)vmulq_n_f32(v342, v658.f32[0]);
                  v727 = v343.i32[2];
                  v726 = v343.i64[0];
                  if (v339 <= 0.5)
                    v337 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  LOBYTE(v15) = *v337;
                  if (v652)
                  {
                    _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                    a13.i32[0] = *(_DWORD *)(a3 + 136);
                    a14 = *(float32x2_t *)(a3 + 144);
                    a15.i32[0] = *(_DWORD *)(a3 + 152);
                    *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v343.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v343.i8, 1), a14, (float32x4_t)v343, 2);
                    v344 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v343.i8), a13, *(float32x2_t *)v343.i8, 1);
                    v345 = (float32x4_t)vextq_s8(v343, v343, 8uLL);
                    *(float32x2_t *)&a9.u32[2] = vmla_f32(v344, *(float32x2_t *)v345.f32, a15);
                    v345.i64[0] = *(_QWORD *)(a3 + 160);
                    v345.i32[2] = *(_DWORD *)(a3 + 168);
                    _Q2 = vaddq_f32(a9, v345);
                    if (_Q2.f32[2] > 0.000001)
                    {
                      v346 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                      v347 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v346, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                      LODWORD(v346) = *(_DWORD *)(a3 + 264);
                      v348 = (double)v346 + -0.5;
                      *(float *)&v348 = v348;
                      if (v347.f32[0] >= -0.5 && v347.f32[0] < *(float *)&v348)
                      {
                        LODWORD(v348) = *(_DWORD *)(a3 + 268);
                        *(float *)&v348 = (double)*(unint64_t *)&v348 + -0.5;
                        if (v347.f32[1] >= -0.5 && v347.f32[1] < *(float *)&v348)
                        {
                          *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v347, (float32x2_t)0x3F0000003F000000)));
                          v538 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                          *(int32x2_t *)a12.f32 = vdup_lane_s32(v538, 1);
                          *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v538);
                          _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                          __asm { FCVT            S3, H3 }
                          if (_Q3.f32[0] <= 3.5)
                          {
                            v539 = 0.16 * 3.0;
                            a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                            if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                              goto LABEL_535;
                          }
                          else if (_Q3.f32[0] <= 4.5)
                          {
                            v539 = (float)((float)((float)(_Q3.f32[0] + -3.5)
                                                 * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                         + 0.16)
                                 * 3.0;
                            a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                            if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v539)
                              goto LABEL_535;
                          }
                          else
                          {
                            v539 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                            a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                            if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v539)
                              goto LABEL_535;
                          }
                          _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                          _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                          __asm { FCVT            S0, H0 }
                          if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                          {
                            if ((float)(v539 + v539) < a9.f32[0])
                              a9.f32[0] = v539 + v539;
                            v17 = 1.0 - (float)(a9.f32[0] / (float)(v539 + v539));
                          }
                        }
                      }
                    }
                  }
                  LOBYTE(v669) = v122;
                  BYTE1(v669) = v121;
                  BYTE2(v669) = v110;
                  HIBYTE(v669) = v122;
                  LOBYTE(v670) = v121 + 1;
                  BYTE1(v670) = v612;
                  v351 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                  if (v640 == v351)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                    v352 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v352 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v353 = qword_255795648;
                      for (i1 = qword_255795650; v353 != i1; v353 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v353)(*(_QWORD *)(v353 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    v355 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v355 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  sub_223A86594(a7, &v726, *((unsigned __int16 *)v351 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                  v356.i16[0] = *v638;
                  a8 = (float32x4_t)vmovl_s16(v356);
                  a8.f32[0] = (float)a8.i32[0];
                  v110 = v663;
                }
              }
LABEL_535:
              v357 = 4 * (v611 + v314);
              v358 = (_BYTE *)(a5 + v357 + 2);
              a9.i16[0] = *(_WORD *)(a5 + v357);
              a9 = (float32x4_t)vmovl_s16(*(int16x4_t *)a9.f32);
              a9.f32[0] = (float)a9.i32[0];
              if (*v358)
                v359 = a9.f32[0];
              else
                v359 = 3.4028e38;
              if (v359 != 3.4028e38)
              {
                a9.f32[0] = v359 * a8.f32[0];
                if ((float)(v359 * a8.f32[0]) <= 0.0)
                {
                  v360 = 0.5;
                  if (vabds_f32(v359, a8.f32[0]) >= 0.00000001)
                    v360 = (float)-a8.f32[0] / (float)(v359 - a8.f32[0]);
                  v17 = 1.0;
                  _Q2.f32[0] = (float)v122;
                  _Q2.i32[1] = v656.i32[0];
                  _Q2.i32[2] = v654.i32[0];
                  _Q3.f32[0] = (float)v314;
                  _Q3.f32[1] = (float)(v121 + 1);
                  a12 = v613;
                  _Q3.i64[1] = __PAIR64__(v654.u32[3], v613.u32[0]);
                  v361 = vmlaq_n_f32(vmulq_n_f32(_Q2, 1.0 - v360), _Q3, v360);
                  v362 = *(int32x2_t **)(a5 + 2920);
                  *(float32x2_t *)_Q2.f32 = vcvt_f32_s32(*v362);
                  _Q2.f32[2] = (float)v362[1].i32[0];
                  v363 = vaddq_f32(v361, _Q2);
                  _Q2 = v658;
                  v364 = (int8x16_t)vmulq_n_f32(v363, v658.f32[0]);
                  v727 = v364.i32[2];
                  v726 = v364.i64[0];
                  if (v360 <= 0.5)
                    v358 = (_BYTE *)(a5 + 4 * (v122 + v629 + v651) + 2);
                  LOBYTE(v15) = *v358;
                  if (v652)
                  {
                    _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                    a12.i32[0] = *(_DWORD *)(a3 + 136);
                    a13 = *(float32x2_t *)(a3 + 144);
                    a14.i32[0] = *(_DWORD *)(a3 + 152);
                    *(float32x2_t *)v365.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v364.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v364.i8, 1), a13, (float32x4_t)v364, 2);
                    v366 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v364.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v364.i8, 1);
                    a8 = (float32x4_t)vextq_s8(v364, v364, 8uLL);
                    *(float32x2_t *)&v365.u32[2] = vmla_f32(v366, *(float32x2_t *)a8.f32, a14);
                    a8.i64[0] = *(_QWORD *)(a3 + 160);
                    a8.i32[2] = *(_DWORD *)(a3 + 168);
                    a9 = vaddq_f32(v365, a8);
                    if (a9.f32[2] > 0.000001)
                    {
                      v367 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                      v368 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v367, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                      LODWORD(v367) = *(_DWORD *)(a3 + 264);
                      v369 = (double)v367 + -0.5;
                      *(float *)&v369 = v369;
                      if (v368.f32[0] >= -0.5 && v368.f32[0] < *(float *)&v369)
                      {
                        LODWORD(v369) = *(_DWORD *)(a3 + 268);
                        *(float *)&v369 = (double)*(unint64_t *)&v369 + -0.5;
                        if (v368.f32[1] >= -0.5 && v368.f32[1] < *(float *)&v369)
                        {
                          *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v368, (float32x2_t)0x3F0000003F000000)));
                          v540 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                          *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v540, 1);
                          *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v540);
                          _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                          __asm { FCVT            S2, H2 }
                          if (_Q2.f32[0] <= 3.5)
                          {
                            v541 = 0.16 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > (float)(0.16 * 3.0))
                              goto LABEL_749;
                          }
                          else if (_Q2.f32[0] <= 4.5)
                          {
                            v541 = (float)((float)((float)(_Q2.f32[0] + -3.5)
                                                 * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                         + 0.16)
                                 * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v541)
                              goto LABEL_749;
                          }
                          else
                          {
                            v541 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                            a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                            if ((float)(_Q2.f32[0] - a9.f32[2]) > v541)
                              goto LABEL_749;
                          }
                          _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                          _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80)
                                                + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                          __asm { FCVT            S1, H1 }
                          if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                          {
                            if ((float)(v541 + v541) < a8.f32[0])
                              a8.f32[0] = v541 + v541;
                            v17 = 1.0 - (float)(a8.f32[0] / (float)(v541 + v541));
                          }
                        }
                      }
                    }
                  }
                  LOBYTE(v669) = v122;
                  BYTE1(v669) = v121;
                  BYTE2(v669) = v110;
                  HIBYTE(v669) = v122 + 1;
                  LOBYTE(v670) = v121 + 1;
                  BYTE1(v670) = v612;
                  v372 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                  if (v640 == v372)
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                    v373 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v373 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v374 = qword_255795648;
                      for (i2 = qword_255795650; v374 != i2; v374 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v374)(*(_QWORD *)(v374 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    v376 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v376 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      abort();
                    qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  goto LABEL_747;
                }
              }
              goto LABEL_749;
            }
            v429 = a5 + 4 * (v636 + v122);
            if (!*(_BYTE *)(v429 + 2))
              goto LABEL_749;
            v430 = (v122 + 1) & 0x7FFFFFFE;
            if (v124 != 1)
              v430 = v122 + 1;
            v431 = v121 & 0x7FFFFFFE;
            if (v124 != 1)
              v431 = v121;
            v432 = v614;
            if (v124 == 1)
            {
              v433 = v608;
            }
            else
            {
              v432 = v110;
              v433 = v651;
            }
            if (v124 == 1)
              v434 = 9 * (v121 & 0x7FFFFFFE);
            else
              v434 = 9 * v121;
            a8.i16[0] = *(_WORD *)v429;
            a8 = (float32x4_t)vmovl_s16(*(int16x4_t *)a8.f32);
            a8.f32[0] = (float)a8.i32[0];
            v435 = 4 * (v433 + v430 + v434);
            v436 = (_BYTE *)(a5 + v435 + 2);
            a9.i16[0] = *(_WORD *)(a5 + v435);
            a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
            a9.f32[0] = (float)a9.i32[0];
            if (*v436)
              v437 = a9.f32[0];
            else
              v437 = 3.4028e38;
            if (v437 != 3.4028e38)
            {
              a9.f32[0] = v437 * a8.f32[0];
              if ((float)(v437 * a8.f32[0]) <= 0.0)
              {
                v438 = 0.5;
                if (vabds_f32(v437, a8.f32[0]) >= 0.00000001)
                  v438 = (float)-a8.f32[0] / (float)(v437 - a8.f32[0]);
                v17 = 1.0;
                _Q3.f32[0] = (float)v122;
                _Q3.i32[1] = v656.i32[0];
                a12.i32[3] = v654.i32[3];
                _Q3.i32[2] = v654.i32[0];
                a12.f32[0] = (float)v430;
                a12.f32[1] = (float)v431;
                a12.f32[2] = (float)v432;
                v439 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v438), a12, v438);
                v440 = *(int32x2_t **)(a5 + 2920);
                *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v440);
                _Q3.f32[2] = (float)v440[1].i32[0];
                v441 = vaddq_f32(v439, _Q3);
                _Q3 = v658;
                v442 = (int8x16_t)vmulq_n_f32(v441, v658.f32[0]);
                v727 = v442.i32[2];
                v726 = v442.i64[0];
                if (v438 <= 0.5)
                  v436 = (_BYTE *)(v429 + 2);
                LOBYTE(v15) = *v436;
                if (!v652)
                  goto LABEL_663;
                _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                a13.i32[0] = *(_DWORD *)(a3 + 136);
                a14 = *(float32x2_t *)(a3 + 144);
                a15.i32[0] = *(_DWORD *)(a3 + 152);
                *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v442.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v442.i8, 1), a14, (float32x4_t)v442, 2);
                v443 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v442.i8), a13, *(float32x2_t *)v442.i8, 1);
                v444 = (float32x4_t)vextq_s8(v442, v442, 8uLL);
                *(float32x2_t *)&a9.u32[2] = vmla_f32(v443, *(float32x2_t *)v444.f32, a15);
                v444.i64[0] = *(_QWORD *)(a3 + 160);
                v444.i32[2] = *(_DWORD *)(a3 + 168);
                _Q2 = vaddq_f32(a9, v444);
                if (_Q2.f32[2] <= 0.000001)
                  goto LABEL_663;
                v445 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                v446 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v445, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                LODWORD(v445) = *(_DWORD *)(a3 + 264);
                v447 = (double)v445 + -0.5;
                *(float *)&v447 = v447;
                v448 = v446.f32[0] >= -0.5 && v446.f32[0] < *(float *)&v447;
                if (!v448
                  || ((LODWORD(v447) = *(_DWORD *)(a3 + 268),
                       *(float *)&v447 = (double)*(unint64_t *)&v447 + -0.5,
                       v446.f32[1] >= -0.5)
                    ? (v449 = v446.f32[1] < *(float *)&v447)
                    : (v449 = 0),
                      !v449))
                {
LABEL_663:
                  v450 = v125;
                  goto LABEL_664;
                }
                *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v446, (float32x2_t)0x3F0000003F000000)));
                v518 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                *(int32x2_t *)a12.f32 = vdup_lane_s32(v518, 1);
                *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v518);
                _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                __asm { FCVT            S3, H3 }
                if (_Q3.f32[0] <= 3.5)
                {
                  v519 = 0.16 * 3.0;
                  a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                  if ((float)(_Q3.f32[0] - _Q2.f32[2]) <= (float)(0.16 * 3.0))
                  {
LABEL_932:
                    v450 = v125;
                    _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                    _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                    __asm { FCVT            S0, H0 }
                    if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                    {
                      if ((float)(v519 + v519) < a9.f32[0])
                        a9.f32[0] = v519 + v519;
                      v17 = 1.0 - (float)(a9.f32[0] / (float)(v519 + v519));
                    }
LABEL_664:
                    LOBYTE(v669) = v122;
                    BYTE1(v669) = v121;
                    BYTE2(v669) = v110;
                    HIBYTE(v669) = v430;
                    LOBYTE(v670) = v431;
                    BYTE1(v670) = v432;
                    v451 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                    if (v640 == v451)
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                      v452 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v452 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v453 = qword_255795648;
                        for (i3 = qword_255795650; v453 != i3; v453 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v453)(*(_QWORD *)(v453 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                      }
                      v455 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v455 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        abort();
                      qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                    }
                    sub_223A86594(a7, &v726, *((unsigned __int16 *)v451 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                    v456.i16[0] = *(_WORD *)v429;
                    a8 = (float32x4_t)vmovl_s16(v456);
                    a8.f32[0] = (float)a8.i32[0];
                    v125 = v450;
                    v110 = v663;
                  }
                }
                else if (_Q3.f32[0] <= 4.5)
                {
                  v519 = (float)((float)((float)(_Q3.f32[0] + -3.5) * (float)(v600 * (float)(_Q3.f32[0] + -3.5))) + 0.16)
                       * 3.0;
                  a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                  if ((float)(_Q3.f32[0] - _Q2.f32[2]) <= v519)
                    goto LABEL_932;
                }
                else
                {
                  v519 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                  a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                  if ((float)(_Q3.f32[0] - _Q2.f32[2]) <= v519)
                    goto LABEL_932;
                }
              }
            }
            if (v125 == 1)
              v457 = v122 & 6;
            else
              v457 = v122;
            v458 = v121 + 1;
            if (v125 == 1)
              v458 = (v121 + 1) & 0xFFFFFFFE;
            v459 = v614;
            if (v125 != 1)
              v459 = v110;
            v460 = 4 * (9 * v458 + v457 + 81 * v459);
            v461 = (_BYTE *)(a5 + v460 + 2);
            a9.i16[0] = *(_WORD *)(a5 + v460);
            a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
            a9.f32[0] = (float)a9.i32[0];
            if (*v461)
              v462 = a9.f32[0];
            else
              v462 = 3.4028e38;
            if (v462 != 3.4028e38)
            {
              a9.f32[0] = v462 * a8.f32[0];
              if ((float)(v462 * a8.f32[0]) <= 0.0)
              {
                v463 = 0.5;
                if (vabds_f32(v462, a8.f32[0]) >= 0.00000001)
                  v463 = (float)-a8.f32[0] / (float)(v462 - a8.f32[0]);
                v17 = 1.0;
                _Q3.f32[0] = (float)v122;
                _Q3.i32[1] = v656.i32[0];
                a12.i32[3] = v654.i32[3];
                _Q3.i32[2] = v654.i32[0];
                a12.f32[0] = (float)v457;
                a12.f32[1] = (float)v458;
                a12.f32[2] = (float)v459;
                v464 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v463), a12, v463);
                v465 = *(int32x2_t **)(a5 + 2920);
                *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v465);
                _Q3.f32[2] = (float)v465[1].i32[0];
                v466 = vaddq_f32(v464, _Q3);
                _Q3 = v658;
                v467 = (int8x16_t)vmulq_n_f32(v466, v658.f32[0]);
                v727 = v467.i32[2];
                v726 = v467.i64[0];
                if (v463 <= 0.5)
                  v461 = (_BYTE *)(v429 + 2);
                LOBYTE(v15) = *v461;
                if (v652)
                {
                  _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                  a13.i32[0] = *(_DWORD *)(a3 + 136);
                  a14 = *(float32x2_t *)(a3 + 144);
                  a15.i32[0] = *(_DWORD *)(a3 + 152);
                  *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v467.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v467.i8, 1), a14, (float32x4_t)v467, 2);
                  v468 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v467.i8), a13, *(float32x2_t *)v467.i8, 1);
                  v469 = (float32x4_t)vextq_s8(v467, v467, 8uLL);
                  *(float32x2_t *)&a9.u32[2] = vmla_f32(v468, *(float32x2_t *)v469.f32, a15);
                  v469.i64[0] = *(_QWORD *)(a3 + 160);
                  v469.i32[2] = *(_DWORD *)(a3 + 168);
                  _Q2 = vaddq_f32(a9, v469);
                  if (_Q2.f32[2] > 0.000001)
                  {
                    v470 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                    v471 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v470, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                    LODWORD(v470) = *(_DWORD *)(a3 + 264);
                    v472 = (double)v470 + -0.5;
                    *(float *)&v472 = v472;
                    if (v471.f32[0] >= -0.5 && v471.f32[0] < *(float *)&v472)
                    {
                      LODWORD(v472) = *(_DWORD *)(a3 + 268);
                      *(float *)&v472 = (double)*(unint64_t *)&v472 + -0.5;
                      if (v471.f32[1] >= -0.5 && v471.f32[1] < *(float *)&v472)
                      {
                        *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v471, (float32x2_t)0x3F0000003F000000)));
                        v520 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                        *(int32x2_t *)a12.f32 = vdup_lane_s32(v520, 1);
                        *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v520);
                        _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                        __asm { FCVT            S3, H3 }
                        if (_Q3.f32[0] <= 3.5)
                        {
                          v521 = 0.16 * 3.0;
                          a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                          if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                            goto LABEL_711;
                        }
                        else if (_Q3.f32[0] <= 4.5)
                        {
                          v521 = (float)((float)((float)(_Q3.f32[0] + -3.5) * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                       + 0.16)
                               * 3.0;
                          a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                          if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v521)
                            goto LABEL_711;
                        }
                        else
                        {
                          v521 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                          a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                          if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v521)
                            goto LABEL_711;
                        }
                        _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                        _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                        __asm { FCVT            S0, H0 }
                        if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                        {
                          if ((float)(v521 + v521) < a9.f32[0])
                            a9.f32[0] = v521 + v521;
                          v17 = 1.0 - (float)(a9.f32[0] / (float)(v521 + v521));
                        }
                      }
                    }
                  }
                }
                LOBYTE(v669) = v122;
                BYTE1(v669) = v121;
                BYTE2(v669) = v110;
                HIBYTE(v669) = v457;
                LOBYTE(v670) = v458;
                BYTE1(v670) = v459;
                v475 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                if (v640 == v475)
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                  v476 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v476 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v477 = qword_255795648;
                    for (i4 = qword_255795650; v477 != i4; v477 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v477)(*(_QWORD *)(v477 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  v479 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v479 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    abort();
                  qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                }
                sub_223A86594(a7, &v726, *((unsigned __int16 *)v475 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
                v480.i16[0] = *(_WORD *)v429;
                a8 = (float32x4_t)vmovl_s16(v480);
                a8.f32[0] = (float)a8.i32[0];
                v110 = v663;
              }
            }
LABEL_711:
            if (v644 == 1)
              v481 = v122 & 6;
            else
              v481 = v122;
            v482 = v121 & 0x7FFFFFFE;
            if (v644 != 1)
              v482 = v121;
            v483 = v616;
            if (v644 == 1)
              v483 = v607;
            v484 = 4 * (9 * v482 + v481 + 81 * v483);
            v485 = (_BYTE *)(a5 + v484 + 2);
            a9.i16[0] = *(_WORD *)(a5 + v484);
            a9 = (float32x4_t)vmovl_s16(*(int16x4_t *)a9.f32);
            a9.f32[0] = (float)a9.i32[0];
            if (*v485)
              v486 = a9.f32[0];
            else
              v486 = 3.4028e38;
            if (v486 != 3.4028e38)
            {
              a9.f32[0] = v486 * a8.f32[0];
              if ((float)(v486 * a8.f32[0]) <= 0.0)
              {
                v487 = 0.5;
                if (vabds_f32(v486, a8.f32[0]) >= 0.00000001)
                  v487 = (float)-a8.f32[0] / (float)(v486 - a8.f32[0]);
                v17 = 1.0;
                _Q2.f32[0] = (float)v122;
                _Q2.i32[1] = v656.i32[0];
                _Q3.i32[3] = v654.i32[3];
                _Q2.i32[2] = v654.i32[0];
                _Q3.f32[0] = (float)v481;
                _Q3.f32[1] = (float)v482;
                _Q3.f32[2] = (float)v483;
                v488 = vmlaq_n_f32(vmulq_n_f32(_Q2, 1.0 - v487), _Q3, v487);
                v489 = *(int32x2_t **)(a5 + 2920);
                *(float32x2_t *)_Q2.f32 = vcvt_f32_s32(*v489);
                _Q2.f32[2] = (float)v489[1].i32[0];
                v490 = vaddq_f32(v488, _Q2);
                _Q2 = v658;
                v491 = (int8x16_t)vmulq_n_f32(v490, v658.f32[0]);
                v727 = v491.i32[2];
                v726 = v491.i64[0];
                if (v487 <= 0.5)
                  v485 = (_BYTE *)(v429 + 2);
                LOBYTE(v15) = *v485;
                if (v652)
                {
                  _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                  a12.i32[0] = *(_DWORD *)(a3 + 136);
                  a13 = *(float32x2_t *)(a3 + 144);
                  a14.i32[0] = *(_DWORD *)(a3 + 152);
                  *(float32x2_t *)v492.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v491.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v491.i8, 1), a13, (float32x4_t)v491, 2);
                  v493 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v491.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v491.i8, 1);
                  a8 = (float32x4_t)vextq_s8(v491, v491, 8uLL);
                  *(float32x2_t *)&v492.u32[2] = vmla_f32(v493, *(float32x2_t *)a8.f32, a14);
                  a8.i64[0] = *(_QWORD *)(a3 + 160);
                  a8.i32[2] = *(_DWORD *)(a3 + 168);
                  a9 = vaddq_f32(v492, a8);
                  if (a9.f32[2] > 0.000001)
                  {
                    v494 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                    v495 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v494, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                    LODWORD(v494) = *(_DWORD *)(a3 + 264);
                    v496 = (double)v494 + -0.5;
                    *(float *)&v496 = v496;
                    if (v495.f32[0] >= -0.5 && v495.f32[0] < *(float *)&v496)
                    {
                      LODWORD(v496) = *(_DWORD *)(a3 + 268);
                      *(float *)&v496 = (double)*(unint64_t *)&v496 + -0.5;
                      if (v495.f32[1] >= -0.5 && v495.f32[1] < *(float *)&v496)
                      {
                        *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v495, (float32x2_t)0x3F0000003F000000)));
                        v522 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                        *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v522, 1);
                        *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v522);
                        _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                        __asm { FCVT            S2, H2 }
                        if (_Q2.f32[0] <= 3.5)
                        {
                          v523 = 0.16 * 3.0;
                          a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                          if ((float)(_Q2.f32[0] - a9.f32[2]) > (float)(0.16 * 3.0))
                            goto LABEL_749;
                        }
                        else if (_Q2.f32[0] <= 4.5)
                        {
                          v523 = (float)((float)((float)(_Q2.f32[0] + -3.5) * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                       + 0.16)
                               * 3.0;
                          a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                          if ((float)(_Q2.f32[0] - a9.f32[2]) > v523)
                            goto LABEL_749;
                        }
                        else
                        {
                          v523 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                          a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                          if ((float)(_Q2.f32[0] - a9.f32[2]) > v523)
                            goto LABEL_749;
                        }
                        _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                        _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                        __asm { FCVT            S1, H1 }
                        if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                        {
                          if ((float)(v523 + v523) < a8.f32[0])
                            a8.f32[0] = v523 + v523;
                          v17 = 1.0 - (float)(a8.f32[0] / (float)(v523 + v523));
                        }
                      }
                    }
                  }
                }
                LOBYTE(v669) = v122;
                BYTE1(v669) = v121;
                BYTE2(v669) = v110;
                HIBYTE(v669) = v481;
                LOBYTE(v670) = v482;
                BYTE1(v670) = v483;
                v372 = sub_223A39978(v642, (unsigned __int8 *)&v669);
                if (v640 == v372)
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/EdgeOwnerTable.cpp", 155, (uint64_t)"iter != bridge_edge_map_.end()", 30, (uint64_t)"Should be able to find it.", 26, (void (*)(void **))sub_22457406C);
                  v499 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v499 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v500 = qword_255795648;
                    for (i5 = qword_255795650; v500 != i5; v500 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v500)(*(_QWORD *)(v500 + 8), "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                  }
                  v502 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v502 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    abort();
                  qword_255795660(*(_QWORD *)algn_255795668, "iter != bridge_edge_map_.end()", 30, "Should be able to find it.", 26);
                }
LABEL_747:
                sub_223A86594(a7, &v726, *((unsigned __int16 *)v372 + 16), (float)((float)LODWORD(v15) / 255.0) * v17);
LABEL_748:
                v110 = v663;
                goto LABEL_749;
              }
            }
            goto LABEL_749;
          }
          v377 = a5 + 4 * (v122 + v636);
          if (!*(_BYTE *)(v377 + 2))
            goto LABEL_749;
          a8.i16[0] = *(_WORD *)v377;
          a8 = (float32x4_t)vmovl_s16(*(int16x4_t *)a8.f32);
          a8.f32[0] = (float)a8.i32[0];
          v378 = 4 * (v122 + v666 + v636);
          v379 = (_BYTE *)(a5 + v378 + 2);
          a9.i16[0] = *(_WORD *)(a5 + v378);
          a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
          a9.f32[0] = (float)a9.i32[0];
          if (*v379)
            v380 = a9.f32[0];
          else
            v380 = 3.4028e38;
          if (v380 != 3.4028e38)
          {
            a9.f32[0] = v380 * a8.f32[0];
            if ((float)(v380 * a8.f32[0]) <= 0.0)
            {
              v381 = 0.5;
              if (vabds_f32(v380, a8.f32[0]) >= 0.00000001)
                v381 = (float)-a8.f32[0] / (float)(v380 - a8.f32[0]);
              v15 = 1.0;
              _Q3.f32[0] = (float)v122;
              a13.i32[1] = v654.i32[1];
              _Q3.i32[1] = v656.i32[0];
              _Q3.i32[2] = v654.i32[0];
              a12.f32[0] = (float)(v122 + v666);
              a12.i32[1] = v656.i32[0];
              a12.i32[2] = v654.i32[0];
              v382 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v381), a12, v381);
              v383 = *(int32x2_t **)(a5 + 2920);
              *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v383);
              _Q3.f32[2] = (float)v383[1].i32[0];
              v384 = vaddq_f32(v382, _Q3);
              _Q3 = v658;
              v385 = (int8x16_t)vmulq_n_f32(v384, v658.f32[0]);
              v727 = v385.i32[2];
              v726 = v385.i64[0];
              if (v381 <= 0.5)
                v379 = (_BYTE *)(v377 + 2);
              LOBYTE(v17) = *v379;
              if (v652)
              {
                _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                a13.i32[0] = *(_DWORD *)(a3 + 136);
                a14 = *(float32x2_t *)(a3 + 144);
                a15.i32[0] = *(_DWORD *)(a3 + 152);
                *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v385.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v385.i8, 1), a14, (float32x4_t)v385, 2);
                v386 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v385.i8), a13, *(float32x2_t *)v385.i8, 1);
                v387 = (float32x4_t)vextq_s8(v385, v385, 8uLL);
                *(float32x2_t *)&a9.u32[2] = vmla_f32(v386, *(float32x2_t *)v387.f32, a15);
                v387.i64[0] = *(_QWORD *)(a3 + 160);
                v387.i32[2] = *(_DWORD *)(a3 + 168);
                _Q2 = vaddq_f32(a9, v387);
                if (_Q2.f32[2] > 0.000001)
                {
                  v388 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                  v389 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v388, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                  LODWORD(v388) = *(_DWORD *)(a3 + 264);
                  v390 = (double)v388 + -0.5;
                  *(float *)&v390 = v390;
                  if (v389.f32[0] >= -0.5 && v389.f32[0] < *(float *)&v390)
                  {
                    LODWORD(v390) = *(_DWORD *)(a3 + 268);
                    *(float *)&v390 = (double)*(unint64_t *)&v390 + -0.5;
                    if (v389.f32[1] >= -0.5 && v389.f32[1] < *(float *)&v390)
                    {
                      *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v389, (float32x2_t)0x3F0000003F000000)));
                      v512 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                      *(int32x2_t *)a12.f32 = vdup_lane_s32(v512, 1);
                      *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v512);
                      _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                      __asm { FCVT            S3, H3 }
                      if (_Q3.f32[0] <= 3.5)
                      {
                        v513 = 0.16 * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                          goto LABEL_588;
                      }
                      else if (_Q3.f32[0] <= 4.5)
                      {
                        v513 = (float)((float)((float)(_Q3.f32[0] + -3.5) * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                     + 0.16)
                             * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v513)
                          goto LABEL_588;
                      }
                      else
                      {
                        v513 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v513)
                          goto LABEL_588;
                      }
                      _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                      _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                      __asm { FCVT            S0, H0 }
                      if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                      {
                        if ((float)(v513 + v513) < a9.f32[0])
                          a9.f32[0] = v513 + v513;
                        v15 = 1.0 - (float)(a9.f32[0] / (float)(v513 + v513));
                      }
                    }
                  }
                }
              }
              v393 = atomic_load((unsigned __int8 *)&qword_255795040);
              if ((v393 & 1) == 0 && __cxa_guard_acquire(&qword_255795040))
              {
                qword_255795038 = 0x19000500510009;
                __cxa_guard_release(&qword_255795040);
              }
              sub_223A86594(a7, &v726, (unsigned __int16)(3 * ((v122 >> v667) + v623 * *v619 + v620 * *v618)+ *(_WORD *)&v617[2 * v667]), (float)((float)LODWORD(v17) / 255.0) * v15);
              v394.i16[0] = *(_WORD *)v377;
              a8 = (float32x4_t)vmovl_s16(v394);
              a8.f32[0] = (float)a8.i32[0];
              v110 = v663;
            }
          }
LABEL_588:
          v395 = 4 * (9 * (v121 + v666) + v651 + v122);
          v396 = (_BYTE *)(a5 + v395 + 2);
          a9.i16[0] = *(_WORD *)(a5 + v395);
          a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
          a9.f32[0] = (float)a9.i32[0];
          if (*v396)
            v397 = a9.f32[0];
          else
            v397 = 3.4028e38;
          if (v397 != 3.4028e38)
          {
            a9.f32[0] = a8.f32[0] * v397;
            if ((float)(a8.f32[0] * v397) <= 0.0)
            {
              v398 = 0.5;
              if (vabds_f32(v397, a8.f32[0]) >= 0.00000001)
                v398 = (float)-a8.f32[0] / (float)(v397 - a8.f32[0]);
              v15 = 1.0;
              _Q3.f32[0] = (float)v122;
              a12 = _Q3;
              a12.i32[1] = v656.i32[0];
              a13.i32[1] = v654.i32[1];
              a12.i32[2] = v654.i32[0];
              _Q3.f32[1] = (float)(v121 + v666);
              _Q3.i32[2] = v654.i32[0];
              v399 = vmlaq_n_f32(vmulq_n_f32(a12, 1.0 - v398), _Q3, v398);
              v400 = *(int32x2_t **)(a5 + 2920);
              *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v400);
              _Q3.f32[2] = (float)v400[1].i32[0];
              v401 = vaddq_f32(v399, _Q3);
              _Q3 = v658;
              v402 = (int8x16_t)vmulq_n_f32(v401, v658.f32[0]);
              v727 = v402.i32[2];
              v726 = v402.i64[0];
              if (v398 <= 0.5)
                v396 = (_BYTE *)(v377 + 2);
              LOBYTE(v17) = *v396;
              if (v652)
              {
                _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                a13.i32[0] = *(_DWORD *)(a3 + 136);
                a14 = *(float32x2_t *)(a3 + 144);
                a15.i32[0] = *(_DWORD *)(a3 + 152);
                *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v402.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v402.i8, 1), a14, (float32x4_t)v402, 2);
                v403 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v402.i8), a13, *(float32x2_t *)v402.i8, 1);
                v404 = (float32x4_t)vextq_s8(v402, v402, 8uLL);
                *(float32x2_t *)&a9.u32[2] = vmla_f32(v403, *(float32x2_t *)v404.f32, a15);
                v404.i64[0] = *(_QWORD *)(a3 + 160);
                v404.i32[2] = *(_DWORD *)(a3 + 168);
                _Q2 = vaddq_f32(a9, v404);
                if (_Q2.f32[2] > 0.000001)
                {
                  v405 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                  v406 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v405, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                  LODWORD(v405) = *(_DWORD *)(a3 + 264);
                  v407 = (double)v405 + -0.5;
                  *(float *)&v407 = v407;
                  if (v406.f32[0] >= -0.5 && v406.f32[0] < *(float *)&v407)
                  {
                    LODWORD(v407) = *(_DWORD *)(a3 + 268);
                    *(float *)&v407 = (double)*(unint64_t *)&v407 + -0.5;
                    if (v406.f32[1] >= -0.5 && v406.f32[1] < *(float *)&v407)
                    {
                      *(int32x2_t *)_Q2.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v406, (float32x2_t)0x3F0000003F000000)));
                      v514 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)_Q2.f32);
                      *(int32x2_t *)a12.f32 = vdup_lane_s32(v514, 1);
                      *(int32x2_t *)_Q3.f32 = vadd_s32(*(int32x2_t *)a12.f32, v514);
                      _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                      __asm { FCVT            S3, H3 }
                      if (_Q3.f32[0] <= 3.5)
                      {
                        v515 = 0.16 * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                          goto LABEL_610;
                      }
                      else if (_Q3.f32[0] <= 4.5)
                      {
                        v515 = (float)((float)((float)(_Q3.f32[0] + -3.5) * (float)(v600 * (float)(_Q3.f32[0] + -3.5)))
                                     + 0.16)
                             * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v515)
                          goto LABEL_610;
                      }
                      else
                      {
                        v515 = (float)(v599 + (float)(v601 * _Q3.f32[0])) * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v515)
                          goto LABEL_610;
                      }
                      _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)_Q2.f32);
                      _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                      __asm { FCVT            S0, H0 }
                      if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                      {
                        if ((float)(v515 + v515) < a9.f32[0])
                          a9.f32[0] = v515 + v515;
                        v15 = 1.0 - (float)(a9.f32[0] / (float)(v515 + v515));
                      }
                    }
                  }
                }
              }
              v410 = atomic_load((unsigned __int8 *)&qword_255795040);
              if ((v410 & 1) == 0 && __cxa_guard_acquire(&qword_255795040))
              {
                qword_255795038 = 0x19000500510009;
                __cxa_guard_release(&qword_255795040);
              }
              sub_223A86594(a7, &v726, (unsigned __int16)(*(_WORD *)&v617[2 * v667]+ 3 * ((v122 >> v667) + v623 * *v619 + v620 * *v618)+ 1), (float)((float)LODWORD(v17) / 255.0) * v15);
              v411.i16[0] = *(_WORD *)v377;
              a8 = (float32x4_t)vmovl_s16(v411);
              a8.f32[0] = (float)a8.i32[0];
              v110 = v663;
            }
          }
LABEL_610:
          v412 = 4 * (v602 + 9 * v121 + v122);
          v413 = (_BYTE *)(a5 + v412 + 2);
          a9.i16[0] = *(_WORD *)(a5 + v412);
          a9 = (float32x4_t)vmovl_s16(*(int16x4_t *)a9.f32);
          a9.f32[0] = (float)a9.i32[0];
          if (*v413)
            v414 = a9.f32[0];
          else
            v414 = 3.4028e38;
          if (v414 != 3.4028e38)
          {
            a9.f32[0] = a8.f32[0] * v414;
            if ((float)(a8.f32[0] * v414) <= 0.0)
            {
              v415 = 0.5;
              if (vabds_f32(v414, a8.f32[0]) >= 0.00000001)
                v415 = (float)-a8.f32[0] / (float)(v414 - a8.f32[0]);
              v15 = 1.0;
              _Q2.f32[0] = (float)v122;
              a12 = v654;
              _Q2.i32[1] = v656.i32[0];
              _Q3 = _Q2;
              _Q3.i32[2] = v654.i32[0];
              v416 = vmulq_n_f32(_Q3, 1.0 - v415);
              _Q3.i64[1] = v605.i64[1];
              _Q2.i32[2] = v605.i32[0];
              v417 = vmlaq_n_f32(v416, _Q2, v415);
              v418 = *(int32x2_t **)(a5 + 2920);
              *(float32x2_t *)_Q2.f32 = vcvt_f32_s32(*v418);
              _Q2.f32[2] = (float)v418[1].i32[0];
              v419 = vaddq_f32(v417, _Q2);
              _Q2 = v658;
              v420 = (int8x16_t)vmulq_n_f32(v419, v658.f32[0]);
              v727 = v420.i32[2];
              v726 = v420.i64[0];
              if (v415 <= 0.5)
                v413 = (_BYTE *)(v377 + 2);
              LOBYTE(v17) = *v413;
              if (v652)
              {
                _Q2.i32[0] = *(_DWORD *)(a3 + 120);
                a12.i32[0] = *(_DWORD *)(a3 + 136);
                a13 = *(float32x2_t *)(a3 + 144);
                a14.i32[0] = *(_DWORD *)(a3 + 152);
                *(float32x2_t *)v421.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v420.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v420.i8, 1), a13, (float32x4_t)v420, 2);
                v422 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v420.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v420.i8, 1);
                a8 = (float32x4_t)vextq_s8(v420, v420, 8uLL);
                *(float32x2_t *)&v421.u32[2] = vmla_f32(v422, *(float32x2_t *)a8.f32, a14);
                a8.i64[0] = *(_QWORD *)(a3 + 160);
                a8.i32[2] = *(_DWORD *)(a3 + 168);
                a9 = vaddq_f32(v421, a8);
                if (a9.f32[2] > 0.000001)
                {
                  v423 = (unint64_t)vmul_f32(*(float32x2_t *)a9.f32, *(float32x2_t *)(a3 + 192));
                  v424 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v423, (float32x2_t)vdup_laneq_s32((int32x4_t)a9, 2)));
                  LODWORD(v423) = *(_DWORD *)(a3 + 264);
                  v425 = (double)v423 + -0.5;
                  *(float *)&v425 = v425;
                  if (v424.f32[0] >= -0.5 && v424.f32[0] < *(float *)&v425)
                  {
                    LODWORD(v425) = *(_DWORD *)(a3 + 268);
                    *(float *)&v425 = (double)*(unint64_t *)&v425 + -0.5;
                    if (v424.f32[1] >= -0.5 && v424.f32[1] < *(float *)&v425)
                    {
                      *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v424, (float32x2_t)0x3F0000003F000000)));
                      v516 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
                      *(int32x2_t *)_Q3.f32 = vdup_lane_s32(v516, 1);
                      *(int32x2_t *)_Q2.f32 = vadd_s32(*(int32x2_t *)_Q3.f32, v516);
                      _Q2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q2.u32[0]);
                      __asm { FCVT            S2, H2 }
                      if (_Q2.f32[0] <= 3.5)
                      {
                        v517 = 0.16 * 3.0;
                        a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                        if ((float)(_Q2.f32[0] - a9.f32[2]) > (float)(0.16 * 3.0))
                          goto LABEL_749;
                      }
                      else if (_Q2.f32[0] <= 4.5)
                      {
                        v517 = (float)((float)((float)(_Q2.f32[0] + -3.5) * (float)(v600 * (float)(_Q2.f32[0] + -3.5)))
                                     + 0.16)
                             * 3.0;
                        a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                        if ((float)(_Q2.f32[0] - a9.f32[2]) > v517)
                          goto LABEL_749;
                      }
                      else
                      {
                        v517 = (float)(v599 + (float)(v601 * _Q2.f32[0])) * 3.0;
                        a8.f32[0] = _Q2.f32[0] - a9.f32[2];
                        if ((float)(_Q2.f32[0] - a9.f32[2]) > v517)
                          goto LABEL_749;
                      }
                      _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                      _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                      __asm { FCVT            S1, H1 }
                      if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                      {
                        if ((float)(v517 + v517) < a8.f32[0])
                          a8.f32[0] = v517 + v517;
                        v15 = 1.0 - (float)(a8.f32[0] / (float)(v517 + v517));
                      }
                    }
                  }
                }
              }
              v428 = atomic_load((unsigned __int8 *)&qword_255795040);
              if ((v428 & 1) == 0 && __cxa_guard_acquire(&qword_255795040))
              {
                qword_255795038 = 0x19000500510009;
                __cxa_guard_release(&qword_255795040);
              }
              sub_223A86594(a7, &v726, (unsigned __int16)(*(_WORD *)&v617[2 * v667]+ 3 * ((v122 >> v667) + v623 * *v619 + v620 * *v618)+ 2), (float)((float)LODWORD(v17) / 255.0) * v15);
              goto LABEL_748;
            }
          }
LABEL_749:
          if (v110 && v121 && v122)
          {
            v503 = v603 | (2 * (v121 == 8)) | (v122 == 8);
            v504 = v122 - v666;
            v669 = v122 - v666;
            v670 = v121 - v666;
            v671 = v657;
            v505 = v503 | (8 * v503);
            if (v672[v505])
            {
              if ((_DWORD)v667)
              {
                if (v603 & 1 | (v122 == 8))
                {
                  LODWORD(v726) = v504 + 1;
                  HIDWORD(v726) = v121 - v666;
                  v727 = v657;
                  sub_223A7FCCC(a5, (int *)&v726, &v672[(v628 | v627 | (v504 == 6) | (8 * (v628 | v627 | (v504 == 6)))) + 1], a1, a7);
                }
                if ((v603 | (2 * (v121 == 8))) & 3 | (v122 == 8))
                {
                  LODWORD(v726) = v504 + 1;
                  HIDWORD(v726) = v121 - v666 + 1;
                  v727 = v657;
                  sub_223A7FCCC(a5, (int *)&v726, &v672[(v633 | v627 | (v504 == 6) | (8 * (v633 | v627 | (v504 == 6)))) + 1], a1, a7);
                }
                if ((((v603 | (2 * (v121 == 8))) | (v122 == 8)) & 2) != 0)
                {
                  LODWORD(v726) = v122 - v666;
                  HIDWORD(v726) = v121 - v666 + 1;
                  v727 = v657;
                  sub_223A7FCCC(a5, (int *)&v726, &v672[(v633 | v627 | (v504 == 7) | (8 * (v633 | v627 | (v504 == 7)))) + 1], a1, a7);
                }
                if (v503 >= 4)
                {
                  LODWORD(v726) = v122 - v666;
                  HIDWORD(v726) = v121 - v666;
                  v727 = v631;
                  sub_223A7FCCC(a5, (int *)&v726, &v672[(v628 | v630 | (v504 == 7) | (8 * (v628 | v630 | (v504 == 7)))) + 1], a1, a7);
                }
                else if (!(v603 & 1 | (v122 == 8)))
                {
LABEL_766:
                  if ((_DWORD)v503)
                  {
                    LODWORD(v726) = v504 + 1;
                    HIDWORD(v726) = v121 - v666 + 1;
                    v727 = v631;
                    sub_223A7FCCC(a5, (int *)&v726, &v672[(v633 | v630 | (v504 == 6) | (8 * (v633 | v630 | (v504 == 6)))) + 1], a1, a7);
                    if ((_DWORD)v503 != 1)
                    {
                      LODWORD(v726) = v122 - v666;
                      HIDWORD(v726) = v121 - v666 + 1;
                      v727 = v631;
                      sub_223A7FCCC(a5, (int *)&v726, &v672[(v633 | v630 | (v504 == 7) | (8 * (v633 | v630 | (v504 == 7)))) + 1], a1, a7);
                    }
                  }
                  goto LABEL_185;
                }
                LODWORD(v726) = v504 + 1;
                HIDWORD(v726) = v121 - v666;
                v727 = v631;
                sub_223A7FCCC(a5, (int *)&v726, &v672[(v628 | v630 | (v504 == 6) | (8 * (v628 | v630 | (v504 == 6)))) + 1], a1, a7);
                goto LABEL_766;
              }
              sub_223A7FCCC(a5, &v669, &v672[v505 + 1], a1, a7);
            }
            else
            {
              sub_223A7F9C8(a5, &v669, v667, a1, a7);
            }
LABEL_185:
            v110 = v663;
          }
          v122 += v666;
        }
        while (v122 < 9);
        v121 += v666;
      }
      while (v606 < 9);
      v110 = v597;
      if (v597 >= 9)
        return (v598 & 1) == 0;
    }
  }
  v26 = 0;
  v27 = (1 << v667);
  v28 = 0.8;
  if (!a6)
    v28 = 0.4;
  v637 = v28;
  v635 = v28 * 0.5;
  a8.f32[0] = (float)(v28 * 0.5) + (float)(v28 * -4.5);
  a9.i16[1] = 15907;
  v634 = a8.f32[0] + 0.16;
  v648 = (_WORD *)&qword_255795038 + 2 * v667;
  v645 = a1 + 24;
  v646 = v648 + 1;
  v29 = 4 * v27;
  a8.i32[1] = 1638405;
  while (2)
  {
    v30 = 0;
    v662 = v26 - v27;
    a8.f32[0] = (float)v26;
    v653 = a8.i64[0];
    v641 = 81 * v26;
    v650 = v26 >> v667;
    v639 = 81 * (v26 + v27);
    v632 = v26 + v27;
    a8.f32[0] = (float)(v26 + v27);
    v643 = a8;
    v665 = v26;
    do
    {
      if ((v30 | v26) <= 7)
      {
        v31 = 0;
        v655 = v30 >> v667;
        a8.f32[0] = (float)(v30 + v27);
        v32 = 4 * (9 * v30 + v639);
        v33 = 4 * (9 * (v30 + v27) + v641);
        v34 = 4 * (9 * v30 + v641);
        v35 = 4 * (v27 + 9 * v30 + v641);
        while (1)
        {
          if (v31 == 8 || !*(_BYTE *)(a5 + v34 + 2))
            goto LABEL_91;
          a8.i16[0] = *(_WORD *)(a5 + v34);
          a8 = (float32x4_t)vmovl_s16(*(int16x4_t *)a8.f32);
          a8.f32[0] = (float)a8.i32[0];
          v36 = (_BYTE *)(a5 + v35 + 2);
          a9.i16[0] = *(_WORD *)(a5 + v35);
          a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
          a9.f32[0] = (float)a9.i32[0];
          if (*v36)
            v37 = a9.f32[0];
          else
            v37 = 3.4028e38;
          if (v37 != 3.4028e38)
          {
            a9.f32[0] = v37 * a8.f32[0];
            if ((float)(v37 * a8.f32[0]) <= 0.0)
            {
              v38 = 0.5;
              if (vabds_f32(v37, a8.f32[0]) >= 0.00000001)
                v38 = (float)-a8.f32[0] / (float)(v37 - a8.f32[0]);
              v39 = 1.0;
              _Q2.f32[0] = (float)v31;
              _Q2.f32[1] = (float)v30;
              v40.i32[1] = HIDWORD(v653);
              _Q2.i32[2] = v653;
              a12.f32[0] = (float)(v27 + v31);
              a12.f32[1] = (float)v30;
              a12.i32[2] = v653;
              v41 = *(int32x2_t **)(a5 + 2920);
              *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v41);
              _Q3.f32[2] = (float)v41[1].i32[0];
              v42 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(_Q2, 1.0 - v38), a12, v38), _Q3);
              _Q3 = v658;
              v43 = (int8x16_t)vmulq_n_f32(v42, v658.f32[0]);
              *(_DWORD *)&v672[8] = v43.i32[2];
              *(_QWORD *)v672 = v43.i64[0];
              if (v38 <= 0.5)
                v36 = (_BYTE *)(a5 + v34 + 2);
              LOBYTE(v16) = *v36;
              if (a4)
              {
                _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                v40.i32[0] = *(_DWORD *)(a3 + 136);
                a14 = *(float32x2_t *)(a3 + 144);
                a15.i32[0] = *(_DWORD *)(a3 + 152);
                *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v43.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v43.i8, 1), a14, (float32x4_t)v43, 2);
                v44 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v43.i8), v40, *(float32x2_t *)v43.i8, 1);
                v45 = (float32x4_t)vextq_s8(v43, v43, 8uLL);
                *(float32x2_t *)&a9.u32[2] = vmla_f32(v44, *(float32x2_t *)v45.f32, a15);
                v45.i64[0] = *(_QWORD *)(a3 + 160);
                v45.i32[2] = *(_DWORD *)(a3 + 168);
                _Q2 = vaddq_f32(a9, v45);
                if (_Q2.f32[2] > 0.000001)
                {
                  v46 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                  v47 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v46, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                  LODWORD(v46) = *(_DWORD *)(a3 + 264);
                  v48 = (double)v46 + -0.5;
                  *(float *)&v48 = v48;
                  if (v47.f32[0] >= -0.5 && v47.f32[0] < *(float *)&v48)
                  {
                    LODWORD(v48) = *(_DWORD *)(a3 + 268);
                    *(float *)&v48 = (double)*(unint64_t *)&v48 + -0.5;
                    if (v47.f32[1] >= -0.5 && v47.f32[1] < *(float *)&v48)
                    {
                      v88 = vcvt_s32_f32(vrndm_f32(vadd_f32(v47, (float32x2_t)0x3F0000003F000000)));
                      v89 = vmul_s32(*(int32x2_t *)(a3 + 40), v88);
                      *(int32x2_t *)_Q3.f32 = vadd_s32(vdup_lane_s32(v89, 1), v89);
                      _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                      __asm { FCVT            S3, H3 }
                      if (_Q3.f32[0] <= 3.5)
                      {
                        v93 = 0.16 * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                          goto LABEL_47;
                      }
                      else if (_Q3.f32[0] <= 4.5)
                      {
                        v93 = (float)((float)((float)(_Q3.f32[0] + -3.5) * (float)(v635 * (float)(_Q3.f32[0] + -3.5)))
                                    + 0.16)
                            * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v93)
                          goto LABEL_47;
                      }
                      else
                      {
                        v93 = (float)(v634 + (float)(v637 * _Q3.f32[0])) * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v93)
                          goto LABEL_47;
                      }
                      _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), v88);
                      _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                      __asm { FCVT            S0, H0 }
                      if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                      {
                        if ((float)(v93 + v93) < a9.f32[0])
                          a9.f32[0] = v93 + v93;
                        v39 = 1.0 - (float)(a9.f32[0] / (float)(v93 + v93));
                      }
                    }
                  }
                }
              }
              v51 = atomic_load((unsigned __int8 *)&qword_255795040);
              if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_255795040))
              {
                qword_255795038 = 0x19000500510009;
                __cxa_guard_release(&qword_255795040);
              }
              sub_223A86594(a7, (uint64_t *)v672, (unsigned __int16)(3 * ((v31 >> v667) + v655 * *v648 + v650 * *v646)+ *(_WORD *)&v645[2 * v667]), (float)((float)v16 / 255.0) * v39);
              v52.i16[0] = *(_WORD *)(a5 + v34);
              a8 = (float32x4_t)vmovl_s16(v52);
              a8.f32[0] = (float)a8.i32[0];
            }
          }
LABEL_47:
          v53 = (_BYTE *)(a5 + v33 + 2);
          a9.i16[0] = *(_WORD *)(a5 + v33);
          a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
          a9.f32[0] = (float)a9.i32[0];
          if (*v53)
            v54 = a9.f32[0];
          else
            v54 = 3.4028e38;
          if (v54 != 3.4028e38)
          {
            a9.f32[0] = a8.f32[0] * v54;
            if ((float)(a8.f32[0] * v54) <= 0.0)
            {
              v55 = 0.5;
              if (vabds_f32(v54, a8.f32[0]) >= 0.00000001)
                v55 = (float)-a8.f32[0] / (float)(v54 - a8.f32[0]);
              v56 = 1.0;
              _Q3.f32[0] = (float)v31;
              a12 = _Q3;
              a12.f32[1] = (float)v30;
              v57.i32[1] = HIDWORD(v653);
              a12.i32[2] = v653;
              _Q3.f32[1] = (float)(v30 + v27);
              _Q3.i32[2] = v653;
              v58 = vmlaq_n_f32(vmulq_n_f32(a12, 1.0 - v55), _Q3, v55);
              v59 = *(int32x2_t **)(a5 + 2920);
              *(float32x2_t *)_Q3.f32 = vcvt_f32_s32(*v59);
              _Q3.f32[2] = (float)v59[1].i32[0];
              v60 = vaddq_f32(v58, _Q3);
              _Q3 = v658;
              v61 = (int8x16_t)vmulq_n_f32(v60, v658.f32[0]);
              *(_DWORD *)&v672[8] = v61.i32[2];
              *(_QWORD *)v672 = v61.i64[0];
              if (v55 <= 0.5)
                v53 = (_BYTE *)(a5 + v34 + 2);
              LOBYTE(v16) = *v53;
              if (a4)
              {
                _Q3.i32[0] = *(_DWORD *)(a3 + 120);
                v57.i32[0] = *(_DWORD *)(a3 + 136);
                a14 = *(float32x2_t *)(a3 + 144);
                a15.i32[0] = *(_DWORD *)(a3 + 152);
                *(float32x2_t *)a9.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v61.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v61.i8, 1), a14, (float32x4_t)v61, 2);
                v62 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q3.f32, *(float32x2_t *)v61.i8), v57, *(float32x2_t *)v61.i8, 1);
                v63 = (float32x4_t)vextq_s8(v61, v61, 8uLL);
                *(float32x2_t *)&a9.u32[2] = vmla_f32(v62, *(float32x2_t *)v63.f32, a15);
                v63.i64[0] = *(_QWORD *)(a3 + 160);
                v63.i32[2] = *(_DWORD *)(a3 + 168);
                _Q2 = vaddq_f32(a9, v63);
                if (_Q2.f32[2] > 0.000001)
                {
                  v64 = (unint64_t)vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)(a3 + 192));
                  v65 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v64, (float32x2_t)vdup_laneq_s32((int32x4_t)_Q2, 2)));
                  LODWORD(v64) = *(_DWORD *)(a3 + 264);
                  v66 = (double)v64 + -0.5;
                  *(float *)&v66 = v66;
                  if (v65.f32[0] >= -0.5 && v65.f32[0] < *(float *)&v66)
                  {
                    LODWORD(v66) = *(_DWORD *)(a3 + 268);
                    *(float *)&v66 = (double)*(unint64_t *)&v66 + -0.5;
                    if (v65.f32[1] >= -0.5 && v65.f32[1] < *(float *)&v66)
                    {
                      v94 = vcvt_s32_f32(vrndm_f32(vadd_f32(v65, (float32x2_t)0x3F0000003F000000)));
                      v95 = vmul_s32(*(int32x2_t *)(a3 + 40), v94);
                      *(int32x2_t *)_Q3.f32 = vadd_s32(vdup_lane_s32(v95, 1), v95);
                      _Q3.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * _Q3.u32[0]);
                      __asm { FCVT            S3, H3 }
                      if (_Q3.f32[0] <= 3.5)
                      {
                        v96 = 0.16 * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > (float)(0.16 * 3.0))
                          goto LABEL_69;
                      }
                      else if (_Q3.f32[0] <= 4.5)
                      {
                        v96 = (float)((float)((float)(_Q3.f32[0] + -3.5) * (float)(v635 * (float)(_Q3.f32[0] + -3.5)))
                                    + 0.16)
                            * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v96)
                          goto LABEL_69;
                      }
                      else
                      {
                        v96 = (float)(v634 + (float)(v637 * _Q3.f32[0])) * 3.0;
                        a9.f32[0] = _Q3.f32[0] - _Q2.f32[2];
                        if ((float)(_Q3.f32[0] - _Q2.f32[2]) > v96)
                          goto LABEL_69;
                      }
                      _D0 = vmul_s32(*(int32x2_t *)(a3 + 96), v94);
                      _D0.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
                      __asm { FCVT            S0, H0 }
                      if (a9.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S0)
                      {
                        if ((float)(v96 + v96) < a9.f32[0])
                          a9.f32[0] = v96 + v96;
                        v56 = 1.0 - (float)(a9.f32[0] / (float)(v96 + v96));
                      }
                    }
                  }
                }
              }
              v69 = atomic_load((unsigned __int8 *)&qword_255795040);
              if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_255795040))
              {
                qword_255795038 = 0x19000500510009;
                __cxa_guard_release(&qword_255795040);
              }
              sub_223A86594(a7, (uint64_t *)v672, (unsigned __int16)(*(_WORD *)&v645[2 * v667]+ 3 * ((v31 >> v667) + v655 * *v648 + v650 * *v646)+ 1), (float)((float)v16 / 255.0) * v56);
              v70.i16[0] = *(_WORD *)(a5 + v34);
              a8 = (float32x4_t)vmovl_s16(v70);
              a8.f32[0] = (float)a8.i32[0];
            }
          }
LABEL_69:
          v71 = (_BYTE *)(a5 + v32 + 2);
          a9.i16[0] = *(_WORD *)(a5 + v32);
          a9.i64[0] = vmovl_s16(*(int16x4_t *)a9.f32).u64[0];
          a9.f32[0] = (float)a9.i32[0];
          if (*v71)
            v72 = a9.f32[0];
          else
            v72 = 3.4028e38;
          if (v72 != 3.4028e38)
          {
            a9.f32[0] = a8.f32[0] * v72;
            if ((float)(a8.f32[0] * v72) <= 0.0)
            {
              v73 = 0.5;
              if (vabds_f32(v72, a8.f32[0]) >= 0.00000001)
                v73 = (float)-a8.f32[0] / (float)(v72 - a8.f32[0]);
              v74 = 1.0;
              a8.f32[0] = (float)v31;
              a8.f32[1] = (float)v30;
              _Q3 = a8;
              _Q3.i32[2] = v653;
              a12 = v643;
              a8.i32[2] = v643.i32[0];
              v75 = vmlaq_n_f32(vmulq_n_f32(_Q3, 1.0 - v73), a8, v73);
              v76 = *(int32x2_t **)(a5 + 2920);
              *(float32x2_t *)a8.f32 = vcvt_f32_s32(*v76);
              a8.f32[2] = (float)v76[1].i32[0];
              v77 = vaddq_f32(v75, a8);
              _Q2 = v658;
              v78 = (int8x16_t)vmulq_n_f32(v77, v658.f32[0]);
              *(_DWORD *)&v672[8] = v78.i32[2];
              *(_QWORD *)v672 = v78.i64[0];
              if (v73 <= 0.5)
                v71 = (_BYTE *)(a5 + v34 + 2);
              LOBYTE(v16) = *v71;
              if (!a4)
                goto LABEL_89;
              _Q2.i32[0] = *(_DWORD *)(a3 + 120);
              a12.i32[0] = *(_DWORD *)(a3 + 136);
              a14.i32[0] = *(_DWORD *)(a3 + 152);
              *(float32x2_t *)v79.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)(a3 + 112), *(float *)v78.i32), *(float32x2_t *)(a3 + 128), *(float32x2_t *)v78.i8, 1), *(float32x2_t *)(a3 + 144), (float32x4_t)v78, 2);
              v80 = vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q2.f32, *(float32x2_t *)v78.i8), *(float32x2_t *)a12.f32, *(float32x2_t *)v78.i8, 1);
              a8 = (float32x4_t)vextq_s8(v78, v78, 8uLL);
              *(float32x2_t *)&v79.u32[2] = vmla_f32(v80, *(float32x2_t *)a8.f32, a14);
              a8.i64[0] = *(_QWORD *)(a3 + 160);
              a8.i32[2] = *(_DWORD *)(a3 + 168);
              v81 = (int32x4_t)vaddq_f32(v79, a8);
              if (*(float *)&v81.i32[2] <= 0.000001)
                goto LABEL_89;
              v82 = (unint64_t)vmul_f32(*(float32x2_t *)v81.i8, *(float32x2_t *)(a3 + 192));
              v83 = vadd_f32(*(float32x2_t *)(a3 + 200), vdiv_f32((float32x2_t)v82, (float32x2_t)vdup_laneq_s32(v81, 2)));
              LODWORD(v82) = *(_DWORD *)(a3 + 264);
              v84 = (double)v82 + -0.5;
              *(float *)&v84 = v84;
              if (v83.f32[0] < -0.5 || v83.f32[0] >= *(float *)&v84)
                goto LABEL_89;
              LODWORD(v84) = *(_DWORD *)(a3 + 268);
              *(float *)&v84 = (double)*(unint64_t *)&v84 + -0.5;
              if (v83.f32[1] < -0.5 || v83.f32[1] >= *(float *)&v84)
                goto LABEL_89;
              *(int32x2_t *)a9.f32 = vcvt_s32_f32(vrndm_f32(vadd_f32(v83, (float32x2_t)0x3F0000003F000000)));
              _D2 = vmul_s32(*(int32x2_t *)(a3 + 40), *(int32x2_t *)a9.f32);
              *(int32x2_t *)_Q3.f32 = vdup_lane_s32(_D2, 1);
              _D2.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 24) + 2 * vadd_s32(*(int32x2_t *)_Q3.f32, _D2).u32[0]);
              __asm { FCVT            S2, H2 }
              if (_S2 <= 3.5)
              {
                v99 = 0.16 * 3.0;
                a8.f32[0] = _S2 - *(float *)&v81.i32[2];
                if ((float)(_S2 - *(float *)&v81.i32[2]) <= (float)(0.16 * 3.0))
                  goto LABEL_132;
              }
              else if (_S2 <= 4.5)
              {
                v99 = (float)((float)((float)(_S2 + -3.5) * (float)(v635 * (float)(_S2 + -3.5))) + 0.16) * 3.0;
                a8.f32[0] = _S2 - *(float *)&v81.i32[2];
                if ((float)(_S2 - *(float *)&v81.i32[2]) <= v99)
                {
LABEL_132:
                  _D1 = vmul_s32(*(int32x2_t *)(a3 + 96), *(int32x2_t *)a9.f32);
                  _D1.i16[0] = *(_WORD *)(*(_QWORD *)(a3 + 80) + 2 * vadd_s32(vdup_lane_s32(_D1, 1), _D1).u32[0]);
                  __asm { FCVT            S1, H1 }
                  if (a8.f32[0] >= 0.0 && *(float *)(a3 + 272) <= _S1)
                  {
                    if ((float)(v99 + v99) < a8.f32[0])
                      a8.f32[0] = v99 + v99;
                    v74 = 1.0 - (float)(a8.f32[0] / (float)(v99 + v99));
                  }
LABEL_89:
                  v87 = atomic_load((unsigned __int8 *)&qword_255795040);
                  if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_255795040))
                  {
                    qword_255795038 = 0x19000500510009;
                    __cxa_guard_release(&qword_255795040);
                  }
                  sub_223A86594(a7, (uint64_t *)v672, (unsigned __int16)(*(_WORD *)&v645[2 * v667]+ 3 * ((v31 >> v667) + v655 * *v648 + v650 * *v646)+ 2), (float)((float)v16 / 255.0) * v74);
                }
              }
              else
              {
                v99 = (float)(v634 + (float)(v637 * _S2)) * 3.0;
                a8.f32[0] = _S2 - *(float *)&v81.i32[2];
                if ((float)(_S2 - *(float *)&v81.i32[2]) <= v99)
                  goto LABEL_132;
              }
            }
          }
LABEL_91:
          if (v665 && v30 && v31)
          {
            *(_DWORD *)v672 = v31 - v27;
            *(_DWORD *)&v672[4] = v30 - v27;
            *(_DWORD *)&v672[8] = v662;
            sub_223A7F9C8(a5, (int *)v672, v667, a1, a7);
          }
          v31 += v27;
          v32 += v29;
          v33 += v29;
          v34 += v29;
          v35 += v29;
          if (v31 >= 9)
            goto LABEL_19;
        }
      }
      if (v26 && v30)
      {
        for (i6 = 0; i6 < 9; i6 += v27)
        {
          if (i6)
          {
            *(_DWORD *)v672 = i6 - v27;
            *(_DWORD *)&v672[4] = v30 - v27;
            *(_DWORD *)&v672[8] = v662;
            sub_223A7F9C8(a5, (int *)v672, v667, a1, a7);
          }
        }
      }
LABEL_19:
      v30 += v27;
      v26 = v665;
    }
    while (v30 < 9);
    v26 = v632;
    if (v632 < 9)
      continue;
    return (v598 & 1) == 0;
  }
}

unint64_t sub_223A86594(_QWORD *a1, uint64_t *a2, unsigned int a3, float a4)
{
  char *v8;
  char **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  float *v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  float *v31;
  char *v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  _OWORD *v38;
  float *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  unint64_t result;
  unint64_t v51;
  uint64_t v52;
  uint64_t i;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _WORD *v57;

  v10 = (char *)a1[5];
  v8 = (char *)a1[6];
  v9 = (char **)(a1 + 5);
  v11 = a1[7];
  v12 = (v8 - v10) / 12;
  if ((unint64_t)v8 >= v11)
  {
    v15 = v12 + 1;
    if ((unint64_t)(v12 + 1) > 0x1555555555555555)
      sub_22316E078();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v10) >> 2);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 > 0x1555555555555555)
        goto LABEL_47;
      v18 = (char *)operator new(12 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[12 * v12];
    *(_QWORD *)v19 = *a2;
    *((_DWORD *)v19 + 2) = *((_DWORD *)a2 + 2);
    v14 = v19 + 12;
    if (v8 != v10)
    {
      do
      {
        v20 = *(_QWORD *)(v8 - 12);
        v8 -= 12;
        v21 = *((_DWORD *)v8 + 2);
        *(_QWORD *)(v19 - 12) = v20;
        v19 -= 12;
        *((_DWORD *)v19 + 2) = v21;
      }
      while (v8 != v10);
      v8 = *v9;
    }
    a1[5] = v19;
    a1[6] = v14;
    a1[7] = &v18[12 * v17];
    if (v8)
      operator delete(v8);
  }
  else
  {
    v13 = *a2;
    *((_DWORD *)v8 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v8 = v13;
    v14 = v8 + 12;
  }
  a1[6] = v14;
  v23 = (float *)a1[9];
  v22 = a1[10];
  if ((unint64_t)v23 >= v22)
  {
    v25 = (float *)a1[8];
    v26 = v23 - v25;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62)
      sub_22316E078();
    v28 = v22 - (_QWORD)v25;
    if (v28 >> 1 > v27)
      v27 = v28 >> 1;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (!v29)
    {
      v30 = 0;
      v31 = (float *)(4 * v26);
      v32 = 0;
      *(float *)(4 * v26) = a4;
      v24 = 4 * v26 + 4;
      v33 = (char *)v23 - (char *)v25;
      if (v23 == v25)
        goto LABEL_37;
      goto LABEL_31;
    }
    if (!(v29 >> 62))
    {
      v30 = operator new(4 * v29);
      v31 = (float *)&v30[4 * v26];
      v32 = &v30[4 * v29];
      *v31 = a4;
      v24 = (uint64_t)(v31 + 1);
      v33 = (char *)v23 - (char *)v25;
      if (v23 == v25)
      {
LABEL_37:
        a1[8] = v31;
        a1[9] = v24;
        a1[10] = v32;
        if (v25)
          operator delete(v25);
        goto LABEL_39;
      }
LABEL_31:
      v34 = v33 - 4;
      if (v34 < 0x2C)
        goto LABEL_52;
      if ((unint64_t)((char *)v25 - v30) < 0x20)
        goto LABEL_52;
      v35 = (v34 >> 2) + 1;
      v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
      v37 = &v23[v36 / 0xFFFFFFFFFFFFFFFCLL];
      v31 = (float *)((char *)v31 - v36);
      v38 = &v30[4 * v26 - 16];
      v39 = v23 - 4;
      v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *v38 = v41;
        v38 -= 2;
        v39 -= 8;
        v40 -= 8;
      }
      while (v40);
      v23 = v37;
      if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_52:
        do
        {
          v42 = *((_DWORD *)v23-- - 1);
          *((_DWORD *)v31-- - 1) = v42;
        }
        while (v23 != v25);
      }
      goto LABEL_37;
    }
LABEL_47:
    sub_223174E94();
  }
  *v23 = a4;
  v24 = (uint64_t)(v23 + 1);
LABEL_39:
  v43 = 0;
  result = (unint64_t)(a1 + 26);
  _X9 = a1[26];
  a1[9] = v24;
  __asm { PRFM            #4, [X9] }
  v51 = (0x9DDFEA08EB382D69 * a3 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * a3 + 0x376ADF16980614E5) >> 32);
  v52 = a1[29];
  for (i = (v51 >> 7) ^ 0x13701D; ; i = v43 + v54)
  {
    v54 = i & v52;
    v55 = *(_QWORD *)(_X9 + v54);
    v56 = ((v55 ^ (0x101010101010101 * (v51 & 0x7F))) - 0x101010101010101) & ~(v55 ^ (0x101010101010101
                                                                                        * (v51 & 0x7F))) & 0x8080808080808080;
    if (v56)
      break;
LABEL_43:
    if ((v55 & (~v55 << 6) & 0x8080808080808080) != 0)
    {
      result = sub_223A86900((uint64_t *)result, v51);
      v57 = (_WORD *)(a1[27] + 4 * result);
      *v57 = a3;
      v57[1] = v12;
      return result;
    }
    v43 += 8;
  }
  while (*(unsigned __int16 *)(a1[27] + 4 * ((v54 + (__clz(__rbit64(v56)) >> 3)) & v52)) != a3)
  {
    v56 &= v56 - 1;
    if (!v56)
      goto LABEL_43;
  }
  return result;
}

unint64_t sub_223A86900(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[3];
  v6 = v5 & ((a2 >> 7) ^ 0x13701D);
  v7 = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    v8 = 8;
    do
    {
      v6 = (v6 + v8) & v5;
      v8 += 8;
      v7 = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v5;
  v10 = a1[4];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + result) == 254)
    {
      v10 = 0;
    }
    else
    {
      sub_223A869F8((uint64_t)a1);
      result = sub_22322944C(*a1, a2, a1[3]);
      v4 = *a1;
      v5 = a1[3];
      v10 = a1[4];
    }
  }
  ++a1[2];
  a1[4] = v10 - (*(unsigned __int8 *)(v4 + result) == 128);
  *(_BYTE *)(v4 + result) = a2 & 0x7F;
  *(_BYTE *)(v4 + ((result - 7) & v5) + (v5 & 7)) = a2 & 0x7F;
  return result;
}

void sub_223A869F8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 < 9 || 25 * v1 < 32 * *(_QWORD *)(a1 + 16))
  {
    v2 = (2 * v1) | 1;
LABEL_5:
    sub_223A86A34((char **)a1, (char *)v2);
    return;
  }
  sub_223A86BC0((unint64_t *)a1);
}

void sub_223A86A34(char **a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *i;
  unint64_t v11;
  char v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v7 = (unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFFELL;
  v8 = (char *)operator new((unint64_t)&a2[4 * (_QWORD)a2 + 9] & 0xFFFFFFFFFFFFFFFELL);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(_QWORD)v8] = -1;
  v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (char *)7)
    v9 = 6;
  a1[4] = (char *)(v9 - (_QWORD)a1[2]);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((i[(_QWORD)v4] & 0x80000000) == 0)
      {
        v13 = &v5[4 * (_QWORD)i];
        v14 = (0x376ADF16980614E5 - 0x622015F714C7D297 * *(unsigned __int16 *)v13) ^ ((0x376ADF16980614E5
                                                                                         - 0x622015F714C7D297
                                                                                         * (unint64_t)*(unsigned __int16 *)v13) >> 32);
        v15 = *a1;
        v16 = a1[3];
        v17 = ((v14 >> 7) ^ 0x13701D) & (unint64_t)v16;
        v18 = *(_QWORD *)&(*a1)[v17] & (~*(_QWORD *)&(*a1)[v17] << 7) & 0x8080808080808080;
        if (!v18)
        {
          v19 = 8;
          do
          {
            v17 = (v17 + v19) & (unint64_t)v16;
            v19 += 8;
            v18 = *(_QWORD *)&v15[v17] & (~*(_QWORD *)&v15[v17] << 7) & 0x8080808080808080;
          }
          while (!v18);
        }
        v11 = (v17 + (__clz(__rbit64(v18)) >> 3)) & (unint64_t)v16;
        v12 = v14 & 0x7F;
        v15[v11] = v12;
        v15[((v11 - 7) & (unint64_t)v16) + (v16 & 7)] = v12;
        *(_DWORD *)&a1[1][4 * v11] = *(_DWORD *)v13;
      }
    }
    operator delete(v4);
  }
}

unint64_t sub_223A86BC0(unint64_t *a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  uint64_t v17;

  result = sub_2232294A8(*a1, a1[3]);
  v3 = a1[3];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v7 = *a1;
      if (*(unsigned __int8 *)(*a1 + i) == 254)
      {
        v8 = a1[1];
        v9 = 0x376ADF16980614E5 - 0x622015F714C7D297 * *(unsigned __int16 *)(v8 + 4 * i);
        v10 = v9 ^ HIDWORD(v9);
        v11 = ((v10 >> 7) ^ 0x13701D) & v3;
        v12 = *(_QWORD *)(v7 + v11) & (~*(_QWORD *)(v7 + v11) << 7) & 0x8080808080808080;
        if (v12)
        {
          v5 = ((v10 >> 7) ^ 0x13701D) & v3;
        }
        else
        {
          v13 = 8;
          v5 = ((v10 >> 7) ^ 0x13701D) & v3;
          do
          {
            v5 = (v5 + v13) & v3;
            v13 += 8;
            v12 = *(_QWORD *)(v7 + v5) & (~*(_QWORD *)(v7 + v5) << 7) & 0x8080808080808080;
          }
          while (!v12);
        }
        v6 = (v5 + (__clz(__rbit64(v12)) >> 3)) & v3;
        result = ((v6 - v11) ^ (i - v11)) & v3;
        if (result > 7)
        {
          result = *(unsigned __int8 *)(v7 + v6);
          v14 = v10 & 0x7F;
          *(_BYTE *)(v7 + v6) = v14;
          *(_BYTE *)(v7 + ((v6 - 7) & v3) + (v3 & 7)) = v14;
          if ((_DWORD)result == 128)
          {
            *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v8 + 4 * i);
            v3 = a1[3];
            v15 = *a1;
            *(_BYTE *)(v15 + i) = 0x80;
            *(_BYTE *)(v15 + (v3 & (i - 7)) + (v3 & 7)) = 0x80;
          }
          else
          {
            v16 = *(_DWORD *)(v8 + 4 * i);
            *(_DWORD *)(v8 + 4 * i) = *(_DWORD *)(v8 + 4 * v6);
            *(_DWORD *)(a1[1] + 4 * v6) = v16;
            --i;
            v3 = a1[3];
          }
        }
        else
        {
          *(_BYTE *)(v7 + i) = v10 & 0x7F;
          *(_BYTE *)(v7 + ((i - 7) & v3) + (v3 & 7)) = v10 & 0x7F;
        }
      }
    }
    v17 = v3 - (v3 >> 3);
    if (v3 == 7)
      v17 = 6;
    a1[4] = v17 - a1[2];
  }
  else
  {
    a1[4] = -(uint64_t)a1[2];
  }
  return result;
}

uint64_t sub_223A86D94(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _DWORD *v51;
  char *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  _DWORD *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v5 = 0;
  _X12 = *(_QWORD *)(a2 + 208);
  __asm { PRFM            #4, [X12] }
  v12 = (0x9DDFEA08EB382D69 * a3 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * a3 + 0x376ADF16980614E5) >> 32);
  v13 = *(_QWORD *)(a2 + 232);
  v14 = (v12 >> 7) ^ 0x13701D;
  v15 = 0x101010101010101 * (v12 & 0x7F);
  v16 = *(_QWORD *)(a2 + 216);
  while (1)
  {
    v17 = v14 & v13;
    v18 = *(_QWORD *)(_X12 + v17);
    v19 = ((v18 ^ v15) - 0x101010101010101) & ~(v18 ^ v15) & 0x8080808080808080;
    if (v19)
      break;
LABEL_5:
    if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
      return 0xFFFFFFFFLL;
    v5 += 8;
    v14 = v5 + v17;
  }
  while (1)
  {
    v20 = (v17 + (__clz(__rbit64(v19)) >> 3)) & v13;
    if (*(unsigned __int16 *)(v16 + 4 * v20) == a3)
      break;
    v19 &= v19 - 1;
    if (!v19)
      goto LABEL_5;
  }
  if (!_X12)
    return 0xFFFFFFFFLL;
  v21 = *(unsigned __int16 *)(v16 + 4 * v20 + 2);
  if ((_DWORD)v21 == 0xFFFF)
    return 0xFFFFFFFFLL;
  v22 = *(_DWORD **)a2;
  if (**(_DWORD **)a2 < *(_DWORD *)a1 + 64 && v22[1] < *(_DWORD *)(a1 + 4) + 64 && v22[2] < *(_DWORD *)(a1 + 8) + 64)
    return (*(_DWORD *)(a2 + 8) + v21);
  v24 = 0;
  v25 = (v21 + (v22[6] << 12));
  v27 = (uint64_t *)(a1 + 24);
  _X12 = *(_QWORD *)(a1 + 24);
  __asm { PRFM            #4, [X12] }
  v29 = (0x376ADF16980614E5 - 0x622015F714C7D297 * v25) ^ ((unint64_t)(0x376ADF16980614E5
                                                                                - 0x622015F714C7D297 * v25) >> 32);
  v30 = *(_QWORD *)(a1 + 48);
  v31 = 0x101010101010101 * (v29 & 0x7F);
  for (i = (v29 >> 7) ^ 0x13701D; ; i = v24 + v33)
  {
    v33 = i & v30;
    v34 = *(_QWORD *)(_X12 + v33);
    v35 = ((v34 ^ v31) - 0x101010101010101) & ~(v34 ^ v31) & 0x8080808080808080;
    if (v35)
      break;
LABEL_19:
    if ((v34 & (~v34 << 6) & 0x8080808080808080) != 0)
      goto LABEL_23;
    v24 += 8;
  }
  v36 = *(_QWORD *)(a1 + 32);
  while (1)
  {
    v37 = (v33 + (__clz(__rbit64(v35)) >> 3)) & v30;
    if (*(_DWORD *)(v36 + 8 * v37) == (_DWORD)v25)
      break;
    v35 &= v35 - 1;
    if (!v35)
      goto LABEL_19;
  }
  if (!_X12)
  {
LABEL_23:
    v39 = *(_QWORD *)(a1 + 72);
    v40 = *(_QWORD *)(a2 + 40) + 12 * v21;
    v98 = *(_QWORD *)(a1 + 64);
    v99 = (v29 >> 7) ^ 0x13701D;
    v97 = v39;
    if (v39 >= *(_QWORD *)(a1 + 80))
    {
      *(_QWORD *)(a1 + 72) = sub_2233B3A8C((unint64_t *)(a1 + 64), (uint64_t *)v40);
      v42 = *(_QWORD *)(a2 + 64);
      v44 = *(char **)(a1 + 104);
      v43 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v44 >= v43)
      {
LABEL_25:
        v94 = v31;
        v45 = *(char **)(a1 + 96);
        v46 = (v44 - v45) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          sub_22316E078();
        v48 = v43 - (_QWORD)v45;
        if (v48 >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 62)
            goto LABEL_86;
          v50 = operator new(4 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[4 * v46];
        v52 = &v50[4 * v49];
        *v51 = *(_DWORD *)(v42 + 4 * v21);
        v53 = v51 + 1;
        if (v44 == v45)
        {
          v27 = (uint64_t *)(a1 + 24);
        }
        else
        {
          v54 = v44 - v45 - 4;
          v27 = (uint64_t *)(a1 + 24);
          if (v54 < 0x2C)
            goto LABEL_90;
          if ((unint64_t)(v45 - v50) < 0x20)
            goto LABEL_90;
          v55 = (v54 >> 2) + 1;
          v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
          v57 = &v44[-v56];
          v51 = (_DWORD *)((char *)v51 - v56);
          v58 = &v50[4 * v46 - 16];
          v59 = v44 - 16;
          v60 = v55 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *v58 = v61;
            v58 -= 2;
            v59 -= 32;
            v60 -= 8;
          }
          while (v60);
          v44 = v57;
          if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_90:
            do
            {
              v62 = *((_DWORD *)v44 - 1);
              v44 -= 4;
              *--v51 = v62;
            }
            while (v44 != v45);
          }
        }
        *(_QWORD *)(a1 + 96) = v51;
        *(_QWORD *)(a1 + 104) = v53;
        *(_QWORD *)(a1 + 112) = v52;
        if (v45)
          operator delete(v45);
        v31 = v94;
        *(_QWORD *)(a1 + 104) = v53;
        if (*(_BYTE *)(a1 + 16))
        {
LABEL_50:
          v63 = *(_QWORD *)(a2 + 184);
          v65 = *(char **)(a1 + 128);
          v64 = *(_QWORD *)(a1 + 136);
          if ((unint64_t)v65 < v64)
          {
            *(_DWORD *)v65 = *(_DWORD *)(v63 + 4 * v21);
            v66 = v65 + 4;
LABEL_74:
            *(_QWORD *)(a1 + 128) = v66;
            goto LABEL_75;
          }
          v95 = v31;
          v96 = v27;
          v67 = *(char **)(a1 + 120);
          v68 = (v65 - v67) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            sub_22316E078();
          v70 = v64 - (_QWORD)v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (!v71)
          {
            v72 = 0;
            goto LABEL_62;
          }
          if (!(v71 >> 62))
          {
            v72 = operator new(4 * v71);
LABEL_62:
            v73 = &v72[4 * v68];
            v74 = &v72[4 * v71];
            *v73 = *(_DWORD *)(v63 + 4 * v21);
            v66 = v73 + 1;
            if (v65 == v67)
            {
              v27 = v96;
            }
            else
            {
              v75 = v65 - v67 - 4;
              v27 = v96;
              if (v75 < 0x2C)
                goto LABEL_91;
              if ((unint64_t)(v67 - v72) < 0x20)
                goto LABEL_91;
              v76 = (v75 >> 2) + 1;
              v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
              v78 = &v65[-v77];
              v73 = (_DWORD *)((char *)v73 - v77);
              v79 = &v72[4 * v68 - 16];
              v80 = v65 - 16;
              v81 = v76 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v82 = *(_OWORD *)v80;
                *(v79 - 1) = *((_OWORD *)v80 - 1);
                *v79 = v82;
                v79 -= 2;
                v80 -= 32;
                v81 -= 8;
              }
              while (v81);
              v65 = v78;
              if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_91:
                do
                {
                  v83 = *((_DWORD *)v65 - 1);
                  v65 -= 4;
                  *--v73 = v83;
                }
                while (v65 != v67);
              }
            }
            *(_QWORD *)(a1 + 120) = v73;
            *(_QWORD *)(a1 + 128) = v66;
            *(_QWORD *)(a1 + 136) = v74;
            if (v67)
              operator delete(v67);
            v31 = v95;
            goto LABEL_74;
          }
LABEL_86:
          sub_223174E94();
        }
LABEL_75:
        v84 = 0;
        v38 = -1431655765 * ((v97 - v98) >> 2);
        _X9 = *(_QWORD *)(a1 + 24);
        __asm { PRFM            #4, [X9] }
        v87 = *(_QWORD *)(a1 + 48);
        while (1)
        {
          v88 = v99 & v87;
          v89 = *(_QWORD *)(_X9 + (v99 & v87));
          v90 = ((v89 ^ v31) - 0x101010101010101) & ~(v89 ^ v31) & 0x8080808080808080;
          if (v90)
            break;
LABEL_80:
          if ((v89 & (~v89 << 6) & 0x8080808080808080) != 0)
          {
            v92 = sub_223A2C130(v27, (0x376ADF16980614E5 - 0x622015F714C7D297 * v25) ^ ((unint64_t)(0x376ADF16980614E5- 0x622015F714C7D297 * v25) >> 32));
            v91 = *(_QWORD *)(a1 + 32);
            v93 = (_DWORD *)(v91 + 8 * v92);
            *v93 = v25;
            v93[1] = 0;
            goto LABEL_83;
          }
          v84 += 8;
          v99 = v84 + v88;
        }
        v91 = *(_QWORD *)(a1 + 32);
        while (1)
        {
          v92 = (v88 + (__clz(__rbit64(v90)) >> 3)) & v87;
          if (*(_DWORD *)(v91 + 8 * v92) == (_DWORD)v25)
            break;
          v90 &= v90 - 1;
          if (!v90)
            goto LABEL_80;
        }
LABEL_83:
        *(_DWORD *)(v91 + 8 * v92 + 4) = v38;
        return (*(_DWORD *)(a1 + 12) + v38);
      }
    }
    else
    {
      v41 = *(_QWORD *)v40;
      *(_DWORD *)(v39 + 8) = *(_DWORD *)(v40 + 8);
      *(_QWORD *)v39 = v41;
      *(_QWORD *)(a1 + 72) = v39 + 12;
      v42 = *(_QWORD *)(a2 + 64);
      v44 = *(char **)(a1 + 104);
      v43 = *(_QWORD *)(a1 + 112);
      if ((unint64_t)v44 >= v43)
        goto LABEL_25;
    }
    *(_DWORD *)v44 = *(_DWORD *)(v42 + 4 * v21);
    *(_QWORD *)(a1 + 104) = v44 + 4;
    if (*(_BYTE *)(a1 + 16))
      goto LABEL_50;
    goto LABEL_75;
  }
  v38 = *(_DWORD *)(v36 + 8 * v37 + 4);
  return (*(_DWORD *)(a1 + 12) + v38);
}

uint64_t sub_223A8737C(uint64_t *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  __int16 *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  unint64_t v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int8 v77;
  unsigned __int8 v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t i;
  uint64_t v92;
  uint64_t j;
  _QWORD *v94;
  _QWORD *v95;
  __int128 v96;
  uint64_t v98;
  _QWORD *v99;
  unint64_t *v100;
  _DWORD *v102;
  unsigned __int16 *v104;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  char v111;
  void *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _BYTE v117[56];
  uint64_t v118;
  int v119;
  uint64_t *v120;

  v6 = a3;
  v7 = a2;
  v8 = (_QWORD *)*a2;
  v99 = a2 + 1;
  if ((_QWORD *)*a2 == a2 + 1)
  {
    v16 = a5;
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 0;
    LODWORD(v10) = 0;
    do
    {
      v11 = *((unsigned int *)v8 + 7);
      if (a4[11] <= v11
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v11) / 0x1F)) + 132 * ((a4[10] + v11) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v12 = *(_QWORD *)(a4[24] + (((a4[27] + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 248 * ((*((_DWORD *)a4 + 54) + (_DWORD)v11) & 0xF);
      *(_DWORD *)(v12 + 8) = v9;
      v13 = (_QWORD *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v8[2];
          v15 = *v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v15);
      }
      v9 -= 1431655765 * ((*(_QWORD *)(v12 + 48) - *(_QWORD *)(v12 + 40)) >> 2);
      v10 = v10 - 1431655765 * ((*(_QWORD *)(v12 + 24) - *(_QWORD *)(v12 + 16)) >> 1);
      v8 = v14;
    }
    while (v14 != v99);
    v16 = a5;
    v7 = a2;
    v6 = a3;
  }
  sub_22339E3C8(v16, (v9 + 512));
  v98 = v16 + 320;
  sub_223674C80(v16 + 320, (v9 + 512));
  *(_DWORD *)(v16 + 352) = 1;
  v100 = (unint64_t *)(v16 + 112);
  sub_22339E528(v16 + 112, v10);
  v108 = *v6;
  v109 = *((_DWORD *)v6 + 2);
  v110 = v9;
  v111 = 0;
  v112 = &unk_2245C5160;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0;
  memset(&v117[4], 0, 52);
  sub_22339E3C8((uint64_t)&v115, 0x200uLL);
  v17 = *(_BYTE **)&v117[8];
  if (*(_QWORD *)&v117[24] - *(_QWORD *)&v117[8] <= 0x7FFuLL)
  {
    v18 = *(_BYTE **)&v117[16];
    v19 = (char *)operator new(0x800uLL);
    v20 = v18 - v17;
    v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    v22 = v21;
    if (v18 == v17)
      goto LABEL_25;
    if ((unint64_t)(v20 - 4) >= 0x2C)
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
      if (v18 - v19 - (v20 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v23 = v20 >> 2;
        v24 = ((unint64_t)(v20 - 4) >> 2) + 1;
        v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        v26 = &v18[-v25];
        v22 = &v21[-v25];
        v27 = &v19[4 * v23 - 16];
        v28 = (__int128 *)(v18 - 16);
        v29 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v30 = *v28;
          *((_OWORD *)v27 - 1) = *(v28 - 1);
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 8;
        }
        while (v29);
        v18 = v26;
        if (v24 == (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_25:
          *(_QWORD *)&v117[8] = v22;
          *(_QWORD *)&v117[16] = v21;
          *(_QWORD *)&v117[24] = v19 + 2048;
          if (v17)
            operator delete(v17);
          goto LABEL_27;
        }
      }
    }
    else
    {
      v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v31 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v22 - 1) = v31;
      v22 -= 4;
    }
    while (v18 != v17);
    goto LABEL_25;
  }
LABEL_27:
  if (!v111)
    goto LABEL_39;
  v32 = *(_BYTE **)&v117[32];
  if (*(_QWORD *)&v117[48] - *(_QWORD *)&v117[32] > 0x7FFuLL)
    goto LABEL_39;
  v33 = *(_BYTE **)&v117[40];
  v34 = (char *)operator new(0x800uLL);
  v35 = v33 - v32;
  v36 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
  v37 = v36;
  if (v33 != v32)
  {
    if ((unint64_t)(v35 - 4) < 0x2C)
    {
      v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_36:
        v46 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v33 != v32);
      goto LABEL_37;
    }
    v37 = &v34[(v33 - v32) & 0xFFFFFFFFFFFFFFFCLL];
    if (v33 - v34 - (v35 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_36;
    v38 = v35 >> 2;
    v39 = ((unint64_t)(v35 - 4) >> 2) + 1;
    v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
    v41 = &v33[-v40];
    v37 = &v36[-v40];
    v42 = &v34[4 * v38 - 16];
    v43 = (__int128 *)(v33 - 16);
    v44 = v39 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    v33 = v41;
    if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_36;
  }
LABEL_37:
  *(_QWORD *)&v117[32] = v37;
  *(_QWORD *)&v117[40] = v36;
  *(_QWORD *)&v117[48] = v34 + 2048;
  if (v32)
    operator delete(v32);
LABEL_39:
  v47 = (_QWORD *)*v7;
  if ((_QWORD *)*v7 != v99)
  {
    while (1)
    {
      v48 = *((unsigned int *)v47 + 7);
      if (a4[11] <= v48
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v48) / 0x1F)) + 132 * ((a4[10] + v48) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v49 = a4[27] + v48;
      v50 = *(_QWORD *)(a4[24] + ((v49 >> 1) & 0x7FFFFFFFFFFFFFF8));
      v51 = v49 & 0xF;
      v107 = v50 + 248 * (v49 & 0xF);
      sub_223A2B5F8((uint64_t *)v16, *(_QWORD *)(v16 + 8), *(uint64_t **)(v107 + 40), *(uint64_t **)(v107 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v107 + 48) - *(_QWORD *)(v107 + 40)) >> 2));
      sub_223A2B950(v98, *(_QWORD *)(v16 + 328), *(char **)(v50 + 248 * v51 + 64), *(char **)(v50 + 248 * v51 + 72), (uint64_t)(*(_QWORD *)(v50 + 248 * v51 + 72) - *(_QWORD *)(v50 + 248 * v51 + 64)) >> 2);
      v52 = v50 + 248 * v51;
      v53 = *(__int16 **)(v52 + 16);
      v104 = *(unsigned __int16 **)(v52 + 24);
      if (v53 != (__int16 *)v104)
        break;
LABEL_138:
      v94 = (_QWORD *)v47[1];
      if (v94)
      {
        do
        {
          v95 = v94;
          v94 = (_QWORD *)*v94;
        }
        while (v94);
      }
      else
      {
        do
        {
          v95 = (_QWORD *)v47[2];
          v15 = *v95 == (_QWORD)v47;
          v47 = v95;
        }
        while (!v15);
      }
      v47 = v95;
      v16 = a5;
      if (v95 == v99)
        goto LABEL_144;
    }
    v102 = (_DWORD *)(v50 + 248 * v51 + 8);
    while (1)
    {
      v55 = (unsigned __int16)*v53;
      if (*v53 < 0)
      {
        LODWORD(v118) = *v102 + (v55 & 0x7FFF);
        v72 = (unsigned __int16)v53[1];
        if ((v53[1] & 0x80000000) == 0)
          goto LABEL_84;
      }
      else
      {
        v56 = *a1;
        v57 = 4 * (unsigned __int16)*v53;
        v58 = *(unsigned __int8 *)(*a1 + v57);
        if (!*(_BYTE *)(*a1 + v57))
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockMeshMerger.cpp", 177, (uint64_t)"edge_owner != 0", 15, (uint64_t)"Must be an edge owned by a neighbor", 35, (void (*)(void **))sub_22457406C);
          v59 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v60 = qword_255795648;
            v61 = qword_255795650;
            while (v60 != v61)
            {
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v60)(*(_QWORD *)(v60 + 8), "edge_owner != 0", 15, "Must be an edge owned by a neighbor", 35);
              v60 += 16;
            }
          }
          v62 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v62 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
LABEL_154:
            abort();
          qword_255795660(*(_QWORD *)algn_255795668, "edge_owner != 0", 15, "Must be an edge owned by a neighbor", 35);
        }
        v63 = *(unsigned int *)(*(_QWORD *)v107 + 4 * v58 + 24);
        if ((_DWORD)v63 == -1)
          goto LABEL_50;
        if (a4[11] <= v63)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
          v64 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v90 = qword_255795648;
            for (i = qword_255795650; v90 != i; v90 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v90)(*(_QWORD *)(v90 + 8), "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
          }
          v65 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v65 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
            goto LABEL_154;
          qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
        }
        if (*(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v63) / 0x1F)) + 132 * ((a4[10] + v63) % 0x1F) + 20))
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
          v66 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v67 = qword_255795648;
            v68 = qword_255795650;
            while (v67 != v68)
            {
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v67)(*(_QWORD *)(v67 + 8), "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
              v67 += 16;
            }
          }
          v69 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v69 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
            goto LABEL_154;
          qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
        }
        v70 = a4[27] + v63;
        v71 = *(_QWORD *)(a4[24] + ((v70 >> 1) & 0x7FFFFFFFFFFFFFF8));
        if (!v71
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockMeshMerger.cpp", 191, (uint64_t)"neighbor_block_ptr != nullptr", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_154;
        }
        LODWORD(v118) = sub_223A86D94((uint64_t)&v108, v71 + 248 * (v70 & 0xF), *(unsigned __int16 *)(v56 + 4 * v55 + 2));
        if ((_DWORD)v118 == -1)
          goto LABEL_50;
        v72 = (unsigned __int16)v53[1];
        if ((v53[1] & 0x80000000) == 0)
        {
LABEL_84:
          v73 = *a1;
          v74 = 4 * v72;
          v75 = *(unsigned __int8 *)(*a1 + v74);
          if (!*(_BYTE *)(*a1 + v74)
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockMeshMerger.cpp", 177, (uint64_t)"edge_owner != 0", 15, (uint64_t)"Must be an edge owned by a neighbor", 35, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_154;
          }
          v76 = *(unsigned int *)(*(_QWORD *)v107 + 4 * v75 + 24);
          if ((_DWORD)v76 == -1)
            goto LABEL_50;
          if (a4[11] <= v76
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_154;
          }
          if (*(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v76) / 0x1F)) + 132 * ((a4[10] + v76) % 0x1F) + 20))
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
            v77 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v92 = qword_255795648;
              for (j = qword_255795650; v92 != j; v92 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v92)(*(_QWORD *)(v92 + 8), "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
            }
            v78 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v78 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_154;
            qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
          }
          v79 = a4[27] + v76;
          v80 = *(_QWORD *)(a4[24] + ((v79 >> 1) & 0x7FFFFFFFFFFFFFF8));
          if (!v80
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockMeshMerger.cpp", 191, (uint64_t)"neighbor_block_ptr != nullptr", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_154;
          }
          HIDWORD(v118) = sub_223A86D94((uint64_t)&v108, v80 + 248 * (v79 & 0xF), *(unsigned __int16 *)(v73 + 4 * v72 + 2));
          if (HIDWORD(v118) == -1)
            goto LABEL_50;
          v81 = (unsigned __int16)v53[2];
          if (v53[2] < 0)
            goto LABEL_114;
          goto LABEL_100;
        }
      }
      HIDWORD(v118) = *v102 + (v72 & 0x7FFF);
      v81 = (unsigned __int16)v53[2];
      if (v53[2] < 0)
      {
LABEL_114:
        v88 = a5;
        v119 = *v102 + (v81 & 0x7FFF);
        v89 = *(_QWORD *)(a5 + 120);
        if (v89 >= *(_QWORD *)(a5 + 128))
          goto LABEL_115;
        goto LABEL_48;
      }
LABEL_100:
      v82 = *a1;
      v83 = 4 * v81;
      v84 = *(unsigned __int8 *)(*a1 + v83);
      if (!*(_BYTE *)(*a1 + v83)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockMeshMerger.cpp", 177, (uint64_t)"edge_owner != 0", 15, (uint64_t)"Must be an edge owned by a neighbor", 35, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_154;
      }
      v85 = *(unsigned int *)(*(_QWORD *)v107 + 4 * v84 + 24);
      if ((_DWORD)v85 != -1)
      {
        if (a4[11] <= v85
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_154;
        }
        if (*(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v85) / 0x1F)) + 132 * ((a4[10] + v85) % 0x1F) + 20)
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_154;
        }
        v86 = a4[27] + v85;
        v87 = *(_QWORD *)(a4[24] + ((v86 >> 1) & 0x7FFFFFFFFFFFFFF8));
        if (!v87
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockMeshMerger.cpp", 191, (uint64_t)"neighbor_block_ptr != nullptr", 29, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_154;
        }
        v119 = sub_223A86D94((uint64_t)&v108, v87 + 248 * (v86 & 0xF), *(unsigned __int16 *)(v82 + 4 * v81 + 2));
        if (v119 != -1)
        {
          v88 = a5;
          v89 = *(_QWORD *)(a5 + 120);
          if (v89 >= *(_QWORD *)(a5 + 128))
          {
LABEL_115:
            v54 = sub_223A88644(v100, &v118);
            v88 = a5;
            goto LABEL_49;
          }
LABEL_48:
          *(_QWORD *)v89 = v118;
          *(_DWORD *)(v89 + 8) = v119;
          v54 = v89 + 12;
LABEL_49:
          *(_QWORD *)(v88 + 120) = v54;
        }
      }
LABEL_50:
      v53 += 3;
      if (v53 == (__int16 *)v104)
        goto LABEL_138;
    }
  }
LABEL_144:
  sub_223A2B5F8((uint64_t *)v16, *(_QWORD *)(v16 + 8), (uint64_t *)v115, *((uint64_t **)&v115 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v115 + 1) - v115) >> 2));
  sub_223A2B950(v98, *(_QWORD *)(v16 + 328), *(char **)&v117[8], *(char **)&v117[16], (uint64_t)(*(_QWORD *)&v117[16] - *(_QWORD *)&v117[8]) >> 2);
  v96 = v115;
  if (*(_QWORD *)&v117[32])
  {
    *(_QWORD *)&v117[40] = *(_QWORD *)&v117[32];
    operator delete(*(void **)&v117[32]);
  }
  if (*(_QWORD *)&v117[8])
  {
    *(_QWORD *)&v117[16] = *(_QWORD *)&v117[8];
    operator delete(*(void **)&v117[8]);
  }
  if ((_QWORD)v115)
  {
    *((_QWORD *)&v115 + 1) = v115;
    v118 = v115;
    v119 = -1431655765 * ((unint64_t)(v116 - v115) >> 2);
    if (*(_DWORD *)&v117[4] == -1)
      sub_22316DD70();
    v120 = &v118;
    ((void (*)(uint64_t **, _BYTE *))off_24EC5E688[*(unsigned int *)&v117[4]])(&v120, v117);
  }
  if ((_QWORD)v114)
    operator delete(v112);
  return -1431655765 * ((*((_QWORD *)&v96 + 1) - (_QWORD)v96) >> 2);
}

void sub_223A88444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A88458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A88470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  uint64_t *v33;
  void *v35;

  if (__p)
  {
    operator delete(__p);
    v35 = a29;
    if (!a29)
    {
LABEL_3:
      sub_22317EEA4(v33);
      if (!a23)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v35 = a29;
    if (!a29)
      goto LABEL_3;
  }
  operator delete(v35);
  sub_22317EEA4(v33);
  if (!a23)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(a20);
  _Unwind_Resume(a1);
}

void sub_223A884D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A884E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A884FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A88510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A88524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A88538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A8854C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A88560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_223A88574((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223A88574(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t *v10;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(_QWORD *)(a1 + 104) = v3;
    operator delete(v3);
  }
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 72) = v4;
    v5 = -1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 80) - v4) >> 2);
    v8 = v4;
    v9 = v5;
    v6 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v6 == -1)
      sub_22316DD70();
    v10 = &v8;
    ((void (*)(uint64_t **, uint64_t))off_24EC5E688[v6])(&v10, a1 + 88);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    operator delete(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = &unk_2245C5160;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  return a1;
}

unint64_t sub_223A88644(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD **v20;
  int v21;
  _QWORD *v22;

  v3 = 0x1555555555555555;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v3 = v5;
  if (v3)
  {
    LODWORD(v22) = v3;
    v7 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v20 = &v22;
    v8 = ((uint64_t (*)(_QWORD ***, unint64_t *))off_24EC5E698[v7])(&v20, a1 + 3);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v10 = v8 + 12 * v4;
  v11 = *a2;
  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v10 = v11;
  v12 = v10 + 12;
  v14 = *a1;
  v13 = a1[1];
  if (v13 != *a1)
  {
    do
    {
      v15 = *(_QWORD *)(v13 - 12);
      v13 -= 12;
      v16 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)(v10 - 12) = v15;
      v10 -= 12;
      *(_DWORD *)(v10 + 8) = v16;
    }
    while (v13 != v14);
    v13 = *a1;
  }
  *a1 = v10;
  a1[1] = v12;
  v17 = a1[2];
  a1[2] = v8 + 12 * v9;
  if (v13)
  {
    v20 = (_QWORD **)v13;
    v21 = -1431655765 * ((v17 - v13) >> 2);
    v18 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v22 = &v20;
    ((void (*)(_QWORD **, unint64_t *))off_24EC5E6A8[v18])(&v22, a1 + 3);
  }
  return v12;
}

void sub_223A887CC(uint64_t a1, float32x4_t *a2, int a3, _QWORD *a4, int a5, _QWORD *a6, uint64_t **a7, float a8)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float v28;
  uint64_t *v29;
  unsigned int v30;
  double v31;
  double v32;
  int8x16_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  _BYTE *v45;
  int v46;
  float32x4_t v47;
  float v49;
  BOOL v51;
  float v55;
  float v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned int v60;
  _DWORD *v61;
  uint64_t *v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  float32x4_t v67;
  float32x4_t v70;
  float32x2_t v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x2_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x2_t v79;
  float32x4_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x2_t v83;
  std::__shared_weak_count *v85;
  __int128 v86;
  uint64_t v87;

  kdebug_trace();
  if (!*(_BYTE *)(a1 + 624))
    sub_22324A974();
  v67 = *(float32x4_t *)(a1 + 1336);
  v70 = *(float32x4_t *)(a1 + 1352);
  v72 = *a2;
  v74 = *(float32x4_t *)(a1 + 1368);
  v76 = a2[1];
  v78 = a2[2];
  v80 = a2[3];
  v13 = *(std::__shared_weak_count **)(a1 + 584);
  v82 = *(float32x4_t *)(a1 + 1384);
  if (!v13)
  {
    v85 = 0;
    v86 = *(_OWORD *)(a1 + 592);
    v87 = *(_QWORD *)(a1 + 608);
    if (DWORD2(v86))
      v21 = HIDWORD(*(_OWORD *)(a1 + 592)) == 0;
    else
      v21 = 1;
    if (!v21)
      goto LABEL_26;
    goto LABEL_25;
  }
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v86 = *(_OWORD *)(a1 + 592);
  v87 = *(_QWORD *)(a1 + 608);
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v85 = v13;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  if (DWORD2(v86))
    _ZF = HIDWORD(v86) == 0;
  else
    _ZF = 1;
  if (_ZF)
  {
LABEL_25:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/VolumetricMapper/src/VoxelBlockPostProcessing.cpp", 316, (uint64_t)"!depth_image.Empty()", 20, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
LABEL_26:
  v24 = (_QWORD *)*a4;
  v22 = a4 + 1;
  v23 = v24;
  if (v24 != v22)
  {
    v25 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v72.f32[0]), v70, *(float32x2_t *)v72.f32, 1), v74, v72, 2), v82, v72, 3);
    v26 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v76.f32[0]), v70, *(float32x2_t *)v76.f32, 1), v74, v76, 2), v82, v76, 3);
    v27 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v78.f32[0]), v70, *(float32x2_t *)v78.f32, 1), v74, v78, 2), v82, v78, 3);
    v77 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v80.f32[0]), v70, *(float32x2_t *)v80.f32, 1), v74, v80, 2), v82, v80, 3);
    if (a5)
      v28 = 0.8;
    else
      v28 = 0.4;
    v81 = *(float32x2_t *)v26.i8;
    v83 = *(float32x2_t *)v25.i8;
    v73 = (float32x2_t)vextq_s8(v26, v26, 8uLL).u64[0];
    v75 = (float32x2_t)vextq_s8(v25, v25, 8uLL).u64[0];
    v79 = *(float32x2_t *)v27.i8;
    v71 = (float32x2_t)vextq_s8(v27, v27, 8uLL).u64[0];
    do
    {
      v29 = sub_223A5BD5C(a6, (_QWORD *)((char *)v23 + 28), a3);
      if (v29 && *((_WORD *)v29 + 1464) && *((_WORD *)v29 + 1465))
      {
        v34 = v30;
        v35 = 0;
        v36 = 0;
        v37 = (char *)v29 + 2;
        do
        {
          v38 = 0;
          v39 = v37;
          do
          {
            v40 = 0;
            v41 = *(float *)(a1 + 1256);
            v42 = *(float *)(a1 + 1264);
            v43 = *(float *)(a1 + 1260);
            v44 = *(float *)(a1 + 1268);
            LODWORD(v31) = *(_DWORD *)(a1 + 1328);
            v31 = (double)*(unint64_t *)&v31 + -0.5;
            *(float *)&v31 = v31;
            LODWORD(v32) = *(_DWORD *)(a1 + 1332);
            v32 = (double)*(unint64_t *)&v32 + -0.5;
            *(float *)&v32 = v32;
            v45 = v39;
            do
            {
              if (*v45 >= 0x20u)
              {
                v46 = *((__int16 *)v45 - 1);
                if (v46 < 0)
                  v46 = -v46;
                if ((unsigned __int16)v46 <= 0x3FFEu)
                {
                  *(float32x2_t *)v33.i8 = vcvt_f32_s32(vadd_s32(*(int32x2_t *)((char *)v23 + 28), (int32x2_t)__PAIR64__(v38, v40)));
                  *(float *)&v33.i32[2] = (float)(*((_DWORD *)v23 + 9) + v36);
                  v33 = (int8x16_t)vmulq_n_f32((float32x4_t)v33, a8);
                  *(float32x2_t *)v47.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v83, *(float *)v33.i32), v81, *(float32x2_t *)v33.i8, 1), v79, (float32x4_t)v33, 2);
                  *(float32x2_t *)&v47.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v75, *(float32x2_t *)v33.i8), v73, *(float32x2_t *)v33.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), v71);
                  v33.i32[3] = v77.i32[3];
                  _Q7 = vaddq_f32(v77, v47);
                  if (_Q7.f32[2] > 0.000001)
                  {
                    v49 = v42 + (float)((float)(v41 * _Q7.f32[0]) / _Q7.f32[2]);
                    _Q7.f32[0] = v44 + (float)(vmuls_lane_f32(v43, *(float32x2_t *)_Q7.f32, 1) / _Q7.f32[2]);
                    _NF = v49 >= -0.5 && v49 < *(float *)&v31;
                    v51 = !_NF || _Q7.f32[0] < -0.5;
                    if (!v51 && _Q7.f32[0] < *(float *)&v32)
                    {
                      _Q7.i16[0] = *(_WORD *)(v86
                                            + 2
                                            * ((_DWORD)v87 * v49 + HIDWORD(v87) * _Q7.f32[0]));
                      __asm { FCVT            S7, H7 }
                      _Q7.f32[0] = _Q7.f32[0] - _Q7.f32[2];
                      v55 = (float)((float)(_Q7.f32[2] + -3.5) * (float)((float)(v28 * 0.5) * (float)(_Q7.f32[2] + -3.5)))
                          + 0.16;
                      if (_Q7.f32[2] > 4.5)
                        v55 = (float)((float)((float)(v28 * 0.5) + (float)(v28 * -4.5)) + 0.16)
                            + (float)(v28 * _Q7.f32[2]);
                      if (_Q7.f32[2] > 3.5)
                        v56 = v55;
                      else
                        v56 = 0.16;
                      if (_Q7.f32[0] > v56)
                      {
                        *v45 = 0;
                        ++v35;
                      }
                    }
                  }
                }
              }
              ++v40;
              v45 += 4;
            }
            while (v40 != 8);
            ++v38;
            v39 += 36;
          }
          while (v38 != 8);
          ++v36;
          v37 += 324;
        }
        while (v36 != 8);
        if (v35)
        {
          v57 = a7 + 1;
          while (1)
          {
            v58 = *v57;
            v59 = v57;
            if (!*v57)
              break;
            while (1)
            {
              v57 = (_QWORD *)v58;
              v60 = *(_DWORD *)(v58 + 28);
              if (v60 > v30)
                break;
              if (v60 >= v30)
                goto LABEL_74;
              v58 = v57[1];
              if (!v58)
              {
                v59 = v57 + 1;
                goto LABEL_71;
              }
            }
          }
LABEL_71:
          v61 = operator new(0x20uLL);
          v61[7] = v34;
          *(_QWORD *)v61 = 0;
          *((_QWORD *)v61 + 1) = 0;
          *((_QWORD *)v61 + 2) = v57;
          *v59 = v61;
          v62 = (uint64_t *)**a7;
          if (v62)
          {
            *a7 = v62;
            v61 = (_DWORD *)*v59;
          }
          sub_2231A9A8C(a7[1], (uint64_t *)v61);
          a7[2] = (uint64_t *)((char *)a7[2] + 1);
        }
      }
LABEL_74:
      v63 = (_QWORD *)v23[1];
      if (v63)
      {
        do
        {
          v64 = v63;
          v63 = (_QWORD *)*v63;
        }
        while (v63);
      }
      else
      {
        do
        {
          v64 = (_QWORD *)v23[2];
          _ZF = *v64 == (_QWORD)v23;
          v23 = v64;
        }
        while (!_ZF);
      }
      v23 = v64;
    }
    while (v64 != v22);
  }
  kdebug_trace();
  if (v85)
  {
    v65 = (unint64_t *)&v85->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_223A88E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_22319EF60((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_223A88E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_22319EF60((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_223A88E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_22319EF60((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_223A88E40(uint64_t a1, _QWORD *a2, _QWORD *a3, int a4, uint64_t **a5, double a6, float a7)
{
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  unsigned int v13;
  int v14;
  signed int v15;
  int v16;
  signed int v17;
  int i;
  signed int v19;
  _QWORD **v20;
  _QWORD *v21;
  _QWORD *v22;
  signed int v23;
  BOOL v24;
  signed int v25;
  signed int v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD **v41;
  float v42;
  uint64_t *v43;
  _QWORD *v44;
  _QWORD **v45;
  uint64_t *v46;
  unsigned int v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  _BOOL4 v61;
  _BOOL4 v63;
  float v65;
  BOOL v66;
  int v67;
  BOOL v68;
  BOOL v69;
  _QWORD *v70;
  _QWORD **v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  signed int v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x2_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x2_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x2_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x2_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x2_t v93;
  float32x4_t v94;
  int8x16_t v95;
  float32x2_t v96;
  float32x4_t v97;
  int8x16_t v98;
  float32x2_t v99;
  float32x4_t v100;
  uint64_t *v101;
  uint64_t **v102;
  uint64_t **v103;
  int v104;
  int v105;
  signed int v106;
  int v107;
  int v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  unsigned int v114;
  _DWORD *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  std::mutex *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  std::string::size_type size;
  std::string *v126;
  std::string::size_type v127;
  std::string::size_type v128;
  int v129;
  __n128 *v132;
  std::string *v133;
  size_t v134;
  unsigned __int8 v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  const char *v140;
  size_t v141;
  unsigned __int8 v142;
  unsigned __int8 v143;
  const char *v144;
  size_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  size_t v153;
  std::__shared_weak_count_vtbl *v154;
  std::__shared_weak_count *v155;
  std::__shared_weak_count *v156;
  unint64_t *p_shared_owners;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  std::string::size_type v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::string::size_type v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  void *v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  std::mutex *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 *v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  std::mutex *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  std::string *v210;
  uint64_t v211;
  uint64_t v212;
  std::string::size_type v213;
  char v214;
  std::string::size_type v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  std::string::size_type v220;
  std::string::size_type v221;
  std::string *v222;
  std::string::size_type v223;
  std::string::size_type v224;
  int v225;
  int v228;
  std::string::size_type v229;
  uint64_t v230;
  uint64_t v231;
  std::string::size_type v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  std::mutex *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  std::string *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  int32x2_t v245;
  float32x4_t v246;
  int32x2_t v247;
  uint64_t **v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  __int128 v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  unint64_t *v267;
  unint64_t v268;
  float *v271;
  unsigned int v274;
  int v275;
  const char *v276;
  unsigned int v277;
  float32x4_t v278;
  int v279;
  float32x4_t v280;
  std::string::size_type v281;
  void *v282;
  float32x4_t v283;
  uint64_t **v284;
  uint64_t *v285;
  std::string::size_type v286;
  _QWORD **v287;
  _QWORD *v288;
  uint64_t v289;
  std::string v290;
  __int128 v291;
  std::string v292;
  std::string v293;
  __int16 v294;
  char v295;
  _QWORD v296[2];
  __int128 __p;
  __int128 v298;
  const char *v299;
  int v300;
  const char *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  std::string v304;
  uint64_t v305;
  _BYTE object[40];
  void *v307[2];
  unint64_t v308;
  char v309;
  uint64_t v310;

  *(double *)v280.i64 = a6;
  v310 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v9 = 0;
  v10.i64[0] = *(_QWORD *)a1;
  v271 = (float *)a1;
  v10.i32[2] = *(_DWORD *)(a1 + 8);
  v288 = 0;
  v289 = 0;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vaddq_f32(vmulq_n_f32(v10, 1.0 / v280.f32[0]), v11);
  v287 = &v288;
  v13 = vcvtms_s32_f32(v12.f32[0]) & 0xFFFFFFF8;
  v277 = vcvtms_s32_f32(v12.f32[1]) & 0xFFFFFFF8;
  v274 = vcvtms_s32_f32(v12.f32[2]) & 0xFFFFFFF8;
  v14 = -1;
  do
  {
    v275 = v14;
    v15 = v274 + 8 * v14;
    v16 = -1;
    do
    {
      v279 = v16;
      v17 = v277 + 8 * v16;
      for (i = -1; i != 2; ++i)
      {
        v19 = v13 + 8 * i;
        v20 = &v288;
        v21 = &v288;
        if (v288)
        {
          v22 = v288;
          while (1)
          {
            v20 = (_QWORD **)v22;
            v23 = *((_DWORD *)v22 + 7);
            v24 = v19 < v23;
            if (v19 == v23 && (v25 = *((_DWORD *)v20 + 8), v24 = v17 < v25, v17 == v25))
            {
              v26 = *((_DWORD *)v20 + 9);
              if (v15 >= v26)
              {
                if (v26 >= v15)
                  goto LABEL_42;
                goto LABEL_15;
              }
LABEL_8:
              v22 = *v20;
              v21 = v20;
              if (!*v20)
                break;
            }
            else
            {
              if (v24)
                goto LABEL_8;
LABEL_15:
              v22 = v20[1];
              if (!v22)
              {
                v21 = v20 + 1;
                break;
              }
            }
          }
        }
        v27 = operator new(0x28uLL);
        *((_DWORD *)v27 + 7) = v19;
        *((_DWORD *)v27 + 8) = v17;
        *((_DWORD *)v27 + 9) = v15;
        *v27 = 0;
        v27[1] = 0;
        v27[2] = v20;
        *v21 = v27;
        if (*v287)
        {
          v287 = (_QWORD **)*v287;
          v27 = (_QWORD *)*v21;
        }
        v28 = v288;
        v68 = v27 == v288;
        *((_BYTE *)v27 + 24) = v27 == v288;
        if (!v68)
        {
          do
          {
            v29 = v27[2];
            if (*(_BYTE *)(v29 + 24))
              break;
            v30 = *(_QWORD **)(v29 + 16);
            v31 = *v30;
            if (*v30 == v29)
            {
              v34 = v30[1];
              if (!v34 || (v35 = *(unsigned __int8 *)(v34 + 24), v32 = (_BYTE *)(v34 + 24), v35))
              {
                if (*(_QWORD **)v29 == v27)
                {
                  *(_BYTE *)(v29 + 24) = 1;
                  *((_BYTE *)v30 + 24) = 0;
                  v38 = *(_QWORD *)(v29 + 8);
                  *v30 = v38;
                  if (v38)
                    goto LABEL_34;
                }
                else
                {
                  v36 = *(uint64_t **)(v29 + 8);
                  v37 = *v36;
                  *(_QWORD *)(v29 + 8) = *v36;
                  if (v37)
                  {
                    *(_QWORD *)(v37 + 16) = v29;
                    v30 = *(_QWORD **)(v29 + 16);
                  }
                  v36[2] = (uint64_t)v30;
                  *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8 * (**(_QWORD **)(v29 + 16) != v29)) = v36;
                  *v36 = v29;
                  *(_QWORD *)(v29 + 16) = v36;
                  v30 = (_QWORD *)v36[2];
                  v29 = *v30;
                  *((_BYTE *)v36 + 24) = 1;
                  *((_BYTE *)v30 + 24) = 0;
                  v38 = *(_QWORD *)(v29 + 8);
                  *v30 = v38;
                  if (v38)
LABEL_34:
                    *(_QWORD *)(v38 + 16) = v30;
                }
                *(_QWORD *)(v29 + 16) = v30[2];
                *(_QWORD *)(v30[2] + 8 * (*(_QWORD *)v30[2] != (_QWORD)v30)) = v29;
                *(_QWORD *)(v29 + 8) = v30;
LABEL_40:
                v30[2] = v29;
                break;
              }
            }
            else if (!v31 || (v33 = *(unsigned __int8 *)(v31 + 24), v32 = (_BYTE *)(v31 + 24), v33))
            {
              if (*(_QWORD **)v29 == v27)
              {
                v40 = v27[1];
                *(_QWORD *)v29 = v40;
                if (v40)
                {
                  *(_QWORD *)(v40 + 16) = v29;
                  v30 = *(_QWORD **)(v29 + 16);
                }
                v27[2] = v30;
                *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8 * (**(_QWORD **)(v29 + 16) != v29)) = v27;
                v27[1] = v29;
                *(_QWORD *)(v29 + 16) = v27;
                v30 = (_QWORD *)v27[2];
                *((_BYTE *)v27 + 24) = 1;
                *((_BYTE *)v30 + 24) = 0;
                v29 = v30[1];
                v39 = *(_QWORD **)v29;
                v30[1] = *(_QWORD *)v29;
                if (v39)
LABEL_38:
                  v39[2] = v30;
              }
              else
              {
                *(_BYTE *)(v29 + 24) = 1;
                *((_BYTE *)v30 + 24) = 0;
                v29 = v30[1];
                v39 = *(_QWORD **)v29;
                v30[1] = *(_QWORD *)v29;
                if (v39)
                  goto LABEL_38;
              }
              *(_QWORD *)(v29 + 16) = v30[2];
              *(_QWORD *)(v30[2] + 8 * (*(_QWORD *)v30[2] != (_QWORD)v30)) = v29;
              *(_QWORD *)v29 = v30;
              goto LABEL_40;
            }
            *(_BYTE *)(v29 + 24) = 1;
            v27 = v30;
            *((_BYTE *)v30 + 24) = v30 == v28;
            *v32 = 1;
          }
          while (v30 != v28);
        }
        v289 = ++v9;
LABEL_42:
        ;
      }
      v16 = v279 + 1;
    }
    while (v279 != 1);
    v14 = v275 + 1;
  }
  while (v275 != 1);
  v285 = 0;
  v286 = 0;
  v284 = &v285;
  v41 = v287;
  if (v287 != &v288)
  {
    if (a7 >= 0.0)
    {
      v42 = v280.f32[0] * 7.0;
      v43 = (uint64_t *)(a5 + 1);
      while (1)
      {
        v46 = sub_223A5BD5C(a3, (uint64_t *)((char *)v41 + 28), a4);
        if (v46)
        {
          v54.i64[0] = *(uint64_t *)((char *)v41 + 28);
          *(float32x2_t *)v48.f32 = vcvt_f32_s32(*(int32x2_t *)v54.f32);
          v57 = *((_DWORD *)v41 + 9);
          v48.f32[2] = (float)v57;
          v58 = v280;
          v59 = vmulq_n_f32(v48, v280.f32[0]);
          v60 = v271[1];
          v61 = (float)((float)(v42 + v59.f32[0]) + a7) > *v271;
          if (v59.f32[0] > (float)(v42 + v59.f32[0]) || (float)(v59.f32[0] - a7) >= *v271)
            v61 = 0;
          v63 = (float)((float)(v42 + v59.f32[1]) + a7) > v60;
          if (v59.f32[1] > (float)(v42 + v59.f32[1]) || (float)(v59.f32[1] - a7) >= v60)
            v63 = 0;
          v65 = v271[2];
          v66 = v59.f32[2] <= (float)(v42 + v59.f32[2]) && (float)(v59.f32[2] - a7) < v65;
          v67 = v61 && v63;
          v68 = v66 && v67 == 1;
          v69 = !v68 || (float)((float)(v42 + v59.f32[2]) + a7) <= v65;
          if (!v69 && *((_WORD *)v46 + 1464) && *((_WORD *)v46 + 1465))
          {
            v72 = v47;
            v73 = 0;
            v74 = 0;
            v75 = *(_QWORD **)((char *)v41 + 28);
            v59.f32[0] = (float)(v54.i32[0] + 1);
            v58.f32[0] = (float)(v54.i32[0] + 2);
            v49.f32[0] = (float)(v54.i32[0] + 3);
            v50.f32[0] = (float)(v54.i32[0] + 4);
            v51.f32[0] = (float)(v54.i32[0] + 5);
            v52.f32[0] = (float)(v54.i32[0] + 6);
            v53.f32[0] = (float)(v54.i32[0] + 7);
            v54.f32[0] = (float)v54.i32[0];
            v76 = (char *)v46 + 18;
            do
            {
              v77 = 0;
              v78 = v76;
              do
              {
                v79 = v54;
                v79.f32[1] = (float)(v54.i32[1] + v77);
                v79.f32[2] = (float)(v57 + v74);
                v56.i64[0] = *(_QWORD *)v271;
                v56.f32[2] = v271[2];
                v80 = (int8x16_t)vmlaq_n_f32(vnegq_f32(v56), v79, v280.f32[0]);
                v81 = (float32x2_t)vextq_s8(v80, v80, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1), *(float32x2_t *)v80.i8, 1), v81, v81).f32[0]) < a7)
                {
                  *(v78 - 16) = 0;
                  ++v73;
                }
                v82 = v59;
                v82.f32[1] = (float)(v54.i32[1] + v77);
                v82.f32[2] = (float)(v57 + v74);
                v80.i64[0] = *(_QWORD *)v271;
                v80.i32[2] = (__int32)v271[2];
                v83 = (int8x16_t)vmlaq_n_f32(vnegq_f32((float32x4_t)v80), v82, v280.f32[0]);
                v84 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v83.i8, 1), v84, v84).f32[0]) < a7)
                {
                  *(v78 - 12) = 0;
                  ++v73;
                }
                v85 = v58;
                v85.f32[1] = (float)(v54.i32[1] + v77);
                v85.f32[2] = (float)(v57 + v74);
                v83.i64[0] = *(_QWORD *)v271;
                v83.i32[2] = (__int32)v271[2];
                v86 = (int8x16_t)vmlaq_n_f32(vnegq_f32((float32x4_t)v83), v85, v280.f32[0]);
                v87 = (float32x2_t)vextq_s8(v86, v86, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v86.i8, *(float32x2_t *)v86.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1), *(float32x2_t *)v86.i8, 1), v87, v87).f32[0]) < a7)
                {
                  *(v78 - 8) = 0;
                  ++v73;
                }
                v88 = v49;
                v88.f32[1] = (float)(v54.i32[1] + v77);
                v88.f32[2] = (float)(v57 + v74);
                v86.i64[0] = *(_QWORD *)v271;
                v86.i32[2] = (__int32)v271[2];
                v89 = (int8x16_t)vmlaq_n_f32(vnegq_f32((float32x4_t)v86), v88, v280.f32[0]);
                v90 = (float32x2_t)vextq_s8(v89, v89, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v89.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1), *(float32x2_t *)v89.i8, 1), v90, v90).f32[0]) < a7)
                {
                  *(v78 - 4) = 0;
                  ++v73;
                }
                v91 = v50;
                v91.f32[1] = (float)(v54.i32[1] + v77);
                v91.f32[2] = (float)(v57 + v74);
                v89.i64[0] = *(_QWORD *)v271;
                v89.i32[2] = (__int32)v271[2];
                v92 = (int8x16_t)vmlaq_n_f32(vnegq_f32((float32x4_t)v89), v91, v280.f32[0]);
                v93 = (float32x2_t)vextq_s8(v92, v92, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v92.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.i8, 1), *(float32x2_t *)v92.i8, 1), v93, v93).f32[0]) < a7)
                {
                  *v78 = 0;
                  ++v73;
                }
                v94 = v51;
                v94.f32[1] = (float)(v54.i32[1] + v77);
                v94.f32[2] = (float)(v57 + v74);
                v92.i64[0] = *(_QWORD *)v271;
                v92.i32[2] = (__int32)v271[2];
                v95 = (int8x16_t)vmlaq_n_f32(vnegq_f32((float32x4_t)v92), v94, v280.f32[0]);
                v96 = (float32x2_t)vextq_s8(v95, v95, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v95.i8, *(float32x2_t *)v95.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1), *(float32x2_t *)v95.i8, 1), v96, v96).f32[0]) < a7)
                {
                  v78[4] = 0;
                  ++v73;
                }
                v97 = v52;
                v97.f32[1] = (float)(v54.i32[1] + v77);
                v97.f32[2] = (float)(v57 + v74);
                v95.i64[0] = *(_QWORD *)v271;
                v95.i32[2] = (__int32)v271[2];
                v98 = (int8x16_t)vmlaq_n_f32(vnegq_f32((float32x4_t)v95), v97, v280.f32[0]);
                v99 = (float32x2_t)vextq_s8(v98, v98, 8uLL).u64[0];
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1), *(float32x2_t *)v98.i8, 1), v99, v99).f32[0]) < a7)
                {
                  v78[8] = 0;
                  ++v73;
                }
                v100 = v53;
                v100.f32[1] = (float)(v54.i32[1] + v77);
                v100.f32[2] = (float)(v57 + v74);
                v55.i64[0] = *(_QWORD *)v271;
                v55.i32[2] = (__int32)v271[2];
                v55 = (int8x16_t)vmlaq_n_f32(vnegq_f32((float32x4_t)v55), v100, v280.f32[0]);
                v56 = (float32x4_t)vextq_s8(v55, v55, 8uLL);
                if (sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v55.i8, *(float32x2_t *)v55.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1), *(float32x2_t *)v55.i8, 1), *(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32).f32[0]) < a7)
                {
                  v78[12] = 0;
                  ++v73;
                }
                ++v77;
                v78 += 36;
              }
              while (v77 != 8);
              ++v74;
              v76 += 324;
            }
            while (v74 != 8);
            if (v73)
            {
              v101 = v285;
              v102 = &v285;
              v103 = &v285;
              if (v285)
              {
                v104 = *((_DWORD *)v41 + 8);
                v105 = *((_DWORD *)v41 + 9);
                while (1)
                {
                  while (1)
                  {
                    v102 = (uint64_t **)v101;
                    v106 = *((_DWORD *)v101 + 7);
                    if (v75 == v106)
                      break;
                    if (v75 >= v106)
                    {
                      if (v106 >= v75)
                        goto LABEL_130;
                      goto LABEL_125;
                    }
LABEL_114:
                    v101 = *v102;
                    v103 = v102;
                    if (!*v102)
                      goto LABEL_127;
                  }
                  v107 = *((_DWORD *)v102 + 8);
                  if (v104 != v107)
                  {
                    if (v104 >= v107)
                    {
                      if (v107 >= v104)
                        goto LABEL_130;
                      goto LABEL_125;
                    }
                    goto LABEL_114;
                  }
                  v108 = *((_DWORD *)v102 + 9);
                  if (v105 < v108)
                    goto LABEL_114;
                  if (v108 >= v105)
                    goto LABEL_130;
LABEL_125:
                  v101 = v102[1];
                  if (!v101)
                  {
                    v103 = v102 + 1;
                    break;
                  }
                }
              }
LABEL_127:
              v109 = (char *)operator new(0x28uLL);
              v110 = *(uint64_t *)((char *)v41 + 28);
              *((_DWORD *)v109 + 9) = *((_DWORD *)v41 + 9);
              *(_QWORD *)(v109 + 28) = v110;
              *(_QWORD *)v109 = 0;
              *((_QWORD *)v109 + 1) = 0;
              *((_QWORD *)v109 + 2) = v102;
              *v103 = (uint64_t *)v109;
              if (*v284)
              {
                v284 = (uint64_t **)*v284;
                v109 = (char *)*v103;
              }
              sub_2231A9A8C(v285, (uint64_t *)v109);
              ++v286;
LABEL_130:
              v111 = *v43;
              v112 = a5 + 1;
              v113 = a5 + 1;
              if (*v43)
              {
                while (1)
                {
                  while (1)
                  {
                    v113 = (_QWORD *)v111;
                    v114 = *(_DWORD *)(v111 + 28);
                    if (v114 <= v72)
                      break;
                    v111 = *v113;
                    v112 = v113;
                    if (!*v113)
                      goto LABEL_137;
                  }
                  if (v114 >= v72)
                    break;
                  v111 = v113[1];
                  if (!v111)
                  {
                    v112 = v113 + 1;
                    goto LABEL_137;
                  }
                }
              }
              else
              {
LABEL_137:
                v115 = operator new(0x20uLL);
                v115[7] = v72;
                *(_QWORD *)v115 = 0;
                *((_QWORD *)v115 + 1) = 0;
                *((_QWORD *)v115 + 2) = v113;
                *v112 = v115;
                v116 = (uint64_t *)**a5;
                if (v116)
                {
                  *a5 = v116;
                  v115 = (_DWORD *)*v112;
                }
                sub_2231A9A8C(a5[1], (uint64_t *)v115);
                a5[2] = (uint64_t *)((char *)a5[2] + 1);
              }
            }
          }
        }
        v70 = v41[1];
        if (v70)
        {
          do
          {
            v71 = (_QWORD **)v70;
            v70 = (_QWORD *)*v70;
          }
          while (v70);
        }
        else
        {
          do
          {
            v71 = (_QWORD **)v41[2];
            v68 = *v71 == v41;
            v41 = v71;
          }
          while (!v68);
        }
        v41 = v71;
        if (v71 == &v288)
          goto LABEL_140;
      }
    }
    do
    {
      sub_223A5BD5C(a3, (uint64_t *)((char *)v41 + 28), a4);
      v44 = v41[1];
      if (v44)
      {
        do
        {
          v45 = (_QWORD **)v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD **)v41[2];
          v68 = *v45 == v41;
          v41 = v45;
        }
        while (!v68);
      }
      v41 = v45;
    }
    while (v45 != &v288);
  }
LABEL_140:
  kdebug_trace();
  *(_QWORD *)object = "cv3d.recon.";
  *(_QWORD *)&object[8] = 11;
  *(_QWORD *)&object[16] = "Stats.Volumetric.PostProcessing";
  *(_QWORD *)&object[24] = 31;
  sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v304);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v117 = sub_2241471F8();
    v118 = v117[2];
    if (!v118)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v118 = v117[2];
    }
    v119 = *(_QWORD *)(v118 + 64);
    v120 = (std::mutex *)(v119 + 32);
    std::mutex::lock((std::mutex *)(v119 + 32));
    v122 = *(_QWORD *)(v119 + 96);
    v121 = *(_QWORD *)(v119 + 104);
    std::mutex::unlock(v120);
    if (v122 != v121)
    {
      sub_2241471F8();
      v123 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123))
      {
        memset(object, 0, 32);
        *(_DWORD *)&object[32] = 728325608;
        kdebug_trace();
        v292.__r_.__value_.__r.__words[0] = v286;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123))
        {
          BYTE7(v298) = 9;
          strcpy((char *)&__p, "headcarve");
          v293.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          v293.__r_.__value_.__l.__size_ = 2;
          v124 = sub_2241471F8();
          sub_2231AD778((uint64_t)v124, v123, (uint64_t *)&v292, (uint64_t)&__p, (__int128 *)&v293);
          if (SBYTE7(v298) < 0)
            operator delete((void *)__p);
        }
        kdebug_trace();
      }
    }
  }
  memset(object, 0, 32);
  *(_DWORD *)&object[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(v304.__r_.__value_.__r.__words[2]);
  if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v304.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v126 = &v304;
    if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v126 = (std::string *)v304.__r_.__value_.__r.__words[0];
    v127 = v126->__r_.__value_.__r.__words[0];
    v128 = v126->__r_.__value_.__l.__size_;
    v129 = v126->__r_.__value_.__s.__data_[16];
    if (v127 == 0x6365722E64337663 && v128 == 0x73746174532E6E6FLL && v129 == 46)
    {
      v132 = sub_223187510();
      if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v133 = &v304;
      else
        v133 = (std::string *)v304.__r_.__value_.__r.__words[0];
      if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v134 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
      else
        v134 = v304.__r_.__value_.__l.__size_;
      *(_QWORD *)&__p = v286;
      sub_22318760C((uint64_t *)v132, v133, v134, (uint64_t *)&__p, (uint64_t)"headcarve", 9);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v304.__r_.__value_.__l.__data_);
    if (!v286)
      goto LABEL_263;
  }
  else if (!v286)
  {
    goto LABEL_263;
  }
  v135 = atomic_load((unsigned __int8 *)&qword_2540CCCD8);
  if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCCD8))
  {
    sub_22455F53C(&__p);
    sub_223174DE4(object, "cv3dapi.recon3d");
    sub_2232300E0((uint64_t **)&__p, (uint64_t)object, &qword_2540CCCD0);
    if ((object[23] & 0x80000000) != 0)
      operator delete(*(void **)object);
    __cxa_guard_release(&qword_2540CCCD8);
  }
  v292.__r_.__value_.__r.__words[0] = qword_2540CCCD0;
  if (**(int **)(qword_2540CCCD0 + 56) <= 3)
  {
    v136 = *(unsigned __int8 *)(qword_2540CCCD0 + 72);
    v137 = sub_22322F254(qword_2540CCCD0, "OSLogSurrogateAppender", 1, 0);
    v138 = v137;
    if (v136 || v137)
    {
      *(_QWORD *)&__p = &v292;
      *((std::chrono::steady_clock::time_point *)&__p + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v298 = std::chrono::system_clock::now();
      DWORD2(v298) = 3;
      v299 = "unknown file";
      v300 = 123;
      v302 = 0;
      v303 = 0;
      v301 = "unknown function";
      v139 = *(_QWORD *)__p;
      v140 = (const char *)(*(_QWORD *)__p + 16);
      v276 = v140;
      if (*(char *)(*(_QWORD *)__p + 39) < 0)
      {
        v140 = *(const char **)(v139 + 16);
        v141 = *(_QWORD *)(v139 + 24);
        v281 = v286;
        v143 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v143 & 1) != 0)
          goto LABEL_182;
      }
      else
      {
        v141 = *(unsigned __int8 *)(*(_QWORD *)__p + 39);
        v281 = v286;
        v142 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v142 & 1) != 0)
          goto LABEL_182;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)object);
        sub_223199C58("com.apple.cv3d", (unint64_t)object, byte_255788F40);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_182:
      if (byte_255788F40[23] >= 0)
        v144 = byte_255788F40;
      else
        v144 = *(const char **)byte_255788F40;
      if (byte_255788F40[23] >= 0)
        v145 = byte_255788F40[23];
      else
        v145 = *(_QWORD *)&byte_255788F40[8];
      *(_QWORD *)object = os_log_create(v144, v140);
      v146 = &object[8];
      if (v145 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v145 >= 0x17)
      {
        v147 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v145 | 7) != 0x17)
          v147 = v145 | 7;
        v148 = v147 + 1;
        v146 = operator new(v147 + 1);
        *(_QWORD *)&object[16] = v145;
        *(_QWORD *)&object[24] = v148 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v146;
      }
      else
      {
        object[31] = v145;
        if (!v145)
        {
LABEL_196:
          v146[v145] = 0;
          object[32] = 1;
          v149 = v307;
          if (v141 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v141 >= 0x17)
          {
            v150 = (v141 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v141 | 7) != 0x17)
              v150 = v141 | 7;
            v151 = v150 + 1;
            v149 = operator new(v150 + 1);
            v307[1] = (void *)v141;
            v308 = v151 | 0x8000000000000000;
            v307[0] = v149;
          }
          else
          {
            HIBYTE(v308) = v141;
            if (!v141)
              goto LABEL_204;
          }
          memmove(v149, v140, v141);
LABEL_204:
          *((_BYTE *)v149 + v141) = 0;
          v309 = 1;
          v152 = *(NSObject **)object;
          if (SHIBYTE(v308) < 0)
            operator delete(v307[0]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v138 && *(_QWORD *)(v138 + 24))
          {
            v153 = _os_log_pack_size();
            v154 = (std::__shared_weak_count_vtbl *)operator new(v153, (std::align_val_t)8uLL);
            v155 = (std::__shared_weak_count *)operator new();
            v156 = v155;
            v155->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v155->__shared_owners_;
            v155->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v155->__shared_weak_owners_ = 0;
            v155[1].__vftable = v154;
            *(_QWORD *)object = v154;
            *(_QWORD *)&object[8] = v154;
            *(_QWORD *)&object[16] = v155;
            do
              v158 = __ldxr(p_shared_owners);
            while (__stxr(v158 + 1, p_shared_owners));
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            v307[0] = 0;
            do
              v159 = __ldaxr(p_shared_owners);
            while (__stlxr(v159 - 1, p_shared_owners));
            if (!v159)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v156);
            }
            v160 = *(_QWORD *)object;
            v161 = _os_log_pack_fill();
            *(_DWORD *)v161 = 134217984;
            *(_QWORD *)(v161 + 4) = v281;
            v162 = operator new();
            v163 = *(unsigned __int8 *)(v139 + 39);
            v164 = v276;
            if ((v163 & 0x80u) != 0)
            {
              v164 = *(const char **)(v139 + 16);
              v163 = *(_QWORD *)(v139 + 24);
            }
            *(_QWORD *)v162 = v160;
            *(_OWORD *)(v162 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v162 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v162 + 40) = v164;
            *(_QWORD *)(v162 + 48) = v163;
            *(_BYTE *)(v162 + 56) = 1;
            v293.__r_.__value_.__r.__words[0] = 0;
            v304.__r_.__value_.__r.__words[0] = v162;
            (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v138 + 24) + 40))(*(_QWORD *)(v138 + 24), &v304);
            v165 = v304.__r_.__value_.__r.__words[0];
            v304.__r_.__value_.__r.__words[0] = 0;
            if (v165)
            {
              v166 = *(std::__shared_weak_count **)(v165 + 32);
              if (v166)
              {
                v167 = (unint64_t *)&v166->__shared_owners_;
                do
                  v168 = __ldaxr(v167);
                while (__stlxr(v168 - 1, v167));
                if (!v168)
                {
                  ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                  std::__shared_weak_count::__release_weak(v166);
                }
              }
              v169 = *(std::__shared_weak_count **)(v165 + 16);
              if (v169)
              {
                v170 = (unint64_t *)&v169->__shared_owners_;
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
              }
              MEMORY[0x227684CE8](v165, 0x10F0C40B62ED6C6);
              v172 = v293.__r_.__value_.__r.__words[0];
              v293.__r_.__value_.__r.__words[0] = 0;
              if (v172)
              {
                v173 = *(std::__shared_weak_count **)(v172 + 32);
                if (v173)
                {
                  v174 = (unint64_t *)&v173->__shared_owners_;
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 - 1, v174));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                  }
                }
                v176 = *(std::__shared_weak_count **)(v172 + 16);
                if (v176)
                {
                  v177 = (unint64_t *)&v176->__shared_owners_;
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                  }
                }
                MEMORY[0x227684CE8](v172, 0x10F0C40B62ED6C6);
              }
            }
            v179 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v180 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v181 = __ldaxr(v180);
              while (__stlxr(v181 - 1, v180));
              if (!v181)
              {
                ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                std::__shared_weak_count::__release_weak(v179);
              }
            }
            v182 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v183 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
          }
          else
          {
            os_log_type_enabled(v152, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134217984;
            *(_QWORD *)&object[4] = v281;
            v185 = (void *)_os_log_send_and_compose_impl();
            if (v185)
              free(v185);
          }
          if (v136)
          {
            sub_22322C138((uint64_t)&__p, "VLM:PP:HC %lu", v286);
            sub_223182C08((uint64_t)&__p);
          }
          sub_223182C08((uint64_t)&__p);
          v186 = v303;
          if (v303)
          {
            v187 = (unint64_t *)&v303->__shared_owners_;
            do
              v188 = __ldaxr(v187);
            while (__stlxr(v188 - 1, v187));
            if (!v188)
            {
              ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
              std::__shared_weak_count::__release_weak(v186);
            }
          }
          goto LABEL_263;
        }
      }
      memmove(v146, v144, v145);
      goto LABEL_196;
    }
  }
LABEL_263:
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_380;
  v189 = sub_2241471F8();
  v190 = v189[2];
  if (!v190)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_385;
    }
    v190 = v189[2];
  }
  v191 = *(_QWORD *)(v190 + 64);
  v192 = (std::mutex *)(v191 + 32);
  std::mutex::lock((std::mutex *)(v191 + 32));
  v194 = *(_QWORD *)(v191 + 96);
  v193 = *(_QWORD *)(v191 + 104);
  std::mutex::unlock(v192);
  if (v194 != v193)
  {
    *(_QWORD *)object = "cv3d.recon.";
    *(_QWORD *)&object[8] = 11;
    *(_QWORD *)&object[16] = "Volumetric.KeyVol.HeadCarve";
    *(_QWORD *)&object[24] = 27;
    sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, (std::string *)&__p);
    v195 = BYTE7(v298);
    v196 = __p;
    sub_2241471F8();
    v197 = (v195 & 0x80u) == 0 ? &__p : (__int128 *)v196;
    v198 = (v195 & 0x80u) == 0 ? v195 : *((_QWORD *)&v196 + 1);
    v199 = (*(uint64_t (**)(uint64_t *, __int128 *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v197, v198);
    v200 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199);
    v201 = v200;
    if (SBYTE7(v298) < 0)
    {
      operator delete((void *)__p);
      if ((v201 & 1) == 0)
        goto LABEL_380;
    }
    else if ((v200 & 1) == 0)
    {
      goto LABEL_380;
    }
    *(_QWORD *)object = "cv3d.recon.";
    *(_QWORD *)&object[8] = 11;
    *(_QWORD *)&object[16] = "Volumetric.KeyVol.HeadCarve";
    *(_QWORD *)&object[24] = 27;
    sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v293);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v202 = sub_2241471F8();
      v203 = v202[2];
      if (!v203)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v203 = v202[2];
      }
      v204 = *(_QWORD *)(v203 + 64);
      v205 = (std::mutex *)(v204 + 32);
      std::mutex::lock((std::mutex *)(v204 + 32));
      v207 = *(_QWORD *)(v204 + 96);
      v206 = *(_QWORD *)(v204 + 104);
      std::mutex::unlock(v205);
      if (v207 != v206)
      {
        v208 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
        v209 = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
        sub_2241471F8();
        v210 = (v208 & 0x80u) == 0 ? &v293 : (std::string *)v209;
        v211 = (v208 & 0x80u) == 0 ? v208 : *((_QWORD *)&v209 + 1);
        v212 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v210, v211);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v212 + 24))(v212))
        {
          v298 = 0u;
          __p = 0u;
          LODWORD(v299) = 728325608;
          kdebug_trace();
          sub_224141CD8((uint64_t *)&v290, a2, flt_22469B46C);
          v304.__r_.__value_.__r.__words[0] = (std::string::size_type)"cv3d.recon.";
          v304.__r_.__value_.__l.__size_ = 11;
          v304.__r_.__value_.__r.__words[2] = (std::string::size_type)"Volumetric.KeyVol.HeadCarve";
          v305 = 27;
          sub_2231A9820((uint64_t)&v304, (uint64_t)object, 0, 0, &v292);
          v296[0] = v292.__r_.__value_.__l.__size_;
          v213 = v292.__r_.__value_.__r.__words[0];
          *(_QWORD *)((char *)v296 + 7) = *(std::string::size_type *)((char *)&v292.__r_.__value_.__r.__words[1] + 7);
          v214 = HIBYTE(v292.__r_.__value_.__r.__words[2]);
          memset(&v292, 0, sizeof(v292));
          v215 = v290.__r_.__value_.__r.__words[0];
          v216 = operator new();
          *(_BYTE *)v216 = 0;
          *(_DWORD *)(v216 + 128) = -1;
          v217 = *(unsigned int *)(v215 + 128);
          if ((_DWORD)v217 != -1)
          {
            ((void (*)(std::string *, uint64_t, std::string::size_type))off_24EC6BD10[v217])(&v304, v216, v215);
            *(_DWORD *)(v216 + 128) = v217;
          }
          *(_BYTE *)(v216 + 136) = *(_BYTE *)(v215 + 136);
          *(_QWORD *)object = v216;
          *(_QWORD *)&object[8] = v213;
          *(_QWORD *)&object[16] = v296[0];
          *(_QWORD *)&object[23] = *(_QWORD *)((char *)v296 + 7);
          object[31] = v214;
          v296[0] = 0;
          *(_QWORD *)((char *)v296 + 7) = 0;
          object[32] = 1;
          LOBYTE(v307[0]) = 0;
          v309 = 0;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v212 + 24))(v212))
          {
            v304.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            v304.__r_.__value_.__l.__size_ = 2;
            v218 = sub_2241471F8();
            sub_2235335A0((uint64_t)v218, v212, (uint64_t)object, (uint64_t)&unk_2245C9EFE, (__int128 *)&v304);
          }
          if (v309 && SHIBYTE(v308) < 0)
            operator delete(v307[0]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          v219 = *(_QWORD *)object;
          *(_QWORD *)object = 0;
          if (v219)
            MEMORY[0x227684CE8](v219, 0x1000C4072FAA15ELL);
          if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v292.__r_.__value_.__l.__data_);
          v220 = v290.__r_.__value_.__r.__words[0];
          v290.__r_.__value_.__r.__words[0] = 0;
          if (v220)
            MEMORY[0x227684CE8](v220, 0x1000C4072FAA15ELL);
          kdebug_trace();
        }
      }
    }
    memset(object, 0, 32);
    *(_DWORD *)&object[32] = 728325624;
    kdebug_trace();
    v221 = HIBYTE(v293.__r_.__value_.__r.__words[2]);
    if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v221 = v293.__r_.__value_.__l.__size_;
    if (v221 >= 0x11)
    {
      v222 = &v293;
      if ((v293.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v222 = (std::string *)v293.__r_.__value_.__r.__words[0];
      v223 = v222->__r_.__value_.__r.__words[0];
      v224 = v222->__r_.__value_.__l.__size_;
      v225 = v222->__r_.__value_.__s.__data_[16];
      if (v223 == 0x6365722E64337663 && v224 == 0x73746174532E6E6FLL && v225 == 46)
      {
        sub_223187510();
        sub_224141CD8((uint64_t *)&v292, a2, flt_22469B46C);
        *(_QWORD *)&__p = "cv3d.recon.";
        *((_QWORD *)&__p + 1) = 11;
        *(_QWORD *)&v298 = "Volumetric.KeyVol.HeadCarve";
        *((_QWORD *)&v298 + 1) = 27;
        sub_2231A9820((uint64_t)&__p, (uint64_t)&v299, 0, 0, &v304);
        v282 = (void *)v304.__r_.__value_.__r.__words[0];
        v228 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
        memset(&v304, 0, sizeof(v304));
        v229 = v292.__r_.__value_.__r.__words[0];
        v230 = operator new();
        *(_BYTE *)v230 = 0;
        *(_DWORD *)(v230 + 128) = -1;
        v231 = *(unsigned int *)(v229 + 128);
        if ((_DWORD)v231 != -1)
        {
          ((void (*)(__int128 *, uint64_t, std::string::size_type))off_24EC6BD10[v231])(&__p, v230, v229);
          *(_DWORD *)(v230 + 128) = v231;
        }
        *(_BYTE *)(v230 + 136) = *(_BYTE *)(v229 + 136);
        if (v228 < 0)
          operator delete(v282);
        MEMORY[0x227684CE8](v230, 0x1000C4072FAA15ELL);
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v304.__r_.__value_.__l.__data_);
        v232 = v292.__r_.__value_.__r.__words[0];
        v292.__r_.__value_.__r.__words[0] = 0;
        if (v232)
          MEMORY[0x227684CE8](v232, 0x1000C4072FAA15ELL);
      }
    }
    kdebug_trace();
    if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v293.__r_.__value_.__l.__data_);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v233 = sub_2241471F8();
      v234 = v233[2];
      if (v234)
        goto LABEL_334;
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        v234 = v233[2];
LABEL_334:
        v235 = *(_QWORD *)(v234 + 64);
        v236 = (std::mutex *)(v235 + 32);
        std::mutex::lock((std::mutex *)(v235 + 32));
        v238 = *(_QWORD *)(v235 + 96);
        v237 = *(_QWORD *)(v235 + 104);
        std::mutex::unlock(v236);
        if (v238 != v237)
        {
          *(_QWORD *)object = "cv3d.recon.";
          *(_QWORD *)&object[8] = 11;
          *(_QWORD *)&object[16] = "Volumetric.KeyVol.HeadCarve";
          *(_QWORD *)&object[24] = 27;
          sub_2231A9820((uint64_t)object, (uint64_t)&object[32], 0, 0, &v290);
          v239 = HIBYTE(v290.__r_.__value_.__r.__words[2]);
          v240 = *(_OWORD *)&v290.__r_.__value_.__l.__data_;
          sub_2241471F8();
          if ((v239 & 0x80u) == 0)
            v241 = &v290;
          else
            v241 = (std::string *)v240;
          if ((v239 & 0x80u) == 0)
            v242 = v239;
          else
            v242 = *((_QWORD *)&v240 + 1);
          v243 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v241, v242);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v243 + 24))(v243))
          {
            v298 = 0u;
            __p = 0u;
            LODWORD(v299) = 728325616;
            kdebug_trace();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v243 + 24))(v243))
            {
              *(_QWORD *)&v291 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
              *((_QWORD *)&v291 + 1) = 2;
              v244 = sub_2241471F8();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v243 + 24))(v243))
              {
                sub_2241498F4((uint64_t)object, 0);
                v294 = -256;
                v295 = -1;
                v248 = v284;
                v249 = v280;
                if (v284 != &v285)
                {
                  *(float *)v247.i32 = v280.f32[0] * 8.0;
                  *(float *)v245.i32 = (float)((float)(v280.f32[0] * 8.0) * 0.0) * 0.5;
                  v283 = (float32x4_t)vdupq_lane_s32(v245, 0);
                  v278 = (float32x4_t)vdupq_lane_s32(v247, 0);
                  do
                  {
                    *(float32x2_t *)v246.f32 = vcvt_f32_s32(*(int32x2_t *)((char *)v248 + 28));
                    v246.f32[2] = (float)*((int *)v248 + 9);
                    v250 = vaddq_f32(v283, vmulq_n_f32(v246, v249.f32[0]));
                    LODWORD(v304.__r_.__value_.__r.__words[1]) = v250.i32[2];
                    v304.__r_.__value_.__r.__words[0] = v250.i64[0];
                    v251 = vaddq_f32(v278, v250);
                    LODWORD(v292.__r_.__value_.__r.__words[1]) = v251.i32[2];
                    v292.__r_.__value_.__r.__words[0] = v251.i64[0];
                    sub_223CF1130((uint64_t)&v304, (uint64_t)&v292, 1, (__int8 *)&v294, (uint64_t)object, v249, v251, v278);
                    v252 = v248[1];
                    if (v252)
                    {
                      do
                      {
                        v253 = (uint64_t **)v252;
                        v252 = (uint64_t *)*v252;
                      }
                      while (v252);
                    }
                    else
                    {
                      do
                      {
                        v253 = (uint64_t **)v248[2];
                        v68 = *v253 == (uint64_t *)v248;
                        v248 = v253;
                      }
                      while (!v68);
                    }
                    v248 = v253;
                    v249 = v280;
                  }
                  while (v253 != &v285);
                }
                v304.__r_.__value_.__s.__data_[0] = 0;
                LOBYTE(v305) = 0;
                sub_22329F414((uint64_t)object, (__int128 *)&v304, &v291, &v293);
                if ((_BYTE)v305 && SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v304.__r_.__value_.__l.__data_);
                sub_22316F8F4((uint64_t *)object);
                v254 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v243 + 56))(v243);
                v255 = *v254;
                v256 = (std::__shared_weak_count *)v254[1];
                if (v256)
                {
                  v257 = (unint64_t *)&v256->__shared_owners_;
                  do
                    v258 = __ldxr(v257);
                  while (__stxr(v258 + 1, v257));
                }
                v259 = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
                v292.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC6A3B8;
                *(_OWORD *)&v292.__r_.__value_.__r.__words[1] = *(_OWORD *)&v293.__r_.__value_.__r.__words[1];
                *(_OWORD *)&v293.__r_.__value_.__r.__words[1] = 0uLL;
                *(_QWORD *)object = v255;
                *(_QWORD *)&object[8] = v256;
                if (v256)
                {
                  v260 = (unint64_t *)&v256->__shared_owners_;
                  do
                    v261 = __ldxr(v260);
                  while (__stxr(v261 + 1, v260));
                }
                *(_QWORD *)&object[16] = &off_24EC6A3B8;
                *(_OWORD *)&object[24] = v259;
                if (*((_QWORD *)&v259 + 1))
                {
                  v262 = (unint64_t *)(*((_QWORD *)&v259 + 1) + 8);
                  do
                    v263 = __ldxr(v262);
                  while (__stxr(v263 + 1, v262));
                }
                (*(void (**)(uint64_t *, _BYTE *))(*v244 + 16))(v244, object);
                sub_2241231D8((uint64_t)&object[16]);
                v264 = *(std::__shared_weak_count **)&object[8];
                if (*(_QWORD *)&object[8])
                {
                  v265 = (unint64_t *)(*(_QWORD *)&object[8] + 8);
                  do
                    v266 = __ldaxr(v265);
                  while (__stlxr(v266 - 1, v265));
                  if (!v266)
                  {
                    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                    std::__shared_weak_count::__release_weak(v264);
                  }
                }
                sub_2241231D8((uint64_t)&v292);
                if (v256)
                {
                  v267 = (unint64_t *)&v256->__shared_owners_;
                  do
                    v268 = __ldaxr(v267);
                  while (__stlxr(v268 - 1, v267));
                  if (!v268)
                  {
                    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                    std::__shared_weak_count::__release_weak(v256);
                  }
                }
                sub_2241231D8((uint64_t)&v293);
              }
            }
            kdebug_trace();
          }
          if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v290.__r_.__value_.__l.__data_);
        }
        goto LABEL_380;
      }
LABEL_385:
      abort();
    }
  }
LABEL_380:
  sub_223198030((uint64_t)&v284, v285);
  sub_223198030((uint64_t)&v287, v288);
}

void sub_223A8ACA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;
  char a69;

  if (a69)
  {
    if (a68 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a49);
  sub_223198030((uint64_t)&a28, (_QWORD *)a29);
  sub_223198030((uint64_t)&a31, (_QWORD *)a32);
  _Unwind_Resume(a1);
}

uint64_t sub_223A8B0F0(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, uint64_t **a5, double a6, float a7, float a8)
{
  std::__shared_weak_count *v8;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  __int16 v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int16 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  unint64_t *v48;
  int64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  unint64_t *v58;
  uint64_t v59;
  __int128 v60;
  unint64_t *v61;
  std::__shared_weak_count *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  int32x2_t *v68;
  _BYTE *v69;
  int v70;
  float v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  std::mutex *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  int32x2_t *v89;
  float32x4_t *v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  __n128 v104;
  __n128 v105;
  __n128 v106;
  int32x2_t *v107;
  int32x2_t *v108;
  int8x16_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  int32x2_t v115;
  uint64_t v116;
  int8x16_t v118;
  float32x4_t v119;
  signed int v120;
  char **v121;
  _BYTE *v122;
  uint64_t v123;
  int v124;
  int v125;
  signed int v126;
  char *v127;
  unint64_t *v128;
  unint64_t v129;
  _QWORD **v130;
  uint64_t *v131;
  unsigned int v132;
  uint64_t *v133;
  unsigned int v134;
  __int128 v135;
  int v136;
  BOOL v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  __int128 v147;
  float32x2_t v148;
  float32x4_t v149;
  double v150;
  double v151;
  float32x4_t v152;
  float32x2_t v153;
  float32x2_t v154;
  float32x2_t v155;
  int8x16_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x2_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  float32x4_t v169;
  int v170;
  uint64_t v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int32x2_t v176;
  uint64_t v177;
  int32x2_t v178;
  uint64_t v179;
  float32x2_t v180;
  int32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  float v189;
  float v190;
  float v191;
  float v192;
  int v193;
  float v194;
  int8x16_t v196;
  float32x4_t v197;
  float32x2_t v198;
  float32x2_t v200;
  float v201;
  BOOL v202;
  BOOL v203;
  int32x2_t v205;
  int32x2_t v206;
  int32x2_t v207;
  int v208;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  unsigned int v222;
  _DWORD *v223;
  uint64_t *v224;
  _QWORD *v225;
  _QWORD **v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  std::mutex *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _BYTE *v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  __n128 *v246;
  _BYTE *v247;
  size_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  std::mutex *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _BYTE *v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  unint64_t v262;
  _BYTE *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  __n128 *v269;
  _BYTE *v270;
  size_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  std::mutex *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  uint64_t v280;
  _BYTE *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  _BYTE *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  __n128 *v291;
  _BYTE *v292;
  size_t v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  std::mutex *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  int32x2_t v302;
  _QWORD **v303;
  int32x2_t v304;
  uint64_t *v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  _QWORD *v309;
  _QWORD **v310;
  uint64_t *v311;
  uint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t *v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  std::__shared_weak_count *v333;
  unint64_t *v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  std::mutex *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t (**v347)();
  std::__shared_weak_count *v348;
  uint64_t (*v349)();
  unint64_t *v350;
  unint64_t v351;
  unint64_t v352;
  uint64_t v353;
  int32x2_t *v354;
  int32x2_t *v355;
  int v356;
  int v357;
  uint64_t (**v358)();
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v391;
  float32x4_t *v392;
  uint64_t **v393;
  uint64_t v394;
  float32x4_t v395;
  float32x2_t v396;
  float32x2_t v397;
  __n128 v398;
  float32x2_t v399;
  int8x16_t v400;
  float32x4_t v401;
  uint64_t v404;
  unint64_t v405;
  float32x4_t v406;
  float32x4_t v407;
  _QWORD **v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t (**v411)();
  uint64_t v412;
  std::__shared_weak_count *v413;
  __int128 v414;
  uint64_t v415;
  __int16 v416;
  void *v417;
  int32x2_t *v418;
  std::__shared_weak_count *v419;
  __int128 v420;
  __int128 v421;
  int v422;
  _BYTE v423[26];
  _BYTE __p[50];
  char v425;
  _BYTE v426[50];
  std::string v427;
  int v428;
  float v429;
  int v430;
  __int128 v431;
  uint64_t (**v432)();
  std::__shared_weak_count *v433;
  std::__shared_weak_count *v434;
  int v435;
  uint64_t v436;
  _BYTE v437[64];
  __int128 v438;
  __int16 v439;
  uint64_t v440;

  *(double *)v407.i64 = a6;
  v440 = *MEMORY[0x24BDAC8D0];
  v420 = 0u;
  v421 = 0u;
  v422 = 728301768;
  kdebug_trace();
  v411 = &off_24EC21230;
  v14 = *(_QWORD *)(a2 + 8);
  v15 = *(std::__shared_weak_count **)(a2 + 16);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = *(_WORD *)(a2 + 48);
    v19 = (__int128 *)(a2 + 24);
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = *v19;
    v414 = *v19;
    v415 = *(_QWORD *)(a2 + 40);
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    v412 = v14;
    v413 = v15;
    v416 = v18;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (v24)
    {
      v417 = 0;
      v418 = 0;
      v419 = 0;
      if (*(_BYTE *)(a1 + 56))
      {
LABEL_15:
        if ((!*(_DWORD *)(a1 + 32) || !*(_DWORD *)(a1 + 36))
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3BF78(a1, (uint64_t)v437);
        v21 = *(_OWORD *)&v437[8];
        *(_OWORD *)v426 = *(_OWORD *)&v437[24];
        *(_OWORD *)&v426[10] = *(_OWORD *)&v437[34];
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      v417 = 0;
      v418 = 0;
      v419 = 0;
      if (*(_BYTE *)(a1 + 56))
        goto LABEL_15;
    }
  }
  else
  {
    v25 = *(_WORD *)(a2 + 48);
    v412 = *(_QWORD *)(a2 + 8);
    v413 = 0;
    v21 = *(_OWORD *)(a2 + 24);
    v414 = v21;
    v415 = *(_QWORD *)(a2 + 40);
    v416 = v25;
    v417 = 0;
    v418 = 0;
    v419 = 0;
    if (*(_BYTE *)(a1 + 56))
      goto LABEL_15;
  }
  *(_QWORD *)__p = &off_24EC200A8;
  *(_OWORD *)&__p[8] = v21;
  *(_OWORD *)&__p[24] = *(_OWORD *)v426;
  v26 = *(_OWORD *)&v426[10];
  *(_OWORD *)&__p[34] = *(_OWORD *)&v426[10];
  v394 = a1 + 232;
  if (*(_BYTE *)(a1 + 288))
  {
    if ((!*(_DWORD *)(a1 + 264) || !*(_DWORD *)(a1 + 268))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3F490(v394, (uint64_t)v437);
    v26 = *(_OWORD *)&v437[8];
    *(_OWORD *)v423 = *(_OWORD *)&v437[24];
    *(_OWORD *)&v423[10] = *(_OWORD *)&v437[34];
  }
  *(_QWORD *)v426 = &off_24EC21420;
  *(_OWORD *)&v426[8] = v26;
  *(_OWORD *)&v426[24] = *(_OWORD *)v423;
  *(_OWORD *)&v426[34] = *(_OWORD *)&v423[10];
  sub_223C41850(a1, (uint64_t)v437);
  v393 = a5;
  v404 = *(unsigned int *)&__p[36];
  if (!*(_DWORD *)&__p[36])
    goto LABEL_71;
  v30 = *(unsigned int *)&__p[32];
  if (!*(_DWORD *)&__p[32])
    goto LABEL_71;
  v31 = 0;
  v32 = 0;
  v27 = 0;
  v33 = 0;
  v34 = 0;
LABEL_29:
  v35 = 0;
  v8 = (std::__shared_weak_count *)(v34 << 32);
  do
  {
    if (!v437[56]
      || (*(_BYTE *)(*(_QWORD *)&v437[24] + (*(_DWORD *)&v437[40] * v35 + *(_DWORD *)&v437[44] * v34)) & 6) == 0)
    {
      v36 = *(unsigned __int8 *)(*(_QWORD *)&v426[24]
                               + (*(_DWORD *)&v426[40] * v35 + *(_DWORD *)&v426[44] * v34));
      _ZF = v36 == 34 || v36 == 10;
      if (_ZF)
      {
        _H0 = *(_WORD *)(*(_QWORD *)&__p[24]
                       + 2 * (*(_DWORD *)&__p[40] * v35 + *(_DWORD *)&__p[44] * v34));
        __asm { FCVT            S0, H0 }
        if (_S0 > a8 && vabds_f32(_S0, *(float *)(v414 + 4 * (v415 * v35 + HIDWORD(v415) * v34))) < a7)
        {
          if (v33 < (unint64_t *)v27)
          {
            *v33++ = v35 | (unint64_t)v8;
            v31 = v33;
            goto LABEL_31;
          }
          v42 = (char *)v33 - (char *)v32;
          v43 = v33 - v32;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 61)
          {
            v418 = (int32x2_t *)v31;
            v419 = v27;
            v417 = v32;
            sub_22316E078();
          }
          if (((char *)v27 - (char *)v32) >> 2 > v44)
            v44 = ((char *)v27 - (char *)v32) >> 2;
          if ((unint64_t)((char *)v27 - (char *)v32) >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
          {
            if (v45 >> 61)
            {
              v417 = v32;
              v418 = (int32x2_t *)v31;
              v419 = v27;
              sub_223174E94();
            }
            v46 = v45;
            v47 = operator new(8 * v45);
            v45 = v46;
            v48 = (unint64_t *)&v47[8 * v43];
            *v48 = v35 | (unint64_t)v8;
            v31 = v48 + 1;
            v49 = (char *)v33 - (char *)v32;
            if (v33 == v32)
              goto LABEL_56;
          }
          else
          {
            v47 = 0;
            v48 = (unint64_t *)(8 * v43);
            *v48 = v35 | (unint64_t)v8;
            v31 = v48 + 1;
            v49 = (char *)v33 - (char *)v32;
            if (v33 == v32)
              goto LABEL_56;
          }
          v50 = v49 - 8;
          if (v50 >= 0x168)
          {
            v54 = ((char *)(v33 - 1) - (char *)v32) & 0xFFFFFFFFFFFFFFF8;
            if (&v47[v42 - 8 - v54] > &v47[v42 - 8])
            {
              v51 = v33;
            }
            else if ((unint64_t *)((char *)v33 - v54 - 8) > v33 - 1)
            {
              v51 = v33;
            }
            else if ((unint64_t)((char *)v32 - v47) >= 0x20)
            {
              v55 = (v50 >> 3) + 1;
              v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v33[v56 / 0xFFFFFFFFFFFFFFF8];
              v48 = (unint64_t *)((char *)v48 - v56);
              v57 = &v47[v42 - 16];
              v58 = v33 - 2;
              v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *v57 = v60;
                v57 -= 2;
                v58 -= 4;
                v59 -= 4;
              }
              while (v59);
              if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_56;
            }
            else
            {
              v51 = v33;
            }
          }
          else
          {
            v51 = v33;
          }
          do
          {
            v52 = *--v51;
            *--v48 = v52;
          }
          while (v51 != v32);
LABEL_56:
          v27 = (std::__shared_weak_count *)&v47[8 * v45];
          if (v32)
          {
            v33 = v31;
            v53 = (std::__shared_weak_count *)&v47[8 * v45];
            operator delete(v32);
            v27 = v53;
            v31 = v33;
            v32 = v48;
          }
          else
          {
            v32 = v48;
            v33 = v31;
          }
        }
      }
    }
LABEL_31:
    ++v35;
  }
  while (v35 != v30);
  while (++v34 != v404)
  {
    v30 = *(unsigned int *)&__p[32];
    if (*(_DWORD *)&__p[32])
      goto LABEL_29;
  }
  v418 = (int32x2_t *)v31;
  v419 = v27;
  v417 = v32;
LABEL_71:
  LODWORD(v61) = v437[56];
  if (v437[56])
  {
    v62 = *(std::__shared_weak_count **)&v437[16];
    if (*(_QWORD *)&v437[16])
    {
      v61 = (unint64_t *)(*(_QWORD *)&v437[16] + 8);
      do
      {
        v63 = __ldaxr(v61);
        v27 = (std::__shared_weak_count *)__stlxr(v63 - 1, v61);
      }
      while ((_DWORD)v27);
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  if (*(_QWORD *)&v426[16])
  {
    v61 = (unint64_t *)(*(_QWORD *)&v426[16] + 8);
    do
    {
      v64 = __ldaxr(v61);
      v27 = (std::__shared_weak_count *)__stlxr(v64 - 1, v61);
    }
    while ((_DWORD)v27);
    if (!v64)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v426[16] + 16))(*(_QWORD *)&v426[16]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v426[16]);
    }
  }
  if (*(_QWORD *)&__p[16])
  {
    v61 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
    do
    {
      v65 = __ldaxr(v61);
      v27 = (std::__shared_weak_count *)__stlxr(v65 - 1, v61);
    }
    while ((_DWORD)v27);
    if (!v65)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[16] + 16))(*(_QWORD *)&__p[16]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[16]);
      v66 = v413;
      if (v413)
        goto LABEL_87;
      goto LABEL_90;
    }
  }
  v66 = v413;
  if (!v413)
    goto LABEL_90;
LABEL_87:
  v61 = (unint64_t *)&v66->__shared_owners_;
  do
  {
    v67 = __ldaxr(v61);
    v27 = (std::__shared_weak_count *)__stlxr(v67 - 1, v61);
  }
  while ((_DWORD)v27);
  if (v67)
  {
LABEL_90:
    v69 = v417;
    v68 = v418;
    v70 = *(unsigned __int8 *)(a1 + 288);
    if (*(_BYTE *)(a1 + 288))
      goto LABEL_91;
LABEL_101:
    v71 = (float)(unint64_t)(((char *)v68 - v69) >> 3) / (float)v61;
    if (v70)
      goto LABEL_102;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
    std::__shared_weak_count::__release_weak(v66);
    v69 = v417;
    v68 = v418;
    v70 = *(unsigned __int8 *)(a1 + 288);
    if (!*(_BYTE *)(a1 + 288))
      goto LABEL_101;
LABEL_91:
    if ((!*(_DWORD *)(a1 + 264) || !*(_DWORD *)(a1 + 268))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3F490(v394, (uint64_t)v437);
    v8 = *(std::__shared_weak_count **)&v437[16];
    v71 = (float)(unint64_t)(((char *)v68 - v69) >> 3)
        / (float)(*(_DWORD *)&v437[36] * *(_DWORD *)&v437[32]);
    if (v70)
    {
LABEL_102:
      if (v8)
      {
        v72 = (unint64_t *)&v8->__shared_owners_;
        do
        {
          v73 = __ldaxr(v72);
          v27 = (std::__shared_weak_count *)__stlxr(v73 - 1, v72);
        }
        while ((_DWORD)v27);
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  v409 = 0;
  v410 = 0;
  v408 = &v409;
  if (v71 >= 0.005)
  {
    v88 = *(unsigned __int8 *)(a1 + 56);
    if (*(_BYTE *)(a1 + 56))
    {
      if ((!*(_DWORD *)(a1 + 32) || !*(_DWORD *)(a1 + 36))
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_223C3BF78(a1, (uint64_t)v437);
      v88 = *(_QWORD *)&v437[8];
      v27 = *(std::__shared_weak_count **)&v437[16];
      *(_OWORD *)v426 = *(_OWORD *)&v437[24];
      *(_OWORD *)&v426[10] = *(_OWORD *)&v437[34];
    }
    v89 = (int32x2_t *)(a1 + 1616);
    v90 = (float32x4_t *)(a1 + 1336);
    *(_QWORD *)__p = &off_24EC200A8;
    *(_QWORD *)&__p[8] = v88;
    *(_QWORD *)&__p[16] = v27;
    *(_OWORD *)&__p[24] = *(_OWORD *)v426;
    *(_OWORD *)&__p[34] = *(_OWORD *)&v426[10];
    v392 = (float32x4_t *)(a1 + 1336);
    v391 = v27;
    if (*(_BYTE *)(a1 + 1744))
    {
      v91.i32[0] = *(_DWORD *)(a1 + 1624);
      v92 = *(float32x2_t *)(a1 + 1632);
      v93 = *(float32x2_t *)(a1 + 1648);
      v28.i32[0] = *(_DWORD *)(a1 + 1656);
      v29.i64[0] = *(_QWORD *)(a1 + 1664);
      v29.i32[2] = *(_DWORD *)(a1 + 1672);
      v94 = (int8x16_t)vnegq_f32(v29);
      v95 = *(float32x4_t *)(a1 + 1352);
      v96 = vmulq_n_f32(*v90, v91.f32[0]);
      v91.i32[1] = *(_DWORD *)(a1 + 1640);
      v97 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v89, (int32x2_t)v92), *(float *)v94.i32), (float32x2_t)vzip2_s32(*v89, (int32x2_t)v92), *(float32x2_t *)v29.f32, 1), v91, v29, 2);
      LODWORD(v98) = vmla_f32(vmls_lane_f32(vmul_f32(v93, *(float32x2_t *)v94.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v93, 1), *(float32x2_t *)v29.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL), *(float32x2_t *)v28.f32).u32[0];
      v99 = *(float32x4_t *)(a1 + 1368);
      v100 = *(float32x4_t *)(a1 + 1384);
      v101 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v90, COERCE_FLOAT(*v89)), v95, v92.f32[0]), v99, v93.f32[0]), (float32x4_t)0, v100);
      v102 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v90, (float32x2_t)*v89, 1), v95, v92, 1), v99, v93, 1), (float32x4_t)0, v100);
      v103 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v96, v95, *(float *)(a1 + 1640)), v99, v28.f32[0]), (float32x4_t)0, v100);
      v28 = vaddq_f32(v100, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v90, v97.f32[0]), v95, v97, 1), v99, v98));
      v104 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v101, COERCE_FLOAT(*(_OWORD *)(a1 + 1680))), v102, *(float32x2_t *)(a1 + 1680), 1), v103, *(float32x4_t *)(a1 + 1680), 2), v28, *(float32x4_t *)(a1 + 1680), 3);
      v105 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v101, COERCE_FLOAT(*(_OWORD *)(a1 + 1696))), v102, *(float32x2_t *)(a1 + 1696), 1), v103, *(float32x4_t *)(a1 + 1696), 2), v28, *(float32x4_t *)(a1 + 1696), 3);
      v400 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v101, COERCE_FLOAT(*(_OWORD *)(a1 + 1712))), v102, *(float32x2_t *)(a1 + 1712), 1), v103, *(float32x4_t *)(a1 + 1712), 2), v28, *(float32x4_t *)(a1 + 1712), 3);
      v106 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v101, COERCE_FLOAT(*(_OWORD *)(a1 + 1728))), v102, *(float32x2_t *)(a1 + 1728), 1), v103, *(float32x4_t *)(a1 + 1728), 2), v28, *(float32x4_t *)(a1 + 1728), 3);
    }
    else
    {
      v104 = *(__n128 *)v90;
      v105 = *(__n128 *)(a1 + 1352);
      v400 = *(int8x16_t *)(a1 + 1368);
      v106 = *(__n128 *)(a1 + 1384);
    }
    *(_QWORD *)&v423[8] = 0;
    *(_QWORD *)&v423[16] = 0;
    *(_QWORD *)v423 = &v423[8];
    v107 = (int32x2_t *)v417;
    v108 = v418;
    if (v417 != v418)
    {
      v109 = (int8x16_t)vnegq_f32((float32x4_t)v106);
      v110 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v400.i8, 1);
      v399 = (float32x2_t)vextq_s8(v400, v400, 8uLL).u64[0];
      v111 = (float32x2_t)vtrn2q_s32((int32x4_t)v104, (int32x4_t)v105).u64[0];
      v28.f32[0] = 1.0 / v407.f32[0];
      v398 = (__n128)v28;
      v397 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v111, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v111, 1), 0xCuLL).u64[0];
      v112 = (float32x2_t)vzip2q_s32((int32x4_t)v104, (int32x4_t)v105).u64[0];
      v113 = (float32x2_t)vzip1_s32((int32x2_t)v104.n128_u64[0], (int32x2_t)v105.n128_u64[0]);
      *(float32x2_t *)v114.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v113, *(float *)v109.i32), v111, (float32x2_t)v106.n128_u64[0], 1), v112, (float32x4_t)v106, 2);
      *(float32x2_t *)&v114.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v400.i8, *(float32x2_t *)v109.i8), v110, (float32x2_t)v106.n128_u64[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL), v399);
      v395 = v114;
      v396 = v112;
      v115 = *(int32x2_t *)&__p[40];
      v116 = *(_QWORD *)&__p[24];
      while (1)
      {
        _D0 = vmul_s32(*v107, v115);
        _D0.i16[0] = *(_WORD *)(v116 + 2 * vadd_s32(vdup_lane_s32(_D0, 1), _D0).u32[0]);
        v105.n128_u64[0] = (unint64_t)vadd_f32(vmul_f32(*(float32x2_t *)(a1 + 1272), vcvt_f32_u32((uint32x2_t)*v107)), *(float32x2_t *)(a1 + 1280));
        v105.n128_u32[2] = 1.0;
        __asm { FCVT            S0, H0 }
        v118 = (int8x16_t)vmulq_n_f32((float32x4_t)v105, *(float *)_D0.i32);
        *(float32x2_t *)v119.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v113, *(float *)v118.i32), v397, *(float32x2_t *)v118.i8, 1), v396, (float32x4_t)v118, 2);
        *(float32x2_t *)&v119.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v400.i8, *(float32x2_t *)v118.i8), v110, *(float32x2_t *)v118.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL), v399);
        v104 = (__n128)vaddq_f32(v395, v119);
        v119.i64[0] = 0x3F0000003F000000;
        v119.i64[1] = 0x3F0000003F000000;
        v106 = v398;
        v105 = (__n128)vmlaq_n_f32(v119, (float32x4_t)v104, v398.n128_f32[0]);
        v104.n128_u64[0] = (unint64_t)vrndm_f32((float32x2_t)v105.n128_u64[0]);
        v105.n128_u32[0] = v105.n128_u32[2];
        v104.n128_u64[0] = *(_QWORD *)&vcvt_s32_f32((float32x2_t)v104.n128_u64[0]) & 0xFFFFFFF8FFFFFFF8;
        v405 = v104.n128_u64[0];
        v120 = vcvtms_s32_f32(v105.n128_f32[2]) & 0xFFFFFFF8;
        v121 = (char **)&v423[8];
        v122 = &v423[8];
        if (*(_QWORD *)&v423[8])
          break;
LABEL_149:
        v127 = (char *)operator new(0x28uLL);
        *(_QWORD *)(v127 + 28) = v405;
        *((_DWORD *)v127 + 9) = v120;
        *(_QWORD *)v127 = 0;
        *((_QWORD *)v127 + 1) = 0;
        *((_QWORD *)v127 + 2) = v122;
        *v121 = v127;
        if (**(_QWORD **)v423)
        {
          *(_QWORD *)v423 = **(_QWORD **)v423;
          v127 = *v121;
        }
        sub_2231A9A8C(*(uint64_t **)&v423[8], (uint64_t *)v127);
        ++*(_QWORD *)&v423[16];
LABEL_133:
        if (++v107 == v108)
          goto LABEL_151;
      }
      v123 = *(_QWORD *)&v423[8];
      while (1)
      {
        while (1)
        {
          v122 = (_BYTE *)v123;
          v124 = *(_DWORD *)(v123 + 28);
          if (v104.n128_u32[0] == v124)
            break;
          if (v104.n128_i32[0] >= v124)
          {
            if (v124 >= v104.n128_i32[0])
              goto LABEL_133;
            goto LABEL_147;
          }
LABEL_136:
          v123 = *(_QWORD *)v122;
          v121 = (char **)v122;
          if (!*(_QWORD *)v122)
            goto LABEL_149;
        }
        v125 = *((_DWORD *)v122 + 8);
        if (v104.n128_u32[1] != v125)
        {
          if (v104.n128_i32[1] >= v125)
          {
            if (v125 >= v104.n128_i32[1])
              goto LABEL_133;
            goto LABEL_147;
          }
          goto LABEL_136;
        }
        v126 = *((_DWORD *)v122 + 9);
        if (v120 < v126)
          goto LABEL_136;
        if (v126 >= v120)
          goto LABEL_133;
LABEL_147:
        v123 = *((_QWORD *)v122 + 1);
        if (!v123)
        {
          v121 = (char **)(v122 + 8);
          goto LABEL_149;
        }
      }
    }
LABEL_151:
    if (v391)
    {
      v128 = (unint64_t *)&v391->__shared_owners_;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128))v391->__on_zero_shared)(v391, v104, v105, v106);
        std::__shared_weak_count::__release_weak(v391);
      }
    }
    sub_223198030((uint64_t)&v408, v409);
    v408 = *(_QWORD ***)v423;
    v409 = *(_QWORD **)&v423[8];
    v410 = *(_QWORD *)&v423[16];
    if (!*(_QWORD *)&v423[16])
    {
      v408 = &v409;
      sub_223198030((uint64_t)v423, *(_QWORD **)&v423[8]);
      v130 = v408;
      if (v408 != &v409)
        goto LABEL_162;
      goto LABEL_108;
    }
    *(_QWORD *)(*(_QWORD *)&v423[8] + 16) = &v409;
    *(_QWORD *)v423 = &v423[8];
    *(_QWORD *)&v423[8] = 0;
    *(_QWORD *)&v423[16] = 0;
    sub_223198030((uint64_t)v423, 0);
    v130 = v408;
    if (v408 == &v409)
      goto LABEL_108;
    do
    {
LABEL_162:
      v131 = sub_223A5BD5C(a3, (uint64_t *)((char *)v130 + 28), a4);
      v133 = v131;
      if (!v131)
        goto LABEL_265;
      if (!*((_WORD *)v131 + 1464))
        goto LABEL_265;
      if (!*((_WORD *)v131 + 1465))
        goto LABEL_265;
      v134 = v132;
      sub_223C41850(a1, (uint64_t)v437);
      if (!v437[56])
        goto LABEL_265;
      if (*(_BYTE *)(a1 + 288))
      {
        if ((!*(_DWORD *)(a1 + 264) || !*(_DWORD *)(a1 + 268))
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3F490(v394, (uint64_t)v426);
        *(_QWORD *)__p = &off_24EC21420;
        *(_OWORD *)&__p[8] = *(_OWORD *)&v426[8];
        *(_OWORD *)&__p[24] = *(_OWORD *)&v426[24];
        v135 = *(_OWORD *)&v426[34];
        *(_OWORD *)&__p[34] = *(_OWORD *)&v426[34];
        v425 = 1;
        v136 = *(unsigned __int8 *)(a1 + 56);
        v137 = *(_BYTE *)(a1 + 56) == 0;
        if (*(_BYTE *)(a1 + 56))
        {
          if ((!*(_DWORD *)(a1 + 32) || !*(_DWORD *)(a1 + 36))
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          sub_223C3BF78(a1, (uint64_t)v426);
          v138 = *(std::__shared_weak_count **)&v426[16];
          if (!*(_QWORD *)&v426[16])
            goto LABEL_178;
          v139 = (unint64_t *)(*(_QWORD *)&v426[16] + 8);
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
            if (!v425)
            {
LABEL_274:
              if (!v437[56])
                goto LABEL_192;
              v137 = 0;
              goto LABEL_187;
            }
          }
          else
          {
LABEL_178:
            if (!v425)
              goto LABEL_274;
          }
        }
        v141 = *(std::__shared_weak_count **)&__p[16];
        if (!*(_QWORD *)&__p[16])
          goto LABEL_183;
        v142 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
        do
          v143 = __ldaxr(v142);
        while (__stlxr(v143 - 1, v142));
        if (!v143)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
          if (!v437[56])
          {
LABEL_184:
            if (!v136)
              goto LABEL_265;
            goto LABEL_192;
          }
        }
        else
        {
LABEL_183:
          if (!v437[56])
            goto LABEL_184;
        }
      }
      else
      {
        v137 = 1;
      }
LABEL_187:
      v144 = *(std::__shared_weak_count **)&v437[16];
      if (!*(_QWORD *)&v437[16])
        goto LABEL_191;
      v145 = (unint64_t *)(*(_QWORD *)&v437[16] + 8);
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
        if (v137)
          goto LABEL_265;
      }
      else
      {
LABEL_191:
        if (v137)
          goto LABEL_265;
      }
LABEL_192:
      if (*(_BYTE *)(a1 + 56))
      {
        if ((!*(_DWORD *)(a1 + 32) || !*(_DWORD *)(a1 + 36))
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3BF78(a1, (uint64_t)v437);
        v135 = *(_OWORD *)&v437[8];
        *(_OWORD *)v426 = *(_OWORD *)&v437[24];
        *(_OWORD *)&v426[10] = *(_OWORD *)&v437[34];
      }
      *(_QWORD *)__p = &off_24EC200A8;
      *(_OWORD *)&__p[8] = v135;
      *(_OWORD *)&__p[24] = *(_OWORD *)v426;
      v147 = *(_OWORD *)&v426[10];
      *(_OWORD *)&__p[34] = *(_OWORD *)&v426[10];
      if (*(_BYTE *)(a1 + 288))
      {
        if ((!*(_DWORD *)(a1 + 264) || !*(_DWORD *)(a1 + 268))
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1181, (uint64_t)"!semantic.labels->Empty()", 25, (uint64_t)"Semantic buffer not valid", 25, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3F490(v394, (uint64_t)v437);
        v147 = *(_OWORD *)&v437[8];
        *(_OWORD *)v423 = *(_OWORD *)&v437[24];
        *(_OWORD *)&v423[10] = *(_OWORD *)&v437[34];
      }
      *(_QWORD *)v426 = &off_24EC21420;
      *(_OWORD *)&v426[8] = v147;
      *(_OWORD *)&v426[24] = *(_OWORD *)v423;
      *(_OWORD *)&v426[34] = *(_OWORD *)&v423[10];
      sub_223C41850(a1, (uint64_t)v437);
      if (*(_BYTE *)(a1 + 1744))
      {
        v153.i32[0] = *(_DWORD *)(a1 + 1624);
        v154 = *(float32x2_t *)(a1 + 1632);
        v155 = *(float32x2_t *)(a1 + 1648);
        v148.i32[0] = *(_DWORD *)(a1 + 1656);
        v149.i64[0] = *(_QWORD *)(a1 + 1664);
        v149.i32[2] = *(_DWORD *)(a1 + 1672);
        v156 = (int8x16_t)vnegq_f32(v149);
        v157 = *(float32x4_t *)(a1 + 1352);
        v158 = vmulq_n_f32(*v392, v153.f32[0]);
        v153.i32[1] = *(_DWORD *)(a1 + 1640);
        v159 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v89, (int32x2_t)v154), *(float *)v156.i32), (float32x2_t)vzip2_s32(*v89, (int32x2_t)v154), *(float32x2_t *)v149.f32, 1), v153, v149, 2);
        v153.i32[0] = vmla_f32(vmls_lane_f32(vmul_f32(v155, *(float32x2_t *)v156.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v155, 1), *(float32x2_t *)v149.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), v148).u32[0];
        v160 = *(float32x4_t *)(a1 + 1368);
        v161 = *(float32x4_t *)(a1 + 1384);
        v162 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v392, COERCE_FLOAT(*v89)), v157, v154.f32[0]), v160, v155.f32[0]), (float32x4_t)0, v161);
        v163 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v392, (float32x2_t)*v89, 1), v157, v154, 1), v160, v155, 1), (float32x4_t)0, v161);
        v164 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v158, v157, v153.f32[1]), v160, v148.f32[0]), (float32x4_t)0, v161);
        v165 = vaddq_f32(v161, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v392, v159.f32[0]), v157, v159, 1), v160, v153.f32[0]));
        v166 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v162, COERCE_FLOAT(*(_OWORD *)(a1 + 1680))), v163, *(float32x2_t *)(a1 + 1680), 1), v164, *(float32x4_t *)(a1 + 1680), 2), v165, *(float32x4_t *)(a1 + 1680), 3);
        v167 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v162, COERCE_FLOAT(*(_OWORD *)(a1 + 1696))), v163, *(float32x2_t *)(a1 + 1696), 1), v164, *(float32x4_t *)(a1 + 1696), 2), v165, *(float32x4_t *)(a1 + 1696), 3);
        v168 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v162, COERCE_FLOAT(*(_OWORD *)(a1 + 1712))), v163, *(float32x2_t *)(a1 + 1712), 1), v164, *(float32x4_t *)(a1 + 1712), 2), v165, *(float32x4_t *)(a1 + 1712), 3);
        v169 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v162, COERCE_FLOAT(*(_OWORD *)(a1 + 1728))), v163, *(float32x2_t *)(a1 + 1728), 1), v164, *(float32x4_t *)(a1 + 1728), 2), v165, *(float32x4_t *)(a1 + 1728), 3);
      }
      else
      {
        v166 = *(int8x16_t *)v392;
        v167 = *(int8x16_t *)(a1 + 1352);
        v168 = *(int8x16_t *)(a1 + 1368);
        v169 = *(float32x4_t *)(a1 + 1384);
      }
      v170 = 0;
      v171 = 0;
      v172 = *((_DWORD *)v130 + 7);
      v173 = *((_DWORD *)v130 + 8);
      v174 = *((_DWORD *)v130 + 9);
      v175 = v437[56];
      v176 = *(int32x2_t *)&v437[40];
      v177 = *(_QWORD *)&v437[24];
      v178 = *(int32x2_t *)&__p[40];
      v179 = *(_QWORD *)&__p[24];
      v180 = (float32x2_t)vextq_s8(v166, v166, 8uLL).u64[0];
      v181 = *(int32x2_t *)&v426[40];
      v182 = (float32x2_t)vextq_s8(v167, v167, 8uLL).u64[0];
      v183 = (float32x2_t)vextq_s8(v168, v168, 8uLL).u64[0];
      v184 = (char *)v133 + 2;
      v185 = *(_QWORD *)&v426[24];
      do
      {
        v186 = 0;
        v187 = v184;
        do
        {
          v188 = 0;
          v189 = *(float *)(a1 + 1256);
          v190 = *(float *)(a1 + 1264);
          v191 = *(float *)(a1 + 1260);
          v192 = *(float *)(a1 + 1268);
          LODWORD(v150) = *(_DWORD *)(a1 + 1328);
          v150 = (double)*(unint64_t *)&v150 + -0.5;
          *(float *)&v150 = v150;
          LODWORD(v151) = *(_DWORD *)(a1 + 1332);
          v151 = (double)*(unint64_t *)&v151 + -0.5;
          *(float *)&v151 = v151;
          v193 = v172;
          do
          {
            v152.f32[0] = (float)v193;
            v152.f32[1] = (float)(v173 + v186);
            v152.f32[2] = (float)(v174 + v171);
            v196 = (int8x16_t)vmulq_n_f32(v152, v407.f32[0]);
            *(float32x2_t *)v197.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v166.i8, *(float *)v196.i32), *(float32x2_t *)v167.i8, *(float32x2_t *)v196.i8, 1), *(float32x2_t *)v168.i8, (float32x4_t)v196, 2);
            v198 = vmla_lane_f32(vmul_f32(v180, *(float32x2_t *)v196.i8), v182, *(float32x2_t *)v196.i8, 1);
            v152 = (float32x4_t)vextq_s8(v196, v196, 8uLL);
            *(float32x2_t *)&v197.u32[2] = vmla_f32(v198, *(float32x2_t *)v152.f32, v183);
            _Q28 = vaddq_f32(v169, v197);
            if (_Q28.f32[2] > 0.000001)
            {
              v200.f32[0] = v190 + (float)((float)(v189 * _Q28.f32[0]) / _Q28.f32[2]);
              v201 = v192 + (float)(vmuls_lane_f32(v191, *(float32x2_t *)_Q28.f32, 1) / _Q28.f32[2]);
              v202 = v200.f32[0] >= -0.5 && v200.f32[0] < *(float *)&v150;
              v203 = !v202 || v201 < -0.5;
              if (!v203 && v201 < *(float *)&v151)
              {
                v200.f32[1] = v201;
                v205 = vcvt_s32_f32(vrndm_f32(vadd_f32(v200, (float32x2_t)0x3F0000003F000000)));
                if (!v175
                  || (v206 = vmul_s32(v176, v205),
                      (*(_BYTE *)(v177 + vadd_s32(vdup_lane_s32(v206, 1), v206).u32[0]) & 6) == 0))
                {
                  *(int32x2_t *)_Q28.f32 = vmul_s32(v178, v205);
                  _Q28.i16[0] = *(_WORD *)(v179
                                         + 2
                                         * vadd_s32(vdup_lane_s32(*(int32x2_t *)_Q28.f32, 1), *(int32x2_t *)_Q28.f32).u32[0]);
                  __asm { FCVT            S28, H28 }
                  v194 = vabds_f32(_Q28.f32[0], _Q28.f32[2]);
                  if (_Q28.f32[0] > a8 && v194 < a7)
                  {
                    v207 = vmul_s32(v181, v205);
                    v208 = *(unsigned __int8 *)(v185 + vadd_s32(vdup_lane_s32(v207, 1), v207).u32[0]);
                    if (v208 == 34 || v208 == 10)
                    {
                      v187[v188] = 0;
                      v170 = 1;
                    }
                  }
                }
              }
            }
            v188 += 4;
            ++v193;
          }
          while (v188 != 32);
          ++v186;
          v187 += 36;
        }
        while (v186 != 8);
        ++v171;
        v184 += 324;
      }
      while (v171 != 8);
      if (v175)
      {
        v210 = *(std::__shared_weak_count **)&v437[16];
        if (*(_QWORD *)&v437[16])
        {
          v211 = (unint64_t *)(*(_QWORD *)&v437[16] + 8);
          do
            v212 = __ldaxr(v211);
          while (__stlxr(v212 - 1, v211));
          if (!v212)
          {
            ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
            std::__shared_weak_count::__release_weak(v210);
          }
        }
      }
      v213 = *(std::__shared_weak_count **)&v426[16];
      if (!*(_QWORD *)&v426[16])
        goto LABEL_246;
      v214 = (unint64_t *)(*(_QWORD *)&v426[16] + 8);
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
        v216 = *(std::__shared_weak_count **)&__p[16];
        if (!*(_QWORD *)&__p[16])
          goto LABEL_250;
      }
      else
      {
LABEL_246:
        v216 = *(std::__shared_weak_count **)&__p[16];
        if (!*(_QWORD *)&__p[16])
          goto LABEL_250;
      }
      v217 = (unint64_t *)&v216->__shared_owners_;
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (v218)
      {
LABEL_250:
        if (v170)
          goto LABEL_251;
        goto LABEL_265;
      }
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
      if (v170)
      {
LABEL_251:
        v219 = v393 + 1;
        while (1)
        {
          v220 = *v219;
          v221 = v219;
          if (!*v219)
            break;
          while (1)
          {
            v219 = (_QWORD *)v220;
            v222 = *(_DWORD *)(v220 + 28);
            if (v222 > v134)
              break;
            if (v222 >= v134)
              goto LABEL_265;
            v220 = v219[1];
            if (!v220)
            {
              v221 = v219 + 1;
              goto LABEL_257;
            }
          }
        }
LABEL_257:
        v223 = operator new(0x20uLL);
        v223[7] = v134;
        *(_QWORD *)v223 = 0;
        *((_QWORD *)v223 + 1) = 0;
        *((_QWORD *)v223 + 2) = v219;
        *v221 = v223;
        v224 = (uint64_t *)**v393;
        if (v224)
        {
          *v393 = v224;
          v223 = (_DWORD *)*v221;
        }
        sub_2231A9A8C(v393[1], (uint64_t *)v223);
        v393[2] = (uint64_t *)((char *)v393[2] + 1);
      }
LABEL_265:
      v225 = v130[1];
      if (v225)
      {
        do
        {
          v226 = (_QWORD **)v225;
          v225 = (_QWORD *)*v225;
        }
        while (v225);
      }
      else
      {
        do
        {
          v226 = (_QWORD **)v130[2];
          _ZF = *v226 == v130;
          v130 = v226;
        }
        while (!_ZF);
      }
      v130 = v226;
    }
    while (v226 != &v409);
  }
LABEL_108:
  v430 = (unint64_t)((char *)v418 - (_BYTE *)v417) >> 3;
  v429 = v71;
  v428 = 1000593162;
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_385;
  v74 = sub_2241471F8();
  v75 = v74[2];
  if (v75)
    goto LABEL_112;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_530;
  }
  v75 = v74[2];
LABEL_112:
  v76 = *(_QWORD *)(v75 + 64);
  v77 = (std::mutex *)(v76 + 32);
  std::mutex::lock((std::mutex *)(v76 + 32));
  v79 = *(_QWORD *)(v76 + 96);
  v78 = *(_QWORD *)(v76 + 104);
  std::mutex::unlock(v77);
  if (v79 != v78)
  {
    *(_QWORD *)v437 = "cv3d.recon.";
    *(_QWORD *)&v437[8] = 11;
    *(_QWORD *)&v437[16] = "Stats.Volumetric.NoveltyMask";
    *(_QWORD *)&v437[24] = 28;
    sub_2231A9820((uint64_t)v437, (uint64_t)&v437[32], 0, 0, (std::string *)__p);
    v80 = __p[23];
    v81 = *(_BYTE **)__p;
    v82 = *(_QWORD *)&__p[8];
    sub_2241471F8();
    if ((v80 & 0x80u) == 0)
      v83 = __p;
    else
      v83 = v81;
    if ((v80 & 0x80u) == 0)
      v84 = v80;
    else
      v84 = v82;
    v85 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v83, v84);
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 24))(v85);
    v87 = v86;
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (!v87)
        goto LABEL_385;
    }
    else if (!v86)
    {
      goto LABEL_385;
    }
    *(_QWORD *)v437 = "cv3d.recon.";
    *(_QWORD *)&v437[8] = 11;
    *(_QWORD *)&v437[16] = "Stats.Volumetric.NoveltyMask.count";
    *(_QWORD *)&v437[24] = 34;
    sub_2231A9820((uint64_t)v437, (uint64_t)&v437[32], 0, 0, (std::string *)__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v227 = sub_2241471F8();
      v228 = v227[2];
      if (!v228)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v228 = v227[2];
      }
      v229 = *(_QWORD *)(v228 + 64);
      v230 = (std::mutex *)(v229 + 32);
      std::mutex::lock((std::mutex *)(v229 + 32));
      v232 = *(_QWORD *)(v229 + 96);
      v231 = *(_QWORD *)(v229 + 104);
      std::mutex::unlock(v230);
      if (v232 != v231)
      {
        v233 = __p[23];
        v234 = *(_BYTE **)__p;
        v235 = *(_QWORD *)&__p[8];
        sub_2241471F8();
        v236 = (v233 & 0x80u) == 0 ? __p : v234;
        v237 = (v233 & 0x80u) == 0 ? v233 : v235;
        v238 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v236, v237);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v238 + 24))(v238))
        {
          memset(v437, 0, 32);
          *(_DWORD *)&v437[32] = 728325608;
          kdebug_trace();
          sub_223A68B6C((double *)&qword_255788F20, v238, &v430, "dynamic_novelty_count");
          kdebug_trace();
        }
      }
    }
    memset(v437, 0, 32);
    *(_DWORD *)&v437[32] = 728325624;
    kdebug_trace();
    v239 = __p[23];
    if (__p[23] < 0)
      v239 = *(_QWORD *)&__p[8];
    if (v239 >= 0x11)
    {
      v240 = __p;
      if (__p[23] < 0)
        v240 = *(_BYTE **)__p;
      v241 = *(_QWORD *)v240;
      v242 = *((_QWORD *)v240 + 1);
      v243 = v240[16];
      if (v241 == 0x6365722E64337663 && v242 == 0x73746174532E6E6FLL && v243 == 46)
      {
        v246 = sub_223187510();
        if (__p[23] >= 0)
          v247 = __p;
        else
          v247 = *(_BYTE **)__p;
        if (__p[23] >= 0)
          v248 = __p[23];
        else
          v248 = *(_QWORD *)&__p[8];
        sub_223532E4C(v246, v247, v248, (unsigned int *)&v430, (uint64_t)"dynamic_novelty_count", 21);
      }
    }
    kdebug_trace();
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    *(_QWORD *)v437 = "cv3d.recon.";
    *(_QWORD *)&v437[8] = 11;
    *(_QWORD *)&v437[16] = "Stats.Volumetric.NoveltyMask.ratio";
    *(_QWORD *)&v437[24] = 34;
    sub_2231A9820((uint64_t)v437, (uint64_t)&v437[32], 0, 0, (std::string *)v426);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v249 = sub_2241471F8();
      v250 = v249[2];
      if (!v250)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v250 = v249[2];
      }
      v251 = *(_QWORD *)(v250 + 64);
      v252 = (std::mutex *)(v251 + 32);
      std::mutex::lock((std::mutex *)(v251 + 32));
      v254 = *(_QWORD *)(v251 + 96);
      v253 = *(_QWORD *)(v251 + 104);
      std::mutex::unlock(v252);
      if (v254 != v253)
      {
        v255 = v426[23];
        v257 = *(_BYTE **)v426;
        v256 = *(_QWORD *)&v426[8];
        sub_2241471F8();
        v258 = (v255 & 0x80u) == 0 ? v426 : v257;
        v259 = (v255 & 0x80u) == 0 ? v255 : v256;
        v260 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v258, v259);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v260 + 24))(v260))
        {
          memset(v437, 0, 32);
          *(_DWORD *)&v437[32] = 728325608;
          kdebug_trace();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v260 + 24))(v260))
          {
            __p[23] = 21;
            strcpy(__p, "dynamic_novelty_ratio");
            *(_QWORD *)v423 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
            *(_QWORD *)&v423[8] = 2;
            v261 = sub_2241471F8();
            sub_22361FE58((uint64_t)v261, v260, (int *)&v429, (uint64_t)__p, (__int128 *)v423);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
          kdebug_trace();
        }
      }
    }
    memset(v437, 0, 32);
    *(_DWORD *)&v437[32] = 728325624;
    kdebug_trace();
    v262 = v426[23];
    if (v426[23] < 0)
      v262 = *(_QWORD *)&v426[8];
    if (v262 >= 0x11)
    {
      v263 = v426;
      if (v426[23] < 0)
        v263 = *(_BYTE **)v426;
      v264 = *(_QWORD *)v263;
      v265 = *((_QWORD *)v263 + 1);
      v266 = v263[16];
      if (v264 == 0x6365722E64337663 && v265 == 0x73746174532E6E6FLL && v266 == 46)
      {
        v269 = sub_223187510();
        if (v426[23] >= 0)
          v270 = v426;
        else
          v270 = *(_BYTE **)v426;
        if (v426[23] >= 0)
          v271 = v426[23];
        else
          v271 = *(_QWORD *)&v426[8];
        sub_2231897A8((uint64_t *)v269, v270, v271, &v429, (uint64_t)"dynamic_novelty_ratio", 21);
      }
    }
    kdebug_trace();
    if ((v426[23] & 0x80000000) != 0)
      operator delete(*(void **)v426);
    *(_QWORD *)v437 = "cv3d.recon.";
    *(_QWORD *)&v437[8] = 11;
    *(_QWORD *)&v437[16] = "Stats.Volumetric.NoveltyMask.ratio";
    *(_QWORD *)&v437[24] = 34;
    sub_2231A9820((uint64_t)v437, (uint64_t)&v437[32], 0, 0, (std::string *)__p);
    sub_224569D7C();
    sub_224569A80();
    if (os_variant_has_internal_diagnostics())
    {
      v272 = sub_2241471F8();
      v273 = v272[2];
      if (!v273)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v273 = v272[2];
      }
      v274 = *(_QWORD *)(v273 + 64);
      v275 = (std::mutex *)(v274 + 32);
      std::mutex::lock((std::mutex *)(v274 + 32));
      v277 = *(_QWORD *)(v274 + 96);
      v276 = *(_QWORD *)(v274 + 104);
      std::mutex::unlock(v275);
      if (v277 != v276)
      {
        v278 = __p[23];
        v279 = *(_BYTE **)__p;
        v280 = *(_QWORD *)&__p[8];
        sub_2241471F8();
        v281 = (v278 & 0x80u) == 0 ? __p : v279;
        v282 = (v278 & 0x80u) == 0 ? v278 : v280;
        v283 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v281, v282);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v283 + 24))(v283))
        {
          memset(v437, 0, 32);
          *(_DWORD *)&v437[32] = 728325608;
          kdebug_trace();
          sub_22392A8DC((double *)&qword_255788F20, v283, &v428, "dynamic_novelty_threshold");
          kdebug_trace();
        }
      }
    }
    memset(v437, 0, 32);
    *(_DWORD *)&v437[32] = 728325624;
    kdebug_trace();
    v284 = __p[23];
    if (__p[23] < 0)
      v284 = *(_QWORD *)&__p[8];
    if (v284 >= 0x11)
    {
      v285 = __p;
      if (__p[23] < 0)
        v285 = *(_BYTE **)__p;
      v286 = *(_QWORD *)v285;
      v287 = *((_QWORD *)v285 + 1);
      v288 = v285[16];
      if (v286 == 0x6365722E64337663 && v287 == 0x73746174532E6E6FLL && v288 == 46)
      {
        v291 = sub_223187510();
        if (__p[23] >= 0)
          v292 = __p;
        else
          v292 = *(_BYTE **)__p;
        if (__p[23] >= 0)
          v293 = __p[23];
        else
          v293 = *(_QWORD *)&__p[8];
        sub_2231897A8((uint64_t *)v291, v292, v293, (float *)&v428, (uint64_t)"dynamic_novelty_threshold", 25);
      }
    }
    kdebug_trace();
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
LABEL_385:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v294 = sub_2241471F8();
    v295 = v294[2];
    if (!v295)
    {
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        v295 = v294[2];
        goto LABEL_389;
      }
LABEL_530:
      abort();
    }
LABEL_389:
    v296 = *(_QWORD *)(v295 + 64);
    v297 = (std::mutex *)(v296 + 32);
    std::mutex::lock((std::mutex *)(v296 + 32));
    v299 = *(_QWORD *)(v296 + 96);
    v298 = *(_QWORD *)(v296 + 104);
    std::mutex::unlock(v297);
    if (v299 != v298)
    {
      *(_QWORD *)v437 = "cv3d.recon.";
      *(_QWORD *)&v437[8] = 11;
      *(_QWORD *)&v437[16] = "Volumetric.KeyVol.DynamicObjectCarve";
      *(_QWORD *)&v437[24] = 36;
      sub_2231A9820((uint64_t)v437, (uint64_t)&v437[32], 0, 0, &v427);
      sub_2241471F8();
      v300 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v300 + 24))(v300))
      {
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v300 + 24))(v300))
        {
          *(_QWORD *)&v431 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v431 + 1) = 2;
          v301 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v300 + 24))(v300))
          {
            LOWORD(v436) = -1;
            BYTE2(v436) = 0;
            sub_2241498F4((uint64_t)v437, 0);
            v303 = v408;
            if (v408 != &v409)
            {
              v304.i32[1] = v407.i32[1];
              *(float *)v302.i32 = v407.f32[0] * 8.0;
              *(float *)v304.i32 = (float)((float)(v407.f32[0] * 8.0) * 0.0) * 0.5;
              v406 = (float32x4_t)vdupq_lane_s32(v304, 0);
              v401 = (float32x4_t)vdupq_lane_s32(v302, 0);
              do
              {
                v305 = sub_223A5BD5C(a3, (uint64_t *)((char *)v303 + 28), a4);
                if (v305 && *((_WORD *)v305 + 1464) && *((_WORD *)v305 + 1465))
                {
                  *(float32x2_t *)v306.f32 = vcvt_f32_s32(*(int32x2_t *)((char *)v303 + 28));
                  v306.f32[2] = (float)*((int *)v303 + 9);
                  v307 = vaddq_f32(v406, vmulq_n_f32(v306, v407.f32[0]));
                  *(_DWORD *)&v426[8] = v307.i32[2];
                  *(_QWORD *)v426 = v307.i64[0];
                  v308 = vaddq_f32(v401, v307);
                  LODWORD(v433) = v308.i32[2];
                  v432 = (uint64_t (**)())v308.i64[0];
                  sub_223CF1130((uint64_t)v426, (uint64_t)&v432, 1, (__int8 *)&v436, (uint64_t)v437, v407, v308, v401);
                }
                v309 = v303[1];
                if (v309)
                {
                  do
                  {
                    v310 = (_QWORD **)v309;
                    v309 = (_QWORD *)*v309;
                  }
                  while (v309);
                }
                else
                {
                  do
                  {
                    v310 = (_QWORD **)v303[2];
                    _ZF = *v310 == v303;
                    v303 = v310;
                  }
                  while (!_ZF);
                }
                v303 = v310;
              }
              while (v310 != &v409);
            }
            v426[0] = 0;
            v426[24] = 0;
            sub_22329F414((uint64_t)v437, (__int128 *)v426, &v431, v423);
            if (v426[24] && (v426[23] & 0x80000000) != 0)
              operator delete(*(void **)v426);
            sub_22316F8F4((uint64_t *)v437);
            v311 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v300 + 56))(v300);
            v312 = *v311;
            v313 = (std::__shared_weak_count *)v311[1];
            if (v313)
            {
              v314 = (unint64_t *)&v313->__shared_owners_;
              do
                v315 = __ldxr(v314);
              while (__stxr(v315 + 1, v314));
            }
            v317 = *(_QWORD *)&v423[8];
            v316 = *(_QWORD *)&v423[16];
            v432 = &off_24EC6A3B8;
            v433 = *(std::__shared_weak_count **)&v423[8];
            v434 = *(std::__shared_weak_count **)&v423[16];
            *(_QWORD *)&v423[8] = 0;
            *(_QWORD *)&v423[16] = 0;
            *(_QWORD *)v437 = v312;
            *(_QWORD *)&v437[8] = v313;
            if (v313)
            {
              v318 = (unint64_t *)&v313->__shared_owners_;
              do
                v319 = __ldxr(v318);
              while (__stxr(v319 + 1, v318));
            }
            *(_QWORD *)&v437[16] = &off_24EC6A3B8;
            *(_QWORD *)&v437[24] = v317;
            *(_QWORD *)&v437[32] = v316;
            if (v316)
            {
              v320 = (unint64_t *)(v316 + 8);
              do
                v321 = __ldxr(v320);
              while (__stxr(v321 + 1, v320));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v301 + 16))(v301, v437);
            v322 = *(std::__shared_weak_count **)&v437[32];
            if (*(_QWORD *)&v437[32])
            {
              v323 = (unint64_t *)(*(_QWORD *)&v437[32] + 8);
              do
                v324 = __ldaxr(v323);
              while (__stlxr(v324 - 1, v323));
              if (!v324)
              {
                ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
                std::__shared_weak_count::__release_weak(v322);
              }
            }
            v325 = *(std::__shared_weak_count **)&v437[8];
            if (*(_QWORD *)&v437[8])
            {
              v326 = (unint64_t *)(*(_QWORD *)&v437[8] + 8);
              do
                v327 = __ldaxr(v326);
              while (__stlxr(v327 - 1, v326));
              if (!v327)
              {
                ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                std::__shared_weak_count::__release_weak(v325);
              }
            }
            v328 = v434;
            if (v434)
            {
              v329 = (unint64_t *)&v434->__shared_owners_;
              do
                v330 = __ldaxr(v329);
              while (__stlxr(v330 - 1, v329));
              if (!v330)
              {
                ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                std::__shared_weak_count::__release_weak(v328);
              }
            }
            if (v313)
            {
              v331 = (unint64_t *)&v313->__shared_owners_;
              do
                v332 = __ldaxr(v331);
              while (__stlxr(v332 - 1, v331));
              if (!v332)
              {
                ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
                std::__shared_weak_count::__release_weak(v313);
              }
            }
            v333 = *(std::__shared_weak_count **)&v423[16];
            if (*(_QWORD *)&v423[16])
            {
              v334 = (unint64_t *)(*(_QWORD *)&v423[16] + 8);
              do
                v335 = __ldaxr(v334);
              while (__stlxr(v335 - 1, v334));
              if (!v335)
              {
                ((void (*)(std::__shared_weak_count *))v333->__on_zero_shared)(v333);
                std::__shared_weak_count::__release_weak(v333);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v427.__r_.__value_.__l.__data_);
    }
  }
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v336 = sub_2241471F8();
    v337 = v336[2];
    if (!v337)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_530;
      }
      v337 = v336[2];
    }
    v338 = *(_QWORD *)(v337 + 64);
    v339 = (std::mutex *)(v338 + 32);
    std::mutex::lock((std::mutex *)(v338 + 32));
    v341 = *(_QWORD *)(v338 + 96);
    v340 = *(_QWORD *)(v338 + 104);
    std::mutex::unlock(v339);
    if (v341 != v340)
    {
      *(_QWORD *)v437 = "cv3d.recon.";
      *(_QWORD *)&v437[8] = 11;
      *(_QWORD *)&v437[16] = "Volumetric.NoveltyMask.dynamic_mask";
      *(_QWORD *)&v437[24] = 35;
      sub_2231A9820((uint64_t)v437, (uint64_t)&v437[32], 0, 0, &v427);
      sub_2241471F8();
      v342 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v342 + 24))(v342))
      {
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 728325616;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v342 + 24))(v342))
        {
          *(_QWORD *)&v431 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v431 + 1) = 2;
          v343 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v342 + 24))(v342))
          {
            sub_2231F761C(*(NSObject **)(a1 + 1328), (const void **)v426);
            sub_2231F8060(*(uint64_t *)v426, &v432);
            v344 = *(std::__shared_weak_count **)&v426[8];
            if (*(_QWORD *)&v426[8])
            {
              v345 = (unint64_t *)(*(_QWORD *)&v426[8] + 8);
              do
                v346 = __ldaxr(v345);
              while (__stlxr(v346 - 1, v345));
              if (!v346)
              {
                ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                std::__shared_weak_count::__release_weak(v344);
              }
            }
            v347 = v432;
            v435 = 0;
            v349 = v432[1];
            v348 = (std::__shared_weak_count *)v432[2];
            if (v348)
            {
              v350 = (unint64_t *)&v348->__shared_owners_;
              do
                v351 = __ldxr(v350);
              while (__stxr(v351 + 1, v350));
              do
                v352 = __ldaxr(v350);
              while (__stlxr(v352 - 1, v350));
              if (!v352)
              {
                ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
                std::__shared_weak_count::__release_weak(v348);
              }
            }
            if (v349 && *((_BYTE *)v347 + 81))
              (*(void (**)(uint64_t *__return_ptr, uint64_t (*)(), uint64_t))(*(_QWORD *)v347[1]
                                                                                               + 96))(&v436, v347[1], 1);
            else
              v436 = 0;
            *(_QWORD *)v426 = v347;
            *(_QWORD *)&v426[8] = &v435;
            sub_2231FABA4(v426);
            v353 = v436;
            v436 = 0;
            if (v353)
              (*(void (**)(uint64_t))(*(_QWORD *)v353 + 8))(v353);
            v354 = (int32x2_t *)v417;
            v355 = v418;
            if (v417 != v418)
            {
              do
              {
                v356 = v354->i32[0];
                v357 = v354->i32[1];
                ++v354;
                *((_BYTE *)v432[4] + (*((_DWORD *)v432 + 18) * v356 + *((_DWORD *)v432 + 19) * v357)) = -1;
              }
              while (v354 != v355);
            }
            v358 = v432;
            v437[28] = 0;
            *(_QWORD *)v437 = &off_24EC24788;
            memset(&v437[8], 0, 17);
            memset(&v437[32], 0, 32);
            v438 = 0u;
            sub_22449B750(&v437[8], (uint64_t)(v432 + 1));
            v439 = *((_WORD *)v358 + 40);
            v359 = v433;
            if (v433)
            {
              v360 = (unint64_t *)&v433->__shared_owners_;
              do
                v361 = __ldaxr(v360);
              while (__stlxr(v361 - 1, v360));
              if (!v361)
              {
                ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
                std::__shared_weak_count::__release_weak(v359);
              }
            }
            v426[0] = 0;
            v426[24] = 0;
            sub_2233B3528((uint64_t)v437, (__int128 *)v426, &v431, v423);
            if (v426[24] && (v426[23] & 0x80000000) != 0)
              operator delete(*(void **)v426);
            v362 = *(std::__shared_weak_count **)&v437[16];
            if (*(_QWORD *)&v437[16])
            {
              v363 = (unint64_t *)(*(_QWORD *)&v437[16] + 8);
              do
                v364 = __ldaxr(v363);
              while (__stlxr(v364 - 1, v363));
              if (!v364)
              {
                ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                std::__shared_weak_count::__release_weak(v362);
              }
            }
            v365 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v342 + 56))(v342);
            v366 = *v365;
            v367 = (std::__shared_weak_count *)v365[1];
            if (v367)
            {
              v368 = (unint64_t *)&v367->__shared_owners_;
              do
                v369 = __ldxr(v368);
              while (__stxr(v369 + 1, v368));
            }
            v371 = *(_QWORD *)&v423[8];
            v370 = *(_QWORD *)&v423[16];
            v432 = &off_24EC6A3B8;
            v433 = *(std::__shared_weak_count **)&v423[8];
            v434 = *(std::__shared_weak_count **)&v423[16];
            *(_QWORD *)&v423[8] = 0;
            *(_QWORD *)&v423[16] = 0;
            *(_QWORD *)v437 = v366;
            *(_QWORD *)&v437[8] = v367;
            if (v367)
            {
              v372 = (unint64_t *)&v367->__shared_owners_;
              do
                v373 = __ldxr(v372);
              while (__stxr(v373 + 1, v372));
            }
            *(_QWORD *)&v437[16] = &off_24EC6A3B8;
            *(_QWORD *)&v437[24] = v371;
            *(_QWORD *)&v437[32] = v370;
            if (v370)
            {
              v374 = (unint64_t *)(v370 + 8);
              do
                v375 = __ldxr(v374);
              while (__stxr(v375 + 1, v374));
            }
            (*(void (**)(uint64_t *, _BYTE *))(*v343 + 16))(v343, v437);
            v376 = *(std::__shared_weak_count **)&v437[32];
            if (*(_QWORD *)&v437[32])
            {
              v377 = (unint64_t *)(*(_QWORD *)&v437[32] + 8);
              do
                v378 = __ldaxr(v377);
              while (__stlxr(v378 - 1, v377));
              if (!v378)
              {
                ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
                std::__shared_weak_count::__release_weak(v376);
              }
            }
            v379 = *(std::__shared_weak_count **)&v437[8];
            if (*(_QWORD *)&v437[8])
            {
              v380 = (unint64_t *)(*(_QWORD *)&v437[8] + 8);
              do
                v381 = __ldaxr(v380);
              while (__stlxr(v381 - 1, v380));
              if (!v381)
              {
                ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                std::__shared_weak_count::__release_weak(v379);
              }
            }
            v382 = v434;
            if (v434)
            {
              v383 = (unint64_t *)&v434->__shared_owners_;
              do
                v384 = __ldaxr(v383);
              while (__stlxr(v384 - 1, v383));
              if (!v384)
              {
                ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                std::__shared_weak_count::__release_weak(v382);
              }
            }
            if (v367)
            {
              v385 = (unint64_t *)&v367->__shared_owners_;
              do
                v386 = __ldaxr(v385);
              while (__stlxr(v386 - 1, v385));
              if (!v386)
              {
                ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                std::__shared_weak_count::__release_weak(v367);
              }
            }
            v387 = *(std::__shared_weak_count **)&v423[16];
            if (*(_QWORD *)&v423[16])
            {
              v388 = (unint64_t *)(*(_QWORD *)&v423[16] + 8);
              do
                v389 = __ldaxr(v388);
              while (__stlxr(v389 - 1, v388));
              if (!v389)
              {
                ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                std::__shared_weak_count::__release_weak(v387);
              }
            }
          }
        }
        kdebug_trace();
      }
      if (SHIBYTE(v427.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v427.__r_.__value_.__l.__data_);
    }
  }
  sub_223198030((uint64_t)&v408, v409);
  if (v417)
    operator delete(v417);
  return kdebug_trace();
}

void sub_223A8D958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;

  v73 = (std::__shared_weak_count *)STACK[0x238];
  if (STACK[0x238])
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  sub_2231874DC((uint64_t)&a57);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(__p);
  sub_223198030((uint64_t)&a34, (_QWORD *)a35);
  if (a44)
    operator delete(a44);
  sub_2231874DC((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_223A8DD84(int *a1, int *a2, int *a3, unsigned int *a4, float *a5, double a6, double a7, double a8)
{
  float v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  float v16;

  v8 = *a5;
  if (*((_BYTE *)a1 + 2))
  {
    if (*((_BYTE *)a2 + 2))
    {
      v9 = 0;
      *(float *)&a8 = 1.0 - v8;
      *(float *)&a7 = (float)((float)((float)(1.0 - v8) * (float)*((unsigned __int8 *)a1 + 2))
                            + (float)(v8 * (float)*((unsigned __int8 *)a2 + 2)))
                    + 0.5;
      LOBYTE(v10) = vcvtms_s32_f32(*(float *)&a7);
      LOWORD(a7) = *(_WORD *)a1;
      *(_QWORD *)&a7 = vmovl_s16(*(int16x4_t *)&a7).u64[0];
      LOWORD(a8) = *(_WORD *)a2;
      *(_QWORD *)&a8 = vmovl_s16(*(int16x4_t *)&a8).u64[0];
      LOWORD(v11) = vcvtms_s32_f32((float)((float)((float)(1.0 - v8) * (float)SLODWORD(a7)) + (float)(v8 * (float)SLODWORD(a8)))+ 0.5);
      v12 = *((unsigned __int8 *)a3 + 2);
      if (!*((_BYTE *)a3 + 2))
      {
LABEL_4:
        v13 = *a4;
        goto LABEL_12;
      }
    }
    else
    {
      v11 = *a1;
      v10 = HIWORD(*a1);
      v9 = *a1 & 0xFF000000;
      v12 = *((unsigned __int8 *)a3 + 2);
      if (!*((_BYTE *)a3 + 2))
        goto LABEL_4;
    }
  }
  else
  {
    v11 = *a2;
    v10 = HIWORD(*a2);
    v9 = *a2 & 0xFF000000;
    v12 = *((unsigned __int8 *)a3 + 2);
    if (!*((_BYTE *)a3 + 2))
      goto LABEL_4;
  }
  if (*((_BYTE *)a4 + 2))
  {
    v14 = 0;
    *(float *)&a8 = 1.0 - v8;
    *(float *)&a7 = (float)((float)((float)(1.0 - v8) * (float)v12) + (float)(v8 * (float)*((unsigned __int8 *)a4 + 2)))
                  + 0.5;
    LOBYTE(v12) = vcvtms_s32_f32(*(float *)&a7);
    LOWORD(a7) = *(_WORD *)a3;
    LOWORD(a8) = *(_WORD *)a4;
    LOWORD(v13) = vcvtms_s32_f32((float)((float)((float)(1.0 - v8) * (float)vmovl_s16(*(int16x4_t *)&a7).i32[0])+ (float)(v8 * (float)vmovl_s16(*(int16x4_t *)&a8).i32[0]))+ 0.5);
    if ((_BYTE)v10)
      goto LABEL_13;
    return v14 | (v12 << 16) | (unsigned __int16)v13 | 0x100000000;
  }
  v13 = *a3;
LABEL_12:
  v12 = HIWORD(v13);
  v14 = v13 & 0xFF000000;
  if (!(_BYTE)v10)
    return v14 | (v12 << 16) | (unsigned __int16)v13 | 0x100000000;
LABEL_13:
  if (!(_BYTE)v12)
    return v9 | (v10 << 16) | (unsigned __int16)v11 | 0x100000000;
  v16 = a5[1];
  return (vcvtms_s32_f32((float)((float)(v16 * (float)v12)+ (float)((float)(1.0 - v16) * (float)v10))+ 0.5) << 16) | (unsigned __int16)vcvtms_s32_f32((float)((float)(v16 * (float)(__int16)v13)+ (float)((float)(1.0 - v16)* (float)(__int16)v11))+ 0.5) | 0x100000000;
}

unsigned __int8 *sub_223A8DF60@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>, float32x4_t a7@<Q0>, double a8@<D1>, float32x4_t a9@<Q2>, float32x4_t a10@<Q3>, float32x4_t a11@<Q4>, unsigned int a12@<S5>)
{
  unsigned int v12;
  unsigned int v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int v28;
  float v29;
  float32x4_t v30;
  int8x16_t v31;

  LODWORD(a8) = *(_DWORD *)a5;
  v12 = result[3];
  if (result[3])
  {
    if (a2[3])
    {
      v13 = 0.5;
      a9.f32[0] = (float)((float)((float)(1.0 - *(float *)&a8) * (float)v12) + (float)(*(float *)&a8 * (float)a2[3]))
                + 0.5;
      v12 = vcvtms_s32_f32(a9.f32[0]);
      a9.i8[0] = *result;
      a9.f32[0] = (float)a9.u32[0];
      LOBYTE(v13) = result[1];
      v14 = (float)v13;
      a11.i8[0] = result[2];
      v15 = (float)a11.u32[0];
      a9.f32[1] = v14;
      a9.f32[2] = v15;
      v16 = vmulq_n_f32(a9, 1.0 - *(float *)&a8);
      a9.i8[0] = *a2;
      a9.f32[0] = (float)a9.u32[0];
      LOBYTE(v14) = a2[1];
      LOBYTE(v15) = a2[2];
      a9.f32[1] = (float)LODWORD(v14);
      a9.f32[2] = (float)LODWORD(v15);
      v17 = vaddq_f32(v16, vmulq_n_f32(a9, *(float *)&a8));
      v18.i64[0] = 0x3F0000003F000000;
      v18.i64[1] = 0x3F0000003F000000;
      v19 = (int8x16_t)vaddq_f32(v17, v18);
      v20 = (int)*(float *)v19.i32;
      a7 = (float32x4_t)vextq_s8(v19, v19, 4uLL);
      *(int32x2_t *)a7.f32 = vcvt_s32_f32(*(float32x2_t *)a7.f32);
      v21 = a3[3];
      if (!a3[3])
      {
LABEL_10:
        v28 = *a4;
        LOBYTE(a8) = a4[1];
        BYTE4(a8) = a4[2];
        v21 = a4[3];
        if (!v12)
          goto LABEL_16;
        goto LABEL_13;
      }
    }
    else
    {
      v20 = *result;
      a7.i8[0] = result[1];
      a7.i8[4] = result[2];
      v21 = a3[3];
      if (!a3[3])
        goto LABEL_10;
    }
  }
  else
  {
    v20 = *a2;
    a7.i8[0] = a2[1];
    a7.i8[4] = a2[2];
    v12 = a2[3];
    v21 = a3[3];
    if (!a3[3])
      goto LABEL_10;
  }
  if (a4[3])
  {
    v22 = 0.5;
    a10.f32[0] = (float)((float)((float)(1.0 - *(float *)&a8) * (float)v21) + (float)(*(float *)&a8 * (float)a4[3]))
               + 0.5;
    v21 = vcvtms_s32_f32(a10.f32[0]);
    a10.i8[0] = *a3;
    a10.f32[0] = (float)a10.u32[0];
    LOBYTE(v22) = a3[1];
    v23 = (float)v22;
    LOBYTE(a12) = a3[2];
    v24 = (float)a12;
    a10.f32[1] = v23;
    a10.f32[2] = v24;
    v25 = vmulq_n_f32(a10, 1.0 - *(float *)&a8);
    a10.i8[0] = *a4;
    a10.f32[0] = (float)a10.u32[0];
    LOBYTE(v23) = a4[1];
    LOBYTE(v24) = a4[2];
    a10.f32[1] = (float)LODWORD(v23);
    a10.f32[2] = (float)LODWORD(v24);
    v26 = vaddq_f32(v25, vmulq_n_f32(a10, *(float *)&a8));
    v25.i64[0] = 0x3F0000003F000000;
    v25.i64[1] = 0x3F0000003F000000;
    v27 = (int8x16_t)vaddq_f32(v26, v25);
    v28 = (int)*(float *)v27.i32;
    a8 = COERCE_DOUBLE(vcvt_s32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 4uLL)));
    if (!v12)
      goto LABEL_16;
  }
  else
  {
    v28 = *a3;
    LOBYTE(a8) = a3[1];
    BYTE4(a8) = a3[2];
    if (!v12)
      goto LABEL_16;
  }
LABEL_13:
  if (v21)
  {
    v29 = *(float *)(a5 + 4);
    LOBYTE(v21) = vcvtms_s32_f32((float)((float)(v29 * (float)v21) + (float)((float)(1.0 - v29) * (float)v12)) + 0.5);
    *(int32x2_t *)a11.f32 = vdup_lane_s32(*(int32x2_t *)a7.f32, 0);
    a11.i32[0] = v20;
    *(float32x2_t *)a11.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a11.f32, (int8x8_t)0xFF000000FFLL));
    a11.f32[2] = (float)a7.u8[4];
    *(int32x2_t *)a7.f32 = vdup_lane_s32(*(int32x2_t *)&a8, 0);
    a7.i32[0] = v28;
    *(float32x2_t *)a7.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a7.f32, (int8x8_t)0xFF000000FFLL));
    a7.f32[2] = (float)BYTE4(a8);
    v30.i64[0] = 0x3F0000003F000000;
    v30.i64[1] = 0x3F0000003F000000;
    v31 = (int8x16_t)vaddq_f32(vaddq_f32(vmulq_n_f32(a7, v29), vmulq_n_f32(a11, 1.0 - v29)), v30);
    v28 = (int)*(float *)v31.i32;
    a8 = COERCE_DOUBLE(vcvt_s32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 4uLL)));
  }
  else
  {
    LOBYTE(v21) = v12;
    LOBYTE(v28) = v20;
    a8 = *(double *)a7.i64;
  }
LABEL_16:
  *a6 = v28;
  a6[1] = LOBYTE(a8);
  a6[2] = BYTE4(a8);
  a6[3] = v21;
  a6[4] = 1;
  return result;
}

unsigned __int8 *sub_223A8E1DC@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 *a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, unsigned __int8 *a7@<X6>, unsigned __int8 *a8@<X7>, _BYTE *a9@<X8>, float32x4_t a10@<Q0>, float32x4_t a11@<Q2>, float32x4_t a12@<Q3>, float32x4_t a13@<Q4>, unsigned int a14@<S5>, unsigned int a15@<S6>, float32x2_t *a16)
{
  float32x2_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  int8x16_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  float v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x2_t v37;
  unsigned int v38;
  unsigned int v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  float v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  int v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;

  v16 = *a16;
  v17 = result[3];
  if (!result[3])
  {
    v25 = *a2;
    a11.i8[0] = a2[1];
    a11.i8[4] = a2[2];
    v17 = a2[3];
    v26 = a3[3];
    if (!a3[3])
      goto LABEL_10;
    goto LABEL_6;
  }
  if (!a2[3])
  {
    v25 = *result;
    a11.i8[0] = result[1];
    a11.i8[4] = result[2];
    v26 = a3[3];
    if (!a3[3])
      goto LABEL_10;
LABEL_6:
    if (a4[3])
    {
      v27 = 0.5;
      a12.f32[0] = (float)((float)((float)(1.0 - v16.f32[0]) * (float)v26) + (float)(v16.f32[0] * (float)a4[3])) + 0.5;
      v26 = vcvtms_s32_f32(a12.f32[0]);
      a12.i8[0] = *a3;
      a12.f32[0] = (float)a12.u32[0];
      LOBYTE(v27) = a3[1];
      v28 = (float)v27;
      LOBYTE(a14) = a3[2];
      v29 = (float)a14;
      a12.f32[1] = v28;
      a12.f32[2] = v29;
      v30 = vmulq_n_f32(a12, 1.0 - v16.f32[0]);
      a12.i8[0] = *a4;
      a12.f32[0] = (float)a12.u32[0];
      LOBYTE(v28) = a4[1];
      LOBYTE(v29) = a4[2];
      *(float *)&a14 = (float)LODWORD(v29);
      a12.f32[1] = (float)LODWORD(v28);
      a12.i32[2] = a14;
      v31 = vaddq_f32(v30, vmulq_n_f32(a12, v16.f32[0]));
      a12.i64[0] = 0x3F0000003F000000;
      a12.i64[1] = 0x3F0000003F000000;
      v32 = (int8x16_t)vaddq_f32(v31, a12);
      v33 = (int)*(float *)v32.i32;
      a10 = (float32x4_t)vextq_s8(v32, v32, 4uLL);
      *(int32x2_t *)a10.f32 = vcvt_s32_f32(*(float32x2_t *)a10.f32);
      if (!v17)
        goto LABEL_15;
    }
    else
    {
      v33 = *a3;
      a10.i8[0] = a3[1];
      a10.i8[4] = a3[2];
      if (!v17)
        goto LABEL_15;
    }
    goto LABEL_13;
  }
  v18 = 0.5;
  a11.f32[0] = (float)((float)((float)(1.0 - v16.f32[0]) * (float)v17) + (float)(v16.f32[0] * (float)a2[3])) + 0.5;
  v17 = vcvtms_s32_f32(a11.f32[0]);
  a11.i8[0] = *result;
  a11.f32[0] = (float)a11.u32[0];
  LOBYTE(v18) = result[1];
  v19 = (float)v18;
  a13.i8[0] = result[2];
  v20 = (float)a13.u32[0];
  a11.f32[1] = v19;
  a11.f32[2] = v20;
  v21 = vmulq_n_f32(a11, 1.0 - v16.f32[0]);
  a11.i8[0] = *a2;
  a11.f32[0] = (float)a11.u32[0];
  LOBYTE(v19) = a2[1];
  a12.f32[0] = (float)LODWORD(v19);
  LOBYTE(v20) = a2[2];
  a11.i32[1] = a12.i32[0];
  a11.f32[2] = (float)LODWORD(v20);
  v22 = vaddq_f32(v21, vmulq_n_f32(a11, v16.f32[0]));
  v23 = 0x3F0000003F000000;
  a11.i64[1] = 0x3F0000003F000000;
  v24 = (int8x16_t)vaddq_f32(v22, a11);
  v25 = (int)*(float *)v24.i32;
  a10 = (float32x4_t)vextq_s8(v24, v24, 4uLL);
  *(int32x2_t *)a11.f32 = vcvt_s32_f32(*(float32x2_t *)a10.f32);
  v26 = a3[3];
  if (a3[3])
    goto LABEL_6;
LABEL_10:
  v33 = *a4;
  a10.i8[0] = a4[1];
  a10.i8[4] = a4[2];
  v26 = a4[3];
  if (!v17)
  {
LABEL_15:
    v37 = *a16;
    v38 = a5[3];
    if (a5[3])
      goto LABEL_16;
LABEL_20:
    v45 = *a6;
    a11.i8[0] = a6[1];
    a11.i8[4] = a6[2];
    v38 = a6[3];
    v46 = a7[3];
    if (!a7[3])
      goto LABEL_25;
    goto LABEL_21;
  }
LABEL_13:
  if (v26)
  {
    *(float *)&a15 = (float)v26;
    v26 = vcvtms_s32_f32((float)((float)((float)(1.0 - v16.f32[1]) * (float)v17) + (float)(v16.f32[1] * (float)v26)) + 0.5);
    *(int32x2_t *)a12.f32 = vdup_lane_s32(*(int32x2_t *)a11.f32, 0);
    a12.i32[0] = v25;
    a14 = 255;
    *(float32x2_t *)a12.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a12.f32, (int8x8_t)0xFF000000FFLL));
    a12.f32[2] = (float)a11.u8[4];
    *(int32x2_t *)a11.f32 = vdup_lane_s32(*(int32x2_t *)a10.f32, 0);
    a11.i32[0] = v33;
    a12 = vmulq_n_f32(a12, 1.0 - v16.f32[1]);
    *(float32x2_t *)a11.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a11.f32, (int8x8_t)0xFF000000FFLL));
    a11.f32[2] = (float)a10.u8[4];
    v34 = vaddq_f32(a12, vmulq_lane_f32(a11, v16, 1));
    v35.i64[0] = 0x3F0000003F000000;
    v35.i64[1] = 0x3F0000003F000000;
    v36 = (int8x16_t)vaddq_f32(v34, v35);
    v33 = (int)*(float *)v36.i32;
    a10 = (float32x4_t)vextq_s8(v36, v36, 4uLL);
    *(int32x2_t *)a10.f32 = vcvt_s32_f32(*(float32x2_t *)a10.f32);
    goto LABEL_15;
  }
  v26 = v17;
  v33 = v25;
  a10.i64[0] = a11.i64[0];
  v37 = *a16;
  v38 = a5[3];
  if (!a5[3])
    goto LABEL_20;
LABEL_16:
  if (!a6[3])
  {
    v45 = *a5;
    a11.i8[0] = a5[1];
    a11.i8[4] = a5[2];
    v46 = a7[3];
    if (!a7[3])
      goto LABEL_25;
LABEL_21:
    if (a8[3])
    {
      v47 = 0.5;
      a13.f32[0] = (float)((float)((float)(1.0 - v37.f32[0]) * (float)v46) + (float)(v37.f32[0] * (float)a8[3])) + 0.5;
      v46 = vcvtms_s32_f32(a13.f32[0]);
      a13.i8[0] = *a7;
      a13.f32[0] = (float)a13.u32[0];
      LOBYTE(v47) = a7[1];
      v48 = (float)v47;
      LOBYTE(a15) = a7[2];
      v49 = (float)a15;
      a13.f32[1] = v48;
      a13.f32[2] = v49;
      v50 = vmulq_n_f32(a13, 1.0 - v37.f32[0]);
      a13.i8[0] = *a8;
      a13.f32[0] = (float)a13.u32[0];
      LOBYTE(v48) = a8[1];
      LOBYTE(v49) = a8[2];
      a13.f32[1] = (float)LODWORD(v48);
      a13.f32[2] = (float)LODWORD(v49);
      v51 = vaddq_f32(v50, vmulq_n_f32(a13, v37.f32[0]));
      a13.i64[0] = 0x3F0000003F000000;
      a13.i64[1] = 0x3F0000003F000000;
      a12 = vaddq_f32(v51, a13);
      v52 = (int)a12.f32[0];
      *(int32x2_t *)a12.f32 = vcvt_s32_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a12, (int8x16_t)a12, 4uLL));
      if (!v38)
        goto LABEL_30;
    }
    else
    {
      v52 = *a7;
      a12.i8[0] = a7[1];
      a12.i8[4] = a7[2];
      if (!v38)
        goto LABEL_30;
    }
    goto LABEL_28;
  }
  v39 = 0.5;
  a12.f32[0] = (float)((float)((float)(1.0 - v37.f32[0]) * (float)v38) + (float)(v37.f32[0] * (float)a6[3])) + 0.5;
  v38 = vcvtms_s32_f32(a12.f32[0]);
  a12.i8[0] = *a5;
  a12.f32[0] = (float)a12.u32[0];
  LOBYTE(v39) = a5[1];
  v40 = (float)v39;
  LOBYTE(a14) = a5[2];
  v41 = (float)a14;
  a12.f32[1] = v40;
  a12.f32[2] = v41;
  v42 = vmulq_n_f32(a12, 1.0 - v37.f32[0]);
  a12.i8[0] = *a6;
  a12.f32[0] = (float)a12.u32[0];
  LOBYTE(v40) = a6[1];
  LOBYTE(v41) = a6[2];
  a12.f32[1] = (float)LODWORD(v40);
  a12.f32[2] = (float)LODWORD(v41);
  v43 = vaddq_f32(v42, vmulq_n_f32(a12, v37.f32[0]));
  a12.i64[0] = 0x3F0000003F000000;
  a12.i64[1] = 0x3F0000003F000000;
  v44 = (int8x16_t)vaddq_f32(v43, a12);
  v45 = (int)*(float *)v44.i32;
  a11 = (float32x4_t)vextq_s8(v44, v44, 4uLL);
  *(int32x2_t *)a11.f32 = vcvt_s32_f32(*(float32x2_t *)a11.f32);
  v46 = a7[3];
  if (a7[3])
    goto LABEL_21;
LABEL_25:
  v52 = *a8;
  a12.i8[0] = a8[1];
  a12.i8[4] = a8[2];
  v46 = a8[3];
  if (!v38)
  {
LABEL_30:
    if (!v26)
      goto LABEL_36;
    goto LABEL_31;
  }
LABEL_28:
  if (v46)
  {
    v46 = vcvtms_s32_f32((float)((float)((float)(1.0 - v37.f32[1]) * (float)v38) + (float)(v37.f32[1] * (float)v46)) + 0.5);
    *(int32x2_t *)a13.f32 = vdup_lane_s32(*(int32x2_t *)a11.f32, 0);
    a13.i32[0] = v45;
    *(float32x2_t *)a13.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a13.f32, (int8x8_t)0xFF000000FFLL));
    a13.f32[2] = (float)a11.u8[4];
    *(int32x2_t *)a11.f32 = vdup_lane_s32(*(int32x2_t *)a12.f32, 0);
    a11.i32[0] = v52;
    a13 = vmulq_n_f32(a13, 1.0 - v37.f32[1]);
    *(float32x2_t *)a11.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a11.f32, (int8x8_t)0xFF000000FFLL));
    a11.f32[2] = (float)a12.u8[4];
    v53 = vaddq_f32(a13, vmulq_lane_f32(a11, v37, 1));
    v54.i64[0] = 0x3F0000003F000000;
    v54.i64[1] = 0x3F0000003F000000;
    v55 = (int8x16_t)vaddq_f32(v53, v54);
    v52 = (int)*(float *)v55.i32;
    *(int32x2_t *)a12.f32 = vcvt_s32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 4uLL));
    goto LABEL_30;
  }
  v52 = v45;
  v46 = v38;
  a12.i64[0] = a11.i64[0];
  if (!v26)
    goto LABEL_36;
LABEL_31:
  if (v46)
  {
    v56 = a16[1].f32[0];
    LOBYTE(v46) = vcvtms_s32_f32((float)((float)(v56 * (float)v46) + (float)((float)(1.0 - v56) * (float)v26)) + 0.5);
    *(int32x2_t *)a13.f32 = vdup_lane_s32(*(int32x2_t *)a10.f32, 0);
    a13.i32[0] = v33;
    *(float32x2_t *)a13.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a13.f32, (int8x8_t)0xFF000000FFLL));
    a13.f32[2] = (float)a10.u8[4];
    *(int32x2_t *)a10.f32 = vdup_lane_s32(*(int32x2_t *)a12.f32, 0);
    a10.i32[0] = v52;
    *(float32x2_t *)a10.f32 = vcvt_f32_u32((uint32x2_t)vand_s8(*(int8x8_t *)a10.f32, (int8x8_t)0xFF000000FFLL));
    a10.f32[2] = (float)a12.u8[4];
    v57 = vaddq_f32(vmulq_n_f32(a10, v56), vmulq_n_f32(a13, 1.0 - v56));
    v58.i64[0] = 0x3F0000003F000000;
    v58.i64[1] = 0x3F0000003F000000;
    v59 = (int8x16_t)vaddq_f32(v57, v58);
    v52 = (int)*(float *)v59.i32;
    *(int32x2_t *)a12.f32 = vcvt_s32_f32((float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 4uLL));
  }
  else
  {
    LOBYTE(v46) = v26;
    LOBYTE(v52) = v33;
    a12.i64[0] = a10.i64[0];
  }
LABEL_36:
  *a9 = v52;
  a9[1] = a12.i8[0];
  a9[2] = a12.i8[4];
  a9[3] = v46;
  a9[4] = 1;
  return result;
}

void sub_223A8E768(uint64_t *a1, uint64_t *a2, uint64_t a3, float32x4_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x2_t v26;
  float32x4_t v27;
  char *v28;
  float32x2_t *v29;
  float32x2_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x4_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float32x2_t v43;
  float v44;
  float v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float v53;
  int8x16_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  float32x2_t **v59;
  uint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  float32x2_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  float32x2_t **v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float v75;
  unsigned __int8 v76;
  unsigned __int8 v77;
  float32x2_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t i;
  float32x2_t v88;
  uint64_t v89;
  float32x2_t *v90;
  unint64_t v91;
  float32x4_t v92;
  uint64_t v93;
  __int128 v94;
  float32x4_t v95;

  a4.i64[0] = *(_QWORD *)a3;
  a4.i32[2] = *(_DWORD *)(a3 + 8);
  v95 = a4;
  a4.i64[0] = *(_QWORD *)(a3 + 12);
  a4.i32[2] = *(_DWORD *)(a3 + 20);
  v92 = a4;
  bzero((void *)a1[3], 0x27100uLL);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
    return;
  v8 = 0;
  v9 = a1 + 4;
  v10 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
  v11 = (float32x2_t)vdup_n_s32(0xBDCCCCCD);
  v89 = a2[1];
  v88 = v11;
  __asm { FMOV            V15.2S, #20.0 }
  while (2)
  {
    if (!*(_BYTE *)(v6 + 416)
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Primitives/src/OccupancyMap.cpp", 79, (uint64_t)"plane.gridExtent", 16, (uint64_t)"Plane grid representation is missing.", 37, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9[v8] = (uint64_t)v10;
    v18 = *(_QWORD *)(v6 + 392);
    v17 = *(_QWORD *)(v6 + 400);
    v19 = v17 - v18;
    if (v17 == v18)
    {
      v9[v8] = (uint64_t)vadd_f32((float32x2_t)v9[v8], v11);
      goto LABEL_92;
    }
    v93 = 8 * v8;
    if (v19 < 0)
      sub_22316E078();
    v20 = (char *)operator new((unint64_t)v19 >> 1);
    v28 = v20;
    v30 = *(float32x2_t **)(v6 + 392);
    v29 = *(float32x2_t **)(v6 + 400);
    if (v30 == v29)
    {
      v9[v8] = (uint64_t)vadd_f32((float32x2_t)v9[v8], v11);
      if (!v20)
        goto LABEL_92;
      goto LABEL_91;
    }
    v31 = &v20[8 * (v19 >> 4)];
    v32 = v20;
    v90 = *(float32x2_t **)(v6 + 400);
    v91 = v8;
    v33 = 8 * v8;
    do
    {
      v22.i32[0] = v30[1].i32[0];
      v23.i32[0] = v30[1].i32[1];
      v34 = *(float32x2_t *)(v6 + 40);
      v27.i32[0] = *(_DWORD *)(v6 + 48);
      v35 = *(float32x2_t *)(v6 + 56);
      v25.i32[0] = *(_DWORD *)(v6 + 64);
      v36 = *(float32x2_t *)(v6 + 72);
      v24.i64[0] = *(_QWORD *)(v6 + 88);
      v24.i32[2] = *(_DWORD *)(v6 + 96);
      v26.i32[0] = *(_DWORD *)(v6 + 80);
      v37 = vmul_n_f32(v34, COERCE_FLOAT(*v30));
      *(float32x2_t *)v38.f32 = vmla_f32(vmla_lane_f32(v37, v35, *v30, 1), 0, v36);
      v39 = vmul_f32(*(float32x2_t *)v27.f32, *v30);
      *(float32x2_t *)&v38.u32[2] = vmla_f32(vmla_lane_f32(v39, *(float32x2_t *)v25.i8, *v30, 1), 0, v26);
      v40 = vaddq_f32(v24, v38);
      v41 = vmul_n_f32(v34, v22.f32[0]);
      *(float32x2_t *)v42.f32 = vmla_f32(vmla_lane_f32(v41, v35, *v30, 1), 0, v36);
      v43 = vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v22.f32);
      *(float32x2_t *)&v42.u32[2] = vmla_f32(vmla_lane_f32(v43, *(float32x2_t *)v25.i8, *v30, 1), 0, v26);
      v44 = fmaxf(v40.f32[2], -3.4028e38);
      v22 = vaddq_f32(v42, v24);
      if (v44 >= v22.f32[2])
        v45 = v44;
      else
        v45 = v22.f32[2];
      *(float32x2_t *)v46.f32 = vmla_f32(vmla_n_f32(v37, v35, v23.f32[0]), 0, v36);
      *(float32x2_t *)&v46.u32[2] = vmla_f32(vmla_f32(v39, *(float32x2_t *)v23.f32, *(float32x2_t *)v25.i8), 0, v26);
      v27 = vaddq_f32(v24, v46);
      if (v45 >= v27.f32[2])
        v47 = v45;
      else
        v47 = v27.f32[2];
      *(float32x2_t *)v48.f32 = vmla_f32(vmla_n_f32(v41, v35, v23.f32[0]), 0, v36);
      *(float32x2_t *)&v48.u32[2] = vmla_f32(vmla_f32(v43, *(float32x2_t *)v23.f32, *(float32x2_t *)v25.i8), 0, v26);
      v23 = vaddq_f32(v48, v24);
      v49 = vmaxnm_f32(*(float32x2_t *)v40.f32, (float32x2_t)0x80000000800000);
      v50 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v22.f32, v49), *(int8x8_t *)v22.f32, (int8x8_t)v49);
      v51 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v27.f32, v50), *(int8x8_t *)v27.f32, (int8x8_t)v50);
      *(int8x8_t *)v25.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v23.f32, v51), *(int8x8_t *)v23.f32, (int8x8_t)v51);
      if (v47 >= v23.f32[2])
        v52 = v47;
      else
        v52 = v23.f32[2];
      *(float *)&v25.i32[2] = v52;
      v25 = (int8x16_t)vsubq_f32((float32x4_t)v25, v95);
      if (*(float *)v25.i32 >= 0.0)
      {
        v25.i32[0] = vextq_s8(v25, v25, 8uLL).u32[0];
        *(int32x2_t *)v25.i8 = vcltz_f32(*(float32x2_t *)v25.i8);
        if ((v25.i8[4] & 1) == 0 && (v25.i8[0] & 1) == 0)
        {
          v53 = fminf(v40.f32[2], 3.4028e38);
          if (v22.f32[2] < v53)
            v53 = v22.f32[2];
          if (v27.f32[2] < v53)
            v53 = v27.f32[2];
          if (v23.f32[2] < v53)
            v53 = v23.f32[2];
          *(float32x2_t *)v40.f32 = vminnm_f32(*(float32x2_t *)v40.f32, v10);
          *(int8x8_t *)v40.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v22.f32), *(int8x8_t *)v22.f32, *(int8x8_t *)v40.f32);
          *(int8x8_t *)v40.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v27.f32), *(int8x8_t *)v27.f32, *(int8x8_t *)v40.f32);
          *(int32x2_t *)v22.f32 = vcgt_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v23.f32);
          *(int8x8_t *)v40.f32 = vbsl_s8(*(int8x8_t *)v22.f32, *(int8x8_t *)v23.f32, *(int8x8_t *)v40.f32);
          v40.f32[2] = v53;
          v54 = (int8x16_t)vsubq_f32(v92, v40);
          if (*(float *)v54.i32 >= 0.0)
          {
            v54.i32[0] = vextq_s8(v54, v54, 8uLL).u32[0];
            *(int8x8_t *)v54.i8 = vmvn_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v54.i8));
            if ((v54.i8[4] & 1) != 0 && (v54.i8[0] & 1) != 0)
            {
              *(uint64_t *)((char *)v9 + v33) = (uint64_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)((char *)v9 + v33), *v30), (int8x8_t)*v30, *(int8x8_t *)((char *)v9 + v33));
              if (v32 < v31)
              {
                *(_QWORD *)v32 = v30;
                v32 += 8;
                goto LABEL_10;
              }
              v55 = (v32 - v28) >> 3;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 61)
                sub_22316E078();
              if ((v31 - v28) >> 2 > v56)
                v56 = (v31 - v28) >> 2;
              if ((unint64_t)(v31 - v28) >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v56;
              if (v57)
              {
                if (v57 >> 61)
                  sub_223174E94();
                v58 = operator new(8 * v57);
                v59 = (float32x2_t **)&v58[8 * v55];
                *v59 = v30;
                v60 = (uint64_t)(v59 + 1);
                v61 = v32 - v28;
                if (v32 != v28)
                {
LABEL_42:
                  v62 = v61 - 8;
                  if (v62 < 0x168
                    || (v65 = (v32 - 8 - v28) & 0xFFFFFFFFFFFFFFF8, &v58[v32 - v28 - 8 - v65] > &v58[v32 - v28 - 8])
                    || &v32[-v65 - 8] > v32 - 8
                    || (unint64_t)(v28 - v58) < 0x20)
                  {
                    v63 = v32;
                    v9 = a1 + 4;
                  }
                  else
                  {
                    v66 = (v62 >> 3) + 1;
                    v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
                    v63 = &v32[-v67];
                    v59 = (float32x2_t **)((char *)v59 - v67);
                    v68 = &v58[8 * v55 - 16];
                    v69 = v32 - 16;
                    v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v21 = *(_OWORD *)v69;
                      *(v68 - 1) = *((_OWORD *)v69 - 1);
                      *v68 = v21;
                      v68 -= 2;
                      v69 -= 32;
                      v70 -= 4;
                    }
                    while (v70);
                    v9 = a1 + 4;
                    if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_45:
                      v31 = &v58[8 * v57];
                      if (!v28)
                      {
LABEL_47:
                        v28 = (char *)v59;
                        v32 = (char *)v60;
                        v29 = v90;
                        v8 = v91;
                        v33 = v93;
                        goto LABEL_10;
                      }
LABEL_46:
                      operator delete(v28);
                      goto LABEL_47;
                    }
                  }
                  do
                  {
                    v64 = (float32x2_t *)*((_QWORD *)v63 - 1);
                    v63 -= 8;
                    *--v59 = v64;
                  }
                  while (v63 != v28);
                  goto LABEL_45;
                }
              }
              else
              {
                v58 = 0;
                v59 = (float32x2_t **)(8 * v55);
                *(_QWORD *)(8 * v55) = v30;
                v60 = 8 * v55 + 8;
                v61 = v32 - v28;
                if (v32 != v28)
                  goto LABEL_42;
              }
              v9 = a1 + 4;
              v31 = &v58[8 * v57];
              if (!v28)
                goto LABEL_47;
              goto LABEL_46;
            }
          }
        }
      }
LABEL_10:
      v30 += 2;
    }
    while (v30 != v29);
    *(uint64_t *)((char *)v9 + v33) = (uint64_t)vadd_f32(*(float32x2_t *)((char *)v9 + v33), v11);
    if (v28 == v32)
    {
      v7 = v89;
      if (!v28)
        goto LABEL_92;
      goto LABEL_91;
    }
    v71 = (float32x2_t **)v28;
    do
    {
      v72 = (float32x2_t)v9[v8];
      v73 = (float32x2_t)vdup_n_s32(0x358637BDu);
      v74 = (*v71)[1];
      *(float32x2_t *)&v21 = vmul_f32(vadd_f32(vsub_f32(**v71, v72), v73), _D15);
      v75 = *((float *)&v21 + 1);
      v94 = v21;
      if (*(float *)&v21 < 0.0 || *((float *)&v21 + 1) < 0.0)
      {
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Primitives/src/OccupancyMap.cpp", 129, (uint64_t)"cell_coord_min[0] >= 0.f && cell_coord_min[1] >= 0.f", 52, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
        v76 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v86 = qword_255795648;
          for (i = qword_255795650; v86 != i; v86 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v86)(*(_QWORD *)(v86 + 8), "cell_coord_min[0] >= 0.f && cell_coord_min[1] >= 0.f", 52, "", 0);
        }
        v77 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        v9 = a1 + 4;
        if (!byte_255795670)
          abort();
        qword_255795660(*(_QWORD *)algn_255795668, "cell_coord_min[0] >= 0.f && cell_coord_min[1] >= 0.f", 52, "", 0);
      }
      v78 = vmul_f32(vadd_f32(vsub_f32(v74, v72), v73), _D15);
      v79 = (unint64_t)v78.f32[0];
      v80 = (unint64_t)v75;
      v81 = (unint64_t)v78.f32[1];
      if ((unint64_t)v78.f32[0] >= 0xC8)
        v79 = 200;
      if (v81 >= 0xC8)
        v81 = 200;
      if (v81 > v80)
      {
        *((_QWORD *)&v21 + 1) = *((_QWORD *)&v94 + 1);
        if (v79 > (unint64_t)*(float *)&v94)
        {
          v82 = a1[3];
          v83 = *a1;
          do
          {
            v84 = (unint64_t)*(float *)&v94;
            do
            {
              v85 = v83 + (*((_DWORD *)a1 + 4) * v84 + *((_DWORD *)a1 + 5) * v80);
              *(_DWORD *)(v82 + v85) |= 1 << v8;
              ++v84;
            }
            while (v79 != v84);
            ++v80;
          }
          while (v80 != v81);
        }
      }
      ++v71;
    }
    while (v71 != (float32x2_t **)v32);
    v7 = v89;
    v11 = v88;
    if (v28)
LABEL_91:
      operator delete(v28);
LABEL_92:
    v6 += 464;
    if (v6 != v7 && v8++ < 0x1F)
      continue;
    break;
  }
}

void sub_223A8EEEC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A8EF14(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  kdebug_trace();
  v2 = a1[1];
  v3 = (v2 << 34) + 0xF00000000;
  v4 = HIDWORD(v3) & 0xFFFFFFF0;
  if (v4 * (unint64_t)HIDWORD(v2))
  {
    v5 = (char *)malloc_type_malloc(v4 * (unint64_t)HIDWORD(v2), 0xAE2F145AuLL);
    v6 = a1[2];
    v7 = HIDWORD(v6);
    if ((_DWORD)v6 != 4 || (_DWORD)v4 != HIDWORD(v6))
      goto LABEL_6;
LABEL_26:
    memcpy(v5, (const void *)a1[3], (*((_DWORD *)a1 + 3) * v4));
    v9 = a1[3];
    v10 = *a1;
    goto LABEL_27;
  }
  v5 = 0;
  v6 = a1[2];
  v7 = HIDWORD(v6);
  if ((_DWORD)v6 == 4 && (_DWORD)v4 == HIDWORD(v6))
    goto LABEL_26;
LABEL_6:
  v9 = a1[3];
  v10 = *a1;
  if (v9)
  {
    v11 = (*((_DWORD *)a1 + 3) * v7);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = *((_DWORD *)a1 + 2);
      v15 = (_DWORD *)(v9 + v10);
      v16 = (_DWORD *)(v9 + v10 + v11);
      v17 = v5;
      do
      {
        *v17++ = *v15;
        v15 = (_DWORD *)((char *)v15 + v6);
        v18 = v12 + 1;
        if (v12 + 1 == v14)
          v12 = 0;
        else
          ++v12;
        if (v18 == v14)
          v15 = (_DWORD *)((char *)v15 + v7 - (v18 * v6));
        v19 = v13 + 1;
        if (v13 + 1 == (_DWORD)v2)
          v13 = 0;
        else
          ++v13;
        if (v19 == (_DWORD)v2)
          v17 = (_DWORD *)((char *)v17 + v4 - (4 * v19));
      }
      while (v15 != v16);
    }
  }
LABEL_27:
  v21 = 0;
  v22 = v4 + 4;
  do
  {
    v23 = 0;
    v26 = v22;
    do
    {
      v27 = *((_DWORD *)a1 + 4);
      v28 = *((_DWORD *)a1 + 5);
      v29 = v27 * v23;
      v30 = (v23 + 1) * v27;
      v31 = *(_DWORD *)(v9 + v10 + (v28 * v21 + v30)) | *(_DWORD *)(v9
                                                                                + v10
                                                                                + (v28 * v21 + v27 * v23));
      v32 = (v23 + 2) * v27;
      v24 = v21 + 1;
      v25 = v21 + 2;
      *(_DWORD *)&v5[v26] = v31 | *(_DWORD *)(v9 + v10 + (v28 * v21 + v32)) | *(_DWORD *)(v9 + v10 + (v28 * v24 + v29)) | *(_DWORD *)(v9 + v10 + (v28 * v24 + v30)) | *(_DWORD *)(v9 + v10 + (v28 * v24 + v32)) | *(_DWORD *)(v9 + v10 + (v28 * v25 + v29)) | *(_DWORD *)(v9 + v10 + (v28 * v25 + v30)) | *(_DWORD *)(v9 + v10 + (v28 * v25 + v32));
      v26 += 4;
      ++v23;
    }
    while (v23 != 198);
    ++v21;
    v22 += v4;
  }
  while (v21 != 198);
  v33 = 0;
  v34 = 0;
  v35 = 32 * ((v3 >> 36) & 0x7FFFFFF);
  v36 = HIDWORD(v3) & 0xFFFFFFF0;
  do
  {
    v37 = -792;
    v38 = 1;
    do
    {
      *(_DWORD *)(v9 + v10 + (*((_DWORD *)a1 + 4) * v38++ + *((_DWORD *)a1 + 5) * (v34 + 1))) = *(_DWORD *)&v5[(v33 + v37 + 796)] & *(_DWORD *)&v5[(v33 + v37 + 792)] & *(_DWORD *)&v5[(v33 + v37 + 800)] & *(_DWORD *)&v5[(v36 + v37 + 792)] & *(_DWORD *)&v5[(v36 + v37 + 796)] & *(_DWORD *)&v5[(v36 + v37 + 800)] & *(_DWORD *)&v5[(v35 + v37 + 792)] & *(_DWORD *)&v5[(v35 + v37 + 796)] & *(_DWORD *)&v5[(v35 + v37 + 800)];
      v37 += 4;
    }
    while (v37);
    ++v34;
    LODWORD(v35) = v35 + v4;
    LODWORD(v36) = v36 + v4;
    v33 += v4;
  }
  while (v34 != 198);
  free(v5);
  return kdebug_trace();
}

void sub_223A8F260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231874DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223A8F27C(_QWORD *a1, char a2, float a3, float a4)
{
  uint64_t v8;

  *a1 = &off_24EC5E6C8;
  v8 = operator new();
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *(float *)(v8 + 24) = a3;
  *(float *)(v8 + 28) = a4;
  *(_OWORD *)(v8 + 32) = xmmword_22465E030;
  *(_QWORD *)(v8 + 48) = 0x32000000004;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 56) = malloc_type_malloc(0x27100uLL, 0xAE2F145AuLL);
  *(_BYTE *)(v8 + 320) = a2;
  *(_OWORD *)(v8 + 324) = xmmword_22465E068;
  *(_OWORD *)(v8 + 340) = unk_22465E078;
  *(_OWORD *)(v8 + 356) = xmmword_22465E088;
  *(_OWORD *)(v8 + 372) = unk_22465E098;
  a1[1] = v8;
  return a1;
}

void sub_223A8F364(_Unwind_Exception *a1)
{
  void **v1;
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = *v1;
  if (*v1)
  {
    v4 = (uint64_t)v1[1];
    v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 464;
        sub_22324A5A0(v4);
      }
      while ((void *)v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  MEMORY[0x227684CE8](v1, 0x1030C4007B4BA30);
  _Unwind_Resume(a1);
}

_QWORD *sub_223A8F3C0(_QWORD *a1)
{
  void **v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = (void **)a1[1];
  *a1 = &off_24EC5E6C8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2[7];
    if (v3)
    {
      free(v3);
      v2[7] = 0;
    }
    v4 = *v2;
    if (*v2)
    {
      v5 = (uint64_t)v2[1];
      v6 = *v2;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 464;
          sub_22324A5A0(v5);
        }
        while ((void *)v5 != v4);
        v6 = *v2;
      }
      v2[1] = v4;
      operator delete(v6);
    }
    MEMORY[0x227684CE8](v2, 0x1030C4007B4BA30);
  }
  return a1;
}

void sub_223A8F45C(_QWORD *a1)
{
  void **v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = (void **)a1[1];
  *a1 = &off_24EC5E6C8;
  a1[1] = 0;
  if (v1)
  {
    v2 = v1[7];
    if (v2)
    {
      free(v2);
      v1[7] = 0;
    }
    v3 = *v1;
    if (*v1)
    {
      v4 = (uint64_t)v1[1];
      v5 = *v1;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 464;
          sub_22324A5A0(v4);
        }
        while ((void *)v4 != v3);
        v5 = *v1;
      }
      v1[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x227684CE8](v1, 0x1030C4007B4BA30);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223A8F508(uint64_t a1, float32x2_t **a2)
{
  return sub_223A8F510(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_223A8F510(uint64_t a1, float32x2_t **a2)
{
  int8x16_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x2_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  int v16;
  float32x2_t *v17;
  uint64_t v18;
  float32x2_t *v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t *v22;
  float *v23;
  float v24;
  float v25;
  float *v26;
  char v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float *v35;
  float v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  float *v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float *v49;
  float v50;
  float v51;
  uint64_t v52;
  unint64_t v53;
  size_t v54;
  float *v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  float32x2_t v60;
  int8x16_t v61;
  float32x2_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  unsigned __int32 v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x2_t *v78;
  float32x2_t *v79;
  uint64_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  int8x16_t v87;
  float32x2_t v88;
  float32x4_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x2_t v97;
  float v99;
  float *v100;
  float v101;
  float *v103;
  float *v104;
  int32x2_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  float32x2_t v118;
  int8x16_t v119;
  float32x2_t v120;
  float32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  float32x4_t v124;
  unsigned __int32 v125;
  int8x16_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x2_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float32x2_t v145;
  int8x16_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x2_t v149;
  float32x2_t v150;
  float32x4_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float v155;
  float *v156;
  float v157;
  BOOL v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  float32x2_t *v168;
  uint64_t v169;
  uint64_t v170;
  float32x2_t *v171;
  float32x4_t v172;
  float v173;
  float v174;
  float v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  uint64_t v182;
  float32x4_t v183;
  float32x2_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x2_t v188;
  int32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int32x4_t v192;
  float32x2_t v193;
  int32x4_t v194;
  int8x16_t v195;
  int8x16_t v196;
  float32x2_t v197;
  float32x4_t v198;
  int8x16_t v199;
  int8x16_t v200;
  float32x2_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  float32x2_t v205;
  _BYTE *v206;
  float v207;
  float v208;
  float v209;
  float v210;
  _BYTE v211[32];
  float32x4_t v212;
  float32x4_t v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  unint64_t v217;
  float *v218;
  float *v219;
  float *v220;
  uint64_t v221;

  kdebug_trace();
  if (*(_BYTE *)(a1 + 320) && *a2 != a2[1])
  {
    sub_223A9079C(a2, (uint64_t)v211, v4, v5, v6, v7, v8);
    *(float *)v10.i32 = fabsf(*(float *)(a1 + 24));
    v11 = fabsf(*(float *)(a1 + 28));
    if (*(float *)v10.i32 < v11)
      *(float *)v10.i32 = v11;
    v12 = (float32x4_t)vdupq_lane_s32(v10, 0);
    v13 = vsubq_f32(*(float32x4_t *)v211, v12);
    *(_DWORD *)&v211[8] = v13.i32[2];
    *(_QWORD *)v211 = v13.i64[0];
    if (*(float *)&v211[12] < v13.f32[0])
    {
      *(_DWORD *)v211 = *(_DWORD *)&v211[12];
      *(_DWORD *)&v211[12] = v13.i32[0];
    }
    v13.i32[0] = *(_DWORD *)&v211[16];
    if (v13.f32[1] <= *(float *)&v211[16])
    {
      v13.i32[0] = v13.i32[1];
      v14 = *(float *)&v211[20];
      if (v13.f32[2] <= *(float *)&v211[20])
        goto LABEL_9;
    }
    else
    {
      *(_DWORD *)&v211[4] = *(_DWORD *)&v211[16];
      *(_DWORD *)&v211[16] = v13.i32[1];
      v14 = *(float *)&v211[20];
      if (v13.f32[2] <= *(float *)&v211[20])
      {
LABEL_9:
        v14 = v13.f32[2];
        goto LABEL_12;
      }
    }
    *(float *)&v211[8] = v14;
    *(_DWORD *)&v211[20] = v13.i32[2];
LABEL_12:
    v9.i64[0] = *(_QWORD *)&v211[12];
    v9.i32[2] = *(_DWORD *)&v211[20];
    v15 = vaddq_f32(v12, v9);
    *(_DWORD *)&v211[20] = v15.i32[2];
    *(_QWORD *)&v211[12] = v15.i64[0];
    v16 = *(_DWORD *)v211;
    if (*(float *)v211 > v15.f32[0])
    {
      *(_DWORD *)v211 = v15.i32[0];
      *(_DWORD *)&v211[12] = v16;
      v15.i32[0] = v15.i32[2];
      if (v13.f32[0] <= v15.f32[1])
      {
LABEL_14:
        if (v14 <= v15.f32[0])
        {
LABEL_16:
          sub_223A8E768((uint64_t *)(a1 + 32), (uint64_t *)a1, (uint64_t)v211, v13);
          sub_223A8EF14((uint64_t *)(a1 + 32));
          goto LABEL_17;
        }
LABEL_15:
        *(_DWORD *)&v211[8] = v15.i32[0];
        *(float *)&v211[20] = v14;
        goto LABEL_16;
      }
    }
    else
    {
      v15.i32[0] = v15.i32[2];
      if (v13.f32[0] <= v15.f32[1])
        goto LABEL_14;
    }
    *(_DWORD *)&v211[4] = v15.i32[1];
    *(_DWORD *)&v211[16] = v13.i32[0];
    if (v14 <= v15.f32[0])
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:
  kdebug_trace();
  v17 = *a2;
  v168 = a2[1];
  if (*a2 != v168)
  {
    v18 = 0;
    v19 = (float32x2_t *)(a1 + 324);
    v20 = a1 + 64;
    v21.i32[3] = 0;
    v176 = a1 + 64;
    do
    {
      v170 = v18;
      v171 = v17;
      v193 = v17[2];
      if (v193)
      {
        if (v17[12].i8[0])
          goto LABEL_22;
      }
      else
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Primitives/src/PlaneSnapperImpl.cpp", 38, (uint64_t)"mesh", 4, (uint64_t)"MeshList can not contain null pointers!", 39, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_155;
        }
        v193 = v17[2];
        if (v17[12].i8[0])
        {
LABEL_22:
          *(float32x2_t *)v21.f32 = v17[4];
          v21.i32[2] = v17[5].i32[0];
          v194 = (int32x4_t)v21;
          *(float32x2_t *)v21.f32 = v17[6];
          v21.i32[2] = v17[7].i32[0];
          v189 = (int32x4_t)v21;
          *(float32x2_t *)v21.f32 = v17[8];
          v21.i32[2] = v17[9].i32[0];
          v202 = (int8x16_t)v21;
          *(float32x2_t *)v21.f32 = v17[10];
          v21.i32[2] = v17[11].i32[0];
          v198 = v21;
          goto LABEL_26;
        }
      }
      v198 = 0u;
      v202 = (int8x16_t)xmmword_2245C76E0;
      v189 = (int32x4_t)xmmword_2245F4CF0;
      v194 = (int32x4_t)xmmword_2245F4CE0;
LABEL_26:
      v22 = **(uint64_t ***)&v193;
      v23 = *(float **)(*(_QWORD *)&v193 + 8);
      v24 = *(float *)(a1 + 24);
      v25 = *(float *)(a1 + 28);
      v26 = (float *)(*(_QWORD *)(*(_QWORD *)&v193 + 80) - *(_QWORD *)(*(_QWORD *)&v193 + 72));
      v169 = (uint64_t)v23 - **(_QWORD **)&v193;
      if (v26)
        _ZF = (float *)((char *)v23 - **(_QWORD **)&v193) == v26;
      else
        _ZF = 1;
      v28 = _ZF;
      if (!*(_BYTE *)(a1 + 320))
      {
        if ((v28 & 1) == 0)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Primitives/src/PlaneSnapperImpl.cpp", 76, (uint64_t)"(mesh.vertices.size() == mesh.normals.size() || mesh.normals.empty())", 69, (uint64_t)"The mesh must have either no or per vertex normals", 50, (void (*)(void **))sub_22457406C))
          {
LABEL_155:
            abort();
          }
          v22 = **(uint64_t ***)&v193;
          v23 = *(float **)(*(_QWORD *)&v193 + 8);
        }
        if (v22 == (uint64_t *)v23)
        {
          v218 = 0;
          v219 = 0;
          v48 = 0.0;
          v47 = 0.0;
          v46 = 0.0;
          v43 = 0.0;
          v220 = 0;
          v44 = 0.0;
          v45 = 0.0;
        }
        else
        {
          v43 = *(float *)v22;
          v44 = *((float *)v22 + 1);
          v45 = *((float *)v22 + 2);
          v46 = v45;
          v47 = v44;
          v48 = *(float *)v22;
          v49 = (float *)v22;
          do
          {
            v50 = v49[1];
            if (*v49 < v48)
              v48 = *v49;
            if (v50 < v47)
              v47 = v49[1];
            v51 = v49[2];
            if (v51 < v46)
              v46 = v49[2];
            if (v43 < *v49)
              v43 = *v49;
            if (v44 < v50)
              v44 = v49[1];
            if (v45 < v51)
              v45 = v49[2];
            v49 += 3;
          }
          while (v49 != v23);
          v52 = (unsigned __int128)(((char *)v23 - (char *)v22) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
          v53 = (v52 >> 1) + ((unint64_t)v52 >> 63);
          v218 = 0;
          v219 = 0;
          v220 = 0;
          if (v53 >> 62)
            sub_22316E078();
          v54 = 4 * v53;
          v55 = (float *)operator new(4 * v53);
          v56 = &v55[v53];
          v218 = v55;
          v220 = v56;
          memset_pattern16(v55, &unk_2246566A0, v54);
          v219 = v56;
        }
        v173 = v45;
        v174 = v44;
        v175 = v43;
        sub_223180888((uint64_t *)&v214, *(uint64_t ***)&v193);
        v117 = *(_QWORD *)a1;
        v182 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)a1 != v182)
        {
          v118 = (float32x2_t)vzip1q_s32(v194, v189).u64[0];
          v119 = (int8x16_t)vnegq_f32(v198);
          v120 = vmul_n_f32(v118, *(float *)v119.i32);
          *(float32x2_t *)v121.f32 = v118;
          v121.i64[1] = v202.u32[0];
          v122 = (int8x16_t)vtrn2q_s32(v194, v189);
          v122.i32[2] = v202.i32[1];
          v123 = (int8x16_t)vzip2q_s32(v194, v189);
          *(float32x2_t *)v124.f32 = vmls_laneq_f32(vmls_lane_f32(v120, *(float32x2_t *)v122.i8, *(float32x2_t *)v198.f32, 1), *(float32x2_t *)v123.i8, v198, 2);
          v123.i32[2] = v202.i32[2];
          v125 = vdupq_laneq_s32((int32x4_t)v123, 2).u32[0];
          v124.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v202.i8, *(float32x2_t *)v119.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v202.i8, 1), *(float32x2_t *)v198.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL)).u32[0]);
          v126 = vextq_s8(vextq_s8(v122, v122, 0xCuLL), v123, 8uLL);
          v123.i64[0] = __PAIR64__(v126.u32[0], v122.u32[0]);
          v123.i64[1] = v126.u32[1];
          v122.i64[0] = v126.i64[1];
          v122.i64[1] = v125;
          v177 = (float32x4_t)v122;
          v178 = (float32x4_t)v123;
          v179 = v121;
          v180 = v124;
          do
          {
            v127 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v179, COERCE_FLOAT(*(_OWORD *)v19->f32)), v178, *v19, 1), v177, *(float32x4_t *)v19->f32, 2), v180, *(float32x4_t *)v19->f32, 3);
            v128 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v179, COERCE_FLOAT(*(_OWORD *)v19[2].f32)), v178, v19[2], 1), v177, *(float32x4_t *)v19[2].f32, 2), v180, *(float32x4_t *)v19[2].f32, 3);
            v129 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v179, COERCE_FLOAT(*(_OWORD *)v19[4].f32)), v178, v19[4], 1), v177, *(float32x4_t *)v19[4].f32, 2), v180, *(float32x4_t *)v19[4].f32, 3);
            v130 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v179, COERCE_FLOAT(*(_OWORD *)v19[6].f32)), v178, v19[6], 1), v177, *(float32x4_t *)v19[6].f32, 2), v180, *(float32x4_t *)v19[6].f32, 3);
            v131 = *(float32x4_t *)(v117 + 88);
            v132 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, COERCE_FLOAT(*(_OWORD *)(v117 + 56))), v128, *(float32x2_t *)(v117 + 56), 1), v129, *(float32x4_t *)(v117 + 56), 2), v130, *(float32x4_t *)(v117 + 56), 3);
            v133 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, COERCE_FLOAT(*(_OWORD *)(v117 + 72))), v128, *(float32x2_t *)(v117 + 72), 1), v129, *(float32x4_t *)(v117 + 72), 2), v130, *(float32x4_t *)(v117 + 72), 3);
            v200 = (int8x16_t)v128;
            v204 = (int8x16_t)v127;
            v196 = (int8x16_t)v129;
            *(float32x4_t *)v211 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, COERCE_FLOAT(*(_OWORD *)(v117 + 40))), v128, *(float32x2_t *)(v117 + 40), 1), v129, *(float32x4_t *)(v117 + 40), 2), v130, *(float32x4_t *)(v117 + 40), 3);
            *(float32x4_t *)&v211[16] = v132;
            v191 = v130;
            v212 = v133;
            v213 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, v131.f32[0]), v128, *(float32x2_t *)v131.f32, 1), v129, v131, 2), v130, v131, 3);
            v133.f32[0] = v25;
            sub_223A90988((float32x2_t **)(v117 + 360), (uint64_t)v211, (uint64_t)&v206, v24, *(float32x2_t *)v133.f32, *(float32x2_t *)v131.f32, *(float32x2_t *)v130.f32, *(float32x2_t *)v177.f32);
            v135 = a1;
            if (v48 <= v208
              && v47 <= v209
              && v46 <= v210
              && v175 >= *(float *)&v206
              && v174 >= *((float *)&v206 + 1)
              && v173 >= v207)
            {
              v136 = **(uint64_t ***)&v193;
              v137 = *(uint64_t **)(*(_QWORD *)&v193 + 8);
              if (**(uint64_t ***)&v193 != v137)
              {
                v138 = 0;
                v139 = 0;
                v140 = *(float32x2_t *)(v117 + 16);
                v134.i32[0] = *(_DWORD *)(v117 + 24);
                *(float32x2_t *)v141.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v204.i8, v140.f32[0]), *(float32x2_t *)v200.i8, v140, 1), *(float32x2_t *)v196.i8, v134.f32[0]);
                v142 = (float32x2_t)vextq_s8(v204, v204, 8uLL).u64[0];
                v143 = (float32x2_t)vextq_s8(v200, v200, 8uLL).u64[0];
                v144 = vmla_lane_f32(vmul_f32(v142, v140), v143, v140, 1);
                v145 = (float32x2_t)vextq_s8(v196, v196, 8uLL).u64[0];
                *(float32x2_t *)&v141.u32[2] = vmla_f32(v144, v134, v145);
                v151.i64[0] = *(_QWORD *)(v117 + 28);
                v144.i32[1] = v191.i32[1];
                v146 = (int8x16_t)vaddq_f32(v141, v191);
                v144.i32[0] = *(_DWORD *)(v117 + 36);
                v147 = vmla_f32(vmla_lane_f32(vmul_f32(v142, *(float32x2_t *)v151.f32), v143, *(float32x2_t *)v151.f32, 1), v144, v145);
                *(float32x2_t *)v148.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v204.i8, v151.f32[0]), *(float32x2_t *)v200.i8, *(float32x2_t *)v151.f32, 1), *(float32x2_t *)v196.i8, v144.f32[0]);
                *(float32x2_t *)&v148.u32[2] = v147;
                v172 = v148;
                v149 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v148.f32, 1);
                v201 = v147;
                v205 = *(float32x2_t *)v148.f32;
                v150 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v148.f32, *(float32x2_t *)v146.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v146.i8, 1), *(float32x2_t *)v148.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL), v147);
                v148.i64[1] = *(_QWORD *)&v211[8];
                v151.i32[1] = *(_DWORD *)&v211[20];
                v192 = vzip1q_s32(*(int32x4_t *)v211, *(int32x4_t *)&v211[16]);
                v146.i64[0] = vtrn2q_s32(*(int32x4_t *)v211, *(int32x4_t *)&v211[16]).u64[0];
                v152 = (float32x2_t)vzip2q_s32(*(int32x4_t *)v211, *(int32x4_t *)&v211[16]).u64[0];
                *(float32x2_t *)v148.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v211, *(int32x2_t *)&v211[16]), vnegq_f32(v213).f32[0]), *(float32x2_t *)v146.i8, *(float32x2_t *)v213.f32, 1), v152, v213, 2);
                v186 = v148;
                v188 = v152;
                v21 = (float32x4_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v146.i8, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v146.i8, 1), 0xCuLL);
                v184 = *(float32x2_t *)v21.f32;
                do
                {
                  v151.i32[0] = *(_DWORD *)((char *)v136 + v139 + 8);
                  v21.i64[0] = *(uint64_t *)((char *)v136 + v139);
                  v153 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(v205, *(float32x2_t *)v21.f32), v149, *(float32x2_t *)v21.f32, 1), *(float32x2_t *)v151.f32, v201), v150);
                  if (v153.f32[0] <= v25 && v153.f32[0] >= v24)
                  {
                    v155 = fabsf(v153.f32[0]);
                    v156 = v218;
                    v157 = v218[v138];
                    if (v155 <= v157 || (float)(v155 - v157) <= 0.000001)
                    {
                      v197 = v153;
                      v21.i32[2] = *(_DWORD *)((char *)v136 + v139 + 8);
                      v151.i64[1] = v192.i64[1];
                      *(float32x2_t *)v151.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v192.i8, v21.f32[0]), v184, *(float32x2_t *)v21.f32, 1), v188, v21, 2);
                      v21 = vaddq_f32(v151, v186);
                      v221 = v21.i64[0];
                      if (*(float *)(v117 + 304) <= v21.f32[0] && *(float *)(v117 + 312) >= v21.f32[0])
                      {
                        v160 = v21.f32[1] < *(float *)(v117 + 308) || v21.f32[1] > *(float *)(v117 + 316);
                        if (!v160 && sub_223FBC2C4((float32x2_t **)(v117 + 360), (float *)&v221, 0, 0.000001))
                        {
                          v21.i64[0] = *(uint64_t *)((char *)v136 + v139);
                          v21.i32[2] = *(_DWORD *)((char *)v136 + v139 + 8);
                          v151.i32[1] = v172.i32[1];
                          v21 = vmlsq_lane_f32(v21, v172, v197, 0);
                          v161 = (char *)v214 + v139;
                          *((_DWORD *)v161 + 2) = v21.i32[2];
                          *(_QWORD *)v161 = v21.i64[0];
                          v162 = *(_QWORD *)(*(_QWORD *)&v193 + 72);
                          if (v162 != *(_QWORD *)(*(_QWORD *)&v193 + 80))
                          {
                            v163 = v162 + v139;
                            *(_QWORD *)v163 = v172.i64[0];
                            *(_DWORD *)(v163 + 8) = v172.i32[2];
                          }
                          v156[v138] = v155;
                        }
                      }
                    }
                  }
                  v139 += 12;
                  ++v138;
                }
                while ((uint64_t *)((char *)v136 + v139) != v137);
              }
            }
            v117 += 464;
            a1 = v135;
            v20 = v176;
          }
          while (v117 != v182);
        }
        v164 = **(uint64_t ***)&v193;
        **(_QWORD **)&v193 = v214;
        *(_QWORD *)(*(_QWORD *)&v193 + 8) = v215;
        v166 = *(_QWORD *)(*(_QWORD *)&v193 + 16);
        v165 = *(_QWORD *)(*(_QWORD *)&v193 + 24);
        *(_QWORD *)(*(_QWORD *)&v193 + 16) = v216;
        v214 = v164;
        *(_QWORD *)(*(_QWORD *)&v193 + 24) = v217;
        v216 = v166;
        v217 = v165;
        v115 = v170;
        v17 = v171;
        if (!v164)
          goto LABEL_149;
        v116 = HIDWORD(v165);
        v215 = v164;
        *(_QWORD *)v211 = v164;
        *(_DWORD *)&v211[8] = -1431655765 * ((unint64_t)(v166 - (_QWORD)v164) >> 2);
        if (v116 == 0xFFFFFFFF)
          sub_22316DD70();
        goto LABEL_148;
      }
      if ((v28 & 1) == 0)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Primitives/src/PlaneSnapperImpl.cpp", 76, (uint64_t)"(mesh.vertices.size() == mesh.normals.size() || mesh.normals.empty())", 69, (uint64_t)"The mesh must have either no or per vertex normals", 50, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_155;
        }
        v22 = **(uint64_t ***)&v193;
        v23 = *(float **)(*(_QWORD *)&v193 + 8);
      }
      if (v22 == (uint64_t *)v23)
      {
        v218 = 0;
        v219 = 0;
        v34 = 0.0;
        v33 = 0.0;
        v32 = 0.0;
        v29 = 0.0;
        v220 = 0;
        v30 = 0.0;
        v31 = 0.0;
      }
      else
      {
        v29 = *(float *)v22;
        v30 = *((float *)v22 + 1);
        v31 = *((float *)v22 + 2);
        v32 = v31;
        v33 = v30;
        v34 = *(float *)v22;
        v35 = (float *)v22;
        do
        {
          v36 = v35[1];
          if (*v35 < v34)
            v34 = *v35;
          if (v36 < v33)
            v33 = v35[1];
          v37 = v35[2];
          if (v37 < v32)
            v32 = v35[2];
          if (v29 < *v35)
            v29 = *v35;
          if (v30 < v36)
            v30 = v35[1];
          if (v31 < v37)
            v31 = v35[2];
          v35 += 3;
        }
        while (v35 != v23);
        v38 = (unsigned __int128)(((char *)v23 - (char *)v22) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        v39 = (v38 >> 1) + ((unint64_t)v38 >> 63);
        v218 = 0;
        v219 = 0;
        v220 = 0;
        if (v39 >> 62)
          sub_22316E078();
        v40 = 4 * v39;
        v41 = (float *)operator new(4 * v39);
        v42 = &v41[v39];
        v218 = v41;
        v220 = v42;
        memset_pattern16(v41, &unk_2246566A0, v40);
        v219 = v42;
      }
      sub_223180888((uint64_t *)&v214, *(uint64_t ***)&v193);
      v58 = *(_QWORD *)a1;
      v57 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)a1 != v57)
      {
        v59 = 0;
        v60 = (float32x2_t)vzip1q_s32(v194, v189).u64[0];
        v61 = (int8x16_t)vnegq_f32(v198);
        v62 = vmul_n_f32(v60, *(float *)v61.i32);
        *(float32x2_t *)v63.f32 = v60;
        v63.i64[1] = v202.u32[0];
        v64 = (int8x16_t)vtrn2q_s32(v194, v189);
        v64.i32[2] = v202.i32[1];
        v65 = (int8x16_t)vzip2q_s32(v194, v189);
        *(float32x2_t *)v66.f32 = vmls_laneq_f32(vmls_lane_f32(v62, *(float32x2_t *)v64.i8, *(float32x2_t *)v198.f32, 1), *(float32x2_t *)v65.i8, v198, 2);
        v65.i32[2] = v202.i32[2];
        v67 = vdupq_laneq_s32((int32x4_t)v65, 2).u32[0];
        v66.i64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v202.i8, *(float32x2_t *)v61.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v202.i8, 1), *(float32x2_t *)v198.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL)).u32[0]);
        v68 = vextq_s8(vextq_s8(v64, v64, 0xCuLL), v65, 8uLL);
        v65.i64[0] = __PAIR64__(v68.u32[0], v64.u32[0]);
        v65.i64[1] = v68.u32[1];
        v64.i64[0] = v68.i64[1];
        v64.i64[1] = v67;
        v181 = (float32x4_t)v64;
        v183 = (float32x4_t)v65;
        v185 = v63;
        v187 = v66;
        while (1)
        {
          v69 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v185, COERCE_FLOAT(*(_OWORD *)v19->f32)), v183, *v19, 1), v181, *(float32x4_t *)v19->f32, 2), v187, *(float32x4_t *)v19->f32, 3);
          v70 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v185, COERCE_FLOAT(*(_OWORD *)v19[2].f32)), v183, v19[2], 1), v181, *(float32x4_t *)v19[2].f32, 2), v187, *(float32x4_t *)v19[2].f32, 3);
          v71 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v185, COERCE_FLOAT(*(_OWORD *)v19[4].f32)), v183, v19[4], 1), v181, *(float32x4_t *)v19[4].f32, 2), v187, *(float32x4_t *)v19[4].f32, 3);
          v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v185, COERCE_FLOAT(*(_OWORD *)v19[6].f32)), v183, v19[6], 1), v181, *(float32x4_t *)v19[6].f32, 2), v187, *(float32x4_t *)v19[6].f32, 3);
          v73 = *(float32x4_t *)(v58 + 88);
          v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, COERCE_FLOAT(*(_OWORD *)(v58 + 56))), v70, *(float32x2_t *)(v58 + 56), 1), v71, *(float32x4_t *)(v58 + 56), 2), v72, *(float32x4_t *)(v58 + 56), 3);
          v75 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, COERCE_FLOAT(*(_OWORD *)(v58 + 72))), v70, *(float32x2_t *)(v58 + 72), 1), v71, *(float32x4_t *)(v58 + 72), 2), v72, *(float32x4_t *)(v58 + 72), 3);
          v199 = (int8x16_t)v70;
          v203 = (int8x16_t)v69;
          v195 = (int8x16_t)v71;
          *(float32x4_t *)v211 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, COERCE_FLOAT(*(_OWORD *)(v58 + 40))), v70, *(float32x2_t *)(v58 + 40), 1), v71, *(float32x4_t *)(v58 + 40), 2), v72, *(float32x4_t *)(v58 + 40), 3);
          *(float32x4_t *)&v211[16] = v74;
          v190 = v72;
          v212 = v75;
          v213 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, v73.f32[0]), v70, *(float32x2_t *)v73.f32, 1), v71, v73, 2), v72, v73, 3);
          v75.f32[0] = v25;
          sub_223A90988((float32x2_t **)(v58 + 360), (uint64_t)v211, (uint64_t)&v206, v24, *(float32x2_t *)v75.f32, *(float32x2_t *)v73.f32, *(float32x2_t *)v72.f32, *(float32x2_t *)v181.f32);
          if (v34 <= v208
            && v33 <= v209
            && v32 <= v210
            && v29 >= *(float *)&v206
            && v30 >= *((float *)&v206 + 1)
            && v31 >= v207)
          {
            v78 = **(float32x2_t ***)&v193;
            v79 = *(float32x2_t **)(*(_QWORD *)&v193 + 8);
            if (**(float32x2_t ***)&v193 != v79)
              break;
          }
LABEL_76:
          v58 += 464;
          ++v59;
          if (v58 == v57)
            goto LABEL_110;
        }
        v80 = 0;
        v81 = *(float32x2_t *)(v58 + 16);
        v76.i32[0] = *(_DWORD *)(v58 + 24);
        *(float32x2_t *)v82.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v203.i8, v81.f32[0]), *(float32x2_t *)v199.i8, v81, 1), *(float32x2_t *)v195.i8, v76.f32[0]);
        v83 = (float32x2_t)vextq_s8(v203, v203, 8uLL).u64[0];
        v84 = (float32x2_t)vextq_s8(v199, v199, 8uLL).u64[0];
        v85 = (float32x2_t)vextq_s8(v195, v195, 8uLL).u64[0];
        v86 = vmla_f32(vmla_lane_f32(vmul_f32(v83, v81), v84, v81, 1), v76, v85);
        *(float32x2_t *)&v82.u32[2] = v86;
        v21.i32[3] = v190.i32[3];
        v87 = (int8x16_t)vaddq_f32(v82, v190);
        v82.i64[0] = *(_QWORD *)(v58 + 28);
        v86.i32[0] = *(_DWORD *)(v58 + 36);
        *(float32x2_t *)v21.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v203.i8, v82.f32[0]), *(float32x2_t *)v199.i8, *(float32x2_t *)v82.f32, 1), *(float32x2_t *)v195.i8, v86.f32[0]);
        v88 = vmla_f32(vmla_lane_f32(vmul_f32(v83, *(float32x2_t *)v82.f32), v84, *(float32x2_t *)v82.f32, 1), v86, v85);
        v89.i64[0] = v21.i64[0];
        *(float32x2_t *)&v89.u32[2] = v88;
        v90 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.f32, 1);
        v91 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v87.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), *(float32x2_t *)v21.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL), v88);
        v92 = (float32x2_t)vzip1q_s32(*(int32x4_t *)v211, *(int32x4_t *)&v211[16]).u64[0];
        v93 = (float32x4_t)vtrn2q_s32(*(int32x4_t *)v211, *(int32x4_t *)&v211[16]);
        v94 = (float32x2_t)vzip2q_s32(*(int32x4_t *)v211, *(int32x4_t *)&v211[16]).u64[0];
        v95 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 0), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1), 0xCuLL).u64[0];
        v96 = vnegq_f32(v213);
        *(float32x2_t *)v96.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v92, v96.f32[0]), *(float32x2_t *)v93.f32, *(float32x2_t *)v213.f32, 1), v94, v213, 2);
        while (2)
        {
          v77.i32[0] = v78[1].i32[0];
          *(float32x2_t *)v93.f32 = *v78;
          v97 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.f32, *v78), v90, *v78, 1), *(float32x2_t *)v77.f32, v88), v91);
          if (v97.f32[0] <= v25 && v97.f32[0] >= v24)
          {
            v99 = fabsf(v97.f32[0]);
            v100 = v218;
            v101 = v218[v80];
            if (v99 <= v101 || (float)(v99 - v101) <= 0.000001)
            {
              v93.i32[2] = v78[1].i32[0];
              *(float32x2_t *)v77.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v92, v93.f32[0]), v95, *(float32x2_t *)v93.f32, 1), v94, v93, 2);
              v77 = vaddq_f32(v96, v77);
              if (v59 < 0x20)
              {
                __asm { FMOV            V21.2S, #20.0 }
                *(int32x2_t *)v77.f32 = vcvt_s32_f32(vrndm_f32(vmul_f32(vsub_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)(v20 + 8 * v59)), _D21)));
                if (v77.i32[0] <= 0xC7u && (v77.i32[1] & 0x80000000) == 0 && v77.i32[1] <= 199)
                {
                  v108 = vmul_s32(*(int32x2_t *)(a1 + 48), *(int32x2_t *)v77.f32);
                  *(int32x2_t *)v77.f32 = vadd_s32(vdup_lane_s32(v108, 1), v108);
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 32) + v77.u32[0]) & (1 << v59)) != 0)
                    goto LABEL_108;
                }
              }
              else
              {
                v103 = *(float **)(v58 + 392);
                v104 = *(float **)(v58 + 400);
                if (v103 != v104)
                {
                  while (v77.f32[0] < *v103 || v77.f32[0] > v103[2] || v77.f32[1] < v103[1] || v77.f32[1] > v103[3])
                  {
                    v103 += 4;
                    if (v103 == v104)
                      goto LABEL_86;
                  }
LABEL_108:
                  v93 = vmlsq_lane_f32(v93, v89, v97, 0);
                  v109 = (char *)v214 + 12 * v80;
                  *((_DWORD *)v109 + 2) = v93.i32[2];
                  *(_QWORD *)v109 = v93.i64[0];
                  v110 = *(_QWORD *)(*(_QWORD *)&v193 + 72);
                  if (v110 != *(_QWORD *)(*(_QWORD *)&v193 + 80))
                  {
                    v111 = v110 + 12 * v80;
                    *(_QWORD *)v111 = v21.i64[0];
                    *(_DWORD *)(v111 + 8) = v88.i32[0];
                  }
                  v100[v80] = v99;
                }
              }
            }
          }
LABEL_86:
          v78 = (float32x2_t *)((char *)v78 + 12);
          ++v80;
          if (v78 == v79)
            goto LABEL_76;
          continue;
        }
      }
LABEL_110:
      v112 = **(uint64_t ***)&v193;
      **(_QWORD **)&v193 = v214;
      *(_QWORD *)(*(_QWORD *)&v193 + 8) = v215;
      v114 = *(_QWORD *)(*(_QWORD *)&v193 + 16);
      v113 = *(_QWORD *)(*(_QWORD *)&v193 + 24);
      *(_QWORD *)(*(_QWORD *)&v193 + 16) = v216;
      v214 = v112;
      *(_QWORD *)(*(_QWORD *)&v193 + 24) = v217;
      v216 = v114;
      v217 = v113;
      v115 = v170;
      if (v112)
      {
        v116 = HIDWORD(v113);
        v215 = v112;
        *(_QWORD *)v211 = v112;
        *(_DWORD *)&v211[8] = -1431655765 * ((unint64_t)(v114 - (_QWORD)v112) >> 2);
        if (v116 == 0xFFFFFFFF)
          sub_22316DD70();
LABEL_148:
        v206 = v211;
        ((void (*)(_BYTE **, unint64_t *))off_24EC5E6F0[v116])(&v206, &v217);
      }
LABEL_149:
      if (v218)
        operator delete(v218);
      v18 = v115 - 0x5555555555555555 * (v169 >> 2);
      v17 += 15;
    }
    while (v17 != v168);
  }
  kdebug_trace();
  return kdebug_trace();
}

void sub_223A904A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_2231874DC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_223A90518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  uint64_t v64;
  uint64_t v66;
  void *v67;
  int v68;
  uint64_t v69;

  v66 = *(_QWORD *)(v64 - 216);
  if (v66)
  {
    *(_QWORD *)(v64 - 208) = v66;
    v68 = -1431655765 * ((unint64_t)(*(_QWORD *)(v64 - 200) - v66) >> 2);
    a63 = v66;
    a64 = v68;
    v69 = *(unsigned int *)(v64 - 188);
    if ((_DWORD)v69 == -1)
      sub_22316DD70();
    a60 = &a63;
    ((void (*)(uint64_t **, uint64_t))off_24EC5E6F0[v69])(&a60, a18);
  }
  v67 = *(void **)(v64 - 184);
  if (v67)
  {
    operator delete(v67);
    sub_2231874DC((uint64_t)&a55);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x223A905BCLL);
}

void sub_223A905A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a64;
  uint64_t v64;
  uint64_t v66;
  void *v67;
  int v68;
  uint64_t v69;

  v66 = *(_QWORD *)(v64 - 216);
  if (v66)
  {
    *(_QWORD *)(v64 - 208) = v66;
    v68 = -1431655765 * ((unint64_t)(*(_QWORD *)(v64 - 200) - v66) >> 2);
    a63 = v66;
    a64 = v68;
    v69 = *(unsigned int *)(v64 - 188);
    if ((_DWORD)v69 == -1)
      sub_22316DD70();
    a60 = &a63;
    ((void (*)(uint64_t **, uint64_t))off_24EC5E6F0[v69])(&a60, a18);
  }
  v67 = *(void **)(v64 - 184);
  if (v67)
    operator delete(v67);
  sub_2231874DC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t sub_223A9062C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  kdebug_trace();
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (!*(_BYTE *)(v4 + 384)
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Primitives/src/PlaneSnapperImpl.cpp", 146, (uint64_t)"plane.convexHullExtent", 22, (uint64_t)"Plane convex hull representation is missing.", 44, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v4 += 464;
    }
    while (v4 != v5);
  }
  if (a1 != a2)
    sub_223331ABC(a1, *a2, a2[1], 0x34F72C234F72C235 * ((a2[1] - *a2) >> 4));
  return kdebug_trace();
}

void sub_223A90758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231874DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223A90774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231874DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223A90788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2231874DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float32x2_t **sub_223A9079C@<X0>(float32x2_t **result@<X0>, uint64_t a2@<X8>, int8x16_t a3@<Q0>, float32x4_t a4@<Q1>, int8x16_t a5@<Q3>, int8x16_t a6@<Q5>, float32x4_t a7@<Q7>)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t *v13;
  int32x2_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x2_t v17;
  float32x2_t *v18;
  float32x2_t *v19;
  float32x4_t v20;
  int8x16_t v21;
  float v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *result;
  v10 = result[1];
  if (*result != v10)
  {
    v11 = *result;
    while (1)
    {
      v12 = v11[2];
      v13 = **(float32x2_t ***)&v12;
      if (**(_QWORD **)&v12 != *(_QWORD *)(*(_QWORD *)&v12 + 8))
        break;
      v11 += 15;
      if (v11 == v10)
      {
        v14 = 0;
        a3.i32[0] = 0;
        goto LABEL_10;
      }
    }
    if (v11[12].i8[0])
    {
      a4.i32[0] = v11[5].i32[0];
      a5.i32[0] = v11[7].i32[0];
      a6.i32[0] = v11[9].i32[0];
      a7.i32[0] = v13[1].i32[0];
      *(float32x2_t *)v15.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v11[4], COERCE_FLOAT(*v13)), v11[6], *v13, 1), v11[8], a7.f32[0]);
      *(float32x2_t *)&v15.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.f32, *v13), *(float32x2_t *)a5.i8, *v13, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a6.i8);
      *(float32x2_t *)a4.f32 = v11[10];
      a4.i32[2] = v11[11].i32[0];
      a3 = (int8x16_t)vaddq_f32(v15, a4);
    }
    else
    {
      *(float32x2_t *)a3.i8 = *v13;
      a3.i32[2] = v13[1].i32[0];
    }
    *(_DWORD *)(a2 + 8) = a3.i32[2];
    *(_DWORD *)(a2 + 20) = a3.i32[2];
    *(_QWORD *)a2 = a3.i64[0];
    *(_QWORD *)(a2 + 12) = a3.i64[0];
    v14.i32[1] = a3.i32[1];
    v14.i32[0] = vextq_s8(a3, a3, 8uLL).u32[0];
LABEL_10:
    *(int32x2_t *)v16.i8 = vrev64_s32(v14);
    v16.i64[1] = __PAIR64__(v16.u32[0], a3.u32[0]);
    do
    {
      v17 = v9[2];
      v18 = **(float32x2_t ***)&v17;
      v19 = *(float32x2_t **)(*(_QWORD *)&v17 + 8);
      if (v18 != v19)
      {
        if (v9[12].i8[0])
        {
          do
          {
            a6.i32[0] = v9[5].i32[0];
            a7.i32[0] = v9[7].i32[0];
            v7.i32[0] = v9[9].i32[0];
            v8.i32[0] = v18[1].i32[0];
            *(float32x2_t *)v20.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v9[4], COERCE_FLOAT(*v18)), v9[6], *v18, 1), v9[8], v8.f32[0]);
            *(float32x2_t *)a6.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.i8, *v18), *(float32x2_t *)a7.f32, *v18, 1), v8, v7);
            v20.i64[1] = a6.i64[0];
            a5.i32[2] = v9[11].i32[0];
            *(float32x2_t *)a5.i8 = v9[10];
            v21 = (int8x16_t)vaddq_f32((float32x4_t)a5, v20);
            if (*(float *)v21.i32 < *(float *)a3.i32)
              a3.i32[0] = v21.i32[0];
            v22 = *(float *)&v21.i32[2];
            v23 = vextq_s8(vextq_s8(v21, v21, 0xCuLL), v21, 8uLL);
            v24.i64[0] = v23.i64[0];
            v24.i64[1] = v16.i64[1];
            a7.i64[1] = v23.i64[1];
            a7.i64[0] = v16.i64[0];
            v16 = vbslq_s8((int8x16_t)vcgtq_f32(a7, v24), v23, v16);
            if (*(float *)v14.i32 < v22)
              *(float *)v14.i32 = v22;
            v18 = (float32x2_t *)((char *)v18 + 12);
          }
          while (v18 != v19);
        }
        else
        {
          do
          {
            if (COERCE_FLOAT(*v18) < *(float *)a3.i32)
              a3.i32[0] = (__int32)*v18;
            a5.i32[2] = v18[1].i32[0];
            *(float32x2_t *)a5.i8 = *v18;
            a5 = vextq_s8(vextq_s8(a5, a5, 0xCuLL), a5, 8uLL);
            v25.i64[0] = a5.i64[0];
            v25.i64[1] = v16.i64[1];
            v26.i64[1] = a5.i64[1];
            v26.i64[0] = v16.i64[0];
            a6 = (int8x16_t)vcgtq_f32(v26, v25);
            v16 = vbslq_s8(a6, a5, v16);
            if (*(float *)v14.i32 < v18[1].f32[0])
              v14.i32[0] = v18[1].i32[0];
            v18 = (float32x2_t *)((char *)v18 + 12);
          }
          while (v18 != v19);
        }
        *(_DWORD *)a2 = a3.i32[0];
        *(int8x16_t *)(a2 + 4) = v16;
        *(_DWORD *)(a2 + 20) = v14.i32[0];
      }
      v9 += 15;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t (***sub_223A90988@<X0>(float32x2_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float32x2_t a5@<D1>, float32x2_t a6@<D3>, float32x2_t a7@<D5>, float32x2_t a8@<D7>))()
{
  float32x2_t *v11;
  float32x2_t *v12;
  uint64_t (***v13)();
  uint64_t (***v14)();
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  uint64_t (***v18)();
  uint64_t (***v19)();
  int8x16_t v20;
  float32x2_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x8_t v24;
  float32x2_t v25;
  int8x16_t v26;
  __int128 v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  float32x2_t *v35;
  float32x2_t *v36;
  uint64_t (***v37)();
  uint64_t (***v38)();
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  uint64_t (***v43)();
  uint64_t (***v44)();
  float32x4_t v45;
  float32x4_t v46;
  float32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (***result)();
  uint64_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int8x8_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  __int32 v68;
  float v69;
  _BYTE v70[12];
  float32x2_t *v71;
  uint64_t (**v72)();
  __int128 v73;
  uint64_t (***v74)();
  float32x2_t *v75;
  uint64_t (**v76)();
  __int128 v77;
  uint64_t (***v78)();
  float32x2_t *v79;
  uint64_t (**v80)();
  __int128 v81;
  uint64_t (***v82)();
  float32x2_t *v83;
  uint64_t (**v84)();
  __int128 v85;
  uint64_t (***v86)();
  float32x2_t *v87;
  uint64_t (**v88)();
  __int128 v89;
  uint64_t (***v90)();
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v68 = a5.i32[0];
  v69 = a4;
  v12 = a1[1];
  v71 = *a1;
  v11 = v71;
  v72 = &off_24EC5E720;
  *(_QWORD *)&v73 = a2;
  *((_QWORD *)&v73 + 1) = &v69;
  v74 = &v72;
  v75 = v12;
  v13 = &v76;
  v76 = &off_24EC5E720;
  *(_QWORD *)&v77 = a2;
  *((_QWORD *)&v77 + 1) = &v69;
  v78 = &v76;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (v11 == v12)
  {
    v66.i64[0] = 0;
    v30 = 4;
    v65.i64[0] = 0;
    v67.i64[0] = 0;
    goto LABEL_25;
  }
  v14 = &v88;
  v90 = &v88;
  v87 = v11;
  v88 = &off_24EC5E720;
  v15.i32[3] = HIDWORD(v73);
  v89 = v73;
  a5.i32[0] = **((_DWORD **)&v73 + 1);
  a6.i32[0] = *(_DWORD *)(v73 + 8);
  a7.i32[0] = *(_DWORD *)(v73 + 24);
  a8.i32[0] = *(_DWORD *)(v73 + 40);
  *(float32x2_t *)v16.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v73, COERCE_FLOAT(*v11)), *(float32x2_t *)(v73 + 16), *v11, 1), *(float32x2_t *)(v73 + 32), **((float **)&v73 + 1));
  *(float32x2_t *)&v16.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a6, *v11), a7, *v11, 1), a5, a8);
  v15.i64[0] = *(_QWORD *)(v73 + 48);
  v15.i32[2] = *(_DWORD *)(v73 + 56);
  v17 = (int8x16_t)vaddq_f32(v16, v15);
  *(_DWORD *)(a3 + 20) = v17.i32[2];
  *(_QWORD *)(a3 + 12) = v17.i64[0];
  *(_DWORD *)(a3 + 8) = v17.i32[2];
  *(_QWORD *)a3 = v17.i64[0];
  v18 = &v84;
  v83 = v11;
  v84 = &off_24EC5E720;
  v85 = v73;
  v86 = &v84;
  v87 = v11 + 1;
  v19 = &v80;
  v82 = &v80;
  v79 = v12;
  v80 = &off_24EC5E720;
  v81 = v77;
  v20 = vextq_s8(v17, v17, 8uLL);
  v20.i32[1] = v17.i32[0];
  v65 = v20;
  v66 = v17;
  v67 = vextq_s8(v17, v17, 4uLL);
  do
  {
    if (!v86)
      sub_223198474();
    ((void (*)(_BYTE *__return_ptr))(*v86)[6])(v70);
    v23.i64[1] = v65.i64[1];
    v26.i64[1] = v66.i64[1];
    v24 = (int8x8_t)vrev64_s32(*(int32x2_t *)v70);
    v25 = (float32x2_t)__PAIR64__(v24.u32[1], v65.u32[0]);
    *(int8x8_t *)v26.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v66.i8, *(float32x2_t *)v70), *(int8x8_t *)v70, *(int8x8_t *)v66.i8);
    v24.i32[0] = *(_DWORD *)&v70[8];
    *(int8x8_t *)v23.i8 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v24.u32[1], v65.u32[0]), (float32x2_t)__PAIR64__(v65.u32[1], *(unsigned int *)&v70[8])), v24, *(int8x8_t *)v65.i8);
    v65 = v23;
    v66 = v26;
    *(_QWORD *)&v27 = v26.i64[0];
    *((_QWORD *)&v27 + 1) = v23.i64[0];
    *(_OWORD *)a3 = v27;
    v28.i64[1] = v67.i64[1];
    *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&v70[4], *(float32x2_t *)v67.i8), *(int8x8_t *)&v70[4], *(int8x8_t *)v67.i8);
    v67 = v28;
    *(_QWORD *)(a3 + 16) = v28.i64[0];
    ++v83;
  }
  while (v83 != v79);
  if (v82 == &v80)
  {
    v29 = 4;
  }
  else
  {
    if (!v82)
      goto LABEL_11;
    v29 = 5;
    v19 = v82;
  }
  ((void (*)(uint64_t (***)()))(*v19)[v29])(v19);
LABEL_11:
  if (v86 == &v84)
  {
    v31 = 4;
  }
  else
  {
    if (!v86)
      goto LABEL_16;
    v31 = 5;
    v18 = v86;
  }
  ((void (*)(uint64_t (***)()))(*v18)[v31])(v18);
LABEL_16:
  if (v90 == &v88)
  {
    v32 = 4;
  }
  else
  {
    if (!v90)
      goto LABEL_21;
    v32 = 5;
    v14 = v90;
  }
  ((void (*)(uint64_t (***)()))(*v14)[v32])(v14);
LABEL_21:
  if (v78 == &v76)
  {
    v30 = 4;
  }
  else
  {
    if (!v78)
      goto LABEL_26;
    v30 = 5;
    v13 = v78;
  }
LABEL_25:
  ((void (*)(uint64_t (***)()))(*v13)[v30])(v13);
LABEL_26:
  v33 = v74;
  if (v74 == &v72)
  {
    v34 = 4;
    v33 = &v72;
  }
  else
  {
    if (!v74)
      goto LABEL_31;
    v34 = 5;
  }
  (*v33)[v34]();
LABEL_31:
  v35 = *a1;
  v36 = a1[1];
  v71 = v35;
  v72 = &off_24EC5E7A0;
  *(_QWORD *)&v73 = a2;
  *((_QWORD *)&v73 + 1) = &v68;
  v74 = &v72;
  v75 = v36;
  v37 = &v76;
  v76 = &off_24EC5E7A0;
  *(_QWORD *)&v77 = a2;
  *((_QWORD *)&v77 + 1) = &v68;
  v78 = &v76;
  if (v35 == v36)
  {
    v62.i64[0] = 0;
    v64.i32[0] = 0;
    v52 = 4;
    v63.i32[0] = 0;
    v47 = 0;
    goto LABEL_59;
  }
  v38 = &v88;
  v90 = &v88;
  v87 = v35;
  v88 = &off_24EC5E7A0;
  v89 = v73;
  v39 = *v35;
  v28.i32[0] = **((_DWORD **)&v73 + 1);
  v40 = *(float32x2_t *)v73;
  v25.i32[0] = *(_DWORD *)(v73 + 8);
  v41 = *(float32x2_t *)(v73 + 16);
  v26.i32[0] = *(_DWORD *)(v73 + 24);
  v42 = *(float32x2_t *)(v73 + 32);
  v21.i32[0] = *(_DWORD *)(v73 + 40);
  v22.i64[0] = *(_QWORD *)(v73 + 48);
  v22.i32[2] = *(_DWORD *)(v73 + 56);
  v43 = &v84;
  v83 = v35;
  v84 = &off_24EC5E7A0;
  v85 = v73;
  v86 = &v84;
  v87 = v35 + 1;
  v44 = &v80;
  v82 = &v80;
  v79 = v36;
  v80 = &off_24EC5E7A0;
  v81 = v77;
  *(float32x2_t *)v45.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v40, v39.f32[0]), v41, v39, 1), v42, *(float *)v28.i32);
  *(float32x2_t *)&v45.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v25, v39), *(float32x2_t *)v26.i8, v39, 1), *(float32x2_t *)v28.i8, v21);
  v46 = vaddq_f32(v45, v22);
  v45.i32[0] = v46.i32[2];
  v62 = v46;
  v63 = v45;
  v64 = v45;
  v47 = *(float32x2_t *)v46.f32;
  do
  {
    if (!v86)
      sub_223198474();
    ((void (*)(_BYTE *__return_ptr))(*v86)[6])(v70);
    v49.i64[1] = v62.i64[1];
    v48 = v63;
    if (*(float *)&v70[8] < v63.f32[0])
      v48.f32[0] = *(float *)&v70[8];
    v63 = v48;
    v47 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v47, *(float32x2_t *)v70), *(int8x8_t *)v70, (int8x8_t)v47);
    *(int8x8_t *)v49.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v70, *(float32x2_t *)v62.f32), *(int8x8_t *)v70, *(int8x8_t *)v62.f32);
    v62 = v49;
    v50 = v64;
    if (v64.f32[0] < *(float *)&v70[8])
      v50.f32[0] = *(float *)&v70[8];
    v64 = v50;
    ++v83;
  }
  while (v83 != v79);
  if (v82 == &v80)
  {
    v51 = 4;
  }
  else
  {
    if (!v82)
      goto LABEL_45;
    v51 = 5;
    v44 = v82;
  }
  ((void (*)(uint64_t (***)()))(*v44)[v51])(v44);
LABEL_45:
  if (v86 == &v84)
  {
    v53 = 4;
  }
  else
  {
    if (!v86)
      goto LABEL_50;
    v53 = 5;
    v43 = v86;
  }
  ((void (*)(uint64_t (***)()))(*v43)[v53])(v43);
LABEL_50:
  if (v90 == &v88)
  {
    v54 = 4;
  }
  else
  {
    if (!v90)
      goto LABEL_55;
    v54 = 5;
    v38 = v90;
  }
  ((void (*)(uint64_t (***)()))(*v38)[v54])(v38);
LABEL_55:
  if (v78 == &v76)
  {
    v52 = 4;
  }
  else
  {
    if (!v78)
      goto LABEL_60;
    v52 = 5;
    v37 = v78;
  }
LABEL_59:
  ((void (*)(uint64_t (***)()))(*v37)[v52])(v37);
LABEL_60:
  result = v74;
  if (v74 == &v72)
  {
    v56 = 4;
    result = &v72;
    goto LABEL_64;
  }
  if (v74)
  {
    v56 = 5;
LABEL_64:
    result = (uint64_t (***)())(*result)[v56]();
  }
  v57 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v66.i8, v47), (int8x8_t)v47, *(int8x8_t *)v66.i8);
  v58 = (float32x2_t)vrev64_s32((int32x2_t)v47);
  v59 = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v58.u32[1], v65.u32[0]), (float32x2_t)__PAIR64__(v65.u32[1], v63.u32[0])), (int8x8_t)__PAIR64__(v58.u32[1], v63.u32[0]), *(int8x8_t *)v65.i8);
  v60 = (float32x2_t)vrev64_s32(*(int32x2_t *)v62.f32);
  *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgt_f32(v57, *(float32x2_t *)v62.f32), *(int8x8_t *)v62.f32, (int8x8_t)v57);
  *(int8x8_t *)(a3 + 8) = vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)__PAIR64__(v60.u32[1], v59.u32[0]), (float32x2_t)__PAIR64__(v59.u32[1], v64.u32[0])), (int8x8_t)__PAIR64__(v60.u32[1], v64.u32[0]), v59);
  v58.i32[1] = v63.i32[0];
  v61 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v58, *(float32x2_t *)v67.i8), (int8x8_t)v58, *(int8x8_t *)v67.i8);
  v60.i32[1] = v64.i32[0];
  *(int8x8_t *)(a3 + 16) = vbsl_s8((int8x8_t)vcgt_f32(v60, v61), (int8x8_t)v60, (int8x8_t)v61);
  return result;
}

void sub_223A90FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  if (a39 == v41)
  {
    v44 = 4;
  }
  else
  {
    if (!a39)
      goto LABEL_6;
    v44 = 5;
    v41 = a39;
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v44))(v41);
LABEL_6:
  v45 = *(_QWORD **)(v42 - 152);
  if (v45 == v40)
  {
    v46 = 4;
  }
  else
  {
    if (!v45)
      goto LABEL_11;
    v46 = 5;
    v40 = *(_QWORD **)(v42 - 152);
  }
  (*(void (**)(_QWORD *))(*v40 + 8 * v46))(v40);
LABEL_11:
  v47 = *(_QWORD **)(v42 - 112);
  if (v47 == v39)
  {
    v48 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_16;
    v48 = 5;
    v39 = *(_QWORD **)(v42 - 112);
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v48))(v39);
LABEL_16:
  sub_2236CE728(&a25);
  _Unwind_Resume(a1);
}

void sub_223A91050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39)
{
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;

  if (a39 == v41)
  {
    v44 = 4;
  }
  else
  {
    if (!a39)
      goto LABEL_6;
    v44 = 5;
    v41 = a39;
  }
  (*(void (**)(_QWORD *))(*v41 + 8 * v44))(v41);
LABEL_6:
  v45 = *(_QWORD **)(v42 - 152);
  if (v45 == v40)
  {
    v46 = 4;
  }
  else
  {
    if (!v45)
      goto LABEL_11;
    v46 = 5;
    v40 = *(_QWORD **)(v42 - 152);
  }
  (*(void (**)(_QWORD *))(*v40 + 8 * v46))(v40);
LABEL_11:
  v47 = *(_QWORD **)(v42 - 112);
  if (v47 == v39)
  {
    v48 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_16;
    v48 = 5;
    v39 = *(_QWORD **)(v42 - 112);
  }
  (*(void (**)(_QWORD *))(*v39 + 8 * v48))(v39);
LABEL_16:
  sub_2236CE728(&a25);
  _Unwind_Resume(a1);
}

void sub_223A910FC()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223A91110(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC5E720;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223A91148(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC5E720;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t sub_223A91168@<Q0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, double a5@<D1>, float32x2_t a6@<D3>, float32x2_t a7@<D5>, float32x2_t a8@<D7>)
{
  float32x2_t *v8;
  float32x4_t v9;
  float32x4_t result;

  v8 = *(float32x2_t **)(a1 + 8);
  LODWORD(a5) = **(_DWORD **)(a1 + 16);
  a6.i32[0] = v8[1].i32[0];
  a7.i32[0] = v8[3].i32[0];
  a8.i32[0] = v8[5].i32[0];
  *(float32x2_t *)v9.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v8, COERCE_FLOAT(*a2)), v8[2], *a2, 1), v8[4], *(float *)&a5);
  *(float32x2_t *)&v9.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a6, *a2), a7, *a2, 1), *(float32x2_t *)&a5, a8);
  *(float32x2_t *)a4.f32 = v8[6];
  a4.i32[2] = v8[7].i32[0];
  result = vaddq_f32(v9, a4);
  *(_DWORD *)(a3 + 8) = result.i32[2];
  *(_QWORD *)a3 = result.i64[0];
  return result;
}

uint64_t sub_223A911C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3cva15SE3Gro"
                     "upStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3"
                                "cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A91234()
{
  return &unk_24EC5E780;
}

void sub_223A91244()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223A91258(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC5E7A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223A91290(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC5E7A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t sub_223A912B0@<Q0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, double a5@<D1>, float32x2_t a6@<D3>, float32x2_t a7@<D5>, float32x2_t a8@<D7>)
{
  float32x2_t *v8;
  float32x4_t v9;
  float32x4_t result;

  v8 = *(float32x2_t **)(a1 + 8);
  LODWORD(a5) = **(_DWORD **)(a1 + 16);
  a6.i32[0] = v8[1].i32[0];
  a7.i32[0] = v8[3].i32[0];
  a8.i32[0] = v8[5].i32[0];
  *(float32x2_t *)v9.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v8, COERCE_FLOAT(*a2)), v8[2], *a2, 1), v8[4], *(float *)&a5);
  *(float32x2_t *)&v9.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(a6, *a2), a7, *a2, 1), *(float32x2_t *)&a5, a8);
  *(float32x2_t *)a4.f32 = v8[6];
  a4.i32[2] = v8[7].i32[0];
  result = vaddq_f32(v9, a4);
  *(_DWORD *)(a3 + 8) = result.i32[2];
  *(_QWORD *)a3 = result.i64[0];
  return result;
}

uint64_t sub_223A91310(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3cva15SE3Gro"
                     "upStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3"
                                "cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d5recon10primitives22ExtrudedConvexHullAABBERKNS_3acv8geometry10ConvexHullIfEERKN3cva15SE3GroupStorageIfNS8_6MatrixIfLj4ELj4ELb1EEEEEffE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223A9137C()
{
  return &unk_24EC5E800;
}

uint64_t sub_223A91388(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void **v10;

  *(_QWORD *)a1 = &off_24EC5E988;
  sub_223198030(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_223198030(a1 + 176, *(_QWORD **)(a1 + 184));
  v10 = (void **)(a1 + 152);
  sub_223A91EF0(&v10);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 136);
    v4 = *(void **)(a1 + 128);
    if (v3 != v2)
    {
      do
        v3 = sub_223A91FA4(v3 - 168);
      while (v3 != v2);
      v4 = *(void **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(_QWORD *)(a1 + 104) = v5;
    operator delete(v5);
  }
  sub_223A2FFC8(a1 + 48);
  v6 = *(_QWORD **)(a1 + 24);
  if (v6)
  {
    do
    {
      v7 = (_QWORD *)*v6;
      operator delete(v6);
      v6 = v7;
    }
    while (v7);
  }
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

void sub_223A9145C(uint64_t a1)
{
  sub_223A91388(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223A91480(uint64_t a1, unsigned int a2, __int16 a3, uint64_t a4, char a5, float a6)
{
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  sub_223A9219C(a1, a2, a3, 32, a4, a5, &v9, a6);
  v7 = v9;
  v9 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  *(_QWORD *)a1 = &off_24EC5E830;
  *(_QWORD *)(a1 + 8) = &unk_24EC5E880;
  *(_QWORD *)(a1 + 16) = &unk_24EC5E8B0;
  if (*(_BYTE *)(a1 + 250) == 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/BlockTable.cpp", 40, (uint64_t)"neighbor_cache_type_ != NeighborCache::Fifteen", 46, (uint64_t)"Invalid cache type", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_223A91538(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_223A91570(v1);
  _Unwind_Resume(a1);
}

void sub_223A9154C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 56))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223A91570(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  *a1 = &off_24EC5E9B0;
  a1[1] = &unk_24EC5EA00;
  a1[2] = &unk_24EC5EA30;
  v2 = (uint64_t)(a1 + 2);
  v3 = a1[43];
  a1[43] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = (_QWORD *)a1[39];
  if (v4)
  {
    do
    {
      v7 = (_QWORD *)*v4;
      v8 = (_QWORD *)v4[5];
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)*v8;
          operator delete(v8);
          v8 = v9;
        }
        while (v9);
      }
      v10 = (void *)v4[3];
      v4[3] = 0;
      if (v10)
        operator delete(v10);
      operator delete(v4);
      v4 = v7;
    }
    while (v7);
  }
  v5 = (void *)a1[37];
  a1[37] = 0;
  if (v5)
    operator delete(v5);
  sub_223A307DC((uint64_t)(a1 + 32));
  sub_223A91388(v2);
  return a1;
}

_QWORD *sub_223A91640(uint64_t a1)
{
  return sub_223A91570((_QWORD *)(a1 - 8));
}

_QWORD *sub_223A91648(uint64_t a1)
{
  return sub_223A91570((_QWORD *)(a1 - 16));
}

void sub_223A91650(_QWORD *a1)
{
  sub_223A91570(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A91674(uint64_t a1)
{
  sub_223A91570((_QWORD *)(a1 - 8));
  JUMPOUT(0x227684CE8);
}

void sub_223A9169C(uint64_t a1)
{
  sub_223A91570((_QWORD *)(a1 - 16));
  JUMPOUT(0x227684CE8);
}

void sub_223A916C4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD **)(a1 + 24);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    *(_QWORD *)(a1 + 24) = 0;
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  v6 = *(void ***)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 88) = 0;
  v8 = v7 - (_QWORD)v6;
  if (v8 >= 0x11)
  {
    do
    {
      operator delete(*v6);
      v9 = *(_QWORD *)(a1 + 64);
      v6 = (void **)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v6;
      v8 = v9 - (_QWORD)v6;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    v10 = 15;
    goto LABEL_14;
  }
  if (v8 >> 3 == 2)
  {
    v10 = 31;
LABEL_14:
    *(_QWORD *)(a1 + 80) = v10;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  sub_223A95DD0((uint64_t *)(a1 + 128));
  sub_223198030(a1 + 176, *(_QWORD **)(a1 + 184));
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 184) = 0;
  v12 = *(_QWORD **)(a1 + 208);
  v11 = (_QWORD *)(a1 + 208);
  *(v11 - 2) = 0;
  sub_223198030((uint64_t)(v11 - 1), v12);
  *(v11 - 1) = v11;
  *v11 = 0;
  v11[1] = 0;
}

void sub_223A917C0(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, unsigned int **a6@<X8>)
{
  uint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unsigned int *v28;
  uint64_t v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  _OWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int **v56;
  _QWORD *v57;
  _QWORD *v58;
  char *__p;
  char *v61;
  char *v62;
  __int128 v63;

  v7 = a1;
  if (a5)
    (***(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, float))(a1 + 344))(*(_QWORD *)(a1 + 344), a4, a4 + 64, a1, *(float *)(a4 + 160));
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  v9 = a2[2];
  v56 = a6;
  if (!v9)
  {
    v11 = 0;
    __p = 0;
    v61 = 0;
    v62 = 0;
    v12 = (_QWORD *)*a2;
    v13 = 0;
    v58 = a2 + 1;
    if ((_QWORD *)*a2 == a2 + 1)
      goto LABEL_64;
    goto LABEL_9;
  }
  if (v9 >> 62)
    sub_22316E078();
  v10 = (char *)operator new(4 * v9);
  *a6 = (unsigned int *)v10;
  a6[1] = (unsigned int *)v10;
  a6[2] = (unsigned int *)&v10[4 * v9];
  if (v9 > 0x1555555555555555)
    sub_22316E078();
  v11 = (char *)operator new(12 * v9);
  __p = v11;
  v61 = v11;
  v62 = &v11[12 * v9];
  v12 = (_QWORD *)*a2;
  v13 = v11;
  v58 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
LABEL_9:
    v54 = v7 + 16;
    v55 = v7;
    v57 = (_QWORD *)(v7 + 24);
    while (1)
    {
      v14 = (_QWORD *)((char *)v12 + 28);
      v15 = *(_QWORD *)((char *)v12 + 28);
      LODWORD(v63) = a3;
      *(_QWORD *)((char *)&v63 + 4) = v15;
      HIDWORD(v63) = *((_DWORD *)v12 + 9);
      v16 = sub_22351A45C(v57, (int *)&v63);
      if (v16)
      {
        v17 = *((_DWORD *)v16 + 8);
      }
      else
      {
        if (*(_QWORD *)(v7 + 48) == *(_DWORD *)(v7 + 136))
        {
          v18 = 0;
          v17 = -1;
          v20 = a6[1];
          v19 = (unint64_t)a6[2];
          if ((unint64_t)v20 < v19)
            goto LABEL_27;
          goto LABEL_15;
        }
        v17 = sub_223A95018(v54, (uint64_t)v12 + 28, a3);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v7 + 72) + 8 * ((*(_QWORD *)(v7 + 96) + (unint64_t)v17) / 0x1F))
          + 132 * ((*(_QWORD *)(v7 + 96) + (unint64_t)v17) % 0x1F);
      v20 = a6[1];
      v19 = (unint64_t)a6[2];
      if ((unint64_t)v20 < v19)
      {
LABEL_27:
        *v20 = v17;
        a6[1] = v20 + 1;
        if (!v18)
          goto LABEL_28;
        goto LABEL_40;
      }
LABEL_15:
      v21 = *a6;
      v22 = (char *)v20 - (char *)*a6;
      v23 = v22 >> 2;
      v24 = (v22 >> 2) + 1;
      if (v24 >> 62)
        sub_22316E078();
      v25 = v19 - (_QWORD)v21;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (!v26)
      {
        v27 = 0;
        v28 = (unsigned int *)(4 * v23);
        *(_DWORD *)(4 * v23) = v17;
        v29 = 4 * v23 + 4;
        v30 = (char *)v20 - (char *)v21;
        if (v20 == v21)
          goto LABEL_37;
LABEL_31:
        v32 = v30 - 4;
        if (v32 < 0x2C)
          goto LABEL_78;
        if ((unint64_t)((char *)v20 - v27 - v22) < 0x20)
          goto LABEL_78;
        v33 = (v32 >> 2) + 1;
        v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
        v35 = &v20[v34 / 0xFFFFFFFFFFFFFFFCLL];
        v28 = (unsigned int *)((char *)v28 - v34);
        v36 = &v27[4 * v23 - 16];
        v37 = v20 - 4;
        v38 = v33 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v39 = *(_OWORD *)v37;
          *(v36 - 1) = *((_OWORD *)v37 - 1);
          *v36 = v39;
          v36 -= 2;
          v37 -= 8;
          v38 -= 8;
        }
        while (v38);
        v20 = v35;
        if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_78:
          do
          {
            v40 = *--v20;
            *--v28 = v40;
          }
          while (v20 != v21);
        }
        goto LABEL_37;
      }
      if (v26 >> 62)
        goto LABEL_70;
      v27 = operator new(4 * v26);
      v28 = (unsigned int *)&v27[4 * v23];
      *v28 = v17;
      v29 = (uint64_t)(v28 + 1);
      v30 = (char *)v20 - (char *)v21;
      if (v20 != v21)
        goto LABEL_31;
LABEL_37:
      a6 = v56;
      *v56 = v28;
      v56[1] = (unsigned int *)v29;
      v56[2] = (unsigned int *)&v27[4 * v26];
      if (v21)
        operator delete(v21);
      v7 = v55;
      v56[1] = (unsigned int *)v29;
      if (!v18)
      {
LABEL_28:
        v31 = (_QWORD *)v12[1];
        if (v31)
          goto LABEL_58;
        goto LABEL_60;
      }
LABEL_40:
      v41 = v61;
      if (v61 >= v62)
      {
        v44 = 0xAAAAAAAAAAAAAAABLL * ((v61 - __p) >> 2) + 1;
        if (v44 > 0x1555555555555555)
          sub_22316E078();
        if (0x5555555555555556 * ((v62 - __p) >> 2) > v44)
          v44 = 0x5555555555555556 * ((v62 - __p) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v62 - __p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v45 = 0x1555555555555555;
        else
          v45 = v44;
        if (v45)
        {
          if (v45 > 0x1555555555555555)
LABEL_70:
            sub_223174E94();
          v46 = (char *)operator new(12 * v45);
        }
        else
        {
          v46 = 0;
        }
        v47 = *v14;
        v48 = &v46[4 * ((v61 - __p) >> 2)];
        *((_DWORD *)v48 + 2) = *((_DWORD *)v12 + 9);
        *(_QWORD *)v48 = v47;
        v49 = v48;
        if (v61 != __p)
        {
          do
          {
            v50 = *(_QWORD *)(v41 - 12);
            v41 -= 12;
            v51 = *((_DWORD *)v41 + 2);
            *(_QWORD *)(v49 - 12) = v50;
            v49 -= 12;
            *((_DWORD *)v49 + 2) = v51;
          }
          while (v41 != __p);
          v41 = __p;
        }
        v43 = v48 + 12;
        __p = v49;
        v62 = &v46[12 * v45];
        v7 = v55;
        a6 = v56;
        if (v41)
          operator delete(v41);
      }
      else
      {
        v42 = *v14;
        *((_DWORD *)v61 + 2) = *((_DWORD *)v12 + 9);
        *(_QWORD *)v61 = v42;
        v43 = v61 + 12;
      }
      v61 = v43;
      v31 = (_QWORD *)v12[1];
      if (v31)
      {
        do
        {
LABEL_58:
          v52 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
        goto LABEL_10;
      }
      do
      {
LABEL_60:
        v52 = (_QWORD *)v12[2];
        v53 = *v52 == (_QWORD)v12;
        v12 = v52;
      }
      while (!v53);
LABEL_10:
      v12 = v52;
      if (v52 == v58)
      {
        v13 = __p;
        v11 = v61;
        break;
      }
    }
  }
LABEL_64:
  *(_QWORD *)&v63 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v13) >> 2);
  *((_QWORD *)&v63 + 1) = v13;
  if (v11
    && !v13
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v7 + 344) + 64))(*(_QWORD *)(v7 + 344), &v63);
  if (__p)
    operator delete(__p);
}

void sub_223A91CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = *(void **)a12;
    if (!*(_QWORD *)a12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = *(void **)a12;
    if (!*(_QWORD *)a12)
      goto LABEL_3;
  }
  *(_QWORD *)(a12 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A91D40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 16))(*(_QWORD *)(a1 + 344));
}

uint64_t sub_223A91D50(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 24))(*(_QWORD *)(a1 + 344));
}

uint64_t *sub_223A91D60(uint64_t a1)
{
  uint64_t *result;
  uint64_t *v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  sub_223A916C4(a1 + 16);
  sub_223CF61B8((_QWORD *)(a1 + 256));
  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 344) + 40))(*(_QWORD *)(a1 + 344));
  v4 = (uint64_t **)(a1 + 200);
  v3 = *(uint64_t **)(a1 + 200);
  v5 = a1 + 8;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = v3[4];
        if (v7 <= v5)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(a1 + 200);
LABEL_8:
    v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = v5;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = (uint64_t)v6;
    *v4 = v8;
    v9 = **(_QWORD **)(a1 + 192);
    if (v9)
    {
      *(_QWORD *)(a1 + 192) = v9;
      v10 = *v4;
    }
    else
    {
      v10 = v8;
    }
    result = sub_2231A9A8C(*(uint64_t **)(a1 + 200), v10);
    ++*(_QWORD *)(a1 + 208);
  }
  return result;
}

uint64_t *sub_223A91E30(uint64_t a1, int *a2, int a3, int a4)
{
  return sub_223CF2F60((uint64_t *)(a1 + 256), a2, a3, a4);
}

void sub_223A91E38(uint64_t a1, int *a2, int a3)
{
  sub_223CF3F8C(a1 + 256, a2, a3);
}

uint64_t *sub_223A91E40(uint64_t a1, int *a2, int a3, int a4)
{
  return sub_223CF2F60((uint64_t *)(a1 + 248), a2, a3, a4);
}

void sub_223A91E48(uint64_t a1, int *a2, int a3)
{
  sub_223CF3F8C(a1 + 248, a2, a3);
}

uint64_t *sub_223A91E50(uint64_t a1)
{
  return sub_223A91D60(a1 - 16);
}

uint64_t sub_223A91E58(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void **v6;

  v6 = (void **)(a1 + 24);
  sub_223A91EF0(&v6);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(void **)a1;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_223A91FA4(v3 - 168);
      while ((void *)v3 != v2);
      v4 = *(void **)a1;
    }
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223A91ECC(uint64_t a1)
{
  sub_223A91388(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223A91EF0(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 48;
      do
      {
        v8 = *(void **)(v6 + 24);
        if (v8)
        {
          *(_QWORD *)(v6 + 32) = v8;
          operator delete(v8);
        }
        sub_223198030(v6, *(_QWORD **)(v6 + 8));
        v9 = *(void **)(v6 - 24);
        if (v9)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v10 = *(void **)(v6 - 48);
        if (v10)
        {
          *(_QWORD *)(v6 - 40) = v10;
          operator delete(v10);
        }
        v7 = v6 - 56;
        v6 -= 104;
      }
      while ((void *)v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_223A91FA4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 104);
  if (v3)
  {
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(_QWORD *)(a1 + 88) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD **)(a1 + 56);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 64);
    v7 = *(void **)(a1 + 56);
    if (v6 != v5)
    {
      do
        v6 = sub_223A92044(v6 - 28);
      while (v6 != v5);
      v7 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v5;
    operator delete(v7);
  }
  sub_223198030(a1 + 32, *(_QWORD **)(a1 + 40));
  sub_223198030(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

_QWORD *sub_223A92044(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)a1[27];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[25];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[25];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[23];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (char *)a1[7];
    if (!v11)
      return a1;
  }
  else
  {
LABEL_15:
    v11 = (char *)a1[7];
    if (!v11)
      return a1;
  }
  v12 = (char *)a1[8];
  v13 = v11;
  if (v12 != v11)
  {
    do
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)v12 - 4);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v12 -= 64;
    }
    while (v12 != v11);
    v13 = (char *)a1[7];
  }
  a1[8] = v11;
  operator delete(v13);
  return a1;
}

uint64_t sub_223A9219C(uint64_t a1, unsigned int a2, __int16 a3, __int16 a4, uint64_t a5, char a6, uint64_t *a7, float a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[29];
  char v16;

  sub_223A92700((uint64_t)v15, a2, a3, a8, a5, a6);
  v15[0] = &off_24EC5E8D8;
  if (v16 == 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/include_private/Reconstruction/PointCloudMapper/BlockTable.h", 47, (uint64_t)"neighbor_cache_type_ != NeighborCache::Fifteen", 46, (uint64_t)"Invalid cache type", 18, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v11 = *a7;
  *a7 = 0;
  v14 = v11;
  sub_223A922B8(a1, (uint64_t)v15, a4, &v14);
  v12 = v14;
  v14 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 56))(v12);
  sub_223A91388((uint64_t)v15);
  return a1;
}

void sub_223A92278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
    sub_223A91388((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_223A91388((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223A922B8(uint64_t a1, uint64_t a2, __int16 a3, uint64_t *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v31;
  __int16 v32;
  uint64_t v33;

  *(_QWORD *)a1 = off_24EC63A38;
  *(_QWORD *)(a1 + 8) = off_24EC63A88;
  v7 = a1 + 8;
  *(_QWORD *)(a1 + 16) = &off_24EC5E988;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v10;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(a1 + 32);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(v8 + 8 * v11) = a1 + 40;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 176);
  v13 = (_QWORD *)(a2 + 184);
  v14 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = v14;
  v15 = (uint64_t **)(a1 + 200);
  v16 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = v16;
  if (v16)
  {
    *(_QWORD *)(v14 + 16) = v15;
    *(_QWORD *)(a2 + 176) = v13;
    *v13 = 0;
    *(_QWORD *)(a2 + 192) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 192) = v15;
  }
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 200);
  v17 = (_QWORD *)(a2 + 208);
  v18 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = v18;
  v19 = a1 + 224;
  v20 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = v20;
  if (v20)
  {
    *(_QWORD *)(v18 + 16) = v19;
    *(_QWORD *)(a2 + 200) = v17;
    *v17 = 0;
    *(_QWORD *)(a2 + 216) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v19;
  }
  v21 = *(_QWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 247) = *(_DWORD *)(a2 + 231);
  *(_QWORD *)(a1 + 240) = v21;
  *(_QWORD *)a1 = &off_24EC5E9B0;
  *(_QWORD *)(a1 + 8) = &unk_24EC5EA00;
  *(_QWORD *)(a1 + 16) = &unk_24EC5EA30;
  *(_WORD *)(a1 + 252) = a3;
  sub_223A305D4(a1 + 256, a3);
  *(_QWORD *)(a1 + 344) = 0;
  v22 = *(unsigned __int16 *)(a1 + 252);
  if ((v22 & (v22 - 1)) != 0)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockStore.h", 253, (uint64_t)"math::IsPowerOfTwo(chunk_size_)", 31, (uint64_t)"Invalid chunk size", 18, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_34;
    }
    v22 = *(unsigned __int16 *)(a1 + 252);
  }
  if (*(unsigned __int16 *)(a1 + 248) >= v22
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockStore.h", 254, (uint64_t)"Base::BlockSize() < chunk_size_", 31, (uint64_t)"A block must be smaller than a chunk", 36, (void (*)(void **))sub_22457406C))
  {
LABEL_34:
    abort();
  }
  v23 = *a4;
  if (*a4)
  {
    *a4 = 0;
    v24 = *(_QWORD *)(a1 + 344);
    *(_QWORD *)(a1 + 344) = v23;
    if (!v24)
      goto LABEL_21;
    goto LABEL_20;
  }
  v31 = *(_DWORD *)(a1 + 240);
  v32 = *(_WORD *)(a1 + 248);
  v33 = operator new();
  *(_QWORD *)v33 = off_24EC5EA58;
  *(_DWORD *)(v33 + 8) = 1062207488;
  *(_DWORD *)(v33 + 12) = v31;
  *(_WORD *)(v33 + 16) = v32;
  *(_WORD *)(v33 + 18) = a3;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 24) = v33 + 32;
  *(_QWORD *)(v33 + 56) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 48) = v33 + 56;
  *(_QWORD *)(v33 + 80) = 0;
  *(_QWORD *)(v33 + 64) = 0;
  *(_QWORD *)(v33 + 72) = v33 + 80;
  *(_QWORD *)(v33 + 112) = 0;
  *(_QWORD *)(v33 + 104) = 0;
  *(_QWORD *)(v33 + 88) = 0;
  *(_QWORD *)(v33 + 96) = v33 + 104;
  *(_QWORD *)(v33 + 120) = 0xFFFFFFFF00000000;
  v24 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v33;
  if (v24)
LABEL_20:
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
LABEL_21:
  v25 = *v15;
  v26 = (uint64_t **)(a1 + 200);
  if (*v15)
  {
    while (1)
    {
      while (1)
      {
        v26 = (uint64_t **)v25;
        v27 = v25[4];
        if (v27 <= v7)
          break;
        v25 = *v26;
        v15 = v26;
        if (!*v26)
          goto LABEL_28;
      }
      if (v27 >= v7)
        break;
      v25 = v26[1];
      if (!v25)
      {
        v15 = v26 + 1;
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    v28 = (uint64_t *)operator new(0x28uLL);
    v28[4] = v7;
    *v28 = 0;
    v28[1] = 0;
    v28[2] = (uint64_t)v26;
    *v15 = v28;
    v29 = **(_QWORD **)(a1 + 192);
    if (v29)
    {
      *(_QWORD *)(a1 + 192) = v29;
      v28 = *v15;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 200), v28);
    ++*(_QWORD *)(a1 + 208);
  }
  return a1;
}

void sub_223A926B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 344);
  *(_QWORD *)(v1 + 344) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  sub_223A306D4(v3);
  sub_223A91388(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_223A92700(uint64_t a1, unsigned int a2, __int16 a3, float a4, uint64_t a5, char a6)
{
  uint64_t v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t prime;
  int8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  size_t v34;
  const char *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  size_t v48;
  std::__shared_weak_count_vtbl *v49;
  std::__shared_weak_count *v50;
  size_t v51;
  size_t v52;
  _QWORD *v53;
  void *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  const char *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *__src;
  int v111;
  char *__s;
  unint64_t v113;
  _QWORD v114[3];
  int v115;
  const char *v116;
  int v117;
  const char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  void *__dst[2];
  int64_t v122;
  void *v123[2];
  _QWORD v124[3];
  const void *v125;
  uint64_t v126;
  const void *v127;
  unint64_t v128;
  void *__p;
  char v130;
  unint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  char *v137;
  std::__shared_weak_count *v138;
  _QWORD *v139;
  __int128 v140;
  _BYTE v141[24];
  __int128 v142;
  void *v143[2];
  unint64_t v144;
  char v145;
  _QWORD v146[5];

  v146[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  v11 = a1 + 8;
  *(_QWORD *)a1 = &off_24EC5E988;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v12 = (float)a2;
  v13 = (float)((float)a2 * 0.8125);
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 128) = 0u;
  v14 = a1 + 152;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  sub_223A95AF8(a1 + 128, v13);
  sub_223A95C00(v14, v13);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(float *)(a1 + 224) = a4;
  *(float *)(a1 + 228) = 1.0 / a4;
  *(_WORD *)(a1 + 232) = a3;
  *(_BYTE *)(a1 + 234) = a6;
  prime = vcvtps_u32_f32(v12 / *(float *)(a1 + 40));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v16 = *(int8x8_t *)(a1 + 16);
  if (prime > *(_QWORD *)&v16)
    goto LABEL_6;
  if (prime < *(_QWORD *)&v16)
  {
    v17 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
    if (*(_QWORD *)&v16 < 3uLL || (v18 = (uint8x8_t)vcnt_s8(v16), v18.i16[0] = vaddlv_u8(v18), v18.u32[0] > 1uLL))
    {
      v17 = std::__next_prime(v17);
    }
    else
    {
      v19 = 1 << -(char)__clz(v17 - 1);
      if (v17 >= 2)
        v17 = v19;
    }
    if (prime <= v17)
      prime = v17;
    if (prime < *(_QWORD *)&v16)
LABEL_6:
      sub_2231B0668(v11, prime);
  }
  if (*(_QWORD *)(a1 + 16) == a2)
    goto LABEL_22;
  v20 = atomic_load((unsigned __int8 *)&qword_2540CCCE8);
  if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_2540CCCE8))
  {
    sub_22455F53C(v141);
    sub_223174DE4(v123, "cv3d.recon.block");
    sub_2232300E0((uint64_t **)v141, (uint64_t)v123, &qword_2540CCCE0);
    if (SHIBYTE(v124[0]) < 0)
      operator delete(v123[0]);
    __cxa_guard_release(&qword_2540CCCE8);
  }
  v134 = qword_2540CCCE0;
  if (**(int **)(qword_2540CCCE0 + 56) > 4
    || (v21 = *(unsigned __int8 *)(qword_2540CCCE0 + 72),
        v22 = sub_22322F254(qword_2540CCCE0, "OSLogSurrogateAppender", 1, 0),
        v23 = v22,
        !v21)
    && !v22)
  {
LABEL_22:
    if ((*(_WORD *)(a1 + 232) & (unsigned __int16)(*(_WORD *)(a1 + 232) - 1)) == 0)
      return a1;
    goto LABEL_23;
  }
  sub_223195210((uint64_t)v123);
  sub_2231813E8(v124, (uint64_t)"Result bucket count not the same as requested: ", 47);
  v25 = (_QWORD *)std::ostream::operator<<();
  sub_2231813E8(v25, (uint64_t)" / ", 3);
  std::ostream::operator<<();
  v113 = v23;
  v111 = v21;
  if ((v132 & 0x10) != 0)
  {
    v28 = v131;
    if (v131 < v128)
    {
      v131 = v128;
      v28 = v128;
    }
    v29 = v127;
    v26 = v28 - (_QWORD)v127;
    if (v28 - (unint64_t)v127 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_82;
  }
  else
  {
    if ((v132 & 8) == 0)
    {
      v26 = 0;
      HIBYTE(v122) = 0;
      v27 = __dst;
      goto LABEL_38;
    }
    v29 = v125;
    v26 = v126 - (_QWORD)v125;
    if ((unint64_t)(v126 - (_QWORD)v125) > 0x7FFFFFFFFFFFFFF7)
LABEL_82:
      sub_22316DBC0();
  }
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v27 = (void **)operator new(v30 + 1);
    __dst[1] = (void *)v26;
    v122 = v31 | 0x8000000000000000;
    __dst[0] = v27;
    goto LABEL_37;
  }
  HIBYTE(v122) = v26;
  v27 = __dst;
  if (v26)
LABEL_37:
    memmove(v27, v29, v26);
LABEL_38:
  *((_BYTE *)v27 + v26) = 0;
  v114[0] = &v134;
  v114[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v114[2] = std::chrono::system_clock::now().__d_.__rep_;
  v115 = 4;
  v116 = "unknown file";
  v117 = 447;
  v119 = 0;
  v120 = 0;
  v118 = "unknown function";
  v32 = __dst;
  if (v122 < 0)
    v32 = (void **)__dst[0];
  __s = (char *)v32;
  v33 = *(_QWORD *)v114[0];
  if (*(char *)(*(_QWORD *)v114[0] + 39) < 0)
  {
    v35 = *(const char **)(v33 + 16);
    v34 = *(_QWORD *)(v33 + 24);
    v108 = *(_QWORD *)v114[0];
    v109 = *(_QWORD *)v114[0] + 16;
    v37 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v37 & 1) != 0)
      goto LABEL_44;
  }
  else
  {
    v34 = *(unsigned __int8 *)(*(_QWORD *)v114[0] + 39);
    v35 = (const char *)(*(_QWORD *)v114[0] + 16);
    v108 = *(_QWORD *)v114[0];
    v109 = (uint64_t)v35;
    v36 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v36 & 1) != 0)
      goto LABEL_44;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)v141);
    sub_223199C58("com.apple.cv3d", (unint64_t)v141, &xmmword_255788F40);
    if ((_BYTE)v142 && (v141[23] & 0x80000000) != 0)
      operator delete(*(void **)v141);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_44:
  if (byte_255788F57 >= 0)
    v38 = (const char *)&xmmword_255788F40;
  else
    v38 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v39 = byte_255788F57;
  else
    v39 = *((_QWORD *)&xmmword_255788F40 + 1);
  __src = v35;
  *(_QWORD *)v141 = os_log_create(v38, v35);
  v40 = &v141[8];
  if (v39 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v39 >= 0x17)
  {
    v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v41 = v39 | 7;
    v42 = v41 + 1;
    v40 = operator new(v41 + 1);
    *(_QWORD *)&v141[16] = v39;
    *(_QWORD *)&v142 = v42 | 0x8000000000000000;
    *(_QWORD *)&v141[8] = v40;
    goto LABEL_57;
  }
  BYTE7(v142) = v39;
  if (v39)
LABEL_57:
    memmove(v40, v38, v39);
  v40[v39] = 0;
  BYTE8(v142) = 1;
  v43 = v143;
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v34 >= 0x17)
  {
    v45 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v45 = v34 | 7;
    v46 = v45 + 1;
    v43 = (void **)operator new(v45 + 1);
    v143[1] = (void *)v34;
    v144 = v46 | 0x8000000000000000;
    v143[0] = v43;
    v44 = v113;
    goto LABEL_65;
  }
  HIBYTE(v144) = v34;
  v44 = v113;
  if (v34)
LABEL_65:
    memmove(v43, __src, v34);
  *((_BYTE *)v43 + v34) = 0;
  v145 = 1;
  v47 = *(NSObject **)v141;
  if (SHIBYTE(v144) < 0)
    operator delete(v143[0]);
  if (BYTE8(v142) && SBYTE7(v142) < 0)
    operator delete(*(void **)&v141[8]);
  if (*(_QWORD *)v141)
    os_release(*(void **)v141);
  if (v44 && *(_QWORD *)(v44 + 24))
  {
    v48 = _os_log_pack_size();
    v49 = (std::__shared_weak_count_vtbl *)operator new(v48, (std::align_val_t)8uLL);
    v50 = (std::__shared_weak_count *)operator new();
    v50->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
    v50->__shared_owners_ = 0;
    v50->__shared_weak_owners_ = 0;
    v50[1].__vftable = v49;
    *(_QWORD *)&v135 = v49;
    *((_QWORD *)&v135 + 1) = v49;
    v137 = 0;
    v138 = 0;
    v136 = v50;
    v51 = strlen(__s);
    if (v51 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v52 = v51;
    if (v51 >= 0x17)
    {
      v56 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v56 = v51 | 7;
      v57 = v56 + 1;
      v53 = operator new(v56 + 1);
      *(_QWORD *)&v140 = v52;
      *((_QWORD *)&v140 + 1) = v57 | 0x8000000000000000;
      v139 = v53;
    }
    else
    {
      HIBYTE(v140) = v51;
      v53 = &v139;
      if (!v51)
      {
LABEL_87:
        *((_BYTE *)v53 + v52) = 0;
        v58 = v139;
        v146[0] = v140;
        *(_QWORD *)((char *)v146 + 7) = *(_QWORD *)((char *)&v140 + 7);
        v59 = HIBYTE(v140);
        v60 = operator new(0x38uLL);
        v60[1] = 0;
        v60[2] = 0;
        v60[3] = off_24EC1FA48;
        *v60 = &off_24EC1F9F8;
        v61 = v146[0];
        v60[4] = v58;
        v60[5] = v61;
        *(_QWORD *)((char *)v60 + 47) = *(_QWORD *)((char *)v146 + 7);
        *((_BYTE *)v60 + 55) = v59;
        v146[0] = 0;
        *(_QWORD *)((char *)v146 + 7) = 0;
        v62 = v138;
        v137 = (char *)(v60 + 3);
        v138 = (std::__shared_weak_count *)v60;
        if (v62)
        {
          p_shared_owners = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldaxr(p_shared_owners);
          while (__stlxr(v64 - 1, p_shared_owners));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        *(_OWORD *)v141 = v135;
        v65 = v137;
        *(_QWORD *)&v141[16] = v136;
        if (v136)
        {
          v66 = (unint64_t *)&v136->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        v68 = v138;
        *(_QWORD *)&v142 = v65;
        *((_QWORD *)&v142 + 1) = v138;
        if (v138)
        {
          v69 = (unint64_t *)&v138->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
          v143[0] = v65;
          do
            v71 = __ldaxr(v69);
          while (__stlxr(v71 - 1, v69));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        else
        {
          v143[0] = v65;
        }
        v72 = v136;
        if (v136)
        {
          v73 = (unint64_t *)&v136->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        v75 = *(_QWORD *)v141;
        if (*((char *)v143[0] + 31) >= 0)
          v76 = (char *)v143[0] + 8;
        else
          v76 = (char *)*((_QWORD *)v143[0] + 1);
        v77 = _os_log_pack_fill();
        *(_DWORD *)v77 = 136315138;
        *(_QWORD *)(v77 + 4) = v76;
        v78 = operator new();
        v79 = *(unsigned __int8 *)(v108 + 39);
        v80 = *(_QWORD *)(v108 + 16);
        v81 = *(_QWORD *)(v108 + 24);
        v82 = v142;
        *(_OWORD *)(v78 + 8) = *(_OWORD *)&v141[8];
        if ((v79 & 0x80u) != 0)
          v79 = v81;
        else
          v80 = v109;
        *(_QWORD *)v78 = v75;
        *(_QWORD *)&v141[8] = 0;
        *(_QWORD *)&v141[16] = 0;
        *(_OWORD *)(v78 + 24) = v82;
        v142 = 0uLL;
        *(_QWORD *)(v78 + 40) = v80;
        *(_QWORD *)(v78 + 48) = v79;
        *(_BYTE *)(v78 + 56) = 16;
        v139 = 0;
        *(_QWORD *)&v135 = v78;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v113 + 24) + 40))(*(_QWORD *)(v113 + 24), &v135);
        v55 = v111;
        v83 = v135;
        *(_QWORD *)&v135 = 0;
        if (v83)
        {
          v84 = *(std::__shared_weak_count **)(v83 + 32);
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v87 = *(std::__shared_weak_count **)(v83 + 16);
          if (v87)
          {
            v88 = (unint64_t *)&v87->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          MEMORY[0x227684CE8](v83, 0x10F0C40B62ED6C6);
          v90 = v139;
          v139 = 0;
          if (v90)
          {
            v91 = (std::__shared_weak_count *)v90[4];
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v94 = (std::__shared_weak_count *)v90[2];
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            MEMORY[0x227684CE8](v90, 0x10F0C40B62ED6C6);
          }
        }
        v97 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
        if (*((_QWORD *)&v142 + 1))
        {
          v98 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        v100 = *(std::__shared_weak_count **)&v141[16];
        if (*(_QWORD *)&v141[16])
        {
          v101 = (unint64_t *)(*(_QWORD *)&v141[16] + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        goto LABEL_147;
      }
    }
    memcpy(v53, __s, v52);
    goto LABEL_87;
  }
  os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
  *(_DWORD *)v141 = 136315138;
  *(_QWORD *)&v141[4] = __s;
  v54 = (void *)_os_log_send_and_compose_impl();
  v55 = v111;
  if (v54)
    free(v54);
LABEL_147:
  if (v55)
  {
    v103 = (const char *)__dst;
    if (v122 < 0)
      v103 = (const char *)__dst[0];
    sub_22322C138((uint64_t)v114, "%s", v103);
    sub_223182C08((uint64_t)v114);
  }
  sub_223182C08((uint64_t)v114);
  v104 = v120;
  if (v120)
  {
    v105 = (unint64_t *)&v120->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  if (SHIBYTE(v122) < 0)
    operator delete(__dst[0]);
  v123[0] = *(void **)MEMORY[0x24BEDB7F0];
  v107 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(void **)((char *)v123 + *((_QWORD *)v123[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v124[0] = v107;
  v124[1] = MEMORY[0x24BEDB848] + 16;
  if (v130 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&v133);
  if ((*(_WORD *)(a1 + 232) & (unsigned __int16)(*(_WORD *)(a1 + 232) - 1)) != 0)
  {
LABEL_23:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 450, (uint64_t)"math::IsPowerOfTwo(block_size_)", 31, (uint64_t)"Invalid block size", 18, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  return a1;
}

void sub_223A933E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36)
{
  uint64_t v36;
  _QWORD **v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD **v40;
  uint64_t v41;
  void *v43;

  if (*(_BYTE *)(v41 - 184) && *(char *)(v41 - 185) < 0)
    operator delete(*(void **)(v41 - 208));
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a21);
  if (a35 < 0)
    operator delete(__p);
  sub_223195348((uint64_t)&a36);
  sub_223198030(a19, *v37);
  sub_223198030(v39, *v40);
  sub_223A91E58(v38);
  v43 = *(void **)(v36 + 96);
  if (v43)
  {
    *(_QWORD *)(v36 + 104) = v43;
    operator delete(v43);
  }
  sub_223A2FFC8(a20);
  sub_22322E828(a16);
  _Unwind_Resume(a1);
}

void sub_223A935EC(_QWORD *a1)
{
  sub_223A91570(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A93610(uint64_t a1)
{
  return sub_223A91570((_QWORD *)(a1 - 8));
}

void sub_223A93618(uint64_t a1)
{
  sub_223A91570((_QWORD *)(a1 - 8));
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223A93640(uint64_t a1)
{
  return sub_223A91570((_QWORD *)(a1 - 16));
}

void sub_223A93648(uint64_t a1)
{
  sub_223A91570((_QWORD *)(a1 - 16));
  JUMPOUT(0x227684CE8);
}

float sub_223A93670(uint64_t a1, uint64_t a2, uint32x2_t *a3, uint64_t a4, float a5, double a6, float32x4_t a7, double a8, float32x4_t a9, float32x4_t a10, float32x2_t a11)
{
  uint64_t v12;
  unsigned int v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float result;
  float32x2_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unsigned int v30;
  unint64_t v31;
  _QWORD **v32;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  _QWORD *v47;
  _QWORD *v48;
  BOOL v49;
  uint64_t v50;
  uint64_t j;
  uint64_t v52;
  uint64_t i;
  _QWORD **v54;
  _QWORD *v55;
  void *v56;
  uint64_t **v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD **v66;
  int v67[3];
  int8x8_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  void *__p;
  _QWORD **v73;

  v12 = a1;
  v13 = *(_DWORD *)(a1 + 124);
  if (v13 == -1)
  {
    *(uint32x2_t *)a7.f32 = a3[4];
    v14 = (float32x2_t)a3[5];
    *(float32x2_t *)a9.f32 = vadd_f32(vmul_f32(*(float32x2_t *)a7.f32, 0), v14);
    v15 = vmulq_n_f32(a9, a5);
    *(float32x2_t *)a7.f32 = vadd_f32(v14, vmul_f32(*(float32x2_t *)a7.f32, vcvt_f32_u32(a3[11])));
    v16 = vmulq_n_f32(a7, a5);
    a7.i16[0] = *(_WORD *)(a1 + 16);
    v17 = 1.0 / (float)(*(float *)(a1 + 12) * (float)a7.u32[0]);
    v16.i64[0] = vsubq_f32(v16, v15).u64[0];
    v13 = 2 * (float)(v17 * ceilf(v16.f32[1])) * (float)(v17 * ceilf(v16.f32[0]));
    *(_DWORD *)(a1 + 124) = v13;
  }
  v18 = *(_DWORD *)(a4 + 136);
  v19 = v18 >= v13;
  v20 = v18 - v13;
  if (v19)
    v21 = v20;
  else
    v21 = 0;
  v22 = *(_QWORD *)(a4 + 48);
  v63 = v21;
  if (v22 > v21)
    goto LABEL_11;
  v23 = *(_QWORD *)(a4 + 32);
  if (v23)
  {
    result = (float)v22 / (float)v23;
    if (result <= *(float *)(a1 + 8))
      return result;
    goto LABEL_11;
  }
  result = 0.0;
  if (*(float *)(a1 + 8) < 0.0)
  {
LABEL_11:
    v25.i32[0] = *(_DWORD *)(a2 + 8);
    a10.i64[0] = *(_QWORD *)(a2 + 48);
    a10.i32[2] = *(_DWORD *)(a2 + 56);
    a11.i32[0] = *(_DWORD *)(a2 + 40);
    v26 = (int8x16_t)vnegq_f32(a10);
    v25.i32[1] = *(_DWORD *)(a2 + 24);
    *(float32x2_t *)v27.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a2, *(int32x2_t *)(a2 + 16)), *(float *)v26.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)a2, *(int32x2_t *)(a2 + 16)), *(float32x2_t *)a10.f32, 1), v25, a10, 2);
    *(float32x2_t *)&v27.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a2 + 32), *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a2 + 32), 1), *(float32x2_t *)a10.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), a11);
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    v29 = vmlaq_n_f32(v28, v27, 1.0 / *(float *)(a1 + 12));
    v30 = -*(unsigned __int16 *)(a1 + 18);
    v62 = (_QWORD *)(a1 + 48);
    v57 = (uint64_t **)(a1 + 24);
    v59 = (_QWORD *)(a1 + 72);
    v58 = (_QWORD *)(a1 + 96);
    v61 = (_QWORD *)(a4 + 256);
    v64 = a4 + 16;
    v68 = vand_s8((int8x8_t)vdup_n_s32(v30), (int8x8_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v29.f32)));
    v69 = vcvtms_s32_f32(v29.f32[2]) & v30;
    while (1)
    {
      if (v22 <= v63)
      {
        v31 = *(_QWORD *)(a4 + 32);
        if (v31)
        {
          result = (float)v22 / (float)v31;
          if (result <= *(float *)(v12 + 8))
            return result;
        }
        else
        {
          result = 0.0;
          if (*(float *)(v12 + 8) >= 0.0)
            return result;
        }
      }
      sub_223CF6450(v62, (int *)&v68, (uint64_t)v67);
      if (sub_223C033D8(v62, v67) == 1)
      {
        sub_223CF69A0(v59, v67);
        sub_223CF6ACC(v58, v67);
      }
      sub_223CF4AB4(v61, v67, (uint64_t *)&__p);
      v32 = v73;
      if (!v73)
        break;
      v33 = 0;
      do
      {
        v34 = v32[3];
        v66 = v32;
        v65 = v32 + 4;
        if (v34 != v32 + 4)
        {
          do
          {
            v35 = *((unsigned int *)v34 + 7);
            if (*(_QWORD *)(a4 + 104) <= v35)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 667, (uint64_t)"index < metadata_blocks_.size()", 31, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
              v36 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v52 = qword_255795648;
                for (i = qword_255795650; v52 != i; v52 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v52)(*(_QWORD *)(v52 + 8), "index < metadata_blocks_.size()", 31, "Out of range", 12);
              }
              v37 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
LABEL_72:
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "index < metadata_blocks_.size()", 31, "Out of range", 12);
            }
            v38 = *(_QWORD *)(a4 + 96) + v35;
            v39 = *(_QWORD *)(*(_QWORD *)(a4 + 72) + 8 * (v38 / 0x1F));
            v40 = v38 % 0x1F;
            if (*(_BYTE *)(v39 + 132 * v40 + 20))
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 668, (uint64_t)"!metadata_blocks_[index].IsErased()", 35, (uint64_t)"Cannot get an erased block", 26, (void (*)(void **))sub_22457406C);
              v41 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v50 = qword_255795648;
                for (j = qword_255795650; v50 != j; v50 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v50)(*(_QWORD *)(v50 + 8), "!metadata_blocks_[index].IsErased()", 35, "Cannot get an erased block", 26);
              }
              v42 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_72;
              qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[index].IsErased()", 35, "Cannot get an erased block", 26);
              v43 = *(_QWORD *)(a4 + 96) + v35;
              v40 = v43 % 0x1F;
              v39 = *(_QWORD *)(*(_QWORD *)(a4 + 72) + 8 * (v43 / 0x1F));
            }
            v44 = (uint64_t *)(v39 + 132 * v40);
            v45 = *v44;
            v71 = *((_DWORD *)v44 + 2);
            v70 = v45;
            v46 = sub_223A94280(v64, (uint64_t)&v70, *((_DWORD *)v66 + 4));
            v47 = (_QWORD *)v34[1];
            if (v47)
            {
              do
              {
                v48 = v47;
                v47 = (_QWORD *)*v47;
              }
              while (v47);
            }
            else
            {
              do
              {
                v48 = (_QWORD *)v34[2];
                v49 = *v48 == (_QWORD)v34;
                v34 = v48;
              }
              while (!v49);
            }
            v33 |= v46;
            v34 = v48;
          }
          while (v48 != v65);
        }
        v32 = (_QWORD **)*v66;
      }
      while (*v66);
      v54 = v73;
      if (v73)
      {
        v12 = a1;
        do
        {
          v55 = *v54;
          sub_223198030((uint64_t)(v54 + 3), v54[4]);
          operator delete(v54);
          v54 = (_QWORD **)v55;
        }
        while (v55);
LABEL_65:
        v56 = __p;
        __p = 0;
        if (!v56)
          goto LABEL_67;
LABEL_66:
        operator delete(v56);
        goto LABEL_67;
      }
      v12 = a1;
      v56 = __p;
      __p = 0;
      if (v56)
        goto LABEL_66;
LABEL_67:
      if ((v33 & 1) != 0)
        sub_22397FD34(v57, v67, (uint64_t)v67);
      ++*(_DWORD *)(v12 + 120);
      v22 = *(_QWORD *)(a4 + 48);
    }
    v33 = 0;
    goto LABEL_65;
  }
  return result;
}

void sub_223A93D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,_QWORD **a27)
{
  _QWORD **v28;
  _QWORD *v29;

  v28 = a27;
  if (a27)
  {
    do
    {
      v29 = *v28;
      sub_223198030((uint64_t)(v28 + 3), v28[4]);
      operator delete(v28);
      v28 = (_QWORD **)v29;
    }
    while (v29);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223A93DD0(char *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int8x8_t v13;
  int v14;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = result;
    v5 = (uint64_t **)(result + 48);
    v6 = (uint64_t **)(result + 72);
    v7 = (uint64_t **)(result + 96);
    do
    {
      v8 = -*((unsigned __int16 *)v4 + 9);
      v9 = *((_DWORD *)v3 + 9) & v8;
      v13 = vand_s8(*(int8x8_t *)((char *)v3 + 28), (int8x8_t)vdup_n_s32(v8));
      v14 = v9;
      sub_22397FD34(v5, (int *)&v13, (uint64_t)&v13);
      sub_223CF6738(v6, (int *)&v13, (uint64_t)&v13);
      result = sub_223CF686C(v7, (int *)&v13, (uint64_t)&v13);
      v10 = (_QWORD *)v3[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v3[2];
          v12 = *v11 == (_QWORD)v3;
          v3 = v11;
        }
        while (!v12);
      }
      v3 = v11;
    }
    while (v11 != v2);
  }
  return result;
}

_QWORD *sub_223A93EB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(a1 + 32);
  result = (_QWORD *)(a1 + 32);
  v3 = v4;
  *a2 = *(result - 1);
  v5 = result[1];
  a2[2] = v5;
  v6 = (_QWORD *)(v4 + 16);
  if (v5)
    v7 = v6;
  else
    v7 = a2;
  a2[1] = v3;
  *result = 0;
  result[1] = 0;
  *v7 = a2 + 1;
  *(result - 1) = result;
  return result;
}

uint64_t sub_223A93EE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

void sub_223A93EF0()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/ChunkRecycler.h", 242, (uint64_t)"", 0, (uint64_t)"Deprecated", 10, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_223A93F2C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD **v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;

  v16 = &v17;
  v17 = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = &v20;
  v22 = &v23;
  v23 = 0;
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = &v26;
  v3 = (_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(a1 + 32);
  v4 = (_QWORD *)(a1 + 24);
  v28 = 0xFFFFFFFF00000000;
  sub_223198030(a1 + 24, v2);
  v5 = v17;
  *(v3 - 1) = &v17;
  *v3 = v5;
  v6 = v18;
  v3[1] = v18;
  if (v6)
  {
    v5[2] = v3;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    *v4 = v3;
  }
  v7 = a1 + 56;
  sub_223198030(a1 + 48, *(_QWORD **)(a1 + 56));
  v8 = v20;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = v21;
  *(_QWORD *)(a1 + 64) = v21;
  if (v9)
  {
    v8[2] = v7;
    v19 = &v20;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v7;
  }
  v10 = a1 + 80;
  sub_223198030(a1 + 72, *(_QWORD **)(a1 + 80));
  v11 = v23;
  *(_QWORD *)(a1 + 72) = v22;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = v24;
  *(_QWORD *)(a1 + 88) = v24;
  if (v12)
  {
    v11[2] = v10;
    v22 = &v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v10;
  }
  v13 = a1 + 104;
  sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
  v14 = v26;
  *(_QWORD *)(a1 + 96) = v25;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = v27;
  *(_QWORD *)(a1 + 112) = v27;
  if (v15)
  {
    v14[2] = v13;
    v14 = 0;
    v25 = &v26;
    v26 = 0;
    v27 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v13;
  }
  *(_QWORD *)(a1 + 120) = v28;
  sub_223198030((uint64_t)&v25, v14);
  sub_223198030((uint64_t)&v22, v23);
  sub_223198030((uint64_t)&v19, v20);
  sub_223198030((uint64_t)&v16, v17);
}

uint64_t sub_223A940F8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC5EA58;
  v2 = a1 + 48;
  sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_223198030(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_223198030(v2, *(_QWORD **)(a1 + 56));
  sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
  return a1;
}

void sub_223A94158(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24EC5EA58;
  v2 = a1 + 48;
  sub_223198030(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_223198030(a1 + 72, *(_QWORD **)(a1 + 80));
  sub_223198030(v2, *(_QWORD **)(a1 + 56));
  sub_223198030(a1 + 24, *(_QWORD **)(a1 + 32));
  JUMPOUT(0x227684CE8);
}

char *sub_223A941C8(char *result, _QWORD *a2)
{
  char *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int8x8_t v10;
  int v11;

  if (*a2)
  {
    v2 = result;
    v3 = (uint64_t **)(result + 48);
    v4 = (uint64_t **)(result + 72);
    v5 = (uint64_t **)(result + 96);
    v6 = (_DWORD *)(a2[1] + 8);
    v7 = 12 * *a2;
    do
    {
      v8 = -*((unsigned __int16 *)v2 + 9);
      v9 = *v6 & v8;
      v10 = vand_s8(*(int8x8_t *)(v6 - 2), (int8x8_t)vdup_n_s32(v8));
      v11 = v9;
      sub_22397FD34(v3, (int *)&v10, (uint64_t)&v10);
      sub_223CF6738(v4, (int *)&v10, (uint64_t)&v10);
      result = sub_223CF686C(v5, (int *)&v10, (uint64_t)&v10);
      v6 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  return result;
}

BOOL sub_223A94280(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v47;
  unint64_t v48;
  unint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, const char *, uint64_t, const char *, uint64_t);
  unsigned __int8 v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  _DWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _DWORD *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _OWORD *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t *v94;
  void *v95;
  _QWORD *v97;
  _QWORD *v98;
  BOOL v99;
  _QWORD *v100;
  signed int v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t *v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE __p[12];
  int v110;

  v6 = (_QWORD *)(a1 + 8);
  *(_DWORD *)__p = a3;
  *(_QWORD *)&__p[4] = *(_QWORD *)a2;
  v110 = *(_DWORD *)(a2 + 8);
  v7 = sub_22351A45C((_QWORD *)(a1 + 8), (int *)__p);
  v8 = v7;
  if (v7)
  {
    v103 = a2;
    v104 = v7;
    v101 = a3;
    v100 = v6;
    v9 = *(_QWORD *)(a1 + 80) + *((unsigned int *)v7 + 8);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v9 / 0x1F));
    v11 = v9 % 0x1F;
    v102 = (_BYTE *)(v10 + 132 * (v9 % 0x1F) + 20);
    if (*v102
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 592, (uint64_t)"!metadata_block.IsErased()", 26, (uint64_t)"The block should not be in erased state", 39, (void (*)(void **))sub_22457406C))
    {
LABEL_137:
      abort();
    }
    if (*(_BYTE *)(a1 + 234))
    {
      v107 = v10 + 132 * v11 + 24;
      v12 = -1;
      do
      {
        v108 = v12 + 1;
        v105 = v12;
        v106 = 1 - v12;
        v13 = -1;
        do
        {
          v14 = v13 + 1;
          v15 = *(unsigned int *)(v107 + 4 * byte_22466F874[9 * v108 + 3 + 3 * v13]);
          if ((_DWORD)v15 != -1)
          {
            if (*(_QWORD *)(a1 + 88) <= v15)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
              v16 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v17 = qword_255795648;
                v18 = qword_255795650;
                while (v17 != v18)
                {
                  v20 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v17;
                  v19 = *(_QWORD *)(v17 + 8);
                  v17 += 16;
                  v20(v19, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
                }
              }
              v21 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_137;
              qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
            }
            v22 = *(_QWORD *)(a1 + 80) + v15;
            v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v22 / 0x1F));
            v24 = v22 % 0x1F;
            if (*(_BYTE *)(v23 + 132 * v24 + 20))
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
              v25 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v26 = qword_255795648;
                v27 = qword_255795650;
                while (v26 != v27)
                {
                  v29 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v26;
                  v28 = *(_QWORD *)(v26 + 8);
                  v26 += 16;
                  v29(v28, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
                }
              }
              v30 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_137;
              qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
              v31 = *(_QWORD *)(a1 + 80) + v15;
              v24 = v31 % 0x1F;
              v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v31 / 0x1F));
            }
            *(_DWORD *)(v23 + 132 * v24 + 4 * byte_22466F874[9 * v106 + 5 + -3 * v13] + 24) = -1;
          }
          if (v13 | v105)
          {
            v32 = *(unsigned int *)(v107 + 4 * byte_22466F874[9 * v108 + 1 + 3 * v14]);
            if ((_DWORD)v32 != -1)
            {
              if (*(_QWORD *)(a1 + 88) <= v32)
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
                v33 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v34 = qword_255795648;
                  v35 = qword_255795650;
                  while (v34 != v35)
                  {
                    v37 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v34;
                    v36 = *(_QWORD *)(v34 + 8);
                    v34 += 16;
                    v37(v36, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
                  }
                }
                v38 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_137;
                qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
              }
              v39 = *(_QWORD *)(a1 + 80) + v32;
              v40 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v39 / 0x1F));
              v41 = v39 % 0x1F;
              if (*(_BYTE *)(v40 + 132 * v41 + 20))
              {
                sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
                v42 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670 || byte_255795678)
                {
                  v43 = qword_255795648;
                  v44 = qword_255795650;
                  while (v43 != v44)
                  {
                    v46 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v43;
                    v45 = *(_QWORD *)(v43 + 8);
                    v43 += 16;
                    v46(v45, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
                  }
                }
                v47 = atomic_load((unsigned __int8 *)&qword_255795680);
                if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                {
                  __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                  __cxa_guard_release(&qword_255795680);
                }
                if (!byte_255795670)
                  goto LABEL_137;
                qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
                v48 = *(_QWORD *)(a1 + 80) + v32;
                v41 = v48 % 0x1F;
                v40 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v48 / 0x1F));
              }
              *(_DWORD *)(v40 + 132 * v41 + 4 * byte_22466F874[9 * v106 + 4 + -3 * v13] + 24) = -1;
            }
          }
          v49 = *(unsigned int *)(v107 + 4 * byte_22466F874[9 * v108 + 2 + 3 * v14]);
          if ((_DWORD)v49 != -1)
          {
            if (*(_QWORD *)(a1 + 88) <= v49)
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
              v50 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v51 = qword_255795648;
                v52 = qword_255795650;
                while (v51 != v52)
                {
                  v54 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v51;
                  v53 = *(_QWORD *)(v51 + 8);
                  v51 += 16;
                  v54(v53, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
                }
              }
              v55 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_137;
              qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
            }
            v56 = *(_QWORD *)(a1 + 80) + v49;
            v57 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v56 / 0x1F));
            v58 = v56 % 0x1F;
            if (*(_BYTE *)(v57 + 132 * v58 + 20))
            {
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
              v59 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v60 = qword_255795648;
                v61 = qword_255795650;
                while (v60 != v61)
                {
                  v63 = *(void (**)(uint64_t, const char *, uint64_t, const char *, uint64_t))v60;
                  v62 = *(_QWORD *)(v60 + 8);
                  v60 += 16;
                  v63(v62, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
                }
              }
              v64 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                goto LABEL_137;
              qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
              v65 = *(_QWORD *)(a1 + 80) + v49;
              v58 = v65 % 0x1F;
              v57 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v65 / 0x1F));
            }
            *(_DWORD *)(v57 + 132 * v58 + 4 * byte_22466F874[9 * v106 + 3 + -3 * v13] + 24) = -1;
          }
          ++v13;
        }
        while (v14 != 2);
        v12 = v108;
      }
      while (v108 != 2);
    }
    *v102 = 1;
    v67 = *(char **)(a1 + 104);
    v66 = *(_QWORD *)(a1 + 112);
    if ((unint64_t)v67 >= v66)
    {
      v70 = *(char **)(a1 + 96);
      v71 = (v67 - v70) >> 2;
      v72 = v71 + 1;
      v68 = v103;
      v8 = v104;
      if ((unint64_t)(v71 + 1) >> 62)
        sub_22316E078();
      v73 = v66 - (_QWORD)v70;
      if (v73 >> 1 > v72)
        v72 = v73 >> 1;
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
        v74 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
      {
        if (v74 >> 62)
          sub_223174E94();
        v75 = operator new(4 * v74);
      }
      else
      {
        v75 = 0;
      }
      v76 = &v75[4 * v71];
      v77 = &v75[4 * v74];
      *v76 = *((_DWORD *)v104 + 8);
      v69 = v76 + 1;
      if (v67 != v70)
      {
        v78 = v67 - v70 - 4;
        if (v78 < 0x2C)
          goto LABEL_142;
        if ((unint64_t)(v70 - v75) < 0x20)
          goto LABEL_142;
        v79 = (v78 >> 2) + 1;
        v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
        v81 = &v67[-v80];
        v76 = (_DWORD *)((char *)v76 - v80);
        v82 = &v75[4 * v71 - 16];
        v83 = v67 - 16;
        v84 = v79 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v85 = *(_OWORD *)v83;
          *(v82 - 1) = *((_OWORD *)v83 - 1);
          *v82 = v85;
          v82 -= 2;
          v83 -= 32;
          v84 -= 8;
        }
        while (v84);
        v67 = v81;
        if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_142:
          do
          {
            v86 = *((_DWORD *)v67 - 1);
            v67 -= 4;
            *--v76 = v86;
          }
          while (v67 != v70);
        }
      }
      *(_QWORD *)(a1 + 96) = v76;
      *(_QWORD *)(a1 + 104) = v69;
      *(_QWORD *)(a1 + 112) = v77;
      if (v70)
        operator delete(v70);
    }
    else
    {
      v68 = v103;
      v8 = v104;
      *(_DWORD *)v67 = *((_DWORD *)v104 + 8);
      v69 = v67 + 4;
    }
    *(_QWORD *)(a1 + 104) = v69;
    v87 = *(_QWORD **)(a1 + 176);
    if (v87 != (_QWORD *)(a1 + 184))
    {
      do
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v87[4] + 24))(v87[4], v68, v101, *((unsigned int *)v8 + 8));
        v97 = (_QWORD *)v87[1];
        if (v97)
        {
          do
          {
            v98 = v97;
            v97 = (_QWORD *)*v97;
          }
          while (v97);
        }
        else
        {
          do
          {
            v98 = (_QWORD *)v87[2];
            v99 = *v98 == (_QWORD)v87;
            v87 = v98;
          }
          while (!v99);
        }
        v87 = v98;
      }
      while (v98 != (_QWORD *)(a1 + 184));
    }
    v90 = *(_QWORD *)(a1 + 208);
    v89 = a1 + 208;
    v88 = v90;
    if (v90)
    {
      v91 = v89;
      do
      {
        v92 = *(_DWORD *)(v88 + 32);
        v93 = v92 < v101;
        if (v92 >= v101)
          v94 = (uint64_t *)v88;
        else
          v94 = (uint64_t *)(v88 + 8);
        if (!v93)
          v91 = v88;
        v88 = *v94;
      }
      while (*v94);
      if (v91 != v89 && *(_DWORD *)(v91 + 32) <= v101)
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v91 + 40) + 24))(*(_QWORD *)(v91 + 40), v68, v101, *((unsigned int *)v8 + 8));
    }
    sub_2231AFBB8(v100, v8, (uint64_t)__p);
    v95 = *(void **)__p;
    *(_QWORD *)__p = 0;
    if (v95)
      operator delete(v95);
  }
  return v8 != 0;
}

uint64_t sub_223A95018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  __int128 v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  uint64_t *v34;
  int v35;
  uint64_t *v36;
  int v37;
  int v38;
  int v39;
  uint64_t *v40;
  int v41;
  uint64_t *v42;
  int v43;
  int v44;
  int v45;
  uint64_t *v46;
  int v47;
  uint64_t *v48;
  int v49;
  int v50;
  int v51;
  uint64_t *v52;
  int v53;
  uint64_t *v54;
  int v55;
  int v56;
  int v57;
  uint64_t *v58;
  int v59;
  uint64_t *v60;
  int v61;
  int v62;
  int v63;
  uint64_t *v64;
  int v65;
  uint64_t *v66;
  int v67;
  int v68;
  int v69;
  uint64_t *v70;
  int v71;
  uint64_t *v72;
  int v73;
  int v74;
  int v75;
  uint64_t *v76;
  int v77;
  uint64_t *v78;
  int v79;
  int v80;
  int v81;
  uint64_t *v82;
  int v83;
  uint64_t *v84;
  int v85;
  int v86;
  int v87;
  uint64_t *v88;
  int v89;
  uint64_t *v90;
  int v91;
  int v92;
  int v93;
  uint64_t *v94;
  int v95;
  uint64_t *v96;
  int v97;
  int v98;
  int v99;
  uint64_t *v100;
  int v101;
  uint64_t *v102;
  int v103;
  int v104;
  int v105;
  uint64_t *v106;
  int v107;
  uint64_t *v108;
  int v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  BOOL v116;
  uint64_t *v117;
  _QWORD *v119;
  _QWORD *v120;
  BOOL v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  _BYTE v125[111];
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  if (v6 == v7)
  {
    v13 = *(_QWORD *)(a1 + 88);
    v122 = v13;
    v14 = v13;
    if (*(_DWORD *)(a1 + 120) <= v13)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 493, (uint64_t)"idx_block < block_storage_capacity_", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v14 = *(_QWORD *)(a1 + 88);
    }
    v15 = *(_WORD *)(a1 + 232);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    v18 = ~((v17 - v16) >> 3) + 4 * (v17 - v16);
    if (v17 == v16)
      v18 = 0;
    if (v18 == *(_QWORD *)(a1 + 80) + v14)
    {
      sub_223A314E4(a1 + 48);
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
    }
    if (v17 == v16)
    {
      v20 = 0;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(a1 + 80);
      v20 = *(_QWORD *)(v16 + 8 * (v19 / 0x1F)) + 132 * (v19 % 0x1F);
    }
    v21 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v20 = *(_QWORD *)a2;
    *(_DWORD *)(v20 + 8) = v21;
    *(_DWORD *)(v20 + 12) = a3;
    *(_WORD *)(v20 + 16) = v15;
    *(_BYTE *)(v20 + 20) = 0;
    *(_WORD *)(v20 + 18) = v15 * v15;
    *(_QWORD *)&v22 = -1;
    *((_QWORD *)&v22 + 1) = -1;
    *(_OWORD *)(v20 + 24) = v22;
    *(_OWORD *)(v20 + 40) = v22;
    *(_OWORD *)(v20 + 56) = v22;
    *(_OWORD *)(v20 + 72) = v22;
    *(_OWORD *)(v20 + 88) = v22;
    *(_OWORD *)(v20 + 104) = v22;
    *(_OWORD *)(v20 + 116) = v22;
    ++*(_QWORD *)(a1 + 88);
    v8 = v13;
  }
  else
  {
    v122 = *(_DWORD *)(v7 - 4);
    v8 = v122;
    *(_QWORD *)(a1 + 104) = v7 - 4;
    v9 = *(_WORD *)(a1 + 232);
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    *(_OWORD *)&v125[35] = v10;
    *(_OWORD *)&v125[19] = v10;
    *(_OWORD *)&v125[3] = v10;
    *(_OWORD *)&v125[95] = v10;
    *(_OWORD *)&v125[83] = v10;
    *(_OWORD *)&v125[67] = v10;
    *(_OWORD *)&v125[51] = v10;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * ((*(_QWORD *)(a1 + 80) + v8) / 0x1FuLL))
        + 132 * ((*(_QWORD *)(a1 + 80) + v8) % 0x1FuLL);
    v12 = *(_DWORD *)(a2 + 8);
    *(_QWORD *)v11 = *(_QWORD *)a2;
    *(_DWORD *)(v11 + 8) = v12;
    *(_DWORD *)(v11 + 12) = a3;
    *(_WORD *)(v11 + 16) = v9;
    *(_WORD *)(v11 + 18) = v9 * v9;
    *(_BYTE *)(v11 + 20) = 0;
    *(_OWORD *)(v11 + 53) = *(_OWORD *)&v125[32];
    *(_OWORD *)(v11 + 37) = *(_OWORD *)&v125[16];
    *(_OWORD *)(v11 + 101) = *(_OWORD *)&v125[80];
    *(_OWORD *)(v11 + 85) = *(_OWORD *)&v125[64];
    *(_OWORD *)(v11 + 69) = *(_OWORD *)&v125[48];
    *(_OWORD *)(v11 + 21) = *(_OWORD *)v125;
    *(_OWORD *)(v11 + 116) = *(_OWORD *)&v125[95];
    LODWORD(v13) = v8;
  }
  v23 = v6 != v7;
  v24 = *(_QWORD *)(a1 + 80) + v8;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * (v24 / 0x1F));
  v26 = v24 % 0x1F;
  v27 = v25 + 132 * (v24 % 0x1F);
  *(_DWORD *)(v27 + 24) = v13;
  v28 = (_DWORD *)(v27 + 24);
  sub_223A95E80((void **)(a1 + 128), v27, v23);
  *(_DWORD *)v125 = a3;
  *(_QWORD *)&v125[4] = *(_QWORD *)a2;
  *(_DWORD *)&v125[12] = *(_DWORD *)(a2 + 8);
  sub_223A31A84(a1 + 8, (int *)v125, v125, &v122);
  if (*(unsigned __int8 *)(a1 + 234) - 1 <= 1)
  {
    v29 = *(unsigned __int16 *)(a1 + 232);
    v30 = v25 + 132 * v26;
    v33 = *(_DWORD *)(v30 + 12);
    v32 = (int *)(v30 + 12);
    v31 = v33;
    *(_DWORD *)v125 = *(_DWORD *)v27 + v29;
    *(_QWORD *)&v125[4] = *(_QWORD *)(v27 + 4);
    v34 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v33);
    if (v34)
    {
      *(_DWORD *)(v27 + 28) = v35;
      *((_DWORD *)v34 + 20) = *v28;
    }
    LODWORD(v123) = *(_DWORD *)v27 - v29;
    HIDWORD(v123) = *(_DWORD *)(v27 + 4);
    v124 = *(_DWORD *)(v27 + 8);
    v36 = sub_223A31E2C((_QWORD *)a1, &v123, v31);
    if (v36)
    {
      *(_DWORD *)(v27 + 80) = v37;
      *((_DWORD *)v36 + 7) = *v28;
    }
    v38 = *(unsigned __int16 *)(a1 + 232);
    v39 = *v32;
    *(_DWORD *)v125 = *(_DWORD *)v27;
    *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) + v38;
    *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8);
    v40 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v39);
    if (v40)
    {
      *(_DWORD *)(v27 + 32) = v41;
      *((_DWORD *)v40 + 19) = *v28;
    }
    LODWORD(v123) = *(_DWORD *)v27;
    HIDWORD(v123) = *(_DWORD *)(v27 + 4) - v38;
    v124 = *(_DWORD *)(v27 + 8);
    v42 = sub_223A31E2C((_QWORD *)a1, &v123, v39);
    if (v42)
    {
      *(_DWORD *)(v27 + 76) = v43;
      *((_DWORD *)v42 + 8) = *v28;
    }
    v44 = *(unsigned __int16 *)(a1 + 232);
    v45 = *v32;
    *(_DWORD *)v125 = *(_DWORD *)v27 + v44;
    *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) + v44;
    *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8);
    v46 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v45);
    if (v46)
    {
      *(_DWORD *)(v27 + 36) = v47;
      *((_DWORD *)v46 + 18) = *v28;
    }
    LODWORD(v123) = *(_DWORD *)v27 - v44;
    HIDWORD(v123) = *(_DWORD *)(v27 + 4) - v44;
    v124 = *(_DWORD *)(v27 + 8);
    v48 = sub_223A31E2C((_QWORD *)a1, &v123, v45);
    if (v48)
    {
      *(_DWORD *)(v27 + 72) = v49;
      *((_DWORD *)v48 + 9) = *v28;
    }
    v50 = *(unsigned __int16 *)(a1 + 232);
    v51 = *v32;
    *(_QWORD *)v125 = *(_QWORD *)v27;
    *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v50;
    v52 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v51);
    if (v52)
    {
      *(_DWORD *)(v27 + 40) = v53;
      *((_DWORD *)v52 + 17) = *v28;
    }
    v123 = *(_QWORD *)v27;
    v124 = *(_DWORD *)(v27 + 8) - v50;
    v54 = sub_223A31E2C((_QWORD *)a1, &v123, v51);
    if (v54)
    {
      *(_DWORD *)(v27 + 68) = v55;
      *((_DWORD *)v54 + 10) = *v28;
    }
    v56 = *(unsigned __int16 *)(a1 + 232);
    v57 = *v32;
    *(_DWORD *)v125 = *(_DWORD *)v27 + v56;
    *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4);
    *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v56;
    v58 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v57);
    if (v58)
    {
      *(_DWORD *)(v27 + 44) = v59;
      *((_DWORD *)v58 + 16) = *v28;
    }
    LODWORD(v123) = *(_DWORD *)v27 - v56;
    HIDWORD(v123) = *(_DWORD *)(v27 + 4);
    v124 = *(_DWORD *)(v27 + 8) - v56;
    v60 = sub_223A31E2C((_QWORD *)a1, &v123, v57);
    if (v60)
    {
      *(_DWORD *)(v27 + 64) = v61;
      *((_DWORD *)v60 + 11) = *v28;
    }
    v62 = *(unsigned __int16 *)(a1 + 232);
    v63 = *v32;
    *(_DWORD *)v125 = *(_DWORD *)v27;
    *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) + v62;
    *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v62;
    v64 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v63);
    if (v64)
    {
      *(_DWORD *)(v27 + 48) = v65;
      *((_DWORD *)v64 + 15) = *v28;
    }
    LODWORD(v123) = *(_DWORD *)v27;
    HIDWORD(v123) = *(_DWORD *)(v27 + 4) - v62;
    v124 = *(_DWORD *)(v27 + 8) - v62;
    v66 = sub_223A31E2C((_QWORD *)a1, &v123, v63);
    if (v66)
    {
      *(_DWORD *)(v27 + 60) = v67;
      *((_DWORD *)v66 + 12) = *v28;
    }
    v68 = *(unsigned __int16 *)(a1 + 232);
    v69 = *v32;
    *(_DWORD *)v125 = *(_DWORD *)v27 + v68;
    *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) + v68;
    *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v68;
    v70 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v69);
    if (v70)
    {
      *(_DWORD *)(v27 + 52) = v71;
      *((_DWORD *)v70 + 14) = *v28;
    }
    LODWORD(v123) = *(_DWORD *)v27 - v68;
    HIDWORD(v123) = *(_DWORD *)(v27 + 4) - v68;
    v124 = *(_DWORD *)(v27 + 8) - v68;
    v72 = sub_223A31E2C((_QWORD *)a1, &v123, v69);
    if (v72)
    {
      *(_DWORD *)(v27 + 56) = v73;
      *((_DWORD *)v72 + 13) = *v28;
    }
    if (*(_BYTE *)(a1 + 234) == 2)
    {
      v74 = *(unsigned __int16 *)(a1 + 232);
      v75 = *v32;
      *(_DWORD *)v125 = *(_DWORD *)v27 - v74;
      *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) + v74;
      *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v74;
      v76 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v75);
      if (v76)
      {
        *(_DWORD *)(v27 + 128) = v77;
        *((_DWORD *)v76 + 21) = *v28;
      }
      LODWORD(v123) = *(_DWORD *)v27 + v74;
      HIDWORD(v123) = *(_DWORD *)(v27 + 4) - v74;
      v124 = *(_DWORD *)(v27 + 8) - v74;
      v78 = sub_223A31E2C((_QWORD *)a1, &v123, v75);
      if (v78)
      {
        *(_DWORD *)(v27 + 84) = v79;
        *((_DWORD *)v78 + 32) = *v28;
      }
      v80 = *(unsigned __int16 *)(a1 + 232);
      v81 = *v32;
      *(_DWORD *)v125 = *(_DWORD *)v27 - v80;
      *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4);
      *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v80;
      v82 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v81);
      if (v82)
      {
        *(_DWORD *)(v27 + 124) = v83;
        *((_DWORD *)v82 + 22) = *v28;
      }
      LODWORD(v123) = *(_DWORD *)v27 + v80;
      HIDWORD(v123) = *(_DWORD *)(v27 + 4);
      v124 = *(_DWORD *)(v27 + 8) - v80;
      v84 = sub_223A31E2C((_QWORD *)a1, &v123, v81);
      if (v84)
      {
        *(_DWORD *)(v27 + 88) = v85;
        *((_DWORD *)v84 + 31) = *v28;
      }
      v86 = *(unsigned __int16 *)(a1 + 232);
      v87 = *v32;
      *(_DWORD *)v125 = *(_DWORD *)v27 - v86;
      *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) - v86;
      *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v86;
      v88 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v87);
      if (v88)
      {
        *(_DWORD *)(v27 + 112) = v89;
        *((_DWORD *)v88 + 25) = *v28;
      }
      LODWORD(v123) = *(_DWORD *)v27 + v86;
      HIDWORD(v123) = *(_DWORD *)(v27 + 4) + v86;
      v124 = *(_DWORD *)(v27 + 8) - v86;
      v90 = sub_223A31E2C((_QWORD *)a1, &v123, v87);
      if (v90)
      {
        *(_DWORD *)(v27 + 100) = v91;
        *((_DWORD *)v90 + 28) = *v28;
      }
      v92 = *(unsigned __int16 *)(a1 + 232);
      v93 = *v32;
      *(_DWORD *)v125 = *(_DWORD *)v27;
      *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) - v92;
      *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v92;
      v94 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v93);
      if (v94)
      {
        *(_DWORD *)(v27 + 116) = v95;
        *((_DWORD *)v94 + 24) = *v28;
      }
      LODWORD(v123) = *(_DWORD *)v27;
      HIDWORD(v123) = *(_DWORD *)(v27 + 4) + v92;
      v124 = *(_DWORD *)(v27 + 8) - v92;
      v96 = sub_223A31E2C((_QWORD *)a1, &v123, v93);
      if (v96)
      {
        *(_DWORD *)(v27 + 96) = v97;
        *((_DWORD *)v96 + 29) = *v28;
      }
      v98 = *(unsigned __int16 *)(a1 + 232);
      v99 = *v32;
      *(_DWORD *)v125 = *(_DWORD *)v27 + v98;
      *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) - v98;
      *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8) + v98;
      v100 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v99);
      if (v100)
      {
        *(_DWORD *)(v27 + 120) = v101;
        *((_DWORD *)v100 + 23) = *v28;
      }
      LODWORD(v123) = *(_DWORD *)v27 - v98;
      HIDWORD(v123) = *(_DWORD *)(v27 + 4) + v98;
      v124 = *(_DWORD *)(v27 + 8) - v98;
      v102 = sub_223A31E2C((_QWORD *)a1, &v123, v99);
      if (v102)
      {
        *(_DWORD *)(v27 + 92) = v103;
        *((_DWORD *)v102 + 30) = *v28;
      }
      v104 = *(unsigned __int16 *)(a1 + 232);
      v105 = *v32;
      *(_DWORD *)v125 = *(_DWORD *)v27 + v104;
      *(_DWORD *)&v125[4] = *(_DWORD *)(v27 + 4) - v104;
      *(_DWORD *)&v125[8] = *(_DWORD *)(v27 + 8);
      v106 = sub_223A31E2C((_QWORD *)a1, (uint64_t *)v125, v105);
      if (v106)
      {
        *(_DWORD *)(v27 + 104) = v107;
        *((_DWORD *)v106 + 27) = *v28;
      }
      LODWORD(v123) = *(_DWORD *)v27 - v104;
      HIDWORD(v123) = *(_DWORD *)(v27 + 4) + v104;
      v124 = *(_DWORD *)(v27 + 8);
      v108 = sub_223A31E2C((_QWORD *)a1, &v123, v105);
      if (v108)
      {
        *(_DWORD *)(v27 + 108) = v109;
        *((_DWORD *)v108 + 26) = *v28;
      }
    }
  }
  v110 = *(_QWORD **)(a1 + 176);
  if (v110 != (_QWORD *)(a1 + 184))
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v110[4] + 16))(v110[4], a2, a3, v122);
      v119 = (_QWORD *)v110[1];
      if (v119)
      {
        do
        {
          v120 = v119;
          v119 = (_QWORD *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (_QWORD *)v110[2];
          v121 = *v120 == (_QWORD)v110;
          v110 = v120;
        }
        while (!v121);
      }
      v110 = v120;
    }
    while (v120 != (_QWORD *)(a1 + 184));
  }
  v113 = *(_QWORD *)(a1 + 208);
  v112 = a1 + 208;
  v111 = v113;
  if (v113)
  {
    v114 = v112;
    do
    {
      v115 = *(_DWORD *)(v111 + 32);
      v116 = v115 < (int)a3;
      if (v115 >= (int)a3)
        v117 = (uint64_t *)v111;
      else
        v117 = (uint64_t *)(v111 + 8);
      if (!v116)
        v114 = v111;
      v111 = *v117;
    }
    while (*v117);
    if (v114 != v112 && *(_DWORD *)(v114 + 32) <= (int)a3)
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v114 + 40) + 16))(*(_QWORD *)(v114 + 40), a2, a3, v122);
  }
  return v122;
}

void sub_223A95AF8(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(void **)a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x186186186186187)
      sub_223A96728();
    v4 = *(_QWORD *)(a1 + 8);
    v5 = 168 * a2;
    v6 = (char *)operator new(168 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - (_QWORD)v2];
    if ((void *)v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_9:
        operator delete(v2);
    }
    else
    {
      v9 = (uint64_t)&v6[v4 - (_QWORD)v2];
      do
      {
        v9 -= 168;
        v4 -= 168;
        sub_223A9678C(v9, v4);
      }
      while ((void *)v4 != v2);
      v2 = *(void **)a1;
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      for (*(_QWORD *)(a1 + 16) = v7; (void *)v10 != v2; v10 = sub_223A91FA4(v10 - 168))
        ;
      if (v2)
        goto LABEL_9;
    }
  }
}

void sub_223A95C00(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  void *v21;
  void *v22;
  void *v23;

  v2 = *(_BYTE **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277)
      sub_223A96728();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 104 * a2;
    v6 = (char *)operator new(104 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = 0;
      do
      {
        v12 = &v8[v9];
        v13 = &v4[v9];
        *((_QWORD *)v12 - 13) = *(_QWORD *)&v4[v9 - 104];
        *((_OWORD *)v12 - 6) = *(_OWORD *)&v4[v9 - 96];
        *((_QWORD *)v12 - 10) = *(_QWORD *)&v4[v9 - 80];
        *((_QWORD *)v13 - 12) = 0;
        *((_QWORD *)v13 - 11) = 0;
        *((_QWORD *)v13 - 10) = 0;
        *(_OWORD *)(v12 - 72) = *(_OWORD *)&v4[v9 - 72];
        *((_QWORD *)v12 - 7) = *(_QWORD *)&v4[v9 - 56];
        *((_QWORD *)v13 - 9) = 0;
        *((_QWORD *)v13 - 8) = 0;
        *((_QWORD *)v13 - 7) = 0;
        *((_QWORD *)v12 - 6) = *(_QWORD *)&v4[v9 - 48];
        v14 = (uint64_t *)&v4[v9 - 40];
        v15 = *v14;
        *(_QWORD *)&v8[v9 - 40] = *v14;
        v16 = (uint64_t)&v8[v9 - 40];
        v17 = *(_QWORD *)&v4[v9 - 32];
        *((_QWORD *)v12 - 4) = v17;
        if (v17)
        {
          *(_QWORD *)(v15 + 16) = v16;
          *((_QWORD *)v13 - 6) = v14;
          *v14 = 0;
          *(_QWORD *)&v4[v9 - 32] = 0;
        }
        else
        {
          *((_QWORD *)v12 - 6) = v16;
        }
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 104;
      }
      while (&v4[v9] != v2);
      v2 = *(_BYTE **)a1;
      v18 = *(_BYTE **)(a1 + 8);
      *(_QWORD *)a1 = &v8[v9];
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v18 != v2)
      {
        v19 = (uint64_t)(v18 - 48);
        do
        {
          v21 = *(void **)(v19 + 24);
          if (v21)
          {
            *(_QWORD *)(v19 + 32) = v21;
            operator delete(v21);
          }
          sub_223198030(v19, *(_QWORD **)(v19 + 8));
          v22 = *(void **)(v19 - 24);
          if (v22)
          {
            *(_QWORD *)(v19 - 16) = v22;
            operator delete(v22);
          }
          v23 = *(void **)(v19 - 48);
          if (v23)
          {
            *(_QWORD *)(v19 - 40) = v23;
            operator delete(v23);
          }
          v20 = (_BYTE *)(v19 - 56);
          v19 -= 104;
        }
        while (v20 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_223A95DD0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = a1[1];
  for (i = *a1; v2 != i; v2 = sub_223A91FA4(v2 - 168))
    ;
  a1[1] = i;
  v5 = a1[3];
  v4 = a1[4];
  if (v4 != v5)
  {
    v6 = v4 - 48;
    do
    {
      v8 = *(void **)(v6 + 24);
      if (v8)
      {
        *(_QWORD *)(v6 + 32) = v8;
        operator delete(v8);
      }
      sub_223198030(v6, *(_QWORD **)(v6 + 8));
      v9 = *(void **)(v6 - 24);
      if (v9)
      {
        *(_QWORD *)(v6 - 16) = v9;
        operator delete(v9);
      }
      v10 = *(void **)(v6 - 48);
      if (v10)
      {
        *(_QWORD *)(v6 - 40) = v10;
        operator delete(v10);
      }
      v7 = v6 - 56;
      v6 -= 104;
    }
    while (v7 != v5);
  }
  a1[4] = v5;
}

void sub_223A95E80(void **a1, uint64_t a2, char a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  void **v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  void **v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  void *v36;
  _QWORD *v37;
  void *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  void *v51;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  void *v95;
  void *v96;
  void *v97;
  char *v98;
  void *v99[2];
  void *__p[4];
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  int v110;

  if ((a3 & 1) == 0)
  {
    v11 = (unint64_t)a1[1];
    if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v11 - (_QWORD)*a1) >> 3) != *(_DWORD *)(a2 + 24))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/CellContainer.cpp", 44, (uint64_t)"Size() == md_cell.BlockTableIndex()", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_90;
      }
      v11 = (unint64_t)a1[1];
    }
    v12 = (unint64_t)a1[2];
    if (v11 >= v12)
    {
      v14 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v11 - (_QWORD)*a1) >> 3);
      if (v14 + 1 > 0x186186186186186)
        sub_223A96728();
      v15 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v12 - (_QWORD)*a1) >> 3);
      v16 = 2 * v15;
      if (2 * v15 <= v14 + 1)
        v16 = v14 + 1;
      if (v15 >= 0xC30C30C30C30C3)
        v17 = 0x186186186186186;
      else
        v17 = v16;
      __p[1] = a1 + 2;
      if (v17)
      {
        if (v17 > 0x186186186186186)
          goto LABEL_91;
        v18 = (char *)operator new(168 * v17);
      }
      else
      {
        v18 = 0;
      }
      v98 = v18;
      v99[0] = &v18[168 * v14];
      v99[1] = v99[0];
      __p[0] = &v18[168 * v17];
      sub_223AAAC68((uint64_t)v99[0], a2);
      v69 = (char *)v99[0];
      v13 = (char *)v99[0] + 168;
      v71 = (char *)*a1;
      v70 = (char *)a1[1];
      if (v70 == *a1)
      {
        *a1 = v99[0];
        a1[1] = v13;
        a1[2] = __p[0];
        if (!v70)
          goto LABEL_56;
      }
      else
      {
        do
        {
          v69 -= 168;
          v70 -= 168;
          sub_223A9678C((uint64_t)v69, (uint64_t)v70);
        }
        while (v70 != v71);
        v70 = (char *)*a1;
        v72 = (uint64_t)a1[1];
        *a1 = v69;
        a1[1] = v13;
        for (a1[2] = __p[0]; (char *)v72 != v70; v72 = sub_223A91FA4(v72 - 168))
          ;
        if (!v70)
          goto LABEL_56;
      }
      operator delete(v70);
    }
    else
    {
      sub_223AAAC68(v11, a2);
      v13 = (char *)(v11 + 168);
      a1[1] = (void *)(v11 + 168);
    }
LABEL_56:
    a1[1] = v13;
    v74 = (char *)a1[4];
    v73 = (unint64_t)a1[5];
    if ((unint64_t)v74 < v73)
    {
      *(_QWORD *)v74 = a2;
      *((_QWORD *)v74 + 9) = 0;
      *((_QWORD *)v74 + 10) = 0;
      *((_QWORD *)v74 + 8) = 0;
      *(_OWORD *)(v74 + 8) = 0u;
      *(_OWORD *)(v74 + 24) = 0u;
      *(_OWORD *)(v74 + 40) = 0u;
      *((_QWORD *)v74 + 7) = v74 + 64;
      v75 = v74 + 104;
      *((_QWORD *)v74 + 11) = 0;
      *((_QWORD *)v74 + 12) = 0;
LABEL_88:
      a1[4] = v75;
      return;
    }
    v76 = (char *)a1[3];
    v77 = 0x4EC4EC4EC4EC4EC5 * ((v74 - v76) >> 3) + 1;
    if (v77 > 0x276276276276276)
      sub_223A96728();
    v78 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v73 - (_QWORD)v76) >> 3);
    if (2 * v78 > v77)
      v77 = 2 * v78;
    if (v78 >= 0x13B13B13B13B13BLL)
      v79 = 0x276276276276276;
    else
      v79 = v77;
    if (!v79)
    {
      v80 = 0;
      goto LABEL_70;
    }
    if (v79 <= 0x276276276276276)
    {
      v80 = (char *)operator new(104 * v79);
LABEL_70:
      v81 = &v80[8 * ((v74 - v76) >> 3)];
      *(_QWORD *)v81 = a2;
      *((_QWORD *)v81 + 9) = 0;
      *((_QWORD *)v81 + 10) = 0;
      *((_QWORD *)v81 + 8) = 0;
      v82 = &v80[104 * v79];
      *(_OWORD *)(v81 + 8) = 0u;
      *(_OWORD *)(v81 + 24) = 0u;
      *(_OWORD *)(v81 + 40) = 0u;
      *((_QWORD *)v81 + 7) = v81 + 64;
      *((_QWORD *)v81 + 11) = 0;
      *((_QWORD *)v81 + 12) = 0;
      v75 = v81 + 104;
      if (v74 == v76)
      {
        a1[3] = v81;
        a1[4] = v75;
        a1[5] = v82;
      }
      else
      {
        v83 = 0;
        do
        {
          v86 = &v81[v83];
          v87 = &v74[v83];
          *((_QWORD *)v86 - 13) = *(_QWORD *)&v74[v83 - 104];
          *((_QWORD *)v86 - 11) = 0;
          *((_QWORD *)v86 - 10) = 0;
          *((_OWORD *)v86 - 6) = *(_OWORD *)&v74[v83 - 96];
          *((_QWORD *)v86 - 10) = *(_QWORD *)&v74[v83 - 80];
          *((_QWORD *)v87 - 12) = 0;
          *((_QWORD *)v87 - 11) = 0;
          *((_QWORD *)v87 - 10) = 0;
          *((_QWORD *)v86 - 8) = 0;
          *((_QWORD *)v86 - 7) = 0;
          *(_OWORD *)(v86 - 72) = *(_OWORD *)&v74[v83 - 72];
          *((_QWORD *)v86 - 7) = *(_QWORD *)&v74[v83 - 56];
          *((_QWORD *)v87 - 9) = 0;
          *((_QWORD *)v87 - 8) = 0;
          *((_QWORD *)v87 - 7) = 0;
          *((_QWORD *)v86 - 6) = *(_QWORD *)&v74[v83 - 48];
          v88 = &v74[v83 - 40];
          v89 = *(_QWORD *)v88;
          *(_QWORD *)&v81[v83 - 40] = *(_QWORD *)v88;
          v90 = (uint64_t)&v81[v83 - 40];
          v91 = *(_QWORD *)&v74[v83 - 32];
          *((_QWORD *)v86 - 4) = v91;
          if (v91)
          {
            *(_QWORD *)(v89 + 16) = v90;
            *((_QWORD *)v87 - 6) = v88;
            *(_QWORD *)v88 = 0;
            *(_QWORD *)&v74[v83 - 32] = 0;
          }
          else
          {
            *((_QWORD *)v86 - 6) = v90;
          }
          v84 = &v81[v83];
          v85 = &v74[v83];
          *((_QWORD *)v84 - 2) = 0;
          *((_QWORD *)v84 - 1) = 0;
          *(_OWORD *)(v84 - 24) = *(_OWORD *)&v74[v83 - 24];
          *((_QWORD *)v84 - 1) = *(_QWORD *)&v74[v83 - 8];
          *((_QWORD *)v85 - 3) = 0;
          *((_QWORD *)v85 - 2) = 0;
          *((_QWORD *)v85 - 1) = 0;
          v83 -= 104;
        }
        while (&v74[v83] != v76);
        v74 = (char *)a1[3];
        v92 = (char *)a1[4];
        a1[3] = &v81[v83];
        a1[4] = v75;
        a1[5] = v82;
        if (v92 != v74)
        {
          v93 = (uint64_t)(v92 - 48);
          do
          {
            v95 = *(void **)(v93 + 24);
            if (v95)
            {
              *(_QWORD *)(v93 + 32) = v95;
              operator delete(v95);
            }
            sub_223198030(v93, *(_QWORD **)(v93 + 8));
            v96 = *(void **)(v93 - 24);
            if (v96)
            {
              *(_QWORD *)(v93 - 16) = v96;
              operator delete(v96);
            }
            v97 = *(void **)(v93 - 48);
            if (v97)
            {
              *(_QWORD *)(v93 - 40) = v97;
              operator delete(v97);
            }
            v94 = (char *)(v93 - 56);
            v93 -= 104;
          }
          while (v94 != v74);
        }
      }
      if (v74)
        operator delete(v74);
      goto LABEL_88;
    }
LABEL_91:
    sub_223174E94();
  }
  v5 = *(unsigned int *)(a2 + 24);
  if (0xCF3CF3CF3CF3CF3DLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3) > v5)
    goto LABEL_5;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/CellContainer.cpp", 49, (uint64_t)"md_cell.BlockTableIndex() < Size()", 34, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
LABEL_90:
    abort();
  }
  LODWORD(v5) = *(_DWORD *)(a2 + 24);
LABEL_5:
  sub_223AAAC68((uint64_t)&v98, a2);
  v6 = *a1;
  v7 = (uint64_t)*a1 + 168 * v5;
  *(_QWORD *)v7 = v98;
  v8 = v7 + 16;
  sub_223198030(v7 + 8, *(_QWORD **)(v7 + 16));
  *(void **)(v7 + 8) = v99[0];
  v9 = v99[1];
  *(void **)(v7 + 16) = v99[1];
  v10 = __p[0];
  *(void **)(v7 + 24) = __p[0];
  if (v10)
  {
    v9[2] = v8;
    v99[0] = &v99[1];
    v99[1] = 0;
    __p[0] = 0;
  }
  else
  {
    *(_QWORD *)(v7 + 8) = v8;
  }
  v19 = &v6[21 * v5];
  v21 = (_QWORD *)v19[5];
  v20 = (void **)(v19 + 5);
  sub_223198030((uint64_t)(v20 - 1), v21);
  *(v20 - 1) = __p[1];
  v22 = __p[2];
  *v20 = __p[2];
  v23 = __p[3];
  v20[1] = __p[3];
  if (v23)
  {
    v22[2] = v20;
    __p[1] = &__p[2];
    *(_OWORD *)&__p[2] = 0uLL;
    v24 = &v6[21 * v5];
    v27 = (_QWORD *)v24[7];
    v25 = (void **)(v24 + 7);
    v26 = v27;
    if (!v27)
      goto LABEL_30;
  }
  else
  {
    *(v20 - 1) = v20;
    v28 = &v6[21 * v5];
    v29 = (_QWORD *)v28[7];
    v25 = (void **)(v28 + 7);
    v26 = v29;
    if (!v29)
      goto LABEL_30;
  }
  v30 = &v6[21 * v5];
  v33 = (_QWORD *)v30[8];
  v32 = v30 + 8;
  v31 = v33;
  v34 = v26;
  if (v33 != v26)
  {
    do
      v31 = sub_223A92044(v31 - 28);
    while (v31 != v26);
    v34 = *v25;
  }
  *v32 = v26;
  operator delete(v34);
  *v25 = 0;
  v25[1] = 0;
  v25[2] = 0;
LABEL_30:
  *(_OWORD *)v25 = v101;
  v35 = &v6[21 * v5];
  v35[9] = v102;
  v101 = 0uLL;
  v102 = 0;
  v38 = (void *)v35[10];
  v37 = v35 + 10;
  v36 = v38;
  if (v38)
  {
    v6[21 * v5 + 11] = v36;
    operator delete(v36);
    *v37 = 0;
    v37[1] = 0;
    v37[2] = 0;
  }
  *(_OWORD *)v37 = v103;
  v39 = &v6[21 * v5];
  v39[12] = v104;
  v103 = 0uLL;
  v104 = 0;
  v42 = (void *)v39[13];
  v41 = v39 + 13;
  v40 = v42;
  if (v42)
  {
    v6[21 * v5 + 14] = v40;
    operator delete(v40);
    *v41 = 0;
    v41[1] = 0;
    v41[2] = 0;
  }
  *(_OWORD *)v41 = v105;
  v43 = &v6[21 * v5];
  v43[15] = v106;
  v105 = 0uLL;
  v106 = 0;
  v46 = (void *)v43[16];
  v45 = v43 + 16;
  v44 = v46;
  if (v46)
  {
    v6[21 * v5 + 17] = v44;
    operator delete(v44);
    *v45 = 0;
    v45[1] = 0;
    v45[2] = 0;
  }
  *(_OWORD *)v45 = v107;
  v47 = &v6[21 * v5];
  v47[18] = v108;
  v107 = 0uLL;
  v108 = 0;
  v48 = v109;
  *((_DWORD *)v47 + 40) = v110;
  v47[19] = v48;
  sub_223A91FA4((uint64_t)&v98);
  v98 = (char *)a2;
  v102 = 0;
  v103 = 0uLL;
  *(_OWORD *)v99 = 0u;
  memset(__p, 0, sizeof(__p));
  v101 = (unint64_t)&v101 + 8;
  v104 = 0;
  v49 = a1[3];
  v50 = &v49[13 * v5];
  *v50 = a2;
  v53 = (void *)v50[1];
  v52 = v50 + 1;
  v51 = v53;
  if (v53)
  {
    v49[13 * v5 + 2] = v51;
    operator delete(v51);
    *v52 = 0;
    v52[1] = 0;
    v52[2] = 0;
  }
  *(_OWORD *)v52 = *(_OWORD *)v99;
  v54 = &v49[13 * v5];
  v54[3] = __p[0];
  v99[0] = 0;
  v99[1] = 0;
  __p[0] = 0;
  v57 = (void *)v54[4];
  v56 = v54 + 4;
  v55 = v57;
  if (v57)
  {
    v49[13 * v5 + 5] = v55;
    operator delete(v55);
    *v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
  }
  *(_OWORD *)v56 = *(_OWORD *)&__p[1];
  v58 = &v49[13 * v5];
  v58[6] = __p[3];
  memset(&__p[1], 0, 24);
  v60 = (_QWORD *)v58[8];
  v59 = v58 + 8;
  sub_223198030((uint64_t)(v59 - 1), v60);
  *(v59 - 1) = v101;
  v61 = *((_QWORD *)&v101 + 1);
  *v59 = *((_QWORD *)&v101 + 1);
  v62 = v102;
  v59[1] = v102;
  if (!v62)
  {
    *(v59 - 1) = v59;
    v67 = &v49[13 * v5];
    v68 = (void *)v67[10];
    v65 = v67 + 10;
    v64 = v68;
    if (!v68)
      goto LABEL_43;
    goto LABEL_42;
  }
  *(_QWORD *)(v61 + 16) = v59;
  *(_QWORD *)&v101 = (char *)&v101 + 8;
  *((_QWORD *)&v101 + 1) = 0;
  v102 = 0;
  v63 = &v49[13 * v5];
  v66 = (void *)v63[10];
  v65 = v63 + 10;
  v64 = v66;
  if (v66)
  {
LABEL_42:
    v49[13 * v5 + 11] = v64;
    operator delete(v64);
    *v65 = 0;
    v65[1] = 0;
    v65[2] = 0;
  }
LABEL_43:
  *(_OWORD *)v65 = v103;
  v49[13 * v5 + 12] = v104;
  v103 = 0uLL;
  v104 = 0;
  sub_223198030((uint64_t)&v101, *((_QWORD **)&v101 + 1));
  if (__p[1])
  {
    __p[2] = __p[1];
    operator delete(__p[1]);
  }
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
}

void sub_223A9670C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223A9673C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A96720(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223A96728()
{
  sub_22316DBD4("vector");
}

uint64_t sub_223A9673C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    sub_223A91FA4(i - 168);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 sub_223A9678C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v2 = (_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = a1 + 16;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 8) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = (_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = a1 + 40;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 32) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v8;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  result = *(__n128 *)(a2 + 128);
  *(__n128 *)(a1 + 128) = result;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v11 = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v11;
  return result;
}

void sub_223A96898(uint64_t a1, uint64_t a2, int32x2_t *a3, _BYTE *a4, _BYTE *a5, float a6, float a7)
{
  uint64_t v12;
  _DWORD *v14;
  size_t v15;
  float32x2_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x2_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float v79;
  float v80;
  float v81;
  float cosval;
  float *v83;
  float *v84;
  float v85;
  __float2 v86;
  float v87;
  float v88;
  unsigned int v89;
  unsigned int v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  unsigned int v97;
  float32_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v107;
  float32x4_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float v111;
  int32x2_t v112;
  int8x16_t v113;
  _BYTE v114[16];

  v12 = a5 - a4;
  if (a5 == a4)
  {
    v14 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v14 = operator new(a5 - a4);
    v15 = 12 * ((v12 - 12) / 0xCuLL) + 12;
    memcpy(v14, a4, v15);
    v12 = (uint64_t)v14 + v15;
  }
  v114[0] = 0;
  v114[12] = 0;
  sub_22414D104(0xCu, (uint64_t)v114, 0, (uint64_t *)a1, a6, a7);
  if (v14 == (_DWORD *)v12)
  {
    if (!v14)
      goto LABEL_14;
  }
  else
  {
    v19 = (uint64_t *)(a1 + 32);
    v18 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 64) = 2;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
    v21 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 40) - v18) >> 2);
    if (v20 <= v21)
    {
      if (v20 < v21)
        *(_QWORD *)(a1 + 40) = v18 + 4 * ((uint64_t)(*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112)) >> 2);
    }
    else
    {
      sub_22317EF30(a1 + 32, v20 - v21);
    }
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)v14) >> 2);
    v23 = v14[2];
    v24 = *(_QWORD *)v14;
    v25 = *v19;
    *(_QWORD *)v25 = *(_QWORD *)v14;
    *(_DWORD *)(v25 + 8) = v23;
    v26 = *v19;
    *(_DWORD *)(v26 + 20) = v23;
    *(_QWORD *)(v26 + 12) = v24;
    v27 = &v14[3 * (v12 - (_QWORD)v14 != 12)];
    v28 = *(_QWORD *)v27;
    LODWORD(v27) = v27[2];
    v29 = *v19;
    *(_DWORD *)(v29 + 32) = (_DWORD)v27;
    *(_QWORD *)(v29 + 24) = v28;
    v30 = *v19;
    *(_DWORD *)(v30 + 44) = (_DWORD)v27;
    *(_QWORD *)(v30 + 36) = v28;
    v31 = &v14[3 * (2 % v22)];
    v32 = *(_QWORD *)v31;
    LODWORD(v31) = v31[2];
    v33 = *v19;
    *(_DWORD *)(v33 + 56) = (_DWORD)v31;
    *(_QWORD *)(v33 + 48) = v32;
    v34 = *v19;
    *(_DWORD *)(v34 + 68) = (_DWORD)v31;
    *(_QWORD *)(v34 + 60) = v32;
    v35 = &v14[3 * (3 % v22)];
    v36 = *(_QWORD *)v35;
    LODWORD(v35) = v35[2];
    v37 = *v19;
    *(_DWORD *)(v37 + 80) = (_DWORD)v35;
    *(_QWORD *)(v37 + 72) = v36;
    v38 = *v19;
    *(_DWORD *)(v38 + 92) = (_DWORD)v35;
    *(_QWORD *)(v38 + 84) = v36;
    v39 = &v14[3 * (4 % v22)];
    v40 = *(_QWORD *)v39;
    LODWORD(v39) = v39[2];
    v41 = *v19;
    *(_DWORD *)(v41 + 104) = (_DWORD)v39;
    *(_QWORD *)(v41 + 96) = v40;
    v42 = *v19;
    *(_DWORD *)(v42 + 116) = (_DWORD)v39;
    *(_QWORD *)(v42 + 108) = v40;
    v43 = &v14[3 * (5 % v22)];
    v44 = *(_QWORD *)v43;
    LODWORD(v43) = v43[2];
    v45 = *v19;
    *(_DWORD *)(v45 + 128) = (_DWORD)v43;
    *(_QWORD *)(v45 + 120) = v44;
    v46 = *v19;
    *(_DWORD *)(v46 + 140) = (_DWORD)v43;
    *(_QWORD *)(v46 + 132) = v44;
    v47 = &v14[3 * (6 % v22)];
    v48 = *(_QWORD *)v47;
    LODWORD(v47) = v47[2];
    v49 = *v19;
    *(_DWORD *)(v49 + 152) = (_DWORD)v47;
    *(_QWORD *)(v49 + 144) = v48;
    v50 = *v19;
    *(_DWORD *)(v50 + 164) = (_DWORD)v47;
    *(_QWORD *)(v50 + 156) = v48;
    v51 = &v14[3 * (7 % v22)];
    v52 = *(_QWORD *)v51;
    LODWORD(v51) = v51[2];
    v53 = *v19;
    *(_DWORD *)(v53 + 176) = (_DWORD)v51;
    *(_QWORD *)(v53 + 168) = v52;
    v54 = *v19;
    *(_DWORD *)(v54 + 188) = (_DWORD)v51;
    *(_QWORD *)(v54 + 180) = v52;
    v55 = &v14[3 * (8 % v22)];
    v56 = *(_QWORD *)v55;
    LODWORD(v55) = v55[2];
    v57 = *v19;
    *(_DWORD *)(v57 + 200) = (_DWORD)v55;
    *(_QWORD *)(v57 + 192) = v56;
    v58 = *v19;
    *(_DWORD *)(v58 + 212) = (_DWORD)v55;
    *(_QWORD *)(v58 + 204) = v56;
    v59 = &v14[3 * (9 % v22)];
    v60 = *(_QWORD *)v59;
    LODWORD(v59) = v59[2];
    v61 = *v19;
    *(_DWORD *)(v61 + 224) = (_DWORD)v59;
    *(_QWORD *)(v61 + 216) = v60;
    v62 = *v19;
    *(_DWORD *)(v62 + 236) = (_DWORD)v59;
    *(_QWORD *)(v62 + 228) = v60;
    v63 = &v14[3 * (0xA % v22)];
    v64 = *(_QWORD *)v63;
    LODWORD(v63) = v63[2];
    v65 = *v19;
    *(_DWORD *)(v65 + 248) = (_DWORD)v63;
    *(_QWORD *)(v65 + 240) = v64;
    v66 = *v19;
    *(_DWORD *)(v66 + 260) = (_DWORD)v63;
    *(_QWORD *)(v66 + 252) = v64;
    v67 = &v14[3 * (0xB % v22)];
    v68 = *(_QWORD *)v67;
    LODWORD(v67) = v67[2];
    v69 = *v19;
    *(_DWORD *)(v69 + 272) = (_DWORD)v67;
    *(_QWORD *)(v69 + 264) = v68;
    v70 = (_QWORD *)(*v19 + 276);
    *(_DWORD *)(*v19 + 284) = (_DWORD)v67;
    *v70 = v68;
  }
  operator delete(v14);
LABEL_14:
  v16.i32[0] = a3[1].i32[0];
  *(int32x2_t *)v17.f32 = *a3;
  v71 = v17;
  v71.i32[2] = v16.i32[0];
  v72 = vmulq_n_f32(v71, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32), (float32x2_t)vdup_lane_s32(*a3, 1), (float32x2_t)*a3, 1), v16, v16).f32[0]));
  v73 = (int8x16_t)vmulq_f32(v72, (float32x4_t)xmmword_2245F4CE0);
  v74 = (int8x16_t)vmulq_f32(v72, (float32x4_t)xmmword_2245F4CF0);
  v75 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), v73, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v74, v74, 0xCuLL), v74, 8uLL));
  *(int32x2_t *)v74.i8 = vdup_lane_s32(*(int32x2_t *)v75.i8, 1);
  v73.i64[0] = vextq_s8(v75, v75, 8uLL).u64[0];
  *(float *)v74.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8), *(float32x2_t *)v74.i8, *(float32x2_t *)v75.i8, 1), *(float32x2_t *)v73.i8, *(float32x2_t *)v73.i8).f32[0]);
  v110 = (float32x4_t)v75;
  v112 = *(int32x2_t *)v74.i8;
  v76.f32[0] = asinf(*(float *)v74.i32);
  v109 = v76;
  if (*(float *)v112.i32 <= 0.00001
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/DebugUtil.cpp", 166, (uint64_t)"length > 1e-5", 13, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v77 = (int8x16_t)vdivq_f32(v110, (float32x4_t)vdupq_lane_s32(v112, 0));
  v78 = (int8x16_t)vmulq_n_f32((float32x4_t)v77, v109.f32[0]);
  v79 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), vmul_lane_f32(v109, *(float32x2_t *)v77.i8, 1), *(float32x2_t *)v78.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL), vmul_f32(v109, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL))).f32[0];
  if (v79 >= 0.0061)
  {
    v85 = sqrtf(v79);
    v111 = v79;
    v113 = v78;
    v86 = __sincosf_stret(v85);
    cosval = v86.__cosval;
    v78 = v113;
    v81 = v86.__sinval / v85;
    v80 = (float)(1.0 / v111) * (float)(1.0 - v86.__cosval);
    v83 = *(float **)a1;
    v84 = *(float **)(a1 + 8);
    if (*(float **)a1 == v84)
      return;
  }
  else
  {
    v80 = 0.5 - (float)(v79 * (float)((float)(v79 / -720.0) + 0.041667));
    v81 = 1.0 - (float)(v79 * (float)(0.16667 - (float)(v79 * (float)((float)(v79 / -5040.0) + 0.0083333))));
    cosval = 1.0 - (float)(v79 * v80);
    v83 = *(float **)a1;
    v84 = *(float **)(a1 + 8);
    if (*(float **)a1 == v84)
      return;
  }
  v87 = *(float *)v78.i32 * v80;
  v88 = *(float *)&v78.i32[1] * v80;
  *(float *)&v89 = cosval + (float)(*(float *)v78.i32 * (float)(*(float *)v78.i32 * v80));
  *(float *)&v90 = cosval + (float)(*(float *)&v78.i32[1] * (float)(*(float *)&v78.i32[1] * v80));
  v91 = *(float *)&v78.i32[2] * (float)(*(float *)&v78.i32[2] * v80);
  v92 = *(float *)&v78.i32[1] * (float)(*(float *)v78.i32 * v80);
  v93 = *(float *)&v78.i32[2] * v87;
  v94 = *(float *)&v78.i32[2] * v88;
  *(float *)v78.i32 = *(float *)v78.i32 * v81;
  v95 = *(float *)&v78.i32[1] * v81;
  v96 = *(float *)&v78.i32[2] * v81;
  *(float *)&v97 = v92 - v96;
  v98 = v95 + v93;
  v99.i32[3] = 0;
  v99.i64[0] = __PAIR64__(v92 + v96, v89);
  v99.f32[2] = v93 - v95;
  v101.i32[3] = 0;
  v100.i32[3] = 0;
  v100.i64[0] = __PAIR64__(v90, v97);
  v101.f32[0] = v98;
  v101.f32[1] = v94 - *(float *)v78.i32;
  v101.f32[2] = cosval + v91;
  __asm { FMOV            V1.4S, #1.0 }
  _Q1.i64[0] = *(_QWORD *)a2;
  _Q1.i32[2] = *(_DWORD *)(a2 + 8);
  do
  {
    v100.f32[2] = *(float *)v78.i32 + v94;
    v107 = vaddq_f32(_Q1, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v99, *v83), v100, v83[1]), v101, v83[2]));
    v108 = vdivq_f32(v107, (float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3));
    v83[2] = v108.f32[2];
    *(_QWORD *)v83 = v108.i64[0];
    v83 += 3;
  }
  while (v83 != v84);
}

void sub_223A96EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t *v17;
  void *v18;

  sub_22316F8F4(v17);
  if (v18)
    operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_223A96F40(_QWORD *a1, uint64_t a2, uint64_t a3, int32x4_t a4, int32x4_t a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t *v11;
  float32x2_t *v12;
  uint64_t (***v13)();
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  unsigned int v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  uint64_t v51;
  float *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  std::mutex *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v63;
  std::string::size_type v64;
  int v65;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  std::string __p;
  uint64_t (**v77)();
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  int v89;
  int v90;
  void *v91[3];
  void *v92;
  uint64_t (***v93)();
  uint64_t v94;
  _BYTE v95[24];
  _OWORD v96[2];
  __int128 v97;
  _BYTE v98[50];
  char v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  a5.i64[0] = 0x410000003C23D70ALL;
  v94 = 0x410000003C23D70ALL;
  v11 = (float32x4_t *)(a2 + 1336);
  v12 = (float32x2_t *)(a2 + 1240);
  sub_223A978C8(a1, 0, (__int32 *)&v94, a2 + 1336, a2 + 1240, 0x20u, &v92, a4, a5, a9);
  v13 = (uint64_t (***)())v92;
  v14 = (unint64_t)v93;
  memset(v98, 0, 24);
  v15 = (char *)v93 - (_BYTE *)v92;
  if (v93 == v92)
  {
    v17 = 0uLL;
  }
  else
  {
    if ((unint64_t)v15 >= 0x1C71C71C71C71C71)
      sub_22352449C();
    v16 = v15 >> 3;
    *(_QWORD *)v98 = operator new(72 * (v15 >> 3));
    *(_QWORD *)&v98[8] = *(_QWORD *)v98;
    *(_QWORD *)&v98[16] = *(_QWORD *)v98 + 72 * v16;
    *(_QWORD *)v95 = v98;
    do
    {
      v77 = *v13;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      LODWORD(v78) = 1065353216;
      DWORD1(v79) = 1065353216;
      DWORD2(v80) = 1065353216;
      HIDWORD(v81) = 1065353216;
      sub_223A9DF08((char ***)v95, (uint64_t)&v77);
      ++v13;
    }
    while (v13 != (uint64_t (***)())v14);
    v17 = *(_OWORD *)v98;
    v15 = *(_QWORD *)&v98[16];
  }
  *(_OWORD *)v91 = v17;
  v91[2] = (void *)v15;
  sub_223CDAB6C(a3);
  sub_223CDCDE8(*(_QWORD *)(a3 + 72), (uint64_t *)v91, v11, v12, 1u, 0, &v86);
  if (*(_BYTE *)(a2 + 440))
  {
    if ((!*(_DWORD *)(a2 + 416) || !*(_DWORD *)(a2 + 420))
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_223C3E368(a2 + 360, (uint64_t)&v77);
    v11 = (float32x4_t *)*((_QWORD *)&v78 + 1);
    a3 = v79;
    v14 = *(_QWORD *)((char *)&v80 + 4);
    LODWORD(v13) = HIDWORD(v81);
    if (*(_BYTE *)(a2 + 56))
      goto LABEL_12;
LABEL_17:
    v98[0] = 0;
    v99 = 0;
    goto LABEL_18;
  }
  if (!*(_BYTE *)(a2 + 56))
    goto LABEL_17;
LABEL_12:
  if ((!*(_DWORD *)(a2 + 32) || !*(_DWORD *)(a2 + 36))
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1145, (uint64_t)"!depth.depth->Empty()", 21, (uint64_t)"Depth buffer not valid", 22, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223C3BF78(a2, (uint64_t)v95);
  *(_QWORD *)v98 = &off_24EC200A8;
  *(_OWORD *)&v98[8] = *(_OWORD *)&v95[8];
  *(_OWORD *)&v98[24] = v96[0];
  *(_OWORD *)&v98[34] = *(_OWORD *)((char *)v96 + 10);
  v99 = 1;
LABEL_18:
  v77 = &off_24EC24BA0;
  sub_223203A34(&v98[32], &v78);
  if (v99)
  {
    v18 = *(std::__shared_weak_count **)&v98[16];
    if (*(_QWORD *)&v98[16])
    {
      v19 = (unint64_t *)(*(_QWORD *)&v98[16] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = v84;
  if (v84)
  {
    v22 = v83;
    if (v83)
    {
      v23 = 0;
      v24 = v90;
      v25 = v88;
      v26 = v85;
      v27 = *((_QWORD *)&v79 + 1);
      do
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = v89;
        v32 = v25 + 4 * (v24 * v23);
        v33 = v82;
        v34 = v22;
        do
        {
          v35 = *(float *)(v32 + 4 * v28);
          if (*(float *)&v94 >= v35)
            v36 = *(float *)&v94;
          else
            v36 = *(float *)(v32 + 4 * v28);
          if (*((float *)&v94 + 1) >= v35)
            v37 = v36;
          else
            v37 = *((float *)&v94 + 1);
          v38 = (float)(*((float *)&v94 + 1) - *(float *)&v94) * 0.25;
          v39 = 1.0 / v38;
          v40 = (float)(*(float *)&v94 + *((float *)&v94 + 1)) * 0.5;
          v41 = 1.5 - (float)((float)(1.0 / v38) * vabds_f32(v37 - v38, v40));
          v42 = v41 * 255.0;
          if (v41 <= 0.0)
            v42 = 0.0;
          if (v41 <= 1.0)
            v43 = v42;
          else
            v43 = 255.0;
          v44 = (int)v43;
          v45 = 1.5 - (float)(v39 * vabds_f32(v37, v40));
          v46 = v45 * 255.0;
          if (v45 <= 0.0)
            v46 = 0.0;
          if (v45 <= 1.0)
            v47 = v46;
          else
            v47 = 255.0;
          v48 = 1.5 - (float)(v39 * vabds_f32(v37 + v38, v40));
          v49 = v48 * 255.0;
          if (v48 <= 0.0)
            v49 = 0.0;
          if (v48 <= 1.0)
            v50 = v49;
          else
            v50 = 255.0;
          v51 = v27 + 4 * (v26 * v23) + 4 * v29;
          v52 = (float *)(a3 + 4 * ((_DWORD)v13 * v23) + 4 * v30);
          *(float *)v51 = (float)(*v52 * 0.4) + (float)((float)((float)v44 / 255.0) * 0.6);
          *(float *)(v51 + 4) = (float)(v52[1] * 0.4) + (float)((float)((float)(int)v47 / 255.0) * 0.6);
          *(float *)(v51 + 8) = (float)(v52[2] * 0.4) + (float)((float)((float)(int)v50 / 255.0) * 0.6);
          *(_DWORD *)(v51 + 12) = 1065353216;
          v30 += HIDWORD(v14);
          v29 += v33;
          v28 += v31;
          --v34;
        }
        while (v34);
        ++v23;
      }
      while (v23 != v21);
    }
  }
  *(_QWORD *)v98 = "cv3d.recon.";
  *(_QWORD *)&v98[8] = 11;
  *(_QWORD *)&v98[16] = "JasperMeshing.Images";
  *(_QWORD *)&v98[24] = 20;
  sub_2231A9820((uint64_t)v98, (uint64_t)&v98[32], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v53 = sub_2241471F8();
    v54 = v53[2];
    if (!v54)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v54 = v53[2];
    }
    v55 = *(_QWORD *)(v54 + 64);
    v56 = (std::mutex *)(v55 + 32);
    std::mutex::lock((std::mutex *)(v55 + 32));
    v57 = *(_QWORD *)(v55 + 96);
    v58 = *(_QWORD *)(v55 + 104);
    std::mutex::unlock(v56);
    if (v57 != v58)
    {
      sub_2241471F8();
      v59 = (*(uint64_t (**)(uint64_t *))(qword_2557952E0 + 48))(&qword_2557952E0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59))
      {
        memset(v98, 0, 32);
        *(_DWORD *)&v98[32] = 728325608;
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59))
        {
          v95[23] = 10;
          strcpy(v95, "Mesh depth");
          *(_QWORD *)&v97 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
          *((_QWORD *)&v97 + 1) = 2;
          v60 = sub_2241471F8();
          sub_223A9E0A8((uint64_t)v60, v59, (uint64_t)&v77, (uint64_t *)v95, &v97);
          if ((v95[23] & 0x80000000) != 0)
            operator delete(*(void **)v95);
        }
        kdebug_trace();
      }
    }
  }
  memset(v98, 0, 32);
  *(_DWORD *)&v98[32] = 728325624;
  kdebug_trace();
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v63 = p_p->__r_.__value_.__r.__words[0];
    v64 = p_p->__r_.__value_.__l.__size_;
    v65 = p_p->__r_.__value_.__s.__data_[16];
    if (v63 == 0x6365722E64337663 && v64 == 0x73746174532E6E6FLL && v65 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v11)
  {
    v71 = &v11->u64[1];
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      (*(void (**)(float32x4_t *))(v11->i64[0] + 16))(v11);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
    }
  }
  v73 = v87;
  if (v87)
  {
    p_shared_owners = (unint64_t *)&v87->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (v92)
  {
    v93 = (uint64_t (***)())v92;
    operator delete(v92);
  }
}

void sub_223A9776C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223A978C8(_QWORD *a1@<X0>, int a2@<W1>, __int32 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, _QWORD *a7@<X8>, int32x4_t a8@<Q0>, int32x4_t a9@<Q1>, float32x4_t a10@<Q5>)
{
  float32x2_t v10;
  double v11;
  __int128 v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  double v20;
  int32x2_t v21;
  unsigned __int32 v22;
  float32x4_t v24;
  float32x4_t v25;
  unsigned int v26;
  signed int v27;
  signed int v28;
  double v33;
  __n128 v34;
  __n128 v35;
  int8x8_t v36;
  float32x4_t v37;
  int32x2_t v38;
  int32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x8_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t **v69;
  char *v70;
  unint64_t v71;
  char *v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t *v78;
  float32x4_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99[16];
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *__p;
  void *v107;
  _OWORD v108[3];
  double v109;
  unsigned __int32 v110;
  int v111;
  uint64_t v112;
  __int32 v113;
  uint64_t v114;
  __int32 v115;
  uint64_t v116;

  LODWORD(v11) = a8.i32[0];
  a8.i64[0] = *(_QWORD *)a4;
  a8.i32[2] = *(_DWORD *)(a4 + 8);
  a9.i64[0] = *(_QWORD *)(a4 + 16);
  a9.i32[2] = *(_DWORD *)(a4 + 24);
  *(_QWORD *)&v16 = vzip1q_s32(a8, a9).u64[0];
  a10.i64[0] = *(_QWORD *)(a4 + 48);
  a10.i32[2] = *(_DWORD *)(a4 + 56);
  v17 = (int8x16_t)vnegq_f32(a10);
  v18 = (int8x16_t)vtrn2q_s32(a8, a9);
  v18.i32[2] = HIDWORD(*(_QWORD *)(a4 + 32));
  v10.i32[0] = *(_DWORD *)(a4 + 40);
  v19 = (int8x16_t)vzip2q_s32(a8, a9);
  v20 = COERCE_DOUBLE(vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v16, *(float *)v17.i32), *(float32x2_t *)v18.i8, *(float32x2_t *)a10.f32, 1), *(float32x2_t *)v19.i8, a10, 2));
  v19.i32[2] = v10.i32[0];
  v21 = (int32x2_t)vdupq_laneq_s32((int32x4_t)v19, 2).u64[0];
  *((_QWORD *)&v16 + 1) = *(_QWORD *)(a4 + 32);
  v22 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(a4 + 32), *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(a4 + 32), 1), *(float32x2_t *)a10.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), v10).u32[0];
  _Q2.i32[3] = 0;
  _Q2.i32[0] = vdupq_lane_s32(*(int32x2_t *)&v18, 0).i32[3];
  *(uint64_t *)((char *)_Q2.i64 + 4) = vextq_s8(v18, v19, 4uLL).u64[0];
  v19.i64[1] = v21.u32[0];
  v108[1] = _Q2;
  v108[2] = v19;
  v108[0] = v16;
  v109 = v20;
  v110 = v22;
  v111 = 1065353216;
  *(double *)_Q2.i64 = v20;
  _Q2.i32[2] = v22;
  v94 = v11;
  *(float *)&v20 = 1.0 / *(float *)&v11;
  v19.i32[0] = *a3;
  v21.i32[0] = a3[1];
  v24 = (float32x4_t)vdupq_lane_s32(v21, 0);
  v17.i64[0] = 0x3F0000003F000000;
  v17.i64[1] = 0x3F0000003F000000;
  v25 = vaddq_f32(vmulq_n_f32(vsubq_f32(_Q2, v24), 1.0 / *(float *)&v11), (float32x4_t)v17);
  v97 = v25;
  v25.i32[0] = v25.i32[2];
  v26 = -a6;
  v98 = vaddq_f32(vmulq_n_f32(vaddq_f32(_Q2, v24), 1.0 / *(float *)&v11), (float32x4_t)v17);
  v27 = vcvtms_s32_f32(v25.f32[2]) & -a6;
  v28 = vcvtms_s32_f32(v98.f32[2]) & -a6;
  v112 = 0;
  __asm { FMOV            V2.2S, #1.0 }
  v116 = _Q2.i64[0];
  sub_223EA0B54(v99, (float32x2_t *)v108, a5, (float *)&v112, (float *)&v116, (float32x4_t)v19, *(float *)v21.i32, *(double *)_Q2.i64, v20, v24, *(double *)v25.i64, 0.0000305175853);
  *a7 = 0;
  a7[1] = 0;
  v87 = a7;
  a7[2] = 0;
  if (v27 <= v28)
  {
    v37.i64[1] = v97.i64[1];
    v36 = (int8x8_t)vdup_n_s32(v26);
    *(int8x8_t *)v37.f32 = vand_s8(v36, (int8x8_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v97.f32)));
    v38 = (int32x2_t)vand_s8(v36, (int8x8_t)vcvt_s32_f32(vrndm_f32(*(float32x2_t *)v98.f32)));
    v39 = vcgt_s32(*(int32x2_t *)v37.f32, v38);
    if (((v39.i32[1] | v39.i32[0]) & 1) == 0)
    {
      v91 = v37.i32[0];
      v40 = v38.i32[0];
      v82 = v37.i32[1];
      v88 = 0;
      v90 = v38.i32[1];
      v41 = v27;
      v81 = v28;
      do
      {
        v42 = v41;
        v37.f32[0] = (float)(int)v41;
        v96 = v37;
        v83 = v41 + a6;
        v37.f32[0] = (float)(int)(v41 + a6);
        v95 = *(double *)v37.i64;
        v43 = v82;
        v92 = (37783632 * v41) ^ (73856093 * a2);
        do
        {
          v93 = v43 + a6;
          v44 = v91;
          v45 = v92 ^ (83492791 * v43);
          do
          {
            v37.f32[0] = (float)(int)v44;
            v37.f32[1] = (float)(int)v43;
            v37.i32[2] = v96.i32[0];
            v47 = v44 + a6;
            v48.f32[0] = (float)(int)(v44 + a6);
            v48.f32[1] = (float)(int)(v43 + a6);
            v49 = vmulq_n_f32(v37, *(float *)&v94);
            v48.i64[1] = __PAIR64__(v96.u32[3], LODWORD(v95));
            v113 = v49.i32[2];
            v50 = vmulq_n_f32(v48, *(float *)&v94);
            v112 = v49.i64[0];
            v115 = v50.i32[2];
            v114 = v50.i64[0];
            if (sub_223EA4E3C((uint64_t)v99, (uint64_t)&v112, v49, v50, v94, v95, v33, v34, v35))
            {
              v51 = (int8x8_t)a1[1];
              if (v51)
              {
                v52 = v45 ^ (19349669 * v44);
                *(int8x8_t *)v37.f32 = vcnt_s8(v51);
                v37.i16[0] = vaddlv_u8(*(uint8x8_t *)v37.f32);
                if (v37.u32[0] > 1uLL)
                {
                  v53 = v45 ^ (19349669 * v44);
                  if (v52 >= *(_QWORD *)&v51)
                    v53 = v52 % *(_QWORD *)&v51;
                }
                else
                {
                  v53 = (*(_QWORD *)&v51 - 1) & v52;
                }
                v54 = *(uint64_t ***)(*a1 + 8 * v53);
                if (v54)
                {
                  v55 = *v54;
                  if (v55)
                  {
                    if (v37.u32[0] < 2uLL)
                    {
                      v56 = *(_QWORD *)&v51 - 1;
                      while (1)
                      {
                        v58 = v55[1];
                        if (v52 == v58)
                        {
                          if (*((_DWORD *)v55 + 4) == a2
                            && *((_DWORD *)v55 + 5) == (_DWORD)v44
                            && *((_DWORD *)v55 + 6) == (_DWORD)v43
                            && *((_DWORD *)v55 + 7) == v42)
                          {
                            goto LABEL_47;
                          }
                        }
                        else if ((v58 & v56) != v53)
                        {
                          goto LABEL_19;
                        }
                        v55 = (uint64_t *)*v55;
                        if (!v55)
                          goto LABEL_19;
                      }
                    }
                    do
                    {
                      v57 = v55[1];
                      if (v52 == v57)
                      {
                        if (*((_DWORD *)v55 + 4) == a2
                          && *((_DWORD *)v55 + 5) == (_DWORD)v44
                          && *((_DWORD *)v55 + 6) == (_DWORD)v43
                          && *((_DWORD *)v55 + 7) == v42)
                        {
LABEL_47:
                          v59 = v55 + 4;
                          v60 = v87;
                          v61 = v87[2];
                          if ((unint64_t)v88 < v61)
                          {
                            *(_QWORD *)v88 = v59;
                            v46 = (uint64_t)(v88 + 8);
                            goto LABEL_18;
                          }
                          v62 = (char *)*v87;
                          v63 = (uint64_t)&v88[-*v87];
                          v64 = v63 >> 3;
                          v65 = (v63 >> 3) + 1;
                          if (v65 >> 61)
                            sub_22316E078();
                          v66 = v61 - (_QWORD)v62;
                          if (v66 >> 2 > v65)
                            v65 = v66 >> 2;
                          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
                            v67 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v67 = v65;
                          if (v67)
                          {
                            v85 = v55 + 4;
                            v86 = (uint64_t)&v88[-*v87];
                            if (v67 >> 61)
                              sub_223174E94();
                            v84 = v67;
                            v68 = operator new(8 * v67);
                            v67 = v84;
                            v63 = v86;
                            v64 = v86 >> 3;
                            v69 = (uint64_t **)&v68[8 * (v86 >> 3)];
                            *v69 = v85;
                            v46 = (uint64_t)(v69 + 1);
                            v70 = (char *)(v88 - v62);
                            if (v88 != v62)
                            {
LABEL_57:
                              v71 = (unint64_t)(v70 - 8);
                              if (v71 < 0x168)
                              {
                                v72 = v88;
                                goto LABEL_59;
                              }
                              v75 = (v88 - 8 - v62) & 0xFFFFFFFFFFFFFFF8;
                              if (&v68[v63 - 8 - v75] > &v68[v63 - 8])
                              {
                                v72 = v88;
                                goto LABEL_59;
                              }
                              if (&v88[-v75 - 8] > v88 - 8)
                              {
                                v72 = v88;
                                goto LABEL_59;
                              }
                              if ((unint64_t)(v88 - v68 - v63) < 0x20)
                              {
                                v72 = v88;
                                goto LABEL_59;
                              }
                              v76 = (v71 >> 3) + 1;
                              v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                              v72 = &v88[-v77];
                              v69 = (uint64_t **)((char *)v69 - v77);
                              v78 = (float32x4_t *)&v68[8 * v64 - 16];
                              v79 = (float32x4_t *)(v88 - 16);
                              v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                              do
                              {
                                v37 = *v79;
                                v78[-1] = v79[-1];
                                *v78 = v37;
                                v78 -= 2;
                                v79 -= 2;
                                v80 -= 4;
                              }
                              while (v80);
                              if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
                              {
                                do
                                {
LABEL_59:
                                  v73 = (uint64_t *)*((_QWORD *)v72 - 1);
                                  v72 -= 8;
                                  *--v69 = v73;
                                }
                                while (v72 != v62);
                              }
                              v60 = v87;
                              v74 = (char *)*v87;
                              *v87 = v69;
                              v87[1] = v46;
                              v87[2] = &v68[8 * v67];
                              if (!v74)
                              {
LABEL_18:
                                v60[1] = v46;
                                v88 = (char *)v46;
                                break;
                              }
LABEL_64:
                              v89 = v46;
                              operator delete(v74);
                              v46 = v89;
                              goto LABEL_18;
                            }
                          }
                          else
                          {
                            v68 = 0;
                            v69 = (uint64_t **)(8 * v64);
                            *(_QWORD *)(8 * v64) = v59;
                            v46 = 8 * v64 + 8;
                            v70 = (char *)(v88 - v62);
                            if (v88 != v62)
                              goto LABEL_57;
                          }
                          v60 = v87;
                          v74 = v88;
                          *v87 = v69;
                          v87[1] = v46;
                          v87[2] = &v68[8 * v67];
                          if (!v88)
                            goto LABEL_18;
                          goto LABEL_64;
                        }
                      }
                      else
                      {
                        if (v57 >= *(_QWORD *)&v51)
                          v57 %= *(_QWORD *)&v51;
                        if (v57 != v53)
                          break;
                      }
                      v55 = (uint64_t *)*v55;
                    }
                    while (v55);
                  }
                }
              }
            }
LABEL_19:
            v44 = v47;
          }
          while (v47 <= v40);
          v43 += a6;
        }
        while (v93 <= v90);
        v41 = v83;
      }
      while (v83 <= v81);
    }
  }
  if (__p)
  {
    v107 = __p;
    operator delete(__p);
  }
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
}

void sub_223A97F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;

  v60 = *(void **)a17;
  if (*(_QWORD *)a17)
  {
    *(_QWORD *)(a17 + 8) = v60;
    operator delete(v60);
    v61 = __p;
    if (!__p)
    {
LABEL_3:
      v62 = a55;
      if (!a55)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v61 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v61);
  v62 = a55;
  if (!a55)
  {
LABEL_4:
    v63 = a52;
    if (!a52)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v62);
  v63 = a52;
  if (!a52)
  {
LABEL_5:
    v64 = a49;
    if (!a49)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v63);
  v64 = a49;
  if (!a49)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(v64);
  _Unwind_Resume(exception_object);
}

void sub_223A97F90(double *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int128 v14;
  void *__dst[2];
  unint64_t v16;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = strlen(a4);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_22316DBC0();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v16 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v16) = v8;
      v10 = __dst;
      if (!v8)
      {
LABEL_10:
        *((_BYTE *)v9 + (_QWORD)v10) = 0;
        *(_QWORD *)&v14 = (uint64_t)(*a1 * 1000000000.0);
        *((_QWORD *)&v14 + 1) = 2;
        v13 = sub_2241471F8();
        sub_22329D76C((uint64_t)v13, a2, a3, (uint64_t)__dst, &v14);
        if (SHIBYTE(v16) < 0)
          operator delete(__dst[0]);
        return;
      }
    }
    memcpy(v10, a4, (size_t)v9);
    goto LABEL_10;
  }
}

void sub_223A980B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A980CC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unsigned int *v13;
  unsigned int *v14;
  _QWORD *v15;
  uint64_t *v16;
  _DWORD *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *i;
  unsigned int v46;
  char *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  const char *v63;
  uint64_t v64;
  float32x4_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  std::mutex *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::string::size_type size;
  std::string *v86;
  std::string::size_type v87;
  std::string::size_type v88;
  int v89;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t *v96;
  float32x4_t v98;
  float32x4_t v99;
  std::string v100;
  uint64_t *v101;
  _QWORD *v102;
  const char *v103;
  void *__p[2];
  __int128 v105;
  int v106[4];
  uint64_t *v107;
  unint64_t v108;
  const char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  _BYTE v114[4];
  int v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    return;
  v3 = sub_2241471F8();
  v4 = v3[2];
  if (!v4)
  {
    v5 = v3;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = v5[2];
  }
  v6 = *(_QWORD *)(v4 + 64);
  v7 = (std::mutex *)(v6 + 32);
  std::mutex::lock((std::mutex *)(v6 + 32));
  v9 = *(_QWORD *)(v6 + 96);
  v8 = *(_QWORD *)(v6 + 104);
  std::mutex::unlock(v7);
  if (v9 == v8)
    return;
  v107 = (uint64_t *)"cv3d.recon.";
  v108 = 11;
  v109 = "JasperMeshing.Mesh";
  v110 = 18;
  sub_2231A9820((uint64_t)&v107, (uint64_t)&v111, 0, 0, (std::string *)__p);
  sub_2241471F8();
  v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  v12 = v11;
  if (SBYTE7(v105) < 0)
  {
    operator delete(__p[0]);
    if ((v12 & 1) == 0)
      return;
  }
  else if ((v11 & 1) == 0)
  {
    return;
  }
  v102 = 0;
  v103 = 0;
  v101 = (uint64_t *)&v102;
  if (*(_BYTE *)(a2 + 8))
  {
    v14 = **(unsigned int ***)a2;
    v13 = *(unsigned int **)(*(_QWORD *)a2 + 8);
    v108 = 0;
    v109 = 0;
    v107 = (uint64_t *)&v108;
    if (v14 == v13)
    {
      v15 = 0;
    }
    else
    {
      do
      {
        v16 = sub_223A3C618(&v107, (uint64_t *)&v108, (uint64_t **)__p, (uint64_t **)&v100, v14);
        if (!*v16)
        {
          v17 = operator new(0x20uLL);
          v17[7] = *v14;
          v18 = __p[0];
          *(_QWORD *)v17 = 0;
          *((_QWORD *)v17 + 1) = 0;
          *((_QWORD *)v17 + 2) = v18;
          *v16 = (uint64_t)v17;
          if (*v107)
          {
            v107 = (uint64_t *)*v107;
            v17 = (_DWORD *)*v16;
          }
          sub_2231A9A8C((uint64_t *)v108, (uint64_t *)v17);
          ++v109;
        }
        ++v14;
      }
      while (v14 != v13);
      v15 = v102;
    }
    sub_223198030((uint64_t)&v101, v15);
    v19 = (uint64_t *)v108;
    v101 = v107;
    v102 = (_QWORD *)v108;
    v103 = v109;
    if (v109)
    {
      *(_QWORD *)(v108 + 16) = &v102;
      v107 = (uint64_t *)&v108;
      v108 = 0;
      v109 = 0;
      v19 = 0;
    }
    else
    {
      v101 = (uint64_t *)&v102;
    }
    sub_223198030((uint64_t)&v107, v19);
  }
  v20 = a1[7];
  if (a1[8] != v20)
  {
    v21 = a1[10];
    v22 = *(_QWORD *)(v20 + 8 * (v21 / 0x1F));
    v23 = v22 + 132 * (v21 % 0x1F);
    v24 = *(_QWORD *)(v20 + 8 * ((a1[11] + v21) / 0x1F)) + 132 * ((a1[11] + v21) % 0x1F);
    if (v23 != v24)
    {
      v25 = v20 + 8 * (v21 / 0x1F);
      v26 = a1[16];
      if (!*(_BYTE *)(a2 + 8))
      {
        v27 = 0;
        v92 = 0;
        do
        {
          v23 += 132;
          if (v23 - v22 == 4092)
          {
            v93 = *(_QWORD *)(v25 + 8);
            v25 += 8;
            v22 = v93;
            v23 = v93;
          }
          v27 += *(_DWORD *)(v26 + 168 * v92++ + 24);
        }
        while (v23 != v24);
        goto LABEL_41;
      }
      if (v102)
      {
        v27 = 0;
        v28 = 0;
        while (1)
        {
          v29 = v102;
          while (1)
          {
            v30 = *((_DWORD *)v29 + 7);
            if (v30 <= v28)
              break;
LABEL_30:
            v29 = (_QWORD *)*v29;
            if (!v29)
              goto LABEL_35;
          }
          if (v30 < v28)
            break;
          v27 += *(_QWORD *)(v26 + 168 * v28 + 24);
LABEL_35:
          v23 += 132;
          if (v23 - v22 == 4092)
          {
            v31 = *(_QWORD *)(v25 + 8);
            v25 += 8;
            v22 = v31;
            v23 = v31;
          }
          ++v28;
          if (v23 == v24)
            goto LABEL_41;
        }
        ++v29;
        goto LABEL_30;
      }
      do
      {
        v23 += 132;
        if (v23 - v22 == 4092)
        {
          v32 = *(_QWORD *)(v25 + 8);
          v25 += 8;
          v22 = v32;
          v23 = v32;
        }
      }
      while (v23 != v24);
    }
  }
  v27 = 0;
LABEL_41:
  sub_2241498F4((uint64_t)&v107, 0);
  sub_22339E3C8((uint64_t)&v107, v27);
  sub_22339E3C8((uint64_t)&v111, v27);
  v116 = 1;
  v33 = a1[7];
  if (a1[8] != v33)
  {
    v34 = a1[10];
    v35 = *(_QWORD *)(v33 + 8 * (v34 / 0x1F));
    v36 = v35 + 132 * (v34 % 0x1F);
    v95 = *(_QWORD *)(v33 + 8 * ((a1[11] + v34) / 0x1F)) + 132 * ((a1[11] + v34) % 0x1F);
    if (v36 != v95)
    {
      v37 = 0;
      v96 = (uint64_t *)(v33 + 8 * (v34 / 0x1F));
      __asm { FMOV            V0.4S, #1.0 }
      v99 = _Q0;
      v94 = a1;
      do
      {
        v42 = a1[16] + 168 * v37;
        v43 = *(_QWORD *)(v42 + 56);
        v44 = *(_QWORD *)(v42 + 64);
        if (*(_BYTE *)(a2 + 8))
        {
          for (i = v102; i; i = (_QWORD *)*i)
          {
            v46 = *((_DWORD *)i + 7);
            if (v46 <= v37)
            {
              if (v46 >= v37)
                goto LABEL_52;
              ++i;
            }
          }
        }
        else
        {
LABEL_52:
          if (v43 != v44)
          {
            do
            {
              if (*(_DWORD *)v43 != -1)
              {
                v48 = *(uint64_t **)(v43 + 24);
                v49 = (_QWORD *)v108;
                if (v108 >= (unint64_t)v109)
                {
                  v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - (_QWORD)v107) >> 2);
                  v53 = v52 + 1;
                  if (v52 + 1 > 0x1555555555555555)
                    goto LABEL_124;
                  if (0x5555555555555556 * ((v109 - (const char *)v107) >> 2) > v53)
                    v53 = 0x5555555555555556 * ((v109 - (const char *)v107) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v109 - (const char *)v107) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v53 = 0x1555555555555555;
                  if (v53)
                  {
                    LODWORD(v100.__r_.__value_.__l.__data_) = v53;
                    if (HIDWORD(v110) == -1)
                      goto LABEL_123;
                    __p[0] = &v100;
                    v54 = ((uint64_t (*)(void **, uint64_t *))off_24EC5EAC8[HIDWORD(v110)])(__p, &v110);
                  }
                  else
                  {
                    v54 = 0;
                    v55 = 0;
                  }
                  v56 = v54 + 12 * v52;
                  v57 = *v48;
                  *(_DWORD *)(v56 + 8) = *((_DWORD *)v48 + 2);
                  *(_QWORD *)v56 = v57;
                  v59 = (uint64_t)v107;
                  v58 = (uint64_t *)v108;
                  v60 = v56;
                  if ((uint64_t *)v108 != v107)
                  {
                    do
                    {
                      v61 = *(uint64_t *)((char *)v58 - 12);
                      v58 = (uint64_t *)((char *)v58 - 12);
                      v62 = *((_DWORD *)v58 + 2);
                      *(_QWORD *)(v60 - 12) = v61;
                      v60 -= 12;
                      *(_DWORD *)(v60 + 8) = v62;
                    }
                    while (v58 != (uint64_t *)v59);
                    v58 = v107;
                  }
                  v51 = (uint64_t *)(v56 + 12);
                  v107 = (uint64_t *)v60;
                  v108 = v56 + 12;
                  v63 = v109;
                  v109 = (const char *)(v54 + 12 * v55);
                  if (v58)
                  {
                    __p[0] = v58;
                    LODWORD(__p[1]) = -1431655765 * ((unint64_t)(v63 - (const char *)v58) >> 2);
                    if (HIDWORD(v110) == -1)
                      sub_22316DD70();
                    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    _Q0 = (float32x4_t)((__n128 (*)(std::string *, uint64_t *))off_24EC5EAD8[HIDWORD(v110)])(&v100, &v110);
                  }
                }
                else
                {
                  v50 = *v48;
                  *(_DWORD *)(v108 + 8) = *((_DWORD *)v48 + 2);
                  *v49 = v50;
                  v51 = (_QWORD *)((char *)v49 + 12);
                }
                v108 = (unint64_t)v51;
                v64 = *(_QWORD *)(v43 + 32);
                _Q0.i64[0] = *(_QWORD *)v64;
                _Q0.i32[2] = *(_DWORD *)(v64 + 8);
                v65.i64[0] = 0x3F0000003F000000;
                v65.i64[1] = 0x3F0000003F000000;
                _Q0 = vmulq_f32(vaddq_f32(_Q0, v99), v65);
                v66 = v112;
                if ((unint64_t)v112 < v113)
                {
                  *((_DWORD *)v112 + 2) = _Q0.i32[2];
                  *v66 = _Q0.i64[0];
                  v47 = (char *)v66 + 12;
                }
                else
                {
                  v67 = 0xAAAAAAAAAAAAAAABLL * ((v112 - v111) >> 2);
                  v68 = v67 + 1;
                  if (v67 + 1 > 0x1555555555555555)
LABEL_124:
                    sub_22316E078();
                  if (0x5555555555555556 * ((uint64_t)(v113 - (_QWORD)v111) >> 2) > v68)
                    v68 = 0x5555555555555556 * ((uint64_t)(v113 - (_QWORD)v111) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (_QWORD)v111) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v68 = 0x1555555555555555;
                  if (v68)
                  {
                    v98 = _Q0;
                    LODWORD(v100.__r_.__value_.__l.__data_) = v68;
                    if (v115 == -1)
LABEL_123:
                      sub_22316DD70();
                    __p[0] = &v100;
                    v69 = ((uint64_t (*)(void **, _BYTE *))off_24EC5EAC8[v115])(__p, v114);
                    _Q0 = v98;
                  }
                  else
                  {
                    v69 = 0;
                    v70 = 0;
                  }
                  v71 = v69 + 12 * v67;
                  *(_QWORD *)v71 = _Q0.i64[0];
                  *(_DWORD *)(v71 + 8) = _Q0.i32[2];
                  v73 = v111;
                  v72 = v112;
                  v74 = (char *)v71;
                  if (v112 != v111)
                  {
                    do
                    {
                      v75 = *(_QWORD *)(v72 - 12);
                      v72 -= 12;
                      v76 = *((_DWORD *)v72 + 2);
                      *(_QWORD *)(v74 - 12) = v75;
                      v74 -= 12;
                      *((_DWORD *)v74 + 2) = v76;
                    }
                    while (v72 != v73);
                    v72 = v111;
                  }
                  v47 = (char *)(v71 + 12);
                  v111 = v74;
                  v112 = (char *)(v71 + 12);
                  v77 = v113;
                  v113 = v69 + 12 * v70;
                  if (v72)
                  {
                    __p[0] = v72;
                    LODWORD(__p[1]) = -1431655765 * ((v77 - (unint64_t)v72) >> 2);
                    if (v115 == -1)
                      sub_22316DD70();
                    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                    ((void (*)(std::string *, _BYTE *))off_24EC5EAD8[v115])(&v100, v114);
                  }
                }
                v112 = v47;
              }
              v43 += 224;
            }
            while (v43 != v44);
            v35 = *v96;
            v36 += 132;
            if (v36 - *v96 != 4092)
              goto LABEL_44;
LABEL_93:
            v35 = v96[1];
            ++v96;
            v36 = v35;
            goto LABEL_44;
          }
        }
        v36 += 132;
        if (v36 - v35 == 4092)
          goto LABEL_93;
LABEL_44:
        a1 = v94;
        ++v37;
      }
      while (v36 != v95);
    }
  }
  __p[0] = "cv3d.recon.";
  __p[1] = (void *)11;
  *(_QWORD *)&v105 = "JasperMeshing.Mesh";
  *((_QWORD *)&v105 + 1) = 18;
  sub_2231A9820((uint64_t)__p, (uint64_t)v106, 0, 0, &v100);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v78 = sub_2241471F8();
    v79 = v78[2];
    if (!v79)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v79 = v78[2];
    }
    v80 = *(_QWORD *)(v79 + 64);
    v81 = (std::mutex *)(v80 + 32);
    std::mutex::lock((std::mutex *)(v80 + 32));
    v83 = *(_QWORD *)(v80 + 96);
    v82 = *(_QWORD *)(v80 + 104);
    std::mutex::unlock(v81);
    if (v83 != v82)
    {
      sub_2241471F8();
      v84 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v84 + 24))(v84))
      {
        *(_OWORD *)__p = 0u;
        v105 = 0u;
        v106[0] = 728325608;
        kdebug_trace();
        sub_223A98C8C(v84, (uint64_t)&v107);
        kdebug_trace();
      }
    }
  }
  *(_OWORD *)__p = 0u;
  v105 = 0u;
  v106[0] = 728325624;
  kdebug_trace();
  size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v100.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v86 = &v100;
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v86 = (std::string *)v100.__r_.__value_.__r.__words[0];
    v87 = v86->__r_.__value_.__r.__words[0];
    v88 = v86->__r_.__value_.__l.__size_;
    v89 = v86->__r_.__value_.__s.__data_[16];
    if (v87 == 0x6365722E64337663 && v88 == 0x73746174532E6E6FLL && v89 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  sub_22316F8F4((uint64_t *)&v107);
  sub_223198030((uint64_t)&v101, v102);
}

void sub_223A98BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223A98C8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[22];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 21;
    strcpy(__p, "Representation points");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22329D76C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223A98D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A98D60(int32x2_t **a1, _QWORD *a2, uint64_t a3, int a4, float32x2_t *a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::mutex *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  float32x4_t v17;
  char v18;
  int v19;
  int32x2_t v20;
  uint64_t v21;
  unint64_t v22;
  float32x2_t *v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  float32x2_t v35;
  float32x2_t v36;
  unint64_t v37;
  float v38;
  float v39;
  int32x2_t v40;
  int32x2_t *v41;
  int32x2_t *v42;
  uint64_t *v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x2_t v47;
  int v48;
  int v49;
  int v50;
  BOOL v51;
  BOOL v52;
  float32x2_t *v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x2_t v62;
  BOOL v63;
  BOOL v65;
  BOOL v66;
  int v67;
  int v68;
  uint64_t v69;
  _BOOL4 v70;
  float32x4_t v71;
  _DWORD *v72;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  const std::string::value_type *v85;
  std::string::size_type v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  void *v91;
  void **v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  std::mutex *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  void *v111;
  void **v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  std::mutex *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  void *v131;
  void **v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  std::mutex *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  void *v151;
  void **v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  std::mutex *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  void *v171;
  void **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  std::mutex *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  _DWORD *v201;
  _DWORD *v202;
  uint64_t v203;
  void *v204;
  void **v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  std::mutex *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  _BYTE *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  float32x4_t v224;
  unsigned int v225;
  int32x2_t v226;
  int32x2_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  void *v231;
  void **v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  std::mutex *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  std::string *v241;
  uint64_t v242;
  uint64_t v243;
  std::string::size_type size;
  std::string *v245;
  std::string::size_type v246;
  std::string::size_type v247;
  int v248;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  std::mutex *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  std::string *v259;
  uint64_t v260;
  uint64_t v261;
  std::string::size_type v262;
  std::string *v263;
  std::string::size_type v264;
  std::string::size_type v265;
  int v266;
  std::__shared_weak_count *v269;
  unint64_t *p_shared_owners;
  unint64_t v271;
  int v272;
  int v273;
  _QWORD *v274;
  float32x2_t v275;
  unsigned int v276;
  float32x4_t v279;
  std::string v280;
  __int16 v281;
  char v282;
  unint64_t *v283[2];
  _QWORD **v284;
  _QWORD *v285[2];
  void *v286[2];
  int64_t v287;
  uint64_t v288;
  __int32 v289;
  uint64_t (**v290)();
  uint64_t v291;
  std::__shared_weak_count *v292;
  uint64_t v293;
  int v294;
  int v295;
  uint64_t v296[48];
  unint64_t v297[48];
  unint64_t v298[48];
  std::string __p[16];
  int32x2_t v300;
  int v301;
  _BYTE v302[32];
  _DWORD v303[4];
  _BYTE v304[40];
  __int128 v305;
  __int128 v306;
  __int16 v307;
  _BYTE v308[40];
  __int128 v309;
  __int128 v310;
  __int16 v311;
  char v312;
  uint64_t v313;
  _DWORD *v314;
  unint64_t v315;
  uint64_t v316[4];
  _QWORD v317[47];

  v317[44] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v8 = sub_2241471F8();
    v9 = v8[2];
    if (!v9)
    {
      v10 = v8;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v9 = v10[2];
    }
    v11 = *(_QWORD *)(v9 + 64);
    v12 = (std::mutex *)(v11 + 32);
    std::mutex::lock((std::mutex *)(v11 + 32));
    v14 = *(_QWORD *)(v11 + 96);
    v13 = *(_QWORD *)(v11 + 104);
    std::mutex::unlock(v12);
    if (v14 != v13)
    {
      v316[0] = (uint64_t)"cv3d.recon.";
      v316[1] = 11;
      v316[2] = (uint64_t)"JasperMeshing";
      v316[3] = 13;
      sub_2231A9820((uint64_t)v316, (uint64_t)v317, 0, 0, __p);
      sub_2241471F8();
      v15 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      v18 = v16;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((v18 & 1) == 0)
          return;
      }
      else if ((v16 & 1) == 0)
      {
        return;
      }
      v276 = (*a1)[2].u16[0];
      v19 = (*a1)[1].i32[0];
      v20 = **a1;
      v300 = v20;
      v301 = v19;
      v21 = HIDWORD(*(_QWORD *)&v20);
      v17.i32[0] = *(_DWORD *)(a3 + 224);
      v279 = v17;
      sub_2241498F4((uint64_t)v316, 0);
      sub_2241498F4((uint64_t)__p, 0);
      sub_2241498F4((uint64_t)v298, 0);
      sub_2241498F4((uint64_t)v297, 0);
      sub_2241498F4((uint64_t)v296, 0);
      if (a5[55].i8[0])
      {
        if ((!a5[52].i32[0] || !a5[52].i32[1])
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Frame/src/FrameBundle.cpp", 1175, (uint64_t)"!color.color->Empty()", 21, (uint64_t)"Color buffer not valid", 22, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        sub_223C3E368((uint64_t)&a5[45], (uint64_t)v304);
        *(_QWORD *)v308 = &off_24EC21DF8;
        *(_OWORD *)&v308[8] = *(_OWORD *)&v304[8];
        *(_OWORD *)&v308[24] = *(_OWORD *)&v304[24];
        v309 = v305;
        v310 = v306;
        v311 = v307;
        v312 = 1;
      }
      else
      {
        v308[0] = 0;
        v312 = 0;
      }
      v290 = &off_24EC24BA0;
      sub_223A9E4D0((uint64_t)v308, (uint64_t)&v291);
      v23 = a5 + 167;
      v24 = v276 + a4;
      if (v312)
      {
        v25 = *(std::__shared_weak_count **)&v308[16];
        if (*(_QWORD *)&v308[16])
        {
          v26 = (unint64_t *)(*(_QWORD *)&v308[16] + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      v274 = a2;
      v28 = 0;
      v29 = v20.i32[0] - a4;
      v30 = v20.i32[1] - a4;
      v31 = v19 - a4;
      v32 = v20.i32[0] + v24;
      v33 = v21 + v24;
      v34 = v19 + v24;
      v35 = a5[157];
      v36 = a5[158];
      LODWORD(v22) = a5[166].i32[0];
      *(double *)&v37 = (double)v22 + -0.5;
      v38 = *(double *)&v37;
      LODWORD(v37) = a5[166].i32[1];
      v39 = (double)v37 + -0.5;
      v40 = vdup_n_s32(v276);
      do
      {
        v41 = (int32x2_t *)((char *)&unk_22465E5D8 + 12 * v28);
        v42 = *a1;
        *(int32x2_t *)v308 = vmla_s32(**a1, *v41, v40);
        *(_DWORD *)&v308[8] = v42[1].i32[0] + v41[1].i32[0] * v276;
        v43 = sub_223A9AC88((_QWORD *)a3, (uint64_t *)v308, 0);
        v44 = v279;
        if (v43)
        {
          v45 = v43[7];
          v46 = v43[8];
          while (v45 != v46)
          {
            if (*(_DWORD *)v45 != -1)
            {
              v48 = *(_DWORD *)(v45 + 4);
              if (v48 >= v29)
              {
                v49 = *(_DWORD *)(v45 + 8);
                if (v49 >= v30)
                {
                  v50 = *(_DWORD *)(v45 + 12);
                  v51 = v50 >= v31 && v48 < v32;
                  v52 = v51 && v49 < v33;
                  if (v52 && v50 < v34)
                  {
                    sub_223A9C1C4(v45, (uint64_t)v316, (uint64_t)__p, v298, v297, v44.f32[0]);
                    v54 = *(float32x2_t **)(v45 + 24);
                    v55.i32[0] = v23[1].i32[0];
                    v56.i32[0] = v23[3].i32[0];
                    v57.i32[0] = v23[5].i32[0];
                    v58.i32[0] = v54[1].i32[0];
                    *(float32x2_t *)v59.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*v23, COERCE_FLOAT(*v54)), v23[2], *v54, 1), v23[4], v58.f32[0]);
                    *(float32x2_t *)&v59.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v55, *v54), v56, *v54, 1), v58, v57);
                    *(float32x2_t *)v60.f32 = v23[6];
                    v60.i32[2] = v23[7].i32[0];
                    v61 = (int32x4_t)vaddq_f32(v59, v60);
                    v62 = vadd_f32(v36, vdiv_f32(vmul_f32(v35, *(float32x2_t *)v61.i8), (float32x2_t)vdup_laneq_s32(v61, 2)));
                    v63 = *(float *)&v61.i32[2] <= 0.000001 || v62.f32[0] < -0.5;
                    _NF = !v63 && v62.f32[0] < v38;
                    v65 = !_NF || v62.f32[1] < -0.5;
                    v66 = !v65 && v62.f32[1] < v39;
                    v44 = v279;
                    if (v66)
                    {
                      v275 = v62;
                      v67 = v294;
                      v68 = v295;
                      v69 = v293;
                      if (!v293)
                      {
                        v272 = v295;
                        v273 = v294;
                        v70 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                        v68 = v272;
                        v67 = v273;
                        v69 = 0;
                        if (v70)
                          abort();
                      }
                      v47 = vadd_f32(v275, (float32x2_t)0x3F0000003F000000);
                      *(_OWORD *)(v69 + 4 * (v67 * vcvtms_s32_f32(v47.f32[0]) + v68 * vcvtms_s32_f32(v47.f32[1]))) = xmmword_224649660;
                      v44 = v279;
                    }
                  }
                }
              }
            }
            v45 += 224;
          }
        }
        ++v28;
      }
      while (v28 != 27);
      *(float32x2_t *)v44.f32 = vcvt_f32_s32(v300);
      v44.f32[2] = (float)v301;
      v71 = vmulq_n_f32(v44, v279.f32[0]);
      v289 = v71.i32[2];
      v288 = v71.i64[0];
      *(_QWORD *)v304 = a1[19];
      *(_DWORD *)&v304[8] = *((_DWORD *)a1 + 40);
      v72 = operator new(0xCuLL);
      __asm { FMOV            V0.2S, #1.0 }
      *(_QWORD *)v72 = _D0;
      v72[2] = 0;
      v76 = v279.f32[0] * 0.2;
      sub_223A96898((uint64_t)v308, (uint64_t)&v288, (int32x2_t *)v304, v72, (_BYTE *)v72 + 12, v279.f32[0] * 0.5, v76);
      sub_2237C2E74(v296, (uint64_t)v308);
      sub_22316F8F4((uint64_t *)v308);
      operator delete(v72);
      sub_223A9EC04((int *)&v300);
      if (v308[23] >= 0)
        v77 = v308[23];
      else
        v77 = *(_QWORD *)&v308[8];
      if ((v308[23] & 0x80000000) != 0)
        operator delete(*(void **)v308);
      sub_223A9EC04((int *)&v300 + 1);
      if (v308[23] >= 0)
        v78 = v308[23];
      else
        v78 = *(_QWORD *)&v308[8];
      if ((v308[23] & 0x80000000) != 0)
        operator delete(*(void **)v308);
      sub_223A9EC04(&v301);
      v79 = *(_QWORD *)&v308[8];
      if (v308[23] >= 0)
        v79 = v308[23];
      v80 = v79 + v78 + v77;
      if ((v308[23] & 0x80000000) != 0)
        operator delete(*(void **)v308);
      memset(v302, 0, 24);
      std::string::reserve((std::string *)v302, v80 + 2);
      sub_223A9EC04((int *)&v300);
      if (v308[23] >= 0)
        v81 = v308;
      else
        v81 = *(const std::string::value_type **)v308;
      if (v308[23] >= 0)
        v82 = v308[23];
      else
        v82 = *(_QWORD *)&v308[8];
      std::string::append((std::string *)v302, v81, v82);
      if ((v308[23] & 0x80000000) != 0)
        operator delete(*(void **)v308);
      std::string::append((std::string *)v302, ",", 1uLL);
      sub_223A9EC04((int *)&v300 + 1);
      if (v308[23] >= 0)
        v83 = v308;
      else
        v83 = *(const std::string::value_type **)v308;
      if (v308[23] >= 0)
        v84 = v308[23];
      else
        v84 = *(_QWORD *)&v308[8];
      std::string::append((std::string *)v302, v83, v84);
      if ((v308[23] & 0x80000000) != 0)
        operator delete(*(void **)v308);
      std::string::append((std::string *)v302, ",", 1uLL);
      sub_223A9EC04(&v301);
      if (v308[23] >= 0)
        v85 = v308;
      else
        v85 = *(const std::string::value_type **)v308;
      if (v308[23] >= 0)
        v86 = v308[23];
      else
        v86 = *(_QWORD *)&v308[8];
      std::string::append((std::string *)v302, v85, v86);
      if ((v308[23] & 0x80000000) != 0)
        operator delete(*(void **)v308);
      v87 = std::string::insert((std::string *)v302, 0, "JasperMeshing.DebugCell[", 0x18uLL);
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      *(_QWORD *)&v304[16] = *((_QWORD *)&v87->__r_.__value_.__l + 2);
      *(_OWORD *)v304 = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      v89 = std::string::append((std::string *)v304, "]", 1uLL);
      v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
      v287 = v89->__r_.__value_.__r.__words[2];
      *(_OWORD *)v286 = v90;
      v89->__r_.__value_.__l.__size_ = 0;
      v89->__r_.__value_.__r.__words[2] = 0;
      v89->__r_.__value_.__r.__words[0] = 0;
      if ((v304[23] & 0x80000000) != 0)
        operator delete(*(void **)v304);
      if ((v302[23] & 0x80000000) != 0)
        operator delete(*(void **)v302);
      *(_QWORD *)v308 = "cv3d.recon.";
      *(_QWORD *)&v308[8] = 11;
      v91 = (void *)HIBYTE(v287);
      v92 = v286;
      if (v287 < 0)
      {
        v92 = (void **)v286[0];
        v91 = v286[1];
      }
      *(_QWORD *)&v308[16] = v92;
      *(_QWORD *)&v308[24] = v91;
      sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, (std::string *)v304);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v93 = sub_2241471F8();
        v94 = v93[2];
        if (!v94)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v94 = v93[2];
        }
        v95 = *(_QWORD *)(v94 + 64);
        v96 = (std::mutex *)(v95 + 32);
        std::mutex::lock((std::mutex *)(v95 + 32));
        v98 = *(_QWORD *)(v95 + 96);
        v97 = *(_QWORD *)(v95 + 104);
        std::mutex::unlock(v96);
        if (v98 != v97)
        {
          v99 = v304[23];
          v100 = *(_OWORD *)v304;
          sub_2241471F8();
          v101 = (v99 & 0x80u) == 0 ? v304 : (_BYTE *)v100;
          v102 = (v99 & 0x80u) == 0 ? v99 : *((_QWORD *)&v100 + 1);
          v103 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v101, v102);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v103 + 24))(v103))
          {
            memset(v308, 0, 32);
            *(_DWORD *)&v308[32] = 728325608;
            kdebug_trace();
            sub_22386D8A8((double *)&qword_255788F20, v103, (uint64_t)v316, "Center");
            kdebug_trace();
          }
        }
      }
      memset(v308, 0, 32);
      *(_DWORD *)&v308[32] = 728325624;
      kdebug_trace();
      v104 = v304[23];
      if (v304[23] < 0)
        v104 = *(_QWORD *)&v304[8];
      if (v104 >= 0x11)
      {
        v105 = v304;
        if (v304[23] < 0)
          v105 = *(_BYTE **)v304;
        v106 = *(_QWORD *)v105;
        v107 = *((_QWORD *)v105 + 1);
        v108 = v105[16];
        _ZF = v106 == 0x6365722E64337663 && v107 == 0x73746174532E6E6FLL;
        if (_ZF && v108 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v304[23] & 0x80000000) != 0)
        operator delete(*(void **)v304);
      *(_QWORD *)v308 = "cv3d.recon.";
      *(_QWORD *)&v308[8] = 11;
      v111 = (void *)HIBYTE(v287);
      v112 = v286;
      if (v287 < 0)
      {
        v112 = (void **)v286[0];
        v111 = v286[1];
      }
      *(_QWORD *)&v308[16] = v112;
      *(_QWORD *)&v308[24] = v111;
      sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, (std::string *)v304);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v113 = sub_2241471F8();
        v114 = v113[2];
        if (!v114)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v114 = v113[2];
        }
        v115 = *(_QWORD *)(v114 + 64);
        v116 = (std::mutex *)(v115 + 32);
        std::mutex::lock((std::mutex *)(v115 + 32));
        v118 = *(_QWORD *)(v115 + 96);
        v117 = *(_QWORD *)(v115 + 104);
        std::mutex::unlock(v116);
        if (v118 != v117)
        {
          v119 = v304[23];
          v120 = *(_OWORD *)v304;
          sub_2241471F8();
          v121 = (v119 & 0x80u) == 0 ? v304 : (_BYTE *)v120;
          v122 = (v119 & 0x80u) == 0 ? v119 : *((_QWORD *)&v120 + 1);
          v123 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v121, v122);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v123 + 24))(v123))
          {
            memset(v308, 0, 32);
            *(_DWORD *)&v308[32] = 728325608;
            kdebug_trace();
            sub_223A97F90((double *)&qword_255788F20, v123, (uint64_t)__p, "RepPoint");
            kdebug_trace();
          }
        }
      }
      memset(v308, 0, 32);
      *(_DWORD *)&v308[32] = 728325624;
      kdebug_trace();
      v124 = v304[23];
      if (v304[23] < 0)
        v124 = *(_QWORD *)&v304[8];
      if (v124 >= 0x11)
      {
        v125 = v304;
        if (v304[23] < 0)
          v125 = *(_BYTE **)v304;
        v126 = *(_QWORD *)v125;
        v127 = *((_QWORD *)v125 + 1);
        v128 = v125[16];
        if (v126 == 0x6365722E64337663 && v127 == 0x73746174532E6E6FLL && v128 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v304[23] & 0x80000000) != 0)
        operator delete(*(void **)v304);
      *(_QWORD *)v308 = "cv3d.recon.";
      *(_QWORD *)&v308[8] = 11;
      v131 = (void *)HIBYTE(v287);
      v132 = v286;
      if (v287 < 0)
      {
        v132 = (void **)v286[0];
        v131 = v286[1];
      }
      *(_QWORD *)&v308[16] = v132;
      *(_QWORD *)&v308[24] = v131;
      sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, (std::string *)v304);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v133 = sub_2241471F8();
        v134 = v133[2];
        if (!v134)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v134 = v133[2];
        }
        v135 = *(_QWORD *)(v134 + 64);
        v136 = (std::mutex *)(v135 + 32);
        std::mutex::lock((std::mutex *)(v135 + 32));
        v138 = *(_QWORD *)(v135 + 96);
        v137 = *(_QWORD *)(v135 + 104);
        std::mutex::unlock(v136);
        if (v138 != v137)
        {
          v139 = v304[23];
          v140 = *(_OWORD *)v304;
          sub_2241471F8();
          v141 = (v139 & 0x80u) == 0 ? v304 : (_BYTE *)v140;
          v142 = (v139 & 0x80u) == 0 ? v139 : *((_QWORD *)&v140 + 1);
          v143 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v141, v142);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v143 + 24))(v143))
          {
            memset(v308, 0, 32);
            *(_DWORD *)&v308[32] = 728325608;
            kdebug_trace();
            sub_22386D9E4((double *)&qword_255788F20, v143, (uint64_t)v297, "Link");
            kdebug_trace();
          }
        }
      }
      memset(v308, 0, 32);
      *(_DWORD *)&v308[32] = 728325624;
      kdebug_trace();
      v144 = v304[23];
      if (v304[23] < 0)
        v144 = *(_QWORD *)&v304[8];
      if (v144 >= 0x11)
      {
        v145 = v304;
        if (v304[23] < 0)
          v145 = *(_BYTE **)v304;
        v146 = *(_QWORD *)v145;
        v147 = *((_QWORD *)v145 + 1);
        v148 = v145[16];
        if (v146 == 0x6365722E64337663 && v147 == 0x73746174532E6E6FLL && v148 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v304[23] & 0x80000000) != 0)
        operator delete(*(void **)v304);
      *(_QWORD *)v308 = "cv3d.recon.";
      *(_QWORD *)&v308[8] = 11;
      v151 = (void *)HIBYTE(v287);
      v152 = v286;
      if (v287 < 0)
      {
        v152 = (void **)v286[0];
        v151 = v286[1];
      }
      *(_QWORD *)&v308[16] = v152;
      *(_QWORD *)&v308[24] = v151;
      sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, (std::string *)v304);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v153 = sub_2241471F8();
        v154 = v153[2];
        if (!v154)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v154 = v153[2];
        }
        v155 = *(_QWORD *)(v154 + 64);
        v156 = (std::mutex *)(v155 + 32);
        std::mutex::lock((std::mutex *)(v155 + 32));
        v158 = *(_QWORD *)(v155 + 96);
        v157 = *(_QWORD *)(v155 + 104);
        std::mutex::unlock(v156);
        if (v158 != v157)
        {
          v159 = v304[23];
          v160 = *(_OWORD *)v304;
          sub_2241471F8();
          v161 = (v159 & 0x80u) == 0 ? v304 : (_BYTE *)v160;
          v162 = (v159 & 0x80u) == 0 ? v159 : *((_QWORD *)&v160 + 1);
          v163 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v161, v162);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 24))(v163))
          {
            memset(v308, 0, 32);
            *(_DWORD *)&v308[32] = 728325608;
            kdebug_trace();
            sub_223A9AE48(v163, (uint64_t)v296);
            kdebug_trace();
          }
        }
      }
      memset(v308, 0, 32);
      *(_DWORD *)&v308[32] = 728325624;
      kdebug_trace();
      v164 = v304[23];
      if (v304[23] < 0)
        v164 = *(_QWORD *)&v304[8];
      if (v164 >= 0x11)
      {
        v165 = v304;
        if (v304[23] < 0)
          v165 = *(_BYTE **)v304;
        v166 = *(_QWORD *)v165;
        v167 = *((_QWORD *)v165 + 1);
        v168 = v165[16];
        if (v166 == 0x6365722E64337663 && v167 == 0x73746174532E6E6FLL && v168 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v304[23] & 0x80000000) != 0)
        operator delete(*(void **)v304);
      *(_QWORD *)v308 = "cv3d.recon.";
      *(_QWORD *)&v308[8] = 11;
      v171 = (void *)HIBYTE(v287);
      v172 = v286;
      if (v287 < 0)
      {
        v172 = (void **)v286[0];
        v171 = v286[1];
      }
      *(_QWORD *)&v308[16] = v172;
      *(_QWORD *)&v308[24] = v171;
      sub_2231A9820((uint64_t)v308, (uint64_t)&v308[32], 0, 0, (std::string *)v304);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v173 = sub_2241471F8();
        v174 = v173[2];
        if (!v174)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v174 = v173[2];
        }
        v175 = *(_QWORD *)(v174 + 64);
        v176 = (std::mutex *)(v175 + 32);
        std::mutex::lock((std::mutex *)(v175 + 32));
        v178 = *(_QWORD *)(v175 + 96);
        v177 = *(_QWORD *)(v175 + 104);
        std::mutex::unlock(v176);
        if (v178 != v177)
        {
          v179 = v304[23];
          v180 = *(_OWORD *)v304;
          sub_2241471F8();
          v181 = (v179 & 0x80u) == 0 ? v304 : (_BYTE *)v180;
          v182 = (v179 & 0x80u) == 0 ? v179 : *((_QWORD *)&v180 + 1);
          v183 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v181, v182);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v183 + 24))(v183))
          {
            memset(v308, 0, 32);
            *(_DWORD *)&v308[32] = 728325608;
            kdebug_trace();
            sub_223A9AF2C(v183, (uint64_t)&v290);
            kdebug_trace();
          }
        }
      }
      memset(v308, 0, 32);
      *(_DWORD *)&v308[32] = 728325624;
      kdebug_trace();
      v184 = v304[23];
      if (v304[23] < 0)
        v184 = *(_QWORD *)&v304[8];
      if (v184 >= 0x11)
      {
        v185 = v304;
        if (v304[23] < 0)
          v185 = *(_BYTE **)v304;
        v186 = *(_QWORD *)v185;
        v187 = *((_QWORD *)v185 + 1);
        v188 = v185[16];
        if (v186 == 0x6365722E64337663 && v187 == 0x73746174532E6E6FLL && v188 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v304[23] & 0x80000000) != 0)
        operator delete(*(void **)v304);
      sub_2241498F4((uint64_t)v308, 0);
      v285[0] = 0;
      v285[1] = 0;
      v283[1] = (unint64_t *)v308;
      v284 = v285;
      v283[0] = (unint64_t *)&v284;
      v191 = v274[1];
      v192 = v274[2];
      v193 = v274[4];
      v194 = v274[5];
      if (v191 != v192 || v193 != v194)
      {
        v195 = v193 + 12;
        v196 = v191 + 40;
        while (1)
        {
          v197 = v195;
          if (*(_DWORD *)(v196 - 16) || *(_DWORD *)(v196 - 12) || *(_DWORD *)(v196 - 8))
          {
            v198 = sub_223A9ED2C(v283, *(unsigned int **)(v196 - 40));
            *(_DWORD *)v304 = v198;
            v199 = sub_223A9ED2C(v283, *(unsigned int **)(v196 - 32));
            *(_DWORD *)v302 = v199;
            v200 = sub_223A9ED2C(v283, *(unsigned int **)(v196 - 24));
            LODWORD(v280.__r_.__value_.__l.__data_) = v200;
            v201 = v314;
            if ((unint64_t)v314 >= v315)
            {
              v202 = sub_223A9EF0C((uint64_t)&v313, v304, v302, &v280);
            }
            else
            {
              *v314 = v198;
              v201[1] = v199;
              v202 = v201 + 3;
              v201[2] = v200;
            }
            v314 = v202;
          }
          v195 = v197 + 12;
          v203 = v196 + 40;
          _ZF = v196 == v192;
          v196 += 40;
          if (_ZF)
          {
            v196 = v203;
            if (v197 == v194)
              break;
          }
        }
      }
      *(_QWORD *)v304 = "cv3d.recon.";
      *(_QWORD *)&v304[8] = 11;
      v204 = (void *)HIBYTE(v287);
      v205 = v286;
      if (v287 < 0)
      {
        v205 = (void **)v286[0];
        v204 = v286[1];
      }
      *(_QWORD *)&v304[16] = v205;
      *(_QWORD *)&v304[24] = v204;
      sub_2231A9820((uint64_t)v304, (uint64_t)&v304[32], 0, 0, (std::string *)v302);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v206 = sub_2241471F8();
        v207 = v206[2];
        if (!v207)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v207 = v206[2];
        }
        v208 = *(_QWORD *)(v207 + 64);
        v209 = (std::mutex *)(v208 + 32);
        std::mutex::lock((std::mutex *)(v208 + 32));
        v211 = *(_QWORD *)(v208 + 96);
        v210 = *(_QWORD *)(v208 + 104);
        std::mutex::unlock(v209);
        if (v211 != v210)
        {
          v212 = v302[23];
          v213 = *(_OWORD *)v302;
          sub_2241471F8();
          v214 = (v212 & 0x80u) == 0 ? v302 : (_BYTE *)v213;
          v215 = (v212 & 0x80u) == 0 ? v212 : *((_QWORD *)&v213 + 1);
          v216 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v214, v215);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v216 + 24))(v216))
          {
            memset(v304, 0, 32);
            *(_DWORD *)&v304[32] = 728325608;
            kdebug_trace();
            sub_22386D9E4((double *)&qword_255788F20, v216, (uint64_t)v308, "Mesh");
            kdebug_trace();
          }
        }
      }
      memset(v304, 0, 32);
      *(_DWORD *)&v304[32] = 728325624;
      kdebug_trace();
      v217 = v302[23];
      if (v302[23] < 0)
        v217 = *(_QWORD *)&v302[8];
      if (v217 >= 0x11)
      {
        v218 = v302;
        if (v302[23] < 0)
          v218 = *(_BYTE **)v302;
        v219 = *(_QWORD *)v218;
        v220 = *((_QWORD *)v218 + 1);
        v221 = v218[16];
        if (v219 == 0x6365722E64337663 && v220 == 0x73746174532E6E6FLL && v221 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if ((v302[23] & 0x80000000) != 0)
        operator delete(*(void **)v302);
      sub_2241498F4((uint64_t)v304, 0);
      v281 = 255;
      v282 = -1;
      v224.i32[0] = *(_DWORD *)(a3 + 224);
      LOWORD(v225) = *(_WORD *)(*v274 + 16);
      *(float *)v226.i32 = v224.f32[0] * (float)v225;
      *(float *)v227.i32 = (float)(*(float *)v226.i32 * 0.0) * 0.5;
      *(float32x2_t *)v228.f32 = vcvt_f32_s32(v300);
      v228.f32[2] = (float)v301;
      v229 = vaddq_f32((float32x4_t)vdupq_lane_s32(v227, 0), vmulq_n_f32(v228, v224.f32[0]));
      *(_DWORD *)&v302[8] = v229.i32[2];
      *(_QWORD *)v302 = v229.i64[0];
      v230 = vaddq_f32((float32x4_t)vdupq_lane_s32(v226, 0), v229);
      LODWORD(v280.__r_.__value_.__r.__words[1]) = v230.i32[2];
      v280.__r_.__value_.__r.__words[0] = v230.i64[0];
      sub_223CF1130((uint64_t)v302, (uint64_t)&v280, 1, (__int8 *)&v281, (uint64_t)v304, v224, v230, v229);
      *(_QWORD *)v302 = "cv3d.recon.";
      *(_QWORD *)&v302[8] = 11;
      v231 = (void *)HIBYTE(v287);
      v232 = v286;
      if (v287 < 0)
      {
        v232 = (void **)v286[0];
        v231 = v286[1];
      }
      *(_QWORD *)&v302[16] = v232;
      *(_QWORD *)&v302[24] = v231;
      sub_2231A9820((uint64_t)v302, (uint64_t)v303, 0, 0, &v280);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v233 = sub_2241471F8();
        v234 = v233[2];
        if (!v234)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v234 = v233[2];
        }
        v235 = *(_QWORD *)(v234 + 64);
        v236 = (std::mutex *)(v235 + 32);
        std::mutex::lock((std::mutex *)(v235 + 32));
        v238 = *(_QWORD *)(v235 + 96);
        v237 = *(_QWORD *)(v235 + 104);
        std::mutex::unlock(v236);
        if (v238 != v237)
        {
          v239 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
          v240 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v241 = (v239 & 0x80u) == 0 ? &v280 : (std::string *)v240;
          v242 = (v239 & 0x80u) == 0 ? v239 : *((_QWORD *)&v240 + 1);
          v243 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v241, v242);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v243 + 24))(v243))
          {
            memset(v302, 0, sizeof(v302));
            v303[0] = 728325608;
            kdebug_trace();
            sub_223A9B000(v243, (uint64_t)v304);
            kdebug_trace();
          }
        }
      }
      memset(v302, 0, sizeof(v302));
      v303[0] = 728325624;
      kdebug_trace();
      size = HIBYTE(v280.__r_.__value_.__r.__words[2]);
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v280.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        v245 = &v280;
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v245 = (std::string *)v280.__r_.__value_.__r.__words[0];
        v246 = v245->__r_.__value_.__r.__words[0];
        v247 = v245->__r_.__value_.__l.__size_;
        v248 = v245->__r_.__value_.__s.__data_[16];
        if (v246 == 0x6365722E64337663 && v247 == 0x73746174532E6E6FLL && v248 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      *(_QWORD *)v302 = "cv3d.recon.";
      *(_QWORD *)&v302[8] = 11;
      *(_QWORD *)&v302[16] = "JasperMeshing.Mesh";
      *(_QWORD *)&v302[24] = 18;
      sub_2231A9820((uint64_t)v302, (uint64_t)v303, 0, 0, &v280);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v251 = sub_2241471F8();
        v252 = v251[2];
        if (!v252)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v252 = v251[2];
        }
        v253 = *(_QWORD *)(v252 + 64);
        v254 = (std::mutex *)(v253 + 32);
        std::mutex::lock((std::mutex *)(v253 + 32));
        v256 = *(_QWORD *)(v253 + 96);
        v255 = *(_QWORD *)(v253 + 104);
        std::mutex::unlock(v254);
        if (v256 != v255)
        {
          v257 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
          v258 = *(_OWORD *)&v280.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v259 = (v257 & 0x80u) == 0 ? &v280 : (std::string *)v258;
          v260 = (v257 & 0x80u) == 0 ? v257 : *((_QWORD *)&v258 + 1);
          v261 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v259, v260);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v261 + 24))(v261))
          {
            memset(v302, 0, sizeof(v302));
            v303[0] = 728325608;
            kdebug_trace();
            sub_223A9B000(v261, (uint64_t)v304);
            kdebug_trace();
          }
        }
      }
      memset(v302, 0, sizeof(v302));
      v303[0] = 728325624;
      kdebug_trace();
      v262 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
      if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v262 = v280.__r_.__value_.__l.__size_;
      if (v262 >= 0x11)
      {
        v263 = &v280;
        if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v263 = (std::string *)v280.__r_.__value_.__r.__words[0];
        v264 = v263->__r_.__value_.__r.__words[0];
        v265 = v263->__r_.__value_.__l.__size_;
        v266 = v263->__r_.__value_.__s.__data_[16];
        if (v264 == 0x6365722E64337663 && v265 == 0x73746174532E6E6FLL && v266 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(v280.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v280.__r_.__value_.__l.__data_);
      sub_22316F8F4((uint64_t *)v304);
      sub_223198030((uint64_t)&v284, v285[0]);
      sub_22316F8F4((uint64_t *)v308);
      if (SHIBYTE(v287) < 0)
        operator delete(v286[0]);
      v269 = v292;
      if (v292)
      {
        p_shared_owners = (unint64_t *)&v292->__shared_owners_;
        do
          v271 = __ldaxr(p_shared_owners);
        while (__stlxr(v271 - 1, p_shared_owners));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
      sub_22316F8F4(v296);
      sub_22316F8F4((uint64_t *)v297);
      sub_22316F8F4((uint64_t *)v298);
      sub_22316F8F4((uint64_t *)__p);
      sub_22316F8F4(v316);
    }
  }
}

void sub_223A9A9B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223A9AC18()
{
  JUMPOUT(0x223A9AC50);
}

void sub_223A9AC20()
{
  JUMPOUT(0x223A9AC50);
}

uint64_t *sub_223A9AC88(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t *result;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;

  v7 = a3;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 2);
  result = sub_22353408C(a1 + 1, &v7);
  if (result)
  {
    v5 = result;
    v6 = *((unsigned int *)result + 8);
    if (*(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v6) / 0x1F)) + 132 * ((a1[10] + v6) % 0x1F) + 20))
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 706, (uint64_t)"!metadata_blocks_[iter->second].IsErased()", 42, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_11;
      }
      v6 = *((unsigned int *)v5 + 8);
    }
    if ((a1[11] > v6
       || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C))&& (!*(_BYTE *)(*(_QWORD *)(a1[7] + 8 * ((a1[10] + v6) / 0x1F)) + 132 * ((a1[10] + v6) % 0x1F) + 20)|| !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C)))
    {
      return (uint64_t *)(a1[16] + 168 * v6);
    }
LABEL_11:
    abort();
  }
  return result;
}

void sub_223A9AE48(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t *v5;
  __int128 v6;
  void *__p;
  __int128 v8;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v4 = (char *)operator new(0x20uLL);
    v8 = xmmword_2245B9420;
    strcpy(v4, "Principal View Direction");
    *(_QWORD *)&v6 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v6 + 1) = 2;
    __p = v4;
    v5 = sub_2241471F8();
    sub_22329D76C((uint64_t)v5, a1, a2, (uint64_t)&__p, &v6);
    if (SHIBYTE(v8) < 0)
      operator delete(__p);
  }
}

void sub_223A9AF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A9AF2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 14;
    strcpy((char *)__p, "Proj. Vertices");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_223A9E0A8((uint64_t)v4, a1, a2, (uint64_t *)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223A9AFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A9B000(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p[2];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 5;
    strcpy((char *)__p, "Block");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22329D76C((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_223A9B0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A9B0CC(int **a1, int a2, _QWORD *a3, _QWORD *a4, float a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::mutex *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  float32x4_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  float *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  _QWORD *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  _BOOL4 v44;
  float v45;
  float v46;
  _BOOL4 v48;
  float v49;
  float v50;
  float v51;
  float *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  std::mutex *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  std::string *v73;
  uint64_t v74;
  uint64_t v75;
  std::string::size_type size;
  std::string *v77;
  std::string::size_type v78;
  std::string::size_type v79;
  int v80;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  std::mutex *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  std::string *v91;
  uint64_t v92;
  uint64_t v93;
  std::string::size_type v94;
  std::string *v95;
  std::string::size_type v96;
  std::string::size_type v97;
  int v98;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  std::mutex *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  std::string *v109;
  uint64_t v110;
  uint64_t v111;
  std::string::size_type v112;
  std::string *v113;
  std::string::size_type v114;
  std::string::size_type v115;
  int v116;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  std::mutex *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  std::string *v127;
  uint64_t v128;
  uint64_t v129;
  std::string::size_type v130;
  std::string *v131;
  std::string::size_type v132;
  std::string::size_type v133;
  int v134;
  int v137;
  int v138;
  int v139;
  int v140;
  float32x4_t v141;
  int v142;
  float v143;
  float v144;
  std::string v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _BYTE v150[4];
  int v151;
  float *v152;
  float *v153;
  unint64_t v154;
  _BYTE v155[4];
  int v156;
  unint64_t v157[48];
  unint64_t v158[48];
  std::string __p[16];
  __int128 v160;
  __int128 v161;
  int v162;
  uint64_t v163[4];
  _QWORD v164[47];

  v164[44] = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v9 = sub_2241471F8();
    v10 = v9[2];
    if (!v10)
    {
      v11 = v9;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v10 = v11[2];
    }
    v12 = *(_QWORD *)(v10 + 64);
    v13 = (std::mutex *)(v12 + 32);
    std::mutex::lock((std::mutex *)(v12 + 32));
    v15 = *(_QWORD *)(v12 + 96);
    v14 = *(_QWORD *)(v12 + 104);
    std::mutex::unlock(v13);
    if (v15 != v14)
    {
      v163[0] = (uint64_t)"cv3d.recon.";
      v163[1] = 11;
      v163[2] = (uint64_t)"JasperMeshing";
      v163[3] = 13;
      sub_2231A9820((uint64_t)v163, (uint64_t)v164, 0, 0, __p);
      sub_2241471F8();
      v16 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      v18 = v17;
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((v18 & 1) == 0)
          return;
      }
      else if ((v17 & 1) == 0)
      {
        return;
      }
      if (a2 * a2 * a2 != (uint64_t)(a3[1] - *a3) >> 3
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/DebugUtil.cpp", 451, (uint64_t)"padded_cell_size * padded_cell_size * padded_cell_size == vt_table.size()", 73, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      sub_2241498F4((uint64_t)v163, 0);
      sub_2241498F4((uint64_t)__p, 0);
      sub_2241498F4((uint64_t)v158, 0);
      sub_2241498F4((uint64_t)v157, 0);
      sub_2241498F4((uint64_t)&v147, 0);
      if (a2)
      {
        v20 = 0;
        v21 = 0;
        v142 = **a1;
        v139 = (*a1)[1];
        v137 = (*a1)[2];
        do
        {
          v22 = 0;
          v138 = v20;
          v23 = v20 - 1;
          v143 = (float)(v20 - 1 + v137);
          do
          {
            v24 = 0;
            v140 = v22;
            v25 = v22 - 1;
            v144 = (float)(v22 - 1 + v139);
            do
            {
              v27 = *(_QWORD *)(*a3 + 8 * v21);
              if (v27)
                sub_223A9C1C4(v27, (uint64_t)v163, (uint64_t)__p, v158, v157, a5);
              v28 = v21;
              v29 = *a4 + 8 * v21;
              if (*(_BYTE *)(v29 + 4))
              {
                v30 = *(float *)v29;
                v19.f32[0] = (float)(v24 - 1 + v142);
                v19.f32[1] = v144;
                v19.f32[2] = v143;
                v19 = vmulq_n_f32(v19, a5);
                v31 = (_QWORD *)v148;
                if (v148 >= v149)
                {
                  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - v147) >> 2);
                  v34 = v33 + 1;
                  if (v33 + 1 > 0x1555555555555555)
                    goto LABEL_201;
                  if (0x5555555555555556 * ((uint64_t)(v149 - v147) >> 2) > v34)
                    v34 = 0x5555555555555556 * ((uint64_t)(v149 - v147) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - v147) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v34 = 0x1555555555555555;
                  if (v34)
                  {
                    LODWORD(v146.__r_.__value_.__l.__data_) = v34;
                    if (v151 == -1)
                      goto LABEL_200;
                    v141 = v19;
                    *(_QWORD *)&v160 = &v146;
                    v35 = ((uint64_t (*)(__int128 *, _BYTE *))off_24EC5EAC8[v151])(&v160, v150);
                    v19 = v141;
                  }
                  else
                  {
                    v35 = 0;
                    v36 = 0;
                  }
                  v37 = v35 + 12 * v33;
                  *(_QWORD *)v37 = v19.i64[0];
                  *(_DWORD *)(v37 + 8) = v19.i32[2];
                  v39 = v147;
                  v38 = v148;
                  v40 = v37;
                  if (v148 != v147)
                  {
                    do
                    {
                      v41 = *(_QWORD *)(v38 - 12);
                      v38 -= 12;
                      v42 = *(_DWORD *)(v38 + 8);
                      *(_QWORD *)(v40 - 12) = v41;
                      v40 -= 12;
                      *(_DWORD *)(v40 + 8) = v42;
                    }
                    while (v38 != v39);
                    v38 = v147;
                  }
                  v32 = (char *)(v37 + 12);
                  v147 = v40;
                  v148 = v37 + 12;
                  v43 = v149;
                  v149 = v35 + 12 * v36;
                  if (v38)
                  {
                    *(_QWORD *)&v160 = v38;
                    DWORD2(v160) = -1431655765 * ((v43 - v38) >> 2);
                    if (v151 == -1)
                      sub_22316DD70();
                    v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
                    ((void (*)(std::string *, _BYTE *))off_24EC5EAD8[v151])(&v146, v150);
                  }
                }
                else
                {
                  *(_DWORD *)(v148 + 8) = v19.i32[2];
                  *v31 = v19.i64[0];
                  v32 = (char *)v31 + 12;
                }
                v44 = v23 == 4;
                v148 = (unint64_t)v32;
                if (v30 <= 0.0)
                  v45 = 1.0;
                else
                  v45 = 0.0;
                if (v30 <= 0.0)
                  v46 = 0.0;
                else
                  v46 = 1.0;
                v48 = v24 == 5 && v25 == 4;
                if (v48 && v44)
                  v49 = 0.6;
                else
                  v49 = v45;
                if (v48 && v44)
                  v50 = 0.7;
                else
                  v50 = v46;
                if (v48 && v44)
                  v51 = 0.8;
                else
                  v51 = 0.0;
                v52 = v153;
                if ((unint64_t)v153 < v154)
                {
                  *v153 = v49;
                  v52[1] = v50;
                  v26 = v52 + 3;
                  v52[2] = v51;
                }
                else
                {
                  v53 = 0xAAAAAAAAAAAAAAABLL * (v153 - v152);
                  v54 = v53 + 1;
                  if (v53 + 1 > 0x1555555555555555)
LABEL_201:
                    sub_22316E078();
                  if (0x5555555555555556 * ((uint64_t)(v154 - (_QWORD)v152) >> 2) > v54)
                    v54 = 0x5555555555555556 * ((uint64_t)(v154 - (_QWORD)v152) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v154 - (_QWORD)v152) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v55 = 0x1555555555555555;
                  else
                    v55 = v54;
                  if (v55)
                  {
                    LODWORD(v146.__r_.__value_.__l.__data_) = v55;
                    if (v156 == -1)
LABEL_200:
                      sub_22316DD70();
                    *(_QWORD *)&v160 = &v146;
                    v56 = ((uint64_t (*)(__int128 *, _BYTE *))off_24EC5EAC8[v156])(&v160, v155);
                  }
                  else
                  {
                    v56 = 0;
                    v57 = 0;
                  }
                  v58 = (float *)(v56 + 12 * v53);
                  *v58 = v49;
                  v58[1] = v50;
                  v58[2] = v51;
                  v60 = v152;
                  v59 = v153;
                  v61 = v58;
                  if (v153 != v152)
                  {
                    do
                    {
                      v62 = *(_QWORD *)(v59 - 3);
                      v59 -= 3;
                      v63 = *((_DWORD *)v59 + 2);
                      *(_QWORD *)(v61 - 3) = v62;
                      v61 -= 3;
                      *((_DWORD *)v61 + 2) = v63;
                    }
                    while (v59 != v60);
                    v59 = v152;
                  }
                  v26 = v58 + 3;
                  v152 = v61;
                  v153 = v58 + 3;
                  v64 = v154;
                  v154 = v56 + 12 * v57;
                  if (v59)
                  {
                    *(_QWORD *)&v160 = v59;
                    DWORD2(v160) = -1431655765 * ((v64 - (unint64_t)v59) >> 2);
                    if (v156 == -1)
                      sub_22316DD70();
                    v146.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
                    ((void (*)(std::string *, _BYTE *))off_24EC5EAD8[v156])(&v146, v155);
                  }
                }
                v153 = v26;
              }
              v21 = v28 + 1;
              ++v24;
            }
            while (v24 != a2);
            v22 = v140 + 1;
          }
          while (v140 + 1 != a2);
          v20 = v138 + 1;
        }
        while (v138 + 1 != a2);
      }
      else
      {
        v21 = 0;
      }
      if ((unsigned __int16)(a2 * a2) * a2 != v21
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/DebugUtil.cpp", 492, (uint64_t)"padded_cell_size_sq * padded_cell_size == index", 47, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      *(_QWORD *)&v160 = "cv3d.recon.";
      *((_QWORD *)&v160 + 1) = 11;
      *(_QWORD *)&v161 = "JasperMeshing.DebugCell.VertexTable";
      *((_QWORD *)&v161 + 1) = 35;
      sub_2231A9820((uint64_t)&v160, (uint64_t)&v162, 0, 0, &v146);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v65 = sub_2241471F8();
        v66 = v65[2];
        if (!v66)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v66 = v65[2];
        }
        v67 = *(_QWORD *)(v66 + 64);
        v68 = (std::mutex *)(v67 + 32);
        std::mutex::lock((std::mutex *)(v67 + 32));
        v70 = *(_QWORD *)(v67 + 96);
        v69 = *(_QWORD *)(v67 + 104);
        std::mutex::unlock(v68);
        if (v70 != v69)
        {
          v71 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
          v72 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v73 = (v71 & 0x80u) == 0 ? &v146 : (std::string *)v72;
          v74 = (v71 & 0x80u) == 0 ? v71 : *((_QWORD *)&v72 + 1);
          v75 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v73, v74);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75))
          {
            v160 = 0u;
            v161 = 0u;
            v162 = 728325608;
            kdebug_trace();
            sub_22386D8A8((double *)&qword_255788F20, v75, (uint64_t)v163, "Center");
            kdebug_trace();
          }
        }
      }
      v160 = 0u;
      v161 = 0u;
      v162 = 728325624;
      kdebug_trace();
      size = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v146.__r_.__value_.__l.__size_;
      if (size >= 0x11)
      {
        v77 = &v146;
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v77 = (std::string *)v146.__r_.__value_.__r.__words[0];
        v78 = v77->__r_.__value_.__r.__words[0];
        v79 = v77->__r_.__value_.__l.__size_;
        v80 = v77->__r_.__value_.__s.__data_[16];
        if (v78 == 0x6365722E64337663 && v79 == 0x73746174532E6E6FLL && v80 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      *(_QWORD *)&v160 = "cv3d.recon.";
      *((_QWORD *)&v160 + 1) = 11;
      *(_QWORD *)&v161 = "JasperMeshing.DebugCell.VertexTable";
      *((_QWORD *)&v161 + 1) = 35;
      sub_2231A9820((uint64_t)&v160, (uint64_t)&v162, 0, 0, &v146);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v83 = sub_2241471F8();
        v84 = v83[2];
        if (!v84)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v84 = v83[2];
        }
        v85 = *(_QWORD *)(v84 + 64);
        v86 = (std::mutex *)(v85 + 32);
        std::mutex::lock((std::mutex *)(v85 + 32));
        v88 = *(_QWORD *)(v85 + 96);
        v87 = *(_QWORD *)(v85 + 104);
        std::mutex::unlock(v86);
        if (v88 != v87)
        {
          v89 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
          v90 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v91 = (v89 & 0x80u) == 0 ? &v146 : (std::string *)v90;
          v92 = (v89 & 0x80u) == 0 ? v89 : *((_QWORD *)&v90 + 1);
          v93 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v91, v92);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93))
          {
            v160 = 0u;
            v161 = 0u;
            v162 = 728325608;
            kdebug_trace();
            sub_223A97F90((double *)&qword_255788F20, v93, (uint64_t)__p, "RepPoint");
            kdebug_trace();
          }
        }
      }
      v160 = 0u;
      v161 = 0u;
      v162 = 728325624;
      kdebug_trace();
      v94 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v94 = v146.__r_.__value_.__l.__size_;
      if (v94 >= 0x11)
      {
        v95 = &v146;
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v95 = (std::string *)v146.__r_.__value_.__r.__words[0];
        v96 = v95->__r_.__value_.__r.__words[0];
        v97 = v95->__r_.__value_.__l.__size_;
        v98 = v95->__r_.__value_.__s.__data_[16];
        if (v96 == 0x6365722E64337663 && v97 == 0x73746174532E6E6FLL && v98 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      *(_QWORD *)&v160 = "cv3d.recon.";
      *((_QWORD *)&v160 + 1) = 11;
      *(_QWORD *)&v161 = "JasperMeshing.DebugCell.VertexTable";
      *((_QWORD *)&v161 + 1) = 35;
      sub_2231A9820((uint64_t)&v160, (uint64_t)&v162, 0, 0, &v146);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v101 = sub_2241471F8();
        v102 = v101[2];
        if (!v102)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v102 = v101[2];
        }
        v103 = *(_QWORD *)(v102 + 64);
        v104 = (std::mutex *)(v103 + 32);
        std::mutex::lock((std::mutex *)(v103 + 32));
        v106 = *(_QWORD *)(v103 + 96);
        v105 = *(_QWORD *)(v103 + 104);
        std::mutex::unlock(v104);
        if (v106 != v105)
        {
          v107 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
          v108 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v109 = (v107 & 0x80u) == 0 ? &v146 : (std::string *)v108;
          v110 = (v107 & 0x80u) == 0 ? v107 : *((_QWORD *)&v108 + 1);
          v111 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v109, v110);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v111 + 24))(v111))
          {
            v160 = 0u;
            v161 = 0u;
            v162 = 728325608;
            kdebug_trace();
            sub_22386D9E4((double *)&qword_255788F20, v111, (uint64_t)v157, "Link");
            kdebug_trace();
          }
        }
      }
      v160 = 0u;
      v161 = 0u;
      v162 = 728325624;
      kdebug_trace();
      v112 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v112 = v146.__r_.__value_.__l.__size_;
      if (v112 >= 0x11)
      {
        v113 = &v146;
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v113 = (std::string *)v146.__r_.__value_.__r.__words[0];
        v114 = v113->__r_.__value_.__r.__words[0];
        v115 = v113->__r_.__value_.__l.__size_;
        v116 = v113->__r_.__value_.__s.__data_[16];
        if (v114 == 0x6365722E64337663 && v115 == 0x73746174532E6E6FLL && v116 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      *(_QWORD *)&v160 = "cv3d.recon.";
      *((_QWORD *)&v160 + 1) = 11;
      *(_QWORD *)&v161 = "JasperMeshing.DebugCell.VertexTable";
      *((_QWORD *)&v161 + 1) = 35;
      sub_2231A9820((uint64_t)&v160, (uint64_t)&v162, 0, 0, &v146);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v119 = sub_2241471F8();
        v120 = v119[2];
        if (!v120)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v120 = v119[2];
        }
        v121 = *(_QWORD *)(v120 + 64);
        v122 = (std::mutex *)(v121 + 32);
        std::mutex::lock((std::mutex *)(v121 + 32));
        v124 = *(_QWORD *)(v121 + 96);
        v123 = *(_QWORD *)(v121 + 104);
        std::mutex::unlock(v122);
        if (v124 != v123)
        {
          v125 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
          v126 = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v127 = (v125 & 0x80u) == 0 ? &v146 : (std::string *)v126;
          v128 = (v125 & 0x80u) == 0 ? v125 : *((_QWORD *)&v126 + 1);
          v129 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v127, v128);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v129 + 24))(v129))
          {
            v160 = 0u;
            v161 = 0u;
            v162 = 728325608;
            kdebug_trace();
            sub_223A9CF7C(v129, (uint64_t)&v147);
            kdebug_trace();
          }
        }
      }
      v160 = 0u;
      v161 = 0u;
      v162 = 728325624;
      kdebug_trace();
      v130 = HIBYTE(v146.__r_.__value_.__r.__words[2]);
      if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v130 = v146.__r_.__value_.__l.__size_;
      if (v130 >= 0x11)
      {
        v131 = &v146;
        if ((v146.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v131 = (std::string *)v146.__r_.__value_.__r.__words[0];
        v132 = v131->__r_.__value_.__r.__words[0];
        v133 = v131->__r_.__value_.__l.__size_;
        v134 = v131->__r_.__value_.__s.__data_[16];
        if (v132 == 0x6365722E64337663 && v133 == 0x73746174532E6E6FLL && v134 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v146.__r_.__value_.__l.__data_);
      sub_22316F8F4(&v147);
      sub_22316F8F4((uint64_t *)v157);
      sub_22316F8F4((uint64_t *)v158);
      sub_22316F8F4((uint64_t *)__p);
      sub_22316F8F4(v163);
    }
  }
}

void sub_223A9C098(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223A9C1C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, float a6)
{
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x2_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int32x2_t *v24;
  int32x2_t v25;
  __int32 v26;
  int32x2_t *v27;
  float32x4_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  _QWORD *v33;
  float32x4_t v34;
  uint64_t v35;
  float32x4_t v36;
  unsigned int v37;
  int v38;
  float64x2_t v39;
  __double2 v40;
  float v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  unsigned int v45;
  _DWORD *v46;
  unsigned int v47;
  _DWORD *v48;
  unsigned int *v49;
  unsigned int i;
  float64x2_t v51;
  __double2 v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t v55;
  unsigned int v56;
  unsigned int *v57;
  _DWORD *v58;
  unsigned int v59;
  _DWORD *v60;
  int32x2_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  int32x2_t *v86;
  int32x2_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  float v132;
  float v133;
  float32x4_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  float32x4_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  float v160;
  float v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  float v170;
  char *v171;
  float32x4_t v172;
  char *v173;
  float32x4_t v174;
  float64x2_t v175;
  char *v176;
  _OWORD v177[2];
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  float32x4_t v183;
  int32x2_t *v184;
  int32x2_t *v185;
  char *v186;
  uint64_t v187;
  int v188;

  v184 = 0;
  v185 = 0;
  v186 = 0;
  if (*(_BYTE *)(a1 + 168))
  {
    v8 = 0;
    v9 = a1 + 176;
    v174 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    v10 = a1 + 176 + 16 * *(unsigned __int8 *)(a1 + 168);
    do
    {
      while (1)
      {
        v12 = (*(unsigned __int16 *)(*(_QWORD *)v9 + 8) + 2654499954) ^ 0x3E7;
        v13 = (**(_QWORD **)v9 + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
        v14.i64[0] = v13;
        v14.i64[1] = v13 >> 8;
        v15.i64[0] = 255;
        v15.i64[1] = 255;
        v16 = (float32x4_t)vcvtq_f64_u64((uint64x2_t)vandq_s8(v14, v15));
        *(float32x2_t *)v16.f32 = vcvt_f32_f64((float64x2_t)v16);
        v16.f32[2] = (float)BYTE2(v13);
        v17 = vmulq_f32(v16, v174);
        if (v8 >= (int32x2_t *)v186)
          break;
        v8[1].i32[0] = v17.i32[2];
        *v8 = *(int32x2_t *)v17.f32;
        v11 = (int32x2_t *)((char *)v8 + 12);
        v185 = (int32x2_t *)((char *)v8 + 12);
        v9 += 16;
        v8 = (int32x2_t *)((char *)v8 + 12);
        if (v9 == v10)
          goto LABEL_23;
      }
      v18 = v184;
      v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v184) >> 2);
      v20 = v19 + 1;
      if (v19 + 1 > 0x1555555555555555)
        sub_22316E078();
      if (0x5555555555555556 * ((v186 - (char *)v184) >> 2) > v20)
        v20 = 0x5555555555555556 * ((v186 - (char *)v184) >> 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v186 - (char *)v184) >> 2) >= 0xAAAAAAAAAAAAAAALL)
        v21 = 0x1555555555555555;
      else
        v21 = v20;
      if (v21)
      {
        v172 = v17;
        if (v21 > 0x1555555555555555)
          sub_223174E94();
        v22 = (char *)operator new(12 * v21);
        v17 = v172;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[4 * (((char *)v8 - (char *)v184) >> 2)];
      *(_QWORD *)v23 = v17.i64[0];
      *((_DWORD *)v23 + 2) = v17.i32[2];
      v24 = (int32x2_t *)&v22[12 * v19];
      if (v8 != v18)
      {
        do
        {
          v25 = *(int32x2_t *)((char *)v8 - 12);
          v8 = (int32x2_t *)((char *)v8 - 12);
          v26 = v8[1].i32[0];
          *(int32x2_t *)((char *)v24 - 12) = v25;
          v24 = (int32x2_t *)((char *)v24 - 12);
          v24[1].i32[0] = v26;
        }
        while (v8 != v18);
        v8 = v18;
      }
      v11 = (int32x2_t *)(v23 + 12);
      v184 = v24;
      v186 = &v22[12 * v21];
      if (v8)
        operator delete(v8);
      v185 = v11;
      v9 += 16;
      v8 = v11;
    }
    while (v9 != v10);
  }
  else
  {
    v27 = (int32x2_t *)operator new(0xCuLL);
    v11 = (int32x2_t *)((char *)v27 + 12);
    *v27 = vdup_n_s32(0x3E4CCCCDu);
    v27[1].i32[0] = 1045220557;
    v185 = (int32x2_t *)((char *)v27 + 12);
    v186 = (char *)&v27[1] + 4;
    v184 = v27;
  }
LABEL_23:
  *(float32x2_t *)v17.f32 = vcvt_f32_s32(*(int32x2_t *)(a1 + 4));
  v17.f32[2] = (float)*(int *)(a1 + 12);
  v28 = vmulq_n_f32(v17, a6);
  v183.i32[2] = v28.i32[2];
  v183.i64[0] = v28.i64[0];
  sub_2241498F4((uint64_t)v177, 0);
  v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v177[0] + 1) - *(_QWORD *)&v177[0]) >> 2);
  if (v29 > 0xA3)
  {
    if (*((_QWORD *)&v177[0] + 1) - *(_QWORD *)&v177[0] != 1968)
      *((_QWORD *)&v177[0] + 1) = *(_QWORD *)&v177[0] + 1968;
  }
  else
  {
    sub_22317EF30((uint64_t)v177, 164 - v29);
  }
  v30 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 2);
  if (v30 > 0x143)
  {
    if (v182 - v181 != 3888)
      v182 = v181 + 3888;
  }
  else
  {
    sub_22317F10C((uint64_t)&v181, 324 - v30);
  }
  v31 = 0;
  v32 = 0;
  v33 = *(_QWORD **)&v177[0];
  v34 = vaddq_f32(v183, (float32x4_t)xmmword_22465E580);
  *(_DWORD *)(*(_QWORD *)&v177[0] + 8) = v34.i32[2];
  *v33 = v34.i64[0];
  v35 = *(_QWORD *)&v177[0];
  v36 = vaddq_f32(v183, (float32x4_t)xmmword_22465E590);
  *(_DWORD *)(*(_QWORD *)&v177[0] + 20) = v36.i32[2];
  *(_QWORD *)(v35 + 12) = v36.i64[0];
  v37 = 2;
  v175 = (float64x2_t)vdupq_n_s64(0x3F747AE140000000uLL);
  do
  {
    v38 = v32 + 1;
    v40 = __sincos_stret((double)(v32 + 1) * -0.314159265 + 1.57079637);
    v39.f64[0] = v40.__cosval;
    v41 = v40.__sinval * 0.00499999989;
    v170 = v41;
    v39.f64[1] = v40.__cosval * 0.0;
    v42 = (float32x4_t)vmulq_f64(v39, v175);
    *(float32x2_t *)v42.f32 = vcvt_f32_f64((float64x2_t)v42);
    v42.f32[2] = v41;
    v43 = *(_QWORD *)&v177[0] + 12 * v37;
    v44 = vaddq_f32(v183, v42);
    *(_DWORD *)(v43 + 8) = v44.i32[2];
    *(_QWORD *)v43 = v44.i64[0];
    v45 = v37 + 17;
    if (!v32)
    {
      v48 = (_DWORD *)(v181 + 12 * v31++);
      *v48 = 0;
      v48[1] = v45;
      v48[2] = v37;
LABEL_36:
      v49 = (unsigned int *)(v181 + 12 * v31);
      *v49 = v37;
      v49[1] = v45;
      v49[2] = v37 + 18;
      v47 = v37 + 17;
      v45 = v37 + 35;
      LODWORD(v49) = v31 + 1;
      v31 += 2;
      v46 = (_DWORD *)(v181 + 12 * v49);
      *v46 = v37 + 18;
      goto LABEL_37;
    }
    if (v32 != 8)
      goto LABEL_36;
    v46 = (_DWORD *)(v181 + 12 * v31++);
    *v46 = 1;
    v47 = v37;
LABEL_37:
    v46[1] = v47;
    v46[2] = v45;
    ++v37;
    for (i = 1; i != 18; ++i)
    {
      while (1)
      {
        v52 = __sincos_stret((double)i * 0.34906585);
        v51.f64[0] = v52.__cosval;
        v51.f64[1] = v52.__sinval;
        v53 = (float32x4_t)vmulq_f64(vmulq_n_f64(v51, v40.__cosval), v175);
        *(float32x2_t *)v53.f32 = vcvt_f32_f64((float64x2_t)v53);
        v53.f32[2] = v170;
        v54 = *(_QWORD *)&v177[0] + 12 * v37;
        v55 = vaddq_f32(v183, v53);
        *(_DWORD *)(v54 + 8) = v55.i32[2];
        *(_QWORD *)v54 = v55.i64[0];
        v56 = v37 - 1;
        if (!v32)
        {
          v58 = (_DWORD *)(v181 + 12 * v31++);
          *v58 = 0;
          v58[1] = v56;
          v58[2] = v37;
          v57 = (unsigned int *)(v181 + 12 * v31);
          break;
        }
        v57 = (unsigned int *)(v181 + 12 * v31);
        if (v32 != 8)
          break;
        ++v31;
        *v57 = 1;
        v57[1] = v37;
        v57[2] = v56;
        ++v37;
        if (++i == 18)
          goto LABEL_45;
      }
      *v57 = v37;
      v57[1] = v56;
      v57[2] = v37 + 18;
      v59 = v31 + 1;
      v31 += 2;
      v60 = (_DWORD *)(v181 + 12 * v59);
      *v60 = v37 + 18;
      v60[1] = v56;
      v60[2] = v37 + 17;
      ++v37;
    }
    ++v32;
  }
  while (v38 != 9);
LABEL_45:
  v61 = v184;
  if (v184 != v11)
  {
    v180 = 2;
    v62 = 0xAAAAAAAAAAAAAAABLL * ((v182 - v181) >> 2);
    v63 = 0xAAAAAAAAAAAAAAABLL * ((v179 - v178) >> 2);
    if (v62 <= v63)
    {
      if (v62 < v63)
        v179 = v178 + 4 * ((v182 - v181) >> 2);
    }
    else
    {
      sub_22317EF30((uint64_t)&v178, v62 - v63);
    }
    v64 = 0;
    v65 = 0;
    v66 = ((char *)v11 - (char *)v61) >> 2;
    v67 = 0xAAAAAAAAAAAAAAABLL * v66;
    v176 = (char *)v61 + 12 * (0xAAAAAAAAAAAAAAABLL * v66 / 0x12);
    v173 = (char *)v61 + 12 * (0x5555555555555556 * v66 / 0x12);
    v171 = (char *)v61 + 12 * (v66 / 0x12);
    v68 = (char *)v61 + 12 * (0xAAAAAAAAAAAAAAACLL * v66 / 0x12);
    v69 = (char *)v61 + 12 * (0x5555555555555557 * v66 / 0x12);
    v70 = ((char *)v11 - (char *)v61) >> 1;
    v71 = (char *)v61 + 12 * (v70 / 0x12);
    v72 = (char *)v61 + 12 * (0xAAAAAAAAAAAAAAADLL * v66 / 0x12);
    v73 = (char *)v61 + 12 * (0x5555555555555558 * v66 / 0x12);
    v74 = (char *)v61 + 12 * ((v70 + v66) / 0x12);
    v75 = (char *)v61 + 12 * (0xAAAAAAAAAAAAAAAELL * v66 / 0x12);
    v76 = (char *)v61 + 12 * (0x5555555555555559 * v66 / 0x12);
    v77 = 0x555555555555555ALL * v66;
    v78 = 0x555555555555555BLL * v66;
    v79 = (char *)v11 - (char *)v61 + v66;
    v80 = (char *)v61 + 12 * (((char *)v11 - (char *)v61) / 0x12uLL);
    v81 = (char *)v61 + 12 * (0xAAAAAAAAAAAAAAAFLL * v66 / 0x12);
    v82 = (char *)v61 + 12 * (v77 / 0x12);
    v83 = (char *)v61 + 12 * (v79 / 0x12);
    v84 = (char *)v61 + 12 * (16 * v67 / 0x12);
    v85 = (char *)v61 + 12 * (v78 / 0x12);
    do
    {
      if (v65 == 8)
      {
        v86 = (int32x2_t *)(v178 + 12 * v64);
        v87 = *v61;
        v86[1].i32[0] = v61[1].i32[0];
        *v86 = v87;
        v88 = v178 + 12 * (v64 + 1);
        v89 = *(_QWORD *)v176;
        *(_DWORD *)(v88 + 8) = *((_DWORD *)v176 + 2);
        *(_QWORD *)v88 = v89;
        v90 = v178 + 12 * (v64 + 2);
        v91 = *(_QWORD *)v173;
        *(_DWORD *)(v90 + 8) = *((_DWORD *)v173 + 2);
        *(_QWORD *)v90 = v91;
        v92 = v178 + 12 * (v64 + 3);
        v93 = *(_QWORD *)v171;
        *(_DWORD *)(v92 + 8) = *((_DWORD *)v171 + 2);
        *(_QWORD *)v92 = v93;
        v94 = v178 + 12 * (v64 + 4);
        v95 = *(_QWORD *)v68;
        *(_DWORD *)(v94 + 8) = *((_DWORD *)v68 + 2);
        *(_QWORD *)v94 = v95;
        v96 = v178 + 12 * (v64 + 5);
        v97 = *(_QWORD *)v69;
        *(_DWORD *)(v96 + 8) = *((_DWORD *)v69 + 2);
        *(_QWORD *)v96 = v97;
        v98 = v178 + 12 * (v64 + 6);
        v99 = *(_QWORD *)v71;
        *(_DWORD *)(v98 + 8) = *((_DWORD *)v71 + 2);
        *(_QWORD *)v98 = v99;
        v100 = v178 + 12 * (v64 + 7);
        v101 = *(_QWORD *)v72;
        *(_DWORD *)(v100 + 8) = *((_DWORD *)v72 + 2);
        *(_QWORD *)v100 = v101;
        v102 = v178 + 12 * (v64 + 8);
        v103 = *(_QWORD *)v73;
        *(_DWORD *)(v102 + 8) = *((_DWORD *)v73 + 2);
        *(_QWORD *)v102 = v103;
        v104 = v178 + 12 * (v64 + 9);
        v105 = *(_QWORD *)v74;
        *(_DWORD *)(v104 + 8) = *((_DWORD *)v74 + 2);
        *(_QWORD *)v104 = v105;
        v106 = v178 + 12 * (v64 + 10);
        v107 = *(_QWORD *)v75;
        *(_DWORD *)(v106 + 8) = *((_DWORD *)v75 + 2);
        *(_QWORD *)v106 = v107;
        v108 = v178 + 12 * (v64 + 11);
        v109 = *(_QWORD *)v76;
        *(_DWORD *)(v108 + 8) = *((_DWORD *)v76 + 2);
        *(_QWORD *)v108 = v109;
        v110 = v178 + 12 * (v64 + 12);
        v111 = *(_QWORD *)v80;
        *(_DWORD *)(v110 + 8) = *((_DWORD *)v80 + 2);
        *(_QWORD *)v110 = v111;
        v112 = v178 + 12 * (v64 + 13);
        v113 = *(_QWORD *)v81;
        *(_DWORD *)(v112 + 8) = *((_DWORD *)v81 + 2);
        *(_QWORD *)v112 = v113;
        v114 = v178 + 12 * (v64 + 14);
        v115 = *(_QWORD *)v82;
        *(_DWORD *)(v114 + 8) = *((_DWORD *)v82 + 2);
        *(_QWORD *)v114 = v115;
        v116 = v178 + 12 * (v64 + 15);
        v117 = *(_QWORD *)v83;
        *(_DWORD *)(v116 + 8) = *((_DWORD *)v83 + 2);
        *(_QWORD *)v116 = v117;
        LODWORD(v117) = v64 + 17;
        v118 = v178 + 12 * (v64 + 16);
        v119 = *(_QWORD *)v84;
        *(_DWORD *)(v118 + 8) = *((_DWORD *)v84 + 2);
        *(_QWORD *)v118 = v119;
        v64 += 18;
        v120 = v178 + 12 * v117;
        v121 = *(_QWORD *)v85;
        *(_DWORD *)(v120 + 8) = *((_DWORD *)v85 + 2);
        *(_QWORD *)v120 = v121;
      }
      else
      {
        v122 = 0;
        v123 = 18;
        do
        {
          v128 = (char *)v61 + 12 * (v122 / 0x12);
          v187 = *(_QWORD *)v128;
          v188 = *((_DWORD *)v128 + 2);
          v129 = v178;
          if (!v65)
          {
            v130 = v178 + 12 * v64++;
            v131 = *(_QWORD *)v128;
            *(_DWORD *)(v130 + 8) = *((_DWORD *)v128 + 2);
            *(_QWORD *)v130 = v131;
            v129 = v178;
          }
          v124 = v129 + 12 * v64;
          v125 = v187;
          *(_QWORD *)v124 = v187;
          v126 = v188;
          *(_DWORD *)(v124 + 8) = v188;
          LODWORD(v124) = v64 + 1;
          v64 += 2;
          v127 = v178 + 12 * v124;
          *(_QWORD *)v127 = v125;
          *(_DWORD *)(v127 + 8) = v126;
          v122 -= 0x5555555555555555 * (((char *)v11 - (char *)v61) >> 2);
          --v123;
        }
        while (v123);
      }
      ++v65;
    }
    while (v65 != 9);
  }
  sub_22414E9E0(a2, (uint64_t)v177);
  sub_22316F8F4((uint64_t *)v177);
  v132 = a6 * 0.1;
  v133 = a6 * 0.2;
  if (*(_BYTE *)(a1 + 105))
  {
    v133 = v133 + v133;
  }
  else if (*(_BYTE *)(a1 + 168))
  {
    v132 = v132 + v132;
  }
  sub_223A96898((uint64_t)v177, *(_QWORD *)(a1 + 24), *(int32x2_t **)(a1 + 32), v61, v11, v133, v132);
  sub_22414E9E0(a3, (uint64_t)v177);
  sub_22316F8F4((uint64_t *)v177);
  v136 = *a5;
  v135 = a5[1];
  v137 = *(_QWORD *)(a1 + 24);
  if (v135 >= a5[2])
  {
    v139 = sub_2233B2B48(a5, (uint64_t *)v137);
  }
  else
  {
    v138 = *(_QWORD *)v137;
    *(_DWORD *)(v135 + 8) = *(_DWORD *)(v137 + 8);
    *(_QWORD *)v135 = v138;
    v139 = v135 + 12;
  }
  a5[1] = v139;
  if (v139 >= a5[2])
  {
    v141 = sub_2233B2B48(a5, (uint64_t *)&v183);
  }
  else
  {
    v140 = v183.i64[0];
    *(_DWORD *)(v139 + 8) = v183.i32[2];
    *(_QWORD *)v139 = v140;
    v141 = v139 + 12;
  }
  a5[1] = v141;
  v142 = *(_QWORD *)(a1 + 24);
  v134.i64[0] = *(_QWORD *)v142;
  v134.i32[2] = *(_DWORD *)(v142 + 8);
  v143 = vaddq_f32(v134, (float32x4_t)vdupq_n_s32(0x3A83126Fu));
  DWORD2(v177[0]) = v143.i32[2];
  *(_QWORD *)&v177[0] = v143.i64[0];
  if (v141 >= a5[2])
  {
    v145 = sub_2233B2838(a5, (uint64_t *)v177);
  }
  else
  {
    v144 = *(_QWORD *)&v177[0];
    *(_DWORD *)(v141 + 8) = DWORD2(v177[0]);
    *(_QWORD *)v141 = v144;
    v145 = v141 + 12;
  }
  a5[1] = v145;
  *(_QWORD *)&v177[0] = 0;
  DWORD2(v177[0]) = 0;
  v146 = a5[5];
  if (v146 >= a5[6])
  {
    v148 = sub_2233B2838(a5 + 4, (uint64_t *)v177);
  }
  else
  {
    v147 = *(_QWORD *)&v177[0];
    *(_DWORD *)(v146 + 8) = DWORD2(v177[0]);
    *(_QWORD *)v146 = v147;
    v148 = v146 + 12;
  }
  a5[5] = v148;
  *(_QWORD *)&v177[0] = 0;
  DWORD2(v177[0]) = 0;
  if (v148 >= a5[6])
  {
    v150 = sub_2233B2838(a5 + 4, (uint64_t *)v177);
  }
  else
  {
    v149 = *(_QWORD *)&v177[0];
    *(_DWORD *)(v148 + 8) = DWORD2(v177[0]);
    *(_QWORD *)v148 = v149;
    v150 = v148 + 12;
  }
  a5[5] = v150;
  *(_QWORD *)&v177[0] = 0;
  DWORD2(v177[0]) = 0;
  if (v150 >= a5[6])
  {
    v152 = sub_2233B2838(a5 + 4, (uint64_t *)v177);
  }
  else
  {
    v151 = *(_QWORD *)&v177[0];
    *(_DWORD *)(v150 + 8) = DWORD2(v177[0]);
    *(_QWORD *)v150 = v151;
    v152 = v150 + 12;
  }
  a5[5] = v152;
  LODWORD(v177[0]) = -1431655765 * ((v135 - v136) >> 2);
  *(int32x2_t *)((char *)v177 + 4) = vadd_s32(vdup_n_s32(v177[0]), (int32x2_t)0x200000001);
  v153 = a5[15];
  if (v153 >= a5[16])
  {
    v155 = sub_2233B29C0(a5 + 14, (uint64_t *)v177);
  }
  else
  {
    v154 = *(_QWORD *)&v177[0];
    *(_DWORD *)(v153 + 8) = DWORD2(v177[0]);
    *(_QWORD *)v153 = v154;
    v155 = v153 + 12;
  }
  a5[15] = v155;
  if (*(_QWORD *)(a1 + 96))
  {
    v156 = 0;
    do
    {
      v159 = *(_QWORD *)(a1 + 56)
           + (((v156 + *(_QWORD *)(a1 + 80))
             % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 6)) << 6);
      v160 = 0.9;
      if (*(_BYTE *)(v159 + 40))
        v161 = 0.9;
      else
        v161 = 0.1;
      if (!*(_QWORD *)(v159 + 24))
        v160 = 0.1;
      *(_QWORD *)&v177[0] = __PAIR64__(LODWORD(v160), LODWORD(v161));
      DWORD2(v177[0]) = 1053609165;
      v162 = a4[1];
      if (v162 >= a4[2])
      {
        v164 = sub_2233B2B48(a4, (uint64_t *)v159);
      }
      else
      {
        v163 = *(_QWORD *)v159;
        *(_DWORD *)(v162 + 8) = *(_DWORD *)(v159 + 8);
        *(_QWORD *)v162 = v163;
        v164 = v162 + 12;
      }
      a4[1] = v164;
      v165 = a4[5];
      if (v165 < a4[6])
      {
        v157 = *(_QWORD *)&v177[0];
        *(_DWORD *)(v165 + 8) = DWORD2(v177[0]);
        *(_QWORD *)v165 = v157;
        v158 = v165 + 12;
      }
      else
      {
        v158 = sub_2233B2B48(a4 + 4, (uint64_t *)v177);
      }
      a4[5] = v158;
      ++v156;
    }
    while (v156 != *(_QWORD *)(a1 + 96));
  }
  if (v184)
    operator delete(v184);
}

void sub_223A9CF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  void *v15;
  va_list va;

  va_start(va, a13);
  sub_22316F8F4((uint64_t *)va);
  v15 = *(void **)(v13 - 176);
  if (v15)
  {
    *(_QWORD *)(v13 - 168) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_223A9CF7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  void *__p;
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 3;
    LODWORD(__p) = 4605011;
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_22329D76C((uint64_t)v4, a1, a2, (uint64_t)&__p, &v5);
    if (v7 < 0)
      operator delete(__p);
  }
}

void sub_223A9D024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223A9D040(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __n128 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  std::mutex *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  std::string *v58;
  uint64_t v59;
  uint64_t v60;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v63;
  std::string::size_type v64;
  int v65;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  std::mutex *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t *v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  std::mutex *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  std::string *v99;
  uint64_t v100;
  uint64_t v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  std::string::size_type v105;
  int v106;
  uint64_t *v109[2];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::string __p;
  const char *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  _QWORD v118[8];
  unsigned int v119;
  char v120;
  char v121;
  char v122;
  char v123;
  unsigned int v124;
  char v125;
  char v126;
  _BYTE v127[32];
  _DWORD v128[4];
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v6 = sub_2241471F8();
    v7 = v6[2];
    if (!v7)
    {
      v8 = v6;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v7 = v8[2];
    }
    v9 = *(_QWORD *)(v7 + 64);
    v10 = (std::mutex *)(v9 + 32);
    std::mutex::lock((std::mutex *)(v9 + 32));
    v12 = *(_QWORD *)(v9 + 96);
    v11 = *(_QWORD *)(v9 + 104);
    std::mutex::unlock(v10);
    if (v12 != v11)
    {
      v114 = "cv3d.recon.";
      v115 = 11;
      v116 = "JasperMeshing.Images";
      v117 = 20;
      sub_2231A9820((uint64_t)&v114, (uint64_t)v118, 0, 0, (std::string *)v127);
      v13 = v127[23];
      v14 = *(_OWORD *)v127;
      sub_2241471F8();
      if ((v13 & 0x80u) == 0)
        v15 = v127;
      else
        v15 = (_BYTE *)v14;
      if ((v13 & 0x80u) == 0)
        v16 = v13;
      else
        v16 = *((_QWORD *)&v14 + 1);
      v17 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v15, v16);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
      if (a2[2])
        v19 = v18;
      else
        v19 = 0;
      if ((v127[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v127);
        if (!v19)
          goto LABEL_101;
      }
      else if (!v19)
      {
        goto LABEL_101;
      }
      v110 = *(_QWORD *)(*a2 + 32);
      *(_WORD *)v127 = 0;
      v127[2] = 0;
      v114 = (const char *)&off_24EC21B18;
      sub_2231C5C38((_DWORD *)(a1 + 32), &v115);
      sub_22370325C((uint64_t)&v114, (__int16 *)v127);
      v109[0] = &v110;
      v109[1] = a2;
      v21 = *(_QWORD *)(a1 + 8);
      if (!v21)
        goto LABEL_35;
      v22 = *(std::__shared_weak_count **)(a1 + 16);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v21 = *(_QWORD *)(a1 + 8);
        v26 = *(std::__shared_weak_count **)(a1 + 16);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
          do
            v29 = __ldaxr(v27);
          while (__stlxr(v29 - 1, v27));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      if (*(_BYTE *)(a1 + 49))
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v21 + 96))(&v112, v21, 0);
        v31 = v115;
        v30 = (std::__shared_weak_count *)v116;
        if (!v116)
          goto LABEL_41;
      }
      else
      {
LABEL_35:
        v112 = 0;
        v31 = v115;
        v30 = (std::__shared_weak_count *)v116;
        if (!v116)
          goto LABEL_41;
      }
      v32 = (unint64_t *)&v30->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
LABEL_41:
      if (v31 && v126)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v115 + 96))(&v111, v115, 1);
        v35 = *(_DWORD *)(a1 + 32);
        if (!v35)
          goto LABEL_63;
      }
      else
      {
        v111 = 0;
        v35 = *(_DWORD *)(a1 + 32);
        if (!v35)
        {
LABEL_63:
          v48 = v111;
          v111 = 0;
          if (v48)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v48 + 8))(v48, v20);
          v49 = v112;
          v112 = 0;
          if (v49)
            (*(void (**)(uint64_t, __n128))(*(_QWORD *)v49 + 8))(v49, v20);
          *(_QWORD *)v127 = "cv3d.recon.";
          *(_QWORD *)&v127[8] = 11;
          *(_QWORD *)&v127[16] = "JasperMeshing.Images";
          *(_QWORD *)&v127[24] = 20;
          sub_2231A9820((uint64_t)v127, (uint64_t)v128, 0, 0, &__p);
          sub_224569D7C();
          sub_224569A80();
          if (os_variant_has_internal_diagnostics())
          {
            v50 = sub_2241471F8();
            v51 = v50[2];
            if (!v51)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
              {
                abort();
              }
              v51 = v50[2];
            }
            v52 = *(_QWORD *)(v51 + 64);
            v53 = (std::mutex *)(v52 + 32);
            std::mutex::lock((std::mutex *)(v52 + 32));
            v55 = *(_QWORD *)(v52 + 96);
            v54 = *(_QWORD *)(v52 + 104);
            std::mutex::unlock(v53);
            if (v55 != v54)
            {
              v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              v57 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              sub_2241471F8();
              v58 = (v56 & 0x80u) == 0 ? &__p : (std::string *)v57;
              v59 = (v56 & 0x80u) == 0 ? v56 : *((_QWORD *)&v57 + 1);
              v60 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v58, v59);
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60))
              {
                memset(v127, 0, sizeof(v127));
                v128[0] = 728325608;
                kdebug_trace();
                sub_223A9DCDC(v60, (uint64_t)&v114);
                kdebug_trace();
              }
            }
          }
          memset(v127, 0, sizeof(v127));
          v128[0] = 728325624;
          kdebug_trace();
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (size >= 0x11)
          {
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v63 = p_p->__r_.__value_.__r.__words[0];
            v64 = p_p->__r_.__value_.__l.__size_;
            v65 = p_p->__r_.__value_.__s.__data_[16];
            if (v63 == 0x6365722E64337663 && v64 == 0x73746174532E6E6FLL && v65 == 46)
              sub_223187510();
          }
          kdebug_trace();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v68 = (std::__shared_weak_count *)v116;
          if (v116)
          {
            v69 = (unint64_t *)(v116 + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          goto LABEL_101;
        }
      }
      v36 = *(_DWORD *)(a1 + 36);
      if (v36)
      {
        *(_QWORD *)v127 = (unint64_t)v119 << 32;
        *(_DWORD *)&v127[8] = v35 - 1;
        v37 = *(unsigned int *)(a1 + 44);
        *(_DWORD *)&v127[12] = *(_DWORD *)(a1 + 40);
        v127[16] = v120;
        v127[17] = v121;
        v127[18] = v122;
        v127[19] = v123;
        *(_DWORD *)&v127[20] = v36 - 1;
        *(_QWORD *)&v127[24] = v37 | ((unint64_t)v124 << 32);
        v38 = *(unsigned __int16 **)(a1 + 24);
        if (*(_BYTE *)(a1 + 48) && v38)
        {
          v39 = *(_QWORD *)(a1 + 8);
          v40 = *(std::__shared_weak_count **)(a1 + 16);
          if (v40)
          {
            v41 = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
            do
              v43 = __ldaxr(v41);
            while (__stlxr(v43 - 1, v41));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v39 + 88))(v39, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          v38 = *(unsigned __int16 **)(a1 + 24);
        }
        v44 = (_BYTE *)v118[0];
        if (v125 && v118[0])
        {
          (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v115 + 88))(v115, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1190");
          v44 = (_BYTE *)v118[0];
        }
        memset(&__p, 0, sizeof(__p));
        v45 = *(_DWORD *)&v127[20];
        if (*(_DWORD *)&v127[20])
        {
          v46 = *(unsigned int *)&v127[28];
          v47 = 2 * *(unsigned int *)&v127[24];
          do
          {
            sub_223A9F0AC(v127, &__p, v109, v38, v44);
            v44 += v46;
            v38 = (unsigned __int16 *)((char *)v38 + v47);
            --v45;
          }
          while (v45);
        }
        v20.n128_f32[0] = sub_223A9F0AC(v127, &__p, v109, v38, v44);
      }
      goto LABEL_63;
    }
  }
LABEL_101:
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v71 = sub_2241471F8();
    v72 = v71[2];
    if (!v72)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v72 = v71[2];
    }
    v73 = *(_QWORD *)(v72 + 64);
    v74 = (std::mutex *)(v73 + 32);
    std::mutex::lock((std::mutex *)(v73 + 32));
    v76 = *(_QWORD *)(v73 + 96);
    v75 = *(_QWORD *)(v73 + 104);
    std::mutex::unlock(v74);
    if (v76 != v75)
    {
      v114 = "cv3d.recon.";
      v115 = 11;
      v116 = "JasperMeshing.Mesh";
      v117 = 18;
      sub_2231A9820((uint64_t)&v114, (uint64_t)v118, 0, 0, (std::string *)v127);
      v77 = v127[23];
      v78 = *(_OWORD *)v127;
      sub_2241471F8();
      if ((v77 & 0x80u) == 0)
        v79 = v127;
      else
        v79 = (_BYTE *)v78;
      if ((v77 & 0x80u) == 0)
        v80 = v77;
      else
        v80 = *((_QWORD *)&v78 + 1);
      v81 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v79, v80);
      v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
      if (*a3 == a3[1])
        v83 = 0;
      else
        v83 = v82;
      if ((v127[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v127);
        if (!v83)
          return;
      }
      else if (!v83)
      {
        return;
      }
      sub_2241498F4((uint64_t)&v114, 0);
      v84 = *a3;
      v85 = a3[1];
      v86 = ((char *)v85 - (char *)*a3) >> 6;
      v87 = 0xAAAAAAAAAAAAAAABLL * ((v115 - (uint64_t)v114) >> 2);
      if (v86 <= v87)
      {
        if (v86 < v87)
          v115 = (uint64_t)&v114[12 * v86];
      }
      else
      {
        sub_22317EF30((uint64_t)&v114, v86 - v87);
        v84 = *a3;
        v85 = a3[1];
      }
      if (v84 != v85)
      {
        v88 = 0;
        do
        {
          v89 = (char *)&v114[v88];
          v90 = *v84;
          *((_DWORD *)v89 + 2) = *((_DWORD *)v84 + 2);
          *(_QWORD *)v89 = v90;
          v84 += 8;
          v88 += 12;
        }
        while (v84 != v85);
      }
      *(_QWORD *)v127 = "cv3d.recon.";
      *(_QWORD *)&v127[8] = 11;
      *(_QWORD *)&v127[16] = "JasperMeshing.Mesh";
      *(_QWORD *)&v127[24] = 18;
      sub_2231A9820((uint64_t)v127, (uint64_t)v128, 0, 0, &__p);
      sub_224569D7C();
      sub_224569A80();
      if (os_variant_has_internal_diagnostics())
      {
        v91 = sub_2241471F8();
        v92 = v91[2];
        if (!v92)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v92 = v91[2];
        }
        v93 = *(_QWORD *)(v92 + 64);
        v94 = (std::mutex *)(v93 + 32);
        std::mutex::lock((std::mutex *)(v93 + 32));
        v96 = *(_QWORD *)(v93 + 96);
        v95 = *(_QWORD *)(v93 + 104);
        std::mutex::unlock(v94);
        if (v96 != v95)
        {
          v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v98 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          sub_2241471F8();
          v99 = (v97 & 0x80u) == 0 ? &__p : (std::string *)v98;
          v100 = (v97 & 0x80u) == 0 ? v97 : *((_QWORD *)&v98 + 1);
          v101 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_2557952E0 + 48))(&qword_2557952E0, v99, v100);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v101 + 24))(v101))
          {
            memset(v127, 0, sizeof(v127));
            v128[0] = 728325608;
            kdebug_trace();
            sub_22386D8A8((double *)&qword_255788F20, v101, (uint64_t)&v114, "planes");
            kdebug_trace();
          }
        }
      }
      memset(v127, 0, sizeof(v127));
      v128[0] = 728325624;
      kdebug_trace();
      v102 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v102 = __p.__r_.__value_.__l.__size_;
      if (v102 >= 0x11)
      {
        v103 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v103 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v104 = v103->__r_.__value_.__r.__words[0];
        v105 = v103->__r_.__value_.__l.__size_;
        v106 = v103->__r_.__value_.__s.__data_[16];
        if (v104 == 0x6365722E64337663 && v105 == 0x73746174532E6E6FLL && v106 == 46)
          sub_223187510();
      }
      kdebug_trace();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_22316F8F4((uint64_t *)&v114);
    }
  }
}

void sub_223A9DB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223A9DCDC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  __int128 v5;
  char __p[18];
  char v7;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
  {
    v7 = 17;
    strcpy(__p, "PlaneSegmentation");
    *(_QWORD *)&v5 = (uint64_t)(*(double *)&qword_255788F20 * 1000000000.0);
    *((_QWORD *)&v5 + 1) = 2;
    v4 = sub_2241471F8();
    sub_223A9F3A8((uint64_t)v4, a1, a2, (uint64_t)__p, &v5);
    if (v7 < 0)
      operator delete(*(void **)__p);
  }
}

void sub_223A9DD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223A9DDAC(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t result;
  _BYTE v3[24];
  int v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  int v12;
  _QWORD v13[5];
  _QWORD *v14;

  v4 = 0;
  v1 = *a1;
  v11 = **a1;
  v12 = *((_DWORD *)v1 + 2);
  v7 = 0x300000001;
  v8 = 1;
  v9 = &v11;
  v10 = 0;
  sub_2245057A0((unsigned int *)&v7, __p);
  v13[0] = v3;
  v13[1] = __p;
  v13[2] = v3;
  v13[3] = __p;
  v13[4] = __p;
  v14 = v13;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v14, v3);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v4 == -1)
    sub_22316DD70();
  v13[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5EB38[v4])(v13, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5EB08[v4])(v13, v3);
  return result;
}

void sub_223A9DECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A9DEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

char ***sub_223A9DF08(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v11 = *v4;
    v12 = 0x8E38E38E38E38E39 * ((v6 - *v4) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL)
      sub_22352449C();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (_QWORD)v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 > 0x38E38E38E38E38ELL)
        sub_223174E94();
      v16 = (char *)operator new(72 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[72 * v12];
    *(_QWORD *)v17 = *(_QWORD *)a2;
    *(_OWORD *)(v17 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(v17 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(v17 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v17 + 56) = *(_OWORD *)(a2 + 56);
    v10 = v17 + 72;
    if (v6 != v11)
    {
      do
      {
        v18 = *((_QWORD *)v6 - 9);
        v6 -= 72;
        *((_QWORD *)v17 - 9) = v18;
        v17 -= 72;
        v19 = *(_OWORD *)(v6 + 8);
        v20 = *(_OWORD *)(v6 + 24);
        v21 = *(_OWORD *)(v6 + 40);
        *(_OWORD *)(v17 + 56) = *(_OWORD *)(v6 + 56);
        *(_OWORD *)(v17 + 40) = v21;
        *(_OWORD *)(v17 + 24) = v20;
        *(_OWORD *)(v17 + 8) = v19;
      }
      while (v6 != v11);
      v6 = *v4;
    }
    *v4 = v17;
    v4[1] = v10;
    v4[2] = &v16[72 * v15];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)a2;
    v7 = *(_OWORD *)(a2 + 8);
    v8 = *(_OWORD *)(a2 + 24);
    v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(v6 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v6 + 40) = v9;
    *(_OWORD *)(v6 + 24) = v8;
    *(_OWORD *)(v6 + 8) = v7;
    v10 = v6 + 72;
  }
  v4[1] = v10;
  return a1;
}

uint64_t sub_223A9E0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int128 *a5)
{
  uint64_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  std::__shared_weak_count *v32;
  uint64_t (**v33)();
  __int128 v34;
  _OWORD v35[2];
  mach_timebase_info info;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _QWORD v39[2];
  _QWORD v40[3];
  _BYTE v41[15];
  char v42;
  char v43;
  char v44;
  char v45;
  __int128 v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v11 = *a4;
    v39[0] = a4[1];
    *(_QWORD *)((char *)v39 + 7) = *(uint64_t *)((char *)a4 + 15);
    v12 = *((_BYTE *)a4 + 23);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v13 = mach_continuous_time();
    v14 = atomic_load((unsigned __int8 *)&qword_255795560);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
    {
      mach_timebase_info(&info);
      LODWORD(v29) = info.numer;
      LODWORD(v30) = info.denom;
      *(double *)&qword_255795558 = (double)v29 / (double)v30;
      __cxa_guard_release(&qword_255795560);
    }
    v40[0] = llround(*(double *)&qword_255795558 * (double)v13);
    v40[1] = 2;
    v40[2] = v11;
    *(_QWORD *)v41 = v39[0];
    *(_QWORD *)&v41[7] = *(_QWORD *)((char *)v39 + 7);
    v42 = v12;
    v39[0] = 0;
    *(_QWORD *)((char *)v39 + 7) = 0;
    v43 = 1;
    v44 = 0;
    v45 = 0;
    v46 = *a5;
    v47 = 1;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v15 = operator new();
    info = (mach_timebase_info)&off_24EC1F958;
    sub_223A4E7F0(a3, (uint64_t)&v37);
    v33 = &off_24EC219D8;
    sub_2231F9F68((uint64_t)&info, (uint64_t)&v34);
    v16 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_QWORD *)v15 = &off_24EC21AC8;
    *(_QWORD *)(v15 + 8) = &off_24EC219D8;
    v19 = v34;
    v20 = v35[0];
    v34 = 0uLL;
    *(_OWORD *)(v15 + 16) = v19;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)(v15 + 46) = *(_OWORD *)((char *)v35 + 14);
    sub_2231AB0FC(v15 + 64, (uint64_t)v40);
    *(_QWORD *)v15 = &off_24EC21A48;
    v33 = &off_24EC219D8;
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    *(_QWORD *)v15 = &off_24EC6A528;
    info = 0;
    v31[0] = &off_24EC6A3B8;
    v31[1] = v15;
    v24 = (std::__shared_weak_count *)operator new();
    v24->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
    v24->__shared_owners_ = 0;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
    v32 = v24;
    sub_2231AD66C((uint64_t)v40);
    sub_2231AA5A4(a1, v10, (uint64_t)v31);
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  return a1;
}

void sub_223A9E3C8(_Unwind_Exception *a1)
{
  void *v1;
  int v2;

  __cxa_guard_abort(&qword_255795560);
  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223A9E4D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC20DE8;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 32);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x227684CE8](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_223A9E780(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_223A9E744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_223A9E780(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_2244B6E68((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24EC24CE0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC24D78;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 32);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x227684CE8](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_2233340D0((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_223A9EA94((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x227684CE8](v22, 0x1091C40A44A61E0);
  }
}

void sub_223A9EA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_223167354(v4);
  sub_223203D80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223A9EA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_223167354(v12);
  sub_223167354((uint64_t)&a9);
  sub_223203D80(&a12);
  _Unwind_Resume(a1);
}

void sub_223A9EA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_223203D80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223A9EA7C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

float sub_223A9EA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  float result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(float **)a2;
    v11 = *(float **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        result = v10[3];
        v11[3] = result;
        return result;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_223A9EC04(int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5EB38[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC5EB08[v3])(v5, v2);
  return result;
}

void sub_223A9ECF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223A9ED08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223A9ED2C(unint64_t **a1, unsigned int *a2)
{
  unint64_t *v3;
  unsigned int v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  unsigned int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v3 = *a1;
  v4 = *a2;
  v6 = (uint64_t **)(*a1 + 1);
  v5 = *v6;
  if (!*v6)
  {
    v12 = a1 + 1;
    v15 = -1431655765 * ((a1[1][1] - *a1[1]) >> 2);
    v16 = (uint64_t **)(*a1 + 1);
    goto LABEL_21;
  }
  v7 = (uint64_t)(*a1 + 1);
  v8 = *(_QWORD *)v7;
  do
  {
    v9 = *(_DWORD *)(v8 + 28);
    v10 = v9 >= v4;
    if (v9 >= v4)
      v11 = (uint64_t *)v8;
    else
      v11 = (uint64_t *)(v8 + 8);
    if (v10)
      v7 = v8;
    v8 = *v11;
  }
  while (*v11);
  if ((uint64_t **)v7 == v6 || v4 < *(_DWORD *)(v7 + 28))
  {
    v12 = a1 + 1;
    v13 = a1[1];
    v14 = v13[1];
    v15 = -1431655765 * ((v14 - *v13) >> 2);
    do
    {
      while (1)
      {
        v16 = (uint64_t **)v5;
        v17 = *((_DWORD *)v5 + 7);
        if (v4 < v17)
          break;
        if (v17 >= v4)
          goto LABEL_24;
        v5 = v16[1];
        if (!v5)
        {
          v6 = v16 + 1;
          goto LABEL_21;
        }
      }
      v5 = *v16;
    }
    while (*v16);
    v6 = v16;
LABEL_21:
    v18 = (uint64_t *)v16;
    v16 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v16 + 7) = v4;
    *((_DWORD *)v16 + 8) = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = v18;
    *v6 = (uint64_t *)v16;
    v19 = *(_QWORD *)*v3;
    v20 = (uint64_t *)v16;
    if (v19)
    {
      *v3 = v19;
      v20 = *v6;
    }
    sub_2231A9A8C((uint64_t *)v3[1], v20);
    ++v3[2];
    v13 = *v12;
    v14 = (*v12)[1];
LABEL_24:
    *((_DWORD *)v16 + 8) = v15;
    v21 = *((_QWORD *)a2 + 3);
    if (v14 >= v13[2])
    {
      v13[1] = sub_2233B2B48(v13, (uint64_t *)v21);
      v23 = *v12;
      v24 = *((_QWORD *)a2 + 4);
      v25 = v23[10];
      if (v25 >= v23[11])
        goto LABEL_26;
    }
    else
    {
      v22 = *(_QWORD *)v21;
      *(_DWORD *)(v14 + 8) = *(_DWORD *)(v21 + 8);
      *(_QWORD *)v14 = v22;
      v13[1] = v14 + 12;
      v23 = *v12;
      v24 = *((_QWORD *)a2 + 4);
      v25 = v23[10];
      if (v25 >= v23[11])
      {
LABEL_26:
        v26 = sub_2233B2B48(v23 + 9, (uint64_t *)v24);
LABEL_29:
        v23[10] = v26;
        return v15;
      }
    }
    v27 = *(_QWORD *)v24;
    *(_DWORD *)(v25 + 8) = *(_DWORD *)(v24 + 8);
    *(_QWORD *)v25 = v27;
    v26 = v25 + 12;
    goto LABEL_29;
  }
  return *(unsigned int *)(v7 + 32);
}

_DWORD *sub_223A9EF0C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD **v23;
  int v24;
  _QWORD *v25;

  v5 = 0x1555555555555555;
  v6 = *(_QWORD ***)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0x1555555555555555)
    sub_22316E078();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) > v9)
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v6) >> 2) < 0xAAAAAAAAAAAAAAALL)
    v5 = v9;
  if (v5)
  {
    LODWORD(v25) = v5;
    v13 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v23 = &v25;
    v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC5EAE8[v13])(&v23, a1 + 24);
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v16 = (_DWORD *)(v14 + 12 * v8);
  *v16 = *a2;
  v16[1] = *a3;
  v16[2] = *a4;
  v17 = v16 + 3;
  if ((_QWORD **)v7 != v6)
  {
    do
    {
      v18 = *(_QWORD *)(v7 - 12);
      v7 -= 12;
      v19 = *(_DWORD *)(v7 + 8);
      *(_QWORD *)(v16 - 3) = v18;
      v16 -= 3;
      v16[2] = v19;
    }
    while ((_QWORD **)v7 != v6);
    v6 = *(_QWORD ***)a1;
  }
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v17;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14 + 12 * v15;
  if (v6)
  {
    v23 = v6;
    v24 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v6) >> 2);
    v21 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v25 = &v23;
    ((void (*)(_QWORD **, uint64_t))off_24EC5EAF8[v21])(&v25, a1 + 24);
  }
  return v17;
}

float32_t sub_223A9F0AC(_DWORD *a1, _QWORD *a2, uint64_t **a3, unsigned __int16 *a4, _BYTE *a5)
{
  _BYTE *v5;
  unsigned int v9;
  int v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float32_t result;
  uint64_t **v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;
  BOOL v25;
  _BOOL4 v26;
  BOOL v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unsigned int v35;
  BOOL v36;
  _BOOL4 v37;
  _BOOL4 v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int v43;
  float32x4_t v44;
  float32x4_t v45;

  v5 = a5;
  a2[1] = a5;
  v9 = a1[2];
  if (!v9)
    goto LABEL_18;
  v11 = 0;
  v12 = (float32x4_t)vdupq_n_s32(0x3B800000u);
  v13.i64[0] = 255;
  v13.i64[1] = 255;
  v14 = (float32x4_t)vdupq_n_s32(0x43800000u);
  v44 = v14;
  v45 = v12;
  while (2)
  {
    *a2 = a4;
    a2[1] = v5;
    v20 = (uint64_t **)a3[1][1];
    if (!v20)
      goto LABEL_5;
    v21 = *a4;
    v22 = (uint64_t *)**a3;
    while (1)
    {
      v23 = v20[4];
      v24 = *((unsigned __int16 *)v20 + 20);
      v25 = v24 > v21;
      if (v23 != v22)
        v25 = (uint64_t)v23 > (uint64_t)v22;
      if (v25)
        goto LABEL_8;
      v26 = v24 < v21;
      v27 = v23 == v22;
      v28 = (uint64_t)v23 < (uint64_t)v22;
      if (v27)
        v28 = v26;
      if (!v28)
        break;
      ++v20;
LABEL_8:
      v20 = (uint64_t **)*v20;
      if (!v20)
        goto LABEL_5;
    }
    if (!v5)
    {
      v29 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      v14 = v44;
      v12 = v45;
      v13.i64[0] = 255;
      v13.i64[1] = 255;
      if (v29)
LABEL_17:
        abort();
    }
    v15.i64[0] = ((unint64_t)&v22[8 * ((v21 + 2654499954) ^ 0x3E7) + 331804471]
                + (((v21 + 2654499954) ^ 0x3E7uLL) >> 2)
                + 1) ^ (v21 + 2654499954) ^ 0x3E7;
    v15.i64[1] = (unint64_t)v15.i64[0] >> 8;
    v16 = (float32x4_t)vcvtq_f64_u64((uint64x2_t)vandq_s8(v15, v13));
    *(float32x2_t *)v16.f32 = vcvt_f32_f64((float64x2_t)v16);
    v16.f32[2] = (float)((((_DWORD)v22
                                          - 1640531527
                                          + ((((_DWORD)v21 - 1640467342) ^ 0x3E7) << 6)
                                          + (((v21 + 2654499954) ^ 0x3E7uLL) >> 2)) ^ ((_DWORD)v21 - 1640467342) ^ 0x3E7) >> 16);
    v17 = vmulq_f32(vmulq_f32(v16, v12), v14);
    v18 = (int)v17.f32[0];
    result = v17.f32[2];
    *v5 = v18;
    v5[1] = (int)v17.f32[1];
    v5[2] = (int)v17.f32[2];
    v9 = a1[2];
LABEL_5:
    a4 += a1[3];
    v5 += a1[4];
    if (++v11 < v9)
      continue;
    break;
  }
LABEL_18:
  *a2 = a4;
  a2[1] = v5;
  v30 = (uint64_t **)a3[1][1];
  if (!v30)
    return result;
  v31 = *a3;
  v32 = *a4;
  v33 = (uint64_t *)*v31;
  while (2)
  {
    v34 = v30[4];
    v35 = *((unsigned __int16 *)v30 + 20);
    v36 = v35 > v32;
    if (v34 != v33)
      v36 = (uint64_t)v34 > (uint64_t)v33;
    if (v36)
    {
LABEL_20:
      v30 = (uint64_t **)*v30;
      if (!v30)
        return result;
      continue;
    }
    break;
  }
  v37 = v35 < v32;
  v27 = v34 == v33;
  v38 = (uint64_t)v34 < (uint64_t)v33;
  if (v27)
    v38 = v37;
  if (v38)
  {
    ++v30;
    goto LABEL_20;
  }
  if (!v5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_17;
  }
  v39.i64[0] = ((unint64_t)&v33[8 * ((v32 + 2654499954) ^ 0x3E7) + 331804471]
              + (((v32 + 2654499954) ^ 0x3E7uLL) >> 2)
              + 1) ^ (v32 + 2654499954) ^ 0x3E7;
  v39.i64[1] = (unint64_t)v39.i64[0] >> 8;
  v40.i64[0] = 255;
  v40.i64[1] = 255;
  v41 = (float32x4_t)vcvtq_f64_u64((uint64x2_t)vandq_s8(v39, v40));
  *(float32x2_t *)v41.f32 = vcvt_f32_f64((float64x2_t)v41);
  v41.f32[2] = (float)((((_DWORD)v33
                                        + ((((_DWORD)v32 - 1640467342) ^ 0x3E7) << 6)
                                        + (((v32 + 2654499954) ^ 0x3E7uLL) >> 2)
                                        - 1640531527) ^ ((_DWORD)v32 - 1640467342) ^ 0x3E7) >> 16);
  v42 = vmulq_f32(vmulq_f32(v41, (float32x4_t)vdupq_n_s32(0x3B800000u)), (float32x4_t)vdupq_n_s32(0x43800000u));
  v43 = (int)v42.f32[0];
  result = v42.f32[2];
  *v5 = v43;
  v5[1] = (int)v42.f32[1];
  v5[2] = (int)v42.f32[2];
  return result;
}

uint64_t sub_223A9F3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  std::__shared_weak_count *v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    v17 = 1;
    sub_2237DD648(a3, (__int128 *)__p, a5, v18);
    sub_2231AA5A4(a1, v10, (uint64_t)v18);
    v11 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v17 && SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

void sub_223A9F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_2241231D8((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223A9F4E0(uint64_t a1, int a2, char a3, float a4)
{
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  char *v9;

  *(_QWORD *)a1 = &off_24EC5EB60;
  *(_WORD *)(a1 + 8) = a2;
  *(float *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a2 + 1;
  *(_DWORD *)(a1 + 24) = (a2 + 1) * (a2 + 1);
  v5 = ((a2 + 1) * (a2 + 1) * (a2 + 1));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if ((_DWORD)v5)
  {
    v6 = 8 * ((a2 + 1) * (a2 + 1) * (a2 + 1));
    v7 = (char *)operator new(v6);
    bzero(v7, 8 * v5);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = &v7[v6];
    *(_QWORD *)(a1 + 48) = &v7[v6];
    v8 = (char *)operator new(8 * v5);
    bzero(v8, 8 * v5);
    v9 = &v8[8 * v5];
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v9;
  }
  return a1;
}

void sub_223A9F58C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 40) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_223A9F5A4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24EC5EB60;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_223A9F5F0(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24EC5EB60;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223A9F64C(uint64_t a1, unsigned int **a2, float32x2_t *a3, _QWORD *a4, int a5)
{
  char *v8;
  uint64_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  unsigned int *v15;
  char *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int32 v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  uint64_t v27;
  void *v28;
  int64_t v29;
  uint64_t v30;
  int v31;
  float32x2_t v32;
  int8x16_t v33;
  int8x8_t v34;
  int *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  uint64_t k;
  uint64_t v61;
  uint64_t j;
  uint64_t v63;
  unint64_t v64;
  int8x16_t v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  float32x2_t **v68;
  std::__shared_weak_count *v69;
  float32x2_t *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t m;
  float32x2_t *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  uint64_t v87;
  unint64_t v88;
  int8x16_t v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  float32x2_t **v92;
  std::__shared_weak_count *v93;
  float32x2_t *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t ii;
  uint64_t v100;
  uint64_t n;
  float32x2_t *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  BOOL v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int32x2_t *v120;
  float32x2_t *v121;
  uint64_t v122;
  float32x2_t v123;
  float32x2_t v124;
  uint64_t v125;
  _QWORD *v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int *v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  double v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  double v144;
  double v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  int *v149;
  int *v150;
  int *v151;
  int *v152;
  int *v153;
  int *v154;
  uint64_t v156;
  uint64_t *v158;
  unsigned int *v159;
  __int32 v161;
  uint64_t v162;
  int v163;
  unsigned int *v164;
  __int32 v165;
  int v166;
  int32x2_t **v167;
  __int32 v168;
  int v169;
  uint64_t *v170;
  int8x16_t v171;
  int v172;
  float32x2_t v173;
  int v174;
  int8x16_t v175;
  int v176;
  int8x16_t v177;
  int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183[2];
  char v184;
  void *__p[2];
  char v186;
  _QWORD v187[2];
  char v188;
  __int128 v189;
  __int128 v190;
  int v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v189 = 0u;
  v190 = 0u;
  v191 = 728321664;
  kdebug_trace();
  v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "PointCloudMapper.ExtractChunkMeshes");
  strcpy((char *)v183, "PCMReconstruct");
  HIBYTE(v183[1]) = 0;
  v184 = 14;
  sub_223197FA4(__p, v8, 0x23uLL);
  v187[0] = 0;
  v187[1] = 0;
  v188 = 0;
  v187[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v188 = 1;
  operator delete(v8);
  v194 = 0x18FFFFFFF8;
  v195 = -24;
  v181 = 0;
  v182 = 0;
  v180 = &v181;
  v9 = sub_2235247E0((uint64_t **)&v180, (uint64_t *)&v181, &v193, &v192, (int *)&v194);
  if (*v9)
  {
    v15 = *a2;
    v159 = a2[1];
    if (*a2 == v159)
      goto LABEL_259;
    goto LABEL_7;
  }
  v16 = (char *)operator new(0x28uLL);
  *(_QWORD *)(v16 + 28) = v194;
  *((_DWORD *)v16 + 9) = v195;
  v17 = v193;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = v17;
  *v9 = (uint64_t)v16;
  if (*v180)
  {
    v180 = (uint64_t **)*v180;
    v16 = (char *)*v9;
  }
  sub_2231A9A8C(v181, (uint64_t *)v16);
  ++v182;
  v15 = *a2;
  v159 = a2[1];
  if (*a2 != v159)
  {
LABEL_7:
    v170 = (uint64_t *)(a1 + 56);
    v158 = (uint64_t *)(a1 + 32);
    v162 = (uint64_t)a4;
    do
    {
      v164 = v15;
      v18 = *v15;
      if (a4[11] <= v18
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v18) / 0x1F)) + 132 * ((a4[10] + v18) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v19 = a4[16];
      if (a4[11] <= v18
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v18) / 0x1F)) + 132 * ((a4[10] + v18) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v167 = (int32x2_t **)(v19 + 168 * v18);
      if (a5)
      {
        v20 = v181;
        if (v181)
        {
          v21 = (*v167)->i32[0];
          v22 = (*v167)->i32[1];
          v23 = (*v167)[1].i32[0];
          do
          {
            v24 = *((_DWORD *)v20 + 7);
            if (v21 == v24)
            {
              v25 = *((_DWORD *)v20 + 8);
              if (v22 == v25)
              {
                v26 = *((_DWORD *)v20 + 9);
                if (v23 < v26)
                  goto LABEL_21;
                if (v26 >= v23)
                  goto LABEL_32;
              }
              else
              {
                if (v22 < v25)
                  goto LABEL_21;
                if (v25 >= v22)
                {
LABEL_32:
                  v163 = 1;
                  goto LABEL_34;
                }
              }
            }
            else
            {
              if (v21 < v24)
                goto LABEL_21;
              if (v24 >= v21)
                goto LABEL_32;
            }
            ++v20;
LABEL_21:
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
      }
      v163 = 0;
LABEL_34:
      v27 = a4[19];
      v10.i64[0] = (uint64_t)v167[19];
      v10.i32[2] = *((_DWORD *)v167 + 40);
      v175 = (int8x16_t)v10;
      v28 = *(void **)(a1 + 32);
      v29 = *(_QWORD *)(a1 + 40) - (_QWORD)v28;
      if (v29 >= 1)
        bzero(v28, v29);
      v30 = 0;
      v179 = v27 + 104 * v18;
      v31 = *(unsigned __int16 *)(a1 + 8) + 1;
      v168 = v31 + (*v167)->i32[0];
      v165 = v31 + (*v167)->i32[1];
      v161 = (*v167)[1].i32[0] + v31;
      v32 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v175.i8, 1);
      v33 = vextq_s8(v175, v175, 8uLL);
      v173 = *(float32x2_t *)v33.i8;
      while (2)
      {
        v34 = (int8x8_t)a4[2];
        if (!*(_QWORD *)&v34)
          goto LABEL_37;
        v35 = (int *)((char *)&unk_22465E728 + 12 * v30);
        v36 = (*v167)->i32[0] + *v35 * (unint64_t)*(unsigned __int16 *)(a1 + 8);
        v37 = (*v167)->i32[1] + v35[1] * (unint64_t)*(unsigned __int16 *)(a1 + 8);
        v38 = (*v167)[1].i32[0] + v35[2] * (unint64_t)*(unsigned __int16 *)(a1 + 8);
        v39 = (83492791 * v37) ^ (19349669 * v36) ^ (37783632 * v38);
        *(int8x8_t *)v33.i8 = vcnt_s8(v34);
        v33.i16[0] = vaddlv_u8(*(uint8x8_t *)v33.i8);
        if (v33.u32[0] > 1uLL)
        {
          v40 = (83492791 * v37) ^ (19349669 * v36) ^ (37783632 * v38);
          if (v39 >= *(_QWORD *)&v34)
            v40 = v39 % *(_QWORD *)&v34;
        }
        else
        {
          v40 = v39 & (*(_QWORD *)&v34 - 1);
        }
        v41 = *(uint64_t ***)(a4[1] + 8 * v40);
        if (!v41)
          goto LABEL_37;
        v42 = *v41;
        if (!*v41)
          goto LABEL_37;
        if (v33.u32[0] < 2uLL)
        {
          v43 = *(_QWORD *)&v34 - 1;
          while (1)
          {
            v45 = v42[1];
            if (v39 == v45)
            {
              if (!*((_DWORD *)v42 + 4)
                && *((_DWORD *)v42 + 5) == (_DWORD)v36
                && *((_DWORD *)v42 + 6) == (_DWORD)v37
                && *((_DWORD *)v42 + 7) == (_DWORD)v38)
              {
                goto LABEL_64;
              }
            }
            else if ((v45 & v43) != v40)
            {
              goto LABEL_37;
            }
            v42 = (uint64_t *)*v42;
            if (!v42)
              goto LABEL_37;
          }
        }
        while (1)
        {
          v44 = v42[1];
          if (v39 == v44)
            break;
          if (v44 >= *(_QWORD *)&v34)
            v44 %= *(_QWORD *)&v34;
          if (v44 != v40)
            goto LABEL_37;
LABEL_48:
          v42 = (uint64_t *)*v42;
          if (!v42)
            goto LABEL_37;
        }
        if (*((_DWORD *)v42 + 4)
          || *((_DWORD *)v42 + 5) != (_DWORD)v36
          || *((_DWORD *)v42 + 6) != (_DWORD)v37
          || *((_DWORD *)v42 + 7) != (_DWORD)v38)
        {
          goto LABEL_48;
        }
LABEL_64:
        v46 = *((unsigned int *)v42 + 8);
        if (!*(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v46) / 0x1F)) + 132 * ((a4[10] + v46) % 0x1F) + 20))
          goto LABEL_71;
        sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 706, (uint64_t)"!metadata_blocks_[iter->second].IsErased()", 42, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
        v47 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670 || byte_255795678)
        {
          v57 = qword_255795648;
          for (i = qword_255795650; v57 != i; v57 += 16)
            (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v57)(*(_QWORD *)(v57 + 8), "!metadata_blocks_[iter->second].IsErased()", 42, "The block is erased", 19);
        }
        v48 = atomic_load((unsigned __int8 *)&qword_255795680);
        if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
        {
          __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
          __cxa_guard_release(&qword_255795680);
        }
        if (!byte_255795670)
          goto LABEL_264;
        qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[iter->second].IsErased()", 42, "The block is erased", 19);
        a4 = (_QWORD *)v162;
        v46 = *((unsigned int *)v42 + 8);
LABEL_71:
        if (a4[11] <= v46)
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C);
          v49 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v49 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v61 = qword_255795648;
            for (j = qword_255795650; v61 != j; v61 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v61)(*(_QWORD *)(v61 + 8), "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
          }
          v50 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v50 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (byte_255795670)
          {
            qword_255795660(*(_QWORD *)algn_255795668, "idx_block < metadata_blocks_.size()", 35, "Out of range", 12);
            a4 = (_QWORD *)v162;
            goto LABEL_78;
          }
LABEL_264:
          abort();
        }
LABEL_78:
        if (*(_BYTE *)(*(_QWORD *)(a4[7] + 8 * ((a4[10] + v46) / 0x1F)) + 132 * ((a4[10] + v46) % 0x1F) + 20))
        {
          sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C);
          v51 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670 || byte_255795678)
          {
            v59 = qword_255795648;
            for (k = qword_255795650; v59 != k; v59 += 16)
              (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v59)(*(_QWORD *)(v59 + 8), "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
          }
          v52 = atomic_load((unsigned __int8 *)&qword_255795680);
          if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
          {
            __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
            __cxa_guard_release(&qword_255795680);
          }
          if (!byte_255795670)
            goto LABEL_264;
          qword_255795660(*(_QWORD *)algn_255795668, "!metadata_blocks_[idx_block].IsErased()", 39, "The block is erased", 19);
          a4 = (_QWORD *)v162;
        }
        v53 = a4[16];
        if (v53)
        {
          v54 = v53 + 168 * v46;
          v55 = *(_QWORD *)(v54 + 56);
          v56 = *(_QWORD *)(v54 + 64);
          while (1)
          {
            if (v55 == v56)
              goto LABEL_37;
            if (*(_DWORD *)v55 != -1
              && *(_DWORD *)(v55 + 4) < v168
              && *(_DWORD *)(v55 + 8) < v165
              && *(_DWORD *)(v55 + 12) < v161)
            {
              v63 = *(unsigned __int8 *)(v55 + 168);
              if (*(_BYTE *)(v55 + 168))
              {
                v64 = 0;
                v33.i32[0] = -1.0;
                v177 = v33;
                while (1)
                {
                  if (v64 >= *(unsigned __int8 *)(v55 + 168))
                  {
                    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C);
                    v66 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670 || byte_255795678)
                    {
                      v74 = qword_255795648;
                      for (m = qword_255795650; v74 != m; v74 += 16)
                        (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v74)(*(_QWORD *)(v74 + 8), "index < plane_count_", 20, "index out of range", 18);
                    }
                    v67 = atomic_load((unsigned __int8 *)&qword_255795680);
                    if ((v67 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                    {
                      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                      __cxa_guard_release(&qword_255795680);
                    }
                    if (!byte_255795670)
                      goto LABEL_264;
                    qword_255795660(*(_QWORD *)algn_255795668, "index < plane_count_", 20, "index out of range", 18);
                  }
                  v68 = (float32x2_t **)(v55 + 176 + 16 * v64);
                  v70 = *v68;
                  v69 = (std::__shared_weak_count *)v68[1];
                  if (v69)
                  {
                    p_shared_owners = (unint64_t *)&v69->__shared_owners_;
                    do
                      v72 = __ldxr(p_shared_owners);
                    while (__stxr(v72 + 1, p_shared_owners));
                    do
                      v73 = __ldaxr(p_shared_owners);
                    while (__stlxr(v73 - 1, p_shared_owners));
                    if (!v73)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  v11.i32[0] = v70[3].i32[0];
                  *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v70[2], *(float32x2_t *)v175.i8), v32, v70[2], 1), v173, *(float32x2_t *)v11.f32);
                  v65 = v177;
                  if (*(float *)v177.i32 < v12.f32[0])
                    *(float *)v65.i32 = v12.f32[0];
                  v177 = v65;
                  if (++v64 == v63)
                    goto LABEL_129;
                }
              }
              v76 = *(float32x2_t **)(v55 + 32);
              v11.i32[0] = v76[1].i32[0];
              v12.i64[1] = v175.i64[1];
              *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*v76, *(float32x2_t *)v175.i8), v32, *v76, 1), v173, *(float32x2_t *)v11.f32);
              v177 = (int8x16_t)v12;
LABEL_129:
              v33 = v177;
              a4 = (_QWORD *)v162;
              if (*(float *)v177.i32 >= 0.0)
              {
                v78 = *(_DWORD *)(v55 + 4);
                v77 = *(_DWORD *)(v55 + 8);
                v79 = *(_DWORD *)(a1 + 20);
                v80 = *(_DWORD *)(a1 + 24);
                v81 = *(_DWORD *)(v55 + 12);
                v82 = (v78
                                   - (*v167)->i32[0]
                                   + v79 * (v77 - (*v167)->i32[1])
                                   + v80 * (v81 - (*v167)[1].i32[0]));
                v83 = *(_QWORD *)(a1 + 32);
                v84 = *(_QWORD *)(v83 + 8 * v82);
                if (!v84)
                  goto LABEL_96;
                v156 = (v78
                                    - (*v167)->i32[0]
                                    + v79 * (v77 - (*v167)->i32[1])
                                    + v80 * (v81 - (*v167)[1].i32[0]));
                if (*(_DWORD *)(v84 + 4) != v78 || *(_DWORD *)(v84 + 8) != v77 || *(_DWORD *)(v84 + 12) != v81)
                {
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/DualContouring.cpp", 161, (uint64_t)"vt_p->VoxelCoord() == vt.VoxelCoord()", 37, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v85 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v100 = qword_255795648;
                    for (n = qword_255795650; v100 != n; v100 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v100)(*(_QWORD *)(v100 + 8), "vt_p->VoxelCoord() == vt.VoxelCoord()", 37, "", 0);
                  }
                  v86 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    goto LABEL_264;
                  qword_255795660(*(_QWORD *)algn_255795668, "vt_p->VoxelCoord() == vt.VoxelCoord()", 37, "", 0);
                }
                v87 = *(unsigned __int8 *)(v84 + 168);
                if (*(_BYTE *)(v84 + 168))
                {
                  v88 = 0;
                  v33.i32[0] = -1.0;
                  v171 = v33;
                  while (1)
                  {
                    if (v88 >= *(unsigned __int8 *)(v84 + 168))
                    {
                      sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/PlaneJunction.cpp", 134, (uint64_t)"index < plane_count_", 20, (uint64_t)"index out of range", 18, (void (*)(void **))sub_22457406C);
                      v90 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v90 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670 || byte_255795678)
                      {
                        v98 = qword_255795648;
                        for (ii = qword_255795650; v98 != ii; v98 += 16)
                          (*(void (**)(_QWORD, const char *, uint64_t, const char *, uint64_t))v98)(*(_QWORD *)(v98 + 8), "index < plane_count_", 20, "index out of range", 18);
                      }
                      v91 = atomic_load((unsigned __int8 *)&qword_255795680);
                      if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                      {
                        __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                        __cxa_guard_release(&qword_255795680);
                      }
                      if (!byte_255795670)
                        goto LABEL_264;
                      qword_255795660(*(_QWORD *)algn_255795668, "index < plane_count_", 20, "index out of range", 18);
                    }
                    v92 = (float32x2_t **)(v84 + 176 + 16 * v88);
                    v94 = *v92;
                    v93 = (std::__shared_weak_count *)v92[1];
                    if (v93)
                    {
                      v95 = (unint64_t *)&v93->__shared_owners_;
                      do
                        v96 = __ldxr(v95);
                      while (__stxr(v96 + 1, v95));
                      do
                        v97 = __ldaxr(v95);
                      while (__stlxr(v97 - 1, v95));
                      if (!v97)
                      {
                        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                    }
                    v11.i32[0] = v94[3].i32[0];
                    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(v94[2], *(float32x2_t *)v175.i8), v32, v94[2], 1), v173, *(float32x2_t *)v11.f32);
                    v89 = v171;
                    if (*(float *)v171.i32 < v12.f32[0])
                      *(float *)v89.i32 = v12.f32[0];
                    v171 = v89;
                    if (++v88 == v87)
                      goto LABEL_169;
                  }
                }
                v102 = *(float32x2_t **)(v84 + 32);
                v11.i32[0] = v102[1].i32[0];
                *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*v102, *(float32x2_t *)v175.i8), v32, *v102, 1), v173, *(float32x2_t *)v11.f32);
                v171.i64[0] = v12.i64[0];
LABEL_169:
                v33 = v177;
                v11.i32[1] = v171.i32[1];
                a4 = (_QWORD *)v162;
                if (*(float *)v171.i32 <= *(float *)v177.i32)
                  break;
              }
            }
LABEL_97:
            v55 += 224;
          }
          v83 = *v158;
          v82 = v156;
LABEL_96:
          *(_QWORD *)(v83 + 8 * v82) = v55;
          goto LABEL_97;
        }
LABEL_37:
        if (++v30 != 8)
          continue;
        break;
      }
      v103 = *(_QWORD *)(a1 + 56);
      v104 = *(_QWORD *)(a1 + 64) - v103;
      if ((uint64_t)v104 >= 1)
      {
        v105 = v104 >> 3;
        v106 = (v104 >> 3) - (v104 > 7) + 1;
        if (v106 < 2)
        {
          v107 = *(_BYTE **)(a1 + 56);
          goto LABEL_193;
        }
        v105 -= v106 & 0xFFFFFFFFFFFFFFFELL;
        v107 = (_BYTE *)(v103 + 8 * (v106 & 0xFFFFFFFFFFFFFFFELL));
        v108 = (_BYTE *)(v103 + 8);
        v109 = v106 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v108 - 8) = 0;
          *v108 = 0;
          *(v108 - 4) = 0;
          v108[4] = 0;
          v108 += 16;
          v109 -= 2;
        }
        while (v109);
        if (v106 != (v106 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_193:
          v110 = v105 + 1;
          do
          {
            *v107 = 0;
            v107[4] = 0;
            --v110;
            v107 += 8;
          }
          while (v110 > 1);
        }
      }
      v111 = 0;
      v112 = *(unsigned __int16 *)(a1 + 8);
      do
      {
        v114 = 0;
        v115 = *(unsigned __int16 *)(a1 + 8);
        do
        {
          v116 = 0;
          v117 = *(unsigned __int16 *)(a1 + 8) + 1;
          do
          {
            v118 = (v116 + v114 * *(_DWORD *)(a1 + 20) + v111 * *(_DWORD *)(a1 + 24));
            v119 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v118);
            if (v119)
            {
              v122 = v119 + 24;
              v121 = *(float32x2_t **)(v119 + 24);
              v120 = *(int32x2_t **)(v122 + 8);
              v33.i32[0] = v120[1].i32[0];
              v12.i32[0] = v121[1].i32[0];
              v123 = (float32x2_t)vdup_lane_s32(*v120, 1);
              v124 = vmla_f32(vmla_lane_f32(vmul_f32(*v121, (float32x2_t)*v120), v123, *v121, 1), *(float32x2_t *)v33.i8, *(float32x2_t *)v12.f32);
              v12.f32[0] = (float)(v116 + (*v167)->i32[0]);
              v123.f32[0] = (float)((*v167)->i32[1] + v114);
              v14.i32[0] = *(_DWORD *)(a1 + 12);
              v13.f32[0] = v14.f32[0] * (float)((*v167)[1].i32[0] + v111);
              *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v12.f32, v14), (float32x2_t)*v120), vmul_f32(v123, v14), (float32x2_t)*v120, 1), *(float32x2_t *)v33.i8, v13);
              *(float32x2_t *)v33.i8 = vsub_f32(*(float32x2_t *)v12.f32, v124);
              v125 = *(_QWORD *)(a1 + 56) + 8 * v118;
              *(_DWORD *)v125 = v33.i32[0];
              *(_BYTE *)(v125 + 4) = 1;
            }
            ++v116;
          }
          while (v117 != v116);
          v113 = v114++ == v115;
        }
        while (!v113);
        v113 = v111++ == v112;
      }
      while (!v113);
      v126 = *(_QWORD **)(v179 + 64);
      *(_QWORD *)(v179 + 16) = *(_QWORD *)(v179 + 8);
      *(_QWORD *)(v179 + 40) = *(_QWORD *)(v179 + 32);
      sub_223198030(v179 + 56, v126);
      *(_QWORD *)(v179 + 56) = v179 + 64;
      *(_QWORD *)(v179 + 64) = 0;
      *(_QWORD *)(v179 + 72) = 0;
      *(_QWORD *)(v179 + 88) = *(_QWORD *)(v179 + 80);
      v166 = *(unsigned __int16 *)(a1 + 8);
      if (*(_WORD *)(a1 + 8))
      {
        v127 = 0;
        v172 = 1;
        v128 = *(unsigned __int16 *)(a1 + 8);
LABEL_205:
        v178 = 0;
        v174 = 1;
        v169 = v128;
        v176 = v128;
        if (v128)
        {
LABEL_206:
          v129 = 0;
          do
          {
            v130 = *(_DWORD *)(a1 + 20);
            v131 = *(_DWORD *)(a1 + 24);
            v132 = v178 * v130;
            v133 = *(_QWORD *)(a1 + 32);
            v134 = *(int **)(v133 + 8 * (v129 + v178 * v130 + v127 * v131));
            if (v134)
            {
              v135 = v174 * v130;
              v136 = v129 + v172 * v131 + v174 * v130;
              v137 = *v170;
              v138 = *v170 + 8 * (v136 + 1);
              v139 = 0.0;
              v140 = 0.0;
              if (*(_BYTE *)(v138 + 4))
              {
                v11.i32[0] = *(_DWORD *)v138;
                v140 = *(float *)v138;
              }
              v141 = 8 * v136;
              if (*(_BYTE *)(v137 + v141 + 4))
                v139 = *(float *)(v137 + v141);
              v142 = v129 + v172 * v131 + v132;
              v143 = v137 + 8 * (v142 + 1);
              v144 = 0.0;
              v145 = 0.0;
              if (*(_BYTE *)(v143 + 4))
              {
                v11.i32[0] = *(_DWORD *)v143;
                v145 = *(float *)v143;
              }
              v146 = v127 * v131;
              v147 = v129 + v127 * v131 + v135;
              v148 = v137 + 8 * (v147 + 1);
              if (*(_BYTE *)(v148 + 4))
              {
                v11.i32[0] = *(_DWORD *)v148;
                v144 = *(float *)v148;
              }
              v149 = *(int **)(v133 + 8 * (v129 + v146 + v132 + 1));
              v150 = *(int **)(v133 + 8 * v147);
              v151 = *(int **)(v133 + 8 * (v147 + 1));
              v152 = *(int **)(v133 + 8 * v142);
              v153 = *(int **)(v133 + 8 * (v142 + 1));
              *(double *)v10.i64 = v140 * v139;
              if (*(double *)v10.i64 < 0.0)
              {
                v154 = *(int **)(v133 + v141);
                if (v154)
                {
                  if (v140 <= 0.0)
                  {
                    if (v152)
                      sub_223AA2018((int **)v179, v134, v152, v154, (unsigned int *)&v194, v10, v11, v12);
                    if (v150)
                      sub_223AA2018((int **)v179, v134, v154, v150, (unsigned int *)&v194, v10, v11, v12);
                  }
                  else
                  {
                    if (v150)
                      sub_223AA2018((int **)v179, v134, v150, v154, (unsigned int *)&v194, v10, v11, v12);
                    if (v152)
                      sub_223AA2018((int **)v179, v134, v154, v152, (unsigned int *)&v194, v10, v11, v12);
                  }
                }
              }
              *(double *)v10.i64 = v140 * v145;
              if (v140 * v145 < 0.0 && v153)
              {
                if (v140 <= 0.0)
                {
                  if (v149)
                    sub_223AA2018((int **)v179, v134, v149, v153, (unsigned int *)&v194, v10, v11, v12);
                  if (v152)
                    sub_223AA2018((int **)v179, v134, v153, v152, (unsigned int *)&v194, v10, v11, v12);
                }
                else
                {
                  if (v152)
                    sub_223AA2018((int **)v179, v134, v152, v153, (unsigned int *)&v194, v10, v11, v12);
                  if (v149)
                    sub_223AA2018((int **)v179, v134, v153, v149, (unsigned int *)&v194, v10, v11, v12);
                }
              }
              *(double *)v10.i64 = v140 * v144;
              if (v140 * v144 < 0.0 && v151)
              {
                if (v140 <= 0.0)
                {
                  if (v150)
                    sub_223AA2018((int **)v179, v134, v150, v151, (unsigned int *)&v194, v10, v11, v12);
                  if (v149)
                    sub_223AA2018((int **)v179, v134, v151, v149, (unsigned int *)&v194, v10, v11, v12);
                }
                else
                {
                  if (v149)
                    sub_223AA2018((int **)v179, v134, v149, v151, (unsigned int *)&v194, v10, v11, v12);
                  if (v150)
                    sub_223AA2018((int **)v179, v134, v151, v150, (unsigned int *)&v194, v10, v11, v12);
                }
              }
            }
            ++v129;
          }
          while (v176 != v129);
        }
        while (++v178 != v169)
        {
          ++v174;
          v176 = *(unsigned __int16 *)(a1 + 8);
          if (*(_WORD *)(a1 + 8))
            goto LABEL_206;
        }
        while (++v127 != v166)
        {
          v128 = *(unsigned __int16 *)(a1 + 8);
          ++v172;
          if (*(_WORD *)(a1 + 8))
            goto LABEL_205;
        }
      }
      a4 = (_QWORD *)v162;
      if (v163 && !*(_BYTE *)(a1 + 16))
      {
        sub_223A98D60(v167, (_QWORD *)v179, v162, 1, a3);
        sub_223A9B0CC((int **)v179, *(unsigned __int16 *)(a1 + 20), v158, v170, *(float *)(a1 + 12));
      }
      v15 = v164 + 1;
    }
    while (v164 + 1 != v159);
  }
LABEL_259:
  sub_223198030((uint64_t)&v180, v181);
  sub_22391CC34(v183, (uint64_t *)__p, (uint64_t)v187);
  if (v186 < 0)
  {
    operator delete(__p[0]);
    if ((v184 & 0x80000000) == 0)
      return kdebug_trace();
LABEL_263:
    operator delete((void *)v183[0]);
    return kdebug_trace();
  }
  if (v184 < 0)
    goto LABEL_263;
  return kdebug_trace();
}

void sub_223AA0E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223AA0F30(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  _DWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int v58;
  char **v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD **v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD v66[2];
  char *v67;
  char *v68;
  char *v69;

  v8 = a2[2];
  v68 = 0;
  v69 = 0;
  v67 = 0;
  if (v8)
  {
    if (v8 >> 62)
      sub_22316E078();
    v67 = (char *)operator new(4 * v8);
    v69 = &v67[4 * v8];
    bzero(v67, 4 * v8);
    v68 = v69;
  }
  sub_2241498F4(a5, a4);
  v9 = (_QWORD *)*a2;
  v56 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v53 = (_QWORD *)a5;
    LODWORD(v10) = 0;
    LODWORD(v11) = 0;
    v12 = 0;
    do
    {
      v14 = *((unsigned int *)v9 + 7);
      if (a3[11] <= v14
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v14) / 0x1F)) + 132 * ((a3[10] + v14) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = a3[16];
      *(_DWORD *)&v67[4 * v12] = v10;
      v16 = v15 + 168 * v14;
      v18 = *(_QWORD *)(v16 + 56);
      v17 = *(_QWORD *)(v16 + 64);
      v19 = *((unsigned int *)v9 + 7);
      if (a3[11] <= v19
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v19) / 0x1F)) + 132 * ((a3[10] + v19) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v20 = (_QWORD *)v9[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v9[2];
          v22 = *v21 == (_QWORD)v9;
          v9 = v21;
        }
        while (!v22);
      }
      v10 = v10 - 1227133513 * ((unint64_t)(v17 - v18) >> 5);
      v13 = (_QWORD *)(a3[19] + 104 * v19);
      v11 = v11 + -(int)((v13[11] - v13[10]) >> 1) - 858993459 * ((v13[2] - v13[1]) >> 3);
      ++v12;
      v9 = v21;
    }
    while (v21 != v56);
    v23 = v53;
    if ((_DWORD)v11)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53[1] - *v53) >> 2);
      if (v10 <= v24)
      {
        if (v10 < v24)
          v53[1] = *v53 + 12 * v10;
      }
      else
      {
        sub_22317EF30((uint64_t)v53, v10 - v24);
      }
      v25 = v53[9];
      v26 = 0xAAAAAAAAAAAAAAABLL * ((v53[10] - v25) >> 2);
      if (v10 <= v26)
      {
        if (v10 < v26)
          v53[10] = v25 + 12 * v10;
      }
      else
      {
        sub_22317EF30((uint64_t)(v53 + 9), v10 - v26);
      }
      v27 = v53[14];
      v28 = 0xAAAAAAAAAAAAAAABLL * ((v53[15] - v27) >> 2);
      if (v11 <= v28)
      {
        if (v11 < v28)
          v53[15] = v27 + 12 * v11;
      }
      else
      {
        sub_22317F10C((uint64_t)(v53 + 14), v11 - v28);
      }
      v66[0] = 0;
      v66[1] = 0;
      v65 = v66;
      v29 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v56)
      {
        v51 = 0;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        do
        {
          v32 = *((unsigned int *)v29 + 7);
          if (a3[11] <= v32
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v32) / 0x1F)) + 132 * ((a3[10] + v32) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v33 = a3[16] + 168 * v32;
          v34 = 0xFFFFFFFC92492494 * ((*(_QWORD *)(v33 + 64) - *(_QWORD *)(v33 + 56)) >> 5);
          memcpy((void *)(*v23 + 12 * *(unsigned int *)&v67[4 * v30]), *(const void **)(v33 + 80), v34);
          memcpy((void *)(v23[9] + 12 * *(unsigned int *)&v67[4 * v30]), *(const void **)(v33 + 104), v34);
          v57 = v30;
          v58 = *((_DWORD *)v29 + 7);
          v35 = v58;
          v59 = &v67;
          v60 = a3;
          v61 = a1;
          v62 = a2;
          v63 = &v65;
          v64 = v23;
          if (a3[11] <= (unint64_t)v58
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(a3[7] + 8 * ((a3[10] + v35) / 0x1FuLL)) + 132 * ((a3[10] + v35) % 0x1FuLL) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v55 = v30;
          v36 = (_QWORD *)(a3[19] + 104 * v35);
          v37 = v36[1];
          v38 = v36[2];
          v39 = v36[4];
          v40 = v36[5];
          if (v37 != v38 || v39 != v40)
          {
            v41 = v39 + 12;
            v42 = v37 + 40;
            while (1)
            {
              v43 = v41;
              if (*(_DWORD *)(v42 - 16) || *(_DWORD *)(v42 - 12) || *(_DWORD *)(v42 - 8))
              {
                v44 = sub_223AA1C38((uint64_t)&v57, *(unsigned int **)(v42 - 40));
                v45 = sub_223AA1C38((uint64_t)&v57, *(unsigned int **)(v42 - 32));
                v46 = sub_223AA1C38((uint64_t)&v57, *(unsigned int **)(v42 - 24));
                v47 = (_DWORD *)(v53[14] + 12 * v31++);
                *v47 = v44;
                v47[1] = v45;
                v47[2] = v46;
              }
              v41 = v43 + 12;
              v48 = v42 + 40;
              v22 = v42 == v38;
              v42 += 40;
              if (v22)
              {
                v42 = v48;
                if (v43 == v40)
                  break;
              }
            }
          }
          v49 = (_QWORD *)v29[1];
          if (v49)
          {
            do
            {
              v50 = v49;
              v49 = (_QWORD *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              v50 = (_QWORD *)v29[2];
              v22 = *v50 == (_QWORD)v29;
              v29 = v50;
            }
            while (!v22);
          }
          v30 = v55 + 1;
          v29 = v50;
          v23 = v53;
        }
        while (v50 != v56);
        v51 = (_QWORD *)v66[0];
      }
      sub_223198030((uint64_t)&v65, v51);
    }
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_223AA165C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void *v4;

  sub_22316F8F4(v1);
  v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(_QWORD *)(v2 - 104) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_223AA16CC(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  _DWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;

  sub_2241498F4((uint64_t)a3, a2);
  v5 = a1[11];
  if (v5)
  {
    if (v5 >> 62)
      sub_22316E078();
    v6 = (unsigned int *)operator new(4 * v5);
    bzero(v6, 4 * v5);
    v7 = a1[7];
    if (a1[8] == v7)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    v7 = a1[7];
    if (a1[8] == v7)
    {
LABEL_11:
      v14 = 0;
      v13 = 0;
      v23 = a3 + 1;
      v24 = *a3;
      v25 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2);
      goto LABEL_14;
    }
  }
  v8 = a1[10];
  v9 = v8 / 0x1F;
  v10 = *(_QWORD *)(v7 + 8 * (v8 / 0x1F));
  v11 = v10 + 132 * (v8 % 0x1F);
  v12 = *(_QWORD *)(v7 + 8 * ((v8 + v5) / 0x1F)) + 132 * ((v8 + v5) % 0x1F);
  if (v11 == v12)
    goto LABEL_11;
  LODWORD(v13) = 0;
  LODWORD(v14) = 0;
  v15 = 0;
  v16 = a1[16];
  v17 = a1[19];
  v18 = v7 + 8 * v9;
  do
  {
    v19 = v16 + 168 * v15;
    v20 = *(_QWORD *)(v19 + 56);
    v21 = *(_QWORD *)(v19 + 64);
    v6[v15] = v13;
    v11 += 132;
    if (v11 - v10 == 4092)
    {
      v22 = *(_QWORD *)(v18 + 8);
      v18 += 8;
      v10 = v22;
      v11 = v22;
    }
    v13 = v13 - 1227133513 * ((unint64_t)(v21 - v20) >> 5);
    v14 = v14
        + -858993459
        * ((*(_QWORD *)(v17 + 104 * v15 + 16)
                        - *(_QWORD *)(v17 + 104 * v15 + 8)) >> 3)
        - ((*(_QWORD *)(v17 + 104 * v15 + 88)
                        - *(_QWORD *)(v17 + 104 * v15 + 80)) >> 1);
    ++v15;
  }
  while (v11 != v12);
  v23 = a3 + 1;
  v24 = *a3;
  v25 = 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2);
  if (v13 > v25)
  {
    sub_22317EF30((uint64_t)a3, v13 - v25);
    goto LABEL_16;
  }
LABEL_14:
  if (v25 > v13)
    *v23 = v24 + 12 * v13;
LABEL_16:
  v26 = a3[9];
  v27 = 0xAAAAAAAAAAAAAAABLL * ((a3[10] - v26) >> 2);
  if (v13 <= v27)
  {
    if (v13 < v27)
      a3[10] = v26 + 12 * v13;
  }
  else
  {
    sub_22317EF30((uint64_t)(a3 + 9), v13 - v27);
  }
  v28 = a3[14];
  v29 = 0xAAAAAAAAAAAAAAABLL * ((a3[15] - v28) >> 2);
  if (v14 <= v29)
  {
    if (v14 < v29)
      a3[15] = v28 + 12 * v14;
  }
  else
  {
    sub_22317F10C((uint64_t)(a3 + 14), v14 - v29);
  }
  v30 = a1[7];
  if (a1[8] != v30)
  {
    v31 = a1[10];
    v32 = *(_QWORD *)(v30 + 8 * (v31 / 0x1F)) + 132 * (v31 % 0x1F);
    v58 = *(_QWORD *)(v30 + 8 * ((a1[11] + v31) / 0x1F)) + 132 * ((a1[11] + v31) % 0x1F);
    if (v32 != v58)
    {
      v33 = 0;
      v34 = 0;
      v35 = (_QWORD *)(v30 + 8 * (v31 / 0x1F));
      v57 = a1;
      do
      {
        v59 = v35;
        v60 = v32;
        v36 = v34;
        v37 = a1[16];
        v38 = a1[19];
        v39 = v37 + 168 * v34;
        v40 = 0xFFFFFFFC92492494 * ((*(_QWORD *)(v39 + 64) - *(_QWORD *)(v39 + 56)) >> 5);
        v61 = v34;
        v41 = 12 * v6[v34];
        memcpy((void *)(*a3 + v41), *(const void **)(v39 + 80), v40);
        memcpy((void *)(a3[9] + v41), *(const void **)(v39 + 104), v40);
        v42 = (_QWORD *)(v38 + 104 * v36);
        v43 = v42[1];
        v44 = v42[2];
        v45 = v42[4];
        v46 = v42[5];
        v47 = v43 == v44 && v45 == v46;
        if (!v47)
        {
          v48 = v45 + 12;
          v49 = v43 + 40;
          while (1)
          {
            v50 = v48;
            if (*(_DWORD *)(v49 - 16) || *(_DWORD *)(v49 - 12) || *(_DWORD *)(v49 - 8))
            {
              v51 = v33;
              v52 = a3[14];
              if (0xAAAAAAAAAAAAAAABLL * ((a3[15] - v52) >> 2) <= v33)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/ExtractMesh.cpp", 171, (uint64_t)"idx_face_next < mesh.faces.size()", 33, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                v52 = a3[14];
              }
              v53 = *(unsigned int *)((char *)v6 + (((unint64_t)**(unsigned int **)(v49 - 32) >> 10) & 0x3FFFFC))
                  + *(unsigned __int16 *)(*(_QWORD *)(v49 - 32) + 16);
              v54 = *(unsigned int *)((char *)v6 + (((unint64_t)**(unsigned int **)(v49 - 24) >> 10) & 0x3FFFFC))
                  + *(unsigned __int16 *)(*(_QWORD *)(v49 - 24) + 16);
              ++v33;
              v55 = (_DWORD *)(v52 + 12 * v51);
              *v55 = *(unsigned int *)((char *)v6 + (((unint64_t)**(unsigned int **)(v49 - 40) >> 10) & 0x3FFFFC))
                   + *(unsigned __int16 *)(*(_QWORD *)(v49 - 40) + 16);
              v55[1] = v53;
              v55[2] = v54;
            }
            v48 = v50 + 12;
            v56 = v49 + 40;
            v47 = v49 == v44;
            v49 += 40;
            if (v47)
            {
              v49 = v56;
              if (v50 == v46)
                break;
            }
          }
        }
        v35 = v59;
        v32 = v60 + 132;
        if (v60 + 132 - *v59 == 4092)
        {
          v35 = v59 + 1;
          v32 = v59[1];
        }
        a1 = v57;
        v34 = v61 + 1;
      }
      while (v32 != v58);
    }
  }
  if (v6)
    operator delete(v6);
}

void sub_223AA1BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t *v17;
  void *v18;

  if (v18)
    operator delete(v18);
  sub_22316F8F4(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_223AA1C38(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  int v5;
  _QWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t **v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  unsigned int v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;

  v4 = (unint64_t)*a2 >> 12;
  if (*(_DWORD *)(a1 + 8) == (_DWORD)v4)
  {
    v5 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 4 * *(_QWORD *)a1);
    return v5 + *((unsigned __int16 *)a2 + 8);
  }
  v7 = *(_QWORD **)(a1 + 24);
  if (v7[11] <= v4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 647, (uint64_t)"idx_block < metadata_blocks_.size()", 35, (uint64_t)"Out of range", 12, (void (*)(void **))sub_22457406C)|| *(_BYTE *)(*(_QWORD *)(v7[7] + 8 * ((v7[10] + v4) / 0x1F)) + 132 * ((v7[10] + v4) % 0x1F) + 20)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/Block/include/Reconstruction/Block/BlockTable.h", 648, (uint64_t)"!metadata_blocks_[idx_block].IsErased()", 39, (uint64_t)"The block is erased", 19, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v8 = *(_DWORD **)(v7[16] + 168 * v4);
  v9 = *(_DWORD **)(a1 + 32);
  if (*v9 == (*v8 & 0xFFFFFFE0) && v9[1] == (v8[1] & 0xFFFFFFE0) && v9[2] == (v8[2] & 0xFFFFFFE0))
  {
    v10 = *(_QWORD **)(a1 + 40);
    v13 = (_QWORD *)*v10;
    v12 = v10 + 1;
    v11 = v13;
    if (v13 == v12)
      goto LABEL_60;
    v14 = v11;
    while (*((_DWORD *)v14 + 7) != (_DWORD)v4)
    {
      v15 = (_QWORD *)v14[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v14[2];
          v17 = *v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (!v17);
      }
      v14 = v16;
      if (v16 == v12)
      {
        v14 = v12;
        break;
      }
    }
    if (v11 == v14)
    {
LABEL_60:
      v51 = 0;
    }
    else
    {
      v48 = 0;
      do
      {
        v49 = (_QWORD *)v11[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v11[2];
            v17 = *v50 == (_QWORD)v11;
            v11 = v50;
          }
          while (!v17);
        }
        ++v48;
        v11 = v50;
      }
      while (v50 != v14);
      v51 = v48;
    }
    v5 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 4 * v51);
    return v5 + *((unsigned __int16 *)a2 + 8);
  }
  v18 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(v18 + 8);
  v19 = v18 + 8;
  v20 = v21;
  if (!v21)
    goto LABEL_32;
  v22 = *a2;
  v23 = v19;
  do
  {
    v24 = *(_DWORD *)(v20 + 28);
    v25 = v24 >= v22;
    if (v24 >= v22)
      v26 = (uint64_t *)v20;
    else
      v26 = (uint64_t *)(v20 + 8);
    if (v25)
      v23 = v20;
    v20 = *v26;
  }
  while (*v26);
  if (v23 != v19 && v22 >= *(_DWORD *)(v23 + 28))
    return *(unsigned int *)(v23 + 32);
LABEL_32:
  v27 = *(_QWORD **)(a1 + 56);
  v28 = v27[1];
  v29 = (v28 - *v27) >> 2;
  v30 = *((_QWORD *)a2 + 3);
  if (v28 >= v27[2])
  {
    v32 = sub_2233B2B48(*(unint64_t **)(a1 + 56), (uint64_t *)v30);
  }
  else
  {
    v31 = *(_QWORD *)v30;
    *(_DWORD *)(v28 + 8) = *(_DWORD *)(v30 + 8);
    *(_QWORD *)v28 = v31;
    v32 = v28 + 12;
  }
  v27[1] = v32;
  v33 = *(unint64_t **)(a1 + 56);
  v34 = *((_QWORD *)a2 + 4);
  v35 = v33[10];
  if (v35 >= v33[11])
  {
    v37 = sub_2233B2B48(v33 + 9, (uint64_t *)v34);
  }
  else
  {
    v36 = *(_QWORD *)v34;
    *(_DWORD *)(v35 + 8) = *(_DWORD *)(v34 + 8);
    *(_QWORD *)v35 = v36;
    v37 = v35 + 12;
  }
  v38 = (-1431655765 * v29);
  v33[10] = v37;
  v39 = *(uint64_t ***)(a1 + 48);
  v40 = *a2;
  v42 = v39 + 1;
  v41 = v39[1];
  if (v41)
  {
    while (1)
    {
      while (1)
      {
        v43 = (uint64_t **)v41;
        v44 = *((_DWORD *)v41 + 7);
        if (v40 >= v44)
          break;
        v41 = *v43;
        v42 = v43;
        if (!*v43)
          goto LABEL_45;
      }
      if (v44 >= v40)
        break;
      v41 = v43[1];
      if (!v41)
      {
        v42 = v43 + 1;
        goto LABEL_45;
      }
    }
  }
  else
  {
    v43 = v39 + 1;
LABEL_45:
    v45 = (uint64_t *)v43;
    v43 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v43 + 7) = v40;
    *((_DWORD *)v43 + 8) = 0;
    *v43 = 0;
    v43[1] = 0;
    v43[2] = v45;
    *v42 = (uint64_t *)v43;
    v46 = (uint64_t *)**v39;
    v47 = (uint64_t *)v43;
    if (v46)
    {
      *v39 = v46;
      v47 = *v42;
    }
    sub_2231A9A8C(v39[1], v47);
    v39[2] = (uint64_t *)((char *)v39[2] + 1);
  }
  *((_DWORD *)v43 + 8) = v38;
  return v38;
}

void sub_223AA2018(int **a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, unsigned int *a5@<X8>, float32x4_t a6@<Q0>, float32x4_t a7@<Q1>, float32x4_t a8@<Q2>)
{
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int *v30;
  uint64_t **v31;
  uint64_t **v32;
  int v33;
  BOOL v34;
  int **v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int *v51;
  int *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  int *v67;
  unint64_t v68;
  __int16 v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _QWORD *v82;
  int *v83;
  uint64_t *v84;
  int v85;
  int v86;
  unint64_t v87;
  float32x4_t v88;
  float32x4_t v89;

  v13 = *((_QWORD *)a3 + 3);
  a6.i64[0] = *(_QWORD *)v13;
  a6.i32[2] = *(_DWORD *)(v13 + 8);
  v14 = *((_QWORD *)a2 + 3);
  a7.i64[0] = *(_QWORD *)v14;
  a7.i32[2] = *(_DWORD *)(v14 + 8);
  v15 = (int8x16_t)vsubq_f32(a6, a7);
  v16 = *((_QWORD *)a4 + 3);
  a8.i64[0] = *(_QWORD *)v16;
  a8.i32[2] = *(_DWORD *)(v16 + 8);
  v17 = (int8x16_t)vsubq_f32(a8, a7);
  v18 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v15, v15, 0xCuLL), v15, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), v15, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v17, v17, 0xCuLL), v17, 8uLL));
  v17.i64[0] = vextq_s8(v18, v18, 8uLL).u64[0];
  v19 = vmulq_n_f32((float32x4_t)v18, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)v18.i8, 1), *(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8).f32[0]));
  v20 = *a2;
  v21 = **a1;
  v22 = (*a1)[1];
  v23 = (*a1)[2];
  v24 = *((unsigned __int16 *)*a1 + 8);
  LODWORD(v16) = *((unsigned __int16 *)*a1 + 9);
  v25 = a2[1] - v21 + (a2[2] - v22) * v24 + (a2[3] - v23) * v16;
  v26 = *a3;
  v27 = a3[1] - v21 + (a3[2] - v22) * v24 + (a3[3] - v23) * v16;
  v28 = *a4;
  v29 = a4[1] - v21 + (a4[2] - v22) * v24 + (a4[3] - v23) * v16;
  *a5 = v25;
  a5[1] = v27;
  a5[2] = v29;
  v31 = (uint64_t **)(a1 + 8);
  v30 = a1[8];
  if (v30)
  {
    v32 = (uint64_t **)(a1 + 8);
    do
    {
      v36 = v30[7];
      v37 = v36 >= v25;
      if (v36 == v25)
      {
        v38 = v30[8];
        v37 = v38 >= v27;
        if (v38 == v27)
          v37 = v30[9] >= v29;
      }
      v33 = !v37;
      v34 = v33 == 0;
      if (v33)
        v35 = (int **)(v30 + 2);
      else
        v35 = (int **)v30;
      if (v34)
        v32 = (uint64_t **)v30;
      v30 = *v35;
    }
    while (*v35);
    if (v32 != v31)
    {
      v39 = *((_DWORD *)v32 + 7);
      v40 = v25 >= v39;
      if (v25 == v39 && (v41 = *((_DWORD *)v32 + 8), v40 = v27 >= v41, v27 == v41))
      {
        if (v29 >= *((_DWORD *)v32 + 9))
        {
LABEL_20:
          v42 = (uint64_t)&a1[1][10 * *((unsigned __int16 *)v32 + 20)];
          *(_QWORD *)v42 = a2;
          *(_QWORD *)(v42 + 8) = a3;
          *(_QWORD *)(v42 + 16) = a4;
          *(_DWORD *)(v42 + 24) = v20;
          *(_DWORD *)(v42 + 28) = v26;
          *(_DWORD *)(v42 + 32) = v28;
          v43 = (uint64_t)&a1[4][3 * *((unsigned __int16 *)v32 + 20)];
          *(_QWORD *)v43 = v19.i64[0];
          *(_DWORD *)(v43 + 8) = v19.i32[2];
          return;
        }
      }
      else if (v40)
      {
        goto LABEL_20;
      }
    }
  }
  v44 = a1[11];
  if (a1[10] != v44)
  {
    v45 = *((unsigned __int16 *)v44 - 1);
    a1[11] = (int *)((char *)v44 - 2);
    v46 = (uint64_t)&a1[1][10 * v45];
    *(_QWORD *)v46 = a2;
    *(_QWORD *)(v46 + 8) = a3;
    *(_QWORD *)(v46 + 16) = a4;
    *(_DWORD *)(v46 + 24) = v20;
    *(_DWORD *)(v46 + 28) = v26;
    *(_DWORD *)(v46 + 32) = v28;
    v47 = (uint64_t)&a1[4][3 * v45];
    *(_QWORD *)v47 = v19.i64[0];
    *(_DWORD *)(v47 + 8) = v19.i32[2];
    LOWORD(v48) = v45;
    v49 = *v31;
    v50 = a1 + 8;
    if (!*v31)
      goto LABEL_71;
    goto LABEL_57;
  }
  v52 = a1[1];
  v51 = a1[2];
  v48 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v51 - (char *)v52) >> 3);
  v53 = (unint64_t)a1[3];
  if ((unint64_t)v51 >= v53)
  {
    v57 = v48 + 1;
    if (v48 + 1 > 0x666666666666666)
      sub_22316E078();
    v85 = v26;
    v86 = v20;
    v88 = v19;
    v87 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v51 - (char *)v52) >> 3);
    v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (_QWORD)v52) >> 3);
    if (2 * v58 > v57)
      v57 = 2 * v58;
    if (v58 >= 0x333333333333333)
      v59 = 0x666666666666666;
    else
      v59 = v57;
    if (v59 > 0x666666666666666)
      goto LABEL_75;
    v60 = 40 * v59;
    v61 = (char *)operator new(40 * v59);
    v62 = &v61[8 * (((char *)v51 - (char *)v52) >> 3)];
    *(_QWORD *)v62 = a2;
    *((_QWORD *)v62 + 1) = a3;
    v63 = &v61[v60];
    *((_QWORD *)v62 + 2) = a4;
    *((_DWORD *)v62 + 6) = v86;
    *((_DWORD *)v62 + 7) = v85;
    *((_DWORD *)v62 + 8) = v28;
    v64 = v62 + 40;
    if (v51 != v52)
    {
      do
      {
        v65 = *(_OWORD *)(v51 - 10);
        *((_QWORD *)v62 - 3) = *((_QWORD *)v51 - 3);
        *(_OWORD *)(v62 - 40) = v65;
        v66 = *((_QWORD *)v51 - 2);
        *((_DWORD *)v62 - 2) = *(v51 - 2);
        *((_QWORD *)v62 - 2) = v66;
        v62 -= 40;
        v51 -= 10;
      }
      while (v51 != v52);
      v51 = a1[1];
    }
    LOWORD(v48) = v87;
    a1[1] = (int *)v62;
    a1[2] = (int *)v64;
    a1[3] = (int *)v63;
    if (v51)
      operator delete(v51);
    v19 = v88;
    a1[2] = (int *)v64;
    v55 = (char *)a1[5];
    v54 = (unint64_t)a1[6];
    if ((unint64_t)v55 < v54)
      goto LABEL_27;
  }
  else
  {
    *(_QWORD *)v51 = a2;
    *((_QWORD *)v51 + 1) = a3;
    *((_QWORD *)v51 + 2) = a4;
    v51[6] = v20;
    v51[7] = v26;
    v51[8] = v28;
    a1[2] = v51 + 10;
    v55 = (char *)a1[5];
    v54 = (unint64_t)a1[6];
    if ((unint64_t)v55 < v54)
    {
LABEL_27:
      *((_DWORD *)v55 + 2) = v19.i32[2];
      *(_QWORD *)v55 = v19.i64[0];
      v56 = v55 + 12;
      goto LABEL_56;
    }
  }
  v67 = a1[4];
  v68 = 0xAAAAAAAAAAAAAAABLL * ((v55 - (char *)v67) >> 2) + 1;
  if (v68 > 0x1555555555555555)
    sub_22316E078();
  v69 = v48;
  v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - (_QWORD)v67) >> 2);
  if (2 * v70 > v68)
    v68 = 2 * v70;
  if (v70 >= 0xAAAAAAAAAAAAAAALL)
    v48 = 0x1555555555555555;
  else
    v48 = v68;
  if (!v48)
  {
    v71 = 0;
    goto LABEL_51;
  }
  v89 = v19;
  if (v48 > 0x1555555555555555)
LABEL_75:
    sub_223174E94();
  v71 = (char *)operator new(12 * v48);
  v19 = v89;
LABEL_51:
  v72 = &v71[4 * ((v55 - (char *)v67) >> 2)];
  v73 = &v71[12 * v48];
  *(_QWORD *)v72 = v19.i64[0];
  *((_DWORD *)v72 + 2) = v19.i32[2];
  v56 = v72 + 12;
  LOWORD(v48) = v69;
  if (v55 != (char *)v67)
  {
    do
    {
      v74 = *(_QWORD *)(v55 - 12);
      v55 -= 12;
      v75 = *((_DWORD *)v55 + 2);
      *(_QWORD *)(v72 - 12) = v74;
      v72 -= 12;
      *((_DWORD *)v72 + 2) = v75;
    }
    while (v55 != (char *)v67);
    v55 = (char *)a1[4];
  }
  a1[4] = (int *)v72;
  a1[5] = (int *)v56;
  a1[6] = (int *)v73;
  if (v55)
    operator delete(v55);
LABEL_56:
  a1[5] = (int *)v56;
  v49 = *v31;
  v50 = a1 + 8;
  if (*v31)
  {
LABEL_57:
    v76 = *a5;
    v77 = a5[1];
    v78 = a5[2];
    while (1)
    {
      while (1)
      {
        v50 = v49;
        v79 = *((_DWORD *)v49 + 7);
        if (v76 == v79)
          break;
        if (v76 >= v79)
        {
          if (v79 >= v76)
            goto LABEL_74;
          goto LABEL_69;
        }
LABEL_58:
        v49 = (uint64_t *)*v50;
        v31 = (uint64_t **)v50;
        if (!*v50)
          goto LABEL_71;
      }
      v80 = *((_DWORD *)v50 + 8);
      if (v77 != v80)
      {
        if (v77 >= v80)
        {
          if (v80 >= v77)
            goto LABEL_74;
          goto LABEL_69;
        }
        goto LABEL_58;
      }
      v81 = *((_DWORD *)v50 + 9);
      if (v78 < v81)
        goto LABEL_58;
      if (v81 >= v78)
        goto LABEL_74;
LABEL_69:
      v49 = (uint64_t *)v50[1];
      if (!v49)
      {
        v31 = (uint64_t **)(v50 + 1);
        break;
      }
    }
  }
LABEL_71:
  v82 = v50;
  v50 = operator new(0x30uLL);
  *(_QWORD *)((char *)v50 + 28) = *(_QWORD *)a5;
  *((_DWORD *)v50 + 9) = a5[2];
  *((_WORD *)v50 + 20) = 0;
  *v50 = 0;
  v50[1] = 0;
  v50[2] = v82;
  *v31 = v50;
  v83 = *(int **)a1[7];
  v84 = v50;
  if (v83)
  {
    a1[7] = v83;
    v84 = *v31;
  }
  sub_2231A9A8C((uint64_t *)a1[8], v84);
  a1[9] = (int *)((char *)a1[9] + 1);
LABEL_74:
  *((_WORD *)v50 + 20) = v48;
}

uint64_t sub_223AA2594(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  int32x4_t v10;
  float32x2_t v11;
  float32x4_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  int32x4_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int16 v33;
  __int128 v34;
  __int16 v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  unsigned __int32 v70;
  __int128 v71;

  *(_QWORD *)(sub_223257000(a1, (uint64_t)a2) + 1824) = &off_24EC5EBB0;
  v13 = *(_QWORD *)(a3 + 8);
  v14 = *(std::__shared_weak_count **)(a3 + 16);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = *(_WORD *)(a3 + 48);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a1 + 1864) = *(_QWORD *)(a3 + 40);
    *(_OWORD *)(a1 + 1848) = v19;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 1832) = v13;
    *(_QWORD *)(a1 + 1840) = v14;
    *(_WORD *)(a1 + 1872) = v17;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    *(_QWORD *)(a1 + 1880) = &off_24EC21328;
    v23 = *(_QWORD *)(a4 + 8);
    v24 = *(std::__shared_weak_count **)(a4 + 16);
    if (v24)
      goto LABEL_16;
LABEL_30:
    v35 = *(_WORD *)(a4 + 48);
    *(_QWORD *)(a1 + 1888) = v23;
    *(_QWORD *)(a1 + 1896) = 0;
    v29 = *(int32x4_t *)(a4 + 24);
    *(_QWORD *)(a1 + 1920) = *(_QWORD *)(a4 + 40);
    *(int32x4_t *)(a1 + 1904) = v29;
    *(_WORD *)(a1 + 1928) = v35;
    goto LABEL_31;
  }
  v33 = *(_WORD *)(a3 + 48);
  *(_QWORD *)(a1 + 1832) = v13;
  *(_QWORD *)(a1 + 1840) = 0;
  v34 = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 1864) = *(_QWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 1848) = v34;
  *(_WORD *)(a1 + 1872) = v33;
  *(_QWORD *)(a1 + 1880) = &off_24EC21328;
  v23 = *(_QWORD *)(a4 + 8);
  v24 = *(std::__shared_weak_count **)(a4 + 16);
  if (!v24)
    goto LABEL_30;
LABEL_16:
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  v27 = *(_WORD *)(a4 + 48);
  do
    v28 = __ldxr(v25);
  while (__stxr(v28 + 1, v25));
  v29 = *(int32x4_t *)(a4 + 24);
  *(_QWORD *)(a1 + 1920) = *(_QWORD *)(a4 + 40);
  *(int32x4_t *)(a1 + 1904) = v29;
  do
    v30 = __ldxr(v25);
  while (__stxr(v30 + 1, v25));
  *(_QWORD *)(a1 + 1888) = v23;
  *(_QWORD *)(a1 + 1896) = v24;
  *(_WORD *)(a1 + 1928) = v27;
  do
    v31 = __ldaxr(v25);
  while (__stlxr(v31 - 1, v25));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  do
    v32 = __ldaxr(v25);
  while (__stlxr(v32 - 1, v25));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_31:
  v36 = (uint64_t *)(a1 + 1944);
  *(_QWORD *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1936) = a1 + 1944;
  v39 = (_QWORD *)*a5;
  v37 = a5 + 1;
  v38 = v39;
  if (v39 != v37)
  {
    v40 = (uint64_t **)(a1 + 1936);
    while (1)
    {
      v41 = v38[4];
      v42 = *v36;
      v43 = a1 + 1944;
      if (*v40 != v36)
      {
        v44 = *v36;
        v45 = a1 + 1944;
        if (v42)
        {
          do
          {
            v43 = v44;
            v44 = *(_QWORD *)(v44 + 8);
          }
          while (v44);
        }
        else
        {
          do
          {
            v43 = *(_QWORD *)(v45 + 16);
            v46 = *(_QWORD *)v43 == v45;
            v45 = v43;
          }
          while (v46);
        }
        v47 = *((unsigned __int16 *)v38 + 20);
        v48 = *(_QWORD *)(v43 + 32);
        v46 = v48 == v41;
        v49 = v48 < v41;
        if (v46)
          v49 = *(unsigned __int16 *)(v43 + 40) < v47;
        if (!v49)
          break;
      }
      if (v42)
        v50 = v43;
      else
        v50 = a1 + 1944;
      if (v42)
        v51 = (uint64_t **)(v43 + 8);
      else
        v51 = (uint64_t **)(a1 + 1944);
      if (!*v51)
        goto LABEL_61;
LABEL_67:
      v64 = (_QWORD *)v38[1];
      if (v64)
      {
        do
        {
          v65 = v64;
          v64 = (_QWORD *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (_QWORD *)v38[2];
          v46 = *v65 == (_QWORD)v38;
          v38 = v65;
        }
        while (!v46);
      }
      v38 = v65;
      if (v65 == v37)
        goto LABEL_73;
    }
    v51 = (uint64_t **)(a1 + 1944);
    v50 = a1 + 1944;
    if (v42)
    {
      v52 = *v36;
      while (1)
      {
        while (1)
        {
          v50 = v52;
          v53 = *(_QWORD *)(v52 + 32);
          v54 = *(unsigned __int16 *)(v50 + 40);
          v55 = v54 > v47;
          if (v53 != v41)
            v55 = v53 > v41;
          if (!v55)
            break;
          v52 = *(_QWORD *)v50;
          v51 = (uint64_t **)v50;
          if (!*(_QWORD *)v50)
            goto LABEL_61;
        }
        v56 = v54 < v47;
        v46 = v53 == v41;
        v57 = v53 < v41;
        if (v46)
          v57 = v56;
        if (!v57)
          goto LABEL_67;
        v52 = *(_QWORD *)(v50 + 8);
        if (!v52)
        {
          v51 = (uint64_t **)(v50 + 8);
          break;
        }
      }
    }
LABEL_61:
    v58 = (uint64_t *)operator new(0x40uLL);
    v59 = v58;
    *((_OWORD *)v58 + 2) = *((_OWORD *)v38 + 2);
    v60 = v38[7];
    v58[6] = v38[6];
    v58[7] = v60;
    if (v60)
    {
      v61 = (unint64_t *)(v60 + 8);
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    *v58 = 0;
    v58[1] = 0;
    v58[2] = v50;
    *v51 = v58;
    v63 = (uint64_t *)**v40;
    if (v63)
    {
      *v40 = v63;
      v59 = *v51;
    }
    sub_2231A9A8C(*(uint64_t **)(a1 + 1944), v59);
    ++*(_QWORD *)(a1 + 1952);
    goto LABEL_67;
  }
LABEL_73:
  *(float32x2_t *)v29.i8 = a2[167];
  v29.i32[2] = a2[168].i32[0];
  *(float32x2_t *)v10.i8 = a2[169];
  v10.i32[2] = a2[170].i32[0];
  v11.i32[0] = a2[172].i32[0];
  *(float32x2_t *)v12.f32 = a2[173];
  v12.i32[2] = a2[174].i32[0];
  *(_QWORD *)&v66 = vzip1q_s32(v29, v10).u64[0];
  v67 = (int8x16_t)vnegq_f32(v12);
  v68 = (int8x16_t)vtrn2q_s32(v29, v10);
  v68.i32[2] = HIDWORD(*(_QWORD *)&a2[171]);
  v69 = (int8x16_t)vzip2q_s32(v29, v10);
  v69.i32[2] = v11.i32[0];
  v70 = vmla_f32(vmls_lane_f32(vmul_f32(a2[171], *(float32x2_t *)v67.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a2[171], 1), *(float32x2_t *)v12.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL), v11).u32[0];
  *((_QWORD *)&v66 + 1) = *(_QWORD *)&a2[171];
  HIDWORD(v71) = 0;
  LODWORD(v71) = vdupq_lane_s32(*(int32x2_t *)&v68, 0).i32[3];
  *(_QWORD *)((char *)&v71 + 4) = vextq_s8(v68, v69, 4uLL).u64[0];
  v69.i64[1] = vdupq_laneq_s32((int32x4_t)v69, 2).u32[0];
  *(_OWORD *)(a1 + 1976) = v71;
  *(int8x16_t *)(a1 + 1992) = v69;
  *(_OWORD *)(a1 + 1960) = v66;
  *(float32x2_t *)(a1 + 2008) = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v66, *(float *)v67.i32), *(float32x2_t *)v68.i8, *(float32x2_t *)v12.f32, 1), *(float32x2_t *)v69.i8, v12, 2);
  *(_DWORD *)(a1 + 2016) = v70;
  *(_DWORD *)(a1 + 2020) = 1065353216;
  return a1;
}

void sub_223AA2A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  sub_2231F5848(v11, v12);
  sub_2231BEAF8(a9);
  sub_223AA2A88(a10);
  sub_2232555B8(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_223AA2A88(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC5EBB0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_223AA2AFC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC5EBB0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AA2B70()
{
  return 2;
}

uint64_t sub_223AA2B78(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223AA2B80@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_223AA2B98(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_223AA2C14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  sub_2231F5848(a1 + 1936, *(_QWORD **)(a1 + 1944));
  *(_QWORD *)(a1 + 1880) = &off_24EC21328;
  v2 = *(std::__shared_weak_count **)(a1 + 1896);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      *(_QWORD *)(a1 + 1824) = &off_24EC5EBB0;
      v5 = *(std::__shared_weak_count **)(a1 + 1840);
      if (v5)
        goto LABEL_6;
      return sub_2232555B8(a1);
    }
  }
  *(_QWORD *)(a1 + 1824) = &off_24EC5EBB0;
  v5 = *(std::__shared_weak_count **)(a1 + 1840);
  if (!v5)
    return sub_2232555B8(a1);
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return sub_2232555B8(a1);
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return sub_2232555B8(a1);
}

uint64_t sub_223AA2CF0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  __int16 v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  BOOL v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  float v46;
  int v47;
  int v48;
  float v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v57;
  __int128 v58;
  uint64_t v59[4];
  _BYTE v60[28];
  unint64_t v61[3];
  __int128 v62;
  __int16 v63;
  uint64_t v64;
  unint64_t v65;

  v5 = *(std::__shared_weak_count **)(a3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  *(_QWORD *)a1 = &off_24EC5ECA8;
  v8 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v8;
  sub_2232BD040(a1 + 40);
  *(_QWORD *)(a1 + 1864) = &off_24EC5EBB0;
  v63 = 0;
  v60[24] = 0;
  memset(v60, 0, 17);
  v64 = 0;
  v65 = 0;
  sub_223F79614(v61, &v64, &v65, 1, &v63, 1, 0);
  *(_OWORD *)v59 = 0uLL;
  *(_OWORD *)((char *)&v59[1] + 4) = *(_OWORD *)&v60[12];
  v10 = v61[0];
  v9 = v61[1];
  v11 = v61[2];
  v58 = v62;
  v12 = operator new();
  *(_QWORD *)v12 = &off_24EC5AB40;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)v59;
  *(_OWORD *)(v12 + 20) = *(_OWORD *)((char *)&v59[1] + 4);
  *(_QWORD *)(v12 + 40) = v10;
  *(_QWORD *)(v12 + 48) = v9;
  *(_QWORD *)(v12 + 56) = v11;
  *(_OWORD *)(v12 + 64) = v58;
  v13 = (std::__shared_weak_count *)operator new();
  v14 = v13;
  v13->__shared_owners_ = 0;
  v15 = (unint64_t *)&v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC5AD18;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
  v57 = v13;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  *(_QWORD *)(a1 + 1872) = v12;
  *(_QWORD *)(a1 + 1880) = v13;
  do
    v17 = __ldxr(v15);
  while (__stxr(v17 + 1, v15));
  do
    v18 = __ldaxr(v15);
  while (__stlxr(v18 - 1, v15));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(v60, v12, 2);
  v19 = *(_QWORD *)(*(_QWORD *)v60 + 16);
  *(_OWORD *)(a1 + 1888) = **(_OWORD **)v60;
  *(_QWORD *)(a1 + 1904) = v19;
  *(_QWORD *)v60 = 0;
  MEMORY[0x227684CE8]();
  v20 = *(_QWORD *)(a1 + 1872);
  v21 = *(std::__shared_weak_count **)(a1 + 1880);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 104))(v20);
  v26 = v25;
  if ((v25 & 0xFFFFFF) <= 0x10000)
    v26 = 0;
  v27 = v25 & 0xFF00;
  if ((v25 & 0xFF0000) == 0)
    v27 = 0;
  *(_WORD *)(a1 + 1912) = v27 & 0xFF00 | v26;
  if (v57)
  {
    v28 = (unint64_t *)&v57->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  *(_QWORD *)(a1 + 1920) = &off_24EC21328;
  sub_2231BF6E8(v59);
  *(_QWORD *)v60 = v59[0];
  if (v59[0])
  {
    v30 = (_QWORD *)operator new();
    v31 = v59[0];
    *v30 = &off_24EC20058;
    v30[1] = 0;
    v30[2] = 0;
    v30[3] = v31;
  }
  else
  {
    v30 = 0;
  }
  *(_QWORD *)&v60[8] = v30;
  v59[0] = 0;
  sub_2232C2A20((uint64_t *)(a1 + 1928), (uint64_t *)v60);
  v32 = *(std::__shared_weak_count **)&v60[8];
  if (!*(_QWORD *)&v60[8])
    goto LABEL_33;
  v33 = (unint64_t *)(*(_QWORD *)&v60[8] + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    v35 = v59[0];
    v59[0] = 0;
    if (!v35)
      goto LABEL_46;
  }
  else
  {
LABEL_33:
    v35 = v59[0];
    v59[0] = 0;
    if (!v35)
      goto LABEL_46;
  }
  v36 = *(void **)(v35 + 48);
  if (v36)
  {
    v37 = !*(_DWORD *)(v35 + 68) || *(_DWORD *)(v35 + 64) == 0;
    v38 = v37 ? 0 : *(_DWORD *)(v35 + 68);
    if (v38 * (*(_QWORD *)(v35 + 72) >> 33) != -1)
      goto LABEL_44;
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v36 = *(void **)(v35 + 48);
    if (v36)
LABEL_44:
      free(v36);
  }
  *(_QWORD *)(v35 + 48) = 0;
  MEMORY[0x227684CE8](v35, 0x1091C406A8758A4);
LABEL_46:
  *(_OWORD *)(a1 + 2000) = xmmword_22465EB70;
  *(_OWORD *)(a1 + 2016) = unk_22465EB80;
  *(_OWORD *)(a1 + 2032) = xmmword_22465EB90;
  *(_QWORD *)(a1 + 1992) = 0;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_QWORD *)(a1 + 1976) = a1 + 1984;
  *(_OWORD *)(a1 + 2048) = unk_22465EBA0;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2080) = 0;
  *(_QWORD *)(a1 + 2072) = 0;
  v39 = *((unsigned __int8 *)a2 + 24);
  v40 = operator new();
  sub_223A91480(v40, 0x10000u, *((_WORD *)a2 + 2), 0, 2 * (v39 != 0), *((float *)a2 + 3));
  *(_QWORD *)(a1 + 2088) = v40;
  v41 = operator new();
  v42 = *((_DWORD *)a2 + 7);
  *(_QWORD *)v41 = &off_24EC5F058;
  *(_QWORD *)(v41 + 8) = &off_24EC5F0A8;
  *(_QWORD *)(v41 + 16) = sub_223AAF3AC;
  *(_QWORD *)(v41 + 32) = v41 + 8;
  *(_QWORD *)(v41 + 40) = 0;
  *(_QWORD *)(v41 + 48) = 0;
  *(_QWORD *)(v41 + 56) = 0;
  *(_DWORD *)(v41 + 64) = v42;
  *(_QWORD *)(a1 + 2096) = v41;
  v43 = operator new();
  v44 = *((_DWORD *)a2 + 2);
  v45 = *((unsigned __int16 *)a2 + 2);
  v46 = *((float *)a2 + 3);
  v47 = *((_DWORD *)a2 + 5);
  *(_QWORD *)v43 = &off_24EC5ECE0;
  *(_WORD *)(v43 + 8) = v45;
  v48 = v45 + 2 * v44;
  *(_DWORD *)(v43 + 12) = v44;
  *(_DWORD *)(v43 + 16) = v48;
  *(_DWORD *)(v43 + 20) = v48 * v48;
  *(float *)(v43 + 24) = v46;
  *(float *)(v43 + 28) = 1.0 / v46;
  *(_DWORD *)(v43 + 32) = v47;
  *(_QWORD *)(v43 + 48) = 0;
  *(_QWORD *)(v43 + 56) = 0;
  *(_QWORD *)(v43 + 40) = 0;
  v49 = (float)(v46 * (float)v44) + (float)(v46 * (float)v44);
  *(float *)(v43 + 64) = 1.0 / (float)(v49 * v49);
  v50 = (v48 * v48 * v48);
  if ((_DWORD)v50)
  {
    v51 = (char *)operator new(8 * (v48 * v48 * v48));
    bzero(v51, 8 * v50);
    *(_QWORD *)(v43 + 40) = v51;
    *(_QWORD *)(v43 + 48) = &v51[8 * v50];
    *(_QWORD *)(v43 + 56) = &v51[8 * v50];
  }
  *(_QWORD *)(a1 + 2104) = v43;
  v52 = operator new();
  sub_223A9F4E0(v52, *((unsigned __int16 *)a2 + 2), *((_BYTE *)a2 + 25), *((float *)a2 + 3));
  *(_QWORD *)(a1 + 2112) = v52;
  v53 = operator new();
  sub_223AA6C60(v53, 4, 0, *((float *)a2 + 4));
  *(_QWORD *)(a1 + 2120) = v53;
  *(_QWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_QWORD *)(a1 + 2128) = a1 + 2136;
  if (*(_DWORD *)a2 != 1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Reconstruction/PointCloudMapper/src/MesherImpl.cpp", 54, (uint64_t)"config.impl_type == PointCloudMesherImplType::DualContouring", 60, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (v5)
  {
    v54 = (unint64_t *)&v5->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_223AA33B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  MEMORY[0x227684CE8](v4, 0x1081C40DD09A337);
  v6 = v3[262];
  v3[262] = 0;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v3[261];
    v3[261] = 0;
    if (!v7)
    {
LABEL_3:
      v8 = (void *)v3[258];
      if (!v8)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v7 = v3[261];
    v3[261] = 0;
    if (!v7)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (void *)v3[258];
  if (!v8)
  {
LABEL_5:
    sub_223AA2C14(v2);
    sub_223167354((uint64_t)va);
    _Unwind_Resume(a1);
  }
LABEL_4:
  v3[259] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_223AA3588()
{
  uint64_t v0;
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B1C40E3AAB0AFLL);
  if (!*(_QWORD *)(v0 + 2064))
    JUMPOUT(0x223AA344CLL);
  JUMPOUT(0x223AA3444);
}

void sub_223AA35B4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 + 2064))
    JUMPOUT(0x223AA344CLL);
  JUMPOUT(0x223AA3444);
}

void sub_223AA35C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_223167354((uint64_t)va);
  JUMPOUT(0x223AA35D4);
}

void sub_223AA3604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_22380AC98((uint64_t *)va1);
  sub_2232555B8(v2);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223AA3698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a1 = &off_24EC5ECA8;
  sub_223198030(a1 + 2128, *(_QWORD **)(a1 + 2136));
  v2 = *(_QWORD *)(a1 + 2120);
  *(_QWORD *)(a1 + 2120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 2112);
  *(_QWORD *)(a1 + 2112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 2104);
  *(_QWORD *)(a1 + 2104) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 2096);
  *(_QWORD *)(a1 + 2096) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 2088);
  *(_QWORD *)(a1 + 2088) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(void **)(a1 + 2064);
  if (v7)
  {
    *(_QWORD *)(a1 + 2072) = v7;
    operator delete(v7);
  }
  sub_2231F5848(a1 + 1976, *(_QWORD **)(a1 + 1984));
  *(_QWORD *)(a1 + 1920) = &off_24EC21328;
  v8 = *(std::__shared_weak_count **)(a1 + 1936);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      *(_QWORD *)(a1 + 1864) = &off_24EC5EBB0;
      v11 = *(std::__shared_weak_count **)(a1 + 1880);
      if (v11)
        goto LABEL_18;
LABEL_21:
      sub_2232555B8(a1 + 40);
      return a1;
    }
  }
  *(_QWORD *)(a1 + 1864) = &off_24EC5EBB0;
  v11 = *(std::__shared_weak_count **)(a1 + 1880);
  if (!v11)
    goto LABEL_21;
LABEL_18:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    goto LABEL_21;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  sub_2232555B8(a1 + 40);
  return a1;
}

void sub_223AA3828(uint64_t a1)
{
  sub_223AA3698(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223AA384C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *p_p;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int32x2_t *v18;
  float32x4_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::mutex *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2_t v35;
  float v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type size;
  std::string *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int v51;
  float32x2_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  __int16 v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  std::string::size_type v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  __int16 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  __int16 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  std::string::size_type v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  __int16 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  std::mutex *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BOOL4 v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  std::string v169;
  uint64_t v170;
  uint64_t (**v171)();
  std::string::size_type v172;
  std::__shared_weak_count *v173;
  __int128 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t (**v177)();
  uint64_t v178;
  std::__shared_weak_count *v179;
  __int128 v180;
  uint64_t v181;
  __int16 v182;
  std::string v183;
  _BYTE v184[24];
  __int16 v185;
  __int128 __p;
  _BYTE v187[32];
  __int16 v188;
  uint64_t *v189[3];
  uint64_t v190[3];
  uint64_t v191[3];
  _QWORD v192[2];
  char v193;
  __int128 v194;
  __int128 v195;
  int v196;
  __int128 v197;
  __int128 v198;
  int v199;
  _BYTE v200[19];
  int v201;
  __int16 v202;
  uint64_t (**v203)();
  __int128 v204;
  _OWORD v205[2];
  uint64_t (**v206)();
  __int128 v207;
  _OWORD v208[2];
  _QWORD *v209;
  _QWORD *v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  int v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v195 = 0u;
  v194 = 0u;
  v196 = 728321600;
  kdebug_trace();
  strcpy((char *)v190, "PCMUpdateWithFrameInt");
  HIBYTE(v190[2]) = 21;
  strcpy((char *)v191, "PointCloudMapper");
  HIBYTE(v191[2]) = 16;
  v192[1] = 0;
  v192[0] = std::chrono::steady_clock::now().__d_.__rep_;
  v193 = 1;
  *(_QWORD *)&v197 = "cv3d.recon.";
  *((_QWORD *)&v197 + 1) = 11;
  *(_QWORD *)&v198 = "JasperMeshing.Mesh";
  *((_QWORD *)&v198 + 1) = 18;
  sub_2231A9820((uint64_t)&v197, (uint64_t)&v199, 0, 0, (std::string *)&__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v4[2];
    }
    v6 = *(_QWORD *)(v5 + 64);
    v7 = (std::mutex *)(v6 + 32);
    std::mutex::lock((std::mutex *)(v6 + 32));
    v9 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(v6 + 104);
    std::mutex::unlock(v7);
    if (v9 != v8)
    {
      sub_2241471F8();
      v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        v197 = 0u;
        v198 = 0u;
        v199 = 728325608;
        kdebug_trace();
        sub_223AA4D40((double *)&qword_255788F20, v10, a2 + 1240, "intrinsics");
        kdebug_trace();
      }
    }
  }
  v197 = 0u;
  v198 = 0u;
  v199 = 728325624;
  kdebug_trace();
  v11 = v187[7];
  if (v187[7] < 0)
    v11 = *((_QWORD *)&__p + 1);
  if (v11 >= 0x11)
  {
    p_p = &__p;
    if (v187[7] < 0)
      p_p = (__int128 *)__p;
    v13 = *(_QWORD *)p_p;
    v14 = *((_QWORD *)p_p + 1);
    v15 = *((unsigned __int8 *)p_p + 16);
    if (v13 == 0x6365722E64337663 && v14 == 0x73746174532E6E6FLL && v15 == 46)
      sub_223187510();
  }
  kdebug_trace();
  if ((v187[7] & 0x80000000) != 0)
    operator delete((void *)__p);
  *(_QWORD *)&v197 = "cv3d.recon.";
  *((_QWORD *)&v197 + 1) = 11;
  *(_QWORD *)&v198 = "JasperMeshing.Mesh";
  *((_QWORD *)&v198 + 1) = 18;
  sub_2231A9820((uint64_t)&v197, (uint64_t)&v199, 0, 0, &v183);
  sub_224569D7C();
  sub_224569A80();
  v18 = (int32x2_t *)(a2 + 1616);
  v19 = (float32x4_t *)(a2 + 1336);
  if (os_variant_has_internal_diagnostics())
  {
    v20 = sub_2241471F8();
    v21 = v20[2];
    if (!v21)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v21 = v20[2];
    }
    v22 = *(_QWORD *)(v21 + 64);
    v23 = (std::mutex *)(v22 + 32);
    std::mutex::lock((std::mutex *)(v22 + 32));
    v25 = *(_QWORD *)(v22 + 96);
    v24 = *(_QWORD *)(v22 + 104);
    std::mutex::unlock(v23);
    if (v25 != v24)
    {
      sub_2241471F8();
      v26 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26))
      {
        *(_OWORD *)v187 = 0u;
        __p = 0u;
        *(_DWORD *)&v187[16] = 728325608;
        kdebug_trace();
        if (*(_BYTE *)(a2 + 1744))
        {
          v29.i32[0] = *(_DWORD *)(a2 + 1624);
          v30 = *(float32x2_t *)(a2 + 1632);
          v31 = *(float32x2_t *)(a2 + 1648);
          v27.i32[0] = *(_DWORD *)(a2 + 1656);
          v28.i64[0] = *(_QWORD *)(a2 + 1664);
          v28.i32[2] = *(_DWORD *)(a2 + 1672);
          v32 = (int8x16_t)vnegq_f32(v28);
          v33 = *(float32x4_t *)(a2 + 1352);
          v34 = vmulq_n_f32(*v19, v29.f32[0]);
          v29.i32[1] = *(_DWORD *)(a2 + 1640);
          v35 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v18, (int32x2_t)v30), *(float *)v32.i32), (float32x2_t)vzip2_s32(*v18, (int32x2_t)v30), *(float32x2_t *)v28.f32, 1), v29, v28, 2);
          LODWORD(v36) = vmla_f32(vmls_lane_f32(vmul_f32(v31, *(float32x2_t *)v32.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v31, 1), *(float32x2_t *)v28.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), v27).u32[0];
          v37 = *(float32x4_t *)(a2 + 1368);
          v38 = *(float32x4_t *)(a2 + 1384);
          v39 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v19, COERCE_FLOAT(*v18)), v33, v30.f32[0]), v37, v31.f32[0]), (float32x4_t)0, v38);
          v40 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v19, (float32x2_t)*v18, 1), v33, v30, 1), v37, v31, 1), (float32x4_t)0, v38);
          v41 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v34, v33, *(float *)(a2 + 1640)), v37, v27.f32[0]), (float32x4_t)0, v38);
          v42 = vaddq_f32(v38, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v19, v35.f32[0]), v33, v35, 1), v37, v36));
          v165 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)(a2 + 1696))), v40, *(float32x2_t *)(a2 + 1696), 1), v41, *(float32x4_t *)(a2 + 1696), 2), v42, *(float32x4_t *)(a2 + 1696), 3);
          v167 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)(a2 + 1680))), v40, *(float32x2_t *)(a2 + 1680), 1), v41, *(float32x4_t *)(a2 + 1680), 2), v42, *(float32x4_t *)(a2 + 1680), 3);
          v163 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)(a2 + 1712))), v40, *(float32x2_t *)(a2 + 1712), 1), v41, *(float32x4_t *)(a2 + 1712), 2), v42, *(float32x4_t *)(a2 + 1712), 3);
          v161 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v39, COERCE_FLOAT(*(_OWORD *)(a2 + 1728))), v40, *(float32x2_t *)(a2 + 1728), 1), v41, *(float32x4_t *)(a2 + 1728), 2), v42, *(float32x4_t *)(a2 + 1728), 3);
        }
        else
        {
          v161 = *(float32x4_t *)(a2 + 1384);
          v163 = *(float32x4_t *)(a2 + 1368);
          v165 = *(float32x4_t *)(a2 + 1352);
          v167 = *v19;
        }
        v43 = operator new();
        *(float32x4_t *)v43 = v167;
        *(float32x4_t *)(v43 + 16) = v165;
        *(float32x4_t *)(v43 + 32) = v163;
        *(float32x4_t *)(v43 + 48) = v161;
        *(_DWORD *)(v43 + 128) = 0;
        *(_BYTE *)(v43 + 136) = 4;
        v44 = operator new();
        *(_BYTE *)v44 = 0;
        *(_DWORD *)(v44 + 128) = -1;
        v45 = *(unsigned int *)(v43 + 128);
        if ((_DWORD)v45 != -1)
        {
          ((void (*)(uint64_t **, uint64_t, uint64_t))off_24EC6BD10[v45])(v189, v44, v43);
          *(_DWORD *)(v44 + 128) = v45;
        }
        *(_BYTE *)(v44 + 136) = *(_BYTE *)(v43 + 136);
        *(_QWORD *)&v197 = v44;
        BYTE8(v197) = 0;
        LOBYTE(v199) = 0;
        strcpy(v200, "intrinsics");
        *(_QWORD *)&v200[11] = v216;
        v201 = v217;
        v202 = 266;
        v216 = 0;
        v217 = 0;
        sub_223AA4E7C((double *)&qword_255788F20, v26, (uint64_t)&v197, "WtoC");
        if (HIBYTE(v202) && (char)v202 < 0)
          operator delete(*(void **)v200);
        if ((_BYTE)v199 && SHIBYTE(v198) < 0)
          operator delete(*((void **)&v197 + 1));
        v46 = v197;
        *(_QWORD *)&v197 = 0;
        if (v46)
          MEMORY[0x227684CE8](v46, 0x1000C4072FAA15ELL);
        MEMORY[0x227684CE8](v43, 0x1000C4072FAA15ELL);
        kdebug_trace();
      }
    }
  }
  v197 = 0u;
  v198 = 0u;
  v199 = 728325624;
  kdebug_trace();
  size = HIBYTE(v183.__r_.__value_.__r.__words[2]);
  if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v183.__r_.__value_.__l.__size_;
  if (size >= 0x11)
  {
    v48 = &v183;
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v48 = (std::string *)v183.__r_.__value_.__r.__words[0];
    v49 = v48->__r_.__value_.__r.__words[0];
    v50 = v48->__r_.__value_.__l.__size_;
    v51 = v48->__r_.__value_.__s.__data_[16];
    if (v49 == 0x6365722E64337663 && v50 == 0x73746174532E6E6FLL && v51 == 46)
    {
      sub_223187510();
      if (*(_BYTE *)(a2 + 1744))
      {
        v56.i32[0] = *(_DWORD *)(a2 + 1624);
        v57 = *(float32x2_t *)(a2 + 1632);
        v58 = *(float32x2_t *)(a2 + 1648);
        v54.i32[0] = *(_DWORD *)(a2 + 1656);
        v55.i64[0] = *(_QWORD *)(a2 + 1664);
        v55.i32[2] = *(_DWORD *)(a2 + 1672);
        v59 = (int8x16_t)vnegq_f32(v55);
        v60 = *(float32x4_t *)(a2 + 1352);
        v61 = vmulq_n_f32(*v19, v56.f32[0]);
        v56.i32[1] = *(_DWORD *)(a2 + 1640);
        v62 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*v18, (int32x2_t)v57), *(float *)v59.i32), (float32x2_t)vzip2_s32(*v18, (int32x2_t)v57), *(float32x2_t *)v55.f32, 1), v56, v55, 2);
        LODWORD(v63) = vmla_f32(vmls_lane_f32(vmul_f32(v58, *(float32x2_t *)v59.i8), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v58, 1), *(float32x2_t *)v55.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL), v54).u32[0];
        v64 = *(float32x4_t *)(a2 + 1368);
        v65 = *(float32x4_t *)(a2 + 1384);
        v66 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*v19, COERCE_FLOAT(*v18)), v60, v57.f32[0]), v64, v58.f32[0]), (float32x4_t)0, v65);
        v67 = vmlaq_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(*v19, (float32x2_t)*v18, 1), v60, v57, 1), v64, v58, 1), (float32x4_t)0, v65);
        v68 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v61, v60, *(float *)(a2 + 1640)), v64, v54.f32[0]), (float32x4_t)0, v65);
        v69 = vaddq_f32(v65, vmlaq_n_f32(vmlaq_lane_f32(vmulq_n_f32(*v19, v62.f32[0]), v60, v62, 1), v64, v63));
        v166 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, COERCE_FLOAT(*(_OWORD *)(a2 + 1696))), v67, *(float32x2_t *)(a2 + 1696), 1), v68, *(float32x4_t *)(a2 + 1696), 2), v69, *(float32x4_t *)(a2 + 1696), 3);
        v168 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, COERCE_FLOAT(*(_OWORD *)(a2 + 1680))), v67, *(float32x2_t *)(a2 + 1680), 1), v68, *(float32x4_t *)(a2 + 1680), 2), v69, *(float32x4_t *)(a2 + 1680), 3);
        v164 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, COERCE_FLOAT(*(_OWORD *)(a2 + 1712))), v67, *(float32x2_t *)(a2 + 1712), 1), v68, *(float32x4_t *)(a2 + 1712), 2), v69, *(float32x4_t *)(a2 + 1712), 3);
        v162 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v66, COERCE_FLOAT(*(_OWORD *)(a2 + 1728))), v67, *(float32x2_t *)(a2 + 1728), 1), v68, *(float32x4_t *)(a2 + 1728), 2), v69, *(float32x4_t *)(a2 + 1728), 3);
      }
      else
      {
        v162 = *(float32x4_t *)(a2 + 1384);
        v164 = *(float32x4_t *)(a2 + 1368);
        v166 = *(float32x4_t *)(a2 + 1352);
        v168 = *v19;
      }
      v70 = operator new();
      *(float32x4_t *)v70 = v168;
      *(float32x4_t *)(v70 + 16) = v166;
      *(float32x4_t *)(v70 + 32) = v164;
      *(float32x4_t *)(v70 + 48) = v162;
      *(_DWORD *)(v70 + 128) = 0;
      *(_BYTE *)(v70 + 136) = 4;
      v71 = operator new();
      *(_BYTE *)v71 = 0;
      *(_DWORD *)(v71 + 128) = -1;
      v72 = *(unsigned int *)(v70 + 128);
      if ((_DWORD)v72 != -1)
      {
        ((void (*)(__int128 *, uint64_t, uint64_t))off_24EC6BD10[v72])(&__p, v71, v70);
        *(_DWORD *)(v71 + 128) = v72;
      }
      *(_BYTE *)(v71 + 136) = *(_BYTE *)(v70 + 136);
      MEMORY[0x227684CE8](v71, 0x1000C4072FAA15ELL);
      MEMORY[0x227684CE8](v70, 0x1000C4072FAA15ELL);
    }
  }
  kdebug_trace();
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v183.__r_.__value_.__l.__data_);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2120) + 16))(*(_QWORD *)(a1 + 2120), a2);
  sub_223AA6A58(*(_QWORD **)(a1 + 2120), v189);
  v73 = *(_QWORD *)(a1 + 2120);
  *(_QWORD *)&__p = &off_24EC5EBB0;
  v74 = *(_QWORD *)(v73 + 144);
  v75 = *(std::__shared_weak_count **)(v73 + 152);
  if (v75)
  {
    p_shared_owners = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(p_shared_owners);
    while (__stxr(v77 + 1, p_shared_owners));
    v78 = *(_WORD *)(v73 + 184);
    do
      v79 = __ldxr(p_shared_owners);
    while (__stxr(v79 + 1, p_shared_owners));
    v80 = *(_QWORD *)(v73 + 160);
    *(_OWORD *)&v187[16] = *(_OWORD *)(v73 + 168);
    do
      v81 = __ldxr(p_shared_owners);
    while (__stxr(v81 + 1, p_shared_owners));
    *((_QWORD *)&__p + 1) = v74;
    *(_QWORD *)v187 = v75;
    *(_QWORD *)&v187[8] = v80;
    v188 = v78;
    do
      v82 = __ldaxr(p_shared_owners);
    while (__stlxr(v82 - 1, p_shared_owners));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
    do
      v83 = __ldaxr(p_shared_owners);
    while (__stlxr(v83 - 1, p_shared_owners));
    if (v83)
    {
      v84 = *(_QWORD *)(a1 + 2120);
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21328;
      v85 = *(_QWORD *)(v84 + 88);
      v86 = *(std::__shared_weak_count **)(v84 + 96);
      if (v86)
        goto LABEL_79;
LABEL_119:
      v115 = *(_WORD *)(v84 + 128);
      v116 = *(_QWORD *)(v84 + 104);
      *(_OWORD *)&v183.__r_.__value_.__r.__words[1] = v85;
      *(_QWORD *)v184 = v116;
      *(_OWORD *)&v184[8] = *(_OWORD *)(v84 + 112);
      v185 = v115;
      v177 = &off_24EC5EBB0;
      v95 = *((_QWORD *)&__p + 1);
      v96 = *(std::__shared_weak_count **)v187;
      if (!*(_QWORD *)v187)
        goto LABEL_120;
      goto LABEL_92;
    }
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
    v84 = *(_QWORD *)(a1 + 2120);
    v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21328;
    v85 = *(_QWORD *)(v84 + 88);
    v86 = *(std::__shared_weak_count **)(v84 + 96);
    if (!v86)
      goto LABEL_119;
  }
  else
  {
    v113 = *(_WORD *)(v73 + 184);
    v114 = *(_QWORD *)(v73 + 160);
    *((_QWORD *)&__p + 1) = *(_QWORD *)(v73 + 144);
    *(_QWORD *)v187 = 0;
    *(_QWORD *)&v187[8] = v114;
    *(_OWORD *)&v187[16] = *(_OWORD *)(v73 + 168);
    v188 = v113;
    v84 = *(_QWORD *)(a1 + 2120);
    v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21328;
    v85 = *(_QWORD *)(v84 + 88);
    v86 = *(std::__shared_weak_count **)(v84 + 96);
    if (!v86)
      goto LABEL_119;
  }
LABEL_79:
  v87 = (unint64_t *)&v86->__shared_owners_;
  do
    v88 = __ldxr(v87);
  while (__stxr(v88 + 1, v87));
  v89 = *(_WORD *)(v84 + 128);
  do
    v90 = __ldxr(v87);
  while (__stxr(v90 + 1, v87));
  v91 = *(_QWORD *)(v84 + 104);
  *(_OWORD *)&v184[8] = *(_OWORD *)(v84 + 112);
  do
    v92 = __ldxr(v87);
  while (__stxr(v92 + 1, v87));
  v183.__r_.__value_.__l.__size_ = v85;
  v183.__r_.__value_.__r.__words[2] = (std::string::size_type)v86;
  *(_QWORD *)v184 = v91;
  v185 = v89;
  do
    v93 = __ldaxr(v87);
  while (__stlxr(v93 - 1, v87));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
  do
    v94 = __ldaxr(v87);
  while (__stlxr(v94 - 1, v87));
  if (v94)
  {
    v177 = &off_24EC5EBB0;
    v95 = *((_QWORD *)&__p + 1);
    v96 = *(std::__shared_weak_count **)v187;
    if (*(_QWORD *)v187)
      goto LABEL_92;
LABEL_120:
    v178 = v95;
    v179 = 0;
    v180 = *(_OWORD *)&v187[8];
    v181 = *(_QWORD *)&v187[24];
    v182 = v188;
    v171 = &off_24EC21328;
    v105 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
    v104 = v183.__r_.__value_.__l.__size_;
    if (!v183.__r_.__value_.__r.__words[2])
      goto LABEL_121;
    goto LABEL_105;
  }
  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
  std::__shared_weak_count::__release_weak(v86);
  v177 = &off_24EC5EBB0;
  v95 = *((_QWORD *)&__p + 1);
  v96 = *(std::__shared_weak_count **)v187;
  if (!*(_QWORD *)v187)
    goto LABEL_120;
LABEL_92:
  v97 = (unint64_t *)&v96->__shared_owners_;
  do
    v98 = __ldxr(v97);
  while (__stxr(v98 + 1, v97));
  v99 = v188;
  do
    v100 = __ldxr(v97);
  while (__stxr(v100 + 1, v97));
  v180 = *(_OWORD *)&v187[8];
  v181 = *(_QWORD *)&v187[24];
  do
    v101 = __ldxr(v97);
  while (__stxr(v101 + 1, v97));
  v178 = v95;
  v179 = v96;
  v182 = v99;
  do
    v102 = __ldaxr(v97);
  while (__stlxr(v102 - 1, v97));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
  do
    v103 = __ldaxr(v97);
  while (__stlxr(v103 - 1, v97));
  if (v103)
  {
    v171 = &off_24EC21328;
    v105 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
    v104 = v183.__r_.__value_.__l.__size_;
    if (v183.__r_.__value_.__r.__words[2])
      goto LABEL_105;
LABEL_121:
    v172 = v104;
    v173 = 0;
    v174 = *(_OWORD *)v184;
    v175 = *(_QWORD *)&v184[16];
    v176 = v185;
    goto LABEL_122;
  }
  ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
  std::__shared_weak_count::__release_weak(v96);
  v171 = &off_24EC21328;
  v105 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
  v104 = v183.__r_.__value_.__l.__size_;
  if (!v183.__r_.__value_.__r.__words[2])
    goto LABEL_121;
LABEL_105:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldxr(v106);
  while (__stxr(v107 + 1, v106));
  v108 = v185;
  do
    v109 = __ldxr(v106);
  while (__stxr(v109 + 1, v106));
  v174 = *(_OWORD *)v184;
  v175 = *(_QWORD *)&v184[16];
  do
    v110 = __ldxr(v106);
  while (__stxr(v110 + 1, v106));
  v172 = v104;
  v173 = v105;
  v176 = v108;
  do
    v111 = __ldaxr(v106);
  while (__stlxr(v111 - 1, v106));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
  do
    v112 = __ldaxr(v106);
  while (__stlxr(v112 - 1, v106));
  if (!v112)
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
  }
LABEL_122:
  sub_223AA2594((uint64_t)&v197, (float32x2_t *)a2, (uint64_t)&v177, (uint64_t)&v171, v189);
  sub_22347F36C(a1 + 40, (uint64_t)&v197);
  v117 = v204;
  v204 = 0uLL;
  v118 = *(std::__shared_weak_count **)(a1 + 1880);
  *(_OWORD *)(a1 + 1872) = v117;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  *(_OWORD *)(a1 + 1888) = v205[0];
  *(_OWORD *)(a1 + 1898) = *(_OWORD *)((char *)v205 + 10);
  v121 = v207;
  v207 = 0uLL;
  v122 = *(std::__shared_weak_count **)(a1 + 1936);
  *(_OWORD *)(a1 + 1928) = v121;
  if (v122)
  {
    v123 = (unint64_t *)&v122->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  *(_OWORD *)(a1 + 1944) = v208[0];
  *(_OWORD *)(a1 + 1954) = *(_OWORD *)((char *)v208 + 10);
  v125 = a1 + 1984;
  sub_2231F5848(a1 + 1976, *(_QWORD **)(a1 + 1984));
  *(_QWORD *)(a1 + 1976) = v209;
  v126 = v210;
  *(_QWORD *)(a1 + 1984) = v210;
  v127 = v211;
  *(_QWORD *)(a1 + 1992) = v211;
  if (v127)
  {
    v126[2] = v125;
    v209 = &v210;
    v210 = 0;
    v211 = 0;
    v126 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1976) = v125;
  }
  v128 = v213;
  *(_OWORD *)(a1 + 2000) = v212;
  *(_OWORD *)(a1 + 2016) = v128;
  v129 = v215;
  *(_OWORD *)(a1 + 2032) = v214;
  *(_OWORD *)(a1 + 2048) = v129;
  sub_2231F5848((uint64_t)&v209, v126);
  v206 = &off_24EC21328;
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v131 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
      std::__shared_weak_count::__release_weak(v130);
    }
  }
  v203 = &off_24EC5EBB0;
  v133 = (std::__shared_weak_count *)*((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v134 = (unint64_t *)(*((_QWORD *)&v204 + 1) + 8);
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  sub_2232555B8((uint64_t)&v197);
  v171 = &off_24EC21328;
  v136 = v173;
  if (v173)
  {
    v137 = (unint64_t *)&v173->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
    }
  }
  v177 = &off_24EC5EBB0;
  v139 = v179;
  if (v179)
  {
    v140 = (unint64_t *)&v179->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2096) + 16))(*(_QWORD *)(a1 + 2096), a1 + 40, *(_QWORD *)(a1 + 2120) + 56, *(_QWORD *)(a1 + 2088) + 16, a1 + 2064);
  v170 = *(_QWORD *)(a2 + 1232);
  v142 = *(_QWORD *)(a1 + 2104);
  v143 = *(_QWORD *)(a1 + 2088);
  v144 = *(_QWORD *)(a1 + 2048);
  DWORD2(v197) = *(_DWORD *)(a1 + 2056);
  *(_QWORD *)&v197 = v144;
  (*(void (**)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t *))(*(_QWORD *)v142 + 16))(v142, a1 + 2064, v143 + 16, &v197, &v170);
  sub_224569D7C();
  sub_224569A80();
  if (!os_variant_has_internal_diagnostics())
    goto LABEL_173;
  v145 = sub_2241471F8();
  v146 = v145[2];
  if (!v146)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v146 = v145[2];
  }
  v147 = *(_QWORD *)(v146 + 64);
  v148 = (std::mutex *)(v147 + 32);
  std::mutex::lock((std::mutex *)(v147 + 32));
  v150 = *(_QWORD *)(v147 + 96);
  v149 = *(_QWORD *)(v147 + 104);
  std::mutex::unlock(v148);
  if (v150 == v149)
    goto LABEL_173;
  *(_QWORD *)&v197 = "cv3d.recon.";
  *((_QWORD *)&v197 + 1) = 11;
  *(_QWORD *)&v198 = "JasperMeshing.Mesh";
  *((_QWORD *)&v198 + 1) = 18;
  sub_2231A9820((uint64_t)&v197, (uint64_t)&v199, 0, 0, &v169);
  sub_2241471F8();
  v151 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v151 + 24))(v151))
  {
    v152 = *(_BYTE *)(a1 + 33) == 0;
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_162;
  }
  else
  {
    v152 = 0;
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_162:
      if (v152)
        goto LABEL_172;
      goto LABEL_173;
    }
  }
  operator delete(v169.__r_.__value_.__l.__data_);
  if (v152)
  {
LABEL_172:
    v153 = *(_QWORD *)(a1 + 2088);
    *(_QWORD *)&v197 = a1 + 2064;
    BYTE8(v197) = 1;
    sub_223A980CC((_QWORD *)(v153 + 16), (uint64_t)&v197);
  }
LABEL_173:
  v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24EC21328;
  v154 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
  if (v183.__r_.__value_.__r.__words[2])
  {
    v155 = (unint64_t *)(v183.__r_.__value_.__r.__words[2] + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  *(_QWORD *)&__p = &off_24EC5EBB0;
  v157 = *(std::__shared_weak_count **)v187;
  if (*(_QWORD *)v187)
  {
    v158 = (unint64_t *)(*(_QWORD *)v187 + 8);
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
      std::__shared_weak_count::__release_weak(v157);
    }
  }
  sub_2231F5848((uint64_t)v189, v189[1]);
  sub_22391CC34(v190, v191, (uint64_t)v192);
  if (SHIBYTE(v191[2]) < 0)
  {
    operator delete((void *)v191[0]);
    if ((SHIBYTE(v190[2]) & 0x80000000) == 0)
      return kdebug_trace();
LABEL_187:
    operator delete((void *)v190[0]);
    return kdebug_trace();
  }
  if (SHIBYTE(v190[2]) < 0)
    goto LABEL_187;
  return kdebug_trace();
}

