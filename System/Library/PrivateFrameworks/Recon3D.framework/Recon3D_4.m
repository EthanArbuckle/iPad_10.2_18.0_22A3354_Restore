void sub_2232F2F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  char *i;
  uint64_t v23;
  void (*v24)(uint64_t);
  _QWORD *v25;
  _QWORD *v26;

  if (a21)
  {
    for (i = (char *)a21[4]; i != (char *)a21[6]; i -= 16)
    {
      v24 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v23 = *((_QWORD *)i - 1);
      v24(v23);
    }
    free(i);
    v25 = (_QWORD *)a21[3];
    if (v25)
    {
      do
      {
        v26 = (_QWORD *)*v25;
        free(v25);
        v25 = v26;
      }
      while (v26);
    }
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_2232F33D8(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *i;
  uint64_t v12;
  void (*v13)(uint64_t);
  _QWORD *v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  _QWORD *v31;
  char *k;
  uint64_t v33;
  void (*v34)(uint64_t);
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *m;
  uint64_t v45;
  void (*v46)(uint64_t);
  _QWORD *v47;
  _QWORD *v48;
  std::bad_cast *exception;
  std::bad_cast *v50;
  std::bad_cast *v51;
  std::bad_cast *v52;
  std::bad_cast *v53;
  std::bad_cast *v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;

  v55 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  sub_2245543E8(a1[6], &v55);
  v5 = *(char **)a2;
  v4 = *(char **)(a2 + 8);
  v6 = (uint64_t)&v4[-*(_QWORD *)a2] >> 4;
  if (v55 <= v6)
  {
    if (v55 < v6)
    {
      v4 = &v5[16 * v55];
      *(_QWORD *)(a2 + 8) = v4;
    }
  }
  else
  {
    sub_2232C68D0((char **)a2, v55 - v6);
    v5 = *(char **)a2;
    v4 = *(char **)(a2 + 8);
  }
  if (v4 != v5)
  {
    v7 = v4;
    do
    {
      v8 = 0;
      v9 = a1[6];
      do
      {
        sub_2245564B0(v9, (uint64_t)&v57);
        if ((_DWORD)v57 != 2 || v58 >= 0x100)
        {
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v50 = std::bad_cast::bad_cast(exception);
          v50->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v50, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
        }
        v5[v8] = v58;
        v10 = v59;
        v59 = 0;
        if (v10)
        {
          for (i = (char *)v10[4]; i != (char *)v10[6]; i -= 16)
          {
            v13 = (void (*)(uint64_t))*((_QWORD *)i - 2);
            v12 = *((_QWORD *)i - 1);
            v13(v12);
          }
          free(i);
          v14 = (_QWORD *)v10[3];
          if (v14)
          {
            do
            {
              v15 = (_QWORD *)*v14;
              free(v14);
              v14 = v15;
            }
            while (v15);
          }
          free(v10);
        }
        ++v8;
      }
      while (v8 != 16);
      v5 += 16;
    }
    while (v5 != v7);
  }
  v16 = (uint64_t **)(a2 + 24);
  v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 7);
  sub_2245543E8(a1[6], &v57);
  v17 = *(uint64_t **)(a2 + 32);
  v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - *(_QWORD *)(a2 + 24)) >> 7);
  if (v57 > v18)
  {
    sub_2232F3AA4(a2 + 24, v57 - v18);
    v19 = *(uint64_t **)(a2 + 32);
    v20 = *v16;
    v21 = (char *)v19 - (char *)v20;
    if (v19 == v20)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (v57 >= v18)
  {
    v20 = *v16;
    v21 = (char *)v17 - (char *)v20;
    if (v17 == v20)
      goto LABEL_31;
    goto LABEL_29;
  }
  for (j = (uint64_t)&(*v16)[48 * v57]; v17 != (uint64_t *)j; v17 = sub_2232E7BD4(v17 - 48))
    ;
  *(_QWORD *)(a2 + 32) = j;
  v20 = *v16;
  v21 = j - (_QWORD)v20;
  if ((uint64_t *)j != v20)
  {
LABEL_29:
    v23 = 384 * (v21 / 384);
    do
    {
      sub_2232F3C70((uint64_t)&v55, a1, v20);
      v20 += 48;
      v23 -= 384;
    }
    while (v23);
  }
LABEL_31:
  v55 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  sub_2245543E8(a1[6], &v55);
  v25 = *(_QWORD *)(a2 + 48);
  v24 = *(_QWORD *)(a2 + 56);
  v26 = 0xF0F0F0F0F0F0F0F1 * ((v24 - v25) >> 2);
  if (v55 <= v26)
  {
    if (v55 < v26)
    {
      v24 = v25 + 68 * v55;
      *(_QWORD *)(a2 + 56) = v24;
    }
  }
  else
  {
    sub_2232F85F4((_QWORD *)(a2 + 48), v55 - v26);
    v25 = *(_QWORD *)(a2 + 48);
    v24 = *(_QWORD *)(a2 + 56);
  }
  if (v24 != v25)
  {
    v27 = v24;
    while (1)
    {
      v56 = 0;
      sub_224553CF0(a1[6], &v56);
      if (v56)
        break;
      if (*(_BYTE *)(v25 + 64))
        *(_BYTE *)(v25 + 64) = 0;
LABEL_37:
      v25 += 68;
      if (v25 == v27)
        goto LABEL_60;
    }
    if (!*(_BYTE *)(v25 + 64))
    {
      *(_OWORD *)(v25 + 32) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_BYTE *)(v25 + 64) = 1;
    }
    v28 = 0;
    v29 = a1[6];
    while (1)
    {
      sub_2245564B0(v29, (uint64_t)&v57);
      switch((_DWORD)v57)
      {
        case 2:
          *(float *)(v25 + 4 * v28) = (float)v58;
          v31 = v59;
          v59 = 0;
          if (v31)
            goto LABEL_52;
          break;
        case 3:
          *(float *)(v25 + 4 * v28) = (float)(uint64_t)v58;
          v31 = v59;
          v59 = 0;
          if (v31)
            goto LABEL_52;
          break;
        case 4:
          v30 = *(double *)&v58;
          *(float *)(v25 + 4 * v28) = v30;
          v31 = v59;
          v59 = 0;
          if (!v31)
            break;
LABEL_52:
          for (k = (char *)v31[4]; k != (char *)v31[6]; k -= 16)
          {
            v34 = (void (*)(uint64_t))*((_QWORD *)k - 2);
            v33 = *((_QWORD *)k - 1);
            v34(v33);
          }
          free(k);
          v35 = (_QWORD *)v31[3];
          if (v35)
          {
            do
            {
              v36 = (_QWORD *)*v35;
              free(v35);
              v35 = v36;
            }
            while (v36);
          }
          free(v31);
          break;
        default:
          v53 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v53->__vftable = 0;
          v54 = std::bad_cast::bad_cast(v53);
          v54->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v54, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      if (++v28 == 16)
        goto LABEL_37;
    }
  }
LABEL_60:
  v55 = 0xF0F0F0F0F0F0F0F1 * (*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72));
  sub_2245543E8(a1[6], &v55);
  v38 = *(_QWORD *)(a2 + 72);
  v37 = *(_QWORD *)(a2 + 80);
  v39 = 0xF0F0F0F0F0F0F0F1 * (v37 - v38);
  if (v55 <= v39)
  {
    if (v55 < v39)
    {
      v37 = v38 + 17 * v55;
      *(_QWORD *)(a2 + 80) = v37;
    }
  }
  else
  {
    sub_2232F885C((_QWORD *)(a2 + 72), v55 - v39);
    v38 = *(_QWORD *)(a2 + 72);
    v37 = *(_QWORD *)(a2 + 80);
  }
  if (v37 != v38)
  {
    v40 = v37;
    do
    {
      v56 = 0;
      sub_224553CF0(a1[6], &v56);
      if (v56)
      {
        if (!*(_BYTE *)(v38 + 16))
        {
          *(_QWORD *)v38 = 0;
          *(_QWORD *)(v38 + 8) = 0;
          *(_BYTE *)(v38 + 16) = 1;
        }
        v41 = 0;
        v42 = a1[6];
        do
        {
          sub_2245564B0(v42, (uint64_t)&v57);
          if ((_DWORD)v57 != 2 || v58 >= 0x100)
          {
            v51 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v51->__vftable = 0;
            v52 = std::bad_cast::bad_cast(v51);
            v52->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
            __cxa_throw(v52, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
          }
          *(_BYTE *)(v38 + v41) = v58;
          v43 = v59;
          v59 = 0;
          if (v43)
          {
            for (m = (char *)v43[4]; m != (char *)v43[6]; m -= 16)
            {
              v46 = (void (*)(uint64_t))*((_QWORD *)m - 2);
              v45 = *((_QWORD *)m - 1);
              v46(v45);
            }
            free(m);
            v47 = (_QWORD *)v43[3];
            if (v47)
            {
              do
              {
                v48 = (_QWORD *)*v47;
                free(v47);
                v47 = v48;
              }
              while (v48);
            }
            free(v43);
          }
          ++v41;
        }
        while (v41 != 16);
      }
      else if (*(_BYTE *)(v38 + 16))
      {
        *(_BYTE *)(v38 + 16) = 0;
      }
      v38 += 17;
    }
    while (v38 != v40);
  }
}

void sub_2232F3990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  char *i;
  uint64_t v16;
  void (*v17)(uint64_t);
  _QWORD *v18;
  _QWORD *v19;

  if (a14)
  {
    for (i = (char *)a14[4]; i != (char *)a14[6]; i -= 16)
    {
      v17 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v16 = *((_QWORD *)i - 1);
      v17(v16);
    }
    free(i);
    v18 = (_QWORD *)a14[3];
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        free(v18);
        v18 = v19;
      }
      while (v19);
    }
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_2232F3AA4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t *v17;

  v5 = *(uint64_t **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 7) >= a2)
  {
    if (a2)
    {
      v12 = 384 * ((384 * a2 - 384) / 0x180) + 384;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (uint64_t *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(uint64_t **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 7);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAALL)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 7);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x55555555555555)
      v10 = 0xAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAALL)
        sub_223174E94();
      v11 = (char *)operator new(384 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[384 * v7];
    v14 = &v11[384 * v10];
    v15 = 384 * ((384 * a2 - 384) / 0x180) + 384;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_20:
        operator delete(v5);
    }
    else
    {
      do
      {
        v13 -= 384;
        v5 -= 48;
        sub_2232E8C40((uint64_t)v13, (uint64_t)v5);
      }
      while (v5 != v6);
      v5 = *(uint64_t **)a1;
      v17 = *(uint64_t **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      for (*(_QWORD *)(a1 + 16) = v14; v17 != v5; v17 = sub_2232E7BD4(v17 - 48))
        ;
      if (v5)
        goto LABEL_20;
    }
  }
}

void sub_2232F3C70(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 4;
  sub_224554038(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_2231B1308(a2 + 2);
  if (v5 >= 4)
    v6 = 4;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_2232F3D60((uint64_t)&v10, (uint64_t)a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_2232F3E7C(a2, (uint64_t)a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

uint64_t *sub_2232F3D60(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v6[48];
  uint64_t v7[39];
  int v8;
  char v9;
  char v10;

  memset(v7, 0, 24);
  *(uint64_t *)((char *)&v7[3] + 4) = 0;
  memset(&v7[5], 0, 24);
  *(uint64_t *)((char *)&v7[8] + 4) = 0;
  memset(&v7[10], 0, 24);
  *(uint64_t *)((char *)&v7[13] + 4) = 0;
  memset(&v7[15], 0, 24);
  *(uint64_t *)((char *)&v7[18] + 4) = 0;
  memset(&v7[20], 0, 24);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  memset((char *)&v7[23] + 4, 0, 28);
  memset((char *)&v7[27] + 4, 0, 28);
  memset((char *)&v7[31] + 4, 0, 28);
  memset((char *)&v7[35] + 4, 0, 28);
  sub_2232F66B0(a2, (uint64_t)v7, a4);
  sub_2232F5FB8((uint64_t)v6, (uint64_t)v7);
  sub_2232F60FC(a3, (uint64_t)v6);
  sub_2232E7BD4(v6);
  return sub_2232F82A0(v7);
}

void sub_2232F3E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_2232F82A0(&a57);
  _Unwind_Resume(a1);
}

void sub_2232F3E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  sub_2232F82A0(&a57);
  _Unwind_Resume(a1);
}

void sub_2232F3E7C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  float *v6;
  float *v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v105;
  char *i1;
  uint64_t v107;
  void (*v108)(uint64_t);
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v112;
  char *i2;
  uint64_t v114;
  void (*v115)(uint64_t);
  _QWORD *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v124;
  char *i3;
  uint64_t v126;
  void (*v127)(uint64_t);
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v131;
  char *i4;
  uint64_t v133;
  void (*v134)(uint64_t);
  _QWORD *v135;
  _QWORD *v136;
  float *v137;
  float *v138;
  unint64_t v139;
  float *v140;
  uint64_t v141;
  float v142;
  _QWORD *v143;
  char *i6;
  uint64_t v145;
  void (*v146)(uint64_t);
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  float v150;
  char *i5;
  uint64_t v152;
  void (*v153)(uint64_t);
  _QWORD *v154;
  _QWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  unint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  _QWORD *v162;
  char *i7;
  uint64_t v164;
  void (*v165)(uint64_t);
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v169;
  char *i8;
  uint64_t v171;
  void (*v172)(uint64_t);
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v176;
  char *i9;
  uint64_t v178;
  void (*v179)(uint64_t);
  _QWORD *v180;
  _QWORD *v181;
  float *v182;
  float *v183;
  float *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::bad_cast *v189;
  std::bad_cast *v190;
  std::bad_cast *v191;
  std::bad_cast *v192;
  std::bad_cast *v193;
  std::bad_cast *v194;
  std::bad_cast *exception;
  std::bad_cast *v196;
  std::bad_cast *v197;
  std::bad_cast *v198;
  std::bad_cast *v199;
  std::bad_cast *v200;
  std::bad_cast *v201;
  std::bad_cast *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;

  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  sub_2245543E8(a1[6], &v203);
  v7 = *(float **)a2;
  v6 = *(float **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (v203 <= v8)
  {
    if (v203 < v8)
    {
      v6 = &v7[3 * v203];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_2232F52A0((uint64_t *)a2, v203 - v8);
    v7 = *(float **)a2;
    v6 = *(float **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    while (1)
    {
      v10 = a1[6];
      sub_2245564B0(v10, (uint64_t)&v204);
      if ((_DWORD)v204 == 2)
        break;
      if ((_DWORD)v204 == 3)
      {
        *v7 = (float)v205;
        v12 = v206;
        v206 = 0;
        if (!v12)
          goto LABEL_23;
        goto LABEL_17;
      }
      if ((_DWORD)v204 != 4)
        goto LABEL_340;
      v11 = *(double *)&v205;
      *v7 = v11;
      v12 = v206;
      v206 = 0;
      if (v12)
        goto LABEL_17;
LABEL_23:
      sub_2245564B0(v10, (uint64_t)&v204);
      if ((_DWORD)v204 == 2)
      {
        v7[1] = (float)(unint64_t)v205;
        v18 = v206;
        v206 = 0;
        if (!v18)
          goto LABEL_37;
LABEL_31:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_37;
      }
      if ((_DWORD)v204 == 4)
      {
        v19 = *(double *)&v205;
        v7[1] = v19;
        v18 = v206;
        v206 = 0;
        if (!v18)
          goto LABEL_37;
        goto LABEL_31;
      }
      if ((_DWORD)v204 != 3)
        goto LABEL_340;
      v7[1] = (float)v205;
      v18 = v206;
      v206 = 0;
      if (v18)
        goto LABEL_31;
LABEL_37:
      sub_2245564B0(v10, (uint64_t)&v204);
      switch((_DWORD)v204)
      {
        case 2:
          v7[2] = (float)(unint64_t)v205;
          v25 = v206;
          v206 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 4:
          v26 = *(double *)&v205;
          v7[2] = v26;
          v25 = v206;
          v206 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 3:
          v7[2] = (float)v205;
          v25 = v206;
          v206 = 0;
          if (v25)
          {
LABEL_45:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_340:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v196 = std::bad_cast::bad_cast(exception);
          v196->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v196, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v7 += 3;
      if (v7 == v9)
        goto LABEL_51;
    }
    *v7 = (float)(unint64_t)v205;
    v12 = v206;
    v206 = 0;
    if (!v12)
      goto LABEL_23;
LABEL_17:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_23;
  }
LABEL_51:
  LODWORD(v204) = 0;
  sub_224554038(a1[6], &v204);
  *(_DWORD *)(a2 + 32) = v204;
  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  sub_2245543E8(a1[6], &v203);
  v33 = *(float **)(a2 + 40);
  v32 = *(float **)(a2 + 48);
  v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
  if (v203 <= v34)
  {
    if (v203 < v34)
    {
      v32 = &v33[3 * v203];
      *(_QWORD *)(a2 + 48) = v32;
    }
  }
  else
  {
    sub_2232F52A0((uint64_t *)(a2 + 40), v203 - v34);
    v33 = *(float **)(a2 + 40);
    v32 = *(float **)(a2 + 48);
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = a1[6];
      sub_2245564B0(v36, (uint64_t)&v204);
      if ((_DWORD)v204 == 2)
        break;
      if ((_DWORD)v204 == 3)
      {
        *v33 = (float)v205;
        v38 = v206;
        v206 = 0;
        if (!v38)
          goto LABEL_73;
        goto LABEL_67;
      }
      if ((_DWORD)v204 != 4)
        goto LABEL_341;
      v37 = *(double *)&v205;
      *v33 = v37;
      v38 = v206;
      v206 = 0;
      if (v38)
        goto LABEL_67;
LABEL_73:
      sub_2245564B0(v36, (uint64_t)&v204);
      if ((_DWORD)v204 == 2)
      {
        v33[1] = (float)(unint64_t)v205;
        v44 = v206;
        v206 = 0;
        if (!v44)
          goto LABEL_87;
LABEL_81:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_87;
      }
      if ((_DWORD)v204 == 4)
      {
        v45 = *(double *)&v205;
        v33[1] = v45;
        v44 = v206;
        v206 = 0;
        if (!v44)
          goto LABEL_87;
        goto LABEL_81;
      }
      if ((_DWORD)v204 != 3)
        goto LABEL_341;
      v33[1] = (float)v205;
      v44 = v206;
      v206 = 0;
      if (v44)
        goto LABEL_81;
LABEL_87:
      sub_2245564B0(v36, (uint64_t)&v204);
      switch((_DWORD)v204)
      {
        case 2:
          v33[2] = (float)(unint64_t)v205;
          v51 = v206;
          v206 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 4:
          v52 = *(double *)&v205;
          v33[2] = v52;
          v51 = v206;
          v206 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 3:
          v33[2] = (float)v205;
          v51 = v206;
          v206 = 0;
          if (v51)
          {
LABEL_95:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_341:
          v197 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v197->__vftable = 0;
          v198 = std::bad_cast::bad_cast(v197);
          v198->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v198, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_101;
    }
    *v33 = (float)(unint64_t)v205;
    v38 = v206;
    v206 = 0;
    if (!v38)
      goto LABEL_73;
LABEL_67:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_73;
  }
LABEL_101:
  LODWORD(v204) = 0;
  sub_224554038(a1[6], &v204);
  *(_DWORD *)(a2 + 72) = v204;
  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  sub_2245543E8(a1[6], &v203);
  v59 = *(float **)(a2 + 80);
  v58 = *(float **)(a2 + 88);
  v60 = 0xAAAAAAAAAAAAAAABLL * (v58 - v59);
  if (v203 <= v60)
  {
    if (v203 < v60)
    {
      v58 = &v59[3 * v203];
      *(_QWORD *)(a2 + 88) = v58;
    }
  }
  else
  {
    sub_2232F52A0((uint64_t *)(a2 + 80), v203 - v60);
    v59 = *(float **)(a2 + 80);
    v58 = *(float **)(a2 + 88);
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = a1[6];
      sub_2245564B0(v62, (uint64_t)&v204);
      if ((_DWORD)v204 == 2)
        break;
      if ((_DWORD)v204 == 3)
      {
        *v59 = (float)v205;
        v64 = v206;
        v206 = 0;
        if (!v64)
          goto LABEL_123;
        goto LABEL_117;
      }
      if ((_DWORD)v204 != 4)
        goto LABEL_342;
      v63 = *(double *)&v205;
      *v59 = v63;
      v64 = v206;
      v206 = 0;
      if (v64)
        goto LABEL_117;
LABEL_123:
      sub_2245564B0(v62, (uint64_t)&v204);
      if ((_DWORD)v204 == 2)
      {
        v59[1] = (float)(unint64_t)v205;
        v70 = v206;
        v206 = 0;
        if (!v70)
          goto LABEL_137;
LABEL_131:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_137;
      }
      if ((_DWORD)v204 == 4)
      {
        v71 = *(double *)&v205;
        v59[1] = v71;
        v70 = v206;
        v206 = 0;
        if (!v70)
          goto LABEL_137;
        goto LABEL_131;
      }
      if ((_DWORD)v204 != 3)
        goto LABEL_342;
      v59[1] = (float)v205;
      v70 = v206;
      v206 = 0;
      if (v70)
        goto LABEL_131;
LABEL_137:
      sub_2245564B0(v62, (uint64_t)&v204);
      switch((_DWORD)v204)
      {
        case 2:
          v59[2] = (float)(unint64_t)v205;
          v77 = v206;
          v206 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 4:
          v78 = *(double *)&v205;
          v59[2] = v78;
          v77 = v206;
          v206 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 3:
          v59[2] = (float)v205;
          v77 = v206;
          v206 = 0;
          if (v77)
          {
LABEL_145:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_342:
          v199 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v199->__vftable = 0;
          v200 = std::bad_cast::bad_cast(v199);
          v200->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v200, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_151;
    }
    *v59 = (float)(unint64_t)v205;
    v64 = v206;
    v206 = 0;
    if (!v64)
      goto LABEL_123;
LABEL_117:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_123;
  }
LABEL_151:
  LODWORD(v204) = 0;
  sub_224554038(a1[6], &v204);
  *(_DWORD *)(a2 + 112) = v204;
  v204 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  sub_2245543E8(a1[6], &v204);
  v85 = *(_BYTE **)(a2 + 120);
  v84 = *(_BYTE **)(a2 + 128);
  if (v204 <= v84 - v85)
  {
    if (v204 < v84 - v85)
    {
      v84 = &v85[v204];
      *(_QWORD *)(a2 + 128) = &v85[v204];
    }
  }
  else
  {
    sub_22317F2E8(a2 + 120, v204 - (v84 - v85));
    v85 = *(_BYTE **)(a2 + 120);
    v84 = *(_BYTE **)(a2 + 128);
  }
  v86 = a1[6];
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_224553CF0(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = a1[6];
  }
  LODWORD(v204) = 0;
  sub_224554038(v86, &v204);
  *(_DWORD *)(a2 + 152) = v204;
  v204 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  sub_2245543E8(a1[6], &v204);
  v89 = *(_BYTE **)(a2 + 160);
  v88 = *(_BYTE **)(a2 + 168);
  if (v204 <= v88 - v89)
  {
    if (v204 < v88 - v89)
    {
      v88 = &v89[v204];
      *(_QWORD *)(a2 + 168) = &v89[v204];
    }
  }
  else
  {
    sub_22317F2E8(a2 + 160, v204 - (v88 - v89));
    v89 = *(_BYTE **)(a2 + 160);
    v88 = *(_BYTE **)(a2 + 168);
  }
  v90 = a1[6];
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_224553CF0(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = a1[6];
  }
  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  sub_2245543E8(v90, &v203);
  v93 = *(_DWORD **)(a2 + 192);
  v92 = *(_DWORD **)(a2 + 200);
  v94 = 0xAAAAAAAAAAAAAAABLL * (v92 - v93);
  if (v203 <= v94)
  {
    if (v203 < v94)
    {
      v92 = &v93[3 * v203];
      *(_QWORD *)(a2 + 200) = v92;
    }
  }
  else
  {
    sub_2232F5570((uint64_t *)(a2 + 192), v203 - v94);
    v93 = *(_DWORD **)(a2 + 192);
    v92 = *(_DWORD **)(a2 + 200);
  }
  if (v92 != v93)
  {
    v95 = v92;
    do
    {
      v96 = a1[6];
      sub_2245564B0(v96, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
        goto LABEL_337;
      *v93 = v205;
      v98 = v206;
      v206 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_2245564B0(v96, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
        goto LABEL_337;
      v93[1] = v205;
      v105 = v206;
      v206 = 0;
      if (v105)
      {
        for (i1 = (char *)v105[4]; i1 != (char *)v105[6]; i1 -= 16)
        {
          v108 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v107 = *((_QWORD *)i1 - 1);
          v108(v107);
        }
        free(i1);
        v109 = (_QWORD *)v105[3];
        if (v109)
        {
          do
          {
            v110 = (_QWORD *)*v109;
            free(v109);
            v109 = v110;
          }
          while (v110);
        }
        free(v105);
      }
      sub_2245564B0(v96, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
      {
LABEL_337:
        v189 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v189->__vftable = 0;
        v190 = std::bad_cast::bad_cast(v189);
        v190->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
        __cxa_throw(v190, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = v205;
      v112 = v206;
      v206 = 0;
      if (v112)
      {
        for (i2 = (char *)v112[4]; i2 != (char *)v112[6]; i2 -= 16)
        {
          v115 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v114 = *((_QWORD *)i2 - 1);
          v115(v114);
        }
        free(i2);
        v116 = (_QWORD *)v112[3];
        if (v116)
        {
          do
          {
            v117 = (_QWORD *)*v116;
            free(v116);
            v116 = v117;
          }
          while (v117);
        }
        free(v112);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v203 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  sub_2245543E8(a1[6], &v203);
  v119 = *(char **)(a2 + 224);
  v118 = *(char **)(a2 + 232);
  v120 = (v118 - v119) >> 3;
  if (v203 <= v120)
  {
    if (v203 < v120)
    {
      v118 = &v119[8 * v203];
      *(_QWORD *)(a2 + 232) = v118;
    }
  }
  else
  {
    sub_2232F5840(a2 + 224, v203 - v120);
    v119 = *(char **)(a2 + 224);
    v118 = *(char **)(a2 + 232);
  }
  if (v118 != v119)
  {
    v121 = v118;
    do
    {
      v122 = a1[6];
      sub_2245564B0(v122, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
        goto LABEL_339;
      *(_DWORD *)v119 = v205;
      v124 = v206;
      v206 = 0;
      if (v124)
      {
        for (i3 = (char *)v124[4]; i3 != (char *)v124[6]; i3 -= 16)
        {
          v127 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v126 = *((_QWORD *)i3 - 1);
          v127(v126);
        }
        free(i3);
        v128 = (_QWORD *)v124[3];
        if (v128)
        {
          do
          {
            v129 = (_QWORD *)*v128;
            free(v128);
            v128 = v129;
          }
          while (v129);
        }
        free(v124);
      }
      sub_2245564B0(v122, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
      {
LABEL_339:
        v193 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v193->__vftable = 0;
        v194 = std::bad_cast::bad_cast(v193);
        v194->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
        __cxa_throw(v194, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      *((_DWORD *)v119 + 1) = v205;
      v131 = v206;
      v206 = 0;
      if (v131)
      {
        for (i4 = (char *)v131[4]; i4 != (char *)v131[6]; i4 -= 16)
        {
          v134 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v133 = *((_QWORD *)i4 - 1);
          v134(v133);
        }
        free(i4);
        v135 = (_QWORD *)v131[3];
        if (v135)
        {
          do
          {
            v136 = (_QWORD *)*v135;
            free(v135);
            v135 = v136;
          }
          while (v136);
        }
        free(v131);
      }
      v119 += 8;
    }
    while (v119 != v121);
  }
  v203 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  sub_2245543E8(a1[6], &v203);
  v138 = *(float **)(a2 + 256);
  v137 = *(float **)(a2 + 264);
  v139 = ((char *)v137 - (char *)v138) >> 3;
  if (v203 <= v139)
  {
    if (v203 < v139)
    {
      v137 = &v138[2 * v203];
      *(_QWORD *)(a2 + 264) = v137;
    }
  }
  else
  {
    sub_2232F5AE0(a2 + 256, v203 - v139);
    v138 = *(float **)(a2 + 256);
    v137 = *(float **)(a2 + 264);
  }
  if (v137 != v138)
  {
    v140 = v137;
    while (1)
    {
      v141 = a1[6];
      sub_2245564B0(v141, (uint64_t)&v204);
      if ((_DWORD)v204 == 2)
        break;
      if ((_DWORD)v204 == 3)
      {
        *v138 = (float)v205;
        v143 = v206;
        v206 = 0;
        if (!v143)
          goto LABEL_263;
        goto LABEL_257;
      }
      if ((_DWORD)v204 != 4)
        goto LABEL_343;
      v142 = *(double *)&v205;
      *v138 = v142;
      v143 = v206;
      v206 = 0;
      if (v143)
        goto LABEL_257;
LABEL_263:
      sub_2245564B0(v141, (uint64_t)&v204);
      switch((_DWORD)v204)
      {
        case 2:
          v138[1] = (float)(unint64_t)v205;
          v149 = v206;
          v206 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 4:
          v150 = *(double *)&v205;
          v138[1] = v150;
          v149 = v206;
          v206 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 3:
          v138[1] = (float)v205;
          v149 = v206;
          v206 = 0;
          if (v149)
          {
LABEL_271:
            for (i5 = (char *)v149[4]; i5 != (char *)v149[6]; i5 -= 16)
            {
              v153 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v152 = *((_QWORD *)i5 - 1);
              v153(v152);
            }
            free(i5);
            v154 = (_QWORD *)v149[3];
            if (v154)
            {
              do
              {
                v155 = (_QWORD *)*v154;
                free(v154);
                v154 = v155;
              }
              while (v155);
            }
            free(v149);
          }
          break;
        default:
LABEL_343:
          v201 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v201->__vftable = 0;
          v202 = std::bad_cast::bad_cast(v201);
          v202->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v202, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v138 += 2;
      if (v138 == v140)
        goto LABEL_277;
    }
    *v138 = (float)(unint64_t)v205;
    v143 = v206;
    v206 = 0;
    if (!v143)
      goto LABEL_263;
LABEL_257:
    for (i6 = (char *)v143[4]; i6 != (char *)v143[6]; i6 -= 16)
    {
      v146 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v145 = *((_QWORD *)i6 - 1);
      v146(v145);
    }
    free(i6);
    v147 = (_QWORD *)v143[3];
    if (v147)
    {
      do
      {
        v148 = (_QWORD *)*v147;
        free(v147);
        v147 = v148;
      }
      while (v148);
    }
    free(v143);
    goto LABEL_263;
  }
LABEL_277:
  v203 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  sub_2245543E8(a1[6], &v203);
  v157 = *(_DWORD **)(a2 + 288);
  v156 = *(_DWORD **)(a2 + 296);
  v158 = 0xAAAAAAAAAAAAAAABLL * (v156 - v157);
  if (v203 <= v158)
  {
    if (v203 < v158)
    {
      v156 = &v157[3 * v203];
      *(_QWORD *)(a2 + 296) = v156;
    }
  }
  else
  {
    sub_2232F5570((uint64_t *)(a2 + 288), v203 - v158);
    v157 = *(_DWORD **)(a2 + 288);
    v156 = *(_DWORD **)(a2 + 296);
  }
  if (v156 != v157)
  {
    v159 = v156;
    do
    {
      v160 = a1[6];
      sub_2245564B0(v160, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
        goto LABEL_338;
      *v157 = v205;
      v162 = v206;
      v206 = 0;
      if (v162)
      {
        for (i7 = (char *)v162[4]; i7 != (char *)v162[6]; i7 -= 16)
        {
          v165 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v164 = *((_QWORD *)i7 - 1);
          v165(v164);
        }
        free(i7);
        v166 = (_QWORD *)v162[3];
        if (v166)
        {
          do
          {
            v167 = (_QWORD *)*v166;
            free(v166);
            v166 = v167;
          }
          while (v167);
        }
        free(v162);
      }
      sub_2245564B0(v160, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
        goto LABEL_338;
      v157[1] = v205;
      v169 = v206;
      v206 = 0;
      if (v169)
      {
        for (i8 = (char *)v169[4]; i8 != (char *)v169[6]; i8 -= 16)
        {
          v172 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v171 = *((_QWORD *)i8 - 1);
          v172(v171);
        }
        free(i8);
        v173 = (_QWORD *)v169[3];
        if (v173)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            free(v173);
            v173 = v174;
          }
          while (v174);
        }
        free(v169);
      }
      sub_2245564B0(v160, (uint64_t)&v204);
      if ((_DWORD)v204 != 2 || HIDWORD(v205) != 0)
      {
LABEL_338:
        v191 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v191->__vftable = 0;
        v192 = std::bad_cast::bad_cast(v191);
        v192->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
        __cxa_throw(v192, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v157[2] = v205;
      v176 = v206;
      v206 = 0;
      if (v176)
      {
        for (i9 = (char *)v176[4]; i9 != (char *)v176[6]; i9 -= 16)
        {
          v179 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v178 = *((_QWORD *)i9 - 1);
          v179(v178);
        }
        free(i9);
        v180 = (_QWORD *)v176[3];
        if (v180)
        {
          do
          {
            v181 = (_QWORD *)*v180;
            free(v180);
            v180 = v181;
          }
          while (v181);
        }
        free(v176);
      }
      v157 += 3;
    }
    while (v157 != v159);
  }
  if (a3 >= 2)
  {
    LOBYTE(v203) = 0;
    sub_224553CF0(a1[6], &v203);
    if ((_BYTE)v203)
    {
      v182 = (float *)(a2 + 320);
      if (!*(_BYTE *)(a2 + 344))
      {
        *(_QWORD *)v182 = 0;
        *(_QWORD *)(a2 + 328) = 0;
        *(_QWORD *)(a2 + 336) = 0;
        *(_BYTE *)(a2 + 344) = 1;
      }
      sub_2232F5D80((uint64_t)&v204, a1, v182);
    }
    else if (*(_BYTE *)(a2 + 344))
    {
      *(_BYTE *)(a2 + 344) = 0;
    }
    if (a3 >= 4)
    {
      LODWORD(v204) = 0;
      sub_224554038(a1[6], &v204);
      *(_DWORD *)(a2 + 348) = v204;
      v204 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      sub_2245543E8(a1[6], &v204);
      v184 = *(float **)(a2 + 352);
      v183 = *(float **)(a2 + 360);
      v185 = v183 - v184;
      if (v204 <= v185)
      {
        if (v204 < v185)
        {
          v183 = &v184[v204];
          *(_QWORD *)(a2 + 360) = v183;
        }
      }
      else
      {
        sub_22317F4CC(a2 + 352, v204 - v185);
        v184 = *(float **)(a2 + 352);
        v183 = *(float **)(a2 + 360);
      }
      v186 = (char *)v183 - (char *)v184;
      if (v186)
      {
        v187 = a1[6];
        v188 = 4 * (v186 >> 2);
        do
        {
          sub_2245544CC(v187, v184++);
          v188 -= 4;
        }
        while (v188);
      }
    }
  }
}

void sub_2232F51C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F51DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F51F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F5204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F5218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F522C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F5240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F52A0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_22316E078();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24EC2B1D0[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_22316DD70();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24EC2A6A8[v23])(&v26, a1 + 3);
    }
  }
}

void *sub_2232F54A8(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_2232F54D8(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_2232F5570(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  int v25;
  _QWORD *v26;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555)
      sub_22316E078();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xAAAAAAAAAAAAAAALL)
      v9 = 0x1555555555555555;
    else
      v9 = v7;
    if (v9)
    {
      LODWORD(v26) = v9;
      v10 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v10 == -1)
        sub_22316DD70();
      v24 = &v26;
      v11 = ((uint64_t (*)(_QWORD ***, uint64_t *))off_24EC2B1E0[v10])(&v24, a1 + 3);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    v14 = (_DWORD *)(v11 + 12 * v6);
    v15 = v11 + 12 * v12;
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = (char *)v14 + v16;
    v19 = *a1;
    v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_QWORD *)(v18 - 12);
        v18 -= 12;
        v21 = *(_DWORD *)(v18 + 8);
        *(_QWORD *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      v24 = (_QWORD **)v18;
      v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      v23 = *((unsigned int *)a1 + 7);
      if ((_DWORD)v23 == -1)
        sub_22316DD70();
      v26 = &v24;
      ((void (*)(_QWORD **, uint64_t *))off_24EC2A668[v23])(&v26, a1 + 3);
    }
  }
}

void *sub_2232F5778(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_2232F57A8(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_2232F5840(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_22316E078();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_22316DD70();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC2B1F0[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_22316DD70();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24EC2A688[v32])(&v35, a1 + 24);
    }
  }
}

void *sub_2232F5A38(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_2232F5A64(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_2232F5AE0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  _QWORD **v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  int v34;
  _QWORD *v35;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = v5 - *(_QWORD *)a1;
    v7 = v6 >> 3;
    v8 = (v6 >> 3) + a2;
    if (v8 >> 61)
      sub_22316E078();
    v9 = v4 - *(_QWORD *)a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= v8)
      v10 = (v6 >> 3) + a2;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12)
    {
      LODWORD(v35) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_22316DD70();
      v33 = &v35;
      v15 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24EC2B200[v13])(&v33, a1 + 24);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 8 * v7);
    v17 = 8 * a2;
    v18 = v15 + 8 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    v20 = *(_QWORD ***)a1;
    v21 = *(_QWORD ***)(a1 + 8);
    if (v21 != *(_QWORD ***)a1)
    {
      v22 = (unint64_t)v21 - *(_QWORD *)a1 - 8;
      if (v22 < 0x58)
        goto LABEL_31;
      if ((unint64_t)v21 - v15 - v6 < 0x20)
        goto LABEL_31;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      v27 = (__int128 *)(v21 - 2);
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          v30 = (uint64_t)*--v21;
          *((_QWORD *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      v21 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v19;
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    if (v21)
    {
      v33 = v21;
      v34 = (unint64_t)(v31 - (_QWORD)v21) >> 3;
      v32 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v32 == -1)
        sub_22316DD70();
      v35 = &v33;
      ((void (*)(_QWORD **, uint64_t))off_24EC2A678[v32])(&v35, a1 + 24);
    }
  }
}

void *sub_2232F5CD8(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_2232F5D04(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

__n64 sub_2232F5D80(uint64_t a1, _QWORD *a2, float *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n64 result;
  unsigned int v10;

  v10 = 2;
  sub_224554038(a2[6], &v10);
  if (v10 <= 1)
    return sub_2232F5E8C((uint64_t)a2, a3, v10);
  sub_2231B1308(a2 + 2);
  v5 = a2[6];
  sub_2245544CC(v5, a3);
  sub_2245544CC(v5, a3 + 1);
  sub_2245544CC(v5, a3 + 2);
  v6 = a2[6];
  sub_2245544CC(v6, a3 + 3);
  sub_2245544CC(v6, a3 + 4);
  sub_2245544CC(v6, a3 + 5);
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
  return result;
}

__n64 sub_2232F5E8C(uint64_t a1, float *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  __n64 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int32x2_t v11;
  _OWORD v12[2];

  if (a3 < 2)
  {
    memset(v12, 0, 24);
    v8 = *(_QWORD *)(a1 + 48);
    sub_2245544CC(v8, (float *)v12);
    sub_2245544CC(v8, (float *)v12 + 1);
    sub_2245544CC(v8, (float *)v12 + 2);
    v9 = *(_QWORD *)(a1 + 48);
    sub_2245544CC(v9, (float *)((unint64_t)v12 | 0xC));
    sub_2245544CC(v9, (float *)&v12[1]);
    sub_2245544CC(v9, (float *)&v12[1] + 1);
    v10 = v12[0];
    v11 = *(int32x2_t *)((char *)v12 + 12);
    HIDWORD(v10) = HIDWORD(v12[0]);
    *(_OWORD *)a2 = v10;
    result.n64_u32[0] = vdup_lane_s32(v11, 1).u32[0];
    result.n64_u32[1] = DWORD1(v12[1]);
    *((__n64 *)a2 + 2) = result;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    sub_2245544CC(v5, a2);
    sub_2245544CC(v5, a2 + 1);
    sub_2245544CC(v5, a2 + 2);
    v6 = *(_QWORD *)(a1 + 48);
    sub_2245544CC(v6, a2 + 3);
    sub_2245544CC(v6, a2 + 4);
    sub_2245544CC(v6, a2 + 5);
  }
  return result;
}

uint64_t sub_2232F5FB8(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;

  LOBYTE(v11) = 0;
  v13 = 0;
  if (*(_BYTE *)(a2 + 344))
  {
    *(_QWORD *)&v3 = *(_QWORD *)(a2 + 320);
    DWORD2(v3) = *(_DWORD *)(a2 + 328);
    HIDWORD(v3) = *(_QWORD *)(a2 + 332);
    LODWORD(v4) = vdup_lane_s32(*(int32x2_t *)(a2 + 332), 1).u32[0];
    v11 = v3;
    HIDWORD(v4) = *(_DWORD *)(a2 + 340);
    v12 = v4;
    v13 = 1;
  }
  v10 = 0;
  HIDWORD(v9) = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_2232F7A90(a1, a2, (_DWORD *)(a2 + 32), a2 + 40, (_DWORD *)(a2 + 72), a2 + 80, (_DWORD *)(a2 + 112), a2 + 120, (_DWORD *)(a2 + 152), a2 + 160, a2 + 192, a2 + 224, a2 + 256, a2 + 288, &v11, &v10, (uint64_t)&v6);
  if (v6)
  {
    v7 = v6;
    v14 = v6;
    v15 = (unint64_t)(v8 - v6) >> 2;
    if (HIDWORD(v9) == -1)
      sub_22316DD70();
    v16 = &v14;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A658[HIDWORD(v9)])(&v16, &v9);
  }
  return a1;
}

void sub_2232F60E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_2232E8198((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2232F60FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t *v38;

  v4 = *a1;
  if (*a1)
  {
    a1[1] = v4;
    v5 = -1431655765 * ((unint64_t)(a1[2] - v4) >> 2);
    v36 = v4;
    v37 = v5;
    v6 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v6 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v6])(&v38, a1 + 3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = a1[5];
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  if (v7)
  {
    a1[6] = v7;
    v8 = -1431655765 * ((unint64_t)(a1[7] - v7) >> 2);
    v36 = v7;
    v37 = v8;
    v9 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v9 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v9])(&v38, a1 + 8);
    a1[5] = 0;
    a1[6] = 0;
    a1[7] = 0;
  }
  a1[8] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v10 = a1[10];
  *((_DWORD *)a1 + 18) = *(_DWORD *)(a2 + 72);
  if (v10)
  {
    a1[11] = v10;
    v11 = -1431655765 * ((unint64_t)(a1[12] - v10) >> 2);
    v36 = v10;
    v37 = v11;
    v12 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v12 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v12])(&v38, a1 + 13);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  a1[13] = *(_QWORD *)(a2 + 104);
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v13 = a1[15];
  *((_DWORD *)a1 + 28) = *(_DWORD *)(a2 + 112);
  if (v13)
  {
    a1[16] = v13;
    v14 = *((_DWORD *)a1 + 34) - v13;
    v36 = v13;
    v37 = v14;
    v15 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v15 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A698[v15])(&v38, a1 + 18);
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
  }
  a1[18] = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v16 = a1[20];
  *((_DWORD *)a1 + 38) = *(_DWORD *)(a2 + 152);
  if (v16)
  {
    a1[21] = v16;
    v17 = *((_DWORD *)a1 + 44) - v16;
    v36 = v16;
    v37 = v17;
    v18 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v18 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A698[v18])(&v38, a1 + 23);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  a1[23] = *(_QWORD *)(a2 + 184);
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v19 = a1[24];
  if (v19)
  {
    a1[25] = v19;
    v20 = -1431655765 * ((unint64_t)(a1[26] - v19) >> 2);
    v36 = v19;
    v37 = v20;
    v21 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v21 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A668[v21])(&v38, a1 + 27);
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
  a1[27] = *(_QWORD *)(a2 + 216);
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v22 = a1[28];
  if (v22)
  {
    a1[29] = v22;
    v23 = (unint64_t)(a1[30] - v22) >> 3;
    v36 = v22;
    v37 = v23;
    v24 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v24 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A688[v24])(&v38, a1 + 31);
    a1[28] = 0;
    a1[29] = 0;
    a1[30] = 0;
  }
  a1[31] = *(_QWORD *)(a2 + 248);
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  a1[30] = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  v25 = a1[32];
  if (v25)
  {
    a1[33] = v25;
    v26 = (unint64_t)(a1[34] - v25) >> 3;
    v36 = v25;
    v37 = v26;
    v27 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v27 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A678[v27])(&v38, a1 + 35);
    a1[32] = 0;
    a1[33] = 0;
    a1[34] = 0;
  }
  a1[35] = *(_QWORD *)(a2 + 280);
  *((_OWORD *)a1 + 16) = *(_OWORD *)(a2 + 256);
  a1[34] = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  v28 = a1[36];
  if (v28)
  {
    a1[37] = v28;
    v29 = -1431655765 * ((unint64_t)(a1[38] - v28) >> 2);
    v36 = v28;
    v37 = v29;
    v30 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v30 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A668[v30])(&v38, a1 + 39);
    a1[36] = 0;
    a1[37] = 0;
    a1[38] = 0;
  }
  a1[39] = *(_QWORD *)(a2 + 312);
  *((_OWORD *)a1 + 18) = *(_OWORD *)(a2 + 288);
  a1[38] = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  v31 = *(_OWORD *)(a2 + 336);
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  *((_OWORD *)a1 + 21) = v31;
  v32 = a1[44];
  if (v32)
  {
    a1[45] = v32;
    v33 = (unint64_t)(a1[46] - v32) >> 2;
    v36 = v32;
    v37 = v33;
    v34 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v34 == -1)
      sub_22316DD70();
    v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A658[v34])(&v38, a1 + 47);
    a1[44] = 0;
    a1[45] = 0;
    a1[46] = 0;
  }
  a1[47] = *(_QWORD *)(a2 + 376);
  *((_OWORD *)a1 + 22) = *(_OWORD *)(a2 + 352);
  a1[46] = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  return a1;
}

void sub_2232F66B0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  float *v6;
  float *v7;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  char *k;
  uint64_t v14;
  void (*v15)(uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  float v19;
  char *i;
  uint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  char *j;
  uint64_t v28;
  void (*v29)(uint64_t);
  _QWORD *v30;
  _QWORD *v31;
  float *v32;
  float *v33;
  unint64_t v34;
  float *v35;
  uint64_t v36;
  float v37;
  _QWORD *v38;
  char *ii;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  float v45;
  char *m;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  float v52;
  char *n;
  uint64_t v54;
  void (*v55)(uint64_t);
  _QWORD *v56;
  _QWORD *v57;
  float *v58;
  float *v59;
  unint64_t v60;
  float *v61;
  uint64_t v62;
  float v63;
  _QWORD *v64;
  char *mm;
  uint64_t v66;
  void (*v67)(uint64_t);
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  float v71;
  char *jj;
  uint64_t v73;
  void (*v74)(uint64_t);
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  float v78;
  char *kk;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  unint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _QWORD *v98;
  char *nn;
  uint64_t v100;
  void (*v101)(uint64_t);
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v105;
  char *i1;
  uint64_t v107;
  void (*v108)(uint64_t);
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v112;
  char *i2;
  uint64_t v114;
  void (*v115)(uint64_t);
  _QWORD *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v124;
  char *i3;
  uint64_t v126;
  void (*v127)(uint64_t);
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v131;
  char *i4;
  uint64_t v133;
  void (*v134)(uint64_t);
  _QWORD *v135;
  _QWORD *v136;
  float *v137;
  float *v138;
  unint64_t v139;
  float *v140;
  uint64_t v141;
  float v142;
  _QWORD *v143;
  char *i6;
  uint64_t v145;
  void (*v146)(uint64_t);
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  float v150;
  char *i5;
  uint64_t v152;
  void (*v153)(uint64_t);
  _QWORD *v154;
  _QWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  unint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  _QWORD *v162;
  char *i7;
  uint64_t v164;
  void (*v165)(uint64_t);
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v169;
  char *i8;
  uint64_t v171;
  void (*v172)(uint64_t);
  _QWORD *v173;
  _QWORD *v174;
  _QWORD *v176;
  char *i9;
  uint64_t v178;
  void (*v179)(uint64_t);
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  std::bad_cast *v184;
  std::bad_cast *v185;
  std::bad_cast *v186;
  std::bad_cast *v187;
  std::bad_cast *v188;
  std::bad_cast *v189;
  std::bad_cast *exception;
  std::bad_cast *v191;
  std::bad_cast *v192;
  std::bad_cast *v193;
  std::bad_cast *v194;
  std::bad_cast *v195;
  std::bad_cast *v196;
  std::bad_cast *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;

  v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v198);
  v7 = *(float **)a2;
  v6 = *(float **)(a2 + 8);
  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a2) >> 2);
  if (v198 <= v8)
  {
    if (v198 < v8)
    {
      v6 = &v7[3 * v198];
      *(_QWORD *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_2232F52A0((uint64_t *)a2, v198 - v8);
    v7 = *(float **)a2;
    v6 = *(float **)(a2 + 8);
  }
  if (v6 != v7)
  {
    v9 = v6;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v10, (uint64_t)&v199);
      if ((_DWORD)v199 == 2)
        break;
      if ((_DWORD)v199 == 3)
      {
        *v7 = (float)v200;
        v12 = v201;
        v201 = 0;
        if (!v12)
          goto LABEL_23;
        goto LABEL_17;
      }
      if ((_DWORD)v199 != 4)
        goto LABEL_332;
      v11 = *(double *)&v200;
      *v7 = v11;
      v12 = v201;
      v201 = 0;
      if (v12)
        goto LABEL_17;
LABEL_23:
      sub_2245564B0(v10, (uint64_t)&v199);
      if ((_DWORD)v199 == 2)
      {
        v7[1] = (float)(unint64_t)v200;
        v18 = v201;
        v201 = 0;
        if (!v18)
          goto LABEL_37;
LABEL_31:
        for (i = (char *)v18[4]; i != (char *)v18[6]; i -= 16)
        {
          v22 = (void (*)(uint64_t))*((_QWORD *)i - 2);
          v21 = *((_QWORD *)i - 1);
          v22(v21);
        }
        free(i);
        v23 = (_QWORD *)v18[3];
        if (v23)
        {
          do
          {
            v24 = (_QWORD *)*v23;
            free(v23);
            v23 = v24;
          }
          while (v24);
        }
        free(v18);
        goto LABEL_37;
      }
      if ((_DWORD)v199 == 4)
      {
        v19 = *(double *)&v200;
        v7[1] = v19;
        v18 = v201;
        v201 = 0;
        if (!v18)
          goto LABEL_37;
        goto LABEL_31;
      }
      if ((_DWORD)v199 != 3)
        goto LABEL_332;
      v7[1] = (float)v200;
      v18 = v201;
      v201 = 0;
      if (v18)
        goto LABEL_31;
LABEL_37:
      sub_2245564B0(v10, (uint64_t)&v199);
      switch((_DWORD)v199)
      {
        case 2:
          v7[2] = (float)(unint64_t)v200;
          v25 = v201;
          v201 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 4:
          v26 = *(double *)&v200;
          v7[2] = v26;
          v25 = v201;
          v201 = 0;
          if (v25)
            goto LABEL_45;
          break;
        case 3:
          v7[2] = (float)v200;
          v25 = v201;
          v201 = 0;
          if (v25)
          {
LABEL_45:
            for (j = (char *)v25[4]; j != (char *)v25[6]; j -= 16)
            {
              v29 = (void (*)(uint64_t))*((_QWORD *)j - 2);
              v28 = *((_QWORD *)j - 1);
              v29(v28);
            }
            free(j);
            v30 = (_QWORD *)v25[3];
            if (v30)
            {
              do
              {
                v31 = (_QWORD *)*v30;
                free(v30);
                v30 = v31;
              }
              while (v31);
            }
            free(v25);
          }
          break;
        default:
LABEL_332:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v191 = std::bad_cast::bad_cast(exception);
          v191->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v191, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v7 += 3;
      if (v7 == v9)
        goto LABEL_51;
    }
    *v7 = (float)(unint64_t)v200;
    v12 = v201;
    v201 = 0;
    if (!v12)
      goto LABEL_23;
LABEL_17:
    for (k = (char *)v12[4]; k != (char *)v12[6]; k -= 16)
    {
      v15 = (void (*)(uint64_t))*((_QWORD *)k - 2);
      v14 = *((_QWORD *)k - 1);
      v15(v14);
    }
    free(k);
    v16 = (_QWORD *)v12[3];
    if (v16)
    {
      do
      {
        v17 = (_QWORD *)*v16;
        free(v16);
        v16 = v17;
      }
      while (v17);
    }
    free(v12);
    goto LABEL_23;
  }
LABEL_51:
  LODWORD(v199) = 0;
  sub_224554038(*(_QWORD *)(a1 + 48), &v199);
  *(_DWORD *)(a2 + 32) = v199;
  v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v198);
  v33 = *(float **)(a2 + 40);
  v32 = *(float **)(a2 + 48);
  v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
  if (v198 <= v34)
  {
    if (v198 < v34)
    {
      v32 = &v33[3 * v198];
      *(_QWORD *)(a2 + 48) = v32;
    }
  }
  else
  {
    sub_2232F52A0((uint64_t *)(a2 + 40), v198 - v34);
    v33 = *(float **)(a2 + 40);
    v32 = *(float **)(a2 + 48);
  }
  if (v32 != v33)
  {
    v35 = v32;
    while (1)
    {
      v36 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v36, (uint64_t)&v199);
      if ((_DWORD)v199 == 2)
        break;
      if ((_DWORD)v199 == 3)
      {
        *v33 = (float)v200;
        v38 = v201;
        v201 = 0;
        if (!v38)
          goto LABEL_73;
        goto LABEL_67;
      }
      if ((_DWORD)v199 != 4)
        goto LABEL_333;
      v37 = *(double *)&v200;
      *v33 = v37;
      v38 = v201;
      v201 = 0;
      if (v38)
        goto LABEL_67;
LABEL_73:
      sub_2245564B0(v36, (uint64_t)&v199);
      if ((_DWORD)v199 == 2)
      {
        v33[1] = (float)(unint64_t)v200;
        v44 = v201;
        v201 = 0;
        if (!v44)
          goto LABEL_87;
LABEL_81:
        for (m = (char *)v44[4]; m != (char *)v44[6]; m -= 16)
        {
          v48 = (void (*)(uint64_t))*((_QWORD *)m - 2);
          v47 = *((_QWORD *)m - 1);
          v48(v47);
        }
        free(m);
        v49 = (_QWORD *)v44[3];
        if (v49)
        {
          do
          {
            v50 = (_QWORD *)*v49;
            free(v49);
            v49 = v50;
          }
          while (v50);
        }
        free(v44);
        goto LABEL_87;
      }
      if ((_DWORD)v199 == 4)
      {
        v45 = *(double *)&v200;
        v33[1] = v45;
        v44 = v201;
        v201 = 0;
        if (!v44)
          goto LABEL_87;
        goto LABEL_81;
      }
      if ((_DWORD)v199 != 3)
        goto LABEL_333;
      v33[1] = (float)v200;
      v44 = v201;
      v201 = 0;
      if (v44)
        goto LABEL_81;
LABEL_87:
      sub_2245564B0(v36, (uint64_t)&v199);
      switch((_DWORD)v199)
      {
        case 2:
          v33[2] = (float)(unint64_t)v200;
          v51 = v201;
          v201 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 4:
          v52 = *(double *)&v200;
          v33[2] = v52;
          v51 = v201;
          v201 = 0;
          if (v51)
            goto LABEL_95;
          break;
        case 3:
          v33[2] = (float)v200;
          v51 = v201;
          v201 = 0;
          if (v51)
          {
LABEL_95:
            for (n = (char *)v51[4]; n != (char *)v51[6]; n -= 16)
            {
              v55 = (void (*)(uint64_t))*((_QWORD *)n - 2);
              v54 = *((_QWORD *)n - 1);
              v55(v54);
            }
            free(n);
            v56 = (_QWORD *)v51[3];
            if (v56)
            {
              do
              {
                v57 = (_QWORD *)*v56;
                free(v56);
                v56 = v57;
              }
              while (v57);
            }
            free(v51);
          }
          break;
        default:
LABEL_333:
          v192 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v192->__vftable = 0;
          v193 = std::bad_cast::bad_cast(v192);
          v193->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v193, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v33 += 3;
      if (v33 == v35)
        goto LABEL_101;
    }
    *v33 = (float)(unint64_t)v200;
    v38 = v201;
    v201 = 0;
    if (!v38)
      goto LABEL_73;
LABEL_67:
    for (ii = (char *)v38[4]; ii != (char *)v38[6]; ii -= 16)
    {
      v41 = (void (*)(uint64_t))*((_QWORD *)ii - 2);
      v40 = *((_QWORD *)ii - 1);
      v41(v40);
    }
    free(ii);
    v42 = (_QWORD *)v38[3];
    if (v42)
    {
      do
      {
        v43 = (_QWORD *)*v42;
        free(v42);
        v42 = v43;
      }
      while (v43);
    }
    free(v38);
    goto LABEL_73;
  }
LABEL_101:
  LODWORD(v199) = 0;
  sub_224554038(*(_QWORD *)(a1 + 48), &v199);
  *(_DWORD *)(a2 + 72) = v199;
  v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v198);
  v59 = *(float **)(a2 + 80);
  v58 = *(float **)(a2 + 88);
  v60 = 0xAAAAAAAAAAAAAAABLL * (v58 - v59);
  if (v198 <= v60)
  {
    if (v198 < v60)
    {
      v58 = &v59[3 * v198];
      *(_QWORD *)(a2 + 88) = v58;
    }
  }
  else
  {
    sub_2232F52A0((uint64_t *)(a2 + 80), v198 - v60);
    v59 = *(float **)(a2 + 80);
    v58 = *(float **)(a2 + 88);
  }
  if (v58 != v59)
  {
    v61 = v58;
    while (1)
    {
      v62 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v62, (uint64_t)&v199);
      if ((_DWORD)v199 == 2)
        break;
      if ((_DWORD)v199 == 3)
      {
        *v59 = (float)v200;
        v64 = v201;
        v201 = 0;
        if (!v64)
          goto LABEL_123;
        goto LABEL_117;
      }
      if ((_DWORD)v199 != 4)
        goto LABEL_334;
      v63 = *(double *)&v200;
      *v59 = v63;
      v64 = v201;
      v201 = 0;
      if (v64)
        goto LABEL_117;
LABEL_123:
      sub_2245564B0(v62, (uint64_t)&v199);
      if ((_DWORD)v199 == 2)
      {
        v59[1] = (float)(unint64_t)v200;
        v70 = v201;
        v201 = 0;
        if (!v70)
          goto LABEL_137;
LABEL_131:
        for (jj = (char *)v70[4]; jj != (char *)v70[6]; jj -= 16)
        {
          v74 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
          v73 = *((_QWORD *)jj - 1);
          v74(v73);
        }
        free(jj);
        v75 = (_QWORD *)v70[3];
        if (v75)
        {
          do
          {
            v76 = (_QWORD *)*v75;
            free(v75);
            v75 = v76;
          }
          while (v76);
        }
        free(v70);
        goto LABEL_137;
      }
      if ((_DWORD)v199 == 4)
      {
        v71 = *(double *)&v200;
        v59[1] = v71;
        v70 = v201;
        v201 = 0;
        if (!v70)
          goto LABEL_137;
        goto LABEL_131;
      }
      if ((_DWORD)v199 != 3)
        goto LABEL_334;
      v59[1] = (float)v200;
      v70 = v201;
      v201 = 0;
      if (v70)
        goto LABEL_131;
LABEL_137:
      sub_2245564B0(v62, (uint64_t)&v199);
      switch((_DWORD)v199)
      {
        case 2:
          v59[2] = (float)(unint64_t)v200;
          v77 = v201;
          v201 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 4:
          v78 = *(double *)&v200;
          v59[2] = v78;
          v77 = v201;
          v201 = 0;
          if (v77)
            goto LABEL_145;
          break;
        case 3:
          v59[2] = (float)v200;
          v77 = v201;
          v201 = 0;
          if (v77)
          {
LABEL_145:
            for (kk = (char *)v77[4]; kk != (char *)v77[6]; kk -= 16)
            {
              v81 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
              v80 = *((_QWORD *)kk - 1);
              v81(v80);
            }
            free(kk);
            v82 = (_QWORD *)v77[3];
            if (v82)
            {
              do
              {
                v83 = (_QWORD *)*v82;
                free(v82);
                v82 = v83;
              }
              while (v83);
            }
            free(v77);
          }
          break;
        default:
LABEL_334:
          v194 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v194->__vftable = 0;
          v195 = std::bad_cast::bad_cast(v194);
          v195->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v195, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v59 += 3;
      if (v59 == v61)
        goto LABEL_151;
    }
    *v59 = (float)(unint64_t)v200;
    v64 = v201;
    v201 = 0;
    if (!v64)
      goto LABEL_123;
LABEL_117:
    for (mm = (char *)v64[4]; mm != (char *)v64[6]; mm -= 16)
    {
      v67 = (void (*)(uint64_t))*((_QWORD *)mm - 2);
      v66 = *((_QWORD *)mm - 1);
      v67(v66);
    }
    free(mm);
    v68 = (_QWORD *)v64[3];
    if (v68)
    {
      do
      {
        v69 = (_QWORD *)*v68;
        free(v68);
        v68 = v69;
      }
      while (v69);
    }
    free(v64);
    goto LABEL_123;
  }
LABEL_151:
  LODWORD(v199) = 0;
  sub_224554038(*(_QWORD *)(a1 + 48), &v199);
  *(_DWORD *)(a2 + 112) = v199;
  v199 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v199);
  v85 = *(_BYTE **)(a2 + 120);
  v84 = *(_BYTE **)(a2 + 128);
  if (v199 <= v84 - v85)
  {
    if (v199 < v84 - v85)
    {
      v84 = &v85[v199];
      *(_QWORD *)(a2 + 128) = &v85[v199];
    }
  }
  else
  {
    sub_22317F2E8(a2 + 120, v199 - (v84 - v85));
    v85 = *(_BYTE **)(a2 + 120);
    v84 = *(_BYTE **)(a2 + 128);
  }
  v86 = *(_QWORD *)(a1 + 48);
  v87 = v84 - v85;
  if (v84 != v85)
  {
    do
    {
      sub_224553CF0(v86, v85++);
      --v87;
    }
    while (v87);
    v86 = *(_QWORD *)(a1 + 48);
  }
  LODWORD(v199) = 0;
  sub_224554038(v86, &v199);
  *(_DWORD *)(a2 + 152) = v199;
  v199 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v199);
  v89 = *(_BYTE **)(a2 + 160);
  v88 = *(_BYTE **)(a2 + 168);
  if (v199 <= v88 - v89)
  {
    if (v199 < v88 - v89)
    {
      v88 = &v89[v199];
      *(_QWORD *)(a2 + 168) = &v89[v199];
    }
  }
  else
  {
    sub_22317F2E8(a2 + 160, v199 - (v88 - v89));
    v89 = *(_BYTE **)(a2 + 160);
    v88 = *(_BYTE **)(a2 + 168);
  }
  v90 = *(_QWORD *)(a1 + 48);
  v91 = v88 - v89;
  if (v88 != v89)
  {
    do
    {
      sub_224553CF0(v90, v89++);
      --v91;
    }
    while (v91);
    v90 = *(_QWORD *)(a1 + 48);
  }
  v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  sub_2245543E8(v90, &v198);
  v93 = *(_DWORD **)(a2 + 192);
  v92 = *(_DWORD **)(a2 + 200);
  v94 = 0xAAAAAAAAAAAAAAABLL * (v92 - v93);
  if (v198 <= v94)
  {
    if (v198 < v94)
    {
      v92 = &v93[3 * v198];
      *(_QWORD *)(a2 + 200) = v92;
    }
  }
  else
  {
    sub_2232F5570((uint64_t *)(a2 + 192), v198 - v94);
    v93 = *(_DWORD **)(a2 + 192);
    v92 = *(_DWORD **)(a2 + 200);
  }
  if (v92 != v93)
  {
    v95 = v92;
    do
    {
      v96 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v96, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
        goto LABEL_329;
      *v93 = v200;
      v98 = v201;
      v201 = 0;
      if (v98)
      {
        for (nn = (char *)v98[4]; nn != (char *)v98[6]; nn -= 16)
        {
          v101 = (void (*)(uint64_t))*((_QWORD *)nn - 2);
          v100 = *((_QWORD *)nn - 1);
          v101(v100);
        }
        free(nn);
        v102 = (_QWORD *)v98[3];
        if (v102)
        {
          do
          {
            v103 = (_QWORD *)*v102;
            free(v102);
            v102 = v103;
          }
          while (v103);
        }
        free(v98);
      }
      sub_2245564B0(v96, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
        goto LABEL_329;
      v93[1] = v200;
      v105 = v201;
      v201 = 0;
      if (v105)
      {
        for (i1 = (char *)v105[4]; i1 != (char *)v105[6]; i1 -= 16)
        {
          v108 = (void (*)(uint64_t))*((_QWORD *)i1 - 2);
          v107 = *((_QWORD *)i1 - 1);
          v108(v107);
        }
        free(i1);
        v109 = (_QWORD *)v105[3];
        if (v109)
        {
          do
          {
            v110 = (_QWORD *)*v109;
            free(v109);
            v109 = v110;
          }
          while (v110);
        }
        free(v105);
      }
      sub_2245564B0(v96, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
      {
LABEL_329:
        v184 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v184->__vftable = 0;
        v185 = std::bad_cast::bad_cast(v184);
        v185->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
        __cxa_throw(v185, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v93[2] = v200;
      v112 = v201;
      v201 = 0;
      if (v112)
      {
        for (i2 = (char *)v112[4]; i2 != (char *)v112[6]; i2 -= 16)
        {
          v115 = (void (*)(uint64_t))*((_QWORD *)i2 - 2);
          v114 = *((_QWORD *)i2 - 1);
          v115(v114);
        }
        free(i2);
        v116 = (_QWORD *)v112[3];
        if (v116)
        {
          do
          {
            v117 = (_QWORD *)*v116;
            free(v116);
            v116 = v117;
          }
          while (v117);
        }
        free(v112);
      }
      v93 += 3;
    }
    while (v93 != v95);
  }
  v198 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v198);
  v119 = *(char **)(a2 + 224);
  v118 = *(char **)(a2 + 232);
  v120 = (v118 - v119) >> 3;
  if (v198 <= v120)
  {
    if (v198 < v120)
    {
      v118 = &v119[8 * v198];
      *(_QWORD *)(a2 + 232) = v118;
    }
  }
  else
  {
    sub_2232F5840(a2 + 224, v198 - v120);
    v119 = *(char **)(a2 + 224);
    v118 = *(char **)(a2 + 232);
  }
  if (v118 != v119)
  {
    v121 = v118;
    do
    {
      v122 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v122, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
        goto LABEL_331;
      *(_DWORD *)v119 = v200;
      v124 = v201;
      v201 = 0;
      if (v124)
      {
        for (i3 = (char *)v124[4]; i3 != (char *)v124[6]; i3 -= 16)
        {
          v127 = (void (*)(uint64_t))*((_QWORD *)i3 - 2);
          v126 = *((_QWORD *)i3 - 1);
          v127(v126);
        }
        free(i3);
        v128 = (_QWORD *)v124[3];
        if (v128)
        {
          do
          {
            v129 = (_QWORD *)*v128;
            free(v128);
            v128 = v129;
          }
          while (v129);
        }
        free(v124);
      }
      sub_2245564B0(v122, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
      {
LABEL_331:
        v188 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v188->__vftable = 0;
        v189 = std::bad_cast::bad_cast(v188);
        v189->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
        __cxa_throw(v189, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      *((_DWORD *)v119 + 1) = v200;
      v131 = v201;
      v201 = 0;
      if (v131)
      {
        for (i4 = (char *)v131[4]; i4 != (char *)v131[6]; i4 -= 16)
        {
          v134 = (void (*)(uint64_t))*((_QWORD *)i4 - 2);
          v133 = *((_QWORD *)i4 - 1);
          v134(v133);
        }
        free(i4);
        v135 = (_QWORD *)v131[3];
        if (v135)
        {
          do
          {
            v136 = (_QWORD *)*v135;
            free(v135);
            v135 = v136;
          }
          while (v136);
        }
        free(v131);
      }
      v119 += 8;
    }
    while (v119 != v121);
  }
  v198 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v198);
  v138 = *(float **)(a2 + 256);
  v137 = *(float **)(a2 + 264);
  v139 = ((char *)v137 - (char *)v138) >> 3;
  if (v198 <= v139)
  {
    if (v198 < v139)
    {
      v137 = &v138[2 * v198];
      *(_QWORD *)(a2 + 264) = v137;
    }
  }
  else
  {
    sub_2232F5AE0(a2 + 256, v198 - v139);
    v138 = *(float **)(a2 + 256);
    v137 = *(float **)(a2 + 264);
  }
  if (v137 != v138)
  {
    v140 = v137;
    while (1)
    {
      v141 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v141, (uint64_t)&v199);
      if ((_DWORD)v199 == 2)
        break;
      if ((_DWORD)v199 == 3)
      {
        *v138 = (float)v200;
        v143 = v201;
        v201 = 0;
        if (!v143)
          goto LABEL_263;
        goto LABEL_257;
      }
      if ((_DWORD)v199 != 4)
        goto LABEL_335;
      v142 = *(double *)&v200;
      *v138 = v142;
      v143 = v201;
      v201 = 0;
      if (v143)
        goto LABEL_257;
LABEL_263:
      sub_2245564B0(v141, (uint64_t)&v199);
      switch((_DWORD)v199)
      {
        case 2:
          v138[1] = (float)(unint64_t)v200;
          v149 = v201;
          v201 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 4:
          v150 = *(double *)&v200;
          v138[1] = v150;
          v149 = v201;
          v201 = 0;
          if (v149)
            goto LABEL_271;
          break;
        case 3:
          v138[1] = (float)v200;
          v149 = v201;
          v201 = 0;
          if (v149)
          {
LABEL_271:
            for (i5 = (char *)v149[4]; i5 != (char *)v149[6]; i5 -= 16)
            {
              v153 = (void (*)(uint64_t))*((_QWORD *)i5 - 2);
              v152 = *((_QWORD *)i5 - 1);
              v153(v152);
            }
            free(i5);
            v154 = (_QWORD *)v149[3];
            if (v154)
            {
              do
              {
                v155 = (_QWORD *)*v154;
                free(v154);
                v154 = v155;
              }
              while (v155);
            }
            free(v149);
          }
          break;
        default:
LABEL_335:
          v196 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          v196->__vftable = 0;
          v197 = std::bad_cast::bad_cast(v196);
          v197->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v197, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v138 += 2;
      if (v138 == v140)
        goto LABEL_277;
    }
    *v138 = (float)(unint64_t)v200;
    v143 = v201;
    v201 = 0;
    if (!v143)
      goto LABEL_263;
LABEL_257:
    for (i6 = (char *)v143[4]; i6 != (char *)v143[6]; i6 -= 16)
    {
      v146 = (void (*)(uint64_t))*((_QWORD *)i6 - 2);
      v145 = *((_QWORD *)i6 - 1);
      v146(v145);
    }
    free(i6);
    v147 = (_QWORD *)v143[3];
    if (v147)
    {
      do
      {
        v148 = (_QWORD *)*v147;
        free(v147);
        v147 = v148;
      }
      while (v148);
    }
    free(v143);
    goto LABEL_263;
  }
LABEL_277:
  v198 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v198);
  v157 = *(_DWORD **)(a2 + 288);
  v156 = *(_DWORD **)(a2 + 296);
  v158 = 0xAAAAAAAAAAAAAAABLL * (v156 - v157);
  if (v198 <= v158)
  {
    if (v198 < v158)
    {
      v156 = &v157[3 * v198];
      *(_QWORD *)(a2 + 296) = v156;
    }
  }
  else
  {
    sub_2232F5570((uint64_t *)(a2 + 288), v198 - v158);
    v157 = *(_DWORD **)(a2 + 288);
    v156 = *(_DWORD **)(a2 + 296);
  }
  if (v156 != v157)
  {
    v159 = v156;
    do
    {
      v160 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v160, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
        goto LABEL_330;
      *v157 = v200;
      v162 = v201;
      v201 = 0;
      if (v162)
      {
        for (i7 = (char *)v162[4]; i7 != (char *)v162[6]; i7 -= 16)
        {
          v165 = (void (*)(uint64_t))*((_QWORD *)i7 - 2);
          v164 = *((_QWORD *)i7 - 1);
          v165(v164);
        }
        free(i7);
        v166 = (_QWORD *)v162[3];
        if (v166)
        {
          do
          {
            v167 = (_QWORD *)*v166;
            free(v166);
            v166 = v167;
          }
          while (v167);
        }
        free(v162);
      }
      sub_2245564B0(v160, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
        goto LABEL_330;
      v157[1] = v200;
      v169 = v201;
      v201 = 0;
      if (v169)
      {
        for (i8 = (char *)v169[4]; i8 != (char *)v169[6]; i8 -= 16)
        {
          v172 = (void (*)(uint64_t))*((_QWORD *)i8 - 2);
          v171 = *((_QWORD *)i8 - 1);
          v172(v171);
        }
        free(i8);
        v173 = (_QWORD *)v169[3];
        if (v173)
        {
          do
          {
            v174 = (_QWORD *)*v173;
            free(v173);
            v173 = v174;
          }
          while (v174);
        }
        free(v169);
      }
      sub_2245564B0(v160, (uint64_t)&v199);
      if ((_DWORD)v199 != 2 || HIDWORD(v200) != 0)
      {
LABEL_330:
        v186 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        v186->__vftable = 0;
        v187 = std::bad_cast::bad_cast(v186);
        v187->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
        __cxa_throw(v187, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v157[2] = v200;
      v176 = v201;
      v201 = 0;
      if (v176)
      {
        for (i9 = (char *)v176[4]; i9 != (char *)v176[6]; i9 -= 16)
        {
          v179 = (void (*)(uint64_t))*((_QWORD *)i9 - 2);
          v178 = *((_QWORD *)i9 - 1);
          v179(v178);
        }
        free(i9);
        v180 = (_QWORD *)v176[3];
        if (v180)
        {
          do
          {
            v181 = (_QWORD *)*v180;
            free(v180);
            v180 = v181;
          }
          while (v181);
        }
        free(v176);
      }
      v157 += 3;
    }
    while (v157 != v159);
  }
  if (a3 >= 2)
  {
    LOBYTE(v198) = 0;
    sub_224553CF0(*(_QWORD *)(a1 + 48), &v198);
    if ((_BYTE)v198)
    {
      if (!*(_BYTE *)(a2 + 344))
      {
        *(_QWORD *)(a2 + 320) = 0;
        *(_QWORD *)(a2 + 328) = 0;
        *(_QWORD *)(a2 + 336) = 0;
        *(_BYTE *)(a2 + 344) = 1;
      }
      LODWORD(v199) = 1;
      sub_224554038(*(_QWORD *)(a1 + 48), &v199);
      v182 = *(_QWORD *)(a1 + 48);
      sub_2245544CC(v182, (float *)(a2 + 320));
      sub_2245544CC(v182, (float *)(a2 + 324));
      sub_2245544CC(v182, (float *)(a2 + 328));
      v183 = *(_QWORD *)(a1 + 48);
      sub_2245544CC(v183, (float *)(a2 + 332));
      sub_2245544CC(v183, (float *)(a2 + 336));
      sub_2245544CC(v183, (float *)(a2 + 340));
    }
    else if (*(_BYTE *)(a2 + 344))
    {
      *(_BYTE *)(a2 + 344) = 0;
    }
  }
}

void sub_2232F79B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F79CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F79E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F79F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F7A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F7A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2232F7A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_224558840((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2232F7A90(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 *a15, _DWORD *a16, uint64_t a17)
{
  _QWORD *v24;
  __int128 v25;

  v24 = sub_2232F7C70((_QWORD *)a1, a2);
  *((_DWORD *)v24 + 8) = *a3;
  sub_2232F7C70(v24 + 5, a4);
  *(_DWORD *)(a1 + 72) = *a5;
  sub_2232F7C70((_QWORD *)(a1 + 80), a6);
  *(_DWORD *)(a1 + 112) = *a7;
  sub_223180F98((_QWORD *)(a1 + 120), a8);
  *(_DWORD *)(a1 + 152) = *a9;
  sub_223180F98((_QWORD *)(a1 + 160), a10);
  sub_2232F7E10((_QWORD *)(a1 + 192), a11);
  sub_2232F7FB0((_QWORD *)(a1 + 224), a12);
  sub_2232F8128((_QWORD *)(a1 + 256), a13);
  sub_2232F7E10((_QWORD *)(a1 + 288), a14);
  v25 = *a15;
  *(_OWORD *)(a1 + 332) = *(__int128 *)((char *)a15 + 12);
  *(_OWORD *)(a1 + 320) = v25;
  *(_DWORD *)(a1 + 348) = *a16;
  sub_223181104((_QWORD *)(a1 + 352), a17);
  return a1;
}

void sub_2232F7BB8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v10 = v7;
  sub_2232E7F80(v10);
  sub_2232E800C(v9);
  sub_2232E808C(v8);
  sub_2232E7F80(v6);
  sub_22317EC9C(v5);
  sub_22317EC9C(v4);
  sub_2232E810C(v3);
  sub_2232E810C(v2);
  sub_2232E810C(v1);
  _Unwind_Resume(a1);
}

void sub_2232F7C30()
{
  JUMPOUT(0x2232F7C08);
}

void sub_2232F7C38()
{
  JUMPOUT(0x2232F7C10);
}

void sub_2232F7C40(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_2232E810C(v2);
  sub_2232E810C(v1);
  _Unwind_Resume(a1);
}

void sub_2232F7C5C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_2232E810C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2232F7C70(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC2B210[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24EC2B1D0[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_2232F7D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC2A6A8[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232F7E00()
{
  return 0;
}

uint64_t sub_2232F7E08()
{
  return 0x100000000;
}

_QWORD *sub_2232F7E10(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC2B220[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24EC2B1E0[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_2232F7F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC2A668[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232F7FA0()
{
  return 0;
}

uint64_t sub_2232F7FA8()
{
  return 0x100000000;
}

_QWORD *sub_2232F7FB0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC2B230[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_22316E078();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24EC2B1F0[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_2232F80B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC2A688[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232F8118()
{
  return 0;
}

uint64_t sub_2232F8120()
{
  return 0x100000000;
}

_QWORD *sub_2232F8128(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_22316DD70();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24EC2B240[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_22316E078();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_22316DD70();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24EC2B200[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_2232F8228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24EC2A678[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2232F8290()
{
  return 0;
}

uint64_t sub_2232F8298()
{
  return 0x100000000;
}

uint64_t *sub_2232F82A0(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  uint64_t *v32;

  v2 = a1[36];
  if (v2)
  {
    a1[37] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[38] - v2) >> 2);
    v30 = v2;
    v31 = v3;
    v4 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v4 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A668[v4])(&v32, a1 + 39);
  }
  v5 = a1[32];
  if (v5)
  {
    a1[33] = v5;
    v6 = (unint64_t)(a1[34] - v5) >> 3;
    v30 = v5;
    v31 = v6;
    v7 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v7 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A678[v7])(&v32, a1 + 35);
  }
  v8 = a1[28];
  if (v8)
  {
    a1[29] = v8;
    v9 = (unint64_t)(a1[30] - v8) >> 3;
    v30 = v8;
    v31 = v9;
    v10 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v10 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A688[v10])(&v32, a1 + 31);
  }
  v11 = a1[24];
  if (v11)
  {
    a1[25] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[26] - v11) >> 2);
    v30 = v11;
    v31 = v12;
    v13 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v13 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A668[v13])(&v32, a1 + 27);
  }
  v14 = a1[20];
  if (v14)
  {
    a1[21] = v14;
    v15 = *((_DWORD *)a1 + 44) - v14;
    v30 = v14;
    v31 = v15;
    v16 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v16 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A698[v16])(&v32, a1 + 23);
  }
  v17 = a1[15];
  if (v17)
  {
    a1[16] = v17;
    v18 = *((_DWORD *)a1 + 34) - v17;
    v30 = v17;
    v31 = v18;
    v19 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v19 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A698[v19])(&v32, a1 + 18);
  }
  v20 = a1[10];
  if (v20)
  {
    a1[11] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[12] - v20) >> 2);
    v30 = v20;
    v31 = v21;
    v22 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v22 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v22])(&v32, a1 + 13);
  }
  v23 = a1[5];
  if (v23)
  {
    a1[6] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[7] - v23) >> 2);
    v30 = v23;
    v31 = v24;
    v25 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v25 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v25])(&v32, a1 + 8);
  }
  v26 = *a1;
  if (*a1)
  {
    a1[1] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[2] - v26) >> 2);
    v30 = v26;
    v31 = v27;
    v28 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v28 == -1)
      sub_22316DD70();
    v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_24EC2A6A8[v28])(&v32, a1 + 3);
  }
  return a1;
}

void sub_2232F85F4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _BYTE *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xF0F0F0F0F0F0F0F1 * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 68 * a2 - 68;
      if (v12 < 0x44)
        goto LABEL_35;
      v13 = v12 / 0x44 + 1;
      v6 = &v5[68 * (v13 & 0x7FFFFFFFFFFFFFELL)];
      v14 = v5 + 68;
      v15 = v13 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        *(v14 - 68) = 0;
        *v14 = 0;
        *(v14 - 4) = 0;
        v14[64] = 0;
        v14 += 136;
        v15 -= 2;
      }
      while (v15);
      if (v13 != (v13 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          *v6 = 0;
          v6[64] = 0;
          v6 += 68;
        }
        while (v6 != &v5[68 * a2]);
      }
      v6 = &v5[68 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v5[-*a1] >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x3C3C3C3C3C3C3C3)
      sub_22316E078();
    v9 = 0xF0F0F0F0F0F0F0F1 * ((v4 - *a1) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1E1E1E1E1E1E1E1)
      v10 = 0x3C3C3C3C3C3C3C3;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x3C3C3C3C3C3C3C3)
        sub_223174E94();
      v11 = (char *)operator new(68 * v10);
    }
    else
    {
      v11 = 0;
    }
    v16 = &v11[68 * v7];
    v17 = &v16[68 * a2];
    v18 = 68 * a2 - 68;
    v19 = v16;
    if (v18 < 0x44)
      goto LABEL_36;
    v20 = v18 / 0x44 + 1;
    v19 = &v16[68 * (v20 & 0x7FFFFFFFFFFFFFELL)];
    v21 = &v11[68 * v7 + 68];
    v22 = v20 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v21 - 68) = 0;
      *v21 = 0;
      *(v21 - 4) = 0;
      v21[64] = 0;
      v21 += 136;
      v22 -= 2;
    }
    while (v22);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_36:
      do
      {
        *v19 = 0;
        v19[64] = 0;
        v19 += 68;
      }
      while (v19 != v17);
    }
    v23 = (_BYTE *)*a1;
    if (v5 != (_BYTE *)*a1)
    {
      do
      {
        *(_OWORD *)(v16 - 68) = *(_OWORD *)(v6 - 68);
        v24 = *(_OWORD *)(v6 - 52);
        v25 = *(_OWORD *)(v6 - 36);
        v26 = *(_OWORD *)(v6 - 20);
        *(v16 - 4) = *(v6 - 4);
        *(_OWORD *)(v16 - 20) = v26;
        *(_OWORD *)(v16 - 36) = v25;
        *(_OWORD *)(v16 - 52) = v24;
        v16 -= 68;
        v6 -= 68;
      }
      while (v6 != v23);
      v6 = (_BYTE *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v11[68 * v10];
    if (v6)
      operator delete(v6);
  }
}

void sub_2232F885C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  __int128 v24;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xF0F0F0F0F0F0F0F1 * (v4 - (_QWORD)v5) >= a2)
  {
    if (a2)
    {
      v12 = 17 * a2 - 17;
      if (v12 < 0x11)
        goto LABEL_35;
      v13 = v12 / 0x11 + 1;
      v6 = &v5[17 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
      v14 = v5 + 16;
      v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v14 - 16) = 0;
        *(_WORD *)v14 = 0;
        v14[17] = 0;
        v14 += 34;
        v15 -= 2;
      }
      while (v15);
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_35:
        do
        {
          *v6 = 0;
          v6[16] = 0;
          v6 += 17;
        }
        while (v6 != &v5[17 * a2]);
      }
      v6 = &v5[17 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * (_QWORD)&v5[-*a1];
    v8 = v7 + a2;
    if (v7 + a2 >= 0xF0F0F0F0F0F0F10)
      sub_22316E078();
    v9 = 0xF0F0F0F0F0F0F0F1 * (v4 - *a1);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x787878787878787)
      v10 = 0xF0F0F0F0F0F0F0FLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >= 0xF0F0F0F0F0F0F10)
        sub_223174E94();
      v11 = (char *)operator new(17 * v10);
    }
    else
    {
      v11 = 0;
    }
    v16 = &v11[17 * v7];
    v17 = &v16[17 * a2];
    v18 = 17 * a2 - 17;
    v19 = v16;
    if (v18 < 0x11)
      goto LABEL_36;
    v20 = v18 / 0x11 + 1;
    v19 = &v16[17 * (v20 & 0x1FFFFFFFFFFFFFFELL)];
    v21 = (uint64_t)&v11[17 * v7 + 16];
    v22 = v20 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(_BYTE *)(v21 - 16) = 0;
      *(_WORD *)v21 = 0;
      *(_BYTE *)(v21 + 17) = 0;
      v21 += 34;
      v22 -= 2;
    }
    while (v22);
    if (v20 != (v20 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_36:
      do
      {
        *v19 = 0;
        v19[16] = 0;
        v19 += 17;
      }
      while (v19 != v17);
    }
    v23 = (_BYTE *)*a1;
    if (v5 != (_BYTE *)*a1)
    {
      do
      {
        v24 = *(_OWORD *)(v6 - 17);
        *(v16 - 1) = *(v6 - 1);
        *(_OWORD *)(v16 - 17) = v24;
        v16 -= 17;
        v6 -= 17;
      }
      while (v6 != v23);
      v6 = (_BYTE *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v11[17 * v10];
    if (v6)
      operator delete(v6);
  }
}

void sub_2232F8A90(_QWORD *a1, uint64_t a2)
{
  char v4;
  int v5;
  int v6;

  v4 = 0;
  sub_224553CF0(a1[6], &v4);
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 112))
    {
      sub_2232F8B64(a2);
      *(_OWORD *)(a2 + 80) = 0u;
      *(_OWORD *)(a2 + 96) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)(a2 + 64) = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_BYTE *)(a2 + 112) = 1;
    }
    v5 = 1;
    sub_224554038(a1[6], &v5);
    v6 = 3;
    sub_224554038(a1[6], &v6);
    sub_2232F33D8(a1, a2 + 8);
    sub_224554738(a1[6], (_BYTE *)(a2 + 104));
  }
  else
  {
    sub_2232F8B64(a2);
  }
}

void sub_2232F8B64(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    v4 = *(uint64_t **)(a1 + 32);
    if (v4)
    {
      v5 = *(uint64_t **)(a1 + 40);
      v6 = *(void **)(a1 + 32);
      if (v5 != v4)
      {
        do
          v5 = sub_2232E7BD4(v5 - 48);
        while (v5 != v4);
        v6 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v4;
      operator delete(v6);
    }
    v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v7);
    }
    *(_BYTE *)(a1 + 112) = 0;
  }
}

void sub_2232F8BF4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2232F8D90(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 104))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(_QWORD *)(a1 + 88) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(_QWORD *)(a1 + 64) = v3;
      operator delete(v3);
    }
    v4 = *(uint64_t **)(a1 + 32);
    if (v4)
    {
      v5 = *(uint64_t **)(a1 + 40);
      v6 = *(void **)(a1 + 32);
      if (v5 != v4)
      {
        do
          v5 = sub_2232E7BD4(v5 - 48);
        while (v5 != v4);
        v6 = *(void **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 40) = v4;
      operator delete(v6);
    }
    v7 = *(void **)(a1 + 8);
    if (v7)
    {
      *(_QWORD *)(a1 + 16) = v7;
      operator delete(v7);
    }
    *(_BYTE *)(a1 + 104) = 0;
  }
}

void sub_2232F8E20(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v6;
  char v7;
  char v8;

  if (a3 >= 3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include/ACV/SurfaceDetection/DataModels/ContinuousTrackingResultSample.h", 169, (uint64_t)"version <= sample.MaxVersion()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_2231B2E50((uint64_t)&v6, a1, a2 + 8);
  sub_224553F80(*(_QWORD *)(a1 + 48), (_DWORD *)(a2 + 24));
  if (a3 >= 2)
  {
    v7 = 0;
    sub_224553CF0(*(_QWORD *)(a1 + 48), &v7);
    if (v7)
    {
      if (!*(_BYTE *)(a2 + 48))
      {
        *(_QWORD *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 40) = 0;
        *(_BYTE *)(a2 + 48) = 1;
      }
      sub_2231B2E50((uint64_t)&v8, a1, a2 + 32);
    }
    else if (*(_BYTE *)(a2 + 48))
    {
      *(_BYTE *)(a2 + 48) = 0;
    }
  }
}

void sub_2232F8F14(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_22316E078();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_223174E94();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_2232F90B4(uint64_t a1, _QWORD *a2)
{
  float **v4;
  unint64_t v5;
  float **v6;
  uint64_t v7;
  _QWORD *v8;
  float **v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float v17;
  _QWORD *v18;
  char *j;
  uint64_t v20;
  void (*v21)(uint64_t);
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  char *i;
  uint64_t v27;
  void (*v28)(uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  std::bad_cast *exception;
  std::bad_cast *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;

  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  sub_2245543E8(*(_QWORD *)(a1 + 48), &v33);
  v4 = (float **)a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a2) >> 3);
  if (v33 > v5)
  {
    sub_2232C7FD8((uint64_t)a2, v33 - v5);
    v8 = a2;
    v6 = (float **)*a2;
    v7 = v8[1];
    if ((float **)v7 != v6)
      goto LABEL_15;
    return;
  }
  if (v33 < v5)
  {
    v7 = *a2 + 24 * v33;
    if (v4 != (float **)v7)
    {
      v9 = (float **)a2[1];
      do
      {
        v11 = *(v9 - 3);
        v9 -= 3;
        v10 = v11;
        if (v11)
        {
          *(v4 - 2) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != (float **)v7);
    }
    a2[1] = v7;
    v6 = (float **)*a2;
    if ((float **)v7 == v6)
      return;
    while (1)
    {
LABEL_15:
      v34 = ((char *)v6[1] - (char *)*v6) >> 3;
      sub_2245543E8(*(_QWORD *)(a1 + 48), &v34);
      v13 = *v6;
      v12 = v6[1];
      v14 = ((char *)v12 - (char *)*v6) >> 3;
      if (v34 <= v14)
      {
        if (v34 < v14)
        {
          v12 = &v13[2 * v34];
          v6[1] = v12;
        }
      }
      else
      {
        sub_2232F8F14((void **)v6, v34 - v14);
        v13 = *v6;
        v12 = v6[1];
      }
      if (v12 != v13)
        break;
LABEL_14:
      v6 += 3;
      if (v6 == (float **)v7)
        return;
    }
    v15 = v12;
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 48);
      sub_2245564B0(v16, (uint64_t)&v35);
      if (v35 == 2)
        break;
      if (v35 == 3)
      {
        *v13 = (float)v36;
        v18 = v37;
        v37 = 0;
        if (!v18)
          goto LABEL_37;
        goto LABEL_31;
      }
      if (v35 != 4)
        goto LABEL_51;
      v17 = *(double *)&v36;
      *v13 = v17;
      v18 = v37;
      v37 = 0;
      if (v18)
        goto LABEL_31;
LABEL_37:
      sub_2245564B0(v16, (uint64_t)&v35);
      switch(v35)
      {
        case 2:
          v13[1] = (float)(unint64_t)v36;
          v24 = v37;
          v37 = 0;
          if (v24)
            goto LABEL_45;
          break;
        case 4:
          v25 = *(double *)&v36;
          v13[1] = v25;
          v24 = v37;
          v37 = 0;
          if (v24)
            goto LABEL_45;
          break;
        case 3:
          v13[1] = (float)v36;
          v24 = v37;
          v37 = 0;
          if (v24)
          {
LABEL_45:
            for (i = (char *)v24[4]; i != (char *)v24[6]; i -= 16)
            {
              v28 = (void (*)(uint64_t))*((_QWORD *)i - 2);
              v27 = *((_QWORD *)i - 1);
              v28(v27);
            }
            free(i);
            v29 = (_QWORD *)v24[3];
            if (v29)
            {
              do
              {
                v30 = (_QWORD *)*v29;
                free(v29);
                v29 = v30;
              }
              while (v30);
            }
            free(v24);
          }
          break;
        default:
LABEL_51:
          exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
          exception->__vftable = 0;
          v32 = std::bad_cast::bad_cast(exception);
          v32->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
          __cxa_throw(v32, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
      }
      v13 += 2;
      if (v13 == v15)
        goto LABEL_14;
    }
    *v13 = (float)(unint64_t)v36;
    v18 = v37;
    v37 = 0;
    if (!v18)
      goto LABEL_37;
LABEL_31:
    for (j = (char *)v18[4]; j != (char *)v18[6]; j -= 16)
    {
      v21 = (void (*)(uint64_t))*((_QWORD *)j - 2);
      v20 = *((_QWORD *)j - 1);
      v21(v20);
    }
    free(j);
    v22 = (_QWORD *)v18[3];
    if (v22)
    {
      do
      {
        v23 = (_QWORD *)*v22;
        free(v22);
        v22 = v23;
      }
      while (v23);
    }
    free(v18);
    goto LABEL_37;
  }
  v7 = a2[1];
  v6 = (float **)*a2;
  if (v4 != v6)
    goto LABEL_15;
}

void sub_2232F93D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14)
{
  char *i;
  uint64_t v16;
  void (*v17)(uint64_t);
  _QWORD *v18;
  _QWORD *v19;

  if (a14)
  {
    for (i = (char *)a14[4]; i != (char *)a14[6]; i -= 16)
    {
      v17 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v16 = *((_QWORD *)i - 1);
      v17(v16);
    }
    free(i);
    v18 = (_QWORD *)a14[3];
    if (v18)
    {
      do
      {
        v19 = (_QWORD *)*v18;
        free(v18);
        v18 = v19;
      }
      while (v19);
    }
    free(a14);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2232F9440(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC2ADF8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

char *sub_2232F9530(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  BOOL v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  size_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  size_t v41;
  char *v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int64_t v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *j;
  uint64_t v65;
  uint64_t k;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t m;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  size_t v78;
  char *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  size_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  size_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  size_t v102;
  char *v103;
  char *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  size_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  size_t v121;
  char *v122;
  char *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t n;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t ii;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t jj;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t kk;
  int v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *result;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  std::bad_alloc *exception;
  std::bad_alloc *v241;
  std::bad_alloc *v242;
  std::bad_alloc *v243;
  std::bad_alloc *v244;
  std::bad_alloc *v245;
  unint64_t v247;
  char v248;
  _BYTE v249[9];
  uint64_t v250;

  v250 = *MEMORY[0x24BDAC8D0];
  v5 = a1[3];
  if (*(_BYTE *)(a2 + 744))
  {
    if (*(_BYTE *)(v5 + 40))
    {
      *(_QWORD *)v249 = v5 + 16;
      sub_224559C04((uint64_t **)v249, 1);
    }
    else
    {
      v249[0] = 1;
      std::ostream::write();
    }
    v6 = a1[3];
    if (*(_BYTE *)(v6 + 40))
    {
      *(_QWORD *)v249 = v6 + 16;
      sub_22455A7EC((uint64_t **)v249, 1u);
    }
    else
    {
      sub_22455AA60((uint64_t)v249, v6 + 8);
    }
    v7 = a1[3];
    if (*(_BYTE *)(v7 + 40))
    {
      *(_QWORD *)v249 = v7 + 16;
      sub_22455A7EC((uint64_t **)v249, 3u);
    }
    else
    {
      v249[0] = 3;
      std::ostream::write();
    }
    sub_2232FBBFC((uint64_t)a1, (char **)(a2 + 16));
    sub_2232FDD18((uint64_t)a1, a2 + 112);
    sub_2232FDD18((uint64_t)a1, a2 + 232);
    if (*(_BYTE *)(a2 + 504))
    {
      v8 = a1[3];
      if (*(_BYTE *)(v8 + 40))
      {
        *(_QWORD *)v249 = v8 + 16;
        sub_224559C04((uint64_t **)v249, 1);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v10 = a1[3];
      if (*(_BYTE *)(v10 + 40))
      {
        *(_QWORD *)v249 = v10 + 16;
        sub_22455A7EC((uint64_t **)v249, 3u);
      }
      else
      {
        v249[0] = 3;
        std::ostream::write();
      }
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 3);
      v12 = a1[3];
      if (*(_BYTE *)(v12 + 40))
      {
        *(_QWORD *)v249 = v12 + 16;
        sub_22455B1CC((uint64_t **)v249, v11);
      }
      else
      {
        sub_22455B4D4();
      }
      v13 = *(_QWORD *)(a2 + 352);
      for (i = *(_QWORD *)(a2 + 360); v13 != i; v13 += 24)
      {
        v15 = a1[3];
        if (*(_BYTE *)(v15 + 40))
        {
          *(_QWORD *)v249 = v15 + 16;
          sub_22455A7EC((uint64_t **)v249, 2u);
        }
        else
        {
          v249[0] = 2;
          std::ostream::write();
        }
        v16 = a1[3];
        if (*(_BYTE *)(v16 + 40))
        {
          v17 = *(_DWORD *)v13;
          v18 = *(_QWORD *)(v16 + 32);
          v19 = *(_QWORD *)(v16 + 16);
          if ((unint64_t)(v18 - v19) >= 5)
          {
            v23 = *(char **)(v16 + 24);
          }
          else
          {
            if (v18)
              v20 = 2 * v18;
            else
              v20 = 0x2000;
            v21 = v19 + 5;
            while (v20 < v21)
            {
              v22 = (uint64_t)v20 <= 0;
              v20 *= 2;
              if (v22)
              {
                v20 = v21;
                break;
              }
            }
            v23 = (char *)malloc_type_realloc(*(void **)(v16 + 24), v20, 0xAD6A59EEuLL);
            if (!v23)
            {
LABEL_398:
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v241 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v241, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v16 + 24) = v23;
            *(_QWORD *)(v16 + 32) = v20;
            v19 = *(_QWORD *)(v16 + 16);
          }
          v29 = &v23[v19];
          *v29 = -54;
          *(_DWORD *)(v29 + 1) = bswap32(v17);
          v30 = *(_QWORD *)(v16 + 16);
          v31 = v30 + 5;
          *(_QWORD *)(v16 + 16) = v30 + 5;
          v32 = *(_DWORD *)(v13 + 4);
          v33 = *(_QWORD *)(v16 + 32);
          if ((unint64_t)(v33 - (v30 + 5)) >= 5)
          {
            v35 = *(char **)(v16 + 24);
          }
          else
          {
            if (v33)
              v34 = 2 * v33;
            else
              v34 = 0x2000;
            while (v34 < v30 + 10)
            {
              v22 = (uint64_t)v34 <= 0;
              v34 *= 2;
              if (v22)
              {
                v34 = v30 + 10;
                break;
              }
            }
            v35 = (char *)malloc_type_realloc(*(void **)(v16 + 24), v34, 0xAD6A59EEuLL);
            if (!v35)
              goto LABEL_398;
            *(_QWORD *)(v16 + 24) = v35;
            *(_QWORD *)(v16 + 32) = v34;
            v31 = *(_QWORD *)(v16 + 16);
          }
          v36 = &v35[v31];
          *v36 = -54;
          *(_DWORD *)(v36 + 1) = bswap32(v32);
          v37 = *(_QWORD *)(v16 + 16);
          v38 = v37 + 5;
          *(_QWORD *)(v16 + 16) = v37 + 5;
          v39 = *(_DWORD *)(v13 + 8);
          v40 = *(_QWORD *)(v16 + 32);
          if ((unint64_t)(v40 - (v37 + 5)) >= 5)
          {
            v42 = *(char **)(v16 + 24);
          }
          else
          {
            if (v40)
              v41 = 2 * v40;
            else
              v41 = 0x2000;
            while (v41 < v37 + 10)
            {
              v22 = (uint64_t)v41 <= 0;
              v41 *= 2;
              if (v22)
              {
                v41 = v37 + 10;
                break;
              }
            }
            v42 = (char *)malloc_type_realloc(*(void **)(v16 + 24), v41, 0xAD6A59EEuLL);
            if (!v42)
              goto LABEL_398;
            *(_QWORD *)(v16 + 24) = v42;
            *(_QWORD *)(v16 + 32) = v41;
            v38 = *(_QWORD *)(v16 + 16);
          }
          v43 = &v42[v38];
          *v43 = -54;
          *(_DWORD *)(v43 + 1) = bswap32(v39);
          *(_QWORD *)(v16 + 16) += 5;
          v27 = (unsigned int *)(v13 + 12);
          v28 = a1[3];
          if (!*(_BYTE *)(v28 + 40))
          {
LABEL_70:
            v44 = *v27;
            v249[0] = -54;
            *(_DWORD *)&v249[1] = bswap32(v44);
            std::ostream::write();
            goto LABEL_71;
          }
        }
        else
        {
          v24 = *(_DWORD *)v13;
          v249[0] = -54;
          *(_DWORD *)&v249[1] = bswap32(v24);
          std::ostream::write();
          v25 = *(_DWORD *)(v13 + 4);
          v249[0] = -54;
          *(_DWORD *)&v249[1] = bswap32(v25);
          std::ostream::write();
          v26 = *(_DWORD *)(v13 + 8);
          v249[0] = -54;
          *(_DWORD *)&v249[1] = bswap32(v26);
          std::ostream::write();
          v27 = (unsigned int *)(v13 + 12);
          v28 = a1[3];
          if (!*(_BYTE *)(v28 + 40))
            goto LABEL_70;
        }
        *(_QWORD *)v249 = v28 + 16;
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, v27);
LABEL_71:
        v45 = a1[3];
        if (*(_BYTE *)(v45 + 40))
        {
          *(_QWORD *)v249 = v45 + 16;
          sub_224559C04((uint64_t **)v249, *(_BYTE *)(v13 + 16));
        }
        else
        {
          v46 = *(char *)(v13 + 16);
          if (v46 < 0)
          {
            v249[0] = -52;
            v249[1] = v46;
          }
          else
          {
            v249[0] = *(_BYTE *)(v13 + 16);
          }
          std::ostream::write();
        }
        v47 = a1[3];
        if (*(_BYTE *)(v47 + 40))
        {
          *(_QWORD *)v249 = v47 + 16;
          sub_22455A7EC((uint64_t **)v249, *(_DWORD *)(v13 + 20));
        }
        else
        {
          sub_22455AA60((uint64_t)v249, v47 + 8);
        }
      }
      v48 = a1[3];
      if (*(_BYTE *)(v48 + 40))
      {
        *(_QWORD *)v249 = v48 + 16;
        sub_22455A7EC((uint64_t **)v249, 3u);
      }
      else
      {
        v249[0] = 3;
        std::ostream::write();
      }
      sub_2232FBBFC((uint64_t)a1, (char **)(a2 + 376));
      v49 = *(_QWORD *)(a2 + 480) - *(_QWORD *)(a2 + 472);
      v50 = a1[3];
      if (*(_BYTE *)(v50 + 40))
      {
        *(_QWORD *)v249 = v50 + 16;
        sub_22455B1CC((uint64_t **)v249, v49);
      }
      else
      {
        sub_22455B4D4();
      }
      v52 = *(char **)(a2 + 472);
      v51 = *(char **)(a2 + 480);
      v53 = v51 - v52;
      v54 = a1[3];
      if (*(_BYTE *)(v54 + 40))
      {
        *(_QWORD *)v249 = v54 + 16;
        if (v51 != v52)
        {
          do
          {
            sub_224559C04((uint64_t **)v249, *v52++);
            --v53;
          }
          while (v53);
        }
      }
      else if (v51 != v52)
      {
        do
        {
          v55 = *v52;
          if (v55 < 0)
          {
            v249[0] = -52;
            v249[1] = v55;
          }
          else
          {
            v249[0] = *v52;
          }
          std::ostream::write();
          ++v52;
          --v53;
        }
        while (v53);
      }
      v56 = *(_QWORD *)(a2 + 496);
      v247 = v56;
      v57 = a1[3];
      if (*(_BYTE *)(v57 + 40))
      {
        *(_QWORD *)v249 = v57 + 16;
        sub_22455B6A8((uint64_t)&v248, (uint64_t **)v249, &v247);
      }
      else
      {
        v249[0] = -53;
        *(_QWORD *)&v249[1] = bswap64(v56);
        std::ostream::write();
      }
    }
    else
    {
      v9 = a1[3];
      if (*(_BYTE *)(v9 + 40))
      {
        *(_QWORD *)v249 = v9 + 16;
        sub_224559C04((uint64_t **)v249, 0);
      }
      else
      {
        v249[0] = 0;
        std::ostream::write();
      }
    }
    if (*(_BYTE *)(a2 + 624))
    {
      v58 = a1[3];
      if (*(_BYTE *)(v58 + 40))
      {
        *(_QWORD *)v249 = v58 + 16;
        sub_224559C04((uint64_t **)v249, 1);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v60 = a1[3];
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)v249 = v60 + 16;
        sub_22455A7EC((uint64_t **)v249, 1u);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v61 = (uint64_t)(*(_QWORD *)(a2 + 520) - *(_QWORD *)(a2 + 512)) >> 4;
      v62 = a1[3];
      if (*(_BYTE *)(v62 + 40))
      {
        *(_QWORD *)v249 = v62 + 16;
        sub_22455B1CC((uint64_t **)v249, v61);
      }
      else
      {
        sub_22455B4D4();
      }
      v63 = *(char **)(a2 + 512);
      for (j = *(char **)(a2 + 520); v63 != j; v63 += 16)
      {
        v65 = a1[3];
        if (*(_BYTE *)(v65 + 40))
        {
          *(_QWORD *)v249 = v65 + 16;
          sub_224559C04((uint64_t **)v249, *v63);
          sub_224559C04((uint64_t **)v249, v63[1]);
          sub_224559C04((uint64_t **)v249, v63[2]);
          sub_224559C04((uint64_t **)v249, v63[3]);
          sub_224559C04((uint64_t **)v249, v63[4]);
          sub_224559C04((uint64_t **)v249, v63[5]);
          sub_224559C04((uint64_t **)v249, v63[6]);
          sub_224559C04((uint64_t **)v249, v63[7]);
          sub_224559C04((uint64_t **)v249, v63[8]);
          sub_224559C04((uint64_t **)v249, v63[9]);
          sub_224559C04((uint64_t **)v249, v63[10]);
          sub_224559C04((uint64_t **)v249, v63[11]);
          sub_224559C04((uint64_t **)v249, v63[12]);
          sub_224559C04((uint64_t **)v249, v63[13]);
          sub_224559C04((uint64_t **)v249, v63[14]);
          sub_224559C04((uint64_t **)v249, v63[15]);
        }
        else
        {
          for (k = 0; k != 16; ++k)
          {
            v67 = v63[k];
            if (v67 < 0)
            {
              v249[0] = -52;
              v249[1] = v67;
            }
            else
            {
              v249[0] = v63[k];
            }
            std::ostream::write();
          }
        }
      }
      v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 544) - *(_QWORD *)(a2 + 536)) >> 3);
      v69 = a1[3];
      if (*(_BYTE *)(v69 + 40))
      {
        *(_QWORD *)v249 = v69 + 16;
        sub_22455B1CC((uint64_t **)v249, v68);
      }
      else
      {
        sub_22455B4D4();
      }
      v70 = *(_QWORD *)(a2 + 536);
      for (m = *(_QWORD *)(a2 + 544); v70 != m; v70 += 40)
      {
        v72 = a1[3];
        if (*(_BYTE *)(v72 + 40))
        {
          *(_QWORD *)v249 = v72 + 16;
          sub_22455A7EC((uint64_t **)v249, 1u);
        }
        else
        {
          v249[0] = 1;
          std::ostream::write();
        }
        v73 = a1[3];
        if (*(_BYTE *)(v73 + 40))
        {
          v74 = *(_DWORD *)v70;
          v75 = *(_QWORD *)(v73 + 32);
          v76 = *(_QWORD *)(v73 + 16);
          if ((unint64_t)(v75 - v76) >= 5)
          {
            v79 = *(char **)(v73 + 24);
          }
          else
          {
            if (v75)
              v77 = 2 * v75;
            else
              v77 = 0x2000;
            v78 = v76 + 5;
            while (v77 < v78)
            {
              v22 = (uint64_t)v77 <= 0;
              v77 *= 2;
              if (v22)
              {
                v77 = v78;
                break;
              }
            }
            v79 = (char *)malloc_type_realloc(*(void **)(v73 + 24), v77, 0xAD6A59EEuLL);
            if (!v79)
            {
LABEL_400:
              v244 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v245 = std::bad_alloc::bad_alloc(v244);
              __cxa_throw(v245, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v73 + 24) = v79;
            *(_QWORD *)(v73 + 32) = v77;
            v76 = *(_QWORD *)(v73 + 16);
          }
          v90 = &v79[v76];
          *v90 = -54;
          *(_DWORD *)(v90 + 1) = bswap32(v74);
          v91 = *(_QWORD *)(v73 + 16);
          v92 = v91 + 5;
          *(_QWORD *)(v73 + 16) = v91 + 5;
          v93 = *(_DWORD *)(v70 + 4);
          v94 = *(_QWORD *)(v73 + 32);
          if ((unint64_t)(v94 - (v91 + 5)) >= 5)
          {
            v96 = *(char **)(v73 + 24);
          }
          else
          {
            if (v94)
              v95 = 2 * v94;
            else
              v95 = 0x2000;
            while (v95 < v91 + 10)
            {
              v22 = (uint64_t)v95 <= 0;
              v95 *= 2;
              if (v22)
              {
                v95 = v91 + 10;
                break;
              }
            }
            v96 = (char *)malloc_type_realloc(*(void **)(v73 + 24), v95, 0xAD6A59EEuLL);
            if (!v96)
              goto LABEL_400;
            *(_QWORD *)(v73 + 24) = v96;
            *(_QWORD *)(v73 + 32) = v95;
            v92 = *(_QWORD *)(v73 + 16);
          }
          v97 = &v96[v92];
          *v97 = -54;
          *(_DWORD *)(v97 + 1) = bswap32(v93);
          v98 = *(_QWORD *)(v73 + 16);
          v99 = v98 + 5;
          *(_QWORD *)(v73 + 16) = v98 + 5;
          v100 = *(_DWORD *)(v70 + 8);
          v101 = *(_QWORD *)(v73 + 32);
          if ((unint64_t)(v101 - (v98 + 5)) >= 5)
          {
            v103 = *(char **)(v73 + 24);
          }
          else
          {
            if (v101)
              v102 = 2 * v101;
            else
              v102 = 0x2000;
            while (v102 < v98 + 10)
            {
              v22 = (uint64_t)v102 <= 0;
              v102 *= 2;
              if (v22)
              {
                v102 = v98 + 10;
                break;
              }
            }
            v103 = (char *)malloc_type_realloc(*(void **)(v73 + 24), v102, 0xAD6A59EEuLL);
            if (!v103)
              goto LABEL_400;
            *(_QWORD *)(v73 + 24) = v103;
            *(_QWORD *)(v73 + 32) = v102;
            v99 = *(_QWORD *)(v73 + 16);
          }
          v104 = &v103[v99];
          *v104 = -54;
          *(_DWORD *)(v104 + 1) = bswap32(v100);
          *(_QWORD *)(v73 + 16) += 5;
          v83 = a1[3];
          if (!*(_BYTE *)(v83 + 40))
          {
LABEL_180:
            v105 = *(_DWORD *)(v70 + 12);
            v249[0] = -54;
            *(_DWORD *)&v249[1] = bswap32(v105);
            std::ostream::write();
            v106 = *(_DWORD *)(v70 + 16);
            v249[0] = -54;
            *(_DWORD *)&v249[1] = bswap32(v106);
            std::ostream::write();
            v107 = *(_DWORD *)(v70 + 20);
            v249[0] = -54;
            *(_DWORD *)&v249[1] = bswap32(v107);
            std::ostream::write();
            v108 = a1[3];
            if (!*(_BYTE *)(v108 + 40))
              goto LABEL_206;
            goto LABEL_181;
          }
        }
        else
        {
          v80 = *(_DWORD *)v70;
          v249[0] = -54;
          *(_DWORD *)&v249[1] = bswap32(v80);
          std::ostream::write();
          v81 = *(_DWORD *)(v70 + 4);
          v249[0] = -54;
          *(_DWORD *)&v249[1] = bswap32(v81);
          std::ostream::write();
          v82 = *(_DWORD *)(v70 + 8);
          v249[0] = -54;
          *(_DWORD *)&v249[1] = bswap32(v82);
          std::ostream::write();
          v83 = a1[3];
          if (!*(_BYTE *)(v83 + 40))
            goto LABEL_180;
        }
        v84 = *(_DWORD *)(v70 + 12);
        v85 = *(_QWORD *)(v83 + 32);
        v86 = *(_QWORD *)(v83 + 16);
        if ((unint64_t)(v85 - v86) >= 5)
        {
          v89 = *(char **)(v83 + 24);
        }
        else
        {
          if (v85)
            v87 = 2 * v85;
          else
            v87 = 0x2000;
          v88 = v86 + 5;
          while (v87 < v88)
          {
            v22 = (uint64_t)v87 <= 0;
            v87 *= 2;
            if (v22)
            {
              v87 = v88;
              break;
            }
          }
          v89 = (char *)malloc_type_realloc(*(void **)(v83 + 24), v87, 0xAD6A59EEuLL);
          if (!v89)
          {
LABEL_399:
            v242 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v243 = std::bad_alloc::bad_alloc(v242);
            __cxa_throw(v243, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v83 + 24) = v89;
          *(_QWORD *)(v83 + 32) = v87;
          v86 = *(_QWORD *)(v83 + 16);
        }
        v109 = &v89[v86];
        *v109 = -54;
        *(_DWORD *)(v109 + 1) = bswap32(v84);
        v110 = *(_QWORD *)(v83 + 16);
        v111 = v110 + 5;
        *(_QWORD *)(v83 + 16) = v110 + 5;
        v112 = *(_DWORD *)(v70 + 16);
        v113 = *(_QWORD *)(v83 + 32);
        if ((unint64_t)(v113 - (v110 + 5)) >= 5)
        {
          v115 = *(char **)(v83 + 24);
        }
        else
        {
          if (v113)
            v114 = 2 * v113;
          else
            v114 = 0x2000;
          while (v114 < v110 + 10)
          {
            v22 = (uint64_t)v114 <= 0;
            v114 *= 2;
            if (v22)
            {
              v114 = v110 + 10;
              break;
            }
          }
          v115 = (char *)malloc_type_realloc(*(void **)(v83 + 24), v114, 0xAD6A59EEuLL);
          if (!v115)
            goto LABEL_399;
          *(_QWORD *)(v83 + 24) = v115;
          *(_QWORD *)(v83 + 32) = v114;
          v111 = *(_QWORD *)(v83 + 16);
        }
        v116 = &v115[v111];
        *v116 = -54;
        *(_DWORD *)(v116 + 1) = bswap32(v112);
        v117 = *(_QWORD *)(v83 + 16);
        v118 = v117 + 5;
        *(_QWORD *)(v83 + 16) = v117 + 5;
        v119 = *(_DWORD *)(v70 + 20);
        v120 = *(_QWORD *)(v83 + 32);
        if ((unint64_t)(v120 - (v117 + 5)) >= 5)
        {
          v122 = *(char **)(v83 + 24);
        }
        else
        {
          if (v120)
            v121 = 2 * v120;
          else
            v121 = 0x2000;
          while (v121 < v117 + 10)
          {
            v22 = (uint64_t)v121 <= 0;
            v121 *= 2;
            if (v22)
            {
              v121 = v117 + 10;
              break;
            }
          }
          v122 = (char *)malloc_type_realloc(*(void **)(v83 + 24), v121, 0xAD6A59EEuLL);
          if (!v122)
            goto LABEL_399;
          *(_QWORD *)(v83 + 24) = v122;
          *(_QWORD *)(v83 + 32) = v121;
          v118 = *(_QWORD *)(v83 + 16);
        }
        v123 = &v122[v118];
        *v123 = -54;
        *(_DWORD *)(v123 + 1) = bswap32(v119);
        *(_QWORD *)(v83 + 16) += 5;
        v108 = a1[3];
        if (!*(_BYTE *)(v108 + 40))
        {
LABEL_206:
          v124 = *(char *)(v70 + 24);
          if (v124 < 0)
          {
            v249[0] = -52;
            v249[1] = v124;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 24);
          }
          std::ostream::write();
          v125 = *(char *)(v70 + 25);
          if (v125 < 0)
          {
            v249[0] = -52;
            v249[1] = v125;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 25);
          }
          std::ostream::write();
          v126 = *(char *)(v70 + 26);
          if (v126 < 0)
          {
            v249[0] = -52;
            v249[1] = v126;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 26);
          }
          std::ostream::write();
          v127 = *(char *)(v70 + 27);
          if (v127 < 0)
          {
            v249[0] = -52;
            v249[1] = v127;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 27);
          }
          std::ostream::write();
          v128 = *(char *)(v70 + 28);
          if (v128 < 0)
          {
            v249[0] = -52;
            v249[1] = v128;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 28);
          }
          std::ostream::write();
          v129 = *(char *)(v70 + 29);
          if (v129 < 0)
          {
            v249[0] = -52;
            v249[1] = v129;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 29);
          }
          std::ostream::write();
          v130 = *(char *)(v70 + 30);
          if (v130 < 0)
          {
            v249[0] = -52;
            v249[1] = v130;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 30);
          }
          std::ostream::write();
          v131 = *(char *)(v70 + 31);
          if (v131 < 0)
          {
            v249[0] = -52;
            v249[1] = v131;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 31);
          }
          std::ostream::write();
          v132 = *(char *)(v70 + 32);
          if (v132 < 0)
          {
            v249[0] = -52;
            v249[1] = v132;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 32);
          }
          std::ostream::write();
          v133 = *(char *)(v70 + 33);
          if (v133 < 0)
          {
            v249[0] = -52;
            v249[1] = v133;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 33);
          }
          std::ostream::write();
          v134 = *(char *)(v70 + 34);
          if (v134 < 0)
          {
            v249[0] = -52;
            v249[1] = v134;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 34);
          }
          std::ostream::write();
          v135 = *(char *)(v70 + 35);
          if (v135 < 0)
          {
            v249[0] = -52;
            v249[1] = v135;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 35);
          }
          std::ostream::write();
          v136 = *(char *)(v70 + 36);
          if (v136 < 0)
          {
            v249[0] = -52;
            v249[1] = v136;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 36);
          }
          std::ostream::write();
          v137 = *(char *)(v70 + 37);
          if (v137 < 0)
          {
            v249[0] = -52;
            v249[1] = v137;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 37);
          }
          std::ostream::write();
          v138 = *(char *)(v70 + 38);
          if (v138 < 0)
          {
            v249[0] = -52;
            v249[1] = v138;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 38);
          }
          std::ostream::write();
          v139 = *(char *)(v70 + 39);
          if (v139 < 0)
          {
            v249[0] = -52;
            v249[1] = v139;
          }
          else
          {
            v249[0] = *(_BYTE *)(v70 + 39);
          }
          std::ostream::write();
          continue;
        }
LABEL_181:
        *(_QWORD *)v249 = v108 + 16;
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 24));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 25));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 26));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 27));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 28));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 29));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 30));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 31));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 32));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 33));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 34));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 35));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 36));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 37));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 38));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v70 + 39));
      }
      v140 = a1[3];
      if (*(_BYTE *)(v140 + 40))
      {
        *(_QWORD *)v249 = v140 + 16;
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 560));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 564));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 568));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 572));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 576));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 580));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 584));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 588));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 592));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 596));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 600));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 604));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 608));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 612));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 616));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(a2 + 620));
      }
      else
      {
        v141 = *(_DWORD *)(a2 + 560);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v141);
        std::ostream::write();
        v142 = *(_DWORD *)(a2 + 564);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v142);
        std::ostream::write();
        v143 = *(_DWORD *)(a2 + 568);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v143);
        std::ostream::write();
        v144 = *(_DWORD *)(a2 + 572);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v144);
        std::ostream::write();
        v145 = *(_DWORD *)(a2 + 576);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v145);
        std::ostream::write();
        v146 = *(_DWORD *)(a2 + 580);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v146);
        std::ostream::write();
        v147 = *(_DWORD *)(a2 + 584);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v147);
        std::ostream::write();
        v148 = *(_DWORD *)(a2 + 588);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v148);
        std::ostream::write();
        v149 = *(_DWORD *)(a2 + 592);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v149);
        std::ostream::write();
        v150 = *(_DWORD *)(a2 + 596);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v150);
        std::ostream::write();
        v151 = *(_DWORD *)(a2 + 600);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v151);
        std::ostream::write();
        v152 = *(_DWORD *)(a2 + 604);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v152);
        std::ostream::write();
        v153 = *(_DWORD *)(a2 + 608);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v153);
        std::ostream::write();
        v154 = *(_DWORD *)(a2 + 612);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v154);
        std::ostream::write();
        v155 = *(_DWORD *)(a2 + 616);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v155);
        std::ostream::write();
        v156 = *(_DWORD *)(a2 + 620);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v156);
        std::ostream::write();
      }
    }
    else
    {
      v59 = a1[3];
      if (*(_BYTE *)(v59 + 40))
      {
        *(_QWORD *)v249 = v59 + 16;
        sub_224559C04((uint64_t **)v249, 0);
      }
      else
      {
        v249[0] = 0;
        std::ostream::write();
      }
    }
    v157 = a1[3];
    if (*(_BYTE *)(a2 + 736))
    {
      if (*(_BYTE *)(v157 + 40))
      {
        *(_QWORD *)v249 = v157 + 16;
        sub_224559C04((uint64_t **)v249, 1);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v158 = a1[3];
      if (*(_BYTE *)(v158 + 40))
      {
        *(_QWORD *)v249 = v158 + 16;
        sub_22455A7EC((uint64_t **)v249, 1u);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v159 = a1[3];
      if (*(_BYTE *)(v159 + 40))
      {
        *(_QWORD *)v249 = v159 + 16;
        sub_22455A7EC((uint64_t **)v249, 3u);
      }
      else
      {
        v249[0] = 3;
        std::ostream::write();
      }
      sub_2232FBBFC((uint64_t)a1, (char **)(a2 + 640));
    }
    else if (*(_BYTE *)(v157 + 40))
    {
      *(_QWORD *)v249 = v157 + 16;
      sub_224559C04((uint64_t **)v249, 0);
    }
    else
    {
      v249[0] = 0;
      std::ostream::write();
    }
  }
  else if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v249 = v5 + 16;
    sub_224559C04((uint64_t **)v249, 0);
  }
  else
  {
    v249[0] = 0;
    std::ostream::write();
  }
  if (*(_BYTE *)(a2 + 816))
  {
    v160 = a1[3];
    if (*(_BYTE *)(v160 + 40))
    {
      *(_QWORD *)v249 = v160 + 16;
      sub_224559C04((uint64_t **)v249, 1);
    }
    else
    {
      v249[0] = 1;
      std::ostream::write();
    }
    v162 = a1[3];
    if (*(_BYTE *)(v162 + 40))
    {
      *(_QWORD *)v249 = v162 + 16;
      sub_22455A7EC((uint64_t **)v249, 1u);
    }
    else
    {
      sub_22455AA60((uint64_t)v249, v162 + 8);
    }
    v163 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 760) - *(_QWORD *)(a2 + 752)) >> 6);
    v164 = a1[3];
    if (*(_BYTE *)(v164 + 40))
    {
      *(_QWORD *)v249 = v164 + 16;
      sub_22455B1CC((uint64_t **)v249, v163);
    }
    else
    {
      sub_22455B4D4();
    }
    v165 = *(_QWORD *)(a2 + 752);
    for (n = *(_QWORD *)(a2 + 760); v165 != n; v165 += 1472)
    {
      v167 = a1[3];
      if (*(_BYTE *)(v167 + 40))
      {
        *(_QWORD *)v249 = v167 + 16;
        sub_22455A7EC((uint64_t **)v249, 1u);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v168 = a1[3];
      if (*(_BYTE *)(v168 + 40))
      {
        *(_QWORD *)v249 = v168 + 16;
        sub_224559C04((uint64_t **)v249, *(_BYTE *)v165);
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 1));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 2));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 3));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 4));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 5));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 6));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 7));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 8));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 9));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 10));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 11));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 12));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 13));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 14));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 15));
      }
      else
      {
        for (ii = 0; ii != 16; ++ii)
        {
          v171 = *(char *)(v165 + ii);
          if (v171 < 0)
          {
            v249[0] = -52;
            v249[1] = v171;
          }
          else
          {
            v249[0] = *(_BYTE *)(v165 + ii);
          }
          std::ostream::write();
        }
      }
      if (*(_BYTE *)(v165 + 1376))
      {
        v169 = a1[3];
        if (*(_BYTE *)(v169 + 40))
        {
          *(_QWORD *)v249 = v169 + 16;
          sub_224559C04((uint64_t **)v249, 1);
        }
        else
        {
          v249[0] = 1;
          std::ostream::write();
        }
        v173 = a1[3];
        if (*(_BYTE *)(v173 + 40))
        {
          *(_QWORD *)v249 = v173 + 16;
          sub_22455A7EC((uint64_t **)v249, 0xBu);
        }
        else
        {
          v249[0] = 11;
          std::ostream::write();
        }
        sub_22319D04C(a1, v165 + 16, 0xBu);
      }
      else
      {
        v172 = a1[3];
        if (*(_BYTE *)(v172 + 40))
        {
          *(_QWORD *)v249 = v172 + 16;
          sub_224559C04((uint64_t **)v249, 0);
        }
        else
        {
          v249[0] = 0;
          std::ostream::write();
        }
      }
      v174 = a1[3];
      if (*(_BYTE *)(v174 + 40))
      {
        *(_QWORD *)v249 = v174 + 16;
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1384));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1388));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1392));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1396));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1400));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1404));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1408));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1412));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1416));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1420));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1424));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1428));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1432));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1436));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1440));
        sub_22455B5CC((uint64_t)&v247, (uint64_t **)v249, (unsigned int *)(v165 + 1444));
      }
      else
      {
        v175 = *(_DWORD *)(v165 + 1384);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v175);
        std::ostream::write();
        v176 = *(_DWORD *)(v165 + 1388);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v176);
        std::ostream::write();
        v177 = *(_DWORD *)(v165 + 1392);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v177);
        std::ostream::write();
        v178 = *(_DWORD *)(v165 + 1396);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v178);
        std::ostream::write();
        v179 = *(_DWORD *)(v165 + 1400);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v179);
        std::ostream::write();
        v180 = *(_DWORD *)(v165 + 1404);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v180);
        std::ostream::write();
        v181 = *(_DWORD *)(v165 + 1408);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v181);
        std::ostream::write();
        v182 = *(_DWORD *)(v165 + 1412);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v182);
        std::ostream::write();
        v183 = *(_DWORD *)(v165 + 1416);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v183);
        std::ostream::write();
        v184 = *(_DWORD *)(v165 + 1420);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v184);
        std::ostream::write();
        v185 = *(_DWORD *)(v165 + 1424);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v185);
        std::ostream::write();
        v186 = *(_DWORD *)(v165 + 1428);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v186);
        std::ostream::write();
        v187 = *(_DWORD *)(v165 + 1432);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v187);
        std::ostream::write();
        v188 = *(_DWORD *)(v165 + 1436);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v188);
        std::ostream::write();
        v189 = *(_DWORD *)(v165 + 1440);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v189);
        std::ostream::write();
        v190 = *(_DWORD *)(v165 + 1444);
        v249[0] = -54;
        *(_DWORD *)&v249[1] = bswap32(v190);
        std::ostream::write();
      }
      v191 = *(_QWORD *)(v165 + 1448);
      v192 = a1[3];
      if (*(_BYTE *)(v192 + 40))
      {
        *(_QWORD *)v249 = v192 + 16;
        sub_22455AB50((uint64_t **)v249, v191);
      }
      else
      {
        sub_22455B08C();
      }
      v193 = *(_QWORD *)(v165 + 1456);
      v194 = a1[3];
      if (*(_BYTE *)(v194 + 40))
      {
        *(_QWORD *)v249 = v194 + 16;
        sub_22455AB50((uint64_t **)v249, v193);
      }
      else
      {
        sub_22455B08C();
      }
      v195 = a1[3];
      if (*(_BYTE *)(v195 + 40))
      {
        *(_QWORD *)v249 = v195 + 16;
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v165 + 1464));
      }
      else
      {
        v196 = *(char *)(v165 + 1464);
        if (v196 < 0)
        {
          v249[0] = -52;
          v249[1] = v196;
        }
        else
        {
          v249[0] = *(_BYTE *)(v165 + 1464);
        }
        std::ostream::write();
      }
    }
    if (*(_BYTE *)(a2 + 777))
    {
      v197 = a1[3];
      if (*(_BYTE *)(v197 + 40))
      {
        *(_QWORD *)v249 = v197 + 16;
        sub_224559C04((uint64_t **)v249, 1);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v199 = a1[3];
      if (*(_BYTE *)(v199 + 40))
      {
        *(_QWORD *)v249 = v199 + 16;
        sub_22455A7EC((uint64_t **)v249, 1u);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v200 = a1[3];
      if (*(_BYTE *)(v200 + 40))
      {
        *(_QWORD *)v249 = v200 + 16;
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(a2 + 776));
      }
      else
      {
        v201 = *(char *)(a2 + 776);
        if (v201 < 0)
        {
          v249[0] = -52;
          v249[1] = v201;
        }
        else
        {
          v249[0] = *(_BYTE *)(a2 + 776);
        }
        std::ostream::write();
      }
    }
    else
    {
      v198 = a1[3];
      if (*(_BYTE *)(v198 + 40))
      {
        *(_QWORD *)v249 = v198 + 16;
        sub_224559C04((uint64_t **)v249, 0);
      }
      else
      {
        v249[0] = 0;
        std::ostream::write();
      }
    }
    v202 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 792) - *(_QWORD *)(a2 + 784)) >> 5);
    v203 = a1[3];
    if (*(_BYTE *)(v203 + 40))
    {
      *(_QWORD *)v249 = v203 + 16;
      sub_22455B1CC((uint64_t **)v249, v202);
    }
    else
    {
      sub_22455B4D4();
    }
    v204 = *(_QWORD *)(a2 + 784);
    for (jj = *(_QWORD *)(a2 + 792); v204 != jj; v204 += 160)
    {
      v206 = a1[3];
      if (*(_BYTE *)(v206 + 40))
      {
        *(_QWORD *)v249 = v206 + 16;
        sub_22455A7EC((uint64_t **)v249, 1u);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v207 = a1[3];
      if (*(_BYTE *)(v207 + 40))
      {
        *(_QWORD *)v249 = v207 + 16;
        sub_224559C04((uint64_t **)v249, *(_BYTE *)v204);
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 1));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 2));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 3));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 4));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 5));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 6));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 7));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 8));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 9));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 10));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 11));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 12));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 13));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 14));
        sub_224559C04((uint64_t **)v249, *(_BYTE *)(v204 + 15));
      }
      else
      {
        for (kk = 0; kk != 16; ++kk)
        {
          v210 = *(char *)(v204 + kk);
          if (v210 < 0)
          {
            v249[0] = -52;
            v249[1] = v210;
          }
          else
          {
            v249[0] = *(_BYTE *)(v204 + kk);
          }
          std::ostream::write();
        }
      }
      if (*(_BYTE *)(v204 + 152))
      {
        v208 = a1[3];
        if (*(_BYTE *)(v208 + 40))
        {
          *(_QWORD *)v249 = v208 + 16;
          sub_224559C04((uint64_t **)v249, 1);
        }
        else
        {
          v249[0] = 1;
          std::ostream::write();
        }
        v212 = a1[3];
        if (*(_BYTE *)(v212 + 40))
        {
          *(_QWORD *)v249 = v212 + 16;
          sub_22455A7EC((uint64_t **)v249, 1u);
        }
        else
        {
          v249[0] = 1;
          std::ostream::write();
        }
        v213 = *(_QWORD *)(v204 + 16);
        v214 = a1[3];
        if (*(_BYTE *)(v214 + 40))
        {
          *(_QWORD *)v249 = v214 + 16;
          sub_22455AB50((uint64_t **)v249, v213);
        }
        else
        {
          sub_22455B08C();
        }
        v215 = a1[3];
        if (*(_BYTE *)(v215 + 40))
        {
          *(_QWORD *)v249 = v215 + 16;
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 24));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 32));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 40));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 48));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 56));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 64));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 72));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 80));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 88));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 96));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 104));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 112));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 120));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 128));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 136));
          sub_22455B6A8((uint64_t)&v247, (uint64_t **)v249, (unint64_t *)(v204 + 144));
        }
        else
        {
          *(_QWORD *)&v249[1] = bswap64(*(_QWORD *)(v204 + 24));
          v249[0] = -53;
          std::ostream::write();
          v216 = *(_QWORD *)(v204 + 32);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v216);
          std::ostream::write();
          v217 = *(_QWORD *)(v204 + 40);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v217);
          std::ostream::write();
          v218 = *(_QWORD *)(v204 + 48);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v218);
          std::ostream::write();
          v219 = *(_QWORD *)(v204 + 56);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v219);
          std::ostream::write();
          v220 = *(_QWORD *)(v204 + 64);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v220);
          std::ostream::write();
          v221 = *(_QWORD *)(v204 + 72);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v221);
          std::ostream::write();
          v222 = *(_QWORD *)(v204 + 80);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v222);
          std::ostream::write();
          v223 = *(_QWORD *)(v204 + 88);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v223);
          std::ostream::write();
          v224 = *(_QWORD *)(v204 + 96);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v224);
          std::ostream::write();
          v225 = *(_QWORD *)(v204 + 104);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v225);
          std::ostream::write();
          v226 = *(_QWORD *)(v204 + 112);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v226);
          std::ostream::write();
          v227 = *(_QWORD *)(v204 + 120);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v227);
          std::ostream::write();
          v228 = *(_QWORD *)(v204 + 128);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v228);
          std::ostream::write();
          v229 = *(_QWORD *)(v204 + 136);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v229);
          std::ostream::write();
          v230 = *(_QWORD *)(v204 + 144);
          v249[0] = -53;
          *(_QWORD *)&v249[1] = bswap64(v230);
          std::ostream::write();
        }
      }
      else
      {
        v211 = a1[3];
        if (*(_BYTE *)(v211 + 40))
        {
          *(_QWORD *)v249 = v211 + 16;
          sub_224559C04((uint64_t **)v249, 0);
        }
        else
        {
          v249[0] = 0;
          std::ostream::write();
        }
      }
    }
    v231 = *(_QWORD *)(a2 + 808);
    v232 = a1[3];
    if (*(_BYTE *)(v232 + 40))
    {
      *(_QWORD *)v249 = v232 + 16;
      sub_22455AB50((uint64_t **)v249, v231);
    }
    else
    {
      sub_22455B08C();
    }
  }
  else
  {
    v161 = a1[3];
    if (*(_BYTE *)(v161 + 40))
    {
      *(_QWORD *)v249 = v161 + 16;
      sub_224559C04((uint64_t **)v249, 0);
    }
    else
    {
      v249[0] = 0;
      std::ostream::write();
    }
  }
  if (*(_BYTE *)(a2 + 896))
  {
    v233 = a1[3];
    if (*(_BYTE *)(v233 + 40))
    {
      *(_QWORD *)v249 = v233 + 16;
      sub_224559C04((uint64_t **)v249, 1);
    }
    else
    {
      v249[0] = 1;
      std::ostream::write();
    }
    v236 = a1[3];
    if (*(_BYTE *)(v236 + 40))
    {
      *(_QWORD *)v249 = v236 + 16;
      sub_22455A7EC((uint64_t **)v249, 1u);
    }
    else
    {
      sub_22455AA60((uint64_t)v249, v236 + 8);
    }
    result = (char *)sub_2232FDEAC((uint64_t)a1, (uint64_t *)(a2 + 824));
  }
  else
  {
    v234 = a1[3];
    if (*(_BYTE *)(v234 + 40))
    {
      *(_QWORD *)v249 = v234 + 16;
      result = sub_224559C04((uint64_t **)v249, 0);
    }
    else
    {
      v249[0] = 0;
      result = (char *)std::ostream::write();
    }
  }
  if (a3 >= 2)
  {
    if (*(_BYTE *)(a2 + 908))
    {
      v237 = a1[3];
      if (*(_BYTE *)(v237 + 40))
      {
        *(_QWORD *)v249 = v237 + 16;
        sub_224559C04((uint64_t **)v249, 1);
      }
      else
      {
        v249[0] = 1;
        std::ostream::write();
      }
      v239 = a1[3];
      if (*(_BYTE *)(v239 + 40))
      {
        *(_QWORD *)v249 = v239 + 16;
        return sub_22455A7EC((uint64_t **)v249, *(_DWORD *)(a2 + 904));
      }
      else
      {
        return (char *)sub_22455AA60((uint64_t)v249, v239 + 8);
      }
    }
    else
    {
      v238 = a1[3];
      if (*(_BYTE *)(v238 + 40))
      {
        *(_QWORD *)v249 = v238 + 16;
        return sub_224559C04((uint64_t **)v249, 0);
      }
      else
      {
        v249[0] = 0;
        return (char *)std::ostream::write();
      }
    }
  }
  return result;
}

uint64_t sub_2232FBBFC(uint64_t a1, char **a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t result;
  char *v56;
  char *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t j;
  int v62;
  std::bad_alloc *exception;
  std::bad_alloc *v64;
  uint64_t *v65;

  v4 = (a2[1] - *a2) >> 4;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v65 = (uint64_t *)(v5 + 16);
    sub_22455B1CC(&v65, v4);
    v6 = *a2;
    v7 = a2[1];
    if (v7 == *a2)
      goto LABEL_14;
  }
  else
  {
    sub_22455B4D4();
    v6 = *a2;
    v7 = a2[1];
    if (v7 == *a2)
      goto LABEL_14;
  }
  do
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v65 = (uint64_t *)(v8 + 16);
      sub_224559C04(&v65, *v6);
      sub_224559C04(&v65, v6[1]);
      sub_224559C04(&v65, v6[2]);
      sub_224559C04(&v65, v6[3]);
      sub_224559C04(&v65, v6[4]);
      sub_224559C04(&v65, v6[5]);
      sub_224559C04(&v65, v6[6]);
      sub_224559C04(&v65, v6[7]);
      sub_224559C04(&v65, v6[8]);
      sub_224559C04(&v65, v6[9]);
      sub_224559C04(&v65, v6[10]);
      sub_224559C04(&v65, v6[11]);
      sub_224559C04(&v65, v6[12]);
      sub_224559C04(&v65, v6[13]);
      sub_224559C04(&v65, v6[14]);
      sub_224559C04(&v65, v6[15]);
    }
    else
    {
      for (i = 0; i != 16; ++i)
      {
        while (1)
        {
          v10 = v6[i];
          if ((v10 & 0x80000000) == 0)
            break;
          LOBYTE(v65) = -52;
          BYTE1(v65) = v10;
          std::ostream::write();
          if (++i == 16)
            goto LABEL_7;
        }
        LOBYTE(v65) = v6[i];
        std::ostream::write();
      }
    }
LABEL_7:
    v6 += 16;
  }
  while (v6 != v7);
LABEL_14:
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 7);
  v12 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v12 + 40))
  {
    v65 = (uint64_t *)(v12 + 16);
    sub_22455B1CC(&v65, v11);
    v13 = (uint64_t)a2[3];
    v14 = (uint64_t)&a2[4][-v13];
    if (!v14)
      goto LABEL_28;
  }
  else
  {
    sub_22455B4D4();
    v13 = (uint64_t)a2[3];
    v14 = (uint64_t)&a2[4][-v13];
    if (!v14)
      goto LABEL_28;
  }
  v15 = 384 * (v14 / 384);
  do
  {
    v16 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v16 + 40))
    {
      v65 = (uint64_t *)(v16 + 16);
      sub_22455A7EC(&v65, 4u);
    }
    else
    {
      sub_22455AA60((uint64_t)&v65, v16 + 8);
    }
    sub_224555278(*(_QWORD *)(a1 + 24));
    sub_2232FC4DC(a1, v13, 4u);
    v17 = *(_QWORD *)(a1 + 24);
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 88) - 8);
    sub_224554D6C((uint64_t *)(v17 + 48), *(_QWORD *)(v17 + 16) - v18 - 9);
    v19 = *(_QWORD *)(v17 + 48);
    if (v19)
      memmove((void *)(*(_QWORD *)(v17 + 24) + v18), *(const void **)(v17 + 56), v19);
    *(_QWORD *)(v17 + 48) = 0;
    v20 = *(_QWORD *)(v17 + 80);
    v21 = *(_QWORD *)(v17 + 88) - 8;
    *(_QWORD *)(v17 + 88) = v21;
    if (v20 == v21)
    {
      std::ostream::write();
      if (*(_BYTE *)(v17 + 40))
      {
        free(*(void **)(v17 + 24));
        *(_BYTE *)(v17 + 40) = 0;
      }
    }
    v13 += 384;
    v15 -= 384;
  }
  while (v15);
LABEL_28:
  v22 = 0xF0F0F0F0F0F0F0F1 * ((a2[7] - a2[6]) >> 2);
  v23 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v23 + 40))
  {
    sub_22455B4D4();
    v24 = a2[6];
    v25 = a2[7];
    if (v25 == v24)
      goto LABEL_57;
LABEL_36:
    while (1)
    {
      v26 = *(_QWORD *)(a1 + 24);
      if (v24[64])
        break;
      if (!*(_BYTE *)(v26 + 40))
      {
        LOBYTE(v65) = 0;
LABEL_56:
        std::ostream::write();
        goto LABEL_35;
      }
      v65 = (uint64_t *)(v26 + 16);
      sub_224559C04(&v65, 0);
LABEL_35:
      v24 += 68;
      if (v24 == v25)
        goto LABEL_57;
    }
    if (*(_BYTE *)(v26 + 40))
    {
      v65 = (uint64_t *)(v26 + 16);
      sub_224559C04(&v65, 1);
      v27 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v27 + 40))
        goto LABEL_39;
    }
    else
    {
      LOBYTE(v65) = 1;
      std::ostream::write();
      v27 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v27 + 40))
      {
LABEL_39:
        v28 = 0;
        v29 = *(_QWORD *)(v27 + 16);
        do
        {
          v32 = *(_DWORD *)&v24[4 * v28];
          v33 = *(_QWORD *)(v27 + 32);
          if ((unint64_t)(v33 - v29) >= 5)
          {
            v30 = *(char **)(v27 + 24);
          }
          else
          {
            if (v33)
              v34 = 2 * v33;
            else
              v34 = 0x2000;
            v35 = v29 + 5;
            while (v34 < v35)
            {
              v36 = (uint64_t)v34 <= 0;
              v34 *= 2;
              if (v36)
              {
                v34 = v35;
                break;
              }
            }
            v30 = (char *)malloc_type_realloc(*(void **)(v27 + 24), v34, 0xAD6A59EEuLL);
            if (!v30)
            {
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v64 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v64, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v27 + 24) = v30;
            *(_QWORD *)(v27 + 32) = v34;
            v29 = *(_QWORD *)(v27 + 16);
          }
          v31 = &v30[v29];
          *v31 = -54;
          *(_DWORD *)(v31 + 1) = bswap32(v32);
          v29 = *(_QWORD *)(v27 + 16) + 5;
          *(_QWORD *)(v27 + 16) = v29;
          ++v28;
        }
        while (v28 != 16);
        goto LABEL_35;
      }
    }
    v37 = *(_DWORD *)v24;
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v37);
    std::ostream::write();
    v38 = *((_DWORD *)v24 + 1);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v38);
    std::ostream::write();
    v39 = *((_DWORD *)v24 + 2);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v39);
    std::ostream::write();
    v40 = *((_DWORD *)v24 + 3);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v40);
    std::ostream::write();
    v41 = *((_DWORD *)v24 + 4);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v41);
    std::ostream::write();
    v42 = *((_DWORD *)v24 + 5);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v42);
    std::ostream::write();
    v43 = *((_DWORD *)v24 + 6);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v43);
    std::ostream::write();
    v44 = *((_DWORD *)v24 + 7);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v44);
    std::ostream::write();
    v45 = *((_DWORD *)v24 + 8);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v45);
    std::ostream::write();
    v46 = *((_DWORD *)v24 + 9);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v46);
    std::ostream::write();
    v47 = *((_DWORD *)v24 + 10);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v47);
    std::ostream::write();
    v48 = *((_DWORD *)v24 + 11);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v48);
    std::ostream::write();
    v49 = *((_DWORD *)v24 + 12);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v49);
    std::ostream::write();
    v50 = *((_DWORD *)v24 + 13);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v50);
    std::ostream::write();
    v51 = *((_DWORD *)v24 + 14);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v51);
    std::ostream::write();
    v52 = *((_DWORD *)v24 + 15);
    LOBYTE(v65) = -54;
    *(_DWORD *)((char *)&v65 + 1) = bswap32(v52);
    goto LABEL_56;
  }
  v65 = (uint64_t *)(v23 + 16);
  sub_22455B1CC(&v65, v22);
  v24 = a2[6];
  v25 = a2[7];
  if (v25 != v24)
    goto LABEL_36;
LABEL_57:
  v53 = 0xF0F0F0F0F0F0F0F1 * (a2[10] - a2[9]);
  v54 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v54 + 40))
  {
    result = sub_22455B4D4();
    v57 = a2[9];
    v56 = a2[10];
    if (v56 == v57)
      return result;
    while (1)
    {
LABEL_66:
      v60 = *(_QWORD *)(a1 + 24);
      if (v57[16])
      {
        if (*(_BYTE *)(v60 + 40))
        {
          v65 = (uint64_t *)(v60 + 16);
          sub_224559C04(&v65, 1);
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
          {
LABEL_69:
            for (j = 0; j != 16; ++j)
            {
              while (1)
              {
                v62 = v57[j];
                if ((v62 & 0x80000000) == 0)
                  break;
                LOBYTE(v65) = -52;
                BYTE1(v65) = v62;
                result = std::ostream::write();
                if (++j == 16)
                  goto LABEL_65;
              }
              LOBYTE(v65) = v57[j];
              result = std::ostream::write();
            }
            goto LABEL_65;
          }
        }
        else
        {
          LOBYTE(v65) = 1;
          std::ostream::write();
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_69;
        }
        v65 = (uint64_t *)(v58 + 16);
        sub_224559C04(&v65, *v57);
        sub_224559C04(&v65, v57[1]);
        sub_224559C04(&v65, v57[2]);
        sub_224559C04(&v65, v57[3]);
        sub_224559C04(&v65, v57[4]);
        sub_224559C04(&v65, v57[5]);
        sub_224559C04(&v65, v57[6]);
        sub_224559C04(&v65, v57[7]);
        sub_224559C04(&v65, v57[8]);
        sub_224559C04(&v65, v57[9]);
        sub_224559C04(&v65, v57[10]);
        sub_224559C04(&v65, v57[11]);
        sub_224559C04(&v65, v57[12]);
        sub_224559C04(&v65, v57[13]);
        sub_224559C04(&v65, v57[14]);
        v59 = v57[15];
      }
      else
      {
        if (!*(_BYTE *)(v60 + 40))
        {
          LOBYTE(v65) = 0;
          result = std::ostream::write();
          goto LABEL_65;
        }
        v65 = (uint64_t *)(v60 + 16);
        v59 = 0;
      }
      result = (uint64_t)sub_224559C04(&v65, v59);
LABEL_65:
      v57 += 17;
      if (v57 == v56)
        return result;
    }
  }
  v65 = (uint64_t *)(v54 + 16);
  result = (uint64_t)sub_22455B1CC(&v65, v53);
  v57 = a2[9];
  v56 = a2[10];
  if (v56 != v57)
    goto LABEL_66;
  return result;
}

void sub_2232FC4DC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  BOOL v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *i;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *j;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  size_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  size_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  size_t v95;
  char *v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *k;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  size_t v149;
  size_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  size_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  std::bad_alloc *exception;
  std::bad_alloc *v183;
  uint64_t *v184;
  char v185;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v184 = (uint64_t *)(v7 + 16);
    sub_22455B1CC(&v184, v6);
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
      goto LABEL_7;
  }
  else
  {
    sub_22455B4D4();
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
    {
      do
      {
LABEL_7:
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v13 + 40))
            break;
          v10 = *v8;
          LOBYTE(v184) = -54;
          *(_DWORD *)((char *)&v184 + 1) = bswap32(v10);
          std::ostream::write();
          v11 = v8[1];
          LOBYTE(v184) = -54;
          *(_DWORD *)((char *)&v184 + 1) = bswap32(v11);
          std::ostream::write();
          v12 = v8[2];
          LOBYTE(v184) = -54;
          *(_DWORD *)((char *)&v184 + 1) = bswap32(v12);
          std::ostream::write();
          v8 += 3;
          if (v8 == v9)
            goto LABEL_43;
        }
        v14 = *v8;
        v15 = *(_QWORD *)(v13 + 32);
        v16 = *(_QWORD *)(v13 + 16);
        if ((unint64_t)(v15 - v16) >= 5)
        {
          v20 = *(char **)(v13 + 24);
        }
        else
        {
          if (v15)
            v17 = 2 * v15;
          else
            v17 = 0x2000;
          v18 = v16 + 5;
          while (v17 < v18)
          {
            v19 = (uint64_t)v17 <= 0;
            v17 *= 2;
            if (v19)
            {
              v17 = v18;
              break;
            }
          }
          v20 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v17, 0xAD6A59EEuLL);
          if (!v20)
          {
LABEL_296:
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v183 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v183, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v13 + 24) = v20;
          *(_QWORD *)(v13 + 32) = v17;
          v16 = *(_QWORD *)(v13 + 16);
        }
        v21 = &v20[v16];
        *v21 = -54;
        *(_DWORD *)(v21 + 1) = bswap32(v14);
        v22 = *(_QWORD *)(v13 + 16);
        v23 = v22 + 5;
        *(_QWORD *)(v13 + 16) = v22 + 5;
        v24 = v8[1];
        v25 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v25 - (v22 + 5)) >= 5)
        {
          v27 = *(char **)(v13 + 24);
        }
        else
        {
          if (v25)
            v26 = 2 * v25;
          else
            v26 = 0x2000;
          while (v26 < v22 + 10)
          {
            v19 = (uint64_t)v26 <= 0;
            v26 *= 2;
            if (v19)
            {
              v26 = v22 + 10;
              break;
            }
          }
          v27 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v26, 0xAD6A59EEuLL);
          if (!v27)
            goto LABEL_296;
          *(_QWORD *)(v13 + 24) = v27;
          *(_QWORD *)(v13 + 32) = v26;
          v23 = *(_QWORD *)(v13 + 16);
        }
        v28 = &v27[v23];
        *v28 = -54;
        *(_DWORD *)(v28 + 1) = bswap32(v24);
        v29 = *(_QWORD *)(v13 + 16);
        v30 = v29 + 5;
        *(_QWORD *)(v13 + 16) = v29 + 5;
        v31 = v8[2];
        v32 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v32 - (v29 + 5)) >= 5)
        {
          v34 = *(char **)(v13 + 24);
        }
        else
        {
          if (v32)
            v33 = 2 * v32;
          else
            v33 = 0x2000;
          while (v33 < v29 + 10)
          {
            v19 = (uint64_t)v33 <= 0;
            v33 *= 2;
            if (v19)
            {
              v33 = v29 + 10;
              break;
            }
          }
          v34 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v33, 0xAD6A59EEuLL);
          if (!v34)
            goto LABEL_296;
          *(_QWORD *)(v13 + 24) = v34;
          *(_QWORD *)(v13 + 32) = v33;
          v30 = *(_QWORD *)(v13 + 16);
        }
        v35 = &v34[v30];
        *v35 = -54;
        *(_DWORD *)(v35 + 1) = bswap32(v31);
        *(_QWORD *)(v13 + 16) += 5;
        v8 += 3;
      }
      while (v8 != v9);
    }
  }
LABEL_43:
  v36 = *(_DWORD *)(a2 + 32);
  v37 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v37 + 40))
  {
    v184 = (uint64_t *)(v37 + 16);
    sub_22455A7EC(&v184, v36);
  }
  else
  {
    sub_22455AA60((uint64_t)&v184, v37 + 8);
  }
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  v39 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v39 + 40))
  {
    v184 = (uint64_t *)(v39 + 16);
    sub_22455B1CC(&v184, v38);
    v40 = *(unsigned int **)(a2 + 40);
    i = *(unsigned int **)(a2 + 48);
    if (i != v40)
      goto LABEL_52;
  }
  else
  {
    sub_22455B4D4();
    v40 = *(unsigned int **)(a2 + 40);
    for (i = *(unsigned int **)(a2 + 48); v40 != i; v40 += 3)
    {
LABEL_52:
      while (1)
      {
        v45 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v45 + 40))
          break;
        v42 = *v40;
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v42);
        std::ostream::write();
        v43 = v40[1];
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v43);
        std::ostream::write();
        v44 = v40[2];
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v44);
        std::ostream::write();
        v40 += 3;
        if (v40 == i)
          goto LABEL_88;
      }
      v46 = *v40;
      v47 = *(_QWORD *)(v45 + 32);
      v48 = *(_QWORD *)(v45 + 16);
      if ((unint64_t)(v47 - v48) >= 5)
      {
        v51 = *(char **)(v45 + 24);
      }
      else
      {
        if (v47)
          v49 = 2 * v47;
        else
          v49 = 0x2000;
        v50 = v48 + 5;
        while (v49 < v50)
        {
          v19 = (uint64_t)v49 <= 0;
          v49 *= 2;
          if (v19)
          {
            v49 = v50;
            break;
          }
        }
        v51 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v49, 0xAD6A59EEuLL);
        if (!v51)
          goto LABEL_296;
        *(_QWORD *)(v45 + 24) = v51;
        *(_QWORD *)(v45 + 32) = v49;
        v48 = *(_QWORD *)(v45 + 16);
      }
      v52 = &v51[v48];
      *v52 = -54;
      *(_DWORD *)(v52 + 1) = bswap32(v46);
      v53 = *(_QWORD *)(v45 + 16);
      v54 = v53 + 5;
      *(_QWORD *)(v45 + 16) = v53 + 5;
      v55 = v40[1];
      v56 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v56 - (v53 + 5)) >= 5)
      {
        v58 = *(char **)(v45 + 24);
      }
      else
      {
        if (v56)
          v57 = 2 * v56;
        else
          v57 = 0x2000;
        while (v57 < v53 + 10)
        {
          v19 = (uint64_t)v57 <= 0;
          v57 *= 2;
          if (v19)
          {
            v57 = v53 + 10;
            break;
          }
        }
        v58 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v57, 0xAD6A59EEuLL);
        if (!v58)
          goto LABEL_296;
        *(_QWORD *)(v45 + 24) = v58;
        *(_QWORD *)(v45 + 32) = v57;
        v54 = *(_QWORD *)(v45 + 16);
      }
      v59 = &v58[v54];
      *v59 = -54;
      *(_DWORD *)(v59 + 1) = bswap32(v55);
      v60 = *(_QWORD *)(v45 + 16);
      v61 = v60 + 5;
      *(_QWORD *)(v45 + 16) = v60 + 5;
      v62 = v40[2];
      v63 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v63 - (v60 + 5)) >= 5)
      {
        v65 = *(char **)(v45 + 24);
      }
      else
      {
        if (v63)
          v64 = 2 * v63;
        else
          v64 = 0x2000;
        while (v64 < v60 + 10)
        {
          v19 = (uint64_t)v64 <= 0;
          v64 *= 2;
          if (v19)
          {
            v64 = v60 + 10;
            break;
          }
        }
        v65 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v64, 0xAD6A59EEuLL);
        if (!v65)
          goto LABEL_296;
        *(_QWORD *)(v45 + 24) = v65;
        *(_QWORD *)(v45 + 32) = v64;
        v61 = *(_QWORD *)(v45 + 16);
      }
      v66 = &v65[v61];
      *v66 = -54;
      *(_DWORD *)(v66 + 1) = bswap32(v62);
      *(_QWORD *)(v45 + 16) += 5;
    }
  }
LABEL_88:
  v67 = *(_DWORD *)(a2 + 72);
  v68 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v68 + 40))
  {
    v184 = (uint64_t *)(v68 + 16);
    sub_22455A7EC(&v184, v67);
  }
  else
  {
    sub_22455AA60((uint64_t)&v184, v68 + 8);
  }
  v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v70 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v70 + 40))
  {
    v184 = (uint64_t *)(v70 + 16);
    sub_22455B1CC(&v184, v69);
    v71 = *(unsigned int **)(a2 + 80);
    j = *(unsigned int **)(a2 + 88);
    if (j != v71)
      goto LABEL_97;
  }
  else
  {
    sub_22455B4D4();
    v71 = *(unsigned int **)(a2 + 80);
    for (j = *(unsigned int **)(a2 + 88); v71 != j; v71 += 3)
    {
LABEL_97:
      while (1)
      {
        v76 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v76 + 40))
          break;
        v73 = *v71;
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v73);
        std::ostream::write();
        v74 = v71[1];
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v74);
        std::ostream::write();
        v75 = v71[2];
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v75);
        std::ostream::write();
        v71 += 3;
        if (v71 == j)
          goto LABEL_133;
      }
      v77 = *v71;
      v78 = *(_QWORD *)(v76 + 32);
      v79 = *(_QWORD *)(v76 + 16);
      if ((unint64_t)(v78 - v79) >= 5)
      {
        v82 = *(char **)(v76 + 24);
      }
      else
      {
        if (v78)
          v80 = 2 * v78;
        else
          v80 = 0x2000;
        v81 = v79 + 5;
        while (v80 < v81)
        {
          v19 = (uint64_t)v80 <= 0;
          v80 *= 2;
          if (v19)
          {
            v80 = v81;
            break;
          }
        }
        v82 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v80, 0xAD6A59EEuLL);
        if (!v82)
          goto LABEL_296;
        *(_QWORD *)(v76 + 24) = v82;
        *(_QWORD *)(v76 + 32) = v80;
        v79 = *(_QWORD *)(v76 + 16);
      }
      v83 = &v82[v79];
      *v83 = -54;
      *(_DWORD *)(v83 + 1) = bswap32(v77);
      v84 = *(_QWORD *)(v76 + 16);
      v85 = v84 + 5;
      *(_QWORD *)(v76 + 16) = v84 + 5;
      v86 = v71[1];
      v87 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v87 - (v84 + 5)) >= 5)
      {
        v89 = *(char **)(v76 + 24);
      }
      else
      {
        if (v87)
          v88 = 2 * v87;
        else
          v88 = 0x2000;
        while (v88 < v84 + 10)
        {
          v19 = (uint64_t)v88 <= 0;
          v88 *= 2;
          if (v19)
          {
            v88 = v84 + 10;
            break;
          }
        }
        v89 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v88, 0xAD6A59EEuLL);
        if (!v89)
          goto LABEL_296;
        *(_QWORD *)(v76 + 24) = v89;
        *(_QWORD *)(v76 + 32) = v88;
        v85 = *(_QWORD *)(v76 + 16);
      }
      v90 = &v89[v85];
      *v90 = -54;
      *(_DWORD *)(v90 + 1) = bswap32(v86);
      v91 = *(_QWORD *)(v76 + 16);
      v92 = v91 + 5;
      *(_QWORD *)(v76 + 16) = v91 + 5;
      v93 = v71[2];
      v94 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v94 - (v91 + 5)) >= 5)
      {
        v96 = *(char **)(v76 + 24);
      }
      else
      {
        if (v94)
          v95 = 2 * v94;
        else
          v95 = 0x2000;
        while (v95 < v91 + 10)
        {
          v19 = (uint64_t)v95 <= 0;
          v95 *= 2;
          if (v19)
          {
            v95 = v91 + 10;
            break;
          }
        }
        v96 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v95, 0xAD6A59EEuLL);
        if (!v96)
          goto LABEL_296;
        *(_QWORD *)(v76 + 24) = v96;
        *(_QWORD *)(v76 + 32) = v95;
        v92 = *(_QWORD *)(v76 + 16);
      }
      v97 = &v96[v92];
      *v97 = -54;
      *(_DWORD *)(v97 + 1) = bswap32(v93);
      *(_QWORD *)(v76 + 16) += 5;
    }
  }
LABEL_133:
  v98 = *(_DWORD *)(a2 + 112);
  v99 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v99 + 40))
  {
    v184 = (uint64_t *)(v99 + 16);
    sub_22455A7EC(&v184, v98);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
      goto LABEL_135;
  }
  else
  {
    sub_22455AA60((uint64_t)&v184, v99 + 8);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
    {
LABEL_135:
      v184 = (uint64_t *)(v101 + 16);
      sub_22455B1CC(&v184, v100);
      v103 = *(char **)(a2 + 120);
      v102 = *(char **)(a2 + 128);
      v104 = v102 - v103;
      v105 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v105 + 40))
        goto LABEL_136;
      goto LABEL_141;
    }
  }
  sub_22455B4D4();
  v103 = *(char **)(a2 + 120);
  v102 = *(char **)(a2 + 128);
  v104 = v102 - v103;
  v105 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v105 + 40))
  {
LABEL_136:
    v184 = (uint64_t *)(v105 + 16);
    if (v102 != v103)
    {
      do
      {
        v106 = *v103++;
        sub_224559C04(&v184, v106);
        --v104;
      }
      while (v104);
    }
    goto LABEL_146;
  }
LABEL_141:
  if (v102 != v103)
  {
    do
    {
      while (1)
      {
        v107 = *v103;
        if ((v107 & 0x80000000) == 0)
          break;
        LOBYTE(v184) = -52;
        BYTE1(v184) = v107;
        std::ostream::write();
        ++v103;
        if (!--v104)
          goto LABEL_146;
      }
      LOBYTE(v184) = *v103;
      std::ostream::write();
      ++v103;
      --v104;
    }
    while (v104);
  }
LABEL_146:
  v108 = *(_DWORD *)(a2 + 152);
  v109 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v109 + 40))
  {
    v184 = (uint64_t *)(v109 + 16);
    sub_22455A7EC(&v184, v108);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
      goto LABEL_148;
  }
  else
  {
    sub_22455AA60((uint64_t)&v184, v109 + 8);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
    {
LABEL_148:
      v184 = (uint64_t *)(v111 + 16);
      sub_22455B1CC(&v184, v110);
      v113 = *(char **)(a2 + 160);
      v112 = *(char **)(a2 + 168);
      v114 = v112 - v113;
      v115 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v115 + 40))
        goto LABEL_149;
      goto LABEL_154;
    }
  }
  sub_22455B4D4();
  v113 = *(char **)(a2 + 160);
  v112 = *(char **)(a2 + 168);
  v114 = v112 - v113;
  v115 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v115 + 40))
  {
LABEL_149:
    v184 = (uint64_t *)(v115 + 16);
    if (v112 != v113)
    {
      do
      {
        v116 = *v113++;
        sub_224559C04(&v184, v116);
        --v114;
      }
      while (v114);
    }
    goto LABEL_159;
  }
LABEL_154:
  if (v112 != v113)
  {
    do
    {
      while (1)
      {
        v117 = *v113;
        if ((v117 & 0x80000000) == 0)
          break;
        LOBYTE(v184) = -52;
        BYTE1(v184) = v117;
        std::ostream::write();
        ++v113;
        if (!--v114)
          goto LABEL_159;
      }
      LOBYTE(v184) = *v113;
      std::ostream::write();
      ++v113;
      --v114;
    }
    while (v114);
  }
LABEL_159:
  v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  v119 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v119 + 40))
  {
    sub_22455B4D4();
    v120 = *(_QWORD *)(a2 + 192);
    v121 = *(_QWORD *)(a2 + 200) - v120;
    if (!v121)
      goto LABEL_192;
    goto LABEL_163;
  }
  v184 = (uint64_t *)(v119 + 16);
  sub_22455B1CC(&v184, v118);
  v120 = *(_QWORD *)(a2 + 192);
  v121 = *(_QWORD *)(a2 + 200) - v120;
  if (v121)
  {
LABEL_163:
    v122 = (unsigned int *)(v120 + 8);
    v123 = 12 * (v121 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v125 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v125 + 40))
            break;
          v184 = (uint64_t *)(v125 + 16);
          sub_22455A7EC(&v184, *(v122 - 2));
          sub_22455A7EC(&v184, *(v122 - 1));
          v124 = *v122;
          v122 += 3;
          sub_22455A7EC(&v184, v124);
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        v126 = *(v122 - 2);
        if (v126 > 0xFF)
          break;
        if (v126 > 0x7F)
        {
          LOBYTE(v184) = -52;
          BYTE1(v184) = v126;
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
        else
        {
          LOBYTE(v184) = *(v122 - 2);
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
LABEL_174:
        if (v127 >= 0x10000)
        {
          LOBYTE(v184) = -50;
          *(_DWORD *)((char *)&v184 + 1) = bswap32(v127);
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
        else
        {
          LOBYTE(v184) = -51;
          *(_WORD *)((char *)&v184 + 1) = bswap32(v127) >> 16;
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
LABEL_186:
        if (v128 >= 0x80)
        {
          LOBYTE(v184) = -52;
          BYTE1(v184) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        else
        {
          LOBYTE(v184) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
      }
      if (HIWORD(v126))
      {
        LOBYTE(v184) = -50;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v126);
        std::ostream::write();
        v127 = *(v122 - 1);
        if (v127 < 0x100)
          goto LABEL_178;
        goto LABEL_174;
      }
      LOBYTE(v184) = -51;
      *(_WORD *)((char *)&v184 + 1) = bswap32(v126) >> 16;
      std::ostream::write();
      v127 = *(v122 - 1);
      if (v127 >= 0x100)
        goto LABEL_174;
LABEL_178:
      if (v127 >= 0x80)
      {
        LOBYTE(v184) = -52;
        BYTE1(v184) = v127;
        std::ostream::write();
        v128 = *v122;
        if (*v122 >= 0x100)
          goto LABEL_182;
        goto LABEL_186;
      }
      LOBYTE(v184) = v127;
      std::ostream::write();
      v128 = *v122;
      if (*v122 < 0x100)
        goto LABEL_186;
LABEL_182:
      if (v128 >= 0x10000)
      {
        LOBYTE(v184) = -50;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v128);
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
      else
      {
        LOBYTE(v184) = -51;
        *(_WORD *)((char *)&v184 + 1) = bswap32(v128) >> 16;
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
    }
  }
LABEL_192:
  v129 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  v130 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v130 + 40))
  {
    sub_22455B4D4();
    v131 = *(_QWORD *)(a2 + 224);
    v132 = *(_QWORD *)(a2 + 232) - v131;
    if (!v132)
      goto LABEL_217;
    goto LABEL_196;
  }
  v184 = (uint64_t *)(v130 + 16);
  sub_22455B1CC(&v184, v129);
  v131 = *(_QWORD *)(a2 + 224);
  v132 = *(_QWORD *)(a2 + 232) - v131;
  if (v132)
  {
LABEL_196:
    v133 = (unsigned int *)(v131 + 4);
    v134 = 8 * (v132 >> 3);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v136 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v136 + 40))
            break;
          v184 = (uint64_t *)(v136 + 16);
          sub_22455A7EC(&v184, *(v133 - 1));
          v135 = *v133;
          v133 += 2;
          sub_22455A7EC(&v184, v135);
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        v137 = *(v133 - 1);
        if (v137 <= 0xFF)
          break;
        if (!HIWORD(v137))
        {
          LOBYTE(v184) = -51;
          *(_WORD *)((char *)&v184 + 1) = bswap32(v137) >> 16;
          std::ostream::write();
          v138 = *v133;
          if (*v133 < 0x100)
            goto LABEL_211;
          goto LABEL_207;
        }
        LOBYTE(v184) = -50;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v137);
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
LABEL_211:
        if (v138 >= 0x80)
        {
          LOBYTE(v184) = -52;
          BYTE1(v184) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        else
        {
          LOBYTE(v184) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
      }
      if (v137 > 0x7F)
      {
        LOBYTE(v184) = -52;
        BYTE1(v184) = v137;
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
        goto LABEL_211;
      }
      LOBYTE(v184) = *(v133 - 1);
      std::ostream::write();
      v138 = *v133;
      if (*v133 < 0x100)
        goto LABEL_211;
LABEL_207:
      if (v138 >= 0x10000)
      {
        LOBYTE(v184) = -50;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v138);
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
      else
      {
        LOBYTE(v184) = -51;
        *(_WORD *)((char *)&v184 + 1) = bswap32(v138) >> 16;
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
    }
  }
LABEL_217:
  v139 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  v140 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v140 + 40))
  {
    v184 = (uint64_t *)(v140 + 16);
    sub_22455B1CC(&v184, v139);
    v141 = *(unsigned int **)(a2 + 256);
    k = *(unsigned int **)(a2 + 264);
    if (k != v141)
      goto LABEL_223;
  }
  else
  {
    sub_22455B4D4();
    v141 = *(unsigned int **)(a2 + 256);
    for (k = *(unsigned int **)(a2 + 264); v141 != k; v141 += 2)
    {
LABEL_223:
      while (1)
      {
        v145 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v145 + 40))
          break;
        v143 = *v141;
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v143);
        std::ostream::write();
        v144 = v141[1];
        LOBYTE(v184) = -54;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v144);
        std::ostream::write();
        v141 += 2;
        if (v141 == k)
          goto LABEL_248;
      }
      v146 = *v141;
      v147 = *(_QWORD *)(v145 + 32);
      v148 = *(_QWORD *)(v145 + 16);
      if ((unint64_t)(v147 - v148) >= 5)
      {
        v151 = *(char **)(v145 + 24);
      }
      else
      {
        if (v147)
          v149 = 2 * v147;
        else
          v149 = 0x2000;
        v150 = v148 + 5;
        while (v149 < v150)
        {
          v19 = (uint64_t)v149 <= 0;
          v149 *= 2;
          if (v19)
          {
            v149 = v150;
            break;
          }
        }
        v151 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v149, 0xAD6A59EEuLL);
        if (!v151)
          goto LABEL_296;
        *(_QWORD *)(v145 + 24) = v151;
        *(_QWORD *)(v145 + 32) = v149;
        v148 = *(_QWORD *)(v145 + 16);
      }
      v152 = &v151[v148];
      *v152 = -54;
      *(_DWORD *)(v152 + 1) = bswap32(v146);
      v153 = *(_QWORD *)(v145 + 16);
      v154 = v153 + 5;
      *(_QWORD *)(v145 + 16) = v153 + 5;
      v155 = v141[1];
      v156 = *(_QWORD *)(v145 + 32);
      if ((unint64_t)(v156 - (v153 + 5)) >= 5)
      {
        v158 = *(char **)(v145 + 24);
      }
      else
      {
        if (v156)
          v157 = 2 * v156;
        else
          v157 = 0x2000;
        while (v157 < v153 + 10)
        {
          v19 = (uint64_t)v157 <= 0;
          v157 *= 2;
          if (v19)
          {
            v157 = v153 + 10;
            break;
          }
        }
        v158 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v157, 0xAD6A59EEuLL);
        if (!v158)
          goto LABEL_296;
        *(_QWORD *)(v145 + 24) = v158;
        *(_QWORD *)(v145 + 32) = v157;
        v154 = *(_QWORD *)(v145 + 16);
      }
      v159 = &v158[v154];
      *v159 = -54;
      *(_DWORD *)(v159 + 1) = bswap32(v155);
      *(_QWORD *)(v145 + 16) += 5;
    }
  }
LABEL_248:
  v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  v161 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v161 + 40))
  {
    v184 = (uint64_t *)(v161 + 16);
    sub_22455B1CC(&v184, v160);
    v162 = *(_QWORD *)(a2 + 288);
    v163 = *(_QWORD *)(a2 + 296) - v162;
    if (!v163)
      goto LABEL_281;
    goto LABEL_252;
  }
  sub_22455B4D4();
  v162 = *(_QWORD *)(a2 + 288);
  v163 = *(_QWORD *)(a2 + 296) - v162;
  if (v163)
  {
LABEL_252:
    v164 = (unsigned int *)(v162 + 8);
    v165 = 12 * (v163 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v167 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v167 + 40))
            break;
          v184 = (uint64_t *)(v167 + 16);
          sub_22455A7EC(&v184, *(v164 - 2));
          sub_22455A7EC(&v184, *(v164 - 1));
          v166 = *v164;
          v164 += 3;
          sub_22455A7EC(&v184, v166);
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        v168 = *(v164 - 2);
        if (v168 > 0xFF)
          break;
        if (v168 > 0x7F)
        {
          LOBYTE(v184) = -52;
          BYTE1(v184) = v168;
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
        else
        {
          LOBYTE(v184) = *(v164 - 2);
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
LABEL_263:
        if (v169 >= 0x10000)
        {
          LOBYTE(v184) = -50;
          *(_DWORD *)((char *)&v184 + 1) = bswap32(v169);
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
        else
        {
          LOBYTE(v184) = -51;
          *(_WORD *)((char *)&v184 + 1) = bswap32(v169) >> 16;
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
LABEL_275:
        if (v170 >= 0x80)
        {
          LOBYTE(v184) = -52;
          BYTE1(v184) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        else
        {
          LOBYTE(v184) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
      }
      if (HIWORD(v168))
      {
        LOBYTE(v184) = -50;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v168);
        std::ostream::write();
        v169 = *(v164 - 1);
        if (v169 < 0x100)
          goto LABEL_267;
        goto LABEL_263;
      }
      LOBYTE(v184) = -51;
      *(_WORD *)((char *)&v184 + 1) = bswap32(v168) >> 16;
      std::ostream::write();
      v169 = *(v164 - 1);
      if (v169 >= 0x100)
        goto LABEL_263;
LABEL_267:
      if (v169 >= 0x80)
      {
        LOBYTE(v184) = -52;
        BYTE1(v184) = v169;
        std::ostream::write();
        v170 = *v164;
        if (*v164 >= 0x100)
          goto LABEL_271;
        goto LABEL_275;
      }
      LOBYTE(v184) = v169;
      std::ostream::write();
      v170 = *v164;
      if (*v164 < 0x100)
        goto LABEL_275;
LABEL_271:
      if (v170 >= 0x10000)
      {
        LOBYTE(v184) = -50;
        *(_DWORD *)((char *)&v184 + 1) = bswap32(v170);
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
      else
      {
        LOBYTE(v184) = -51;
        *(_WORD *)((char *)&v184 + 1) = bswap32(v170) >> 16;
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
    }
  }
LABEL_281:
  if (a3 < 2)
    return;
  sub_2232FDA2C(a1, a2 + 320);
  if (a3 < 4)
    return;
  v171 = *(_DWORD *)(a2 + 348);
  v172 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v172 + 40))
  {
    v184 = (uint64_t *)(v172 + 16);
    sub_22455A7EC(&v184, v171);
    v173 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
    v174 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v174 + 40))
      goto LABEL_285;
  }
  else
  {
    sub_22455AA60((uint64_t)&v184, v172 + 8);
    v173 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
    v174 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v174 + 40))
    {
LABEL_285:
      v184 = (uint64_t *)(v174 + 16);
      sub_22455B1CC(&v184, v173);
      v176 = *(unsigned int **)(a2 + 352);
      v175 = *(unsigned int **)(a2 + 360);
      v177 = v175 - v176;
      v178 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v178 + 40))
        goto LABEL_286;
      goto LABEL_292;
    }
  }
  sub_22455B4D4();
  v176 = *(unsigned int **)(a2 + 352);
  v175 = *(unsigned int **)(a2 + 360);
  v177 = v175 - v176;
  v178 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v178 + 40))
  {
LABEL_286:
    v184 = (uint64_t *)(v178 + 16);
    if (v175 != v176)
    {
      v179 = 4 * v177;
      do
      {
        sub_22455B5CC((uint64_t)&v185, &v184, v176++);
        v179 -= 4;
      }
      while (v179);
    }
    return;
  }
LABEL_292:
  if (v175 != v176)
  {
    v180 = 4 * v177;
    do
    {
      v181 = *v176++;
      LOBYTE(v184) = -54;
      *(_DWORD *)((char *)&v184 + 1) = bswap32(v181);
      std::ostream::write();
      v180 -= 4;
    }
    while (v180);
  }
}

void sub_2232FDA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 24))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v20 = (uint64_t *)(v2 + 16);
      sub_224559C04(&v20, 0);
    }
    else
    {
      std::ostream::write();
    }
    return;
  }
  if (*(_BYTE *)(v2 + 40))
  {
    v20 = (uint64_t *)(v2 + 16);
    sub_224559C04(&v20, 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_4;
  }
  else
  {
    LOBYTE(v20) = 1;
    std::ostream::write();
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
LABEL_4:
      v20 = (uint64_t *)(v5 + 16);
      sub_22455A7EC(&v20, 2u);
      sub_224555278(*(_QWORD *)(a1 + 24));
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v6 + 40))
        goto LABEL_5;
LABEL_12:
      v8 = *(_DWORD *)a2;
      LOBYTE(v20) = -54;
      *(_DWORD *)((char *)&v20 + 1) = bswap32(v8);
      std::ostream::write();
      v9 = *(_DWORD *)(a2 + 4);
      LOBYTE(v20) = -54;
      *(_DWORD *)((char *)&v20 + 1) = bswap32(v9);
      std::ostream::write();
      v10 = *(_DWORD *)(a2 + 8);
      LOBYTE(v20) = -54;
      *(_DWORD *)((char *)&v20 + 1) = bswap32(v10);
      std::ostream::write();
      v7 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v7 + 40))
        goto LABEL_6;
LABEL_13:
      v11 = *(_DWORD *)(a2 + 12);
      LOBYTE(v20) = -54;
      *(_DWORD *)((char *)&v20 + 1) = bswap32(v11);
      std::ostream::write();
      v12 = *(_DWORD *)(a2 + 16);
      LOBYTE(v20) = -54;
      *(_DWORD *)((char *)&v20 + 1) = bswap32(v12);
      std::ostream::write();
      v13 = *(_DWORD *)(a2 + 20);
      LOBYTE(v20) = -54;
      *(_DWORD *)((char *)&v20 + 1) = bswap32(v13);
      std::ostream::write();
      goto LABEL_14;
    }
  }
  sub_22455AA60((uint64_t)&v20, v5 + 8);
  sub_224555278(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_12;
LABEL_5:
  v20 = (uint64_t *)(v6 + 16);
  sub_22455B5CC((uint64_t)&v19, &v20, (unsigned int *)a2);
  sub_22455B5CC((uint64_t)&v19, &v20, (unsigned int *)(a2 + 4));
  sub_22455B5CC((uint64_t)&v19, &v20, (unsigned int *)(a2 + 8));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_13;
LABEL_6:
  v20 = (uint64_t *)(v7 + 16);
  sub_22455B5CC((uint64_t)&v19, &v20, (unsigned int *)(a2 + 12));
  sub_22455B5CC((uint64_t)&v19, &v20, (unsigned int *)(a2 + 16));
  sub_22455B5CC((uint64_t)&v19, &v20, (unsigned int *)(a2 + 20));
LABEL_14:
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 88) - 8);
  sub_224554D6C((uint64_t *)(v14 + 48), *(_QWORD *)(v14 + 16) - v15 - 9);
  v16 = *(_QWORD *)(v14 + 48);
  if (v16)
    memmove((void *)(*(_QWORD *)(v14 + 24) + v15), *(const void **)(v14 + 56), v16);
  *(_QWORD *)(v14 + 48) = 0;
  v17 = *(_QWORD *)(v14 + 80);
  v18 = *(_QWORD *)(v14 + 88) - 8;
  *(_QWORD *)(v14 + 88) = v18;
  if (v17 == v18)
  {
    std::ostream::write();
    if (*(_BYTE *)(v14 + 40))
    {
      free(*(void **)(v14 + 24));
      *(_BYTE *)(v14 + 40) = 0;
    }
  }
}

char *sub_2232FDD18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _BYTE *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t *v13;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 112))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v13 = (uint64_t *)(v2 + 16);
      return sub_224559C04(&v13, 0);
    }
    LOBYTE(v13) = 0;
    return (char *)std::ostream::write();
  }
  if (*(_BYTE *)(v2 + 40))
  {
    v13 = (uint64_t *)(v2 + 16);
    sub_224559C04(&v13, 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_4;
LABEL_9:
    sub_22455AA60((uint64_t)&v13, v5 + 8);
    v6 = (char **)(a2 + 8);
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_5;
LABEL_10:
    sub_22455AA60((uint64_t)&v13, v7 + 8);
    goto LABEL_11;
  }
  LOBYTE(v13) = 1;
  std::ostream::write();
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
    goto LABEL_9;
LABEL_4:
  v13 = (uint64_t *)(v5 + 16);
  sub_22455A7EC(&v13, 1u);
  v6 = (char **)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_10;
LABEL_5:
  v13 = (uint64_t *)(v7 + 16);
  sub_22455A7EC(&v13, 3u);
LABEL_11:
  sub_2232FBBFC(a1, v6);
  v9 = (_BYTE *)(a2 + 104);
  v10 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v10 + 40))
  {
    v13 = (uint64_t *)(v10 + 16);
    return (char *)sub_22455B784((uint64_t)&v12, &v13, v9);
  }
  if (*v9)
    v11 = -61;
  else
    v11 = -62;
  LOBYTE(v13) = v11;
  return (char *)std::ostream::write();
}

uint64_t sub_2232FDEAC(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *j;
  uint64_t v63;
  uint64_t v64;
  uint64_t k;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *m;
  char *v94;
  char *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  size_t v101;
  BOOL v102;
  char *v103;
  unsigned int v104;
  unsigned int v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  size_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  size_t v125;
  char *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  size_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  size_t v141;
  char *v142;
  char *v143;
  unsigned int v144;
  unsigned int v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  size_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned int **v155;
  unsigned int **v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  size_t v168;
  size_t v169;
  char *v170;
  unsigned int v171;
  unsigned int v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  size_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  char *n;
  uint64_t v187;
  uint64_t ii;
  int v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t result;
  char *v193;
  char *jj;
  uint64_t v195;
  uint64_t kk;
  int v197;
  std::bad_alloc *v198;
  std::bad_alloc *v199;
  std::bad_alloc *exception;
  std::bad_alloc *v201;
  std::bad_alloc *v202;
  std::bad_alloc *v203;
  std::bad_alloc *v204;
  std::bad_alloc *v205;
  uint64_t v207;
  uint64_t v208;
  char v209;
  _BYTE v210[9];
  uint64_t v211;

  v211 = *MEMORY[0x24BDAC8D0];
  v3 = 0xCBEEA4E1A08AD8F3 * ((a2[1] - *a2) >> 3);
  v4 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v4 + 40))
  {
    sub_22455B4D4();
    v207 = a2[1];
    v208 = *a2;
    if (v207 == *a2)
      goto LABEL_289;
    while (1)
    {
LABEL_8:
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v5 + 40))
      {
        *(_QWORD *)v210 = v5 + 16;
        sub_22455A7EC((uint64_t **)v210, 1u);
      }
      else
      {
        sub_22455AA60((uint64_t)v210, v5 + 8);
      }
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v6 + 40))
      {
        *(_QWORD *)v210 = v6 + 16;
        sub_224559C04((uint64_t **)v210, *(_BYTE *)v208);
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 1));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 2));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 3));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 4));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 5));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 6));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 7));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 8));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 9));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 10));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 11));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 12));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 13));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 14));
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 15));
      }
      else
      {
        for (i = 0; i != 16; ++i)
        {
          v9 = *(char *)(v208 + i);
          if (v9 < 0)
          {
            v210[0] = -52;
            v210[1] = v9;
          }
          else
          {
            v210[0] = *(_BYTE *)(v208 + i);
          }
          std::ostream::write();
        }
      }
      v7 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v7 + 40))
      {
        *(_QWORD *)v210 = v7 + 16;
        sub_22455A7EC((uint64_t **)v210, 1u);
      }
      else
      {
        v210[0] = 1;
        std::ostream::write();
      }
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v10 + 40))
      {
        *(_QWORD *)v210 = v10 + 16;
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 16));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 20));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 24));
      }
      else
      {
        v11 = *(_DWORD *)(v208 + 16);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v11);
        std::ostream::write();
        v12 = *(_DWORD *)(v208 + 20);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v12);
        std::ostream::write();
        v13 = *(_DWORD *)(v208 + 24);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v13);
        std::ostream::write();
      }
      v14 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v14 + 40))
      {
        *(_QWORD *)v210 = v14 + 16;
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 28));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 32));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 36));
      }
      else
      {
        v15 = *(_DWORD *)(v208 + 28);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v15);
        std::ostream::write();
        v16 = *(_DWORD *)(v208 + 32);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v16);
        std::ostream::write();
        v17 = *(_DWORD *)(v208 + 36);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v17);
        std::ostream::write();
      }
      v18 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v18 + 40))
      {
        *(_QWORD *)v210 = v18 + 16;
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 40));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 44));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 48));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 52));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 56));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 60));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 64));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 68));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 72));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 76));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 80));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 84));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 88));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 92));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 96));
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 100));
      }
      else
      {
        v19 = *(_DWORD *)(v208 + 40);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v19);
        std::ostream::write();
        v20 = *(_DWORD *)(v208 + 44);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v20);
        std::ostream::write();
        v21 = *(_DWORD *)(v208 + 48);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v21);
        std::ostream::write();
        v22 = *(_DWORD *)(v208 + 52);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v22);
        std::ostream::write();
        v23 = *(_DWORD *)(v208 + 56);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v23);
        std::ostream::write();
        v24 = *(_DWORD *)(v208 + 60);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v24);
        std::ostream::write();
        v25 = *(_DWORD *)(v208 + 64);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v25);
        std::ostream::write();
        v26 = *(_DWORD *)(v208 + 68);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v26);
        std::ostream::write();
        v27 = *(_DWORD *)(v208 + 72);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v27);
        std::ostream::write();
        v28 = *(_DWORD *)(v208 + 76);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v28);
        std::ostream::write();
        v29 = *(_DWORD *)(v208 + 80);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v29);
        std::ostream::write();
        v30 = *(_DWORD *)(v208 + 84);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v30);
        std::ostream::write();
        v31 = *(_DWORD *)(v208 + 88);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v31);
        std::ostream::write();
        v32 = *(_DWORD *)(v208 + 92);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v32);
        std::ostream::write();
        v33 = *(_DWORD *)(v208 + 96);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v33);
        std::ostream::write();
        v34 = *(_DWORD *)(v208 + 100);
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v34);
        std::ostream::write();
      }
      v35 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v35 + 40))
      {
        *(_QWORD *)v210 = v35 + 16;
        sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 104));
      }
      else
      {
        v36 = *(char *)(v208 + 104);
        if (v36 < 0)
        {
          v210[0] = -52;
          v210[1] = v36;
        }
        else
        {
          v210[0] = *(_BYTE *)(v208 + 104);
        }
        std::ostream::write();
      }
      v37 = (unsigned int *)(v208 + 108);
      v38 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v38 + 40))
      {
        *(_QWORD *)v210 = v38 + 16;
        sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, v37);
      }
      else
      {
        v39 = *v37;
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v39);
        std::ostream::write();
      }
      v40 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v208 + 216))
      {
        if (*(_BYTE *)(v40 + 40))
        {
          *(_QWORD *)v210 = v40 + 16;
          sub_224559C04((uint64_t **)v210, 1);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v41 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v41 + 40))
        {
          *(_QWORD *)v210 = v41 + 16;
          sub_22455A7EC((uint64_t **)v210, 1u);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v42 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v42 + 40))
        {
          *(_QWORD *)v210 = v42 + 16;
          sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 112));
        }
        else
        {
          v43 = *(char *)(v208 + 112);
          if (v43 < 0)
          {
            v210[0] = -52;
            v210[1] = v43;
          }
          else
          {
            v210[0] = *(_BYTE *)(v208 + 112);
          }
          std::ostream::write();
        }
        v44 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v44 + 40))
        {
          *(_QWORD *)v210 = v44 + 16;
          sub_22455A7EC((uint64_t **)v210, 1u);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v45 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v45 + 40))
        {
          *(_QWORD *)v210 = v45 + 16;
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 120));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 128));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 136));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 144));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 152));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 160));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 168));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 176));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 184));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 192));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 200));
          sub_22455B6A8((uint64_t)&v209, (uint64_t **)v210, (unint64_t *)(v208 + 208));
        }
        else
        {
          *(_QWORD *)&v210[1] = bswap64(*(_QWORD *)(v208 + 120));
          v210[0] = -53;
          std::ostream::write();
          v46 = *(_QWORD *)(v208 + 128);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v46);
          std::ostream::write();
          v47 = *(_QWORD *)(v208 + 136);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v47);
          std::ostream::write();
          v48 = *(_QWORD *)(v208 + 144);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v48);
          std::ostream::write();
          v49 = *(_QWORD *)(v208 + 152);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v49);
          std::ostream::write();
          v50 = *(_QWORD *)(v208 + 160);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v50);
          std::ostream::write();
          v51 = *(_QWORD *)(v208 + 168);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v51);
          std::ostream::write();
          v52 = *(_QWORD *)(v208 + 176);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v52);
          std::ostream::write();
          v53 = *(_QWORD *)(v208 + 184);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v53);
          std::ostream::write();
          v54 = *(_QWORD *)(v208 + 192);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v54);
          std::ostream::write();
          v55 = *(_QWORD *)(v208 + 200);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v55);
          std::ostream::write();
          v56 = *(_QWORD *)(v208 + 208);
          v210[0] = -53;
          *(_QWORD *)&v210[1] = bswap64(v56);
          std::ostream::write();
        }
      }
      else if (*(_BYTE *)(v40 + 40))
      {
        *(_QWORD *)v210 = v40 + 16;
        sub_224559C04((uint64_t **)v210, 0);
      }
      else
      {
        v210[0] = 0;
        std::ostream::write();
      }
      v57 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v57 + 40))
      {
        *(_QWORD *)v210 = v57 + 16;
        sub_22455A7EC((uint64_t **)v210, *(_DWORD *)(v208 + 224));
      }
      else
      {
        sub_22455AA60((uint64_t)v210, v57 + 8);
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
      {
        *(_QWORD *)v210 = v58 + 16;
        sub_22455A7EC((uint64_t **)v210, 2u);
      }
      else
      {
        v210[0] = 2;
        std::ostream::write();
      }
      sub_22330005C(a1, v208 + 232, 2u);
      v59 = (uint64_t)(*(_QWORD *)(v208 + 296) - *(_QWORD *)(v208 + 288)) >> 4;
      v60 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)v210 = v60 + 16;
        sub_22455B1CC((uint64_t **)v210, v59);
      }
      else
      {
        sub_22455B4D4();
      }
      v61 = *(char **)(v208 + 288);
      for (j = *(char **)(v208 + 296); v61 != j; v61 += 16)
      {
        v64 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v64 + 40))
        {
          *(_QWORD *)v210 = v64 + 16;
          sub_224559C04((uint64_t **)v210, *v61);
          sub_224559C04((uint64_t **)v210, v61[1]);
          sub_224559C04((uint64_t **)v210, v61[2]);
          sub_224559C04((uint64_t **)v210, v61[3]);
          sub_224559C04((uint64_t **)v210, v61[4]);
          sub_224559C04((uint64_t **)v210, v61[5]);
          sub_224559C04((uint64_t **)v210, v61[6]);
          sub_224559C04((uint64_t **)v210, v61[7]);
          sub_224559C04((uint64_t **)v210, v61[8]);
          sub_224559C04((uint64_t **)v210, v61[9]);
          sub_224559C04((uint64_t **)v210, v61[10]);
          sub_224559C04((uint64_t **)v210, v61[11]);
          sub_224559C04((uint64_t **)v210, v61[12]);
          sub_224559C04((uint64_t **)v210, v61[13]);
          sub_224559C04((uint64_t **)v210, v61[14]);
          sub_224559C04((uint64_t **)v210, v61[15]);
        }
        else
        {
          for (k = 0; k != 16; ++k)
          {
            v66 = v61[k];
            if (v66 < 0)
            {
              v210[0] = -52;
              v210[1] = v66;
            }
            else
            {
              v210[0] = v61[k];
            }
            std::ostream::write();
          }
        }
      }
      if (*(_BYTE *)(v208 + 328))
      {
        v63 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v63 + 40))
        {
          *(_QWORD *)v210 = v63 + 16;
          sub_224559C04((uint64_t **)v210, 1);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v68 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v68 + 40))
        {
          *(_QWORD *)v210 = v68 + 16;
          sub_22455A7EC((uint64_t **)v210, 1u);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v69 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v69 + 40))
        {
          *(_QWORD *)v210 = v69 + 16;
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 312));
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 316));
        }
        else
        {
          v70 = *(_DWORD *)(v208 + 312);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v70);
          std::ostream::write();
          v71 = *(_DWORD *)(v208 + 316);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v71);
          std::ostream::write();
        }
        v72 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v72 + 40))
        {
          *(_QWORD *)v210 = v72 + 16;
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 320));
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 324));
        }
        else
        {
          v73 = *(_DWORD *)(v208 + 320);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v73);
          std::ostream::write();
          v74 = *(_DWORD *)(v208 + 324);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v74);
          std::ostream::write();
        }
      }
      else
      {
        v67 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v67 + 40))
        {
          *(_QWORD *)v210 = v67 + 16;
          sub_224559C04((uint64_t **)v210, 0);
        }
        else
        {
          v210[0] = 0;
          std::ostream::write();
        }
      }
      v75 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v208 + 364))
      {
        if (*(_BYTE *)(v75 + 40))
        {
          *(_QWORD *)v210 = v75 + 16;
          sub_224559C04((uint64_t **)v210, 1);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v76 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v76 + 40))
        {
          *(_QWORD *)v210 = v76 + 16;
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 332));
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 336));
        }
        else
        {
          v77 = *(_DWORD *)(v208 + 332);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v77);
          std::ostream::write();
          v78 = *(_DWORD *)(v208 + 336);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v78);
          std::ostream::write();
        }
        v79 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v79 + 40))
        {
          *(_QWORD *)v210 = v79 + 16;
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 340));
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 344));
        }
        else
        {
          v80 = *(_DWORD *)(v208 + 340);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v80);
          std::ostream::write();
          v81 = *(_DWORD *)(v208 + 344);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v81);
          std::ostream::write();
        }
        v82 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v82 + 40))
        {
          *(_QWORD *)v210 = v82 + 16;
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 348));
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 352));
        }
        else
        {
          v83 = *(_DWORD *)(v208 + 348);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v83);
          std::ostream::write();
          v84 = *(_DWORD *)(v208 + 352);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v84);
          std::ostream::write();
        }
        v85 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v85 + 40))
        {
          *(_QWORD *)v210 = v85 + 16;
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 356));
          sub_22455B5CC((uint64_t)&v209, (uint64_t **)v210, (unsigned int *)(v208 + 360));
        }
        else
        {
          v86 = *(_DWORD *)(v208 + 356);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v86);
          std::ostream::write();
          v87 = *(_DWORD *)(v208 + 360);
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v87);
          std::ostream::write();
        }
      }
      else if (*(_BYTE *)(v75 + 40))
      {
        *(_QWORD *)v210 = v75 + 16;
        sub_224559C04((uint64_t **)v210, 0);
      }
      else
      {
        v210[0] = 0;
        std::ostream::write();
      }
      v88 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v208 + 392))
      {
        if (*(_BYTE *)(v88 + 40))
        {
          *(_QWORD *)v210 = v88 + 16;
          sub_224559C04((uint64_t **)v210, 1);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v89 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v89 + 40))
        {
          *(_QWORD *)v210 = v89 + 16;
          sub_22455A7EC((uint64_t **)v210, 1u);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v90 = (uint64_t)(*(_QWORD *)(v208 + 376) - *(_QWORD *)(v208 + 368)) >> 3;
        v91 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v91 + 40))
        {
          *(_QWORD *)v210 = v91 + 16;
          sub_22455B1CC((uint64_t **)v210, v90);
        }
        else
        {
          sub_22455B4D4();
        }
        v92 = *(unsigned int **)(v208 + 368);
        for (m = *(unsigned int **)(v208 + 376); v92 != m; v92 += 2)
        {
          v96 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v96 + 40))
          {
            v97 = *v92;
            v98 = *(_QWORD *)(v96 + 32);
            v99 = *(_QWORD *)(v96 + 16);
            if ((unint64_t)(v98 - v99) >= 5)
            {
              v103 = *(char **)(v96 + 24);
            }
            else
            {
              if (v98)
                v100 = 2 * v98;
              else
                v100 = 0x2000;
              v101 = v99 + 5;
              while (v100 < v101)
              {
                v102 = (uint64_t)v100 <= 0;
                v100 *= 2;
                if (v102)
                {
                  v100 = v101;
                  break;
                }
              }
              v103 = (char *)malloc_type_realloc(*(void **)(v96 + 24), v100, 0xAD6A59EEuLL);
              if (!v103)
              {
LABEL_317:
                exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                v201 = std::bad_alloc::bad_alloc(exception);
                __cxa_throw(v201, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
              }
              *(_QWORD *)(v96 + 24) = v103;
              *(_QWORD *)(v96 + 32) = v100;
              v99 = *(_QWORD *)(v96 + 16);
            }
            v106 = &v103[v99];
            *v106 = -54;
            *(_DWORD *)(v106 + 1) = bswap32(v97);
            v107 = *(_QWORD *)(v96 + 16);
            v108 = v107 + 5;
            *(_QWORD *)(v96 + 16) = v107 + 5;
            v109 = v92[1];
            v110 = *(_QWORD *)(v96 + 32);
            if ((unint64_t)(v110 - (v107 + 5)) >= 5)
            {
              v94 = *(char **)(v96 + 24);
            }
            else
            {
              if (v110)
                v111 = 2 * v110;
              else
                v111 = 0x2000;
              while (v111 < v107 + 10)
              {
                v102 = (uint64_t)v111 <= 0;
                v111 *= 2;
                if (v102)
                {
                  v111 = v107 + 10;
                  break;
                }
              }
              v94 = (char *)malloc_type_realloc(*(void **)(v96 + 24), v111, 0xAD6A59EEuLL);
              if (!v94)
                goto LABEL_317;
              *(_QWORD *)(v96 + 24) = v94;
              *(_QWORD *)(v96 + 32) = v111;
              v108 = *(_QWORD *)(v96 + 16);
            }
            v95 = &v94[v108];
            *v95 = -54;
            *(_DWORD *)(v95 + 1) = bswap32(v109);
            *(_QWORD *)(v96 + 16) += 5;
          }
          else
          {
            v104 = *v92;
            v210[0] = -54;
            *(_DWORD *)&v210[1] = bswap32(v104);
            std::ostream::write();
            v105 = v92[1];
            v210[0] = -54;
            *(_DWORD *)&v210[1] = bswap32(v105);
            std::ostream::write();
          }
        }
      }
      else if (*(_BYTE *)(v88 + 40))
      {
        *(_QWORD *)v210 = v88 + 16;
        sub_224559C04((uint64_t **)v210, 0);
      }
      else
      {
        v210[0] = 0;
        std::ostream::write();
      }
      v112 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v208 + 424))
      {
        if (*(_BYTE *)(v112 + 40))
        {
          *(_QWORD *)v210 = v112 + 16;
          sub_224559C04((uint64_t **)v210, 0);
        }
        else
        {
          v210[0] = 0;
          std::ostream::write();
        }
        goto LABEL_223;
      }
      if (*(_BYTE *)(v112 + 40))
      {
        *(_QWORD *)v210 = v112 + 16;
        sub_224559C04((uint64_t **)v210, 1);
      }
      else
      {
        v210[0] = 1;
        std::ostream::write();
      }
      v113 = (uint64_t)(*(_QWORD *)(v208 + 408) - *(_QWORD *)(v208 + 400)) >> 4;
      v114 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v114 + 40))
      {
        *(_QWORD *)v210 = v114 + 16;
        sub_22455B1CC((uint64_t **)v210, v113);
      }
      else
      {
        sub_22455B4D4();
      }
      v116 = *(unsigned int **)(v208 + 400);
      v115 = *(unsigned int **)(v208 + 408);
      if (v115 != v116)
        break;
LABEL_223:
      v152 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v208 + 456))
      {
        if (*(_BYTE *)(v152 + 40))
        {
          *(_QWORD *)v210 = v152 + 16;
          sub_224559C04((uint64_t **)v210, 0);
        }
        else
        {
          v210[0] = 0;
          std::ostream::write();
        }
        goto LABEL_277;
      }
      if (*(_BYTE *)(v152 + 40))
      {
        *(_QWORD *)v210 = v152 + 16;
        sub_224559C04((uint64_t **)v210, 1);
      }
      else
      {
        v210[0] = 1;
        std::ostream::write();
      }
      v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v208 + 440) - *(_QWORD *)(v208 + 432)) >> 3);
      v154 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v154 + 40))
      {
        *(_QWORD *)v210 = v154 + 16;
        sub_22455B1CC((uint64_t **)v210, v153);
      }
      else
      {
        sub_22455B4D4();
      }
      v155 = *(unsigned int ***)(v208 + 432);
      v156 = *(unsigned int ***)(v208 + 440);
      while (v155 != v156)
      {
        v157 = (char *)v155[1] - (char *)*v155;
        v158 = (uint64_t)v157 >> 3;
        v159 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v159 + 40))
        {
          *(_QWORD *)v210 = v159 + 16;
          sub_22455B1CC((uint64_t **)v210, v158);
        }
        else
        {
          if (v157 > 0x7FF)
          {
            if (!(v157 >> 19))
            {
              v210[0] = -51;
              *(_WORD *)&v210[1] = bswap32(v157 >> 3) >> 16;
              std::ostream::write();
              goto LABEL_237;
            }
            if (v157 >> 35)
            {
              v210[0] = -49;
              *(_QWORD *)&v210[1] = bswap64(v158);
            }
            else
            {
              v210[0] = -50;
              *(_DWORD *)&v210[1] = bswap32(v157 >> 3);
            }
          }
          else if (v157 > 0x3FF)
          {
            v210[0] = -52;
            v210[1] = v157 >> 3;
          }
          else
          {
            v210[0] = v157 >> 3;
          }
          std::ostream::write();
        }
LABEL_237:
        v160 = *v155;
        v161 = v155[1];
        if (v161 != *v155)
        {
          do
          {
            v164 = *(_QWORD *)(a1 + 24);
            if (*(_BYTE *)(v164 + 40))
            {
              v165 = *v160;
              v166 = *(_QWORD *)(v164 + 32);
              v167 = *(_QWORD *)(v164 + 16);
              if ((unint64_t)(v166 - v167) >= 5)
              {
                v170 = *(char **)(v164 + 24);
              }
              else
              {
                if (v166)
                  v168 = 2 * v166;
                else
                  v168 = 0x2000;
                v169 = v167 + 5;
                while (v168 < v169)
                {
                  v102 = (uint64_t)v168 <= 0;
                  v168 *= 2;
                  if (v102)
                  {
                    v168 = v169;
                    break;
                  }
                }
                v170 = (char *)malloc_type_realloc(*(void **)(v164 + 24), v168, 0xAD6A59EEuLL);
                if (!v170)
                {
LABEL_316:
                  v198 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                  v199 = std::bad_alloc::bad_alloc(v198);
                  __cxa_throw(v199, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
                }
                *(_QWORD *)(v164 + 24) = v170;
                *(_QWORD *)(v164 + 32) = v168;
                v167 = *(_QWORD *)(v164 + 16);
              }
              v173 = &v170[v167];
              *v173 = -54;
              *(_DWORD *)(v173 + 1) = bswap32(v165);
              v174 = *(_QWORD *)(v164 + 16);
              v175 = v174 + 5;
              *(_QWORD *)(v164 + 16) = v174 + 5;
              v176 = v160[1];
              v177 = *(_QWORD *)(v164 + 32);
              if ((unint64_t)(v177 - (v174 + 5)) >= 5)
              {
                v162 = *(char **)(v164 + 24);
              }
              else
              {
                if (v177)
                  v178 = 2 * v177;
                else
                  v178 = 0x2000;
                while (v178 < v174 + 10)
                {
                  v102 = (uint64_t)v178 <= 0;
                  v178 *= 2;
                  if (v102)
                  {
                    v178 = v174 + 10;
                    break;
                  }
                }
                v162 = (char *)malloc_type_realloc(*(void **)(v164 + 24), v178, 0xAD6A59EEuLL);
                if (!v162)
                  goto LABEL_316;
                *(_QWORD *)(v164 + 24) = v162;
                *(_QWORD *)(v164 + 32) = v178;
                v175 = *(_QWORD *)(v164 + 16);
              }
              v163 = &v162[v175];
              *v163 = -54;
              *(_DWORD *)(v163 + 1) = bswap32(v176);
              *(_QWORD *)(v164 + 16) += 5;
            }
            else
            {
              v171 = *v160;
              v210[0] = -54;
              *(_DWORD *)&v210[1] = bswap32(v171);
              std::ostream::write();
              v172 = v160[1];
              v210[0] = -54;
              *(_DWORD *)&v210[1] = bswap32(v172);
              std::ostream::write();
            }
            v160 += 2;
          }
          while (v160 != v161);
        }
        v155 += 3;
      }
LABEL_277:
      if (*(_BYTE *)(v208 + 465))
      {
        v179 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v179 + 40))
        {
          *(_QWORD *)v210 = v179 + 16;
          sub_224559C04((uint64_t **)v210, 1);
        }
        else
        {
          v210[0] = 1;
          std::ostream::write();
        }
        v181 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v181 + 40))
        {
          *(_QWORD *)v210 = v181 + 16;
          sub_224559C04((uint64_t **)v210, *(_BYTE *)(v208 + 464));
        }
        else
        {
          v182 = *(char *)(v208 + 464);
          if (v182 < 0)
          {
            v210[0] = -52;
            v210[1] = v182;
          }
          else
          {
            v210[0] = *(_BYTE *)(v208 + 464);
          }
          std::ostream::write();
        }
      }
      else
      {
        v180 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v180 + 40))
        {
          *(_QWORD *)v210 = v180 + 16;
          sub_224559C04((uint64_t **)v210, 0);
        }
        else
        {
          v210[0] = 0;
          std::ostream::write();
        }
      }
      v208 += 472;
      if (v208 == v207)
        goto LABEL_289;
    }
    while (1)
    {
      v119 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v119 + 40))
      {
        *(_QWORD *)v210 = v119 + 16;
        sub_22455A7EC((uint64_t **)v210, 1u);
      }
      else
      {
        v210[0] = 1;
        std::ostream::write();
      }
      v120 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v120 + 40))
      {
        v121 = *v116;
        v122 = *(_QWORD *)(v120 + 32);
        v123 = *(_QWORD *)(v120 + 16);
        if ((unint64_t)(v122 - v123) >= 5)
        {
          v126 = *(char **)(v120 + 24);
        }
        else
        {
          if (v122)
            v124 = 2 * v122;
          else
            v124 = 0x2000;
          v125 = v123 + 5;
          while (v124 < v125)
          {
            v102 = (uint64_t)v124 <= 0;
            v124 *= 2;
            if (v102)
            {
              v124 = v125;
              break;
            }
          }
          v126 = (char *)malloc_type_realloc(*(void **)(v120 + 24), v124, 0xAD6A59EEuLL);
          if (!v126)
          {
LABEL_319:
            v204 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v205 = std::bad_alloc::bad_alloc(v204);
            __cxa_throw(v205, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v120 + 24) = v126;
          *(_QWORD *)(v120 + 32) = v124;
          v123 = *(_QWORD *)(v120 + 16);
        }
        v136 = &v126[v123];
        *v136 = -54;
        *(_DWORD *)(v136 + 1) = bswap32(v121);
        v137 = *(_QWORD *)(v120 + 16);
        v138 = v137 + 5;
        *(_QWORD *)(v120 + 16) = v137 + 5;
        v139 = v116[1];
        v140 = *(_QWORD *)(v120 + 32);
        if ((unint64_t)(v140 - (v137 + 5)) >= 5)
        {
          v142 = *(char **)(v120 + 24);
        }
        else
        {
          if (v140)
            v141 = 2 * v140;
          else
            v141 = 0x2000;
          while (v141 < v137 + 10)
          {
            v102 = (uint64_t)v141 <= 0;
            v141 *= 2;
            if (v102)
            {
              v141 = v137 + 10;
              break;
            }
          }
          v142 = (char *)malloc_type_realloc(*(void **)(v120 + 24), v141, 0xAD6A59EEuLL);
          if (!v142)
            goto LABEL_319;
          *(_QWORD *)(v120 + 24) = v142;
          *(_QWORD *)(v120 + 32) = v141;
          v138 = *(_QWORD *)(v120 + 16);
        }
        v143 = &v142[v138];
        *v143 = -54;
        *(_DWORD *)(v143 + 1) = bswap32(v139);
        *(_QWORD *)(v120 + 16) += 5;
        v129 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v129 + 40))
        {
LABEL_210:
          v144 = v116[2];
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v144);
          std::ostream::write();
          v145 = v116[3];
          v210[0] = -54;
          *(_DWORD *)&v210[1] = bswap32(v145);
          std::ostream::write();
          goto LABEL_169;
        }
      }
      else
      {
        v127 = *v116;
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v127);
        std::ostream::write();
        v128 = v116[1];
        v210[0] = -54;
        *(_DWORD *)&v210[1] = bswap32(v128);
        std::ostream::write();
        v129 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v129 + 40))
          goto LABEL_210;
      }
      v130 = v116[2];
      v131 = *(_QWORD *)(v129 + 32);
      v132 = *(_QWORD *)(v129 + 16);
      if ((unint64_t)(v131 - v132) >= 5)
      {
        v135 = *(char **)(v129 + 24);
      }
      else
      {
        if (v131)
          v133 = 2 * v131;
        else
          v133 = 0x2000;
        v134 = v132 + 5;
        while (v133 < v134)
        {
          v102 = (uint64_t)v133 <= 0;
          v133 *= 2;
          if (v102)
          {
            v133 = v134;
            break;
          }
        }
        v135 = (char *)malloc_type_realloc(*(void **)(v129 + 24), v133, 0xAD6A59EEuLL);
        if (!v135)
        {
LABEL_318:
          v202 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v203 = std::bad_alloc::bad_alloc(v202);
          __cxa_throw(v203, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        *(_QWORD *)(v129 + 24) = v135;
        *(_QWORD *)(v129 + 32) = v133;
        v132 = *(_QWORD *)(v129 + 16);
      }
      v146 = &v135[v132];
      *v146 = -54;
      *(_DWORD *)(v146 + 1) = bswap32(v130);
      v147 = *(_QWORD *)(v129 + 16);
      v148 = v147 + 5;
      *(_QWORD *)(v129 + 16) = v147 + 5;
      v149 = v116[3];
      v150 = *(_QWORD *)(v129 + 32);
      if ((unint64_t)(v150 - (v147 + 5)) >= 5)
      {
        v117 = *(char **)(v129 + 24);
      }
      else
      {
        if (v150)
          v151 = 2 * v150;
        else
          v151 = 0x2000;
        while (v151 < v147 + 10)
        {
          v102 = (uint64_t)v151 <= 0;
          v151 *= 2;
          if (v102)
          {
            v151 = v147 + 10;
            break;
          }
        }
        v117 = (char *)malloc_type_realloc(*(void **)(v129 + 24), v151, 0xAD6A59EEuLL);
        if (!v117)
          goto LABEL_318;
        *(_QWORD *)(v129 + 24) = v117;
        *(_QWORD *)(v129 + 32) = v151;
        v148 = *(_QWORD *)(v129 + 16);
      }
      v118 = &v117[v148];
      *v118 = -54;
      *(_DWORD *)(v118 + 1) = bswap32(v149);
      *(_QWORD *)(v129 + 16) += 5;
LABEL_169:
      v116 += 4;
      if (v116 == v115)
        goto LABEL_223;
    }
  }
  *(_QWORD *)v210 = v4 + 16;
  sub_22455B1CC((uint64_t **)v210, v3);
  v207 = a2[1];
  v208 = *a2;
  if (v207 != *a2)
    goto LABEL_8;
LABEL_289:
  v183 = (a2[4] - a2[3]) >> 4;
  v184 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v184 + 40))
  {
    *(_QWORD *)v210 = v184 + 16;
    sub_22455B1CC((uint64_t **)v210, v183);
  }
  else
  {
    sub_22455B4D4();
  }
  v185 = (char *)a2[3];
  for (n = (char *)a2[4]; v185 != n; v185 += 16)
  {
    v187 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v187 + 40))
    {
      *(_QWORD *)v210 = v187 + 16;
      sub_224559C04((uint64_t **)v210, *v185);
      sub_224559C04((uint64_t **)v210, v185[1]);
      sub_224559C04((uint64_t **)v210, v185[2]);
      sub_224559C04((uint64_t **)v210, v185[3]);
      sub_224559C04((uint64_t **)v210, v185[4]);
      sub_224559C04((uint64_t **)v210, v185[5]);
      sub_224559C04((uint64_t **)v210, v185[6]);
      sub_224559C04((uint64_t **)v210, v185[7]);
      sub_224559C04((uint64_t **)v210, v185[8]);
      sub_224559C04((uint64_t **)v210, v185[9]);
      sub_224559C04((uint64_t **)v210, v185[10]);
      sub_224559C04((uint64_t **)v210, v185[11]);
      sub_224559C04((uint64_t **)v210, v185[12]);
      sub_224559C04((uint64_t **)v210, v185[13]);
      sub_224559C04((uint64_t **)v210, v185[14]);
      sub_224559C04((uint64_t **)v210, v185[15]);
    }
    else
    {
      for (ii = 0; ii != 16; ++ii)
      {
        v189 = v185[ii];
        if (v189 < 0)
        {
          v210[0] = -52;
          v210[1] = v189;
        }
        else
        {
          v210[0] = v185[ii];
        }
        std::ostream::write();
      }
    }
  }
  v190 = (a2[7] - a2[6]) >> 4;
  v191 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v191 + 40))
  {
    *(_QWORD *)v210 = v191 + 16;
    result = (uint64_t)sub_22455B1CC((uint64_t **)v210, v190);
  }
  else
  {
    result = sub_22455B4D4();
  }
  v193 = (char *)a2[6];
  for (jj = (char *)a2[7]; v193 != jj; v193 += 16)
  {
    v195 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v195 + 40))
    {
      *(_QWORD *)v210 = v195 + 16;
      sub_224559C04((uint64_t **)v210, *v193);
      sub_224559C04((uint64_t **)v210, v193[1]);
      sub_224559C04((uint64_t **)v210, v193[2]);
      sub_224559C04((uint64_t **)v210, v193[3]);
      sub_224559C04((uint64_t **)v210, v193[4]);
      sub_224559C04((uint64_t **)v210, v193[5]);
      sub_224559C04((uint64_t **)v210, v193[6]);
      sub_224559C04((uint64_t **)v210, v193[7]);
      sub_224559C04((uint64_t **)v210, v193[8]);
      sub_224559C04((uint64_t **)v210, v193[9]);
      sub_224559C04((uint64_t **)v210, v193[10]);
      sub_224559C04((uint64_t **)v210, v193[11]);
      sub_224559C04((uint64_t **)v210, v193[12]);
      sub_224559C04((uint64_t **)v210, v193[13]);
      sub_224559C04((uint64_t **)v210, v193[14]);
      result = (uint64_t)sub_224559C04((uint64_t **)v210, v193[15]);
    }
    else
    {
      for (kk = 0; kk != 16; ++kk)
      {
        v197 = v193[kk];
        if (v197 < 0)
        {
          v210[0] = -52;
          v210[1] = v197;
        }
        else
        {
          v210[0] = v193[kk];
        }
        result = std::ostream::write();
      }
    }
  }
  return result;
}

void sub_22330005C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  if (a3 >= 3
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include/ACV/SurfaceDetection/DataModels/ContinuousTrackingResultSample.h", 169, (uint64_t)"version <= sample.MaxVersion()", 30, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v16 = (uint64_t *)(v6 + 16);
    sub_22455A7EC(&v16, 2u);
    sub_224555278(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_5;
LABEL_8:
    sub_22455B08C();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_6;
    goto LABEL_9;
  }
  sub_22455AA60((uint64_t)&v16, v6 + 8);
  sub_224555278(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_8;
LABEL_5:
  v16 = (uint64_t *)(v7 + 16);
  sub_22455AB50(&v16, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_6:
    v16 = (uint64_t *)(v9 + 16);
    sub_224559C04(&v16, v8);
    goto LABEL_13;
  }
LABEL_9:
  if (v8 < 0)
  {
    LOBYTE(v16) = -52;
    BYTE1(v16) = v8;
  }
  else
  {
    LOBYTE(v16) = v8;
  }
  std::ostream::write();
LABEL_13:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_224554D6C((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v16 = (uint64_t *)(v15 + 16);
    sub_22455A2D4(&v16, *(_DWORD *)(a2 + 24));
    if (a3 < 2)
      return;
    goto LABEL_20;
  }
  sub_22455A6F0();
  if (a3 >= 2)
LABEL_20:
    sub_223300278(a1, a2 + 32);
}

void sub_223300278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v14 = (uint64_t *)(v2 + 16);
      sub_224559C04(&v14, 0);
    }
    else
    {
      LOBYTE(v14) = 0;
      std::ostream::write();
    }
    return;
  }
  if (*(_BYTE *)(v2 + 40))
  {
    v14 = (uint64_t *)(v2 + 16);
    sub_224559C04(&v14, 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_4;
  }
  else
  {
    LOBYTE(v14) = 1;
    std::ostream::write();
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
LABEL_4:
      v14 = (uint64_t *)(v5 + 16);
      sub_22455A7EC(&v14, 2u);
      sub_224555278(*(_QWORD *)(a1 + 24));
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v6 + 40))
        goto LABEL_5;
LABEL_12:
      sub_22455B08C();
      v7 = *(char *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
        goto LABEL_6;
LABEL_13:
      if (v7 < 0)
      {
        LOBYTE(v14) = -52;
        BYTE1(v14) = v7;
      }
      else
      {
        LOBYTE(v14) = v7;
      }
      std::ostream::write();
      goto LABEL_18;
    }
  }
  sub_22455AA60((uint64_t)&v14, v5 + 8);
  sub_224555278(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_12;
LABEL_5:
  v14 = (uint64_t *)(v6 + 16);
  sub_22455AB50(&v14, *(_QWORD *)a2);
  v7 = *(char *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v8 + 40))
    goto LABEL_13;
LABEL_6:
  v14 = (uint64_t *)(v8 + 16);
  sub_224559C04(&v14, v7);
LABEL_18:
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_224554D6C((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
}

_DWORD *sub_22330048C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC2ADF8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_22330057C(uint64_t a1)
{
  sub_223223FC0(a1 + 8);
  return a1;
}

void sub_2233005A4(uint64_t a1)
{
  sub_223223FC0(a1 + 8);
  JUMPOUT(0x227684CE8);
}

BOOL sub_2233005DC(uint64_t a1, CFTypeRef *a2, float a3)
{
  _BOOL8 v3;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = a3 <= 1.0 && a3 > 0.0;
  if (v3)
  {
    *(float *)(a1 + 96) = a3;
    return v3;
  }
  __p = operator new(0x38uLL);
  v12 = xmmword_2245C7A60;
  strcpy((char *)__p, "Minimum depth confidence is not in the range (0,1]");
  v6 = (char *)operator new(0x68uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SessionConfig.cpp");
  if (a2)
  {
    *(_QWORD *)&v15.__val_ = 33;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a2)
      CFRelease(*a2);
    *a2 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a2 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return v3;
  operator delete(__p);
  return v3;
}

void sub_223300784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2233007C0(uint64_t a1, unsigned int a2, uint64_t a3, CFTypeRef *a4)
{
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char __p[19];
  char v17;
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  std::error_condition v20;

  if (!a2)
  {
    v17 = 17;
    strcpy(__p, "Width must be > 0");
    v6 = (char *)operator new(0x68uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SessionConfig.cpp");
    if (a4)
    {
      *(_QWORD *)&v20.__val_ = 33;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v7;
      v8 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if ((v17 & 0x80000000) == 0)
      return 0;
    goto LABEL_31;
  }
  if (!(_DWORD)a3)
  {
    v17 = 18;
    strcpy(__p, "Height must be > 0");
    v11 = (char *)operator new(0x68uLL);
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SessionConfig.cpp");
    if (a4)
    {
      *(_QWORD *)&v20.__val_ = 33;
      v20.__cat_ = std::generic_category();
      sub_2245321DC(&v20, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v12;
      v13 = v19;
      if (v19)
      {
        v14 = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v11);
    if ((v17 & 0x80000000) == 0)
      return 0;
LABEL_31:
    operator delete(*(void **)__p);
    return 0;
  }
  if (!*(_BYTE *)(a1 + 112))
    *(_BYTE *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 104) = a2 | (unint64_t)(a3 << 32);
  return 1;
}

void sub_223300A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223300AD4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  v5 = a2[1];
  v4 = a2[2];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[124] = v5;
  v8 = (std::__shared_weak_count *)a1[125];
  a1[125] = v4;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v12 = a2[3];
    v11 = a2[4];
    if (!v11)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v12 = a2[3];
    v11 = a2[4];
    if (!v11)
      goto LABEL_11;
  }
  v13 = (unint64_t *)(v11 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_11:
  a1[126] = v12;
  v15 = (std::__shared_weak_count *)a1[127];
  a1[127] = v11;
  if (!v15)
    goto LABEL_15;
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v19 = a2[5];
    v18 = a2[6];
    if (!v18)
      goto LABEL_18;
  }
  else
  {
LABEL_15:
    v19 = a2[5];
    v18 = a2[6];
    if (!v18)
      goto LABEL_18;
  }
  v20 = (unint64_t *)(v18 + 8);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_18:
  a1[128] = v19;
  v22 = (std::__shared_weak_count *)a1[129];
  a1[129] = v18;
  if (!v22)
    return 1;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
    return 1;
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  return 1;
}

BOOL sub_223300C40(uint64_t a1, CFTypeRef *a2, float a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a3 < 0.0)
  {
    __p = operator new(0x38uLL);
    v12 = xmmword_2245C44A0;
    strcpy((char *)__p, "Visibility map max distance is not greater than 0");
    v5 = (char *)operator new(0x68uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SessionConfig.cpp");
    if (a2)
    {
      *(_QWORD *)&v15.__val_ = 33;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a2)
        CFRelease(*a2);
      *a2 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a2 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    *(float *)(a1 + 28) = a3;
  }
  return a3 >= 0.0;
}

void sub_223300DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_223300E04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_223300EE8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x227684CE8);
}

void sub_223300FCC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t (**v24)();
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t (***v27)();
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = a1 + 8;
  v24 = &off_24EC2B5B0;
  v25 = v5;
  v26 = v4;
  v27 = &v24;
  sub_223FD3E5C((_QWORD *)(a1 + 8), &v24);
  v10 = v27;
  if (v27 == &v24)
  {
    v11 = 4;
    v10 = &v24;
  }
  else
  {
    if (!v27)
      goto LABEL_10;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_10:
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldxr(v14);
    while (__stxr(v16 + 1, v14));
  }
  v24 = &off_24EC2B6A0;
  v25 = v12;
  v26 = v13;
  v27 = &v24;
  sub_223FD3F40(v9, &v24);
  v17 = v27;
  if (v27 == &v24)
  {
    v18 = 4;
    v17 = &v24;
    goto LABEL_18;
  }
  if (v27)
  {
    v18 = 5;
LABEL_18:
    (*v17)[v18]();
  }
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v23)
  {
    v21 = (unint64_t *)&v23->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_223301194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  sub_223167354((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2233011E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  sub_223167354((uint64_t)&a14);
  sub_223167354((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_22330122C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v11[0] = &off_24EC2B730;
  v11[1] = v2;
  v11[2] = v3;
  v12 = v11;
  sub_223FD4024(a1 + 8, v11);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22330132C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  sub_223167354((uint64_t)&a10);
  sub_223167354((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_223301374(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2B5B0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2233013E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2B5B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22330145C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2B5B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2233014AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2B5B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2233014DC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_223301534(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_22330159C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string __p;
  _QWORD v31[2];
  std::__shared_weak_count *v32;
  uint64_t v33;
  int v34;
  std::__shared_weak_count_vtbl *v35;
  uint64_t v36;
  _BYTE v37[19];
  int v38;
  __int16 v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  mach_timebase_info info[2];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 8)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamAdapter.cpp", 36, (uint64_t)"add_callback", 12, (uint64_t)"Add anchor block not valid", 26, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v35 = (std::__shared_weak_count_vtbl *)"cv3d.recon.";
  v36 = 11;
  *(_QWORD *)v37 = "api.slam";
  *(_QWORD *)&v37[8] = 8;
  sub_2231A9820((uint64_t)&v35, (uint64_t)&v37[16], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v4[2];
    }
    v6 = *(_QWORD *)(v5 + 64);
    v7 = (std::mutex *)(v6 + 32);
    std::mutex::lock((std::mutex *)(v6 + 32));
    v9 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(v6 + 104);
    std::mutex::unlock(v7);
    if (v9 != v8)
    {
      sub_2241471F8();
      v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        {
          v11 = *(double *)&qword_255788F20;
          v12 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
          {
            v13 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
            v14 = mach_continuous_time();
            v15 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info(info);
              LODWORD(v28) = info[0].numer;
              LODWORD(v29) = info[0].denom;
              *(double *)&qword_255795558 = (double)v28 / (double)v29;
              __cxa_guard_release(&qword_255795560);
            }
            v35 = (std::__shared_weak_count_vtbl *)llround(*(double *)&qword_255795558 * (double)v14);
            v36 = 2;
            strcpy(v37, "add_anchor");
            *(_QWORD *)&v37[11] = v33;
            v38 = v34;
            v39 = 266;
            v33 = 0;
            v34 = 0;
            v40 = 0;
            v41 = 0;
            v42 = (uint64_t)(v11 * 1000000000.0);
            v43 = 2;
            v44 = 1;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            *(_OWORD *)&info[0].numer = *(_OWORD *)a2;
            v50 = *(_QWORD *)(a2 + 16);
            v51 = *(_OWORD *)(a2 + 24);
            v52 = *(_OWORD *)(a2 + 40);
            v53 = *(_OWORD *)(a2 + 56);
            v54 = *(_OWORD *)(a2 + 72);
            v16 = operator new();
            *(_QWORD *)v16 = &off_24EC2B900;
            *(_OWORD *)(v16 + 8) = *(_OWORD *)&info[0].numer;
            *(_QWORD *)(v16 + 24) = v50;
            v17 = v52;
            *(_OWORD *)(v16 + 32) = v51;
            *(_OWORD *)(v16 + 48) = v17;
            v18 = v54;
            *(_OWORD *)(v16 + 64) = v53;
            *(_OWORD *)(v16 + 80) = v18;
            sub_2231AB0FC(v16 + 96, (uint64_t)&v35);
            *(_QWORD *)v16 = &off_24EC2B880;
            v31[0] = &off_24EC6A3B8;
            v31[1] = v16;
            v19 = (std::__shared_weak_count *)operator new();
            v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
            v19->__shared_owners_ = 0;
            v19->__shared_weak_owners_ = 0;
            v19[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
            v32 = v19;
            sub_2231AD66C((uint64_t)&v35);
            sub_2231AA5A4((uint64_t)v12, v13, (uint64_t)v31);
            v20 = v32;
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v22 = __ldaxr(p_shared_owners);
              while (__stlxr(v22 - 1, p_shared_owners));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
          }
        }
        kdebug_trace();
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Default = CFAllocatorGetDefault();
  v24 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)a2);
  sub_224533328(&v35, v24, 0);
  v25 = (std::__shared_weak_count *)v36;
  (*(void (**)(__n128, __n128, __n128, __n128))(**(_QWORD **)(a1 + 8) + 16))(*(__n128 *)(a2 + 24), *(__n128 *)(a2 + 40), *(__n128 *)(a2 + 56), *(__n128 *)(a2 + 72));
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_223301A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  __cxa_guard_abort(&qword_255795560);
  kdebug_trace();
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223301B90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFvPK8__CFUUID"
                     "13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFv"
                                "PK8__CFUUID13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFvPK8__CFUUID13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFvPK8__CFUUID13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223301BFC()
{
  return &unk_24EC2B680;
}

_QWORD *sub_223301C08(_QWORD *a1)
{
  *a1 = &off_24EC2B900;
  sub_2231AD66C((uint64_t)(a1 + 12));
  return a1;
}

void sub_223301C38(_QWORD *a1)
{
  *a1 = &off_24EC2B900;
  sub_2231AD66C((uint64_t)(a1 + 12));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223301C78(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_223301C80(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  float *v6[3];

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC2B8C0, 0);
  if (result)
  {
    if ((void *)a1 == lpsrc)
    {
      return 1;
    }
    else if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(result + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(result + 16))
    {
      if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(result + 24))
      {
        v6[0] = (float *)(a1 + 32);
        v6[1] = (float *)(result + 32);
        return sub_2231F73E4(v6);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_223301D44(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_223302FE0();
  sub_223301DF8(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 96, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_223301DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223301DF8(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B9A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B9A8))
  {
    v4 = sub_223302DE4();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578B990, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578B9A0 = *(_QWORD *)(v9 - 8);
      xmmword_25578B990 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B990, &dword_22314D000);
    __cxa_guard_release(&qword_25578B9A8);
  }
  return sub_2233034C4(&xmmword_25578B990, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)"}");
}

void sub_223301F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578B9A8);
  _Unwind_Resume(a1);
}

void sub_223301F28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B9A8);
  _Unwind_Resume(a1);
}

void sub_223301F40(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 10;
  strcpy((char *)a1, "cv3d.recon");
  *(_DWORD *)(a1 + 24) = 2;
}

void sub_223301F70(void *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_223B85EC0(a1, 2, a2);
}

_QWORD *sub_223301F98(_QWORD *a1)
{
  *a1 = &off_24EC2B900;
  sub_2231AD66C((uint64_t)(a1 + 12));
  return a1;
}

void sub_223301FC8(_QWORD *a1)
{
  *a1 = &off_24EC2B900;
  sub_2231AD66C((uint64_t)(a1 + 12));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223302008(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_223302880();
  return sub_22330216C(v2, (__int128 *)"{", (__int128 *)(a1 + 8), (__int128 *)",", a1 + 96, (__int128 *)"}");
}

uint64_t sub_223302060(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  _QWORD v4[3];
  char v5;

  v3 = 0;
  v4[0] = a1 + 8;
  v4[1] = a1 + 24;
  v4[2] = a1 + 32;
  sub_2233023A4((uint64_t)v2, (uint64_t)v4);
  if (v3 == -1)
    sub_22316DD70();
  v4[0] = &v5;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC2B668[v3])(v4, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC2B620[v3])(v4, v2);
  return result;
}

void sub_223302108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, uint64_t *))off_24EC2B620[a12])(v12 - 17, &a9);
  _Unwind_Resume(exception_object);
}

void sub_223302140(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_22330216C(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  uint64_t result;
  char v12;
  __int128 __dst;
  uint64_t v14;
  int v15;
  __int128 *p_dst;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 **p_p_dst;

  v15 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v14 = *((_QWORD *)a1 + 2);
  }
  v15 = 1;
  p_dst = &__dst;
  v17 = a2;
  v18 = &__dst;
  v19 = a2;
  v20 = a2;
  sub_2231ABB0C((uint64_t *)&v18, (uint64_t)&__dst);
  p_dst = a3;
  v17 = a3 + 1;
  v18 = (__int128 *)((char *)a3 + 24);
  sub_2233023A4((uint64_t)&__dst, (uint64_t)&p_dst);
  p_dst = &__dst;
  v17 = a4;
  v18 = &__dst;
  v19 = a4;
  v20 = a4;
  if (v15 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v15])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v17 = a6;
  v18 = &__dst;
  v19 = a6;
  v20 = a6;
  if (v15 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v15])(&p_p_dst, &__dst);
  if (v15 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B668[v15])(&p_dst, &__dst);
  if (v15 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B620[v15])(&p_dst, &__dst);
  return result;
}

void sub_223302314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22330232C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223302340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223302354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223302368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22330237C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223302390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2233023A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  uint64_t v18;
  int v19;
  __int128 *v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::string v26;
  void **v27;
  void **v28;
  std::string *v29;

  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = "{";
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = "{";
  *(_QWORD *)&v24 = "{";
  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 == -1)
    goto LABEL_12;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  ((void (*)(std::string *, uint64_t))off_24EC2B638[v2])(&v26, a1);
  sub_22319B83C((uint64_t)&v22, a1, *(unsigned __int8 **)a2);
  v5 = *(uint64_t **)(a2 + 8);
  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = ",";
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = ",";
  *(_QWORD *)&v24 = ",";
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == -1)
    goto LABEL_12;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  ((void (*)(std::string *, uint64_t))off_24EC2B638[v6])(&v26, a1);
  sub_2233025E8(v5, &v26);
  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = &v26;
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = &v26;
  *(_QWORD *)&v24 = &v26;
  v7 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v7 == -1)
    sub_22316DD70();
  v18 = (uint64_t)&v22;
  ((void (*)(uint64_t *, uint64_t))off_24EC2B650[v7])(&v18, a1);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v8 = *(__int128 **)(a2 + 16);
  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = ",";
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = ",";
  *(_QWORD *)&v24 = ",";
  v9 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_12;
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  ((void (*)(std::string *, uint64_t))off_24EC2B638[v9])(&v26, a1);
  v10 = *v8;
  v11 = v8[1];
  v12 = v8[3];
  v24 = v8[2];
  v25 = v12;
  v22 = v10;
  v23 = v11;
  v18 = 0x400000004;
  v19 = 4;
  v20 = &v22;
  v21 = 0;
  sub_224505D70((unsigned int *)&v18, __p);
  v26.__r_.__value_.__r.__words[0] = a1;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
  v26.__r_.__value_.__r.__words[2] = a1;
  v27 = __p;
  v28 = __p;
  v13 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v13 == -1)
    sub_22316DD70();
  v29 = &v26;
  ((void (*)(std::string **, uint64_t))off_24EC2B650[v13])(&v29, a1);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = "}";
  *(_QWORD *)&v23 = a1;
  *((_QWORD *)&v23 + 1) = "}";
  *(_QWORD *)&v24 = "}";
  v14 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v14 == -1)
LABEL_12:
    sub_22316DD70();
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  return ((uint64_t (*)(std::string *, uint64_t))off_24EC2B638[v14])(&v26, a1);
}

void sub_2233025B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2233025E8(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  void *__p[2];
  unsigned __int8 v7;
  uint64_t v8;
  std::string v9;
  std::string v10;

  v8 = *a1;
  sub_223302758(&v8);
  std::string::push_back(&v9, 32);
  v10 = v9;
  memset(&v9, 0, sizeof(v9));
  sub_22456DDD0(1, 1000000000, __p);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v10, (const std::string::value_type *)v3, v4);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if ((char)v7 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(v9.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
}

void sub_2233026E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v22 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v22 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v22 - 48));
  if ((a22 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223302758(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_22319B9BC)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC2B668[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC2B620[v3])(v5, v2);
  return result;
}

void sub_223302844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22330285C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_22319B964((uint64_t)&a10);
  _Unwind_Resume(a1);
}

__int128 *sub_223302880()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B888);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B888))
    return &xmmword_25578B870;
  v2 = sub_22330295C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578B870, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578B880 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578B870 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B870, &dword_22314D000);
  __cxa_guard_release(&qword_25578B888);
  return &xmmword_25578B870;
}

void sub_223302944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B888);
  _Unwind_Resume(a1);
}

std::string *sub_22330295C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B8A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B8A8))
    return &stru_25578B890;
  sub_223302C00((uint64_t)__p);
  sub_223302A4C((char *)__p, &stru_25578B890);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B890, &dword_22314D000);
  __cxa_guard_release(&qword_25578B8A8);
  return &stru_25578B890;
}

void sub_223302A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B8A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B8A8);
  _Unwind_Resume(a1);
}

void sub_223302A4C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223302DE4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_223302BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223302C00(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B928);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B928))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::recon::slam::AddAnchorEvent>]", qword_25578B910);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B910, &dword_22314D000);
    __cxa_guard_release(&qword_25578B928);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578B948);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578B948))
  {
    v5 = sub_2231A38CC(qword_25578B910, "<", 0);
    sub_2231A37C8(qword_25578B910, 0, v5, qword_25578B930);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B930, &dword_22314D000);
    __cxa_guard_release(&qword_25578B948);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578B968);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578B968))
  {
    sub_224573040((uint64_t)qword_25578B930, (uint64_t)&xmmword_25578B950);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B950, &dword_22314D000);
    __cxa_guard_release(&qword_25578B968);
  }
  if (byte_25578B967 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578B950, *((unint64_t *)&xmmword_25578B950 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578B950;
    *(_QWORD *)(a1 + 16) = unk_25578B960;
  }
}

void sub_223302D9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B968);
  _Unwind_Resume(a1);
}

void sub_223302DB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B948);
  _Unwind_Resume(a1);
}

void sub_223302DCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B928);
  _Unwind_Resume(a1);
}

__int128 *sub_223302DE4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B8C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B8C8))
    return &xmmword_25578B8B0;
  v2 = (char *)sub_223302EC0();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578B8B0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578B8C0 = *((_QWORD *)v2 + 2);
    xmmword_25578B8B0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B8B0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B8C8);
  return &xmmword_25578B8B0;
}

void sub_223302EA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B8C8);
  _Unwind_Resume(a1);
}

void *sub_223302EC0()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B8E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B8E8))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::slam::AddAnchorEvent]", qword_25578B8D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B8D0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B8E8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578B908);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B908))
    return &unk_25578B8F0;
  sub_224573040((uint64_t)qword_25578B8D0, (uint64_t)&unk_25578B8F0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578B8F0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B908);
  return &unk_25578B8F0;
}

void sub_223302FB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B908);
  _Unwind_Resume(a1);
}

void sub_223302FC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B8E8);
  _Unwind_Resume(a1);
}

std::string *sub_223302FE0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B988);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B988))
  {
    sub_223174DE4(v11, "viz::PackageData");
    v2 = sub_223302DE4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_2233032C8();
    if (*((char *)v4 + 23) < 0)
    {
      sub_223197FA4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_2232A0DB4();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_22319BD1C(v10, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v11, (uint64_t *)v10, &stru_25578B970, v8, v9);
    sub_22319BB48(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B970, &dword_22314D000);
        __cxa_guard_release(&qword_25578B988);
        return &stru_25578B970;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_25578B970;
}

void sub_2233031EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_25578B988);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_2233032A0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x22330327CLL);
  }
}

__int128 *sub_2233032C8()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B828);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B828))
    return &xmmword_25578B810;
  v2 = (char *)sub_2233033A4();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578B810, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578B820 = *((_QWORD *)v2 + 2);
    xmmword_25578B810 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B810, &dword_22314D000);
  __cxa_guard_release(&qword_25578B828);
  return &xmmword_25578B810;
}

void sub_22330338C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B828);
  _Unwind_Resume(a1);
}

void *sub_2233033A4()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B848);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B848))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::Package]", qword_25578B830);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B830, &dword_22314D000);
    __cxa_guard_release(&qword_25578B848);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578B868);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B868))
    return &unk_25578B850;
  sub_224573040((uint64_t)qword_25578B830, (uint64_t)&unk_25578B850);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578B850, &dword_22314D000);
  __cxa_guard_release(&qword_25578B868);
  return &unk_25578B850;
}

void sub_223303494(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B868);
  _Unwind_Resume(a1);
}

void sub_2233034AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B848);
  _Unwind_Resume(a1);
}

uint64_t sub_2233034C4(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 **v16;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v11 = &v8;
  v12 = a2;
  v13 = &v8;
  v14 = a2;
  v15 = a2;
  sub_2231ABB0C((uint64_t *)&v13, (uint64_t)&v8);
  v11 = a3;
  v12 = a3 + 1;
  v13 = (__int128 *)((char *)a3 + 24);
  sub_2233023A4((uint64_t)&v8, (uint64_t)&v11);
  v11 = &v8;
  v12 = a4;
  v13 = &v8;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v10])(&v16, &v8);
  if (v10 == -1)
    sub_22316DD70();
  v11 = (__int128 *)&v16;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B668[v10])(&v11, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B620[v10])(&v11, &v8);
  return result;
}

void sub_223303610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223303628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22330363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223303650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223303664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223303678(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2B6A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2233036EC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2B6A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223303760(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2B6A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_2233037B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2B6A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2233037E0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_223303838(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_2233038A0(uint64_t a1, CFUUIDBytes *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::mutex *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string __p;
  _DWORD v29[2];
  mach_timebase_info info;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  char v34;
  std::__shared_weak_count_vtbl *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[14];
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  CFUUIDBytes v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 8)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamAdapter.cpp", 44, (uint64_t)"remove_callback", 15, (uint64_t)"Remove anchor block not valid", 29, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v35 = (std::__shared_weak_count_vtbl *)"cv3d.recon.";
  v36 = 11;
  v37 = (uint64_t)"api.slam";
  *(_QWORD *)v38 = 8;
  sub_2231A9820((uint64_t)&v35, (uint64_t)&v38[8], 0, 0, &__p);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v4 = sub_2241471F8();
    v5 = v4[2];
    if (!v5)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v5 = v4[2];
    }
    v6 = *(_QWORD *)(v5 + 64);
    v7 = (std::mutex *)(v6 + 32);
    std::mutex::lock((std::mutex *)(v6 + 32));
    v9 = *(_QWORD *)(v6 + 96);
    v8 = *(_QWORD *)(v6 + 104);
    std::mutex::unlock(v7);
    if (v9 != v8)
    {
      sub_2241471F8();
      v10 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
        {
          v11 = *(double *)&qword_255788F20;
          v12 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10))
          {
            v13 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
            qmemcpy(v29, "nchor", 5);
            v14 = mach_continuous_time();
            v15 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info(&info);
              LODWORD(v26) = info.numer;
              LODWORD(v27) = info.denom;
              *(double *)&qword_255795558 = (double)v26 / (double)v27;
              __cxa_guard_release(&qword_255795560);
            }
            v35 = (std::__shared_weak_count_vtbl *)llround(*(double *)&qword_255795558 * (double)v14);
            v36 = 2;
            v37 = 0x615F65766F6D6572;
            *(_DWORD *)v38 = v29[0];
            *(_WORD *)&v38[4] = LOBYTE(v29[1]);
            *(_QWORD *)&v38[6] = v33;
            v39 = v34;
            v40 = 13;
            v29[0] = 0;
            LOBYTE(v29[1]) = 0;
            v34 = 0;
            v33 = 0;
            v41 = 1;
            v42 = 0;
            v43 = 0;
            v44 = (uint64_t)(v11 * 1000000000.0);
            v45 = 2;
            v46 = 1;
            v47 = 0;
            v48 = 0;
            v49 = 0;
            v50 = 0;
            v51 = *a2;
            v16 = operator new();
            *(_QWORD *)v16 = &off_24EC2B9D0;
            *(CFUUIDBytes *)(v16 + 8) = v51;
            sub_2231AB0FC(v16 + 32, (uint64_t)&v35);
            *(_QWORD *)v16 = &off_24EC2B950;
            info = (mach_timebase_info)&off_24EC6A3B8;
            v31 = v16;
            v17 = (std::__shared_weak_count *)operator new();
            v17->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC6A4B0;
            v17->__shared_owners_ = 0;
            v17->__shared_weak_owners_ = 0;
            v17[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
            v32 = v17;
            sub_2231AD66C((uint64_t)&v35);
            sub_2231AA5A4((uint64_t)v12, v13, (uint64_t)&info);
            v18 = v32;
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
          }
        }
        kdebug_trace();
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  Default = CFAllocatorGetDefault();
  v22 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *a2);
  sub_224533328(&v35, v22, 0);
  v23 = (std::__shared_weak_count *)v36;
  (*(void (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_223303D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  __cxa_guard_abort(&qword_255795560);
  kdebug_trace();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223303E64(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFvPK8__CFUUID"
                     "13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFv"
                                "PK8__CFUUID13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFvPK8__CFUUID13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20CV3DReconSlamAdapter21SetAnchoringCallbacksEN4cv3d3kit4capi5BlockIU13block_pointerFvPK8__CFUUID13simd_float4x4EEENS3_IU13block_pointerFvS6_EEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223303ED0()
{
  return &unk_24EC2B710;
}

_QWORD *sub_223303EDC(_QWORD *a1)
{
  *a1 = &off_24EC2B9D0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  return a1;
}

void sub_223303F0C(_QWORD *a1)
{
  *a1 = &off_24EC2B9D0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223303F4C(uint64_t a1)
{
  return a1 + 32;
}

_QWORD *sub_223303F54(_QWORD *a1, _QWORD *lpsrc)
{
  _QWORD *result;

  result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC2B990, 0);
  if (result)
    return (_QWORD *)(a1 == lpsrc || a1[1] == result[1] && a1[2] == result[2]);
  return result;
}

void sub_223303FC0(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_223304E48();
  sub_223304074(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_223304058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223304074(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578BAE8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578BAE8))
  {
    v4 = sub_223304B24();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578BAD0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578BAE0 = *(_QWORD *)(v9 - 8);
      xmmword_25578BAD0 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578BAD0, &dword_22314D000);
    __cxa_guard_release(&qword_25578BAE8);
  }
  return sub_223305130(&xmmword_25578BAD0, "{", (unsigned __int8 *)(a1 + 8), "}");
}

void sub_223304184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578BAE8);
  _Unwind_Resume(a1);
}

void sub_2233041A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578BAE8);
  _Unwind_Resume(a1);
}

void sub_2233041BC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 10;
  strcpy((char *)a1, "cv3d.recon");
  *(_DWORD *)(a1 + 24) = 3;
}

void sub_2233041EC(void *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_223B85EC0(a1, 3, a2);
}

_QWORD *sub_223304214(_QWORD *a1)
{
  *a1 = &off_24EC2B9D0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  return a1;
}

void sub_223304244(_QWORD *a1)
{
  *a1 = &off_24EC2B9D0;
  sub_2231AD66C((uint64_t)(a1 + 4));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223304284(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_2233045C0();
  return sub_223304310(v2, "{", (unsigned __int8 *)(a1 + 8), ",", a1 + 32, "}");
}

uint64_t sub_2233042DC(uint64_t a1)
{
  return sub_223304D20((unsigned __int8 *)(a1 + 8));
}

void sub_2233042E4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_223304310(__int128 *a1, const char *a2, unsigned __int8 *a3, const char *a4, uint64_t a5, const char *a6)
{
  uint64_t result;
  char v12;
  __int128 __dst;
  uint64_t v14;
  int v15;
  __int128 *p_dst;
  const char *v17;
  __int128 *v18;
  const char *v19;
  const char *v20;
  __int128 **p_p_dst;

  v15 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v14 = *((_QWORD *)a1 + 2);
  }
  v15 = 1;
  p_dst = &__dst;
  v17 = a2;
  v18 = &__dst;
  v19 = a2;
  v20 = a2;
  sub_2231ABB0C((uint64_t *)&v18, (uint64_t)&__dst);
  p_dst = &__dst;
  v17 = "{";
  v18 = &__dst;
  v19 = "{";
  v20 = "{";
  if (v15 == -1)
    goto LABEL_12;
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v15])(&p_p_dst, &__dst);
  sub_22319B83C((uint64_t)&p_dst, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v17 = "}";
  v18 = &__dst;
  v19 = "}";
  v20 = "}";
  if (v15 == -1)
LABEL_12:
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v15])(&p_p_dst, &__dst);
  p_dst = &__dst;
  v17 = a4;
  v18 = &__dst;
  v19 = a4;
  v20 = a4;
  if (v15 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v15])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v17 = a6;
  v18 = &__dst;
  v19 = a6;
  v20 = a6;
  if (v15 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v15])(&p_p_dst, &__dst);
  if (v15 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B668[v15])(&p_dst, &__dst);
  if (v15 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B620[v15])(&p_dst, &__dst);
  return result;
}

void sub_223304530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223304548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22330455C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223304570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223304584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223304598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233045AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *sub_2233045C0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B9C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B9C8))
    return &xmmword_25578B9B0;
  v2 = sub_22330469C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578B9B0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578B9C0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578B9B0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B9B0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B9C8);
  return &xmmword_25578B9B0;
}

void sub_223304684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B9C8);
  _Unwind_Resume(a1);
}

std::string *sub_22330469C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B9E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B9E8))
    return &stru_25578B9D0;
  sub_223304940((uint64_t)__p);
  sub_22330478C((char *)__p, &stru_25578B9D0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B9D0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B9E8);
  return &stru_25578B9D0;
}

void sub_22330474C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B9E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B9E8);
  _Unwind_Resume(a1);
}

void sub_22330478C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223304B24();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_2233048F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223304940(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578BA68);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578BA68))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::recon::slam::RemoveAnchorEvent>]", qword_25578BA50);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578BA50, &dword_22314D000);
    __cxa_guard_release(&qword_25578BA68);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578BA88);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578BA88))
  {
    v5 = sub_2231A38CC(qword_25578BA50, "<", 0);
    sub_2231A37C8(qword_25578BA50, 0, v5, qword_25578BA70);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578BA70, &dword_22314D000);
    __cxa_guard_release(&qword_25578BA88);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578BAA8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578BAA8))
  {
    sub_224573040((uint64_t)qword_25578BA70, (uint64_t)&xmmword_25578BA90);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578BA90, &dword_22314D000);
    __cxa_guard_release(&qword_25578BAA8);
  }
  if (byte_25578BAA7 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578BA90, *((unint64_t *)&xmmword_25578BA90 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578BA90;
    *(_QWORD *)(a1 + 16) = unk_25578BAA0;
  }
}

void sub_223304ADC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578BAA8);
  _Unwind_Resume(a1);
}

void sub_223304AF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578BA88);
  _Unwind_Resume(a1);
}

void sub_223304B0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578BA68);
  _Unwind_Resume(a1);
}

__int128 *sub_223304B24()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578BA08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578BA08))
    return &xmmword_25578B9F0;
  v2 = (char *)sub_223304C00();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578B9F0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578BA00 = *((_QWORD *)v2 + 2);
    xmmword_25578B9F0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B9F0, &dword_22314D000);
  __cxa_guard_release(&qword_25578BA08);
  return &xmmword_25578B9F0;
}

void sub_223304BE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578BA08);
  _Unwind_Resume(a1);
}

void *sub_223304C00()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578BA28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578BA28))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::recon::slam::RemoveAnchorEvent]", qword_25578BA10);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578BA10, &dword_22314D000);
    __cxa_guard_release(&qword_25578BA28);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578BA48);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578BA48))
    return &unk_25578BA30;
  sub_224573040((uint64_t)qword_25578BA10, (uint64_t)&unk_25578BA30);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578BA30, &dword_22314D000);
  __cxa_guard_release(&qword_25578BA48);
  return &unk_25578BA30;
}

void sub_223304CF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578BA48);
  _Unwind_Resume(a1);
}

void sub_223304D08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578BA28);
  _Unwind_Resume(a1);
}

uint64_t sub_223304D20(unsigned __int8 *a1)
{
  uint64_t result;
  _DWORD v3[6];
  int v4;
  _QWORD v5[5];
  _QWORD *v6;

  v4 = 0;
  sub_2231ABA1C(v3, "{");
  sub_22319B83C((uint64_t)v5, (uint64_t)v3, a1);
  v5[0] = v3;
  v5[1] = "}";
  v5[2] = v3;
  v5[3] = "}";
  v5[4] = "}";
  if (v4 == -1)
    sub_22316DD70();
  v6 = v5;
  ((void (*)(_QWORD **, _DWORD *))off_24EC2B638[v4])(&v6, v3);
  if (v4 == -1)
    sub_22316DD70();
  v5[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC2B668[v4])(v5, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24EC2B620[v4])(v5, v3);
  return result;
}

void sub_223304E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223304E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_223304E48()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578BAC8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578BAC8))
  {
    sub_223174DE4(v11, "viz::PackageData");
    v2 = sub_223304B24();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_2233032C8();
    if (*((char *)v4 + 23) < 0)
    {
      sub_223197FA4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_2232A1174();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_22319BD1C(v10, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v11, (uint64_t *)v10, &stru_25578BAB0, v8, v9);
    sub_22319BB48(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578BAB0, &dword_22314D000);
        __cxa_guard_release(&qword_25578BAC8);
        return &stru_25578BAB0;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_25578BAB0;
}

void sub_223305054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_25578BAC8);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_223305108()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x2233050E4);
  }
}

uint64_t sub_223305130(__int128 *a1, const char *a2, unsigned __int8 *a3, const char *a4)
{
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;
  const char *v12;
  __int128 *v13;
  const char *v14;
  const char *v15;
  __int128 **v16;

  v10 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&v8, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 2);
  }
  v10 = 1;
  v11 = &v8;
  v12 = a2;
  v13 = &v8;
  v14 = a2;
  v15 = a2;
  sub_2231ABB0C((uint64_t *)&v13, (uint64_t)&v8);
  v11 = &v8;
  v12 = "{";
  v13 = &v8;
  v14 = "{";
  v15 = "{";
  if (v10 == -1)
    goto LABEL_11;
  v16 = &v11;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v10])(&v16, &v8);
  sub_22319B83C((uint64_t)&v11, (uint64_t)&v8, a3);
  v11 = &v8;
  v12 = "}";
  v13 = &v8;
  v14 = "}";
  v15 = "}";
  if (v10 == -1)
LABEL_11:
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v10])(&v16, &v8);
  v11 = &v8;
  v12 = a4;
  v13 = &v8;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_22316DD70();
  v16 = &v11;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v10])(&v16, &v8);
  if (v10 == -1)
    sub_22316DD70();
  v11 = (__int128 *)&v16;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B668[v10])(&v11, &v8);
  if (v10 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B620[v10])(&v11, &v8);
  return result;
}

void sub_2233052F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22330530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223305320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223305334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223305348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_22330535C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24EC2B730;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2233053D0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24EC2B730;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223305444(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2B730;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223305494(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2B730;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2233054C4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_22330551C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

uint64_t sub_223305584(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned __int8 v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  std::string v24;
  __int128 v25;
  __int128 v26;
  void *__p;
  void *v28;
  std::__shared_weak_count *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _BYTE v34[48];
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 8)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamAdapter.cpp", 54, (uint64_t)"request_all_callback", 20, (uint64_t)"Request all anchors block not valid", 35, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v30 = "cv3d.recon.";
  v31 = 11;
  v32 = "api.slam";
  v33 = 8;
  sub_2231A9820((uint64_t)&v30, (uint64_t)v34, 0, 0, &v24);
  sub_224569D7C();
  sub_224569A80();
  if (os_variant_has_internal_diagnostics())
  {
    v2 = sub_2241471F8();
    v3 = v2[2];
    if (!v3)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)&unk_2245B11CF, 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v3 = v2[2];
    }
    v4 = *(_QWORD *)(v3 + 64);
    v5 = (std::mutex *)(v4 + 32);
    std::mutex::lock((std::mutex *)(v4 + 32));
    v7 = *(_QWORD *)(v4 + 96);
    v6 = *(_QWORD *)(v4 + 104);
    std::mutex::unlock(v5);
    if (v7 != v6)
    {
      sub_2241471F8();
      v8 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
      {
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
        {
          v9 = *(double *)&qword_255788F20;
          v10 = sub_2241471F8();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
          {
            v11 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 56))(v8);
            v12 = mach_continuous_time();
            v13 = atomic_load((unsigned __int8 *)&qword_255795560);
            if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_255795560))
            {
              mach_timebase_info((mach_timebase_info_t)&__p);
              LODWORD(v23) = HIDWORD(__p);
              LODWORD(v22) = (_DWORD)__p;
              *(double *)&qword_255795558 = (double)v22 / (double)v23;
              __cxa_guard_release(&qword_255795560);
            }
            v30 = (const char *)llround(*(double *)&qword_255795558 * (double)v12);
            v31 = 2;
            LOBYTE(v32) = 0;
            v34[8] = 0;
            v34[16] = 0;
            v34[40] = 0;
            v35 = (uint64_t)(v9 * 1000000000.0);
            v36 = 2;
            v37 = 1;
            v38 = 0;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            v14 = (char *)operator new(0x14uLL);
            v28 = v14 + 20;
            v29 = (std::__shared_weak_count *)(v14 + 20);
            strcpy(v14, "request_all_anchors");
            __p = v14;
            sub_22450ED50(&v26, 5, (uint64_t)&__p);
            if (__p)
            {
              v28 = __p;
              operator delete(__p);
            }
            v25 = v26;
            sub_223305AC8((uint64_t *)&v25, (uint64_t)&v30, &__p);
            v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
            if (*((_QWORD *)&v25 + 1))
            {
              v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
              do
                v17 = __ldaxr(v16);
              while (__stlxr(v17 - 1, v16));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            sub_2231AD66C((uint64_t)&v30);
            sub_2231AA5A4((uint64_t)v10, v11, (uint64_t)&__p);
            v18 = v29;
            if (v29)
            {
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              do
                v20 = __ldaxr(p_shared_owners);
              while (__stlxr(v20 - 1, p_shared_owners));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
          }
        }
        kdebug_trace();
      }
    }
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 8) + 16))();
}

void sub_223305994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  __cxa_guard_abort(&qword_255795560);
  kdebug_trace();
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223305A50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20CV3DReconSlamAdapter22SetRequestAllAnchorsCBEN4cv3d3kit4capi5BlockIU13block_pointerFvvEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20CV3DReconSlamAdapter22SetRequestAllAnchorsCBEN4cv3d3kit4capi5BlockIU13block_pointerFvvEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20CV3DReconSlamAdapter22SetRequestAllAnchorsCBEN4cv3d3kit4capi5BlockIU13block_pointerFvvEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20CV3DReconSlamAdapter22SetRequestAllAnchorsCBEN4cv3d3kit4capi5BlockIU13block_pointerFvvEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223305ABC()
{
  return &unk_24EC2B790;
}

_QWORD *sub_223305AC8@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;

  v5 = *a1;
  v6 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24EC2B830;
  v7[1] = v5;
  v7[2] = v6;
  sub_2231AB0FC((uint64_t)(v7 + 4), a2);
  *v7 = &off_24EC2B7B0;
  *a3 = &off_24EC6A3B8;
  a3[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24EC6A4B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a3[2] = result;
  return result;
}

void sub_223305B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223305BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v11 = *(std::__shared_weak_count **)(v9 + 16);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  MEMORY[0x227684CE8](v9, 0x10B3C40E92279A6);
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223305C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_223305C28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC2B830;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223305CA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC2B830;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223305D18(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_223305D20(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24EC6A3F8, (const struct __class_type_info *)&unk_24EC2B7F0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_224510F44(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_223305DC8(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_223306E9C();
  sub_223305E7C(a1);
  sub_2231AC984(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_223305E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223305E7C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B808);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B808))
  {
    v4 = sub_223306CA0();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_2231AD150((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_223197FA4(&xmmword_25578B7F0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_25578B800 = *(_QWORD *)(v9 - 8);
      xmmword_25578B7F0 = v7;
    }
    sub_22319BB48(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B7F0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B808);
  }
  return sub_223307164(&xmmword_25578B7F0, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)"}");
}

void sub_223305F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_22319BB48(&a9);
  __cxa_guard_abort(&qword_25578B808);
  _Unwind_Resume(a1);
}

void sub_223305FAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B808);
  _Unwind_Resume(a1);
}

void sub_223305FC4(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 2;
}

void sub_223305FF0(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_22413ADAC(lpsrc, 2, a2);
}

_QWORD *sub_223306028(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC2B830;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233060A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24EC2B830;
  sub_2231AD66C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223306118(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_22330673C();
  return sub_22330626C(v2, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_223306170(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_223306498((uint64_t)v5, (uint64_t)v2, (unsigned __int8 **)(a1 + 8));
  if (v3 == -1)
    sub_22316DD70();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC2B668[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24EC2B620[v3])(v5, v2);
  return result;
}

void sub_223306208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24EC2B620[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_223306240(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_22330626C(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_2231ABB0C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_223306498((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v16])(&p_p_dst, &__dst);
  sub_2231AB90C((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B668[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B620[v16])(&p_dst, &__dst);
  return result;
}

void sub_223306408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223306420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223306434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223306448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22330645C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223306470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223306484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223306498(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_223195210(v5);
  v21[0] = v5;
  sub_224510374((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_22316DBC0();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x227684BE0](v14 + 128);
    MEMORY[0x227684CE8](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_22316DD70();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24EC2B650[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_2233066E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_22330670C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223306728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_22456E764((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_22330673C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B6E8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B6E8))
    return &xmmword_25578B6D0;
  v2 = sub_223306818();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_223197FA4(&xmmword_25578B6D0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_25578B6E0 = v2->__r_.__value_.__r.__words[2];
    xmmword_25578B6D0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B6D0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B6E8);
  return &xmmword_25578B6D0;
}

void sub_223306800(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B6E8);
  _Unwind_Resume(a1);
}

std::string *sub_223306818()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B708);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B708))
    return &stru_25578B6F0;
  sub_223306ABC((uint64_t)__p);
  sub_223306908((char *)__p, &stru_25578B6F0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B6F0, &dword_22314D000);
  __cxa_guard_release(&qword_25578B708);
  return &stru_25578B6F0;
}

void sub_2233068C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25578B708);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25578B708);
  _Unwind_Resume(a1);
}

void sub_223306908(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_223306CA0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_2231AC788();
  if (*((char *)v6 + 23) < 0)
  {
    sub_223197FA4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_22319BD1C(&__p, (uint64_t)__dst, 2uLL);
  sub_2245730F4(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_223306A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_22319BB48((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223306ABC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25578B788);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25578B788))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Numbers>]", qword_25578B770);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B770, &dword_22314D000);
    __cxa_guard_release(&qword_25578B788);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25578B7A8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25578B7A8))
  {
    v5 = sub_2231A38CC(qword_25578B770, "<", 0);
    sub_2231A37C8(qword_25578B770, 0, v5, qword_25578B790);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B790, &dword_22314D000);
    __cxa_guard_release(&qword_25578B7A8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_25578B7C8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25578B7C8))
  {
    sub_224573040((uint64_t)qword_25578B790, (uint64_t)&xmmword_25578B7B0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B7B0, &dword_22314D000);
    __cxa_guard_release(&qword_25578B7C8);
  }
  if (byte_25578B7C7 < 0)
  {
    sub_223197FA4((_BYTE *)a1, (void *)xmmword_25578B7B0, *((unint64_t *)&xmmword_25578B7B0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_25578B7B0;
    *(_QWORD *)(a1 + 16) = unk_25578B7C0;
  }
}

void sub_223306C58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B7C8);
  _Unwind_Resume(a1);
}

void sub_223306C70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B7A8);
  _Unwind_Resume(a1);
}

void sub_223306C88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B788);
  _Unwind_Resume(a1);
}

__int128 *sub_223306CA0()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B728);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B728))
    return &xmmword_25578B710;
  v2 = (char *)sub_223306D7C();
  if (v2[23] < 0)
  {
    sub_223197FA4(&xmmword_25578B710, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_25578B720 = *((_QWORD *)v2 + 2);
    xmmword_25578B710 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25578B710, &dword_22314D000);
  __cxa_guard_release(&qword_25578B728);
  return &xmmword_25578B710;
}

void sub_223306D64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B728);
  _Unwind_Resume(a1);
}

void *sub_223306D7C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_25578B748);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B748))
  {
    sub_224572DCC("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Numbers]", qword_25578B730);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_25578B730, &dword_22314D000);
    __cxa_guard_release(&qword_25578B748);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_25578B768);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_25578B768))
    return &unk_25578B750;
  sub_224573040((uint64_t)qword_25578B730, (uint64_t)&unk_25578B750);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_25578B750, &dword_22314D000);
  __cxa_guard_release(&qword_25578B768);
  return &unk_25578B750;
}

void sub_223306E6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B768);
  _Unwind_Resume(a1);
}

void sub_223306E84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25578B748);
  _Unwind_Resume(a1);
}

std::string *sub_223306E9C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25578B7E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25578B7E8))
  {
    sub_223174DE4(v9, "viz::PackageData");
    v2 = sub_223306CA0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_223197FA4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_2232A0DB4();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_223197FA4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_22319BD1C(v8, (uint64_t)__dst, 4uLL);
    sub_2245730F4((char *)v9, (uint64_t *)v8, &stru_25578B7D0, v6, v7);
    sub_22319BB48(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25578B7D0, &dword_22314D000);
        __cxa_guard_release(&qword_25578B7E8);
        return &stru_25578B7D0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_25578B7D0;
}

void sub_223307080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_22319BB48(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25578B7E8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25578B7E8);
  _Unwind_Resume(a1);
}

uint64_t sub_223307164(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_223197FA4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_2231ABB0C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_223306498((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_22316DD70();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24EC2B638[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_22316DD70();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B668[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24EC2B620[v11])(&p_dst, &__dst);
  return result;
}

void sub_2233072A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233072BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233072D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233072E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2233072F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_22319B964((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22330730C(uint64_t a1)
{
  sub_223255CAC(a1 + 32);
  return a1;
}

void sub_223307334(uint64_t a1)
{
  sub_223255CAC(a1 + 32);
  JUMPOUT(0x227684CE8);
}

BOOL sub_22330736C(_QWORD *a1, uint64_t *a2, __int128 *a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  void *__p[2];
  char v51;
  CFTypeRef cf;
  std::__shared_weak_count *v53;
  std::error_condition v54;

  if (a2)
  {
    v8 = *a2;
    v7 = a2[1];
    v10 = (char *)a1[11];
    v9 = a1[12];
    if ((unint64_t)v10 < v9)
    {
      *(_QWORD *)v10 = v8;
      *((_QWORD *)v10 + 1) = v7;
      v11 = (uint64_t)(v10 + 16);
LABEL_32:
      a1[11] = v11;
      v28 = *a3;
      v27 = a3[1];
      v30 = a3[2];
      v29 = a3[3];
      v32 = (char *)a1[14];
      v31 = a1[15];
      if ((unint64_t)v32 < v31)
      {
        *(_OWORD *)v32 = v28;
        *((_OWORD *)v32 + 1) = v27;
        v33 = v32 + 64;
        *((_OWORD *)v32 + 2) = v30;
        *((_OWORD *)v32 + 3) = v29;
LABEL_49:
        a1[14] = v33;
        return a2 != 0;
      }
      v34 = (char *)a1[13];
      v35 = (v32 - v34) >> 6;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 58)
        sub_223257BE4();
      v37 = v31 - (_QWORD)v34;
      if (v37 >> 5 > v36)
        v36 = v37 >> 5;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFC0)
        v38 = 0x3FFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (!v38)
      {
        v39 = 0;
        goto LABEL_44;
      }
      v45 = v28;
      v46 = v27;
      v47 = v30;
      v48 = v29;
      if (!(v38 >> 58))
      {
        v39 = (char *)operator new(v38 << 6);
        v30 = v47;
        v29 = v48;
        v28 = v45;
        v27 = v46;
LABEL_44:
        v40 = &v39[64 * v35];
        *(_OWORD *)v40 = v28;
        *((_OWORD *)v40 + 1) = v27;
        *((_OWORD *)v40 + 2) = v30;
        *((_OWORD *)v40 + 3) = v29;
        v33 = v40 + 64;
        if (v32 != v34)
        {
          do
          {
            v41 = *((_OWORD *)v32 - 4);
            v42 = *((_OWORD *)v32 - 3);
            v43 = *((_OWORD *)v32 - 1);
            *((_OWORD *)v40 - 2) = *((_OWORD *)v32 - 2);
            *((_OWORD *)v40 - 1) = v43;
            *((_OWORD *)v40 - 4) = v41;
            *((_OWORD *)v40 - 3) = v42;
            v40 -= 64;
            v32 -= 64;
          }
          while (v32 != v34);
          v32 = (char *)a1[13];
        }
        a1[13] = v40;
        a1[14] = v33;
        a1[15] = &v39[64 * v38];
        if (v32)
          operator delete(v32);
        goto LABEL_49;
      }
LABEL_51:
      sub_223174E94();
    }
    v18 = (char **)(a1 + 10);
    v19 = (char *)a1[10];
    v20 = (v10 - v19) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      sub_22316E078();
    v22 = v9 - (_QWORD)v19;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 60)
        goto LABEL_51;
      v24 = (char *)operator new(16 * v23);
      v25 = &v24[16 * v20];
      v26 = &v24[16 * v23];
      *(_QWORD *)v25 = v8;
      *((_QWORD *)v25 + 1) = v7;
      v11 = (uint64_t)(v25 + 16);
      if (v10 == v19)
        goto LABEL_30;
    }
    else
    {
      v25 = (char *)(16 * v20);
      v26 = 0;
      *(_QWORD *)v25 = v8;
      *((_QWORD *)v25 + 1) = v7;
      v11 = 16 * v20 + 16;
      if (v10 == v19)
        goto LABEL_30;
    }
    do
    {
      *((_OWORD *)v25 - 1) = *((_OWORD *)v10 - 1);
      v25 -= 16;
      v10 -= 16;
    }
    while (v10 != v19);
    v10 = *v18;
LABEL_30:
    a1[10] = v25;
    a1[11] = v11;
    a1[12] = v26;
    if (v10)
      operator delete(v10);
    goto LABEL_32;
  }
  v51 = 12;
  strcpy((char *)__p, "UUID is NULL");
  v13 = (char *)operator new(0x68uLL);
  v49 = v13;
  strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamMetadata.cpp");
  if (a4)
  {
    *(_QWORD *)&v54.__val_ = 22;
    v54.__cat_ = std::generic_category();
    sub_2245321DC(&v54, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v14 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v14;
    v15 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v13 = v49;
  }
  operator delete(v13);
  if (v51 < 0)
    operator delete(__p[0]);
  return a2 != 0;
}

void sub_2233076BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;

  operator delete(v26);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_2233076F8(_QWORD *a1, uint64_t *a2, __int128 *a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  void *__p[2];
  char v51;
  CFTypeRef cf;
  std::__shared_weak_count *v53;
  std::error_condition v54;

  if (a2)
  {
    v8 = *a2;
    v7 = a2[1];
    v10 = (char *)a1[5];
    v9 = a1[6];
    if ((unint64_t)v10 < v9)
    {
      *(_QWORD *)v10 = v8;
      *((_QWORD *)v10 + 1) = v7;
      v11 = (uint64_t)(v10 + 16);
LABEL_32:
      a1[5] = v11;
      v28 = *a3;
      v27 = a3[1];
      v30 = a3[2];
      v29 = a3[3];
      v32 = (char *)a1[8];
      v31 = a1[9];
      if ((unint64_t)v32 < v31)
      {
        *(_OWORD *)v32 = v28;
        *((_OWORD *)v32 + 1) = v27;
        v33 = v32 + 64;
        *((_OWORD *)v32 + 2) = v30;
        *((_OWORD *)v32 + 3) = v29;
LABEL_49:
        a1[8] = v33;
        return a2 != 0;
      }
      v34 = (char *)a1[7];
      v35 = (v32 - v34) >> 6;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 58)
        sub_223257BE4();
      v37 = v31 - (_QWORD)v34;
      if (v37 >> 5 > v36)
        v36 = v37 >> 5;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFC0)
        v38 = 0x3FFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (!v38)
      {
        v39 = 0;
        goto LABEL_44;
      }
      v45 = v28;
      v46 = v27;
      v47 = v30;
      v48 = v29;
      if (!(v38 >> 58))
      {
        v39 = (char *)operator new(v38 << 6);
        v30 = v47;
        v29 = v48;
        v28 = v45;
        v27 = v46;
LABEL_44:
        v40 = &v39[64 * v35];
        *(_OWORD *)v40 = v28;
        *((_OWORD *)v40 + 1) = v27;
        *((_OWORD *)v40 + 2) = v30;
        *((_OWORD *)v40 + 3) = v29;
        v33 = v40 + 64;
        if (v32 != v34)
        {
          do
          {
            v41 = *((_OWORD *)v32 - 4);
            v42 = *((_OWORD *)v32 - 3);
            v43 = *((_OWORD *)v32 - 1);
            *((_OWORD *)v40 - 2) = *((_OWORD *)v32 - 2);
            *((_OWORD *)v40 - 1) = v43;
            *((_OWORD *)v40 - 4) = v41;
            *((_OWORD *)v40 - 3) = v42;
            v40 -= 64;
            v32 -= 64;
          }
          while (v32 != v34);
          v32 = (char *)a1[7];
        }
        a1[7] = v40;
        a1[8] = v33;
        a1[9] = &v39[64 * v38];
        if (v32)
          operator delete(v32);
        goto LABEL_49;
      }
LABEL_51:
      sub_223174E94();
    }
    v18 = (char **)(a1 + 4);
    v19 = (char *)a1[4];
    v20 = (v10 - v19) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      sub_22316E078();
    v22 = v9 - (_QWORD)v19;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 60)
        goto LABEL_51;
      v24 = (char *)operator new(16 * v23);
      v25 = &v24[16 * v20];
      v26 = &v24[16 * v23];
      *(_QWORD *)v25 = v8;
      *((_QWORD *)v25 + 1) = v7;
      v11 = (uint64_t)(v25 + 16);
      if (v10 == v19)
        goto LABEL_30;
    }
    else
    {
      v25 = (char *)(16 * v20);
      v26 = 0;
      *(_QWORD *)v25 = v8;
      *((_QWORD *)v25 + 1) = v7;
      v11 = 16 * v20 + 16;
      if (v10 == v19)
        goto LABEL_30;
    }
    do
    {
      *((_OWORD *)v25 - 1) = *((_OWORD *)v10 - 1);
      v25 -= 16;
      v10 -= 16;
    }
    while (v10 != v19);
    v10 = *v18;
LABEL_30:
    a1[4] = v25;
    a1[5] = v11;
    a1[6] = v26;
    if (v10)
      operator delete(v10);
    goto LABEL_32;
  }
  v51 = 12;
  strcpy((char *)__p, "UUID is NULL");
  v13 = (char *)operator new(0x68uLL);
  v49 = v13;
  strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamMetadata.cpp");
  if (a4)
  {
    *(_QWORD *)&v54.__val_ = 22;
    v54.__cat_ = std::generic_category();
    sub_2245321DC(&v54, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v14 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v14;
    v15 = v53;
    if (v53)
    {
      p_shared_owners = (unint64_t *)&v53->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v13 = v49;
  }
  operator delete(v13);
  if (v51 < 0)
    operator delete(__p[0]);
  return a2 != 0;
}

void sub_223307A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;

  operator delete(v26);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_223307A84(_QWORD *a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v26;
  void *__p[2];
  char v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  std::error_condition v31;

  if (a2)
  {
    v6 = *a2;
    v5 = a2[1];
    v8 = (char *)a1[17];
    v7 = a1[18];
    if ((unint64_t)v8 < v7)
    {
      *(_QWORD *)v8 = v6;
      *((_QWORD *)v8 + 1) = v5;
      v9 = (uint64_t)(v8 + 16);
LABEL_32:
      a1[17] = v9;
      return a2 != 0;
    }
    v16 = (char **)(a1 + 16);
    v17 = (char *)a1[16];
    v18 = (v8 - v17) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      sub_22316E078();
    v20 = v7 - (_QWORD)v17;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 60)
        sub_223174E94();
      v22 = (char *)operator new(16 * v21);
      v23 = &v22[16 * v18];
      v24 = &v22[16 * v21];
      *(_QWORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = v5;
      v9 = (uint64_t)(v23 + 16);
      if (v8 == v17)
        goto LABEL_30;
    }
    else
    {
      v23 = (char *)(16 * v18);
      v24 = 0;
      *(_QWORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = v5;
      v9 = 16 * v18 + 16;
      if (v8 == v17)
      {
LABEL_30:
        a1[16] = v23;
        a1[17] = v9;
        a1[18] = v24;
        if (v8)
          operator delete(v8);
        goto LABEL_32;
      }
    }
    do
    {
      *((_OWORD *)v23 - 1) = *((_OWORD *)v8 - 1);
      v23 -= 16;
      v8 -= 16;
    }
    while (v8 != v17);
    v8 = *v16;
    goto LABEL_30;
  }
  v28 = 12;
  strcpy((char *)__p, "UUID is NULL");
  v11 = (char *)operator new(0x68uLL);
  v26 = v11;
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v31.__val_ = 22;
    v31.__cat_ = std::generic_category();
    sub_2245321DC(&v31, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v12 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v12;
    v13 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v11 = v26;
  }
  operator delete(v11);
  if (v28 < 0)
    operator delete(__p[0]);
  return a2 != 0;
}

void sub_223307CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_223307D20(_QWORD *a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v26;
  void *__p[2];
  char v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  std::error_condition v31;

  if (a2)
  {
    v6 = *a2;
    v5 = a2[1];
    v8 = (char *)a1[20];
    v7 = a1[21];
    if ((unint64_t)v8 < v7)
    {
      *(_QWORD *)v8 = v6;
      *((_QWORD *)v8 + 1) = v5;
      v9 = (uint64_t)(v8 + 16);
LABEL_32:
      a1[20] = v9;
      return a2 != 0;
    }
    v16 = (char **)(a1 + 19);
    v17 = (char *)a1[19];
    v18 = (v8 - v17) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      sub_22316E078();
    v20 = v7 - (_QWORD)v17;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 60)
        sub_223174E94();
      v22 = (char *)operator new(16 * v21);
      v23 = &v22[16 * v18];
      v24 = &v22[16 * v21];
      *(_QWORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = v5;
      v9 = (uint64_t)(v23 + 16);
      if (v8 == v17)
        goto LABEL_30;
    }
    else
    {
      v23 = (char *)(16 * v18);
      v24 = 0;
      *(_QWORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = v5;
      v9 = 16 * v18 + 16;
      if (v8 == v17)
      {
LABEL_30:
        a1[19] = v23;
        a1[20] = v9;
        a1[21] = v24;
        if (v8)
          operator delete(v8);
        goto LABEL_32;
      }
    }
    do
    {
      *((_OWORD *)v23 - 1) = *((_OWORD *)v8 - 1);
      v23 -= 16;
      v8 -= 16;
    }
    while (v8 != v17);
    v8 = *v16;
    goto LABEL_30;
  }
  v28 = 12;
  strcpy((char *)__p, "UUID is NULL");
  v11 = (char *)operator new(0x68uLL);
  v26 = v11;
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v31.__val_ = 22;
    v31.__cat_ = std::generic_category();
    sub_2245321DC(&v31, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v12 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v12;
    v13 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v11 = v26;
  }
  operator delete(v11);
  if (v28 < 0)
    operator delete(__p[0]);
  return a2 != 0;
}

void sub_223307F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_223307FBC(_QWORD *a1, uint64_t *a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char **v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v26;
  void *__p[2];
  char v28;
  CFTypeRef cf;
  std::__shared_weak_count *v30;
  std::error_condition v31;

  if (a2)
  {
    v6 = *a2;
    v5 = a2[1];
    v8 = (char *)a1[23];
    v7 = a1[24];
    if ((unint64_t)v8 < v7)
    {
      *(_QWORD *)v8 = v6;
      *((_QWORD *)v8 + 1) = v5;
      v9 = (uint64_t)(v8 + 16);
LABEL_32:
      a1[23] = v9;
      return a2 != 0;
    }
    v16 = (char **)(a1 + 22);
    v17 = (char *)a1[22];
    v18 = (v8 - v17) >> 4;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60)
      sub_22316E078();
    v20 = v7 - (_QWORD)v17;
    if (v20 >> 3 > v19)
      v19 = v20 >> 3;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
      v21 = 0xFFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 60)
        sub_223174E94();
      v22 = (char *)operator new(16 * v21);
      v23 = &v22[16 * v18];
      v24 = &v22[16 * v21];
      *(_QWORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = v5;
      v9 = (uint64_t)(v23 + 16);
      if (v8 == v17)
        goto LABEL_30;
    }
    else
    {
      v23 = (char *)(16 * v18);
      v24 = 0;
      *(_QWORD *)v23 = v6;
      *((_QWORD *)v23 + 1) = v5;
      v9 = 16 * v18 + 16;
      if (v8 == v17)
      {
LABEL_30:
        a1[22] = v23;
        a1[23] = v9;
        a1[24] = v24;
        if (v8)
          operator delete(v8);
        goto LABEL_32;
      }
    }
    do
    {
      *((_OWORD *)v23 - 1) = *((_OWORD *)v8 - 1);
      v23 -= 16;
      v8 -= 16;
    }
    while (v8 != v17);
    v8 = *v16;
    goto LABEL_30;
  }
  v28 = 12;
  strcpy((char *)__p, "UUID is NULL");
  v11 = (char *)operator new(0x68uLL);
  v26 = v11;
  strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamMetadata.cpp");
  if (a3)
  {
    *(_QWORD *)&v31.__val_ = 22;
    v31.__cat_ = std::generic_category();
    sub_2245321DC(&v31, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v12 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v12;
    v13 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v11 = v26;
  }
  operator delete(v11);
  if (v28 < 0)
    operator delete(__p[0]);
  return a2 != 0;
}

void sub_22330821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_223308258(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  char *v5;
  CFTypeRef v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  if (a2 >= 3)
  {
    __p = operator new(0x20uLL);
    v12 = xmmword_2245B8D00;
    strcpy((char *)__p, "SLAM Mode is out of range");
    v5 = (char *)operator new(0x68uLL);
    strcpy(v5, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v6 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v6;
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    operator delete(v5);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
  }
  else
  {
    *(_BYTE *)(a1 + 200) = a2;
  }
  return a2 < 3;
}

void sub_2233083D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223308410(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 56);
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_2232959C0(v3 - 20);
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223308468(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 56);
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_2232959C0(v3 - 20);
      while (v3 != v2);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233084D0(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char __p[21];
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a2 || (v12 = *(_QWORD *)(a1 + 48), v11 = *(_QWORD *)(a1 + 56), v12 == v11))
  {
    v21 = 20;
    strcpy(__p, "Invalid floor index.");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v21 < 0)
      operator delete(*(void **)__p);
    v9 = 0;
  }
  else
  {
    v13 = v11 - v12 - 160;
    if (v13 < 0xA0)
    {
      v9 = 0;
      v14 = *(_QWORD *)(a1 + 48);
      do
      {
LABEL_22:
        v9 |= *(_BYTE *)(v14 + 148) != 0;
        v14 += 160;
      }
      while (v14 != v11);
      return v9 & 1;
    }
    v15 = 0;
    v16 = 0;
    v17 = v13 / 0xA0 + 1;
    v14 = v12 + 160 * (v17 & 0x3FFFFFFFFFFFFFELL);
    v18 = (_BYTE *)(v12 + 308);
    v19 = v17 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      v15 |= *(v18 - 160) != 0;
      v16 |= *v18 != 0;
      v18 += 320;
      v19 -= 2;
    }
    while (v19);
    v9 = v16 | v15;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFELL))
      goto LABEL_22;
  }
  return v9 & 1;
}

void sub_2233086DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_223308718(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  float result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char __p[21];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a2 || *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
  {
    v15 = 20;
    strcpy(__p, "Invalid floor index.");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v15 < 0)
      operator delete(*(void **)__p);
    return 0.0;
  }
  else
  {
    v11 = sub_2233084D0(a1, 0, 0);
    result = 0.0;
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 56);
      if (v12 == v13)
      {
        return 3.4028e38;
      }
      else
      {
        result = 3.4028e38;
        do
        {
          if (*(_BYTE *)(v12 + 148) && *(float *)(v12 + 144) < result)
            result = *(float *)(v12 + 144);
          v12 += 160;
        }
        while (v12 != v13);
      }
    }
  }
  return result;
}

void sub_2233088F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_22330892C(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  char __p[21];
  char v21;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  std::error_condition v24;

  if (a2 || (v12 = *(_QWORD *)(a1 + 48), v11 = *(_QWORD *)(a1 + 56), v12 == v11))
  {
    v21 = 20;
    strcpy(__p, "Invalid floor index.");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v24.__val_ = 22;
      v24.__cat_ = std::generic_category();
      sub_2245321DC(&v24, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v21 < 0)
      operator delete(*(void **)__p);
    v9 = 0;
  }
  else
  {
    v13 = v11 - v12 - 160;
    if (v13 < 0xA0)
    {
      v9 = 0;
      v14 = *(_QWORD *)(a1 + 48);
      do
      {
LABEL_22:
        v9 |= *(_BYTE *)(v14 + 156) != 0;
        v14 += 160;
      }
      while (v14 != v11);
      return v9 & 1;
    }
    v15 = 0;
    v16 = 0;
    v17 = v13 / 0xA0 + 1;
    v14 = v12 + 160 * (v17 & 0x3FFFFFFFFFFFFFELL);
    v18 = (_BYTE *)(v12 + 316);
    v19 = v17 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      v15 |= *(v18 - 160) != 0;
      v16 |= *v18 != 0;
      v18 += 320;
      v19 -= 2;
    }
    while (v19);
    v9 = v16 | v15;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFELL))
      goto LABEL_22;
  }
  return v9 & 1;
}

void sub_223308B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_223308B74(uint64_t a1, int a2, CFTypeRef *a3)
{
  char *v4;
  CFTypeRef v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  float result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char __p[21];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a2 || *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
  {
    v15 = 20;
    strcpy(__p, "Invalid floor index.");
    v4 = (char *)operator new(0x70uLL);
    strcpy(v4, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v5 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v5;
      v6 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    operator delete(v4);
    if (v15 < 0)
      operator delete(*(void **)__p);
    return 0.0;
  }
  else
  {
    v11 = sub_22330892C(a1, 0, 0);
    result = 0.0;
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(a1 + 56);
      if (v12 == v13)
      {
        return -3.4028e38;
      }
      else
      {
        result = -3.4028e38;
        do
        {
          if (*(_BYTE *)(v12 + 156) && result < *(float *)(v12 + 152))
            result = *(float *)(v12 + 152);
          v12 += 160;
        }
        while (v12 != v13);
      }
    }
  }
  return result;
}

void sub_223308D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223308D88(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v3) >> 5) > a2)
    return *(unsigned int *)(v3 + 160 * a2);
  __p = operator new(0x19uLL);
  v12 = xmmword_2245B9430;
  strcpy((char *)__p, "Invalid boundary index.");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_223308F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_223308F80(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  float v4;
  float v5;
  BOOL v6;
  float result;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p;
  __int128 v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  v3 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v3) >> 5) <= a2)
  {
    __p = operator new(0x19uLL);
    v15 = xmmword_2245B9430;
    strcpy((char *)__p, "Invalid boundary index.");
    v9 = (char *)operator new(0x70uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_2245321DC(&v18, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (SHIBYTE(v15) < 0)
      operator delete(__p);
    return 0.0;
  }
  else
  {
    v4 = *(float *)(v3 + 160 * a2 + 108);
    v5 = 1.0;
    if (v4 <= 1.0)
      v5 = *(float *)(v3 + 160 * a2 + 108);
    v6 = v4 < 0.0;
    result = 0.0;
    if (!v6)
      return v5;
  }
  return result;
}

void sub_223309154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float sub_223309190(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  float result;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v3) >> 5) <= a2)
  {
    __p = operator new(0x19uLL);
    v12 = xmmword_2245B9430;
    strcpy((char *)__p, "Invalid boundary index.");
    v6 = (char *)operator new(0x70uLL);
    strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a3)
    {
      *(_QWORD *)&v15.__val_ = 22;
      v15.__cat_ = std::generic_category();
      sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v7 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v7;
      v8 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    operator delete(v6);
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    return 0.0;
  }
  else
  {
    result = *(float *)(v3 + 160 * a2 + 112);
    if (result < 0.0)
      return 0.0;
  }
  return result;
}

void sub_223309358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223309394(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v3) >> 5) > a2)
    return (*(_QWORD *)(v3 + 160 * a2 + 16) - *(_QWORD *)(v3 + 160 * a2 + 8)) >> 3;
  __p = operator new(0x19uLL);
  v12 = xmmword_2245B9430;
  strcpy((char *)__p, "Invalid boundary index.");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_223309558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_223309594(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4, double a5, double a6, float32x4_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  float *v11;
  float32x4_t v12;
  double result;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  CFTypeRef v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v26;
  std::error_condition v27;

  v8 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v8) >> 5) <= a2)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Invalid boundary index.");
    v14 = (char *)operator new(0x70uLL);
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v27.__val_ = 22;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v15;
      v16 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    operator delete(v14);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0.0;
  }
  else
  {
    v10 = (uint64_t *)(v8 + 160 * a2 + 8);
    v9 = *v10;
    if (a3 < (unint64_t)((v10[1] - *v10) >> 3))
    {
      v11 = (float *)(v9 + 8 * a3);
      a7.i64[0] = *(_QWORD *)(a1 + 8);
      a7.i32[2] = *(_DWORD *)(a1 + 16);
      v12 = vmulq_n_f32(a7, *v11);
      a7.i64[0] = *(_QWORD *)(a1 + 20);
      a7.i32[2] = *(_DWORD *)(a1 + 28);
      *(_QWORD *)&result = vaddq_f32(v12, vmulq_n_f32(a7, v11[1])).u64[0];
      return result;
    }
    HIBYTE(__p[2]) = 20;
    strcpy((char *)__p, "Invalid point index.");
    v19 = (char *)operator new(0x70uLL);
    strcpy(v19, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v27.__val_ = 22;
      v27.__cat_ = std::generic_category();
      sub_2245321DC(&v27, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v20 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v20;
      v21 = v26;
      if (v26)
      {
        v22 = (unint64_t *)&v26->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    operator delete(v19);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0.0;
  }
  operator delete(__p[0]);
  return 0.0;
}

void sub_2233098C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223309908(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v8;
  CFTypeRef v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  CFTypeRef v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  CFTypeRef v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v25;
  std::error_condition v26;

  v5 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v5) >> 5) <= a2)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Invalid boundary index.");
    v8 = (char *)operator new(0x70uLL);
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v9 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v9;
      v10 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    operator delete(v8);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else if (a3 >= (unint64_t)((uint64_t)(*(_QWORD *)(v5 + 160 * a2 + 16) - *(_QWORD *)(v5 + 160 * a2 + 8)) >> 3))
  {
    strcpy((char *)__p, "Invalid segment index.");
    HIBYTE(__p[2]) = 22;
    v13 = (char *)operator new(0x70uLL);
    strcpy(v13, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v14 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v14;
      v15 = v25;
      if (v25)
      {
        v16 = (unint64_t *)&v25->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    operator delete(v13);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 160 * a2 + 56);
    if (*(_QWORD *)(v5 + 160 * a2 + 64) - v6 > (unint64_t)a3)
      return *(unsigned __int8 *)(v6 + a3);
    strcpy((char *)__p, "Invalid segment index.");
    HIBYTE(__p[2]) = 22;
    v18 = (char *)operator new(0x70uLL);
    strcpy(v18, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v26.__val_ = 22;
      v26.__cat_ = std::generic_category();
      sub_2245321DC(&v26, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v19;
      v20 = v25;
      if (v25)
      {
        v21 = (unint64_t *)&v25->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    operator delete(v18);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return 0;
  }
  operator delete(__p[0]);
  return 0;
}

void sub_223309D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223309D8C(uint64_t a1, unsigned int a2, CFTypeRef *a3)
{
  uint64_t v3;
  char *v6;
  CFTypeRef v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  __int128 v12;
  CFTypeRef cf;
  std::__shared_weak_count *v14;
  std::error_condition v15;

  v3 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v3) >> 5) > a2)
    return -1431655765 * ((*(_QWORD *)(v3 + 160 * a2 + 40) - *(_QWORD *)(v3 + 160 * a2 + 32)) >> 3);
  __p = operator new(0x19uLL);
  v12 = xmmword_2245B9430;
  strcpy((char *)__p, "Invalid boundary index.");
  v6 = (char *)operator new(0x70uLL);
  strcpy(v6, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
  if (a3)
  {
    *(_QWORD *)&v15.__val_ = 22;
    v15.__cat_ = std::generic_category();
    sub_2245321DC(&v15, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v7 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v7;
    v8 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  operator delete(v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
  return 0;
}

void sub_223309F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223309F98(uint64_t a1, unsigned int a2, unsigned int a3, CFTypeRef *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  __int128 v20;
  CFTypeRef cf;
  std::__shared_weak_count *v22;
  std::error_condition v23;

  v5 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v5) >> 5) > a2)
  {
    v7 = (uint64_t *)(v5 + 160 * a2 + 32);
    v6 = *v7;
    if (0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3) > a3)
      return (*(_QWORD *)(v6 + 24 * a3 + 8) - *(_QWORD *)(v6 + 24 * a3)) >> 3;
    __p = operator new(0x20uLL);
    v20 = xmmword_2245B8EA0;
    strcpy((char *)__p, "Invalid interior polygon index.");
    v14 = (char *)operator new(0x70uLL);
    strcpy(v14, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a4)
    {
      *(_QWORD *)&v23.__val_ = 22;
      v23.__cat_ = std::generic_category();
      sub_2245321DC(&v23, (uint64_t)&__p, (CFErrorRef *)&cf);
      if (*a4)
        CFRelease(*a4);
      *a4 = 0;
      v15 = cf;
      if (cf)
        CFRetain(cf);
      *a4 = v15;
      v16 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    operator delete(v14);
    if (SHIBYTE(v20) < 0)
      goto LABEL_27;
    return 0;
  }
  __p = operator new(0x19uLL);
  v20 = xmmword_2245B9430;
  strcpy((char *)__p, "Invalid boundary index.");
  v9 = (char *)operator new(0x70uLL);
  strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
  if (a4)
  {
    *(_QWORD *)&v23.__val_ = 22;
    v23.__cat_ = std::generic_category();
    sub_2245321DC(&v23, (uint64_t)&__p, (CFErrorRef *)&cf);
    if (*a4)
      CFRelease(*a4);
    *a4 = 0;
    v10 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v10;
    v11 = v22;
    if (v22)
    {
      v12 = (unint64_t *)&v22->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  operator delete(v9);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
    return 0;
LABEL_27:
  operator delete(__p);
  return 0;
}

void sub_22330A2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  operator delete(v18);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_22330A2EC(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, CFTypeRef *a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  float *v13;
  float32x4_t v14;
  double result;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  CFTypeRef v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  CFTypeRef v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v33;
  std::error_condition v34;

  v9 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v9) >> 5) <= a2)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Invalid boundary index.");
    v16 = (char *)operator new(0x70uLL);
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a5)
    {
      *(_QWORD *)&v34.__val_ = 22;
      v34.__cat_ = std::generic_category();
      sub_2245321DC(&v34, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v17;
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    operator delete(v16);
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_41;
    return 0.0;
  }
  v10 = *(_QWORD *)(v9 + 160 * a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 160 * a2 + 40) - v10) >> 3) <= a3)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8EA0;
    strcpy((char *)__p[0], "Invalid interior polygon index.");
    v21 = (char *)operator new(0x70uLL);
    strcpy(v21, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (a5)
    {
      *(_QWORD *)&v34.__val_ = 22;
      v34.__cat_ = std::generic_category();
      sub_2245321DC(&v34, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v22 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v22;
      v23 = v33;
      if (v33)
      {
        v24 = (unint64_t *)&v33->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    operator delete(v21);
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_41;
    return 0.0;
  }
  v12 = (uint64_t *)(v10 + 24 * a3);
  v11 = *v12;
  if (a4 < (unint64_t)((v12[1] - *v12) >> 3))
  {
    v13 = (float *)(v11 + 8 * a4);
    a8.i64[0] = *(_QWORD *)(a1 + 8);
    a8.i32[2] = *(_DWORD *)(a1 + 16);
    v14 = vmulq_n_f32(a8, *v13);
    a8.i64[0] = *(_QWORD *)(a1 + 20);
    a8.i32[2] = *(_DWORD *)(a1 + 28);
    *(_QWORD *)&result = vaddq_f32(v14, vmulq_n_f32(a8, v13[1])).u64[0];
    return result;
  }
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "Invalid point index.");
  v26 = (char *)operator new(0x70uLL);
  strcpy(v26, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
  if (a5)
  {
    *(_QWORD *)&v34.__val_ = 22;
    v34.__cat_ = std::generic_category();
    sub_2245321DC(&v34, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v27 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v27;
    v28 = v33;
    if (v33)
    {
      v29 = (unint64_t *)&v33->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  operator delete(v26);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0.0;
LABEL_41:
  operator delete(__p[0]);
  return 0.0;
}

void sub_22330A778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_22330A7CC(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, CFTypeRef *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  CFTypeRef v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v16;
  CFTypeRef v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;
  uint64_t v25;
  const double *v26;
  uint64x2_t v27;
  uint64x2_t v28;
  const double *v29;
  const double *v30;
  const double *v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  CFTypeRef v40;
  unint64_t *v41;
  CFTypeRef v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  void *__p[4];
  CFTypeRef cf;
  std::__shared_weak_count *v49;
  std::error_condition v50;
  float64x2x3_t v51;
  float64x2x3_t v52;
  float64x2x3_t v53;
  float64x2x3_t v54;

  v6 = *(_QWORD *)(a1 + 48);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 56) - v6) >> 5) <= a2)
  {
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B9430;
    strcpy((char *)__p[0], "Invalid boundary index.");
    v10 = (char *)operator new(0x70uLL);
    v45 = v10;
    strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (!a5)
      goto LABEL_17;
    *(_QWORD *)&v50.__val_ = 22;
    v50.__cat_ = std::generic_category();
    sub_2245321DC(&v50, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v11 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v11;
    v12 = v49;
    if (!v49)
      goto LABEL_16;
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (v14)
      goto LABEL_16;
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
LABEL_16:
    v10 = v45;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v6 + 160 * a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v6 + 160 * a2 + 40) - v7) >> 3) <= a3)
  {
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_2245B8EA0;
    strcpy((char *)__p[0], "Invalid interior polygon index.");
    v16 = (char *)operator new(0x70uLL);
    v46 = v16;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (!a5)
      goto LABEL_50;
    *(_QWORD *)&v50.__val_ = 22;
    v50.__cat_ = std::generic_category();
    sub_2245321DC(&v50, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v17;
    v18 = v49;
    if (!v49)
      goto LABEL_49;
    v19 = (unint64_t *)&v49->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    goto LABEL_47;
  }
  v8 = (uint64_t)(*(_QWORD *)(v6 + 160 * a2 + 16) - *(_QWORD *)(v6 + 160 * a2 + 8)) >> 3;
  if (a3)
  {
    if (a3 >= 9)
    {
      v21 = a3 & 7;
      if (!v21)
        v21 = 8;
      v9 = a3 - v21;
      v22 = (uint64x2_t)(unint64_t)((uint64_t)(*(_QWORD *)(v6 + 160 * a2 + 16) - *(_QWORD *)(v6 + 160 * a2 + 8)) >> 3);
      v23 = 0uLL;
      v24.i64[0] = 0xFFFFFFFFLL;
      v24.i64[1] = 0xFFFFFFFFLL;
      v25 = v9;
      v26 = *(const double **)(v6 + 160 * a2 + 32);
      v27 = 0uLL;
      v28 = 0uLL;
      do
      {
        v29 = v26 + 12;
        v30 = v26;
        v51 = vld3q_f64(v30);
        v30 += 6;
        v52 = vld3q_f64(v30);
        v53 = vld3q_f64(v29);
        v31 = v26 + 18;
        v54 = vld3q_f64(v31);
        v51.val[2] = (float64x2_t)vsubq_s64((int64x2_t)v51.val[1], (int64x2_t)v51.val[0]);
        v32 = (int8x16_t)vsraq_n_u64(v23, (uint64x2_t)vsubq_s64((int64x2_t)v52.val[1], (int64x2_t)v52.val[0]), 3uLL);
        v33 = (int8x16_t)vsraq_n_u64(v22, (uint64x2_t)v51.val[2], 3uLL);
        v34 = (int8x16_t)vsraq_n_u64(v27, (uint64x2_t)vsubq_s64((int64x2_t)v53.val[1], (int64x2_t)v53.val[0]), 3uLL);
        v35 = (int8x16_t)vsraq_n_u64(v28, (uint64x2_t)vsubq_s64((int64x2_t)v54.val[1], (int64x2_t)v54.val[0]), 3uLL);
        v22 = (uint64x2_t)vandq_s8(v33, v24);
        v23 = (uint64x2_t)vandq_s8(v32, v24);
        v28 = (uint64x2_t)vandq_s8(v35, v24);
        v27 = (uint64x2_t)vandq_s8(v34, v24);
        v26 += 24;
        v25 -= 8;
      }
      while (v25);
      LODWORD(v8) = vaddvq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)v34, (int32x4_t)v35), vuzp1q_s32((int32x4_t)v33, (int32x4_t)v32)));
    }
    else
    {
      v9 = 0;
    }
    v36 = a3 - v9;
    v37 = (_QWORD *)(v7 + 24 * v9 + 8);
    do
    {
      v8 = ((uint64_t)(*v37 - *(v37 - 1)) >> 3) + v8;
      v37 += 3;
      --v36;
    }
    while (v36);
  }
  if (a4 >= (unint64_t)((uint64_t)(*(_QWORD *)(v7 + 24 * a3 + 8) - *(_QWORD *)(v7 + 24 * a3)) >> 3))
  {
    strcpy((char *)__p, "Invalid segment index.");
    HIBYTE(__p[2]) = 22;
    v16 = (char *)operator new(0x70uLL);
    v46 = v16;
    strcpy(v16, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
    if (!a5)
      goto LABEL_50;
    *(_QWORD *)&v50.__val_ = 22;
    v50.__cat_ = std::generic_category();
    sub_2245321DC(&v50, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v40 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v40;
    v18 = v49;
    if (!v49)
    {
LABEL_49:
      v16 = v46;
LABEL_50:
      operator delete(v16);
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return 0;
      goto LABEL_51;
    }
    v41 = (unint64_t *)&v49->__shared_owners_;
    do
      v20 = __ldaxr(v41);
    while (__stlxr(v20 - 1, v41));
LABEL_47:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_49;
  }
  v38 = v8 + a4;
  v39 = *(_QWORD *)(v6 + 160 * a2 + 56);
  if (*(_QWORD *)(v6 + 160 * a2 + 64) - v39 > v38)
    return *(unsigned __int8 *)(v39 + v38);
  strcpy((char *)__p, "Invalid segment index.");
  HIBYTE(__p[2]) = 22;
  v10 = (char *)operator new(0x70uLL);
  v45 = v10;
  strcpy(v10, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/Reconstruction/src/SpatialSubdivisionResult.cpp");
  if (a5)
  {
    *(_QWORD *)&v50.__val_ = 22;
    v50.__cat_ = std::generic_category();
    sub_2245321DC(&v50, (uint64_t)__p, (CFErrorRef *)&cf);
    if (*a5)
      CFRelease(*a5);
    *a5 = 0;
    v42 = cf;
    if (cf)
      CFRetain(cf);
    *a5 = v42;
    v12 = v49;
    if (!v49)
      goto LABEL_16;
    v43 = (unint64_t *)&v49->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (v44)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:
  operator delete(v10);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    return 0;
LABEL_51:
  operator delete(__p[0]);
  return 0;
}

void sub_22330ADE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_22330AE44(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  void **p_dst;
  unint64_t v42;
  const void **v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  size_t v49;
  void **v50;
  unint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **__dst;
  size_t v65;
  int64_t v66;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  unint64_t v71;
  const void *v72;
  unint64_t v73;
  void *__p;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;

  sub_223195210((uint64_t)v67);
  sub_2231813E8(&v68, (uint64_t)"{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n", 49);
  v61 = a1;
  v3 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v63 = 0;
    v59 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5);
    while (1)
    {
      v4 = *(_QWORD *)(v61 + 48);
      sub_2231813E8(&v68, (uint64_t)"    {\n      \"type\": \"Feature\",\n", 31);
      sub_2231813E8(&v68, (uint64_t)"      \"properties\": {\n", 22);
      sub_2231813E8(&v68, (uint64_t)"        \"floor_index\": ", 23);
      v5 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v5, (uint64_t)",\n", 2);
      sub_2231813E8(&v68, (uint64_t)"        \"area\": ", 16);
      v6 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v6, (uint64_t)",\n", 2);
      sub_2231813E8(&v68, (uint64_t)"        \"room_confidence\": ", 27);
      v7 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v7, (uint64_t)",\n", 2);
      sub_2231813E8(&v68, (uint64_t)"        \"completeness\": ", 24);
      v8 = (_QWORD *)std::ostream::operator<<();
      sub_2231813E8(v8, (uint64_t)",\n", 2);
      sub_2231813E8(&v68, (uint64_t)"        \"segment_types\": [\n", 27);
      v62 = v4;
      v9 = v4 + 160 * v63;
      v11 = *(_QWORD *)(v9 + 56);
      v10 = (_QWORD *)(v9 + 56);
      v12 = v10[1];
      v13 = v12 - v11;
      if (v12 != v11)
      {
        v14 = 0;
        do
        {
          v15 = *(char *)(*v10 + v14);
          sub_2231813E8(&v68, (uint64_t)"          ", 10);
          if (v15 < 5)
            sub_2231813E8(&v68, (uint64_t)off_24EC2BAF0[v15], *(_QWORD *)&asc_2245D1368[8 * v15]);
          ++v14;
          v16 = v10[1] - *v10;
          if (v14 >= v16)
            v17 = "\n";
          else
            v17 = ",\n";
          if (v14 >= v16)
            v18 = 1;
          else
            v18 = 2;
          sub_2231813E8(&v68, (uint64_t)v17, v18);
        }
        while (v13 != v14);
      }
      sub_2231813E8(&v68, (uint64_t)" ]\n", 3);
      sub_2231813E8(&v68, (uint64_t)"      },\n", 9);
      sub_2231813E8(&v68, (uint64_t)"      \"geometry\": {\n", 20);
      sub_2231813E8(&v68, (uint64_t)"        \"type\": \"Polygon\",\n", 27);
      sub_2231813E8(&v68, (uint64_t)"        \"coordinates\": [\n", 25);
      sub_2231813E8(&v68, (uint64_t)"          [\n", 12);
      v19 = v62 + 160 * v63;
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 16);
      v22 = (_QWORD *)(v19 + 8);
      v23 = v21 - v20;
      if (v23)
      {
        v24 = 0;
        v25 = v23 >> 3;
        do
        {
          sub_2231813E8(&v68, (uint64_t)"\n            [ ", 15);
          v26 = (_QWORD *)std::ostream::operator<<();
          sub_2231813E8(v26, (uint64_t)", ", 2);
          v27 = (_QWORD *)std::ostream::operator<<();
          sub_2231813E8(v27, (uint64_t)" ]", 2);
          sub_2231813E8(&v68, (uint64_t)",\n", 2);
          if (v24 == ((uint64_t)(v22[1] - *v22) >> 3) - 1)
          {
            sub_2231813E8(&v68, (uint64_t)"            [ ", 14);
            v28 = (_QWORD *)std::ostream::operator<<();
            sub_2231813E8(v28, (uint64_t)", ", 2);
            v29 = (_QWORD *)std::ostream::operator<<();
            sub_2231813E8(v29, (uint64_t)" ]\n", 3);
          }
          ++v24;
        }
        while (v25 != v24);
      }
      sub_2231813E8(&v68, (uint64_t)"          ]", 11);
      v30 = v62 + 160 * v63;
      v31 = *(_QWORD **)(v30 + 32);
      for (i = *(_QWORD **)(v30 + 40); v31 != i; v31 += 3)
      {
        sub_2231813E8(&v68, (uint64_t)",\n          [", 13);
        v33 = v31[1] - *v31;
        if (v33)
        {
          v34 = 0;
          v35 = v33 >> 3;
          do
          {
            sub_2231813E8(&v68, (uint64_t)"            [ ", 14);
            v36 = (_QWORD *)std::ostream::operator<<();
            sub_2231813E8(v36, (uint64_t)", ", 2);
            v37 = (_QWORD *)std::ostream::operator<<();
            sub_2231813E8(v37, (uint64_t)" ]", 2);
            sub_2231813E8(&v68, (uint64_t)",\n", 2);
            if (v34 == ((uint64_t)(v31[1] - *v31) >> 3) - 1)
            {
              sub_2231813E8(&v68, (uint64_t)"            [ ", 14);
              v38 = (_QWORD *)std::ostream::operator<<();
              sub_2231813E8(v38, (uint64_t)", ", 2);
              v39 = (_QWORD *)std::ostream::operator<<();
              sub_2231813E8(v39, (uint64_t)" ]\n", 3);
            }
            ++v34;
          }
          while (v35 != v34);
        }
        sub_2231813E8(&v68, (uint64_t)"          ]", 11);
      }
      sub_2231813E8(&v68, (uint64_t)"\n", 1);
      sub_2231813E8(&v68, (uint64_t)"        ]\n", 10);
      sub_2231813E8(&v68, (uint64_t)"      }\n", 8);
      sub_2231813E8(&v68, (uint64_t)"    }", 5);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v61 + 56) - *(_QWORD *)(v61 + 48)) >> 5) > ++v63)
        sub_2231813E8(&v68, (uint64_t)",", 1);
      sub_2231813E8(&v68, (uint64_t)"\n", 1);
      if ((v78 & 0x10) != 0)
      {
        v42 = v77;
        v43 = &v72;
        if (v77 < v73)
        {
          v77 = v73;
          v42 = v73;
          v43 = &v72;
        }
      }
      else
      {
        if ((v78 & 8) == 0)
        {
          v40 = 0;
          HIBYTE(v66) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_42;
        }
        v42 = v71;
        v43 = &v70;
      }
      v44 = *v43;
      v40 = v42 - (_QWORD)*v43;
      if (v40 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v40 >= 0x17)
        break;
      HIBYTE(v66) = v42 - *(_BYTE *)v43;
      p_dst = (void **)&__dst;
      if (v40)
        goto LABEL_41;
LABEL_42:
      *((_BYTE *)p_dst + v40) = 0;
      if (v66 >= 0)
        v47 = (void **)&__dst;
      else
        v47 = __dst;
      if (v66 >= 0)
        v48 = HIBYTE(v66);
      else
        v48 = v65;
      sub_2231813E8(a2, (uint64_t)v47, v48);
      if (SHIBYTE(v66) < 0)
      {
        operator delete(__dst);
        if (SHIBYTE(v76) < 0)
LABEL_53:
          operator delete(__p);
      }
      else if (SHIBYTE(v76) < 0)
      {
        goto LABEL_53;
      }
      __p = 0;
      v75 = 0;
      v76 = 0;
      sub_2231B5488((uint64_t)&v69);
      if (v63 == v59)
        goto LABEL_54;
    }
    v45 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v45 = v40 | 7;
    v46 = v45 + 1;
    p_dst = (void **)operator new(v45 + 1);
    v65 = v40;
    v66 = v46 | 0x8000000000000000;
    __dst = p_dst;
LABEL_41:
    memmove(p_dst, v44, v40);
    goto LABEL_42;
  }
LABEL_54:
  sub_2231813E8(&v68, (uint64_t)"  ]\n}\n", 6);
  if ((v78 & 0x10) != 0)
  {
    v51 = v77;
    if (v77 < v73)
    {
      v77 = v73;
      v51 = v73;
    }
    v52 = v72;
    v49 = v51 - (_QWORD)v72;
    if (v51 - (unint64_t)v72 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_79;
  }
  else
  {
    if ((v78 & 8) == 0)
    {
      v49 = 0;
      HIBYTE(v66) = 0;
      v50 = (void **)&__dst;
      goto LABEL_67;
    }
    v52 = v70;
    v49 = v71 - (_QWORD)v70;
    if (v71 - (unint64_t)v70 > 0x7FFFFFFFFFFFFFF7)
LABEL_79:
      sub_22316DBC0();
  }
  if (v49 >= 0x17)
  {
    v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v53 = v49 | 7;
    v54 = v53 + 1;
    v50 = (void **)operator new(v53 + 1);
    v65 = v49;
    v66 = v54 | 0x8000000000000000;
    __dst = v50;
    goto LABEL_66;
  }
  HIBYTE(v66) = v49;
  v50 = (void **)&__dst;
  if (v49)
LABEL_66:
    memmove(v50, v52, v49);
LABEL_67:
  *((_BYTE *)v50 + v49) = 0;
  if (v66 >= 0)
    v55 = (void **)&__dst;
  else
    v55 = __dst;
  if (v66 >= 0)
    v56 = HIBYTE(v66);
  else
    v56 = v65;
  sub_2231813E8(a2, (uint64_t)v55, v56);
  if (SHIBYTE(v66) < 0)
    operator delete(__dst);
  v67[0] = *MEMORY[0x24BEDB7F0];
  v57 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v67 + *(_QWORD *)(v67[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v68 = v57;
  v69 = MEMORY[0x24BEDB848] + 16;
  if (SHIBYTE(v76) < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x227684BE0](&v79);
}

void sub_22330B6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v46;

  if (a25 < 0)
    operator delete(__p);
  a26 = *MEMORY[0x24BEDB7F0];
  v46 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(uint64_t *)((char *)&a26 + *(_QWORD *)(a26 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  a28 = v46;
  a29 = MEMORY[0x24BEDB848] + 16;
  if (a42 < 0)
    operator delete(a37);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x227684BE0](&a45);
  _Unwind_Resume(a1);
}

uint64_t sub_22330B770(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_22330B7A8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22330B7F0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_22330B830(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x227684CE8);
}

void sub_22330B884()
{
  JUMPOUT(0x227684CE8);
}

void sub_22330B89C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22330B8B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[8] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[10];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[5] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[5] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[2] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[4];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_22330B9B8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  a1[8] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[10];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[5] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[5] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[7];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[2] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22330BABC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  a1[14] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[16];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[11] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[11] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[8] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[5] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[5] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[2] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[4];
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_22330BC4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  a1[14] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[16];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[11] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[11] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[13];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  a1[8] = &off_24EC715B8;
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    a1[5] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    a1[5] = &off_24EC715B8;
    v11 = (std::__shared_weak_count *)a1[7];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  a1[2] = &off_24EC715B8;
  v14 = (std::__shared_weak_count *)a1[4];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22330BDD8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_22330BE08(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22330BE48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  a1[5] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      a1[2] = &off_24EC715B8;
      v5 = (std::__shared_weak_count *)a1[4];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  a1[2] = &off_24EC715B8;
  v5 = (std::__shared_weak_count *)a1[4];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22330BF14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  a1[5] = &off_24EC715B8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[2] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[2] = &off_24EC715B8;
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22330BFDC(uint64_t result)
{
  *(_QWORD *)(result + 8) = &off_24EC64998;
  return result;
}

void sub_22330BFEC(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_24EC64998;
  JUMPOUT(0x227684CE8);
}

void sub_22330C010(uint64_t a1)
{
  sub_2232E7728(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22330C034(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22330C09C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22330C104(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 464;
        sub_22324A5A0(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_22330C164(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 464;
        sub_22324A5A0(v3);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22330C1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v6 = *(void **)(v3 - 48);
        if (v6)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v7 = *(_QWORD *)(v3 - 72);
        if (v7)
        {
          v8 = *(_QWORD *)(v3 - 64);
          v5 = *(void **)(v3 - 72);
          if (v8 != v7)
          {
            v9 = *(_QWORD *)(v3 - 64);
            do
            {
              v11 = *(void **)(v9 - 24);
              v9 -= 24;
              v10 = v11;
              if (v11)
              {
                *(_QWORD *)(v8 - 16) = v10;
                operator delete(v10);
              }
              v8 = v9;
            }
            while (v9 != v7);
            v5 = *(void **)(v3 - 72);
          }
          *(_QWORD *)(v3 - 64) = v7;
          operator delete(v5);
        }
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_22330C294(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v6 = *(void **)(v3 - 48);
        if (v6)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v7 = *(_QWORD *)(v3 - 72);
        if (v7)
        {
          v8 = *(_QWORD *)(v3 - 64);
          v5 = *(void **)(v3 - 72);
          if (v8 != v7)
          {
            v9 = *(_QWORD *)(v3 - 64);
            do
            {
              v11 = *(void **)(v9 - 24);
              v9 -= 24;
              v10 = v11;
              if (v11)
              {
                *(_QWORD *)(v8 - 16) = v10;
                operator delete(v10);
              }
              v8 = v9;
            }
            while (v9 != v7);
            v5 = *(void **)(v3 - 72);
          }
          *(_QWORD *)(v3 - 64) = v7;
          operator delete(v5);
        }
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22330C364(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_22330C394(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x227684CE8);
}

void sub_22330C3D4(size_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[3];
  void *__p;
  __int128 v24;
  size_t v25[2];

  v4 = (unsigned int *)(a1 + 8);
  __p = operator new(0x78uLL);
  v24 = xmmword_2245B8D10;
  strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Conversion.cpp:33");
  sub_2242A8FB0(a2, v4, 0x4C303038u, (uint64_t *)&__p, 1u);
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  v5 = *(uint64_t **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v24 = v5;
  *((_QWORD *)&v24 + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  __p = &off_24EC71548;
  if (v5)
  {
    v10 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (!v9)
      goto LABEL_12;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
LABEL_12:
      if (!v10)
        goto LABEL_14;
      goto LABEL_13;
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
LABEL_13:
      sub_2242AE8BC(v24);
  }
LABEL_14:
  sub_2242A773C((uint64_t)&__p, v22);
  v25[0] = a1;
  v25[1] = (size_t)v22;
  sub_22330C664(v25);
  if (!(_QWORD)v24)
    goto LABEL_22;
  v15 = *(_QWORD *)v24;
  v14 = *(std::__shared_weak_count **)(v24 + 8);
  if (!v14)
    goto LABEL_20;
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (v18)
  {
LABEL_20:
    if (!v15)
      goto LABEL_22;
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (v15)
LABEL_21:
    sub_2242AEA98(v24);
LABEL_22:
  __p = &off_24EC715B8;
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_22330C5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, std::__shared_weak_count *a14)
{
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  sub_2242A8F3C(v14);
  _Unwind_Resume(a1);
}

size_t *sub_22330C664(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  size_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 20))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)v2, v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_22330C828(&v24, (char **)v1, (char **)v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(size_t **)v2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 20);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
          }
        }
        else
        {
          do
          {
            *(_BYTE *)v11 = *v10;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *(_BYTE *)v11 = *v10;
        v10 += v3;
        v11 = (size_t *)((char *)v11 + v4);
      }
      *(_BYTE *)v11 = *v10;
    }
  }
  return result;
}

size_t *sub_22330C828(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *((unsigned int *)a3 + 5);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

float sub_22330C974(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  float result;
  uint64_t v28;
  char *v29;
  BOOL v30;
  uint64_t v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v23 = *(_DWORD *)(a1 + 20);
    v24 = *(_DWORD *)(a1 + 8);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      v28 = (*(_DWORD *)(a1 + 12) * v23);
      v29 = *(char **)a1;
      if ((_DWORD)v28)
        v30 = v29 == 0;
      else
        v30 = 0;
      if (v30)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      else if (!(_DWORD)v28)
      {
        return result;
      }
      memmove(*(void **)a2, v29, 4 * v28);
      return result;
    }
    v31 = *(unsigned int *)(a1 + 8);
    if (v24)
      v26 = *(_DWORD *)(a1 + 12) == 0;
    else
      v26 = 1;
    if (!v26)
      sub_22330CB50(&v31, (char **)a1, (char **)a2);
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)a1;
      v11 = *(_DWORD **)a2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 20);
        v14 = *(unsigned int *)(a1 + 20);
        if (!v9)
        {
          do
          {
            *v11 = *(_DWORD *)v10;
            v10 += 4 * v14;
            v11 += v13;
            --v12;
          }
          while (v12);
LABEL_38:
          result = *(float *)v10;
          *v11 = *(_DWORD *)v10;
          return result;
        }
        v15 = 0;
        v16 = 4 * v14;
        v17 = 4 * v13;
        do
        {
          v18 = v11;
          v19 = v10;
          v20 = v9;
          do
          {
            *v18 = *(_DWORD *)v19;
            v19 += 4 * v3;
            v18 += v4;
            --v20;
          }
          while (v20);
          *v18 = *(_DWORD *)v19;
          v10 += v16;
          v11 = (_DWORD *)((char *)v11 + v17);
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        v21 = 4 * v3;
        v22 = 4 * v4;
        do
        {
          *v11 = *(_DWORD *)v10;
          v10 += v21;
          v11 = (_DWORD *)((char *)v11 + v22);
          --v9;
        }
        while (v9);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_22330CB50(uint64_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 4 * *((unsigned int *)a2 + 5);
      v10 = 4 * *((unsigned int *)a3 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 4 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 4 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 4 * v12);
  }
  return result;
}

uint64_t sub_22330CCA4@<X0>(uint64_t result@<X0>, void **a2@<X8>, float a3@<S0>, double a4@<D1>)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (***v19)();
  uint64_t (***v20)();
  char v21;
  uint64_t (****v22)();
  uint64_t (**v23)();
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t (***v29)();
  uint64_t v30;
  uint64_t (****v31)();
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (****v42)();
  char **v43;
  uint64_t (****v44)();
  uint64_t *v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t (***v59)();
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t (***v63)();
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t (****v73)();
  char **v74;
  uint64_t (****v75)();
  uint64_t *v76;
  uint64_t **v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (****v101)();
  char **v102;
  uint64_t (****v103)();
  uint64_t **v104;
  uint64_t **v105;
  uint64_t **v106;
  uint64_t (****v107)();
  char **v108;
  uint64_t (****v109)();
  uint64_t *v110;
  uint64_t **v111;
  uint64_t **v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  __int128 *v120;
  uint64_t *v121;
  char v122;
  char v123;
  char v124;
  uint64_t (***v125)();
  uint64_t (***v126)();
  uint64_t v127;
  uint64_t (***v128)();
  uint64_t (***v129)();
  uint64_t v130;
  uint64_t (***v131)();
  uint64_t (***v132)();
  uint64_t v133;
  uint64_t *v134;
  char **v135;
  uint64_t (****v136)();
  uint64_t *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  char **v143;
  uint64_t (****v144)();
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t (***v151)();
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t (***v155)();
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t (***v164)();
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t (***v176)();
  uint64_t *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  float *v187;
  float *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  BOOL v194;
  uint64_t v195;
  float v196;
  float v197;
  char *v198;
  char *v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  unint64_t v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  const double *v216;
  double *v217;
  uint64_t v218;
  const double *v219;
  double *v220;
  uint64_t v221;
  char *v222;
  uint64_t (***v223)();
  uint64_t *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  void **v240;
  _QWORD *v241;
  uint64_t **v242;
  uint64_t **v243;
  uint64_t **v244;
  uint64_t (****v245)();
  char **v246;
  uint64_t (****v247)();
  uint64_t *v248;
  uint64_t *v249;
  uint64_t (****v250)();
  char **v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t **v254;
  uint64_t *v255;
  uint64_t **v256;
  char **v257;
  uint64_t (****v258)();
  uint64_t *v259;
  char *v260;
  uint64_t *v261;
  __int128 *v262;
  __int128 *v263;
  uint64_t (***v264)();
  char *v265;
  uint64_t *v266;
  char *v267;
  uint64_t **v268;
  uint64_t **v269;
  uint64_t **v270;
  uint64_t (****v271)();
  char **v272;
  uint64_t **v273;
  uint64_t **v274;
  uint64_t **v275;
  uint64_t **v276;
  uint64_t *v277;
  uint64_t (****v278)();
  char **v279;
  uint64_t *v280;
  uint64_t (****v281)();
  char **v282;
  char *v283;
  uint64_t *v284;
  uint64_t *v285;
  uint64_t *v286;
  uint64_t *v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t *v292;
  char *v293;
  uint64_t *v294;
  uint64_t (****v295)();
  uint64_t (****v296)();
  uint64_t *v297;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t (****v302)();
  uint64_t *v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t *v307;
  uint64_t (***v308)();
  uint64_t *v309;
  char *v310;
  uint64_t (***v311)();
  float *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t (***v320)();
  uint64_t v321;
  float *v322;
  _QWORD v323[3];
  uint64_t *v324;
  uint64_t v325;
  _QWORD v326[3];
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  __int128 v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t *v341;
  _QWORD v342[3];
  uint64_t *v343;
  __int128 v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  float *v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  float *v364;
  uint64_t v365;
  uint64_t (***v366)();
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  float *v379;
  _QWORD v380[3];
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t (***v387)();
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t *v401;
  __int128 v402;
  uint64_t v403;
  char *v404;
  uint64_t *v405;
  _QWORD v406[3];
  uint64_t (***v407)();
  uint64_t v408;
  uint64_t v409;
  uint64_t (**v410)();
  float v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t (**v421)();
  float v422;
  uint64_t (***v423)();
  uint64_t v424;
  _QWORD v425[3];
  char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t (***v429)();
  _QWORD v430[3];
  float64x2x2_t v431;
  float64x2x2_t v432;

  v430[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(char **)result;
  v5 = *(char **)(result + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v260 = v5;
  v7 = v5 - v6;
  if (v7)
  {
    v8 = 0xEEEEEEEEEEEEEEEFLL * (v7 >> 3);
    v240 = a2;
    if (v8 >> 60)
      sub_22316E078();
    v11 = (char *)operator new(0xEEEEEEEEEEEEEEF0 * (v7 >> 3));
    *a2 = v11;
    a2[1] = v11;
    v311 = &v410;
    v280 = &v412;
    a2[2] = &v11[16 * v8];
    v306 = &v400;
    v296 = (uint64_t (****)())&v401;
    v288 = &v403;
    v259 = (uint64_t *)&v405;
    v12 = v380;
    v261 = &v361;
    v274 = &v415;
    v305 = &v414;
    v273 = &v418;
    v303 = &v417;
    v13 = v323;
    v258 = (uint64_t (****)())&v324;
    v14 = (char *)v326;
    v257 = &v327;
    v256 = &v330;
    v301 = &v332;
    v255 = (uint64_t *)&v333;
    v300 = &v335;
    v254 = &v336;
    v299 = &v338;
    v253 = &v339;
    v293 = (char *)&v383;
    v246 = &v384;
    v247 = (uint64_t (****)())&v381;
    v283 = (char *)&v402 + 8;
    v271 = &v407;
    v272 = &v404;
    v304 = &v370;
    v244 = &v371;
    v245 = &v387;
    v291 = &v373;
    v292 = &v386;
    v242 = &v377;
    v243 = &v374;
    v307 = &v390;
    v294 = &v393;
    v269 = &v394;
    v270 = &v391;
    v289 = &v396;
    v290 = &v376;
    v268 = &v397;
    v295 = &v423;
    v281 = &v429;
    v282 = &v426;
    v308 = (uint64_t (***)())&v428;
    v263 = (__int128 *)v430;
    v302 = (uint64_t (****)())&v343;
    v249 = &v347;
    v297 = &v345;
    v310 = (char *)&v344 + 8;
    v309 = &v348;
    v278 = (uint64_t (****)())&v349;
    v279 = &v346;
    v286 = &v354;
    v287 = &v351;
    v276 = &v355;
    v277 = &v352;
    v285 = &v357;
    v275 = &v358;
    v262 = &v350;
    v298 = &v313;
    v251 = &v317;
    v252 = &v314;
    v264 = (uint64_t (***)())&v319;
    v265 = (char *)&v316;
    v250 = &v320;
    v266 = &v365;
    v267 = (char *)v326;
    v241 = v380;
    v248 = v323;
    v284 = &v329;
    while (1)
    {
      v16 = *(uint64_t **)v6;
      v17 = *((_QWORD *)v6 + 1);
      v18 = *(_QWORD *)v6 + 32 * v17;
      v420 = *(uint64_t **)v6;
      v421 = &off_24EC2C1F0;
      v422 = a3;
      v423 = &v421;
      v424 = v18;
      v19 = &v421;
      v20 = &v421;
      if (v17)
      {
        while (1)
        {
          v21 = ((uint64_t (*)(uint64_t (***)()))(*v19)[6])(v19);
          v16 = v420;
          if ((v21 & 1) != 0)
            break;
          v16 = v420 + 4;
          v420 = v16;
          if (v16 == (uint64_t *)v424)
            break;
          v19 = v423;
          if (!v423)
            sub_223198474();
        }
        v20 = v423;
      }
      v409 = v18;
      v410 = &off_24EC2C1F0;
      v411 = a3;
      v412 = (uint64_t)v311;
      v413 = v18;
      v22 = v302;
      v341 = v16;
      if (!v20)
        goto LABEL_16;
      if (v20 != &v421)
        break;
      v343 = v342;
      ((void (*)(uint64_t, uint64_t))v421[3])((uint64_t)&v421, (uint64_t)v342);
      *(_QWORD *)&v344 = v424;
      *((_QWORD *)&v344 + 1) = v409;
      v28 = v249;
      if (v412)
      {
        if ((uint64_t (***)())v412 == v311)
        {
          v23 = v410;
          goto LABEL_17;
        }
        v347 = v412;
        v28 = v280;
      }
      *v28 = 0;
      v24 = (uint64_t)v311;
      v25 = (_QWORD *)v412;
      v348 = v413;
      if ((uint64_t (***)())v412 == v311)
      {
LABEL_24:
        v25 = (_QWORD *)v24;
        v27 = 4;
        v26 = v294;
        goto LABEL_25;
      }
LABEL_18:
      v26 = v294;
      if (!v25)
        goto LABEL_26;
      v27 = 5;
LABEL_25:
      (*(void (**)(void))(*v25 + 8 * v27))();
LABEL_26:
      v29 = v423;
      if (v423 == &v421)
      {
        v29 = &v421;
        v30 = 4;
      }
      else
      {
        if (!v423)
          goto LABEL_31;
        v30 = 5;
      }
      (*v29)[v30]();
LABEL_31:
      v399 = (uint64_t)v341;
      v31 = v296;
      if (!v343)
        goto LABEL_34;
      if (v343 != v342)
      {
        v401 = v343;
        v31 = v302;
LABEL_34:
        *v31 = 0;
        goto LABEL_36;
      }
      v401 = v306;
      (*(void (**)(_QWORD *))(v342[0] + 24))(v342);
LABEL_36:
      v402 = v344;
      v32 = v259;
      if (!v347)
        goto LABEL_39;
      if ((uint64_t *)v347 != v297)
      {
        v405 = (uint64_t *)v347;
        v32 = v249;
LABEL_39:
        *v32 = 0;
        goto LABEL_41;
      }
      v405 = v288;
      (*(void (**)(void))(v345 + 24))();
LABEL_41:
      v33 = (_QWORD *)v347;
      v406[0] = v348;
      if ((uint64_t *)v347 == v297)
      {
        v33 = v297;
        v34 = 4;
      }
      else
      {
        if (!v347)
          goto LABEL_46;
        v34 = 5;
      }
      (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_46:
      v35 = v343;
      if (v343 == v342)
      {
        v35 = v342;
        v36 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_51;
        v36 = 5;
      }
      (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_51:
      v37 = (uint64_t)v401;
      v389 = v399;
      if (!v401)
        goto LABEL_54;
      if (v401 != v306)
      {
        v37 = (*(uint64_t (**)(void))(*v401 + 16))();
LABEL_54:
        v391 = (uint64_t *)v37;
        goto LABEL_56;
      }
      v391 = v307;
      (*(void (**)(uint64_t *))(v400 + 24))(v306);
LABEL_56:
      v379 = (float *)*((_QWORD *)&v402 + 1);
      v392 = v402;
      v38 = (uint64_t)v405;
      if (!v405)
        goto LABEL_59;
      if (v405 != v288)
      {
        v38 = (*(uint64_t (**)(void))(*v405 + 16))();
LABEL_59:
        v381 = (_QWORD *)v38;
        goto LABEL_61;
      }
      v381 = v12;
      (*(void (**)(uint64_t *, _QWORD *))(v403 + 24))(v288, v12);
LABEL_61:
      v382 = v406[0];
      v39 = (uint64_t)v391;
      v369 = v389;
      if (!v391)
        goto LABEL_64;
      if (v391 != v307)
      {
        v39 = (*(uint64_t (**)(void))(*v391 + 16))();
LABEL_64:
        v371 = (uint64_t *)v39;
        goto LABEL_66;
      }
      v371 = v304;
      (*(void (**)(uint64_t *))(v390 + 24))(v307);
LABEL_66:
      v372 = v392;
      v40 = (uint64_t)v381;
      v312 = v379;
      if (!v381)
        goto LABEL_69;
      if (v381 != v12)
      {
        v40 = (*(uint64_t (**)(void))(*v381 + 16))();
LABEL_69:
        v314 = v40;
        goto LABEL_71;
      }
      v314 = (uint64_t)v298;
      (*(void (**)(_QWORD *))(v380[0] + 24))(v12);
LABEL_71:
      v315 = v382;
      sub_22330FFB4((uint64_t)&v420, &v369, &v312, a4);
      v41 = (uint64_t)v381;
      v364 = v379;
      if (!v381)
      {
        v367 = 0;
        v368 = v382;
        v360 = v379;
LABEL_79:
        v362 = (uint64_t *)v41;
        goto LABEL_80;
      }
      if (v381 == v12)
      {
        v367 = (uint64_t)v266;
        (*(void (**)(_QWORD *))(v380[0] + 24))(v12);
      }
      else
      {
        v367 = (*(uint64_t (**)(void))(*v381 + 16))();
      }
      v368 = v382;
      v41 = (uint64_t)v381;
      v360 = v379;
      if (!v381)
        goto LABEL_79;
      if (v381 != v12)
      {
        v41 = (*(uint64_t (**)(void))(*v381 + 16))();
        goto LABEL_79;
      }
      v362 = v261;
      (*(void (**)(_QWORD *))(v380[0] + 24))(v12);
LABEL_80:
      v363 = v382;
      sub_22330FFB4((uint64_t)&v409, &v364, &v360, a4);
      v341 = v420;
      v42 = v302;
      if (!v423)
        goto LABEL_83;
      if (v423 != &v421)
      {
        v343 = (uint64_t *)v423;
        v42 = v295;
LABEL_83:
        *v42 = 0;
        goto LABEL_85;
      }
      v343 = v342;
      ((void (*)(uint64_t, uint64_t))v421[3])((uint64_t)&v421, (uint64_t)v342);
LABEL_85:
      *(_QWORD *)&v344 = v424;
      v43 = v279;
      if (!v426)
        goto LABEL_88;
      if (v426 != (char *)v425)
      {
        v346 = v426;
        v43 = v282;
LABEL_88:
        *v43 = 0;
        goto LABEL_90;
      }
      v346 = v310;
      (*(void (**)(_QWORD *))(v425[0] + 24))(v425);
LABEL_90:
      v347 = v427;
      v44 = v278;
      if (!v429)
        goto LABEL_93;
      if (v429 != v308)
      {
        v349 = (uint64_t *)v429;
        v44 = v281;
LABEL_93:
        *v44 = 0;
        goto LABEL_95;
      }
      v349 = v309;
      (*(void (**)(void))(v428 + 24))();
LABEL_95:
      *(_QWORD *)&v350 = v430[0];
      *((_QWORD *)&v350 + 1) = v409;
      v45 = v277;
      if (!v412)
        goto LABEL_98;
      if ((uint64_t (***)())v412 != v311)
      {
        v352 = v412;
        v45 = v280;
LABEL_98:
        *v45 = 0;
        goto LABEL_100;
      }
      v352 = (uint64_t)v287;
      ((void (*)(uint64_t, uint64_t))v410[3])((uint64_t)v311, (uint64_t)v287);
LABEL_100:
      v353 = v413;
      v46 = v276;
      if (!v415)
        goto LABEL_103;
      if (v415 != v305)
      {
        v355 = v415;
        v46 = v274;
LABEL_103:
        *v46 = 0;
        goto LABEL_105;
      }
      v355 = v286;
      (*(void (**)(void))(v414 + 24))();
LABEL_105:
      v356 = v416;
      v47 = v275;
      if (!v418)
        goto LABEL_108;
      if (v418 != v303)
      {
        v358 = v418;
        v47 = v273;
LABEL_108:
        *v47 = 0;
        goto LABEL_110;
      }
      v358 = v285;
      (*(void (**)(void))(v417 + 24))();
LABEL_110:
      v48 = v418;
      v359 = v419;
      v49 = v305;
      if (v418 == v303)
      {
        v48 = v303;
        v50 = 4;
      }
      else
      {
        if (!v418)
          goto LABEL_115;
        v50 = 5;
      }
      (*(void (**)(void))(*v48 + 8 * v50))();
      v49 = v305;
LABEL_115:
      v51 = v415;
      if (v415 == v49)
      {
        v51 = v49;
        v52 = 4;
      }
      else
      {
        if (!v415)
          goto LABEL_120;
        v52 = 5;
      }
      (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_120:
      v53 = (_QWORD *)v412;
      if ((uint64_t (***)())v412 == v311)
      {
        v53 = v311;
        v54 = 4;
      }
      else
      {
        if (!v412)
          goto LABEL_125;
        v54 = 5;
      }
      (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_125:
      v55 = v362;
      if (v362 == v261)
      {
        v55 = v261;
        v56 = 4;
      }
      else
      {
        if (!v362)
          goto LABEL_130;
        v56 = 5;
      }
      (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_130:
      v57 = (_QWORD *)v367;
      if ((uint64_t *)v367 == v266)
      {
        v57 = v266;
        v58 = 4;
      }
      else
      {
        if (!v367)
          goto LABEL_135;
        v58 = 5;
      }
      (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_135:
      v59 = v429;
      if (v429 == v308)
      {
        v59 = v308;
        v60 = 4;
      }
      else
      {
        if (!v429)
          goto LABEL_140;
        v60 = 5;
      }
      (*v59)[v60]();
LABEL_140:
      v61 = v426;
      if (v426 == (char *)v425)
      {
        v61 = (char *)v425;
        v62 = 4;
      }
      else
      {
        if (!v426)
          goto LABEL_145;
        v62 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v61 + 8 * v62))();
LABEL_145:
      v63 = v423;
      if (v423 == &v421)
      {
        v63 = &v421;
        v64 = 4;
      }
      else
      {
        if (!v423)
          goto LABEL_150;
        v64 = 5;
      }
      (*v63)[v64]();
LABEL_150:
      v65 = (_QWORD *)v314;
      if ((uint64_t *)v314 == v298)
      {
        v65 = v298;
        v66 = 4;
      }
      else
      {
        if (!v314)
          goto LABEL_155;
        v66 = 5;
      }
      (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_155:
      v67 = v371;
      if (v371 == v304)
      {
        v67 = v304;
        v68 = 4;
      }
      else
      {
        if (!v371)
          goto LABEL_160;
        v68 = 5;
      }
      (*(void (**)(void))(*v67 + 8 * v68))();
LABEL_160:
      v69 = v381;
      if (v381 == v12)
      {
        v69 = v12;
        v70 = 4;
      }
      else
      {
        if (!v381)
          goto LABEL_165;
        v70 = 5;
      }
      (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_165:
      v71 = v391;
      if (v391 == v307)
      {
        v71 = v307;
        v72 = 4;
      }
      else
      {
        if (!v391)
          goto LABEL_170;
        v72 = 5;
      }
      (*(void (**)(void))(*v71 + 8 * v72))();
LABEL_170:
      v322 = (float *)v341;
      v73 = v258;
      if (!v343)
        goto LABEL_173;
      if (v343 != v342)
      {
        v324 = v343;
        v73 = v302;
LABEL_173:
        *v73 = 0;
        goto LABEL_175;
      }
      v324 = v13;
      (*(void (**)(_QWORD *, uint64_t *))(v342[0] + 24))(v342, v13);
LABEL_175:
      v325 = v344;
      v74 = v257;
      if (!v346)
        goto LABEL_178;
      if (v346 != v310)
      {
        v327 = v346;
        v74 = v279;
LABEL_178:
        *v74 = 0;
        goto LABEL_180;
      }
      v327 = v14;
      (*(void (**)(void))(*((_QWORD *)&v344 + 1) + 24))();
LABEL_180:
      v328 = v347;
      v75 = (uint64_t (****)())v256;
      if (!v349)
        goto LABEL_183;
      if (v349 != v309)
      {
        v330 = v349;
        v75 = v278;
LABEL_183:
        *v75 = 0;
        goto LABEL_185;
      }
      v330 = v284;
      (*(void (**)(void))(v348 + 24))();
LABEL_185:
      v331 = v350;
      v76 = v255;
      if (!v352)
        goto LABEL_188;
      if ((uint64_t *)v352 != v287)
      {
        v333 = (uint64_t *)v352;
        v76 = v277;
LABEL_188:
        *v76 = 0;
        goto LABEL_190;
      }
      v333 = v301;
      (*(void (**)(void))(v351 + 24))();
LABEL_190:
      v334 = v353;
      v77 = v254;
      if (!v355)
        goto LABEL_193;
      if (v355 != v286)
      {
        v336 = v355;
        v77 = v276;
LABEL_193:
        *v77 = 0;
        goto LABEL_195;
      }
      v336 = v300;
      (*(void (**)(void))(v354 + 24))();
LABEL_195:
      v337 = v356;
      v78 = v253;
      if (!v358)
        goto LABEL_198;
      if (v358 != v285)
      {
        v339 = v358;
        v78 = v275;
LABEL_198:
        *v78 = 0;
        goto LABEL_200;
      }
      v339 = v299;
      (*(void (**)(void))(v357 + 24))();
LABEL_200:
      v79 = v358;
      v340 = v359;
      if (v358 == v285)
      {
        v79 = v285;
        v80 = 4;
      }
      else
      {
        if (!v358)
          goto LABEL_205;
        v80 = 5;
      }
      (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_205:
      v81 = v355;
      if (v355 == v286)
      {
        v81 = v286;
        v82 = 4;
      }
      else
      {
        if (!v355)
          goto LABEL_210;
        v82 = 5;
      }
      (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_210:
      v83 = (_QWORD *)v352;
      if ((uint64_t *)v352 == v287)
      {
        v83 = v287;
        v84 = 4;
      }
      else
      {
        if (!v352)
          goto LABEL_215;
        v84 = 5;
      }
      (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_215:
      v85 = v349;
      if (v349 == v309)
      {
        v85 = v309;
        v86 = 4;
      }
      else
      {
        if (!v349)
          goto LABEL_220;
        v86 = 5;
      }
      (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_220:
      v87 = v346;
      if (v346 == v310)
      {
        v87 = v310;
        v88 = 4;
      }
      else
      {
        if (!v346)
          goto LABEL_225;
        v88 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v87 + 8 * v88))();
LABEL_225:
      v89 = v343;
      if (v343 == v342)
      {
        v89 = v342;
        v90 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_230;
        v90 = 5;
      }
      (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_230:
      v91 = v405;
      if (v405 == v288)
      {
        v91 = v288;
        v92 = 4;
      }
      else
      {
        if (!v405)
          goto LABEL_235;
        v92 = 5;
      }
      (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_235:
      v93 = v401;
      if (v401 == v306)
      {
        v93 = v306;
        v94 = 4;
      }
      else
      {
        if (!v401)
          goto LABEL_240;
        v94 = 5;
      }
      (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_240:
      v95 = (uint64_t)v324;
      v379 = v322;
      if (!v324)
        goto LABEL_243;
      if (v324 != v13)
      {
        v95 = (*(uint64_t (**)(void))(*v324 + 16))();
LABEL_243:
        v381 = (_QWORD *)v95;
        goto LABEL_245;
      }
      v381 = v12;
      (*(void (**)(uint64_t *, _QWORD *))(v323[0] + 24))(v13, v12);
LABEL_245:
      v96 = (uint64_t)v327;
      v382 = v325;
      if (!v327)
        goto LABEL_248;
      if (v327 != v14)
      {
        v96 = (*(uint64_t (**)(void))(*(_QWORD *)v327 + 16))();
LABEL_248:
        v384 = (char *)v96;
        goto LABEL_250;
      }
      v384 = v293;
      (*(void (**)(char *))(v326[0] + 24))(v14);
LABEL_250:
      v97 = (uint64_t)v330;
      v385 = (uint64_t *)v328;
      if (!v330)
        goto LABEL_253;
      if (v330 != v284)
      {
        v97 = (*(uint64_t (**)(void))(*v330 + 16))();
LABEL_253:
        v387 = (uint64_t (***)())v97;
        goto LABEL_255;
      }
      v387 = (uint64_t (***)())v292;
      (*(void (**)(uint64_t *))(v329 + 24))(v284);
LABEL_255:
      v369 = *((_QWORD *)&v331 + 1);
      v388 = v331;
      v98 = (uint64_t)v333;
      if (!v333)
        goto LABEL_258;
      if (v333 != v301)
      {
        v98 = (*(uint64_t (**)(void))(*v333 + 16))();
LABEL_258:
        v371 = (uint64_t *)v98;
        goto LABEL_260;
      }
      v371 = v304;
      (*(void (**)(uint64_t *))(v332 + 24))(v301);
LABEL_260:
      v99 = (uint64_t)v336;
      v372 = v334;
      if (!v336)
        goto LABEL_263;
      if (v336 != v300)
      {
        v99 = (*(uint64_t (**)(void))(*v336 + 16))();
LABEL_263:
        v374 = (uint64_t *)v99;
        goto LABEL_265;
      }
      v374 = v291;
      (*(void (**)(uint64_t *))(v335 + 24))(v300);
LABEL_265:
      v100 = (uint64_t)v339;
      v375 = v337;
      if (!v339)
        goto LABEL_268;
      if (v339 != v299)
      {
        v100 = (*(uint64_t (**)(void))(*v339 + 16))();
LABEL_268:
        v377 = (uint64_t *)v100;
        goto LABEL_270;
      }
      v377 = v290;
      (*(void (**)(uint64_t *))(v338 + 24))(v299);
LABEL_270:
      v378 = v340;
      v399 = (uint64_t)v379;
      v101 = v296;
      if (!v381)
        goto LABEL_273;
      if (v381 != v12)
      {
        v401 = v381;
        v101 = v247;
LABEL_273:
        *v101 = 0;
        goto LABEL_275;
      }
      v401 = v306;
      (*(void (**)(_QWORD *))(v380[0] + 24))(v12);
LABEL_275:
      *(_QWORD *)&v402 = v382;
      v102 = v272;
      if (!v384)
        goto LABEL_278;
      if (v384 != v293)
      {
        v404 = v384;
        v102 = v246;
LABEL_278:
        *v102 = 0;
        goto LABEL_280;
      }
      v404 = v283;
      (*(void (**)(void))(v383 + 24))();
LABEL_280:
      v405 = v385;
      v103 = v271;
      if (!v387)
        goto LABEL_283;
      if (v387 != (uint64_t (***)())v292)
      {
        v407 = v387;
        v103 = v245;
LABEL_283:
        *v103 = 0;
        goto LABEL_285;
      }
      v407 = (uint64_t (***)())v406;
      (*(void (**)(void))(v386 + 24))();
LABEL_285:
      v408 = v388;
      v389 = v369;
      v104 = v270;
      if (!v371)
        goto LABEL_288;
      if (v371 != v304)
      {
        v391 = v371;
        v104 = v244;
LABEL_288:
        *v104 = 0;
        goto LABEL_290;
      }
      v391 = v307;
      (*(void (**)(void))(v370 + 24))();
LABEL_290:
      v392 = v372;
      v105 = v269;
      if (!v374)
        goto LABEL_293;
      if (v374 != v291)
      {
        v394 = v374;
        v105 = v243;
LABEL_293:
        *v105 = 0;
        goto LABEL_295;
      }
      v394 = v26;
      (*(void (**)(void))(v373 + 24))();
LABEL_295:
      v395 = v375;
      v106 = v268;
      if (!v377)
        goto LABEL_298;
      if (v377 != v290)
      {
        v397 = v377;
        v106 = v242;
LABEL_298:
        *v106 = 0;
        goto LABEL_300;
      }
      v397 = v289;
      (*(void (**)(void))(v376 + 24))();
LABEL_300:
      v398 = v378;
      v420 = (uint64_t *)v399;
      v107 = v295;
      if (!v401)
        goto LABEL_303;
      if (v401 != v306)
      {
        v423 = (uint64_t (***)())v401;
        v107 = v296;
LABEL_303:
        *v107 = 0;
        goto LABEL_305;
      }
      v423 = &v421;
      (*(void (**)(void))(v400 + 24))();
LABEL_305:
      v424 = v402;
      v108 = v282;
      if (!v404)
        goto LABEL_308;
      if (v404 != v283)
      {
        v426 = v404;
        v108 = v272;
LABEL_308:
        *v108 = 0;
        goto LABEL_310;
      }
      v426 = (char *)v425;
      (*(void (**)(void))(*((_QWORD *)&v402 + 1) + 24))();
LABEL_310:
      v427 = (uint64_t)v405;
      v109 = v281;
      if (!v407)
        goto LABEL_313;
      if (v407 != v406)
      {
        v429 = v407;
        v109 = v271;
LABEL_313:
        *v109 = 0;
        goto LABEL_315;
      }
      v429 = v308;
      (*(void (**)(_QWORD *))(v406[0] + 24))(v406);
LABEL_315:
      v430[0] = v408;
      v409 = v389;
      v110 = v280;
      if (!v391)
        goto LABEL_318;
      if (v391 != v307)
      {
        v412 = (uint64_t)v391;
        v110 = (uint64_t *)v270;
LABEL_318:
        *v110 = 0;
        goto LABEL_320;
      }
      v412 = (uint64_t)v311;
      (*(void (**)(void))(v390 + 24))();
LABEL_320:
      v413 = v392;
      v111 = v274;
      if (!v394)
        goto LABEL_323;
      if (v394 != v26)
      {
        v415 = v394;
        v111 = v269;
LABEL_323:
        *v111 = 0;
        goto LABEL_325;
      }
      v415 = v305;
      (*(void (**)(uint64_t *))(v393 + 24))(v26);
LABEL_325:
      v416 = v395;
      v112 = v273;
      if (!v397)
        goto LABEL_328;
      if (v397 != v289)
      {
        v418 = v397;
        v112 = v268;
LABEL_328:
        *v112 = 0;
        goto LABEL_330;
      }
      v418 = v303;
      (*(void (**)(void))(v396 + 24))();
LABEL_330:
      v419 = v398;
      if (v420 == (uint64_t *)v409)
      {
        v312 = (float *)v420;
        v114 = v252;
        v115 = v293;
        v116 = v307;
        if (!v423)
          goto LABEL_338;
        if (v423 == &v421)
        {
          v314 = (uint64_t)v298;
          ((void (*)(uint64_t, uint64_t))v421[3])((uint64_t)&v421, (uint64_t)v298);
        }
        else
        {
          v314 = (uint64_t)v423;
          v114 = (uint64_t *)v295;
LABEL_338:
          *v114 = 0;
        }
        v315 = v424;
        v143 = v251;
        if (v426)
        {
          if (v426 != (char *)v425)
          {
            v317 = v426;
            v143 = v282;
            goto LABEL_455;
          }
          v317 = v265;
          (*(void (**)(_QWORD *))(v425[0] + 24))(v425);
        }
        else
        {
LABEL_455:
          *v143 = 0;
        }
        v318 = v427;
        v144 = v250;
        if (v429)
        {
          if (v429 != v308)
          {
            v320 = v429;
            v144 = v281;
            goto LABEL_460;
          }
          v320 = v264;
          (*(void (**)(void))(v428 + 24))();
        }
        else
        {
LABEL_460:
          *v144 = 0;
        }
        v321 = v430[0];
        goto LABEL_463;
      }
      v341 = v420;
      v113 = (uint64_t)v423;
      if (!v423)
        goto LABEL_334;
      if (v423 != &v421)
      {
        v113 = (*v423)[2]();
LABEL_334:
        v343 = (uint64_t *)v113;
        goto LABEL_341;
      }
      v343 = v342;
      ((void (*)(uint64_t, uint64_t))v421[3])((uint64_t)&v421, (uint64_t)v342);
LABEL_341:
      v117 = (uint64_t)v426;
      *(_QWORD *)&v344 = v424;
      if (!v426)
        goto LABEL_344;
      if (v426 != (char *)v425)
      {
        v117 = (*(uint64_t (**)(void))(*(_QWORD *)v426 + 16))();
LABEL_344:
        v346 = (char *)v117;
        goto LABEL_346;
      }
      v346 = v310;
      (*(void (**)(_QWORD *))(v425[0] + 24))(v425);
LABEL_346:
      v118 = (uint64_t)v429;
      v347 = v427;
      if (!v429)
        goto LABEL_349;
      if (v429 != v308)
      {
        v118 = (*v429)[2]();
LABEL_349:
        v349 = (uint64_t *)v118;
        goto LABEL_351;
      }
      v349 = v309;
      (*(void (**)(uint64_t (***)()))(v428 + 24))(v308);
LABEL_351:
      v120 = v262;
      v119 = v263;
LABEL_352:
      *(_QWORD *)v120 = *(_QWORD *)v119;
      while (1)
      {
        v121 = v341 + 4;
        v341 = v121;
        if (v121 == (uint64_t *)v344)
          goto LABEL_361;
        do
        {
          if (!v343)
LABEL_652:
            sub_223198474();
          v122 = (*(uint64_t (**)(uint64_t *))(*v343 + 48))(v343);
          v121 = v341;
          if ((v122 & 1) != 0)
            break;
          v121 = v341 + 4;
          v341 = v121;
        }
        while (v121 != (uint64_t *)v344);
LABEL_361:
        while (v121 != (uint64_t *)v347)
        {
          if (!v346)
            goto LABEL_652;
          v124 = (*(uint64_t (**)(char *))(*(_QWORD *)v346 + 48))(v346);
          v121 = v341;
          if ((v124 & 1) != 0)
            break;
          do
          {
            v121 += 4;
            v341 = v121;
            if (v121 == (uint64_t *)v344)
              break;
            if (!v343)
              goto LABEL_652;
            v123 = (*(uint64_t (**)(uint64_t *))(*v343 + 48))(v343);
            v121 = v341;
          }
          while ((v123 & 1) == 0);
        }
        if (v121 == (uint64_t *)v409)
          break;
        if (*((float *)v121 + 2) < *((float *)v420 + 2))
        {
          v420 = v121;
          if (v343)
          {
            if (v343 != v342)
            {
              v125 = (uint64_t (***)())(*(uint64_t (**)(void))(*v343 + 16))();
              v366 = v125;
              v126 = v423;
              if (v125 != (uint64_t (***)())&v364)
                goto LABEL_369;
LABEL_374:
              if (v126 != &v421)
              {
                (*((void (**)(float **, uint64_t (***)()))v364 + 3))(&v364, &v421);
                ((void (*)(uint64_t (***)()))(*v366)[4])(v366);
                v126 = v423;
                v366 = v423;
                v423 = &v421;
                if (v366 == (uint64_t (***)())&v364)
                  goto LABEL_376;
LABEL_371:
                if (v126)
                {
                  v127 = 5;
                  goto LABEL_381;
                }
                goto LABEL_382;
              }
              (*((void (**)(float **, float **))v364 + 3))(&v364, &v360);
              ((void (*)(uint64_t (***)()))(*v366)[4])(v366);
              v366 = 0;
              ((void (*)(uint64_t (***)(), float **))(*v423)[3])(v423, &v364);
              ((void (*)(uint64_t (***)()))(*v423)[4])(v423);
              v423 = 0;
              v366 = (uint64_t (***)())&v364;
              (*((void (**)(float **, uint64_t (***)()))v360 + 3))(&v360, &v421);
              (*((void (**)(float **))v360 + 4))(&v360);
              v423 = &v421;
              v126 = v366;
              if (v366 != (uint64_t (***)())&v364)
                goto LABEL_371;
LABEL_376:
              v126 = (uint64_t (***)())&v364;
LABEL_380:
              v127 = 4;
LABEL_381:
              (*v126)[v127]();
LABEL_382:
              v424 = v344;
              if (v346)
              {
                if (v346 != v310)
                {
                  v128 = (uint64_t (***)())(*(uint64_t (**)(void))(*(_QWORD *)v346 + 16))();
                  v366 = v128;
                  v129 = (uint64_t (***)())v426;
                  if (v128 != (uint64_t (***)())&v364)
                    goto LABEL_385;
LABEL_390:
                  if (v129 != v425)
                  {
                    (*((void (**)(float **, _QWORD *))v364 + 3))(&v364, v425);
                    ((void (*)(uint64_t (***)()))(*v366)[4])(v366);
                    v129 = (uint64_t (***)())v426;
                    v366 = (uint64_t (***)())v426;
                    v426 = (char *)v425;
                    if (v366 == (uint64_t (***)())&v364)
                      goto LABEL_392;
LABEL_387:
                    if (v129)
                    {
                      v130 = 5;
                      goto LABEL_397;
                    }
                    goto LABEL_398;
                  }
                  (*((void (**)(float **, float **))v364 + 3))(&v364, &v360);
                  ((void (*)(uint64_t (***)()))(*v366)[4])(v366);
                  v366 = 0;
                  (*(void (**)(char *, float **))(*(_QWORD *)v426 + 24))(v426, &v364);
                  (*(void (**)(char *))(*(_QWORD *)v426 + 32))(v426);
                  v426 = 0;
                  v366 = (uint64_t (***)())&v364;
                  (*((void (**)(float **, _QWORD *))v360 + 3))(&v360, v425);
                  (*((void (**)(float **))v360 + 4))(&v360);
                  v426 = (char *)v425;
                  v129 = v366;
                  if (v366 != (uint64_t (***)())&v364)
                    goto LABEL_387;
LABEL_392:
                  v129 = (uint64_t (***)())&v364;
LABEL_396:
                  v130 = 4;
LABEL_397:
                  (*v129)[v130]();
LABEL_398:
                  v427 = v347;
                  if (v349)
                  {
                    if (v349 != v309)
                    {
                      v131 = (uint64_t (***)())(*(uint64_t (**)(void))(*v349 + 16))();
                      v366 = v131;
                      v132 = v429;
                      if (v131 != (uint64_t (***)())&v364)
                        goto LABEL_401;
LABEL_406:
                      if (v132 != v308)
                      {
                        (*((void (**)(float **))v364 + 3))(&v364);
                        ((void (*)(uint64_t (***)()))(*v366)[4])(v366);
                        v132 = v429;
                        v366 = v429;
                        v429 = v308;
                        if (v366 == (uint64_t (***)())&v364)
                          goto LABEL_408;
LABEL_403:
                        if (v132)
                        {
                          v133 = 5;
                          goto LABEL_413;
                        }
                        goto LABEL_414;
                      }
                      (*((void (**)(float **, float **))v364 + 3))(&v364, &v360);
                      ((void (*)(uint64_t (***)()))(*v366)[4])(v366);
                      v366 = 0;
                      ((void (*)(uint64_t (***)(), float **))(*v429)[3])(v429, &v364);
                      ((void (*)(uint64_t (***)()))(*v429)[4])(v429);
                      v429 = 0;
                      v366 = (uint64_t (***)())&v364;
                      (*((void (**)(float **, uint64_t (***)()))v360 + 3))(&v360, v308);
                      (*((void (**)(float **))v360 + 4))(&v360);
                      v429 = v308;
                      v132 = v366;
                      if (v366 != (uint64_t (***)())&v364)
                        goto LABEL_403;
LABEL_408:
                      v132 = (uint64_t (***)())&v364;
LABEL_412:
                      v133 = 4;
LABEL_413:
                      (*v132)[v133]();
LABEL_414:
                      v119 = v262;
                      v120 = v263;
                      goto LABEL_352;
                    }
                    v366 = (uint64_t (***)())&v364;
                    (*(void (**)(uint64_t *, float **))(v348 + 24))(v309, &v364);
                    v131 = v366;
                    v132 = v429;
                    if (v366 == (uint64_t (***)())&v364)
                      goto LABEL_406;
                  }
                  else
                  {
                    v131 = 0;
                    v366 = 0;
                    v132 = v429;
                    if (&v240 == (void ***)-1264)
                      goto LABEL_406;
                  }
LABEL_401:
                  if (v132 != v308)
                  {
                    v366 = v132;
                    v429 = v131;
                    if (v132 == (uint64_t (***)())&v364)
                      goto LABEL_408;
                    goto LABEL_403;
                  }
                  (*(void (**)(uint64_t (***)(), float **))(v428 + 24))(v308, &v364);
                  ((void (*)(uint64_t (***)()))(*v429)[4])(v429);
                  v429 = v366;
                  v132 = (uint64_t (***)())&v364;
                  v366 = (uint64_t (***)())&v364;
                  goto LABEL_412;
                }
                v366 = (uint64_t (***)())&v364;
                (*(void (**)(char *, float **))(*((_QWORD *)&v344 + 1) + 24))(v310, &v364);
                v128 = v366;
                v129 = (uint64_t (***)())v426;
                if (v366 == (uint64_t (***)())&v364)
                  goto LABEL_390;
              }
              else
              {
                v128 = 0;
                v366 = 0;
                v129 = (uint64_t (***)())v426;
                if (&v240 == (void ***)-1264)
                  goto LABEL_390;
              }
LABEL_385:
              if (v129 != v425)
              {
                v366 = v129;
                v426 = (char *)v128;
                if (v129 == (uint64_t (***)())&v364)
                  goto LABEL_392;
                goto LABEL_387;
              }
              (*(void (**)(_QWORD *, float **))(v425[0] + 24))(v425, &v364);
              (*(void (**)(char *))(*(_QWORD *)v426 + 32))(v426);
              v426 = (char *)v366;
              v129 = (uint64_t (***)())&v364;
              v366 = (uint64_t (***)())&v364;
              goto LABEL_396;
            }
            v366 = (uint64_t (***)())&v364;
            (*(void (**)(_QWORD *, float **))(v342[0] + 24))(v342, &v364);
            v125 = v366;
            v126 = v423;
            if (v366 == (uint64_t (***)())&v364)
              goto LABEL_374;
          }
          else
          {
            v125 = 0;
            v366 = 0;
            v126 = v423;
            if (&v240 == (void ***)-1264)
              goto LABEL_374;
          }
LABEL_369:
          if (v126 != &v421)
          {
            v366 = v126;
            v423 = v125;
            if (v126 == (uint64_t (***)())&v364)
              goto LABEL_376;
            goto LABEL_371;
          }
          ((void (*)(uint64_t, uint64_t))v421[3])((uint64_t)&v421, (uint64_t)&v364);
          ((void (*)(uint64_t (***)()))(*v423)[4])(v423);
          v423 = v366;
          v126 = (uint64_t (***)())&v364;
          v366 = (uint64_t (***)())&v364;
          goto LABEL_380;
        }
      }
      v312 = (float *)v420;
      v134 = v252;
      v115 = v293;
      v116 = v307;
      if (!v423)
        goto LABEL_424;
      if (v423 != &v421)
      {
        v314 = (uint64_t)v423;
        v134 = (uint64_t *)v295;
LABEL_424:
        *v134 = 0;
        goto LABEL_426;
      }
      v314 = (uint64_t)v298;
      ((void (*)(uint64_t, uint64_t))v421[3])((uint64_t)&v421, (uint64_t)v298);
LABEL_426:
      v315 = v424;
      v135 = v251;
      if (!v426)
        goto LABEL_429;
      if (v426 != (char *)v425)
      {
        v317 = v426;
        v135 = v282;
LABEL_429:
        *v135 = 0;
        goto LABEL_431;
      }
      v317 = v265;
      (*(void (**)(_QWORD *))(v425[0] + 24))(v425);
LABEL_431:
      v318 = v427;
      v136 = v250;
      if (!v429)
        goto LABEL_434;
      if (v429 != v308)
      {
        v320 = v429;
        v136 = v281;
LABEL_434:
        *v136 = 0;
        goto LABEL_436;
      }
      v320 = v264;
      (*(void (**)(void))(v428 + 24))();
LABEL_436:
      v321 = v430[0];
      v137 = v349;
      if (v349 == v309)
      {
        v137 = v309;
        v138 = 4;
      }
      else
      {
        if (!v349)
          goto LABEL_441;
        v138 = 5;
      }
      (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_441:
      v139 = v346;
      if (v346 == v310)
      {
        v139 = v310;
        v140 = 4;
        goto LABEL_445;
      }
      if (v346)
      {
        v140 = 5;
LABEL_445:
        (*(void (**)(void))(*(_QWORD *)v139 + 8 * v140))();
      }
      v141 = v343;
      if (v343 == v342)
      {
        v141 = v342;
        v142 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_463;
        v142 = 5;
      }
      (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_463:
      v145 = v418;
      if (v418 == v303)
      {
        v145 = v303;
        v146 = 4;
      }
      else
      {
        if (!v418)
          goto LABEL_468;
        v146 = 5;
      }
      (*(void (**)(void))(*v145 + 8 * v146))();
LABEL_468:
      v147 = v415;
      if (v415 == v305)
      {
        v147 = v305;
        v148 = 4;
      }
      else
      {
        if (!v415)
          goto LABEL_473;
        v148 = 5;
      }
      (*(void (**)(void))(*v147 + 8 * v148))();
LABEL_473:
      v149 = (_QWORD *)v412;
      if ((uint64_t (***)())v412 == v311)
      {
        v149 = v311;
        v150 = 4;
      }
      else
      {
        if (!v412)
          goto LABEL_478;
        v150 = 5;
      }
      (*(void (**)(void))(*v149 + 8 * v150))();
LABEL_478:
      v151 = v429;
      if (v429 == v308)
      {
        v151 = v308;
        v152 = 4;
      }
      else
      {
        if (!v429)
          goto LABEL_483;
        v152 = 5;
      }
      (*v151)[v152]();
LABEL_483:
      v153 = v426;
      if (v426 == (char *)v425)
      {
        v153 = (char *)v425;
        v154 = 4;
      }
      else
      {
        if (!v426)
          goto LABEL_488;
        v154 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v153 + 8 * v154))();
LABEL_488:
      v155 = v423;
      if (v423 == &v421)
      {
        v155 = &v421;
        v156 = 4;
      }
      else
      {
        if (!v423)
          goto LABEL_493;
        v156 = 5;
      }
      (*v155)[v156]();
LABEL_493:
      v157 = v397;
      if (v397 == v289)
      {
        v157 = v289;
        v158 = 4;
      }
      else
      {
        if (!v397)
          goto LABEL_498;
        v158 = 5;
      }
      (*(void (**)(void))(*v157 + 8 * v158))();
LABEL_498:
      v159 = v394;
      if (v394 == v294)
      {
        v159 = v294;
        v160 = 4;
      }
      else
      {
        if (!v394)
          goto LABEL_503;
        v160 = 5;
      }
      (*(void (**)(void))(*v159 + 8 * v160))();
LABEL_503:
      v161 = v391;
      if (v391 == v116)
      {
        v161 = v116;
        v163 = 4;
        v162 = v292;
      }
      else
      {
        v162 = v292;
        if (!v391)
          goto LABEL_508;
        v163 = 5;
      }
      (*(void (**)(void))(*v161 + 8 * v163))();
LABEL_508:
      v164 = v407;
      if (v407 == v406)
      {
        v164 = (uint64_t (***)())v406;
        v165 = 4;
      }
      else
      {
        if (!v407)
          goto LABEL_513;
        v165 = 5;
      }
      (*v164)[v165]();
LABEL_513:
      v166 = v404;
      if (v404 == v283)
      {
        v166 = v283;
        v167 = 4;
      }
      else
      {
        if (!v404)
          goto LABEL_518;
        v167 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v166 + 8 * v167))();
LABEL_518:
      v168 = v401;
      if (v401 == v306)
      {
        v168 = v306;
        v169 = 4;
      }
      else
      {
        if (!v401)
          goto LABEL_523;
        v169 = 5;
      }
      (*(void (**)(void))(*v168 + 8 * v169))();
LABEL_523:
      v170 = v377;
      if (v377 == v290)
      {
        v170 = v290;
        v171 = 4;
      }
      else
      {
        if (!v377)
          goto LABEL_528;
        v171 = 5;
      }
      (*(void (**)(void))(*v170 + 8 * v171))();
LABEL_528:
      v172 = v374;
      if (v374 == v291)
      {
        v172 = v291;
        v173 = 4;
      }
      else
      {
        if (!v374)
          goto LABEL_533;
        v173 = 5;
      }
      (*(void (**)(void))(*v172 + 8 * v173))();
LABEL_533:
      v174 = v371;
      if (v371 == v304)
      {
        v174 = v304;
        v175 = 4;
      }
      else
      {
        if (!v371)
          goto LABEL_538;
        v175 = 5;
      }
      (*(void (**)(void))(*v174 + 8 * v175))();
LABEL_538:
      v176 = v387;
      if (v387 == (uint64_t (***)())v162)
      {
        v176 = (uint64_t (***)())v162;
        v178 = 4;
        v177 = v309;
      }
      else
      {
        v177 = v309;
        if (!v387)
          goto LABEL_543;
        v178 = 5;
      }
      (*v176)[v178]();
LABEL_543:
      v179 = v384;
      if (v384 == v115)
      {
        v179 = v115;
        v181 = 4;
        v180 = v310;
      }
      else
      {
        v180 = v310;
        if (!v384)
          goto LABEL_548;
        v181 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v179 + 8 * v181))();
LABEL_548:
      v182 = v381;
      if (v381 == v12)
      {
        v182 = v12;
        v183 = 4;
      }
      else
      {
        if (!v381)
          goto LABEL_553;
        v183 = 5;
      }
      (*(void (**)(void))(*v182 + 8 * v183))();
LABEL_553:
      v184 = (uint64_t)v333;
      v341 = (uint64_t *)*((_QWORD *)&v331 + 1);
      if (!v333)
        goto LABEL_556;
      if (v333 != v301)
      {
        v184 = (*(uint64_t (**)(void))(*v333 + 16))();
LABEL_556:
        v343 = (uint64_t *)v184;
        goto LABEL_558;
      }
      v343 = v342;
      (*(void (**)(uint64_t *, _QWORD *))(v332 + 24))(v301, v342);
LABEL_558:
      v185 = (uint64_t)v336;
      *(_QWORD *)&v344 = v334;
      if (!v336)
        goto LABEL_561;
      if (v336 != v300)
      {
        v185 = (*(uint64_t (**)(void))(*v336 + 16))();
LABEL_561:
        v346 = (char *)v185;
        goto LABEL_563;
      }
      v346 = v180;
      (*(void (**)(uint64_t *, char *))(v335 + 24))(v300, v180);
LABEL_563:
      v186 = v339;
      v347 = v337;
      if (!v339)
        goto LABEL_566;
      if (v339 != v299)
      {
        v186 = (uint64_t *)(*(uint64_t (**)(void))(*v339 + 16))();
LABEL_566:
        v349 = v186;
        goto LABEL_568;
      }
      v349 = v177;
      (*(void (**)(uint64_t *, uint64_t *))(v338 + 24))(v299, v177);
      v186 = v349;
LABEL_568:
      *(_QWORD *)&v350 = v340;
      v187 = v312;
      v188 = (float *)v341;
      if (v186 == v309)
      {
        v186 = v309;
        v189 = 4;
      }
      else
      {
        if (!v186)
          goto LABEL_573;
        v189 = 5;
      }
      (*(void (**)(void))(*v186 + 8 * v189))();
LABEL_573:
      v190 = v346;
      if (v346 == v310)
      {
        v190 = v310;
        v191 = 4;
      }
      else
      {
        if (!v346)
          goto LABEL_578;
        v191 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v190 + 8 * v191))();
LABEL_578:
      v192 = v343;
      if (v343 == v342)
      {
        v192 = v342;
        v193 = 4;
      }
      else
      {
        if (!v343)
          goto LABEL_583;
        v193 = 5;
      }
      (*(void (**)(void))(*v192 + 8 * v193))();
LABEL_583:
      v194 = v187 == v188;
      v14 = v267;
      if (v194)
        goto LABEL_607;
      v195 = *(_QWORD *)v312;
      v196 = v312[2] * 0.001;
      v197 = *((double *)v312 + 2);
      v199 = (char *)a2[1];
      v198 = (char *)a2[2];
      if (v199 >= v198)
      {
        v201 = (char *)*a2;
        v202 = v199 - (_BYTE *)*a2;
        v203 = (v202 >> 4) + 1;
        if (v203 >> 60)
          sub_22316E078();
        v204 = v198 - v201;
        if (v204 >> 3 > v203)
          v203 = v204 >> 3;
        if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF0)
          v205 = 0xFFFFFFFFFFFFFFFLL;
        else
          v205 = v203;
        if (v205 >> 60)
          sub_223174E94();
        v206 = (char *)operator new(16 * v205);
        v207 = (unint64_t)&v206[16 * (v202 >> 4)];
        *(_QWORD *)v207 = v195;
        *(float *)(v207 + 8) = v196;
        *(float *)(v207 + 12) = v197;
        v208 = v199 - v201;
        if (v199 == v201)
        {
          v210 = &v206[16 * (v202 >> 4)];
          a2 = v240;
          v12 = v241;
        }
        else
        {
          v209 = v208 - 16;
          v12 = v241;
          if ((unint64_t)(v208 - 16) < 0xB0)
          {
            v210 = &v206[16 * (v202 >> 4)];
            a2 = v240;
            goto LABEL_602;
          }
          v211 = (v199 - 16 - v201) & 0xFFFFFFFFFFFFFFF0;
          v212 = (unint64_t)&v206[v202 - v211 - 16];
          a2 = v240;
          if (v212 < (unint64_t)v199)
          {
            v210 = (char *)v207;
            if ((unint64_t)&v199[-v211 - 16] < v207)
              goto LABEL_658;
          }
          v213 = (v209 >> 4) + 1;
          v214 = 16 * (v213 & 0x1FFFFFFFFFFFFFFCLL);
          v215 = &v199[-v214];
          v210 = (char *)(v207 - v214);
          v216 = (const double *)(v199 - 32);
          v217 = (double *)(v207 - 32);
          v218 = v213 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v431 = vld2q_f64(v216);
            v219 = v216 - 4;
            v432 = vld2q_f64(v219);
            vst2q_f64(v217, v431);
            v220 = v217 - 4;
            vst2q_f64(v220, v432);
            v217 -= 8;
            v216 -= 8;
            v218 -= 4;
          }
          while (v218);
          v199 = v215;
          if (v213 != (v213 & 0x1FFFFFFFFFFFFFFCLL))
          {
LABEL_658:
            do
            {
LABEL_602:
              v221 = *((_QWORD *)v199 - 2);
              v199 -= 16;
              *((_QWORD *)v210 - 2) = v221;
              v210 -= 16;
              *((_QWORD *)v210 + 1) = *((_QWORD *)v199 + 1);
            }
            while (v199 != v201);
          }
        }
        v222 = &v206[16 * v205];
        v200 = v207 + 16;
        *a2 = v210;
        a2[1] = (void *)(v207 + 16);
        a2[2] = v222;
        if (v201)
          operator delete(v201);
        v13 = v248;
        v14 = v267;
        goto LABEL_606;
      }
      *(_QWORD *)v199 = v195;
      v200 = (unint64_t)(v199 + 16);
      *((float *)v199 + 2) = v196;
      *((float *)v199 + 3) = v197;
      v13 = v248;
LABEL_606:
      a2[1] = (void *)v200;
LABEL_607:
      v223 = v320;
      v224 = v284;
      if (v320 == v264)
      {
        v223 = v264;
        v225 = 4;
      }
      else
      {
        if (!v320)
          goto LABEL_612;
        v225 = 5;
      }
      (*v223)[v225]();
LABEL_612:
      v226 = v317;
      if (v317 == v265)
      {
        v226 = v265;
        v227 = 4;
      }
      else
      {
        if (!v317)
          goto LABEL_617;
        v227 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v226 + 8 * v227))();
LABEL_617:
      v228 = (_QWORD *)v314;
      if ((uint64_t *)v314 == v298)
      {
        v228 = v298;
        v229 = 4;
      }
      else
      {
        if (!v314)
          goto LABEL_622;
        v229 = 5;
      }
      (*(void (**)(void))(*v228 + 8 * v229))();
LABEL_622:
      v230 = v339;
      if (v339 == v299)
      {
        v230 = v299;
        v231 = 4;
      }
      else
      {
        if (!v339)
          goto LABEL_627;
        v231 = 5;
      }
      (*(void (**)(void))(*v230 + 8 * v231))();
LABEL_627:
      v232 = v336;
      if (v336 == v300)
      {
        v232 = v300;
        v233 = 4;
      }
      else
      {
        if (!v336)
          goto LABEL_632;
        v233 = 5;
      }
      (*(void (**)(void))(*v232 + 8 * v233))();
LABEL_632:
      v234 = v333;
      if (v333 == v301)
      {
        v234 = v301;
        v235 = 4;
      }
      else
      {
        if (!v333)
          goto LABEL_637;
        v235 = 5;
      }
      (*(void (**)(void))(*v234 + 8 * v235))();
LABEL_637:
      v236 = v330;
      if (v330 == v224)
      {
        v236 = v224;
        v237 = 4;
      }
      else
      {
        if (!v330)
          goto LABEL_642;
        v237 = 5;
      }
      (*(void (**)(void))(*v236 + 8 * v237))();
LABEL_642:
      v238 = v327;
      if (v327 == v14)
      {
        v238 = v14;
        v239 = 4;
      }
      else
      {
        if (!v327)
          goto LABEL_647;
        v239 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v238 + 8 * v239))();
LABEL_647:
      result = (uint64_t)v324;
      if (v324 == v13)
      {
        result = (uint64_t)v13;
        v15 = 4;
      }
      else
      {
        if (!v324)
          goto LABEL_6;
        v15 = 5;
      }
      result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v15))();
LABEL_6:
      v6 += 120;
      if (v6 == v260)
        return result;
    }
    v343 = (uint64_t *)v20;
    v22 = v295;
LABEL_16:
    *v22 = 0;
    *(_QWORD *)&v344 = v424;
    *((_QWORD *)&v344 + 1) = v18;
    v23 = &off_24EC2C1F0;
LABEL_17:
    v347 = (uint64_t)v297;
    v24 = (uint64_t)v311;
    ((void (*)(uint64_t, uint64_t))v23[3])((uint64_t)v311, (uint64_t)v297);
    v25 = (_QWORD *)v412;
    v348 = v413;
    if (v412 == v24)
      goto LABEL_24;
    goto LABEL_18;
  }
  return result;
}

void sub_22330F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void **v9;
  void *v11;

  v11 = *v9;
  if (*v9)
  {
    *(_QWORD *)(a9 + 8) = v11;
    operator delete(v11);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_22330FE84(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_22330FF04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 11;
  v3 = (_QWORD *)a1[14];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[9];
  if (v5 == a1 + 6)
  {
    v6 = 4;
    v5 = a1 + 6;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

uint64_t sub_22330FFB4(uint64_t a1, _QWORD *a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  *(_QWORD *)a1 = *a2;
  v8 = a1 + 8;
  v9 = (_QWORD *)a2[4];
  if (v9)
  {
    if (v9 == a2 + 1)
    {
      *(_QWORD *)(a1 + 32) = v8;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a2[4] + 24))(a2[4], v8);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  v10 = a2[5];
  *(_QWORD *)(a1 + 48) = &off_24EC2C160;
  *(_QWORD *)(a1 + 40) = v10;
  *(double *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 72) = a1 + 48;
  *(_QWORD *)(a1 + 80) = *a3;
  v11 = a3[4];
  if (v11)
  {
    if ((_QWORD *)v11 == a3 + 1)
    {
      *(_QWORD *)(a1 + 112) = a1 + 88;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)a3[4] + 24))(a3[4], a1 + 88);
      goto LABEL_11;
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  *(_QWORD *)(a1 + 112) = v11;
LABEL_11:
  *(_QWORD *)(a1 + 120) = a3[5];
  v12 = *(_QWORD *)a1;
LABEL_12:
  while (v12 != *(_QWORD *)(a1 + 80))
  {
    v13 = *(_QWORD *)(a1 + 72);
    if (!v13)
      goto LABEL_21;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) & 1) != 0)
      break;
    v12 = *(_QWORD *)a1 + 32;
    *(_QWORD *)a1 = v12;
    if (v12 != *(_QWORD *)(a1 + 40))
    {
      while (1)
      {
        v14 = *(_QWORD *)(a1 + 32);
        if (!v14)
          break;
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
        v12 = *(_QWORD *)a1;
        if ((v15 & 1) == 0)
        {
          v12 += 32;
          *(_QWORD *)a1 = v12;
          if (v12 != *(_QWORD *)(a1 + 40))
            continue;
        }
        goto LABEL_12;
      }
LABEL_21:
      sub_223198474();
    }
  }
  return a1;
}

void sub_22331013C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD **)(v2 + 72);
  if (v5 == v3)
  {
    v6 = 4;
    v5 = v3;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD **)(v2 + 32);
  if (v7 == v1)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v8 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v8))(v1);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_2233101E8()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233101FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC2C160;
  result[1] = v3;
  return result;
}

uint64_t sub_223310230(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC2C160;
  a2[1] = v2;
  return result;
}

BOOL sub_22331024C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) >= *(float *)(a2 + 8);
}

uint64_t sub_223310264(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233102D0()
{
  return &unk_24EC2C1D0;
}

void sub_2233102E0()
{
  JUMPOUT(0x227684CE8);
}

_DWORD *sub_2233102F4(uint64_t a1)
{
  _DWORD *result;
  int v3;

  result = operator new(0x10uLL);
  v3 = *(_DWORD *)(a1 + 8);
  *(_QWORD *)result = &off_24EC2C1F0;
  result[2] = v3;
  return result;
}

uint64_t sub_22331032C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = &off_24EC2C1F0;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

BOOL sub_22331034C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > *(float *)(a1 + 8);
}

uint64_t sub_223310364(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d13concurrent_sd14FilteredPointsERKNS_3kit11sensor_data19JasperPointCloudUVZEfdE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233103D0()
{
  return &unk_24EC2C250;
}

_QWORD *sub_2233103DC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_22331044C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x227684CE8);
}

BOOL sub_2233104CC(_QWORD *a1, CFArrayRef theArray, CFTypeRef *a3)
{
  unint64_t Count;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v11;
  CFTypeRef v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  CFIndex v16;
  _OWORD *v17;
  char *ValueAtIndex;
  unint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v37;
  CFTypeRef cf;
  std::__shared_weak_count *v39;
  std::error_condition v40;
  void *__p[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v6 = Count;
    v7 = (void *)a1[3];
    a1[4] = v7;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[5] - (_QWORD)v7) >> 4) < Count)
    {
      if (Count > 0x333333333333333)
LABEL_42:
        sub_22316E078();
      v8 = 80 * Count;
      v9 = (char *)operator new(80 * Count);
      a1[3] = v9;
      a1[4] = v9;
      a1[5] = &v9[v8];
      if (v7)
        operator delete(v7);
LABEL_20:
      v16 = 0;
      while (1)
      {
        ValueAtIndex = (char *)CFArrayGetValueAtIndex(theArray, v16);
        if (!ValueAtIndex
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp", 56, (uint64_t)"anchor_ptr", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        *(_OWORD *)__p = *(_OWORD *)(ValueAtIndex + 8);
        v42 = *(_OWORD *)(ValueAtIndex + 24);
        v43 = *(_OWORD *)(ValueAtIndex + 40);
        v44 = *(_OWORD *)(ValueAtIndex + 56);
        v45 = *(_OWORD *)(ValueAtIndex + 72);
        v20 = (_OWORD *)a1[4];
        v19 = a1[5];
        if ((unint64_t)v20 < v19)
        {
          *v20 = *(_OWORD *)(ValueAtIndex + 8);
          v20[1] = v42;
          v20[2] = v43;
          v20[3] = v44;
          v20[4] = v45;
          v17 = v20 + 5;
        }
        else
        {
          v21 = (_OWORD *)a1[3];
          v22 = 0xCCCCCCCCCCCCCCCDLL * (v20 - v21) + 1;
          if (v22 > 0x333333333333333)
            goto LABEL_42;
          v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (_QWORD)v21) >> 4);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x199999999999999)
            v24 = 0x333333333333333;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 > 0x333333333333333)
              sub_223174E94();
            v25 = (char *)operator new(80 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[16 * (v20 - v21)];
          v27 = v42;
          v28 = v43;
          *(_OWORD *)v26 = *(_OWORD *)__p;
          *((_OWORD *)v26 + 1) = v27;
          v29 = v44;
          v30 = v45;
          *((_OWORD *)v26 + 2) = v28;
          *((_OWORD *)v26 + 3) = v29;
          *((_OWORD *)v26 + 4) = v30;
          v31 = v26;
          if (v20 != v21)
          {
            do
            {
              *((_OWORD *)v31 - 5) = *(v20 - 5);
              v32 = *(v20 - 4);
              v33 = *(v20 - 3);
              v34 = *(v20 - 1);
              *((_OWORD *)v31 - 2) = *(v20 - 2);
              *((_OWORD *)v31 - 1) = v34;
              *((_OWORD *)v31 - 4) = v32;
              *((_OWORD *)v31 - 3) = v33;
              v31 -= 80;
              v20 -= 5;
            }
            while (v20 != v21);
            v20 = (_OWORD *)a1[3];
          }
          v35 = &v25[80 * v24];
          v17 = v26 + 80;
          a1[3] = v31;
          a1[4] = v26 + 80;
          a1[5] = v35;
          if (v20)
            operator delete(v20);
        }
        a1[4] = v17;
        if (++v16 == v6)
          return theArray != 0;
      }
    }
    if (Count)
      goto LABEL_20;
  }
  else
  {
    BYTE7(v42) = 13;
    strcpy((char *)__p, "Array is NULL");
    v11 = (char *)operator new(0x80uLL);
    v37 = v11;
    strcpy(v11, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp");
    if (a3)
    {
      *(_QWORD *)&v40.__val_ = 22;
      v40.__cat_ = std::generic_category();
      sub_2245321DC(&v40, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v12 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v12;
      v13 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v11 = v37;
    }
    operator delete(v11);
    if (SBYTE7(v42) < 0)
      operator delete(__p[0]);
  }
  return theArray != 0;
}

void sub_2233108A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2233108E4(_QWORD *a1, uint64_t a2, uint64_t a3, size_t __sz, CFTypeRef *a5, double a6, double a7, __n128 a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  CFTypeRef v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  CFTypeRef v27;
  unint64_t *v28;
  CFTypeRef v29;
  unint64_t *v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  int8x16_t v43;
  unint64_t v44;
  unint64_t v45;
  int8x16_t *v46;
  unint64_t v47;
  char *v48;
  int8x16_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t v57;
  __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  _QWORD *v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  void **v80;
  unint64_t v81;
  __n128 v82;
  unint64_t v83;
  uint64_t v84;
  int8x16_t **v85;
  char *v86;
  _BYTE __p[24];
  CFTypeRef cf;
  std::__shared_weak_count *v89;
  std::error_condition v90;

  if (!a2)
  {
    __p[23] = 14;
    strcpy(__p, "Points is null");
    v22 = (char *)operator new(0x80uLL);
    v86 = v22;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp");
    if (a5)
    {
      *(_QWORD *)&v90.__val_ = 22;
      v90.__cat_ = std::generic_category();
      sub_2245321DC(&v90, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v23 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v23;
      v24 = v89;
      if (!v89)
        goto LABEL_39;
      p_shared_owners = (unint64_t *)&v89->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      goto LABEL_37;
    }
LABEL_40:
    operator delete(v22);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  v9 = a3;
  if (!a3)
  {
    *(_QWORD *)__p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9430;
    strcpy(*(char **)__p, "Vergence angles is null");
    v22 = (char *)operator new(0x80uLL);
    v86 = v22;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp");
    if (a5)
    {
      *(_QWORD *)&v90.__val_ = 22;
      v90.__cat_ = std::generic_category();
      sub_2245321DC(&v90, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v27 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v27;
      v24 = v89;
      if (!v89)
        goto LABEL_39;
      v28 = (unint64_t *)&v89->__shared_owners_;
      do
        v26 = __ldaxr(v28);
      while (__stlxr(v26 - 1, v28));
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  v10 = __sz;
  if ((__sz & 0x80000000) != 0)
  {
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9420;
    strcpy(*(char **)__p, "Invalid number of points");
    v22 = (char *)operator new(0x80uLL);
    v86 = v22;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp");
    if (a5)
    {
      *(_QWORD *)&v90.__val_ = 22;
      v90.__cat_ = std::generic_category();
      sub_2245321DC(&v90, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v29 = cf;
      if (cf)
        CFRetain(cf);
      *a5 = v29;
      v24 = v89;
      if (!v89)
        goto LABEL_39;
      v30 = (unint64_t *)&v89->__shared_owners_;
      do
        v26 = __ldaxr(v30);
      while (__stlxr(v26 - 1, v30));
LABEL_37:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
LABEL_39:
      v22 = v86;
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  v11 = a2;
  v13 = (void *)a1[7];
  a1[8] = v13;
  v14 = (_BYTE *)a1[10];
  v80 = (void **)(a1 + 10);
  a1[11] = v14;
  v15 = __sz;
  v85 = (int8x16_t **)(a1 + 7);
  v81 = __sz;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[9] - (_QWORD)v13) >> 3) < __sz)
  {
    v16 = (char *)operator new(24 * __sz);
    v15 = v81;
    a1[7] = v16;
    a1[8] = v16;
    a1[9] = &v16[24 * v10];
    if (v13)
    {
      operator delete(v13);
      v14 = *v80;
    }
  }
  if (v15 <= (uint64_t)(a1[12] - (_QWORD)v14) >> 3)
    goto LABEL_50;
  v17 = (_BYTE *)a1[11];
  v18 = (char *)operator new(8 * v15);
  v19 = v17 - v14;
  v20 = &v18[(v17 - v14) & 0xFFFFFFFFFFFFFFF8];
  v21 = v20;
  if (v17 != v14)
  {
    if ((unint64_t)(v19 - 8) < 0x58)
    {
      v21 = &v18[(v17 - v14) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_47:
        v40 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v21 - 1) = v40;
        v21 -= 8;
      }
      while (v17 != v14);
      goto LABEL_48;
    }
    v21 = &v18[(v17 - v14) & 0xFFFFFFFFFFFFFFF8];
    if (v17 - v18 - (v19 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_47;
    v32 = v19 >> 3;
    v33 = ((unint64_t)(v19 - 8) >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v17[-v34];
    v21 = &v20[-v34];
    v36 = &v18[8 * v32 - 16];
    v37 = (__int128 *)(v17 - 16);
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *v37;
      *((_OWORD *)v36 - 1) = *(v37 - 1);
      *(_OWORD *)v36 = v39;
      v36 -= 32;
      v37 -= 2;
      v38 -= 4;
    }
    while (v38);
    v17 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_47;
  }
LABEL_48:
  a1[10] = v21;
  a1[11] = v20;
  a1[12] = &v18[8 * v15];
  if (v14)
    operator delete(v14);
LABEL_50:
  if (v10)
  {
    v41 = 0;
    while (1)
    {
      v42 = (int8x16_t *)(v11 + 24 * v41);
      v43 = *v42;
      a8.n128_u64[0] = v42[1].u64[0];
      v44 = vextq_s8(v43, v43, 8uLL).u64[0];
      v46 = (int8x16_t *)a1[8];
      v45 = a1[9];
      if ((unint64_t)v46 >= v45)
      {
        v49 = *v85;
        v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46 - (char *)*v85) >> 3);
        v51 = v50 + 1;
        if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_22316E078();
        v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - (_QWORD)v49) >> 3);
        if (2 * v52 > v51)
          v51 = 2 * v52;
        if (v52 >= 0x555555555555555)
          v53 = 0xAAAAAAAAAAAAAAALL;
        else
          v53 = v51;
        if (v53)
        {
          v82 = a8;
          v83 = v44;
          v84 = v43.i64[0];
          if (v53 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_93;
          v54 = (char *)operator new(24 * v53);
          v44 = v83;
          v43.i64[0] = v84;
          a8 = v82;
        }
        else
        {
          v54 = 0;
        }
        v55 = (int8x16_t *)&v54[24 * v50];
        v55[1].i64[0] = a8.n128_u64[0];
        v43.i64[1] = v44;
        *v55 = v43;
        v56 = v55;
        if (v46 != v49)
        {
          do
          {
            v57 = *(int8x16_t *)((char *)v46 - 24);
            v56[-1].i64[1] = v46[-1].i64[1];
            *(int8x16_t *)((char *)v56 - 24) = v57;
            v56 = (int8x16_t *)((char *)v56 - 24);
            v46 = (int8x16_t *)((char *)v46 - 24);
          }
          while (v46 != v49);
          v46 = *v85;
        }
        v58 = &v55[1].i8[8];
        a1[7] = v56;
        a1[8] = (char *)v55 + 24;
        a1[9] = &v54[24 * v53];
        if (v46)
          operator delete(v46);
        a1[8] = v58;
        v48 = (char *)a1[11];
        v47 = a1[12];
        if ((unint64_t)v48 < v47)
          goto LABEL_52;
LABEL_72:
        v59 = v11;
        v60 = v9;
        v61 = (char *)*v80;
        v62 = v48 - (_BYTE *)*v80;
        v63 = v62 >> 3;
        v64 = (v62 >> 3) + 1;
        if (v64 >> 61)
          sub_22316E078();
        v65 = v47 - (_QWORD)v61;
        if (v65 >> 2 > v64)
          v64 = v65 >> 2;
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v64;
        if (v66)
        {
          if (v66 >> 61)
LABEL_93:
            sub_223174E94();
          v67 = operator new(8 * v66);
          v68 = &v67[8 * v63];
          *v68 = *(_QWORD *)(v60 + 8 * v41);
          v69 = (uint64_t)(v68 + 1);
          v70 = v48 - v61;
          if (v48 == v61)
            goto LABEL_89;
LABEL_83:
          v71 = v70 - 8;
          if (v71 < 0x58)
            goto LABEL_98;
          if ((unint64_t)(v48 - v67 - v62) < 0x20)
            goto LABEL_98;
          v72 = (v71 >> 3) + 1;
          v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
          v74 = &v48[-v73];
          v68 = (_QWORD *)((char *)v68 - v73);
          v75 = &v67[8 * v63 - 16];
          v76 = v48 - 16;
          v77 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *v75 = v78;
            v75 -= 2;
            v76 -= 32;
            v77 -= 4;
          }
          while (v77);
          v48 = v74;
          if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
              v79 = *((_QWORD *)v48 - 1);
              v48 -= 8;
              *--v68 = v79;
            }
            while (v48 != v61);
          }
          goto LABEL_89;
        }
        v67 = 0;
        v68 = (_QWORD *)(8 * v63);
        *(_QWORD *)(8 * v63) = *(_QWORD *)(v60 + 8 * v41);
        v69 = 8 * v63 + 8;
        v70 = v48 - v61;
        if (v48 != v61)
          goto LABEL_83;
LABEL_89:
        a1[10] = v68;
        a1[11] = v69;
        a1[12] = &v67[8 * v66];
        if (v61)
          operator delete(v61);
        v9 = v60;
        v11 = v59;
        v15 = v81;
        a1[11] = v69;
        if (++v41 == v81)
          return 1;
      }
      else
      {
        v46[1].i64[0] = a8.n128_u64[0];
        v43.i64[1] = v44;
        *v46 = v43;
        a1[8] = (char *)v46 + 24;
        v48 = (char *)a1[11];
        v47 = a1[12];
        if ((unint64_t)v48 >= v47)
          goto LABEL_72;
LABEL_52:
        *(_QWORD *)v48 = *(_QWORD *)(v9 + 8 * v41);
        a1[11] = v48 + 8;
        if (++v41 == v15)
          return 1;
      }
    }
  }
  return 1;
}

void sub_22331108C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  void *v27;

  operator delete(v27);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2233110E0(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, CFTypeRef *a5, double a6, double a7, __n128 a8)
{
  uint64_t v9;
  uint64_t v11;
  void *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  CFErrorRef v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  CFErrorRef v27;
  unint64_t *v28;
  CFErrorRef v29;
  unint64_t *v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int8x16_t *v43;
  int8x16_t v44;
  unint64_t v45;
  unint64_t v46;
  int8x16_t *v47;
  __int8 *v48;
  int8x16_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int8x16_t v57;
  uint64_t v58;
  int8x16_t *v59;
  int8x16_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _BYTE *v72;
  int8x16_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  int8x16_t *v79;
  char *v80;
  __int8 *v81;
  int8x16_t v82;
  char *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  _QWORD *v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _OWORD *v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  __n128 v111;
  __n128 v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void **v119;
  int8x16_t **v120;
  uint64_t v121;
  char *v122;
  _BYTE __p[24];
  CFErrorRef v124;
  std::__shared_weak_count *v125;
  std::error_condition v126;

  if (!a2)
  {
    __p[23] = 14;
    strcpy(__p, "Points is null");
    v22 = (char *)operator new(0x80uLL);
    v122 = v22;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp");
    if (a5)
    {
      *(_QWORD *)&v126.__val_ = 22;
      v126.__cat_ = std::generic_category();
      sub_2245321DC(&v126, (uint64_t)__p, &v124);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v23 = v124;
      if (v124)
        CFRetain(v124);
      *a5 = v23;
      v24 = v125;
      if (!v125)
        goto LABEL_39;
      p_shared_owners = (unint64_t *)&v125->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      goto LABEL_37;
    }
LABEL_40:
    operator delete(v22);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  v9 = a3;
  if (!a3)
  {
    *(_QWORD *)__p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9430;
    strcpy(*(char **)__p, "Vergence angles is null");
    v22 = (char *)operator new(0x80uLL);
    v122 = v22;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp");
    if (a5)
    {
      *(_QWORD *)&v126.__val_ = 22;
      v126.__cat_ = std::generic_category();
      sub_2245321DC(&v126, (uint64_t)__p, &v124);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v27 = v124;
      if (v124)
        CFRetain(v124);
      *a5 = v27;
      v24 = v125;
      if (!v125)
        goto LABEL_39;
      v28 = (unint64_t *)&v125->__shared_owners_;
      do
        v26 = __ldaxr(v28);
      while (__stlxr(v26 - 1, v28));
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  if ((a4 & 0x80000000) != 0)
  {
    *(_QWORD *)__p = operator new(0x19uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9430;
    strcpy(*(char **)__p, "Invalid number of lines");
    v22 = (char *)operator new(0x80uLL);
    v122 = v22;
    strcpy(v22, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp");
    if (a5)
    {
      *(_QWORD *)&v126.__val_ = 22;
      v126.__cat_ = std::generic_category();
      sub_2245321DC(&v126, (uint64_t)__p, &v124);
      if (*a5)
        CFRelease(*a5);
      *a5 = 0;
      v29 = v124;
      if (v124)
        CFRetain(v124);
      *a5 = v29;
      v24 = v125;
      if (!v125)
        goto LABEL_39;
      v30 = (unint64_t *)&v125->__shared_owners_;
      do
        v26 = __ldaxr(v30);
      while (__stlxr(v26 - 1, v30));
LABEL_37:
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
LABEL_39:
      v22 = v122;
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  v11 = a2;
  v13 = (void *)a1[13];
  a1[14] = v13;
  v14 = (_BYTE *)a1[16];
  v119 = (void **)(a1 + 16);
  v120 = (int8x16_t **)(a1 + 13);
  a1[17] = v14;
  v15 = 2 * a4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[15] - (_QWORD)v13) >> 3) < v15)
  {
    v16 = (char *)operator new(48 * a4);
    a1[13] = v16;
    a1[14] = v16;
    a1[15] = &v16[48 * a4];
    if (v13)
    {
      operator delete(v13);
      v14 = *v119;
    }
  }
  if (v15 <= (uint64_t)(a1[18] - (_QWORD)v14) >> 3)
    goto LABEL_50;
  v17 = (_BYTE *)a1[17];
  v18 = (char *)operator new(16 * a4);
  v19 = v17 - v14;
  v20 = &v18[(v17 - v14) & 0xFFFFFFFFFFFFFFF8];
  v21 = v20;
  if (v17 != v14)
  {
    if ((unint64_t)(v19 - 8) < 0x58)
    {
      v21 = &v18[(v17 - v14) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_47:
        v40 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v21 - 1) = v40;
        v21 -= 8;
      }
      while (v17 != v14);
      goto LABEL_48;
    }
    v21 = &v18[(v17 - v14) & 0xFFFFFFFFFFFFFFF8];
    if (v17 - v18 - (v19 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_47;
    v32 = v19 >> 3;
    v33 = ((unint64_t)(v19 - 8) >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v17[-v34];
    v21 = &v20[-v34];
    v36 = &v18[8 * v32 - 16];
    v37 = (__int128 *)(v17 - 16);
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *v37;
      *((_OWORD *)v36 - 1) = *(v37 - 1);
      *(_OWORD *)v36 = v39;
      v36 -= 32;
      v37 -= 2;
      v38 -= 4;
    }
    while (v38);
    v17 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_47;
  }
LABEL_48:
  a1[16] = v21;
  a1[17] = v20;
  a1[18] = &v18[16 * a4];
  if (v14)
    operator delete(v14);
LABEL_50:
  if (a4)
  {
    v117 = a4;
    v118 = v11;
    v41 = 0;
    v121 = v9;
    do
    {
      v43 = (int8x16_t *)(v11 + 48 * v41);
      v44 = *v43;
      a8.n128_u64[0] = v43[1].u64[0];
      v45 = vextq_s8(v44, v44, 8uLL).u64[0];
      v47 = (int8x16_t *)a1[14];
      v46 = a1[15];
      if ((unint64_t)v47 >= v46)
      {
        v49 = *v120;
        v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)*v120) >> 3);
        v51 = v50 + 1;
        if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_137;
        v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (_QWORD)v49) >> 3);
        if (2 * v52 > v51)
          v51 = 2 * v52;
        if (v52 >= 0x555555555555555)
          v53 = 0xAAAAAAAAAAAAAAALL;
        else
          v53 = v51;
        if (v53)
        {
          v111 = a8;
          v113 = v45;
          v115 = v44.i64[0];
          if (v53 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_136;
          v54 = (char *)operator new(24 * v53);
          v45 = v113;
          v44.i64[0] = v115;
          a8 = v111;
        }
        else
        {
          v54 = 0;
        }
        v55 = (int8x16_t *)&v54[24 * v50];
        v55[1].i64[0] = a8.n128_u64[0];
        v44.i64[1] = v45;
        *v55 = v44;
        v56 = v55;
        if (v47 != v49)
        {
          do
          {
            v57 = *(int8x16_t *)((char *)v47 - 24);
            v56[-1].i64[1] = v47[-1].i64[1];
            *(int8x16_t *)((char *)v56 - 24) = v57;
            v56 = (int8x16_t *)((char *)v56 - 24);
            v47 = (int8x16_t *)((char *)v47 - 24);
          }
          while (v47 != v49);
          v47 = *v120;
        }
        v48 = &v55[1].i8[8];
        a1[13] = v56;
        a1[14] = (char *)v55 + 24;
        a1[15] = &v54[24 * v53];
        if (v47)
          operator delete(v47);
      }
      else
      {
        v47[1].i64[0] = a8.n128_u64[0];
        v44.i64[1] = v45;
        *v47 = v44;
        v48 = &v47[1].i8[8];
      }
      v58 = (2 * v41) | 1;
      a1[14] = v48;
      v59 = (int8x16_t *)(v11 + 24 * v58);
      v60 = *v59;
      a8.n128_u64[0] = v59[1].u64[0];
      v61 = vextq_s8(v60, v60, 8uLL).u64[0];
      v62 = a1[15];
      if ((unint64_t)v48 < v62)
      {
        *((_QWORD *)v48 + 2) = a8.n128_u64[0];
        v60.i64[1] = v61;
        *(int8x16_t *)v48 = v60;
        v63 = 2 * v41;
        a1[14] = v48 + 24;
        v65 = (char *)a1[17];
        v64 = a1[18];
        if ((unint64_t)v65 < v64)
          goto LABEL_96;
        goto LABEL_73;
      }
      v73 = *v120;
      v74 = 0xAAAAAAAAAAAAAAABLL * ((v48 - (__int8 *)*v120) >> 3);
      v75 = v74 + 1;
      if (v74 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_137:
        sub_22316E078();
      v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (_QWORD)v73) >> 3);
      if (2 * v76 > v75)
        v75 = 2 * v76;
      if (v76 >= 0x555555555555555)
        v77 = 0xAAAAAAAAAAAAAAALL;
      else
        v77 = v75;
      if (v77)
      {
        v112 = a8;
        v114 = v61;
        v116 = v60.i64[0];
        if (v77 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_136;
        v78 = (char *)operator new(24 * v77);
        v61 = v114;
        v60.i64[0] = v116;
        a8 = v112;
      }
      else
      {
        v78 = 0;
      }
      v79 = (int8x16_t *)&v78[24 * v74];
      v80 = &v78[24 * v77];
      v79[1].i64[0] = a8.n128_u64[0];
      v60.i64[1] = v61;
      *v79 = v60;
      v81 = &v79[1].i8[8];
      if (v48 == (__int8 *)v73)
      {
        a1[13] = v79;
        a1[14] = v81;
        a1[15] = v80;
      }
      else
      {
        do
        {
          v82 = *(int8x16_t *)(v48 - 24);
          v79[-1].i64[1] = *((_QWORD *)v48 - 1);
          *(int8x16_t *)((char *)v79 - 24) = v82;
          v79 = (int8x16_t *)((char *)v79 - 24);
          v48 -= 24;
        }
        while (v48 != (__int8 *)v73);
        v48 = (__int8 *)a1[13];
        a1[13] = v79;
        a1[14] = v81;
        a1[15] = v80;
        if (!v48)
        {
          v63 = 2 * v41;
          a1[14] = v81;
          v65 = (char *)a1[17];
          v64 = a1[18];
          if ((unint64_t)v65 < v64)
            goto LABEL_96;
          goto LABEL_73;
        }
      }
      operator delete(v48);
      v63 = 2 * v41;
      a1[14] = v81;
      v65 = (char *)a1[17];
      v64 = a1[18];
      if ((unint64_t)v65 < v64)
      {
LABEL_96:
        *(_QWORD *)v65 = *(_QWORD *)(v9 + 8 * v63);
        v83 = v65 + 8;
        a1[17] = v65 + 8;
        if ((unint64_t)(v65 + 8) < v64)
          goto LABEL_52;
        goto LABEL_112;
      }
LABEL_73:
      v66 = *v119;
      v67 = v65 - (_BYTE *)*v119;
      v68 = v67 >> 3;
      v69 = (v67 >> 3) + 1;
      if (v69 >> 61)
        goto LABEL_138;
      v70 = v64 - (_QWORD)v66;
      if (v70 >> 2 > v69)
        v69 = v70 >> 2;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
        v71 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v71 = v69;
      if (v71)
      {
        if (v71 >> 61)
          goto LABEL_136;
        v72 = operator new(8 * v71);
      }
      else
      {
        v72 = 0;
      }
      v84 = &v72[8 * v68];
      *v84 = *(_QWORD *)(v121 + 8 * v63);
      v83 = (char *)(v84 + 1);
      if (v65 != v66)
      {
        v85 = v65 - v66 - 8;
        if (v85 < 0x58)
          goto LABEL_141;
        if ((unint64_t)(v65 - v72 - v67) < 0x20)
          goto LABEL_141;
        v86 = (v85 >> 3) + 1;
        v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
        v88 = &v65[-v87];
        v84 = (_QWORD *)((char *)v84 - v87);
        v89 = &v72[8 * v68 - 16];
        v90 = v65 - 16;
        v91 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v92 = *(_OWORD *)v90;
          *(v89 - 1) = *((_OWORD *)v90 - 1);
          *v89 = v92;
          v89 -= 2;
          v90 -= 32;
          v91 -= 4;
        }
        while (v91);
        v65 = v88;
        if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_141:
          do
          {
            v93 = *((_QWORD *)v65 - 1);
            v65 -= 8;
            *--v84 = v93;
          }
          while (v65 != v66);
        }
      }
      v64 = (unint64_t)&v72[8 * v71];
      a1[16] = v84;
      a1[17] = v83;
      a1[18] = v64;
      if (v66)
      {
        operator delete(v66);
        v64 = a1[18];
      }
      v9 = v121;
      a1[17] = v83;
      if ((unint64_t)v83 < v64)
      {
LABEL_52:
        *(_QWORD *)v83 = *(_QWORD *)(v9 + 8 * v58);
        v42 = v83 + 8;
        v11 = v118;
        goto LABEL_53;
      }
LABEL_112:
      v94 = (char *)*v119;
      v95 = v83 - (_BYTE *)*v119;
      v96 = v95 >> 3;
      v97 = (v95 >> 3) + 1;
      if (v97 >> 61)
LABEL_138:
        sub_22316E078();
      v98 = v64 - (_QWORD)v94;
      if (v98 >> 2 > v97)
        v97 = v98 >> 2;
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
        v99 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v99 = v97;
      if (v99)
      {
        if (v99 >> 61)
LABEL_136:
          sub_223174E94();
        v100 = operator new(8 * v99);
      }
      else
      {
        v100 = 0;
      }
      v101 = &v100[8 * v96];
      *v101 = *(_QWORD *)(v121 + 8 * v58);
      v42 = v101 + 1;
      if (v83 != v94)
      {
        v102 = v83 - v94 - 8;
        if (v102 < 0x58 || (unint64_t)(v83 - v100 - v95) < 0x20)
        {
          v103 = v83;
          v9 = v121;
          v11 = v118;
          goto LABEL_126;
        }
        v105 = (v102 >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v103 = &v83[-v106];
        v101 = (_QWORD *)((char *)v101 - v106);
        v107 = &v100[8 * v96 - 16];
        v108 = v83 - 16;
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *(_OWORD *)v108;
          *(v107 - 1) = *((_OWORD *)v108 - 1);
          *v107 = v110;
          v107 -= 2;
          v108 -= 32;
          v109 -= 4;
        }
        while (v109);
        v9 = v121;
        v11 = v118;
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_126:
            v104 = *((_QWORD *)v103 - 1);
            v103 -= 8;
            *--v101 = v104;
          }
          while (v103 != v94);
        }
        a1[16] = v101;
        a1[17] = v42;
        a1[18] = &v100[8 * v99];
        if (!v94)
          goto LABEL_53;
LABEL_130:
        operator delete(v94);
        goto LABEL_53;
      }
      v9 = v121;
      v11 = v118;
      a1[16] = v101;
      a1[17] = v42;
      a1[18] = &v100[8 * v99];
      if (v94)
        goto LABEL_130;
LABEL_53:
      a1[17] = v42;
      ++v41;
    }
    while (v41 != v117);
  }
  return 1;
}

void sub_223311AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  operator delete(v28);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_223311B40(uint64_t a1, simd_float4 a2, simd_float4 a3, simd_float4 a4, simd_float4 a5)
{
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  simd_float4x4 v11;
  simd_float4x4 v12;

  *(_DWORD *)(a1 + 152) = 0;
  v11.columns[0] = a2;
  v11.columns[1] = a3;
  v11.columns[2] = a4;
  v11.columns[3] = a5;
  sub_22322BC80(&v11, &v12);
  v6 = vcvtq_f64_f32(*(float32x2_t *)&v12.columns[0].u32[2]);
  *(float64x2_t *)(a1 + 160) = vcvtq_f64_f32(*(float32x2_t *)v12.columns[0].f32);
  *(float64x2_t *)(a1 + 176) = v6;
  v7 = vcvtq_f64_f32(*(float32x2_t *)&v12.columns[1].u32[2]);
  *(float64x2_t *)(a1 + 192) = vcvtq_f64_f32(*(float32x2_t *)v12.columns[1].f32);
  *(float64x2_t *)(a1 + 208) = v7;
  v8 = vcvtq_f64_f32(*(float32x2_t *)&v12.columns[2].u32[2]);
  *(float64x2_t *)(a1 + 224) = vcvtq_f64_f32(*(float32x2_t *)v12.columns[2].f32);
  *(float64x2_t *)(a1 + 240) = v8;
  v9 = vcvtq_f64_f32(*(float32x2_t *)&v12.columns[3].u32[2]);
  *(float64x2_t *)(a1 + 256) = vcvtq_f64_f32(*(float32x2_t *)v12.columns[3].f32);
  *(float64x2_t *)(a1 + 272) = v9;
  return 1;
}

uint64_t sub_223311BC0(uint64_t a1, const __CFUUID *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  simd_float4 v11;
  simd_float4 v12;
  _BYTE v14[64];
  simd_float4x4 v15;
  simd_float4x4 v16;

  *(__n128 *)&v14[32] = a5;
  *(__n128 *)&v14[48] = a6;
  *(__n128 *)v14 = a3;
  *(__n128 *)&v14[16] = a4;
  *(_OWORD *)(a1 + 24) = xmmword_2245D2358;
  *(_OWORD *)(a1 + 40) = unk_2245D2368;
  *(_OWORD *)(a1 + 56) = xmmword_2245D2378;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 72) = unk_2245D2388;
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)a1 = &off_24EC2C270;
  if (a2 && (v8 = CFUUIDGetTypeID(), CFGetTypeID(a2) == v8))
  {
    v16.columns[0] = (simd_float4)CFUUIDGetUUIDBytes(a2);
    v9 = sub_22453331C((uint64_t)&v16);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/DataModel/SlamMetadata.cpp", 140, (uint64_t)"uuid_opt", 8, (uint64_t)"failed to convert CFUUIDRef to random::UUID", 43, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = 0;
  }
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  v15 = *(simd_float4x4 *)v14;
  sub_22322BC80(&v15, &v16);
  v11 = v16.columns[1];
  *(simd_float4 *)(a1 + 24) = v16.columns[0];
  *(simd_float4 *)(a1 + 40) = v11;
  v12 = v16.columns[3];
  *(simd_float4 *)(a1 + 56) = v16.columns[2];
  *(simd_float4 *)(a1 + 72) = v12;
  return a1;
}

void sub_223311CDC()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223311CF0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2)
  {
    if (a2 >= 0x111111111111112)
      sub_22316E078();
    v10 = operator new(240 * a2);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v10;
    v11 = &v10[15 * a2];
    *(_QWORD *)(a1 + 16) = v11;
    do
    {
      v10[4] = 0uLL;
      v10[5] = 0uLL;
      v10[2] = 0uLL;
      v10[3] = 0uLL;
      *v10 = 0uLL;
      v10[1] = 0uLL;
      v10[12] = unk_2245D23E8;
      v10[13] = xmmword_2245D23F8;
      v10[14] = unk_2245D2408;
      v10[6] = 0uLL;
      v10[7] = xmmword_2245D2398;
      v10[8] = unk_2245D23A8;
      v10[9] = xmmword_2245D23B8;
      v10[10] = unk_2245D23C8;
      v10[11] = xmmword_2245D23D8;
      v10 += 15;
    }
    while (v10 != v11);
    *(_QWORD *)(a1 + 8) = v11;
  }
  v12 = 0uLL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (a3)
  {
    if (a3 >= 0xDD67C8A60DD67DLL)
      sub_22316E078();
    v13 = (char *)operator new(296 * a3);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v13;
    v14 = &v13[296 * a3];
    *(_QWORD *)(a1 + 64) = v14;
    do
    {
      *((_QWORD *)v13 + 20) = 0;
      *((_OWORD *)v13 + 8) = 0uLL;
      *((_OWORD *)v13 + 9) = 0uLL;
      *((_OWORD *)v13 + 6) = 0uLL;
      *((_OWORD *)v13 + 7) = 0uLL;
      *((_OWORD *)v13 + 4) = 0uLL;
      *((_OWORD *)v13 + 5) = 0uLL;
      *((_OWORD *)v13 + 2) = 0uLL;
      *((_OWORD *)v13 + 3) = 0uLL;
      *(_OWORD *)v13 = 0uLL;
      *((_OWORD *)v13 + 1) = 0uLL;
      v15 = v13 + 168;
      *(_OWORD *)(v13 + 232) = xmmword_2245D23D8;
      *(_OWORD *)(v13 + 248) = unk_2245D23E8;
      *(_OWORD *)(v13 + 168) = xmmword_2245D2398;
      *(_OWORD *)(v13 + 184) = unk_2245D23A8;
      *(_OWORD *)(v13 + 200) = xmmword_2245D23B8;
      *(_OWORD *)(v13 + 216) = unk_2245D23C8;
      v13 += 296;
      *((_OWORD *)v15 + 6) = xmmword_2245D23F8;
      *((_OWORD *)v15 + 7) = unk_2245D2408;
    }
    while (v13 != v14);
    *(_QWORD *)(a1 + 56) = v14;
    v12 = 0uLL;
  }
  *(_OWORD *)(a1 + 104) = v12;
  *(_OWORD *)(a1 + 88) = v12;
  *(_OWORD *)(a1 + 72) = v12;
  if (a4)
  {
    if (a4 >= 0xBE82FA0BE82FA1)
      sub_22316E078();
    v16 = (char *)operator new(344 * a4);
    *(_QWORD *)(a1 + 96) = v16;
    *(_QWORD *)(a1 + 104) = v16;
    v17 = &v16[344 * a4];
    *(_QWORD *)(a1 + 112) = v17;
    do
    {
      *(_OWORD *)v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      *((_QWORD *)v16 + 26) = 0;
      *((_OWORD *)v16 + 11) = 0uLL;
      *((_OWORD *)v16 + 12) = 0uLL;
      *((_OWORD *)v16 + 9) = 0uLL;
      *((_OWORD *)v16 + 10) = 0uLL;
      *((_OWORD *)v16 + 7) = 0uLL;
      *((_OWORD *)v16 + 8) = 0uLL;
      *((_OWORD *)v16 + 5) = 0uLL;
      *((_OWORD *)v16 + 6) = 0uLL;
      *((_OWORD *)v16 + 4) = 0uLL;
      *((_QWORD *)v16 + 2) = 0;
      *((_QWORD *)v16 + 3) = 0;
      *((_QWORD *)v16 + 1) = &off_24EC715B8;
      *((_QWORD *)v16 + 4) = &off_24EC715B8;
      *((_QWORD *)v16 + 5) = 0;
      *((_QWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 7) = &off_24EC715B8;
      *((_QWORD *)v16 + 8) = 0;
      *((_QWORD *)v16 + 9) = 0;
      v18 = v16 + 216;
      *(_OWORD *)(v16 + 248) = xmmword_2245D23B8;
      *(_OWORD *)(v16 + 232) = unk_2245D23A8;
      *(_OWORD *)(v16 + 216) = xmmword_2245D2398;
      *(_OWORD *)(v16 + 312) = xmmword_2245D23F8;
      *(_OWORD *)(v16 + 328) = unk_2245D2408;
      *(_OWORD *)(v16 + 280) = xmmword_2245D23D8;
      *(_OWORD *)(v16 + 296) = unk_2245D23E8;
      v16 += 344;
      *((_OWORD *)v18 + 3) = unk_2245D23C8;
    }
    while (v16 != v17);
    *(_QWORD *)(a1 + 104) = v17;
  }
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  if (a5)
  {
    if (a5 >= 0xCCCCCCCCCCCCCDLL)
      sub_22316E078();
    v19 = (char *)operator new(320 * a5);
    *(_QWORD *)(a1 + 144) = v19;
    *(_QWORD *)(a1 + 152) = v19;
    v20 = &v19[320 * a5];
    *(_QWORD *)(a1 + 160) = v20;
    do
    {
      *(_OWORD *)v19 = 0uLL;
      *((_OWORD *)v19 + 1) = 0uLL;
      *((_OWORD *)v19 + 2) = 0uLL;
      *((_OWORD *)v19 + 3) = 0uLL;
      *((_OWORD *)v19 + 10) = 0uLL;
      *((_OWORD *)v19 + 11) = 0uLL;
      *((_OWORD *)v19 + 8) = 0uLL;
      *((_OWORD *)v19 + 9) = 0uLL;
      *((_OWORD *)v19 + 6) = 0uLL;
      *((_OWORD *)v19 + 7) = 0uLL;
      *((_OWORD *)v19 + 4) = 0uLL;
      *((_OWORD *)v19 + 5) = 0uLL;
      *((_QWORD *)v19 + 2) = 0;
      *((_QWORD *)v19 + 3) = 0;
      *((_QWORD *)v19 + 1) = &off_24EC715B8;
      *((_QWORD *)v19 + 4) = &off_24EC715B8;
      *((_QWORD *)v19 + 5) = 0;
      *((_QWORD *)v19 + 6) = 0;
      *((_OWORD *)v19 + 14) = xmmword_2245D23B8;
      *((_OWORD *)v19 + 15) = unk_2245D23C8;
      *((_OWORD *)v19 + 12) = xmmword_2245D2398;
      *((_OWORD *)v19 + 13) = unk_2245D23A8;
      *((_OWORD *)v19 + 18) = xmmword_2245D23F8;
      *((_OWORD *)v19 + 19) = unk_2245D2408;
      *((_OWORD *)v19 + 16) = xmmword_2245D23D8;
      *((_OWORD *)v19 + 17) = unk_2245D23E8;
      v19 += 320;
    }
    while (v19 != v20);
    *(_QWORD *)(a1 + 152) = v20;
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_223312008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void **v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;

  v13 = *(_QWORD *)(v9 + 144);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 152);
    v15 = *(void **)(v9 + 144);
    if (v14 != v13)
    {
      do
      {
        v16 = v14 - 320;
        v17 = (_QWORD *)(v14 - 312);
        sub_2242A8F3C((_QWORD *)(v14 - 288));
        sub_2242A8F3C(v17);
        v14 = v16;
      }
      while (v16 != v13);
      v15 = *(void **)(v9 + 144);
    }
    *(_QWORD *)(v9 + 152) = v13;
    operator delete(v15);
  }
  sub_223312150(v11);
  sub_223312290(v10);
  a9 = (void **)v9;
  sub_223314A50(&a9);
  _Unwind_Resume(a1);
}

void sub_22331213C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_223314A50(&a9);
  _Unwind_Resume(a1);
}

void **sub_223312150(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_21;
  do
  {
    v5 = v3 - 344;
    *((_QWORD *)v3 - 36) = &off_24EC715B8;
    v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 34);
    if (!v6)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      *((_QWORD *)v3 - 39) = &off_24EC715B8;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 37);
      if (!v9)
        goto LABEL_15;
    }
    else
    {
LABEL_9:
      *((_QWORD *)v3 - 39) = &off_24EC715B8;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 37);
      if (!v9)
        goto LABEL_15;
    }
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_15:
    *((_QWORD *)v3 - 42) = &off_24EC715B8;
    v12 = (std::__shared_weak_count *)*((_QWORD *)v3 - 40);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v3 -= 344;
  }
  while (v5 != v2);
  v4 = *a1;
LABEL_21:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

void **sub_223312290(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 288;
      do
      {
        v7 = *(void **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)(v5 + 8) = v7;
          operator delete(v7);
        }
        v6 = (void *)(v5 - 8);
        v5 -= 296;
      }
      while (v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char **sub_223312308@<X0>(char **result@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t v3;
  int64x2_t *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int64x2_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int64x2_t v70;
  char *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  char *v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  __int128 v110;
  char *v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  char *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  char *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char *v137;
  char *v138;
  char *v139;
  void *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  void *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  void *v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  char *v183;
  char *v184;
  char *v185;
  void *v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  char *v197;
  unint64_t v198;
  char *v199;
  unint64_t v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  char *v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  char *v219;
  __int128 v220;
  char *v221;
  _OWORD *v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  char *v226;
  char *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  char *v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  char *v249;
  char *v250;
  std::__shared_weak_count *v251;
  unint64_t *p_shared_owners;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  char *v260;
  char *v261;
  unint64_t v262;
  unint64_t v263;
  BOOL v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  char *v319;
  char *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t v330;
  char *v331;
  uint64_t v332;
  char *v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  char *v340;
  unint64_t v341;
  char *v342;
  unint64_t v343;
  char *v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  char *v350;
  __int128 v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  char *v362;
  __int128 v363;
  char *v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  char *v368;
  char *v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  char *v373;
  char *v374;
  uint64_t v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  char *v382;
  char *v383;
  char *v384;
  char *v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  char *v390;
  char *v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  char *v398;
  char *v399;
  unint64_t v400;
  unint64_t v401;
  BOOL v402;
  unint64_t v403;
  char *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  char *v409;
  char *v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  std::__shared_weak_count *v414;
  unint64_t *v415;
  unint64_t v416;
  unint64_t v417;
  char *v418;
  char *v419;
  std::__shared_weak_count *v420;
  unint64_t *v421;
  unint64_t v422;
  std::__shared_weak_count *v423;
  unint64_t *v424;
  unint64_t v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  uint64_t v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  char *v448;
  char *v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  uint64_t *v456;
  int64x2_t *v457;
  uint64_t *v458;
  char **v459;
  _OWORD v460[2];
  int64x2_t *v461;

  v3 = (unint64_t)result[5];
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  a2[1].i64[0] = 0;
  v4 = a2 + 1;
  v459 = result;
  if (v3)
  {
    if (v3 > 0x111111111111111)
      sub_22316E078();
    v461 = a2 + 1;
    v5 = (char *)operator new(240 * v3);
    a2->i64[0] = (uint64_t)v5;
    a2->i64[1] = (uint64_t)v5;
    a2[1].i64[0] = (uint64_t)&v5[240 * v3];
    memset(v460, 0, sizeof(v460));
    sub_223315A78((uint64_t)v460);
    result = v459;
    if (v459[5])
    {
      v6 = 0;
      v7 = (char *)a2->i64[1];
      do
      {
        while (1)
        {
          v15 = *result;
          v16 = (unint64_t)&v6[(_QWORD)result[3]] % (0xEEEEEEEEEEEEEEEFLL * ((result[1] - *result) >> 4));
          v17 = &(*result)[240 * v16];
          if ((unint64_t)v7 >= v4->i64[0])
            break;
          v8 = &v15[240 * v16];
          *(_QWORD *)v7 = *(_QWORD *)v17;
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *((_QWORD *)v7 + 3) = 0;
          *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
          *((_QWORD *)v7 + 3) = *((_QWORD *)v8 + 3);
          *((_QWORD *)v8 + 1) = 0;
          *((_QWORD *)v8 + 2) = 0;
          *((_QWORD *)v8 + 3) = 0;
          *((_QWORD *)v7 + 4) = 0;
          *((_QWORD *)v7 + 5) = 0;
          *((_QWORD *)v7 + 6) = 0;
          *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
          *((_QWORD *)v7 + 6) = *((_QWORD *)v8 + 6);
          *((_QWORD *)v8 + 4) = 0;
          *((_QWORD *)v8 + 5) = 0;
          *((_QWORD *)v8 + 6) = 0;
          *((_QWORD *)v7 + 7) = 0;
          *((_QWORD *)v7 + 8) = 0;
          *((_QWORD *)v7 + 9) = 0;
          *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
          *((_QWORD *)v7 + 9) = *((_QWORD *)v8 + 9);
          *((_QWORD *)v8 + 7) = 0;
          *((_QWORD *)v8 + 8) = 0;
          *((_QWORD *)v8 + 9) = 0;
          *((_QWORD *)v7 + 10) = 0;
          *((_QWORD *)v7 + 11) = 0;
          *((_QWORD *)v7 + 12) = 0;
          *((_OWORD *)v7 + 5) = *((_OWORD *)v8 + 5);
          *((_QWORD *)v7 + 12) = *((_QWORD *)v8 + 12);
          *((_QWORD *)v8 + 10) = 0;
          *((_QWORD *)v8 + 11) = 0;
          *((_QWORD *)v8 + 12) = 0;
          *((_DWORD *)v7 + 26) = *((_DWORD *)v8 + 26);
          v9 = *((_OWORD *)v8 + 7);
          v10 = *((_OWORD *)v8 + 8);
          v11 = *((_OWORD *)v8 + 10);
          *((_OWORD *)v7 + 9) = *((_OWORD *)v8 + 9);
          *((_OWORD *)v7 + 10) = v11;
          *((_OWORD *)v7 + 7) = v9;
          *((_OWORD *)v7 + 8) = v10;
          v12 = *((_OWORD *)v8 + 11);
          v13 = *((_OWORD *)v8 + 12);
          v14 = *((_OWORD *)v8 + 14);
          *((_OWORD *)v7 + 13) = *((_OWORD *)v8 + 13);
          *((_OWORD *)v7 + 14) = v14;
          *((_OWORD *)v7 + 11) = v12;
          *((_OWORD *)v7 + 12) = v13;
          v7 += 240;
          a2->i64[1] = (uint64_t)v7;
          if (++v6 == result[5])
            goto LABEL_23;
        }
        v18 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-a2->i64[0]] >> 4);
        v19 = v18 + 1;
        if (v18 + 1 > 0x111111111111111)
          sub_22316E078();
        if (0xDDDDDDDDDDDDDDDELL * ((v4->i64[0] - a2->i64[0]) >> 4) > v19)
          v19 = 0xDDDDDDDDDDDDDDDELL * ((v4->i64[0] - a2->i64[0]) >> 4);
        if (0xEEEEEEEEEEEEEEEFLL * ((v4->i64[0] - a2->i64[0]) >> 4) >= 0x88888888888888)
          v20 = 0x111111111111111;
        else
          v20 = v19;
        v461 = v4;
        if (v20)
        {
          if (v20 > 0x111111111111111)
            sub_223174E94();
          v21 = (char *)operator new(240 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[240 * v18];
        *(_QWORD *)&v460[0] = v21;
        *((_QWORD *)&v460[0] + 1) = v22;
        v23 = &v21[240 * v20];
        *((_QWORD *)&v460[1] + 1) = v23;
        *(_QWORD *)v22 = *(_QWORD *)v17;
        v24 = &v15[240 * v16];
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = 0;
        *(_OWORD *)(v22 + 8) = *(_OWORD *)(v24 + 8);
        *((_QWORD *)v22 + 3) = *((_QWORD *)v24 + 3);
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        *((_QWORD *)v24 + 3) = 0;
        *((_QWORD *)v22 + 5) = 0;
        *((_QWORD *)v22 + 6) = 0;
        *((_OWORD *)v22 + 2) = *((_OWORD *)v24 + 2);
        *((_QWORD *)v22 + 6) = *((_QWORD *)v24 + 6);
        *((_QWORD *)v24 + 4) = 0;
        *((_QWORD *)v24 + 5) = 0;
        *((_QWORD *)v24 + 6) = 0;
        *((_QWORD *)v22 + 8) = 0;
        *((_QWORD *)v22 + 9) = 0;
        *(_OWORD *)(v22 + 56) = *(_OWORD *)(v24 + 56);
        *((_QWORD *)v22 + 9) = *((_QWORD *)v24 + 9);
        *((_QWORD *)v24 + 7) = 0;
        *((_QWORD *)v24 + 8) = 0;
        *((_QWORD *)v24 + 9) = 0;
        *((_QWORD *)v22 + 11) = 0;
        *((_QWORD *)v22 + 12) = 0;
        *((_OWORD *)v22 + 5) = *((_OWORD *)v24 + 5);
        *((_QWORD *)v22 + 12) = *((_QWORD *)v24 + 12);
        *((_QWORD *)v24 + 10) = 0;
        *((_QWORD *)v24 + 11) = 0;
        *((_QWORD *)v24 + 12) = 0;
        *((_DWORD *)v22 + 26) = *((_DWORD *)v24 + 26);
        v25 = *((_OWORD *)v24 + 7);
        v26 = *((_OWORD *)v24 + 8);
        v27 = *((_OWORD *)v24 + 10);
        *((_OWORD *)v22 + 9) = *((_OWORD *)v24 + 9);
        *((_OWORD *)v22 + 10) = v27;
        *((_OWORD *)v22 + 7) = v25;
        *((_OWORD *)v22 + 8) = v26;
        v28 = *((_OWORD *)v24 + 11);
        v29 = *((_OWORD *)v24 + 12);
        v30 = *((_OWORD *)v24 + 14);
        *((_OWORD *)v22 + 13) = *((_OWORD *)v24 + 13);
        *((_OWORD *)v22 + 14) = v30;
        *((_OWORD *)v22 + 11) = v28;
        *((_OWORD *)v22 + 12) = v29;
        v7 = v22 + 240;
        *(_QWORD *)&v460[1] = v22 + 240;
        v32 = a2->i64[0];
        v31 = a2->u64[1];
        if (v31 == a2->i64[0])
        {
          v42 = vdupq_n_s64(v31);
        }
        else
        {
          v33 = 0;
          do
          {
            v34 = &v22[v33];
            v35 = v31 + v33;
            *((_QWORD *)v34 - 30) = *(_QWORD *)(v31 + v33 - 240);
            *((_QWORD *)v34 - 29) = 0;
            *((_QWORD *)v34 - 28) = 0;
            *((_QWORD *)v34 - 27) = 0;
            *(_OWORD *)(v34 - 232) = *(_OWORD *)(v31 + v33 - 232);
            *((_QWORD *)v34 - 27) = *(_QWORD *)(v31 + v33 - 216);
            *(_QWORD *)(v35 - 232) = 0;
            *(_QWORD *)(v35 - 224) = 0;
            *(_QWORD *)(v35 - 216) = 0;
            *((_QWORD *)v34 - 26) = 0;
            *((_QWORD *)v34 - 25) = 0;
            *((_QWORD *)v34 - 24) = 0;
            *((_OWORD *)v34 - 13) = *(_OWORD *)(v31 + v33 - 208);
            *((_QWORD *)v34 - 24) = *(_QWORD *)(v31 + v33 - 192);
            *(_QWORD *)(v35 - 208) = 0;
            *(_QWORD *)(v35 - 200) = 0;
            *(_QWORD *)(v35 - 192) = 0;
            *((_QWORD *)v34 - 23) = 0;
            *((_QWORD *)v34 - 22) = 0;
            *((_QWORD *)v34 - 21) = 0;
            *(_OWORD *)(v34 - 184) = *(_OWORD *)(v31 + v33 - 184);
            *((_QWORD *)v34 - 21) = *(_QWORD *)(v31 + v33 - 168);
            *(_QWORD *)(v35 - 184) = 0;
            *(_QWORD *)(v35 - 176) = 0;
            *(_QWORD *)(v35 - 168) = 0;
            *((_QWORD *)v34 - 20) = 0;
            *((_QWORD *)v34 - 19) = 0;
            *((_QWORD *)v34 - 18) = 0;
            *((_OWORD *)v34 - 10) = *(_OWORD *)(v31 + v33 - 160);
            *((_QWORD *)v34 - 18) = *(_QWORD *)(v31 + v33 - 144);
            *(_QWORD *)(v35 - 160) = 0;
            *(_QWORD *)(v35 - 152) = 0;
            *(_QWORD *)(v35 - 144) = 0;
            *((_DWORD *)v34 - 34) = *(_DWORD *)(v31 + v33 - 136);
            v36 = *(_OWORD *)(v31 + v33 - 128);
            v37 = *(_OWORD *)(v31 + v33 - 112);
            v38 = *(_OWORD *)(v31 + v33 - 80);
            *((_OWORD *)v34 - 6) = *(_OWORD *)(v31 + v33 - 96);
            *((_OWORD *)v34 - 5) = v38;
            *((_OWORD *)v34 - 8) = v36;
            *((_OWORD *)v34 - 7) = v37;
            v39 = *(_OWORD *)(v31 + v33 - 64);
            v40 = *(_OWORD *)(v31 + v33 - 48);
            v41 = *(_OWORD *)(v31 + v33 - 16);
            *((_OWORD *)v34 - 2) = *(_OWORD *)(v31 + v33 - 32);
            *((_OWORD *)v34 - 1) = v41;
            *((_OWORD *)v34 - 4) = v39;
            *((_OWORD *)v34 - 3) = v40;
            v33 -= 240;
          }
          while (v31 + v33 != v32);
          v42 = *a2;
          v22 += v33;
          v23 = (char *)*((_QWORD *)&v460[1] + 1);
          v7 = *(char **)&v460[1];
        }
        a2->i64[0] = (uint64_t)v22;
        a2->i64[1] = (uint64_t)v7;
        *(int64x2_t *)((char *)v460 + 8) = v42;
        v43 = a2[1].i64[0];
        a2[1].i64[0] = (uint64_t)v23;
        *((_QWORD *)&v460[1] + 1) = v43;
        *(_QWORD *)&v460[0] = v42.i64[0];
        sub_223315A78((uint64_t)v460);
        result = v459;
        a2->i64[1] = (uint64_t)v7;
        ++v6;
      }
      while (v6 != v459[5]);
    }
  }
LABEL_23:
  v44 = *result;
  v45 = result[1];
  v46 = v45 - *result;
  if (v45 != *result)
  {
    do
    {
      v47 = (void *)*((_QWORD *)v45 - 20);
      if (v47)
      {
        *((_QWORD *)v45 - 19) = v47;
        operator delete(v47);
      }
      v48 = (void *)*((_QWORD *)v45 - 23);
      if (v48)
      {
        *((_QWORD *)v45 - 22) = v48;
        operator delete(v48);
      }
      v49 = (void *)*((_QWORD *)v45 - 26);
      if (v49)
      {
        *((_QWORD *)v45 - 25) = v49;
        operator delete(v49);
      }
      v50 = (void *)*((_QWORD *)v45 - 29);
      if (v50)
      {
        *((_QWORD *)v45 - 28) = v50;
        operator delete(v50);
      }
      v45 -= 240;
    }
    while (v45 != v44);
    result = v459;
    v45 = *v459;
  }
  v51 = 0xEEEEEEEEEEEEEEEFLL * (v46 >> 4);
  result[1] = v44;
  v52 = 0xEEEEEEEEEEEEEEEFLL * ((v44 - v45) >> 4);
  v53 = v51 - v52;
  if (v51 <= v52)
  {
    if (v51 < v52)
    {
      v71 = &v45[240 * v51];
      while (v44 != v71)
      {
        v72 = (void *)*((_QWORD *)v44 - 20);
        if (v72)
        {
          *((_QWORD *)v44 - 19) = v72;
          operator delete(v72);
        }
        v73 = (void *)*((_QWORD *)v44 - 23);
        if (v73)
        {
          *((_QWORD *)v44 - 22) = v73;
          operator delete(v73);
        }
        v74 = (void *)*((_QWORD *)v44 - 26);
        if (v74)
        {
          *((_QWORD *)v44 - 25) = v74;
          operator delete(v74);
        }
        v75 = (void *)*((_QWORD *)v44 - 29);
        if (v75)
        {
          *((_QWORD *)v44 - 28) = v75;
          operator delete(v75);
        }
        v44 -= 240;
      }
      result = v459;
      v459[1] = v71;
    }
  }
  else
  {
    v54 = result[2];
    if (0xEEEEEEEEEEEEEEEFLL * ((v54 - v44) >> 4) >= v53)
    {
      v76 = &v44[240 * v53];
      do
      {
        *((_OWORD *)v44 + 4) = 0uLL;
        *((_OWORD *)v44 + 5) = 0uLL;
        *((_OWORD *)v44 + 2) = 0uLL;
        *((_OWORD *)v44 + 3) = 0uLL;
        *(_OWORD *)v44 = 0uLL;
        *((_OWORD *)v44 + 1) = 0uLL;
        *((_OWORD *)v44 + 12) = unk_2245D23E8;
        *((_OWORD *)v44 + 13) = xmmword_2245D23F8;
        *((_OWORD *)v44 + 14) = unk_2245D2408;
        *((_OWORD *)v44 + 6) = 0uLL;
        *((_OWORD *)v44 + 7) = xmmword_2245D2398;
        *((_OWORD *)v44 + 8) = unk_2245D23A8;
        *((_OWORD *)v44 + 9) = xmmword_2245D23B8;
        *((_OWORD *)v44 + 10) = unk_2245D23C8;
        *((_OWORD *)v44 + 11) = xmmword_2245D23D8;
        v44 += 240;
      }
      while (v44 != v76);
      result[1] = v76;
    }
    else
    {
      if (v51 > 0x111111111111111)
        sub_22316E078();
      v55 = 0xDDDDDDDDDDDDDDDELL * ((v54 - v45) >> 4);
      if (v55 <= v51)
        v55 = v51;
      if (0xEEEEEEEEEEEEEEEFLL * ((v54 - v45) >> 4) >= 0x88888888888888)
        v56 = 0x111111111111111;
      else
        v56 = v55;
      v461 = (int64x2_t *)(result + 2);
      if (v56 > 0x111111111111111)
        sub_223174E94();
      v57 = (char *)operator new(240 * v56);
      v58 = &v57[16 * ((v44 - v45) >> 4)];
      *(_QWORD *)&v460[0] = v57;
      *((_QWORD *)&v460[0] + 1) = v58;
      *((_QWORD *)&v460[1] + 1) = &v57[240 * v56];
      v59 = &v57[240 * v51];
      v60 = v58;
      do
      {
        *((_OWORD *)v60 + 4) = 0uLL;
        *((_OWORD *)v60 + 5) = 0uLL;
        *((_OWORD *)v60 + 2) = 0uLL;
        *((_OWORD *)v60 + 3) = 0uLL;
        *(_OWORD *)v60 = 0uLL;
        *((_OWORD *)v60 + 1) = 0uLL;
        *((_OWORD *)v60 + 12) = unk_2245D23E8;
        *((_OWORD *)v60 + 13) = xmmword_2245D23F8;
        *((_OWORD *)v60 + 14) = unk_2245D2408;
        *((_OWORD *)v60 + 6) = 0uLL;
        *((_OWORD *)v60 + 7) = xmmword_2245D2398;
        *((_OWORD *)v60 + 8) = unk_2245D23A8;
        *((_OWORD *)v60 + 9) = xmmword_2245D23B8;
        *((_OWORD *)v60 + 10) = unk_2245D23C8;
        *((_OWORD *)v60 + 11) = xmmword_2245D23D8;
        v60 += 240;
      }
      while (v60 != v59);
      if (v44 == v45)
      {
        v70 = vdupq_n_s64((unint64_t)v44);
      }
      else
      {
        v61 = 0;
        do
        {
          v62 = &v58[v61];
          v63 = &v44[v61];
          *((_QWORD *)v62 - 30) = *(_QWORD *)&v44[v61 - 240];
          *(_OWORD *)(v62 - 232) = *(_OWORD *)&v44[v61 - 232];
          *((_QWORD *)v62 - 27) = *(_QWORD *)&v44[v61 - 216];
          *((_QWORD *)v63 - 29) = 0;
          *((_QWORD *)v63 - 28) = 0;
          *((_QWORD *)v63 - 27) = 0;
          *((_OWORD *)v62 - 13) = *(_OWORD *)&v44[v61 - 208];
          *((_QWORD *)v62 - 24) = *(_QWORD *)&v44[v61 - 192];
          *((_QWORD *)v63 - 26) = 0;
          *((_QWORD *)v63 - 25) = 0;
          *((_QWORD *)v63 - 24) = 0;
          *(_OWORD *)(v62 - 184) = *(_OWORD *)&v44[v61 - 184];
          *((_QWORD *)v62 - 21) = *(_QWORD *)&v44[v61 - 168];
          *((_QWORD *)v63 - 23) = 0;
          *((_QWORD *)v63 - 22) = 0;
          *((_QWORD *)v63 - 21) = 0;
          *((_OWORD *)v62 - 10) = *(_OWORD *)&v44[v61 - 160];
          *((_QWORD *)v62 - 18) = *(_QWORD *)&v44[v61 - 144];
          *((_QWORD *)v63 - 20) = 0;
          *((_QWORD *)v63 - 19) = 0;
          *((_QWORD *)v63 - 18) = 0;
          *((_DWORD *)v62 - 34) = *(_DWORD *)&v44[v61 - 136];
          v64 = *(_OWORD *)&v44[v61 - 128];
          v65 = *(_OWORD *)&v44[v61 - 112];
          v66 = *(_OWORD *)&v44[v61 - 80];
          *((_OWORD *)v62 - 6) = *(_OWORD *)&v44[v61 - 96];
          *((_OWORD *)v62 - 5) = v66;
          *((_OWORD *)v62 - 8) = v64;
          *((_OWORD *)v62 - 7) = v65;
          v67 = *(_OWORD *)&v44[v61 - 64];
          v68 = *(_OWORD *)&v44[v61 - 48];
          v69 = *(_OWORD *)&v44[v61 - 16];
          *((_OWORD *)v62 - 2) = *(_OWORD *)&v44[v61 - 32];
          *((_OWORD *)v62 - 1) = v69;
          *((_OWORD *)v62 - 4) = v67;
          *((_OWORD *)v62 - 3) = v68;
          v61 -= 240;
        }
        while (&v44[v61] != v45);
        v70 = *(int64x2_t *)v459;
        v54 = v459[2];
        v58 += v61;
      }
      *v459 = v58;
      v459[1] = v59;
      *(int64x2_t *)((char *)v460 + 8) = v70;
      v459[2] = &v57[240 * v56];
      *((_QWORD *)&v460[1] + 1) = v54;
      *(_QWORD *)&v460[0] = v70.i64[0];
      sub_223315A78((uint64_t)v460);
      result = v459;
    }
  }
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  a2[1].i64[1] = 0;
  v77 = (unint64_t)result[11];
  a2[2].i64[0] = 0;
  a2[2].i64[1] = 0;
  v458 = &a2[1].i64[1];
  if (v77)
  {
    if (v77 > 0xDD67C8A60DD67CLL)
      sub_22316E078();
    v78 = (char *)operator new(296 * v77);
    v79 = 0;
    a2[1].i64[1] = (uint64_t)v78;
    a2[2].i64[0] = (uint64_t)v78;
    a2[2].i64[1] = (uint64_t)&v78[296 * v77];
    result = v459;
    do
    {
      while (1)
      {
        v87 = result[6];
        v88 = (unint64_t)&v79[(_QWORD)result[9]] % (0x14C1BACF914C1BADLL * ((result[7] - v87) >> 3));
        v89 = &v87[296 * v88];
        v90 = a2[2].u64[1];
        if ((unint64_t)v78 >= v90)
          break;
        v91 = &v87[296 * v88];
        *(_QWORD *)v78 = *(_QWORD *)v89;
        *((_QWORD *)v78 + 1) = 0;
        *((_QWORD *)v78 + 2) = 0;
        *((_QWORD *)v78 + 3) = 0;
        *(_OWORD *)(v78 + 8) = *(_OWORD *)(v91 + 8);
        *((_QWORD *)v78 + 3) = *((_QWORD *)v91 + 3);
        *((_QWORD *)v91 + 1) = 0;
        *((_QWORD *)v91 + 2) = 0;
        *((_QWORD *)v91 + 3) = 0;
        *((_QWORD *)v78 + 4) = *((_QWORD *)v91 + 4);
        v92 = *(_OWORD *)(v91 + 56);
        v93 = *(_OWORD *)(v91 + 72);
        v94 = *(_OWORD *)(v91 + 88);
        v95 = *((_QWORD *)v91 + 13);
        v96 = *(_OWORD *)(v91 + 40);
        v78[112] = 0;
        *(_OWORD *)(v78 + 40) = v96;
        *((_QWORD *)v78 + 13) = v95;
        *(_OWORD *)(v78 + 88) = v94;
        *(_OWORD *)(v78 + 72) = v93;
        *(_OWORD *)(v78 + 56) = v92;
        v78[160] = 0;
        if (v91[160])
        {
          v97 = &v87[296 * v88];
          v98 = *((_OWORD *)v97 + 8);
          *((_OWORD *)v78 + 7) = *((_OWORD *)v97 + 7);
          *((_OWORD *)v78 + 8) = v98;
          *((_OWORD *)v78 + 9) = *((_OWORD *)v97 + 9);
          v78[160] = 1;
        }
        v80 = &v87[296 * v88];
        v81 = *(_OWORD *)(v80 + 168);
        v82 = *(_OWORD *)(v80 + 184);
        v83 = *(_OWORD *)(v80 + 200);
        *(_OWORD *)(v78 + 216) = *(_OWORD *)(v80 + 216);
        *(_OWORD *)(v78 + 200) = v83;
        *(_OWORD *)(v78 + 184) = v82;
        *(_OWORD *)(v78 + 168) = v81;
        v84 = *(_OWORD *)(v80 + 232);
        v85 = *(_OWORD *)(v80 + 248);
        v86 = *(_OWORD *)(v80 + 280);
        *(_OWORD *)(v78 + 264) = *(_OWORD *)(v80 + 264);
        *(_OWORD *)(v78 + 280) = v86;
        *(_OWORD *)(v78 + 248) = v85;
        *(_OWORD *)(v78 + 232) = v84;
        v78 += 296;
        a2[2].i64[0] = (uint64_t)v78;
        if (++v79 == result[11])
          goto LABEL_101;
      }
      v99 = 0x14C1BACF914C1BADLL * ((uint64_t)&v78[-*v458] >> 3);
      v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) > 0xDD67C8A60DD67CLL)
        sub_22316E078();
      v101 = 0x14C1BACF914C1BADLL * ((uint64_t)(v90 - *v458) >> 3);
      if (2 * v101 > v100)
        v100 = 2 * v101;
      if (v101 >= 0x6EB3E45306EB3ELL)
        v102 = 0xDD67C8A60DD67CLL;
      else
        v102 = v100;
      if (v102)
      {
        if (v102 > 0xDD67C8A60DD67CLL)
          sub_223174E94();
        v103 = (char *)operator new(296 * v102);
      }
      else
      {
        v103 = 0;
      }
      v104 = &v103[296 * v99];
      *(_QWORD *)v104 = *(_QWORD *)v89;
      v105 = &v87[296 * v88];
      *((_QWORD *)v104 + 2) = 0;
      *((_QWORD *)v104 + 3) = 0;
      *(_OWORD *)(v104 + 8) = *(_OWORD *)(v105 + 8);
      *((_QWORD *)v104 + 3) = *((_QWORD *)v105 + 3);
      *((_QWORD *)v105 + 1) = 0;
      *((_QWORD *)v105 + 2) = 0;
      *((_QWORD *)v105 + 3) = 0;
      *((_QWORD *)v104 + 4) = *((_QWORD *)v105 + 4);
      *(_OWORD *)(v104 + 40) = *(_OWORD *)(v105 + 40);
      v106 = *(_OWORD *)(v105 + 56);
      v107 = *(_OWORD *)(v105 + 72);
      v108 = *(_OWORD *)(v105 + 88);
      *((_QWORD *)v104 + 13) = *((_QWORD *)v105 + 13);
      *(_OWORD *)(v104 + 88) = v108;
      *(_OWORD *)(v104 + 72) = v107;
      *(_OWORD *)(v104 + 56) = v106;
      v104[112] = 0;
      v104[160] = 0;
      if (v105[160])
      {
        v109 = &v87[296 * v88];
        v110 = *((_OWORD *)v109 + 8);
        *((_OWORD *)v104 + 7) = *((_OWORD *)v109 + 7);
        *((_OWORD *)v104 + 8) = v110;
        *(_OWORD *)&v103[296 * v99 + 144] = *((_OWORD *)v109 + 9);
        v104[160] = 1;
      }
      v111 = &v87[296 * v88];
      v112 = *(_OWORD *)(v111 + 168);
      v113 = *(_OWORD *)(v111 + 184);
      v114 = *(_OWORD *)(v111 + 200);
      v115 = &v103[296 * v99];
      *(_OWORD *)(v115 + 216) = *(_OWORD *)(v111 + 216);
      *(_OWORD *)(v115 + 200) = v114;
      v116 = &v103[296 * v102];
      *(_OWORD *)(v115 + 184) = v113;
      *(_OWORD *)(v115 + 168) = v112;
      v117 = *(_OWORD *)(v111 + 232);
      v118 = *(_OWORD *)(v111 + 248);
      v119 = *(_OWORD *)(v111 + 280);
      *(_OWORD *)(v115 + 264) = *(_OWORD *)(v111 + 264);
      *(_OWORD *)(v115 + 280) = v119;
      *(_OWORD *)(v115 + 248) = v118;
      *(_OWORD *)(v115 + 232) = v117;
      v78 = v104 + 296;
      v120 = (char *)a2[1].i64[1];
      v121 = (char *)a2[2].i64[0];
      if (v121 == v120)
      {
        a2[1].i64[1] = (uint64_t)v104;
        a2[2].i64[0] = (uint64_t)v78;
        a2[2].i64[1] = (uint64_t)v116;
      }
      else
      {
        v122 = 0;
        do
        {
          v129 = &v104[v122];
          v130 = &v121[v122];
          *(_QWORD *)&v104[v122 - 296] = *(_QWORD *)&v121[v122 - 296];
          v131 = (uint64_t)&v121[v122 - 288];
          v132 = &v104[v122 - 272];
          *(_QWORD *)v132 = 0;
          *(_QWORD *)&v104[v122 - 280] = 0;
          *(_OWORD *)&v104[v122 - 288] = *(_OWORD *)v131;
          *(_QWORD *)v132 = *(_QWORD *)&v121[v122 - 272];
          *(_QWORD *)&v121[v122 - 280] = 0;
          *(_QWORD *)v131 = 0;
          *(_QWORD *)(v131 + 16) = 0;
          *(_QWORD *)&v104[v122 - 264] = *(_QWORD *)&v121[v122 - 264];
          *((_OWORD *)v129 - 16) = *(_OWORD *)&v121[v122 - 256];
          v133 = *(_OWORD *)&v121[v122 - 240];
          v134 = *(_OWORD *)&v121[v122 - 224];
          v135 = *(_OWORD *)&v121[v122 - 208];
          *((_QWORD *)v129 - 24) = *(_QWORD *)&v121[v122 - 192];
          *((_OWORD *)v129 - 14) = v134;
          *((_OWORD *)v129 - 13) = v135;
          *((_OWORD *)v129 - 15) = v133;
          v104[v122 - 184] = 0;
          *(v129 - 136) = 0;
          if (v121[v122 - 136])
          {
            v136 = *(_OWORD *)(v130 - 168);
            *(_OWORD *)&v104[v122 - 184] = *(_OWORD *)(v130 - 184);
            *(_OWORD *)&v104[v122 - 168] = v136;
            *(_OWORD *)(v129 - 152) = *(_OWORD *)(v130 - 152);
            *(v129 - 136) = 1;
          }
          v123 = *((_OWORD *)v130 - 8);
          v124 = *((_OWORD *)v130 - 7);
          v125 = *((_OWORD *)v130 - 5);
          *((_OWORD *)v129 - 6) = *((_OWORD *)v130 - 6);
          *((_OWORD *)v129 - 5) = v125;
          *((_OWORD *)v129 - 8) = v123;
          *((_OWORD *)v129 - 7) = v124;
          v126 = *((_OWORD *)v130 - 4);
          v127 = *((_OWORD *)v130 - 3);
          v128 = *((_OWORD *)v130 - 1);
          *((_OWORD *)v129 - 2) = *((_OWORD *)v130 - 2);
          *((_OWORD *)v129 - 1) = v128;
          *((_OWORD *)v129 - 4) = v126;
          *((_OWORD *)v129 - 3) = v127;
          v122 -= 296;
        }
        while (&v121[v122] != v120);
        v121 = (char *)a2[1].i64[1];
        v137 = (char *)a2[2].i64[0];
        a2[1].i64[1] = (uint64_t)&v104[v122];
        a2[2].i64[0] = (uint64_t)v78;
        a2[2].i64[1] = (uint64_t)v116;
        if (v137 != v121)
        {
          v138 = v137 - 288;
          do
          {
            v140 = *(void **)v138;
            if (*(_QWORD *)v138)
            {
              *((_QWORD *)v138 + 1) = v140;
              operator delete(v140);
            }
            v139 = v138 - 8;
            v138 -= 296;
          }
          while (v139 != v121);
        }
      }
      if (v121)
        operator delete(v121);
      result = v459;
      a2[2].i64[0] = (uint64_t)v78;
      ++v79;
    }
    while (v79 != v459[11]);
  }
LABEL_101:
  v142 = result[6];
  v141 = result[7];
  v143 = 0x14C1BACF914C1BADLL * ((v141 - v142) >> 3);
  if (v141 != v142)
  {
    v144 = v141 - 288;
    do
    {
      v146 = *(void **)v144;
      if (*(_QWORD *)v144)
      {
        *((_QWORD *)v144 + 1) = v146;
        operator delete(v146);
      }
      v145 = v144 - 8;
      v144 -= 296;
    }
    while (v145 != v142);
    result = v459;
    v141 = v459[6];
  }
  result[7] = v142;
  v147 = 0x14C1BACF914C1BADLL * ((v142 - v141) >> 3);
  v148 = v143 - v147;
  if (v143 <= v147)
  {
    if (v143 < v147)
    {
      v155 = &v141[296 * v143];
      if (v142 != v155)
      {
        v156 = v142 - 288;
        do
        {
          v158 = *(void **)v156;
          if (*(_QWORD *)v156)
          {
            *((_QWORD *)v156 + 1) = v158;
            operator delete(v158);
          }
          v157 = v156 - 8;
          v156 -= 296;
        }
        while (v157 != v155);
      }
      result = v459;
      v459[7] = v155;
    }
    goto LABEL_144;
  }
  v149 = result[8];
  if (0x14C1BACF914C1BADLL * ((v149 - v142) >> 3) >= v148)
  {
    v159 = &v142[296 * v148];
    do
    {
      *((_QWORD *)v142 + 20) = 0;
      *((_OWORD *)v142 + 8) = 0uLL;
      *((_OWORD *)v142 + 9) = 0uLL;
      *((_OWORD *)v142 + 6) = 0uLL;
      *((_OWORD *)v142 + 7) = 0uLL;
      *((_OWORD *)v142 + 4) = 0uLL;
      *((_OWORD *)v142 + 5) = 0uLL;
      *((_OWORD *)v142 + 2) = 0uLL;
      *((_OWORD *)v142 + 3) = 0uLL;
      *(_OWORD *)v142 = 0uLL;
      *((_OWORD *)v142 + 1) = 0uLL;
      v160 = v142 + 168;
      *(_OWORD *)(v142 + 232) = xmmword_2245D23D8;
      *(_OWORD *)(v142 + 248) = unk_2245D23E8;
      *(_OWORD *)(v142 + 168) = xmmword_2245D2398;
      *(_OWORD *)(v142 + 184) = unk_2245D23A8;
      *(_OWORD *)(v142 + 200) = xmmword_2245D23B8;
      *(_OWORD *)(v142 + 216) = unk_2245D23C8;
      v142 += 296;
      *((_OWORD *)v160 + 6) = xmmword_2245D23F8;
      *((_OWORD *)v160 + 7) = unk_2245D2408;
    }
    while (v142 != v159);
    result[7] = v159;
    goto LABEL_144;
  }
  v150 = 0x14C1BACF914C1BADLL * ((v142 - v141) >> 3);
  if (v150 + v148 > 0xDD67C8A60DD67CLL)
    sub_22316E078();
  v151 = 0x14C1BACF914C1BADLL * ((v149 - v141) >> 3);
  v152 = 2 * v151;
  if (2 * v151 <= v150 + v148)
    v152 = v150 + v148;
  if (v151 >= 0x6EB3E45306EB3ELL)
    v153 = 0xDD67C8A60DD67CLL;
  else
    v153 = v152;
  if (v153)
  {
    if (v153 > 0xDD67C8A60DD67CLL)
      sub_223174E94();
    v154 = (char *)operator new(296 * v153);
  }
  else
  {
    v154 = 0;
  }
  v161 = &v154[296 * v150];
  v162 = &v161[296 * v148];
  v163 = v161;
  do
  {
    *((_QWORD *)v163 + 20) = 0;
    *((_OWORD *)v163 + 8) = 0uLL;
    *((_OWORD *)v163 + 9) = 0uLL;
    *((_OWORD *)v163 + 6) = 0uLL;
    *((_OWORD *)v163 + 7) = 0uLL;
    *((_OWORD *)v163 + 4) = 0uLL;
    *((_OWORD *)v163 + 5) = 0uLL;
    *((_OWORD *)v163 + 2) = 0uLL;
    *((_OWORD *)v163 + 3) = 0uLL;
    *(_OWORD *)v163 = 0uLL;
    *((_OWORD *)v163 + 1) = 0uLL;
    v164 = v163 + 168;
    *(_OWORD *)(v163 + 232) = xmmword_2245D23D8;
    *(_OWORD *)(v163 + 248) = unk_2245D23E8;
    *(_OWORD *)(v163 + 168) = xmmword_2245D2398;
    *(_OWORD *)(v163 + 184) = unk_2245D23A8;
    *(_OWORD *)(v163 + 200) = xmmword_2245D23B8;
    *(_OWORD *)(v163 + 216) = unk_2245D23C8;
    v163 += 296;
    *((_OWORD *)v164 + 6) = xmmword_2245D23F8;
    *((_OWORD *)v164 + 7) = unk_2245D2408;
  }
  while (v163 != v162);
  v165 = &v154[296 * v153];
  result = v459;
  v166 = v459[6];
  v167 = v459[7];
  if (v167 == v166)
  {
    v459[6] = v161;
    v459[7] = v162;
    v459[8] = v165;
    if (!v167)
      goto LABEL_144;
  }
  else
  {
    v168 = 0;
    do
    {
      v175 = &v161[v168];
      v176 = &v167[v168];
      *(_QWORD *)&v161[v168 - 296] = *(_QWORD *)&v167[v168 - 296];
      v177 = &v161[v168 - 288];
      v178 = (uint64_t)&v167[v168 - 288];
      *((_QWORD *)v177 + 1) = 0;
      *((_QWORD *)v177 + 2) = 0;
      *(_QWORD *)v177 = 0;
      *(_OWORD *)v177 = *(_OWORD *)v178;
      *(_QWORD *)&v161[v168 - 272] = *(_QWORD *)&v167[v168 - 272];
      *(_QWORD *)&v167[v168 - 280] = 0;
      *(_QWORD *)v178 = 0;
      *(_QWORD *)(v178 + 16) = 0;
      *(_QWORD *)&v161[v168 - 264] = *(_QWORD *)&v167[v168 - 264];
      *((_OWORD *)v175 - 16) = *(_OWORD *)&v167[v168 - 256];
      v179 = *(_OWORD *)&v167[v168 - 240];
      v180 = *(_OWORD *)&v167[v168 - 224];
      v181 = *(_OWORD *)&v167[v168 - 208];
      *((_QWORD *)v175 - 24) = *(_QWORD *)&v167[v168 - 192];
      *((_OWORD *)v175 - 14) = v180;
      *((_OWORD *)v175 - 13) = v181;
      *((_OWORD *)v175 - 15) = v179;
      v161[v168 - 184] = 0;
      *(v175 - 136) = 0;
      if (v167[v168 - 136])
      {
        v182 = *(_OWORD *)(v176 - 168);
        *(_OWORD *)&v161[v168 - 184] = *(_OWORD *)(v176 - 184);
        *(_OWORD *)&v161[v168 - 168] = v182;
        *(_OWORD *)(v175 - 152) = *(_OWORD *)(v176 - 152);
        *(v175 - 136) = 1;
      }
      v169 = *((_OWORD *)v176 - 8);
      v170 = *((_OWORD *)v176 - 7);
      v171 = *((_OWORD *)v176 - 5);
      *((_OWORD *)v175 - 6) = *((_OWORD *)v176 - 6);
      *((_OWORD *)v175 - 5) = v171;
      *((_OWORD *)v175 - 8) = v169;
      *((_OWORD *)v175 - 7) = v170;
      v172 = *((_OWORD *)v176 - 4);
      v173 = *((_OWORD *)v176 - 3);
      v174 = *((_OWORD *)v176 - 1);
      *((_OWORD *)v175 - 2) = *((_OWORD *)v176 - 2);
      *((_OWORD *)v175 - 1) = v174;
      *((_OWORD *)v175 - 4) = v172;
      *((_OWORD *)v175 - 3) = v173;
      v168 -= 296;
    }
    while (&v167[v168] != v166);
    result = v459;
    v167 = v459[6];
    v183 = v459[7];
    v459[6] = &v161[v168];
    v459[7] = v162;
    v459[8] = v165;
    if (v183 != v167)
    {
      v184 = v183 - 288;
      do
      {
        v186 = *(void **)v184;
        if (*(_QWORD *)v184)
        {
          *((_QWORD *)v184 + 1) = v186;
          operator delete(v186);
        }
        v185 = v184 - 8;
        v184 -= 296;
      }
      while (v185 != v167);
      result = v459;
    }
    if (!v167)
      goto LABEL_144;
  }
  operator delete(v167);
  result = v459;
LABEL_144:
  result[9] = 0;
  result[10] = 0;
  a2[3].i64[0] = 0;
  result[11] = 0;
  v187 = (unint64_t)result[17];
  a2[3].i64[1] = 0;
  a2[4].i64[0] = 0;
  v457 = a2 + 3;
  if (v187)
  {
    if (v187 > 0xBE82FA0BE82FA0)
      sub_22316E078();
    v188 = (char *)operator new(344 * v187);
    v189 = 0;
    a2[3].i64[0] = (uint64_t)v188;
    a2[3].i64[1] = (uint64_t)v188;
    a2[4].i64[0] = (uint64_t)&v188[344 * v187];
    result = v459;
    while (1)
    {
      while (1)
      {
        v197 = result[12];
        v198 = (unint64_t)&result[15][v189] % (0x82FA0BE82FA0BE83 * ((result[13] - v197) >> 3));
        v199 = &v197[344 * v198];
        v200 = a2[4].u64[0];
        if ((unint64_t)v188 >= v200)
          break;
        *(_QWORD *)v188 = *(_QWORD *)v199;
        *((_QWORD *)v188 + 1) = &off_24EC715B8;
        v201 = &v197[344 * v198];
        *((_OWORD *)v188 + 1) = *((_OWORD *)v201 + 1);
        *((_QWORD *)v201 + 2) = 0;
        *((_QWORD *)v201 + 3) = 0;
        *((_QWORD *)v188 + 4) = &off_24EC715B8;
        *(_OWORD *)(v188 + 40) = *(_OWORD *)(v201 + 40);
        *((_QWORD *)v201 + 5) = 0;
        *((_QWORD *)v201 + 6) = 0;
        *((_QWORD *)v188 + 7) = &off_24EC715B8;
        *((_OWORD *)v188 + 4) = *((_OWORD *)v201 + 4);
        *((_QWORD *)v201 + 8) = 0;
        *((_QWORD *)v201 + 9) = 0;
        *((_QWORD *)v188 + 10) = *((_QWORD *)v201 + 10);
        v202 = *(_OWORD *)(v201 + 104);
        v203 = *(_OWORD *)(v201 + 120);
        v204 = *(_OWORD *)(v201 + 136);
        v205 = *((_QWORD *)v201 + 19);
        v206 = *(_OWORD *)(v201 + 88);
        v188[160] = 0;
        *(_OWORD *)(v188 + 88) = v206;
        *((_QWORD *)v188 + 19) = v205;
        *(_OWORD *)(v188 + 136) = v204;
        *(_OWORD *)(v188 + 120) = v203;
        *(_OWORD *)(v188 + 104) = v202;
        v188[208] = 0;
        if (v201[208])
        {
          v207 = &v197[344 * v198];
          v208 = *((_OWORD *)v207 + 11);
          *((_OWORD *)v188 + 10) = *((_OWORD *)v207 + 10);
          *((_OWORD *)v188 + 11) = v208;
          *((_OWORD *)v188 + 12) = *((_OWORD *)v207 + 12);
          v188[208] = 1;
        }
        v190 = &v197[344 * v198];
        v191 = *(_OWORD *)(v190 + 216);
        v192 = *(_OWORD *)(v190 + 232);
        v193 = *(_OWORD *)(v190 + 248);
        *(_OWORD *)(v188 + 264) = *(_OWORD *)(v190 + 264);
        *(_OWORD *)(v188 + 248) = v193;
        *(_OWORD *)(v188 + 232) = v192;
        *(_OWORD *)(v188 + 216) = v191;
        v194 = *(_OWORD *)(v190 + 280);
        v195 = *(_OWORD *)(v190 + 296);
        v196 = *(_OWORD *)(v190 + 328);
        *(_OWORD *)(v188 + 312) = *(_OWORD *)(v190 + 312);
        *(_OWORD *)(v188 + 328) = v196;
        *(_OWORD *)(v188 + 280) = v194;
        *(_OWORD *)(v188 + 296) = v195;
        v188 += 344;
        a2[3].i64[1] = (uint64_t)v188;
        if ((char *)++v189 == result[17])
          goto LABEL_190;
      }
      v209 = 0x82FA0BE82FA0BE83 * ((uint64_t)&v188[-v457->i64[0]] >> 3);
      v210 = v209 + 1;
      if (v209 + 1 > 0xBE82FA0BE82FA0)
        sub_22316E078();
      v211 = 0x82FA0BE82FA0BE83 * ((uint64_t)(v200 - v457->i64[0]) >> 3);
      if (2 * v211 > v210)
        v210 = 2 * v211;
      v212 = v211 >= 0x5F417D05F417D0 ? 0xBE82FA0BE82FA0 : v210;
      if (v212)
      {
        if (v212 > 0xBE82FA0BE82FA0)
          sub_223174E94();
        v213 = (char *)operator new(344 * v212);
      }
      else
      {
        v213 = 0;
      }
      v214 = &v213[344 * v209];
      *(_QWORD *)v214 = *(_QWORD *)v199;
      *((_QWORD *)v214 + 1) = &off_24EC715B8;
      v215 = &v197[344 * v198];
      *((_OWORD *)v214 + 1) = *((_OWORD *)v215 + 1);
      *((_QWORD *)v215 + 2) = 0;
      *((_QWORD *)v215 + 3) = 0;
      *((_QWORD *)v214 + 4) = &off_24EC715B8;
      *(_OWORD *)(v214 + 40) = *(_OWORD *)(v215 + 40);
      *((_QWORD *)v215 + 5) = 0;
      *((_QWORD *)v215 + 6) = 0;
      *((_QWORD *)v214 + 7) = &off_24EC715B8;
      *((_OWORD *)v214 + 4) = *((_OWORD *)v215 + 4);
      *((_QWORD *)v215 + 8) = 0;
      *((_QWORD *)v215 + 9) = 0;
      *((_QWORD *)v214 + 10) = *((_QWORD *)v215 + 10);
      *(_OWORD *)(v214 + 88) = *(_OWORD *)(v215 + 88);
      v216 = *(_OWORD *)(v215 + 104);
      v217 = *(_OWORD *)(v215 + 120);
      v218 = *(_OWORD *)(v215 + 136);
      *((_QWORD *)v214 + 19) = *((_QWORD *)v215 + 19);
      *(_OWORD *)(v214 + 136) = v218;
      *(_OWORD *)(v214 + 120) = v217;
      *(_OWORD *)(v214 + 104) = v216;
      v214[160] = 0;
      v214[208] = 0;
      if (v215[208])
      {
        v219 = &v197[344 * v198];
        v220 = *((_OWORD *)v219 + 11);
        *((_OWORD *)v214 + 10) = *((_OWORD *)v219 + 10);
        *((_OWORD *)v214 + 11) = v220;
        *(_OWORD *)&v213[344 * v209 + 192] = *((_OWORD *)v219 + 12);
        v214[208] = 1;
      }
      v221 = &v197[344 * v198];
      v222 = v221 + 216;
      v223 = *(_OWORD *)(v221 + 216);
      v224 = *(_OWORD *)(v221 + 232);
      v225 = *(_OWORD *)(v221 + 248);
      v226 = &v213[344 * v209];
      *(_OWORD *)(v226 + 264) = *(_OWORD *)(v221 + 264);
      *(_OWORD *)(v226 + 248) = v225;
      v227 = &v213[344 * v212];
      *(_OWORD *)(v226 + 232) = v224;
      *(_OWORD *)(v226 + 216) = v223;
      v228 = v222[4];
      v229 = v222[5];
      v230 = v222[7];
      *(_OWORD *)(v226 + 312) = v222[6];
      *(_OWORD *)(v226 + 328) = v230;
      *(_OWORD *)(v226 + 280) = v228;
      *(_OWORD *)(v226 + 296) = v229;
      v188 = v214 + 344;
      v231 = (char *)a2[3].i64[0];
      v232 = (char *)a2[3].i64[1];
      if (v232 != v231)
        break;
      a2[3].i64[0] = (uint64_t)v214;
      a2[3].i64[1] = (uint64_t)v188;
      a2[4].i64[0] = (uint64_t)v227;
LABEL_187:
      if (v232)
        operator delete(v232);
      result = v459;
      a2[3].i64[1] = (uint64_t)v188;
      if ((char *)++v189 == v459[17])
        goto LABEL_190;
    }
    v233 = 0;
    do
    {
      v240 = &v214[v233];
      v241 = &v232[v233];
      *(_QWORD *)&v214[v233 - 344] = *(_QWORD *)&v232[v233 - 344];
      *(_QWORD *)&v214[v233 - 336] = &off_24EC715B8;
      v242 = &v232[v233 - 328];
      *(_OWORD *)&v214[v233 - 328] = *(_OWORD *)v242;
      *(_QWORD *)&v232[v233 - 320] = 0;
      *(_QWORD *)v242 = 0;
      *(_QWORD *)&v214[v233 - 312] = &off_24EC715B8;
      v243 = &v232[v233 - 304];
      *(_OWORD *)&v214[v233 - 304] = *(_OWORD *)v243;
      *(_QWORD *)&v232[v233 - 296] = 0;
      *(_QWORD *)v243 = 0;
      *(_QWORD *)&v214[v233 - 288] = &off_24EC715B8;
      v244 = &v232[v233 - 280];
      *(_OWORD *)&v214[v233 - 280] = *(_OWORD *)v244;
      *(_QWORD *)&v232[v233 - 272] = 0;
      *(_QWORD *)v244 = 0;
      *(_QWORD *)&v214[v233 - 264] = *(_QWORD *)&v232[v233 - 264];
      *((_OWORD *)v240 - 16) = *(_OWORD *)&v232[v233 - 256];
      v245 = *(_OWORD *)&v232[v233 - 240];
      v246 = *(_OWORD *)&v232[v233 - 224];
      v247 = *(_OWORD *)&v232[v233 - 208];
      *((_QWORD *)v240 - 24) = *(_QWORD *)&v232[v233 - 192];
      *((_OWORD *)v240 - 14) = v246;
      *((_OWORD *)v240 - 13) = v247;
      *((_OWORD *)v240 - 15) = v245;
      v214[v233 - 184] = 0;
      *(v240 - 136) = 0;
      if (v232[v233 - 136])
      {
        v248 = *(_OWORD *)(v241 - 168);
        *(_OWORD *)&v214[v233 - 184] = *(_OWORD *)(v241 - 184);
        *(_OWORD *)&v214[v233 - 168] = v248;
        *(_OWORD *)(v240 - 152) = *(_OWORD *)(v241 - 152);
        *(v240 - 136) = 1;
      }
      v234 = *((_OWORD *)v241 - 8);
      v235 = *((_OWORD *)v241 - 7);
      v236 = *((_OWORD *)v241 - 5);
      *((_OWORD *)v240 - 6) = *((_OWORD *)v241 - 6);
      *((_OWORD *)v240 - 5) = v236;
      *((_OWORD *)v240 - 8) = v234;
      *((_OWORD *)v240 - 7) = v235;
      v237 = *((_OWORD *)v241 - 4);
      v238 = *((_OWORD *)v241 - 3);
      v239 = *((_OWORD *)v241 - 1);
      *((_OWORD *)v240 - 2) = *((_OWORD *)v241 - 2);
      *((_OWORD *)v240 - 1) = v239;
      *((_OWORD *)v240 - 4) = v237;
      *((_OWORD *)v240 - 3) = v238;
      v233 -= 344;
    }
    while (&v232[v233] != v231);
    v232 = (char *)a2[3].i64[0];
    v249 = (char *)a2[3].i64[1];
    a2[3].i64[0] = (uint64_t)&v214[v233];
    a2[3].i64[1] = (uint64_t)v188;
    a2[4].i64[0] = (uint64_t)v227;
    if (v249 == v232)
      goto LABEL_187;
    while (1)
    {
      v250 = v249 - 344;
      *((_QWORD *)v249 - 36) = &off_24EC715B8;
      v251 = (std::__shared_weak_count *)*((_QWORD *)v249 - 34);
      if (!v251)
        goto LABEL_175;
      p_shared_owners = (unint64_t *)&v251->__shared_owners_;
      do
        v253 = __ldaxr(p_shared_owners);
      while (__stlxr(v253 - 1, p_shared_owners));
      if (!v253)
      {
        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
        std::__shared_weak_count::__release_weak(v251);
        *((_QWORD *)v249 - 39) = &off_24EC715B8;
        v254 = (std::__shared_weak_count *)*((_QWORD *)v249 - 37);
        if (v254)
        {
LABEL_176:
          v255 = (unint64_t *)&v254->__shared_owners_;
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
      }
      else
      {
LABEL_175:
        *((_QWORD *)v249 - 39) = &off_24EC715B8;
        v254 = (std::__shared_weak_count *)*((_QWORD *)v249 - 37);
        if (v254)
          goto LABEL_176;
      }
      *((_QWORD *)v249 - 42) = &off_24EC715B8;
      v257 = (std::__shared_weak_count *)*((_QWORD *)v249 - 40);
      if (v257)
      {
        v258 = (unint64_t *)&v257->__shared_owners_;
        do
          v259 = __ldaxr(v258);
        while (__stlxr(v259 - 1, v258));
        if (!v259)
        {
          ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
          std::__shared_weak_count::__release_weak(v257);
        }
      }
      v249 -= 344;
      if (v250 == v232)
        goto LABEL_187;
    }
  }
LABEL_190:
  v260 = result[12];
  v261 = result[13];
  v262 = 0x82FA0BE82FA0BE83 * ((v261 - v260) >> 3);
  if (v261 == v260)
  {
    result[13] = v260;
    v263 = 0x82FA0BE82FA0BE83 * ((v260 - v261) >> 3);
    v264 = v262 >= v263;
    v265 = v262 - v263;
    if (v262 <= v263)
      goto LABEL_219;
    goto LABEL_192;
  }
  do
  {
    v272 = v261 - 344;
    *((_QWORD *)v261 - 36) = &off_24EC715B8;
    v273 = (std::__shared_weak_count *)*((_QWORD *)v261 - 34);
    if (!v273)
      goto LABEL_207;
    v274 = (unint64_t *)&v273->__shared_owners_;
    do
      v275 = __ldaxr(v274);
    while (__stlxr(v275 - 1, v274));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
      std::__shared_weak_count::__release_weak(v273);
      result = v459;
      *((_QWORD *)v261 - 39) = &off_24EC715B8;
      v276 = (std::__shared_weak_count *)*((_QWORD *)v261 - 37);
      if (!v276)
        goto LABEL_213;
    }
    else
    {
LABEL_207:
      *((_QWORD *)v261 - 39) = &off_24EC715B8;
      v276 = (std::__shared_weak_count *)*((_QWORD *)v261 - 37);
      if (!v276)
        goto LABEL_213;
    }
    v277 = (unint64_t *)&v276->__shared_owners_;
    do
      v278 = __ldaxr(v277);
    while (__stlxr(v278 - 1, v277));
    if (!v278)
    {
      ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
      std::__shared_weak_count::__release_weak(v276);
      result = v459;
    }
LABEL_213:
    *((_QWORD *)v261 - 42) = &off_24EC715B8;
    v279 = (std::__shared_weak_count *)*((_QWORD *)v261 - 40);
    if (v279)
    {
      v280 = (unint64_t *)&v279->__shared_owners_;
      do
        v281 = __ldaxr(v280);
      while (__stlxr(v281 - 1, v280));
      if (!v281)
      {
        ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
        std::__shared_weak_count::__release_weak(v279);
        result = v459;
      }
    }
    v261 -= 344;
  }
  while (v272 != v260);
  v261 = result[12];
  result[13] = v260;
  v282 = 0x82FA0BE82FA0BE83 * ((v260 - v261) >> 3);
  v264 = v262 >= v282;
  v265 = v262 - v282;
  if (v262 <= v282)
  {
LABEL_219:
    if (v264)
      goto LABEL_272;
    v283 = &v261[344 * v262];
    if (v260 == v283)
    {
LABEL_221:
      result[13] = v283;
      goto LABEL_272;
    }
    while (2)
    {
      v284 = v260 - 344;
      *((_QWORD *)v260 - 36) = &off_24EC715B8;
      v285 = (std::__shared_weak_count *)*((_QWORD *)v260 - 34);
      if (!v285)
        goto LABEL_227;
      v286 = (unint64_t *)&v285->__shared_owners_;
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
        std::__shared_weak_count::__release_weak(v285);
        result = v459;
        *((_QWORD *)v260 - 39) = &off_24EC715B8;
        v288 = (std::__shared_weak_count *)*((_QWORD *)v260 - 37);
        if (v288)
        {
LABEL_228:
          v289 = (unint64_t *)&v288->__shared_owners_;
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
            result = v459;
          }
        }
      }
      else
      {
LABEL_227:
        *((_QWORD *)v260 - 39) = &off_24EC715B8;
        v288 = (std::__shared_weak_count *)*((_QWORD *)v260 - 37);
        if (v288)
          goto LABEL_228;
      }
      *((_QWORD *)v260 - 42) = &off_24EC715B8;
      v291 = (std::__shared_weak_count *)*((_QWORD *)v260 - 40);
      if (v291)
      {
        v292 = (unint64_t *)&v291->__shared_owners_;
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
          std::__shared_weak_count::__release_weak(v291);
          result = v459;
        }
      }
      v260 -= 344;
      if (v284 == v283)
        goto LABEL_221;
      continue;
    }
  }
LABEL_192:
  v266 = result[14];
  if (0x82FA0BE82FA0BE83 * ((v266 - v260) >> 3) >= v265)
  {
    v294 = &v260[344 * v265];
    do
    {
      *(_OWORD *)v260 = 0uLL;
      *((_OWORD *)v260 + 1) = 0uLL;
      *((_OWORD *)v260 + 2) = 0uLL;
      *((_OWORD *)v260 + 3) = 0uLL;
      *((_QWORD *)v260 + 26) = 0;
      *((_OWORD *)v260 + 11) = 0uLL;
      *((_OWORD *)v260 + 12) = 0uLL;
      *((_OWORD *)v260 + 9) = 0uLL;
      *((_OWORD *)v260 + 10) = 0uLL;
      *((_OWORD *)v260 + 7) = 0uLL;
      *((_OWORD *)v260 + 8) = 0uLL;
      *((_OWORD *)v260 + 5) = 0uLL;
      *((_OWORD *)v260 + 6) = 0uLL;
      *((_OWORD *)v260 + 4) = 0uLL;
      *((_QWORD *)v260 + 2) = 0;
      *((_QWORD *)v260 + 3) = 0;
      *((_QWORD *)v260 + 1) = &off_24EC715B8;
      *((_QWORD *)v260 + 4) = &off_24EC715B8;
      *((_QWORD *)v260 + 5) = 0;
      *((_QWORD *)v260 + 6) = 0;
      *((_QWORD *)v260 + 7) = &off_24EC715B8;
      *((_QWORD *)v260 + 8) = 0;
      *((_QWORD *)v260 + 9) = 0;
      v295 = v260 + 216;
      *(_OWORD *)(v260 + 248) = xmmword_2245D23B8;
      *(_OWORD *)(v260 + 232) = unk_2245D23A8;
      *(_OWORD *)(v260 + 216) = xmmword_2245D2398;
      *(_OWORD *)(v260 + 312) = xmmword_2245D23F8;
      *(_OWORD *)(v260 + 328) = unk_2245D2408;
      *(_OWORD *)(v260 + 280) = xmmword_2245D23D8;
      *(_OWORD *)(v260 + 296) = unk_2245D23E8;
      v260 += 344;
      *((_OWORD *)v295 + 3) = unk_2245D23C8;
    }
    while (v260 != v294);
    result[13] = v294;
    goto LABEL_272;
  }
  v267 = 0x82FA0BE82FA0BE83 * ((v260 - v261) >> 3);
  v268 = v265 - 0x7D05F417D05F417DLL * ((v260 - v261) >> 3);
  if (v268 > 0xBE82FA0BE82FA0)
    sub_22316E078();
  v269 = 0x82FA0BE82FA0BE83 * ((v266 - v261) >> 3);
  if (2 * v269 > v268)
    v268 = 2 * v269;
  if (v269 >= 0x5F417D05F417D0)
    v270 = 0xBE82FA0BE82FA0;
  else
    v270 = v268;
  if (v270)
  {
    if (v270 > 0xBE82FA0BE82FA0)
      sub_223174E94();
    v271 = (char *)operator new(344 * v270);
  }
  else
  {
    v271 = 0;
  }
  v296 = &v271[344 * v267];
  v297 = &v296[344 * v265];
  v298 = v296;
  do
  {
    *(_OWORD *)v298 = 0uLL;
    *((_OWORD *)v298 + 1) = 0uLL;
    *((_OWORD *)v298 + 2) = 0uLL;
    *((_OWORD *)v298 + 3) = 0uLL;
    *((_QWORD *)v298 + 26) = 0;
    *((_OWORD *)v298 + 11) = 0uLL;
    *((_OWORD *)v298 + 12) = 0uLL;
    *((_OWORD *)v298 + 9) = 0uLL;
    *((_OWORD *)v298 + 10) = 0uLL;
    *((_OWORD *)v298 + 7) = 0uLL;
    *((_OWORD *)v298 + 8) = 0uLL;
    *((_OWORD *)v298 + 5) = 0uLL;
    *((_OWORD *)v298 + 6) = 0uLL;
    *((_OWORD *)v298 + 4) = 0uLL;
    *((_QWORD *)v298 + 2) = 0;
    *((_QWORD *)v298 + 3) = 0;
    *((_QWORD *)v298 + 1) = &off_24EC715B8;
    *((_QWORD *)v298 + 4) = &off_24EC715B8;
    *((_QWORD *)v298 + 5) = 0;
    *((_QWORD *)v298 + 6) = 0;
    *((_QWORD *)v298 + 7) = &off_24EC715B8;
    *((_QWORD *)v298 + 8) = 0;
    *((_QWORD *)v298 + 9) = 0;
    v299 = v298 + 216;
    *(_OWORD *)(v298 + 248) = xmmword_2245D23B8;
    *(_OWORD *)(v298 + 232) = unk_2245D23A8;
    *(_OWORD *)(v298 + 216) = xmmword_2245D2398;
    *(_OWORD *)(v298 + 312) = xmmword_2245D23F8;
    *(_OWORD *)(v298 + 328) = unk_2245D2408;
    *(_OWORD *)(v298 + 280) = xmmword_2245D23D8;
    *(_OWORD *)(v298 + 296) = unk_2245D23E8;
    v298 += 344;
    *((_OWORD *)v299 + 3) = unk_2245D23C8;
  }
  while (v298 != v297);
  v300 = &v271[344 * v270];
  result = v459;
  v301 = v459[12];
  v302 = v459[13];
  if (v302 == v301)
  {
    v459[12] = v296;
    v459[13] = v297;
    v459[14] = v300;
    goto LABEL_270;
  }
  v303 = 0;
  do
  {
    v310 = &v296[v303];
    v311 = &v302[v303];
    *(_QWORD *)&v296[v303 - 344] = *(_QWORD *)&v302[v303 - 344];
    *(_QWORD *)&v296[v303 - 336] = &off_24EC715B8;
    v312 = &v302[v303 - 328];
    *(_OWORD *)&v296[v303 - 328] = *(_OWORD *)v312;
    *(_QWORD *)&v302[v303 - 320] = 0;
    *(_QWORD *)v312 = 0;
    *(_QWORD *)&v296[v303 - 312] = &off_24EC715B8;
    v313 = &v302[v303 - 304];
    *(_OWORD *)&v296[v303 - 304] = *(_OWORD *)v313;
    *(_QWORD *)&v302[v303 - 296] = 0;
    *(_QWORD *)v313 = 0;
    *(_QWORD *)&v296[v303 - 288] = &off_24EC715B8;
    v314 = &v302[v303 - 280];
    *(_OWORD *)&v296[v303 - 280] = *(_OWORD *)v314;
    *(_QWORD *)&v302[v303 - 272] = 0;
    *(_QWORD *)v314 = 0;
    *(_QWORD *)&v296[v303 - 264] = *(_QWORD *)&v302[v303 - 264];
    *((_OWORD *)v310 - 16) = *(_OWORD *)&v302[v303 - 256];
    v315 = *(_OWORD *)&v302[v303 - 240];
    v316 = *(_OWORD *)&v302[v303 - 224];
    v317 = *(_OWORD *)&v302[v303 - 208];
    *((_QWORD *)v310 - 24) = *(_QWORD *)&v302[v303 - 192];
    *((_OWORD *)v310 - 14) = v316;
    *((_OWORD *)v310 - 13) = v317;
    *((_OWORD *)v310 - 15) = v315;
    v296[v303 - 184] = 0;
    *(v310 - 136) = 0;
    if (v302[v303 - 136])
    {
      v318 = *(_OWORD *)(v311 - 168);
      *(_OWORD *)&v296[v303 - 184] = *(_OWORD *)(v311 - 184);
      *(_OWORD *)&v296[v303 - 168] = v318;
      *(_OWORD *)(v310 - 152) = *(_OWORD *)(v311 - 152);
      *(v310 - 136) = 1;
    }
    v304 = *((_OWORD *)v311 - 8);
    v305 = *((_OWORD *)v311 - 7);
    v306 = *((_OWORD *)v311 - 5);
    *((_OWORD *)v310 - 6) = *((_OWORD *)v311 - 6);
    *((_OWORD *)v310 - 5) = v306;
    *((_OWORD *)v310 - 8) = v304;
    *((_OWORD *)v310 - 7) = v305;
    v307 = *((_OWORD *)v311 - 4);
    v308 = *((_OWORD *)v311 - 3);
    v309 = *((_OWORD *)v311 - 1);
    *((_OWORD *)v310 - 2) = *((_OWORD *)v311 - 2);
    *((_OWORD *)v310 - 1) = v309;
    *((_OWORD *)v310 - 4) = v307;
    *((_OWORD *)v310 - 3) = v308;
    v303 -= 344;
  }
  while (&v302[v303] != v301);
  v302 = v459[12];
  v319 = v459[13];
  v459[12] = &v296[v303];
  v459[13] = v297;
  v459[14] = v300;
  if (v319 != v302)
  {
    do
    {
      v320 = v319 - 344;
      *((_QWORD *)v319 - 36) = &off_24EC715B8;
      v321 = (std::__shared_weak_count *)*((_QWORD *)v319 - 34);
      if (!v321)
        goto LABEL_258;
      v322 = (unint64_t *)&v321->__shared_owners_;
      do
        v323 = __ldaxr(v322);
      while (__stlxr(v323 - 1, v322));
      if (!v323)
      {
        ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
        std::__shared_weak_count::__release_weak(v321);
        result = v459;
        *((_QWORD *)v319 - 39) = &off_24EC715B8;
        v324 = (std::__shared_weak_count *)*((_QWORD *)v319 - 37);
        if (v324)
        {
LABEL_259:
          v325 = (unint64_t *)&v324->__shared_owners_;
          do
            v326 = __ldaxr(v325);
          while (__stlxr(v326 - 1, v325));
          if (!v326)
          {
            ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
            std::__shared_weak_count::__release_weak(v324);
            result = v459;
          }
        }
      }
      else
      {
LABEL_258:
        *((_QWORD *)v319 - 39) = &off_24EC715B8;
        v324 = (std::__shared_weak_count *)*((_QWORD *)v319 - 37);
        if (v324)
          goto LABEL_259;
      }
      *((_QWORD *)v319 - 42) = &off_24EC715B8;
      v327 = (std::__shared_weak_count *)*((_QWORD *)v319 - 40);
      if (v327)
      {
        v328 = (unint64_t *)&v327->__shared_owners_;
        do
          v329 = __ldaxr(v328);
        while (__stlxr(v329 - 1, v328));
        if (!v329)
        {
          ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
          std::__shared_weak_count::__release_weak(v327);
          result = v459;
        }
      }
      v319 -= 344;
    }
    while (v320 != v302);
  }
LABEL_270:
  if (v302)
  {
    operator delete(v302);
    result = v459;
  }
LABEL_272:
  result[15] = 0;
  result[16] = 0;
  result[17] = 0;
  a2[4].i64[1] = 0;
  v330 = (unint64_t)result[23];
  a2[5].i64[0] = 0;
  a2[5].i64[1] = 0;
  v456 = &a2[4].i64[1];
  if (v330)
  {
    if (v330 > 0xCCCCCCCCCCCCCCLL)
      sub_22316E078();
    v331 = (char *)operator new(320 * v330);
    v332 = 0;
    a2[4].i64[1] = (uint64_t)v331;
    a2[5].i64[0] = (uint64_t)v331;
    a2[5].i64[1] = (uint64_t)&v331[320 * v330];
    result = v459;
    while (1)
    {
      while (1)
      {
        v340 = result[18];
        v341 = (unint64_t)&result[21][v332] % (0xCCCCCCCCCCCCCCCDLL * ((result[19] - v340) >> 6));
        v342 = &v340[320 * v341];
        v343 = a2[5].u64[1];
        if ((unint64_t)v331 >= v343)
          break;
        *(_QWORD *)v331 = *(_QWORD *)v342;
        *((_QWORD *)v331 + 1) = &off_24EC715B8;
        v344 = &v340[320 * v341];
        *((_OWORD *)v331 + 1) = *((_OWORD *)v344 + 1);
        *((_QWORD *)v344 + 2) = 0;
        *((_QWORD *)v344 + 3) = 0;
        *((_QWORD *)v331 + 4) = &off_24EC715B8;
        *(_OWORD *)(v331 + 40) = *(_OWORD *)(v344 + 40);
        *((_QWORD *)v344 + 5) = 0;
        *((_QWORD *)v344 + 6) = 0;
        *((_QWORD *)v331 + 7) = *((_QWORD *)v344 + 7);
        v345 = *((_OWORD *)v344 + 6);
        v346 = *((_OWORD *)v344 + 7);
        v347 = *((_QWORD *)v344 + 16);
        v349 = *((_OWORD *)v344 + 4);
        v348 = *((_OWORD *)v344 + 5);
        v331[136] = 0;
        *((_OWORD *)v331 + 4) = v349;
        *((_QWORD *)v331 + 16) = v347;
        *((_OWORD *)v331 + 7) = v346;
        *((_OWORD *)v331 + 6) = v345;
        *((_OWORD *)v331 + 5) = v348;
        v331[184] = 0;
        if (v344[184])
        {
          v350 = &v340[320 * v341];
          v351 = *(_OWORD *)(v350 + 152);
          *(_OWORD *)(v331 + 136) = *(_OWORD *)(v350 + 136);
          *(_OWORD *)(v331 + 152) = v351;
          *(_OWORD *)(v331 + 168) = *(_OWORD *)(v350 + 168);
          v331[184] = 1;
        }
        v333 = &v340[320 * v341];
        v334 = *((_OWORD *)v333 + 12);
        v335 = *((_OWORD *)v333 + 13);
        v336 = *((_OWORD *)v333 + 15);
        *((_OWORD *)v331 + 14) = *((_OWORD *)v333 + 14);
        *((_OWORD *)v331 + 15) = v336;
        *((_OWORD *)v331 + 12) = v334;
        *((_OWORD *)v331 + 13) = v335;
        v337 = *((_OWORD *)v333 + 16);
        v338 = *((_OWORD *)v333 + 17);
        v339 = *((_OWORD *)v333 + 19);
        *((_OWORD *)v331 + 18) = *((_OWORD *)v333 + 18);
        *((_OWORD *)v331 + 19) = v339;
        *((_OWORD *)v331 + 16) = v337;
        *((_OWORD *)v331 + 17) = v338;
        v331 += 320;
        a2[5].i64[0] = (uint64_t)v331;
        if ((char *)++v332 == result[23])
          goto LABEL_314;
      }
      v352 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v331[-*v456] >> 6);
      v353 = v352 + 1;
      if (v352 + 1 > 0xCCCCCCCCCCCCCCLL)
        sub_22316E078();
      v354 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v343 - *v456) >> 6);
      if (2 * v354 > v353)
        v353 = 2 * v354;
      v355 = v354 >= 0x66666666666666 ? 0xCCCCCCCCCCCCCCLL : v353;
      if (v355)
      {
        if (v355 > 0xCCCCCCCCCCCCCCLL)
          sub_223174E94();
        v356 = (char *)operator new(320 * v355);
      }
      else
      {
        v356 = 0;
      }
      v357 = &v356[320 * v352];
      *(_QWORD *)v357 = *(_QWORD *)v342;
      *((_QWORD *)v357 + 1) = &off_24EC715B8;
      v358 = &v340[320 * v341];
      *((_OWORD *)v357 + 1) = *((_OWORD *)v358 + 1);
      *((_QWORD *)v358 + 2) = 0;
      *((_QWORD *)v358 + 3) = 0;
      *((_QWORD *)v357 + 4) = &off_24EC715B8;
      *(_OWORD *)(v357 + 40) = *(_OWORD *)(v358 + 40);
      *((_QWORD *)v358 + 5) = 0;
      *((_QWORD *)v358 + 6) = 0;
      *((_QWORD *)v357 + 7) = *((_QWORD *)v358 + 7);
      *((_OWORD *)v357 + 4) = *((_OWORD *)v358 + 4);
      v359 = *((_OWORD *)v358 + 5);
      v360 = *((_OWORD *)v358 + 6);
      v361 = *((_OWORD *)v358 + 7);
      *((_QWORD *)v357 + 16) = *((_QWORD *)v358 + 16);
      *((_OWORD *)v357 + 6) = v360;
      *((_OWORD *)v357 + 7) = v361;
      *((_OWORD *)v357 + 5) = v359;
      v357[136] = 0;
      v357[184] = 0;
      if (v358[184])
      {
        v362 = &v340[320 * v341];
        v363 = *(_OWORD *)(v362 + 152);
        *(_OWORD *)(v357 + 136) = *(_OWORD *)(v362 + 136);
        *(_OWORD *)(v357 + 152) = v363;
        *(_OWORD *)&v356[320 * v352 + 168] = *(_OWORD *)(v362 + 168);
        v357[184] = 1;
      }
      v364 = &v340[320 * v341];
      v365 = *((_OWORD *)v364 + 12);
      v366 = *((_OWORD *)v364 + 13);
      v367 = *((_OWORD *)v364 + 15);
      v368 = &v356[320 * v352];
      *((_OWORD *)v368 + 14) = *((_OWORD *)v364 + 14);
      *((_OWORD *)v368 + 15) = v367;
      v369 = &v356[320 * v355];
      *((_OWORD *)v368 + 12) = v365;
      *((_OWORD *)v368 + 13) = v366;
      v370 = *((_OWORD *)v364 + 16);
      v371 = *((_OWORD *)v364 + 17);
      v372 = *((_OWORD *)v364 + 19);
      *((_OWORD *)v368 + 18) = *((_OWORD *)v364 + 18);
      *((_OWORD *)v368 + 19) = v372;
      *((_OWORD *)v368 + 16) = v370;
      *((_OWORD *)v368 + 17) = v371;
      v331 = v357 + 320;
      v373 = (char *)a2[4].i64[1];
      v374 = (char *)a2[5].i64[0];
      if (v374 != v373)
        break;
      a2[4].i64[1] = (uint64_t)v357;
      a2[5].i64[0] = (uint64_t)v331;
      a2[5].i64[1] = (uint64_t)v369;
LABEL_311:
      if (v374)
        operator delete(v374);
      result = v459;
      a2[5].i64[0] = (uint64_t)v331;
      if ((char *)++v332 == v459[23])
        goto LABEL_314;
    }
    v375 = 0;
    do
    {
      v382 = &v357[v375];
      v383 = &v374[v375];
      *(_QWORD *)&v357[v375 - 320] = *(_QWORD *)&v374[v375 - 320];
      *(_QWORD *)&v357[v375 - 312] = &off_24EC715B8;
      v384 = &v374[v375 - 304];
      *(_OWORD *)&v357[v375 - 304] = *(_OWORD *)v384;
      *(_QWORD *)&v374[v375 - 296] = 0;
      *(_QWORD *)v384 = 0;
      *(_QWORD *)&v357[v375 - 288] = &off_24EC715B8;
      v385 = &v374[v375 - 280];
      *(_OWORD *)&v357[v375 - 280] = *(_OWORD *)v385;
      *(_QWORD *)&v374[v375 - 272] = 0;
      *(_QWORD *)v385 = 0;
      *(_QWORD *)&v357[v375 - 264] = *(_QWORD *)&v374[v375 - 264];
      *((_OWORD *)v382 - 16) = *(_OWORD *)&v374[v375 - 256];
      v386 = *(_OWORD *)&v374[v375 - 240];
      v387 = *(_OWORD *)&v374[v375 - 224];
      v388 = *(_OWORD *)&v374[v375 - 208];
      *((_QWORD *)v382 - 24) = *(_QWORD *)&v374[v375 - 192];
      *((_OWORD *)v382 - 14) = v387;
      *((_OWORD *)v382 - 13) = v388;
      *((_OWORD *)v382 - 15) = v386;
      v357[v375 - 184] = 0;
      *(v382 - 136) = 0;
      if (v374[v375 - 136])
      {
        v389 = *(_OWORD *)(v383 - 168);
        *(_OWORD *)&v357[v375 - 184] = *(_OWORD *)(v383 - 184);
        *(_OWORD *)&v357[v375 - 168] = v389;
        *(_OWORD *)(v382 - 152) = *(_OWORD *)(v383 - 152);
        *(v382 - 136) = 1;
      }
      v376 = *((_OWORD *)v383 - 8);
      v377 = *((_OWORD *)v383 - 7);
      v378 = *((_OWORD *)v383 - 5);
      *((_OWORD *)v382 - 6) = *((_OWORD *)v383 - 6);
      *((_OWORD *)v382 - 5) = v378;
      *((_OWORD *)v382 - 8) = v376;
      *((_OWORD *)v382 - 7) = v377;
      v379 = *((_OWORD *)v383 - 4);
      v380 = *((_OWORD *)v383 - 3);
      v381 = *((_OWORD *)v383 - 1);
      *((_OWORD *)v382 - 2) = *((_OWORD *)v383 - 2);
      *((_OWORD *)v382 - 1) = v381;
      *((_OWORD *)v382 - 4) = v379;
      *((_OWORD *)v382 - 3) = v380;
      v375 -= 320;
    }
    while (&v374[v375] != v373);
    v374 = (char *)a2[4].i64[1];
    v390 = (char *)a2[5].i64[0];
    a2[4].i64[1] = (uint64_t)&v357[v375];
    a2[5].i64[0] = (uint64_t)v331;
    a2[5].i64[1] = (uint64_t)v369;
    if (v390 == v374)
      goto LABEL_311;
    while (2)
    {
      v391 = v390 - 320;
      *((_QWORD *)v390 - 36) = &off_24EC715B8;
      v392 = (std::__shared_weak_count *)*((_QWORD *)v390 - 34);
      if (!v392)
        goto LABEL_303;
      v393 = (unint64_t *)&v392->__shared_owners_;
      do
        v394 = __ldaxr(v393);
      while (__stlxr(v394 - 1, v393));
      if (!v394)
      {
        ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
        std::__shared_weak_count::__release_weak(v392);
        *((_QWORD *)v390 - 39) = &off_24EC715B8;
        v395 = (std::__shared_weak_count *)*((_QWORD *)v390 - 37);
        if (v395)
        {
LABEL_304:
          v396 = (unint64_t *)&v395->__shared_owners_;
          do
            v397 = __ldaxr(v396);
          while (__stlxr(v397 - 1, v396));
          if (!v397)
          {
            ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
            std::__shared_weak_count::__release_weak(v395);
          }
        }
      }
      else
      {
LABEL_303:
        *((_QWORD *)v390 - 39) = &off_24EC715B8;
        v395 = (std::__shared_weak_count *)*((_QWORD *)v390 - 37);
        if (v395)
          goto LABEL_304;
      }
      v390 -= 320;
      if (v391 == v374)
        goto LABEL_311;
      continue;
    }
  }
LABEL_314:
  v398 = result[18];
  v399 = result[19];
  v400 = 0xCCCCCCCCCCCCCCCDLL * ((v399 - v398) >> 6);
  if (v399 == v398)
  {
    result[19] = v398;
    v401 = 0xCCCCCCCCCCCCCCCDLL * ((v398 - v399) >> 6);
    v402 = v400 >= v401;
    v403 = v400 - v401;
    if (v400 <= v401)
      goto LABEL_339;
LABEL_316:
    v404 = result[20];
    if (0xCCCCCCCCCCCCCCCDLL * ((v404 - v398) >> 6) >= v403)
    {
      v426 = &v398[320 * v403];
      do
      {
        *(_OWORD *)v398 = 0uLL;
        *((_OWORD *)v398 + 1) = 0uLL;
        *((_OWORD *)v398 + 2) = 0uLL;
        *((_OWORD *)v398 + 3) = 0uLL;
        *((_OWORD *)v398 + 10) = 0uLL;
        *((_OWORD *)v398 + 11) = 0uLL;
        *((_OWORD *)v398 + 8) = 0uLL;
        *((_OWORD *)v398 + 9) = 0uLL;
        *((_OWORD *)v398 + 6) = 0uLL;
        *((_OWORD *)v398 + 7) = 0uLL;
        *((_OWORD *)v398 + 4) = 0uLL;
        *((_OWORD *)v398 + 5) = 0uLL;
        *((_QWORD *)v398 + 2) = 0;
        *((_QWORD *)v398 + 3) = 0;
        *((_QWORD *)v398 + 1) = &off_24EC715B8;
        *((_QWORD *)v398 + 4) = &off_24EC715B8;
        *((_QWORD *)v398 + 5) = 0;
        *((_QWORD *)v398 + 6) = 0;
        *((_OWORD *)v398 + 14) = xmmword_2245D23B8;
        *((_OWORD *)v398 + 15) = unk_2245D23C8;
        *((_OWORD *)v398 + 12) = xmmword_2245D2398;
        *((_OWORD *)v398 + 13) = unk_2245D23A8;
        *((_OWORD *)v398 + 18) = xmmword_2245D23F8;
        *((_OWORD *)v398 + 19) = unk_2245D2408;
        *((_OWORD *)v398 + 16) = xmmword_2245D23D8;
        *((_OWORD *)v398 + 17) = unk_2245D23E8;
        v398 += 320;
      }
      while (v398 != v426);
      result[19] = v426;
      goto LABEL_382;
    }
    v405 = 0xCCCCCCCCCCCCCCCDLL * ((v398 - v399) >> 6);
    v406 = v405 + v403;
    if (v405 + v403 > 0xCCCCCCCCCCCCCCLL)
      sub_22316E078();
    v407 = 0xCCCCCCCCCCCCCCCDLL * ((v404 - v399) >> 6);
    if (2 * v407 > v406)
      v406 = 2 * v407;
    if (v407 >= 0x66666666666666)
      v408 = 0xCCCCCCCCCCCCCCLL;
    else
      v408 = v406;
    if (v408)
    {
      if (v408 > 0xCCCCCCCCCCCCCCLL)
        sub_223174E94();
      v409 = (char *)operator new(320 * v408);
    }
    else
    {
      v409 = 0;
    }
    v427 = &v409[320 * v405];
    v428 = &v427[320 * v403];
    v429 = v427;
    do
    {
      *(_OWORD *)v429 = 0uLL;
      *((_OWORD *)v429 + 1) = 0uLL;
      *((_OWORD *)v429 + 2) = 0uLL;
      *((_OWORD *)v429 + 3) = 0uLL;
      *((_OWORD *)v429 + 10) = 0uLL;
      *((_OWORD *)v429 + 11) = 0uLL;
      *((_OWORD *)v429 + 8) = 0uLL;
      *((_OWORD *)v429 + 9) = 0uLL;
      *((_OWORD *)v429 + 6) = 0uLL;
      *((_OWORD *)v429 + 7) = 0uLL;
      *((_OWORD *)v429 + 4) = 0uLL;
      *((_OWORD *)v429 + 5) = 0uLL;
      *((_QWORD *)v429 + 2) = 0;
      *((_QWORD *)v429 + 3) = 0;
      *((_QWORD *)v429 + 1) = &off_24EC715B8;
      *((_QWORD *)v429 + 4) = &off_24EC715B8;
      *((_QWORD *)v429 + 5) = 0;
      *((_QWORD *)v429 + 6) = 0;
      *((_OWORD *)v429 + 14) = xmmword_2245D23B8;
      *((_OWORD *)v429 + 15) = unk_2245D23C8;
      *((_OWORD *)v429 + 12) = xmmword_2245D2398;
      *((_OWORD *)v429 + 13) = unk_2245D23A8;
      *((_OWORD *)v429 + 18) = xmmword_2245D23F8;
      *((_OWORD *)v429 + 19) = unk_2245D2408;
      *((_OWORD *)v429 + 16) = xmmword_2245D23D8;
      *((_OWORD *)v429 + 17) = unk_2245D23E8;
      v429 += 320;
    }
    while (v429 != v428);
    v430 = &v409[320 * v408];
    result = v459;
    v431 = v459[18];
    v432 = v459[19];
    if (v432 == v431)
    {
      v459[18] = v427;
      v459[19] = v428;
      v459[20] = v430;
LABEL_380:
      if (v432)
      {
        operator delete(v432);
        result = v459;
      }
      goto LABEL_382;
    }
    v433 = 0;
    do
    {
      v440 = &v427[v433];
      v441 = &v432[v433];
      *(_QWORD *)&v427[v433 - 320] = *(_QWORD *)&v432[v433 - 320];
      *(_QWORD *)&v427[v433 - 312] = &off_24EC715B8;
      v442 = &v432[v433 - 304];
      *(_OWORD *)&v427[v433 - 304] = *(_OWORD *)v442;
      *(_QWORD *)&v432[v433 - 296] = 0;
      *(_QWORD *)v442 = 0;
      *(_QWORD *)&v427[v433 - 288] = &off_24EC715B8;
      v443 = &v432[v433 - 280];
      *(_OWORD *)&v427[v433 - 280] = *(_OWORD *)v443;
      *(_QWORD *)&v432[v433 - 272] = 0;
      *(_QWORD *)v443 = 0;
      *(_QWORD *)&v427[v433 - 264] = *(_QWORD *)&v432[v433 - 264];
      *((_OWORD *)v440 - 16) = *(_OWORD *)&v432[v433 - 256];
      v444 = *(_OWORD *)&v432[v433 - 240];
      v445 = *(_OWORD *)&v432[v433 - 224];
      v446 = *(_OWORD *)&v432[v433 - 208];
      *((_QWORD *)v440 - 24) = *(_QWORD *)&v432[v433 - 192];
      *((_OWORD *)v440 - 14) = v445;
      *((_OWORD *)v440 - 13) = v446;
      *((_OWORD *)v440 - 15) = v444;
      v427[v433 - 184] = 0;
      *(v440 - 136) = 0;
      if (v432[v433 - 136])
      {
        v447 = *(_OWORD *)(v441 - 168);
        *(_OWORD *)&v427[v433 - 184] = *(_OWORD *)(v441 - 184);
        *(_OWORD *)&v427[v433 - 168] = v447;
        *(_OWORD *)(v440 - 152) = *(_OWORD *)(v441 - 152);
        *(v440 - 136) = 1;
      }
      v434 = *((_OWORD *)v441 - 8);
      v435 = *((_OWORD *)v441 - 7);
      v436 = *((_OWORD *)v441 - 5);
      *((_OWORD *)v440 - 6) = *((_OWORD *)v441 - 6);
      *((_OWORD *)v440 - 5) = v436;
      *((_OWORD *)v440 - 8) = v434;
      *((_OWORD *)v440 - 7) = v435;
      v437 = *((_OWORD *)v441 - 4);
      v438 = *((_OWORD *)v441 - 3);
      v439 = *((_OWORD *)v441 - 1);
      *((_OWORD *)v440 - 2) = *((_OWORD *)v441 - 2);
      *((_OWORD *)v440 - 1) = v439;
      *((_OWORD *)v440 - 4) = v437;
      *((_OWORD *)v440 - 3) = v438;
      v433 -= 320;
    }
    while (&v432[v433] != v431);
    v432 = v459[18];
    v448 = v459[19];
    v459[18] = &v427[v433];
    v459[19] = v428;
    v459[20] = v430;
    if (v448 == v432)
      goto LABEL_380;
    while (2)
    {
      v449 = v448 - 320;
      *((_QWORD *)v448 - 36) = &off_24EC715B8;
      v450 = (std::__shared_weak_count *)*((_QWORD *)v448 - 34);
      if (!v450)
        goto LABEL_372;
      v451 = (unint64_t *)&v450->__shared_owners_;
      do
        v452 = __ldaxr(v451);
      while (__stlxr(v452 - 1, v451));
      if (!v452)
      {
        ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
        std::__shared_weak_count::__release_weak(v450);
        result = v459;
        *((_QWORD *)v448 - 39) = &off_24EC715B8;
        v453 = (std::__shared_weak_count *)*((_QWORD *)v448 - 37);
        if (v453)
        {
LABEL_373:
          v454 = (unint64_t *)&v453->__shared_owners_;
          do
            v455 = __ldaxr(v454);
          while (__stlxr(v455 - 1, v454));
          if (!v455)
          {
            ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
            std::__shared_weak_count::__release_weak(v453);
            result = v459;
          }
        }
      }
      else
      {
LABEL_372:
        *((_QWORD *)v448 - 39) = &off_24EC715B8;
        v453 = (std::__shared_weak_count *)*((_QWORD *)v448 - 37);
        if (v453)
          goto LABEL_373;
      }
      v448 -= 320;
      if (v449 == v432)
        goto LABEL_380;
      continue;
    }
  }
  while (2)
  {
    v410 = v399 - 320;
    *((_QWORD *)v399 - 36) = &off_24EC715B8;
    v411 = (std::__shared_weak_count *)*((_QWORD *)v399 - 34);
    if (!v411)
      goto LABEL_331;
    v412 = (unint64_t *)&v411->__shared_owners_;
    do
      v413 = __ldaxr(v412);
    while (__stlxr(v413 - 1, v412));
    if (!v413)
    {
      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
      std::__shared_weak_count::__release_weak(v411);
      result = v459;
      *((_QWORD *)v399 - 39) = &off_24EC715B8;
      v414 = (std::__shared_weak_count *)*((_QWORD *)v399 - 37);
      if (v414)
      {
LABEL_332:
        v415 = (unint64_t *)&v414->__shared_owners_;
        do
          v416 = __ldaxr(v415);
        while (__stlxr(v416 - 1, v415));
        if (!v416)
        {
          ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
          std::__shared_weak_count::__release_weak(v414);
          result = v459;
        }
      }
    }
    else
    {
LABEL_331:
      *((_QWORD *)v399 - 39) = &off_24EC715B8;
      v414 = (std::__shared_weak_count *)*((_QWORD *)v399 - 37);
      if (v414)
        goto LABEL_332;
    }
    v399 -= 320;
    if (v410 != v398)
      continue;
    break;
  }
  v399 = result[18];
  result[19] = v398;
  v417 = 0xCCCCCCCCCCCCCCCDLL * ((v398 - v399) >> 6);
  v402 = v400 >= v417;
  v403 = v400 - v417;
  if (v400 > v417)
    goto LABEL_316;
LABEL_339:
  if (!v402)
  {
    v418 = &v399[320 * v400];
    if (v398 == v418)
    {
LABEL_341:
      result[19] = v418;
      goto LABEL_382;
    }
    while (2)
    {
      v419 = v398 - 320;
      *((_QWORD *)v398 - 36) = &off_24EC715B8;
      v420 = (std::__shared_weak_count *)*((_QWORD *)v398 - 34);
      if (!v420)
        goto LABEL_347;
      v421 = (unint64_t *)&v420->__shared_owners_;
      do
        v422 = __ldaxr(v421);
      while (__stlxr(v422 - 1, v421));
      if (!v422)
      {
        ((void (*)(std::__shared_weak_count *))v420->__on_zero_shared)(v420);
        std::__shared_weak_count::__release_weak(v420);
        result = v459;
        *((_QWORD *)v398 - 39) = &off_24EC715B8;
        v423 = (std::__shared_weak_count *)*((_QWORD *)v398 - 37);
        if (v423)
        {
LABEL_348:
          v424 = (unint64_t *)&v423->__shared_owners_;
          do
            v425 = __ldaxr(v424);
          while (__stlxr(v425 - 1, v424));
          if (!v425)
          {
            ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
            std::__shared_weak_count::__release_weak(v423);
            result = v459;
          }
        }
      }
      else
      {
LABEL_347:
        *((_QWORD *)v398 - 39) = &off_24EC715B8;
        v423 = (std::__shared_weak_count *)*((_QWORD *)v398 - 37);
        if (v423)
          goto LABEL_348;
      }
      v398 -= 320;
      if (v419 == v418)
        goto LABEL_341;
      continue;
    }
  }
LABEL_382:
  result[21] = 0;
  result[22] = 0;
  result[23] = 0;
  return result;
}

void sub_22331486C(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, void **a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_223315B0C(a3);
  sub_223312150(a4);
  sub_223312290(a5);
  sub_223314A50((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_223314930@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  if (a1[5])
  {
    v3 = a1[4];
    v4 = *a1;
    if (!v3)
      v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
    v5 = v3 - 1;
    v6 = (_QWORD *)(v4 + 240 * (v3 - 1));
    *(_QWORD *)a2 = *v6;
    sub_223314B10((_QWORD *)(a2 + 8), (uint64_t)(v6 + 1));
    sub_223314C58((_QWORD *)(a2 + 56), (uint64_t)(v6 + 7));
    v7 = v4 + 240 * v5;
    *(_DWORD *)(a2 + 104) = *(_DWORD *)(v7 + 104);
    v8 = *(_OWORD *)(v7 + 112);
    v9 = *(_OWORD *)(v7 + 128);
    v10 = *(_OWORD *)(v7 + 160);
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(v7 + 144);
    *(_OWORD *)(a2 + 160) = v10;
    *(_OWORD *)(a2 + 112) = v8;
    *(_OWORD *)(a2 + 128) = v9;
    result = *(__n128 *)(v7 + 176);
    v12 = *(_OWORD *)(v7 + 192);
    v13 = *(_OWORD *)(v7 + 224);
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(v7 + 208);
    *(_OWORD *)(a2 + 224) = v13;
    *(__n128 *)(a2 + 176) = result;
    *(_OWORD *)(a2 + 192) = v12;
    *(_BYTE *)(a2 + 240) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 240) = 0;
  }
  return result;
}

void sub_223314A14(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[2] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_223314A50(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 20);
        if (v6)
        {
          *((_QWORD *)v4 - 19) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v4 - 23);
        if (v7)
        {
          *((_QWORD *)v4 - 22) = v7;
          operator delete(v7);
        }
        v8 = (void *)*((_QWORD *)v4 - 26);
        if (v8)
        {
          *((_QWORD *)v4 - 25) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v4 - 29);
        if (v9)
        {
          *((_QWORD *)v4 - 28) = v9;
          operator delete(v9);
        }
        v4 -= 240;
      }
      while (v4 != v2);
      v10 = **a1;
      v1[1] = v2;
      operator delete(v10);
    }
  }
}

_QWORD *sub_223314B10(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[8 * (v6 >> 3)];
    v8 = 24 * ((v6 - 24) / 0x18uLL) + 24;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_22316E078();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_223314C24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223314C58(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_22316E078();
    v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[8 * (v6 >> 3)];
    v8 = 24 * ((v6 - 24) / 0x18uLL) + 24;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_22316E078();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_223314D6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_223314DA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38[2];
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v4 = a1[4];
  v5 = *a1;
  v6 = (uint64_t)(a2 + 7);
  v37 = *a2;
  sub_223314B10(v38, (uint64_t)(a2 + 1));
  sub_223314C58(__p, v6);
  v46 = *((_DWORD *)a2 + 26);
  v7 = *((_OWORD *)a2 + 14);
  v53 = *((_OWORD *)a2 + 13);
  v54 = v7;
  v8 = *((_OWORD *)a2 + 12);
  v51 = *((_OWORD *)a2 + 11);
  v52 = v8;
  v9 = *((_OWORD *)a2 + 8);
  v47 = *((_OWORD *)a2 + 7);
  v48 = v9;
  v10 = *((_OWORD *)a2 + 10);
  v49 = *((_OWORD *)a2 + 9);
  v50 = v10;
  *(_QWORD *)(v5 + 240 * v4) = v37;
  v12 = (void **)(v5 + 240 * v4 + 8);
  v11 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v5 + 240 * v4 + 16) = v11;
    operator delete(v11);
    *v12 = 0;
    *(_QWORD *)(v5 + 240 * v4 + 16) = 0;
    *(_QWORD *)(v5 + 240 * v4 + 24) = 0;
  }
  *(_OWORD *)v12 = *(_OWORD *)v38;
  v13 = v5 + 240 * v4;
  *(_QWORD *)(v13 + 24) = v39;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  v16 = *(void **)(v13 + 32);
  v15 = (_QWORD *)(v13 + 32);
  v14 = v16;
  if (v16)
  {
    *(_QWORD *)(v5 + 240 * v4 + 40) = v14;
    operator delete(v14);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  *(_OWORD *)v15 = *(_OWORD *)v40;
  v17 = v5 + 240 * v4;
  *(_QWORD *)(v17 + 48) = v41;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v20 = *(void **)(v17 + 56);
  v19 = (_QWORD *)(v17 + 56);
  v18 = v20;
  if (v20)
  {
    *(_QWORD *)(v5 + 240 * v4 + 64) = v18;
    operator delete(v18);
    *v19 = 0;
    v19[1] = 0;
    v19[2] = 0;
  }
  *(_OWORD *)v19 = *(_OWORD *)__p;
  v21 = v5 + 240 * v4;
  *(_QWORD *)(v21 + 72) = v43;
  __p[0] = 0;
  __p[1] = 0;
  v43 = 0;
  v24 = *(void **)(v21 + 80);
  v23 = (_QWORD *)(v21 + 80);
  v22 = v24;
  if (v24)
  {
    *(_QWORD *)(v5 + 240 * v4 + 88) = v22;
    operator delete(v22);
    *v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
    v22 = __p[0];
  }
  *(_OWORD *)v23 = v44;
  v25 = v5 + 240 * v4;
  *(_QWORD *)(v25 + 96) = v45;
  v44 = 0uLL;
  v45 = 0;
  *(_DWORD *)(v25 + 104) = v46;
  v26 = v47;
  v27 = v48;
  v28 = v50;
  *(_OWORD *)(v25 + 144) = v49;
  *(_OWORD *)(v25 + 160) = v28;
  *(_OWORD *)(v25 + 112) = v26;
  *(_OWORD *)(v25 + 128) = v27;
  v29 = v51;
  v30 = v52;
  v31 = v54;
  *(_OWORD *)(v25 + 208) = v53;
  *(_OWORD *)(v25 + 224) = v31;
  *(_OWORD *)(v25 + 176) = v29;
  *(_OWORD *)(v25 + 192) = v30;
  if (v22)
  {
    __p[1] = v22;
    operator delete(v22);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  v32 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  v33 = a1[5];
  v34 = a1[4] + 1;
  if (v34 >= v32)
    v35 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  else
    v35 = 0;
  a1[4] = v34 - v35;
  if (v33 == v32)
  {
    v36 = a1[3] + 1;
    if (v36 < v32)
      v32 = 0;
    a1[3] = v36 - v32;
  }
  else
  {
    a1[5] = v33 + 1;
  }
}

void sub_223315014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  if (__p)
  {
    operator delete(__p);
    v15 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_223315050(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  void *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  int v39;
  _OWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v4 = a1[4];
  v5 = *a1;
  v6 = *a2;
  v7 = (char *)a2[1];
  v8 = (char *)a2[2];
  v9 = v8 - v7;
  if (v8 == v7)
  {
    v14 = 0;
    v11 = 0;
    goto LABEL_16;
  }
  if (v9 < 0)
    sub_22316E078();
  v10 = (char *)operator new(v8 - v7);
  v11 = v10;
  v12 = v9 >> 4;
  v13 = v9 - 16;
  if ((unint64_t)(v9 - 16) >= 0x90)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF0) + 16;
    v16 = v10 >= &v7[v15] || v7 >= &v10[v15];
    v9 = (uint64_t)v10;
    if (v16)
    {
      v17 = (v13 >> 4) + 1;
      v18 = 16 * (v17 & 0x1FFFFFFFFFFFFFFCLL);
      v19 = &v7[v18];
      v9 = (uint64_t)&v10[v18];
      v20 = v10 + 32;
      v21 = (__int128 *)(v7 + 32);
      v22 = v17 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(v21 - 2);
        v23 = *(v21 - 1);
        v26 = *v21;
        v25 = v21[1];
        v21 += 4;
        *(v20 - 2) = v24;
        *(v20 - 1) = v23;
        *v20 = v26;
        v20[1] = v25;
        v20 += 4;
        v22 -= 4;
      }
      while (v22);
      v7 = v19;
      if (v17 == (v17 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_15;
    }
  }
  else
  {
    v9 = (uint64_t)v10;
  }
  do
  {
    *(_QWORD *)v9 = *(_QWORD *)v7;
    *(_QWORD *)(v9 + 8) = *((_QWORD *)v7 + 1);
    v9 += 16;
    v7 += 16;
  }
  while (v7 != v8);
LABEL_15:
  v14 = &v10[16 * v12];
LABEL_16:
  v27 = a2[4];
  v50 = *(_OWORD *)(a2 + 7);
  v51 = *(_OWORD *)(a2 + 9);
  v52 = *(_OWORD *)(a2 + 11);
  v53 = a2[13];
  v49 = *(_OWORD *)(a2 + 5);
  LOBYTE(v54) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v54 = *((_OWORD *)a2 + 7);
    v55 = *((_OWORD *)a2 + 8);
    v56 = *((_OWORD *)a2 + 9);
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }
  v63 = *(_OWORD *)(a2 + 33);
  v64 = *(_OWORD *)(a2 + 35);
  v57 = *(_OWORD *)(a2 + 21);
  v58 = *(_OWORD *)(a2 + 23);
  v59 = *(_OWORD *)(a2 + 25);
  v60 = *(_OWORD *)(a2 + 27);
  v62 = *(_OWORD *)(a2 + 31);
  v61 = *(_OWORD *)(a2 + 29);
  *(_QWORD *)(v5 + 296 * v4) = v6;
  v29 = v5 + 296 * v4;
  v32 = *(void **)(v29 + 8);
  v31 = (_QWORD *)(v29 + 8);
  v30 = v32;
  if (v32)
  {
    *(_QWORD *)(v5 + 296 * v4 + 16) = v30;
    v33 = v11;
    v48 = v5;
    v34 = v4;
    v35 = v14;
    operator delete(v30);
    v14 = v35;
    v4 = v34;
    v5 = v48;
    v11 = v33;
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 0;
  }
  *v31 = v11;
  v36 = v5 + 296 * v4;
  v39 = *(unsigned __int8 *)(v36 + 160);
  v37 = (_BYTE *)(v36 + 160);
  v38 = v39;
  *((_QWORD *)v37 - 18) = v9;
  *((_QWORD *)v37 - 17) = v14;
  *((_QWORD *)v37 - 16) = v27;
  *(_OWORD *)(v37 - 120) = v49;
  *((_QWORD *)v37 - 7) = v53;
  *(_OWORD *)(v37 - 72) = v52;
  *(_OWORD *)(v37 - 88) = v51;
  *(_OWORD *)(v37 - 104) = v50;
  v40 = v37 - 48;
  if (v39 == v28)
  {
    v41 = a1;
    if (v38)
    {
      *v40 = v54;
      *((_OWORD *)v37 - 2) = v55;
      *(_OWORD *)(v5 + 296 * v4 + 144) = v56;
    }
  }
  else
  {
    v41 = a1;
    if (v38)
    {
      *v37 = 0;
    }
    else
    {
      *v40 = v54;
      *((_OWORD *)v37 - 2) = v55;
      *(_OWORD *)(v5 + 296 * v4 + 144) = v56;
      *v37 = 1;
    }
  }
  v42 = v5 + 296 * v4;
  *(_OWORD *)(v42 + 216) = v60;
  *(_OWORD *)(v42 + 200) = v59;
  *(_OWORD *)(v42 + 184) = v58;
  *(_OWORD *)(v42 + 168) = v57;
  *(_OWORD *)(v42 + 248) = v62;
  *(_OWORD *)(v42 + 232) = v61;
  *(_OWORD *)(v42 + 264) = v63;
  *(_OWORD *)(v42 + 280) = v64;
  v43 = v41[5];
  v44 = 0x14C1BACF914C1BADLL * ((uint64_t)(v41[1] - *v41) >> 3);
  v45 = v41[4] + 1;
  if (v45 >= v44)
    v46 = 0x14C1BACF914C1BADLL * ((uint64_t)(v41[1] - *v41) >> 3);
  else
    v46 = 0;
  v41[4] = v45 - v46;
  if (v43 == v44)
  {
    v47 = v41[3] + 1;
    if (v47 < v43)
      v43 = 0;
    v41[3] = v47 - v43;
  }
  else
  {
    v41[5] = v43 + 1;
  }
}

void sub_2233153C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2233153E0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  int v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[31];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v3 = a1[4];
  v4 = *a1;
  v5 = *a2;
  v6 = a2[2];
  v7 = a2[3];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a2[5];
  v11 = a2[6];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a2[8];
  v15 = a2[9];
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = a2[10];
  v64 = *(_OWORD *)(a2 + 15);
  v65 = *(_OWORD *)(a2 + 17);
  v66 = a2[19];
  v62 = *(_OWORD *)(a2 + 11);
  v63 = *(_OWORD *)(a2 + 13);
  if (*((_BYTE *)a2 + 208))
  {
    v19 = *((_BYTE *)a2 + 160);
    *(_OWORD *)v60 = *(_OWORD *)((char *)a2 + 161);
    *(_OWORD *)&v60[15] = *((_OWORD *)a2 + 11);
    v61 = *((_OWORD *)a2 + 12);
    v20 = 1;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v52 = *(_OWORD *)(a2 + 27);
  v53 = *(_OWORD *)(a2 + 29);
  v56 = *(_OWORD *)(a2 + 35);
  v57 = *(_OWORD *)(a2 + 37);
  v58 = *(_OWORD *)(a2 + 39);
  v59 = *(_OWORD *)(a2 + 41);
  v54 = *(_OWORD *)(a2 + 31);
  v55 = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(v4 + 344 * v3) = v5;
  v21 = v4 + 344 * v3;
  v22 = *(std::__shared_weak_count **)(v21 + 24);
  *(_QWORD *)(v21 + 16) = v6;
  *(_QWORD *)(v21 + 24) = v7;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      v50 = v19;
      v51 = v20;
      v25 = v18;
      v26 = v14;
      v27 = v10;
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v10 = v27;
      v14 = v26;
      v18 = v25;
      v19 = v50;
      v20 = v51;
    }
  }
  v28 = v4 + 344 * v3;
  v29 = *(std::__shared_weak_count **)(v28 + 48);
  *(_QWORD *)(v28 + 40) = v10;
  *(_QWORD *)(v28 + 48) = v11;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      v32 = v18;
      v33 = v14;
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v14 = v33;
      v18 = v32;
    }
  }
  v34 = v4 + 344 * v3;
  v35 = *(std::__shared_weak_count **)(v34 + 72);
  *(_QWORD *)(v34 + 64) = v14;
  *(_QWORD *)(v34 + 72) = v15;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      v38 = v18;
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v18 = v38;
    }
  }
  v39 = v4 + 344 * v3;
  v42 = *(unsigned __int8 *)(v39 + 208);
  v40 = (_BYTE *)(v39 + 208);
  v41 = v42;
  *(_OWORD *)(v40 - 104) = v63;
  *(_OWORD *)(v40 - 88) = v64;
  *(_OWORD *)(v40 - 72) = v65;
  *((_QWORD *)v40 - 16) = v18;
  *((_QWORD *)v40 - 7) = v66;
  *(_OWORD *)(v40 - 120) = v62;
  v43 = v40 - 48;
  if (v42 == v20)
  {
    if (v41)
    {
      *v43 = v19;
      *(_OWORD *)(v40 - 47) = *(_OWORD *)v60;
      *((_OWORD *)v40 - 2) = *(_OWORD *)&v60[15];
      *(_OWORD *)(v4 + 344 * v3 + 192) = v61;
    }
  }
  else if (v41)
  {
    *v40 = 0;
  }
  else
  {
    *v43 = v19;
    *(_OWORD *)(v40 - 47) = *(_OWORD *)v60;
    *((_OWORD *)v40 - 2) = *(_OWORD *)&v60[15];
    *(_OWORD *)(v4 + 344 * v3 + 192) = v61;
    *v40 = 1;
  }
  v44 = v4 + 344 * v3;
  *(_OWORD *)(v44 + 216) = v52;
  *(_OWORD *)(v44 + 232) = v53;
  *(_OWORD *)(v44 + 248) = v54;
  *(_OWORD *)(v44 + 296) = v57;
  *(_OWORD *)(v44 + 312) = v58;
  *(_OWORD *)(v44 + 328) = v59;
  *(_OWORD *)(v44 + 264) = v55;
  *(_OWORD *)(v44 + 280) = v56;
  v45 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  v46 = a1[5];
  v47 = a1[4] + 1;
  if (v47 >= v45)
    v48 = 0x82FA0BE82FA0BE83 * ((a1[1] - *a1) >> 3);
  else
    v48 = 0;
  a1[4] = v47 - v48;
  if (v46 == v45)
  {
    v49 = a1[3] + 1;
    if (v49 < v45)
      v45 = 0;
    a1[3] = v49 - v45;
  }
  else
  {
    a1[5] = v46 + 1;
  }
}

void sub_223315784(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  int v30;
  _BYTE *v31;
  _OWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[31];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v3 = a1[4];
  v4 = *a1;
  v5 = *a2;
  v6 = a2[2];
  v7 = a2[3];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a2[5];
  v11 = a2[6];
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a2[7];
  v50 = *((_OWORD *)a2 + 6);
  v51 = *((_OWORD *)a2 + 7);
  v52 = a2[16];
  v48 = *((_OWORD *)a2 + 4);
  v49 = *((_OWORD *)a2 + 5);
  v15 = *((_BYTE *)a2 + 184);
  if (v15)
  {
    v15 = *((_BYTE *)a2 + 136);
    *(_OWORD *)v46 = *(_OWORD *)((char *)a2 + 137);
    *(_OWORD *)&v46[15] = *(_OWORD *)(a2 + 19);
    v47 = *(_OWORD *)(a2 + 21);
    v16 = 1;
  }
  else
  {
    v16 = 0;
  }
  v42 = *((_OWORD *)a2 + 16);
  v43 = *((_OWORD *)a2 + 17);
  v44 = *((_OWORD *)a2 + 18);
  v45 = *((_OWORD *)a2 + 19);
  v38 = *((_OWORD *)a2 + 12);
  v39 = *((_OWORD *)a2 + 13);
  v40 = *((_OWORD *)a2 + 14);
  v41 = *((_OWORD *)a2 + 15);
  *(_QWORD *)(v4 + 320 * v3) = v5;
  v17 = v4 + 320 * v3;
  v18 = *(std::__shared_weak_count **)(v17 + 24);
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)(v17 + 24) = v7;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      v21 = v15;
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      v15 = v21;
    }
  }
  v22 = v4 + 320 * v3;
  v23 = *(std::__shared_weak_count **)(v22 + 48);
  *(_QWORD *)(v22 + 40) = v10;
  *(_QWORD *)(v22 + 48) = v11;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      v26 = v15;
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      v15 = v26;
    }
  }
  v27 = v4 + 320 * v3;
  v30 = *(unsigned __int8 *)(v27 + 184);
  v28 = (_BYTE *)(v27 + 184);
  v29 = v30;
  *(_OWORD *)(v28 - 104) = v49;
  *(_OWORD *)(v28 - 88) = v50;
  *(_OWORD *)(v28 - 72) = v51;
  *((_QWORD *)v28 - 16) = v14;
  *((_QWORD *)v28 - 7) = v52;
  *(_OWORD *)(v28 - 120) = v48;
  v31 = v28 - 48;
  if (v30 == v16)
  {
    if (v29)
    {
      *v31 = v15;
      *(_OWORD *)(v28 - 47) = *(_OWORD *)v46;
      *((_OWORD *)v28 - 2) = *(_OWORD *)&v46[15];
      *(_OWORD *)(v4 + 320 * v3 + 168) = v47;
    }
  }
  else if (v29)
  {
    *v28 = 0;
  }
  else
  {
    *v31 = v15;
    *(_OWORD *)(v28 - 47) = *(_OWORD *)v46;
    *((_OWORD *)v28 - 2) = *(_OWORD *)&v46[15];
    *(_OWORD *)(v4 + 320 * v3 + 168) = v47;
    *v28 = 1;
  }
  v32 = (_OWORD *)(v4 + 320 * v3);
  v32[16] = v42;
  v32[17] = v43;
  v32[18] = v44;
  v32[19] = v45;
  v32[12] = v38;
  v32[13] = v39;
  v32[14] = v40;
  v32[15] = v41;
  v33 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 6);
  v34 = a1[5];
  v35 = a1[4] + 1;
  if (v35 >= v33)
    v36 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 6);
  else
    v36 = 0;
  a1[4] = v35 - v36;
  if (v34 == v33)
  {
    v37 = a1[3] + 1;
    if (v37 < v33)
      v33 = 0;
    a1[3] = v37 - v33;
  }
  else
  {
    a1[5] = v34 + 1;
  }
}

uint64_t sub_223315A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 240;
    v4 = *(void **)(i - 160);
    if (v4)
    {
      *(_QWORD *)(i - 152) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 184);
    if (v5)
    {
      *(_QWORD *)(i - 176) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 208);
    if (v6)
    {
      *(_QWORD *)(i - 200) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(i - 232);
    if (v7)
    {
      *(_QWORD *)(i - 224) = v7;
      operator delete(v7);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void **sub_223315B0C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = (char *)*a1;
  if (!*a1)
    return a1;
  v3 = (char *)a1[1];
  v4 = *a1;
  if (v3 == v2)
    goto LABEL_17;
  do
  {
    v5 = v3 - 320;
    *((_QWORD *)v3 - 36) = &off_24EC715B8;
    v6 = (std::__shared_weak_count *)*((_QWORD *)v3 - 34);
    if (!v6)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      *((_QWORD *)v3 - 39) = &off_24EC715B8;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 37);
      if (!v9)
        goto LABEL_4;
    }
    else
    {
LABEL_9:
      *((_QWORD *)v3 - 39) = &off_24EC715B8;
      v9 = (std::__shared_weak_count *)*((_QWORD *)v3 - 37);
      if (!v9)
        goto LABEL_4;
    }
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_4:
    v3 -= 320;
  }
  while (v5 != v2);
  v4 = *a1;
LABEL_17:
  a1[1] = v2;
  operator delete(v4);
  return a1;
}

std::logic_error *sub_223315C18(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

__n128 sub_223315C3C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t (**v74)();
  BOOL v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  float64x2_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __n128 result;
  __int128 v96;
  uint64_t v97;
  uint64_t *v98;
  _BYTE v99[24];
  __int128 v100;
  __int128 v101;
  uint64_t (**v102)();
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  _BYTE v109[12];
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v101 = 0uLL;
  v100 = 0uLL;
  v10 = (uint64_t *)a1[1];
  if (!v10)
    goto LABEL_34;
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (!v11)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
LABEL_7:
    if (v12)
      goto LABEL_8;
LABEL_34:
    v25 = 0;
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!v12)
    goto LABEL_34;
LABEL_8:
  v16 = (uint64_t *)a1[1];
  v17 = a1[2];
  *(_QWORD *)&v103 = v16;
  *((_QWORD *)&v103 + 1) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v16 = (uint64_t *)v103;
  }
  v102 = &off_24EC71528;
  if (v16)
  {
    v21 = *v16;
    v20 = (std::__shared_weak_count *)v16[1];
    if (!v20)
      goto LABEL_18;
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (v24)
    {
LABEL_18:
      if (!v21)
        goto LABEL_20;
      goto LABEL_19;
    }
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v21)
LABEL_19:
      sub_2242AE7CC(v103);
  }
LABEL_20:
  sub_2242A773C((uint64_t)&v102, (uint64_t *)v99);
  v25 = *(_QWORD *)v99;
  v101 = *(_OWORD *)&v99[8];
  if ((_QWORD)v103)
  {
    v27 = *(_QWORD *)v103;
    v26 = *(std::__shared_weak_count **)(v103 + 8);
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        if (!v27)
          goto LABEL_28;
        goto LABEL_27;
      }
    }
    if (v27)
LABEL_27:
      sub_2242AE9A8(v103);
  }
LABEL_28:
  v102 = &off_24EC715B8;
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
LABEL_35:
  v34 = (uint64_t *)a1[4];
  if (!v34)
    goto LABEL_68;
  v36 = *v34;
  v35 = (std::__shared_weak_count *)v34[1];
  if (!v35)
    goto LABEL_41;
  v37 = (unint64_t *)&v35->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (v39)
  {
LABEL_41:
    if (v36)
      goto LABEL_42;
LABEL_68:
    v49 = 0;
    goto LABEL_69;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (!v36)
    goto LABEL_68;
LABEL_42:
  v40 = (uint64_t *)a1[4];
  v41 = a1[5];
  *(_QWORD *)&v103 = v40;
  *((_QWORD *)&v103 + 1) = v41;
  if (v41)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v40 = (uint64_t *)v103;
  }
  v102 = &off_24EC71528;
  if (v40)
  {
    v45 = *v40;
    v44 = (std::__shared_weak_count *)v40[1];
    if (!v44)
      goto LABEL_52;
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (v48)
    {
LABEL_52:
      if (!v45)
        goto LABEL_54;
      goto LABEL_53;
    }
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    if (v45)
LABEL_53:
      sub_2242AE7CC(v103);
  }
LABEL_54:
  sub_2242A7D74((uint64_t)&v102, (uint64_t *)v99);
  v49 = *(_QWORD *)v99;
  v100 = *(_OWORD *)&v99[8];
  if ((_QWORD)v103)
  {
    v51 = *(_QWORD *)v103;
    v50 = *(std::__shared_weak_count **)(v103 + 8);
    if (v50)
    {
      v52 = (unint64_t *)&v50->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
      do
        v54 = __ldaxr(v52);
      while (__stlxr(v54 - 1, v52));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        if (!v51)
          goto LABEL_62;
        goto LABEL_61;
      }
    }
    if (v51)
LABEL_61:
      sub_2242AE9A8(v103);
  }
LABEL_62:
  v102 = &off_24EC715B8;
  v55 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v56 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
LABEL_69:
  v58 = *(uint64_t **)(a2 + 8);
  v98 = a3;
  if (!v58)
  {
    v73 = v25;
    v74 = 0;
    LODWORD(v79) = 0;
    v78 = 0;
    LODWORD(v77) = 0;
    v60 = 0;
    goto LABEL_110;
  }
  v60 = *v58;
  v59 = (std::__shared_weak_count *)v58[1];
  if (!v59)
    goto LABEL_75;
  v61 = (unint64_t *)&v59->__shared_owners_;
  do
    v62 = __ldxr(v61);
  while (__stxr(v62 + 1, v61));
  do
    v63 = __ldaxr(v61);
  while (__stlxr(v63 - 1, v61));
  if (v63)
  {
LABEL_75:
    if (v60)
      goto LABEL_76;
LABEL_109:
    v73 = v25;
    v74 = 0;
    LODWORD(v79) = 0;
    v78 = 0;
    LODWORD(v77) = 0;
    goto LABEL_110;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  if (!v60)
    goto LABEL_109;
LABEL_76:
  v64 = *(uint64_t **)(a2 + 8);
  v65 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v99[8] = v64;
  *(_QWORD *)&v99[16] = v65;
  if (v65)
  {
    v66 = (unint64_t *)(v65 + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  *(_QWORD *)v99 = &off_24EC71528;
  if (v64)
  {
    v69 = *v64;
    v68 = (std::__shared_weak_count *)v64[1];
    if (!v68)
      goto LABEL_85;
    v70 = (unint64_t *)&v68->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    do
      v72 = __ldaxr(v70);
    while (__stlxr(v72 - 1, v70));
    if (v72)
    {
LABEL_85:
      if (!v69)
        goto LABEL_87;
      goto LABEL_86;
    }
    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
    std::__shared_weak_count::__release_weak(v68);
    if (v69)
LABEL_86:
      sub_2242AE7CC(*(uint64_t *)&v99[8]);
  }
LABEL_87:
  v73 = v25;
  sub_2242A80E4((uint64_t)v99, (uint64_t)&v102);
  v74 = v102;
  if (HIDWORD(v104))
    v75 = DWORD2(v104) == 0;
  else
    v75 = 1;
  v76 = *((_QWORD *)&v104 + 1);
  if (v75)
    v76 = 0;
  *(_QWORD *)&v109[4] = v76;
  *(_DWORD *)v109 = 3;
  v60 = *(_QWORD *)v109;
  v77 = HIDWORD(v76);
  *(_DWORD *)v109 = 1;
  *(_QWORD *)&v109[4] = v105;
  v78 = *(_QWORD *)v109;
  v79 = DWORD1(v105);
  if (DWORD1(v105) * HIDWORD(v76) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!*(_QWORD *)&v99[8])
    goto LABEL_102;
  v80 = **(_QWORD **)&v99[8];
  v81 = *(std::__shared_weak_count **)(*(_QWORD *)&v99[8] + 8);
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
    do
      v84 = __ldaxr(v82);
    while (__stlxr(v84 - 1, v82));
    if (!v84)
    {
      v97 = v80;
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
      if (!v97)
        goto LABEL_102;
      goto LABEL_101;
    }
  }
  if (v80)
LABEL_101:
    sub_2242AE9A8(*(uint64_t *)&v99[8]);
LABEL_102:
  *(_QWORD *)v99 = &off_24EC715B8;
  v85 = *(std::__shared_weak_count **)&v99[16];
  if (*(_QWORD *)&v99[16])
  {
    v86 = (unint64_t *)(*(_QWORD *)&v99[16] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_110:
  *(_QWORD *)a5 = v73;
  *(_OWORD *)(a5 + 8) = v101;
  *(_QWORD *)(a5 + 24) = v49;
  *(_OWORD *)(a5 + 32) = v100;
  *(_QWORD *)(a5 + 48) = v74;
  *(_QWORD *)(a5 + 56) = v60;
  *(_DWORD *)(a5 + 64) = v77;
  *(_QWORD *)(a5 + 68) = v78;
  *(_DWORD *)(a5 + 76) = v79;
  *(_QWORD *)&v88.f64[0] = v98[1];
  v89 = *v98;
  *(_QWORD *)&v88.f64[1] = v98[5];
  *(float32x4_t *)v99 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v88), *(float64x2_t *)(v98 + 7));
  sub_223FBAC84((uint64_t)&v102, (uint64_t)v99);
  *(_QWORD *)(a5 + 80) = &off_24EC64998;
  *(_QWORD *)(a5 + 88) = &off_24EC64920;
  v90 = v104;
  *(_OWORD *)(a5 + 96) = v103;
  *(_OWORD *)(a5 + 112) = v90;
  *(_OWORD *)(a5 + 128) = v105;
  *(_QWORD *)(a5 + 144) = v106;
  *(_DWORD *)(a5 + 152) = v107;
  *(_QWORD *)(a5 + 156) = v108;
  *(_QWORD *)(a5 + 168) = v89;
  *(float *)(a5 + 176) = (float)v89;
  *(float *)(a5 + 180) = (float)HIDWORD(v89);
  v91 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(a5 + 248) = *(_OWORD *)(a4 + 64);
  v92 = *(_OWORD *)(a4 + 96);
  v93 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(a5 + 264) = v91;
  *(_OWORD *)(a5 + 280) = v92;
  *(_OWORD *)(a5 + 296) = v93;
  v94 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a5 + 184) = *(_OWORD *)a4;
  *(_OWORD *)(a5 + 200) = v94;
  result = *(__n128 *)(a4 + 32);
  v96 = *(_OWORD *)(a4 + 48);
  *(__n128 *)(a5 + 216) = result;
  *(_OWORD *)(a5 + 232) = v96;
  return result;
}

void sub_223316390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2233164B4(size_t __sz@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE *v3;
  unint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  char v18;
  unint64_t v19;
  char *v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;

  v3 = (_BYTE *)__sz;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_22316E078();
    v5 = (unint64_t)operator new(__sz);
    v6 = &v3[v5];
    v7 = &v3[(_QWORD)a2];
    v3 = (_BYTE *)v5;
    while (1)
    {
      while (1)
      {
        v9 = *a2;
        if (v9 <= 0x25)
          break;
        v10 = 0;
        if (v5 >= (unint64_t)v6)
          goto LABEL_9;
LABEL_4:
        *(_BYTE *)v5++ = v10;
        v8 = v5;
        if (++a2 == v7)
          goto LABEL_43;
      }
      v10 = byte_2245D2430[v9];
      if (v5 < (unint64_t)v6)
        goto LABEL_4;
LABEL_9:
      v11 = v5 - (_QWORD)v3;
      v12 = v5 - (_QWORD)v3 + 1;
      if (v12 < 0)
        sub_22316E078();
      if (2 * (v6 - v3) > (unint64_t)v12)
        v12 = 2 * (v6 - v3);
      if ((unint64_t)(v6 - v3) >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)operator new(v13);
        v15 = &v14[v11];
        v14[v11] = v10;
        v8 = (uint64_t)&v14[v11 + 1];
        if ((_BYTE *)v5 != v3)
          goto LABEL_17;
      }
      else
      {
        v14 = 0;
        v15 = (char *)(v5 - (_QWORD)v3);
        *(_BYTE *)v11 = v10;
        v8 = v11 + 1;
        if ((_BYTE *)v5 != v3)
        {
LABEL_17:
          if (v11 < 8
            || v14 > &v14[v5 - (_QWORD)v3 - 1]
            || (unint64_t)v3 > v5 - 1
            || (unint64_t)(v3 - v14) < 0x20)
          {
            v16 = (_BYTE *)v5;
          }
          else if (v11 >= 0x20)
          {
            v19 = v11 & 0xFFFFFFFFFFFFFFE0;
            v20 = &v14[v11 - 16];
            v21 = (__int128 *)(v5 - 16);
            v22 = v11 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v23 = *v21;
              *((_OWORD *)v20 - 1) = *(v21 - 1);
              *(_OWORD *)v20 = v23;
              v20 -= 32;
              v21 -= 2;
              v22 -= 32;
            }
            while (v22);
            if (v11 == v19)
              goto LABEL_21;
            if ((v11 & 0x18) != 0)
              goto LABEL_37;
            v15 -= v19;
            v16 = (_BYTE *)(v5 - v19);
          }
          else
          {
            v19 = 0;
LABEL_37:
            v16 = (_BYTE *)(v5 - (v11 & 0xFFFFFFFFFFFFFFF8));
            v15 -= v11 & 0xFFFFFFFFFFFFFFF8;
            v24 = &v14[v5 - v19 - (_QWORD)v3 - 8];
            v25 = (uint64_t *)(v5 - v19 - 8);
            v26 = v19 - (v11 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v27 = *v25--;
              *(_QWORD *)v24 = v27;
              v24 -= 8;
              v26 += 8;
            }
            while (v26);
            if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_21:
              v15 = v14;
              v6 = &v14[v13];
              if (!v3)
                goto LABEL_26;
LABEL_25:
              operator delete(v3);
              goto LABEL_26;
            }
          }
          v17 = v15 - 1;
          do
          {
            v18 = *--v16;
            *v17-- = v18;
          }
          while (v16 != v3);
          goto LABEL_21;
        }
      }
      v6 = &v14[v13];
      if (v3)
        goto LABEL_25;
LABEL_26:
      v3 = v15;
      ++a2;
      v5 = v8;
      if (a2 == v7)
        goto LABEL_43;
    }
  }
  v6 = 0;
  v8 = 0;
LABEL_43:
  *a3 = v3;
  a3[1] = v8;
  a3[2] = v6;
}

void sub_223316714(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

size_t *sub_223316730@<X0>(unsigned __int8 **a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unsigned __int8 *v5;
  unint64_t v6;
  _BOOL8 v7;
  BOOL v8;
  uint64_t v9;
  size_t *result;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  size_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int i;
  char v22;
  int v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned __int8 *v32;
  uint64_t v33;

  v31 = 0;
  if (*((_DWORD *)a1 + 3))
    v4 = *((_DWORD *)a1 + 2) == 0;
  else
    v4 = 1;
  v5 = a1[1];
  if (v4)
    v5 = 0;
  v6 = (_QWORD)v5 << 32;
  if (!((unint64_t)v5 >> 32))
    v6 = 0;
  v7 = v5 != 0;
  if ((_DWORD)v5)
    v8 = (unint64_t)v5 >> 32 == 0;
  else
    v8 = 1;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6 | v7;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v8)
    v5 = 0;
  v32 = v5;
  v33 = v6 | v7;
  if ((HIDWORD(v6) & (HIDWORD(v6) - 1)) != 0)
    v9 = 1;
  else
    v9 = HIDWORD(v6);
  result = sub_223316930((size_t *)(a2 + 32), &v32, (void **)&v33, 1, (void **)&v31, 1, v9);
  v11 = *((_DWORD *)a1 + 2);
  if (v11)
  {
    v12 = *((_DWORD *)a1 + 3);
    if (v12)
    {
      v13 = v11 - 1;
      v14 = *((unsigned int *)a1 + 4);
      v15 = *(unsigned int *)(a2 + 8);
      v16 = *a1;
      v17 = *(size_t **)(a2 + 40);
      v18 = v12 - 1;
      if (v18)
      {
        v19 = *(unsigned int *)(a2 + 12);
        v20 = *((unsigned int *)a1 + 5);
        if (v13)
        {
          for (i = 0; i != v18; ++i)
          {
            v23 = v13;
            v24 = v16;
            result = v17;
            do
            {
              while (1)
              {
                v25 = *v24;
                if (v25 > 0x25)
                  break;
                *(_BYTE *)result = byte_2245D2430[v25];
                v24 += v14;
                result = (size_t *)((char *)result + v15);
                if (!--v23)
                  goto LABEL_27;
              }
              *(_BYTE *)result = 0;
              v24 += v14;
              result = (size_t *)((char *)result + v15);
              --v23;
            }
            while (v23);
LABEL_27:
            v26 = *v24;
            if (v26 <= 0x25)
              v22 = byte_2245D2430[v26];
            else
              v22 = 0;
            *(_BYTE *)result = v22;
            v16 += v20;
            v17 = (size_t *)((char *)v17 + v19);
          }
        }
        else
        {
          do
          {
            while (1)
            {
              v27 = *v16;
              if (v27 > 0x25)
                break;
              *(_BYTE *)v17 = byte_2245D2430[v27];
              v16 += v20;
              v17 = (size_t *)((char *)v17 + v19);
              if (!--v18)
                goto LABEL_32;
            }
            *(_BYTE *)v17 = 0;
            v16 += v20;
            v17 = (size_t *)((char *)v17 + v19);
            --v18;
          }
          while (v18);
        }
      }
LABEL_32:
      while (v13)
      {
        while (1)
        {
          v28 = *v16;
          if (v28 > 0x25)
            break;
          *(_BYTE *)v17 = byte_2245D2430[v28];
          v16 += v14;
          v17 = (size_t *)((char *)v17 + v15);
          if (!--v13)
            goto LABEL_37;
        }
        *(_BYTE *)v17 = 0;
        v16 += v14;
        v17 = (size_t *)((char *)v17 + v15);
        --v13;
      }
LABEL_37:
      v29 = *v16;
      if (v29 > 0x25)
        v30 = 0;
      else
        v30 = byte_2245D2430[v29];
      *(_BYTE *)v17 = v30;
    }
  }
  return result;
}

size_t *sub_223316930(size_t *a1, _DWORD *a2, void **a3, char a4, void **a5, char a6, uint64_t a7)
{
  void *v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  BOOL v22;
  void *memptr[3];
  void **v25[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (void *)((*a2 != 0) | (unint64_t)(v13 << 32));
  }
  v14 = (v12 * HIDWORD(v11));
  v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  *a1 = v14;
  a1[1] = 0;
  a1[2] = v18;
  if ((_DWORD)v14)
  {
    memptr[0] = 0;
    v19 = malloc_type_posix_memalign(memptr, v18, v14, 0x1F88E90uLL);
    if (v19)
      sub_2244E2E20(v19, a1[2], v14);
    v20 = memptr[0];
    a1[1] = (size_t)memptr[0];
    v21 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
    if (v20 && a6)
    {
      if ((_DWORD)v21)
        v22 = HIDWORD(v21) == 0;
      else
        v22 = 1;
      if (v22)
        v21 = 0;
      memptr[0] = v20;
      memptr[1] = (void *)v21;
      memptr[2] = v11;
      if (HIDWORD(v21) * HIDWORD(v11) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v25[0] = memptr;
      v25[1] = a5;
      sub_223316AD0(v25);
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
  }
  return a1;
}

void sub_223316AB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void ***sub_223316AD0(void ***result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  void **v5;
  int v6;
  int v7;
  BOOL v8;
  void **v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;

  v1 = *result;
  v2 = *((unsigned int *)*result + 4);
  if ((_DWORD)v2 == 1)
  {
    v3 = *((unsigned int *)v1 + 5);
    v4 = *((unsigned int *)v1 + 2);
    v5 = result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      return (void ***)memset(*v1, *(unsigned __int8 *)v5, (*((_DWORD *)v1 + 3) * v3));
    }
    else
    {
      v17 = *((_DWORD *)v1 + 3);
      if ((_DWORD)v4)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = (char *)*v1;
        v20 = v17 - 1;
        if (v17 != 1)
        {
          do
          {
            memset(v19, *(unsigned __int8 *)v5, v4);
            v19 += v3;
            --v20;
          }
          while (v20);
        }
        return (void ***)memset(v19, *(unsigned __int8 *)v5, v4);
      }
    }
  }
  else
  {
    v6 = *((_DWORD *)v1 + 2);
    v7 = *((_DWORD *)v1 + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = result[1];
      v10 = v6 - 1;
      v11 = *v1;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *((unsigned int *)v1 + 5);
        if (v10)
        {
          for (i = 0; i != v12; ++i)
          {
            v15 = v10;
            v16 = v11;
            do
            {
              *v16 = *(_BYTE *)v9;
              v16 += v2;
              --v15;
            }
            while (v15);
            *v16 = *(_BYTE *)v9;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *v11 = *(_BYTE *)v9;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v10; --v10)
      {
        *v11 = *(_BYTE *)v9;
        v11 += v2;
      }
      *v11 = *(_BYTE *)v9;
    }
  }
  return result;
}

void sub_223316C48(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t *v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t (**v93)();
  _QWORD *v94;
  std::__shared_weak_count *v95;
  uint64_t (**v96)();
  _QWORD *v97;
  std::__shared_weak_count *v98;
  uint64_t (**v99)();
  _QWORD *v100;
  std::__shared_weak_count *v101;
  uint64_t (**v102)();
  uint64_t *v103;
  std::__shared_weak_count *v104;
  uint64_t (**v105)();
  _QWORD *v106;
  std::__shared_weak_count *v107;

  v4 = (uint64_t *)a1[2];
  v5 = (std::__shared_weak_count *)a1[3];
  v103 = v4;
  v104 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v102 = &off_24EC71528;
  if (v4)
  {
    v9 = *v4;
    v8 = (std::__shared_weak_count *)v4[1];
    if (!v8)
      goto LABEL_10;
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (v12)
    {
LABEL_10:
      if (!v9)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v9)
LABEL_11:
      sub_2242AE7CC((uint64_t)v103);
  }
LABEL_12:
  v13 = (_QWORD *)a1[5];
  v14 = (std::__shared_weak_count *)a1[6];
  v105 = &off_24EC715B8;
  v106 = v13;
  v107 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v13 = v106;
  }
  v105 = &off_24EC71528;
  if (v13)
  {
    v18 = *v13;
    v17 = (std::__shared_weak_count *)v13[1];
    if (!v17)
      goto LABEL_22;
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (v21)
    {
LABEL_22:
      if (!v18)
        goto LABEL_24;
      goto LABEL_23;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v18)
LABEL_23:
      sub_2242AE7CC((uint64_t)v106);
  }
LABEL_24:
  v22 = (_QWORD *)a1[8];
  v23 = (std::__shared_weak_count *)a1[9];
  v100 = v22;
  v101 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v22 = v100;
  }
  v99 = &off_24EC71528;
  if (v22)
  {
    v27 = *v22;
    v26 = (std::__shared_weak_count *)v22[1];
    if (!v26)
      goto LABEL_34;
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (v30)
    {
LABEL_34:
      if (!v27)
        goto LABEL_36;
      goto LABEL_35;
    }
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (v27)
LABEL_35:
      sub_2242AE7CC((uint64_t)v100);
  }
LABEL_36:
  v31 = (_QWORD *)a1[11];
  v32 = (std::__shared_weak_count *)a1[12];
  v94 = v31;
  v95 = v32;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v31 = v94;
  }
  v93 = &off_24EC71528;
  if (v31)
  {
    v36 = *v31;
    v35 = (std::__shared_weak_count *)v31[1];
    if (!v35)
      goto LABEL_46;
    v37 = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (v39)
    {
LABEL_46:
      if (!v36)
        goto LABEL_48;
      goto LABEL_47;
    }
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    if (v36)
LABEL_47:
      sub_2242AE7CC((uint64_t)v94);
  }
LABEL_48:
  v40 = (_QWORD *)a1[14];
  v41 = (std::__shared_weak_count *)a1[15];
  v96 = &off_24EC715B8;
  v97 = v40;
  v98 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v40 = v97;
  }
  v96 = &off_24EC71528;
  if (v40)
  {
    v45 = *v40;
    v44 = (std::__shared_weak_count *)v40[1];
    if (!v44)
      goto LABEL_58;
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
    do
      v48 = __ldaxr(v46);
    while (__stlxr(v48 - 1, v46));
    if (v48)
    {
LABEL_58:
      if (!v45)
        goto LABEL_60;
      goto LABEL_59;
    }
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    if (v45)
LABEL_59:
      sub_2242AE7CC((uint64_t)v97);
  }
LABEL_60:
  *a2 = a1;
  sub_2242A85A8(a2 + 1, (uint64_t)&v102);
  sub_2242A85A8(a2 + 4, (uint64_t)&v105);
  sub_2242A85A8(a2 + 7, (uint64_t)&v99);
  sub_2242A85A8(a2 + 10, (uint64_t)&v93);
  sub_2242A85A8(a2 + 13, (uint64_t)&v96);
  if (v97)
  {
    v50 = *v97;
    v49 = (std::__shared_weak_count *)v97[1];
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
        if (!v50)
          goto LABEL_68;
        goto LABEL_67;
      }
    }
    if (v50)
LABEL_67:
      sub_2242AE9A8((uint64_t)v97);
  }
LABEL_68:
  v96 = &off_24EC715B8;
  v54 = v98;
  if (!v98)
    goto LABEL_72;
  v55 = (unint64_t *)&v98->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    v57 = v94;
    if (!v94)
      goto LABEL_80;
  }
  else
  {
LABEL_72:
    v57 = v94;
    if (!v94)
      goto LABEL_80;
  }
  v59 = *v57;
  v58 = (std::__shared_weak_count *)v57[1];
  if (v58)
  {
    v60 = (unint64_t *)&v58->__shared_owners_;
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      if (!v59)
        goto LABEL_80;
      goto LABEL_79;
    }
  }
  if (v59)
LABEL_79:
    sub_2242AE9A8((uint64_t)v94);
LABEL_80:
  v93 = &off_24EC715B8;
  v63 = v95;
  if (!v95)
    goto LABEL_84;
  v64 = (unint64_t *)&v95->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
    v66 = v100;
    if (!v100)
      goto LABEL_92;
  }
  else
  {
LABEL_84:
    v66 = v100;
    if (!v100)
      goto LABEL_92;
  }
  v68 = *v66;
  v67 = (std::__shared_weak_count *)v66[1];
  if (v67)
  {
    v69 = (unint64_t *)&v67->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    do
      v71 = __ldaxr(v69);
    while (__stlxr(v71 - 1, v69));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      if (!v68)
        goto LABEL_92;
      goto LABEL_91;
    }
  }
  if (v68)
LABEL_91:
    sub_2242AE9A8((uint64_t)v100);
LABEL_92:
  v99 = &off_24EC715B8;
  v72 = v101;
  if (!v101)
    goto LABEL_96;
  v73 = (unint64_t *)&v101->__shared_owners_;
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
    v75 = v106;
    if (!v106)
      goto LABEL_104;
  }
  else
  {
LABEL_96:
    v75 = v106;
    if (!v106)
      goto LABEL_104;
  }
  v77 = *v75;
  v76 = (std::__shared_weak_count *)v75[1];
  if (v76)
  {
    v78 = (unint64_t *)&v76->__shared_owners_;
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
    do
      v80 = __ldaxr(v78);
    while (__stlxr(v80 - 1, v78));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
      if (!v77)
        goto LABEL_104;
      goto LABEL_103;
    }
  }
  if (v77)
LABEL_103:
    sub_2242AE9A8((uint64_t)v106);
LABEL_104:
  v105 = &off_24EC715B8;
  v81 = v107;
  if (!v107)
    goto LABEL_108;
  v82 = (unint64_t *)&v107->__shared_owners_;
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v83 - 1, v82));
  if (!v83)
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
    v84 = v103;
    if (!v103)
      goto LABEL_116;
  }
  else
  {
LABEL_108:
    v84 = v103;
    if (!v103)
      goto LABEL_116;
  }
  v86 = *v84;
  v85 = (std::__shared_weak_count *)v84[1];
  if (!v85)
    goto LABEL_114;
  v87 = (unint64_t *)&v85->__shared_owners_;
  do
    v88 = __ldxr(v87);
  while (__stxr(v88 + 1, v87));
  do
    v89 = __ldaxr(v87);
  while (__stlxr(v89 - 1, v87));
  if (v89)
  {
LABEL_114:
    if (!v86)
      goto LABEL_116;
    goto LABEL_115;
  }
  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
  std::__shared_weak_count::__release_weak(v85);
  if (v86)
LABEL_115:
    sub_2242AE9A8((uint64_t)v103);
LABEL_116:
  v102 = &off_24EC715B8;
  v90 = v104;
  if (v104)
  {
    v91 = (unint64_t *)&v104->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
}

void sub_223317308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, std::__shared_weak_count *);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_2242A86B4((uint64_t *)va);
  sub_2242A86B4((uint64_t *)va1);
  sub_2242A86B4(v2);
  sub_2242A86B4(va2);
  _Unwind_Resume(a1);
}

void sub_2233174D8()
{
  JUMPOUT(0x2233174A8);
}

__n128 sub_2233174E0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float64x2_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __n128 result;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  _BYTE v57[24];
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  sub_2242A773C((uint64_t)(a1 + 1), (uint64_t *)v57);
  sub_2242A7D74((uint64_t)(a1 + 4), (uint64_t *)v56);
  v51 = *(_QWORD *)v56;
  v52 = *(_QWORD *)v57;
  v54 = *(_OWORD *)&v56[8];
  v55 = *(_OWORD *)&v57[8];
  v4 = a1[8];
  if (!v4)
    goto LABEL_25;
  v5 = *(std::__shared_weak_count **)(v4 + 8);
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v9 = (uint64_t *)a1[8];
    if (!v9)
      goto LABEL_25;
  }
  else
  {
LABEL_7:
    v9 = (uint64_t *)a1[8];
    if (!v9)
      goto LABEL_25;
  }
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v11)
        goto LABEL_14;
LABEL_25:
      LODWORD(v19) = 0;
      LODWORD(v20) = 0;
      *(_DWORD *)v57 = 1;
      *(_QWORD *)&v57[4] = 0;
      v49 = 1;
      v50 = 3;
      v15 = 0;
      goto LABEL_26;
    }
  }
  if (!v11)
    goto LABEL_25;
LABEL_14:
  sub_2242A80E4((uint64_t)(a1 + 7), (uint64_t)v57);
  v15 = *(_QWORD *)v57;
  if (HIDWORD(v58))
    v16 = DWORD2(v58) == 0;
  else
    v16 = 1;
  v17 = *((_QWORD *)&v58 + 1);
  if (v16)
    v17 = 0;
  *(_DWORD *)&v56[4] = v17;
  *(_DWORD *)v56 = 3;
  v18 = *(_QWORD *)v56;
  v19 = HIDWORD(v17);
  *(_DWORD *)v56 = 1;
  *(_QWORD *)&v56[4] = v59;
  v49 = *(_QWORD *)v56;
  v50 = v18;
  v20 = DWORD1(v59);
  if (DWORD1(v59) * HIDWORD(v17) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_26:
  sub_2242A7F2C((uint64_t)(a1 + 10), (uint64_t *)v57);
  v21 = a1[14];
  if (!v21)
    goto LABEL_43;
  v22 = *(std::__shared_weak_count **)(v21 + 8);
  if (!v22)
    goto LABEL_32;
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  do
    v25 = __ldaxr(v23);
  while (__stlxr(v25 - 1, v23));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v26 = (uint64_t *)a1[14];
    if (!v26)
      goto LABEL_43;
  }
  else
  {
LABEL_32:
    v26 = (uint64_t *)a1[14];
    if (!v26)
      goto LABEL_43;
  }
  v28 = *v26;
  v27 = (std::__shared_weak_count *)v26[1];
  if (v27)
  {
    v29 = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    do
      v31 = __ldaxr(v29);
    while (__stlxr(v31 - 1, v29));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v28)
        goto LABEL_39;
LABEL_43:
      v33 = 0;
      v32 = *(_QWORD *)v57;
      v53 = *(_OWORD *)&v57[8];
      v35 = 1;
      v34 = 2;
      goto LABEL_44;
    }
  }
  if (!v28)
    goto LABEL_43;
LABEL_39:
  sub_2242A7F2C((uint64_t)(a1 + 13), (uint64_t *)v56);
  v32 = *(_QWORD *)v57;
  v53 = *(_OWORD *)&v57[8];
  v34 = *(_QWORD *)&v56[8];
  v33 = *(_QWORD *)v56;
  v35 = *(_QWORD *)&v56[16];
LABEL_44:
  v36.f64[0] = *(float64_t *)(*a1 + 136);
  v37 = *(_QWORD *)(*a1 + 128);
  v36.f64[1] = *(float64_t *)(*a1 + 168);
  *(float32x4_t *)v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v36), *(float64x2_t *)(*a1 + 184));
  sub_223FBAC84((uint64_t)v57, (uint64_t)v56);
  v38 = v58;
  *(_OWORD *)(a2 + 144) = *(_OWORD *)&v57[8];
  *(_OWORD *)(a2 + 160) = v38;
  *(_OWORD *)(a2 + 176) = v59;
  v39 = v60;
  v40 = v61;
  v41 = v62;
  *(_QWORD *)a2 = v52;
  *(_OWORD *)(a2 + 8) = v55;
  *(_QWORD *)(a2 + 24) = v51;
  *(_OWORD *)(a2 + 32) = v54;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v50;
  *(_DWORD *)(a2 + 64) = v19;
  *(_QWORD *)(a2 + 68) = v49;
  *(_DWORD *)(a2 + 76) = v20;
  *(_QWORD *)(a2 + 80) = v32;
  *(_OWORD *)(a2 + 88) = v53;
  *(_QWORD *)(a2 + 104) = v33;
  *(_QWORD *)(a2 + 112) = v34;
  *(_QWORD *)(a2 + 120) = v35;
  *(_QWORD *)(a2 + 128) = &off_24EC64998;
  *(_QWORD *)(a2 + 136) = &off_24EC64920;
  *(_QWORD *)(a2 + 192) = v39;
  *(_DWORD *)(a2 + 200) = v40;
  *(_QWORD *)(a2 + 204) = v41;
  *(_QWORD *)(a2 + 216) = v37;
  *(float *)(a2 + 224) = (float)v37;
  *(float *)(a2 + 228) = (float)HIDWORD(v37);
  v42 = *a1 + 264;
  v43 = *(_OWORD *)v42;
  v44 = *(_OWORD *)(*a1 + 280);
  v45 = *(_OWORD *)(*a1 + 312);
  *(_OWORD *)(a2 + 264) = *(_OWORD *)(*a1 + 296);
  *(_OWORD *)(a2 + 280) = v45;
  *(_OWORD *)(a2 + 248) = v44;
  *(_OWORD *)(a2 + 232) = v43;
  result = *(__n128 *)(v42 + 64);
  v47 = *(_OWORD *)(v42 + 80);
  v48 = *(_OWORD *)(v42 + 112);
  *(_OWORD *)(a2 + 328) = *(_OWORD *)(v42 + 96);
  *(_OWORD *)(a2 + 344) = v48;
  *(__n128 *)(a2 + 296) = result;
  *(_OWORD *)(a2 + 312) = v47;
  return result;
}

uint64_t *sub_223317994(uint64_t *a1, float32x2_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  double v13;
  double v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  std::__shared_weak_count *v36;
  unint64_t v37;
  unint64_t *p_shared_weak_owners;
  unint64_t v39;
  int *v40;
  int *v41;
  BOOL v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  std::__shared_weak_count *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t **v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  std::__shared_weak_count *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t **v197;
  uint64_t *v198;
  uint64_t **v199;
  uint64_t *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  char *v205;
  uint64_t v206;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t **v210;
  uint64_t **v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  int *v214;
  _QWORD *v215[2];
  uint64_t **v216;
  void *__p[2];
  uint64_t v218;
  __int128 v219;
  _QWORD v220[2];
  uint64_t (**v221)();
  _BYTE v222[24];
  _BYTE v223[24];
  _BYTE v224[32];
  uint64_t (**v225)();
  __int128 v226;
  uint64_t v227;
  uint64_t (**v228)();
  __int128 v229;
  uint64_t (**v230)();
  __int128 v231;
  _QWORD v232[2];
  _QWORD v233[2];
  _QWORD v234[2];
  _QWORD v235[4];

  v235[2] = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)a1 + 2) = 0u;
  v209 = a1 + 4;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  v208 = a1 + 3;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  sub_22455C98C(a1 + 14);
  v7 = *(unsigned __int8 *)(a4 + 34);
  v206 = a4;
  LODWORD(a4) = *(unsigned __int8 *)(a4 + 35);
  v8 = operator new();
  v221 = 0;
  *(_QWORD *)v222 = 0;
  *(_QWORD *)&v222[8] = 0;
  sub_224502A64(v8, (v7 | a4) == 0, "surface_detection_tg", 0x14uLL, (uint64_t *)&v221);
  v9 = *v209;
  *v209 = v8;
  if (v9)
  {
    v10 = *(std::__shared_weak_count **)(v9 + 40);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    sub_22323DFE4(v9 + 8, *(_QWORD *)(v9 + 16));
    MEMORY[0x227684CE8](v9, 0x1020C401722722ELL);
  }
  v13 = a2[2].f32[0];
  v14 = a2[2].f32[1];
  v15 = a2[11];
  LODWORD(v221) = 0;
  *(float32x2_t *)v222 = v15;
  *(double *)&v222[8] = v13;
  *(_QWORD *)v223 = 0;
  *(_QWORD *)&v223[8] = 0;
  *(_QWORD *)&v222[16] = 0;
  *(double *)&v223[16] = v14;
  *(float64x2_t *)&v224[8] = vcvtq_f64_f32(a2[3]);
  *(_QWORD *)v224 = 0;
  *(_QWORD *)&v224[24] = 0x3FF0000000000000;
  LOBYTE(v225) = 0;
  BYTE8(v229) = 0;
  v215[0] = 0;
  v215[1] = 0;
  v214 = (int *)v215;
  sub_22331C988((_QWORD **)&v214, (uint64_t *)v215, (int *)&v221, (uint64_t)&v221);
  v16 = *v209;
  v17 = operator new();
  *(_QWORD *)v222 = 0;
  *(_QWORD *)&v222[8] = 0;
  v221 = (uint64_t (**)())v222;
  v18 = v214;
  if (v214 != (int *)v215)
  {
    do
    {
      sub_22331C988(&v221, (uint64_t *)v222, v18 + 8, (uint64_t)(v18 + 8));
      v40 = (int *)*((_QWORD *)v18 + 1);
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = *(int **)v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v41 = (int *)*((_QWORD *)v18 + 2);
          v42 = *(_QWORD *)v41 == (_QWORD)v18;
          v18 = v41;
        }
        while (!v42);
      }
      v18 = v41;
    }
    while (v41 != (int *)v215);
  }
  sub_223341E04(v17, v16, &v221, a3, v206);
  sub_223198030((uint64_t)&v221, *(_QWORD **)v222);
  v19 = *v208;
  *v208 = v17;
  if (v19)
  {
    v20 = sub_22331CC4C(v19);
    MEMORY[0x227684CE8](v20, 0x10B2C404AE8992ELL);
  }
  sub_2245030F0("CAPIDetectionOutputFwdNode", 0x1AuLL, *v209, 1, &v212);
  v21 = operator new();
  v22 = (char *)operator new(0x20uLL);
  strcpy(v22, "CAPIDetectionOutputFwdNode");
  v23 = v212;
  v24 = v213;
  v212 = 0;
  v213 = 0;
  *(_QWORD *)v21 = &off_24EC2C3C0;
  *(_QWORD *)(v21 + 8) = v22;
  *(_OWORD *)(v21 + 16) = xmmword_2245B8D70;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 40) = 0;
  *(_QWORD *)(v21 + 48) = 0;
  *(_QWORD *)(v21 + 56) = v23;
  *(_QWORD *)(v21 + 64) = v24;
  __p[0] = 0;
  __p[1] = 0;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    do
      v27 = __ldxr(v25);
    while (__stxr(v27 + 1, v25));
  }
  v28 = v232[0];
  v234[0] = v232[0];
  *(_QWORD *)((char *)v234 + 7) = *(_QWORD *)((char *)v232 + 7);
  *(_QWORD *)((char *)v233 + 7) = *(_QWORD *)((char *)v232 + 7);
  HIBYTE(v233[0]) = HIBYTE(v232[0]);
  v232[0] = 0;
  *(_QWORD *)((char *)v232 + 7) = 0;
  v235[0] = v28;
  *(_QWORD *)((char *)v235 + 7) = *(_QWORD *)((char *)v233 + 7);
  *(_QWORD *)((char *)v233 + 7) = 0;
  v233[0] = 0;
  if (v24)
  {
    v29 = (unint64_t *)&v24->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = operator new();
  *(_QWORD *)&v219 = v235[0];
  *(_QWORD *)((char *)&v219 + 7) = *(_QWORD *)((char *)v235 + 7);
  v235[0] = 0;
  *(_QWORD *)((char *)v235 + 7) = 0;
  *(_BYTE *)(v31 + 8) = 1;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_QWORD *)v31 = &off_24EC2C490;
  *(_QWORD *)(v31 + 16) = &unk_24EC2C508;
  *(_QWORD *)(v31 + 24) = &unk_24EC2C548;
  *(_QWORD *)(v31 + 63) = *(_QWORD *)((char *)&v219 + 7);
  v32 = v219;
  *(_QWORD *)(v31 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v31 + 56) = v32;
  *(_BYTE *)(v31 + 71) = 7;
  *(_QWORD *)&v219 = 0;
  *(_QWORD *)((char *)&v219 + 7) = 0;
  *(_QWORD *)(v31 + 72) = v23;
  *(_QWORD *)(v31 + 80) = v24;
  v33 = (_QWORD *)operator new();
  *v33 = &off_24EC2C640;
  *(_QWORD *)(v31 + 136) = 0;
  *(_QWORD *)(v31 + 88) = v33;
  *(_QWORD *)(v31 + 96) = v31 + 96;
  *(_QWORD *)(v31 + 104) = v31 + 96;
  *(_QWORD *)(v31 + 112) = 0;
  *(_QWORD *)(v31 + 120) = v31 + 120;
  *(_QWORD *)(v31 + 128) = v31 + 120;
  *(_QWORD *)(v31 + 144) = 0;
  if (!*(_QWORD *)(v31 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v34 = (std::__shared_weak_count *)operator new();
  v34->__shared_owners_ = 0;
  v35 = (unint64_t *)&v34->__shared_owners_;
  v34->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2CBC0;
  v34->__shared_weak_owners_ = 0;
  v34[1].__vftable = (std::__shared_weak_count_vtbl *)v31;
  v36 = *(std::__shared_weak_count **)(v31 + 40);
  if (v36)
  {
    if (v36->__shared_owners_ != -1)
      goto LABEL_40;
    do
      v37 = __ldxr(v35);
    while (__stxr(v37 + 1, v35));
    p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v39 = __ldxr(p_shared_weak_owners);
    while (__stxr(v39 + 1, p_shared_weak_owners));
    *(_QWORD *)(v31 + 32) = v31;
    *(_QWORD *)(v31 + 40) = v34;
    std::__shared_weak_count::__release_weak(v36);
  }
  else
  {
    do
      v43 = __ldxr(v35);
    while (__stxr(v43 + 1, v35));
    v44 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    *(_QWORD *)(v31 + 32) = v31;
    *(_QWORD *)(v31 + 40) = v34;
  }
  do
    v46 = __ldaxr(v35);
  while (__stlxr(v46 - 1, v35));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_40:
  v221 = &off_24EC2C3F0;
  strcpy(v222, "channel");
  *(_QWORD *)&v222[8] = v234[0];
  *(_QWORD *)&v222[15] = *(_QWORD *)((char *)v234 + 7);
  v222[23] = 7;
  v234[0] = 0;
  *(_QWORD *)((char *)v234 + 7) = 0;
  *(_QWORD *)v223 = 0x7974706D45;
  *(_QWORD *)&v223[8] = v219;
  *(_QWORD *)&v223[15] = *(_QWORD *)((char *)&v219 + 7);
  v223[23] = 5;
  *(_QWORD *)&v219 = 0;
  *(_QWORD *)((char *)&v219 + 7) = 0;
  *(_QWORD *)v224 = v23;
  *(_QWORD *)&v224[8] = v24;
  v47 = (unint64_t *)&v34->__shared_weak_owners_;
  *(_QWORD *)&v224[16] = v31;
  *(_QWORD *)&v224[24] = v34;
  do
    v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  v225 = &off_24EC2E3A0;
  v49 = (_QWORD *)operator new();
  *v49 = &off_24EC2CC10;
  v49[1] = v31;
  v49[2] = v34;
  *(_QWORD *)&v226 = v49;
  v50 = *(_QWORD *)&v224[16];
  v51 = *(_QWORD *)&v224[24];
  if (!*(_QWORD *)&v224[24])
  {
    *((_QWORD *)&v226 + 1) = *(_QWORD *)&v224[16];
    v227 = 0;
    if (*(_QWORD *)&v224[16])
      v55 = *(_QWORD *)&v224[16] + 16;
    else
      v55 = 0;
    goto LABEL_59;
  }
  v52 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
  do
    v53 = __ldxr(v52);
  while (__stxr(v53 + 1, v52));
  v54 = *(_QWORD *)&v224[24];
  *((_QWORD *)&v226 + 1) = v50;
  v227 = v51;
  if (*(_QWORD *)&v224[16])
    v55 = *(_QWORD *)&v224[16] + 16;
  else
    v55 = 0;
  if (!*(_QWORD *)&v224[24])
  {
    v50 = *(_QWORD *)&v224[16];
LABEL_59:
    v58 = 0;
    v228 = &off_24EC2C420;
    v229 = (unint64_t)v55;
    goto LABEL_60;
  }
  v56 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
  do
    v57 = __ldxr(v56);
  while (__stxr(v57 + 1, v56));
  v50 = *(_QWORD *)&v224[16];
  v58 = *(_QWORD *)&v224[24];
  v228 = &off_24EC2C420;
  *(_QWORD *)&v229 = v55;
  *((_QWORD *)&v229 + 1) = v54;
  if (*(_QWORD *)&v224[24])
  {
    v59 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
LABEL_60:
  if (v50)
    v61 = v50 + 24;
  else
    v61 = 0;
  v230 = &off_24EC2E850;
  *(_QWORD *)&v231 = v61;
  *((_QWORD *)&v231 + 1) = v58;
  v62 = operator new();
  *(_QWORD *)v62 = &off_24EC2C3F0;
  *(_OWORD *)(v62 + 8) = *(_OWORD *)v222;
  *(_QWORD *)(v62 + 24) = *(_QWORD *)&v222[16];
  memset(v222, 0, sizeof(v222));
  *(_OWORD *)(v62 + 32) = *(_OWORD *)v223;
  *(_QWORD *)(v62 + 48) = *(_QWORD *)&v223[16];
  memset(v223, 0, sizeof(v223));
  *(_OWORD *)(v62 + 56) = *(_OWORD *)v224;
  *(_QWORD *)v224 = 0;
  *(_QWORD *)&v224[8] = 0;
  *(_OWORD *)(v62 + 72) = *(_OWORD *)&v224[16];
  *(_QWORD *)&v224[16] = 0;
  *(_QWORD *)&v224[24] = 0;
  *(_QWORD *)(v62 + 88) = &off_24EC2E3A0;
  *(_OWORD *)(v62 + 96) = v226;
  v63 = v227;
  *((_QWORD *)&v226 + 1) = 0;
  v227 = 0;
  *(_QWORD *)(v62 + 112) = v63;
  *(_QWORD *)(v62 + 120) = &off_24EC2C420;
  *(_OWORD *)(v62 + 128) = v229;
  v229 = 0uLL;
  *(_QWORD *)&v226 = 0;
  *(_QWORD *)(v62 + 144) = &off_24EC2E850;
  *(_OWORD *)(v62 + 152) = v231;
  v231 = 0uLL;
  *(_QWORD *)(v21 + 72) = v62;
  sub_223326808((uint64_t)&v221);
  if (!v24)
    goto LABEL_264;
  v64 = (unint64_t *)&v24->__shared_owners_;
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 - 1, v64));
  if (!v65)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (*(_QWORD *)(v21 + 56))
      goto LABEL_71;
  }
  else
  {
LABEL_264:
    if (*(_QWORD *)(v21 + 56))
      goto LABEL_71;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_71:
  v66 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v67 = (unint64_t *)((char *)__p[1] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *a1;
  *a1 = v21;
  if (v69)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
    v21 = *a1;
  }
  v70 = *(_QWORD *)(*v208 + 72);
  v71 = *(_QWORD *)(v21 + 72);
  v221 = &off_24EC2E3A0;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v71 + 96) + 16))(v222);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v70 + 1464) + 16))(v70 + 1464, &v221);
  v72 = *(_QWORD *)v222;
  v221 = &off_24EC2E3A0;
  *(_QWORD *)v222 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = *(_QWORD *)(*a1 + 72);
  v74 = (_QWORD *)operator new();
  v74[1] = &off_24EC2DC10;
  v75 = v74 + 1;
  *v74 = &off_24EC2DB98;
  v74[2] = a1;
  v74[4] = v74 + 1;
  v221 = &off_24EC2C458;
  v76 = (_QWORD *)operator new();
  *v76 = &off_24EC2DB98;
  v77 = v76 + 1;
  v78 = v74[4];
  if (!v78)
    goto LABEL_83;
  if ((_QWORD *)v78 != v75)
  {
    v78 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v78 + 16))(v78, v77);
LABEL_83:
    v76[4] = v78;
    goto LABEL_85;
  }
  v76[4] = v77;
  (*(void (**)(_QWORD *))(*v75 + 24))(v75);
LABEL_85:
  *(_QWORD *)v222 = v76;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v73 + 120) + 16))(v73 + 120, &v221);
  v79 = *(_QWORD *)v222;
  v221 = &off_24EC2C458;
  *(_QWORD *)v222 = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  (*(void (**)(_QWORD *))(*v74 + 8))(v74);
  sub_224502FB8(*v209, "CAPIRemovedListFwdNode", 1, &v211);
  v80 = operator new();
  v81 = v211;
  v211 = 0;
  v220[0] = v81;
  __p[0] = v81;
  if (v81)
  {
    v82 = (std::__shared_weak_count *)operator new();
    v82->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E800;
    v82->__shared_owners_ = 0;
    v82->__shared_weak_owners_ = 0;
    v82[1].__vftable = (std::__shared_weak_count_vtbl *)v81;
  }
  else
  {
    v82 = 0;
  }
  v220[0] = 0;
  *(_QWORD *)v80 = &off_24EC2CC88;
  strcpy((char *)(v80 + 8), "CAPIRemovedListFwdNode");
  *(_BYTE *)(v80 + 31) = 22;
  *(_QWORD *)(v80 + 32) = 0;
  *(_QWORD *)(v80 + 40) = 0;
  *(_QWORD *)(v80 + 48) = 0;
  *(_QWORD *)(v80 + 56) = v81;
  *(_QWORD *)(v80 + 64) = v82;
  __p[0] = 0;
  __p[1] = 0;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
    do
      v85 = __ldxr(v83);
    while (__stxr(v85 + 1, v83));
  }
  v86 = v232[0];
  v234[0] = v232[0];
  *(_QWORD *)((char *)v234 + 7) = *(_QWORD *)((char *)v232 + 7);
  *(_QWORD *)((char *)v233 + 7) = *(_QWORD *)((char *)v232 + 7);
  HIBYTE(v233[0]) = HIBYTE(v232[0]);
  v232[0] = 0;
  *(_QWORD *)((char *)v232 + 7) = 0;
  v235[0] = v86;
  *(_QWORD *)((char *)v235 + 7) = *(_QWORD *)((char *)v233 + 7);
  *(_QWORD *)((char *)v233 + 7) = 0;
  v233[0] = 0;
  if (v82)
  {
    v87 = (unint64_t *)&v82->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  v89 = operator new();
  *(_QWORD *)&v219 = v235[0];
  *(_QWORD *)((char *)&v219 + 7) = *(_QWORD *)((char *)v235 + 7);
  v235[0] = 0;
  *(_QWORD *)((char *)v235 + 7) = 0;
  *(_BYTE *)(v89 + 8) = 1;
  *(_QWORD *)(v89 + 32) = 0;
  *(_QWORD *)(v89 + 40) = 0;
  *(_QWORD *)v89 = &off_24EC2CD58;
  *(_QWORD *)(v89 + 16) = &unk_24EC2CDD0;
  *(_QWORD *)(v89 + 24) = &unk_24EC2CE10;
  *(_QWORD *)(v89 + 63) = *(_QWORD *)((char *)&v219 + 7);
  v90 = v219;
  *(_QWORD *)(v89 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v89 + 56) = v90;
  *(_BYTE *)(v89 + 71) = 7;
  *(_QWORD *)&v219 = 0;
  *(_QWORD *)((char *)&v219 + 7) = 0;
  *(_QWORD *)(v89 + 72) = v81;
  *(_QWORD *)(v89 + 80) = v82;
  v91 = (_QWORD *)operator new();
  *v91 = &off_24EC2CEF8;
  *(_QWORD *)(v89 + 136) = 0;
  *(_QWORD *)(v89 + 88) = v91;
  *(_QWORD *)(v89 + 96) = v89 + 96;
  *(_QWORD *)(v89 + 104) = v89 + 96;
  *(_QWORD *)(v89 + 112) = 0;
  *(_QWORD *)(v89 + 120) = v89 + 120;
  *(_QWORD *)(v89 + 128) = v89 + 120;
  *(_QWORD *)(v89 + 144) = 0;
  if (!*(_QWORD *)(v89 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v92 = (std::__shared_weak_count *)operator new();
  v92->__shared_owners_ = 0;
  v93 = (unint64_t *)&v92->__shared_owners_;
  v92->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D3E8;
  v92->__shared_weak_owners_ = 0;
  v92[1].__vftable = (std::__shared_weak_count_vtbl *)v89;
  v94 = *(std::__shared_weak_count **)(v89 + 40);
  if (v94)
  {
    if (v94->__shared_owners_ != -1)
      goto LABEL_112;
    do
      v95 = __ldxr(v93);
    while (__stxr(v95 + 1, v93));
    v96 = (unint64_t *)&v92->__shared_weak_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    *(_QWORD *)(v89 + 32) = v89;
    *(_QWORD *)(v89 + 40) = v92;
    std::__shared_weak_count::__release_weak(v94);
  }
  else
  {
    do
      v98 = __ldxr(v93);
    while (__stxr(v98 + 1, v93));
    v99 = (unint64_t *)&v92->__shared_weak_owners_;
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
    *(_QWORD *)(v89 + 32) = v89;
    *(_QWORD *)(v89 + 40) = v92;
  }
  do
    v101 = __ldaxr(v93);
  while (__stlxr(v101 - 1, v93));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
    std::__shared_weak_count::__release_weak(v92);
  }
LABEL_112:
  v221 = &off_24EC2CCB8;
  strcpy(v222, "channel");
  *(_QWORD *)&v222[8] = v234[0];
  *(_QWORD *)&v222[15] = *(_QWORD *)((char *)v234 + 7);
  v222[23] = 7;
  v234[0] = 0;
  *(_QWORD *)((char *)v234 + 7) = 0;
  *(_QWORD *)v223 = 0x7974706D45;
  *(_QWORD *)&v223[8] = v219;
  *(_QWORD *)&v223[15] = *(_QWORD *)((char *)&v219 + 7);
  v223[23] = 5;
  *(_QWORD *)&v219 = 0;
  *(_QWORD *)((char *)&v219 + 7) = 0;
  *(_QWORD *)v224 = v81;
  *(_QWORD *)&v224[8] = v82;
  v102 = (unint64_t *)&v92->__shared_weak_owners_;
  *(_QWORD *)&v224[16] = v89;
  *(_QWORD *)&v224[24] = v92;
  do
    v103 = __ldxr(v102);
  while (__stxr(v103 + 1, v102));
  v225 = &off_24EC2E3A0;
  v104 = (_QWORD *)operator new();
  *v104 = &off_24EC2CC10;
  v104[1] = v89;
  v104[2] = v92;
  *(_QWORD *)&v226 = v104;
  v105 = *(_QWORD *)&v224[16];
  v106 = *(_QWORD *)&v224[24];
  if (!*(_QWORD *)&v224[24])
  {
    *((_QWORD *)&v226 + 1) = *(_QWORD *)&v224[16];
    v227 = 0;
    if (*(_QWORD *)&v224[16])
      v110 = *(_QWORD *)&v224[16] + 16;
    else
      v110 = 0;
    goto LABEL_131;
  }
  v107 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
  do
    v108 = __ldxr(v107);
  while (__stxr(v108 + 1, v107));
  v109 = *(_QWORD *)&v224[24];
  *((_QWORD *)&v226 + 1) = v105;
  v227 = v106;
  if (*(_QWORD *)&v224[16])
    v110 = *(_QWORD *)&v224[16] + 16;
  else
    v110 = 0;
  if (!*(_QWORD *)&v224[24])
  {
    v105 = *(_QWORD *)&v224[16];
LABEL_131:
    v113 = 0;
    v228 = &off_24EC2CCE8;
    v229 = (unint64_t)v110;
    goto LABEL_132;
  }
  v111 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
  do
    v112 = __ldxr(v111);
  while (__stxr(v112 + 1, v111));
  v105 = *(_QWORD *)&v224[16];
  v113 = *(_QWORD *)&v224[24];
  v228 = &off_24EC2CCE8;
  *(_QWORD *)&v229 = v110;
  *((_QWORD *)&v229 + 1) = v109;
  if (*(_QWORD *)&v224[24])
  {
    v114 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
  }
LABEL_132:
  if (v105)
    v116 = v105 + 24;
  else
    v116 = 0;
  v230 = &off_24EC2E850;
  *(_QWORD *)&v231 = v116;
  *((_QWORD *)&v231 + 1) = v113;
  v117 = operator new();
  *(_QWORD *)v117 = &off_24EC2CCB8;
  *(_OWORD *)(v117 + 8) = *(_OWORD *)v222;
  *(_QWORD *)(v117 + 24) = *(_QWORD *)&v222[16];
  memset(v222, 0, sizeof(v222));
  *(_OWORD *)(v117 + 32) = *(_OWORD *)v223;
  *(_QWORD *)(v117 + 48) = *(_QWORD *)&v223[16];
  memset(v223, 0, sizeof(v223));
  *(_OWORD *)(v117 + 56) = *(_OWORD *)v224;
  *(_QWORD *)v224 = 0;
  *(_QWORD *)&v224[8] = 0;
  *(_OWORD *)(v117 + 72) = *(_OWORD *)&v224[16];
  *(_QWORD *)&v224[16] = 0;
  *(_QWORD *)&v224[24] = 0;
  *(_QWORD *)(v117 + 88) = &off_24EC2E3A0;
  *(_OWORD *)(v117 + 96) = v226;
  v118 = v227;
  *((_QWORD *)&v226 + 1) = 0;
  v227 = 0;
  *(_QWORD *)(v117 + 112) = v118;
  *(_QWORD *)(v117 + 120) = &off_24EC2CCE8;
  *(_OWORD *)(v117 + 128) = v229;
  v229 = 0uLL;
  *(_QWORD *)&v226 = 0;
  *(_QWORD *)(v117 + 144) = &off_24EC2E850;
  *(_OWORD *)(v117 + 152) = v231;
  v231 = 0uLL;
  *(_QWORD *)(v80 + 72) = v117;
  sub_22332B320((uint64_t)&v221);
  if (!v82)
    goto LABEL_265;
  v119 = (unint64_t *)&v82->__shared_owners_;
  do
    v120 = __ldaxr(v119);
  while (__stlxr(v120 - 1, v119));
  if (!v120)
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    if (*(_QWORD *)(v80 + 56))
      goto LABEL_143;
  }
  else
  {
LABEL_265:
    if (*(_QWORD *)(v80 + 56))
      goto LABEL_143;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_143:
  v121 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v122 = (unint64_t *)((char *)__p[1] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = v220[0];
  if (v220[0])
  {
    v125 = *(uint64_t **)v220[0];
    *(_QWORD *)v220[0] = 0;
    if (v125)
      sub_22450297C(v124, v125);
    MEMORY[0x227684CE8](v124, 0x20C4093837F09);
  }
  v126 = a1[1];
  a1[1] = v80;
  if (v126)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
    v80 = a1[1];
  }
  v127 = *(_QWORD *)(*v208 + 72);
  v128 = *(_QWORD *)(v80 + 72);
  v221 = &off_24EC2E3A0;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v128 + 96) + 16))(v222);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v127 + 1464) + 16))(v127 + 1464, &v221);
  v129 = *(_QWORD *)v222;
  v221 = &off_24EC2E3A0;
  *(_QWORD *)v222 = 0;
  if (v129)
    (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
  v130 = *(_QWORD *)(a1[1] + 72);
  v131 = (_QWORD *)operator new();
  v131[1] = &off_24EC2DD18;
  v132 = v131 + 1;
  *v131 = &off_24EC2DCA0;
  v131[2] = a1;
  v131[4] = v131 + 1;
  v221 = &off_24EC2CD20;
  v133 = (_QWORD *)operator new();
  *v133 = &off_24EC2DCA0;
  v134 = v133 + 1;
  v135 = v131[4];
  if (!v135)
    goto LABEL_159;
  if ((_QWORD *)v135 != v132)
  {
    v135 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v135 + 16))(v135, v134);
LABEL_159:
    v133[4] = v135;
    goto LABEL_161;
  }
  v133[4] = v134;
  (*(void (**)(_QWORD *))(*v132 + 24))(v132);
LABEL_161:
  *(_QWORD *)v222 = v133;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v130 + 120) + 16))(v130 + 120, &v221);
  v136 = *(_QWORD *)v222;
  v221 = &off_24EC2CD20;
  *(_QWORD *)v222 = 0;
  if (v136)
    (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
  (*(void (**)(_QWORD *))(*v131 + 8))(v131);
  sub_224502FB8(*v209, "CAPISingleShotPlanesFwdNode", 1, &v210);
  v137 = operator new();
  v138 = (char *)operator new(0x20uLL);
  strcpy(v138, "CAPISingleShotPlanesFwdNode");
  v139 = v210;
  v210 = 0;
  v216 = v139;
  v205 = v138;
  sub_223197FA4(__p, v138, 0x1BuLL);
  *(_QWORD *)&v219 = v139;
  if (v139)
  {
    v140 = (std::__shared_weak_count *)operator new();
    v140->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E800;
    v140->__shared_owners_ = 0;
    v140->__shared_weak_owners_ = 0;
    v140[1].__vftable = (std::__shared_weak_count_vtbl *)v139;
  }
  else
  {
    v140 = 0;
  }
  *(_QWORD *)v137 = &off_24EC2D438;
  *(_OWORD *)(v137 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(v137 + 24) = v218;
  __p[1] = 0;
  v218 = 0;
  v216 = 0;
  __p[0] = 0;
  *(_QWORD *)(v137 + 32) = 0;
  *(_QWORD *)(v137 + 40) = 0;
  *(_QWORD *)(v137 + 48) = 0;
  *(_QWORD *)(v137 + 56) = v139;
  *(_QWORD *)(v137 + 64) = v140;
  v219 = 0uLL;
  if (v140)
  {
    v141 = (unint64_t *)&v140->__shared_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
    do
      v143 = __ldxr(v141);
    while (__stxr(v143 + 1, v141));
  }
  v144 = v220[0];
  v233[0] = v220[0];
  *(_QWORD *)((char *)v233 + 7) = *(_QWORD *)((char *)v220 + 7);
  *(_QWORD *)((char *)v232 + 7) = *(_QWORD *)((char *)v220 + 7);
  HIBYTE(v232[0]) = HIBYTE(v220[0]);
  v220[0] = 0;
  *(_QWORD *)((char *)v220 + 7) = 0;
  v234[0] = v144;
  *(_QWORD *)((char *)v234 + 7) = *(_QWORD *)((char *)v232 + 7);
  *(_QWORD *)((char *)v232 + 7) = 0;
  v232[0] = 0;
  if (v140)
  {
    v145 = (unint64_t *)&v140->__shared_owners_;
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
  }
  v147 = operator new();
  v235[0] = v234[0];
  *(_QWORD *)((char *)v235 + 7) = *(_QWORD *)((char *)v234 + 7);
  v234[0] = 0;
  *(_QWORD *)((char *)v234 + 7) = 0;
  *(_BYTE *)(v147 + 8) = 1;
  *(_QWORD *)(v147 + 32) = 0;
  *(_QWORD *)(v147 + 40) = 0;
  *(_QWORD *)v147 = &off_24EC2D508;
  *(_QWORD *)(v147 + 16) = &unk_24EC2D580;
  *(_QWORD *)(v147 + 24) = &unk_24EC2D5C0;
  *(_QWORD *)(v147 + 63) = *(_QWORD *)((char *)v235 + 7);
  v148 = v235[0];
  *(_QWORD *)(v147 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v147 + 56) = v148;
  *(_BYTE *)(v147 + 71) = 7;
  v235[0] = 0;
  *(_QWORD *)((char *)v235 + 7) = 0;
  *(_QWORD *)(v147 + 72) = v139;
  *(_QWORD *)(v147 + 80) = v140;
  v149 = (_QWORD *)operator new();
  *v149 = &off_24EC2D6A8;
  *(_QWORD *)(v147 + 136) = 0;
  *(_QWORD *)(v147 + 88) = v149;
  *(_QWORD *)(v147 + 96) = v147 + 96;
  *(_QWORD *)(v147 + 104) = v147 + 96;
  *(_QWORD *)(v147 + 112) = 0;
  *(_QWORD *)(v147 + 120) = v147 + 120;
  *(_QWORD *)(v147 + 128) = v147 + 120;
  *(_QWORD *)(v147 + 144) = 0;
  if (!*(_QWORD *)(v147 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v150 = (std::__shared_weak_count *)operator new();
  v150->__shared_owners_ = 0;
  v151 = (unint64_t *)&v150->__shared_owners_;
  v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2DB48;
  v150->__shared_weak_owners_ = 0;
  v150[1].__vftable = (std::__shared_weak_count_vtbl *)v147;
  v152 = *(std::__shared_weak_count **)(v147 + 40);
  if (v152)
  {
    if (v152->__shared_owners_ != -1)
      goto LABEL_188;
    do
      v153 = __ldxr(v151);
    while (__stxr(v153 + 1, v151));
    v154 = (unint64_t *)&v150->__shared_weak_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
    *(_QWORD *)(v147 + 32) = v147;
    *(_QWORD *)(v147 + 40) = v150;
    std::__shared_weak_count::__release_weak(v152);
  }
  else
  {
    do
      v156 = __ldxr(v151);
    while (__stxr(v156 + 1, v151));
    v157 = (unint64_t *)&v150->__shared_weak_owners_;
    do
      v158 = __ldxr(v157);
    while (__stxr(v158 + 1, v157));
    *(_QWORD *)(v147 + 32) = v147;
    *(_QWORD *)(v147 + 40) = v150;
  }
  do
    v159 = __ldaxr(v151);
  while (__stlxr(v159 - 1, v151));
  if (!v159)
  {
    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
    std::__shared_weak_count::__release_weak(v150);
  }
LABEL_188:
  v221 = &off_24EC2D468;
  strcpy(v222, "channel");
  *(_QWORD *)&v222[8] = v233[0];
  *(_QWORD *)&v222[15] = *(_QWORD *)((char *)v233 + 7);
  v222[23] = 7;
  v233[0] = 0;
  *(_QWORD *)((char *)v233 + 7) = 0;
  *(_QWORD *)v223 = 0x7974706D45;
  *(_QWORD *)&v223[8] = v235[0];
  *(_QWORD *)&v223[15] = *(_QWORD *)((char *)v235 + 7);
  v223[23] = 5;
  v235[0] = 0;
  *(_QWORD *)((char *)v235 + 7) = 0;
  *(_QWORD *)v224 = v139;
  *(_QWORD *)&v224[8] = v140;
  v160 = (unint64_t *)&v150->__shared_weak_owners_;
  *(_QWORD *)&v224[16] = v147;
  *(_QWORD *)&v224[24] = v150;
  do
    v161 = __ldxr(v160);
  while (__stxr(v161 + 1, v160));
  v225 = &off_24EC2E3A0;
  v162 = (_QWORD *)operator new();
  *v162 = &off_24EC2CC10;
  v162[1] = v147;
  v162[2] = v150;
  *(_QWORD *)&v226 = v162;
  v163 = *(_QWORD *)&v224[16];
  v164 = *(_QWORD *)&v224[24];
  if (!*(_QWORD *)&v224[24])
  {
    *((_QWORD *)&v226 + 1) = *(_QWORD *)&v224[16];
    v227 = 0;
    if (*(_QWORD *)&v224[16])
      v168 = *(_QWORD *)&v224[16] + 16;
    else
      v168 = 0;
    goto LABEL_207;
  }
  v165 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
  do
    v166 = __ldxr(v165);
  while (__stxr(v166 + 1, v165));
  v167 = *(_QWORD *)&v224[24];
  *((_QWORD *)&v226 + 1) = v163;
  v227 = v164;
  if (*(_QWORD *)&v224[16])
    v168 = *(_QWORD *)&v224[16] + 16;
  else
    v168 = 0;
  if (!*(_QWORD *)&v224[24])
  {
    v163 = *(_QWORD *)&v224[16];
LABEL_207:
    v171 = 0;
    v228 = &off_24EC2D498;
    v229 = (unint64_t)v168;
    goto LABEL_208;
  }
  v169 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
  do
    v170 = __ldxr(v169);
  while (__stxr(v170 + 1, v169));
  v163 = *(_QWORD *)&v224[16];
  v171 = *(_QWORD *)&v224[24];
  v228 = &off_24EC2D498;
  *(_QWORD *)&v229 = v168;
  *((_QWORD *)&v229 + 1) = v167;
  if (*(_QWORD *)&v224[24])
  {
    v172 = (unint64_t *)(*(_QWORD *)&v224[24] + 16);
    do
      v173 = __ldxr(v172);
    while (__stxr(v173 + 1, v172));
  }
LABEL_208:
  if (v163)
    v174 = v163 + 24;
  else
    v174 = 0;
  v230 = &off_24EC2E850;
  *(_QWORD *)&v231 = v174;
  *((_QWORD *)&v231 + 1) = v171;
  v175 = operator new();
  *(_QWORD *)v175 = &off_24EC2D468;
  *(_OWORD *)(v175 + 8) = *(_OWORD *)v222;
  *(_QWORD *)(v175 + 24) = *(_QWORD *)&v222[16];
  memset(v222, 0, sizeof(v222));
  *(_OWORD *)(v175 + 32) = *(_OWORD *)v223;
  *(_QWORD *)(v175 + 48) = *(_QWORD *)&v223[16];
  memset(v223, 0, sizeof(v223));
  *(_OWORD *)(v175 + 56) = *(_OWORD *)v224;
  *(_QWORD *)v224 = 0;
  *(_QWORD *)&v224[8] = 0;
  *(_OWORD *)(v175 + 72) = *(_OWORD *)&v224[16];
  *(_QWORD *)&v224[16] = 0;
  *(_QWORD *)&v224[24] = 0;
  *(_QWORD *)(v175 + 88) = &off_24EC2E3A0;
  *(_OWORD *)(v175 + 96) = v226;
  v176 = v227;
  *((_QWORD *)&v226 + 1) = 0;
  v227 = 0;
  *(_QWORD *)(v175 + 112) = v176;
  *(_QWORD *)(v175 + 120) = &off_24EC2D498;
  *(_OWORD *)(v175 + 128) = v229;
  v229 = 0uLL;
  *(_QWORD *)&v226 = 0;
  *(_QWORD *)(v175 + 144) = &off_24EC2E850;
  *(_OWORD *)(v175 + 152) = v231;
  v231 = 0uLL;
  v177 = v137;
  *(_QWORD *)(v137 + 72) = v175;
  sub_22332FB78((uint64_t)&v221);
  if (!v140)
    goto LABEL_266;
  v178 = (unint64_t *)&v140->__shared_owners_;
  do
    v179 = __ldaxr(v178);
  while (__stlxr(v179 - 1, v178));
  if (!v179)
  {
    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
    std::__shared_weak_count::__release_weak(v140);
    if (*(_QWORD *)(v137 + 56))
      goto LABEL_219;
  }
  else
  {
LABEL_266:
    if (*(_QWORD *)(v137 + 56))
      goto LABEL_219;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_219:
  v180 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (!*((_QWORD *)&v219 + 1))
    goto LABEL_223;
  v181 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
  do
    v182 = __ldaxr(v181);
  while (__stlxr(v182 - 1, v181));
  if (v182)
  {
LABEL_223:
    if ((SHIBYTE(v218) & 0x80000000) == 0)
      goto LABEL_225;
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
  std::__shared_weak_count::__release_weak(v180);
  if (SHIBYTE(v218) < 0)
LABEL_224:
    operator delete(__p[0]);
LABEL_225:
  v183 = (uint64_t)v216;
  if (v216)
  {
    v184 = *v216;
    *v216 = 0;
    if (v184)
      sub_22450297C(v183, v184);
    MEMORY[0x227684CE8](v183, 0x20C4093837F09);
  }
  operator delete(v205);
  v185 = a1[2];
  a1[2] = v137;
  if (v185)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
    v177 = a1[2];
  }
  v186 = *(_QWORD *)(*v208 + 72);
  v187 = *(_QWORD *)(v177 + 72);
  v221 = &off_24EC2E3A0;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v187 + 96) + 16))(v222);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v186 + 1464) + 16))(v186 + 1464, &v221);
  v188 = *(_QWORD *)v222;
  v221 = &off_24EC2E3A0;
  *(_QWORD *)v222 = 0;
  if (v188)
    (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
  v189 = *(_QWORD *)(a1[2] + 72);
  v190 = (_QWORD *)operator new();
  v190[1] = &off_24EC2DE20;
  v191 = v190 + 1;
  *v190 = &off_24EC2DDA8;
  v190[2] = a1;
  v190[4] = v190 + 1;
  v221 = &off_24EC2D4D0;
  v192 = (_QWORD *)operator new();
  *v192 = &off_24EC2DDA8;
  v193 = v192 + 1;
  v194 = v190[4];
  if (!v194)
  {
    v195 = (_DWORD *)v206;
    goto LABEL_237;
  }
  if ((_QWORD *)v194 != v191)
  {
    v194 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v194 + 16))(v194, v193);
    v195 = (_DWORD *)v206;
LABEL_237:
    v192[4] = v194;
    goto LABEL_241;
  }
  v192[4] = v193;
  (*(void (**)(_QWORD *))(*v191 + 24))(v191);
  v195 = (_DWORD *)v206;
LABEL_241:
  *(_QWORD *)v222 = v192;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v189 + 120) + 16))(v189 + 120, &v221);
  v196 = *(_QWORD *)v222;
  v221 = &off_24EC2D4D0;
  *(_QWORD *)v222 = 0;
  if (v196)
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  (*(void (**)(_QWORD *))(*v190 + 8))(v190);
  if (*v195)
    sub_223342DCC(*v208);
  v197 = v210;
  if (v210)
  {
    v198 = *v210;
    *v210 = 0;
    if (v198)
      sub_22450297C((uint64_t)v197, v198);
    MEMORY[0x227684CE8](v197, 0x20C4093837F09);
  }
  v199 = v211;
  if (v211)
  {
    v200 = *v211;
    *v211 = 0;
    if (v200)
      sub_22450297C((uint64_t)v199, v200);
    MEMORY[0x227684CE8](v199, 0x20C4093837F09);
  }
  v201 = v213;
  if (v213)
  {
    v202 = (unint64_t *)&v213->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  sub_223198030((uint64_t)&v214, v215[0]);
  return a1;
}

void sub_223319468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18, uint64_t *a19, uint64_t *a20,uint64_t **a21,uint64_t **a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,_QWORD *a28,uint64_t a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;
  uint64_t v54;
  void *v56;
  void *v57;
  void *v58;

  MEMORY[0x227684CE8](v54, 0x10A1C400AA0B987);
  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  sub_22331A3CC(&a21);
  sub_22331A3CC(&a22);
  sub_223167354((uint64_t)&a23);
  sub_223198030((uint64_t)&a27, a28);
  sub_22455C510(a11);
  sub_223167354(a12);
  sub_223167354(a13);
  sub_223167354(a14);
  sub_2231B888C(a18 + 5);
  sub_2232D885C(a20);
  sub_22331A2C8(a19);
  v56 = a18[2];
  a18[2] = 0;
  if (v56)
  {
    (*(void (**)(void *))(*(_QWORD *)v56 + 8))(v56);
    v57 = a18[1];
    a18[1] = 0;
    if (!v57)
    {
LABEL_3:
      v58 = *a18;
      *a18 = 0;
      if (!v58)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v57 = a18[1];
    a18[1] = 0;
    if (!v57)
      goto LABEL_3;
  }
  (*(void (**)(void *))(*(_QWORD *)v57 + 8))(v57);
  v58 = *a18;
  *a18 = 0;
  if (!v58)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
  _Unwind_Resume(a1);
}

uint64_t *sub_22331A2C8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_22331CC4C(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C404AE8992ELL);
  }
  return a1;
}

_QWORD *sub_22331A30C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2C458;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_22331A34C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2CD20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_22331A38C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2D4D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t ***sub_22331A3CC(uint64_t ***a1)
{
  uint64_t **v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      sub_22450297C((uint64_t)v2, v3);
    MEMORY[0x227684CE8](v2, 0x20C4093837F09);
  }
  return a1;
}

_QWORD *sub_22331A424(_QWORD *a1)
{
  _QWORD **v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_22334312C(a1[3]);
  v2 = *(_QWORD ***)(a1[3] + 72);
  (*(void (**)(_QWORD *))(*v2[9] + 64))(v2[9]);
  (*(void (**)(_QWORD *))(*v2[30] + 64))(v2[30]);
  (*(void (**)(_QWORD *))(*v2[51] + 64))(v2[51]);
  (*(void (**)(_QWORD *))(*v2[72] + 64))(v2[72]);
  (*(void (**)(_QWORD *))(*v2[93] + 64))(v2[93]);
  (*(void (**)(_QWORD *))(*v2[114] + 64))(v2[114]);
  (*(void (**)(_QWORD *))(*v2[135] + 64))(v2[135]);
  (*(void (**)(_QWORD *))(*v2[156] + 64))(v2[156]);
  (*(void (**)(_QWORD *))(*v2[177] + 64))(v2[177]);
  (*(void (**)(_QWORD *))(*v2[198] + 64))(v2[198]);
  (*(void (**)(_QWORD *))(*v2[219] + 64))(v2[219]);
  (*(void (**)(_QWORD *))(*v2[240] + 64))(v2[240]);
  (*(void (**)(_QWORD *))(*v2[261] + 64))(v2[261]);
  (*(void (**)(_QWORD *))(*v2[282] + 64))(v2[282]);
  (*(void (**)(_QWORD *))(*v2[303] + 64))(v2[303]);
  (*(void (**)(_QWORD *))(*v2[324] + 64))(v2[324]);
  v3 = *(_QWORD *)(*(_QWORD *)(*a1 + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  v4 = *(_QWORD *)(*(_QWORD *)(a1[1] + 72) + 72);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
  sub_22455C510((uint64_t)(a1 + 14));
  v5 = (std::__shared_weak_count *)a1[13];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)a1[11];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)a1[9];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = a1[5];
  if (v14)
  {
    v15 = a1[6];
    v16 = (void *)a1[5];
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 8);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = (void *)a1[5];
    }
    a1[6] = v14;
    operator delete(v16);
  }
  v20 = a1[4];
  a1[4] = 0;
  if (v20)
  {
    v21 = *(std::__shared_weak_count **)(v20 + 40);
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    sub_22323DFE4(v20 + 8, *(_QWORD *)(v20 + 16));
    MEMORY[0x227684CE8](v20, 0x1020C401722722ELL);
  }
  v24 = a1[3];
  a1[3] = 0;
  if (v24)
  {
    v25 = sub_22331CC4C(v24);
    MEMORY[0x227684CE8](v25, 0x10B2C404AE8992ELL);
  }
  v26 = a1[2];
  a1[2] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = a1[1];
  a1[1] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = *a1;
  *a1 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  return a1;
}

uint64_t sub_22331A784(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[2];
  void *__p[2];
  int v18;
  _OWORD v19[5];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *(_OWORD **)(a2 + 24);
  v5 = *(_OWORD **)(a2 + 32);
  if (v4 != v5)
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)__p = 0u;
    v18 = 1065353216;
    do
    {
      v19[0] = *v4;
      v7 = v4[1];
      v8 = v4[2];
      v9 = v4[4];
      v19[3] = v4[3];
      v19[4] = v9;
      v19[1] = v7;
      v19[2] = v8;
      sub_223330000((uint64_t)v16, (uint64_t)v19, (uint64_t)v19);
      v4 += 5;
    }
    while (v4 != v5);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 1600) + 16))(*(_QWORD *)(v6 + 72) + 1600, v16);
    v10 = __p[0];
    if (__p[0])
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    v12 = v16[0];
    v16[0] = 0;
    if (v12)
      operator delete(v12);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) + 760;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2 + 48);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) + 2440;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2 + 8);
  return 1;
}

void sub_22331A8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22322E828((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22331A8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, _QWORD *__p)
{
  _QWORD *v12;
  _QWORD *v13;

  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  if (!a9)
    _Unwind_Resume(exception_object);
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22331A914(uint64_t a1, const void ***a2, CFTypeRef *a3)
{
  const void **v3;
  const void **v4;
  uint64_t v5;
  char *v6;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  const std::error_category *v29;
  CFTypeRef v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _BYTE v36[24];
  void *__p;
  char *v38;
  char *v39;
  CFTypeRef cf;
  std::__shared_weak_count *v41;
  std::error_condition v42;

  v4 = *a2;
  v3 = a2[1];
  v38 = 0;
  v39 = 0;
  __p = 0;
  v5 = (char *)v3 - (char *)v4;
  if (v3 == v4)
  {
LABEL_24:
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 72) + 1768;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 16))(v24, &__p);
    v25 = 1;
    v26 = (char *)__p;
    if (__p)
      goto LABEL_25;
    return v25;
  }
  if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF9)
    sub_22316E078();
  __p = operator new(2 * v5);
  v38 = (char *)__p;
  v39 = (char *)__p + 16 * (v5 >> 3);
  while (1)
  {
    v7 = *v4;
    if (!*v4)
      break;
    v8 = CFUUIDGetTypeID();
    if (CFGetTypeID(v7) != v8)
      break;
    *(CFUUIDBytes *)v36 = CFUUIDGetUUIDBytes((CFUUIDRef)v7);
    v9 = sub_22453331C((uint64_t)v36);
    v11 = v9;
    v12 = v10;
    v13 = v38;
    if (v38 >= v39)
    {
      v14 = __p;
      v15 = (v38 - (_BYTE *)__p) >> 4;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60)
        sub_22316E078();
      v17 = v39 - (_BYTE *)__p;
      if ((v39 - (_BYTE *)__p) >> 3 > v16)
        v16 = v17 >> 3;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 60)
          sub_223174E94();
        v19 = (char *)operator new(16 * v18);
        v20 = (uint64_t *)&v19[16 * v15];
        *v20 = v11;
        v20[1] = v12;
        v21 = (char *)v20;
        if (v13 == v14)
          goto LABEL_18;
        do
        {
LABEL_21:
          *((_OWORD *)v21 - 1) = *((_OWORD *)v13 - 1);
          v21 -= 16;
          v13 -= 2;
        }
        while (v13 != v14);
        v13 = __p;
        v23 = &v19[16 * v18];
        v6 = (char *)(v20 + 2);
        __p = v21;
        v38 = (char *)(v20 + 2);
        v39 = v23;
        if (!v13)
          goto LABEL_5;
      }
      else
      {
        v19 = 0;
        v20 = (uint64_t *)(16 * v15);
        *v20 = v11;
        v20[1] = v10;
        v21 = (char *)(16 * v15);
        if (v13 != v14)
          goto LABEL_21;
LABEL_18:
        v22 = &v19[16 * v18];
        v6 = (char *)(v20 + 2);
        __p = v21;
        v38 = (char *)(v20 + 2);
        v39 = v22;
        if (!v13)
          goto LABEL_5;
      }
      operator delete(v13);
      goto LABEL_5;
    }
    *(_QWORD *)v38 = v9;
    v13[1] = v10;
    v6 = (char *)(v13 + 2);
LABEL_5:
    v38 = v6;
    if (++v4 == v3)
      goto LABEL_24;
  }
  v36[23] = 20;
  strcpy(v36, "Invalid surface uuid");
  v28 = (char *)operator new(0x70uLL);
  strcpy(v28, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
  if (a3)
  {
    v29 = std::generic_category();
    *(_QWORD *)&v42.__val_ = 22;
    v42.__cat_ = v29;
    sub_2245321DC(&v42, (uint64_t)v36, (CFErrorRef *)&cf);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v30 = cf;
    if (cf)
      CFRetain(cf);
    *a3 = v30;
    v31 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  operator delete(v28);
  if ((v36[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v36);
    v25 = 0;
    v26 = (char *)__p;
    if (!__p)
      return v25;
  }
  else
  {
    v25 = 0;
    v26 = (char *)__p;
    if (!__p)
      return v25;
  }
LABEL_25:
  v38 = v26;
  operator delete(v26);
  return v25;
}

void sub_22331AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  operator delete(v24);
  if (a20 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(a1);
}

BOOL sub_22331ACBC(uint64_t a1, __CFData *a2, CFTypeRef *a3)
{
  int v5;
  void **v6;
  CFIndex v7;
  char *v8;
  const std::error_category *v9;
  CFErrorRef v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const std::error_category *v14;
  CFErrorRef v15;
  unint64_t *p_shared_owners;
  const std::error_category *v17;
  CFErrorRef v18;
  unint64_t *v19;
  char *v21;
  char __p[18];
  char v23;
  void *v24[2];
  unsigned __int8 v25;
  unsigned __int8 v26;
  CFErrorRef v27;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  sub_223343448(*(_QWORD *)(a1 + 24), (uint64_t)v24);
  v5 = v26;
  if (v26)
  {
    if ((v25 & 0x80u) == 0)
      v6 = v24;
    else
      v6 = (void **)v24[0];
    if ((v25 & 0x80u) == 0)
      v7 = v25;
    else
      v7 = (CFIndex)v24[1];
    CFDataAppendBytes(a2, (const UInt8 *)v6, v7);
    goto LABEL_42;
  }
  if (LODWORD(v24[0]) == 1)
  {
    v23 = 17;
    strcpy(__p, "Invalid processor");
    v8 = (char *)operator new(0x70uLL);
    v21 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
    if (!a3)
      goto LABEL_40;
    v14 = std::generic_category();
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = v14;
    sub_2245321DC(&v29, (uint64_t)__p, &v27);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v15 = v27;
    if (v27)
      CFRetain(v27);
    *a3 = v15;
    v11 = v28;
    if (!v28)
      goto LABEL_39;
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    goto LABEL_37;
  }
  if (!LODWORD(v24[0]))
  {
    v23 = 10;
    strcpy(__p, "IO failure");
    v8 = (char *)operator new(0x70uLL);
    v21 = v8;
    strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
    if (!a3)
      goto LABEL_40;
    v9 = std::generic_category();
    *(_QWORD *)&v29.__val_ = 22;
    v29.__cat_ = v9;
    sub_2245321DC(&v29, (uint64_t)__p, &v27);
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
    v10 = v27;
    if (v27)
      CFRetain(v27);
    *a3 = v10;
    v11 = v28;
    if (!v28)
      goto LABEL_39;
    v12 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    goto LABEL_37;
  }
  v23 = 15;
  strcpy(__p, "Unknown failure");
  v8 = (char *)operator new(0x70uLL);
  v21 = v8;
  strcpy(v8, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
  if (!a3)
    goto LABEL_40;
  v17 = std::generic_category();
  *(_QWORD *)&v29.__val_ = 22;
  v29.__cat_ = v17;
  sub_2245321DC(&v29, (uint64_t)__p, &v27);
  if (*a3)
    CFRelease(*a3);
  *a3 = 0;
  v18 = v27;
  if (v27)
    CFRetain(v27);
  *a3 = v18;
  v11 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v13 = __ldaxr(v19);
    while (__stlxr(v13 - 1, v19));
LABEL_37:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_39:
  v8 = v21;
LABEL_40:
  operator delete(v8);
  if (v23 < 0)
    operator delete(*(void **)__p);
LABEL_42:
  if (v26 && (char)v25 < 0)
    operator delete(v24[0]);
  return v5 != 0;
}

void sub_22331B018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;

  operator delete(v26);
  if (a18 < 0)
    operator delete(__p);
  if (a26)
  {
    if (a25 < 0)
      operator delete(a20);
  }
  _Unwind_Resume(a1);
}

BOOL sub_22331B094(uint64_t a1, CFDataRef theData, CFTypeRef *a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  CFTypeRef v17;
  unint64_t *p_shared_owners;
  CFTypeRef v19;
  unint64_t *v20;
  CFTypeRef v21;
  unint64_t *v22;
  char *v24;
  char __p[18];
  char v26;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  std::error_condition v29;

  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  v8 = Length;
  v9 = *(_QWORD *)(a1 + 24);
  if (!BytePtr
    && Length
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_22334386C(v9, v8, (uint64_t)BytePtr);
  v11 = v10 & 0xFF00000000;
  if ((v10 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v10 == 2)
    {
      v26 = 17;
      strcpy(__p, "Invalid processor");
      v12 = (char *)operator new(0x70uLL);
      v24 = v12;
      strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
      if (!a3)
        goto LABEL_46;
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v17 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v17;
      v14 = v28;
      if (!v28)
        goto LABEL_45;
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
    }
    else if ((_DWORD)v10 == 1)
    {
      v26 = 10;
      strcpy(__p, "Bad format");
      v12 = (char *)operator new(0x70uLL);
      v24 = v12;
      strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
      if (!a3)
        goto LABEL_46;
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v19 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v19;
      v14 = v28;
      if (!v28)
        goto LABEL_45;
      v20 = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(v20);
      while (__stlxr(v16 - 1, v20));
    }
    else if ((_DWORD)v10)
    {
      v26 = 15;
      strcpy(__p, "Unknown failure");
      v12 = (char *)operator new(0x70uLL);
      v24 = v12;
      strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
      if (!a3)
        goto LABEL_46;
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v21 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v21;
      v14 = v28;
      if (!v28)
      {
LABEL_45:
        v12 = v24;
LABEL_46:
        operator delete(v12);
        if (v26 < 0)
          operator delete(*(void **)__p);
        return v11 == 0;
      }
      v22 = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(v22);
      while (__stlxr(v16 - 1, v22));
    }
    else
    {
      v26 = 10;
      strcpy(__p, "IO failure");
      v12 = (char *)operator new(0x70uLL);
      v24 = v12;
      strcpy(v12, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/Session.cpp");
      if (!a3)
        goto LABEL_46;
      *(_QWORD *)&v29.__val_ = 22;
      v29.__cat_ = std::generic_category();
      sub_2245321DC(&v29, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v13 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v13;
      v14 = v28;
      if (!v28)
        goto LABEL_45;
      v15 = (unint64_t *)&v28->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
    }
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_45;
  }
  return v11 == 0;
}

void sub_22331B4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_22331B548()
{
  JUMPOUT(0x22331B530);
}

void sub_22331B550()
{
  JUMPOUT(0x22331B530);
}

void sub_22331B558()
{
  JUMPOUT(0x22331B530);
}

void sub_22331B560()
{
  JUMPOUT(0x22331B530);
}

uint64_t sub_22331B568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  __int128 *v34;
  void **v35;
  __int128 *v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  void *v40;
  void *v41;
  __int128 *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  __int128 *v65;
  int v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  int v72;
  void *v73;
  uint64_t v74;
  __int128 v75;
  void *v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  void *v92;
  __int128 v93;
  __int128 v94;
  void **v95;
  void *v96;
  void *v97;
  int v99;
  int v100;
  _DWORD *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  _DWORD *v108;
  _DWORD *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  int v120;
  unsigned __int8 *v121;
  char *v122;
  int v123;
  char *v124;
  unsigned __int8 *v125;
  unsigned __int8 v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v132;
  char *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int i;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  int v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  int v155;
  char *v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t __len;
  _OWORD v161[2];
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE v165[24];
  uint64_t v166;

  if (a1 != a2)
  {
    sub_22333045C((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    sub_223330660((_QWORD *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
    v4 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a2 + 48);
    v5 = *(_QWORD *)(a2 + 56);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 64) - v4) >> 4) >= v7)
    {
      v13 = *(_QWORD *)(a1 + 56);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v4) >> 4) >= v7)
      {
        if (v6 != v5)
        {
          v21 = (uint64_t *)(v4 + 24);
          v22 = (uint64_t *)(v6 + 32);
          do
          {
            v23 = v22 - 4;
            v24 = *((_DWORD *)v22 - 6);
            *(v21 - 3) = *(v22 - 4);
            v25 = v21 - 3;
            *((_DWORD *)v25 + 2) = v24;
            v26 = *(uint64_t *)((char *)v22 - 20);
            *((_DWORD *)v25 + 5) = *((_DWORD *)v22 - 3);
            *(uint64_t *)((char *)v25 + 12) = v26;
            if (v21 - 3 != v22 - 4)
              sub_2233310CC(v21, *(v22 - 1), *v22, 0xCCCCCCCCCCCCCCCDLL * ((*v22 - *(v22 - 1)) >> 4));
            v4 += 48;
            v21 += 6;
            v22 += 6;
          }
          while (v23 + 6 != (uint64_t *)v5);
          v13 = *(_QWORD *)(a1 + 56);
        }
        while (v13 != v4)
        {
          v28 = *(_QWORD *)(v13 - 24);
          if (v28)
          {
            v29 = *(_QWORD *)(v13 - 16);
            v27 = *(void **)(v13 - 24);
            if (v29 != v28)
            {
              do
              {
                if (*(_BYTE *)(v29 - 8))
                {
                  v30 = *(_QWORD **)(v29 - 40);
                  if (v30)
                  {
                    do
                    {
                      v31 = (_QWORD *)*v30;
                      operator delete(v30);
                      v30 = v31;
                    }
                    while (v31);
                  }
                  v32 = *(void **)(v29 - 56);
                  *(_QWORD *)(v29 - 56) = 0;
                  if (v32)
                    operator delete(v32);
                }
                v29 -= 80;
              }
              while (v29 != v28);
              v27 = *(void **)(v13 - 24);
            }
            *(_QWORD *)(v13 - 16) = v28;
            operator delete(v27);
          }
          v13 -= 48;
        }
        *(_QWORD *)(a1 + 56) = v4;
LABEL_40:
        sub_223331ABC((uint64_t *)(a1 + 72), *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80), 0x34F72C234F72C235 * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 4));
        sub_223332C3C(a1 + 96, *(uint64_t **)(a2 + 96), *(uint64_t **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
        v33 = *(_QWORD *)(a1 + 136);
        v35 = (void **)(a1 + 120);
        v34 = *(__int128 **)(a1 + 120);
        v37 = *(_QWORD *)(a2 + 120);
        v36 = *(__int128 **)(a2 + 128);
        v38 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v36 - v37) >> 3);
        if (0x2E8BA2E8BA2E8BA3 * ((v33 - (uint64_t)v34) >> 3) >= v38)
        {
          v42 = *(__int128 **)(a1 + 128);
          if (0x2E8BA2E8BA2E8BA3 * (((char *)v42 - (char *)v34) >> 3) >= v38)
          {
            if ((__int128 *)v37 == v36)
            {
              v48 = *(__int128 **)(a1 + 120);
            }
            else
            {
              v48 = *(__int128 **)(a1 + 120);
              do
              {
                v49 = *(_OWORD *)v37;
                v50 = *(_OWORD *)(v37 + 16);
                v51 = *(_OWORD *)(v37 + 48);
                v34[2] = *(_OWORD *)(v37 + 32);
                v34[3] = v51;
                *v34 = v49;
                v34[1] = v50;
                if ((__int128 *)v37 != v34)
                  sub_2233334B4((uint64_t)(v34 + 4), *(_QWORD *)(v37 + 64), *(char **)(v37 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 72) - *(_QWORD *)(v37 + 64)) >> 3));
                v37 += 88;
                v34 = (__int128 *)((char *)v34 + 88);
                v48 = (__int128 *)((char *)v48 + 88);
              }
              while ((__int128 *)v37 != v36);
              v42 = *(__int128 **)(a1 + 128);
            }
            while (v42 != v48)
            {
              v58 = (void *)*((_QWORD *)v42 - 3);
              if (v58)
              {
                *((_QWORD *)v42 - 2) = v58;
                operator delete(v58);
              }
              v42 = (__int128 *)((char *)v42 - 88);
            }
            *(_QWORD *)(a1 + 128) = v48;
            goto LABEL_78;
          }
          v43 = (__int128 *)(v37 + 8 * (((char *)v42 - (char *)v34) >> 3));
          if (v42 != v34)
          {
            v44 = 8 * (((char *)v42 - (char *)v34) >> 3);
            do
            {
              v45 = *(_OWORD *)v37;
              v46 = *(_OWORD *)(v37 + 16);
              v47 = *(_OWORD *)(v37 + 48);
              v34[2] = *(_OWORD *)(v37 + 32);
              v34[3] = v47;
              *v34 = v45;
              v34[1] = v46;
              if ((__int128 *)v37 != v34)
                sub_2233334B4((uint64_t)(v34 + 4), *(_QWORD *)(v37 + 64), *(char **)(v37 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v37 + 72) - *(_QWORD *)(v37 + 64)) >> 3));
              v37 += 88;
              v34 = (__int128 *)((char *)v34 + 88);
              v44 -= 88;
            }
            while (v44);
            v34 = *(__int128 **)(a1 + 128);
          }
          v57 = sub_223333274(a1 + 136, v43, v36, (uint64_t)v34);
        }
        else
        {
          if (v34)
          {
            v39 = *(__int128 **)(a1 + 128);
            v40 = *(void **)(a1 + 120);
            if (v39 != v34)
            {
              do
              {
                v41 = (void *)*((_QWORD *)v39 - 3);
                if (v41)
                {
                  *((_QWORD *)v39 - 2) = v41;
                  operator delete(v41);
                }
                v39 = (__int128 *)((char *)v39 - 88);
              }
              while (v39 != v34);
              v40 = *v35;
            }
            *(_QWORD *)(a1 + 128) = v34;
            operator delete(v40);
            v33 = 0;
            *v35 = 0;
            *(_QWORD *)(a1 + 128) = 0;
            *(_QWORD *)(a1 + 136) = 0;
          }
          if (v38 > 0x2E8BA2E8BA2E8BALL)
            goto LABEL_254;
          v52 = 0x2E8BA2E8BA2E8BA3 * (v33 >> 3);
          v53 = 2 * v52;
          if (2 * v52 <= v38)
            v53 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v36 - v37) >> 3);
          v54 = v52 >= 0x1745D1745D1745DLL ? 0x2E8BA2E8BA2E8BALL : v53;
          if (v54 > 0x2E8BA2E8BA2E8BALL)
LABEL_254:
            sub_223323BA8();
          v55 = 88 * v54;
          v56 = (char *)operator new(88 * v54);
          *(_QWORD *)(a1 + 120) = v56;
          *(_QWORD *)(a1 + 128) = v56;
          *(_QWORD *)(a1 + 136) = &v56[v55];
          v57 = sub_223333274(a1 + 136, (__int128 *)v37, v36, (uint64_t)v56);
        }
        *(_QWORD *)(a1 + 128) = v57;
LABEL_78:
        sub_22333045C((_QWORD *)(a1 + 144), *(char **)(a2 + 144), *(char **)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 2));
        goto LABEL_79;
      }
      v14 = v6 + 16 * ((v13 - v4) >> 4);
      if (v13 != v4)
      {
        v15 = (uint64_t *)(v4 + 24);
        v16 = (uint64_t *)(v6 + 32);
        do
        {
          v17 = v16 - 4;
          v18 = *((_DWORD *)v16 - 6);
          *(v15 - 3) = *(v16 - 4);
          v19 = v15 - 3;
          *((_DWORD *)v19 + 2) = v18;
          v20 = *(uint64_t *)((char *)v16 - 20);
          *((_DWORD *)v19 + 5) = *((_DWORD *)v16 - 3);
          *(uint64_t *)((char *)v19 + 12) = v20;
          if (v15 - 3 != v16 - 4)
            sub_2233310CC(v15, *(v16 - 1), *v16, 0xCCCCCCCCCCCCCCCDLL * ((*v16 - *(v16 - 1)) >> 4));
          v15 += 6;
          v16 += 6;
        }
        while (v17 + 6 != (uint64_t *)v14);
        v4 = *(_QWORD *)(a1 + 56);
      }
      v12 = sub_2233308A8(v14, v5, v4);
    }
    else
    {
      sub_2233307D8((void **)(a1 + 48));
      if (v7 > 0x555555555555555)
        goto LABEL_253;
      v8 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 48)) >> 4);
      if (v8 <= v7)
        v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 4);
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 48)) >> 4) >= 0x2AAAAAAAAAAAAAALL
         ? 0x555555555555555
         : v8;
      if (v9 > 0x555555555555555)
LABEL_253:
        sub_223323BA8();
      v10 = 48 * v9;
      v11 = (char *)operator new(48 * v9);
      *(_QWORD *)(a1 + 48) = v11;
      *(_QWORD *)(a1 + 56) = v11;
      *(_QWORD *)(a1 + 64) = &v11[v10];
      v12 = sub_2233308A8(v6, v5, (uint64_t)v11);
    }
    *(_QWORD *)(a1 + 56) = v12;
    goto LABEL_40;
  }
LABEL_79:
  v59 = *(_OWORD *)(a2 + 168);
  v60 = *(_OWORD *)(a2 + 184);
  v61 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v61;
  *(_OWORD *)(a1 + 184) = v60;
  *(_OWORD *)(a1 + 168) = v59;
  v62 = (_DWORD *)(a1 + 232);
  v63 = (_DWORD *)(a2 + 232);
  if (*(unsigned __int8 *)(a1 + 304) == *(unsigned __int8 *)(a2 + 304))
  {
    if (*(_BYTE *)(a1 + 304))
    {
      if (*(_QWORD *)(a1 + 272)
        && *v63 == *v62
        && *(_DWORD *)(a2 + 236) == *(_DWORD *)(a1 + 236)
        && *(_DWORD *)(a2 + 240) == *(_DWORD *)(a1 + 240)
        && *(_DWORD *)(a2 + 244) == *(_DWORD *)(a1 + 244))
      {
        *(_QWORD *)&v161[0] = a2 + 232;
        *((_QWORD *)&v161[0] + 1) = a1 + 232;
        sub_223333960((size_t *)v161);
        v64 = a1 + 312;
        v65 = (__int128 *)(a2 + 312);
        v66 = *(unsigned __int8 *)(a1 + 384);
        if (v66 != *(unsigned __int8 *)(a2 + 384))
          goto LABEL_110;
LABEL_97:
        if (!v66)
          goto LABEL_114;
        if (*(_QWORD *)(a1 + 352)
          && *(_DWORD *)v65 == *(_DWORD *)v64
          && *(_DWORD *)(a2 + 316) == *(_DWORD *)(a1 + 316)
          && *(_DWORD *)(a2 + 320) == *(_DWORD *)(a1 + 320)
          && *(_DWORD *)(a2 + 324) == *(_DWORD *)(a1 + 324))
        {
          *(_QWORD *)&v161[0] = v65;
          *((_QWORD *)&v161[0] + 1) = v64;
          sub_223333960((size_t *)v161);
          v70 = a1 + 392;
          v71 = (unsigned int *)(a2 + 392);
          v72 = *(unsigned __int8 *)(a1 + 480);
          if (v72 == *(unsigned __int8 *)(a2 + 480))
            goto LABEL_115;
          goto LABEL_134;
        }
        v161[0] = *v65;
        *(_OWORD *)((char *)v161 + 12) = *(__int128 *)((char *)v65 + 12);
        sub_223333C70((uint64_t)&v162, a2 + 344);
        *(_OWORD *)v64 = v161[0];
        *(_OWORD *)(v64 + 12) = *(_OWORD *)((char *)v161 + 12);
        *(_OWORD *)(a1 + 368) = *(_OWORD *)v165;
        *(_QWORD *)(a1 + 344) = v162;
        v73 = *(void **)(a1 + 352);
        if (v73)
          free(v73);
        v74 = v164;
        *(_QWORD *)(a1 + 352) = v163;
        *(_QWORD *)(a1 + 360) = v74;
        v70 = a1 + 392;
        v71 = (unsigned int *)(a2 + 392);
        v72 = *(unsigned __int8 *)(a1 + 480);
        if (v72 != *(unsigned __int8 *)(a2 + 480))
          goto LABEL_134;
        goto LABEL_115;
      }
      v161[0] = *(_OWORD *)v63;
      *(_OWORD *)((char *)v161 + 12) = *(_OWORD *)(a2 + 244);
      sub_223333C70((uint64_t)&v162, a2 + 264);
      *(_OWORD *)v62 = v161[0];
      *(_OWORD *)(a1 + 244) = *(_OWORD *)((char *)v161 + 12);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)v165;
      *(_QWORD *)(a1 + 264) = v162;
      v68 = *(void **)(a1 + 272);
      if (v68)
        free(v68);
      v69 = v164;
      *(_QWORD *)(a1 + 272) = v163;
      *(_QWORD *)(a1 + 280) = v69;
    }
    v64 = a1 + 312;
    v65 = (__int128 *)(a2 + 312);
    v66 = *(unsigned __int8 *)(a1 + 384);
    if (v66 == *(unsigned __int8 *)(a2 + 384))
      goto LABEL_97;
  }
  else
  {
    if (*(_BYTE *)(a1 + 304))
    {
      v67 = *(void **)(a1 + 272);
      if (v67)
        free(v67);
      *(_QWORD *)(a1 + 272) = 0;
      *(_BYTE *)(a1 + 304) = 0;
      v64 = a1 + 312;
      v65 = (__int128 *)(a2 + 312);
      v66 = *(unsigned __int8 *)(a1 + 384);
      if (v66 != *(unsigned __int8 *)(a2 + 384))
        goto LABEL_110;
      goto LABEL_97;
    }
    v75 = *(_OWORD *)v63;
    *(_OWORD *)(a1 + 244) = *(_OWORD *)(a2 + 244);
    *(_OWORD *)v62 = v75;
    sub_223333C70(a1 + 264, a2 + 264);
    *(_BYTE *)(a1 + 304) = 1;
    v64 = a1 + 312;
    v65 = (__int128 *)(a2 + 312);
    v66 = *(unsigned __int8 *)(a1 + 384);
    if (v66 == *(unsigned __int8 *)(a2 + 384))
      goto LABEL_97;
  }
LABEL_110:
  if (v66)
  {
    v76 = *(void **)(a1 + 352);
    if (v76)
      free(v76);
    *(_QWORD *)(a1 + 352) = 0;
    *(_BYTE *)(a1 + 384) = 0;
LABEL_114:
    v70 = a1 + 392;
    v71 = (unsigned int *)(a2 + 392);
    v72 = *(unsigned __int8 *)(a1 + 480);
    if (v72 == *(unsigned __int8 *)(a2 + 480))
      goto LABEL_115;
LABEL_134:
    if (v72)
    {
      v92 = *(void **)(a1 + 440);
      if (v92)
        free(v92);
      *(_QWORD *)(a1 + 440) = 0;
      *(_BYTE *)(a1 + 480) = 0;
    }
    else
    {
      v93 = *(_OWORD *)v71;
      v94 = *((_OWORD *)v71 + 1);
      *(_QWORD *)(v70 + 32) = *((_QWORD *)v71 + 4);
      *(_OWORD *)v70 = v93;
      *(_OWORD *)(v70 + 16) = v94;
      sub_223333E00(a1 + 432, a2 + 432);
      *(_BYTE *)(a1 + 480) = 1;
    }
    goto LABEL_139;
  }
  v91 = *v65;
  *(_OWORD *)(v64 + 12) = *(__int128 *)((char *)v65 + 12);
  *(_OWORD *)v64 = v91;
  sub_223333C70(a1 + 344, a2 + 344);
  *(_BYTE *)(a1 + 384) = 1;
  v70 = a1 + 392;
  v71 = (unsigned int *)(a2 + 392);
  v72 = *(unsigned __int8 *)(a1 + 480);
  if (v72 != *(unsigned __int8 *)(a2 + 480))
    goto LABEL_134;
LABEL_115:
  if (!v72)
    goto LABEL_139;
  v77 = *(_DWORD **)(a1 + 440);
  if (!v77
    || (v78 = *v71, (_DWORD)v78 != *(_DWORD *)v70)
    || (v79 = *(_DWORD *)(a2 + 396), v79 != *(_DWORD *)(a1 + 396))
    || (v80 = *(_DWORD *)(a2 + 400), v80 != *(_DWORD *)(a1 + 400))
    || (v81 = *(unsigned int *)(a2 + 404), (_DWORD)v81 != *(_DWORD *)(a1 + 404))
    || (v158 = *(unsigned int *)(a2 + 408), (_DWORD)v158 != *(_DWORD *)(a1 + 408))
    || (v82 = *(unsigned int *)(a2 + 412), (_DWORD)v82 != *(_DWORD *)(a1 + 412)))
  {
    v86 = *((_OWORD *)v71 + 1);
    v161[0] = *(_OWORD *)v71;
    v161[1] = v86;
    v162 = *((_QWORD *)v71 + 4);
    sub_223333E00((uint64_t)&v163, a2 + 432);
    v87 = v161[1];
    *(_OWORD *)v70 = v161[0];
    *(_OWORD *)(v70 + 16) = v87;
    v88 = v163;
    *(_QWORD *)(v70 + 32) = v162;
    *(_OWORD *)(a1 + 456) = *(_OWORD *)&v165[8];
    *(_QWORD *)(a1 + 472) = v166;
    *(_QWORD *)(a1 + 432) = v88;
    v89 = *(void **)(a1 + 440);
    if (v89)
      free(v89);
    v90 = *(_QWORD *)v165;
    *(_QWORD *)(a1 + 440) = v164;
    *(_QWORD *)(a1 + 448) = v90;
    goto LABEL_139;
  }
  if ((_DWORD)v81 != 1)
  {
    if (!(_DWORD)v78 || !v79 || !v80)
      goto LABEL_139;
    v99 = v78 - 1;
    v100 = v79 - 1;
    v101 = *(_DWORD **)(a2 + 440);
    v102 = v80 - 1;
    if (v102)
    {
      if (!v100)
      {
        if (v99)
        {
          v137 = 0;
          v138 = 4 * v82;
          do
          {
            v139 = 0;
            v140 = v99;
            do
            {
              v77[v139] = v101[v139];
              v139 += v81;
              --v140;
            }
            while (v140);
            v77[v139] = v101[v139];
            v101 = (_DWORD *)((char *)v101 + v138);
            v77 = (_DWORD *)((char *)v77 + v138);
            ++v137;
          }
          while (v137 != v102);
LABEL_215:
          if (v99)
          {
            v141 = 0;
            v142 = 4 * v81;
            do
            {
              *(_DWORD *)((char *)v77 + v141) = *(_DWORD *)((char *)v101 + v141);
              v141 += v142;
              --v99;
            }
            while (v99);
            v101 = (_DWORD *)((char *)v101 + v141);
            v77 = (_DWORD *)((char *)v77 + v141);
          }
          goto LABEL_252;
        }
        v146 = 0;
        do
        {
          v77[v146] = v101[v146];
          v146 += v82;
          --v102;
        }
        while (v102);
LABEL_251:
        v101 = (_DWORD *)((char *)v101 + v146 * 4);
        v77 = (_DWORD *)((char *)v77 + v146 * 4);
LABEL_252:
        *v77 = *v101;
        goto LABEL_139;
      }
      v103 = 4 * v82;
      v104 = 4 * v158;
      if (!v99)
      {
        for (i = 0; i != v102; ++i)
        {
          v144 = 0;
          v145 = v100;
          do
          {
            *(_DWORD *)((char *)v77 + v144) = *(_DWORD *)((char *)v101 + v144);
            v144 += v104;
            --v145;
          }
          while (v145);
          *(_DWORD *)((char *)v77 + v144) = *(_DWORD *)((char *)v101 + v144);
          v101 = (_DWORD *)((char *)v101 + v103);
          v77 = (_DWORD *)((char *)v77 + v103);
        }
LABEL_223:
        v146 = 0;
        do
        {
          v77[v146] = v101[v146];
          v146 += v158;
          --v100;
        }
        while (v100);
        goto LABEL_251;
      }
      v105 = 0;
      v106 = 4 * v81;
      do
      {
        v107 = 0;
        v108 = v77;
        v109 = v101;
        do
        {
          v110 = 0;
          v111 = v99;
          do
          {
            *(_DWORD *)((char *)v108 + v110) = *(_DWORD *)((char *)v109 + v110);
            v110 += v106;
            --v111;
          }
          while (v111);
          *(_DWORD *)((char *)v108 + v110) = *(_DWORD *)((char *)v109 + v110);
          v109 = (_DWORD *)((char *)v109 + v104);
          v108 = (_DWORD *)((char *)v108 + v104);
          ++v107;
        }
        while (v107 != v100);
        v112 = 0;
        v113 = v99;
        do
        {
          *(_DWORD *)((char *)v108 + v112) = *(_DWORD *)((char *)v109 + v112);
          v112 += v106;
          --v113;
        }
        while (v113);
        *(_DWORD *)((char *)v108 + v112) = *(_DWORD *)((char *)v109 + v112);
        v101 = (_DWORD *)((char *)v101 + v103);
        v77 = (_DWORD *)((char *)v77 + v103);
        ++v105;
      }
      while (v105 != v102);
    }
    if (!v100)
      goto LABEL_215;
    if (v99)
    {
      v114 = 0;
      v115 = 4 * v158;
      do
      {
        v116 = 0;
        v117 = v99;
        do
        {
          v77[v116] = v101[v116];
          v116 += v81;
          --v117;
        }
        while (v117);
        v77[v116] = v101[v116];
        v101 = (_DWORD *)((char *)v101 + v115);
        v77 = (_DWORD *)((char *)v77 + v115);
        ++v114;
      }
      while (v114 != v100);
      goto LABEL_215;
    }
    goto LABEL_223;
  }
  if ((_DWORD)v158 == (_DWORD)v78)
  {
    v83 = (v78 * v79);
    if ((_DWORD)v82 == (_DWORD)v83)
    {
      v84 = (v80 * v82);
      v85 = *(const void **)(a2 + 440);
      if (!(_DWORD)v84 || v85)
      {
        if (!(_DWORD)v84)
          goto LABEL_139;
        goto LABEL_209;
      }
      if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        v77 = *(_DWORD **)(a1 + 440);
LABEL_209:
        memmove(v77, v85, 4 * v84);
        goto LABEL_139;
      }
LABEL_246:
      abort();
    }
    if (v80 && v79 && (_DWORD)v78)
    {
      v133 = *(char **)(a2 + 440);
      v134 = v80 - 1;
      if (v80 != 1)
      {
        if (!(_DWORD)v83)
          goto LABEL_139;
        v135 = 0;
        v136 = 4 * v82;
        do
        {
          if (!&v133[v135]
            && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_246;
          }
          memmove((char *)v77 + v135, &v133[v135], 4 * v83);
          v135 += v136;
          --v134;
        }
        while (v134);
        v133 += v135;
        v77 = (_DWORD *)((char *)v77 + v135);
      }
      if (!(_DWORD)v83 || v133)
      {
        if (!(_DWORD)v83)
          goto LABEL_139;
      }
      else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_246;
      }
      memmove(v77, v133, 4 * v83);
    }
  }
  else if ((_DWORD)v78 && v79 && v80)
  {
    v118 = *(char **)(a2 + 440);
    __len = 4 * v78;
    v119 = 4 * v158;
    v157 = v80 - 1;
    v159 = v79 - 1;
    if (v80 != 1)
    {
      v154 = 4 * v82;
      if (v79 != 1)
      {
        v120 = 0;
        v121 = (unsigned __int8 *)&qword_255795680;
        while (1)
        {
          v155 = v120;
          v123 = 0;
          v156 = v118;
          v122 = v118;
          v124 = (char *)v77;
          do
          {
            while (v122)
            {
              memmove(v124, v122, __len);
              v122 += v119;
              v124 += v119;
              if (++v123 == v159)
                goto LABEL_179;
            }
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v125 = v121;
            v126 = atomic_load(v121);
            if ((v126 & 1) == 0 && __cxa_guard_acquire((__guard *)v121))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release((__guard *)v121);
            }
            if (byte_255795670)
              v127 = byte_255795678 == 0;
            else
              v127 = 0;
            if (!v127)
            {
              v128 = qword_255795648;
              v129 = qword_255795650;
              while (v128 != v129)
              {
                v131 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v128;
                v130 = *(_QWORD *)(v128 + 8);
                v128 += 16;
                v131(v130, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v121 = v125;
            v132 = atomic_load(v125);
            if ((v132 & 1) == 0 && __cxa_guard_acquire((__guard *)v125))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release((__guard *)v125);
            }
            v119 = 4 * v158;
            if (!byte_255795670)
              goto LABEL_246;
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v124, 0, __len);
            v124 += 4 * v158;
            ++v123;
            v122 = (char *)(4 * v158);
          }
          while (v123 != v159);
          v122 = (char *)(4 * v158);
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_246;
          }
LABEL_179:
          memmove(v124, v122, __len);
          v118 = &v156[v154];
          v77 = (_DWORD *)((char *)v77 + v154);
          v120 = v155 + 1;
          if (v155 + 1 == v157)
            goto LABEL_232;
        }
      }
      v147 = 0;
      do
      {
        v148 = v118;
        v149 = &v118[v147];
        if (!v149
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_246;
        }
        memmove((char *)v77 + v147, v149, __len);
        v147 += v154;
        v127 = v157-- == 1;
        v118 = v148;
      }
      while (!v127);
      v118 = &v148[v147];
      v77 = (_DWORD *)((char *)v77 + v147);
    }
LABEL_232:
    v150 = v159;
    if (v159)
    {
      v151 = 0;
      do
      {
        v152 = v118;
        v153 = &v118[v151];
        if (!v153
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          goto LABEL_246;
        }
        memmove((char *)v77 + v151, v153, __len);
        v151 += v119;
        --v150;
        v118 = v152;
      }
      while (v150);
      v118 = &v152[v151];
      v77 = (_DWORD *)((char *)v77 + v151);
    }
    if (!v118
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_246;
    }
    memmove(v77, v118, __len);
  }
LABEL_139:
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  v95 = (void **)(a1 + 496);
  if (*(unsigned __int8 *)(a1 + 544) == *(unsigned __int8 *)(a2 + 544))
  {
    if (a1 != a2 && *(_BYTE *)(a1 + 544))
    {
      sub_2231984D0((_QWORD *)(a1 + 496), *(char **)(a2 + 496), *(char **)(a2 + 504), (uint64_t)(*(_QWORD *)(a2 + 504) - *(_QWORD *)(a2 + 496)) >> 4);
      sub_2231984D0((_QWORD *)(a1 + 520), *(char **)(a2 + 520), *(char **)(a2 + 528), (uint64_t)(*(_QWORD *)(a2 + 528) - *(_QWORD *)(a2 + 520)) >> 4);
    }
  }
  else if (*(_BYTE *)(a1 + 544))
  {
    v96 = *(void **)(a1 + 520);
    if (v96)
    {
      *(_QWORD *)(a1 + 528) = v96;
      operator delete(v96);
    }
    v97 = *v95;
    if (*v95)
    {
      *(_QWORD *)(a1 + 504) = v97;
      operator delete(v97);
    }
    *(_BYTE *)(a1 + 544) = 0;
  }
  else
  {
    sub_223323948((_QWORD *)(a1 + 496), a2 + 496);
    *(_BYTE *)(a1 + 544) = 1;
  }
  return a1;
}

void sub_22331C6F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

void sub_22331C700(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

void sub_22331C708(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

void sub_22331C710(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 56) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_22331C718(int a1, char *__s, const char *a3)
{
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  void *__p[2];
  unint64_t v18;
  std::string __dst;

  v5 = strlen(__s);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_8:
    memcpy(p_dst, __s, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  v10 = strlen(a3);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __p[1] = v11;
    v18 = v14 | 0x8000000000000000;
    __p[0] = v12;
  }
  else
  {
    HIBYTE(v18) = v10;
    v12 = __p;
    if (!v10)
      goto LABEL_17;
  }
  memcpy(v12, a3, (size_t)v11);
LABEL_17:
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  v15 = atomic_load((unsigned __int8 *)&qword_255795348);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_255795348))
  {
    __cxa_atexit((void (*)(void *))nullsub_599, &off_2540CA630, &dword_22314D000);
    __cxa_guard_release(&qword_255795348);
  }
  sub_223ED5C84(&__dst, (uint64_t)__p, (uint64_t)&off_2540CA630);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 1;
LABEL_22:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return 1;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_22;
  return 1;
}

void sub_22331C8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_22331C928(uint64_t a1)
{
  sub_22331A424((_QWORD *)(a1 + 8));
  return a1;
}

void sub_22331C950(uint64_t a1)
{
  sub_22331A424((_QWORD *)(a1 + 8));
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331C988(_QWORD **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v6 = sub_22331CA98(a1, a2, &v18, &v17, a3);
  if (*v6)
    return *v6;
  v8 = v6;
  v9 = (char *)operator new(0xB0uLL);
  v10 = v9;
  *((_DWORD *)v9 + 8) = *(_DWORD *)a4;
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a4 + 8);
  v11 = *(_OWORD *)(a4 + 64);
  *((_OWORD *)v9 + 5) = *(_OWORD *)(a4 + 48);
  *((_OWORD *)v9 + 6) = v11;
  *((_QWORD *)v9 + 14) = *(_QWORD *)(a4 + 80);
  v12 = *(_OWORD *)(a4 + 32);
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v9 + 4) = v12;
  v9[120] = 0;
  v9[168] = 0;
  if (*(_BYTE *)(a4 + 136))
  {
    v13 = *(_OWORD *)(a4 + 104);
    *(_OWORD *)(v9 + 120) = *(_OWORD *)(a4 + 88);
    *(_OWORD *)(v9 + 136) = v13;
    *(_OWORD *)(v9 + 152) = *(_OWORD *)(a4 + 120);
    v9[168] = 1;
  }
  v14 = v18;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v14;
  *v8 = (uint64_t)v9;
  v15 = (_QWORD *)**a1;
  v16 = (uint64_t *)v9;
  if (v15)
  {
    *a1 = v15;
    v16 = (uint64_t *)*v8;
  }
  sub_2231A9A8C(a1[1], v16);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return (uint64_t)v10;
}

uint64_t *sub_22331CA98(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

uint64_t sub_22331CC4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24EC2DEE8;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_22331CDA8(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C40F8F0D7BCLL);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_22331CDA8(v7);
    MEMORY[0x227684CE8](v8, 0x10B2C40F8F0D7BCLL);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22331CD84(uint64_t a1)
{
  sub_22331CC4C(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331CDA8(uint64_t a1)
{
  sub_22331CE44(a1 + 2520);
  sub_22331D338(a1 + 2352);
  sub_22331D5E4(a1 + 2184);
  sub_22331DAB0(a1 + 2016);
  sub_22331DF7C(a1 + 1848);
  sub_22331E448(a1 + 1680);
  sub_22331E6F4(a1 + 1512);
  sub_22331E9A0(a1 + 1344);
  sub_22331F08C(a1 + 1176);
  sub_22331F4B8(a1 + 1008);
  sub_22331F764(a1 + 840);
  sub_22331FA10(a1 + 672);
  sub_22331FCBC(a1 + 504);
  sub_22331FF68(a1 + 336);
  sub_223320214(a1 + 168);
  return sub_2233204C0(a1);
}

uint64_t sub_22331CE44(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E798;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E7C8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331D028(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E850;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331D060(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E888;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331D098(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E7C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331D0D8(uint64_t a1)
{
  sub_22331CE44(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331D0FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E850;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331D144(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22331D1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22331D1E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E888;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331D230(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22331D2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22331D2D4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E7C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331D324(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331D338(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E730;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E760;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331D51C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E760;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331D55C(uint64_t a1)
{
  sub_22331D338(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331D580(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E760;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331D5D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331D5E4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E690;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E6C0;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2DF48;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331D7C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E6C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331D800(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2DF48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331D840(uint64_t a1)
{
  sub_22331D5E4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331D864(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E6C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331D8AC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2E6F8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2E6F8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22331D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22331D9AC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E6F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331D9EC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E6F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331DA3C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_22331DA4C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2DF48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331DA9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331DAB0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E5B8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E620;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E5E8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331DC94(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E620;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331DCCC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E5E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331DD0C(uint64_t a1)
{
  sub_22331DAB0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331DD30(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E620;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331DD78(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2E658;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2E658;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22331DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22331DE78(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E658;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331DEB8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E658;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331DF08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_22331DF18(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E5E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331DF68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331DF7C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E4E0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E548;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E510;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331E160(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E548;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331E198(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E510;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331E1D8(uint64_t a1)
{
  sub_22331DF7C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331E1FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E548;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331E244(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2E580;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2E580;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22331E318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22331E344(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E580;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331E384(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E580;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331E3D4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_22331E3E4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E510;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331E434(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331E448(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E478;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E4A8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331E62C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E4A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331E66C(uint64_t a1)
{
  sub_22331E448(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331E690(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E4A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331E6E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331E6F4(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E410;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E440;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331E8D8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E440;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331E918(uint64_t a1)
{
  sub_22331E6F4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331E93C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E440;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331E98C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331E9A0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E338;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E3D8;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E368;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E1C8;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331EB84(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E3D8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331EBBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E368;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331EBF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E1C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331EC34(uint64_t a1)
{
  sub_22331E9A0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331EC58(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E3D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331ECA0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2DEB0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2DEB0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22331ED74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22331EDA0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2DEB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331EDE0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2DEB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331EE30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_22331EE40(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E368;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331EE88(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2E3A0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2E3A0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22331EF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_22331EF88(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E3A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331EFC8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E3A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331F018(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_22331F028(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E1C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331F078(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331F08C(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E2D0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E190;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E300;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331F270(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2E190;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_22331F2A8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E300;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331F2E8(uint64_t a1)
{
  sub_22331F08C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331F30C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2E190;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22331F354(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2E1C8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2E1C8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22331F428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22331F454(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E300;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331F4A4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331F4B8(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E268;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E190;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E298;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331F69C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E298;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331F6DC(uint64_t a1)
{
  sub_22331F4B8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331F700(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E298;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331F750(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331F764(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E200;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E190;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E230;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331F948(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E230;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331F988(uint64_t a1)
{
  sub_22331F764(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331F9AC(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E230;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331F9FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331FA10(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E128;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E190;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E158;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331FBF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E158;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331FC34(uint64_t a1)
{
  sub_22331FA10(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331FC58(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E158;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331FCA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331FCBC(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E0C0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E0F0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22331FEA0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E0F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22331FEE0(uint64_t a1)
{
  sub_22331FCBC(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22331FF04(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E0F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22331FF54(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_22331FF68(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2E058;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E088;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22332014C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E088;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_22332018C(uint64_t a1)
{
  sub_22331FF68(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233201B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E088;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223320200(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_223320214(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2DFF0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2E888;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E020;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_2233203F8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E020;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223320438(uint64_t a1)
{
  sub_223320214(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22332045C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2E020;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233204AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_2233204C0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2DF18;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2DF80;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2DF48;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_2233206A4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2DF80;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233206DC(uint64_t a1)
{
  sub_2233204C0(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223320700(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2DF80;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223320748(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2DFB8;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2DFB8;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22332081C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223320848(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2DFB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_223320888(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2DFB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233208D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_2233208EC(uint64_t a1)
{
  sub_2233269EC(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223320914(uint64_t a1)
{
  sub_223326808(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223320938(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2C420;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223320970(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2C420;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_2233209B8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2C458;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2C458;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223320A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223320AB8(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2C458;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223320B08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223320B1C(uint64_t a1)
{
  sub_2233224F8(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223320B40(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    sub_2233226F8(&v52, a2);
    v65 = 0;
    v48 = (char *)operator new(0x80uLL);
    *(_QWORD *)v48 = &off_24EC2C7F0;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v51;
    *((_QWORD *)v48 + 3) = v52;
    *((_OWORD *)v48 + 2) = v53;
    *((_QWORD *)v48 + 6) = v54;
    v53 = 0uLL;
    *(_OWORD *)(v48 + 56) = v55;
    *((_QWORD *)v48 + 9) = v56;
    v54 = 0;
    v55 = 0uLL;
    v56 = 0;
    *((_OWORD *)v48 + 5) = v57;
    *((_QWORD *)v48 + 12) = v58;
    v57 = 0uLL;
    *(_OWORD *)(v48 + 104) = v59;
    *((_QWORD *)v48 + 15) = v60;
    v58 = 0;
    v59 = 0uLL;
    v60 = 0;
    v65 = (__int128 *)v48;
    sub_2245022E4(*v25, (uint64_t)&v63);
    v49 = v65;
    if (v65 == &v63)
    {
      v50 = 4;
      v49 = &v63;
    }
    else
    {
      if (!v65)
      {
LABEL_58:
        sub_223322918(&v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
  v6 = v4 + 1;
  sub_2233226F8(&v4[1].__vftable, a2);
  v61 = v4 + 1;
  v62 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v63 = v10;
  *((_QWORD *)&v63 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_22324A974();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v63;
    if (!(_QWORD)v63)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v63;
  if ((_QWORD)v63)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v63 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v63 = v38;
      *((_QWORD *)&v63 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v63 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24EC2C6E0;
  *(_OWORD *)(v43 + 8) = v63;
  v63 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v64 = 0;
  v65 = 0;
  v67 = v43;
  sub_2245022E4(*v34, (uint64_t)v66);
  v44 = v67;
  if (v67 == v66)
  {
    v45 = 4;
    v44 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v62)
  {
    v46 = &v62->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_223320FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a30;
  if (a30 == v30)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
    {
      sub_223322814((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  sub_223322814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22332103C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223321134(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223321144(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_223321150(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223321160(_QWORD *a1, _QWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::runtime_error v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  _QWORD *v94;
  __int128 *v95;
  _QWORD v96[3];
  std::string v97;
  std::string *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v93 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v93 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v94 = v67;
    v95 = v70;
    sub_2231A9820((uint64_t)&v93, (uint64_t)v96, 0, 0, &v97);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v97;
    else
      v71 = (std::string *)v97.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v90, (const char *)v71);
    v90.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v90);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v73, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C870;
    v6[1].__vftable = *a3;
    v88 = v6 + 1;
    v89 = v6;
    v86 = v6 + 1;
    v87 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x80uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
    v11 = v9 + 1;
    sub_2233226F8(&v9[1].__vftable, a2);
    v91 = v9 + 1;
    v92 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v93 = v15;
    *((_QWORD *)&v93 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v93 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v93 = v43;
            *((_QWORD *)&v93 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v93 = 0uLL;
          }
        }
        v48 = v86;
        v49 = v87;
        v86 = 0;
        v87 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC2C8C0;
        *(_OWORD *)(v50 + 8) = v93;
        v93 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v94 = 0;
        v95 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v96[0] = 0;
        v96[1] = 0;
        v98 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v97);
        v51 = v98;
        if (v98 == &v97)
        {
          v52 = 4;
          v51 = &v97;
        }
        else
        {
          if (!v98)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v92)
        {
          v53 = &v92->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (v87)
        {
          v55 = &v87->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if (v89)
        {
          v57 = &v89->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v74[0] = v34;
      v74[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  sub_2233226F8(&v75, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C870;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v84 = &v59[1].__vftable;
  v85 = v59;
  v95 = 0;
  v60 = (char *)operator new(0x90uLL);
  *(_QWORD *)v60 = &off_24EC2C940;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v60 + 3) = v75;
  *((_OWORD *)v60 + 2) = v76;
  *((_QWORD *)v60 + 6) = v77;
  v76 = 0uLL;
  *(_OWORD *)(v60 + 56) = v78;
  *((_QWORD *)v60 + 9) = v79;
  v77 = 0;
  v78 = 0uLL;
  v79 = 0;
  *((_OWORD *)v60 + 5) = v80;
  *((_QWORD *)v60 + 12) = v81;
  v80 = 0uLL;
  *(_OWORD *)(v60 + 104) = v82;
  v61 = v83;
  v81 = 0;
  v82 = 0uLL;
  v83 = 0;
  *((_QWORD *)v60 + 15) = v61;
  *((_QWORD *)v60 + 16) = v59 + 1;
  *((_QWORD *)v60 + 17) = v59;
  v84 = 0;
  v85 = 0;
  v95 = (__int128 *)v60;
  sub_2245022E4(*v30, (uint64_t)&v93);
  v62 = v95;
  if (v95 == &v93)
  {
    v63 = 4;
    v62 = &v93;
  }
  else
  {
    if (!v95)
      goto LABEL_72;
    v63 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v62 + 8 * v63))(v62);
LABEL_72:
  v64 = v85;
  if (v85)
  {
    v65 = (unint64_t *)&v85->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_223322918(&v75);
}

void sub_223321830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,std::exception_ptr a31)
{
  std::__assoc_sub_state **v31;
  uint64_t v32;
  std::__assoc_sub_state *v33;
  std::exception_ptr v34;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v33 = *v31;
    if (*v31)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v32 - 160), &a31);
      v34.__ptr_ = (void *)(v32 - 160);
      std::__assoc_sub_state::set_exception(v33, v34);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v32 - 160));
      std::exception_ptr::~exception_ptr(&a31);
      std::runtime_error::~runtime_error(&a30);
      if (*(char *)(v32 - 81) < 0)
        operator delete(*(void **)(v32 - 104));
      JUMPOUT(0x223321744);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_2233218A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,std::exception_ptr a31)
{
  uint64_t v31;

  std::exception_ptr::~exception_ptr(&a31);
  std::runtime_error::~runtime_error(&a30);
  if (*(char *)(v31 - 81) < 0)
  {
    operator delete(*(void **)(v31 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2233218F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_2233241D0(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_2233241D0(&a9);
  _Unwind_Resume(a1);
}

void sub_22332194C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;

  sub_223322918(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223321980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v29 - 80);
  if (v31 == v28)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 104);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  sub_22332429C((_QWORD *)(v29 - 160));
  sub_223167354(v29 - 176);
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_223321A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::__shared_weak_count *v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_223321A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_223321A64(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223321AD8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC2C9C0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2C458;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223321C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223321C7C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2CA40;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223321D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223321DF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2CAC0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223322008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2233220D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2CB40;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2233222E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233223B0(uint64_t a1)
{
  return sub_2233224F8(a1 - 16);
}

void sub_2233223B8(uint64_t a1)
{
  sub_2233224F8(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233223E0(uint64_t a1, uint64_t a2)
{
  return sub_223321AD8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2233223E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_223321DF0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2233223F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2233220D0((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2233223F8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_223322400(uint64_t a1)
{
  return sub_2233224F8(a1 - 24);
}

void sub_223322408(uint64_t a1)
{
  sub_2233224F8(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223322430(uint64_t a1)
{
  return sub_223321C7C((_QWORD *)(a1 - 24));
}

uint64_t sub_223322438(uint64_t a1)
{
  return a1 - 24;
}

void sub_223322444()
{
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223322458@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = operator new(0x30uLL);
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = 0;
  *v5 = &off_24EC26D20;
  v5[4] = 0;
  v5[5] = 0;
  result = sub_22324A664((uint64_t)(v5 + 3), v3, v4, 0x34F72C234F72C235 * ((v4 - v3) >> 4));
  *a2 = v5 + 3;
  a2[1] = v5;
  return result;
}

void sub_2233224E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_2233224F8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC2C490;
  *(_QWORD *)(a1 + 16) = &unk_24EC2C508;
  *(_QWORD *)(a1 + 24) = &unk_24EC2C548;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_2233226F8(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_22324A664((uint64_t)(a1 + 1), a2[1], a2[2], 0x34F72C234F72C235 * ((uint64_t)(a2[2] - a2[1]) >> 4));
  sub_223323948(a1 + 4, (uint64_t)(a2 + 4));
  sub_223323A4C(a1 + 10, a2 + 10);
  return a1;
}

void sub_223322788(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v5 = (void *)v1[7];
  if (v5)
  {
    v1[8] = v5;
    operator delete(v5);
    v6 = *v3;
    if (!*v3)
    {
LABEL_3:
      v7 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[5] = v6;
  operator delete(v6);
  v7 = *v2;
  if (!*v2)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v8 = v1[2];
  v9 = v7;
  if ((void *)v8 != v7)
  {
    do
    {
      v8 -= 464;
      sub_22324A5A0(v8);
    }
    while ((void *)v8 != v7);
    v9 = *v2;
  }
  v1[2] = v7;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223322814(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_223322918((_QWORD *)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

std::mutex ***sub_223322848(std::mutex ***a1)
{
  std::mutex **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::unlock(*v2);
    MEMORY[0x227684CE8](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_223322894(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_2233228CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233228DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332290C(uint64_t a1)
{
  return sub_223322918((_QWORD *)(a1 + 24));
}

_QWORD *sub_223322918(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v2 = a1[10];
  if (v2)
  {
    v3 = a1[11];
    v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        v6 = *(void **)(v3 - 48);
        if (v6)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v7 = *(_QWORD *)(v3 - 72);
        if (v7)
        {
          v8 = *(_QWORD *)(v3 - 64);
          v5 = *(void **)(v3 - 72);
          if (v8 != v7)
          {
            v9 = *(_QWORD *)(v3 - 64);
            do
            {
              v11 = *(void **)(v9 - 24);
              v9 -= 24;
              v10 = v11;
              if (v11)
              {
                *(_QWORD *)(v8 - 16) = v10;
                operator delete(v10);
              }
              v8 = v9;
            }
            while (v9 != v7);
            v5 = *(void **)(v3 - 72);
          }
          *(_QWORD *)(v3 - 64) = v7;
          operator delete(v5);
        }
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  v12 = (void *)a1[7];
  if (v12)
  {
    a1[8] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[4];
  if (v13)
  {
    a1[5] = v13;
    operator delete(v13);
  }
  v14 = a1[1];
  if (v14)
  {
    v15 = a1[2];
    v16 = (void *)a1[1];
    if (v15 != v14)
    {
      do
      {
        v15 -= 464;
        sub_22324A5A0(v15);
      }
      while (v15 != v14);
      v16 = (void *)a1[1];
    }
    a1[2] = v14;
    operator delete(v16);
  }
  return a1;
}

void **sub_223322A30(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v7 = *((_QWORD *)v3 - 9);
        if (v7)
        {
          v8 = *((_QWORD *)v3 - 8);
          v5 = (void *)*((_QWORD *)v3 - 9);
          if (v8 != v7)
          {
            v9 = *((_QWORD *)v3 - 8);
            do
            {
              v11 = *(void **)(v9 - 24);
              v9 -= 24;
              v10 = v11;
              if (v11)
              {
                *(_QWORD *)(v8 - 16) = v10;
                operator delete(v10);
              }
              v8 = v9;
            }
            while (v9 != v7);
            v5 = (void *)*((_QWORD *)v3 - 9);
          }
          *((_QWORD *)v3 - 8) = v7;
          operator delete(v5);
        }
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_223322AF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2C6E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223322B34(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2C6E0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223322B88(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2C6E0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223322BF8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2C6E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223322C48(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223322C84(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223322CBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223322FE0((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_223323820(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223322E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_223323820(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223322F68(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC"
                     "_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKS6_EUlT_T0_E_EEvSL_SM_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRe"
                                "sultENS7_9allocatorISC_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKS6_EUlT_"
                                "T0_E_EEvSL_SM_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKS6_EUlT_T0_E_EEvSL_SM_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_4SendERKS6_EUlT_T0_E_EEvSL_SM_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223322FD4()
{
  return &unk_24EC2C7D0;
}

void sub_223322FE0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_2233236D4(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_22332329C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_223167354((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_223323378(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x223323398);
}

uint64_t sub_2233233A4(char *__s, const char *a2, const char *a3, const char *a4, const char *a5, const char *a6)
{
  uint64_t result;
  _DWORD v12[6];
  int v13;
  _QWORD **v14;
  const char *v15;
  _DWORD *v16;
  const char *v17;
  const char *v18;
  _QWORD *v19;

  v13 = 0;
  sub_223323730(v12, __s);
  if (*(_QWORD *)a2)
  {
    v14 = (_QWORD **)v12;
    v15 = a2;
    v16 = v12;
    v17 = a2;
    v18 = a2;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24EC2C770[v13])(&v19, v12);
      goto LABEL_6;
    }
LABEL_18:
    sub_22316DD70();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_18;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC2C758[v13])(&v19, v12);
LABEL_6:
  v14 = (_QWORD **)v12;
  v15 = a3;
  v16 = v12;
  v17 = a3;
  v18 = a3;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC2C788[v13])(&v19, v12);
  v14 = (_QWORD **)v12;
  v15 = a4;
  v16 = v12;
  v17 = a4;
  v18 = a4;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC2C7A0[v13])(&v19, v12);
  if (*(_QWORD *)a5)
  {
    v14 = (_QWORD **)v12;
    v15 = a5;
    v16 = v12;
    v17 = a5;
    v18 = a5;
    if (v13 != -1)
    {
      v19 = &v14;
      ((void (*)(_QWORD **, _DWORD *))off_24EC2C770[v13])(&v19, v12);
      goto LABEL_13;
    }
LABEL_21:
    sub_22316DD70();
  }
  v14 = (_QWORD **)v12;
  v15 = "nullptr";
  v16 = v12;
  v17 = "nullptr";
  v18 = "nullptr";
  if (v13 == -1)
    goto LABEL_21;
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC2C758[v13])(&v19, v12);
LABEL_13:
  v14 = (_QWORD **)v12;
  v15 = a6;
  v16 = v12;
  v17 = a6;
  v18 = a6;
  if (v13 == -1)
    sub_22316DD70();
  v19 = &v14;
  ((void (*)(_QWORD **, _DWORD *))off_24EC2C788[v13])(&v19, v12);
  if (v13 == -1)
    sub_22316DD70();
  v14 = &v19;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC2C7B8[v13])(&v14, v12);
  if (v13 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24EC2C740[v13])(&v14, v12);
  return result;
}

void sub_223323648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22332365C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223323670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223323684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223323698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233236AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233236C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22319B964((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233236D4(unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x2276844A8](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
}

void sub_22332371C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_223323730(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24EC2C740[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t *sub_223323820(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22332390C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x223323868);
}

_QWORD *sub_223323948(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_22316E078();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[16 * (v6 >> 4)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_22316E078();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[16 * (v11 >> 4)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_223323A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223323A4C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCF3CF3CF3CF3CF3DLL * (v6 >> 3);
    if (v7 >= 0x186186186186187)
      sub_223323BA8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[168 * v7];
    a1[1] = sub_223323BBC(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_223323B00(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v5 - 6);
        if (v8)
        {
          *((_QWORD *)v5 - 5) = v8;
          operator delete(v8);
        }
        v9 = *((_QWORD *)v5 - 9);
        if (v9)
        {
          v10 = *((_QWORD *)v5 - 8);
          v7 = (void *)*((_QWORD *)v5 - 9);
          if (v10 != v9)
          {
            v11 = *((_QWORD *)v5 - 8);
            do
            {
              v13 = *(void **)(v11 - 24);
              v11 -= 24;
              v12 = v13;
              if (v13)
              {
                *(_QWORD *)(v10 - 16) = v12;
                operator delete(v12);
              }
              v10 = v11;
            }
            while (v11 != v9);
            v7 = (void *)*((_QWORD *)v5 - 9);
          }
          *((_QWORD *)v5 - 8) = v9;
          operator delete(v7);
        }
        v5 -= 168;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_223323BA8()
{
  sub_22316DBD4("vector");
}

uint64_t sub_223323BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_223323C9C(a4 + v7, (uint64_t *)(a2 + v7));
      v7 += 168;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_223323C24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if (v3)
  {
    do
    {
      v6 = *(void **)(v2 - 48);
      if (v6)
      {
        *(_QWORD *)(v2 - 40) = v6;
        operator delete(v6);
      }
      v7 = *(_QWORD *)(v2 - 72);
      if (v7)
      {
        v8 = *(_QWORD *)(v2 - 64);
        v5 = *(void **)(v2 - 72);
        if (v8 != v7)
        {
          v9 = *(_QWORD *)(v2 - 64);
          do
          {
            v11 = *(void **)(v9 - 24);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *(_QWORD *)(v8 - 16) = v10;
              operator delete(v10);
            }
            v8 = v9;
          }
          while (v9 != v7);
          v5 = *(void **)(v2 - 72);
        }
        *(_QWORD *)(v2 - 64) = v7;
        operator delete(v5);
      }
      v2 -= 168;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223323C9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 12) = v5;
  v6 = *(_OWORD *)(a2 + 3);
  v7 = *(_OWORD *)(a2 + 5);
  v8 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 88) = a2[11];
  sub_22324A298((_QWORD *)(a1 + 96), a2 + 12);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v9 = a2[15];
  v10 = a2[16];
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = 0x4EC4EC4EC4EC4EC5 * (v11 >> 3);
    if (v12 >= 0x276276276276277)
      sub_223323BA8();
    v13 = (char *)operator new(v11);
    v14 = 0;
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = v13;
    *(_QWORD *)(a1 + 136) = &v13[104 * v12];
    do
    {
      v15 = v9 + v14;
      v16 = &v13[v14];
      *v16 = *(_BYTE *)(v9 + v14);
      v17 = *(_OWORD *)(v9 + v14 + 8);
      *(_OWORD *)(v16 + 24) = *(_OWORD *)(v9 + v14 + 24);
      *(_OWORD *)(v16 + 8) = v17;
      v18 = *(_OWORD *)(v9 + v14 + 40);
      v19 = *(_OWORD *)(v9 + v14 + 56);
      v20 = *(_OWORD *)(v9 + v14 + 72);
      *(_OWORD *)(v16 + 88) = *(_OWORD *)(v9 + v14 + 88);
      *(_OWORD *)(v16 + 72) = v20;
      *(_OWORD *)(v16 + 56) = v19;
      *(_OWORD *)(v16 + 40) = v18;
      v14 += 104;
    }
    while (v15 + 104 != v10);
    *(_QWORD *)(a1 + 128) = &v13[v14];
  }
  v21 = *((_OWORD *)a2 + 9);
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_OWORD *)(a1 + 144) = v21;
  return a1;
}

void sub_223323E04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 128) = v5;
    operator delete(v5);
    v6 = (char *)*v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = (char *)*v2;
    if (!*v2)
      goto LABEL_3;
  }
  v7 = *(char **)(v1 + 104);
  v8 = v6;
  if (v7 != v6)
  {
    v9 = *(char **)(v1 + 104);
    do
    {
      v11 = (void *)*((_QWORD *)v9 - 3);
      v9 -= 24;
      v10 = v11;
      if (v11)
      {
        *((_QWORD *)v7 - 2) = v10;
        operator delete(v10);
      }
      v7 = v9;
    }
    while (v9 != v6);
    v8 = *v2;
  }
  *(_QWORD *)(v1 + 104) = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223323E7C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2C7F0;
  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223323EB8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2C7F0;
  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223323F04(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x80uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC2C7F0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233226F8(v2 + 3, a1 + 3);
  return v3;
}

void sub_223323F68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223323F88(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  *a2 = &off_24EC2C7F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_2233226F8(a2 + 3, a1 + 3);
}

void sub_223323FE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223323FF8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_223322918((_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_223324030(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

void sub_223324064(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223322FE0((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_223323820(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332410C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_223323820(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223324158(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC"
                     "_EEEEEEvSH_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRe"
                                "sultENS7_9allocatorISC_EEEEEEvSH_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233241C4()
{
  return &unk_24EC2C850;
}

_QWORD *sub_2233241D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[16];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223322918(a1 + 2);
      v5 = (std::__shared_weak_count *)a1[1];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_223322918(a1 + 2);
  v5 = (std::__shared_weak_count *)a1[1];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223324250(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223324260(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_223324290(uint64_t a1)
{
  return sub_223323820((uint64_t *)(a1 + 24));
}

_QWORD *sub_22332429C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

_QWORD *sub_223324318(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2C8C0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_2233243A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2C8C0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_223324438(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2C8C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_2233244C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2C8C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223324538(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2233245B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223324634(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223322FE0(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_223323820((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223324910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22332493C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223324748);
    JUMPOUT(0x223324718);
  }
  sub_2233236D4(3u);
}

void sub_223324998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2233249C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_223323820(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223324AB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC"
                     "_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKS6_NS7_7promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRe"
                                "sultENS7_9allocatorISC_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKS6_NS"
                                "7_7promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKS6_NS7_7promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE25EnqueueMessageAndDispatchIZNKSI_7ProcessERKS6_NS7_7promiseISH_EEEUlT_T0_E_EEvSL_SO_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223324B1C()
{
  return &unk_24EC2C920;
}

_QWORD *sub_223324B28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2C940;
  v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223322918(a1 + 3);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_223324BB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2C940;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223324C50(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x90uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC2C940;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233226F8(v2 + 3, a1 + 3);
  v8 = a1[17];
  v3[16] = a1[16];
  v3[17] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_223324CD4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223324CF4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC2C940;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_2233226F8(a2 + 3, a1 + 3);
  v9 = a1[17];
  a2[16] = a1[16];
  a2[17] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223324D6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223324D84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_223324E04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223322918(a1 + 3);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

void sub_223324E84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[16];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223322FE0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_223323820((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223324F94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_22332500C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223325040);
  JUMPOUT(0x223325070);
}

uint64_t sub_223325078(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC"
                     "_EEEEEEvSH_Lb0EE7ProcessERKS6_NS7_7promiseISH_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRe"
                                "sultENS7_9allocatorISC_EEEEEEvSH_Lb0EE7ProcessERKS6_NS7_7promiseISH_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE7ProcessERKS6_NS7_7promiseISH_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE7ProcessERKS6_NS7_7promiseISH_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233250E4()
{
  return &unk_24EC2C9A0;
}

_QWORD *sub_2233250F0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2C9C0;
  v2 = a1[4];
  a1[3] = &off_24EC2C458;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223325148(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2C9C0;
  v2 = a1[4];
  a1[3] = &off_24EC2C458;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233251B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC2C9C0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2C458;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_223325228(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223325248(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC2C9C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2C458;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_2233252B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_2233252C8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2C458;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223325318(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2C458;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223325364(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2C458;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223325418(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223325454(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3"
                     "__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_"
                     "EEEEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRes"
                                "ultENS7_9allocatorISC_EEEEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE9SubscribeENS1_12ChannelInputISH_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233254C0()
{
  return &unk_24EC2CA20;
}

_QWORD *sub_2233254CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2CA40;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223325504(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2CA40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332554C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2CA40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22332559C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2CA40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_2233255CC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233255DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223325608(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332569C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233256D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3"
                     "__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_"
                     "EEEEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRes"
                                "ultENS7_9allocatorISC_EEEEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223325744()
{
  return &unk_24EC2CAA0;
}

void sub_223325750(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_22332579C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233257FC(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

_QWORD *sub_22332583C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2CAC0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223325874(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2CAC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233258BC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2CAC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223325914(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2CAC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22332594C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22332595C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223325988(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_223325B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223325B74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC"
                     "_EEEEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRe"
                                "sultENS7_9allocatorISC_EEEEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223325BE0()
{
  return &unk_24EC2CB20;
}

void sub_223325BEC(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_2233236D4(2u);
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_223325C90(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223325CA4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_223323BA8();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_223174E94();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void sub_223325E14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_223325EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_223325EE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_223325FD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x223325F30);
}

_QWORD *sub_223326010(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2CB40;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223326048(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2CB40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223326090(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2CB40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233260E8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2CB40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_223326120(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223326130(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22332615C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223326214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223326260(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC"
                     "_EEEEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingRe"
                                "sultENS7_9allocatorISC_EEEEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS7_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS7_9allocatorISC_EEEEEEvSH_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233262CC()
{
  return &unk_24EC2CBA0;
}

void sub_2233262DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223326300(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223326318(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22Surface"
                     "DetectionResultENS0_IKNS_6vectorINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocator"
                     "ISC_EEEEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd22SurfaceDetectionResultENS0_IKNS_6vectorINS1_3acv16surfacedetection24ContinuousTracki"
                                "ngResultENS_9allocatorISC_EEEEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS0_IKNS_6vectorINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorISC_EEEEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS0_IKNS_6vectorINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorISC_EEEEEEvSH_Lb0EEEE27__shared_ptr_default_deleteISI_SI_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223326388(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233263B4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233263F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2CC10;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_223326458(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233264E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2233264FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233265A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223326664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223326678(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_22332673C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223326750(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_2233267F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223326808(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2C3F0;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2C420;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E3A0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_2233269EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24EC2C3C0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_223326808(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_223326808(v7);
    MEMORY[0x227684CE8](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_223326B28(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223326B4C(uint64_t result)
{
  uint64_t **v1;
  uint64_t *v2;

  v1 = *(uint64_t ***)(result + 24);
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
      sub_22450297C((uint64_t)v1, v2);
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223326BA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_223326C14(uint64_t a1)
{
  sub_22332B504(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223326C3C(uint64_t a1)
{
  sub_22332B320(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223326C60(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2CCE8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223326C98(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2CCE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_223326CE0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2CD20;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2CD20;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223326DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223326DE0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2CD20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223326E30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_223326E44(uint64_t a1)
{
  sub_223328844(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223326E68(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    sub_2233226F8(&v52, a2);
    v65 = 0;
    v48 = (char *)operator new(0x80uLL);
    *(_QWORD *)v48 = &off_24EC2D018;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v51;
    *((_QWORD *)v48 + 3) = v52;
    *((_OWORD *)v48 + 2) = v53;
    *((_QWORD *)v48 + 6) = v54;
    v53 = 0uLL;
    *(_OWORD *)(v48 + 56) = v55;
    *((_QWORD *)v48 + 9) = v56;
    v54 = 0;
    v55 = 0uLL;
    v56 = 0;
    *((_OWORD *)v48 + 5) = v57;
    *((_QWORD *)v48 + 12) = v58;
    v57 = 0uLL;
    *(_OWORD *)(v48 + 104) = v59;
    *((_QWORD *)v48 + 15) = v60;
    v58 = 0;
    v59 = 0uLL;
    v60 = 0;
    v65 = (__int128 *)v48;
    sub_2245022E4(*v25, (uint64_t)&v63);
    v49 = v65;
    if (v65 == &v63)
    {
      v50 = 4;
      v49 = &v63;
    }
    else
    {
      if (!v65)
      {
LABEL_58:
        sub_223322918(&v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
  v6 = v4 + 1;
  sub_2233226F8(&v4[1].__vftable, a2);
  v61 = v4 + 1;
  v62 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v63 = v10;
  *((_QWORD *)&v63 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_22324A974();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v63;
    if (!(_QWORD)v63)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v63;
  if ((_QWORD)v63)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v63 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v63 = v38;
      *((_QWORD *)&v63 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v63 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24EC2CF98;
  *(_OWORD *)(v43 + 8) = v63;
  v63 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v64 = 0;
  v65 = 0;
  v67 = v43;
  sub_2245022E4(*v34, (uint64_t)v66);
  v44 = v67;
  if (v67 == v66)
  {
    v45 = 4;
    v44 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v62)
  {
    v46 = &v62->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_223327310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a30;
  if (a30 == v30)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
    {
      sub_223322814((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  sub_223322814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223327364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22332745C(_QWORD *a1, _QWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::runtime_error v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  _QWORD *v94;
  __int128 *v95;
  _QWORD v96[3];
  std::string v97;
  std::string *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v93 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v93 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v94 = v67;
    v95 = v70;
    sub_2231A9820((uint64_t)&v93, (uint64_t)v96, 0, 0, &v97);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v97;
    else
      v71 = (std::string *)v97.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v90, (const char *)v71);
    v90.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v90);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v73, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D098;
    v6[1].__vftable = *a3;
    v88 = v6 + 1;
    v89 = v6;
    v86 = v6 + 1;
    v87 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x80uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
    v11 = v9 + 1;
    sub_2233226F8(&v9[1].__vftable, a2);
    v91 = v9 + 1;
    v92 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v93 = v15;
    *((_QWORD *)&v93 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v93 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v93 = v43;
            *((_QWORD *)&v93 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v93 = 0uLL;
          }
        }
        v48 = v86;
        v49 = v87;
        v86 = 0;
        v87 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC2D0E8;
        *(_OWORD *)(v50 + 8) = v93;
        v93 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v94 = 0;
        v95 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v96[0] = 0;
        v96[1] = 0;
        v98 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v97);
        v51 = v98;
        if (v98 == &v97)
        {
          v52 = 4;
          v51 = &v97;
        }
        else
        {
          if (!v98)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v92)
        {
          v53 = &v92->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (v87)
        {
          v55 = &v87->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if (v89)
        {
          v57 = &v89->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v74[0] = v34;
      v74[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  sub_2233226F8(&v75, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D098;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v84 = &v59[1].__vftable;
  v85 = v59;
  v95 = 0;
  v60 = (char *)operator new(0x90uLL);
  *(_QWORD *)v60 = &off_24EC2D168;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v60 + 3) = v75;
  *((_OWORD *)v60 + 2) = v76;
  *((_QWORD *)v60 + 6) = v77;
  v76 = 0uLL;
  *(_OWORD *)(v60 + 56) = v78;
  *((_QWORD *)v60 + 9) = v79;
  v77 = 0;
  v78 = 0uLL;
  v79 = 0;
  *((_OWORD *)v60 + 5) = v80;
  *((_QWORD *)v60 + 12) = v81;
  v80 = 0uLL;
  *(_OWORD *)(v60 + 104) = v82;
  v61 = v83;
  v81 = 0;
  v82 = 0uLL;
  v83 = 0;
  *((_QWORD *)v60 + 15) = v61;
  *((_QWORD *)v60 + 16) = v59 + 1;
  *((_QWORD *)v60 + 17) = v59;
  v84 = 0;
  v85 = 0;
  v95 = (__int128 *)v60;
  sub_2245022E4(*v30, (uint64_t)&v93);
  v62 = v95;
  if (v95 == &v93)
  {
    v63 = 4;
    v62 = &v93;
  }
  else
  {
    if (!v95)
      goto LABEL_72;
    v63 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v62 + 8 * v63))(v62);
LABEL_72:
  v64 = v85;
  if (v85)
  {
    v65 = (unint64_t *)&v85->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_223322918(&v75);
}

void sub_223327B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,std::exception_ptr a31)
{
  std::__assoc_sub_state **v31;
  uint64_t v32;
  std::__assoc_sub_state *v33;
  std::exception_ptr v34;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v33 = *v31;
    if (*v31)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v32 - 160), &a31);
      v34.__ptr_ = (void *)(v32 - 160);
      std::__assoc_sub_state::set_exception(v33, v34);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v32 - 160));
      std::exception_ptr::~exception_ptr(&a31);
      std::runtime_error::~runtime_error(&a30);
      if (*(char *)(v32 - 81) < 0)
        operator delete(*(void **)(v32 - 104));
      JUMPOUT(0x223327A40);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_223327BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,std::exception_ptr a31)
{
  uint64_t v31;

  std::exception_ptr::~exception_ptr(&a31);
  std::runtime_error::~runtime_error(&a30);
  if (*(char *)(v31 - 81) < 0)
  {
    operator delete(*(void **)(v31 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223327BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_2233241D0(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_2233241D0(&a9);
  _Unwind_Resume(a1);
}

void sub_223327C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;

  sub_223322918(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223327C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v29 - 80);
  if (v31 == v28)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 104);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  sub_22332429C((_QWORD *)(v29 - 160));
  sub_223167354(v29 - 176);
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_223327D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::__shared_weak_count *v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_223327D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_223327D60(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_223327DD4(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC2D1E8;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2CD20;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_223327F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223327F78(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2D268;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_223328088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2233280EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2D2E8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_223328304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2233283CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2D368;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_2233285E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2233286AC(uint64_t a1)
{
  return sub_223328844(a1 - 16);
}

void sub_2233286B4(uint64_t a1)
{
  sub_223328844(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233286DC(uint64_t a1, uint64_t a2)
{
  return sub_223327DD4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2233286E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2233280EC((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_2233286EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2233283CC((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_2233286F4(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_2233286FC(uint64_t a1)
{
  return sub_223328844(a1 - 24);
}

void sub_223328704(uint64_t a1)
{
  sub_223328844(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332872C(uint64_t a1)
{
  return sub_223327F78((_QWORD *)(a1 - 24));
}

uint64_t sub_223328734(uint64_t a1)
{
  return a1 - 24;
}

void sub_223328740()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223328754@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = a1 + 32;
  v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_24EC2CF48;
  result = sub_223323948(v4 + 3, v3);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void sub_2233287A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2233287BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2CF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2233287CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2CF48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

void sub_2233287FC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
}

uint64_t sub_223328844(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC2CD58;
  *(_QWORD *)(a1 + 16) = &unk_24EC2CDD0;
  *(_QWORD *)(a1 + 24) = &unk_24EC2CE10;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_223328A44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2CF98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223328A88(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2CF98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223328ADC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2CF98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_223328B4C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2CF98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223328B9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223328BD8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223328C10(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_223328F34((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_2233292F8(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223328DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_2233292F8(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223328EBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZN"
                     "KSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25Enqueu"
                                "eMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_4SendERKS6_EUlT_T0_E_EEvSH_SI_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223328F28()
{
  return &unk_24EC2CFF8;
}

void sub_223328F34(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::exception_ptr v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v23, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, uint64_t *))(j[2] + 16))(j + 2, &v23);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v22.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v22), v15))
    {
      sub_2233236D4(2u);
    }
    v16 = v24;
    *(_QWORD *)(v14 + 144) = v23;
    *(_QWORD *)(v14 + 152) = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2233291F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, char a18)
{
  std::mutex *v18;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  std::mutex::unlock(v18);
  sub_223167354((uint64_t)&a18);
  if (a2 == 1)
  {
    v21 = (uint64_t *)__cxa_begin_catch(a1);
    v22 = *v21;
    a11 = *(_QWORD *)(*(_QWORD *)(*v21 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v22 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v23 = (uint64_t *)&a12;
    else
      v23 = a12;
    if ((a17 & 0x80u) == 0)
      v24 = a17;
    else
      v24 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v23, v24, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_2233292CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x2233292ECLL);
}

uint64_t *sub_2233292F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_2233293E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x223329340);
}

_QWORD *sub_223329420(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D018;
  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332945C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D018;
  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_2233294A8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x80uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC2D018;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233226F8(v2 + 3, a1 + 3);
  return v3;
}

void sub_22332950C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22332952C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  *a2 = &off_24EC2D018;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_2233226F8(a2 + 3, a1 + 3);
}

void sub_223329584(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22332959C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_223322918((_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_2233295D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

void sub_223329608(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_223328F34((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_2233292F8(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_2233296B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_2233292F8(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233296FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223329768()
{
  return &unk_24EC2D078;
}

void sub_223329774(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223329784(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D098;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_2233297B4(uint64_t a1)
{
  return sub_2233292F8((uint64_t *)(a1 + 24));
}

_QWORD *sub_2233297C0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2D0E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_223329848(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2D0E8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_2233298E0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2D0E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_223329970(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2D0E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_2233299E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_223329A60(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223329ADC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_223328F34(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_2233292F8((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223329DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223329DE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223329BF0);
    JUMPOUT(0x223329BC0);
  }
  sub_2233236D4(3u);
}

void sub_223329E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_223329E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_2233292F8(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_223329F58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZN"
                     "KSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25Enqueu"
                                "eMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE25EnqueueMessageAndDispatchIZNKSE_7ProcessERKS6_NS7_7promiseISD_EEEUlT_T0_E_EEvSH_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223329FC4()
{
  return &unk_24EC2D148;
}

_QWORD *sub_223329FD0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2D168;
  v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223322918(a1 + 3);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22332A05C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2D168;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332A0F8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x90uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC2D168;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233226F8(v2 + 3, a1 + 3);
  v8 = a1[17];
  v3[16] = a1[16];
  v3[17] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_22332A17C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22332A19C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC2D168;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_2233226F8(a2 + 3, a1 + 3);
  v9 = a1[17];
  a2[16] = a1[16];
  a2[17] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22332A214(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22332A22C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22332A2AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223322918(a1 + 3);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

void sub_22332A32C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[16];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_223328F34((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_2233292F8((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22332A43C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_22332A4B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x22332A4E8);
  JUMPOUT(0x22332A518);
}

uint64_t sub_22332A520(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE7Process"
                                "ERKS6_NS7_7promiseISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE7ProcessERKS6_NS7_7promiseISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332A58C()
{
  return &unk_24EC2D1C8;
}

_QWORD *sub_22332A598(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2D1E8;
  v2 = a1[4];
  a1[3] = &off_24EC2CD20;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22332A5F0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2D1E8;
  v2 = a1[4];
  a1[3] = &off_24EC2CD20;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332A658(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC2D1E8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2CD20;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22332A6D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22332A6F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC2D1E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2CD20;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22332A758(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22332A770(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2CD20;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22332A7C0(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2CD20;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22332A80C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2CD20;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332A8C0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332A8FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3"
                     "__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE9Subscrib"
                                "eENS1_12ChannelInputISD_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE9SubscribeENS1_12ChannelInputISD_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332A968()
{
  return &unk_24EC2D248;
}

_QWORD *sub_22332A974(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D268;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332A9AC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2D268;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332A9F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2D268;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22332AA44(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2D268;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22332AA74(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22332AA84(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22332AAB0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332AB44(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332AB80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3"
                     "__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15AddErro"
                                "rHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332ABEC()
{
  return &unk_24EC2D2C8;
}

_QWORD *sub_22332ABF8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D2E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332AC30(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2D2E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332AC78(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2D2E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22332ACD0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2D2E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22332AD08(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22332AD18(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22332AD44(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22332AEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332AF30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE16Output"
                                "HandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332AF9C()
{
  return &unk_24EC2D348;
}

_QWORD *sub_22332AFA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D368;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332AFE0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2D368;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332B028(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2D368;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22332B080(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2D368;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22332B0B8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22332B0C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22332B0F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332B1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332B1F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15ErrorH"
                                "andlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__110shared_ptrIKNS_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332B264()
{
  return &unk_24EC2D3C8;
}

void sub_22332B274(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22332B298(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22332B2B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22Surface"
                     "DetectionResultENS0_IKNS1_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd22SurfaceDetectionResultENS0_IKNS1_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EEEE2"
                                "7__shared_ptr_default_deleteISE_SE_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS0_IKNS1_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS0_IKNS1_3acv16surfacedetection12ErasedPlanesEEEvSD_Lb0EEEE27__shared_ptr_default_deleteISE_SE_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22332B320(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2CCB8;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2CCE8;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E3A0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22332B504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24EC2CC88;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_22332B320(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_22332B320(v7);
    MEMORY[0x227684CE8](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_22332B640(uint64_t a1)
{
  sub_22332FD5C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22332B668(uint64_t a1)
{
  sub_22332FB78(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332B68C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D498;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332B6C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2D498;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

void sub_22332B70C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v15 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      v14 = v7;
      if (v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = 0;
        v12 = &off_24EC2D4D0;
        v13 = v8;
        (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v7 + 16))(v7, &v12);
        v9 = v13;
        v12 = &off_24EC2D4D0;
        v13 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_22332B7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_223167354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22332B80C(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24EC2D4D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22332B85C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
}

void sub_22332B870(uint64_t a1)
{
  sub_22332D18C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22332B894(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  __int128 *v49;
  uint64_t v50;
  std::__shared_weak_count *v51[2];
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  __int128 v63;
  uint64_t v64;
  __int128 *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (!a1[18])
  {
    v25 = (uint64_t **)a1[9];
    *(_OWORD *)v51 = 0uLL;
    v26 = (std::__shared_weak_count *)a1[5];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = (std::__shared_weak_count *)a1[4];
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v31 = __ldxr(p_shared_weak_owners);
        while (__stxr(v31 + 1, p_shared_weak_owners));
        v51[0] = v29;
        v51[1] = v27;
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        *(_OWORD *)v51 = 0uLL;
      }
    }
    sub_2233226F8(&v52, a2);
    v65 = 0;
    v48 = (char *)operator new(0x80uLL);
    *(_QWORD *)v48 = &off_24EC2D778;
    *(_OWORD *)(v48 + 8) = *(_OWORD *)v51;
    *((_QWORD *)v48 + 3) = v52;
    *((_OWORD *)v48 + 2) = v53;
    *((_QWORD *)v48 + 6) = v54;
    v53 = 0uLL;
    *(_OWORD *)(v48 + 56) = v55;
    *((_QWORD *)v48 + 9) = v56;
    v54 = 0;
    v55 = 0uLL;
    v56 = 0;
    *((_OWORD *)v48 + 5) = v57;
    *((_QWORD *)v48 + 12) = v58;
    v57 = 0uLL;
    *(_OWORD *)(v48 + 104) = v59;
    *((_QWORD *)v48 + 15) = v60;
    v58 = 0;
    v59 = 0uLL;
    v60 = 0;
    v65 = (__int128 *)v48;
    sub_2245022E4(*v25, (uint64_t)&v63);
    v49 = v65;
    if (v65 == &v63)
    {
      v50 = 4;
      v49 = &v63;
    }
    else
    {
      if (!v65)
      {
LABEL_58:
        sub_223322918(&v52);
        return;
      }
      v50 = 5;
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v49 + 8 * v50))(v49);
    goto LABEL_58;
  }
  v4 = (std::__shared_weak_count *)operator new(0x80uLL);
  v4->__shared_owners_ = 0;
  v5 = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
  v6 = v4 + 1;
  sub_2233226F8(&v4[1].__vftable, a2);
  v61 = v4 + 1;
  v62 = v4;
  v7 = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = (uint64_t *)a1[18];
  v10 = (_QWORD *)operator new();
  *v10 = v9 + 7;
  std::mutex::lock((std::mutex *)(v9 + 7));
  *(_QWORD *)&v63 = v10;
  *((_QWORD *)&v63 + 1) = v9;
  if (!*((_BYTE *)v9 + 48))
    sub_22324A974();
  v11 = v9[4];
  v12 = *v9;
  v13 = (std::__shared_weak_count **)(*v9 + 16 * v11);
  do
    v14 = __ldxr(v5);
  while (__stxr(v14 + 1, v5));
  *v13 = v6;
  v15 = v12 + 16 * v11;
  v16 = *(std::__shared_weak_count **)(v15 + 8);
  *(_QWORD *)(v15 + 8) = v4;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (v9[1] - *v9) >> 4;
  v20 = v9[5];
  v21 = v9[4] + 1;
  if (v21 >= v19)
    v22 = (v9[1] - *v9) >> 4;
  else
    v22 = 0;
  v9[4] = v21 - v22;
  if (v20 != v19)
  {
    v9[5] = v20 + 1;
    v24 = (std::mutex **)v63;
    if (!(_QWORD)v63)
      goto LABEL_33;
    goto LABEL_32;
  }
  v23 = v9[3] + 1;
  if (v23 < v19)
    v19 = 0;
  v9[3] = v23 - v19;
  v24 = (std::mutex **)v63;
  if ((_QWORD)v63)
  {
LABEL_32:
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
  }
LABEL_33:
  v34 = (uint64_t **)a1[9];
  v63 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v63 = v38;
      *((_QWORD *)&v63 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v63 = 0uLL;
    }
  }
  v43 = (char *)operator new(0x30uLL);
  *(_QWORD *)v43 = &off_24EC2D6F8;
  *(_OWORD *)(v43 + 8) = v63;
  v63 = 0uLL;
  *((_QWORD *)v43 + 3) = v6;
  *((_QWORD *)v43 + 4) = v4;
  v64 = 0;
  v65 = 0;
  v67 = v43;
  sub_2245022E4(*v34, (uint64_t)v66);
  v44 = v67;
  if (v67 == v66)
  {
    v45 = 4;
    v44 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_47;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_47:
  if (v62)
  {
    v46 = &v62->__shared_owners_;
    do
      v47 = __ldaxr((unint64_t *)v46);
    while (__stlxr(v47 - 1, (unint64_t *)v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_22332BD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char *a30)
{
  char *v30;
  char *v32;
  uint64_t v33;

  v32 = a30;
  if (a30 == v30)
  {
    v33 = 4;
    v32 = &a27;
  }
  else
  {
    if (!a30)
    {
      sub_223322814((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
  sub_223322814((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22332BD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_22332BE88(_QWORD *a1, _QWORD *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  char *v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  __int128 *v70;
  std::string *v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  std::__shared_weak_count *v74[2];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::runtime_error v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  __int128 v93;
  _QWORD *v94;
  __int128 *v95;
  _QWORD v96[3];
  std::string v97;
  std::string *v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v93 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v93 + 1) = 45;
    v69 = (_QWORD *)a1[6];
    v68 = a1 + 6;
    v67 = v69;
    v70 = (__int128 *)*((unsigned __int8 *)v68 + 23);
    if ((char)v70 < 0)
      v70 = (__int128 *)v68[1];
    else
      v67 = v68;
    v94 = v67;
    v95 = v70;
    sub_2231A9820((uint64_t)&v93, (uint64_t)v96, 0, 0, &v97);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = &v97;
    else
      v71 = (std::string *)v97.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v90, (const char *)v71);
    v90.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v73 = std::runtime_error::runtime_error(exception, &v90);
    v73->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v73, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D7F8;
    v6[1].__vftable = *a3;
    v88 = v6 + 1;
    v89 = v6;
    v86 = v6 + 1;
    v87 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x80uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2C690;
    v11 = v9 + 1;
    sub_2233226F8(&v9[1].__vftable, a2);
    v91 = v9 + 1;
    v92 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v93 = v15;
    *((_QWORD *)&v93 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v11;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v93 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v93 = v43;
            *((_QWORD *)&v93 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v93 = 0uLL;
          }
        }
        v48 = v86;
        v49 = v87;
        v86 = 0;
        v87 = 0;
        v50 = (char *)operator new(0x38uLL);
        *(_QWORD *)v50 = &off_24EC2D848;
        *(_OWORD *)(v50 + 8) = v93;
        v93 = 0uLL;
        *((_QWORD *)v50 + 3) = v11;
        *((_QWORD *)v50 + 4) = v9;
        v94 = 0;
        v95 = 0;
        *((_QWORD *)v50 + 5) = v48;
        *((_QWORD *)v50 + 6) = v49;
        v96[0] = 0;
        v96[1] = 0;
        v98 = (std::string *)v50;
        sub_2245022E4(*v39, (uint64_t)&v97);
        v51 = v98;
        if (v98 == &v97)
        {
          v52 = 4;
          v51 = &v97;
        }
        else
        {
          if (!v98)
            goto LABEL_51;
          v52 = 5;
        }
        (*(void (**)(void))(v51->__r_.__value_.__r.__words[0] + 8 * v52))();
LABEL_51:
        if (v92)
        {
          v53 = &v92->__shared_owners_;
          do
            v54 = __ldaxr((unint64_t *)v53);
          while (__stlxr(v54 - 1, (unint64_t *)v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (v87)
        {
          v55 = &v87->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if (v89)
        {
          v57 = &v89->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v93;
      if (!(_QWORD)v93)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  *(_OWORD *)v74 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = (std::__shared_weak_count *)a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      v74[0] = v34;
      v74[1] = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      *(_OWORD *)v74 = 0uLL;
    }
  }
  sub_2233226F8(&v75, a2);
  v59 = (std::__shared_weak_count *)operator new(0x20uLL);
  v59->__shared_owners_ = 0;
  v59->__shared_weak_owners_ = 0;
  v59->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D7F8;
  v59[1].__vftable = *a3;
  *a3 = 0;
  v84 = &v59[1].__vftable;
  v85 = v59;
  v95 = 0;
  v60 = (char *)operator new(0x90uLL);
  *(_QWORD *)v60 = &off_24EC2D8C8;
  *(_OWORD *)(v60 + 8) = *(_OWORD *)v74;
  *((_QWORD *)v60 + 3) = v75;
  *((_OWORD *)v60 + 2) = v76;
  *((_QWORD *)v60 + 6) = v77;
  v76 = 0uLL;
  *(_OWORD *)(v60 + 56) = v78;
  *((_QWORD *)v60 + 9) = v79;
  v77 = 0;
  v78 = 0uLL;
  v79 = 0;
  *((_OWORD *)v60 + 5) = v80;
  *((_QWORD *)v60 + 12) = v81;
  v80 = 0uLL;
  *(_OWORD *)(v60 + 104) = v82;
  v61 = v83;
  v81 = 0;
  v82 = 0uLL;
  v83 = 0;
  *((_QWORD *)v60 + 15) = v61;
  *((_QWORD *)v60 + 16) = v59 + 1;
  *((_QWORD *)v60 + 17) = v59;
  v84 = 0;
  v85 = 0;
  v95 = (__int128 *)v60;
  sub_2245022E4(*v30, (uint64_t)&v93);
  v62 = v95;
  if (v95 == &v93)
  {
    v63 = 4;
    v62 = &v93;
  }
  else
  {
    if (!v95)
      goto LABEL_72;
    v63 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v62 + 8 * v63))(v62);
LABEL_72:
  v64 = v85;
  if (v85)
  {
    v65 = (unint64_t *)&v85->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  sub_223322918(&v75);
}

void sub_22332C558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,std::exception_ptr a31)
{
  std::__assoc_sub_state **v31;
  uint64_t v32;
  std::__assoc_sub_state *v33;
  std::exception_ptr v34;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v33 = *v31;
    if (*v31)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v32 - 160), &a31);
      v34.__ptr_ = (void *)(v32 - 160);
      std::__assoc_sub_state::set_exception(v33, v34);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v32 - 160));
      std::exception_ptr::~exception_ptr(&a31);
      std::runtime_error::~runtime_error(&a30);
      if (*(char *)(v32 - 81) < 0)
        operator delete(*(void **)(v32 - 104));
      JUMPOUT(0x22332C46CLL);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_22332C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::runtime_error a30,std::exception_ptr a31)
{
  uint64_t v31;

  std::exception_ptr::~exception_ptr(&a31);
  std::runtime_error::~runtime_error(&a30);
  if (*(char *)(v31 - 81) < 0)
  {
    operator delete(*(void **)(v31 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22332C620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 136);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 160);
  }
  else
  {
    if (!v12)
    {
      sub_2233241D0(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_2233241D0(&a9);
  _Unwind_Resume(a1);
}

void sub_22332C674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  _QWORD *v10;

  sub_223322918(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22332C6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;

  v31 = *(_QWORD **)(v29 - 80);
  if (v31 == v28)
  {
    v32 = 4;
    v31 = (_QWORD *)(v29 - 104);
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_6:
  sub_22332429C((_QWORD *)(v29 - 160));
  sub_223167354(v29 - 176);
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22332C748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::__shared_weak_count *v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22332C770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_22332C78C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22332C800(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC2D948;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2D4D0;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22332C930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22332C9A4(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2D9C8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22332CAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22332CB18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2DA48;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22332CD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22332CDF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2DAC8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22332D010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22332D0D8(uint64_t a1)
{
  return sub_22332D18C(a1 - 16);
}

void sub_22332D0E0(uint64_t a1)
{
  sub_22332D18C(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332D108(uint64_t a1, uint64_t a2)
{
  return sub_22332C800((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22332D110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22332CB18((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22332D118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22332CDF8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22332D120(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22332D128(uint64_t a1)
{
  return sub_22332D18C(a1 - 24);
}

void sub_22332D130(uint64_t a1)
{
  sub_22332D18C(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332D158(uint64_t a1)
{
  return sub_22332C9A4((_QWORD *)(a1 - 24));
}

uint64_t sub_22332D160(uint64_t a1)
{
  return a1 - 24;
}

void sub_22332D16C()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332D180@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_223323A4C(a2, (uint64_t *)(a1 + 80));
}

uint64_t sub_22332D18C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC2D508;
  *(_QWORD *)(a1 + 16) = &unk_24EC2D580;
  *(_QWORD *)(a1 + 24) = &unk_24EC2D5C0;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_22332D38C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2D6F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22332D3D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2D6F8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332D424(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2D6F8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22332D494(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2D6F8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22332D4E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22332D520(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22332D558(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_22332D87C((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_22332DB50(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22332D720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_22332DB50(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332D804(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMess"
                     "ageAndDispatchIZNKSF_4SendERKS6_EUlT_T0_E_EEvSI_SJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEE"
                                "vSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_4SendERKS6_EUlT_T0_E_EEvSI_SJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_4SendERKS6_EUlT_T0_E_EEvSI_SJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_4SendERKS6_EUlT_T0_E_EEvSI_SJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332D870()
{
  return &unk_24EC2D758;
}

void sub_22332D87C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  std::exception_ptr v21;
  void *__p;
  char *v23;

  v6 = *a1;
  if (!v6)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v7 = a1 + 1;
  for (i = (_QWORD *)a1[2]; i != v7; i = (_QWORD *)i[1])
    (*(void (**)(_QWORD *, void **))(i[2] + 16))(i + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v9 = *a3;
    if (!*a3)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v9 + 24));
    if ((*(_BYTE *)(v9 + 136) & 1) != 0
      || (v21.__ptr_ = 0, v10 = *(_QWORD *)(v9 + 16), std::exception_ptr::~exception_ptr(&v21), v10))
    {
      sub_2233236D4(2u);
    }
    sub_223323A4C((_QWORD *)(v9 + 144), (uint64_t *)&__p);
    *(_DWORD *)(v9 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v9 + 88));
    std::mutex::unlock((std::mutex *)(v9 + 24));
  }
  v11 = (char *)__p;
  if (__p)
  {
    v12 = v23;
    v13 = __p;
    if (v23 != __p)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v12 - 6);
        if (v15)
        {
          *((_QWORD *)v12 - 5) = v15;
          operator delete(v15);
        }
        v16 = *((_QWORD *)v12 - 9);
        if (v16)
        {
          v17 = *((_QWORD *)v12 - 8);
          v14 = (void *)*((_QWORD *)v12 - 9);
          if (v17 != v16)
          {
            v18 = *((_QWORD *)v12 - 8);
            do
            {
              v20 = *(void **)(v18 - 24);
              v18 -= 24;
              v19 = v20;
              if (v20)
              {
                *(_QWORD *)(v17 - 16) = v19;
                operator delete(v19);
              }
              v17 = v18;
            }
            while (v18 != v16);
            v14 = (void *)*((_QWORD *)v12 - 9);
          }
          *((_QWORD *)v12 - 8) = v16;
          operator delete(v14);
        }
        v12 -= 168;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v23 = v11;
    operator delete(v13);
  }
}

void sub_22332DA48(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, void *a17)
{
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  sub_223322A30(&a17);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = &a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22332DB24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22332DB44);
}

uint64_t *sub_22332DB50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22332DC3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x22332DB98);
}

_QWORD *sub_22332DC78(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D778;
  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332DCB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D778;
  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332DD00(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x80uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC2D778;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233226F8(v2 + 3, a1 + 3);
  return v3;
}

void sub_22332DD64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22332DD84(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  *a2 = &off_24EC2D778;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return sub_2233226F8(a2 + 3, a1 + 3);
}

void sub_22332DDDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22332DDF4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  sub_223322918((_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void sub_22332DE2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  sub_223322918(a1 + 3);
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(a1);
}

void sub_22332DE60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_22332D87C((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_22332DB50(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332DF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_22332DB50(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332DF54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEE"
                                "vSE_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332DFC0()
{
  return &unk_24EC2D7D8;
}

void sub_22332DFCC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22332DFDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2D7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_22332E00C(uint64_t a1)
{
  return sub_22332DB50((uint64_t *)(a1 + 24));
}

_QWORD *sub_22332E018(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2D848;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22332E0A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2D848;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22332E138(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2D848;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22332E1C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2D848;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22332E238(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_22332E2B8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_22332E334(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22332D87C(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_22332DB50((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22332E610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22332E63C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x22332E448);
    JUMPOUT(0x22332E418);
  }
  sub_2233236D4(3u);
}

void sub_22332E698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22332E6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_22332DB50(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_22332E7B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMess"
                     "ageAndDispatchIZNKSF_7ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEE"
                                "vSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_7ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_7ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE25EnqueueMessageAndDispatchIZNKSF_7ProcessERKS6_NS7_7promiseISE_EEEUlT_T0_E_EEvSI_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332E81C()
{
  return &unk_24EC2D8A8;
}

_QWORD *sub_22332E828(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2D8C8;
  v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223322918(a1 + 3);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22332E8B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2D8C8;
  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332E950(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0x90uLL);
  v3 = v2;
  v5 = a1[1];
  v4 = a1[2];
  *v2 = &off_24EC2D8C8;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2233226F8(v2 + 3, a1 + 3);
  v8 = a1[17];
  v3[16] = a1[16];
  v3[17] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_22332E9D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_22332E9F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1[1];
  v4 = a1[2];
  *a2 = &off_24EC2D8C8;
  a2[1] = v5;
  a2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = sub_2233226F8(a2 + 3, a1 + 3);
  v9 = a1[17];
  a2[16] = a1[16];
  a2[17] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_22332EA6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22332EA84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    sub_223322918(a1 + 3);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_22332EB04(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)a1[17];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_223322918(a1 + 3);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  sub_223322918(a1 + 3);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(a1);
}

void sub_22332EB84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[16];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22332D87C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_22332DB50((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_22332EC94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_22332ED0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x22332ED40);
  JUMPOUT(0x22332ED70);
}

uint64_t sub_22332ED78(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE7ProcessERKS6"
                     "_NS7_7promiseISE_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEE"
                                "vSE_Lb0EE7ProcessERKS6_NS7_7promiseISE_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE7ProcessERKS6_NS7_7promiseISE_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE7ProcessERKS6_NS7_7promiseISE_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332EDE4()
{
  return &unk_24EC2D928;
}

_QWORD *sub_22332EDF0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2D948;
  v2 = a1[4];
  a1[3] = &off_24EC2D4D0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22332EE48(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2D948;
  v2 = a1[4];
  a1[3] = &off_24EC2D4D0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332EEB0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC2D948;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2D4D0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_22332EF28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_22332EF48(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC2D948;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2D4D0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_22332EFB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_22332EFC8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2D4D0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22332F018(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2D4D0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22332F064(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2D4D0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332F118(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332F154(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3"
                     "__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE9SubscribeENS1"
                     "_12ChannelInputISE_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEv"
                                "SE_Lb0EE9SubscribeENS1_12ChannelInputISE_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE9SubscribeENS1_12ChannelInputISE_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE9SubscribeENS1_12ChannelInputISE_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332F1C0()
{
  return &unk_24EC2D9A8;
}

_QWORD *sub_22332F1CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2D9C8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332F204(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2D9C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332F24C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2D9C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_22332F29C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2D9C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_22332F2CC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22332F2DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22332F308(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332F39C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332F3D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3"
                     "__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE15AddErrorHand"
                     "lerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetection"
                                "ResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEv"
                                "SE_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332F444()
{
  return &unk_24EC2DA28;
}

_QWORD *sub_22332F450(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2DA48;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332F488(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2DA48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332F4D0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2DA48;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22332F528(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2DA48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22332F560(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22332F570(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22332F59C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_22332F718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332F788(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEE"
                                "vSE_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332F7F4()
{
  return &unk_24EC2DAA8;
}

_QWORD *sub_22332F800(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2DAC8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22332F838(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2DAC8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22332F880(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2DAC8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_22332F8D8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2DAC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22332F910(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22332F920(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22332F94C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22332FA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22332FA50(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt"
                     "3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectio"
                                "nResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEE"
                                "vSE_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d13concurrent_sd22SurfaceDetectionResultENSt3__16vectorINS_3acv16surfacedetection15SingleShotPlaneENS7_9allocatorISB_EEEEvSE_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22332FABC()
{
  return &unk_24EC2DB28;
}

void sub_22332FACC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22332FAF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_22332FB08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22Surface"
                     "DetectionResultENS_6vectorINS1_3acv16surfacedetection15SingleShotPlaneENS_9allocatorISC_EEEEvSF_Lb0"
                     "EEEE27__shared_ptr_default_deleteISG_SG_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_"
                                "sd22SurfaceDetectionResultENS_6vectorINS1_3acv16surfacedetection15SingleShotPlaneENS_9al"
                                "locatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS_6vectorINS1_3acv16surfacedetection15SingleShotPlaneENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d13concurrent_sd22SurfaceDetectionResultENS_6vectorINS1_3acv16surfacedetection15SingleShotPlaneENS_9allocatorISC_EEEEvSF_Lb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_22332FB78(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_24EC2D468;
  v2 = (_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(std::__shared_weak_count **)(a1 + 80);
    if (v3)
    {
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = *(std::__shared_weak_count **)(a1 + 80);
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      while (v3->__shared_owners_ != -1)
        sched_yield();
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 80) = 0;
    }
    v9 = *(uint64_t **)(a1 + 56);
    if (v9)
      sub_2245023F0(*v9);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *(_QWORD *)(a1 + 144) = &off_24EC2E850;
  v10 = *(std::__shared_weak_count **)(a1 + 160);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)(a1 + 120) = &off_24EC2D498;
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 112);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = &off_24EC2E3A0;
  *(_QWORD *)(a1 + 96) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v17)
    goto LABEL_34;
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_34:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_38:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_39;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_38;
LABEL_35:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_39:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_22332FD5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24EC2D438;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
  {
    v3 = sub_22332FB78(v2);
    MEMORY[0x227684CE8](v3, 0x10B2C4085F70915);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v7)
  {
LABEL_8:
    v8 = sub_22332FB78(v7);
    MEMORY[0x227684CE8](v8, 0x10B2C4085F70915);
  }
LABEL_9:
  v9 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v9)
    goto LABEL_13;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_13:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_19;
LABEL_14:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22332FE94(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((uint64_t)v3 - *(_QWORD *)a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_223323BA8();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (!v9)
  {
    v10 = 0;
    v11 = a2[1];
    v12 = (char *)(16 * v4);
    *(_QWORD *)v12 = *a2;
    *((_QWORD *)v12 + 1) = v11;
    if (!v11)
      goto LABEL_10;
LABEL_13:
    v15 = (unint64_t *)(v11 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD **)(a1 + 8);
    v13 = &v10[16 * v9];
    v14 = v12 + 16;
    if (v3 == *(_QWORD **)a1)
      goto LABEL_25;
    goto LABEL_16;
  }
  if (v9 >> 60)
    sub_223174E94();
  v10 = (char *)operator new(16 * v9);
  v11 = a2[1];
  v12 = &v10[16 * v4];
  *(_QWORD *)v12 = *a2;
  *((_QWORD *)v12 + 1) = v11;
  if (v11)
    goto LABEL_13;
LABEL_10:
  v13 = &v10[16 * v9];
  v14 = v12 + 16;
  if (v3 == v2)
  {
LABEL_25:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    goto LABEL_26;
  }
  do
  {
LABEL_16:
    v17 = *((_OWORD *)v3 - 1);
    v3 -= 2;
    *((_OWORD *)v12 - 1) = v17;
    v12 -= 16;
    *v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v2);
  v2 = *(_QWORD **)a1;
  v18 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v13;
  while (v18 != v2)
  {
    v19 = (std::__shared_weak_count *)*(v18 - 1);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v18 -= 2;
  }
LABEL_26:
  if (v2)
    operator delete(v2);
  return v14;
}

_QWORD *sub_223330000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  float32x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float32x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float32x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float32x2_t v26;
  float64x2_t v27;
  float v28;
  float v29;
  uint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t prime;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v12 = operator new(0xA0uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = *(float32x2_t *)(a3 + 24);
  v18 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 16));
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((float64x2_t *)v12 + 2) = v18;
  v19 = vcvtq_f64_f32(v17);
  v20 = *(float32x2_t *)(a3 + 40);
  v21 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 32));
  *((float64x2_t *)v12 + 3) = v19;
  *((float64x2_t *)v12 + 4) = v21;
  v22 = vcvtq_f64_f32(v20);
  v23 = *(float32x2_t *)(a3 + 56);
  v24 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 48));
  *((float64x2_t *)v12 + 5) = v22;
  *((float64x2_t *)v12 + 6) = v24;
  v25 = vcvtq_f64_f32(v23);
  v26 = *(float32x2_t *)(a3 + 72);
  v27 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 64));
  *((float64x2_t *)v12 + 7) = v25;
  *((float64x2_t *)v12 + 8) = v27;
  *((float64x2_t *)v12 + 9) = vcvtq_f64_f32(v26);
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (v9 && (float)(v29 * (float)v9) >= v28)
  {
    v30 = *(_QWORD *)a1;
    v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v31)
    {
LABEL_34:
      *v12 = *v31;
LABEL_69:
      *v31 = v12;
      goto LABEL_70;
    }
  }
  else
  {
    v32 = 1;
    if (v9 >= 3)
      v32 = (v9 & (v9 - 1)) != 0;
    v33 = v32 | (2 * v9);
    v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34)
      prime = v34;
    else
      prime = v33;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_45;
    if (prime < v9)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v9)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v39 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v31)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v30 = *(_QWORD *)a1;
        v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v31)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v39 & v8;
      v30 = *(_QWORD *)a1;
      v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v8));
      if (v31)
        goto LABEL_34;
    }
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v30 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v40 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_22333035C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223330370(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *((_QWORD *)v4 - 3);
        if (v7)
        {
          v8 = *((_QWORD *)v4 - 2);
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v8 != v7)
          {
            do
            {
              if (*(_BYTE *)(v8 - 8))
              {
                v9 = *(_QWORD **)(v8 - 40);
                if (v9)
                {
                  do
                  {
                    v10 = (_QWORD *)*v9;
                    operator delete(v9);
                    v9 = v10;
                  }
                  while (v10);
                }
                v11 = *(void **)(v8 - 56);
                *(_QWORD *)(v8 - 56) = 0;
                if (v11)
                  operator delete(v11);
              }
              v8 -= 80;
            }
            while (v8 != v7);
            v6 = (void *)*((_QWORD *)v4 - 3);
          }
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_22333045C(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 2) >= __sz)
    {
      v24 = *result;
      if (a2 != a3)
      {
        v25 = *result;
        do
        {
          v26 = *(_QWORD *)v6;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v25 = v26;
          v25 += 12;
          v6 += 12;
          v24 += 12;
        }
        while (v6 != a3);
      }
      v15 = v24 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[4 * ((v17 - v9) >> 2)];
      if (v17 != v9)
      {
        v19 = 4 * ((v17 - v9) >> 2);
        do
        {
          v20 = *(_QWORD *)v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v9 = v20;
          v9 += 12;
          v6 += 12;
          v19 -= 12;
        }
        while (v19);
        v9 = *v16;
      }
      v21 = v9;
      if (v18 != a3)
      {
        v21 = v9;
        v22 = v9;
        do
        {
          v23 = *(_QWORD *)v18;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v18 + 2);
          *v22 = v23;
          v22 = (_QWORD *)((char *)v22 + 12);
          v18 += 12;
          v21 = (_QWORD *)((char *)v21 + 12);
        }
        while (v18 != a3);
      }
      v15 = (char *)v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_28;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_28:
      sub_22316E078();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      v14 = &v9[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

_QWORD *sub_223330660(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_23:
      sub_223323BA8();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_2233307D8(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 3);
        if (v6)
        {
          v7 = *((_QWORD *)v3 - 2);
          v5 = (void *)*((_QWORD *)v3 - 3);
          if (v7 != v6)
          {
            do
            {
              if (*(_BYTE *)(v7 - 8))
              {
                v8 = *(_QWORD **)(v7 - 40);
                if (v8)
                {
                  do
                  {
                    v9 = (_QWORD *)*v8;
                    operator delete(v8);
                    v8 = v9;
                  }
                  while (v9);
                }
                v10 = *(void **)(v7 - 56);
                *(_QWORD *)(v7 - 56) = 0;
                if (v10)
                  operator delete(v10);
              }
              v7 -= 80;
            }
            while (v7 != v6);
            v5 = (void *)*((_QWORD *)v3 - 3);
          }
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_2233308A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      v9 = *(_QWORD *)(a1 + v6);
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(a1 + v6 + 8);
      *(_QWORD *)v7 = v9;
      v10 = *(_QWORD *)(a1 + v6 + 12);
      *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + v6 + 20);
      *(_QWORD *)(v7 + 12) = v10;
      sub_2233309B8((_QWORD *)(a3 + v6 + 24), (uint64_t *)(a1 + v6 + 24));
      v6 += 48;
    }
    while (v8 + 48 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_223330934(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (v3)
  {
    do
    {
      v6 = *(_QWORD *)(v2 - 24);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 - 16);
        v5 = *(void **)(v2 - 24);
        if (v7 != v6)
        {
          do
          {
            if (*(_BYTE *)(v7 - 8))
            {
              v8 = *(_QWORD **)(v7 - 40);
              if (v8)
              {
                do
                {
                  v9 = (_QWORD *)*v8;
                  operator delete(v8);
                  v8 = v9;
                }
                while (v9);
              }
              v10 = *(void **)(v7 - 56);
              *(_QWORD *)(v7 - 56) = 0;
              if (v10)
                operator delete(v10);
            }
            v7 -= 80;
          }
          while (v7 != v6);
          v5 = *(void **)(v2 - 24);
        }
        *(_QWORD *)(v2 - 16) = v6;
        operator delete(v5);
      }
      v2 -= 48;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233309B8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 4);
    if (v7 >= 0x333333333333334)
      sub_223323BA8();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[80 * v7];
    a1[1] = sub_223330AE0(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_223330A60(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      do
      {
        if (*(v5 - 8))
        {
          v7 = (_QWORD *)*((_QWORD *)v5 - 5);
          if (v7)
          {
            do
            {
              v8 = (_QWORD *)*v7;
              operator delete(v7);
              v7 = v8;
            }
            while (v8);
          }
          v9 = (void *)*((_QWORD *)v5 - 7);
          *((_QWORD *)v5 - 7) = 0;
          if (v9)
            operator delete(v9);
        }
        v5 -= 80;
      }
      while (v5 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223330AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 64;
    do
    {
      v8 = *(_OWORD *)(v6 - 64);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(v6 - 48);
      *(_OWORD *)v4 = v8;
      *(_BYTE *)(v4 + 24) = 0;
      *(_BYTE *)(v4 + 72) = 0;
      if (*(_BYTE *)(v6 + 8))
      {
        sub_223330C6C(v4 + 24, v6 - 40);
        *(_QWORD *)(v4 + 64) = *(_QWORD *)v6;
        *(_BYTE *)(v4 + 72) = 1;
        v4 = v10;
      }
      v7 = v6 - 64;
      v4 += 80;
      v10 = v4;
      v6 += 80;
    }
    while (v7 + 80 != a3);
  }
  return v4;
}

void sub_223330BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  if (*(_BYTE *)(v9 + 72))
  {
    v12 = *(_QWORD **)(v9 + 40);
    if (v12)
    {
      do
      {
        v13 = (_QWORD *)*v12;
        operator delete(v12);
        v12 = v13;
      }
      while (v13);
    }
    v14 = *v10;
    *v10 = 0;
    if (v14)
      operator delete(v14);
  }
  sub_223330BEC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223330BEC(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(_BYTE *)(v3 - 8))
      {
        v5 = *(_QWORD **)(v3 - 40);
        if (v5)
        {
          do
          {
            v6 = (_QWORD *)*v5;
            operator delete(v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = *(void **)(v3 - 56);
        *(_QWORD *)(v3 - 56) = 0;
        if (v7)
          operator delete(v7);
      }
      v3 -= 80;
    }
  }
  return a1;
}

uint64_t sub_223330C6C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_2231B0668(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    sub_223330DAC(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_223330D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

void sub_223330D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_22322E828(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223330DAC(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2233310B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2233310CC(uint64_t *a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;

  v6 = a2;
  v9 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  v10 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 4) < __sz)
  {
    if (v10)
    {
      v11 = a1[1];
      v12 = (void *)*a1;
      if (v11 != v10)
      {
        do
        {
          if (*(_BYTE *)(v11 - 8))
          {
            v13 = *(_QWORD **)(v11 - 40);
            if (v13)
            {
              do
              {
                v14 = (_QWORD *)*v13;
                operator delete(v13);
                v13 = v14;
              }
              while (v14);
            }
            v15 = *(void **)(v11 - 56);
            *(_QWORD *)(v11 - 56) = 0;
            if (v15)
              operator delete(v15);
          }
          v11 -= 80;
        }
        while (v11 != v10);
        v12 = (void *)*a1;
      }
      a1[1] = v10;
      operator delete(v12);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x333333333333333)
      goto LABEL_40;
    v22 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    v23 = 2 * v22;
    if (2 * v22 <= __sz)
      v23 = __sz;
    v24 = v22 >= 0x199999999999999 ? 0x333333333333333 : v23;
    if (v24 > 0x333333333333333)
LABEL_40:
      sub_223323BA8();
    v25 = 80 * v24;
    v26 = operator new(80 * v24);
    *a1 = (uint64_t)v26;
    a1[1] = (uint64_t)v26;
    a1[2] = (uint64_t)v26 + v25;
    v19 = sub_223330AE0(v9, v6, a3, (uint64_t)v26);
LABEL_30:
    a1[1] = v19;
    return;
  }
  v16 = a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v10) >> 4) < __sz)
  {
    v17 = a2 + 16 * ((v16 - v10) >> 4);
    if (v16 != v10)
    {
      do
      {
        v18 = *(_OWORD *)v6;
        *(_QWORD *)(v10 + 16) = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v10 = v18;
        sub_223331350(v10 + 24, v6 + 24);
        v6 += 80;
        v10 += 80;
      }
      while (v6 != v17);
      v10 = a1[1];
    }
    v19 = sub_223330AE0(v9, v17, a3, v10);
    goto LABEL_30;
  }
  if (a2 == a3)
  {
    v20 = *a1;
  }
  else
  {
    v20 = *a1;
    do
    {
      v21 = *(_OWORD *)v6;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v6 + 16);
      *(_OWORD *)v10 = v21;
      sub_223331350(v10 + 24, v6 + 24);
      v20 += 80;
      v6 += 80;
      v10 += 80;
    }
    while (v6 != a3);
    v16 = a1[1];
  }
  while (v16 != v20)
  {
    if (*(_BYTE *)(v16 - 8))
    {
      v27 = *(_QWORD **)(v16 - 40);
      if (v27)
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      v29 = *(void **)(v16 - 56);
      *(_QWORD *)(v16 - 56) = 0;
      if (v29)
        operator delete(v29);
    }
    v16 -= 80;
  }
  a1[1] = v20;
}

void sub_223331340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223331348(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223331350(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (a1 != a2)
      {
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        sub_223331410((_QWORD *)a1, *(uint64_t **)(a2 + 16), 0);
      }
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v5 = (_QWORD *)*v4;
        operator delete(v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
      operator delete(v6);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    sub_223330C6C(a1, a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void sub_223331410(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  uint64_t *v11;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v8[3] = a2[3];
      v9 = (uint64_t *)*v8;
      sub_223331540(a1, (int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v11 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v11;
    }
    while (v11);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x20uLL);
      *(_QWORD *)v10 = 0;
      v10[1] = *((_OWORD *)a2 + 1);
      *((_QWORD *)v10 + 1) = *((int *)v10 + 4);
      sub_223331540(a1, (int *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2233314F8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_223331518(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_22333152C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_223331540(_QWORD *a1, int *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = a2 + 4;
  v4 = a2[4];
  *((_QWORD *)v5 - 1) = v4;
  v6 = sub_223331664((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *((_QWORD *)v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(_QWORD *)a2 = *v6;
  *v6 = (uint64_t)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

uint64_t *sub_223331664(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  int v12;
  char v13;
  uint64_t *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        sub_2233318EC(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (uint64_t *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_2233318EC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    if (a2 >> 61)
      sub_223174E94();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v8 = a1 + 16;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v9 = v7[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        while (1)
        {
          v18 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v19 = v18[1];
          if (v19 >= a2)
            v19 %= a2;
          if (v19 == v9)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v20 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19))
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              *v7 = v20;
              v22 = 8 * v19;
              *v21 = **(_QWORD **)(*(_QWORD *)a1 + v22);
              **(_QWORD **)(*(_QWORD *)a1 + v22) = v18;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v7;
              v7 = v18;
              v9 = v19;
            }
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
        while (1)
        {
          v12 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v13 = v12[1] & v10;
          if (v13 == v11)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v14 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              *v7 = v14;
              v16 = 8 * v13;
              *v15 = **(_QWORD **)(*(_QWORD *)a1 + v16);
              **(_QWORD **)(*(_QWORD *)a1 + v16) = v12;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              v7 = v12;
              v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v17)
      operator delete(v17);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_223331ABC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a2;
  v8 = a1[2];
  v9 = *a1;
  if (0x34F72C234F72C235 * ((v8 - *a1) >> 4) >= a4)
  {
    v18 = a1[1];
    if (0x34F72C234F72C235 * ((v18 - v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        v23 = *a1;
      }
      else
      {
        v23 = *a1;
        do
        {
          sub_223331D64(v9, v6);
          v6 += 464;
          v9 += 464;
          v23 += 464;
        }
        while (v6 != a3);
        v18 = a1[1];
      }
      while (v18 != v23)
      {
        v18 -= 464;
        sub_22324A5A0(v18);
      }
      a1[1] = v23;
    }
    else
    {
      v19 = a2 + 16 * ((v18 - v9) >> 4);
      if (v18 != v9)
      {
        v20 = 16 * ((v18 - v9) >> 4);
        do
        {
          sub_223331D64(v9, v6);
          v6 += 464;
          v9 += 464;
          v20 -= 464;
        }
        while (v20);
        v9 = a1[1];
      }
      v21 = v9;
      if (v19 != a3)
      {
        v22 = 0;
        do
        {
          sub_223249DC0(v9 + v22, v19 + v22);
          v22 += 464;
        }
        while (v19 + v22 != a3);
        v21 = v9 + v22;
      }
      a1[1] = v21;
    }
  }
  else
  {
    if (v9)
    {
      v10 = a1[1];
      v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          v10 -= 464;
          sub_22324A5A0(v10);
        }
        while (v10 != v9);
        v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x8D3DCB08D3DCB0)
      goto LABEL_37;
    v12 = 0x34F72C234F72C235 * (v8 >> 4);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x469EE58469EE58 ? 0x8D3DCB08D3DCB0 : v13;
    if (v14 > 0x8D3DCB08D3DCB0)
LABEL_37:
      sub_22324A284();
    v15 = 464 * v14;
    v16 = (char *)operator new(464 * v14);
    *a1 = (uint64_t)v16;
    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)&v16[v15];
    if (v6 != a3)
    {
      v17 = 0;
      do
      {
        sub_223249DC0((uint64_t)&v16[v17], v6 + v17);
        v17 += 464;
      }
      while (v6 + v17 != a3);
      v16 += v17;
    }
    a1[1] = (uint64_t)v16;
  }
}

uint64_t sub_223331D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v5;
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216))
  {
    if (*(_BYTE *)(a1 + 216))
    {
      *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
      v9 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v9;
      v10 = *(_OWORD *)(a2 + 152);
      v11 = *(_OWORD *)(a2 + 168);
      v12 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = v12;
      *(_OWORD *)(a1 + 168) = v11;
      *(_OWORD *)(a1 + 152) = v10;
    }
  }
  else if (*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
    v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v13;
    v14 = *(_OWORD *)(a2 + 152);
    v15 = *(_OWORD *)(a2 + 168);
    v16 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v16;
    *(_OWORD *)(a1 + 168) = v15;
    *(_OWORD *)(a1 + 152) = v14;
    *(_BYTE *)(a1 + 216) = 1;
  }
  v17 = *(_OWORD *)(a2 + 224);
  v18 = *(_OWORD *)(a2 + 240);
  v19 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 240) = v18;
  *(_OWORD *)(a1 + 256) = v19;
  *(_OWORD *)(a1 + 224) = v17;
  if (a1 != a2)
    sub_2231984D0((_QWORD *)(a1 + 280), *(char **)(a2 + 280), *(char **)(a2 + 288), (uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4);
  if (*(unsigned __int8 *)(a1 + 320) != *(unsigned __int8 *)(a2 + 320))
  {
    if (!*(_BYTE *)(a1 + 320))
    {
      *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_BYTE *)(a1 + 320) = 1;
      v20 = (_QWORD *)(a1 + 324);
      v21 = (_QWORD *)(a2 + 324);
      v22 = *(unsigned __int8 *)(a1 + 356);
      if (v22 != *(unsigned __int8 *)(a2 + 356))
        goto LABEL_19;
      goto LABEL_16;
    }
    *(_BYTE *)(a1 + 320) = 0;
LABEL_15:
    v20 = (_QWORD *)(a1 + 324);
    v21 = (_QWORD *)(a2 + 324);
    v22 = *(unsigned __int8 *)(a1 + 356);
    if (v22 != *(unsigned __int8 *)(a2 + 356))
      goto LABEL_19;
    goto LABEL_16;
  }
  if (!*(_BYTE *)(a1 + 320))
    goto LABEL_15;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  v20 = (_QWORD *)(a1 + 324);
  v21 = (_QWORD *)(a2 + 324);
  v22 = *(unsigned __int8 *)(a1 + 356);
  if (v22 != *(unsigned __int8 *)(a2 + 356))
  {
LABEL_19:
    if (v22)
    {
      *(_BYTE *)(a1 + 356) = 0;
    }
    else
    {
      *v20 = *v21;
      v20[1] = v21[1];
      v20[2] = v21[2];
      v20[3] = v21[3];
      *(_BYTE *)(a1 + 356) = 1;
    }
    goto LABEL_22;
  }
LABEL_16:
  if (v22)
  {
    *v20 = *v21;
    v20[1] = v21[1];
    v20[2] = v21[2];
    v20[3] = v21[3];
  }
LABEL_22:
  sub_223331FC0(a1 + 360, a2 + 360);
  sub_223332394(a1 + 392, a2 + 392);
  sub_2233328E4(a1 + 424, a2 + 424);
  *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 456);
  return a1;
}

void sub_223331FC0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  size_t v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_2233320C8((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(char **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (v6 < 0)
        sub_22316E078();
      v7 = (char *)operator new(v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[8 * (v6 >> 3)];
      v8 = v6 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v7, v5, v8);
      *(_QWORD *)(a1 + 8) = &v7[v8];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2233320AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2233320C8(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v7 = result;
  v8 = result[2];
  v9 = *result;
  v10 = (_QWORD *)*result;
  if (__sz <= (v8 - *result) >> 3)
  {
    v17 = (_QWORD **)(result + 1);
    v18 = result[1];
    v19 = v18 - v9;
    v20 = (v18 - v9) >> 3;
    if (v20 < __sz)
    {
      v21 = &a2[8 * v20];
      if (v18 == v9)
        goto LABEL_35;
      if ((unint64_t)(v19 - 8) < 0x18)
      {
        v22 = a2;
      }
      else
      {
        v22 = a2;
        if ((unint64_t)(v9 - (_QWORD)a2) >= 0x20)
        {
          v23 = ((unint64_t)(v19 - 8) >> 3) + 1;
          v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v10 = (_QWORD *)(v9 + v24);
          v22 = &a2[v24];
          v25 = (__int128 *)(a2 + 16);
          v26 = (_OWORD *)(v9 + 16);
          v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = *v25;
            *(v26 - 1) = *(v25 - 1);
            *v26 = v28;
            v25 += 2;
            v26 += 2;
            v27 -= 4;
          }
          while (v27);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_34;
        }
      }
      do
      {
        v39 = *(_QWORD *)v22;
        v22 += 8;
        *v10++ = v39;
      }
      while (v22 != v21);
LABEL_34:
      v10 = *v17;
LABEL_35:
      v40 = (char *)v10;
      if (v21 != a3)
      {
        v41 = a3 - &a2[v19] - 8;
        if (v41 >= 0x38)
        {
          v40 = (char *)v10;
          if ((unint64_t)((char *)v10 - v19 - a2) >= 0x20)
          {
            v42 = (v41 >> 3) + 1;
            v43 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            v21 += v43 * 8;
            v40 = (char *)&v10[v43];
            v44 = v10 + 2;
            v45 = &a2[8 * v20 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *v44 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_43;
          }
        }
        else
        {
          v40 = (char *)v10;
        }
        do
        {
          v48 = *(_QWORD *)v21;
          v21 += 8;
          *(_QWORD *)v40 = v48;
          v40 += 8;
        }
        while (v21 != a3);
      }
LABEL_43:
      v16 = (char *)(v40 - (char *)v10);
      goto LABEL_44;
    }
    if (a2 == a3)
    {
      v16 = (char *)v10 - v9;
      goto LABEL_44;
    }
    v29 = a3 - a2 - 8;
    if (v29 < 0x18 || (unint64_t)(v9 - (_QWORD)a2) < 0x20)
    {
      v32 = (_QWORD *)*result;
      v33 = a2;
    }
    else
    {
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v32 = (_QWORD *)(v9 + v31);
      v33 = &a2[v31];
      v34 = (__int128 *)(a2 + 16);
      v35 = (_OWORD *)(v9 + 16);
      v36 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *v35 = v37;
        v34 += 2;
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_31;
    }
    do
    {
      v38 = *(_QWORD *)v33;
      v33 += 8;
      *v32++ = v38;
    }
    while (v33 != a3);
LABEL_31:
    v16 = (char *)v32 - v9;
    goto LABEL_44;
  }
  if (v10)
  {
    result[1] = v10;
    operator delete(v10);
    v8 = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  if (__sz >> 61)
    goto LABEL_45;
  v11 = v8 >> 2;
  if (v8 >> 2 <= __sz)
    v11 = __sz;
  v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v11;
  if (v13 >> 61)
LABEL_45:
    sub_22316E078();
  v14 = v13;
  result = operator new(8 * v13);
  v10 = result;
  *v7 = result;
  v7[1] = result;
  v7[2] = &result[v14];
  v15 = (char *)result;
  if (a2 != a3)
  {
    result = memcpy(result, a2, (a3 - a2) & 0xFFFFFFFFFFFFFFF8);
    v15 = (char *)v10 + ((a3 - a2) & 0xFFFFFFFFFFFFFFF8);
  }
  v16 = (char *)(v15 - (char *)v10);
  v17 = (_QWORD **)(v7 + 1);
LABEL_44:
  *v17 = &v16[(_QWORD)v10];
  return result;
}

void sub_223332394(uint64_t a1, uint64_t a2)
{
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _OWORD *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_22333251C((char **)a1, *(_QWORD *)a2, *(char **)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(char **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD **)a2;
    v4 = *(_QWORD **)(a2 + 8);
    v6 = (uint64_t)v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD **)a2)
    {
      if (v6 < 0)
        sub_22324A284();
      v7 = operator new((size_t)v4 - *(_QWORD *)a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[2 * (v6 >> 4)];
      v8 = v6 - 16;
      if ((unint64_t)(v6 - 16) < 0x90)
        goto LABEL_28;
      v9 = (v8 & 0xFFFFFFFFFFFFFFF0) + 16;
      if (v7 < (_QWORD *)((char *)v5 + v9) && v5 < (_QWORD *)((char *)v7 + v9))
        goto LABEL_28;
      v11 = (v8 >> 4) + 1;
      v12 = 2 * (v11 & 0x1FFFFFFFFFFFFFFCLL);
      v13 = &v5[v12];
      v14 = &v7[v12];
      v15 = v7 + 4;
      v16 = (__int128 *)(v5 + 4);
      v17 = v11 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = *(v16 - 2);
        v18 = *(v16 - 1);
        v21 = *v16;
        v20 = v16[1];
        v16 += 4;
        *(v15 - 2) = v19;
        *(v15 - 1) = v18;
        *v15 = v21;
        v15[1] = v20;
        v15 += 4;
        v17 -= 4;
      }
      while (v17);
      v5 = v13;
      v7 = v14;
      if (v11 != (v11 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          *v7 = *v5;
          v7[1] = v5[1];
          v7 += 2;
          v5 += 2;
        }
        while (v5 != v4);
        v14 = v7;
      }
      *(_QWORD *)(a1 + 8) = v14;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_223332500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_22333251C(char **a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v8;
  char *v9;
  char *result;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  char *v20;
  char **v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  __int128 *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 *v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  result = v9;
  if (__sz > (v8 - (uint64_t)v9) >> 4)
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_56;
    v11 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v11 = __sz;
    v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v13 = 0xFFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 60)
LABEL_56:
      sub_22324A284();
    v14 = 16 * v13;
    result = (char *)operator new(16 * v13);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v14];
    v15 = result;
    if ((char *)a2 == a3)
      goto LABEL_16;
    v16 = (unint64_t)&a3[-a2 - 16];
    if (v16 >= 0x90
      && ((v17 = (v16 & 0xFFFFFFFFFFFFFFF0) + 16, (unint64_t)result >= a2 + v17)
       || (unint64_t)&result[v17] <= a2))
    {
      v54 = (v16 >> 4) + 1;
      v55 = 16 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
      v18 = (__int128 *)(a2 + v55);
      v15 = &result[v55];
      v56 = result + 32;
      v57 = (__int128 *)(a2 + 32);
      v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v59 = *(v57 - 2);
        v60 = *(v57 - 1);
        v61 = *v57;
        v62 = v57[1];
        v57 += 4;
        *(v56 - 2) = v59;
        *(v56 - 1) = v60;
        *v56 = v61;
        v56[1] = v62;
        v56 += 4;
        v58 -= 4;
      }
      while (v58);
      if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_16;
    }
    else
    {
      v18 = (__int128 *)a2;
      v15 = result;
    }
    do
    {
      v19 = *v18++;
      *(_OWORD *)v15 = v19;
      v15 += 16;
    }
    while (v18 != (__int128 *)a3);
LABEL_16:
    a1[1] = v15;
    return result;
  }
  v22 = a1[1];
  v21 = a1 + 1;
  v20 = v22;
  v23 = v22 - v9;
  v24 = (v22 - v9) >> 4;
  if (v24 >= __sz)
  {
    if ((char *)a2 == a3)
    {
      *v21 = v9;
      return result;
    }
    v27 = (unint64_t)&a3[-a2 - 16];
    if (v27 >= 0x90
      && ((v28 = (v27 & 0xFFFFFFFFFFFFFFF0) + 16, (unint64_t)v9 >= a2 + v28) || (unint64_t)&v9[v28] <= a2))
    {
      v63 = (v27 >> 4) + 1;
      v64 = 16 * (v63 & 0x1FFFFFFFFFFFFFFCLL);
      v29 = &v9[v64];
      v30 = (char *)(a2 + v64);
      v65 = (__int128 *)(a2 + 32);
      v66 = v9 + 32;
      v67 = v63 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v69 = *(v65 - 2);
        v68 = *(v65 - 1);
        v71 = *v65;
        v70 = v65[1];
        v65 += 4;
        *(v66 - 2) = v69;
        *(v66 - 1) = v68;
        *v66 = v71;
        v66[1] = v70;
        v66 += 4;
        v67 -= 4;
      }
      while (v67);
      if (v63 == (v63 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_27;
    }
    else
    {
      v29 = v9;
      v30 = (char *)a2;
    }
    do
    {
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
      v29 += 16;
      v30 += 16;
    }
    while (v30 != a3);
LABEL_27:
    *v21 = v29;
    return result;
  }
  v25 = (char *)(a2 + 16 * v24);
  if (v20 == v9)
    goto LABEL_38;
  if ((unint64_t)(v23 - 16) >= 0x90)
  {
    v31 = (unint64_t)v9 < a2 + (v23 & 0xFFFFFFFFFFFFFFF0)
       && (unint64_t)&v9[v23 & 0xFFFFFFFFFFFFFFF0] > a2;
    v26 = (char *)a2;
    if (!v31)
    {
      v32 = ((unint64_t)(v23 - 16) >> 4) + 1;
      v33 = 16 * (v32 & 0x1FFFFFFFFFFFFFFCLL);
      result = &v9[v33];
      v26 = (char *)(a2 + v33);
      v34 = (__int128 *)(a2 + 32);
      v35 = v9 + 32;
      v36 = v32 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *(v34 - 2);
        v37 = *(v34 - 1);
        v40 = *v34;
        v39 = v34[1];
        v34 += 4;
        *(v35 - 2) = v38;
        *(v35 - 1) = v37;
        *v35 = v40;
        v35[1] = v39;
        v35 += 4;
        v36 -= 4;
      }
      while (v36);
      if (v32 == (v32 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_37;
    }
  }
  else
  {
    v26 = (char *)a2;
  }
  do
  {
    *(_QWORD *)result = *(_QWORD *)v26;
    *((_QWORD *)result + 1) = *((_QWORD *)v26 + 1);
    v26 += 16;
    result += 16;
  }
  while (v26 != v25);
LABEL_37:
  result = *v21;
LABEL_38:
  v41 = result;
  if (v25 != a3)
  {
    v42 = v23 + a2;
    v43 = (unint64_t)&a3[-v23 - a2 - 16];
    if (v43 >= 0xD0)
    {
      v44 = (v43 & 0xFFFFFFFFFFFFFFF0) + 16;
      if ((unint64_t)result >= v44 + v42 || (v41 = result, v25 >= &result[v44]))
      {
        v45 = (v43 >> 4) + 1;
        v46 = 16 * (v45 & 0x1FFFFFFFFFFFFFFCLL);
        v25 += v46;
        v41 = &result[v46];
        v47 = result + 32;
        v48 = (__int128 *)(a2 + 16 * v24 + 32);
        v49 = v45 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v51 = *(v48 - 2);
          v50 = *(v48 - 1);
          v53 = *v48;
          v52 = v48[1];
          v48 += 4;
          *(v47 - 2) = v51;
          *(v47 - 1) = v50;
          *v47 = v53;
          v47[1] = v52;
          v47 += 4;
          v49 -= 4;
        }
        while (v49);
        if (v45 == (v45 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_47;
      }
    }
    else
    {
      v41 = result;
    }
    do
    {
      *(_QWORD *)v41 = *(_QWORD *)v25;
      *((_QWORD *)v41 + 1) = *((_QWORD *)v25 + 1);
      v41 += 16;
      v25 += 16;
    }
    while (v25 != a3);
  }
LABEL_47:
  *v21 = v41;
  return result;
}

void sub_2233328E4(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_2233329C8(a1, *(char ***)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(char **)a1;
    if (*(_QWORD *)a1)
    {
      v4 = *(char **)(a1 + 8);
      v5 = *(char **)a1;
      if (v4 != v3)
      {
        v6 = *(char **)(a1 + 8);
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v5);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    sub_22324A298((_QWORD *)a1, (uint64_t *)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2233329C8(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_22324A284();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_22324A3A4(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_2233320C8(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_22324A3A4(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_2233320C8(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_223332C2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223332C34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223332C3C(uint64_t a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t *v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_223323BA8();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_223332EC8(v9, v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = &a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != (uint64_t *)v10)
          sub_223333028(v10, (uint64_t *)*v6, (uint64_t *)v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_223332EC8(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != (uint64_t *)v10)
        sub_223333028(v10, (uint64_t *)*v6, (uint64_t *)v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_223332EB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223332EC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_223332EC8(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v7 = *v6;
      v8 = v6[1];
      v9 = v8 - *v6;
      if (v8 != *v6)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
        if (v10 >= 0xAAAAAAAAAAAAAABLL)
          sub_223323BA8();
        v11 = (char *)operator new(v9);
        v12 = 0;
        *a4 = v11;
        a4[1] = v11;
        a4[2] = &v11[24 * v10];
        do
        {
          v13 = v7 + v12;
          v14 = &v11[v12];
          v15 = *(_QWORD *)(v7 + v12);
          *((_DWORD *)v14 + 2) = *(_DWORD *)(v7 + v12 + 8);
          *(_QWORD *)v14 = v15;
          v16 = *(_QWORD *)(v7 + v12 + 12);
          *((_DWORD *)v14 + 5) = *(_DWORD *)(v7 + v12 + 20);
          *(_QWORD *)(v14 + 12) = v16;
          v12 += 24;
        }
        while (v13 + 24 != v8);
        a4[1] = &v11[v12];
      }
      v6 += 3;
      a4 += 3;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_223332FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223333004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_22324A4B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_223333028(char **a1, uint64_t *a2, uint64_t *a3, size_t __sz)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char **v16;
  char *v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v17 = a1[1];
    v16 = a1 + 1;
    v15 = v17;
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - result) >> 3);
    if (v18 >= __sz)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v27 = v28;
          v29 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)v27 + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(v27 + 12) = v29;
          v26 += 24;
          v6 += 3;
          v27 += 24;
        }
        while (v6 != a3);
      }
      *v16 = v26;
    }
    else
    {
      v19 = &a2[3 * v18];
      if (v15 != result)
      {
        do
        {
          v20 = *v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)result = v20;
          v21 = *(uint64_t *)((char *)v6 + 12);
          *((_DWORD *)result + 5) = *((_DWORD *)v6 + 5);
          *(_QWORD *)(result + 12) = v21;
          v6 += 3;
          result += 24;
        }
        while (v6 != v19);
        result = *v16;
      }
      v22 = result;
      if (v19 != a3)
      {
        v22 = result;
        v23 = result;
        do
        {
          v24 = *v19;
          *((_DWORD *)v23 + 2) = *((_DWORD *)v19 + 2);
          *(_QWORD *)v23 = v24;
          v25 = *(uint64_t *)((char *)v19 + 12);
          *((_DWORD *)v23 + 5) = *((_DWORD *)v19 + 5);
          *(_QWORD *)(v23 + 12) = v25;
          v22 += 24;
          v19 += 3;
          v23 += 24;
        }
        while (v19 != a3);
      }
      *v16 = v22;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_27;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_27:
      sub_223323BA8();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *(_QWORD *)v14 = *v6;
        *((_DWORD *)v14 + 2) = *((_DWORD *)v6 + 2);
        *(_QWORD *)(v14 + 12) = *(uint64_t *)((char *)v6 + 12);
        *((_DWORD *)v14 + 5) = *((_DWORD *)v6 + 5);
        v14 += 24;
        v6 += 3;
      }
      while (v6 != a3);
    }
    a1[1] = v14;
  }
  return result;
}

uint64_t sub_223333274(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a2 != a3)
  {
    for (i = a2; i != a3; i = (__int128 *)((char *)i + 88))
    {
      v7 = *i;
      v8 = i[1];
      v9 = i[3];
      *(_OWORD *)(a4 + 32) = i[2];
      *(_OWORD *)(a4 + 48) = v9;
      *(_QWORD *)(a4 + 64) = 0;
      *(_OWORD *)a4 = v7;
      *(_OWORD *)(a4 + 16) = v8;
      *(_QWORD *)(a4 + 72) = 0;
      *(_QWORD *)(a4 + 80) = 0;
      v11 = (char *)*((_QWORD *)i + 8);
      v10 = (char *)*((_QWORD *)i + 9);
      v12 = v10 - v11;
      if (v10 == v11)
        goto LABEL_4;
      if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) >= 0xAAAAAAAAAAAAAABLL)
        sub_223323BA8();
      v13 = (char *)operator new(v10 - v11);
      *(_QWORD *)(a4 + 64) = v13;
      *(_QWORD *)(a4 + 72) = v13;
      *(_QWORD *)(a4 + 80) = &v13[8 * (v12 >> 3)];
      if ((unint64_t)(v12 - 24) >= 0xD8
        && ((v14 = (v12 - 24) / 0x18uLL, v13 < &v11[24 * v14 + 24]) ? (v15 = v11 >= &v13[24 * v14 + 24]) : (v15 = 1), v15))
      {
        v16 = v14 + 1;
        v17 = (v14 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v18 = &v11[24 * v17];
        v19 = &v13[24 * v17];
        v20 = v17;
        do
        {
          v21 = *((_OWORD *)v11 + 1);
          v23 = *((_OWORD *)v11 + 4);
          v22 = *((_OWORD *)v11 + 5);
          v24 = *((_OWORD *)v11 + 2);
          v25 = *((_OWORD *)v11 + 3);
          *(_OWORD *)v13 = *(_OWORD *)v11;
          *((_OWORD *)v13 + 1) = v21;
          *((_OWORD *)v13 + 2) = v24;
          *((_OWORD *)v13 + 3) = v25;
          *((_OWORD *)v13 + 4) = v23;
          *((_OWORD *)v13 + 5) = v22;
          v13 += 96;
          v11 += 96;
          v20 -= 4;
        }
        while (v20);
        if (v16 == v17)
          goto LABEL_3;
      }
      else
      {
        v18 = v11;
        v19 = v13;
      }
      do
      {
        *(_QWORD *)v19 = *(_QWORD *)v18;
        *((_QWORD *)v19 + 1) = *((_QWORD *)v18 + 1);
        *((_QWORD *)v19 + 2) = *((_QWORD *)v18 + 2);
        v19 += 24;
        v18 += 24;
      }
      while (v18 != v10);
LABEL_3:
      *(_QWORD *)(a4 + 72) = v19;
LABEL_4:
      a4 += 88;
    }
  }
  return a4;
}

void sub_22333342C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 72) = v12;
    operator delete(v12);
  }
  sub_223333454((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223333454(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 88;
    }
  }
  return a1;
}

char *sub_2233334B4(uint64_t a1, unint64_t a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char **v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  v6 = (char *)a2;
  v8 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) < __sz)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_66;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_66:
      sub_223323BA8();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v13];
    v14 = result;
    if (v6 == a3)
      goto LABEL_44;
    v15 = a3 - v6 - 24;
    if (v15 < 0x108
      || ((v16 = v15 / 0x18, v17 = 24 * v16 + 24, result < &v6[v17]) ? (v18 = &result[v17] > v6) : (v18 = 0), v18))
    {
      v21 = v6;
      v14 = result;
    }
    else
    {
      v19 = v16 + 1;
      v20 = (v16 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v21 = &v6[24 * v20];
      v14 = &result[24 * v20];
      v22 = v20;
      v23 = result;
      do
      {
        v24 = *((_OWORD *)v6 + 1);
        v25 = *((_OWORD *)v6 + 2);
        v26 = *((_OWORD *)v6 + 3);
        v27 = *((_OWORD *)v6 + 4);
        v28 = *((_OWORD *)v6 + 5);
        *(_OWORD *)v23 = *(_OWORD *)v6;
        *((_OWORD *)v23 + 1) = v24;
        *((_OWORD *)v23 + 4) = v27;
        *((_OWORD *)v23 + 5) = v28;
        *((_OWORD *)v23 + 2) = v25;
        *((_OWORD *)v23 + 3) = v26;
        v23 += 96;
        v6 += 96;
        v22 -= 4;
      }
      while (v22);
      if (v19 == v20)
        goto LABEL_44;
    }
    do
    {
      *(_OWORD *)v14 = *(_OWORD *)v21;
      *((_QWORD *)v14 + 2) = *((_QWORD *)v21 + 2);
      v14 += 24;
      v21 += 24;
    }
    while (v21 != a3);
LABEL_44:
    *(_QWORD *)(a1 + 8) = v14;
    return result;
  }
  v31 = *(char **)(a1 + 8);
  v30 = (char **)(a1 + 8);
  v29 = v31;
  v32 = v31 - result;
  v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - result) >> 3);
  if (v33 < __sz)
  {
    v34 = (char *)(a2 + 24 * v33);
    if (v29 == result)
      goto LABEL_48;
    if ((unint64_t)(v32 - 24) < 0x108
      || ((v35 = (v32 - 24) / 0x18uLL, v36 = 24 * v35 + 24, (unint64_t)result < a2 + v36)
        ? (v37 = (unint64_t)&result[v36] > a2)
        : (v37 = 0),
          v37))
    {
      v40 = result;
      v41 = (char *)a2;
    }
    else
    {
      v38 = v35 + 1;
      v39 = (v35 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v40 = &result[24 * v39];
      v41 = (char *)(a2 + 24 * v39);
      v42 = v39;
      v43 = (_OWORD *)a2;
      do
      {
        v44 = v43[1];
        v46 = v43[4];
        v45 = v43[5];
        v47 = v43[2];
        v48 = v43[3];
        *(_OWORD *)result = *v43;
        *((_OWORD *)result + 1) = v44;
        *((_OWORD *)result + 2) = v47;
        *((_OWORD *)result + 3) = v48;
        v43 += 6;
        *((_OWORD *)result + 4) = v46;
        *((_OWORD *)result + 5) = v45;
        result += 96;
        v42 -= 4;
      }
      while (v42);
      if (v38 == v39)
        goto LABEL_47;
    }
    do
    {
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
      *((_QWORD *)v40 + 2) = *((_QWORD *)v41 + 2);
      v41 += 24;
      v40 += 24;
    }
    while (v41 != v34);
LABEL_47:
    result = *v30;
LABEL_48:
    v64 = result;
    if (v34 != a3)
    {
      v65 = v32 + a2;
      v66 = (unint64_t)&a3[-v32 - a2 - 24];
      if (v66 >= 0x138
        && ((v67 = (unint64_t)&a3[-v65 - 24], v68 = 24 * (v67 / 0x18), result < &a3[v68 - v67])
          ? (v69 = v34 >= &result[v68 + 24])
          : (v69 = 1),
            v69))
      {
        v70 = v66 / 0x18 + 1;
        v71 = 24 * (v70 & 0x1FFFFFFFFFFFFFFCLL);
        v72 = &v34[v71];
        v64 = &result[v71];
        v73 = v70 & 0x1FFFFFFFFFFFFFFCLL;
        v74 = result;
        do
        {
          v75 = *((_OWORD *)v34 + 1);
          v77 = *((_OWORD *)v34 + 4);
          v76 = *((_OWORD *)v34 + 5);
          v78 = *((_OWORD *)v34 + 2);
          v79 = *((_OWORD *)v34 + 3);
          *(_OWORD *)v74 = *(_OWORD *)v34;
          *((_OWORD *)v74 + 1) = v75;
          *((_OWORD *)v74 + 2) = v78;
          *((_OWORD *)v74 + 3) = v79;
          *((_OWORD *)v74 + 4) = v77;
          *((_OWORD *)v74 + 5) = v76;
          v74 += 96;
          v34 += 96;
          v73 -= 4;
        }
        while (v73);
        if (v70 == (v70 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_64;
      }
      else
      {
        v72 = v34;
        v64 = result;
      }
      do
      {
        *(_QWORD *)v64 = *(_QWORD *)v72;
        *((_QWORD *)v64 + 1) = *((_QWORD *)v72 + 1);
        *((_QWORD *)v64 + 2) = *((_QWORD *)v72 + 2);
        v64 += 24;
        v72 += 24;
      }
      while (v72 != a3);
    }
LABEL_64:
    *v30 = v64;
    return result;
  }
  if ((char *)a2 != a3)
  {
    v49 = (unint64_t)&a3[-a2 - 24];
    if (v49 < 0x108
      || ((v50 = v49 / 0x18, v51 = 24 * v50 + 24, (unint64_t)result < a2 + v51)
        ? (v52 = (unint64_t)&result[v51] > a2)
        : (v52 = 0),
          v52))
    {
      v55 = result;
      v56 = (char *)a2;
    }
    else
    {
      v53 = v50 + 1;
      v54 = (v50 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v55 = &result[24 * v54];
      v56 = (char *)(a2 + 24 * v54);
      v57 = v54;
      v58 = result;
      do
      {
        v59 = *((_OWORD *)v6 + 1);
        v61 = *((_OWORD *)v6 + 4);
        v60 = *((_OWORD *)v6 + 5);
        v62 = *((_OWORD *)v6 + 2);
        v63 = *((_OWORD *)v6 + 3);
        *(_OWORD *)v58 = *(_OWORD *)v6;
        *((_OWORD *)v58 + 1) = v59;
        *((_OWORD *)v58 + 2) = v62;
        *((_OWORD *)v58 + 3) = v63;
        v6 += 96;
        *((_OWORD *)v58 + 4) = v61;
        *((_OWORD *)v58 + 5) = v60;
        v58 += 96;
        v57 -= 4;
      }
      while (v57);
      if (v53 == v54)
        goto LABEL_61;
    }
    do
    {
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *((_QWORD *)v55 + 1) = *((_QWORD *)v56 + 1);
      *((_QWORD *)v55 + 2) = *((_QWORD *)v56 + 2);
      v55 += 24;
      v56 += 24;
    }
    while (v56 != a3);
LABEL_61:
    *v30 = v55;
    return result;
  }
  *v30 = result;
  return result;
}

size_t *sub_223333960(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  BOOL v7;
  int v8;
  _BYTE *v9;
  size_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  unsigned int v18;
  size_t v19;
  const void *v20;
  BOOL v21;
  BOOL v22;
  size_t v23;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 8);
  v4 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v17 = *(_DWORD *)(v1 + 12);
    if (v17 == *(_DWORD *)(v2 + 12))
    {
      v18 = *(_DWORD *)v1;
      if (v17 == *(_DWORD *)v1)
      {
        v19 = (*(_DWORD *)(v1 + 4) * v17);
        v20 = *(const void **)(v1 + 40);
        if ((_DWORD)v19)
          v21 = v20 == 0;
        else
          v21 = 0;
        if (v21)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
        }
        else if (!(_DWORD)v19)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)(v2 + 40), v20, v19);
      }
    }
    else
    {
      v18 = *(_DWORD *)v1;
    }
    v23 = v18;
    if (v18)
      v22 = *(_DWORD *)(v1 + 4) == 0;
    else
      v22 = 1;
    if (!v22)
      return sub_223333B24(&v23, v1, v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 4);
    if (*(_DWORD *)v1)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *(_DWORD *)v1 - 1;
      v9 = *(_BYTE **)(v1 + 40);
      v10 = *(size_t **)(v2 + 40);
      v11 = v6 - 1;
      if (v11)
      {
        v12 = *(unsigned int *)(v2 + 12);
        v13 = *(unsigned int *)(v1 + 12);
        if (*(_DWORD *)v1 == 1)
        {
          do
          {
            *(_BYTE *)v10 = *v9;
            v9 += v13;
            v10 = (size_t *)((char *)v10 + v12);
            --v11;
          }
          while (v11);
        }
        else
        {
          for (i = 0; i != v11; ++i)
          {
            v15 = v8;
            v16 = v9;
            result = v10;
            do
            {
              *(_BYTE *)result = *v16;
              v16 += v3;
              result = (size_t *)((char *)result + v4);
              --v15;
            }
            while (v15);
            *(_BYTE *)result = *v16;
            v9 += v13;
            v10 = (size_t *)((char *)v10 + v12);
          }
        }
      }
      for (; v8; --v8)
      {
        *(_BYTE *)v10 = *v9;
        v9 += v3;
        v10 = (size_t *)((char *)v10 + v4);
      }
      *(_BYTE *)v10 = *v9;
    }
  }
  return result;
}

size_t *sub_223333B24(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *(char **)(a2 + 40);
    v7 = *(char **)(a3 + 40);
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *(unsigned int *)(a3 + 12);
      v10 = *(unsigned int *)(a2 + 12);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

uint64_t sub_223333C70(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  _QWORD v14[3];
  void *memptr[3];
  size_t v16[2];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr[0] = 0;
    v6 = malloc_type_posix_memalign(memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2244E2E20(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = memptr[0];
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  if (*(_DWORD *)(a2 + 28))
    v7 = *(_DWORD *)(a2 + 24) == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)(a2 + 32);
  if (v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a2 + 24);
  v14[0] = *(_QWORD *)(a2 + 8);
  v14[1] = v9;
  v14[2] = v8;
  if (HIDWORD(v9) * HIDWORD(v8) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_24;
  }
  if ((_DWORD)v9 && HIDWORD(v9))
  {
    if (*(_DWORD *)(a1 + 28))
      v10 = *(_DWORD *)(a1 + 24) == 0;
    else
      v10 = 1;
    v12 = *(void **)(a1 + 24);
    v11 = *(void **)(a1 + 32);
    if (v10)
      v12 = 0;
    memptr[0] = *(void **)(a1 + 8);
    memptr[1] = v12;
    memptr[2] = v11;
    if (HIDWORD(v12) * HIDWORD(v11) != -1
      || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      v16[0] = (size_t)v14;
      v16[1] = (size_t)memptr;
      sub_22330C664(v16);
      return a1;
    }
LABEL_24:
    abort();
  }
  return a1;
}

void sub_223333DE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223333E00(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v15[2];
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    v15[0] = 0;
    v6 = malloc_type_posix_memalign(v15, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_2244E2E20(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = v15[0];
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 24))
    v9 = *(_DWORD *)(a2 + 28) == 0;
  else
    v9 = 1;
  v10 = *(_DWORD *)(a2 + 44) >> 2;
  v11 = (*(_QWORD *)(a2 + 36) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
  v12 = v9 || v8 == 0;
  v13 = *(void **)(a2 + 24);
  if (v12)
  {
    v13 = 0;
    v8 = 0;
  }
  v15[0] = *(void **)(a2 + 8);
  v15[1] = v13;
  v16 = v8;
  v17 = v11;
  v18 = v10;
  if (v8 * v10 == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  sub_223333F40(a1, v15);
  return a1;
}

void sub_223333F24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_223333F40(uint64_t a1, _DWORD *a2)
{
  BOOL v2;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15[2];

  if (a2[2])
    v2 = a2[3] == 0;
  else
    v2 = 1;
  if (!v2 && a2[4] != 0)
  {
    v5 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v6 = *(_DWORD *)(a1 + 28) == 0;
    else
      v6 = 1;
    v7 = *(_DWORD *)(a1 + 44) >> 2;
    v8 = (*(_QWORD *)(a1 + 36) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
    v9 = v6 || v5 == 0;
    v10 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = 0;
      v5 = 0;
    }
    v11[0] = *(_QWORD *)(a1 + 8);
    v11[1] = v10;
    v12 = v5;
    v13 = v8;
    v14 = v7;
    if (v5 * v7 == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v15[0] = (uint64_t)a2;
    v15[1] = (uint64_t)v11;
    sub_223334018(v15);
  }
}

void sub_223334018(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  _DWORD *v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  char v21;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 20);
  v4 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    sub_2233340D0(a1);
  }
  else
  {
    v13 = 0;
    v7 = *(_DWORD *)(v1 + 8);
    v6 = *(_DWORD *)(v1 + 12);
    v8 = *(_DWORD *)(v1 + 16);
    if (v7)
      v9 = v6 == 0;
    else
      v9 = 1;
    if (!v9 && v8 != 0)
    {
      v14 = 0;
      v15 = v7 - 1;
      v16 = v3 | (v4 << 32);
      v17 = v6 - 1;
      v18 = *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v2 + 24) << 32);
      v19 = v8 - 1;
      v20 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
      v11 = *(_DWORD **)v1;
      v12 = *(_DWORD **)v2;
      v21 = 0;
      sub_2233347C8(&v14, (uint64_t)&v21, (uint64_t)&v13, v11, v12);
    }
  }
}

uint64_t *sub_2233340D0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_223334204((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_223334204((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 4 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_223334358(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_223334204(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 4 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 4 * result[7];
      v12 = 4 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        result = memmove(v9, v8, 4 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_223334358(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_255795680;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_255795670 || byte_255795678)
              {
                v22 = qword_255795648;
                v23 = qword_255795650;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_255795670)
                goto LABEL_52;
              v8 = v18;
              qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 4 * v17);
LABEL_19:
            v15 = &v16[4 * v43];
            v13 += 4 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 4 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[4 * v36];
          v13 = &v39[4 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 4 * *((unsigned int *)a2 + 7);
      v33 = 4 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 4 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 4 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 4 * v30);
LABEL_44:
        v28 += 4 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 4 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 4 * v31);
  }
  return result;
}

float sub_2233347C8(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  float result;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    v8 = a1[9];
    v9 = a1[10];
    if (v6)
    {
      v10 = a1[6];
      v11 = a1[7];
      if (!v7)
      {
        do
        {
          v50 = a5;
          v51 = a4;
          v52 = v6;
          do
          {
            *v50 = *v51;
            v51 += v10;
            v50 += v11;
            --v52;
          }
          while (v52);
          *v50 = *v51;
          a4 += v8;
          a5 += v9;
          ++v7;
        }
        while (v7 != v5);
        goto LABEL_32;
      }
      v12 = 0;
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[3];
      v16 = 4 * v9;
      v17 = v11;
      v18 = 4 * a1[4];
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            *v28 = *v29;
            v29 = (_DWORD *)((char *)v29 + v15);
            v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *v28 = *v29;
          v25 = (_DWORD *)((char *)v25 + v14 * 4);
          v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v31 = v7;
        do
        {
          *v27 = *v26;
          v26 = (_DWORD *)((char *)v26 + v15);
          v27 = (_DWORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *v27 = *v26;
        a4 = (_DWORD *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        v19 = (_DWORD *)((char *)v19 + v13);
        v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v10 = a1[6];
      v11 = a1[7];
      if (v7)
      {
        v32 = 0;
        v33 = 4 * v10;
        v34 = 4 * a1[3];
        v35 = 4 * v11;
        v36 = 4 * a1[4];
        do
        {
          v37 = a5;
          v38 = a4;
          v39 = v7;
          do
          {
            *v37 = *v38;
            v38 = (_DWORD *)((char *)v38 + v34);
            v37 = (_DWORD *)((char *)v37 + v36);
            --v39;
          }
          while (v39);
          *v37 = *v38;
          a4 = (_DWORD *)((char *)a4 + v33);
          a5 = (_DWORD *)((char *)a5 + v35);
          ++v32;
        }
        while (v32 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a5 = *a4;
        a4 += v10;
        a5 += v11;
        --v6;
      }
      while (v6);
      goto LABEL_35;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_35;
    }
    v40 = 0;
    v41 = 4 * v8;
    v42 = 4 * a1[3];
    v43 = 4 * v9;
    v44 = 4 * a1[4];
    do
    {
      v45 = a5;
      v46 = a4;
      v47 = v7;
      do
      {
        *v45 = *v46;
        v46 = (_DWORD *)((char *)v46 + v42);
        v45 = (_DWORD *)((char *)v45 + v44);
        --v47;
      }
      while (v47);
      *v45 = *v46;
      a4 = (_DWORD *)((char *)a4 + v41);
      a5 = (_DWORD *)((char *)a5 + v43);
      ++v40;
    }
    while (v40 != v5);
  }
  else
  {
    v7 = a1[2];
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v48 = 4 * a1[3];
    v49 = 4 * a1[4];
    do
    {
      *a5 = *a4;
      a4 = (_DWORD *)((char *)a4 + v48);
      a5 = (_DWORD *)((char *)a5 + v49);
      --v7;
    }
    while (v7);
  }
LABEL_35:
  result = *(float *)a4;
  *a5 = *a4;
  return result;
}

uint64_t sub_223334A68(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void **v24;

  if (*(_BYTE *)(a1 + 544))
  {
    v2 = *(void **)(a1 + 520);
    if (v2)
    {
      *(_QWORD *)(a1 + 528) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 496);
    if (v3)
    {
      *(_QWORD *)(a1 + 504) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 480))
  {
    v4 = *(void **)(a1 + 440);
    if (v4)
      free(v4);
    *(_QWORD *)(a1 + 440) = 0;
  }
  if (*(_BYTE *)(a1 + 384))
  {
    v5 = *(void **)(a1 + 352);
    if (v5)
      free(v5);
    *(_QWORD *)(a1 + 352) = 0;
  }
  if (*(_BYTE *)(a1 + 304))
  {
    v6 = *(void **)(a1 + 272);
    if (v6)
      free(v6);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v7 = *(void **)(a1 + 144);
  if (v7)
  {
    *(_QWORD *)(a1 + 152) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 120);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 128);
    v10 = *(void **)(a1 + 120);
    if (v9 != v8)
    {
      do
      {
        v11 = *(void **)(v9 - 24);
        if (v11)
        {
          *(_QWORD *)(v9 - 16) = v11;
          operator delete(v11);
        }
        v9 -= 88;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v8;
    operator delete(v10);
  }
  v12 = *(_QWORD *)(a1 + 96);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 104);
    v14 = *(void **)(a1 + 96);
    if (v13 != v12)
    {
      v15 = *(_QWORD *)(a1 + 104);
      do
      {
        v17 = *(void **)(v15 - 24);
        v15 -= 24;
        v16 = v17;
        if (v17)
        {
          *(_QWORD *)(v13 - 16) = v16;
          operator delete(v16);
        }
        v13 = v15;
      }
      while (v15 != v12);
      v14 = *(void **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 104) = v12;
    operator delete(v14);
  }
  v18 = *(_QWORD *)(a1 + 72);
  if (v18)
  {
    v19 = *(_QWORD *)(a1 + 80);
    v20 = *(void **)(a1 + 72);
    if (v19 != v18)
    {
      do
      {
        v19 -= 464;
        sub_22324A5A0(v19);
      }
      while (v19 != v18);
      v20 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v18;
    operator delete(v20);
  }
  v24 = (void **)(a1 + 48);
  sub_223330370(&v24);
  v21 = *(void **)(a1 + 24);
  if (v21)
  {
    *(_QWORD *)(a1 + 32) = v21;
    operator delete(v21);
  }
  v22 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v22;
    operator delete(v22);
  }
  return a1;
}

uint64_t sub_223334C14(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_223334C64(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223334CC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2DB98;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_223334D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_223334D88()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_223334DC4()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_223334E00()
{
  return 1;
}

uint64_t sub_223334E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_223334E88()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223334E9C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC2DC10;
  result[1] = v3;
  return result;
}

uint64_t sub_223334ED0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC2DC10;
  a2[1] = v2;
  return result;
}

unsigned int *sub_223334EEC(uint64_t a1, uint64_t **a2, int32x4_t a3, int32x4_t a4, double a5, float32x4_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  int8x16_t v11;
  float32x2_t v12;
  __n128 v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  __n128 v17;
  __n128 v18;
  int8x16_t v19;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unsigned int *result;
  unsigned int *v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *i;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;

  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v7 + 80) && *(_QWORD *)(v7 + 96))
  {
    v8 = **a2;
    v9 = (*a2)[1];
    while (v8 != v9)
    {
      if (!*(_DWORD *)(v8 + 224))
      {
        a3.i64[0] = *(_QWORD *)(v8 + 40);
        a3.i32[2] = *(_DWORD *)(v8 + 48);
        a4.i64[0] = *(_QWORD *)(v8 + 56);
        a4.i32[2] = *(_DWORD *)(v8 + 64);
        a6.i64[0] = *(_QWORD *)(v8 + 88);
        a6.i32[2] = *(_DWORD *)(v8 + 96);
        v10 = (float32x2_t)vzip1q_s32(a3, a4).u64[0];
        v11 = (int8x16_t)vnegq_f32(a6);
        v12 = vmul_n_f32(v10, *(float *)v11.i32);
        v13.n128_u64[0] = (unint64_t)v10;
        v13.n128_u32[2] = *(_QWORD *)(v8 + 72);
        v10.i32[0] = *(_DWORD *)(v8 + 80);
        v14 = (int8x16_t)vtrn2q_s32(a3, a4);
        v14.i32[2] = HIDWORD(*(_QWORD *)(v8 + 72));
        v15 = vzip2q_s32(a3, a4);
        v16 = (int8x16_t)v15;
        v16.i32[2] = v10.i32[0];
        v13.n128_u32[3] = v14.i32[0];
        v17 = v13;
        v18.n128_u64[0] = (unint64_t)vmls_laneq_f32(vmls_lane_f32(v12, *(float32x2_t *)v14.i8, *(float32x2_t *)a6.f32, 1), *(float32x2_t *)v15.i8, a6, 2);
        v12.i32[0] = vdupq_laneq_s32((int32x4_t)v16, 2).u32[0];
        v18.n128_u64[1] = __PAIR64__(1.0, vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)(v8 + 72), *(float32x2_t *)v11.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)(v8 + 72), 1), *(float32x2_t *)a6.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), v10).u32[0]);
        v19 = vextq_s8(vextq_s8(v14, v14, 0xCuLL), v16, 8uLL);
        v16.i64[0] = __PAIR64__(v19.u32[0], v14.u32[0]);
        v16.i64[1] = v19.u32[1];
        v39 = (__n128)v16;
        v16.i64[0] = v19.i64[1];
        v16.i64[1] = v12.u32[0];
        v17.n128_u32[3] = 0;
        v36 = v17;
        v37 = v18;
        v38 = (__n128)v16;
        Default = CFAllocatorGetDefault();
        v21 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *(CFUUIDBytes *)v8);
        sub_224533328(&v40, v21, 0);
        (*(void (**)(__n128, __n128, __n128, __n128))(**(_QWORD **)(v7 + 80) + 16))(v36, v39, v38, v37);
        v22 = v41;
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      v8 += 464;
    }
  }
  result = (unsigned int *)operator new(0x20uLL, MEMORY[0x24BEDB6B8]);
  v26 = result;
  if (result)
  {
    v27 = a2[1];
    *((_QWORD *)result + 1) = *a2;
    *((_QWORD *)result + 2) = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 1);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    result[6] = 1;
    *(_QWORD *)result = &off_24EC2BFA0;
  }
  v30 = *(uint64_t **)(v7 + 40);
  for (i = *(uint64_t **)(v7 + 48); v30 != i; result = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v32 + 16))())
  {
    v32 = *v30;
    v30 += 2;
  }
  if (v26)
  {
    v33 = v26 + 6;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
  }
  return result;
}

void sub_223335128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  unint64_t *p_shared_owners;
  unint64_t v20;

  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22333516C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd"
                     "26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13co"
                                "ncurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233351D8()
{
  return &unk_24EC2DC80;
}

uint64_t sub_2233351E4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_223335234(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223335294@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2DCA0;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_223335334(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_223335358()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_223335394()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2233353D0()
{
  return 1;
}

uint64_t sub_2233353DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_223335458()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22333546C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC2DD18;
  result[1] = v3;
  return result;
}

uint64_t sub_2233354A0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC2DD18;
  a2[1] = v2;
  return result;
}

void sub_2233354BC(uint64_t a1, CFUUIDBytes ***a2)
{
  CFUUIDBytes *v2;
  CFUUIDBytes *v3;
  uint64_t v4;
  const __CFAllocator *Default;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFUUIDBytes *v11;
  CFUUIDBytes *v12;
  const __CFAllocator *v13;
  std::__shared_weak_count_vtbl *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;

  v3 = **a2;
  v2 = (*a2)[1];
  if (v2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v4 + 80))
    {
      if (*(_QWORD *)(v4 + 96))
      {
        do
        {
          Default = CFAllocatorGetDefault();
          v7 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(Default, *v3);
          sub_224533328(&v18, v7, 0);
          (*(void (**)(void))(**(_QWORD **)(v4 + 96) + 16))();
          v8 = v19;
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          ++v3;
        }
        while (v3 != v2);
        v11 = (*a2)[3];
        v12 = (*a2)[4];
        while (v11 != v12)
        {
          v13 = CFAllocatorGetDefault();
          v14 = (std::__shared_weak_count_vtbl *)CFUUIDCreateFromUUIDBytes(v13, *v11);
          sub_224533328(&v18, v14, 0);
          (*(void (**)(void))(**(_QWORD **)(v4 + 96) + 16))();
          v15 = v19;
          if (v19)
          {
            v16 = (unint64_t *)&v19->__shared_owners_;
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          ++v11;
        }
      }
    }
  }
}

void sub_223335614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22333567C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd"
                     "26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13co"
                                "ncurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233356E8()
{
  return &unk_24EC2DD88;
}

uint64_t sub_2233356F4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_223335744(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x227684CE8);
}

uint64_t sub_2233357A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v4 = (_QWORD *)operator new();
  *v4 = &off_24EC2DDA8;
  v5 = v4 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (!result)
    goto LABEL_4;
  if (result != a1 + 8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v5);
LABEL_4:
    v4[4] = result;
    *a2 = v4;
    return result;
  }
  v4[4] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *a2 = v4;
  return result;
}

void sub_223335844(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x227684CE8](v1, 0x10A1C400AA0B987);
  _Unwind_Resume(a1);
}

void sub_223335868()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 274, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

void sub_2233358A4()
{
  sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 280, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_22457406C);
  abort();
}

uint64_t sub_2233358E0()
{
  return 1;
}

uint64_t sub_2233358EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ChannelInputModel.h", 301, (uint64_t)"processor_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = *(_QWORD *)(a1 + 32);
    if (!v4)
      sub_223198474();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
}

void sub_223335968()
{
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22333597C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24EC2DE20;
  result[1] = v3;
  return result;
}

uint64_t sub_2233359B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24EC2DE20;
  a2[1] = v2;
  return result;
}

void sub_2233359CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *__p;
  char *v18;
  uint64_t v19;

  sub_223323A4C(&__p, a2);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64);
  if (v3)
  {
    v4 = (char *)__p;
    v5 = v18;
    if (__p == v18)
      goto LABEL_7;
    v6 = operator new(0x28uLL, MEMORY[0x24BEDB6B8]);
    if (v6)
    {
      v7 = v19;
      v6[2] = v5;
      v6[3] = v7;
      v18 = 0;
      v19 = 0;
      __p = 0;
      *((_DWORD *)v6 + 8) = 1;
      *v6 = &off_24EC2C080;
      v6[1] = v4;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 16))();
  }
  v4 = (char *)__p;
LABEL_7:
  if (v4)
  {
    v8 = v18;
    v9 = v4;
    if (v18 != v4)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v8 - 6);
        if (v11)
        {
          *((_QWORD *)v8 - 5) = v11;
          operator delete(v11);
        }
        v12 = *((_QWORD *)v8 - 9);
        if (v12)
        {
          v13 = *((_QWORD *)v8 - 8);
          v10 = (void *)*((_QWORD *)v8 - 9);
          if (v13 != v12)
          {
            v14 = *((_QWORD *)v8 - 8);
            do
            {
              v16 = *(void **)(v14 - 24);
              v14 -= 24;
              v15 = v16;
              if (v16)
              {
                *(_QWORD *)(v13 - 16) = v15;
                operator delete(v15);
              }
              v13 = v14;
            }
            while (v14 != v12);
            v10 = (void *)*((_QWORD *)v8 - 9);
          }
          *((_QWORD *)v8 - 8) = v12;
          operator delete(v10);
        }
        v8 -= 168;
      }
      while (v8 != v4);
      v9 = __p;
    }
    v18 = v4;
    operator delete(v9);
  }
}

void sub_223335AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11)
{
  char *v12;
  char *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;

  if (__p)
  {
    v12 = a11;
    v13 = __p;
    if (a11 != __p)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v12 - 6);
        if (v15)
        {
          *((_QWORD *)v12 - 5) = v15;
          operator delete(v15);
        }
        v16 = *((_QWORD *)v12 - 9);
        if (v16)
        {
          v17 = *((_QWORD *)v12 - 8);
          v14 = (void *)*((_QWORD *)v12 - 9);
          if (v17 != v16)
          {
            v18 = *((_QWORD *)v12 - 8);
            do
            {
              v20 = *(void **)(v18 - 24);
              v18 -= 24;
              v19 = v20;
              if (v20)
              {
                *(_QWORD *)(v17 - 16) = v19;
                operator delete(v19);
              }
              v17 = v18;
            }
            while (v18 != v16);
            v14 = (void *)*((_QWORD *)v12 - 9);
          }
          *((_QWORD *)v12 - 8) = v16;
          operator delete(v14);
        }
        v12 -= 168;
      }
      while (v12 != __p);
      v13 = __p;
    }
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223335B94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd"
                     "26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13co"
                                "ncurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d9applecv3d16surfacedetection7SessionC1ERKNS_3acv6camera13PinholeCameraERKNS0_13concurrent_sd26SurfaceDetectionParametersERKNS8_22SurfaceDetectionConfigEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223335C00()
{
  return &unk_24EC2DE90;
}

uint64_t *sub_223335C0C(uint64_t *a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  int v7;

  sub_223335D2C(a2, a3, a4, a1);
  if (!*(_QWORD *)(*a1 + 16)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/SurfaceDetection.cpp", 215, (uint64_t)"!Cameras().empty()", 18, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_8;
  }
  if ((*(_DWORD *)(a3 + 8) - 6) < 0xFFFFFFFB || *(_DWORD *)(a3 + 12) < 3u)
    goto LABEL_22;
  if (*(double *)a3 == 5.0)
    v7 = 0;
  else
    v7 = -127;
  if (*(double *)a3 > 5.0)
    v7 = 1;
  if (*(double *)a3 < 5.0)
    v7 = -1;
  if (v7 == -127 || (v7 & 0x80) == 0 || *(_DWORD *)(a3 + 16) <= 2u)
  {
LABEL_22:
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/SurfaceDetection.cpp", 216, (uint64_t)"AreParamsValid(params)", 22, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
    {
LABEL_8:
      abort();
    }
  }
  return a1;
}

void sub_223335D08(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(exception_object);
}

void sub_223335D2C(_QWORD *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v12;
  _QWORD *v13;

  v8 = operator new();
  v9 = v8;
  v10 = a1 + 1;
  v11 = (_QWORD *)a1[1];
  v12 = (_QWORD **)*a1;
  v13 = v11;
  if (a1[2])
  {
    v11[2] = &v13;
    *a1 = v10;
    *v10 = 0;
    a1[2] = 0;
  }
  else
  {
    v12 = &v13;
  }
  sub_223341170(v8, &v12, a2, a3);
  *a4 = v9;
  a4[1] = (uint64_t)sub_2233416D4;
  sub_223198030((uint64_t)&v12, v13);
}

void sub_223335DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;

  sub_223198030((uint64_t)&a10, a11);
  MEMORY[0x227684CE8](v11, 0x1020C40AB3F9458);
  _Unwind_Resume(a1);
}

__n128 sub_223335E1C(_QWORD *a1, int a2, char *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;

  v5 = (uint64_t **)*a1;
  v7 = (uint64_t **)(*a1 + 8);
  v6 = *v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v8 = (char *)v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a2)
          break;
        v6 = *(uint64_t **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v6 = (uint64_t *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(*a1 + 8);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0xB0uLL);
    *((_DWORD *)v8 + 8) = a2;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *((_QWORD *)v8 + 21) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**v5;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *v5 = v11;
      v12 = *v7;
    }
    sub_2231A9A8C(v5[1], v12);
    v5[2] = (uint64_t *)((char *)v5[2] + 1);
  }
  if (v8 + 40 != a3)
    *((_QWORD *)v8 + 5) = *(_QWORD *)a3;
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a3 + 8);
  result = *(__n128 *)(a3 + 24);
  v14 = *(_OWORD *)(a3 + 40);
  v15 = *(_OWORD *)(a3 + 56);
  *((_QWORD *)v8 + 14) = *((_QWORD *)a3 + 9);
  *((_OWORD *)v8 + 5) = v14;
  *((_OWORD *)v8 + 6) = v15;
  *((__n128 *)v8 + 4) = result;
  v16 = v8 + 120;
  v17 = a3 + 80;
  if (v8[168] == a3[128])
  {
    if (v8[168])
    {
      v18 = *((_OWORD *)a3 + 6);
      *v16 = *v17;
      *(_OWORD *)(v8 + 136) = v18;
      result = *((__n128 *)a3 + 7);
      *(__n128 *)(v8 + 152) = result;
    }
  }
  else if (v8[168])
  {
    v8[168] = 0;
  }
  else
  {
    v19 = *((_OWORD *)a3 + 6);
    *v16 = *v17;
    *(_OWORD *)(v8 + 136) = v19;
    result = *((__n128 *)a3 + 7);
    *(__n128 *)(v8 + 152) = result;
    v8[168] = 1;
  }
  return result;
}

void sub_223335FB0(double **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  double *v16;
  int v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  int v41;
  int v42;
  int v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  double *v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  double *v87;
  uint64_t *v88;
  float v89;
  double v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  int v105;
  char v106;
  int v107;
  int v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  uint64_t v156;
  uint64_t (**v157)();
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t (**v160)();
  uint64_t v161;
  std::__shared_weak_count *v162;
  uint64_t (**v163)();
  uint64_t v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  char v172;
  _BYTE v173[31];
  __int128 v174;
  char v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  char v184;
  uint64_t v185;
  uint64_t (**v186)();
  __int128 v187;
  uint64_t (**v188)();
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  char v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  _QWORD v209[2];
  std::__shared_weak_count *v210;
  uint64_t (**v211)();
  uint64_t v212;
  std::__shared_weak_count *v213;
  _QWORD v214[2];
  std::__shared_weak_count *v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  char v222;
  _BYTE v223[31];
  __int128 v224;
  char v225;
  _OWORD v226[8];
  unsigned __int8 v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 __src;
  uint64_t v242;
  int64x2_t v243[3];
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _BYTE v248[248];
  _BYTE v249[32];
  _BYTE v250[32];
  void *v251;
  __int128 v252;
  char v253;
  char v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  _BYTE v258[31];
  uint64_t (**v259)();
  uint64_t (**v260)();
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  char v276;
  int v277;
  int v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  char v292[16];
  __int128 v293;
  __int128 v294;
  __int128 v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  void *v310[2];
  uint64_t v311;
  char v312;
  void *v313[2];
  uint64_t v314;
  void *v315;
  __int128 v316;
  char v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  _BYTE v326[31];
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  void *v333[2];
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  _OWORD v345[2];
  uint64_t v346;

  v346 = *MEMORY[0x24BDAC8D0];
  v6 = *(double *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v15 = *(_DWORD *)(a2 + 104);
  v16 = *a1;
  v17 = *((unsigned __int8 *)*a1 + 56);
  v18 = (uint64_t *)(*a1 + 20);
  *(_OWORD *)&v248[8] = v8;
  *(double *)v248 = v6;
  *(_QWORD *)&v248[24] = v7;
  *(_OWORD *)&v248[32] = v9;
  *(_OWORD *)&v248[56] = v12;
  *(_QWORD *)&v248[48] = v10;
  *(_QWORD *)&v248[72] = v11;
  *(_OWORD *)&v248[80] = v14;
  *(_QWORD *)&v248[96] = v13;
  *(_DWORD *)&v248[104] = v15;
  v19 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)&v248[176] = *(_OWORD *)(a2 + 176);
  *(_OWORD *)&v248[192] = v19;
  v20 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)&v248[208] = *(_OWORD *)(a2 + 208);
  *(_OWORD *)&v248[224] = v20;
  v21 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v248[112] = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v248[128] = v21;
  v22 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)&v248[144] = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v248[160] = v22;
  sub_223314DA0(v18, (uint64_t *)v248);
  if (*(_QWORD *)&v248[80])
  {
    *(_QWORD *)&v248[88] = *(_QWORD *)&v248[80];
    operator delete(*(void **)&v248[80]);
  }
  if (*(_QWORD *)&v248[56])
  {
    *(_QWORD *)&v248[64] = *(_QWORD *)&v248[56];
    operator delete(*(void **)&v248[56]);
  }
  if (*(_QWORD *)&v248[32])
  {
    *(_QWORD *)&v248[40] = *(_QWORD *)&v248[32];
    operator delete(*(void **)&v248[32]);
  }
  if (*(_QWORD *)&v248[8])
  {
    *(_QWORD *)&v248[16] = *(_QWORD *)&v248[8];
    operator delete(*(void **)&v248[8]);
  }
  if (v17)
  {
    v23 = 1;
LABEL_13:
    *(_DWORD *)a3 = v23;
    *(_BYTE *)(a3 + 104) = 0;
    return;
  }
  if (v6 - v16[19] < v16[17] - v16[18])
  {
    v23 = 0;
    goto LABEL_13;
  }
  v16[19] = v6;
  sub_223312308((char **)*a1 + 20, v243);
  v24 = v245;
  v154 = v244;
  v151 = v245;
  if (v244 == v245)
  {
    v147 = 0;
    v145 = 0;
    v33 = *a1;
    if (*((_QWORD *)*a1 + 2))
      goto LABEL_22;
  }
  else
  {
    v25 = (_QWORD *)(v245 - 344);
    v145 = *(_QWORD *)(v245 - 344);
    v27 = *(_QWORD *)(v245 - 328);
    v26 = *(std::__shared_weak_count **)(v245 - 320);
    v25[2] = 0;
    v25[3] = 0;
    v28 = *(_QWORD *)(v24 - 304);
    v153 = *(std::__shared_weak_count **)(v24 - 296);
    v25[5] = 0;
    v25[6] = 0;
    v141 = *(_QWORD *)(v24 - 280);
    v152 = *(std::__shared_weak_count **)(v24 - 272);
    v25[8] = 0;
    v25[9] = 0;
    v143 = *(_QWORD *)(v24 - 264);
    v29 = *(_OWORD *)(v24 - 256);
    v30 = *(_OWORD *)(v24 - 240);
    v31 = *(_OWORD *)(v24 - 224);
    v32 = *(_OWORD *)(v24 - 208);
    v332 = *(_QWORD *)(v24 - 192);
    v331 = v32;
    v330 = v31;
    v328 = v29;
    v329 = v30;
    v155 = v26;
    v138 = v27;
    v139 = v28;
    if (*(_BYTE *)(v24 - 136))
    {
      v137 = *(_BYTE *)(v24 - 184);
      *(_OWORD *)v326 = *(_OWORD *)(v24 - 183);
      *(_OWORD *)&v326[15] = *(_OWORD *)(v24 - 168);
      v327 = *(_OWORD *)(v24 - 152);
      v147 = 1;
    }
    else
    {
      v147 = 0;
      v137 = 0;
    }
    v34 = *(_OWORD *)(v24 - 48);
    v322 = *(_OWORD *)(v24 - 64);
    v323 = v34;
    v35 = *(_OWORD *)(v24 - 16);
    v324 = *(_OWORD *)(v24 - 32);
    v325 = v35;
    v36 = *(_OWORD *)(v24 - 112);
    v318 = *(_OWORD *)(v24 - 128);
    v319 = v36;
    v37 = *(_OWORD *)(v24 - 80);
    v320 = *(_OWORD *)(v24 - 96);
    v321 = v37;
    v33 = *a1;
    if (*((_QWORD *)*a1 + 2))
      goto LABEL_22;
  }
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/SurfaceDetection.cpp", 283, (uint64_t)"!cameras.empty()", 16, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_181;
  }
LABEL_22:
  v38 = (uint64_t *)*((_QWORD *)v33 + 1);
  v39 = v155;
  if (v38)
  {
    v40 = (uint64_t *)*((_QWORD *)v33 + 1);
    do
    {
      v41 = *((_DWORD *)v40 + 8);
      if (v41 <= 0)
      {
        if ((v41 & 0x80000000) == 0)
        {
          v42 = 0;
          goto LABEL_31;
        }
        ++v40;
      }
      v40 = (uint64_t *)*v40;
    }
    while (v40);
  }
  v42 = *(_DWORD *)(*(_QWORD *)v33 + 32);
  if (!v38)
LABEL_34:
    sub_223198218("map::at:  key not found");
  while (1)
  {
LABEL_31:
    while (1)
    {
      v43 = *((_DWORD *)v38 + 8);
      if (v42 >= v43)
        break;
      v38 = (uint64_t *)*v38;
      if (!v38)
        goto LABEL_34;
    }
    if (v43 >= v42)
      break;
    v38 = (uint64_t *)v38[1];
    if (!v38)
      goto LABEL_34;
  }
  v149 = *((_QWORD *)*a1 + 44);
  v44 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v44 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  qword_25578BAF0 = *(_QWORD *)a2;
  v45 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v45 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  HIBYTE(v242) = 10;
  strcpy((char *)&__src, "cv3d.plane");
  v46 = v151;
  if (byte_25578BAF8[23] < 0)
  {
    sub_22319C4B8((void **)byte_25578BAF8, &__src, 0xAuLL);
    if (SHIBYTE(v242) < 0)
      operator delete((void *)__src);
  }
  else
  {
    *(_OWORD *)byte_25578BAF8 = __src;
    *(_QWORD *)&byte_25578BAF8[16] = v242;
  }
  v47 = v247;
  if (v246 == v247)
  {
    v56 = (double *)v243[0].i64[0];
    v57 = 0xEEEEEEEEEEEEEEEFLL * ((v243[0].i64[1] - v243[0].i64[0]) >> 4);
    LOBYTE(v156) = 0;
    v184 = 0;
    if (v154 != v151)
    {
      v156 = v145;
      v157 = &off_24EC715B8;
      v158 = v138;
      v159 = v155;
      if (v155)
      {
        p_shared_owners = (unint64_t *)&v155->__shared_owners_;
        do
          v59 = __ldxr(p_shared_owners);
        while (__stxr(v59 + 1, p_shared_owners));
      }
      v160 = &off_24EC715B8;
      v161 = v139;
      v162 = v153;
      if (v153)
      {
        v60 = (unint64_t *)&v153->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v163 = &off_24EC715B8;
      v164 = v141;
      v165 = v152;
      if (v152)
      {
        v62 = (unint64_t *)&v152->__shared_owners_;
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      v166 = v143;
      v168 = v329;
      v169 = v330;
      v170 = v331;
      v171 = v332;
      v167 = v328;
      v172 = 0;
      v175 = 0;
      if (v147)
      {
        v172 = v137;
        *(_OWORD *)v173 = *(_OWORD *)v326;
        *(_OWORD *)&v173[15] = *(_OWORD *)&v326[15];
        v174 = v327;
        v175 = 1;
      }
      v181 = v323;
      v182 = v324;
      v183 = v325;
      v179 = v321;
      v180 = v322;
      v176 = v318;
      v177 = v319;
      v178 = v320;
      v184 = 1;
    }
    sub_2233372AC((uint64_t)v248, v149, v57, v56, (uint64_t)&v156, v38 + 5, *a1 + 3);
    v64 = *(_QWORD *)&v248[24];
    *(_QWORD *)a3 = *(_QWORD *)v248;
    *(_QWORD *)(a3 + 24) = v64;
    v65 = *(_QWORD *)&v248[72];
    *(_QWORD *)(a3 + 48) = *(_QWORD *)&v248[48];
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v248[8];
    *(_QWORD *)&v248[8] = 0;
    *(_QWORD *)&v248[16] = 0;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v248[32];
    memset(&v248[24], 0, 32);
    *(_OWORD *)(a3 + 56) = *(_OWORD *)&v248[56];
    *(_QWORD *)(a3 + 72) = v65;
    *(_QWORD *)&v248[64] = 0;
    *(_QWORD *)&v248[56] = 0;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)&v248[80];
    *(_QWORD *)(a3 + 96) = *(_QWORD *)&v248[96];
    memset(&v248[72], 0, 32);
    *(_BYTE *)(a3 + 104) = 1;
    sub_223322918(v248);
    if (!v184)
      goto LABEL_160;
    v163 = &off_24EC715B8;
    v66 = v165;
    if (v165)
    {
      v67 = (unint64_t *)&v165->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v160 = &off_24EC715B8;
    v69 = v162;
    if (v162)
    {
      v70 = (unint64_t *)&v162->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v157 = &off_24EC715B8;
    v72 = v159;
    if (!v159)
      goto LABEL_160;
    v73 = (unint64_t *)&v159->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    goto LABEL_158;
  }
  v48 = v243[0];
  v49 = ((unsigned __int128)((v243[0].i64[1] - v243[0].i64[0]) * (__int128)(uint64_t)0x8888888888888889) >> 64)
      + v243[0].i64[1]
      - v243[0].i64[0];
  LOBYTE(v208) = 0;
  v227 = 0;
  if (v154 != v151)
  {
    v208 = v145;
    v209[0] = &off_24EC715B8;
    v209[1] = v138;
    v210 = v155;
    if (v155)
    {
      v50 = (unint64_t *)&v155->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    v211 = &off_24EC715B8;
    v212 = v139;
    v213 = v153;
    if (v153)
    {
      v52 = (unint64_t *)&v153->__shared_owners_;
      do
        v53 = __ldxr(v52);
      while (__stxr(v53 + 1, v52));
    }
    v214[0] = &off_24EC715B8;
    v214[1] = v141;
    v215 = v152;
    if (v152)
    {
      v54 = (unint64_t *)&v152->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v218 = v329;
    v219 = v330;
    v220 = v331;
    v216 = v143;
    v221 = v332;
    v217 = v328;
    v222 = 0;
    v225 = 0;
    if (v147)
    {
      v222 = v137;
      *(_OWORD *)v223 = *(_OWORD *)v326;
      *(_OWORD *)&v223[15] = *(_OWORD *)&v326[15];
      v224 = v327;
      v225 = 1;
    }
    v226[5] = v323;
    v226[6] = v324;
    v226[7] = v325;
    v226[3] = v321;
    v226[4] = v322;
    v226[0] = v318;
    v226[1] = v319;
    v226[2] = v320;
    v227 = 1;
    v47 = v247;
  }
  v75 = (_QWORD *)(v47 - 320);
  v185 = *(_QWORD *)(v47 - 320);
  v186 = &off_24EC715B8;
  v187 = *(_OWORD *)(v47 - 304);
  v75[2] = 0;
  v75[3] = 0;
  v189 = *(_OWORD *)(v47 - 280);
  v75[5] = 0;
  v75[6] = 0;
  v76 = *(_QWORD *)(v47 - 264);
  v188 = &off_24EC715B8;
  v190 = v76;
  v77 = *(_OWORD *)(v47 - 256);
  v78 = *(_OWORD *)(v47 - 240);
  v79 = *(_OWORD *)(v47 - 224);
  v80 = *(_OWORD *)(v47 - 208);
  v195 = *(_QWORD *)(v47 - 192);
  v193 = v79;
  v194 = v80;
  v191 = v77;
  v192 = v78;
  LOBYTE(v196) = 0;
  v199 = 0;
  if (*(_BYTE *)(v47 - 136))
  {
    v81 = *(_OWORD *)(v47 - 168);
    v196 = *(_OWORD *)(v47 - 184);
    v197 = v81;
    v198 = *(_OWORD *)(v47 - 152);
    v199 = 1;
  }
  v82 = *(_OWORD *)(v47 - 48);
  v83 = (v49 >> 7) + ((unint64_t)v49 >> 63);
  v204 = *(_OWORD *)(v47 - 64);
  v205 = v82;
  v84 = *(_OWORD *)(v47 - 16);
  v206 = *(_OWORD *)(v47 - 32);
  v207 = v84;
  v85 = *(_OWORD *)(v47 - 112);
  v200 = *(_OWORD *)(v47 - 128);
  v201 = v85;
  v86 = *(_OWORD *)(v47 - 80);
  v202 = *(_OWORD *)(v47 - 96);
  v203 = v86;
  v87 = *a1;
  if (v48.i64[1] != v48.i64[0])
  {
    v88 = v38 + 5;
    v89 = v87[4];
    v90 = v89;
    v91 = 240 * v83;
    v92 = (_QWORD *)(v48.i64[0] + 56);
    do
    {
      sub_22339CB38(v92 - 6, v90);
      sub_22339D0F4(v92, v90);
      v92 += 30;
      v91 -= 240;
    }
    while (v91);
    goto LABEL_90;
  }
  v88 = v38 + 5;
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/SurfaceDetection.cpp", 343, (uint64_t)"!vio_bundles.empty()", 20, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
  {
LABEL_181:
    abort();
  }
LABEL_90:
  v93 = *((_QWORD *)v87 + 6);
  v94 = *(_QWORD *)(v48.i64[0] + 240 * v83 - 240);
  sub_22339B44C(v83, (double *)v48.i64[0], v88, (uint64_t)v292);
  v39 = v155;
  if (v312)
  {
    sub_22333F6B0((uint64_t)&v185, v93, (void **)&v308, v310);
  }
  else
  {
    memset(v248, 0, 24);
    v333[1] = 0;
    v333[0] = 0;
    *(_QWORD *)&v334 = 0;
    sub_22333F6B0((uint64_t)&v185, v93, (void **)v248, v333);
    v99 = *(_QWORD *)v248;
    v100 = *(_QWORD *)&v248[8];
    v101 = *(_QWORD *)&v248[16];
    memset(v248, 0, 24);
    v102 = v333[0];
    v103 = v333[1];
    v104 = v334;
    v333[0] = 0;
    v333[1] = 0;
    *(_QWORD *)&v334 = 0;
    if (v312)
    {
      if ((_QWORD)v308)
      {
        *((_QWORD *)&v308 + 1) = v308;
        operator delete((void *)v308);
      }
      *(_QWORD *)&v308 = v99;
      *((_QWORD *)&v308 + 1) = v100;
      v309 = v101;
      if (v310[0])
      {
        v310[1] = v310[0];
        operator delete(v310[0]);
      }
      v310[0] = v102;
      v310[1] = v103;
      v311 = v104;
      v39 = v155;
      if (v333[0])
      {
        v333[1] = v333[0];
        operator delete(v333[0]);
      }
    }
    else
    {
      *(_QWORD *)&v308 = v99;
      *((_QWORD *)&v308 + 1) = v100;
      v309 = v101;
      v310[0] = v102;
      v310[1] = v103;
      v311 = v104;
      v312 = 1;
      v39 = v155;
    }
    if (*(_QWORD *)v248)
    {
      *(_QWORD *)&v248[8] = *(_QWORD *)v248;
      operator delete(*(void **)v248);
    }
  }
  v105 = v227;
  if (v227)
  {
    sub_223315C3C(v209, (uint64_t)v214, &v216, (uint64_t)v226, (uint64_t)v248);
    v106 = v248[0];
    v344 = *(_OWORD *)&v248[33];
    v345[0] = *(_OWORD *)&v248[49];
    *(_OWORD *)((char *)v345 + 15) = *(_OWORD *)&v248[64];
    v342 = *(_OWORD *)&v248[1];
    v343 = *(_OWORD *)&v248[17];
    v291 = *(_OWORD *)&v248[96];
    v290 = *(_OWORD *)&v248[112];
    v341 = *(_OWORD *)&v248[128];
    v96 = *(_QWORD *)&v248[144];
    v98 = *(_DWORD *)&v248[152];
    v95 = *(_QWORD *)&v248[156];
    v97 = *(_OWORD *)&v248[168];
    v336 = *(_OWORD *)&v248[232];
    v335 = *(_OWORD *)&v248[216];
    v334 = *(_OWORD *)&v248[200];
    *(_OWORD *)v333 = *(_OWORD *)&v248[184];
    v340 = *(_OWORD *)&v250[16];
    v339 = *(_OWORD *)v250;
    v338 = *(_OWORD *)&v249[16];
    v337 = *(_OWORD *)v249;
  }
  else
  {
    v106 = 0;
  }
  v108 = *((_DWORD *)v87 + 6);
  v107 = *((_DWORD *)v87 + 7);
  *(_QWORD *)v248 = &off_24EC64998;
  *(_QWORD *)&v248[8] = &off_24EC64920;
  *(_OWORD *)&v248[16] = v293;
  *(_OWORD *)&v248[32] = v294;
  *(_OWORD *)&v248[48] = v295;
  *(_QWORD *)&v248[64] = v296;
  *(_DWORD *)&v248[72] = v297;
  *(_QWORD *)&v248[76] = v298;
  *(_OWORD *)&v248[88] = v299;
  *(_OWORD *)&v248[168] = v304;
  *(_OWORD *)&v248[184] = v305;
  *(_OWORD *)&v248[200] = v306;
  *(_OWORD *)&v248[216] = v307;
  *(_OWORD *)&v248[104] = v300;
  *(_OWORD *)&v248[120] = v301;
  *(_OWORD *)&v248[136] = v302;
  *(_OWORD *)&v248[152] = v303;
  v248[232] = 0;
  v250[0] = 0;
  if (v312)
  {
    *(_OWORD *)&v248[232] = v308;
    *(_QWORD *)v249 = v309;
    v309 = 0;
    v308 = 0uLL;
    *(_OWORD *)&v249[8] = *(_OWORD *)v310;
    *(_QWORD *)&v249[24] = v311;
    v310[0] = 0;
    v310[1] = 0;
    v311 = 0;
    v250[0] = 1;
  }
  v250[8] = 0;
  v253 = 0;
  if (v317)
  {
    *(_OWORD *)&v250[8] = *(_OWORD *)v313;
    v109 = v314;
    v110 = v315;
    v315 = 0;
    v314 = 0;
    v313[1] = 0;
    v313[0] = 0;
    *(_QWORD *)&v250[24] = v109;
    v251 = v110;
    v252 = v316;
    v316 = 0uLL;
    v253 = 1;
  }
  v254 = 0;
  v276 = 0;
  if (v105)
  {
    v254 = v106;
    v257 = v344;
    *(_OWORD *)v258 = v345[0];
    *(_OWORD *)&v258[15] = *(_OWORD *)((char *)v345 + 15);
    v255 = v342;
    v256 = v343;
    v259 = &off_24EC64998;
    v260 = &off_24EC64920;
    v261 = v291;
    v262 = v290;
    v263 = v341;
    v264 = v96;
    v265 = v98;
    v266 = v95;
    v273 = v338;
    v274 = v339;
    v275 = v340;
    v267 = v97;
    v268 = *(_OWORD *)v333;
    v269 = v334;
    v270 = v335;
    v272 = v337;
    v271 = v336;
    v276 = 1;
  }
  v277 = v108;
  v278 = v107;
  sub_223F68F20(v149, (uint64_t)v248, (uint64_t *)&v279);
  if (v276)
    v259 = &off_24EC64998;
  if (v253)
  {
    if (v251)
    {
      *(_QWORD *)&v252 = v251;
      operator delete(v251);
    }
    if (*(_QWORD *)&v250[8])
    {
      *(_QWORD *)&v250[16] = *(_QWORD *)&v250[8];
      operator delete(*(void **)&v250[8]);
    }
  }
  if (v250[0])
  {
    if (*(_QWORD *)&v249[8])
    {
      *(_QWORD *)&v249[16] = *(_QWORD *)&v249[8];
      operator delete(*(void **)&v249[8]);
    }
    if (*(_QWORD *)&v248[232])
    {
      *(_QWORD *)&v248[240] = *(_QWORD *)&v248[232];
      operator delete(*(void **)&v248[232]);
    }
  }
  *(_QWORD *)v248 = &off_24EC64998;
  v228 = v94;
  v148 = v280;
  v150 = v279;
  v229 = v279;
  v230 = v280;
  v280 = 0;
  v279 = 0;
  v111 = v281;
  v112 = v282;
  v282 = 0;
  v281 = 0;
  v144 = v112;
  v146 = v111;
  v231 = v111;
  v232 = v112;
  v113 = v284;
  v142 = v283;
  v233 = v283;
  v234 = v284;
  v284 = 0;
  v283 = 0;
  v114 = v285;
  v115 = v286;
  v235 = v285;
  v236 = v286;
  v285 = 0;
  v286 = 0;
  v116 = v287;
  v117 = v288;
  v237 = v287;
  v238 = v288;
  v140 = v289;
  v239 = v289;
  v287 = 0;
  v288 = 0;
  v289 = 0uLL;
  sub_223341058(&v279);
  if (v317)
  {
    if (v315)
    {
      *(_QWORD *)&v316 = v315;
      operator delete(v315);
    }
    if (v313[0])
    {
      v313[1] = v313[0];
      operator delete(v313[0]);
    }
  }
  if (v312)
  {
    if (v310[0])
    {
      v310[1] = v310[0];
      operator delete(v310[0]);
    }
    if ((_QWORD)v308)
    {
      *((_QWORD *)&v308 + 1) = v308;
      operator delete((void *)v308);
    }
  }
  *(_QWORD *)a3 = v94;
  *(_QWORD *)(a3 + 8) = v150;
  *(_QWORD *)(a3 + 16) = v148;
  v230 = 0;
  v231 = 0;
  v229 = 0;
  *(_QWORD *)(a3 + 24) = v146;
  *(_QWORD *)(a3 + 32) = v144;
  *(_QWORD *)(a3 + 40) = v142;
  *(_QWORD *)(a3 + 48) = v113;
  v233 = 0;
  v234 = 0;
  v232 = 0;
  *(_QWORD *)(a3 + 56) = v114;
  *(_QWORD *)(a3 + 64) = v115;
  v236 = 0;
  v237 = 0;
  v235 = 0;
  *(_QWORD *)(a3 + 72) = v116;
  *(_QWORD *)(a3 + 80) = v117;
  *(_OWORD *)(a3 + 88) = v140;
  v239 = 0;
  v240 = 0;
  v238 = 0;
  *(_BYTE *)(a3 + 104) = 1;
  sub_223322918(&v228);
  v188 = &off_24EC715B8;
  v118 = (std::__shared_weak_count *)*((_QWORD *)&v189 + 1);
  v46 = v151;
  if (*((_QWORD *)&v189 + 1))
  {
    v119 = (unint64_t *)(*((_QWORD *)&v189 + 1) + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  v186 = &off_24EC715B8;
  v121 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v122 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  if (!v227)
    goto LABEL_160;
  v214[0] = &off_24EC715B8;
  v124 = v215;
  if (v215)
  {
    v125 = (unint64_t *)&v215->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v211 = &off_24EC715B8;
  v127 = v213;
  if (v213)
  {
    v128 = (unint64_t *)&v213->__shared_owners_;
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  v209[0] = &off_24EC715B8;
  v72 = v210;
  if (!v210)
    goto LABEL_160;
  v130 = (unint64_t *)&v210->__shared_owners_;
  do
    v74 = __ldaxr(v130);
  while (__stlxr(v74 - 1, v130));
LABEL_158:
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
    std::__shared_weak_count::__release_weak(v72);
  }
LABEL_160:
  if (v154 != v46)
  {
    if (v152)
    {
      v131 = (unint64_t *)&v152->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    if (v153)
    {
      v133 = (unint64_t *)&v153->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    if (v39)
    {
      v135 = (unint64_t *)&v39->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  sub_223340424((uint64_t)v243);
}

void sub_2233371B0(_Unwind_Exception *a1, int a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)STACK[0xAD0];
    if (STACK[0xAD0])
    {
      STACK[0xAD8] = (unint64_t)v3;
      operator delete(v3);
    }
    v4 = (void *)STACK[0x550];
    if (STACK[0x550])
    {
      STACK[0x558] = (unint64_t)v4;
      operator delete(v4);
      sub_223340138((uint64_t)&STACK[0x870]);
      sub_22316DC48(a1);
    }
    sub_223340138((uint64_t)&STACK[0x870]);
    sub_22316DC48(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_22333724C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_2233372AC(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5, uint64_t *a6, double *a7)
{
  int v7;
  uint64_t v12;
  float v15;
  double v16;
  uint64_t v17;
  _QWORD *v18;
  double v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  float64x2_t v35;
  unsigned __int32 v36;
  float32x4_t v37;
  float64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v42;
  int64x2_t v45;
  float64x2_t v47;
  double v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  char v103;
  uint64_t v104;
  void *v105;
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  void *v113;
  __int128 v114;
  _BYTE __p[32];
  float32x4_t v116;
  float32x4_t v117;
  _OWORD v118[2];
  unsigned __int32 v119;
  void *v120;
  __int128 v121;
  uint64_t v122;
  void *v123;
  _BYTE v124[20];
  int v125;
  uint64_t (**v126)();
  _QWORD *v127;
  std::__shared_weak_count *v128;
  _QWORD v129[2];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  __int128 v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  char v149;
  __int128 v150;
  uint64_t v151;
  void *v152;
  __int128 v153;
  char v154;
  char v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[31];
  uint64_t (**v160)();
  uint64_t (**v161)();
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  char v177;
  int v178;
  int v179;
  _BYTE v180[88];
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  char v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  __int128 v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  uint64_t v218;
  char v219;
  __int128 v220;
  uint64_t v221;
  void *v222;
  __int128 v223;
  char v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  _OWORD v237[2];
  uint64_t v238;

  v12 = a3;
  v238 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v15 = a7[1];
    v16 = v15;
    v17 = 240 * a3;
    v18 = a4 + 7;
    do
    {
      sub_22339CB38(v18 - 6, v16);
      sub_22339D0F4(v18, v16);
      v18 += 30;
      v17 -= 240;
    }
    while (v17);
  }
  else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/SurfaceDetection.cpp", 292, (uint64_t)"!vio_bundles.empty()", 20, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v19 = a4[30 * v12 - 30];
  sub_22339B44C(v12, a4, a6, (uint64_t)&v199);
  v20 = *(unsigned __int8 *)(a5 + 344);
  v104 = a2;
  if (*(_BYTE *)(a5 + 344))
  {
    sub_223315C3C((_QWORD *)(a5 + 8), a5 + 56, (uint64_t *)(a5 + 80), a5 + 216, (uint64_t)v180);
    v103 = v180[0];
    v235 = *(_OWORD *)&v180[17];
    v236 = *(_OWORD *)&v180[33];
    v237[0] = *(_OWORD *)&v180[49];
    *(_OWORD *)((char *)v237 + 15) = *(_OWORD *)&v180[64];
    v197 = v183;
    v198 = v182;
    v233 = v184;
    v234 = *(_OWORD *)&v180[1];
    v12 = v185;
    v7 = v186;
    a2 = v187;
    v102 = v188;
    v227 = v191;
    v228 = v192;
    v225 = v189;
    v226 = v190;
    v231 = v195;
    v232 = v196;
    v229 = v193;
    v230 = v194;
  }
  else
  {
    v103 = 0;
  }
  v180[0] = 0;
  v180[48] = 0;
  if (v219)
  {
    sub_223340284(v180, (uint64_t)&v215);
    v180[48] = 1;
    *(_QWORD *)__p = operator new(0x20uLL);
    *(_OWORD *)&__p[8] = xmmword_2245B9420;
    strcpy(*(char **)__p, "ContinousTrackingResults");
    sub_2233AE750((uint64_t *)v180, (void **)__p, v19);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (v180[48])
    {
      if (*(_QWORD *)&v180[24])
      {
        *(_QWORD *)&v180[32] = *(_QWORD *)&v180[24];
        operator delete(*(void **)&v180[24]);
      }
      if (*(_QWORD *)v180)
      {
        *(_QWORD *)&v180[8] = *(_QWORD *)v180;
        operator delete(*(void **)v180);
      }
    }
  }
  v21 = *(_DWORD *)a7;
  v22 = *((_DWORD *)a7 + 1);
  v129[0] = &off_24EC64998;
  v129[1] = &off_24EC64920;
  v130 = v200;
  v131 = v201;
  v132 = v202;
  v133 = v203;
  v134 = v204;
  v135 = v205;
  v136 = v206;
  v140 = v210;
  v139 = v209;
  v138 = v208;
  v137 = v207;
  v144 = v214;
  v143 = v213;
  v142 = v212;
  v141 = v211;
  LOBYTE(v145) = 0;
  v149 = 0;
  if (v219)
  {
    v145 = v215;
    v23 = v216;
    v216 = 0;
    v215 = 0uLL;
    v147 = v217;
    v146 = v23;
    v148 = v218;
    v217 = 0uLL;
    v218 = 0;
    v149 = 1;
  }
  LOBYTE(v150) = 0;
  v154 = 0;
  if (v224)
  {
    v150 = v220;
    v24 = v221;
    v25 = v222;
    v222 = 0;
    v221 = 0;
    v220 = 0uLL;
    v151 = v24;
    v152 = v25;
    v153 = v223;
    v223 = 0uLL;
    v154 = 1;
  }
  v155 = 0;
  v177 = 0;
  if (v20)
  {
    v155 = v103;
    v158 = v236;
    *(_OWORD *)v159 = v237[0];
    *(_OWORD *)&v159[15] = *(_OWORD *)((char *)v237 + 15);
    v156 = v234;
    v157 = v235;
    v160 = &off_24EC64998;
    v161 = &off_24EC64920;
    v162 = v198;
    v163 = v197;
    v164 = v233;
    v165 = v12;
    v166 = v7;
    v167 = a2;
    v174 = v230;
    v175 = v231;
    v176 = v232;
    v168 = v102;
    v169 = v225;
    v170 = v226;
    v171 = v227;
    v172 = v228;
    v173 = v229;
    v177 = 1;
  }
  v178 = v21;
  v179 = v22;
  sub_223F68F20(v104, (uint64_t)v129, (uint64_t *)v180);
  if (v177)
    v160 = &off_24EC64998;
  if (v154)
  {
    if (v152)
    {
      *(_QWORD *)&v153 = v152;
      operator delete(v152);
    }
    if ((_QWORD)v150)
    {
      *((_QWORD *)&v150 + 1) = v150;
      operator delete((void *)v150);
    }
  }
  if (v149)
  {
    if ((_QWORD)v147)
    {
      *((_QWORD *)&v147 + 1) = v147;
      operator delete((void *)v147);
    }
    if ((_QWORD)v145)
    {
      *((_QWORD *)&v145 + 1) = v145;
      operator delete((void *)v145);
    }
  }
  v129[0] = &off_24EC64998;
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B9420;
  strcpy(*(char **)__p, "ContinousTrackingResults");
  sub_22339F234((uint64_t *)v180, (unsigned __int8 **)&v180[24], __p, v19);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!*(_BYTE *)(a5 + 344))
      goto LABEL_117;
  }
  else if (!*(_BYTE *)(a5 + 344))
  {
    goto LABEL_117;
  }
  v26 = *(_QWORD **)(a5 + 64);
  v27 = *(std::__shared_weak_count **)(a5 + 72);
  v127 = v26;
  v128 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v26 = v127;
  }
  v126 = &off_24EC71528;
  if (v26)
  {
    v30 = *v26;
    v31 = (std::__shared_weak_count *)v26[1];
    if (!v31)
      goto LABEL_49;
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    do
      v34 = __ldaxr(v32);
    while (__stlxr(v34 - 1, v32));
    if (v34)
    {
LABEL_49:
      if (!v30)
        goto LABEL_51;
      goto LABEL_50;
    }
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (v30)
LABEL_50:
      sub_2242AE7CC((uint64_t)v127);
  }
LABEL_51:
  sub_2242A80E4((uint64_t)&v126, (uint64_t)&v123);
  *(_QWORD *)__p = *(_QWORD *)v124;
  *(_QWORD *)&__p[12] = *(_QWORD *)&v124[12];
  *(_DWORD *)&__p[8] = *(_DWORD *)&v124[8];
  *(_DWORD *)&__p[20] = v125;
  v35.f64[1] = *(float64_t *)&__p[8];
  v121 = *(_OWORD *)__p;
  v120 = v123;
  v122 = *(_QWORD *)&__p[16];
  v35.f64[0] = *(float64_t *)(a5 + 152);
  v36 = vcvt_f32_f64(v35).u32[0];
  v37 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a5 + 88)), *(float64x2_t *)(a5 + 104));
  v118[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a5 + 120)), *(float64x2_t *)(a5 + 136));
  v119 = v36;
  v38.f64[0] = *(float64_t *)(a5 + 232);
  v39 = *(int64x2_t *)(a5 + 216);
  v40 = *(int64x2_t *)(a5 + 248);
  _Q5 = *(int64x2_t *)(a5 + 280);
  v42 = (float64x2_t)vzip1q_s64(v39, v40);
  _Q2 = vzip2q_s64(v39, v40);
  v38.f64[1] = *(float64_t *)(a5 + 264);
  _Q3 = vextq_s8((int8x16_t)_Q2, (int8x16_t)vdupq_laneq_s64(_Q5, 1), 8uLL);
  v45 = vzip1q_s64(_Q5, _Q2);
  _Q16 = *(float64x2_t *)(a5 + 312);
  v47 = vmlsq_laneq_f64(vmulq_n_f64(v42, vnegq_f64(_Q16).f64[0]), (float64x2_t)_Q2, _Q16, 1);
  _Q2.i64[0] = *(_QWORD *)(a5 + 328);
  _Q5.i64[0] = *(_QWORD *)(a5 + 288);
  __asm { FMLS            D17, D5, V16.D[1] }
  _Q5.i64[0] = vdupq_laneq_s64(v45, 1).u64[0];
  _Q5.i64[1] = _Q3.i64[0];
  _Q3.i64[0] = *(_QWORD *)(a5 + 296);
  __asm { FMLS            D17, D4, V2.D[0] }
  _Q17.f64[1] = 1.0;
  *(float32x4_t *)__p = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v42), (float64x2_t)v45.u64[0]);
  *(float32x4_t *)&__p[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)_Q5), (float64x2_t)_Q3.u64[1]);
  v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v38), (float64x2_t)_Q3.u64[0]);
  v117 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlsq_lane_f64(v47, v38, *(double *)_Q2.i64, 0)), _Q17);
  v118[0] = v37;
  v54 = *(double *)a5;
  v113 = operator new(0x20uLL);
  v114 = xmmword_2245B9420;
  strcpy((char *)v113, "ContinousTrackingResults");
  sub_2233A9820((uint64_t *)&v120, v54, (uint64_t)v118, (uint64_t)__p, (uint64_t)&v113);
  if (SHIBYTE(v114) < 0)
    operator delete(v113);
  v55 = *(uint64_t **)(a5 + 16);
  v56 = *(_QWORD *)(a5 + 24);
  *(_QWORD *)&__p[8] = v55;
  *(_QWORD *)&__p[16] = v56;
  if (v56)
  {
    v57 = (unint64_t *)(v56 + 8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
    v55 = *(uint64_t **)&__p[8];
  }
  *(_QWORD *)__p = &off_24EC71528;
  if (v55)
  {
    v59 = *v55;
    v60 = (std::__shared_weak_count *)v55[1];
    if (!v60)
      goto LABEL_63;
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    if (v63)
    {
LABEL_63:
      if (!v59)
        goto LABEL_65;
      goto LABEL_64;
    }
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    if (v59)
LABEL_64:
      sub_2242AE7CC(*(uint64_t *)&__p[8]);
  }
LABEL_65:
  sub_2242A773C((uint64_t)__p, (uint64_t *)v118);
  v64 = *(uint64_t **)(a5 + 40);
  v65 = *(_QWORD *)(a5 + 48);
  *(_QWORD *)&v114 = v64;
  *((_QWORD *)&v114 + 1) = v65;
  if (v65)
  {
    v66 = (unint64_t *)(v65 + 8);
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
    v64 = (uint64_t *)v114;
  }
  v113 = &off_24EC71528;
  if (v64)
  {
    v68 = *v64;
    v69 = (std::__shared_weak_count *)v64[1];
    if (!v69)
      goto LABEL_75;
    v70 = (unint64_t *)&v69->__shared_owners_;
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
    do
      v72 = __ldaxr(v70);
    while (__stlxr(v72 - 1, v70));
    if (v72)
    {
LABEL_75:
      if (!v68)
        goto LABEL_77;
      goto LABEL_76;
    }
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    if (v68)
LABEL_76:
      sub_2242AE7CC(v114);
  }
LABEL_77:
  sub_2242A7D74((uint64_t)&v113, &v111);
  v109 = *(_QWORD *)&v118[0];
  v110 = *(_OWORD *)((char *)v118 + 8);
  v107 = v111;
  v108 = v112;
  v105 = operator new(0x20uLL);
  v106 = xmmword_2245B9420;
  strcpy((char *)v105, "ContinousTrackingResults");
  sub_2233AB170((uint64_t)&v109, &v107, (uint64_t)&v105, v19);
  if (SHIBYTE(v106) < 0)
  {
    operator delete(v105);
    v73 = (uint64_t *)v114;
    if (!(_QWORD)v114)
      goto LABEL_88;
  }
  else
  {
    v73 = (uint64_t *)v114;
    if (!(_QWORD)v114)
      goto LABEL_88;
  }
  v74 = *v73;
  v75 = (std::__shared_weak_count *)v73[1];
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
    do
      v78 = __ldaxr(v76);
    while (__stlxr(v78 - 1, v76));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
      if (!v74)
        goto LABEL_88;
      goto LABEL_87;
    }
  }
  if (v74)
LABEL_87:
    sub_2242AE9A8(v114);
LABEL_88:
  v113 = &off_24EC715B8;
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (!*((_QWORD *)&v114 + 1))
    goto LABEL_92;
  v80 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
    v82 = *(uint64_t **)&__p[8];
    if (!*(_QWORD *)&__p[8])
      goto LABEL_100;
  }
  else
  {
LABEL_92:
    v82 = *(uint64_t **)&__p[8];
    if (!*(_QWORD *)&__p[8])
      goto LABEL_100;
  }
  v84 = *v82;
  v83 = (std::__shared_weak_count *)v82[1];
  if (v83)
  {
    v85 = (unint64_t *)&v83->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    do
      v87 = __ldaxr(v85);
    while (__stlxr(v87 - 1, v85));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
      if (!v84)
        goto LABEL_100;
      goto LABEL_99;
    }
  }
  if (v84)
LABEL_99:
    sub_2242AE9A8(*(uint64_t *)&__p[8]);
LABEL_100:
  *(_QWORD *)__p = &off_24EC715B8;
  v88 = *(std::__shared_weak_count **)&__p[16];
  if (!*(_QWORD *)&__p[16])
    goto LABEL_104;
  v89 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
  do
    v90 = __ldaxr(v89);
  while (__stlxr(v90 - 1, v89));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
    v91 = v127;
    if (!v127)
      goto LABEL_112;
  }
  else
  {
LABEL_104:
    v91 = v127;
    if (!v127)
      goto LABEL_112;
  }
  v93 = *v91;
  v92 = (std::__shared_weak_count *)v91[1];
  if (v92)
  {
    v94 = (unint64_t *)&v92->__shared_owners_;
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
    do
      v96 = __ldaxr(v94);
    while (__stlxr(v96 - 1, v94));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      if (!v93)
        goto LABEL_112;
      goto LABEL_111;
    }
  }
  if (v93)
LABEL_111:
    sub_2242AE9A8((uint64_t)v127);
LABEL_112:
  v126 = &off_24EC715B8;
  v97 = v128;
  if (v128)
  {
    v98 = (unint64_t *)&v128->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
LABEL_117:
  v116 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v211), v212);
  v117 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v213), v214);
  *(float32x4_t *)&__p[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v209), v210);
  *(float32x4_t *)__p = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v207), v208);
  v123 = operator new(0x20uLL);
  *(_OWORD *)v124 = xmmword_2245B9420;
  strcpy((char *)v123, "ContinousTrackingResults");
  sub_2233AFDB8(__p, (const std::string::value_type *)&v123, v19);
  if ((v124[15] & 0x80000000) != 0)
    operator delete(v123);
  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2245B9420;
  strcpy(*(char **)__p, "ContinousTrackingResults");
  sub_2233B19E8(a6, __p, v19);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v100 = *(_QWORD *)&v180[40];
  *(_QWORD *)(a1 + 24) = *(_QWORD *)&v180[16];
  *(double *)a1 = v19;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v180;
  *(_QWORD *)v180 = 0;
  *(_QWORD *)&v180[8] = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v180[24];
  *(_QWORD *)(a1 + 48) = v100;
  memset(&v180[24], 0, 24);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v180[48];
  v101 = v181;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)&v180[64];
  *(_QWORD *)&v180[16] = 0;
  memset(&v180[48], 0, 24);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&v180[72];
  *(_QWORD *)(a1 + 96) = v101;
  *(_QWORD *)&v180[80] = 0;
  *(_QWORD *)&v180[72] = 0;
  v181 = 0;
  sub_223341058((void **)v180);
  if (v224)
  {
    if (v222)
    {
      *(_QWORD *)&v223 = v222;
      operator delete(v222);
    }
    if ((_QWORD)v220)
    {
      *((_QWORD *)&v220 + 1) = v220;
      operator delete((void *)v220);
    }
  }
  if (v219)
  {
    if ((_QWORD)v217)
    {
      *((_QWORD *)&v217 + 1) = v217;
      operator delete((void *)v217);
    }
    if ((_QWORD)v215)
    {
      *((_QWORD *)&v215 + 1) = v215;
      operator delete((void *)v215);
    }
  }
}

void sub_223337F48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_2233381C4(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t v3;
  float32x2_t v4;
  int v7;
  double v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  double *v24;
  double *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  __int128 v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t j;
  unsigned __int8 v79;
  unint64_t i;
  unsigned __int8 v81;
  uint64_t v82;
  char v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  float32x2_t *v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  float32x2_t *v91;
  float32x2_t *v92;
  float64x2_t v93;
  float v94;
  float32x2_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  float32x2_t *v100;
  float32x2_t *v101;
  float32x2_t v102;
  __int32 v103;
  float32x2_t *v104;
  uint64_t v105;
  double *v106;
  int64x2_t v107;
  int64_t v109;
  unint64_t v110;
  char *v111;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v118;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t *v126;
  float32x4_t v127;
  float32x4_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  int v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  size_t v142;
  _DWORD *v143;
  _DWORD *v144;
  float64x2_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  void *v157;
  void *v158;
  __int128 v159;
  __int128 v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  double *v167;
  double v168;
  int v169;
  int v171;
  uint64_t *v172;
  uint64_t v173;
  int64_t v174;
  char *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  void **v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  void *v212;
  void *v213;
  void *v214;
  char *v215;
  char *v216;
  __int128 v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  void **v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  void *v229;
  void *v230;
  void *v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  char *v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  void *v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  void *v252;
  char *v253;
  char *v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  void *v260;
  void *v261;
  void *v262;
  void *v263;
  void *v264;
  _OWORD *v265;
  _OWORD *v266;
  _DWORD *v267;
  _DWORD *v268;
  double v269;
  int64x2_t *v270;
  float64x2_t v271;
  uint64_t v272;
  int64x2_t v273;
  int64x2_t v274;
  float64x2_t v277;
  int8x16_t v279;
  int64x2_t v280;
  float64x2_t v283;
  double v284;
  char *v285;
  char *i8;
  __int128 v287;
  __int128 v288;
  double v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  double v293;
  double v294;
  _QWORD *v295;
  _QWORD *v296;
  void *v297;
  char *v298;
  char *v299;
  void *v300;
  char *v301;
  char *v302;
  void *v303;
  void *v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  void *v310;
  unint64_t v311;
  char *v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  char *v317;
  char *v318;
  std::__shared_weak_count *v319;
  unint64_t *p_shared_owners;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  double *v330;
  char v331;
  double *v332;
  double *v333;
  uint64_t v334;
  uint64_t v335;
  BOOL v336;
  uint64_t v337;
  unint64_t v338;
  int64x2_t v339;
  int64x2_t v340;
  float64x2_t v341;
  double v342;
  unint64_t v343;
  uint64_t v344;
  float32x2_t *v345;
  char *v346;
  uint64_t v347;
  char *v348;
  float64_t v349;
  __int128 v350;
  float32x4_t v351;
  uint64_t v352;
  float64x2_t v353;
  double v354;
  float32x4_t v355;
  uint64_t v356;
  float64_t v357;
  float64x2_t v358;
  double v359;
  float32x2_t v360;
  uint64_t *v361;
  double v362;
  __int128 v363;
  uint64_t v364;
  __int128 v365;
  void *v366;
  __int128 v367;
  void *v368;
  __int128 v369;
  uint64_t v370;
  void *v371;
  char *v372;
  uint64_t v373;
  int64x2_t v374;
  uint64_t v375;
  uint64_t v376;
  char *v377;
  double *v378;
  uint64_t v379;
  void *v380;
  __int128 v381;
  _BYTE v382[88];
  _BYTE v383[80];
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  _BYTE v388[32];
  __int128 v389;
  __int128 v390;
  __int128 v391;
  void *v392;
  void *v393;
  char v394;
  unint64_t v395;
  BOOL v396;
  float32x4_t v397;
  __int128 v398;
  __int128 *v399;
  __int128 *v400;
  __int128 *v401;
  uint64_t *v402;
  uint64_t v403;
  _BYTE v404[48];
  __int128 v405;
  uint64_t v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  void *v419;
  void *v420;
  uint64_t v421;
  void *v422;
  void *v423;
  uint64_t v424;
  char v425;
  void *v426;
  void *v427;
  void *v428;
  void *v429;
  char v430;
  void *v431[4];
  __int128 v432;
  void *v433[2];
  void *v434[2];
  int v435;
  void *v436[2];
  uint64_t v437;
  void *v438[2];
  uint64_t v439;
  void *v440[2];
  void *v441[5];
  __int128 __src;
  uint64_t v443;
  __int128 v444;
  _OWORD v445[2];
  uint64_t v446;

  v446 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned __int8 *)(*a1 + 56);
  v8 = *(double *)a2;
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  v12 = *(unsigned __int8 *)(a2 + 160);
  if (*(_BYTE *)(a2 + 160))
  {
    v13 = *(_BYTE *)(a2 + 112);
    v445[0] = *(_OWORD *)(a2 + 113);
    v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)((char *)v445 + 15) = *(_OWORD *)(a2 + 128);
    v444 = v14;
  }
  else
  {
    v13 = 0;
  }
  v15 = *a1;
  *(_OWORD *)&v382[8] = v9;
  *(double *)v382 = v8;
  *(_QWORD *)&v382[24] = v11;
  v16 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)&v382[72] = *(_OWORD *)(a2 + 72);
  *(_OWORD *)v383 = v16;
  v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)&v382[32] = v10;
  *(_QWORD *)&v383[16] = v17;
  v18 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)&v382[40] = *(_OWORD *)(a2 + 40);
  *(_OWORD *)&v382[56] = v18;
  v383[24] = 0;
  v383[72] = 0;
  if (v12)
  {
    v383[24] = v13;
    *(_OWORD *)&v383[25] = v445[0];
    *(_OWORD *)&v383[40] = *(_OWORD *)((char *)v445 + 15);
    *(_OWORD *)&v383[56] = v444;
    v383[72] = 1;
  }
  v19 = *(_OWORD *)(a2 + 280);
  v389 = *(_OWORD *)(a2 + 264);
  v390 = v19;
  v20 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)v388 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)&v388[16] = v20;
  v21 = *(_OWORD *)(a2 + 184);
  v384 = *(_OWORD *)(a2 + 168);
  v385 = v21;
  v22 = *(_OWORD *)(a2 + 216);
  v386 = *(_OWORD *)(a2 + 200);
  v387 = v22;
  sub_223315050((_QWORD *)(v15 + 208), (uint64_t *)v382);
  if (*(_QWORD *)&v382[8])
  {
    *(_QWORD *)&v382[16] = *(_QWORD *)&v382[8];
    operator delete(*(void **)&v382[8]);
  }
  if (v7 != 2)
  {
    v23 = 1;
    goto LABEL_12;
  }
  if (v8 - *(double *)(v15 + 152) < *(double *)(v15 + 136) - *(double *)(v15 + 144))
  {
    v23 = 0;
LABEL_12:
    *(_DWORD *)a3 = v23;
    *(_BYTE *)(a3 + 104) = 0;
    return;
  }
  *(double *)(v15 + 152) = v8;
  sub_223312308((char **)(*a1 + 160), &v374);
  v372 = 0;
  v371 = 0;
  v373 = 0;
  v24 = (double *)v377;
  v25 = v378;
  if (v377 == (char *)v378)
  {
    v25 = 0;
    v24 = 0;
  }
  else
  {
    v371 = v377;
    v372 = (char *)v378;
    v373 = v379;
    v378 = 0;
    v379 = 0;
    v377 = 0;
  }
  v337 = *(_QWORD *)(*a1 + 352);
  v26 = v376;
  v347 = v375;
  v27 = v376 - v375;
  if (v376 == v375
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/SurfaceDetection.cpp", 429, (uint64_t)"!depth_bundles.empty()", 22, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v28 = ((char *)v25 - (char *)v24) / 344;
  v332 = v24;
  v333 = v25;
  v338 = v28;
  v329 = a3;
  v352 = v26;
  v356 = v27;
  if (v25 != v24)
  {
    if (v28 > 0xD20D20D20D20D2)
      sub_22316E078();
    v29 = (char *)operator new(312 * v28);
    v30 = &v29[312 * v28];
    v31 = (char *)&v24[43 * v28];
    v346 = v29;
    v348 = v29;
    while (1)
    {
      *(_QWORD *)v404 = &off_24EC715B8;
      *(_QWORD *)&v404[8] = 0;
      *(_QWORD *)&v404[16] = 0;
      v41 = sub_223315C3C((_QWORD *)v24 + 1, (uint64_t)v404, (uint64_t *)v24 + 10, (uint64_t)(v24 + 27), (uint64_t)v382);
      *(_QWORD *)v404 = &off_24EC715B8;
      v42 = *(std::__shared_weak_count **)&v404[16];
      if (!*(_QWORD *)&v404[16])
        goto LABEL_26;
      v43 = (unint64_t *)(*(_QWORD *)&v404[16] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v42->__on_zero_shared)(v42, v41);
        std::__shared_weak_count::__release_weak(v42);
        v45 = v348;
        if (v348 < v30)
          goto LABEL_21;
LABEL_27:
        v46 = 0x6F96F96F96F96F97 * ((v45 - v346) >> 3);
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) > 0xD20D20D20D20D2)
          sub_22316E078();
        if (0xDF2DF2DF2DF2DF2ELL * ((v30 - v346) >> 3) > v47)
          v47 = 0xDF2DF2DF2DF2DF2ELL * ((v30 - v346) >> 3);
        if ((unint64_t)(0x6F96F96F96F96F97 * ((v30 - v346) >> 3)) >= 0x69069069069069)
          v48 = 0xD20D20D20D20D2;
        else
          v48 = v47;
        if (v48)
        {
          if (v48 > 0xD20D20D20D20D2)
            sub_223174E94();
          v49 = (char *)operator new(312 * v48);
        }
        else
        {
          v49 = 0;
        }
        v50 = *(_OWORD *)&v382[48];
        v51 = &v49[312 * v46];
        *((_OWORD *)v51 + 2) = *(_OWORD *)&v382[32];
        *((_OWORD *)v51 + 3) = v50;
        *((_OWORD *)v51 + 4) = *(_OWORD *)&v382[64];
        v52 = *(_OWORD *)&v382[16];
        *(_OWORD *)v51 = *(_OWORD *)v382;
        *((_OWORD *)v51 + 1) = v52;
        v53 = *(_OWORD *)&v383[24];
        *((_OWORD *)v51 + 6) = *(_OWORD *)&v383[8];
        *((_OWORD *)v51 + 7) = v53;
        *((_OWORD *)v51 + 8) = *(_OWORD *)&v383[40];
        *((_DWORD *)v51 + 38) = *(_DWORD *)&v383[64];
        *(_OWORD *)(v51 + 168) = v384;
        v54 = v391;
        *(_OWORD *)(v51 + 280) = v390;
        *(_OWORD *)(v51 + 296) = v54;
        v55 = *(_OWORD *)&v388[16];
        *(_OWORD *)(v51 + 264) = v389;
        *(_OWORD *)(v51 + 248) = v55;
        v56 = v387;
        *(_OWORD *)(v51 + 232) = *(_OWORD *)v388;
        *(_OWORD *)(v51 + 216) = v56;
        v57 = v385;
        *(_OWORD *)(v51 + 200) = v386;
        *((_QWORD *)v51 + 10) = &off_24EC64998;
        *((_QWORD *)v51 + 11) = &off_24EC64920;
        *((_QWORD *)v51 + 18) = *(_QWORD *)&v383[56];
        *(_QWORD *)(v51 + 156) = *(_QWORD *)&v383[68];
        *(_OWORD *)(v51 + 184) = v57;
        if (v348 == v346)
        {
          v71 = &v49[312 * v46];
        }
        else
        {
          v58 = 0;
          do
          {
            v59 = &v51[v58];
            v60 = &v51[v58 - 312];
            *(_OWORD *)v60 = *(_OWORD *)&v348[v58 - 312];
            v61 = *(_OWORD *)&v348[v58 - 296];
            v62 = *(_OWORD *)&v348[v58 - 280];
            v63 = *(_OWORD *)&v348[v58 - 264];
            *(_OWORD *)(v59 - 248) = *(_OWORD *)&v348[v58 - 248];
            *((_OWORD *)v60 + 2) = v62;
            *((_OWORD *)v60 + 3) = v63;
            *((_QWORD *)v59 - 29) = &off_24EC64998;
            *((_QWORD *)v59 - 28) = &off_24EC64920;
            *((_OWORD *)v60 + 1) = v61;
            *(_OWORD *)(v59 - 216) = *(_OWORD *)&v348[v58 - 216];
            *(_OWORD *)(v59 - 200) = *(_OWORD *)&v348[v58 - 200];
            *(_OWORD *)(v59 - 184) = *(_OWORD *)&v348[v58 - 184];
            *((_QWORD *)v59 - 21) = *(_QWORD *)&v348[v58 - 168];
            *((_DWORD *)v59 - 40) = *(_DWORD *)&v348[v58 - 160];
            *(_QWORD *)(v59 - 156) = *(_QWORD *)&v348[v58 - 156];
            *((_QWORD *)v59 - 18) = *(_QWORD *)&v348[v58 - 144];
            *((_QWORD *)v59 - 17) = *(_QWORD *)&v348[v58 - 136];
            v64 = *(_OWORD *)&v348[v58 - 128];
            v65 = *(_OWORD *)&v348[v58 - 112];
            v66 = *(_OWORD *)&v348[v58 - 80];
            *((_OWORD *)v59 - 6) = *(_OWORD *)&v348[v58 - 96];
            *((_OWORD *)v59 - 5) = v66;
            *((_OWORD *)v59 - 8) = v64;
            *((_OWORD *)v59 - 7) = v65;
            v67 = *(_OWORD *)&v348[v58 - 64];
            v68 = *(_OWORD *)&v348[v58 - 48];
            v69 = *(_OWORD *)&v348[v58 - 16];
            *((_OWORD *)v59 - 2) = *(_OWORD *)&v348[v58 - 32];
            *((_OWORD *)v59 - 1) = v69;
            *((_OWORD *)v59 - 4) = v67;
            *((_OWORD *)v59 - 3) = v68;
            v58 -= 312;
          }
          while (&v348[v58] != v346);
          v70 = v348 - v346 - 312;
          v71 = &v51[v58];
          if (v70 >= 0x138)
          {
            v73 = v70 / 0x138 + 1;
            v72 = &v348[-312 * (v73 & 0x1FFFFFFFFFFFFFELL)];
            v74 = v348 - 544;
            v75 = v73 & 0x1FFFFFFFFFFFFFELL;
            do
            {
              *((_QWORD *)v74 + 39) = &off_24EC64998;
              *(_QWORD *)v74 = &off_24EC64998;
              v74 -= 624;
              v75 -= 2;
            }
            while (v75);
            if (v73 == (v73 & 0x1FFFFFFFFFFFFFELL))
              goto LABEL_49;
          }
          else
          {
            v72 = v348;
          }
          do
          {
            *((_QWORD *)v72 - 29) = &off_24EC64998;
            v72 -= 312;
          }
          while (v72 != v346);
        }
LABEL_49:
        v30 = &v49[312 * v48];
        v76 = v51 + 312;
        if (v346)
        {
          v77 = v76;
          operator delete(v346);
          v76 = v77;
        }
        v346 = v71;
        v348 = v76;
        v24 += 43;
        if (v24 == (double *)v31)
          goto LABEL_54;
      }
      else
      {
LABEL_26:
        v45 = v348;
        if (v348 >= v30)
          goto LABEL_27;
LABEL_21:
        *(_OWORD *)v45 = *(_OWORD *)v382;
        v32 = *(_OWORD *)&v382[16];
        v33 = *(_OWORD *)&v382[32];
        v34 = *(_OWORD *)&v382[64];
        *((_OWORD *)v45 + 3) = *(_OWORD *)&v382[48];
        *((_OWORD *)v45 + 4) = v34;
        *((_OWORD *)v45 + 1) = v32;
        *((_OWORD *)v45 + 2) = v33;
        *((_QWORD *)v348 + 10) = &off_24EC64998;
        *((_QWORD *)v348 + 11) = &off_24EC64920;
        *((_OWORD *)v348 + 6) = *(_OWORD *)&v383[8];
        *((_OWORD *)v348 + 7) = *(_OWORD *)&v383[24];
        *((_OWORD *)v348 + 8) = *(_OWORD *)&v383[40];
        *((_QWORD *)v348 + 18) = *(_QWORD *)&v383[56];
        *((_DWORD *)v348 + 38) = *(_DWORD *)&v383[64];
        *(_QWORD *)(v348 + 156) = *(_QWORD *)&v383[68];
        *(_OWORD *)(v348 + 168) = v384;
        v35 = v385;
        v36 = v386;
        v37 = v387;
        *(_OWORD *)(v348 + 232) = *(_OWORD *)v388;
        *(_OWORD *)(v348 + 216) = v37;
        *(_OWORD *)(v348 + 200) = v36;
        *(_OWORD *)(v348 + 184) = v35;
        v38 = *(_OWORD *)&v388[16];
        v39 = v389;
        v40 = v391;
        *(_OWORD *)(v348 + 280) = v390;
        *(_OWORD *)(v348 + 296) = v40;
        *(_OWORD *)(v348 + 264) = v39;
        *(_OWORD *)(v348 + 248) = v38;
        v348 += 312;
        v24 += 43;
        if (v24 == (double *)v31)
          goto LABEL_54;
      }
    }
  }
  v348 = 0;
  v346 = 0;
LABEL_54:
  j = 0x14C1BACF914C1BADLL * (v356 >> 3);
  v79 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v79 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  i = (unint64_t)v346;
  v328 = v347 + 8 * (v356 >> 3);
  v330 = (double *)(v328 - 296);
  qword_25578BAF0 = *(_QWORD *)(v328 - 296);
  v81 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v81 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  HIBYTE(v443) = 10;
  strcpy((char *)&__src, "cv3d.plane");
  if (byte_25578BAF8[23] < 0)
  {
    sub_22319C4B8((void **)byte_25578BAF8, &__src, 0xAuLL);
    if (SHIBYTE(v443) < 0)
      operator delete((void *)__src);
  }
  else
  {
    *(_OWORD *)byte_25578BAF8 = __src;
    *(_QWORD *)&byte_25578BAF8[16] = v443;
  }
  memset(v441, 0, 32);
  *(_OWORD *)v440 = 0u;
  v438[1] = 0;
  v438[0] = 0;
  v439 = 0;
  v436[1] = 0;
  v436[0] = 0;
  v437 = 0;
  *(_OWORD *)v434 = 0u;
  *(_OWORD *)v433 = 0u;
  v435 = 1065353216;
  if (v352 != v347)
  {
    v82 = 0;
    v334 = j - 1;
    if (v348 - v346 == 312)
      v83 = (char)v346;
    else
      v83 = 0;
    v331 = v83;
    v84 = (unint64_t)(0x6F96F96F96F96F97 * ((v348 - v346) >> 3)) < 2 || v348 - v346 == 312;
    v336 = v84;
    v335 = 0x14C1BACF914C1BADLL * (v356 >> 3);
    while (1)
    {
      v85 = v347 + 296 * v82;
      v87 = *(float32x2_t **)(v85 + 8);
      v86 = *(_QWORD *)(v85 + 16);
      v357 = *(double *)(v85 + 40);
      v88 = *(double *)(v85 + 72);
      v353 = *(float64x2_t *)(v85 + 88);
      memset(v382, 0, 24);
      v89 = v86 - (_QWORD)v87;
      if (v89)
      {
        v349 = v88;
        if (v89 < 0)
          sub_22316E078();
        v90 = v89 >> 4;
        v91 = (float32x2_t *)operator new(12 * (v89 >> 4));
        *(_QWORD *)v382 = v91;
        *(_QWORD *)&v382[8] = v91;
        *(_QWORD *)&v382[16] = (char *)v91 + 12 * v90;
        v92 = &v87[2 * v90];
        v93.f64[0] = v357;
        v93.f64[1] = v349;
        v358 = v93;
        while (1)
        {
          while (1)
          {
            while (1)
            {
              v94 = v87[1].f32[0];
              v3 = vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vsubq_f64(vcvtq_f64_f32(*v87), v353), v358), v94));
              if ((unint64_t)v91 >= *(_QWORD *)&v382[16])
                break;
              *v91 = v3;
              v91[1].f32[0] = v94;
              v91 = (float32x2_t *)((char *)v91 + 12);
              *(_QWORD *)&v382[8] = v91;
              v87 += 2;
              if (v87 == v92)
                goto LABEL_91;
            }
            v95 = *(float32x2_t **)v382;
            v96 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v91 - *(_QWORD *)v382) >> 2);
            v97 = v96 + 1;
            if (v96 + 1 > 0x1555555555555555)
              sub_22316E078();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v382[16] - *(_QWORD *)v382) >> 2) > v97)
              v97 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v382[16] - *(_QWORD *)v382) >> 2);
            v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v382[16] - *(_QWORD *)v382) >> 2) >= 0xAAAAAAAAAAAAAAALL
                ? 0x1555555555555555
                : v97;
            if (v98)
            {
              if (v98 > 0x1555555555555555)
                sub_223174E94();
              v99 = (char *)operator new(12 * v98);
            }
            else
            {
              v99 = 0;
            }
            v100 = (float32x2_t *)&v99[12 * v96];
            *v100 = v3;
            v100[1].f32[0] = v94;
            v101 = (float32x2_t *)((char *)v100 + 12);
            if (v91 != v95)
              break;
            *(_QWORD *)v382 = v100;
            *(_QWORD *)&v382[8] = (char *)v100 + 12;
            *(_QWORD *)&v382[16] = &v99[12 * v98];
LABEL_90:
            operator delete(v91);
            v91 = v101;
            *(_QWORD *)&v382[8] = v101;
            v87 += 2;
            if (v87 == v92)
            {
LABEL_91:
              v104 = *(float32x2_t **)v382;
              goto LABEL_93;
            }
          }
          do
          {
            v102 = *(float32x2_t *)((char *)v91 - 12);
            v91 = (float32x2_t *)((char *)v91 - 12);
            v103 = v91[1].i32[0];
            *(float32x2_t *)((char *)v100 - 12) = v102;
            v100 = (float32x2_t *)((char *)v100 - 12);
            v100[1].i32[0] = v103;
          }
          while (v91 != v95);
          v91 = *(float32x2_t **)v382;
          *(_QWORD *)v382 = v100;
          *(_QWORD *)&v382[8] = v101;
          *(_QWORD *)&v382[16] = &v99[12 * v98];
          if (v91)
            goto LABEL_90;
          v91 = v101;
          *(_QWORD *)&v382[8] = v101;
          v87 += 2;
          if (v87 == v92)
            goto LABEL_91;
        }
      }
      v91 = 0;
      v104 = 0;
LABEL_93:
      v105 = v347 + 296 * v82;
      v107 = *(int64x2_t *)(v105 + 168);
      v106 = (double *)(v105 + 168);
      v354 = v106[2];
      v359 = v106[6];
      v339 = *(int64x2_t *)(v106 + 4);
      v340 = v107;
      _D12 = v106[10];
      v350 = *((_OWORD *)v106 + 4);
      v342 = v106[14];
      v341 = *(float64x2_t *)(v106 + 12);
      memset(v382, 0, 24);
      v344 = v82;
      v345 = v104;
      v109 = (char *)v91 - (char *)v104;
      if (v91 == v104)
      {
        v111 = 0;
        v432 = 0u;
        memset(v431, 0, sizeof(v431));
        goto LABEL_123;
      }
      v110 = 0xAAAAAAAAAAAAAAABLL * (v109 >> 2);
      if (v110 > 0x1555555555555555)
        sub_22316E078();
      v111 = (char *)operator new(v109);
      _D0 = *((_QWORD *)&v350 + 1);
      _V18.D[1] = v341.f64[1];
      v114 = (float64x2_t)vzip1q_s64(v340, v339);
      v115 = (float64x2_t)vzip2q_s64(v340, v339);
      v116.f64[0] = v354;
      v116.f64[1] = v359;
      _D17 = v342;
      v118 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v114, vnegq_f64(v341).f64[0]), v115, v341, 1), v116, v342, 0);
      __asm
      {
        FMLS            D1, D0, V18.D[1]
        FMLS            D1, D12, V17.D[0]
      }
      v124 = vcvt_f32_f64(v114);
      v3.f32[0] = *(double *)&v350;
      v125 = vcvt_f32_f64(v115);
      v4.f32[0] = *((double *)&v350 + 1);
      *(float *)v114.f64 = v354;
      *(float *)&_D0 = v359;
      HIDWORD(v114.f64[0]) = _D0;
      v360 = *(float32x2_t *)&v114.f64[0];
      *(float32x2_t *)&v114.f64[0] = vcvt_f32_f64(v118);
      *(float *)&_D0 = _D1;
      LODWORD(v114.f64[1]) = _D0;
      v355 = (float32x4_t)v114;
      *(float *)&_D12 = _D12;
      *(_QWORD *)v382 = v111;
      *(_QWORD *)&v382[8] = v111;
      *(_QWORD *)&v382[16] = &v111[12 * v110];
      v126 = v345;
      do
      {
        while (1)
        {
          while (1)
          {
            LODWORD(_D1) = v126[1].i32[0];
            *(float32x2_t *)v127.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v124, COERCE_FLOAT(*v126)), v125, *v126, 1), v360, *(float *)&_D1);
            *(float32x2_t *)&v127.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v3, *v126), v4, *v126, 1), *(float32x2_t *)&_D1, *(float32x2_t *)&_D12);
            v128 = vaddq_f32(v127, v355);
            if ((unint64_t)v111 >= *(_QWORD *)&v382[16])
              break;
            *((_DWORD *)v111 + 2) = v128.i32[2];
            *(_QWORD *)v111 = v128.i64[0];
            v111 += 12;
            *(_QWORD *)&v382[8] = v111;
            v126 = (float32x2_t *)((char *)v126 + 12);
            if (v126 == v91)
              goto LABEL_115;
          }
          v129 = *(char **)v382;
          v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v111[-*(_QWORD *)v382] >> 2);
          v131 = v130 + 1;
          if (v130 + 1 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v382[16] - *(_QWORD *)v382) >> 2) > v131)
            v131 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v382[16] - *(_QWORD *)v382) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v382[16] - *(_QWORD *)v382) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v132 = 0x1555555555555555;
          else
            v132 = v131;
          if (v132)
          {
            v351 = v128;
            if (v132 > 0x1555555555555555)
              sub_223174E94();
            v133 = (char *)operator new(12 * v132);
            v128 = v351;
          }
          else
          {
            v133 = 0;
          }
          v134 = &v133[12 * v130];
          *(_QWORD *)v134 = v128.i64[0];
          *((_DWORD *)v134 + 2) = v128.i32[2];
          v135 = v134 + 12;
          if (v111 == v129)
          {
            *(_QWORD *)v382 = v134;
            *(_QWORD *)&v382[8] = v134 + 12;
            *(_QWORD *)&v382[16] = &v133[12 * v132];
            break;
          }
          do
          {
            v136 = *(_QWORD *)(v111 - 12);
            v111 -= 12;
            v137 = *((_DWORD *)v111 + 2);
            *(_QWORD *)(v134 - 12) = v136;
            v134 -= 12;
            *((_DWORD *)v134 + 2) = v137;
          }
          while (v111 != v129);
          v111 = *(char **)v382;
          *(_QWORD *)v382 = v134;
          *(_QWORD *)&v382[8] = v135;
          *(_QWORD *)&v382[16] = &v133[12 * v132];
          if (v111)
            break;
          v111 = v135;
          *(_QWORD *)&v382[8] = v135;
          v126 = (float32x2_t *)((char *)v126 + 12);
          if (v126 == v91)
            goto LABEL_115;
        }
        operator delete(v111);
        v111 = v135;
        *(_QWORD *)&v382[8] = v135;
        v126 = (float32x2_t *)((char *)v126 + 12);
      }
      while (v126 != v91);
LABEL_115:
      v138 = *(char **)v382;
      memset(v431, 0, 24);
      v139 = (uint64_t)&v111[-*(_QWORD *)v382];
      if (v111 == *(char **)v382)
      {
        v431[3] = 0;
        v432 = 0uLL;
        v82 = v344;
      }
      else
      {
        v140 = 0xAAAAAAAAAAAAAAABLL * (v139 >> 2);
        if (v140 > 0x1555555555555555)
          sub_22316E078();
        v141 = (char *)operator new((size_t)&v111[-*(_QWORD *)v382]);
        v431[0] = v141;
        v431[1] = v141;
        v431[2] = &v141[4 * (v139 >> 2)];
        v142 = 12 * ((v139 - 12) / 0xCuLL) + 12;
        memcpy(v141, v138, v142);
        v431[1] = &v141[v142];
        v432 = 0uLL;
        v431[3] = 0;
        if (v140 >= 0x71C71C71C71C71DLL)
          sub_22316E078();
        v143 = operator new(36 * v140);
        v82 = v344;
        v144 = &v143[9 * v140];
        v431[3] = v143;
        *((_QWORD *)&v432 + 1) = v144;
        do
        {
          *v143 = 1065353216;
          *(_QWORD *)(v143 + 1) = 0;
          *(_QWORD *)(v143 + 3) = 0x3F80000000000000;
          *(_QWORD *)(v143 + 5) = 0;
          *(_QWORD *)(v143 + 7) = 0x3F80000000000000;
          v143 += 9;
        }
        while (v143 != v144);
        *(_QWORD *)&v432 = v144;
        v111 = v138;
      }
LABEL_123:
      v145.f64[0] = *(float64_t *)(v85 + 40);
      v146 = v347 + 296 * v82;
      v147 = *(_QWORD *)(v85 + 32);
      v145.f64[1] = *(float64_t *)(v146 + 72);
      v397 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v145), *(float64x2_t *)(v146 + 88));
      sub_223FBAC84((uint64_t)v382, (uint64_t)&v397);
      *(_QWORD *)v404 = &off_24EC64998;
      *(_QWORD *)&v404[8] = &off_24EC64920;
      *(_OWORD *)&v404[16] = *(_OWORD *)&v382[8];
      *(_OWORD *)&v404[32] = *(_OWORD *)&v382[24];
      v405 = *(_OWORD *)&v382[40];
      v148 = *(_QWORD *)&v382[56];
      v406 = *(_QWORD *)&v382[56];
      v149 = *(_DWORD *)&v382[64];
      v407 = *(_DWORD *)&v382[64];
      v150 = *(_QWORD *)&v382[68];
      v408 = *(_QWORD *)&v382[68];
      v409 = v147;
      *(float *)&v410 = (float)v147;
      *((float *)&v410 + 1) = (float)HIDWORD(v147);
      v151 = *(_OWORD *)v106;
      v152 = *((_OWORD *)v106 + 1);
      v153 = *((_OWORD *)v106 + 3);
      v413 = *((_OWORD *)v106 + 2);
      v414 = v153;
      v411 = v151;
      v412 = v152;
      v154 = *((_OWORD *)v106 + 4);
      v155 = *((_OWORD *)v106 + 5);
      v156 = *((_OWORD *)v106 + 7);
      v417 = *((_OWORD *)v106 + 6);
      v418 = v156;
      v415 = v154;
      v416 = v155;
      v157 = v431[0];
      v158 = v431[3];
      v419 = v431[0];
      v159 = *(_OWORD *)&v431[1];
      v420 = v431[1];
      memset(v431, 0, sizeof(v431));
      v424 = 0;
      v421 = 0;
      v422 = v431[3];
      v160 = v432;
      v423 = (void *)v432;
      v161 = v343;
      v432 = 0uLL;
      v425 = 1;
      LOBYTE(v426) = 0;
      if (v348 - v346 == 312)
        v161 = i >> 8;
      v430 = 0;
      if (v336)
      {
        LOBYTE(v162) = v331;
        v163 = v348 - v346 == 312;
      }
      else
      {
        if (v333 == v332)
        {
          v164 = 0;
        }
        else
        {
          v164 = 0;
          v165 = 0;
          v166 = 1.79769313e308;
          v167 = v332;
          do
          {
            v168 = *(double *)v85 - *v167;
            if (v168 == 0.0)
              v169 = 0;
            else
              v169 = -127;
            if (v168 > 0.0)
              v169 = 1;
            if (v168 < 0.0)
              v169 = -1;
            if (v169 < 0 && v169 != -127)
              v168 = -v168;
            if (v168 == v166)
              v171 = 0;
            else
              v171 = -127;
            if (v168 > v166)
              v171 = 1;
            if (v168 < v166)
              v171 = -1;
            if (v171 != -127 && v171 < 0)
            {
              v166 = v168;
              v164 = v165;
            }
            ++v165;
            v167 += 43;
          }
          while (v338 != v165);
        }
        v162 = i + 312 * v164;
        v161 = v162 >> 8;
        v163 = 1;
      }
      *(_QWORD *)v382 = &off_24EC64998;
      *(_QWORD *)&v382[8] = &off_24EC64920;
      *(_OWORD *)&v382[16] = *(_OWORD *)&v404[16];
      *(_OWORD *)&v382[32] = *(_OWORD *)&v404[32];
      *(_OWORD *)&v382[48] = v405;
      *(_QWORD *)&v382[64] = v148;
      *(_DWORD *)&v382[72] = v149;
      *(_QWORD *)&v382[76] = v150;
      *(_QWORD *)v383 = v147;
      *(_QWORD *)&v383[8] = v410;
      *(_OWORD *)&v383[48] = v413;
      *(_OWORD *)&v383[64] = v414;
      *(_OWORD *)&v383[16] = v411;
      *(_OWORD *)&v383[32] = v412;
      v386 = v417;
      v387 = v418;
      v384 = v415;
      v385 = v416;
      *(_OWORD *)&v388[8] = v159;
      v419 = 0;
      v420 = 0;
      v421 = 0;
      *(_QWORD *)v388 = v157;
      *(_QWORD *)&v388[24] = v158;
      v389 = v160;
      v422 = 0;
      v423 = 0;
      v424 = 0;
      LOBYTE(v390) = 1;
      BYTE8(v390) = 0;
      v394 = 0;
      v343 = v161;
      v395 = v162 | (v161 << 8);
      v396 = v163;
      sub_223F68DD8(v337, (uint64_t)v382, (uint64_t *)&v397);
      if (v394)
      {
        if (v392)
        {
          v393 = v392;
          operator delete(v392);
        }
        if (*((_QWORD *)&v390 + 1))
        {
          *(_QWORD *)&v391 = *((_QWORD *)&v390 + 1);
          operator delete(*((void **)&v390 + 1));
        }
      }
      if ((_BYTE)v390)
      {
        if (*(_QWORD *)&v388[24])
        {
          *(_QWORD *)&v389 = *(_QWORD *)&v388[24];
          operator delete(*(void **)&v388[24]);
        }
        if (*(_QWORD *)v388)
        {
          *(_QWORD *)&v388[8] = *(_QWORD *)v388;
          operator delete(*(void **)v388);
        }
      }
      sub_2233406A4((char **)v440, (uint64_t)v440[1], *((__int128 **)&v398 + 1), v399, ((uint64_t)v399 - *((_QWORD *)&v398 + 1)) >> 4);
      sub_2233406A4((char **)&v441[1], (uint64_t)v441[2], v400, v401, v401 - v400);
      v172 = v402;
      v173 = v403 - (_QWORD)v402;
      v174 = 0xCF3CF3CF3CF3CF3DLL * ((v403 - (uint64_t)v402) >> 3);
      sub_2233408D4((uint64_t *)v438, v174 - 0x30C30C30C30C30C3 * (((char *)v438[1] - (char *)v438[0]) >> 3));
      if (v173 >= 1)
      {
        v175 = (char *)v438[1];
        if ((uint64_t)(0xCF3CF3CF3CF3CF3DLL * ((int64_t)(v439 - (unint64_t)v438[1]) >> 3)) >= v174)
        {
          if (v174 <= 0)
          {
            v190 = (char *)v438[1];
            v191 = (char *)v438[1] - 168 * v174;
            v192 = (char *)v438[1];
            if (v191 < v438[1])
            {
              v193 = (char *)v438[1] - 168 * v174;
              v192 = (char *)v438[1];
              do
              {
                v194 = *(_QWORD *)v193;
                *((_DWORD *)v192 + 2) = *((_DWORD *)v193 + 2);
                *(_QWORD *)v192 = v194;
                v195 = *(_QWORD *)(v193 + 12);
                *((_DWORD *)v192 + 5) = *((_DWORD *)v193 + 5);
                *(_QWORD *)(v192 + 12) = v195;
                v196 = *(_OWORD *)(v193 + 24);
                v197 = *(_OWORD *)(v193 + 40);
                v198 = *(_OWORD *)(v193 + 56);
                *(_OWORD *)(v192 + 72) = *(_OWORD *)(v193 + 72);
                *(_OWORD *)(v192 + 56) = v198;
                *(_OWORD *)(v192 + 40) = v197;
                *(_OWORD *)(v192 + 24) = v196;
                v199 = *((_QWORD *)v193 + 11);
                *((_QWORD *)v192 + 13) = 0;
                *((_QWORD *)v192 + 14) = 0;
                *((_QWORD *)v192 + 11) = v199;
                *((_QWORD *)v192 + 12) = 0;
                *((_OWORD *)v192 + 6) = *((_OWORD *)v193 + 6);
                *((_QWORD *)v192 + 14) = *((_QWORD *)v193 + 14);
                *((_QWORD *)v193 + 12) = 0;
                *((_QWORD *)v193 + 13) = 0;
                *((_QWORD *)v193 + 14) = 0;
                *((_QWORD *)v192 + 15) = 0;
                *((_QWORD *)v192 + 16) = 0;
                *((_QWORD *)v192 + 17) = 0;
                *(_OWORD *)(v192 + 120) = *(_OWORD *)(v193 + 120);
                *((_QWORD *)v192 + 17) = *((_QWORD *)v193 + 17);
                *((_QWORD *)v193 + 15) = 0;
                *((_QWORD *)v193 + 16) = 0;
                *((_QWORD *)v193 + 17) = 0;
                v200 = *((_OWORD *)v193 + 9);
                v192[160] = v193[160];
                *((_OWORD *)v192 + 9) = v200;
                v192 += 168;
                v193 += 168;
              }
              while (v193 < v175);
            }
            v361 = &v172[21 * v174];
            v438[1] = v192;
            if (v190 != &v175[168 * v174])
            {
              v215 = v191;
              v216 = v190;
              do
              {
                v218 = *((_QWORD *)v215 - 21);
                v215 -= 168;
                v219 = *((_DWORD *)v215 + 2);
                *((_QWORD *)v216 - 21) = v218;
                v216 -= 168;
                *((_DWORD *)v190 - 40) = v219;
                v220 = *(_QWORD *)(v215 + 12);
                *((_DWORD *)v190 - 37) = *((_DWORD *)v215 + 5);
                *(_QWORD *)(v190 - 156) = v220;
                v221 = *(_OWORD *)(v215 + 24);
                v222 = *(_OWORD *)(v215 + 40);
                v223 = *(_OWORD *)(v215 + 72);
                *((_OWORD *)v190 - 7) = *(_OWORD *)(v215 + 56);
                *((_OWORD *)v190 - 6) = v223;
                *((_OWORD *)v190 - 9) = v221;
                *((_OWORD *)v190 - 8) = v222;
                *((_QWORD *)v190 - 10) = *((_QWORD *)v215 + 11);
                v225 = (void **)(v190 - 72);
                v224 = *((_QWORD *)v190 - 9);
                if (v224)
                {
                  v226 = *((_QWORD *)v190 - 8);
                  v227 = (void *)*((_QWORD *)v190 - 9);
                  if (v226 != v224)
                  {
                    v228 = *((_QWORD *)v190 - 8);
                    do
                    {
                      v230 = *(void **)(v228 - 24);
                      v228 -= 24;
                      v229 = v230;
                      if (v230)
                      {
                        *(_QWORD *)(v226 - 16) = v229;
                        operator delete(v229);
                      }
                      v226 = v228;
                    }
                    while (v228 != v224);
                    v227 = *v225;
                  }
                  *((_QWORD *)v190 - 8) = v224;
                  operator delete(v227);
                  *v225 = 0;
                  *((_QWORD *)v190 - 8) = 0;
                  *((_QWORD *)v190 - 7) = 0;
                }
                *(_OWORD *)(v190 - 72) = *(_OWORD *)(v191 - 72);
                *((_QWORD *)v190 - 7) = *((_QWORD *)v191 - 7);
                *((_QWORD *)v215 + 12) = 0;
                *((_QWORD *)v215 + 13) = 0;
                *((_QWORD *)v215 + 14) = 0;
                v231 = (void *)*((_QWORD *)v190 - 6);
                if (v231)
                {
                  *((_QWORD *)v190 - 5) = v231;
                  operator delete(v231);
                  *((_QWORD *)v190 - 6) = 0;
                  *((_QWORD *)v190 - 5) = 0;
                  *((_QWORD *)v190 - 4) = 0;
                }
                *((_OWORD *)v190 - 3) = *((_OWORD *)v191 - 3);
                *((_QWORD *)v190 - 4) = *((_QWORD *)v191 - 4);
                *((_QWORD *)v191 - 6) = 0;
                *((_QWORD *)v191 - 5) = 0;
                *((_QWORD *)v191 - 4) = 0;
                v217 = *(_OWORD *)(v191 - 24);
                *(v190 - 8) = *(v191 - 8);
                *(_OWORD *)(v190 - 24) = v217;
                v190 = v216;
                v191 = v215;
              }
              while (v215 != v175);
            }
            for (i = (unint64_t)v346; v172 != v361; v175 += 168)
            {
              v202 = *v172;
              *((_DWORD *)v175 + 2) = *((_DWORD *)v172 + 2);
              *(_QWORD *)v175 = v202;
              v203 = *(uint64_t *)((char *)v172 + 12);
              *((_DWORD *)v175 + 5) = *((_DWORD *)v172 + 5);
              *(_QWORD *)(v175 + 12) = v203;
              v204 = *(_OWORD *)(v172 + 3);
              v205 = *(_OWORD *)(v172 + 5);
              v206 = *(_OWORD *)(v172 + 7);
              *(_OWORD *)(v175 + 72) = *(_OWORD *)(v172 + 9);
              *(_OWORD *)(v175 + 56) = v206;
              *(_OWORD *)(v175 + 40) = v205;
              *(_OWORD *)(v175 + 24) = v204;
              *((_QWORD *)v175 + 11) = v172[11];
              v207 = (void **)(v175 + 96);
              v208 = *((_QWORD *)v175 + 12);
              if (v208)
              {
                v209 = *((_QWORD *)v175 + 13);
                v210 = (void *)*((_QWORD *)v175 + 12);
                if (v209 != v208)
                {
                  v211 = *((_QWORD *)v175 + 13);
                  do
                  {
                    v213 = *(void **)(v211 - 24);
                    v211 -= 24;
                    v212 = v213;
                    if (v213)
                    {
                      *(_QWORD *)(v209 - 16) = v212;
                      operator delete(v212);
                    }
                    v209 = v211;
                  }
                  while (v211 != v208);
                  v210 = *v207;
                }
                *((_QWORD *)v175 + 13) = v208;
                operator delete(v210);
                *v207 = 0;
                *((_QWORD *)v175 + 13) = 0;
                *((_QWORD *)v175 + 14) = 0;
              }
              *((_OWORD *)v175 + 6) = *((_OWORD *)v172 + 6);
              *((_QWORD *)v175 + 14) = v172[14];
              v172[12] = 0;
              v172[13] = 0;
              v172[14] = 0;
              v214 = (void *)*((_QWORD *)v175 + 15);
              if (v214)
              {
                *((_QWORD *)v175 + 16) = v214;
                operator delete(v214);
                *((_QWORD *)v175 + 15) = 0;
                *((_QWORD *)v175 + 16) = 0;
                *((_QWORD *)v175 + 17) = 0;
              }
              *(_OWORD *)(v175 + 120) = *(_OWORD *)(v172 + 15);
              *((_QWORD *)v175 + 17) = v172[17];
              v172[15] = 0;
              v172[16] = 0;
              v172[17] = 0;
              v201 = *((_OWORD *)v172 + 9);
              v175[160] = *((_BYTE *)v172 + 160);
              *((_OWORD *)v175 + 9) = v201;
              v172 += 21;
            }
          }
          else
          {
            v180 = 0;
            do
            {
              v181 = &v172[v180];
              v182 = &v175[v180 * 8];
              v183 = v172[v180];
              *((_DWORD *)v182 + 2) = v172[v180 + 1];
              *(_QWORD *)v182 = v183;
              v184 = *(uint64_t *)((char *)&v172[v180 + 1] + 4);
              *((_DWORD *)v182 + 5) = HIDWORD(v172[v180 + 2]);
              *(_QWORD *)(v182 + 12) = v184;
              v185 = *(_OWORD *)&v172[v180 + 3];
              v186 = *(_OWORD *)&v172[v180 + 5];
              v187 = *(_OWORD *)&v172[v180 + 7];
              *(_OWORD *)(v182 + 72) = *(_OWORD *)&v172[v180 + 9];
              *(_OWORD *)(v182 + 56) = v187;
              *(_OWORD *)(v182 + 40) = v186;
              *(_OWORD *)(v182 + 24) = v185;
              v188 = v172[v180 + 11];
              *((_QWORD *)v182 + 13) = 0;
              *((_QWORD *)v182 + 14) = 0;
              *((_QWORD *)v182 + 11) = v188;
              *((_QWORD *)v182 + 12) = 0;
              *((_OWORD *)v182 + 6) = *(_OWORD *)&v172[v180 + 12];
              *((_QWORD *)v182 + 14) = v172[v180 + 14];
              v181[12] = 0;
              v181[13] = 0;
              v181[14] = 0;
              *((_QWORD *)v182 + 15) = 0;
              *((_QWORD *)v182 + 16) = 0;
              *((_QWORD *)v182 + 17) = 0;
              *(_OWORD *)(v182 + 120) = *(_OWORD *)&v172[v180 + 15];
              *((_QWORD *)v182 + 17) = v172[v180 + 17];
              v181[15] = 0;
              v181[16] = 0;
              v181[17] = 0;
              v189 = *(_OWORD *)&v172[v180 + 18];
              v182[160] = v172[v180 + 20];
              *((_OWORD *)v182 + 9) = v189;
              v180 += 21;
            }
            while (v181 + 21 != &v172[21 * v174]);
            v438[1] = &v175[v180 * 8];
          }
        }
        else
        {
          v176 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v438[1] - (char *)v438[0]) >> 3);
          v177 = v176 + v174;
          if (v176 + v174 > 0x186186186186186)
            sub_223323BA8();
          if (0x9E79E79E79E79E7ALL * ((int64_t)(v439 - (unint64_t)v438[0]) >> 3) > v177)
            v177 = 0x9E79E79E79E79E7ALL * ((int64_t)(v439 - (unint64_t)v438[0]) >> 3);
          if (0xCF3CF3CF3CF3CF3DLL * ((int64_t)(v439 - (unint64_t)v438[0]) >> 3) >= 0xC30C30C30C30C3)
            v178 = 0x186186186186186;
          else
            v178 = v177;
          *(_QWORD *)&v382[32] = &v439;
          if (v178)
          {
            if (v178 > 0x186186186186186)
              sub_223174E94();
            v179 = (char *)operator new(168 * v178);
          }
          else
          {
            v179 = 0;
          }
          v232 = &v179[168 * v176];
          *(_QWORD *)v382 = v179;
          *(_QWORD *)&v382[8] = v232;
          *(_QWORD *)&v382[16] = v232;
          *(_QWORD *)&v382[24] = &v179[168 * v178];
          v233 = &v232[168 * v174];
          v234 = v232;
          do
          {
            v235 = *v172;
            *((_DWORD *)v234 + 2) = *((_DWORD *)v172 + 2);
            *(_QWORD *)v234 = v235;
            v236 = *(uint64_t *)((char *)v172 + 12);
            *((_DWORD *)v234 + 5) = *((_DWORD *)v172 + 5);
            *(_QWORD *)(v234 + 12) = v236;
            v237 = *(_OWORD *)(v172 + 3);
            v238 = *(_OWORD *)(v172 + 5);
            v239 = *(_OWORD *)(v172 + 7);
            *(_OWORD *)(v234 + 72) = *(_OWORD *)(v172 + 9);
            *(_OWORD *)(v234 + 56) = v239;
            *(_OWORD *)(v234 + 40) = v238;
            *(_OWORD *)(v234 + 24) = v237;
            *((_QWORD *)v234 + 11) = v172[11];
            *((_QWORD *)v234 + 13) = 0;
            *((_QWORD *)v234 + 14) = 0;
            *((_OWORD *)v234 + 6) = *((_OWORD *)v172 + 6);
            *((_QWORD *)v234 + 14) = v172[14];
            v172[12] = 0;
            v172[13] = 0;
            v172[14] = 0;
            *((_QWORD *)v234 + 16) = 0;
            *((_QWORD *)v234 + 17) = 0;
            *(_OWORD *)(v234 + 120) = *(_OWORD *)(v172 + 15);
            *((_QWORD *)v234 + 17) = v172[17];
            v172[15] = 0;
            v172[16] = 0;
            v172[17] = 0;
            v240 = *((_OWORD *)v172 + 9);
            v234[160] = *((_BYTE *)v172 + 160);
            *((_OWORD *)v234 + 9) = v240;
            v234 += 168;
            v172 += 21;
          }
          while (v234 != v233);
          *(_QWORD *)&v382[16] = v233;
          v241 = (char *)v438[0];
          if (v438[0] != v175)
          {
            v242 = 0;
            do
            {
              sub_223323C9C((uint64_t)&v232[v242 - 168], (uint64_t *)&v175[v242 - 168]);
              v242 -= 168;
            }
            while (&v175[v242] != v241);
            v233 = *(char **)&v382[16];
            v232 += v242;
          }
          *(_QWORD *)&v382[8] = v232;
          v243 = (char *)v438[1];
          if (v438[1] != v175)
          {
            v244 = 0;
            do
            {
              sub_223323C9C((uint64_t)&v233[v244], (uint64_t *)&v175[v244]);
              v244 += 168;
            }
            while (&v175[v244] != v243);
            v232 = *(char **)&v382[8];
            v175 = (char *)v438[1];
            v233 += v244;
          }
          v245 = (char *)v438[0];
          v438[0] = v232;
          v438[1] = v233;
          v439 = *(_QWORD *)&v382[24];
          while (v175 != v245)
          {
            v247 = (void *)*((_QWORD *)v175 - 6);
            if (v247)
            {
              *((_QWORD *)v175 - 5) = v247;
              operator delete(v247);
            }
            v248 = *((_QWORD *)v175 - 9);
            if (v248)
            {
              v249 = *((_QWORD *)v175 - 8);
              v246 = (void *)*((_QWORD *)v175 - 9);
              if (v249 != v248)
              {
                v250 = *((_QWORD *)v175 - 8);
                do
                {
                  v252 = *(void **)(v250 - 24);
                  v250 -= 24;
                  v251 = v252;
                  if (v252)
                  {
                    *(_QWORD *)(v249 - 16) = v251;
                    operator delete(v251);
                  }
                  v249 = v250;
                }
                while (v250 != v248);
                v246 = (void *)*((_QWORD *)v175 - 9);
              }
              *((_QWORD *)v175 - 8) = v248;
              operator delete(v246);
            }
            v175 -= 168;
          }
          if (v245)
            operator delete(v245);
        }
      }
      if (v344 == v334)
      {
        v253 = (char *)v436[0];
        if (v436[0])
        {
          v254 = (char *)v436[1];
          v255 = v436[0];
          if (v436[1] != v436[0])
          {
            do
            {
              if (*(v254 - 16))
              {
                v256 = *((_QWORD *)v254 - 5);
                if (v256)
                {
                  v257 = *((_QWORD *)v254 - 4);
                  v258 = (void *)*((_QWORD *)v254 - 5);
                  if (v257 != v256)
                  {
                    v259 = *((_QWORD *)v254 - 4);
                    do
                    {
                      v261 = *(void **)(v259 - 24);
                      v259 -= 24;
                      v260 = v261;
                      if (v261)
                      {
                        *(_QWORD *)(v257 - 16) = v260;
                        operator delete(v260);
                      }
                      v257 = v259;
                    }
                    while (v259 != v256);
                    v258 = (void *)*((_QWORD *)v254 - 5);
                  }
                  *((_QWORD *)v254 - 4) = v256;
                  operator delete(v258);
                }
              }
              if (*(v254 - 48))
              {
                v262 = (void *)*((_QWORD *)v254 - 9);
                if (v262)
                {
                  *((_QWORD *)v254 - 8) = v262;
                  operator delete(v262);
                }
              }
              if (*(v254 - 80))
              {
                v263 = (void *)*((_QWORD *)v254 - 13);
                if (v263)
                {
                  *((_QWORD *)v254 - 12) = v263;
                  operator delete(v263);
                }
              }
              v264 = (void *)*((_QWORD *)v254 - 23);
              if (v264)
              {
                *((_QWORD *)v254 - 22) = v264;
                operator delete(v264);
              }
              v254 -= 464;
            }
            while (v254 != v253);
            v255 = v436[0];
          }
          v436[1] = v253;
          operator delete(v255);
        }
        *(float32x4_t *)v436 = v397;
        v437 = v398;
        *(_QWORD *)&v398 = 0;
        v397 = 0uLL;
        j = v335;
      }
      else
      {
        v265 = (_OWORD *)v397.i64[1];
        v266 = (_OWORD *)v397.i64[0];
        for (j = v335; v266 != v265; v266 += 29)
          sub_223340BF8((uint64_t)v433, (uint64_t)v266, v266);
      }
      sub_223341058((void **)&v397);
      if (v430)
      {
        if (v428)
        {
          v429 = v428;
          operator delete(v428);
        }
        if (v426)
        {
          v427 = v426;
          operator delete(v426);
        }
      }
      if (v425)
      {
        if (v422)
        {
          v423 = v422;
          operator delete(v422);
        }
        if (v419)
        {
          v420 = v419;
          operator delete(v419);
        }
      }
      if (v431[3])
      {
        *(void **)&v432 = v431[3];
        operator delete(v431[3]);
      }
      if (v431[0])
      {
        v431[1] = v431[0];
        operator delete(v431[0]);
      }
      if (v111)
        operator delete(v111);
      if (v345)
        operator delete(v345);
      v82 = v344 + 1;
      if (v344 + 1 == j)
      {
        v267 = v436[0];
        v268 = v436[1];
        while (v267 != v268)
        {
          if (sub_223340F28(v433, (uint64_t)v267))
            v267[56] = 0;
          v267 += 116;
        }
        break;
      }
    }
  }
  v269 = *v330;
  *(_QWORD *)v382 = operator new(0x20uLL);
  *(_OWORD *)&v382[8] = xmmword_2245B9420;
  strcpy(*(char **)v382, "ContinousTrackingResults");
  sub_22339F234((uint64_t *)v436, (unsigned __int8 **)v440, v382, v269);
  if ((v382[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v382);
    v270 = (int64x2_t *)v348;
    if ((char *)i == v348)
      goto LABEL_301;
  }
  else
  {
    v270 = (int64x2_t *)v348;
    if ((char *)i == v348)
      goto LABEL_301;
  }
  if (v270[-16].i32[0] && v270[-16].i32[1] && v270[-16].i32[2])
  {
    v271 = *(float64x2_t *)((char *)&v270[-17] + 8);
    v398 = *(__int128 *)((char *)&v270[-16] + 8);
    v397 = (float32x4_t)v271;
    *(_DWORD *)&v404[12] = 0;
    *(_QWORD *)&v404[4] = 0;
    *(_QWORD *)&v404[20] = 0;
    *(_QWORD *)&v404[28] = 0x3F80000000000000;
    *(_DWORD *)v404 = 1065353216;
    *(_DWORD *)&v404[16] = 1065353216;
    v272 = v270[-11].i64[0];
    *(_QWORD *)v404 = v270[-12].i64[1];
    *(_QWORD *)&v404[12] = v272;
    *(_QWORD *)&v404[24] = v270[-11].i64[1];
    *(_QWORD *)&v271.f64[0] = v270[-7].i64[0];
    v273 = v270[-8];
    v274 = v270[-6];
    _D3 = v270[-3].u64[0];
    _Q4 = v270[-4];
    v277 = (float64x2_t)vzip1q_s64(v273, v274);
    *(_QWORD *)&v271.f64[1] = v270[-5].i64[0];
    _Q1 = vzip2q_s64(v273, v274);
    v279 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    v280 = vzip1q_s64(_Q4, _Q1);
    _D7 = *(double *)v270[-1].i64;
    _Q16 = (float64x2_t)v270[-2];
    v283 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v277, vnegq_f64(_Q16).f64[0]), (float64x2_t)_Q1, _Q16, 1), v271, _D7, 0);
    _Q4.i64[0] = v270[-4].i64[1];
    __asm
    {
      FMLS            D1, D4, V16.D[1]
      FMLS            D1, D3, V7.D[0]
    }
    _Q4.i64[0] = vdupq_laneq_s64(v280, 1).u64[0];
    _Q4.i64[1] = v279.i64[0];
    _Q1.i64[1] = 1.0;
    *(float32x4_t *)v382 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v277), (float64x2_t)v280.u64[0]);
    *(float32x4_t *)&v382[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)_Q4), (float64x2_t)v279.u64[1]);
    *(float32x4_t *)&v382[32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v271), (float64x2_t)_D3);
    *(float32x4_t *)&v382[48] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v283), (float64x2_t)_Q1);
    v284 = *v330;
    v431[0] = operator new(0x20uLL);
    *(_OWORD *)&v431[1] = xmmword_2245B9420;
    strcpy((char *)v431[0], "ContinousTrackingResults");
    sub_2233A9820((uint64_t *)&v397, v284, (uint64_t)v404, (uint64_t)v382, (uint64_t)v431);
    if (SHIBYTE(v431[2]) < 0)
      operator delete(v431[0]);
    v270 = (int64x2_t *)v348;
  }
  if (v270[-19].i32[0])
  {
    if (v270[-19].i32[1])
    {
      if (v270[-18].i32[2])
      {
        if (v270[-18].i32[3])
        {
          v285 = &v270[-20].i8[8];
          i8 = v270[-18].i8;
          v287 = *(_OWORD *)v285;
          *(_QWORD *)&v404[16] = *((_QWORD *)v285 + 2);
          *(_OWORD *)v404 = v287;
          v288 = *(_OWORD *)i8;
          v431[2] = *((void **)i8 + 2);
          *(_OWORD *)v431 = v288;
          v289 = *v330;
          *(_QWORD *)v382 = operator new(0x20uLL);
          *(_OWORD *)&v382[8] = xmmword_2245B9420;
          strcpy(*(char **)v382, "ContinousTrackingResults");
          sub_2233AB170((uint64_t)v404, v431, (uint64_t)v382, v289);
          if ((v382[23] & 0x80000000) != 0)
            operator delete(*(void **)v382);
        }
      }
    }
  }
LABEL_301:
  v290 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v328 - 128)), *(float64x2_t *)(v328 - 112));
  v291 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v328 - 96)), *(float64x2_t *)(v328 - 80));
  v292 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v328 - 32)), *(float64x2_t *)(v328 - 16));
  *(float32x4_t *)&v382[32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v328 - 64)), *(float64x2_t *)(v328 - 48));
  *(float32x4_t *)&v382[48] = v292;
  *(float32x4_t *)v382 = v290;
  *(float32x4_t *)&v382[16] = v291;
  v293 = *v330;
  v380 = operator new(0x20uLL);
  v381 = xmmword_2245B9420;
  strcpy((char *)v380, "ContinousTrackingResults");
  sub_2233AFDB8(v382, (const std::string::value_type *)&v380, v293);
  if (SHIBYTE(v381) < 0)
    operator delete(v380);
  v294 = *v330;
  *(_QWORD *)v382 = operator new(0x20uLL);
  *(_OWORD *)&v382[8] = xmmword_2245B9420;
  strcpy(*(char **)v382, "ContinousTrackingResults");
  sub_2233B19E8((uint64_t *)(296 * j + v347 - 264), v382, v294);
  if ((v382[23] & 0x80000000) != 0)
    operator delete(*(void **)v382);
  v362 = *v330;
  v364 = v437;
  v366 = v441[0];
  v363 = *(_OWORD *)v436;
  v436[1] = 0;
  v436[0] = 0;
  v437 = 0;
  v365 = *(_OWORD *)v440;
  v440[0] = 0;
  v440[1] = 0;
  v367 = *(_OWORD *)&v441[1];
  v368 = v441[3];
  memset(v441, 0, 32);
  v369 = *(_OWORD *)v438;
  v370 = v439;
  v438[1] = 0;
  v438[0] = 0;
  v439 = 0;
  v295 = v434[0];
  if (v434[0])
  {
    do
    {
      v296 = (_QWORD *)*v295;
      operator delete(v295);
      v295 = v296;
    }
    while (v296);
  }
  v297 = v433[0];
  v433[0] = 0;
  if (v297)
    operator delete(v297);
  v298 = (char *)v436[0];
  if (v436[0])
  {
    v299 = (char *)v436[1];
    v300 = v436[0];
    if (v436[1] != v436[0])
    {
      do
      {
        v299 -= 464;
        sub_22324A5A0((uint64_t)v299);
      }
      while (v299 != v298);
      v300 = v436[0];
    }
    v436[1] = v298;
    operator delete(v300);
  }
  v301 = (char *)v438[0];
  if (v438[0])
  {
    v302 = (char *)v438[1];
    v303 = v438[0];
    if (v438[1] != v438[0])
    {
      do
      {
        v305 = (void *)*((_QWORD *)v302 - 6);
        if (v305)
        {
          *((_QWORD *)v302 - 5) = v305;
          operator delete(v305);
        }
        v306 = *((_QWORD *)v302 - 9);
        if (v306)
        {
          v307 = *((_QWORD *)v302 - 8);
          v304 = (void *)*((_QWORD *)v302 - 9);
          if (v307 != v306)
          {
            v308 = *((_QWORD *)v302 - 8);
            do
            {
              v310 = *(void **)(v308 - 24);
              v308 -= 24;
              v309 = v310;
              if (v310)
              {
                *(_QWORD *)(v307 - 16) = v309;
                operator delete(v309);
              }
              v307 = v308;
            }
            while (v308 != v306);
            v304 = (void *)*((_QWORD *)v302 - 9);
          }
          *((_QWORD *)v302 - 8) = v306;
          operator delete(v304);
        }
        v302 -= 168;
      }
      while (v302 != v301);
      v303 = v438[0];
    }
    v438[1] = v301;
    operator delete(v303);
  }
  if (v441[1])
  {
    v441[2] = v441[1];
    operator delete(v441[1]);
  }
  if (v440[0])
  {
    v440[1] = v440[0];
    operator delete(v440[0]);
  }
  if (!i)
    goto LABEL_343;
  if ((char *)i != v348)
  {
    v311 = (unint64_t)&v348[-i - 312];
    if (v311 >= 0x138)
    {
      v313 = v311 / 0x138 + 1;
      v312 = &v348[-312 * (v313 & 0x1FFFFFFFFFFFFFELL)];
      v314 = v348 - 544;
      v315 = v313 & 0x1FFFFFFFFFFFFFELL;
      do
      {
        *((_QWORD *)v314 + 39) = &off_24EC64998;
        *(_QWORD *)v314 = &off_24EC64998;
        v314 -= 624;
        v315 -= 2;
      }
      while (v315);
      if (v313 == (v313 & 0x1FFFFFFFFFFFFFELL))
        goto LABEL_342;
    }
    else
    {
      v312 = v348;
    }
    do
    {
      *((_QWORD *)v312 - 29) = &off_24EC64998;
      v312 -= 312;
    }
    while (v312 != (char *)i);
  }
LABEL_342:
  operator delete((void *)i);
LABEL_343:
  *(double *)v329 = v362;
  *(_OWORD *)(v329 + 8) = v363;
  *(_QWORD *)(v329 + 24) = v364;
  v364 = 0;
  v363 = 0uLL;
  *(_OWORD *)(v329 + 32) = v365;
  *(_QWORD *)(v329 + 48) = v366;
  v366 = 0;
  v365 = 0uLL;
  *(_OWORD *)(v329 + 56) = v367;
  *(_QWORD *)(v329 + 72) = v368;
  v367 = 0uLL;
  v368 = 0;
  *(_OWORD *)(v329 + 80) = v369;
  *(_QWORD *)(v329 + 96) = v370;
  v369 = 0uLL;
  v370 = 0;
  *(_BYTE *)(v329 + 104) = 1;
  sub_223322918(&v362);
  v316 = (char *)v371;
  if (!v371)
    goto LABEL_364;
  v317 = v372;
  if (v372 == v371)
    goto LABEL_363;
  do
  {
    v318 = v317 - 344;
    *((_QWORD *)v317 - 36) = &off_24EC715B8;
    v319 = (std::__shared_weak_count *)*((_QWORD *)v317 - 34);
    if (!v319)
      goto LABEL_351;
    p_shared_owners = (unint64_t *)&v319->__shared_owners_;
    do
      v321 = __ldaxr(p_shared_owners);
    while (__stlxr(v321 - 1, p_shared_owners));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
      *((_QWORD *)v317 - 39) = &off_24EC715B8;
      v322 = (std::__shared_weak_count *)*((_QWORD *)v317 - 37);
      if (!v322)
        goto LABEL_357;
    }
    else
    {
LABEL_351:
      *((_QWORD *)v317 - 39) = &off_24EC715B8;
      v322 = (std::__shared_weak_count *)*((_QWORD *)v317 - 37);
      if (!v322)
        goto LABEL_357;
    }
    v323 = (unint64_t *)&v322->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
LABEL_357:
    *((_QWORD *)v317 - 42) = &off_24EC715B8;
    v325 = (std::__shared_weak_count *)*((_QWORD *)v317 - 40);
    if (v325)
    {
      v326 = (unint64_t *)&v325->__shared_owners_;
      do
        v327 = __ldaxr(v326);
      while (__stlxr(v327 - 1, v326));
      if (!v327)
      {
        ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
        std::__shared_weak_count::__release_weak(v325);
      }
    }
    v317 -= 344;
  }
  while (v318 != v316);
  v316 = (char *)v371;
LABEL_363:
  operator delete(v316);
LABEL_364:
  sub_223340424((uint64_t)&v374);
}

void sub_22333A594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,char *a52,uint64_t a53,uint64_t a54)
{
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;

  if (SLOBYTE(STACK[0x2AF]) < 0)
    operator delete((void *)STACK[0x298]);
  v80 = a52;
  v56 = (_QWORD *)STACK[0x600];
  if (STACK[0x600])
  {
    do
    {
      v55 = (_QWORD *)*v56;
      operator delete(v56);
      v56 = v55;
    }
    while (v55);
  }
  v57 = (void *)STACK[0x5F0];
  STACK[0x5F0] = 0;
  if (v57)
  {
    operator delete(v57);
    v58 = STACK[0x620];
    if (!STACK[0x620])
    {
LABEL_6:
      v59 = STACK[0x640];
      if (!STACK[0x640])
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else
  {
    v58 = STACK[0x620];
    if (!STACK[0x620])
      goto LABEL_6;
  }
  v63 = STACK[0x628];
  v64 = (void *)v58;
  if (STACK[0x628] != v58)
  {
    do
    {
      v63 -= 464;
      sub_22324A5A0(v63);
    }
    while (v63 != v58);
    v64 = (void *)STACK[0x620];
  }
  STACK[0x628] = v58;
  operator delete(v64);
  v59 = STACK[0x640];
  if (!STACK[0x640])
  {
LABEL_7:
    v60 = (void *)STACK[0x678];
    if (!STACK[0x678])
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_16:
  v65 = STACK[0x648];
  v66 = (void *)v59;
  if (STACK[0x648] != v59)
  {
    do
    {
      v68 = *(void **)(v65 - 48);
      if (v68)
      {
        *(_QWORD *)(v65 - 40) = v68;
        operator delete(v68);
      }
      v69 = *(_QWORD *)(v65 - 72);
      if (v69)
      {
        v70 = *(_QWORD *)(v65 - 64);
        v67 = *(void **)(v65 - 72);
        if (v70 != v69)
        {
          v71 = *(_QWORD *)(v65 - 64);
          do
          {
            v73 = *(void **)(v71 - 24);
            v71 -= 24;
            v72 = v73;
            if (v73)
            {
              *(_QWORD *)(v70 - 16) = v72;
              operator delete(v72);
            }
            v70 = v71;
          }
          while (v71 != v69);
          v67 = *(void **)(v65 - 72);
        }
        *(_QWORD *)(v65 - 64) = v69;
        operator delete(v67);
      }
      v65 -= 168;
    }
    while (v65 != v59);
    v66 = (void *)STACK[0x640];
  }
  STACK[0x648] = v59;
  operator delete(v66);
  v60 = (void *)STACK[0x678];
  if (!STACK[0x678])
  {
LABEL_8:
    v61 = (void *)STACK[0x660];
    if (!STACK[0x660])
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  STACK[0x680] = (unint64_t)v60;
  operator delete(v60);
  v61 = (void *)STACK[0x660];
  if (!STACK[0x660])
  {
LABEL_9:
    v62 = a54;
    if (!a52)
    {
LABEL_41:
      sub_223312150((void **)&STACK[0x208]);
      sub_223340424((uint64_t)&STACK[0x220]);
      _Unwind_Resume(a1);
    }
LABEL_33:
    v74 = v62 - (_QWORD)a52;
    if (v74)
    {
      v75 = v74 - 312;
      if (v75 >= 0x138)
      {
        v77 = v75 / 0x138 + 1;
        v76 = (char *)(a54 - 312 * (v77 & 0x1FFFFFFFFFFFFFELL));
        v78 = (_QWORD *)(a54 - 544);
        v79 = v77 & 0x1FFFFFFFFFFFFFELL;
        do
        {
          v78[39] = &off_24EC64998;
          *v78 = &off_24EC64998;
          v78 -= 78;
          v79 -= 2;
        }
        while (v79);
        v80 = a52;
        if (v77 == (v77 & 0x1FFFFFFFFFFFFFELL))
          goto LABEL_40;
      }
      else
      {
        v76 = (char *)a54;
      }
      do
      {
        *((_QWORD *)v76 - 29) = &off_24EC64998;
        v76 -= 312;
      }
      while (v76 != v80);
    }
LABEL_40:
    operator delete(v80);
    goto LABEL_41;
  }
LABEL_32:
  STACK[0x668] = (unint64_t)v61;
  operator delete(v61);
  v62 = a54;
  if (!a52)
    goto LABEL_41;
  goto LABEL_33;
}

void sub_22333AC00(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  __n128 v60;
  uint64_t *v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  float64x2_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t **v78;
  float32x4_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  float *v89;
  int v90;
  uint64_t v91;
  _BOOL4 v92;
  float v94;
  __int128 *v95;
  double v96;
  __int128 v97;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t *v105;
  int v106;
  int v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  __int128 v128;
  _QWORD *v129;
  double v130;
  int64x2_t *v131;
  float64x2_t v132;
  float32x4_t v133;
  int64x2_t v134;
  float64x2_t v137;
  int8x16_t v139;
  int64x2_t v140;
  float64x2_t v143;
  double v144;
  double v145;
  float64x2_t v146;
  float32x4_t v147;
  int64x2_t v148;
  float64x2_t v151;
  int8x16_t v153;
  int64x2_t v154;
  float64x2_t v157;
  double v158;
  double v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  double v163;
  double v164;
  double v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  __int128 v173;
  std::__shared_weak_count *v174;
  uint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  uint64_t v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  uint64_t v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  _OWORD v218[2];
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  void *v223;
  __int128 v224;
  _BYTE v225[32];
  unsigned __int32 v226;
  __int128 v227;
  uint64_t v228;
  _BYTE v229[32];
  void *v230[2];
  void *v231[4];
  void *__p[2];
  __int128 v233;
  __int128 v234;
  uint64_t (**v235)();
  uint64_t (**v236)();
  __int128 v237;
  __int128 v238;
  __int128 v239;
  double v240;
  int v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  char v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 __src;
  uint64_t v261;
  char v262[8];
  uint64_t (**v263)();
  std::__shared_weak_count *v264;
  uint64_t (**v265)();
  std::__shared_weak_count *v266;
  uint64_t (**v267)();
  std::__shared_weak_count *v268;
  char v269;
  _BYTE v270[40];
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  _BYTE v278[24];
  void *v279;
  __int128 v280;
  _BYTE v281[32];
  _BYTE v282[32];
  __int128 v283;
  _BYTE v284[32];
  __int128 v285;
  __int128 v286;
  __int128 v287;
  double v288;
  int v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  unsigned __int8 *v300;
  __int128 v301;
  std::__shared_weak_count *v302;
  uint64_t (**v303)();
  uint64_t *v304;
  std::__shared_weak_count *v305;
  uint64_t (**v306)();
  uint64_t *v307;
  std::__shared_weak_count *v308;
  uint64_t (**v309)();
  uint64_t *v310;
  std::__shared_weak_count *v311;
  uint64_t (**v312)();
  uint64_t *v313;
  std::__shared_weak_count *v314;
  double v315;
  uint64_t (**v316)();
  uint64_t v317;
  std::__shared_weak_count *v318;
  uint64_t (**v319)();
  uint64_t v320;
  std::__shared_weak_count *v321;
  uint64_t (**v322)();
  uint64_t v323;
  std::__shared_weak_count *v324;
  uint64_t v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  char v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;

  v5 = *a1;
  v6 = *(unsigned __int8 *)(*a1 + 56);
  if (v6 == 2)
  {
    v7 = *(uint64_t **)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    *((_QWORD *)&v280 + 1) = v7;
    *(_QWORD *)v281 = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v7 = (uint64_t *)*((_QWORD *)&v280 + 1);
    }
    *(_QWORD *)&v280 = &off_24EC71528;
    if (v7)
    {
      v12 = *v7;
      v11 = (std::__shared_weak_count *)v7[1];
      if (!v11)
        goto LABEL_12;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (v15)
      {
LABEL_12:
        if (!v12)
          goto LABEL_14;
        goto LABEL_13;
      }
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12)
LABEL_13:
        sub_2242AE7CC(*((uint64_t *)&v280 + 1));
    }
LABEL_14:
    sub_2242A773C((uint64_t)&v280, (uint64_t *)v229);
    v301 = *(_OWORD *)&v229[8];
    v300 = *(unsigned __int8 **)v229;
    sub_223316730(&v300, (uint64_t)v229);
    if (*(_DWORD *)&v229[4])
      _ZF = *(_DWORD *)v229 == 0;
    else
      _ZF = 1;
    v17 = *(_QWORD *)&v229[8];
    if (_ZF)
      v18 = 0;
    else
      v18 = *(_QWORD *)v229;
    v19 = v230[1];
    if (HIDWORD(v18) * *(_DWORD *)&v229[12] == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    *(_QWORD *)v278 = v19;
    *(_QWORD *)&v278[8] = v18;
    *(_QWORD *)&v278[16] = v17;
    sub_22330C3D4((size_t)v278, (uint64_t)v270);
    v315 = *(double *)a2;
    v316 = &off_24EC715B8;
    v317 = *(_QWORD *)&v270[8];
    v318 = *(std::__shared_weak_count **)&v270[16];
    if (*(_QWORD *)&v270[16])
    {
      v20 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *(_QWORD *)(a2 + 40);
    v22 = *(std::__shared_weak_count **)(a2 + 48);
    v319 = &off_24EC715B8;
    v320 = v23;
    v321 = v22;
    if (v22)
    {
      v24 = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v27 = *(_QWORD *)(a2 + 64);
    v26 = *(std::__shared_weak_count **)(a2 + 72);
    v322 = &off_24EC715B8;
    v323 = v27;
    v324 = v26;
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *(_QWORD *)(a2 + 128);
    v327 = *(_OWORD *)(a2 + 152);
    v328 = *(_OWORD *)(a2 + 168);
    v329 = *(_OWORD *)(a2 + 184);
    v31 = *(_QWORD *)(a2 + 200);
    v325 = v30;
    v330 = v31;
    v326 = *(_OWORD *)(a2 + 136);
    LOBYTE(v331) = 0;
    v334 = 0;
    if (*(_BYTE *)(a2 + 256))
    {
      v32 = *(_OWORD *)(a2 + 224);
      v331 = *(_OWORD *)(a2 + 208);
      v332 = v32;
      v333 = *(_OWORD *)(a2 + 240);
      v334 = 1;
    }
    v33 = *(_OWORD *)(a2 + 328);
    v34 = *(_OWORD *)(a2 + 360);
    v35 = *(_OWORD *)(a2 + 376);
    v340 = *(_OWORD *)(a2 + 344);
    v341 = v34;
    v342 = v35;
    v36 = *(_OWORD *)(a2 + 296);
    v338 = *(_OWORD *)(a2 + 312);
    v339 = v33;
    v37 = *(_OWORD *)(a2 + 280);
    v335 = *(_OWORD *)(a2 + 264);
    v336 = v37;
    v337 = v36;
    *(_QWORD *)v270 = &off_24EC715B8;
    v38 = *(std::__shared_weak_count **)&v270[16];
    if (*(_QWORD *)&v270[16])
    {
      v39 = (unint64_t *)(*(_QWORD *)&v270[16] + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v230[1])
      free(v230[1]);
    if (*((_QWORD *)&v280 + 1))
    {
      v42 = **((_QWORD **)&v280 + 1);
      v41 = *(std::__shared_weak_count **)(*((_QWORD *)&v280 + 1) + 8);
      if (v41)
      {
        v43 = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 - 1, v43));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
          if (!v42)
            goto LABEL_48;
          goto LABEL_47;
        }
      }
      if (v42)
LABEL_47:
        sub_2242AE9A8(*((uint64_t *)&v280 + 1));
    }
LABEL_48:
    *(_QWORD *)&v280 = &off_24EC715B8;
    v46 = *(std::__shared_weak_count **)v281;
    if (*(_QWORD *)v281)
    {
      v47 = (unint64_t *)(*(_QWORD *)v281 + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    sub_2233153E0((uint64_t *)(v5 + 256), (uint64_t *)&v315);
    v322 = &off_24EC715B8;
    v49 = v324;
    if (!v324)
      goto LABEL_57;
    v50 = (unint64_t *)&v324->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      v319 = &off_24EC715B8;
      v52 = v321;
      if (!v321)
        goto LABEL_61;
    }
    else
    {
LABEL_57:
      v319 = &off_24EC715B8;
      v52 = v321;
      if (!v321)
        goto LABEL_61;
    }
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
      v316 = &off_24EC715B8;
      v55 = v318;
      if (v318)
      {
LABEL_62:
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
LABEL_118:
      v58 = 1;
      goto LABEL_119;
    }
LABEL_61:
    v316 = &off_24EC715B8;
    v55 = v318;
    if (v318)
      goto LABEL_62;
    goto LABEL_118;
  }
  if (v6 != 1)
    goto LABEL_118;
  if (*(double *)a2 - *(double *)(v5 + 152) < *(double *)(v5 + 136) - *(double *)(v5 + 144))
  {
    v58 = 0;
LABEL_119:
    *(_DWORD *)a3 = v58;
    *(_BYTE *)(a3 + 104) = 0;
    return;
  }
  *(_QWORD *)(v5 + 152) = *(_QWORD *)a2;
  sub_223316C48((_QWORD *)a2, &v300);
  v60 = sub_2233174E0(&v300, (uint64_t)&v280);
  v61 = *(uint64_t **)(a2 + 64);
  if (!v61)
    goto LABEL_77;
  v63 = *v61;
  v62 = (std::__shared_weak_count *)v61[1];
  if (v62)
  {
    v64 = (unint64_t *)&v62->__shared_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    do
      v66 = __ldaxr(v64);
    while (__stlxr(v66 - 1, v64));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v62->__on_zero_shared)(v62, v60);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  if (!v63)
  {
LABEL_77:
    v67 = *(_QWORD *)(*a1 + 360);
    if (!v67
      || (DWORD2(v283) == *(_DWORD *)(**(_QWORD **)v67 + 8)
        ? (v68 = HIDWORD(v283) == *(_DWORD *)(**(_QWORD **)v67 + 12))
        : (v68 = 0),
          !v68))
    {
      v69 = *((_QWORD *)&v283 + 1);
      v70 = (_QWORD *)operator new();
      v71 = (_QWORD *)operator new();
      v72 = operator new();
      sub_223FBA750(v72, v69, SHIDWORD(v69));
      *v71 = v72;
      *v70 = v71;
      v70[1] = sub_223FBAAE4;
      v73 = *(uint64_t **)(*a1 + 360);
      *(_QWORD *)(*a1 + 360) = v70;
      if (v73)
      {
        v74 = *v73;
        *v73 = 0;
        if (v74)
          ((void (*)(void))v73[1])();
        MEMORY[0x227684CE8](v73, 0xA0C40AFF93C70);
      }
    }
    kdebug_trace();
    sub_22333C3D8(v229);
    if (**(int **)(*(_QWORD *)v229 + 56) <= 1)
    {
      v76 = atomic_load((unsigned __int8 *)&qword_2540CAB80);
      if ((v76 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAB80))
      {
        qword_2540CAB78 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ComputeNormals");
        __cxa_guard_release(&qword_2540CAB80);
      }
      v77 = qword_2540CAB78;
      *(_BYTE *)(qword_2540CAB78 + 16) = 0;
      *(_QWORD *)(v77 + 8) = 0;
      *(std::chrono::steady_clock::time_point *)v77 = std::chrono::steady_clock::now();
      *(_BYTE *)(v77 + 16) = 1;
    }
    v78 = *(uint64_t ***)(*a1 + 360);
    v75.f64[0] = *(float64_t *)(a2 + 200);
    v79 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 136)), *(float64x2_t *)(a2 + 152));
    *(float32x4_t *)&v270[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 168)), *(float64x2_t *)(a2 + 184));
    *(float32x4_t *)v270 = v79;
    *(_DWORD *)&v270[32] = vcvt_f32_f64(v75).u32[0];
    v80 = **v78;
    *(_QWORD *)&v278[16] = *(_QWORD *)v284;
    *(_OWORD *)v278 = v283;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v80 + 16))(v229, v80, v278, v270, 7);
    *(_QWORD *)v278 = *(_QWORD *)&v229[8];
    *(_QWORD *)&v278[12] = *(_QWORD *)&v229[20];
    *(_DWORD *)&v278[8] = *(_DWORD *)&v229[16];
    *(_DWORD *)&v278[20] = *(_DWORD *)&v229[28];
    *(_OWORD *)&v282[8] = *(_OWORD *)v278;
    *(_QWORD *)&v282[24] = *(_QWORD *)&v278[16];
    *(_QWORD *)v282 = *(_QWORD *)v229;
    kdebug_trace();
    sub_22333C3D8(v229);
    if (**(int **)(*(_QWORD *)v229 + 56) <= 1)
    {
      v81 = atomic_load((unsigned __int8 *)&qword_2540CAB90);
      if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_2540CAB90))
      {
        qword_2540CAB88 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ComputeNormals");
        __cxa_guard_release(&qword_2540CAB90);
      }
      v82 = qword_2540CAB88;
      if (*(_BYTE *)(qword_2540CAB88 + 16))
      {
        *(_QWORD *)(v82 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v82;
        *(_BYTE *)(v82 + 16) = 0;
      }
    }
  }
  v276 = v280;
  v277 = *(_QWORD *)v281;
  sub_223316730((unsigned __int8 **)&v276, (uint64_t)v278);
  if (*(_DWORD *)&v278[4])
    v83 = *(_DWORD *)v278 == 0;
  else
    v83 = 1;
  if (v83)
    v84 = 0;
  else
    v84 = *(_QWORD *)v278;
  v85 = v279;
  v86 = *(_QWORD *)&v278[8];
  if (HIDWORD(v84) * *(_DWORD *)&v278[12] == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    goto LABEL_272;
  }
  *(_QWORD *)&v280 = v85;
  *((_QWORD *)&v280 + 1) = v84;
  *(_QWORD *)v281 = v86;
  sub_223314930((uint64_t *)(*a1 + 160), (uint64_t)v229);
  if (BYTE8(v244))
  {
    if (!(*(_DWORD *)&v284[28] * *(_DWORD *)&v284[20]))
      goto LABEL_125;
    v87 = 0;
    v88 = 0;
    v89 = *(float **)&v284[8];
    do
    {
      if (*v89 > 0.5)
        ++v88;
      v90 = v87 + 1;
      if (v87 + 1 == *(_DWORD *)&v284[16])
        v87 = 0;
      else
        ++v87;
      if (v90 == *(_DWORD *)&v284[16])
        v91 = HIDWORD(*(_QWORD *)&v284[24]) + *(unsigned int *)&v284[24] - *(_DWORD *)&v284[24] * *(_DWORD *)&v284[16];
      else
        v91 = *(unsigned int *)&v284[24];
      v89 += v91;
    }
    while (v89 != (float *)(*(_QWORD *)&v284[8] + 4 * (*(_DWORD *)&v284[28] * *(_DWORD *)&v284[20])));
    if (v88 > (HIDWORD(v283) * DWORD2(v283)) >> 2)
    {
      v92 = 0;
    }
    else
    {
LABEL_125:
      if (*(_QWORD *)&v229[8] == *(_QWORD *)&v229[16])
      {
        v94 = 0.0;
      }
      else
      {
        _D2 = v238;
        v94 = 0.0;
        v95 = *(__int128 **)&v229[8];
        do
        {
          v96 = *((double *)v95 + 2);
          v97 = *v95;
          v95 = (__int128 *)((char *)v95 + 24);
          _V6.D[1] = *((_QWORD *)&v97 + 1);
          __asm { FMLA            D7, D2, V6.D[1] }
          v94 = *((double *)&v243 + 1) + _D7 + v240 * v96 + v94;
        }
        while (v95 != *(__int128 **)&v229[16]);
      }
      v92 = (float)(v94 / (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v229[16] - *(_QWORD *)&v229[8]) >> 3))) < 0.3;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v231[1])
    {
      v231[2] = v231[1];
      operator delete(v231[1]);
    }
    if (v230[0])
    {
      v230[1] = v230[0];
      operator delete(v230[0]);
    }
    if (*(_QWORD *)&v229[8])
    {
      *(_QWORD *)&v229[16] = *(_QWORD *)&v229[8];
      operator delete(*(void **)&v229[8]);
      if (v92)
      {
LABEL_139:
        sub_223312308((char **)(*a1 + 160), (int64x2_t *)v270);
        v103 = (_QWORD *)*a1;
        if (*(_QWORD *)(*a1 + 16)
          || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/AppleCV3D/ConcurrentSurfaceDetection/src/SurfaceDetection.cpp", 283, (uint64_t)"!cameras.empty()", 16, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
        {
          v104 = (uint64_t *)v103[1];
          if (v104)
          {
            v105 = (uint64_t *)v103[1];
            do
            {
              v106 = *((_DWORD *)v105 + 8);
              if (v106 <= 0)
              {
                if ((v106 & 0x80000000) == 0)
                {
                  v107 = 0;
                  goto LABEL_149;
                }
                ++v105;
              }
              v105 = (uint64_t *)*v105;
            }
            while (v105);
          }
          v107 = *(_DWORD *)(*v103 + 32);
LABEL_149:
          if (!v104)
LABEL_155:
            sub_223198218("map::at:  key not found");
          while (1)
          {
            while (1)
            {
              v108 = *((_DWORD *)v104 + 8);
              if (v107 >= v108)
                break;
              v104 = (uint64_t *)*v104;
              if (!v104)
                goto LABEL_155;
            }
            if (v108 >= v107)
              break;
            v104 = (uint64_t *)v104[1];
            if (!v104)
              goto LABEL_155;
          }
          v109 = v104 + 5;
          v110 = *a1;
          v111 = *(_QWORD *)(*a1 + 352);
          v262[0] = 0;
          v269 = 0;
          sub_2233372AC((uint64_t)v229, v111, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&v270[8] - *(_QWORD *)v270) >> 4), *(double **)v270, (uint64_t)v262, v109, (double *)(v110 + 24));
          if (v269)
          {
            v267 = &off_24EC715B8;
            v112 = v268;
            if (v268)
            {
              v113 = (unint64_t *)&v268->__shared_owners_;
              do
                v114 = __ldaxr(v113);
              while (__stlxr(v114 - 1, v113));
              if (!v114)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v112);
              }
            }
            v265 = &off_24EC715B8;
            v115 = v266;
            if (v266)
            {
              v116 = (unint64_t *)&v266->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v263 = &off_24EC715B8;
            v118 = v264;
            if (v264)
            {
              v119 = (unint64_t *)&v264->__shared_owners_;
              do
                v120 = __ldaxr(v119);
              while (__stlxr(v120 - 1, v119));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                std::__shared_weak_count::__release_weak(v118);
              }
            }
          }
          v121 = *(_QWORD *)&v229[24];
          *(_QWORD *)a3 = *(_QWORD *)v229;
          *(_QWORD *)(a3 + 24) = v121;
          v122 = v231[3];
          *(void **)(a3 + 48) = v231[0];
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v229[8];
          *(_QWORD *)&v229[8] = 0;
          *(_QWORD *)&v229[16] = 0;
          *(_OWORD *)(a3 + 32) = *(_OWORD *)v230;
          *(_QWORD *)&v229[24] = 0;
          v230[0] = 0;
          v230[1] = 0;
          v231[0] = 0;
          *(_OWORD *)(a3 + 56) = *(_OWORD *)&v231[1];
          *(_QWORD *)(a3 + 72) = v122;
          v231[1] = 0;
          v231[2] = 0;
          *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
          *(_QWORD *)(a3 + 96) = v233;
          v231[3] = 0;
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v233 = 0;
          *(_BYTE *)(a3 + 104) = 1;
          sub_223322918(v229);
          sub_223340424((uint64_t)v270);
          goto LABEL_195;
        }
LABEL_272:
        abort();
      }
    }
    else if (v92)
    {
      goto LABEL_139;
    }
  }
  v123 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v123 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  qword_25578BAF0 = *(_QWORD *)a2;
  v124 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v124 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  HIBYTE(v261) = 10;
  strcpy((char *)&__src, "cv3d.plane");
  if (byte_25578BAF8[23] < 0)
  {
    sub_22319C4B8((void **)byte_25578BAF8, &__src, 0xAuLL);
    if (SHIBYTE(v261) < 0)
      operator delete((void *)__src);
  }
  else
  {
    *(_OWORD *)byte_25578BAF8 = __src;
    *(_QWORD *)&byte_25578BAF8[16] = v261;
  }
  v125 = *a1;
  v126 = *(_QWORD *)(*a1 + 24);
  v127 = *(_BYTE *)(*a1 + 84);
  v128 = *(_OWORD *)(*a1 + 104);
  v257 = *(_OWORD *)(*a1 + 88);
  v258 = v128;
  v259 = *(_OWORD *)(v125 + 120);
  v129 = *(_QWORD **)(v125 + 352);
  *(_OWORD *)&v231[2] = *(_OWORD *)&v282[16];
  *(_OWORD *)__p = v283;
  v233 = *(_OWORD *)v284;
  v234 = *(_OWORD *)&v284[16];
  *(_OWORD *)v229 = v280;
  *(_OWORD *)&v229[16] = *(_OWORD *)v281;
  *(_OWORD *)v230 = *(_OWORD *)&v281[16];
  *(_OWORD *)v231 = *(_OWORD *)v282;
  v235 = &off_24EC64998;
  v236 = &off_24EC64920;
  v237 = v285;
  v238 = v286;
  v239 = v287;
  v240 = v288;
  v241 = v289;
  v242 = v290;
  v243 = v291;
  v248 = v296;
  v249 = v297;
  v250 = v298;
  v251 = v299;
  v246 = v294;
  v247 = v295;
  v244 = v292;
  v245 = v293;
  v252 = v126;
  v253 = v127;
  v255 = v128;
  v256 = v259;
  v254 = v257;
  sub_223F6B8B8(v129, (size_t)v229, (uint64_t *)v270);
  v130 = *(double *)a2;
  *(_QWORD *)v229 = operator new(0x20uLL);
  *(_OWORD *)&v229[8] = xmmword_2245B9420;
  strcpy(*(char **)v229, "ContinousTrackingResults");
  sub_22339F234((uint64_t *)v270, (unsigned __int8 **)&v270[24], v229, v130);
  v131 = (int64x2_t *)(a2 + 264);
  if ((v229[23] & 0x80000000) != 0)
    operator delete(*(void **)v229);
  v227 = v283;
  v132.f64[1] = *((float64_t *)&v283 + 1);
  v228 = *(_QWORD *)v284;
  v132.f64[0] = *(float64_t *)(a2 + 200);
  v133 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 136)), *(float64x2_t *)(a2 + 152));
  *(float32x4_t *)&v225[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 168)), *(float64x2_t *)(a2 + 184));
  *(float32x4_t *)v225 = v133;
  v226 = vcvt_f32_f64(v132).u32[0];
  v132.f64[0] = *(float64_t *)(a2 + 280);
  v134 = *(int64x2_t *)(a2 + 296);
  _D3 = *(_QWORD *)(a2 + 344);
  _Q4 = *(int64x2_t *)(a2 + 328);
  v137 = (float64x2_t)vzip1q_s64(*v131, v134);
  v132.f64[1] = *(float64_t *)(a2 + 312);
  _Q1 = vzip2q_s64(*v131, v134);
  v139 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
  v140 = vzip1q_s64(_Q4, _Q1);
  _D7 = *(double *)(a2 + 376);
  _Q16 = *(float64x2_t *)(a2 + 360);
  v143 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v137, vnegq_f64(_Q16).f64[0]), (float64x2_t)_Q1, _Q16, 1), v132, _D7, 0);
  _Q4.i64[0] = *(_QWORD *)(a2 + 336);
  __asm
  {
    FMLS            D1, D4, V16.D[1]
    FMLS            D1, D3, V7.D[0]
  }
  _Q4.i64[0] = vdupq_laneq_s64(v140, 1).u64[0];
  _Q4.i64[1] = v139.i64[0];
  _Q1.i64[1] = 1.0;
  *(float32x4_t *)v229 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v137), (float64x2_t)v140.u64[0]);
  *(float32x4_t *)&v229[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)_Q4), (float64x2_t)v139.u64[1]);
  *(float32x4_t *)v230 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v132), (float64x2_t)_D3);
  *(float32x4_t *)v231 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v143), (float64x2_t)_Q1);
  v144 = *(double *)a2;
  v223 = operator new(0x20uLL);
  v224 = xmmword_2245B9420;
  strcpy((char *)v223, "ContinousTrackingResults");
  sub_2233A5B58((uint64_t)&v227, (float *)v225, (float32x2_t *)v229, (uint64_t)&v223, v144);
  if (SHIBYTE(v224) < 0)
    operator delete(v223);
  v221 = v283;
  v222 = *(_QWORD *)v284;
  v219 = *(_OWORD *)&v284[8];
  v220 = *(_QWORD *)&v284[24];
  v145 = *(double *)a2;
  *(_QWORD *)v229 = operator new(0x20uLL);
  *(_OWORD *)&v229[8] = xmmword_2245B9420;
  strcpy(*(char **)v229, "ContinousTrackingResults");
  sub_2233A75EC(&v221, &v219, (uint64_t)v229, v145);
  if ((v229[23] & 0x80000000) != 0)
    operator delete(*(void **)v229);
  v146.f64[1] = *(float64_t *)&v282[8];
  v218[0] = *(_OWORD *)v282;
  v218[1] = *(_OWORD *)&v282[16];
  v146.f64[0] = *(float64_t *)(a2 + 200);
  v147 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 136)), *(float64x2_t *)(a2 + 152));
  *(float32x4_t *)&v225[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 168)), *(float64x2_t *)(a2 + 184));
  *(float32x4_t *)v225 = v147;
  v226 = vcvt_f32_f64(v146).u32[0];
  v146.f64[0] = *(float64_t *)(a2 + 280);
  v148 = *(int64x2_t *)(a2 + 296);
  _D3 = *(_QWORD *)(a2 + 344);
  _Q4 = *(int64x2_t *)(a2 + 328);
  v151 = (float64x2_t)vzip1q_s64(*v131, v148);
  v146.f64[1] = *(float64_t *)(a2 + 312);
  _Q1 = vzip2q_s64(*v131, v148);
  v153 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
  v154 = vzip1q_s64(_Q4, _Q1);
  _D7 = *(double *)(a2 + 376);
  _Q16 = *(float64x2_t *)(a2 + 360);
  v157 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v151, vnegq_f64(_Q16).f64[0]), (float64x2_t)_Q1, _Q16, 1), v146, _D7, 0);
  _Q4.i64[0] = *(_QWORD *)(a2 + 336);
  __asm
  {
    FMLS            D1, D4, V16.D[1]
    FMLS            D1, D3, V7.D[0]
  }
  _Q4.i64[0] = vdupq_laneq_s64(v154, 1).u64[0];
  _Q4.i64[1] = v153.i64[0];
  _Q1.i64[1] = 1.0;
  *(float32x4_t *)v229 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v151), (float64x2_t)v154.u64[0]);
  *(float32x4_t *)&v229[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)_Q4), (float64x2_t)v153.u64[1]);
  *(float32x4_t *)v230 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v146), (float64x2_t)_D3);
  *(float32x4_t *)v231 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v157), (float64x2_t)_Q1);
  v158 = *(double *)a2;
  v223 = operator new(0x20uLL);
  v224 = xmmword_2245B9420;
  strcpy((char *)v223, "ContinousTrackingResults");
  sub_2233A9820((uint64_t *)v218, v158, (uint64_t)v225, (uint64_t)v229, (uint64_t)&v223);
  if (SHIBYTE(v224) < 0)
    operator delete(v223);
  v216 = v280;
  v217 = *(_QWORD *)v281;
  v214 = *(_OWORD *)&v281[8];
  v215 = *(_QWORD *)&v281[24];
  v159 = *(double *)a2;
  *(_QWORD *)v229 = operator new(0x20uLL);
  *(_OWORD *)&v229[8] = xmmword_2245B9420;
  strcpy(*(char **)v229, "ContinousTrackingResults");
  sub_2233AB170((uint64_t)&v216, &v214, (uint64_t)v229, v159);
  if ((v229[23] & 0x80000000) != 0)
    operator delete(*(void **)v229);
  v160 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v131), *(float64x2_t *)(a2 + 280));
  v161 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 296)), *(float64x2_t *)(a2 + 312));
  v162 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 360)), *(float64x2_t *)(a2 + 376));
  *(float32x4_t *)v230 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 328)), *(float64x2_t *)(a2 + 344));
  *(float32x4_t *)v231 = v162;
  *(float32x4_t *)v229 = v160;
  *(float32x4_t *)&v229[16] = v161;
  v163 = *(double *)a2;
  *(_QWORD *)v225 = operator new(0x20uLL);
  *(_OWORD *)&v225[8] = xmmword_2245B9420;
  strcpy(*(char **)v225, "ContinousTrackingResults");
  sub_2233AFDB8(v229, v225, v163);
  if ((v225[23] & 0x80000000) != 0)
    operator delete(*(void **)v225);
  v164 = *(double *)a2;
  *(_QWORD *)v229 = operator new(0x20uLL);
  *(_OWORD *)&v229[8] = xmmword_2245B9420;
  strcpy(*(char **)v229, "ContinousTrackingResults");
  sub_2233B19E8((uint64_t *)(a2 + 128), v229, v164);
  if ((v229[23] & 0x80000000) != 0)
    operator delete(*(void **)v229);
  v165 = *(double *)a2;
  v166 = *(_OWORD *)v270;
  memset(v270, 0, sizeof(v270));
  v167 = *(_QWORD *)&v270[16];
  v168 = v271;
  v169 = *(_OWORD *)&v270[24];
  v271 = 0;
  v170 = v272;
  v272 = 0uLL;
  v171 = v273;
  v172 = v275;
  v273 = 0;
  v173 = v274;
  v274 = 0uLL;
  v275 = 0;
  *(double *)a3 = v165;
  *(_OWORD *)(a3 + 8) = v166;
  *(_QWORD *)(a3 + 24) = v167;
  *(double *)v229 = v165;
  memset(&v229[8], 0, 24);
  *(_OWORD *)(a3 + 32) = v169;
  *(_QWORD *)(a3 + 48) = v168;
  v230[0] = 0;
  v230[1] = 0;
  *(_OWORD *)(a3 + 56) = v170;
  *(_QWORD *)(a3 + 72) = v171;
  memset(v231, 0, sizeof(v231));
  *(_OWORD *)(a3 + 80) = v173;
  *(_QWORD *)(a3 + 96) = v172;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v233 = 0;
  *(_BYTE *)(a3 + 104) = 1;
  sub_223322918(v229);
  sub_223341058((void **)v270);
LABEL_195:
  if (v279)
    free(v279);
  if (v313)
  {
    v175 = *v313;
    v174 = (std::__shared_weak_count *)v313[1];
    if (v174)
    {
      v176 = (unint64_t *)&v174->__shared_owners_;
      do
        v177 = __ldxr(v176);
      while (__stxr(v177 + 1, v176));
      do
        v178 = __ldaxr(v176);
      while (__stlxr(v178 - 1, v176));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
        std::__shared_weak_count::__release_weak(v174);
      }
    }
    if (v175)
      sub_2242AE9A8((uint64_t)v313);
  }
  v312 = &off_24EC715B8;
  v179 = v314;
  if (v314)
  {
    v180 = (unint64_t *)&v314->__shared_owners_;
    do
      v181 = __ldaxr(v180);
    while (__stlxr(v181 - 1, v180));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
  }
  if (v310)
  {
    v183 = *v310;
    v182 = (std::__shared_weak_count *)v310[1];
    if (v182)
    {
      v184 = (unint64_t *)&v182->__shared_owners_;
      do
        v185 = __ldxr(v184);
      while (__stxr(v185 + 1, v184));
      do
        v186 = __ldaxr(v184);
      while (__stlxr(v186 - 1, v184));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    if (v183)
      sub_2242AE9A8((uint64_t)v310);
  }
  v309 = &off_24EC715B8;
  v187 = v311;
  if (v311)
  {
    v188 = (unint64_t *)&v311->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
      std::__shared_weak_count::__release_weak(v187);
    }
  }
  if (v307)
  {
    v191 = *v307;
    v190 = (std::__shared_weak_count *)v307[1];
    if (v190)
    {
      v192 = (unint64_t *)&v190->__shared_owners_;
      do
        v193 = __ldxr(v192);
      while (__stxr(v193 + 1, v192));
      do
        v194 = __ldaxr(v192);
      while (__stlxr(v194 - 1, v192));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    if (v191)
      sub_2242AE9A8((uint64_t)v307);
  }
  v306 = &off_24EC715B8;
  v195 = v308;
  if (v308)
  {
    v196 = (unint64_t *)&v308->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  if (v304)
  {
    v199 = *v304;
    v198 = (std::__shared_weak_count *)v304[1];
    if (v198)
    {
      v200 = (unint64_t *)&v198->__shared_owners_;
      do
        v201 = __ldxr(v200);
      while (__stxr(v201 + 1, v200));
      do
        v202 = __ldaxr(v200);
      while (__stlxr(v202 - 1, v200));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
    if (v199)
      sub_2242AE9A8((uint64_t)v304);
  }
  v303 = &off_24EC715B8;
  v203 = v305;
  if (v305)
  {
    v204 = (unint64_t *)&v305->__shared_owners_;
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  if (*((_QWORD *)&v301 + 1))
  {
    v207 = **((_QWORD **)&v301 + 1);
    v206 = *(std::__shared_weak_count **)(*((_QWORD *)&v301 + 1) + 8);
    if (v206)
    {
      v208 = (unint64_t *)&v206->__shared_owners_;
      do
        v209 = __ldxr(v208);
      while (__stxr(v209 + 1, v208));
      do
        v210 = __ldaxr(v208);
      while (__stlxr(v210 - 1, v208));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    if (v207)
      sub_2242AE9A8(*((uint64_t *)&v301 + 1));
  }
  *(_QWORD *)&v301 = &off_24EC715B8;
  v211 = v302;
  if (v302)
  {
    v212 = (unint64_t *)&v302->__shared_owners_;
    do
      v213 = __ldaxr(v212);
    while (__stlxr(v213 - 1, v212));
    if (!v213)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }
}

void sub_22333C2C4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x227684CE8](v3, 0x10F1C4073A16C8DLL);
  MEMORY[0x227684CE8](v2, 0x20C4093837F09);
  MEMORY[0x227684CE8](v1, 0xA0C40AFF93C70);
  sub_22316DC48(a1);
}

void sub_22333C334(void *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  STACK[0x550] = (unint64_t)&off_24EC715B8;
  v2 = (std::__shared_weak_count *)STACK[0x560];
  if (STACK[0x560])
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      sub_22316DC48(a1);
    }
  }
  sub_22316DC48(a1);
}

void sub_22333C3D8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CABA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CABA0))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CAB98);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CABA0);
  }
  *a1 = qword_2540CAB98;
}

void sub_22333C474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CABA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CABA0);
  _Unwind_Resume(a1);
}

void sub_22333C4CC(double **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double *v4;
  int v6;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  double v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 __p;
  uint64_t v44;
  uint64_t (**v45)();
  uint64_t (**v46)();
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  v4 = *a1;
  if (*((_BYTE *)*a1 + 56) != 3)
  {
    v6 = 1;
    goto LABEL_5;
  }
  if (*(double *)a2 - v4[19] < v4[17] - v4[18])
  {
    v6 = 0;
LABEL_5:
    *(_DWORD *)a3 = v6;
    *(_BYTE *)(a3 + 104) = 0;
    return;
  }
  v4[19] = *(double *)a2;
  sub_2233164B4(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288), *(unsigned __int8 **)(a2 + 288), &v65);
  v8 = *((_QWORD *)*a1 + 3);
  v9 = *(_QWORD *)(a2 + 8);
  __p = v65;
  v42 = v9;
  v44 = v66;
  v65 = 0uLL;
  v66 = 0;
  v10.f64[0] = *(float64_t *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 24);
  v10.f64[1] = *(float64_t *)(a2 + 64);
  v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), *(float64x2_t *)(a2 + 80));
  sub_223FBAC84((uint64_t)&v25, (uint64_t)&v34);
  v45 = &off_24EC64998;
  v46 = &off_24EC64920;
  v47 = v26;
  v48 = v27;
  v49 = v28;
  v50 = v29;
  v51 = v30;
  v52 = *(_QWORD *)((char *)&v30 + 4);
  v53 = v11;
  v54 = (float)v11;
  v55 = (float)HIDWORD(v11);
  v12 = *(_OWORD *)(a2 + 256);
  v63 = *(_OWORD *)(a2 + 272);
  v62 = v12;
  v13 = *(_OWORD *)(a2 + 224);
  v61 = *(_OWORD *)(a2 + 240);
  v60 = v13;
  v14 = *(_OWORD *)(a2 + 192);
  v59 = *(_OWORD *)(a2 + 208);
  v58 = v14;
  v15 = *(_OWORD *)(a2 + 160);
  v57 = *(_OWORD *)(a2 + 176);
  v56 = v15;
  v64 = v8;
  sub_223F6D114(*((_QWORD *)*a1 + 44), (uint64_t)&v42, (uint64_t *)&v34);
  v16 = *(double *)a2;
  v17 = v34;
  v34 = 0uLL;
  v18 = v35;
  v19 = v37;
  v20 = v36;
  v37 = 0;
  v35 = 0;
  v36 = 0uLL;
  v21 = v38;
  v38 = 0uLL;
  v22 = v39;
  v23 = v41;
  v24 = v40;
  v39 = 0;
  v40 = 0uLL;
  v41 = 0;
  *(double *)a3 = v16;
  *(float32x4_t *)(a3 + 8) = v17;
  *(_QWORD *)(a3 + 24) = v18;
  v25 = v16;
  v26 = 0uLL;
  *(_QWORD *)&v27 = 0;
  *(_OWORD *)(a3 + 32) = v20;
  *(_QWORD *)(a3 + 48) = v19;
  *((_QWORD *)&v27 + 1) = 0;
  *(_QWORD *)&v28 = 0;
  *(_OWORD *)(a3 + 56) = v21;
  *(_QWORD *)(a3 + 72) = v22;
  *((_QWORD *)&v28 + 1) = 0;
  v29 = 0;
  v30 = 0uLL;
  *(_OWORD *)(a3 + 80) = v24;
  *(_QWORD *)(a3 + 96) = v23;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  *(_BYTE *)(a3 + 104) = 1;
  sub_223322918(&v25);
  sub_223341058((void **)&v34);
  v45 = &off_24EC64998;
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if ((_QWORD)v65)
  {
    *((_QWORD *)&v65 + 1) = v65;
    operator delete((void *)v65);
  }
}

void sub_22333C724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;

  if (__p)
    operator delete(__p);
  v42 = *(void **)(v40 - 112);
  if (v42)
  {
    *(_QWORD *)(v40 - 104) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void sub_22333C768(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t (**v34)();
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v2 = *a1;
  v27 = *(_QWORD *)a2;
  v28 = &off_24EC715B8;
  v3 = *(std::__shared_weak_count **)(a2 + 24);
  v29 = *(_QWORD *)(a2 + 16);
  v30 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(std::__shared_weak_count **)(a2 + 48);
  v31 = &off_24EC715B8;
  v32 = v7;
  v33 = v6;
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = *(_QWORD *)(a2 + 64);
  v10 = *(std::__shared_weak_count **)(a2 + 72);
  v34 = &off_24EC715B8;
  v35 = v11;
  v36 = v10;
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v37 = *(_QWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 120);
  v39 = *(_OWORD *)(a2 + 104);
  v40 = v14;
  v41 = *(_OWORD *)(a2 + 136);
  v42 = *(_QWORD *)(a2 + 152);
  v38 = *(_OWORD *)(a2 + 88);
  LOBYTE(v43) = 0;
  v46 = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    v15 = *(_OWORD *)(a2 + 176);
    v43 = *(_OWORD *)(a2 + 160);
    v44 = v15;
    v45 = *(_OWORD *)(a2 + 192);
    v46 = 1;
  }
  v16 = *(_OWORD *)(a2 + 312);
  v52 = *(_OWORD *)(a2 + 296);
  v53 = v16;
  v54 = *(_OWORD *)(a2 + 328);
  v17 = *(_OWORD *)(a2 + 280);
  v50 = *(_OWORD *)(a2 + 264);
  v51 = v17;
  v47 = *(_OWORD *)(a2 + 216);
  v48 = *(_OWORD *)(a2 + 232);
  v49 = *(_OWORD *)(a2 + 248);
  sub_2233153E0((uint64_t *)(v2 + 256), &v27);
  v34 = &off_24EC715B8;
  v18 = v36;
  if (v36)
  {
    v19 = (unint64_t *)&v36->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v31 = &off_24EC715B8;
  v21 = v33;
  if (v33)
  {
    v22 = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v28 = &off_24EC715B8;
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_22333C978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223246438((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_22333C98C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t (**v27)();
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v2 = *a1;
  v23 = *(_QWORD *)a2;
  v24 = &off_24EC715B8;
  v3 = *(std::__shared_weak_count **)(a2 + 24);
  v25 = *(_QWORD *)(a2 + 16);
  v26 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(a2 + 40);
  v6 = *(std::__shared_weak_count **)(a2 + 48);
  v27 = &off_24EC715B8;
  v28 = v7;
  v29 = v6;
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v30 = *(_QWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 112);
  v33 = *(_OWORD *)(a2 + 96);
  v34 = v10;
  v35 = *(_QWORD *)(a2 + 128);
  v11 = *(_OWORD *)(a2 + 80);
  v31 = *(_OWORD *)(a2 + 64);
  v32 = v11;
  LOBYTE(v36) = 0;
  v39 = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    v12 = *(_OWORD *)(a2 + 152);
    v36 = *(_OWORD *)(a2 + 136);
    v37 = v12;
    v38 = *(_OWORD *)(a2 + 168);
    v39 = 1;
  }
  v13 = *(_OWORD *)(a2 + 272);
  v44 = *(_OWORD *)(a2 + 256);
  v45 = v13;
  v14 = *(_OWORD *)(a2 + 304);
  v46 = *(_OWORD *)(a2 + 288);
  v47 = v14;
  v15 = *(_OWORD *)(a2 + 208);
  v40 = *(_OWORD *)(a2 + 192);
  v41 = v15;
  v16 = *(_OWORD *)(a2 + 240);
  v42 = *(_OWORD *)(a2 + 224);
  v43 = v16;
  sub_223315784((uint64_t *)(v2 + 304), &v23);
  v27 = &off_24EC715B8;
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v24 = &off_24EC715B8;
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_22333CB24(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  sub_2242A8F3C(v2);
  sub_2242A8F3C(v1);
  _Unwind_Resume(a1);
}

void sub_22333CB40(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t **v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;

  v33 = 0;
  v34 = 0;
  v32 = &v33;
  v3 = *(unsigned __int8 **)(a2 + 16);
  if (!v3)
  {
    v4 = *(_QWORD **)(*(_QWORD *)a1 + 352);
    v30 = 0;
    v31 = 0;
LABEL_60:
    v29 = &v30;
    goto LABEL_61;
  }
  while (2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 112);
    v6 = *(_QWORD *)(v5 + 8);
    v9 = *(_QWORD *)(v6 + 8);
    v7 = v6 + 8;
    v8 = v9;
    if (!v9)
      goto LABEL_15;
    v10 = v7;
    do
    {
      v11 = sub_22319835C((unsigned __int8 *)(v8 + 32), v3 + 16);
      if (v11 >= 0)
        v12 = (uint64_t *)v8;
      else
        v12 = (uint64_t *)(v8 + 8);
      if (v11 >= 0)
        v10 = v8;
      v8 = *v12;
    }
    while (*v12);
    if (v10 == v7 || (char)sub_22319835C(v3 + 16, (unsigned __int8 *)(v10 + 32)) < 0)
LABEL_15:
      v10 = v7;
    if (v10 == *(_QWORD *)(v5 + 8) + 8)
      goto LABEL_4;
    v13 = v33;
    v14 = &v33;
    v15 = &v33;
    if (!v33)
      goto LABEL_56;
    v16 = v3[16];
    do
    {
      while (1)
      {
        v15 = (uint64_t **)v13;
        v17 = *((unsigned __int8 *)v13 + 32);
        v18 = v16 >= v17;
        if (v16 != v17)
        {
          v19 = v3[16];
          goto LABEL_51;
        }
        v19 = v3[17];
        v17 = *((unsigned __int8 *)v15 + 33);
        v18 = v19 >= v17;
        if (v19 == v17)
        {
          v19 = v3[18];
          v17 = *((unsigned __int8 *)v15 + 34);
          v18 = v19 >= v17;
          if (v19 == v17)
          {
            v19 = v3[19];
            v17 = *((unsigned __int8 *)v15 + 35);
            v18 = v19 >= v17;
            if (v19 == v17)
              break;
          }
        }
LABEL_51:
        if (v18)
          goto LABEL_53;
LABEL_19:
        v13 = *v15;
        v14 = v15;
        if (!*v15)
          goto LABEL_56;
      }
      v20 = v3[20];
      v21 = *((unsigned __int8 *)v15 + 36);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[21];
      v21 = *((unsigned __int8 *)v15 + 37);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[22];
      v21 = *((unsigned __int8 *)v15 + 38);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[23];
      v21 = *((unsigned __int8 *)v15 + 39);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[24];
      v21 = *((unsigned __int8 *)v15 + 40);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[25];
      v21 = *((unsigned __int8 *)v15 + 41);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[26];
      v21 = *((unsigned __int8 *)v15 + 42);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[27];
      v21 = *((unsigned __int8 *)v15 + 43);
      if (v20 != v21)
        goto LABEL_36;
      v20 = v3[28];
      v21 = *((unsigned __int8 *)v15 + 44);
      if (v20 != v21
        || (v20 = v3[29], v21 = *((unsigned __int8 *)v15 + 45), v20 != v21)
        || (v20 = v3[30], v21 = *((unsigned __int8 *)v15 + 46), v20 != v21)
        || (v20 = v3[31], v21 = *((unsigned __int8 *)v15 + 47), v20 != v21))
      {
LABEL_36:
        if (v20 < v21)
          goto LABEL_19;
      }
      v17 = *((unsigned __int8 *)v15 + 36);
      v19 = v3[20];
      if (v17 == v19)
      {
        v17 = *((unsigned __int8 *)v15 + 37);
        v19 = v3[21];
        if (v17 == v19)
        {
          v17 = *((unsigned __int8 *)v15 + 38);
          v19 = v3[22];
          if (v17 == v19)
          {
            v17 = *((unsigned __int8 *)v15 + 39);
            v19 = v3[23];
            if (v17 == v19)
            {
              v17 = *((unsigned __int8 *)v15 + 40);
              v19 = v3[24];
              if (v17 == v19)
              {
                v17 = *((unsigned __int8 *)v15 + 41);
                v19 = v3[25];
                if (v17 == v19)
                {
                  v17 = *((unsigned __int8 *)v15 + 42);
                  v19 = v3[26];
                  if (v17 == v19)
                  {
                    v17 = *((unsigned __int8 *)v15 + 43);
                    v19 = v3[27];
                    if (v17 == v19)
                    {
                      v17 = *((unsigned __int8 *)v15 + 44);
                      v19 = v3[28];
                      if (v17 == v19)
                      {
                        v17 = *((unsigned __int8 *)v15 + 45);
                        v19 = v3[29];
                        if (v17 == v19)
                        {
                          v17 = *((unsigned __int8 *)v15 + 46);
                          v19 = v3[30];
                          if (v17 == v19)
                          {
                            v17 = *((unsigned __int8 *)v15 + 47);
                            v19 = v3[31];
                            if (v17 == v19)
                              goto LABEL_4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_53:
      if (v17 >= v19)
        goto LABEL_4;
      v13 = v15[1];
    }
    while (v13);
    v14 = v15 + 1;
LABEL_56:
    v22 = operator new(0xB0uLL);
    v22[2] = *((_OWORD *)v3 + 1);
    v23 = *((_OWORD *)v3 + 5);
    v25 = *((_OWORD *)v3 + 2);
    v24 = *((_OWORD *)v3 + 3);
    v22[5] = *((_OWORD *)v3 + 4);
    v22[6] = v23;
    v22[3] = v25;
    v22[4] = v24;
    v26 = *((_OWORD *)v3 + 6);
    v27 = *((_OWORD *)v3 + 7);
    v28 = *((_OWORD *)v3 + 9);
    v22[9] = *((_OWORD *)v3 + 8);
    v22[10] = v28;
    v22[7] = v26;
    v22[8] = v27;
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = v15;
    *v14 = (uint64_t *)v22;
    if (*v32)
    {
      v32 = (uint64_t **)*v32;
      v22 = *v14;
    }
    sub_2231A9A8C(v33, (uint64_t *)v22);
    ++v34;
LABEL_4:
    v3 = *(unsigned __int8 **)v3;
    if (v3)
      continue;
    break;
  }
  v4 = *(_QWORD **)(*(_QWORD *)a1 + 352);
  v29 = v32;
  v30 = v33;
  v31 = v34;
  if (!v34)
    goto LABEL_60;
  v33[2] = (uint64_t)&v30;
  v32 = &v33;
  v33 = 0;
  v34 = 0;
LABEL_61:
  sub_223F6D6DC(v4, &v29);
  sub_223198030((uint64_t)&v29, v30);
  sub_223198030((uint64_t)&v32, v33);
}

void sub_22333CF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a9, a10);
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_22333CF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_22333CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_223198030((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_22333CF54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  uint64_t i;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  BOOL v34;
  char *v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  char *v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  size_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  BOOL v67;
  uint64_t *v68;
  uint64_t v69;
  size_t v70;
  __int128 *p_dst;
  uint64_t v72;
  unint64_t v73;
  const void **v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  std::bad_alloc *exception;
  std::bad_alloc *v87;
  uint64_t v88;
  char *v89;
  __int128 __dst;
  unint64_t v91;
  _QWORD *(**v92)(_QWORD *);
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD v98[3];
  uint64_t v99;
  unint64_t v100;
  __int128 __p;
  __int128 v102;
  int v103;
  uint64_t v104[19];
  char *v105;
  char *v106;
  _BYTE v107[9];

  sub_223F65784(*(_QWORD *)(*(_QWORD *)a1 + 352), &v105);
  v3 = MEMORY[0x24BEDB870];
  v4 = MEMORY[0x24BEDB870] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v104[0] = MEMORY[0x24BEDB870] + 64;
  v96 = v5;
  *(uint64_t *)((char *)&v96 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v96 + *(_QWORD *)(v96 - 24));
  std::ios_base::init(v7, &v97);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v96 = v3 + 24;
  v104[0] = v4;
  std::streambuf::basic_streambuf();
  v97 = MEMORY[0x24BEDB848] + 16;
  __p = 0u;
  v102 = 0u;
  v103 = 16;
  v93 = 1;
  v8 = operator new();
  *(_QWORD *)v8 = &v96;
  *(_QWORD *)(v8 + 8) = &v96;
  *(_BYTE *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  v92 = &off_24EC1FA80;
  v94 = &unk_24EC1FBD0;
  v95 = v8;
  sub_22455AA60((uint64_t)&__dst, v8 + 8);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_QWORD *)&__dst = v8 + 16;
    sub_22455B1CC((uint64_t **)&__dst, 0xEEEEEEEEEEEEEEEFLL * ((v106 - v105) >> 3));
  }
  else
  {
    sub_22455B4D4();
  }
  v88 = a2;
  v9 = v105;
  v89 = v106;
  while (v9 != v89)
  {
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455A7EC((uint64_t **)&__dst, 4u);
      if (*(_BYTE *)(v8 + 40))
        goto LABEL_9;
    }
    else
    {
      sub_22455AA60((uint64_t)&__dst, v8 + 8);
      v8 = v95;
      if (*(_BYTE *)(v95 + 40))
      {
LABEL_9:
        *(_QWORD *)&__dst = v8 + 16;
        sub_224559C04((uint64_t **)&__dst, *v9);
        sub_224559C04((uint64_t **)&__dst, v9[1]);
        sub_224559C04((uint64_t **)&__dst, v9[2]);
        sub_224559C04((uint64_t **)&__dst, v9[3]);
        sub_224559C04((uint64_t **)&__dst, v9[4]);
        sub_224559C04((uint64_t **)&__dst, v9[5]);
        sub_224559C04((uint64_t **)&__dst, v9[6]);
        sub_224559C04((uint64_t **)&__dst, v9[7]);
        sub_224559C04((uint64_t **)&__dst, v9[8]);
        sub_224559C04((uint64_t **)&__dst, v9[9]);
        sub_224559C04((uint64_t **)&__dst, v9[10]);
        sub_224559C04((uint64_t **)&__dst, v9[11]);
        sub_224559C04((uint64_t **)&__dst, v9[12]);
        sub_224559C04((uint64_t **)&__dst, v9[13]);
        sub_224559C04((uint64_t **)&__dst, v9[14]);
        sub_224559C04((uint64_t **)&__dst, v9[15]);
        goto LABEL_10;
      }
    }
    for (i = 0; i != 16; ++i)
    {
      v12 = v9[i];
      if (v12 < 0)
      {
        LOBYTE(__dst) = -52;
        BYTE1(__dst) = v12;
      }
      else
      {
        LOBYTE(__dst) = v9[i];
      }
      std::ostream::write();
    }
LABEL_10:
    v10 = (unsigned int *)(v9 + 16);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B5CC((uint64_t)v107, (uint64_t **)&__dst, v10);
      v8 = v95;
    }
    else
    {
      v13 = *v10;
      LOBYTE(__dst) = -54;
      *(_DWORD *)((char *)&__dst + 1) = bswap32(v13);
      std::ostream::write();
    }
    v14 = (unsigned int *)(v9 + 20);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B5CC((uint64_t)v107, (uint64_t **)&__dst, v14);
      v8 = v95;
    }
    else
    {
      v15 = *v14;
      LOBYTE(__dst) = -54;
      *(_DWORD *)((char *)&__dst + 1) = bswap32(v15);
      std::ostream::write();
    }
    v16 = (unsigned int *)(v9 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B5CC((uint64_t)v107, (uint64_t **)&__dst, v16);
      v8 = v95;
    }
    else
    {
      v17 = *v16;
      LOBYTE(__dst) = -54;
      *(_DWORD *)((char *)&__dst + 1) = bswap32(v17);
      std::ostream::write();
    }
    v18 = (unsigned int *)(v9 + 28);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B5CC((uint64_t)v107, (uint64_t **)&__dst, v18);
      v8 = v95;
    }
    else
    {
      v19 = *v18;
      LOBYTE(__dst) = -54;
      *(_DWORD *)((char *)&__dst + 1) = bswap32(v19);
      std::ostream::write();
    }
    v20 = (unsigned int *)(v9 + 32);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B5CC((uint64_t)v107, (uint64_t **)&__dst, v20);
      v8 = v95;
    }
    else
    {
      v21 = *v20;
      LOBYTE(__dst) = -54;
      *(_DWORD *)((char *)&__dst + 1) = bswap32(v21);
      std::ostream::write();
    }
    v22 = (unsigned int *)(v9 + 36);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B5CC((uint64_t)v107, (uint64_t **)&__dst, v22);
      v8 = v95;
    }
    else
    {
      v23 = *v22;
      LOBYTE(__dst) = -54;
      *(_DWORD *)((char *)&__dst + 1) = bswap32(v23);
      std::ostream::write();
    }
    v24 = (unsigned int *)(v9 + 40);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B5CC((uint64_t)v107, (uint64_t **)&__dst, v24);
      v8 = v95;
    }
    else
    {
      v25 = *v24;
      LOBYTE(__dst) = -54;
      *(_DWORD *)((char *)&__dst + 1) = bswap32(v25);
      std::ostream::write();
    }
    v26 = (uint64_t)(*((_QWORD *)v9 + 7) - *((_QWORD *)v9 + 6)) >> 3;
    if (!*(_BYTE *)(v8 + 40))
    {
      sub_22455B4D4();
      v8 = v95;
      v27 = (unsigned int *)*((_QWORD *)v9 + 6);
      v28 = (unsigned int *)*((_QWORD *)v9 + 7);
      if (v28 == v27)
        goto LABEL_72;
      while (1)
      {
LABEL_43:
        v29 = *v27;
        if (*(_BYTE *)(v8 + 40))
        {
          v30 = *(_QWORD *)(v8 + 32);
          v31 = *(_QWORD *)(v8 + 16);
          if ((unint64_t)(v30 - v31) >= 5)
          {
            v35 = *(char **)(v8 + 24);
          }
          else
          {
            if (v30)
              v32 = 2 * v30;
            else
              v32 = 0x2000;
            v33 = v31 + 5;
            while (v32 < v33)
            {
              v34 = (uint64_t)v32 <= 0;
              v32 *= 2;
              if (v34)
              {
                v32 = v33;
                break;
              }
            }
            v35 = (char *)malloc_type_realloc(*(void **)(v8 + 24), v32, 0xAD6A59EEuLL);
            if (!v35)
            {
LABEL_173:
              exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v87 = std::bad_alloc::bad_alloc(exception);
              __cxa_throw(v87, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
            }
            *(_QWORD *)(v8 + 24) = v35;
            *(_QWORD *)(v8 + 32) = v32;
            v31 = *(_QWORD *)(v8 + 16);
          }
          v37 = &v35[v31];
          *v37 = -54;
          *(_DWORD *)(v37 + 1) = bswap32(v29);
          *(_QWORD *)(v8 + 16) += 5;
          v36 = v27[1];
          if (!*(_BYTE *)(v8 + 40))
          {
LABEL_42:
            LOBYTE(__dst) = -54;
            *(_DWORD *)((char *)&__dst + 1) = bswap32(v36);
            std::ostream::write();
            v27 += 2;
            if (v27 == v28)
              goto LABEL_72;
            continue;
          }
        }
        else
        {
          LOBYTE(__dst) = -54;
          *(_DWORD *)((char *)&__dst + 1) = bswap32(v29);
          std::ostream::write();
          v36 = v27[1];
          if (!*(_BYTE *)(v8 + 40))
            goto LABEL_42;
        }
        v38 = *(_QWORD *)(v8 + 32);
        v39 = *(_QWORD *)(v8 + 16);
        if ((unint64_t)(v38 - v39) >= 5)
        {
          v42 = *(char **)(v8 + 24);
        }
        else
        {
          if (v38)
            v40 = 2 * v38;
          else
            v40 = 0x2000;
          v41 = v39 + 5;
          while (v40 < v41)
          {
            v34 = (uint64_t)v40 <= 0;
            v40 *= 2;
            if (v34)
            {
              v40 = v41;
              break;
            }
          }
          v42 = (char *)malloc_type_realloc(*(void **)(v8 + 24), v40, 0xAD6A59EEuLL);
          if (!v42)
            goto LABEL_173;
          *(_QWORD *)(v8 + 24) = v42;
          *(_QWORD *)(v8 + 32) = v40;
          v39 = *(_QWORD *)(v8 + 16);
        }
        v43 = &v42[v39];
        *v43 = -54;
        *(_DWORD *)(v43 + 1) = bswap32(v36);
        *(_QWORD *)(v8 + 16) += 5;
        v27 += 2;
        if (v27 == v28)
          goto LABEL_72;
      }
    }
    *(_QWORD *)&__dst = v8 + 16;
    sub_22455B1CC((uint64_t **)&__dst, v26);
    v27 = (unsigned int *)*((_QWORD *)v9 + 6);
    v28 = (unsigned int *)*((_QWORD *)v9 + 7);
    if (v28 != v27)
      goto LABEL_43;
LABEL_72:
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v9 + 10) - *((_QWORD *)v9 + 9)) >> 2);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B1CC((uint64_t **)&__dst, v44);
    }
    else
    {
      sub_22455B4D4();
    }
    v45 = *((_QWORD *)v9 + 9);
    v46 = *((_QWORD *)v9 + 10) - v45;
    if (v46)
    {
      v47 = (unsigned int *)(v45 + 8);
      v48 = 12 * (v46 / 12);
      do
      {
        if (*(_BYTE *)(v8 + 40))
        {
          *(_QWORD *)&__dst = v8 + 16;
          sub_22455A7EC((uint64_t **)&__dst, *(v47 - 2));
          sub_22455A7EC((uint64_t **)&__dst, *(v47 - 1));
          sub_22455A7EC((uint64_t **)&__dst, *v47);
        }
        else
        {
          v49 = *(v47 - 2);
          if (v49 > 0xFF)
          {
            v50 = HIWORD(v49);
            v51 = bswap32(v49);
            if (v50)
            {
              LOBYTE(__dst) = -50;
              *(_DWORD *)((char *)&__dst + 1) = v51;
            }
            else
            {
              LOBYTE(__dst) = -51;
              *(_WORD *)((char *)&__dst + 1) = HIWORD(v51);
            }
          }
          else if (v49 > 0x7F)
          {
            LOBYTE(__dst) = -52;
            BYTE1(__dst) = v49;
          }
          else
          {
            LOBYTE(__dst) = *(v47 - 2);
          }
          std::ostream::write();
          v52 = *(v47 - 1);
          if (v52 >= 0x100)
          {
            v53 = bswap32(v52);
            if (v52 >= 0x10000)
            {
              LOBYTE(__dst) = -50;
              *(_DWORD *)((char *)&__dst + 1) = v53;
            }
            else
            {
              LOBYTE(__dst) = -51;
              *(_WORD *)((char *)&__dst + 1) = HIWORD(v53);
            }
          }
          else if (v52 >= 0x80)
          {
            LOBYTE(__dst) = -52;
            BYTE1(__dst) = v52;
          }
          else
          {
            LOBYTE(__dst) = *(v47 - 1);
          }
          std::ostream::write();
          v54 = *v47;
          if (*v47 >= 0x100)
          {
            if (v54 >= 0x10000)
            {
              LOBYTE(__dst) = -50;
              *(_DWORD *)((char *)&__dst + 1) = bswap32(v54);
            }
            else
            {
              LOBYTE(__dst) = -51;
              *(_WORD *)((char *)&__dst + 1) = bswap32(v54) >> 16;
            }
          }
          else if (v54 < 0x80)
          {
            LOBYTE(__dst) = *v47;
          }
          else
          {
            LOBYTE(__dst) = -52;
            BYTE1(__dst) = v54;
          }
          std::ostream::write();
        }
        v47 += 3;
        v48 -= 12;
      }
      while (v48);
    }
    v55 = *((_QWORD *)v9 + 14);
    if (*(_BYTE *)(v8 + 40))
    {
      *(_QWORD *)&__dst = v8 + 16;
      sub_22455B1CC((uint64_t **)&__dst, v55);
    }
    else
    {
      sub_22455B4D4();
    }
    v56 = (char *)*((_QWORD *)v9 + 12);
    if (v56 != v9 + 104)
    {
      do
      {
        if (*(_BYTE *)(v8 + 40))
        {
          *(_QWORD *)&__dst = v8 + 16;
          sub_224559C04((uint64_t **)&__dst, v56[28]);
        }
        else
        {
          v57 = v56[28];
          if (v57 < 0)
          {
            LOBYTE(__dst) = -52;
            BYTE1(__dst) = v57;
          }
          else
          {
            LOBYTE(__dst) = v56[28];
          }
          std::ostream::write();
        }
        v58 = *((_DWORD *)v56 + 8);
        if (*(_BYTE *)(v8 + 40))
        {
          v59 = *(_QWORD *)(v8 + 32);
          v60 = *(_QWORD *)(v8 + 16);
          if ((unint64_t)(v59 - v60) >= 5)
          {
            v63 = *(char **)(v8 + 24);
          }
          else
          {
            if (v59)
              v61 = 2 * v59;
            else
              v61 = 0x2000;
            v62 = v60 + 5;
            while (v61 < v62)
            {
              v34 = (uint64_t)v61 <= 0;
              v61 *= 2;
              if (v34)
              {
                v61 = v62;
                break;
              }
            }
            v63 = (char *)malloc_type_realloc(*(void **)(v8 + 24), v61, 0xAD6A59EEuLL);
            if (!v63)
              goto LABEL_173;
            *(_QWORD *)(v8 + 24) = v63;
            *(_QWORD *)(v8 + 32) = v61;
            v60 = *(_QWORD *)(v8 + 16);
          }
          v65 = &v63[v60];
          *v65 = -54;
          *(_DWORD *)(v65 + 1) = bswap32(v58);
          *(_QWORD *)(v8 + 16) += 5;
          v64 = (char *)*((_QWORD *)v56 + 1);
          if (!v64)
          {
            do
            {
LABEL_134:
              v66 = (char *)*((_QWORD *)v56 + 2);
              v67 = *(_QWORD *)v66 == (_QWORD)v56;
              v56 = v66;
            }
            while (!v67);
            goto LABEL_109;
          }
        }
        else
        {
          LOBYTE(__dst) = -54;
          *(_DWORD *)((char *)&__dst + 1) = bswap32(v58);
          std::ostream::write();
          v64 = (char *)*((_QWORD *)v56 + 1);
          if (!v64)
            goto LABEL_134;
        }
        do
        {
          v66 = v64;
          v64 = *(char **)v64;
        }
        while (v64);
LABEL_109:
        v56 = v66;
      }
      while (v66 != v9 + 104);
    }
    v9 += 120;
  }
  if ((v103 & 0x10) != 0)
  {
    v73 = *((_QWORD *)&v102 + 1);
    v68 = (uint64_t *)MEMORY[0x24BEDB800];
    v69 = v88;
    if (*((_QWORD *)&v102 + 1) < v100)
    {
      *((_QWORD *)&v102 + 1) = v100;
      v73 = v100;
    }
    v74 = (const void **)&v99;
  }
  else
  {
    v68 = (uint64_t *)MEMORY[0x24BEDB800];
    v69 = v88;
    if ((v103 & 8) == 0)
    {
      v70 = 0;
      HIBYTE(v91) = 0;
      p_dst = &__dst;
      v72 = MEMORY[0x24BEDB848];
      goto LABEL_152;
    }
    v74 = (const void **)v98;
    v73 = v98[2];
  }
  v72 = MEMORY[0x24BEDB848];
  v75 = *v74;
  v70 = v73 - (_QWORD)*v74;
  if (v70 >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (v70 >= 0x17)
  {
    v76 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v76 = v70 | 7;
    v77 = v76 + 1;
    p_dst = (__int128 *)operator new(v76 + 1);
    *((_QWORD *)&__dst + 1) = v70;
    v91 = v77 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_151;
  }
  HIBYTE(v91) = v73 - *(_BYTE *)v74;
  p_dst = &__dst;
  if (v70)
LABEL_151:
    memmove(p_dst, v75, v70);
LABEL_152:
  *((_BYTE *)p_dst + v70) = 0;
  *(_OWORD *)v69 = __dst;
  *(_QWORD *)(v69 + 16) = v91;
  *(_BYTE *)(v69 + 24) = 1;
  v78 = v95;
  if (v95)
  {
    v79 = *(void **)(v95 + 80);
    if (v79)
    {
      *(_QWORD *)(v95 + 88) = v79;
      operator delete(v79);
    }
    if (*(_BYTE *)(v78 + 72))
      free(*(void **)(v78 + 56));
    if (*(_BYTE *)(v78 + 40))
      free(*(void **)(v78 + 24));
    MEMORY[0x227684CE8](v78, 0x1030C408C1A3048);
  }
  v96 = *v68;
  *(uint64_t *)((char *)&v96 + *(_QWORD *)(v96 - 24)) = v68[3];
  v97 = v72 + 16;
  if (SBYTE7(v102) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x227684BE0](v104);
  v80 = v105;
  if (v105)
  {
    v81 = v105;
    if (v106 != v105)
    {
      v82 = (uint64_t)(v106 - 24);
      do
      {
        sub_223198030(v82, *(_QWORD **)(v82 + 8));
        v84 = *(void **)(v82 - 24);
        if (v84)
        {
          *(_QWORD *)(v82 - 16) = v84;
          operator delete(v84);
        }
        v85 = *(void **)(v82 - 48);
        if (v85)
        {
          *(_QWORD *)(v82 - 40) = v85;
          operator delete(v85);
        }
        v83 = v82 - 96;
        v82 -= 120;
      }
      while ((char *)v83 != v80);
      v81 = v105;
    }
    v106 = v80;
    operator delete(v81);
  }
}

void sub_22333DC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_2232BBE74((uint64_t)va);
  sub_22333DD68((void **)(v13 - 120));
  _Unwind_Resume(a1);
}

void sub_22333DCA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x227684BE0](v1);
  sub_22333DD68((void **)(v2 - 120));
  _Unwind_Resume(a1);
}

void sub_22333DCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_224554FC4((uint64_t *)va);
  sub_2232BBE74((uint64_t)va1);
  sub_22333DD68((void **)(v9 - 120));
  _Unwind_Resume(a1);
}

void sub_22333DCF8(void *a1, int a2)
{
  uint64_t v2;

  __cxa_begin_catch(a1);
  if (a2 == 2)
    *(_DWORD *)v2 = 0;
  else
    *(_DWORD *)v2 = 2;
  *(_BYTE *)(v2 + 24) = 0;
  __cxa_end_catch();
  JUMPOUT(0x22333DB18);
}

void **sub_22333DD68(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (uint64_t)v3 - 24;
      do
      {
        sub_223198030(v5, *(_QWORD **)(v5 + 8));
        v7 = *(void **)(v5 - 24);
        if (v7)
        {
          *(_QWORD *)(v5 - 16) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v5 - 48);
        if (v8)
        {
          *(_QWORD *)(v5 - 40) = v8;
          operator delete(v8);
        }
        v6 = v5 - 96;
        v5 -= 120;
      }
      while ((void *)v6 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_22333DDFC(uint64_t a1, size_t __len, void *__src)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  __int128 *v14;
  char v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  float *v33;
  float *v34;
  unint64_t v35;
  float *v36;
  float v37;
  _QWORD *v38;
  char *j;
  uint64_t v40;
  void (*v41)(uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  float v44;
  _QWORD *v45;
  char *i;
  uint64_t v47;
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD *v50;
  char **v51;
  uint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  size_t v62;
  char *v63;
  uint64_t v64;
  int v65;
  char *v66;
  char *v67;
  size_t v68;
  char *v69;
  uint64_t v70;
  BOOL v71;
  _QWORD *v72;
  char *k;
  uint64_t v74;
  void (*v75)(uint64_t);
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  char *m;
  uint64_t v80;
  void (*v81)(uint64_t);
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v85;
  char *n;
  uint64_t v87;
  void (*v88)(uint64_t);
  _QWORD *v89;
  _QWORD *v90;
  _QWORD **v91;
  void **v92;
  uint64_t v93;
  uint64_t ii;
  unsigned __int8 v95;
  _QWORD *v96;
  char *jj;
  uint64_t v98;
  void (*v99)(uint64_t);
  _QWORD *v100;
  _QWORD *v101;
  float v102;
  _QWORD *v103;
  char *kk;
  uint64_t v105;
  void (*v106)(uint64_t);
  _QWORD *v107;
  _QWORD *v108;
  unsigned int v109;
  float *v110;
  float **v111;
  float **v112;
  unsigned int v113;
  float *v114;
  _QWORD *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  float *v127;
  uint64_t v128;
  __int128 *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  void *v134;
  uint64_t v135;
  char *v136;
  void *v137;
  void *v138;
  uint64_t v139;
  std::bad_cast *v141;
  std::bad_cast *v142;
  std::bad_cast *v143;
  std::bad_cast *v144;
  std::bad_cast *v145;
  std::bad_cast *v146;
  std::bad_cast *exception;
  std::bad_cast *v148;
  std::bad_cast *v149;
  std::bad_cast *v150;
  uint64_t v151;
  char *v152;
  unsigned int v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  void *__p;
  char *v160;
  char *v161;
  uint64_t (**v162)();
  void (**v163)();
  void *v164;
  void *v165;
  uint64_t v166;
  _QWORD v167[2];
  _QWORD v168[6];
  char *v169;
  char *v170;
  __int128 v171;
  __int128 v172;
  int v173;
  uint64_t v174[19];
  __int128 __dst;
  unint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182[3];

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_22316DBC0();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v176 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v176) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = MEMORY[0x24BEDB868];
  v10 = MEMORY[0x24BEDB868] + 64;
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 8);
  v12 = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 16);
  v174[0] = MEMORY[0x24BEDB868] + 64;
  v167[0] = v11;
  *(_QWORD *)((char *)v167 + *(_QWORD *)(v11 - 24)) = v12;
  v167[1] = 0;
  v13 = (std::ios_base *)((char *)v167 + *(_QWORD *)(v167[0] - 24));
  std::ios_base::init(v13, v168);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v167[0] = v9 + 24;
  v174[0] = v10;
  std::streambuf::basic_streambuf();
  v168[0] = MEMORY[0x24BEDB848] + 16;
  v14 = &v171;
  v171 = 0u;
  v172 = 0u;
  v173 = 8;
  if (SHIBYTE(v176) < 0)
  {
    sub_22319C3F4(&v171, (void *)__dst, *((size_t *)&__dst + 1));
    v15 = v173;
  }
  else
  {
    v171 = __dst;
    *(_QWORD *)&v172 = v176;
    v15 = 8;
  }
  *((_QWORD *)&v172 + 1) = 0;
  v16 = BYTE7(v172);
  if ((SBYTE7(v172) & 0x80u) == 0)
    v17 = (char *)&v171;
  else
    v17 = (char *)v171;
  if ((SBYTE7(v172) & 0x80u) == 0)
    v18 = BYTE7(v172);
  else
    v18 = *((_QWORD *)&v171 + 1);
  if ((v15 & 8) != 0)
  {
    v168[2] = v17;
    v168[3] = v17;
    *((_QWORD *)&v172 + 1) = &v17[v18];
    v168[4] = &v17[v18];
  }
  if ((v15 & 0x10) == 0)
    goto LABEL_36;
  *((_QWORD *)&v172 + 1) = &v17[v18];
  if ((BYTE7(v172) & 0x80) != 0)
  {
    v19 = (v172 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (*((_QWORD *)&v171 + 1) >= v19)
    {
      *((_QWORD *)&v171 + 1) = (v172 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v14 = (__int128 *)v171;
      goto LABEL_28;
    }
    v16 = *((_QWORD *)&v171 + 1);
  }
  else
  {
    v19 = 22;
    if (BYTE7(v172) > 0x15u)
    {
      BYTE7(v172) = 22;
LABEL_28:
      *((_BYTE *)v14 + v19) = 0;
      goto LABEL_29;
    }
  }
  std::string::append((std::string *)&v171, v19 - v16, 0);
LABEL_29:
  v20 = BYTE7(v172);
  if (SBYTE7(v172) < 0)
    v20 = *((_QWORD *)&v171 + 1);
  v168[5] = v17;
  v169 = v17;
  v170 = &v17[v20];
  if ((v173 & 3) != 0)
  {
    if (v18 >> 31)
    {
      v21 = ((v18 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      v22 = 0x7FFFFFFF * ((v21 + ((v18 - 0x80000000 - v21) >> 1)) >> 30);
      v17 += v22 + 0x7FFFFFFF;
      v18 = v18 - v22 - 0x7FFFFFFF;
      v169 = v17;
    }
    if (v18)
      v169 = &v17[v18];
  }
LABEL_36:
  v151 = a1;
  *(_QWORD *)&v177 = 1;
  sub_224555660(&v162, (uint64_t *)&v177, (uint64_t)v167, 0x2800uLL);
  v161 = 0;
  v162 = (uint64_t (**)())&off_24EC20B48;
  v163 = (void (**)())&unk_24EC20C90;
  __p = 0;
  v160 = 0;
  LODWORD(v177) = 1;
  sub_224554038(v166, &v177);
  v182[0] = 0;
  sub_2245543E8(v166, v182);
  v23 = v182[0];
  v24 = 0;
  if (v182[0])
  {
    if (0xEEEEEEEEEEEEEEEFLL * ((v161 - v160) >> 3) >= v182[0])
    {
      v30 = &v160[120 * v182[0]];
      do
      {
        *(_OWORD *)v24 = 0uLL;
        *(_OWORD *)(v24 + 16) = 0uLL;
        *(_OWORD *)(v24 + 32) = 0uLL;
        *(_OWORD *)(v24 + 48) = 0uLL;
        *(_DWORD *)(v24 + 36) = 1065353216;
        *(_QWORD *)(v24 + 112) = 0;
        *(_QWORD *)(v24 + 104) = 0;
        *(_OWORD *)(v24 + 64) = 0uLL;
        *(_OWORD *)(v24 + 80) = 0uLL;
        *(_QWORD *)(v24 + 96) = v24 + 104;
        v24 += 120;
      }
      while ((char *)v24 != v30);
      v160 = v30;
    }
    else
    {
      if (v182[0] > 0x222222222222222)
        sub_22316E078();
      v25 = 0xDDDDDDDDDDDDDDDELL * ((v161 - (_BYTE *)__p) >> 3);
      if (v25 <= v182[0])
        v25 = v182[0];
      if (0xEEEEEEEEEEEEEEEFLL * ((v161 - (_BYTE *)__p) >> 3) >= 0x111111111111111)
        v26 = 0x222222222222222;
      else
        v26 = v25;
      if (v26 > 0x222222222222222)
LABEL_243:
        sub_223174E94();
      v27 = (char *)operator new(120 * v26);
      v28 = 0;
      do
      {
        v29 = &v27[v28];
        *(_OWORD *)v29 = 0uLL;
        *((_OWORD *)v29 + 1) = 0uLL;
        *((_OWORD *)v29 + 2) = 0uLL;
        *((_OWORD *)v29 + 3) = 0uLL;
        *((_DWORD *)v29 + 9) = 1065353216;
        *((_QWORD *)v29 + 14) = 0;
        *(_QWORD *)&v27[v28 + 104] = 0;
        *((_QWORD *)v29 + 12) = &v27[v28 + 104];
        v28 += 120;
        *((_OWORD *)v29 + 4) = 0uLL;
        *((_OWORD *)v29 + 5) = 0uLL;
      }
      while (v29 + 120 != &v27[120 * v23]);
      __p = v27;
      v160 = &v27[120 * v23];
      v161 = &v27[120 * v26];
    }
    v31 = (char *)__p;
    if (v160 != __p)
    {
      v152 = v160;
      do
      {
        LODWORD(v177) = 4;
        sub_224554038(v166, &v177);
        v153 = v177;
        if (v177 <= 1
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/IOSamples/include/ACV/IOSamples/TemporalPlanarModelSample.h", 106, (uint64_t)"version >= 2u", 13, (uint64_t)&unk_224584831, 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v32 = v166;
        sub_224553CF0(v166, v31);
        sub_224553CF0(v32, v31 + 1);
        sub_224553CF0(v32, v31 + 2);
        sub_224553CF0(v32, v31 + 3);
        sub_224553CF0(v32, v31 + 4);
        sub_224553CF0(v32, v31 + 5);
        sub_224553CF0(v32, v31 + 6);
        sub_224553CF0(v32, v31 + 7);
        sub_224553CF0(v32, v31 + 8);
        sub_224553CF0(v32, v31 + 9);
        sub_224553CF0(v32, v31 + 10);
        sub_224553CF0(v32, v31 + 11);
        sub_224553CF0(v32, v31 + 12);
        sub_224553CF0(v32, v31 + 13);
        sub_224553CF0(v32, v31 + 14);
        sub_224553CF0(v32, v31 + 15);
        sub_2245544CC(v166, (float *)v31 + 4);
        sub_2245544CC(v166, (float *)v31 + 5);
        sub_2245544CC(v166, (float *)v31 + 6);
        sub_2245544CC(v166, (float *)v31 + 7);
        sub_2245544CC(v166, (float *)v31 + 8);
        sub_2245544CC(v166, (float *)v31 + 9);
        sub_2245544CC(v166, (float *)v31 + 10);
        *(_QWORD *)&v154 = (uint64_t)(*((_QWORD *)v31 + 7) - *((_QWORD *)v31 + 6)) >> 3;
        sub_2245543E8(v166, &v154);
        v34 = (float *)*((_QWORD *)v31 + 6);
        v33 = (float *)*((_QWORD *)v31 + 7);
        v35 = ((char *)v33 - (char *)v34) >> 3;
        if ((unint64_t)v154 <= v35)
        {
          if ((unint64_t)v154 < v35)
          {
            v33 = &v34[2 * v154];
            *((_QWORD *)v31 + 7) = v33;
          }
        }
        else
        {
          sub_223341C68((uint64_t *)v31 + 6, v154 - v35);
          v34 = (float *)*((_QWORD *)v31 + 6);
          v33 = (float *)*((_QWORD *)v31 + 7);
        }
        if (v33 != v34)
        {
          v36 = v33;
          while (1)
          {
            sub_2245564B0(v166, (uint64_t)&v177);
            if ((_DWORD)v177 == 2)
              break;
            if ((_DWORD)v177 == 3)
            {
              *v34 = (float)*((uint64_t *)&v177 + 1);
              v38 = (_QWORD *)*((_QWORD *)&v178 + 1);
              *((_QWORD *)&v178 + 1) = 0;
              if (!v38)
                goto LABEL_79;
              goto LABEL_73;
            }
            if ((_DWORD)v177 != 4)
            {
              exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
              exception->__vftable = 0;
              v148 = std::bad_cast::bad_cast(exception);
              v148->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
              __cxa_throw(v148, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
            }
            v37 = *((double *)&v177 + 1);
            *v34 = v37;
            v38 = (_QWORD *)*((_QWORD *)&v178 + 1);
            *((_QWORD *)&v178 + 1) = 0;
            if (v38)
              goto LABEL_73;
LABEL_79:
            sub_2245564B0(v166, (uint64_t)&v177);
            switch((_DWORD)v177)
            {
              case 2:
                v34[1] = (float)*((unint64_t *)&v177 + 1);
                v45 = (_QWORD *)*((_QWORD *)&v178 + 1);
                *((_QWORD *)&v178 + 1) = 0;
                if (v45)
                  goto LABEL_87;
                break;
              case 3:
                v34[1] = (float)*((uint64_t *)&v177 + 1);
                v45 = (_QWORD *)*((_QWORD *)&v178 + 1);
                *((_QWORD *)&v178 + 1) = 0;
                if (v45)
                  goto LABEL_87;
                break;
              case 4:
                v44 = *((double *)&v177 + 1);
                v34[1] = v44;
                v45 = (_QWORD *)*((_QWORD *)&v178 + 1);
                *((_QWORD *)&v178 + 1) = 0;
                if (!v45)
                  break;
LABEL_87:
                for (i = (char *)v45[4]; i != (char *)v45[6]; i -= 16)
                {
                  v48 = (void (*)(uint64_t))*((_QWORD *)i - 2);
                  v47 = *((_QWORD *)i - 1);
                  v48(v47);
                }
                free(i);
                v49 = (_QWORD *)v45[3];
                if (v49)
                {
                  do
                  {
                    v50 = (_QWORD *)*v49;
                    free(v49);
                    v49 = v50;
                  }
                  while (v50);
                }
                free(v45);
                break;
              default:
                v145 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v145->__vftable = 0;
                v146 = std::bad_cast::bad_cast(v145);
                v146->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v146, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
            }
            v34 += 2;
            if (v34 == v36)
              goto LABEL_93;
          }
          *v34 = (float)*((unint64_t *)&v177 + 1);
          v38 = (_QWORD *)*((_QWORD *)&v178 + 1);
          *((_QWORD *)&v178 + 1) = 0;
          if (!v38)
            goto LABEL_79;
LABEL_73:
          for (j = (char *)v38[4]; j != (char *)v38[6]; j -= 16)
          {
            v41 = (void (*)(uint64_t))*((_QWORD *)j - 2);
            v40 = *((_QWORD *)j - 1);
            v41(v40);
          }
          free(j);
          v42 = (_QWORD *)v38[3];
          if (v42)
          {
            do
            {
              v43 = (_QWORD *)*v42;
              free(v42);
              v42 = v43;
            }
            while (v43);
          }
          free(v38);
          goto LABEL_79;
        }
LABEL_93:
        v51 = (char **)(v31 + 72);
        *(_QWORD *)&v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v31 + 10) - *((_QWORD *)v31 + 9)) >> 2);
        sub_2245543E8(v166, &v154);
        v52 = v154;
        v54 = (char *)*((_QWORD *)v31 + 9);
        v53 = (char *)*((_QWORD *)v31 + 10);
        v55 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v54) >> 2);
        v56 = v154 - v55;
        if ((unint64_t)v154 <= v55)
        {
          if ((unint64_t)v154 < v55)
          {
            v53 = &v54[12 * v154];
            *((_QWORD *)v31 + 10) = v53;
          }
          v66 = v152;
          if (v53 != v54)
            goto LABEL_114;
        }
        else
        {
          v57 = *((_QWORD *)v31 + 11);
          if (0xAAAAAAAAAAAAAAABLL * ((v57 - (uint64_t)v53) >> 2) >= v56)
          {
            v68 = 12 * ((12 * v56 - 12) / 0xC) + 12;
            bzero(*((void **)v31 + 10), v68);
            *((_QWORD *)v31 + 10) = &v53[v68];
            v66 = v152;
            v54 = *v51;
            v53 += v68;
            if (v53 == *v51)
              goto LABEL_150;
LABEL_114:
            v69 = v53;
            do
            {
              v70 = v166;
              sub_2245564B0(v166, (uint64_t)&v177);
              v71 = (_DWORD)v177 == 2 && HIDWORD(*((_QWORD *)&v177 + 1)) == 0;
              if (!v71)
                goto LABEL_237;
              *(_DWORD *)v54 = DWORD2(v177);
              v72 = (_QWORD *)*((_QWORD *)&v178 + 1);
              *((_QWORD *)&v178 + 1) = 0;
              if (v72)
              {
                for (k = (char *)v72[4]; k != (char *)v72[6]; k -= 16)
                {
                  v75 = (void (*)(uint64_t))*((_QWORD *)k - 2);
                  v74 = *((_QWORD *)k - 1);
                  v75(v74);
                }
                free(k);
                v76 = (_QWORD *)v72[3];
                if (v76)
                {
                  do
                  {
                    v77 = (_QWORD *)*v76;
                    free(v76);
                    v76 = v77;
                  }
                  while (v77);
                }
                free(v72);
              }
              sub_2245564B0(v70, (uint64_t)&v177);
              if ((_DWORD)v177 != 2 || HIDWORD(*((_QWORD *)&v177 + 1)))
                goto LABEL_237;
              *((_DWORD *)v54 + 1) = DWORD2(v177);
              v78 = (_QWORD *)*((_QWORD *)&v178 + 1);
              *((_QWORD *)&v178 + 1) = 0;
              if (v78)
              {
                for (m = (char *)v78[4]; m != (char *)v78[6]; m -= 16)
                {
                  v81 = (void (*)(uint64_t))*((_QWORD *)m - 2);
                  v80 = *((_QWORD *)m - 1);
                  v81(v80);
                }
                free(m);
                v82 = (_QWORD *)v78[3];
                if (v82)
                {
                  do
                  {
                    v83 = (_QWORD *)*v82;
                    free(v82);
                    v82 = v83;
                  }
                  while (v83);
                }
                free(v78);
              }
              sub_2245564B0(v70, (uint64_t)&v177);
              if ((_DWORD)v177 != 2 || HIDWORD(*((_QWORD *)&v177 + 1)) != 0)
              {
LABEL_237:
                v141 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v141->__vftable = 0;
                v142 = std::bad_cast::bad_cast(v141);
                v142->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v142, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
              }
              *((_DWORD *)v54 + 2) = DWORD2(v177);
              v85 = (_QWORD *)*((_QWORD *)&v178 + 1);
              *((_QWORD *)&v178 + 1) = 0;
              if (v85)
              {
                for (n = (char *)v85[4]; n != (char *)v85[6]; n -= 16)
                {
                  v88 = (void (*)(uint64_t))*((_QWORD *)n - 2);
                  v87 = *((_QWORD *)n - 1);
                  v88(v87);
                }
                free(n);
                v89 = (_QWORD *)v85[3];
                if (v89)
                {
                  do
                  {
                    v90 = (_QWORD *)*v89;
                    free(v89);
                    v89 = v90;
                  }
                  while (v90);
                }
                free(v85);
              }
              v54 += 12;
            }
            while (v54 != v69);
            goto LABEL_150;
          }
          if ((unint64_t)v154 > 0x1555555555555555)
            sub_22316E078();
          v58 = 0xAAAAAAAAAAAAAAABLL * ((v57 - (uint64_t)v54) >> 2);
          if (2 * v58 > (unint64_t)v154)
            v52 = 2 * v58;
          if (v58 >= 0xAAAAAAAAAAAAAAALL)
            v59 = 0x1555555555555555;
          else
            v59 = v52;
          if (v59 > 0x1555555555555555)
            goto LABEL_243;
          v60 = (char *)operator new(12 * v59);
          v61 = &v60[4 * ((v53 - v54) >> 2)];
          v62 = 12 * ((12 * v56 - 12) / 0xC) + 12;
          bzero(v61, v62);
          v63 = v61;
          if (v53 != v54)
          {
            do
            {
              v64 = *(_QWORD *)(v53 - 12);
              v53 -= 12;
              v65 = *((_DWORD *)v53 + 2);
              *(_QWORD *)(v63 - 12) = v64;
              v63 -= 12;
              *((_DWORD *)v63 + 2) = v65;
            }
            while (v53 != v54);
            v53 = *v51;
          }
          v66 = v152;
          v67 = &v61[v62];
          *((_QWORD *)v31 + 9) = v63;
          *((_QWORD *)v31 + 10) = &v61[v62];
          *((_QWORD *)v31 + 11) = &v60[12 * v59];
          if (v53)
          {
            operator delete(v53);
            v67 = (char *)*((_QWORD *)v31 + 10);
          }
          v54 = *v51;
          v53 = v67;
          if (v67 != *v51)
            goto LABEL_114;
        }
LABEL_150:
        if (v153 >= 3)
        {
          *(_QWORD *)&v154 = 0;
          sub_2245543E8(v166, &v154);
          v91 = (_QWORD **)(v31 + 96);
          v92 = (void **)(v31 + 104);
          sub_223198030((uint64_t)(v31 + 96), *((_QWORD **)v31 + 13));
          *((_QWORD *)v31 + 12) = v31 + 104;
          *((_QWORD *)v31 + 13) = 0;
          *((_QWORD *)v31 + 14) = 0;
          v93 = v154;
          v66 = v152;
          if ((_QWORD)v154)
          {
            for (ii = 0; ii != v93; ++ii)
            {
              sub_2245564B0(v166, (uint64_t)&v177);
              if ((_DWORD)v177 != 2 || (v95 = BYTE8(v177), *((_QWORD *)&v177 + 1) >= 0x100uLL))
              {
                v143 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                v143->__vftable = 0;
                v144 = std::bad_cast::bad_cast(v143);
                v144->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                __cxa_throw(v144, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
              }
              v96 = (_QWORD *)*((_QWORD *)&v178 + 1);
              *((_QWORD *)&v178 + 1) = 0;
              if (v96)
              {
                for (jj = (char *)v96[4]; jj != (char *)v96[6]; jj -= 16)
                {
                  v99 = (void (*)(uint64_t))*((_QWORD *)jj - 2);
                  v98 = *((_QWORD *)jj - 1);
                  v99(v98);
                }
                free(jj);
                v100 = (_QWORD *)v96[3];
                if (v100)
                {
                  do
                  {
                    v101 = (_QWORD *)*v100;
                    free(v100);
                    v100 = v101;
                  }
                  while (v101);
                }
                free(v96);
              }
              sub_2245564B0(v166, (uint64_t)&v177);
              switch((_DWORD)v177)
              {
                case 2:
                  v102 = (float)*((unint64_t *)&v177 + 1);
                  v103 = (_QWORD *)*((_QWORD *)&v178 + 1);
                  *((_QWORD *)&v178 + 1) = 0;
                  if (!v103)
                    goto LABEL_181;
                  break;
                case 3:
                  v102 = (float)*((uint64_t *)&v177 + 1);
                  v103 = (_QWORD *)*((_QWORD *)&v178 + 1);
                  *((_QWORD *)&v178 + 1) = 0;
                  if (!v103)
                    goto LABEL_181;
                  break;
                case 4:
                  v102 = *((double *)&v177 + 1);
                  v103 = (_QWORD *)*((_QWORD *)&v178 + 1);
                  *((_QWORD *)&v178 + 1) = 0;
                  if (!v103)
                  {
LABEL_181:
                    v109 = v95;
                    v110 = (float *)*v92;
                    v111 = (float **)(v31 + 104);
                    v112 = (float **)(v31 + 104);
                    if (*v92)
                      goto LABEL_184;
                    goto LABEL_188;
                  }
                  break;
                default:
                  v149 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
                  v149->__vftable = 0;
                  v150 = std::bad_cast::bad_cast(v149);
                  v150->__vftable = (std::bad_cast_vtbl *)&off_24EC79AF8;
                  __cxa_throw(v150, (struct type_info *)&unk_24EC79710, (void (*)(void *))std::exception::~exception);
              }
              for (kk = (char *)v103[4]; kk != (char *)v103[6]; kk -= 16)
              {
                v106 = (void (*)(uint64_t))*((_QWORD *)kk - 2);
                v105 = *((_QWORD *)kk - 1);
                v106(v105);
              }
              free(kk);
              v107 = (_QWORD *)v103[3];
              if (v107)
              {
                do
                {
                  v108 = (_QWORD *)*v107;
                  free(v107);
                  v107 = v108;
                }
                while (v108);
              }
              free(v103);
              v109 = v95;
              v110 = (float *)*v92;
              v111 = (float **)(v31 + 104);
              v112 = (float **)(v31 + 104);
              if (*v92)
              {
                while (1)
                {
LABEL_184:
                  while (1)
                  {
                    v112 = (float **)v110;
                    v113 = *((unsigned __int8 *)v110 + 28);
                    if (v113 <= v109)
                      break;
                    v110 = *v112;
                    v111 = v112;
                    if (!*v112)
                      goto LABEL_188;
                  }
                  if (v113 >= v109)
                    goto LABEL_157;
                  v110 = v112[1];
                  if (!v110)
                  {
                    v111 = v112 + 1;
                    break;
                  }
                }
              }
LABEL_188:
              v114 = (float *)operator new(0x28uLL);
              *((_BYTE *)v114 + 28) = v109;
              v114[8] = v102;
              *(_QWORD *)v114 = 0;
              *((_QWORD *)v114 + 1) = 0;
              *((_QWORD *)v114 + 2) = v112;
              *v111 = v114;
              v115 = (_QWORD *)**v91;
              if (v115)
              {
                *v91 = v115;
                v114 = *v111;
              }
              v116 = *v92;
              v71 = v114 == *v92;
              *((_BYTE *)v114 + 24) = v71;
              if (!v71)
              {
                do
                {
                  v117 = *((_QWORD *)v114 + 2);
                  if (*(_BYTE *)(v117 + 24))
                    break;
                  v118 = *(_BYTE **)(v117 + 16);
                  v119 = *(_QWORD *)v118;
                  if (*(_QWORD *)v118 == v117)
                  {
                    v122 = *((_QWORD *)v118 + 1);
                    if (!v122 || (v123 = *(unsigned __int8 *)(v122 + 24), v120 = (_BYTE *)(v122 + 24), v123))
                    {
                      if (*(float **)v117 == v114)
                      {
                        *(_BYTE *)(v117 + 24) = 1;
                        v118[24] = 0;
                        v126 = *(_QWORD *)(v117 + 8);
                        *(_QWORD *)v118 = v126;
                        if (v126)
                          goto LABEL_205;
                      }
                      else
                      {
                        v124 = *(uint64_t **)(v117 + 8);
                        v125 = *v124;
                        *(_QWORD *)(v117 + 8) = *v124;
                        if (v125)
                        {
                          *(_QWORD *)(v125 + 16) = v117;
                          v118 = *(_BYTE **)(v117 + 16);
                        }
                        v124[2] = (uint64_t)v118;
                        *(_QWORD *)(*(_QWORD *)(v117 + 16) + 8 * (**(_QWORD **)(v117 + 16) != v117)) = v124;
                        *v124 = v117;
                        *(_QWORD *)(v117 + 16) = v124;
                        v118 = (_BYTE *)v124[2];
                        v117 = *(_QWORD *)v118;
                        *((_BYTE *)v124 + 24) = 1;
                        v118[24] = 0;
                        v126 = *(_QWORD *)(v117 + 8);
                        *(_QWORD *)v118 = v126;
                        if (v126)
LABEL_205:
                          *(_QWORD *)(v126 + 16) = v118;
                      }
                      *(_QWORD *)(v117 + 16) = *((_QWORD *)v118 + 2);
                      *(_QWORD *)(*((_QWORD *)v118 + 2) + 8 * (**((_QWORD **)v118 + 2) != (_QWORD)v118)) = v117;
                      *(_QWORD *)(v117 + 8) = v118;
LABEL_155:
                      *((_QWORD *)v118 + 2) = v117;
                      break;
                    }
                  }
                  else if (!v119 || (v121 = *(unsigned __int8 *)(v119 + 24), v120 = (_BYTE *)(v119 + 24), v121))
                  {
                    if (*(float **)v117 == v114)
                    {
                      v128 = *((_QWORD *)v114 + 1);
                      *(_QWORD *)v117 = v128;
                      if (v128)
                      {
                        *(_QWORD *)(v128 + 16) = v117;
                        v118 = *(_BYTE **)(v117 + 16);
                      }
                      *((_QWORD *)v114 + 2) = v118;
                      *(_QWORD *)(*(_QWORD *)(v117 + 16) + 8 * (**(_QWORD **)(v117 + 16) != v117)) = v114;
                      *((_QWORD *)v114 + 1) = v117;
                      *(_QWORD *)(v117 + 16) = v114;
                      v118 = (_BYTE *)*((_QWORD *)v114 + 2);
                      *((_BYTE *)v114 + 24) = 1;
                      v118[24] = 0;
                      v117 = *((_QWORD *)v118 + 1);
                      v127 = *(float **)v117;
                      *((_QWORD *)v118 + 1) = *(_QWORD *)v117;
                      if (!v127)
                        goto LABEL_154;
                    }
                    else
                    {
                      *(_BYTE *)(v117 + 24) = 1;
                      v118[24] = 0;
                      v117 = *((_QWORD *)v118 + 1);
                      v127 = *(float **)v117;
                      *((_QWORD *)v118 + 1) = *(_QWORD *)v117;
                      if (!v127)
                        goto LABEL_154;
                    }
                    *((_QWORD *)v127 + 2) = v118;
LABEL_154:
                    *(_QWORD *)(v117 + 16) = *((_QWORD *)v118 + 2);
                    *(_QWORD *)(*((_QWORD *)v118 + 2) + 8 * (**((_QWORD **)v118 + 2) != (_QWORD)v118)) = v117;
                    *(_QWORD *)v117 = v118;
                    goto LABEL_155;
                  }
                  *(_BYTE *)(v117 + 24) = 1;
                  v114 = (float *)v118;
                  v118[24] = v118 == v116;
                  *v120 = 1;
                }
                while (v118 != v116);
              }
              ++*((_QWORD *)v31 + 14);
LABEL_157:
              ;
            }
          }
        }
        v31 += 120;
      }
      while (v31 != v66);
    }
  }
  v129 = *(__int128 **)(*(_QWORD *)v151 + 352);
  v155 = v129[1];
  v156 = v129[2];
  v157 = v129[3];
  v158 = *((_QWORD *)v129 + 8);
  v154 = *v129;
  v130 = operator new();
  v179 = v156;
  v180 = v157;
  v181 = v158;
  v177 = v154;
  v178 = v155;
  sub_223F62C5C(v130, (unsigned int *)&v177, (uint64_t)&__p, 1);
  v131 = *(_QWORD *)(*(_QWORD *)v151 + 352);
  *(_QWORD *)(*(_QWORD *)v151 + 352) = v130;
  if (v131)
  {
    v132 = sub_223F625F0(v131);
    MEMORY[0x227684CE8](v132, 0x10A0C401B04D127);
  }
  v133 = (char *)__p;
  if (__p)
  {
    v134 = __p;
    if (v160 != __p)
    {
      v135 = (uint64_t)(v160 - 24);
      do
      {
        sub_223198030(v135, *(_QWORD **)(v135 + 8));
        v137 = *(void **)(v135 - 24);
        if (v137)
        {
          *(_QWORD *)(v135 - 16) = v137;
          operator delete(v137);
        }
        v138 = *(void **)(v135 - 48);
        if (v138)
        {
          *(_QWORD *)(v135 - 40) = v138;
          operator delete(v138);
        }
        v136 = (char *)(v135 - 96);
        v135 -= 120;
      }
      while (v136 != v133);
      v134 = __p;
    }
    v160 = v133;
    operator delete(v134);
  }
  v162 = &off_24EC798B8;
  v163 = (void (**)())&unk_24EC79A00;
  v139 = v166;
  v166 = 0;
  if (v139)
  {
    sub_22455612C((_QWORD *)(v139 + 8));
    MEMORY[0x227684CE8](v139, 0x10F2C40853B94B7);
  }
  v163 = off_24EC79B20;
  if (v164)
  {
    v165 = v164;
    operator delete(v164);
  }
  v167[0] = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)((char *)v167 + *(_QWORD *)(v167[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F8] + 24);
  v168[0] = MEMORY[0x24BEDB848] + 16;
  if (SBYTE7(v172) < 0)
    operator delete((void *)v171);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x227684BE0](v174);
  if (SHIBYTE(v176) < 0)
    operator delete((void *)__dst);
  return 0;
}

void sub_22333F110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (a49 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x227684BE0](a12);
  if (*(char *)(v49 - 193) < 0)
    operator delete(*(void **)(v49 - 216));
  _Unwind_Resume(a1);
}

void sub_22333F1B8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  for (; v5; v5 += 120)
  {
    v7 = v4 + v5;
    sub_223198030(v4 + v5 + 96, *(_QWORD **)(v4 + v5 + 104));
    v8 = *(void **)(v4 + v5 + 72);
    if (v8)
    {
      *(_QWORD *)(v7 + 80) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(v7 + 48);
    if (v9)
    {
      *(_QWORD *)(v4 + v5 + 56) = v9;
      operator delete(v9);
    }
  }
  if (v1 != v2)
  {
    v10 = 120 * v2 - 120 * v1;
    v11 = (uint64_t)v3 + 120 * v1 - 24;
    do
    {
      sub_223198030(v11, *(_QWORD **)(v11 + 8));
      v12 = *(void **)(v11 - 24);
      if (v12)
      {
        *(_QWORD *)(v11 - 16) = v12;
        operator delete(v12);
      }
      v13 = *(void **)(v11 - 48);
      if (v13)
      {
        *(_QWORD *)(v11 - 40) = v13;
        operator delete(v13);
      }
      v11 -= 120;
      v10 += 120;
    }
    while (v10);
  }
  operator delete(v3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x22333EE80);
}

uint64_t sub_22333F4C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x227684BE0](a1 + 120);
  return a1;
}

BOOL sub_22333F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (**(double **)a2 == **(double **)a3
    && **(_DWORD **)(a2 + 8) == **(_DWORD **)(a3 + 8)
    && **(_DWORD **)(a2 + 16) == **(_DWORD **)(a3 + 16)
    && **(_DWORD **)(a2 + 24) == **(_DWORD **)(a3 + 24)
    && **(unsigned __int8 **)(a2 + 32) == **(unsigned __int8 **)(a3 + 32)
    && (v3 = *(_QWORD *)(a2 + 40), v4 = *(_QWORD *)(a3 + 40), *(float *)v3 == *(float *)v4)
    && *(_QWORD *)(v3 + 8) == *(_QWORD *)(v4 + 8)
    && *(float *)(v3 + 16) == *(float *)(v4 + 16)
    && *(float *)(v3 + 20) == *(float *)(v4 + 20)
    && *(float *)(v3 + 24) == *(float *)(v4 + 24)
    && *(float *)(v3 + 28) == *(float *)(v4 + 28)
    && *(float *)(v3 + 32) == *(float *)(v4 + 32)
    && *(float *)(v3 + 36) == *(float *)(v4 + 36)
    && *(unsigned __int8 *)(v3 + 40) == *(unsigned __int8 *)(v4 + 40))
  {
    return *(float *)(v3 + 44) == *(float *)(v4 + 44);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22333F670(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

void sub_22333F6B0(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  float64x2_t v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  int64x2_t v36;
  float64x2_t v39;
  int8x16_t v41;
  int64x2_t v42;
  float64x2_t v45;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  unint64_t v65;
  int v66;
  char *v67;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  int v85;
  float32x2_t v86;
  float32x2_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  __int128 v101;
  char *v102;
  char *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  float v121;
  float v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  __int128 v126;
  float32x4_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x4_t v138;
  float v139;
  float v140;
  int8x16_t v141;
  __int128 v142;
  float v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x4_t v146;
  float v147;
  float v148;
  float v149;
  uint64_t (**v150)();
  uint64_t *v151;
  std::__shared_weak_count *v152;
  uint64_t (**v153)();
  _QWORD *v154;
  std::__shared_weak_count *v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  simd_float3x3 v160;

  v8 = *(uint64_t **)(a1 + 16);
  v9 = *(std::__shared_weak_count **)(a1 + 24);
  v151 = v8;
  v152 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v150 = &off_24EC71528;
  if (v8)
  {
    v12 = *v8;
    v13 = (std::__shared_weak_count *)v8[1];
    if (!v13)
      goto LABEL_10;
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (v16)
    {
LABEL_10:
      if (!v12)
        goto LABEL_12;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v12)
LABEL_11:
      sub_2242AE7CC((uint64_t)v151);
  }
LABEL_12:
  v17 = *(_QWORD **)(a1 + 40);
  v18 = *(std::__shared_weak_count **)(a1 + 48);
  v153 = &off_24EC715B8;
  v154 = v17;
  v155 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v17 = v154;
  }
  v153 = &off_24EC71528;
  if (v17)
  {
    v21 = *v17;
    v22 = (std::__shared_weak_count *)v17[1];
    if (!v22)
      goto LABEL_22;
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (v25)
    {
LABEL_22:
      if (!v21)
        goto LABEL_24;
      goto LABEL_23;
    }
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    if (v21)
LABEL_23:
      sub_2242AE7CC((uint64_t)v154);
  }
LABEL_24:
  sub_2242A7F2C((uint64_t)&v150, (uint64_t *)&v156);
  if (!sub_2242AA5A8((uint64_t)&v153, 0))
    sub_2242A7F2C((uint64_t)&v153, (uint64_t *)&v146);
  v26 = *((_QWORD *)&v156 + 1);
  v27 = v156;
  v28 = v157;
  v124 = HIDWORD(v157);
  v29.f64[0] = *(float64_t *)(a1 + 64);
  v29.f64[1] = *(float64_t *)(a1 + 96);
  v146 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v29), *(float64x2_t *)(a1 + 112));
  v30 = sub_223FBAC84((uint64_t)&v156, (uint64_t)&v146);
  v160.columns[1].i32[0] = HIDWORD(v156);
  v160.columns[0].i32[0] = DWORD2(v156);
  v160.columns[2].i64[0] = v157;
  LODWORD(v156) = DWORD2(v156);
  *(_QWORD *)((char *)&v156 + 4) = 0;
  HIDWORD(v156) = 0;
  v157 = v160.columns[1].u32[0];
  v158 = v160.columns[2].i64[0];
  v159 = 1065353216;
  v31 = sub_22322BB84(v30, (uint64_t)&v146, v160);
  v123 = HIDWORD(v26);
  if (HIDWORD(v26))
  {
    v32 = v26;
    if ((_DWORD)v26)
    {
      v33 = 0;
      v139 = v148;
      v140 = v146.f32[0];
      v121 = v149;
      v122 = v147;
      v34 = *(_QWORD *)(a1 + 208);
      v35 = *(int64x2_t *)(a1 + 192);
      v36 = *(int64x2_t *)(a1 + 224);
      _D3 = *(_QWORD *)(a1 + 272);
      _Q4 = *(int64x2_t *)(a1 + 256);
      v39 = (float64x2_t)vzip1q_s64(v35, v36);
      v31.n128_u64[1] = *(_QWORD *)(a1 + 240);
      _Q1 = vzip2q_s64(v35, v36);
      v41 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
      v42 = vzip1q_s64(_Q4, _Q1);
      _D7 = *(double *)(a1 + 304);
      _Q16 = *(float64x2_t *)(a1 + 288);
      v45 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v39, vnegq_f64(_Q16).f64[0]), (float64x2_t)_Q1, _Q16, 1), (float64x2_t)v31, _D7, 0);
      _Q4.i64[0] = *(_QWORD *)(a1 + 264);
      __asm
      {
        FMLS            D1, D4, V16.D[1]
        FMLS            D1, D3, V7.D[0]
      }
      _Q4.i64[0] = vdupq_laneq_s64(v42, 1).u64[0];
      _Q4.i64[1] = v41.i64[0];
      _Q1.i64[1] = 1.0;
      v50 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v45), (float64x2_t)_Q1);
      v138 = v50;
      v51 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39), (float64x2_t)v42.u64[0]);
      v52 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v31), (float64x2_t)*(unint64_t *)(a1 + 272));
      v53 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)_Q4), (float64x2_t)v41.u64[1]);
      *(_QWORD *)&_Q16.f64[0] = vextq_s8(v51, v51, 8uLL).u64[0];
      *(_QWORD *)&v45.f64[0] = vextq_s8(v53, v53, 8uLL).u64[0];
      v54 = (float32x2_t)vextq_s8(v52, v52, 8uLL).u64[0];
      v31.n128_u64[0] = (unint64_t)vdup_n_s32(0x358637BDu);
      *(float32x2_t *)_Q1.i8 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v51.i8, (float32x2_t)v31.n128_u64[0]), 0, *(float32x2_t *)v53.i8), 0, *(float32x2_t *)v52.i8);
      v50.i32[0] = 897988541;
      *(float32x2_t *)_Q4.i8 = vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)&_Q16.f64[0], *(float32x2_t *)v50.f32), 0, *(float32x2_t *)&v45.f64[0]), 0, v54);
      v55 = vmul_f32(*(float32x2_t *)v51.i8, 0);
      *(float32x2_t *)&v39.f64[0] = vmla_f32(vmla_f32(v55, (float32x2_t)v31.n128_u64[0], *(float32x2_t *)v53.i8), 0, *(float32x2_t *)v52.i8);
      v56 = vmul_f32(*(float32x2_t *)&_Q16.f64[0], 0);
      v144 = v54;
      v145 = *(float32x2_t *)v52.i8;
      v31.n128_u64[0] = (unint64_t)vmla_f32(vmla_f32(v56, *(float32x2_t *)v50.f32, *(float32x2_t *)&v45.f64[0]), 0, v54);
      v132 = vmla_f32(v56, 0, *(float32x2_t *)&v45.f64[0]);
      v133 = vmla_f32(v55, 0, *(float32x2_t *)v53.i8);
      v131 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 0);
      v57 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)_Q1.i8, *(float *)v51.i32), *(float32x2_t *)&v39.f64[0], *(float *)v53.i32);
      v58 = vmla_f32(vmul_f32(*(float32x2_t *)_Q4.i8, *(float32x2_t *)v51.i8), *(float32x2_t *)v53.i8, (float32x2_t)v31.n128_u64[0]);
      v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1);
      v60 = vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)_Q1.i8, *(float32x2_t *)v51.i8, 1), *(float32x2_t *)&v39.f64[0], *(float32x2_t *)v53.i8, 1);
      v136 = *(float32x2_t *)v53.i8;
      v137 = *(float32x2_t *)v51.i8;
      v61 = vmla_laneq_f32(vmul_laneq_f32(*(float32x2_t *)_Q1.i8, (float32x4_t)v51, 2), *(float32x2_t *)&v39.f64[0], (float32x4_t)v53, 2);
      v62 = (float32x2_t)vdup_laneq_s32((int32x4_t)v52, 2);
      v63 = vmla_lane_f32(vmul_lane_f32(*(float32x2_t *)_Q4.i8, *(float32x2_t *)v51.i8, 1), (float32x2_t)v31.n128_u64[0], *(float32x2_t *)v53.i8, 1);
      v134 = *(float32x2_t *)&v45.f64[0];
      v135 = *(float32x2_t *)&_Q16.f64[0];
      v64 = vmla_f32(vmul_f32(*(float32x2_t *)_Q4.i8, *(float32x2_t *)&_Q16.f64[0]), *(float32x2_t *)&v45.f64[0], (float32x2_t)v31.n128_u64[0]);
      v129 = v27;
      v130 = a2;
      do
      {
        v65 = 0;
        v143 = v121 + (float)(v122 * (float)v33);
        v125 = v33;
        v66 = v124 * v33;
        do
        {
          v31.n128_u32[0] = *(_DWORD *)(v27 + 4 * (v66 + v28 * v65));
          if (v31.n128_f32[0] >= 0.1
            && (*(_DWORD *)(v27 + 4 * (v66 + v28 * v65)) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
          {
            __asm { FMOV            V2.4S, #1.0 }
            _Q2.f32[0] = v139 + (float)(v140 * (float)v65);
            _Q2.f32[1] = v143;
            v70 = (int8x16_t)vmulq_n_f32(_Q2, v31.n128_f32[0]);
            *(float32x2_t *)v71.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v137, *(float *)v70.i32), v136, *(float32x2_t *)v70.i8, 1), v145, (float32x4_t)v70, 2);
            *(float32x2_t *)&v71.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v135, *(float32x2_t *)v70.i8), v134, *(float32x2_t *)v70.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL), v144);
            v72 = vaddq_f32(v71, v138);
            v74 = (char *)a3[1];
            v73 = (unint64_t)a3[2];
            if ((unint64_t)v74 < v73)
            {
              *((_DWORD *)v74 + 2) = v72.i32[2];
              *(_QWORD *)v74 = v72.i64[0];
              v75 = v74 + 12;
              goto LABEL_57;
            }
            v76 = (char *)*a3;
            v77 = 0xAAAAAAAAAAAAAAABLL * ((v74 - (_BYTE *)*a3) >> 2);
            v78 = v77 + 1;
            if (v77 + 1 > 0x1555555555555555)
              sub_22316E078();
            v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (_QWORD)v76) >> 2);
            if (2 * v79 > v78)
              v78 = 2 * v79;
            if (v79 >= 0xAAAAAAAAAAAAAAALL)
              v80 = 0x1555555555555555;
            else
              v80 = v78;
            v141 = v70;
            if (v80)
            {
              v127 = v72;
              if (v80 > 0x1555555555555555)
                sub_223174E94();
              v81 = (char *)operator new(12 * v80);
              v70 = v141;
              v72 = v127;
            }
            else
            {
              v81 = 0;
            }
            v82 = &v81[12 * v77];
            *(_QWORD *)v82 = v72.i64[0];
            *((_DWORD *)v82 + 2) = v72.i32[2];
            v83 = v82;
            if (v74 == v76)
            {
              v27 = v129;
              v75 = v82 + 12;
              *a3 = v82;
              a3[1] = v82 + 12;
              a3[2] = &v81[12 * v80];
              if (v74)
                goto LABEL_55;
            }
            else
            {
              v27 = v129;
              do
              {
                v84 = *(_QWORD *)(v74 - 12);
                v74 -= 12;
                v85 = *((_DWORD *)v74 + 2);
                *(_QWORD *)(v83 - 12) = v84;
                v83 -= 12;
                *((_DWORD *)v83 + 2) = v85;
              }
              while (v74 != v76);
              v74 = (char *)*a3;
              v75 = v82 + 12;
              *a3 = v83;
              a3[1] = v82 + 12;
              a3[2] = &v81[12 * v80];
              if (v74)
              {
LABEL_55:
                operator delete(v74);
                v70 = v141;
              }
            }
            a2 = v130;
LABEL_57:
            a3[1] = v75;
            v31 = (__n128)vmulq_f32((float32x4_t)v70, (float32x4_t)v70);
            v31.n128_f32[0] = vmuls_lane_f32(0.01, (float32x4_t)v31, 2);
            v86 = vmla_n_f32(v133, v145, v31.n128_f32[0]);
            v87 = vmla_f32(v132, (float32x2_t)v31.n128_u64[0], v144);
            *(float32x2_t *)&v88 = vmla_f32(v57, v131, v86);
            *((float32x2_t *)&v88 + 1) = vmla_f32(v58, v145, v87);
            *(float32x2_t *)&v89 = vmla_f32(v60, v59, v86);
            *((float32x2_t *)&v89 + 1) = vmla_f32(v63, v59, v87);
            *(float32x2_t *)&v90 = vmla_f32(v61, v62, v86);
            v31.n128_u64[0] = (unint64_t)vmla_f32(v64, v144, v87);
            *((_QWORD *)&v90 + 1) = v31.n128_u64[0];
            v92 = (char *)a4[1];
            v91 = (unint64_t)a4[2];
            if ((unint64_t)v92 < v91)
            {
              *((_DWORD *)v92 + 2) = DWORD2(v88);
              *(_QWORD *)v92 = v88;
              *((_DWORD *)v92 + 5) = DWORD2(v89);
              *(_QWORD *)(v92 + 12) = v89;
              *((_DWORD *)v92 + 8) = v31.n128_u32[0];
              v67 = v92 + 36;
              *((_QWORD *)v92 + 3) = v90;
            }
            else
            {
              v93 = (char *)*a4;
              v94 = 0x8E38E38E38E38E39 * ((v92 - (_BYTE *)*a4) >> 2);
              v95 = v94 + 1;
              if (v94 + 1 > 0x71C71C71C71C71CLL)
                sub_22316E078();
              v96 = 0x8E38E38E38E38E39 * ((uint64_t)(v91 - (_QWORD)v93) >> 2);
              if (2 * v96 > v95)
                v95 = 2 * v96;
              if (v96 >= 0x38E38E38E38E38ELL)
                v97 = 0x71C71C71C71C71CLL;
              else
                v97 = v95;
              if (v97)
              {
                v126 = v88;
                v128 = v89;
                v142 = v90;
                if (v97 > 0x71C71C71C71C71CLL)
                  sub_223174E94();
                v98 = (char *)operator new(36 * v97);
                v90 = v142;
                v88 = v126;
                v89 = v128;
              }
              else
              {
                v98 = 0;
              }
              v99 = &v98[36 * v94];
              *(_QWORD *)v99 = v88;
              *((_DWORD *)v99 + 2) = DWORD2(v88);
              *((_DWORD *)v99 + 5) = DWORD2(v89);
              *(_QWORD *)(v99 + 12) = v89;
              *((_QWORD *)v99 + 3) = v90;
              *((_DWORD *)v99 + 8) = DWORD2(v90);
              v100 = v99;
              if (v92 == v93)
              {
                v27 = v129;
                a2 = v130;
                v103 = &v98[36 * v97];
                v67 = v99 + 36;
                *a4 = v99;
                a4[1] = v99 + 36;
                a4[2] = v103;
                if (v92)
                  goto LABEL_72;
              }
              else
              {
                v27 = v129;
                do
                {
                  v31 = *(__n128 *)(v92 - 36);
                  v101 = *(_OWORD *)(v92 - 20);
                  *((_DWORD *)v100 - 1) = *((_DWORD *)v92 - 1);
                  *(_OWORD *)(v100 - 20) = v101;
                  *(__n128 *)(v100 - 36) = v31;
                  v100 -= 36;
                  v92 -= 36;
                }
                while (v92 != v93);
                v92 = (char *)*a4;
                v102 = &v98[36 * v97];
                v67 = v99 + 36;
                *a4 = v100;
                a4[1] = v99 + 36;
                a4[2] = v102;
                a2 = v130;
                if (v92)
LABEL_72:
                  operator delete(v92);
              }
            }
            a4[1] = v67;
          }
          v65 += a2;
        }
        while (v65 < v32);
        v33 = v125 + a2;
      }
      while (v125 + a2 < v123);
    }
  }
  if (v154)
  {
    v105 = *v154;
    v104 = (std::__shared_weak_count *)v154[1];
    if (v104)
    {
      v106 = (unint64_t *)&v104->__shared_owners_;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      do
        v108 = __ldaxr(v106);
      while (__stlxr(v108 - 1, v106));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v104->__on_zero_shared)(v104, v31);
        std::__shared_weak_count::__release_weak(v104);
        if (!v105)
          goto LABEL_86;
        goto LABEL_85;
      }
    }
    if (v105)
LABEL_85:
      sub_2242AE9A8((uint64_t)v154);
  }
LABEL_86:
  v153 = &off_24EC715B8;
  v109 = v155;
  if (!v155)
    goto LABEL_90;
  v110 = (unint64_t *)&v155->__shared_owners_;
  do
    v111 = __ldaxr(v110);
  while (__stlxr(v111 - 1, v110));
  if (!v111)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v109->__on_zero_shared)(v109, v31);
    std::__shared_weak_count::__release_weak(v109);
    v112 = v151;
    if (!v151)
      goto LABEL_98;
  }
  else
  {
LABEL_90:
    v112 = v151;
    if (!v151)
      goto LABEL_98;
  }
  v114 = *v112;
  v113 = (std::__shared_weak_count *)v112[1];
  if (!v113)
    goto LABEL_96;
  v115 = (unint64_t *)&v113->__shared_owners_;
  do
    v116 = __ldxr(v115);
  while (__stxr(v116 + 1, v115));
  do
    v117 = __ldaxr(v115);
  while (__stlxr(v117 - 1, v115));
  if (v117)
  {
LABEL_96:
    if (!v114)
      goto LABEL_98;
    goto LABEL_97;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v113->__on_zero_shared)(v113, v31);
  std::__shared_weak_count::__release_weak(v113);
  if (v114)
LABEL_97:
    sub_2242AE9A8((uint64_t)v151);
LABEL_98:
  v150 = &off_24EC715B8;
  v118 = v152;
  if (v152)
  {
    v119 = (unint64_t *)&v152->__shared_owners_;
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v118->__on_zero_shared)(v118, v31);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
}

void sub_223340018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55)
{
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;

  v56 = a55;
  if (a55)
  {
    p_shared_owners = (unint64_t *)&a55->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
      sub_2242A86B4(&a50);
      _Unwind_Resume(a1);
    }
  }
  sub_2242A86B4(&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_2233400F8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_223340138(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 336))
  {
    v2 = *(void **)(a1 + 312);
    if (v2)
    {
      *(_QWORD *)(a1 + 320) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 288);
    if (v3)
    {
      *(_QWORD *)(a1 + 296) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 280))
  {
    v4 = *(void **)(a1 + 256);
    if (v4)
    {
      *(_QWORD *)(a1 + 264) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 232);
    if (v5)
    {
      *(_QWORD *)(a1 + 240) = v5;
      operator delete(v5);
    }
  }
  *(_QWORD *)a1 = &off_24EC64998;
  return a1;
}

uint64_t sub_2233401B4(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_2233401FC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 656))
    *(_QWORD *)(a1 + 424) = &off_24EC64998;
  if (*(_BYTE *)(a1 + 336))
  {
    v2 = *(void **)(a1 + 312);
    if (v2)
    {
      *(_QWORD *)(a1 + 320) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 288);
    if (v3)
    {
      *(_QWORD *)(a1 + 296) = v3;
      operator delete(v3);
    }
  }
  if (*(_BYTE *)(a1 + 280))
  {
    v4 = *(void **)(a1 + 256);
    if (v4)
    {
      *(_QWORD *)(a1 + 264) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 232);
    if (v5)
    {
      *(_QWORD *)(a1 + 240) = v5;
      operator delete(v5);
    }
  }
  *(_QWORD *)a1 = &off_24EC64998;
  return a1;
}

_QWORD *sub_223340284(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  size_t v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * (v6 >> 2)];
    v8 = 12 * ((v6 - 12) / 0xCuLL) + 12;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0x8E38E38E38E38E39 * (v11 >> 2) >= 0x71C71C71C71C71DLL)
      sub_22316E078();
    v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[4 * (v11 >> 2)];
    v13 = 36 * ((v11 - 36) / 0x24uLL) + 36;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  return a1;
}

void sub_2233403F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223340424(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void **v32;

  v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(void **)(a1 + 72);
  if (v3 == v2)
    goto LABEL_17;
  do
  {
    v5 = v3 - 320;
    *(_QWORD *)(v3 - 288) = &off_24EC715B8;
    v6 = *(std::__shared_weak_count **)(v3 - 272);
    if (!v6)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      *(_QWORD *)(v3 - 312) = &off_24EC715B8;
      v9 = *(std::__shared_weak_count **)(v3 - 296);
      if (!v9)
        goto LABEL_4;
    }
    else
    {
LABEL_9:
      *(_QWORD *)(v3 - 312) = &off_24EC715B8;
      v9 = *(std::__shared_weak_count **)(v3 - 296);
      if (!v9)
        goto LABEL_4;
    }
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_4:
    v3 -= 320;
  }
  while (v5 != v2);
  v4 = *(void **)(a1 + 72);
LABEL_17:
  *(_QWORD *)(a1 + 80) = v2;
  operator delete(v4);
LABEL_18:
  v12 = *(_QWORD *)(a1 + 48);
  if (!v12)
    goto LABEL_39;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(void **)(a1 + 48);
  if (v13 == v12)
    goto LABEL_38;
  while (2)
  {
    v15 = v13 - 344;
    *(_QWORD *)(v13 - 288) = &off_24EC715B8;
    v16 = *(std::__shared_weak_count **)(v13 - 272);
    if (!v16)
      goto LABEL_26;
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      *(_QWORD *)(v13 - 312) = &off_24EC715B8;
      v19 = *(std::__shared_weak_count **)(v13 - 296);
      if (v19)
      {
LABEL_27:
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
LABEL_26:
      *(_QWORD *)(v13 - 312) = &off_24EC715B8;
      v19 = *(std::__shared_weak_count **)(v13 - 296);
      if (v19)
        goto LABEL_27;
    }
    *(_QWORD *)(v13 - 336) = &off_24EC715B8;
    v22 = *(std::__shared_weak_count **)(v13 - 320);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v13 -= 344;
    if (v15 != v12)
      continue;
    break;
  }
  v14 = *(void **)(a1 + 48);
LABEL_38:
  *(_QWORD *)(a1 + 56) = v12;
  operator delete(v14);
LABEL_39:
  v25 = *(_QWORD *)(a1 + 24);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 32);
    v27 = *(void **)(a1 + 24);
    if (v26 != v25)
    {
      v28 = v26 - 288;
      do
      {
        v30 = *(void **)v28;
        if (*(_QWORD *)v28)
        {
          *(_QWORD *)(v28 + 8) = v30;
          operator delete(v30);
        }
        v29 = v28 - 8;
        v28 -= 296;
      }
      while (v29 != v25);
      v27 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v25;
    operator delete(v27);
  }
  v32 = (void **)a1;
  sub_223314A50(&v32);
  return a1;
}

void sub_2233406A4(char **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 *v19;
  char *v20;
  __int128 *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = a1[1];
  v10 = a2 - (_QWORD)*a1;
  v11 = &(*a1)[v10 & 0xFFFFFFFFFFFFFFF0];
  v12 = a1[2];
  if (a5 > (v12 - v9) >> 4)
  {
    v13 = a5 + ((v9 - v8) >> 4);
    if (v13 >> 60)
      sub_22316E078();
    v14 = v12 - v8;
    v15 = v14 >> 3;
    if (v14 >> 3 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 >> 60)
        sub_223174E94();
      v17 = (char *)operator new(16 * v16);
    }
    else
    {
      v17 = 0;
    }
    v29 = &v17[16 * (v10 >> 4)];
    v30 = 16 * a5;
    v31 = &v29[16 * a5];
    v32 = v29;
    do
    {
      v33 = *v6++;
      *(_OWORD *)v32 = v33;
      v32 += 16;
      v30 -= 16;
    }
    while (v30);
    v34 = *a1;
    if (*a1 != v11)
    {
      v35 = v11;
      do
      {
        *((_OWORD *)v29 - 1) = *((_OWORD *)v35 - 1);
        v29 -= 16;
        v35 -= 16;
      }
      while (v35 != v34);
      v9 = a1[1];
    }
    v36 = &v17[16 * v16];
    if (v9 != v11)
      memmove(v31, v11, v9 - v11);
    v37 = *a1;
    *a1 = v29;
    a1[1] = &v31[v9 - v11];
    a1[2] = v36;
    if (v37)
      operator delete(v37);
    return;
  }
  v18 = (v9 - v11) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[a5];
    v20 = a1[1];
    v24 = &v11[16 * a5];
    v25 = &v9[-16 * a5];
    v26 = v20;
    if (v25 >= v9)
    {
LABEL_22:
      a1[1] = v26;
      if (v20 != v24)
        memmove(&v20[-16 * ((v20 - v24) >> 4)], v11, v20 - v24);
      for (; v6 != v19; v11 += 16)
      {
        v28 = *v6++;
        *(_OWORD *)v11 = v28;
      }
      return;
    }
LABEL_20:
    v26 = v20;
    do
    {
      v27 = *(_OWORD *)v25;
      v25 += 16;
      *(_OWORD *)v26 = v27;
      v26 += 16;
    }
    while (v25 < v9);
    goto LABEL_22;
  }
  v19 = &a3[v18];
  v20 = a1[1];
  if (v19 != a4)
  {
    v21 = v19;
    v22 = a1[1];
    do
    {
      v23 = *v21++;
      *(_OWORD *)v22 = v23;
      v22 += 16;
      v20 += 16;
    }
    while (v21 != a4);
  }
  a1[1] = v20;
  if (v9 - v11 >= 1)
  {
    v24 = &v11[16 * a5];
    v25 = &v20[-16 * a5];
    v26 = v20;
    if (v25 >= v9)
      goto LABEL_22;
    goto LABEL_20;
  }
}

void sub_2233408D4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x186186186186187)
      sub_223323BA8();
    v3 = a1[1] - *a1;
    v18 = a1 + 2;
    v4 = 168 * a2;
    __p = operator new(168 * a2);
    v15 = (char *)__p + v3;
    v16 = (char *)__p + v3;
    v17 = (char *)__p + v4;
    sub_223340A20(a1, &__p);
    v5 = v15;
    while (1)
    {
      v7 = v16;
      if (v16 == v5)
        break;
      v16 -= 168;
      v8 = (void *)*((_QWORD *)v7 - 6);
      if (v8)
      {
        *((_QWORD *)v7 - 5) = v8;
        operator delete(v8);
      }
      v9 = *((_QWORD *)v7 - 9);
      if (v9)
      {
        v10 = *((_QWORD *)v7 - 8);
        v6 = (void *)*((_QWORD *)v7 - 9);
        if (v10 != v9)
        {
          v11 = *((_QWORD *)v7 - 8);
          do
          {
            v13 = *(void **)(v11 - 24);
            v11 -= 24;
            v12 = v13;
            if (v13)
            {
              *(_QWORD *)(v10 - 16) = v12;
              operator delete(v12);
            }
            v10 = v11;
          }
          while (v11 != v9);
          v6 = (void *)*((_QWORD *)v7 - 9);
        }
        *((_QWORD *)v7 - 8) = v9;
        operator delete(v6);
      }
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_223340A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223340B44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_223340A20(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      result = (uint64_t *)sub_223323C9C(v6 + v7 - 168, (uint64_t *)(v4 + v7 - 168));
      v7 -= 168;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_223340ACC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if (v3)
  {
    do
    {
      v6 = (void *)v2[15];
      if (v6)
      {
        v2[16] = v6;
        operator delete(v6);
      }
      v7 = v2[12];
      if (v7)
      {
        v8 = v2[13];
        v5 = (void *)v2[12];
        if (v8 != v7)
        {
          v9 = v2[13];
          do
          {
            v11 = *(void **)(v9 - 24);
            v9 -= 24;
            v10 = v11;
            if (v11)
            {
              *(_QWORD *)(v8 - 16) = v10;
              operator delete(v10);
            }
            v8 = v9;
          }
          while (v9 != v7);
          v5 = (void *)v2[12];
        }
        v2[13] = v7;
        operator delete(v5);
      }
      v2 += 21;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223340B44(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
    v6 = *(_QWORD *)(i - 72);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 64);
      v4 = *(void **)(i - 72);
      if (v7 != v6)
      {
        v8 = *(_QWORD *)(i - 64);
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v7 - 16) = v9;
            operator delete(v9);
          }
          v7 = v8;
        }
        while (v8 != v6);
        v4 = *(void **)(i - 72);
      }
      *(_QWORD *)(i - 64) = v6;
      operator delete(v4);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_223340BF8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v15;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v7 = sub_22456636C((unsigned __int8 *)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v12[1];
            if (v15 == v7)
            {
              if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
                return v12;
            }
            else if ((v15 & (v9 - 1)) != v3)
            {
              goto LABEL_31;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_31;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v7)
          {
            if (v12[2] == *(_QWORD *)a2 && v12[3] == *(_QWORD *)(a2 + 8))
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_31:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v20)
    {
LABEL_34:
      *v12 = *v20;
LABEL_69:
      *v20 = v12;
      goto LABEL_70;
    }
  }
  else
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_45;
    if (prime < v9)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v9)
LABEL_45:
        sub_2231B0668(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v28 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v3 = v8 % v9;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v20)
          goto LABEL_34;
      }
      else
      {
        v3 = v8;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v20)
          goto LABEL_34;
      }
    }
    else
    {
      v3 = v28 & v8;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v8));
      if (v20)
        goto LABEL_34;
    }
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v29 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v29 >= v9)
        v29 %= v9;
    }
    else
    {
      v29 &= v9 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_223340F14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223340F28(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v14;

  v4 = sub_22456636C((unsigned __int8 *)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return v8;
  v8 = (_QWORD *)*v8;
  if (!v8)
    return v8;
  if (v6.u32[0] >= 2uLL)
  {
    while (1)
    {
      v12 = v8[1];
      if (v4 == v12)
      {
        if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
          return v8;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
        if (v12 != v7)
          return 0;
      }
      v8 = (_QWORD *)*v8;
      if (!v8)
        return v8;
    }
  }
  v10 = *(_QWORD *)&v5 - 1;
  while (1)
  {
    v14 = v8[1];
    if (v4 != v14)
      break;
    if (v8[2] == *(_QWORD *)a2 && v8[3] == *(_QWORD *)(a2 + 8))
      return v8;
LABEL_26:
    v8 = (_QWORD *)*v8;
    if (!v8)
      return v8;
  }
  if ((v14 & v10) == v7)
    goto LABEL_26;
  return 0;
}

void **sub_223341058(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v2 = (char *)a1[9];
  if (v2)
  {
    v3 = (char *)a1[10];
    v4 = a1[9];
    if (v3 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v7 = *((_QWORD *)v3 - 9);
        if (v7)
        {
          v8 = *((_QWORD *)v3 - 8);
          v5 = (void *)*((_QWORD *)v3 - 9);
          if (v8 != v7)
          {
            v9 = *((_QWORD *)v3 - 8);
            do
            {
              v11 = *(void **)(v9 - 24);
              v9 -= 24;
              v10 = v11;
              if (v11)
              {
                *(_QWORD *)(v8 - 16) = v10;
                operator delete(v10);
              }
              v8 = v9;
            }
            while (v9 != v7);
            v5 = (void *)*((_QWORD *)v3 - 9);
          }
          *((_QWORD *)v3 - 8) = v7;
          operator delete(v5);
        }
        v3 -= 168;
      }
      while (v3 != v2);
      v4 = a1[9];
    }
    a1[10] = v2;
    operator delete(v4);
  }
  v12 = a1[6];
  if (v12)
  {
    a1[7] = v12;
    operator delete(v12);
  }
  v13 = a1[3];
  if (v13)
  {
    a1[4] = v13;
    operator delete(v13);
  }
  v14 = *a1;
  if (*a1)
  {
    v15 = (uint64_t)a1[1];
    v16 = *a1;
    if ((void *)v15 != v14)
    {
      do
      {
        v15 -= 464;
        sub_22324A5A0(v15);
      }
      while ((void *)v15 != v14);
      v16 = *a1;
    }
    a1[1] = v14;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_223341170(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int *v14;
  int *v15;
  int *v16;
  BOOL v17;
  _QWORD *v18;
  char v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v31;
  _QWORD *v32;
  _QWORD *v33[2];
  uint64_t v34;
  int v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[23];
  _BYTE v44[55];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (int *)(a1 + 8);
  v8 = a2[2];
  *(_QWORD *)(a1 + 16) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v7;
  }
  v9 = *a4;
  v10 = a4[1];
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a3;
  v11 = *(_OWORD *)(a3 + 16);
  v12 = *(_OWORD *)(a3 + 32);
  v13 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 80) = v11;
  *(_QWORD *)&v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 136) = v11;
  *(double *)(a1 + 144) = *(double *)&v11 / 10.0;
  *(double *)(a1 + 152) = -*(double *)&v11;
  sub_223311CF0(a1 + 160, 1uLL, 4uLL, 1uLL, 1uLL);
  v33[0] = 0;
  v33[1] = 0;
  v32 = v33;
  v14 = *(int **)a1;
  if (*(int **)a1 == v7)
    goto LABEL_14;
  do
  {
    sub_22331C988(&v32, (uint64_t *)v33, v14 + 8, (uint64_t)(v14 + 8));
    v15 = (int *)*((_QWORD *)v14 + 1);
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = *(int **)v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (int *)*((_QWORD *)v14 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v14;
        v14 = v16;
      }
      while (!v17);
    }
    v14 = v16;
  }
  while (v16 != v7);
  v18 = v33[0];
  if (!v33[0])
  {
LABEL_14:
    v19 = 0;
    goto LABEL_15;
  }
  while (1)
  {
    v31 = *((_DWORD *)v18 + 8);
    if (v31 <= 1)
      break;
LABEL_19:
    v18 = (_QWORD *)*v18;
    if (!v18)
      goto LABEL_14;
  }
  if (v31 != 1)
  {
    ++v18;
    goto LABEL_19;
  }
  v19 = 1;
LABEL_15:
  v20 = *(unsigned __int8 *)(a1 + 57);
  v21 = *(_BYTE *)(a1 + 58);
  v22 = *(_BYTE *)(a1 + 61);
  v23 = *(_QWORD *)(a1 + 72);
  v24 = *(_DWORD *)(a1 + 80);
  v25 = *(_BYTE *)(a1 + 84);
  v26 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v44[7] = *(_OWORD *)(a1 + 88);
  *(_OWORD *)&v44[23] = v26;
  *(_OWORD *)&v44[39] = *(_OWORD *)(a1 + 120);
  v27 = operator new();
  v28 = v27;
  v34 = v23;
  v41 = *(_OWORD *)v44;
  if (v20)
    v29 = 1;
  else
    v29 = v19;
  v35 = v24;
  v36 = 1;
  v37 = v29;
  v38 = v21;
  v39 = v22;
  v40 = v25;
  v42 = *(_OWORD *)&v44[16];
  *(_OWORD *)v43 = *(_OWORD *)&v44[32];
  *(_QWORD *)&v43[15] = *(_QWORD *)&v44[47];
  sub_223F62C5C(v27, (unsigned int *)&v34, 0, 0);
  *(_QWORD *)(a1 + 352) = v28;
  sub_223198030((uint64_t)&v32, v33[0]);
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  return a1;
}

void sub_2233413E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  MEMORY[0x227684CE8](v14, 0x10A0C401B04D127);
  sub_223198030((uint64_t)&a10, a11);
  sub_223341454(v12);
  sub_223198030(v11, *(_QWORD **)(v11 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_223341454(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void **v32;

  v2 = *(_QWORD *)(a1 + 144);
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(void **)(a1 + 144);
  if (v3 == v2)
    goto LABEL_17;
  do
  {
    v5 = v3 - 320;
    *(_QWORD *)(v3 - 288) = &off_24EC715B8;
    v6 = *(std::__shared_weak_count **)(v3 - 272);
    if (!v6)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      *(_QWORD *)(v3 - 312) = &off_24EC715B8;
      v9 = *(std::__shared_weak_count **)(v3 - 296);
      if (!v9)
        goto LABEL_4;
    }
    else
    {
LABEL_9:
      *(_QWORD *)(v3 - 312) = &off_24EC715B8;
      v9 = *(std::__shared_weak_count **)(v3 - 296);
      if (!v9)
        goto LABEL_4;
    }
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_4:
    v3 -= 320;
  }
  while (v5 != v2);
  v4 = *(void **)(a1 + 144);
LABEL_17:
  *(_QWORD *)(a1 + 152) = v2;
  operator delete(v4);
LABEL_18:
  v12 = *(_QWORD *)(a1 + 96);
  if (!v12)
    goto LABEL_39;
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(void **)(a1 + 96);
  if (v13 == v12)
    goto LABEL_38;
  while (2)
  {
    v15 = v13 - 344;
    *(_QWORD *)(v13 - 288) = &off_24EC715B8;
    v16 = *(std::__shared_weak_count **)(v13 - 272);
    if (!v16)
      goto LABEL_26;
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      *(_QWORD *)(v13 - 312) = &off_24EC715B8;
      v19 = *(std::__shared_weak_count **)(v13 - 296);
      if (v19)
      {
LABEL_27:
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
LABEL_26:
      *(_QWORD *)(v13 - 312) = &off_24EC715B8;
      v19 = *(std::__shared_weak_count **)(v13 - 296);
      if (v19)
        goto LABEL_27;
    }
    *(_QWORD *)(v13 - 336) = &off_24EC715B8;
    v22 = *(std::__shared_weak_count **)(v13 - 320);
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v13 -= 344;
    if (v15 != v12)
      continue;
    break;
  }
  v14 = *(void **)(a1 + 96);
LABEL_38:
  *(_QWORD *)(a1 + 104) = v12;
  operator delete(v14);
LABEL_39:
  v25 = *(_QWORD *)(a1 + 48);
  if (v25)
  {
    v26 = *(_QWORD *)(a1 + 56);
    v27 = *(void **)(a1 + 48);
    if (v26 != v25)
    {
      v28 = v26 - 288;
      do
      {
        v30 = *(void **)v28;
        if (*(_QWORD *)v28)
        {
          *(_QWORD *)(v28 + 8) = v30;
          operator delete(v30);
        }
        v29 = v28 - 8;
        v28 -= 296;
      }
      while (v29 != v25);
      v27 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v25;
    operator delete(v27);
  }
  v32 = (void **)a1;
  sub_223314A50(&v32);
  return a1;
}

uint64_t sub_2233416D4(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = *(uint64_t **)(result + 360);
    *(_QWORD *)(result + 360) = 0;
    if (v2)
    {
      v3 = *v2;
      *v2 = 0;
      if (v3)
        ((void (*)(void))v2[1])();
      MEMORY[0x227684CE8](v2, 0xA0C40AFF93C70);
    }
    v4 = *(_QWORD *)(v1 + 352);
    *(_QWORD *)(v1 + 352) = 0;
    if (v4)
    {
      v5 = sub_223F625F0(v4);
      MEMORY[0x227684CE8](v5, 0x10A0C401B04D127);
    }
    sub_223341454(v1 + 160);
    sub_223198030(v1, *(_QWORD **)(v1 + 8));
    JUMPOUT(0x227684CE8);
  }
  return result;
}

uint64_t sub_223341788(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    sub_223198030(i - 24, *(_QWORD **)(i - 16));
    v4 = *(void **)(i - 48);
    if (v4)
    {
      *(_QWORD *)(i - 40) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 72);
    if (v5)
    {
      *(_QWORD *)(i - 64) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223341808(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_QWORD *)(a1 + 28) = v5;
  v6 = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = *(_BYTE **)(a2 + 48);
  v7 = *(_BYTE **)(a2 + 56);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_22316E078();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = &v10[8 * (v9 >> 3)];
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v10, v8, v11);
    *(_QWORD *)(a1 + 56) = &v10[v11];
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v13 = *(_BYTE **)(a2 + 72);
  v12 = *(_BYTE **)(a2 + 80);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v15 = (char *)operator new(v14);
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v15;
    v16 = &v15[4 * (v14 >> 2)];
    *(_QWORD *)(a1 + 88) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 80) = v16;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 112) = 0;
  sub_2233419AC((uint64_t *)(a1 + 96), *(unsigned __int8 **)(a2 + 96), (unsigned __int8 *)(a2 + 104));
  return a1;
}

void sub_223341964(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  _QWORD **v5;
  void *v7;
  void *v8;

  sub_223198030(v4, *v5);
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2233419AC(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = sub_223341AB8(v7, v8, v18, &v17, v6 + 28);
      if (*result)
      {
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v11 + 28) = *(_QWORD *)(v6 + 28);
        v12 = v18[0];
        *v11 = 0;
        v11[1] = 0;
        v11[2] = (uint64_t)v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = v11;
        }
        result = sub_2231A9A8C((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *sub_223341AB8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 28), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((unsigned __int8 *)v10 + 28) < v16)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(unsigned __int8 *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((unsigned __int8 *)v13 + 28))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(unsigned __int8 *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_223341C68(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    a1[1] = (uint64_t)&v5[8 * a2];
    return;
  }
  v6 = (_BYTE *)*a1;
  v7 = (uint64_t)&v5[-*a1];
  v8 = v7 >> 3;
  v9 = (v7 >> 3) + a2;
  if (v9 >> 61)
    sub_22316E078();
  v10 = v4 - (_QWORD)v6;
  if (v10 >> 2 > v9)
    v9 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 61)
      sub_223174E94();
    v12 = operator new(8 * v11);
    v13 = (uint64_t)&v12[8 * v8];
    v14 = &v12[8 * v11];
    v15 = v13 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v13;
      a1[1] = v15;
      a1[2] = (uint64_t)v14;
      if (!v5)
        return;
LABEL_22:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = 0;
    v13 = 8 * v8;
    v14 = 0;
    v15 = 8 * v8 + 8 * a2;
    v16 = (char *)(v5 - v6);
    if (v5 == v6)
      goto LABEL_11;
  }
  v17 = (unint64_t)(v16 - 8);
  if (v17 < 0x58)
    goto LABEL_27;
  if ((unint64_t)(v5 - &v12[v7]) < 0x20)
    goto LABEL_27;
  v18 = (v17 >> 3) + 1;
  v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
  v20 = &v5[-v19];
  v13 -= v19;
  v21 = &v12[8 * v8 - 16];
  v22 = v5 - 16;
  v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *(_OWORD *)v22;
    *(v21 - 1) = *((_OWORD *)v22 - 1);
    *v21 = v24;
    v21 -= 2;
    v22 -= 32;
    v23 -= 4;
  }
  while (v23);
  v5 = v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_27:
    do
    {
      v25 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *(_QWORD *)(v13 - 8) = v25;
      v13 -= 8;
    }
    while (v5 != v6);
  }
  v5 = (char *)*a1;
  *a1 = v13;
  a1[1] = v15;
  a1[2] = (uint64_t)v14;
  if (v5)
    goto LABEL_22;
}

uint64_t sub_223341E04(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t (**v9)();
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t (**v142)();
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  _QWORD *v147;
  std::__shared_weak_count *v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  _QWORD *v151;
  std::__shared_weak_count *v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  _QWORD *v155;
  std::__shared_weak_count *v156;
  _QWORD *v157;
  std::__shared_weak_count *v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  _QWORD *v163;
  std::__shared_weak_count *v164;
  _QWORD *v165;
  std::__shared_weak_count *v166;
  _QWORD *v167;
  std::__shared_weak_count *v168;
  _QWORD *v169;
  std::__shared_weak_count *v170;
  _QWORD *v171;
  std::__shared_weak_count *v172;
  _QWORD *v173;
  std::__shared_weak_count *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  std::__shared_weak_count *v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;
  _QWORD *v183;
  std::__shared_weak_count *v184;
  _QWORD *v185;
  std::__shared_weak_count *v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  _QWORD *v189;
  std::__shared_weak_count *v190;
  _QWORD *v191;
  std::__shared_weak_count *v192;
  _QWORD *v193;
  std::__shared_weak_count *v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  _QWORD *v199;
  std::__shared_weak_count *v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  uint64_t (**v203)();
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  char *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD v219[2];
  void *v220[2];
  char v221;
  char v222;

  v9 = (uint64_t (**)())*a3;
  v10 = a3 + 1;
  v11 = (_QWORD *)a3[1];
  v142 = (uint64_t (**)())*a3;
  v143 = v11;
  v144 = (_QWORD *)a3[2];
  if (v144)
  {
    v11[2] = &v143;
    *a3 = v10;
    *v10 = 0;
    a3[2] = 0;
  }
  else
  {
    v142 = (uint64_t (**)())&v143;
    v9 = (uint64_t (**)())&v143;
  }
  v12 = (std::__shared_weak_count *)operator new(0x28uLL);
  v13 = v12;
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E918;
  v15 = &v12[1].__vftable;
  v203 = v9;
  v204 = v11;
  v205 = v144;
  if (v144)
  {
    v11[2] = &v204;
    v142 = (uint64_t (**)())&v143;
    v143 = 0;
    v144 = 0;
  }
  else
  {
    v203 = (uint64_t (**)())&v204;
  }
  sub_223335C0C((uint64_t *)&v12[1], &v203, a4, (__int128 *)a5);
  sub_223198030((uint64_t)&v203, v204);
  v201 = v15;
  v202 = v13;
  v199 = v15;
  v200 = v13;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  v197 = v15;
  v198 = v13;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v195 = v15;
  v196 = v13;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
  v193 = v15;
  v194 = v13;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v191 = v15;
  v192 = v13;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v189 = v15;
  v190 = v13;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  v187 = v15;
  v188 = v13;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v185 = v15;
  v186 = v13;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v183 = v15;
  v184 = v13;
  do
    v24 = __ldxr(p_shared_owners);
  while (__stxr(v24 + 1, p_shared_owners));
  v181 = v15;
  v182 = v13;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  if (*(_BYTE *)(a5 + 36))
    v26 = 4;
  else
    v26 = 1;
  sub_2245030F0("SurfaceDetectionNode_Scheduler", 0x1EuLL, a2, v26, &v179);
  do
    v27 = __ldxr(p_shared_owners);
  while (__stxr(v27 + 1, p_shared_owners));
  v28 = v179;
  v29 = v180;
  v179 = 0;
  v180 = 0;
  v173 = v15;
  v174 = v13;
  v199 = 0;
  v200 = 0;
  v171 = v15;
  v172 = v13;
  v197 = 0;
  v198 = 0;
  v169 = v15;
  v170 = v13;
  v195 = 0;
  v196 = 0;
  v167 = v15;
  v168 = v13;
  do
    v30 = __ldxr(p_shared_owners);
  while (__stxr(v30 + 1, p_shared_owners));
  v165 = v15;
  v166 = v13;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v164 = v13;
  do
    v32 = __ldxr(p_shared_owners);
  while (__stxr(v32 + 1, p_shared_owners));
  v162 = v13;
  do
    v33 = __ldxr(p_shared_owners);
  while (__stxr(v33 + 1, p_shared_owners));
  v163 = v15;
  v160 = v13;
  v161 = v15;
  v158 = v13;
  v159 = v15;
  v191 = 0;
  v192 = 0;
  v156 = v13;
  v157 = v15;
  v189 = 0;
  v190 = 0;
  v154 = v13;
  v155 = v15;
  v187 = 0;
  v188 = 0;
  v152 = v13;
  v153 = v15;
  v185 = 0;
  v186 = 0;
  v150 = v13;
  v151 = v15;
  v183 = 0;
  v184 = 0;
  v148 = v13;
  v149 = v15;
  v181 = 0;
  v182 = 0;
  v146 = v13;
  v147 = v15;
  v177 = 0;
  v178 = 0;
  v145 = v15;
  v193 = 0;
  v194 = 0;
  *(_QWORD *)a1 = &off_24EC2DEE8;
  strcpy((char *)(a1 + 8), "SurfaceDetectionNode");
  *(_WORD *)(a1 + 29) = 0;
  *(_BYTE *)(a1 + 31) = 20;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v28;
  *(_QWORD *)(a1 + 64) = v29;
  v175 = 0;
  v176 = 0;
  v34 = (uint64_t *)(a1 + 72);
  v221 = 7;
  strcpy((char *)v220, "channel");
  v219[0] = v28;
  v219[1] = v29;
  if (v29)
  {
    v35 = (unint64_t *)&v29->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v203 = (uint64_t (**)())&v173;
  v204 = &v171;
  v205 = &v169;
  v206 = &v167;
  v207 = &v165;
  v208 = &v163;
  v209 = &v161;
  v210 = &v159;
  v211 = &v222;
  v212 = &v157;
  v213 = &v155;
  v214 = &v153;
  v215 = &v151;
  v216 = &v149;
  v217 = &v147;
  v218 = &v145;
  sub_223343DA4((uint64_t *)(a1 + 72), (uint64_t)v220, (uint64_t)v219, (uint64_t *)&v203);
  if (!v29)
    goto LABEL_47;
  v37 = (unint64_t *)&v29->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if ((v221 & 0x80000000) == 0)
    {
LABEL_48:
      if (*(_QWORD *)(a1 + 56))
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  else
  {
LABEL_47:
    if ((v221 & 0x80000000) == 0)
      goto LABEL_48;
  }
  operator delete(v220[0]);
  if (*(_QWORD *)(a1 + 56))
    goto LABEL_53;
LABEL_52:
  if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
LABEL_53:
  v39 = v146;
  if (v146)
  {
    v40 = (unint64_t *)&v146->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v148;
  if (v148)
  {
    v43 = (unint64_t *)&v148->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v150;
  if (v150)
  {
    v46 = (unint64_t *)&v150->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = v152;
  if (v152)
  {
    v49 = (unint64_t *)&v152->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v154;
  if (v154)
  {
    v52 = (unint64_t *)&v154->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v156;
  if (v156)
  {
    v55 = (unint64_t *)&v156->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v158;
  if (v158)
  {
    v58 = (unint64_t *)&v158->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v160;
  if (v160)
  {
    v61 = (unint64_t *)&v160->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v162;
  if (v162)
  {
    v64 = (unint64_t *)&v162->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v164;
  if (v164)
  {
    v67 = (unint64_t *)&v164->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = v166;
  if (v166)
  {
    v70 = (unint64_t *)&v166->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v168;
  if (v168)
  {
    v73 = (unint64_t *)&v168->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v170;
  if (v170)
  {
    v76 = (unint64_t *)&v170->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = v172;
  if (v172)
  {
    v79 = (unint64_t *)&v172->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v174;
  if (v174)
  {
    v82 = (unint64_t *)&v174->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v176;
  if (v176)
  {
    v85 = (unint64_t *)&v176->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = v178;
  if (v178)
  {
    v88 = (unint64_t *)&v178->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v180;
  if (v180)
  {
    v91 = (unint64_t *)&v180->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = v182;
  if (v182)
  {
    v94 = (unint64_t *)&v182->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v184;
  if (v184)
  {
    v97 = (unint64_t *)&v184->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v99 = v186;
  if (v186)
  {
    v100 = (unint64_t *)&v186->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  v102 = v188;
  if (v188)
  {
    v103 = (unint64_t *)&v188->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = v190;
  if (v190)
  {
    v106 = (unint64_t *)&v190->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  v108 = v192;
  if (v192)
  {
    v109 = (unint64_t *)&v192->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  v111 = v194;
  if (v194)
  {
    v112 = (unint64_t *)&v194->__shared_owners_;
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = v196;
  if (v196)
  {
    v115 = (unint64_t *)&v196->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = v198;
  if (v198)
  {
    v118 = (unint64_t *)&v198->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v200;
  if (v200)
  {
    v121 = (unint64_t *)&v200->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  v123 = v202;
  if (v202)
  {
    v124 = (unint64_t *)&v202->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  sub_223198030((uint64_t)&v142, v143);
  v126 = *v34;
  v203 = &off_24EC2E1C8;
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v126 + 1440) + 16))(&v204);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v126 + 792) + 16))(v126 + 792, &v203);
  v127 = v204;
  v203 = &off_24EC2E1C8;
  v204 = 0;
  if (v127)
    (*(void (**)(_QWORD *))(*v127 + 8))(v127);
  v128 = *v34;
  v203 = &off_24EC2E1C8;
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v128 + 1440) + 16))(&v204);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v128 + 960) + 16))(v128 + 960, &v203);
  v129 = v204;
  v203 = &off_24EC2E1C8;
  v204 = 0;
  if (v129)
    (*(void (**)(_QWORD *))(*v129 + 8))(v129);
  v130 = *v34;
  v203 = &off_24EC2E1C8;
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v130 + 1440) + 16))(&v204);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v130 + 1128) + 16))(v130 + 1128, &v203);
  v131 = v204;
  v203 = &off_24EC2E1C8;
  v204 = 0;
  if (v131)
    (*(void (**)(_QWORD *))(*v131 + 8))(v131);
  v132 = *v34;
  v203 = &off_24EC2E1C8;
  (*(void (**)(_QWORD **__return_ptr))(**(_QWORD **)(v132 + 1440) + 16))(&v204);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v132 + 1296) + 16))(v132 + 1296, &v203);
  v133 = v204;
  v203 = &off_24EC2E1C8;
  v204 = 0;
  if (v133)
    (*(void (**)(_QWORD *))(*v133 + 8))(v133);
  v134 = *v34;
  v135 = (_QWORD *)operator new();
  *v135 = &off_24EC35BD0;
  v135[1] = &off_24EC35C48;
  v136 = v135 + 1;
  v135[4] = v135 + 1;
  v203 = &off_24EC2DEB0;
  v137 = (_QWORD *)operator new();
  *v137 = &off_24EC35BD0;
  v138 = v137 + 1;
  v139 = v135[4];
  if (!v139)
    goto LABEL_209;
  if ((_QWORD *)v139 != v136)
  {
    v139 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v139 + 16))(v139, v138);
LABEL_209:
    v137[4] = v139;
    goto LABEL_211;
  }
  v137[4] = v138;
  (*(void (**)(_QWORD *))(*v136 + 24))(v136);
LABEL_211:
  v204 = v137;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v134 + 1488) + 16))(v134 + 1488, &v203);
  v140 = v204;
  v203 = &off_24EC2DEB0;
  v204 = 0;
  if (v140)
    (*(void (**)(_QWORD *))(*v140 + 8))(v140);
  (*(void (**)(_QWORD *))(*v135 + 8))(v135);
  return a1;
}

void sub_223342B10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x227684CE8](v3, 0x10A1C400AA0B987);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_22331CC4C(v1);
  _Unwind_Resume(a1);
}

void sub_223342BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;
  std::__shared_weak_count *v47;
  void **v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;

  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v51 = *(std::__shared_weak_count **)(v46 + 64);
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if (*(char *)(v46 + 55) < 0)
    operator delete(*v48);
  if (*(char *)(v46 + 31) < 0)
    operator delete(*(void **)(v46 + 8));
  sub_223167354((uint64_t)&a12);
  sub_223167354((uint64_t)&a14);
  sub_223167354((uint64_t)&a16);
  sub_223167354((uint64_t)&a18);
  sub_223167354((uint64_t)&a20);
  sub_223167354((uint64_t)&a22);
  sub_223167354((uint64_t)&a24);
  sub_223167354((uint64_t)&a26);
  sub_223167354((uint64_t)&a28);
  sub_223167354((uint64_t)&a30);
  sub_223167354((uint64_t)&a32);
  sub_223167354((uint64_t)&a34);
  sub_223167354((uint64_t)&a36);
  sub_223167354((uint64_t)&a38);
  sub_223167354((uint64_t)&a40);
  sub_223167354((uint64_t)&a42);
  sub_223167354((uint64_t)&a44);
  sub_223167354((uint64_t)&a46);
  JUMPOUT(0x223342D04);
}

void sub_223342D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  _QWORD *a71;
  std::__shared_weak_count *v71;
  void *v73;

  sub_223198030((uint64_t)&a70, a71);
  std::__shared_weak_count::~__shared_weak_count(v71);
  operator delete(v73);
  sub_223198030((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_223342DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_223198030((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_223342DCC(uint64_t a1)
{
  _QWORD **v2;
  _QWORD **v3;
  uint64_t v4;
  char v6;

  v2 = *(_QWORD ***)(a1 + 72);
  (*(void (**)(_QWORD *))(*v2[12] + 24))(v2[12]);
  (*(void (**)(_QWORD *))(*v2[33] + 24))(v2[33]);
  (*(void (**)(_QWORD *))(*v2[54] + 24))(v2[54]);
  (*(void (**)(_QWORD *))(*v2[75] + 24))(v2[75]);
  (*(void (**)(_QWORD *))(*v2[96] + 24))(v2[96]);
  (*(void (**)(_QWORD *))(*v2[117] + 24))(v2[117]);
  (*(void (**)(_QWORD *))(*v2[138] + 24))(v2[138]);
  (*(void (**)(_QWORD *))(*v2[159] + 24))(v2[159]);
  (*(void (**)(_QWORD *))(*v2[180] + 24))(v2[180]);
  (*(void (**)(_QWORD *))(*v2[201] + 24))(v2[201]);
  (*(void (**)(_QWORD *))(*v2[222] + 24))(v2[222]);
  (*(void (**)(_QWORD *))(*v2[243] + 24))(v2[243]);
  (*(void (**)(_QWORD *))(*v2[264] + 24))(v2[264]);
  (*(void (**)(_QWORD *))(*v2[285] + 24))(v2[285]);
  (*(void (**)(_QWORD *))(*v2[306] + 24))(v2[306]);
  (*(void (**)(_QWORD *))(*v2[327] + 24))(v2[327]);
  v3 = *(_QWORD ***)(a1 + 72);
  (*(void (**)(_QWORD *))(*v3[9] + 64))(v3[9]);
  (*(void (**)(_QWORD *))(*v3[30] + 64))(v3[30]);
  (*(void (**)(_QWORD *))(*v3[51] + 64))(v3[51]);
  (*(void (**)(_QWORD *))(*v3[72] + 64))(v3[72]);
  (*(void (**)(_QWORD *))(*v3[93] + 64))(v3[93]);
  (*(void (**)(_QWORD *))(*v3[114] + 64))(v3[114]);
  (*(void (**)(_QWORD *))(*v3[135] + 64))(v3[135]);
  (*(void (**)(_QWORD *))(*v3[156] + 64))(v3[156]);
  (*(void (**)(_QWORD *))(*v3[177] + 64))(v3[177]);
  (*(void (**)(_QWORD *))(*v3[198] + 64))(v3[198]);
  (*(void (**)(_QWORD *))(*v3[219] + 64))(v3[219]);
  (*(void (**)(_QWORD *))(*v3[240] + 64))(v3[240]);
  (*(void (**)(_QWORD *))(*v3[261] + 64))(v3[261]);
  (*(void (**)(_QWORD *))(*v3[282] + 64))(v3[282]);
  (*(void (**)(_QWORD *))(*v3[303] + 64))(v3[303]);
  (*(void (**)(_QWORD *))(*v3[324] + 64))(v3[324]);
  v4 = *(_QWORD *)(a1 + 72);
  v6 = 1;
  return (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)(v4 + 88) + 16))(v4 + 88, &v6);
}

uint64_t sub_223343014(uint64_t a1)
{
  _QWORD **v1;

  v1 = *(_QWORD ***)(a1 + 72);
  (*(void (**)(_QWORD *))(*v1[9] + 64))(v1[9]);
  (*(void (**)(_QWORD *))(*v1[30] + 64))(v1[30]);
  (*(void (**)(_QWORD *))(*v1[51] + 64))(v1[51]);
  (*(void (**)(_QWORD *))(*v1[72] + 64))(v1[72]);
  (*(void (**)(_QWORD *))(*v1[93] + 64))(v1[93]);
  (*(void (**)(_QWORD *))(*v1[114] + 64))(v1[114]);
  (*(void (**)(_QWORD *))(*v1[135] + 64))(v1[135]);
  (*(void (**)(_QWORD *))(*v1[156] + 64))(v1[156]);
  (*(void (**)(_QWORD *))(*v1[177] + 64))(v1[177]);
  (*(void (**)(_QWORD *))(*v1[198] + 64))(v1[198]);
  (*(void (**)(_QWORD *))(*v1[219] + 64))(v1[219]);
  (*(void (**)(_QWORD *))(*v1[240] + 64))(v1[240]);
  (*(void (**)(_QWORD *))(*v1[261] + 64))(v1[261]);
  (*(void (**)(_QWORD *))(*v1[282] + 64))(v1[282]);
  (*(void (**)(_QWORD *))(*v1[303] + 64))(v1[303]);
  return (*(uint64_t (**)(_QWORD *))(*v1[324] + 64))(v1[324]);
}

uint64_t sub_22334312C(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  char v5;

  v2 = *(_QWORD *)(a1 + 72);
  v5 = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(v2 + 88) + 16))(v2 + 88, &v5);
  v3 = *(_QWORD ***)(a1 + 72);
  (*(void (**)(_QWORD *))(*v3[9] + 64))(v3[9]);
  (*(void (**)(_QWORD *))(*v3[30] + 64))(v3[30]);
  (*(void (**)(_QWORD *))(*v3[51] + 64))(v3[51]);
  (*(void (**)(_QWORD *))(*v3[72] + 64))(v3[72]);
  (*(void (**)(_QWORD *))(*v3[93] + 64))(v3[93]);
  (*(void (**)(_QWORD *))(*v3[114] + 64))(v3[114]);
  (*(void (**)(_QWORD *))(*v3[135] + 64))(v3[135]);
  (*(void (**)(_QWORD *))(*v3[156] + 64))(v3[156]);
  (*(void (**)(_QWORD *))(*v3[177] + 64))(v3[177]);
  (*(void (**)(_QWORD *))(*v3[198] + 64))(v3[198]);
  (*(void (**)(_QWORD *))(*v3[219] + 64))(v3[219]);
  (*(void (**)(_QWORD *))(*v3[240] + 64))(v3[240]);
  (*(void (**)(_QWORD *))(*v3[261] + 64))(v3[261]);
  (*(void (**)(_QWORD *))(*v3[282] + 64))(v3[282]);
  (*(void (**)(_QWORD *))(*v3[303] + 64))(v3[303]);
  (*(void (**)(_QWORD *))(*v3[324] + 64))(v3[324]);
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 600) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                                                                  + 600));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 768) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                                                                  + 768));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 936) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 72)
                                                                                                  + 936));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 1104) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 1104));
  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 1272) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 1272));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 72) + 2448) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 2448));
}

uint64_t sub_2233432E4(uint64_t a1)
{
  _QWORD **v1;

  v1 = *(_QWORD ***)(a1 + 72);
  if ((*(unsigned int (**)(_QWORD *))(*v1[12] + 40))(v1[12])
    && (*(unsigned int (**)(_QWORD *))(*v1[33] + 40))(v1[33])
    && (*(unsigned int (**)(_QWORD *))(*v1[54] + 40))(v1[54])
    && (*(unsigned int (**)(_QWORD *))(*v1[75] + 40))(v1[75])
    && (*(unsigned int (**)(_QWORD *))(*v1[96] + 40))(v1[96])
    && (*(unsigned int (**)(_QWORD *))(*v1[117] + 40))(v1[117])
    && (*(unsigned int (**)(_QWORD *))(*v1[138] + 40))(v1[138])
    && (*(unsigned int (**)(_QWORD *))(*v1[159] + 40))(v1[159])
    && (*(unsigned int (**)(_QWORD *))(*v1[180] + 40))(v1[180])
    && (*(unsigned int (**)(_QWORD *))(*v1[201] + 40))(v1[201])
    && (*(unsigned int (**)(_QWORD *))(*v1[222] + 40))(v1[222])
    && (*(unsigned int (**)(_QWORD *))(*v1[243] + 40))(v1[243])
    && (*(unsigned int (**)(_QWORD *))(*v1[264] + 40))(v1[264])
    && (*(unsigned int (**)(_QWORD *))(*v1[285] + 40))(v1[285])
    && (*(unsigned int (**)(_QWORD *))(*v1[306] + 40))(v1[306]))
  {
    return (*(uint64_t (**)(_QWORD *))(*v1[327] + 40))(v1[327]);
  }
  else
  {
    return 0;
  }
}

void sub_223343448(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  std::mutex *v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::unique_lock<std::mutex>::mutex_type *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  int v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::runtime_error *v20;
  std::exception_ptr v21;
  int v22;
  std::runtime_error v23;
  std::unique_lock<std::mutex> __lk;
  std::runtime_error_vtbl *v25;

  v22 = 0;
  v3 = *(_QWORD *)(a1 + 72);
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  v6 = (std::mutex *)(v4 + 24);
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC35CD8;
  v25 = (std::runtime_error_vtbl *)v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v7 = *(_DWORD *)(v4 + 136);
  if ((v7 & 2) != 0)
    sub_2233236D4(1u);
  do
    v8 = __ldxr(v5);
  while (__stxr(v8 + 1, v5));
  *(_DWORD *)(v4 + 136) = v7 | 2;
  std::mutex::unlock(v6);
  __lk.__m_ = 0;
  *(_QWORD *)&__lk.__owns_ = 0;
  v9 = *(std::__shared_weak_count **)(v3 + 1960);
  if (!v9
    || (v10 = std::__shared_weak_count::lock(v9), (*(_QWORD *)&__lk.__owns_ = v10) == 0)
    || (v11 = v10, v12 = *(std::unique_lock<std::mutex>::mutex_type **)(v3 + 1952), (__lk.__m_ = v12) == 0))
  {
    std::runtime_error::runtime_error(&v23, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v23.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v20 = std::runtime_error::runtime_error(exception, &v23);
    v20->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v20, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v23.__vftable = v25;
  v25 = 0;
  (*(void (**)(std::unique_lock<std::mutex>::mutex_type *, int *, std::runtime_error *))(v12->__m_.__sig + 56))(v12, &v22, &v23);
  sub_223386FA8((uint64_t *)&v23);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_223386FA8((uint64_t *)&v25);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v6);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v4, &__lk);
  v15 = *(_QWORD *)(v4 + 16);
  v23.__vftable = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&v23);
  if (v15)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)&v23, (const std::exception_ptr *)(v4 + 16));
    v21.__ptr_ = &v23;
    std::rethrow_exception(v21);
    __break(1u);
    return;
  }
  v16 = (_OWORD *)(v4 + 144);
  *(_BYTE *)a2 = 0;
  v17 = *(unsigned __int8 *)(v4 + 168);
  *(_BYTE *)(a2 + 24) = v17;
  if (v17)
  {
    *(_OWORD *)a2 = *v16;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 160);
    *(_QWORD *)(v4 + 152) = 0;
    *(_QWORD *)(v4 + 160) = 0;
    *(_QWORD *)v16 = 0;
    if (!__lk.__owns_)
      goto LABEL_16;
    goto LABEL_15;
  }
  *(_DWORD *)a2 = *(_DWORD *)v16;
  if (__lk.__owns_)
  {
LABEL_15:
    std::mutex::unlock(__lk.__m_);
    goto LABEL_16;
  }
  do
LABEL_16:
    v18 = __ldaxr(v5);
  while (__stlxr(v18 - 1, v5));
  if (!v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_223343800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  unint64_t *v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  sub_223167354((uint64_t)&v19);
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  sub_223386FA8(&v20);
  _Unwind_Resume(a1);
}

void sub_22334386C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  std::mutex *v6;
  int v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::unique_lock<std::mutex>::mutex_type *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::exception_ptr v19;
  _QWORD v20[2];
  std::runtime_error v21;
  std::unique_lock<std::mutex> __lk;
  std::runtime_error_vtbl *v23;

  v20[0] = a2;
  v20[1] = a3;
  v3 = *(_QWORD *)(a1 + 72);
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  v6 = (std::mutex *)(v4 + 24);
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC35D20;
  v23 = (std::runtime_error_vtbl *)v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v7 = *(_DWORD *)(v4 + 136);
  if ((v7 & 2) != 0)
    sub_2233236D4(1u);
  do
    v8 = __ldxr(v5);
  while (__stxr(v8 + 1, v5));
  *(_DWORD *)(v4 + 136) = v7 | 2;
  std::mutex::unlock(v6);
  __lk.__m_ = 0;
  *(_QWORD *)&__lk.__owns_ = 0;
  v9 = *(std::__shared_weak_count **)(v3 + 2128);
  if (!v9
    || (v10 = std::__shared_weak_count::lock(v9), (*(_QWORD *)&__lk.__owns_ = v10) == 0)
    || (v11 = v10, v12 = *(std::unique_lock<std::mutex>::mutex_type **)(v3 + 2120), (__lk.__m_ = v12) == 0))
  {
    std::runtime_error::runtime_error(&v21, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v21.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v21);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v18, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v21.__vftable = v23;
  v23 = 0;
  (*(void (**)(std::unique_lock<std::mutex>::mutex_type *, _QWORD *, std::runtime_error *))(v12->__m_.__sig + 56))(v12, v20, &v21);
  sub_22338B5E0((uint64_t *)&v21);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_22338B5E0((uint64_t *)&v23);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock(v6);
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v4, &__lk);
  v15 = *(_QWORD *)(v4 + 16);
  v21.__vftable = 0;
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&v21);
  if (v15)
  {
    std::exception_ptr::exception_ptr((std::exception_ptr *)&v21, (const std::exception_ptr *)(v4 + 16));
    v19.__ptr_ = &v21;
    std::rethrow_exception(v19);
    __break(1u);
  }
  else
  {
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    do
      v16 = __ldaxr(v5);
    while (__stlxr(v16 - 1, v5));
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
}

void sub_223343BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12, std::exception_ptr a13)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::exception_ptr::~exception_ptr(&a13);
  std::runtime_error::~runtime_error(&a12);
  sub_223167354((uint64_t)&v17);
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  sub_22338B5E0(&v18);
  _Unwind_Resume(a1);
}

uint64_t sub_223343C14(uint64_t a1)
{
  uint64_t v1;
  std::__assoc_sub_state *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char v11;
  std::__assoc_sub_state *v12;

  v1 = *(_QWORD *)(a1 + 72);
  v11 = 1;
  sub_22339AFFC((uint64_t *)(v1 + 2288), (uint64_t)&v11, (uint64_t *)&v12);
  v2 = v12;
  v12 = 0;
  sub_22339B388(v2);
  v4 = v3;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
      ((void (*)(std::__assoc_sub_state *))v2->__on_zero_shared)(v2);
  }
  v7 = (uint64_t)v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  return v4;
}

void sub_223343CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10)
{
  unint64_t *v10;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    v12 = v10 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      (*(void (**)(unint64_t *))(*v10 + 16))(v10);
  }
  if (a10)
  {
    v14 = a10 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*a10 + 16))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_223343D34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_223343D44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2E918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_223343D74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(void))(a1 + 32))();
  return result;
}

void sub_223343DA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v22;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  void *v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  __int128 v62;
  void *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v80;
  void *v81;
  char *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  char *v107;
  __int128 v108;
  void *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  std::__shared_weak_count *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  __int128 v127;
  void *v128;
  char *v129;
  unint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  void *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  void *v151;
  unint64_t *v152;
  unint64_t v153;
  char *v154;
  __int128 v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  std::__shared_weak_count *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  __int128 v176;
  void *v177;
  char *v178;
  unint64_t *v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  void *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  char v199;
  void *v200;
  unint64_t *v201;
  unint64_t v202;
  char *v203;
  __int128 v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  std::__shared_weak_count *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  __int128 v225;
  void *v226;
  char *v227;
  unint64_t *v228;
  unint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t *v243;
  void *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  char v248;
  void *v249;
  unint64_t *v250;
  unint64_t v251;
  char *v252;
  __int128 v253;
  void *v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  std::__shared_weak_count *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  __int128 v272;
  void *v273;
  char *v274;
  unint64_t *v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  void *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  char v295;
  void *v296;
  unint64_t *v297;
  unint64_t v298;
  char *v299;
  __int128 v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  std::__shared_weak_count *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  __int128 v321;
  void *v322;
  char *v323;
  unint64_t *v324;
  unint64_t v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t *v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t *v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t *v339;
  void *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t v343;
  char v344;
  void *v345;
  unint64_t *v346;
  unint64_t v347;
  char *v348;
  __int128 v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  _QWORD *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  std::__shared_weak_count *v356;
  unint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  __int128 v370;
  void *v371;
  char *v372;
  unint64_t *v373;
  unint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  void *v389;
  unint64_t *v390;
  unint64_t v391;
  char v392;
  void *v393;
  unint64_t *v394;
  unint64_t v395;
  char *v396;
  __int128 v397;
  void *v398;
  _QWORD *v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  std::__shared_weak_count *v402;
  unint64_t v403;
  unint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  __int128 v416;
  void *v417;
  char *v418;
  unint64_t *v419;
  unint64_t v420;
  _QWORD *v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t *v434;
  void *v435;
  unint64_t *v436;
  unint64_t v437;
  uint64_t v438;
  char v439;
  void *v440;
  unint64_t *v441;
  unint64_t v442;
  char *v443;
  __int128 v444;
  void *v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  std::__shared_weak_count *v449;
  unint64_t v450;
  unint64_t *v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  unint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  __int128 v463;
  void *v464;
  char *v465;
  unint64_t *v466;
  unint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t *v471;
  unint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t *v475;
  unint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  unint64_t v479;
  uint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  void *v487;
  uint64_t v488;
  unint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  char v492;
  void *v493;
  unint64_t *v494;
  unint64_t v495;
  char *v496;
  __int128 v497;
  void *v498;
  uint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  std::__shared_weak_count *v502;
  unint64_t v503;
  unint64_t *v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t *v507;
  unint64_t v508;
  unint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  __int128 v516;
  void *v517;
  char *v518;
  unint64_t *v519;
  unint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t *v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t *v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t *v531;
  unint64_t v532;
  uint64_t v533;
  std::__shared_weak_count *v534;
  unint64_t *v535;
  unint64_t v536;
  std::__shared_weak_count *v537;
  unint64_t *v538;
  unint64_t v539;
  void *v540;
  uint64_t v541;
  unint64_t *v542;
  unint64_t v543;
  uint64_t v544;
  char v545;
  void *v546;
  void *v547;
  unint64_t *v548;
  unint64_t v549;
  char *v550;
  __int128 v551;
  void *v552;
  uint64_t v553;
  std::__shared_weak_count *v554;
  unint64_t *v555;
  std::__shared_weak_count *v556;
  unint64_t v557;
  unint64_t *v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t v563;
  std::__shared_weak_count *v564;
  unint64_t *v565;
  unint64_t v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  __int128 v570;
  void *v571;
  char *v572;
  unint64_t *v573;
  unint64_t v574;
  _QWORD *v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t *v578;
  unint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unint64_t *v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t *v585;
  unint64_t v586;
  uint64_t v587;
  std::__shared_weak_count *v588;
  unint64_t *v589;
  unint64_t v590;
  std::__shared_weak_count *v591;
  unint64_t *v592;
  unint64_t v593;
  void *v594;
  uint64_t v595;
  unint64_t *v596;
  unint64_t v597;
  uint64_t v598;
  char v599;
  void *v600;
  void *v601;
  unint64_t *v602;
  unint64_t v603;
  char *v604;
  __int128 v605;
  void *v606;
  uint64_t v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  std::__shared_weak_count *v610;
  unint64_t v611;
  unint64_t *v612;
  unint64_t v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  __int128 v624;
  void *v625;
  char *v626;
  unint64_t *v627;
  unint64_t v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t *v632;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  unint64_t *v636;
  unint64_t v637;
  uint64_t v638;
  unint64_t *v639;
  unint64_t v640;
  uint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  void *v648;
  uint64_t v649;
  unint64_t *v650;
  unint64_t v651;
  uint64_t v652;
  char v653;
  void *v654;
  void *v655;
  unint64_t *v656;
  unint64_t v657;
  char *v658;
  __int128 v659;
  uint64_t v660;
  uint64_t v661;
  std::__shared_weak_count *v662;
  unint64_t *v663;
  std::__shared_weak_count *v664;
  unint64_t v665;
  unint64_t *v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t *v669;
  unint64_t v670;
  unint64_t v671;
  std::__shared_weak_count *v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  __int128 v678;
  void *v679;
  char *v680;
  unint64_t *v681;
  unint64_t v682;
  _QWORD *v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t *v686;
  unint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t *v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t *v693;
  unint64_t v694;
  uint64_t v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  void *v702;
  uint64_t v703;
  unint64_t *v704;
  unint64_t v705;
  uint64_t v706;
  char v707;
  void *v708;
  void *v709;
  unint64_t *v710;
  unint64_t v711;
  char *v712;
  __int128 v713;
  uint64_t v714;
  uint64_t v715;
  std::__shared_weak_count *v716;
  unint64_t *v717;
  std::__shared_weak_count *v718;
  unint64_t v719;
  unint64_t *v720;
  unint64_t v721;
  unint64_t v722;
  unint64_t *v723;
  unint64_t v724;
  unint64_t v725;
  std::__shared_weak_count *v726;
  unint64_t *v727;
  unint64_t v728;
  std::__shared_weak_count *v729;
  unint64_t *v730;
  unint64_t v731;
  __int128 v732;
  void *v733;
  char *v734;
  unint64_t *v735;
  unint64_t v736;
  _QWORD *v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t *v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unint64_t *v744;
  unint64_t v745;
  uint64_t v746;
  unint64_t *v747;
  unint64_t v748;
  uint64_t v749;
  std::__shared_weak_count *v750;
  unint64_t *v751;
  unint64_t v752;
  std::__shared_weak_count *v753;
  unint64_t *v754;
  unint64_t v755;
  void *v756;
  uint64_t v757;
  unint64_t *v758;
  unint64_t v759;
  uint64_t v760;
  char v761;
  void *v762;
  void *v763;
  unint64_t *v764;
  unint64_t v765;
  uint64_t v766;
  __int128 v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  _QWORD *v771;
  std::__shared_weak_count *v772;
  unint64_t *v773;
  std::__shared_weak_count *v774;
  unint64_t v775;
  unint64_t *v776;
  unint64_t v777;
  unint64_t v778;
  unint64_t *v779;
  unint64_t v780;
  unint64_t v781;
  std::__shared_weak_count *v782;
  unint64_t *v783;
  unint64_t v784;
  std::__shared_weak_count *v785;
  unint64_t *v786;
  unint64_t v787;
  __int128 v788;
  unint64_t *v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  unint64_t *v794;
  unint64_t v795;
  uint64_t v796;
  unint64_t v797;
  unint64_t *v798;
  unint64_t v799;
  uint64_t v800;
  unint64_t *v801;
  unint64_t v802;
  uint64_t v803;
  std::__shared_weak_count *v804;
  unint64_t *v805;
  unint64_t v806;
  std::__shared_weak_count *v807;
  unint64_t *v808;
  unint64_t v809;
  uint64_t v810;
  __int128 v811;
  __int128 v812;
  __int128 v813;
  __int128 v814;
  __int128 v815;
  __int128 v816;
  __int128 v817;
  __int128 v818;
  __int128 v819;
  __int128 v820;
  __int128 v821;
  __int128 v822;
  __int128 v823;
  __int128 v824;
  __int128 v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  __int128 v830;
  __int128 v831;
  __int128 v832;
  __int128 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  __int128 v844;
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  __int128 v851;
  __int128 v852;
  __int128 v853;
  __int128 v854;
  __int128 v855;
  __int128 v856;
  __int128 v857;
  __int128 v858;
  __int128 v859;
  __int128 v860;
  __int128 v861;
  __int128 v862;
  __int128 v863;
  __int128 v864;
  __int128 v865;
  __int128 v866;
  __int128 v867;
  __int128 v868;
  __int128 v869;
  __int128 v870;
  __int128 v871;
  __int128 v872;
  __int128 v873;
  __int128 v874;
  __int128 v875;
  std::__shared_weak_count *v876;
  unint64_t *v877;
  unint64_t v878;
  std::__shared_weak_count *v879;
  unint64_t *v880;
  unint64_t v881;
  std::__shared_weak_count *v882;
  unint64_t *v883;
  unint64_t v884;
  std::__shared_weak_count *v885;
  unint64_t *v886;
  unint64_t v887;
  std::__shared_weak_count *v888;
  unint64_t *v889;
  unint64_t v890;
  std::__shared_weak_count *v891;
  unint64_t *v892;
  unint64_t v893;
  std::__shared_weak_count *v894;
  unint64_t *v895;
  unint64_t v896;
  std::__shared_weak_count *v897;
  unint64_t *v898;
  unint64_t v899;
  std::__shared_weak_count *v900;
  unint64_t *v901;
  unint64_t v902;
  std::__shared_weak_count *v903;
  unint64_t *v904;
  unint64_t v905;
  std::__shared_weak_count *v906;
  unint64_t *v907;
  unint64_t v908;
  std::__shared_weak_count *v909;
  unint64_t *v910;
  unint64_t v911;
  std::__shared_weak_count *v912;
  unint64_t *v913;
  unint64_t v914;
  std::__shared_weak_count *v915;
  unint64_t *v916;
  unint64_t v917;
  std::__shared_weak_count *v918;
  unint64_t *v919;
  unint64_t v920;
  __int128 v922;
  __int128 v923;
  void *v924[4];
  __int128 v925;
  void *v926[4];
  __int128 v927;
  void *v928[4];
  __int128 v929;
  void *v930[4];
  __int128 v931;
  void *v932[4];
  __int128 v933;
  void *v934[4];
  __int128 v935;
  void *v936[4];
  __int128 v937;
  void *v938[4];
  __int128 v939;
  void *v940[4];
  __int128 v941;
  void *v942[4];
  __int128 v943;
  void *v944[4];
  __int128 v945;
  void *v946[4];
  __int128 v947;
  void *v948[4];
  void *v949[3];
  void *v950;
  _BYTE v951[24];
  __int128 v952;
  __int128 v953;
  uint64_t (**v954)();
  __int128 v955;
  uint64_t v956;
  uint64_t (**v957)();
  __int128 v958;
  uint64_t (**v959)();
  __int128 v960;
  __int128 v961;
  void *v962[4];
  void *v963[3];
  void *v964;
  _BYTE v965[24];
  __int128 v966;
  __int128 v967;
  uint64_t (**v968)();
  __int128 v969;
  uint64_t v970;
  uint64_t (**v971)();
  __int128 v972;
  uint64_t (**v973)();
  __int128 v974;
  __int128 v975;
  void *__src[4];
  void *__p[3];
  void *v978;
  _BYTE v979[24];
  __int128 v980;
  __int128 v981;
  uint64_t (**v982)();
  __int128 v983;
  uint64_t v984;
  uint64_t (**v985)();
  __int128 v986;
  uint64_t (**v987)();
  __int128 v988;
  __int128 v989;
  void *__dst[3];
  uint64_t (**v991)();
  __int128 v992;
  void *v993;
  _BYTE v994[24];
  __int128 v995;
  __int128 v996;
  uint64_t (**v997)();
  __int128 v998;
  uint64_t v999;
  uint64_t (**v1000)();
  __int128 v1001;
  uint64_t (**v1002)();
  __int128 v1003;
  void *v1004[3];
  void *v1005;
  _BYTE v1006[24];
  __int128 v1007;
  __int128 v1008;
  uint64_t (**v1009)();
  __int128 v1010;
  uint64_t v1011;
  uint64_t (**v1012)();
  __int128 v1013;
  uint64_t (**v1014)();
  __int128 v1015;
  void *v1016[3];
  void *v1017;
  _BYTE v1018[24];
  __int128 v1019;
  __int128 v1020;
  uint64_t (**v1021)();
  __int128 v1022;
  uint64_t v1023;
  uint64_t (**v1024)();
  __int128 v1025;
  uint64_t (**v1026)();
  __int128 v1027;
  void *v1028[3];
  void *v1029;
  _BYTE v1030[24];
  __int128 v1031;
  __int128 v1032;
  uint64_t (**v1033)();
  __int128 v1034;
  uint64_t v1035;
  uint64_t (**v1036)();
  __int128 v1037;
  uint64_t (**v1038)();
  __int128 v1039;
  void *v1040[3];
  void *v1041;
  _BYTE v1042[24];
  __int128 v1043;
  __int128 v1044;
  uint64_t (**v1045)();
  __int128 v1046;
  uint64_t v1047;
  uint64_t (**v1048)();
  __int128 v1049;
  uint64_t (**v1050)();
  __int128 v1051;
  void *v1052[3];
  void *v1053;
  _BYTE v1054[24];
  __int128 v1055;
  __int128 v1056;
  uint64_t (**v1057)();
  __int128 v1058;
  uint64_t v1059;
  uint64_t (**v1060)();
  __int128 v1061;
  uint64_t (**v1062)();
  __int128 v1063;
  void *v1064[3];
  void *v1065;
  _BYTE v1066[24];
  __int128 v1067;
  __int128 v1068;
  uint64_t (**v1069)();
  __int128 v1070;
  uint64_t v1071;
  uint64_t (**v1072)();
  __int128 v1073;
  uint64_t (**v1074)();
  __int128 v1075;
  void *v1076[3];
  void *v1077;
  _BYTE v1078[24];
  __int128 v1079;
  __int128 v1080;
  uint64_t (**v1081)();
  __int128 v1082;
  uint64_t v1083;
  uint64_t (**v1084)();
  __int128 v1085;
  uint64_t (**v1086)();
  __int128 v1087;
  void *v1088[3];
  void *v1089;
  _BYTE v1090[24];
  __int128 v1091;
  __int128 v1092;
  uint64_t (**v1093)();
  __int128 v1094;
  uint64_t v1095;
  uint64_t (**v1096)();
  __int128 v1097;
  uint64_t (**v1098)();
  __int128 v1099;
  void *v1100[3];
  void *v1101;
  _BYTE v1102[24];
  __int128 v1103;
  __int128 v1104;
  uint64_t (**v1105)();
  __int128 v1106;
  uint64_t v1107;
  uint64_t (**v1108)();
  __int128 v1109;
  uint64_t (**v1110)();
  __int128 v1111;
  void *v1112[3];
  void *v1113;
  _BYTE v1114[24];
  __int128 v1115;
  __int128 v1116;
  uint64_t (**v1117)();
  __int128 v1118;
  uint64_t v1119;
  uint64_t (**v1120)();
  __int128 v1121;
  uint64_t (**v1122)();
  __int128 v1123;
  void *v1124[3];
  void *v1125;
  _BYTE v1126[24];
  __int128 v1127;
  __int128 v1128;
  uint64_t (**v1129)();
  __int128 v1130;
  uint64_t v1131;
  uint64_t (**v1132)();
  __int128 v1133;
  uint64_t (**v1134)();
  __int128 v1135;
  void *v1136[3];
  void *v1137;
  _BYTE v1138[24];
  __int128 v1139;
  __int128 v1140;
  uint64_t (**v1141)();
  __int128 v1142;
  uint64_t v1143;
  uint64_t (**v1144)();
  __int128 v1145;
  uint64_t (**v1146)();
  __int128 v1147;
  _QWORD v1148[2];
  void *v1149[2];
  void *v1150;
  __int128 v1151;
  _QWORD v1152[2];
  __int128 v1153;
  _QWORD v1154[5];

  v1154[2] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_223197FA4(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    __dst[2] = *(void **)(a2 + 16);
  }
  v8 = *(void **)a3;
  v7 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v989 = *(_QWORD *)a3;
  *((_QWORD *)&v989 + 1) = v7;
  if (v7)
  {
    v9 = v7 + 1;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a4;
  v12 = HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) < 0)
  {
    sub_223197FA4(__p, __dst[0], (unint64_t)__dst[1]);
    v12 = HIBYTE(__dst[2]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__dst;
    __p[2] = __dst[2];
  }
  *(void **)((char *)v1112 + 7) = *(void **)((char *)&__dst[1] + 7);
  v13 = __dst[0];
  v1112[0] = __dst[1];
  memset(__dst, 0, sizeof(__dst));
  v1124[0] = v1112[0];
  *(void **)((char *)v1124 + 7) = *(void **)((char *)v1112 + 7);
  *(void **)((char *)v1112 + 7) = 0;
  v1112[0] = 0;
  v949[0] = v8;
  v949[1] = v7;
  if (v7)
  {
    v14 = v7 + 1;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (char *)operator new();
  v1136[0] = v1124[0];
  *(void **)((char *)v1136 + 7) = *(void **)((char *)v1124 + 7);
  v1124[0] = 0;
  *(void **)((char *)v1124 + 7) = 0;
  v17 = *(_OWORD *)v949;
  v949[0] = 0;
  v949[1] = 0;
  v16[8] = 1;
  *((_QWORD *)v16 + 4) = 0;
  *((_QWORD *)v16 + 5) = 0;
  *(_QWORD *)v16 = &off_24EC2E968;
  *((_QWORD *)v16 + 2) = &unk_24EC2E9E0;
  *((_QWORD *)v16 + 3) = &unk_24EC2EA20;
  v18 = v1136[0];
  *(void **)(v16 + 63) = *(void **)((char *)v1136 + 7);
  *((_QWORD *)v16 + 6) = v13;
  *((_QWORD *)v16 + 7) = v18;
  v16[71] = v12;
  v1136[0] = 0;
  *(void **)((char *)v1136 + 7) = 0;
  *(_OWORD *)(v16 + 72) = v17;
  v963[1] = 0;
  v963[0] = 0;
  v19 = operator new();
  *(_QWORD *)v19 = &off_24EC2EB18;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)v11;
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *((_QWORD *)v16 + 17) = 0;
  *((_QWORD *)v16 + 11) = v19;
  *((_QWORD *)v16 + 12) = v16 + 96;
  *((_QWORD *)v16 + 13) = v16 + 96;
  *((_QWORD *)v16 + 14) = 0;
  *((_QWORD *)v16 + 15) = v16 + 120;
  *((_QWORD *)v16 + 16) = v16 + 120;
  *((_QWORD *)v16 + 18) = 0;
  if (!*((_QWORD *)v16 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v20 = (std::__shared_weak_count *)operator new();
  v20->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2F008;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v22 = (std::__shared_weak_count *)*((_QWORD *)v16 + 5);
  if (v22)
  {
    if (v22->__shared_owners_ != -1)
      goto LABEL_28;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    *((_QWORD *)v16 + 4) = v16;
    *((_QWORD *)v16 + 5) = v20;
    std::__shared_weak_count::__release_weak(v22);
  }
  else
  {
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = (unint64_t *)&v20->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    *((_QWORD *)v16 + 4) = v16;
    *((_QWORD *)v16 + 5) = v20;
  }
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_28:
  if (v963[1])
  {
    v30 = (unint64_t *)((char *)v963[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      (*(void (**)(void *))(*(_QWORD *)v963[1] + 16))(v963[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v963[1]);
    }
  }
  v963[0] = v16;
  v963[1] = v20;
  if (v949[1])
  {
    v32 = (unint64_t *)((char *)v949[1] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      (*(void (**)(void *))(*(_QWORD *)v949[1] + 16))(v949[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v949[1]);
    }
  }
  v34 = v989;
  v989 = 0uLL;
  v992 = *(_OWORD *)__p;
  v991 = &off_24EC2DF18;
  v993 = __p[2];
  memset(__p, 0, sizeof(__p));
  *(void **)&v994[15] = *(void **)((char *)v1136 + 7);
  *(_QWORD *)v994 = 0x7974706D45;
  *(void **)&v994[8] = v1136[0];
  v994[23] = 5;
  *(void **)((char *)v1136 + 7) = 0;
  v1136[0] = 0;
  v995 = v34;
  v949[1] = 0;
  v949[0] = 0;
  v35 = v963[0];
  v36 = (char *)v963[1];
  v996 = *(_OWORD *)v963;
  v963[0] = 0;
  v963[1] = 0;
  if (*((_QWORD *)&v996 + 1))
  {
    v37 = (unint64_t *)(v36 + 16);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v997 = &off_24EC2DF48;
  v39 = (_QWORD *)operator new();
  *v39 = &off_24EC2F058;
  v39[1] = v35;
  v39[2] = v36;
  *(_QWORD *)&v998 = v39;
  v41 = *((_QWORD *)&v996 + 1);
  v40 = v996;
  if (!*((_QWORD *)&v996 + 1))
  {
    *((_QWORD *)&v998 + 1) = v996;
    v999 = 0;
    if ((_QWORD)v996)
      v45 = v996 + 16;
    else
      v45 = 0;
    goto LABEL_58;
  }
  v42 = (unint64_t *)(*((_QWORD *)&v996 + 1) + 16);
  do
    v43 = __ldxr(v42);
  while (__stxr(v43 + 1, v42));
  v44 = *((_QWORD *)&v996 + 1);
  *((_QWORD *)&v998 + 1) = v40;
  v999 = v41;
  if ((_QWORD)v996)
    v45 = v996 + 16;
  else
    v45 = 0;
  if (!*((_QWORD *)&v996 + 1))
  {
    v40 = v996;
LABEL_58:
    v48 = 0;
    v1000 = &off_24EC2DF80;
    v1001 = v45;
    goto LABEL_59;
  }
  v46 = (unint64_t *)(*((_QWORD *)&v996 + 1) + 16);
  do
    v47 = __ldxr(v46);
  while (__stxr(v47 + 1, v46));
  v48 = *((_QWORD *)&v996 + 1);
  v40 = v996;
  v1000 = &off_24EC2DF80;
  *(_QWORD *)&v1001 = v45;
  *((_QWORD *)&v1001 + 1) = v44;
  if (*((_QWORD *)&v996 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v996 + 1) + 16);
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
LABEL_59:
  if (v40)
    v51 = v40 + 24;
  else
    v51 = 0;
  v1002 = &off_24EC2E850;
  *(_QWORD *)&v1003 = v51;
  *((_QWORD *)&v1003 + 1) = v48;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_64;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_64:
    *(_OWORD *)__src = *(_OWORD *)a2;
    __src[2] = *(void **)(a2 + 16);
    goto LABEL_67;
  }
  sub_223197FA4(__src, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_67:
  v53 = *(void **)a3;
  v52 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v975 = *(_QWORD *)a3;
  *((_QWORD *)&v975 + 1) = v52;
  if (v52)
  {
    v54 = v52 + 1;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  v56 = a4[1];
  v57 = HIBYTE(__src[2]);
  if (SHIBYTE(__src[2]) < 0)
  {
    sub_223197FA4(v963, __src[0], (unint64_t)__src[1]);
    v57 = HIBYTE(__src[2]);
  }
  else
  {
    *(_OWORD *)v963 = *(_OWORD *)__src;
    v963[2] = __src[2];
  }
  *(void **)((char *)v1100 + 7) = *(void **)((char *)&__src[1] + 7);
  v58 = __src[0];
  v1100[0] = __src[1];
  memset(__src, 0, 24);
  v1112[0] = v1100[0];
  *(void **)((char *)v1112 + 7) = *(void **)((char *)v1100 + 7);
  *(void **)((char *)v1100 + 7) = 0;
  v1100[0] = 0;
  v1136[0] = v53;
  v1136[1] = v52;
  if (v52)
  {
    v59 = v52 + 1;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = (char *)operator new();
  v1124[0] = v1112[0];
  *(void **)((char *)v1124 + 7) = *(void **)((char *)v1112 + 7);
  v1112[0] = 0;
  *(void **)((char *)v1112 + 7) = 0;
  v62 = *(_OWORD *)v1136;
  v1136[0] = 0;
  v1136[1] = 0;
  v61[8] = 1;
  *((_QWORD *)v61 + 4) = 0;
  *((_QWORD *)v61 + 5) = 0;
  *(_QWORD *)v61 = &off_24EC2F0D0;
  *((_QWORD *)v61 + 2) = &unk_24EC2F148;
  *((_QWORD *)v61 + 3) = &unk_24EC2F188;
  v63 = v1124[0];
  *(void **)(v61 + 63) = *(void **)((char *)v1124 + 7);
  *((_QWORD *)v61 + 6) = v58;
  *((_QWORD *)v61 + 7) = v63;
  v61[71] = v57;
  v1124[0] = 0;
  *(void **)((char *)v1124 + 7) = 0;
  *(_OWORD *)(v61 + 72) = v62;
  v949[1] = 0;
  v949[0] = 0;
  v64 = operator new();
  *(_QWORD *)v64 = &off_24EC2F280;
  *(_OWORD *)(v64 + 8) = *(_OWORD *)v56;
  *(_QWORD *)v56 = 0;
  *(_QWORD *)(v56 + 8) = 0;
  *((_QWORD *)v61 + 17) = 0;
  *((_QWORD *)v61 + 11) = v64;
  *((_QWORD *)v61 + 12) = v61 + 96;
  *((_QWORD *)v61 + 13) = v61 + 96;
  *((_QWORD *)v61 + 14) = 0;
  *((_QWORD *)v61 + 15) = v61 + 120;
  *((_QWORD *)v61 + 16) = v61 + 120;
  *((_QWORD *)v61 + 18) = 0;
  if (!*((_QWORD *)v61 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v65 = (std::__shared_weak_count *)operator new();
  v65->__shared_owners_ = 0;
  v66 = (unint64_t *)&v65->__shared_owners_;
  v65->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2F770;
  v65->__shared_weak_owners_ = 0;
  v65[1].__vftable = (std::__shared_weak_count_vtbl *)v61;
  v67 = (std::__shared_weak_count *)*((_QWORD *)v61 + 5);
  if (v67)
  {
    if (v67->__shared_owners_ != -1)
      goto LABEL_91;
    do
      v68 = __ldxr(v66);
    while (__stxr(v68 + 1, v66));
    v69 = (unint64_t *)&v65->__shared_weak_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    *((_QWORD *)v61 + 4) = v61;
    *((_QWORD *)v61 + 5) = v65;
    std::__shared_weak_count::__release_weak(v67);
  }
  else
  {
    do
      v71 = __ldxr(v66);
    while (__stxr(v71 + 1, v66));
    v72 = (unint64_t *)&v65->__shared_weak_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    *((_QWORD *)v61 + 4) = v61;
    *((_QWORD *)v61 + 5) = v65;
  }
  do
    v74 = __ldaxr(v66);
  while (__stlxr(v74 - 1, v66));
  if (!v74)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
  }
LABEL_91:
  if (v949[1])
  {
    v75 = (unint64_t *)((char *)v949[1] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      (*(void (**)(void *))(*(_QWORD *)v949[1] + 16))(v949[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v949[1]);
    }
  }
  v949[0] = v61;
  v949[1] = v65;
  v77 = (std::__shared_weak_count *)v1136[1];
  if (v1136[1])
  {
    v78 = (unint64_t *)((char *)v1136[1] + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v975;
  v975 = 0uLL;
  *(_OWORD *)&__p[1] = *(_OWORD *)v963;
  __p[0] = &off_24EC2DFF0;
  v978 = v963[2];
  memset(v963, 0, sizeof(v963));
  *(void **)&v979[15] = *(void **)((char *)v1124 + 7);
  *(_QWORD *)v979 = 0x7974706D45;
  *(void **)&v979[8] = v1124[0];
  v979[23] = 5;
  *(void **)((char *)v1124 + 7) = 0;
  v1124[0] = 0;
  v980 = v80;
  v1136[1] = 0;
  v1136[0] = 0;
  v81 = v949[0];
  v82 = (char *)v949[1];
  v981 = *(_OWORD *)v949;
  v949[0] = 0;
  v949[1] = 0;
  if (*((_QWORD *)&v981 + 1))
  {
    v83 = (unint64_t *)(v82 + 16);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v982 = &off_24EC2E020;
  v85 = (_QWORD *)operator new();
  *v85 = &off_24EC2F7C0;
  v85[1] = v81;
  v85[2] = v82;
  *(_QWORD *)&v983 = v85;
  v87 = *((_QWORD *)&v981 + 1);
  v86 = v981;
  if (!*((_QWORD *)&v981 + 1))
  {
    *((_QWORD *)&v983 + 1) = v981;
    v984 = 0;
    if ((_QWORD)v981)
      v91 = v981 + 16;
    else
      v91 = 0;
    goto LABEL_121;
  }
  v88 = (unint64_t *)(*((_QWORD *)&v981 + 1) + 16);
  do
    v89 = __ldxr(v88);
  while (__stxr(v89 + 1, v88));
  v90 = *((_QWORD *)&v981 + 1);
  *((_QWORD *)&v983 + 1) = v86;
  v984 = v87;
  if ((_QWORD)v981)
    v91 = v981 + 16;
  else
    v91 = 0;
  if (!*((_QWORD *)&v981 + 1))
  {
    v86 = v981;
LABEL_121:
    v94 = 0;
    v985 = &off_24EC2E888;
    v986 = v91;
    goto LABEL_122;
  }
  v92 = (unint64_t *)(*((_QWORD *)&v981 + 1) + 16);
  do
    v93 = __ldxr(v92);
  while (__stxr(v93 + 1, v92));
  v94 = *((_QWORD *)&v981 + 1);
  v86 = v981;
  v985 = &off_24EC2E888;
  *(_QWORD *)&v986 = v91;
  *((_QWORD *)&v986 + 1) = v90;
  if (*((_QWORD *)&v981 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v981 + 1) + 16);
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }
LABEL_122:
  if (v86)
    v97 = v86 + 24;
  else
    v97 = 0;
  v987 = &off_24EC2E850;
  *(_QWORD *)&v988 = v97;
  *((_QWORD *)&v988 + 1) = v94;
  if (SHIBYTE(v963[2]) < 0)
  {
    operator delete(v963[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_127;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_127:
    *(_OWORD *)v962 = *(_OWORD *)a2;
    v962[2] = *(void **)(a2 + 16);
    goto LABEL_130;
  }
  sub_223197FA4(v962, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_130:
  v99 = *(void **)a3;
  v98 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v961 = *(_QWORD *)a3;
  *((_QWORD *)&v961 + 1) = v98;
  if (v98)
  {
    v100 = v98 + 1;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = a4[2];
  v103 = HIBYTE(v962[2]);
  if (SHIBYTE(v962[2]) < 0)
  {
    sub_223197FA4(v949, v962[0], (unint64_t)v962[1]);
    v103 = HIBYTE(v962[2]);
  }
  else
  {
    *(_OWORD *)v949 = *(_OWORD *)v962;
    v949[2] = v962[2];
  }
  *(void **)((char *)v1088 + 7) = *(void **)((char *)&v962[1] + 7);
  v104 = v962[0];
  v1088[0] = v962[1];
  memset(v962, 0, 24);
  v1100[0] = v1088[0];
  *(void **)((char *)v1100 + 7) = *(void **)((char *)v1088 + 7);
  *(void **)((char *)v1088 + 7) = 0;
  v1088[0] = 0;
  v1124[0] = v99;
  v1124[1] = v98;
  if (v98)
  {
    v105 = v98 + 1;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
  }
  v107 = (char *)operator new();
  v1112[0] = v1100[0];
  *(void **)((char *)v1112 + 7) = *(void **)((char *)v1100 + 7);
  v1100[0] = 0;
  *(void **)((char *)v1100 + 7) = 0;
  v108 = *(_OWORD *)v1124;
  v1124[0] = 0;
  v1124[1] = 0;
  v107[8] = 1;
  *((_QWORD *)v107 + 4) = 0;
  *((_QWORD *)v107 + 5) = 0;
  *(_QWORD *)v107 = &off_24EC2F838;
  *((_QWORD *)v107 + 2) = &unk_24EC2F8B0;
  *((_QWORD *)v107 + 3) = &unk_24EC2F8F0;
  v109 = v1112[0];
  *(void **)(v107 + 63) = *(void **)((char *)v1112 + 7);
  *((_QWORD *)v107 + 6) = v104;
  *((_QWORD *)v107 + 7) = v109;
  v107[71] = v103;
  v1112[0] = 0;
  *(void **)((char *)v1112 + 7) = 0;
  *(_OWORD *)(v107 + 72) = v108;
  v1136[1] = 0;
  v1136[0] = 0;
  v110 = operator new();
  *(_QWORD *)v110 = &off_24EC2F9D8;
  *(_OWORD *)(v110 + 8) = *(_OWORD *)v102;
  *(_QWORD *)v102 = 0;
  *(_QWORD *)(v102 + 8) = 0;
  *((_QWORD *)v107 + 17) = 0;
  *((_QWORD *)v107 + 11) = v110;
  *((_QWORD *)v107 + 12) = v107 + 96;
  *((_QWORD *)v107 + 13) = v107 + 96;
  *((_QWORD *)v107 + 14) = 0;
  *((_QWORD *)v107 + 15) = v107 + 120;
  *((_QWORD *)v107 + 16) = v107 + 120;
  *((_QWORD *)v107 + 18) = 0;
  if (!*((_QWORD *)v107 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v111 = (std::__shared_weak_count *)operator new();
  v111->__shared_owners_ = 0;
  v112 = (unint64_t *)&v111->__shared_owners_;
  v111->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2FE78;
  v111->__shared_weak_owners_ = 0;
  v111[1].__vftable = (std::__shared_weak_count_vtbl *)v107;
  v113 = (std::__shared_weak_count *)*((_QWORD *)v107 + 5);
  if (v113)
  {
    if (v113->__shared_owners_ != -1)
      goto LABEL_154;
    do
      v114 = __ldxr(v112);
    while (__stxr(v114 + 1, v112));
    v115 = (unint64_t *)&v111->__shared_weak_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
    *((_QWORD *)v107 + 4) = v107;
    *((_QWORD *)v107 + 5) = v111;
    std::__shared_weak_count::__release_weak(v113);
  }
  else
  {
    do
      v117 = __ldxr(v112);
    while (__stxr(v117 + 1, v112));
    v118 = (unint64_t *)&v111->__shared_weak_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
    *((_QWORD *)v107 + 4) = v107;
    *((_QWORD *)v107 + 5) = v111;
  }
  do
    v120 = __ldaxr(v112);
  while (__stlxr(v120 - 1, v112));
  if (!v120)
  {
    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
    std::__shared_weak_count::__release_weak(v111);
  }
LABEL_154:
  v121 = (std::__shared_weak_count *)v1136[1];
  if (v1136[1])
  {
    v122 = (unint64_t *)((char *)v1136[1] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v1136[0] = v107;
  v1136[1] = v111;
  v124 = (std::__shared_weak_count *)v1124[1];
  if (v1124[1])
  {
    v125 = (unint64_t *)((char *)v1124[1] + 8);
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
    }
  }
  v127 = v961;
  v961 = 0uLL;
  *(_OWORD *)&v963[1] = *(_OWORD *)v949;
  v963[0] = &off_24EC2E058;
  v964 = v949[2];
  memset(v949, 0, sizeof(v949));
  *(void **)&v965[15] = *(void **)((char *)v1112 + 7);
  *(_QWORD *)v965 = 0x7974706D45;
  *(void **)&v965[8] = v1112[0];
  v965[23] = 5;
  *(void **)((char *)v1112 + 7) = 0;
  v1112[0] = 0;
  v966 = v127;
  v1124[1] = 0;
  v1124[0] = 0;
  v128 = v1136[0];
  v129 = (char *)v1136[1];
  v967 = *(_OWORD *)v1136;
  v1136[0] = 0;
  v1136[1] = 0;
  if (*((_QWORD *)&v967 + 1))
  {
    v130 = (unint64_t *)(v129 + 16);
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v968 = &off_24EC2E088;
  v132 = (_QWORD *)operator new();
  *v132 = &off_24EC2FEC8;
  v132[1] = v128;
  v132[2] = v129;
  *(_QWORD *)&v969 = v132;
  v134 = *((_QWORD *)&v967 + 1);
  v133 = v967;
  if (!*((_QWORD *)&v967 + 1))
  {
    *((_QWORD *)&v969 + 1) = v967;
    v970 = 0;
    if ((_QWORD)v967)
      v138 = v967 + 16;
    else
      v138 = 0;
    goto LABEL_184;
  }
  v135 = (unint64_t *)(*((_QWORD *)&v967 + 1) + 16);
  do
    v136 = __ldxr(v135);
  while (__stxr(v136 + 1, v135));
  v137 = *((_QWORD *)&v967 + 1);
  *((_QWORD *)&v969 + 1) = v133;
  v970 = v134;
  if ((_QWORD)v967)
    v138 = v967 + 16;
  else
    v138 = 0;
  if (!*((_QWORD *)&v967 + 1))
  {
    v133 = v967;
LABEL_184:
    v141 = 0;
    v971 = &off_24EC2E888;
    v972 = v138;
    goto LABEL_185;
  }
  v139 = (unint64_t *)(*((_QWORD *)&v967 + 1) + 16);
  do
    v140 = __ldxr(v139);
  while (__stxr(v140 + 1, v139));
  v141 = *((_QWORD *)&v967 + 1);
  v133 = v967;
  v971 = &off_24EC2E888;
  *(_QWORD *)&v972 = v138;
  *((_QWORD *)&v972 + 1) = v137;
  if (*((_QWORD *)&v967 + 1))
  {
    v142 = (unint64_t *)(*((_QWORD *)&v967 + 1) + 16);
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
LABEL_185:
  if (v133)
    v144 = v133 + 24;
  else
    v144 = 0;
  v973 = &off_24EC2E850;
  *(_QWORD *)&v974 = v144;
  *((_QWORD *)&v974 + 1) = v141;
  if (SHIBYTE(v949[2]) < 0)
  {
    operator delete(v949[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_190;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_190:
    *(_OWORD *)v948 = *(_OWORD *)a2;
    v948[2] = *(void **)(a2 + 16);
    goto LABEL_193;
  }
  sub_223197FA4(v948, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_193:
  v146 = *(void **)a3;
  v145 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v947 = *(_QWORD *)a3;
  *((_QWORD *)&v947 + 1) = v145;
  if (v145)
  {
    v147 = v145 + 1;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
  }
  v149 = a4[3];
  v150 = HIBYTE(v948[2]);
  if (SHIBYTE(v948[2]) < 0)
  {
    sub_223197FA4(v1136, v948[0], (unint64_t)v948[1]);
    v150 = HIBYTE(v948[2]);
  }
  else
  {
    *(_OWORD *)v1136 = *(_OWORD *)v948;
    v1136[2] = v948[2];
  }
  *(void **)((char *)v1076 + 7) = *(void **)((char *)&v948[1] + 7);
  v151 = v948[0];
  v1076[0] = v948[1];
  memset(v948, 0, 24);
  v1088[0] = v1076[0];
  *(void **)((char *)v1088 + 7) = *(void **)((char *)v1076 + 7);
  *(void **)((char *)v1076 + 7) = 0;
  v1076[0] = 0;
  v1112[0] = v146;
  v1112[1] = v145;
  if (v145)
  {
    v152 = v145 + 1;
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
  }
  v154 = (char *)operator new();
  v1100[0] = v1088[0];
  *(void **)((char *)v1100 + 7) = *(void **)((char *)v1088 + 7);
  v1088[0] = 0;
  *(void **)((char *)v1088 + 7) = 0;
  v155 = *(_OWORD *)v1112;
  v1112[0] = 0;
  v1112[1] = 0;
  v154[8] = 1;
  *((_QWORD *)v154 + 4) = 0;
  *((_QWORD *)v154 + 5) = 0;
  *(_QWORD *)v154 = &off_24EC2FF40;
  *((_QWORD *)v154 + 2) = &unk_24EC2FFB8;
  *((_QWORD *)v154 + 3) = &unk_24EC2FFF8;
  v156 = v1100[0];
  *(void **)(v154 + 63) = *(void **)((char *)v1100 + 7);
  *((_QWORD *)v154 + 6) = v151;
  *((_QWORD *)v154 + 7) = v156;
  v154[71] = v150;
  v1100[0] = 0;
  *(void **)((char *)v1100 + 7) = 0;
  *(_OWORD *)(v154 + 72) = v155;
  v1124[1] = 0;
  v1124[0] = 0;
  v157 = operator new();
  *(_QWORD *)v157 = &off_24EC300E0;
  *(_OWORD *)(v157 + 8) = *(_OWORD *)v149;
  *(_QWORD *)v149 = 0;
  *(_QWORD *)(v149 + 8) = 0;
  *((_QWORD *)v154 + 11) = v157;
  *((_QWORD *)v154 + 12) = v154 + 96;
  *((_QWORD *)v154 + 13) = v154 + 96;
  *((_QWORD *)v154 + 14) = 0;
  *((_QWORD *)v154 + 15) = v154 + 120;
  *((_QWORD *)v154 + 16) = v154 + 120;
  *((_QWORD *)v154 + 17) = 0;
  v158 = operator new();
  v159 = operator new(0x10uLL);
  *v159 = 0;
  v159[1] = 0;
  *(_QWORD *)v158 = v159;
  *(_QWORD *)(v158 + 8) = v159 + 2;
  *(_QWORD *)(v158 + 16) = v159 + 2;
  *(_QWORD *)(v158 + 24) = 0;
  *(_QWORD *)(v158 + 32) = 0;
  *(_QWORD *)(v158 + 40) = 0;
  *(_BYTE *)(v158 + 48) = 1;
  *(_QWORD *)(v158 + 56) = 850045863;
  *(_OWORD *)(v158 + 64) = 0u;
  *(_OWORD *)(v158 + 80) = 0u;
  *(_OWORD *)(v158 + 96) = 0u;
  *(_QWORD *)(v158 + 112) = 0;
  *((_QWORD *)v154 + 18) = v158;
  if (!*((_QWORD *)v154 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v160 = (std::__shared_weak_count *)operator new();
  v160->__shared_owners_ = 0;
  v161 = (unint64_t *)&v160->__shared_owners_;
  v160->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30580;
  v160->__shared_weak_owners_ = 0;
  v160[1].__vftable = (std::__shared_weak_count_vtbl *)v154;
  v162 = (std::__shared_weak_count *)*((_QWORD *)v154 + 5);
  if (v162)
  {
    if (v162->__shared_owners_ != -1)
      goto LABEL_217;
    do
      v163 = __ldxr(v161);
    while (__stxr(v163 + 1, v161));
    v164 = (unint64_t *)&v160->__shared_weak_owners_;
    do
      v165 = __ldxr(v164);
    while (__stxr(v165 + 1, v164));
    *((_QWORD *)v154 + 4) = v154;
    *((_QWORD *)v154 + 5) = v160;
    std::__shared_weak_count::__release_weak(v162);
  }
  else
  {
    do
      v166 = __ldxr(v161);
    while (__stxr(v166 + 1, v161));
    v167 = (unint64_t *)&v160->__shared_weak_owners_;
    do
      v168 = __ldxr(v167);
    while (__stxr(v168 + 1, v167));
    *((_QWORD *)v154 + 4) = v154;
    *((_QWORD *)v154 + 5) = v160;
  }
  do
    v169 = __ldaxr(v161);
  while (__stlxr(v169 - 1, v161));
  if (!v169)
  {
    ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
    std::__shared_weak_count::__release_weak(v160);
  }
LABEL_217:
  v170 = (std::__shared_weak_count *)v1124[1];
  if (v1124[1])
  {
    v171 = (unint64_t *)((char *)v1124[1] + 8);
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
  v1124[0] = v154;
  v1124[1] = v160;
  v173 = (std::__shared_weak_count *)v1112[1];
  if (v1112[1])
  {
    v174 = (unint64_t *)((char *)v1112[1] + 8);
    do
      v175 = __ldaxr(v174);
    while (__stlxr(v175 - 1, v174));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
      std::__shared_weak_count::__release_weak(v173);
    }
  }
  v176 = v947;
  v947 = 0uLL;
  *(_OWORD *)&v949[1] = *(_OWORD *)v1136;
  v949[0] = &off_24EC2E0C0;
  v950 = v1136[2];
  memset(v1136, 0, sizeof(v1136));
  *(void **)&v951[15] = *(void **)((char *)v1100 + 7);
  *(_QWORD *)v951 = 0x7974706D45;
  *(void **)&v951[8] = v1100[0];
  v951[23] = 5;
  *(void **)((char *)v1100 + 7) = 0;
  v1100[0] = 0;
  v952 = v176;
  v1112[1] = 0;
  v1112[0] = 0;
  v177 = v1124[0];
  v178 = (char *)v1124[1];
  v953 = *(_OWORD *)v1124;
  v1124[0] = 0;
  v1124[1] = 0;
  if (*((_QWORD *)&v953 + 1))
  {
    v179 = (unint64_t *)(v178 + 16);
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
  }
  v954 = &off_24EC2E0F0;
  v181 = (_QWORD *)operator new();
  *v181 = &off_24EC305D0;
  v181[1] = v177;
  v181[2] = v178;
  *(_QWORD *)&v955 = v181;
  v183 = *((_QWORD *)&v953 + 1);
  v182 = v953;
  if (!*((_QWORD *)&v953 + 1))
  {
    *((_QWORD *)&v955 + 1) = v953;
    v956 = 0;
    if ((_QWORD)v953)
      v187 = v953 + 16;
    else
      v187 = 0;
    goto LABEL_247;
  }
  v184 = (unint64_t *)(*((_QWORD *)&v953 + 1) + 16);
  do
    v185 = __ldxr(v184);
  while (__stxr(v185 + 1, v184));
  v186 = *((_QWORD *)&v953 + 1);
  *((_QWORD *)&v955 + 1) = v182;
  v956 = v183;
  if ((_QWORD)v953)
    v187 = v953 + 16;
  else
    v187 = 0;
  if (!*((_QWORD *)&v953 + 1))
  {
    v182 = v953;
LABEL_247:
    v190 = 0;
    v957 = &off_24EC2E888;
    v958 = v187;
    goto LABEL_248;
  }
  v188 = (unint64_t *)(*((_QWORD *)&v953 + 1) + 16);
  do
    v189 = __ldxr(v188);
  while (__stxr(v189 + 1, v188));
  v190 = *((_QWORD *)&v953 + 1);
  v182 = v953;
  v957 = &off_24EC2E888;
  *(_QWORD *)&v958 = v187;
  *((_QWORD *)&v958 + 1) = v186;
  if (*((_QWORD *)&v953 + 1))
  {
    v191 = (unint64_t *)(*((_QWORD *)&v953 + 1) + 16);
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
LABEL_248:
  if (v182)
    v193 = v182 + 24;
  else
    v193 = 0;
  v959 = &off_24EC2E850;
  *(_QWORD *)&v960 = v193;
  *((_QWORD *)&v960 + 1) = v190;
  if (SHIBYTE(v1136[2]) < 0)
  {
    operator delete(v1136[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_253;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_253:
    *(_OWORD *)v946 = *(_OWORD *)a2;
    v946[2] = *(void **)(a2 + 16);
    goto LABEL_256;
  }
  sub_223197FA4(v946, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_256:
  v195 = *(void **)a3;
  v194 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v945 = *(_QWORD *)a3;
  *((_QWORD *)&v945 + 1) = v194;
  if (v194)
  {
    v196 = v194 + 1;
    do
      v197 = __ldxr(v196);
    while (__stxr(v197 + 1, v196));
  }
  v198 = a4[4];
  v199 = HIBYTE(v946[2]);
  if (SHIBYTE(v946[2]) < 0)
  {
    sub_223197FA4(v1124, v946[0], (unint64_t)v946[1]);
    v199 = HIBYTE(v946[2]);
  }
  else
  {
    *(_OWORD *)v1124 = *(_OWORD *)v946;
    v1124[2] = v946[2];
  }
  *(void **)((char *)v1064 + 7) = *(void **)((char *)&v946[1] + 7);
  v200 = v946[0];
  v1064[0] = v946[1];
  memset(v946, 0, 24);
  v1076[0] = v1064[0];
  *(void **)((char *)v1076 + 7) = *(void **)((char *)v1064 + 7);
  *(void **)((char *)v1064 + 7) = 0;
  v1064[0] = 0;
  v1100[0] = v195;
  v1100[1] = v194;
  if (v194)
  {
    v201 = v194 + 1;
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 1, v201));
  }
  v203 = (char *)operator new();
  v1088[0] = v1076[0];
  *(void **)((char *)v1088 + 7) = *(void **)((char *)v1076 + 7);
  v1076[0] = 0;
  *(void **)((char *)v1076 + 7) = 0;
  v204 = *(_OWORD *)v1100;
  v1100[0] = 0;
  v1100[1] = 0;
  v203[8] = 1;
  *((_QWORD *)v203 + 4) = 0;
  *((_QWORD *)v203 + 5) = 0;
  *(_QWORD *)v203 = &off_24EC30648;
  *((_QWORD *)v203 + 2) = &unk_24EC306C0;
  *((_QWORD *)v203 + 3) = &unk_24EC30700;
  v205 = v1088[0];
  *(void **)(v203 + 63) = *(void **)((char *)v1088 + 7);
  *((_QWORD *)v203 + 6) = v200;
  *((_QWORD *)v203 + 7) = v205;
  v203[71] = v199;
  v1088[0] = 0;
  *(void **)((char *)v1088 + 7) = 0;
  *(_OWORD *)(v203 + 72) = v204;
  v1112[1] = 0;
  v1112[0] = 0;
  v206 = operator new();
  *(_QWORD *)v206 = &off_24EC307F8;
  *(_OWORD *)(v206 + 8) = *(_OWORD *)v198;
  *(_QWORD *)v198 = 0;
  *(_QWORD *)(v198 + 8) = 0;
  *((_QWORD *)v203 + 11) = v206;
  *((_QWORD *)v203 + 12) = v203 + 96;
  *((_QWORD *)v203 + 13) = v203 + 96;
  *((_QWORD *)v203 + 14) = 0;
  *((_QWORD *)v203 + 15) = v203 + 120;
  *((_QWORD *)v203 + 16) = v203 + 120;
  *((_QWORD *)v203 + 17) = 0;
  v207 = operator new();
  v208 = operator new(0x10uLL);
  *v208 = 0;
  v208[1] = 0;
  *(_QWORD *)v207 = v208;
  *(_QWORD *)(v207 + 8) = v208 + 2;
  *(_QWORD *)(v207 + 16) = v208 + 2;
  *(_QWORD *)(v207 + 24) = 0;
  *(_QWORD *)(v207 + 32) = 0;
  *(_QWORD *)(v207 + 40) = 0;
  *(_BYTE *)(v207 + 48) = 1;
  *(_QWORD *)(v207 + 56) = 850045863;
  *(_OWORD *)(v207 + 64) = 0u;
  *(_OWORD *)(v207 + 80) = 0u;
  *(_OWORD *)(v207 + 96) = 0u;
  *(_QWORD *)(v207 + 112) = 0;
  *((_QWORD *)v203 + 18) = v207;
  if (!*((_QWORD *)v203 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v209 = (std::__shared_weak_count *)operator new();
  v209->__shared_owners_ = 0;
  v210 = (unint64_t *)&v209->__shared_owners_;
  v209->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC30CE8;
  v209->__shared_weak_owners_ = 0;
  v209[1].__vftable = (std::__shared_weak_count_vtbl *)v203;
  v211 = (std::__shared_weak_count *)*((_QWORD *)v203 + 5);
  if (v211)
  {
    if (v211->__shared_owners_ != -1)
      goto LABEL_280;
    do
      v212 = __ldxr(v210);
    while (__stxr(v212 + 1, v210));
    v213 = (unint64_t *)&v209->__shared_weak_owners_;
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
    *((_QWORD *)v203 + 4) = v203;
    *((_QWORD *)v203 + 5) = v209;
    std::__shared_weak_count::__release_weak(v211);
  }
  else
  {
    do
      v215 = __ldxr(v210);
    while (__stxr(v215 + 1, v210));
    v216 = (unint64_t *)&v209->__shared_weak_owners_;
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
    *((_QWORD *)v203 + 4) = v203;
    *((_QWORD *)v203 + 5) = v209;
  }
  do
    v218 = __ldaxr(v210);
  while (__stlxr(v218 - 1, v210));
  if (!v218)
  {
    ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
    std::__shared_weak_count::__release_weak(v209);
  }
LABEL_280:
  v219 = (std::__shared_weak_count *)v1112[1];
  if (v1112[1])
  {
    v220 = (unint64_t *)((char *)v1112[1] + 8);
    do
      v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }
  v1112[0] = v203;
  v1112[1] = v209;
  v222 = (std::__shared_weak_count *)v1100[1];
  if (v1100[1])
  {
    v223 = (unint64_t *)((char *)v1100[1] + 8);
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  v225 = v945;
  v945 = 0uLL;
  *(_OWORD *)&v1136[1] = *(_OWORD *)v1124;
  v1136[0] = &off_24EC2E128;
  v1137 = v1124[2];
  memset(v1124, 0, sizeof(v1124));
  *(void **)&v1138[15] = *(void **)((char *)v1088 + 7);
  *(_QWORD *)v1138 = 0x7974706D45;
  *(void **)&v1138[8] = v1088[0];
  v1138[23] = 5;
  *(void **)((char *)v1088 + 7) = 0;
  v1088[0] = 0;
  v1139 = v225;
  v1100[1] = 0;
  v1100[0] = 0;
  v226 = v1112[0];
  v227 = (char *)v1112[1];
  v1140 = *(_OWORD *)v1112;
  v1112[0] = 0;
  v1112[1] = 0;
  if (*((_QWORD *)&v1140 + 1))
  {
    v228 = (unint64_t *)(v227 + 16);
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 1, v228));
  }
  v1141 = &off_24EC2E158;
  v230 = (_QWORD *)operator new();
  *v230 = &off_24EC30D38;
  v230[1] = v226;
  v230[2] = v227;
  *(_QWORD *)&v1142 = v230;
  v232 = *((_QWORD *)&v1140 + 1);
  v231 = v1140;
  if (!*((_QWORD *)&v1140 + 1))
  {
    *((_QWORD *)&v1142 + 1) = v1140;
    v1143 = 0;
    if ((_QWORD)v1140)
      v236 = v1140 + 16;
    else
      v236 = 0;
    goto LABEL_310;
  }
  v233 = (unint64_t *)(*((_QWORD *)&v1140 + 1) + 16);
  do
    v234 = __ldxr(v233);
  while (__stxr(v234 + 1, v233));
  v235 = *((_QWORD *)&v1140 + 1);
  *((_QWORD *)&v1142 + 1) = v231;
  v1143 = v232;
  if ((_QWORD)v1140)
    v236 = v1140 + 16;
  else
    v236 = 0;
  if (!*((_QWORD *)&v1140 + 1))
  {
    v231 = v1140;
LABEL_310:
    v239 = 0;
    v1144 = &off_24EC2E190;
    v1145 = v236;
    goto LABEL_311;
  }
  v237 = (unint64_t *)(*((_QWORD *)&v1140 + 1) + 16);
  do
    v238 = __ldxr(v237);
  while (__stxr(v238 + 1, v237));
  v239 = *((_QWORD *)&v1140 + 1);
  v231 = v1140;
  v1144 = &off_24EC2E190;
  *(_QWORD *)&v1145 = v236;
  *((_QWORD *)&v1145 + 1) = v235;
  if (*((_QWORD *)&v1140 + 1))
  {
    v240 = (unint64_t *)(*((_QWORD *)&v1140 + 1) + 16);
    do
      v241 = __ldxr(v240);
    while (__stxr(v241 + 1, v240));
  }
LABEL_311:
  if (v231)
    v242 = v231 + 24;
  else
    v242 = 0;
  v1146 = &off_24EC2E850;
  *(_QWORD *)&v1147 = v242;
  *((_QWORD *)&v1147 + 1) = v239;
  if (SHIBYTE(v1124[2]) < 0)
  {
    operator delete(v1124[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_316;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_316:
    *(_OWORD *)v944 = *(_OWORD *)a2;
    v944[2] = *(void **)(a2 + 16);
    goto LABEL_319;
  }
  sub_223197FA4(v944, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_319:
  v244 = *(void **)a3;
  v243 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v943 = *(_QWORD *)a3;
  *((_QWORD *)&v943 + 1) = v243;
  if (v243)
  {
    v245 = v243 + 1;
    do
      v246 = __ldxr(v245);
    while (__stxr(v246 + 1, v245));
  }
  v247 = a4[5];
  v248 = HIBYTE(v944[2]);
  if (SHIBYTE(v944[2]) < 0)
  {
    sub_223197FA4(v1112, v944[0], (unint64_t)v944[1]);
    v248 = HIBYTE(v944[2]);
  }
  else
  {
    *(_OWORD *)v1112 = *(_OWORD *)v944;
    v1112[2] = v944[2];
  }
  *(void **)((char *)v1052 + 7) = *(void **)((char *)&v944[1] + 7);
  v249 = v944[0];
  v1052[0] = v944[1];
  memset(v944, 0, 24);
  v1064[0] = v1052[0];
  *(void **)((char *)v1064 + 7) = *(void **)((char *)v1052 + 7);
  *(void **)((char *)v1052 + 7) = 0;
  v1052[0] = 0;
  v1088[0] = v244;
  v1088[1] = v243;
  if (v243)
  {
    v250 = v243 + 1;
    do
      v251 = __ldxr(v250);
    while (__stxr(v251 + 1, v250));
  }
  v252 = (char *)operator new();
  v1076[0] = v1064[0];
  *(void **)((char *)v1076 + 7) = *(void **)((char *)v1064 + 7);
  v1064[0] = 0;
  *(void **)((char *)v1064 + 7) = 0;
  v253 = *(_OWORD *)v1088;
  v1088[0] = 0;
  v1088[1] = 0;
  v252[8] = 1;
  *((_QWORD *)v252 + 4) = 0;
  *((_QWORD *)v252 + 5) = 0;
  *(_QWORD *)v252 = &off_24EC30DB0;
  *((_QWORD *)v252 + 2) = &unk_24EC30E28;
  *((_QWORD *)v252 + 3) = &unk_24EC30E68;
  v254 = v1076[0];
  *(void **)(v252 + 63) = *(void **)((char *)v1076 + 7);
  *((_QWORD *)v252 + 6) = v249;
  *((_QWORD *)v252 + 7) = v254;
  v252[71] = v248;
  v1076[0] = 0;
  *(void **)((char *)v1076 + 7) = 0;
  *(_OWORD *)(v252 + 72) = v253;
  v1100[1] = 0;
  v1100[0] = 0;
  v255 = operator new();
  *(_QWORD *)v255 = &off_24EC30F50;
  *(_OWORD *)(v255 + 8) = *(_OWORD *)v247;
  *(_QWORD *)v247 = 0;
  *(_QWORD *)(v247 + 8) = 0;
  *((_QWORD *)v252 + 17) = 0;
  *((_QWORD *)v252 + 11) = v255;
  *((_QWORD *)v252 + 12) = v252 + 96;
  *((_QWORD *)v252 + 13) = v252 + 96;
  *((_QWORD *)v252 + 14) = 0;
  *((_QWORD *)v252 + 15) = v252 + 120;
  *((_QWORD *)v252 + 16) = v252 + 120;
  *((_QWORD *)v252 + 18) = 0;
  if (!*((_QWORD *)v252 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v256 = (std::__shared_weak_count *)operator new();
  v256->__shared_owners_ = 0;
  v257 = (unint64_t *)&v256->__shared_owners_;
  v256->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC313F0;
  v256->__shared_weak_owners_ = 0;
  v256[1].__vftable = (std::__shared_weak_count_vtbl *)v252;
  v258 = (std::__shared_weak_count *)*((_QWORD *)v252 + 5);
  if (v258)
  {
    if (v258->__shared_owners_ != -1)
      goto LABEL_343;
    do
      v259 = __ldxr(v257);
    while (__stxr(v259 + 1, v257));
    v260 = (unint64_t *)&v256->__shared_weak_owners_;
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
    *((_QWORD *)v252 + 4) = v252;
    *((_QWORD *)v252 + 5) = v256;
    std::__shared_weak_count::__release_weak(v258);
  }
  else
  {
    do
      v262 = __ldxr(v257);
    while (__stxr(v262 + 1, v257));
    v263 = (unint64_t *)&v256->__shared_weak_owners_;
    do
      v264 = __ldxr(v263);
    while (__stxr(v264 + 1, v263));
    *((_QWORD *)v252 + 4) = v252;
    *((_QWORD *)v252 + 5) = v256;
  }
  do
    v265 = __ldaxr(v257);
  while (__stlxr(v265 - 1, v257));
  if (!v265)
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
  }
LABEL_343:
  v266 = (std::__shared_weak_count *)v1100[1];
  if (v1100[1])
  {
    v267 = (unint64_t *)((char *)v1100[1] + 8);
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  v1100[0] = v252;
  v1100[1] = v256;
  v269 = (std::__shared_weak_count *)v1088[1];
  if (v1088[1])
  {
    v270 = (unint64_t *)((char *)v1088[1] + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = v943;
  v943 = 0uLL;
  *(_OWORD *)&v1124[1] = *(_OWORD *)v1112;
  v1124[0] = &off_24EC2E200;
  v1125 = v1112[2];
  memset(v1112, 0, sizeof(v1112));
  *(void **)&v1126[15] = *(void **)((char *)v1076 + 7);
  *(_QWORD *)v1126 = 0x7974706D45;
  *(void **)&v1126[8] = v1076[0];
  v1126[23] = 5;
  *(void **)((char *)v1076 + 7) = 0;
  v1076[0] = 0;
  v1127 = v272;
  v1088[1] = 0;
  v1088[0] = 0;
  v273 = v1100[0];
  v274 = (char *)v1100[1];
  v1128 = *(_OWORD *)v1100;
  v1100[0] = 0;
  v1100[1] = 0;
  if (*((_QWORD *)&v1128 + 1))
  {
    v275 = (unint64_t *)(v274 + 16);
    do
      v276 = __ldxr(v275);
    while (__stxr(v276 + 1, v275));
  }
  v1129 = &off_24EC2E230;
  v277 = (_QWORD *)operator new();
  *v277 = &off_24EC31440;
  v277[1] = v273;
  v277[2] = v274;
  *(_QWORD *)&v1130 = v277;
  v279 = *((_QWORD *)&v1128 + 1);
  v278 = v1128;
  if (!*((_QWORD *)&v1128 + 1))
  {
    *((_QWORD *)&v1130 + 1) = v1128;
    v1131 = 0;
    if ((_QWORD)v1128)
      v283 = v1128 + 16;
    else
      v283 = 0;
    goto LABEL_373;
  }
  v280 = (unint64_t *)(*((_QWORD *)&v1128 + 1) + 16);
  do
    v281 = __ldxr(v280);
  while (__stxr(v281 + 1, v280));
  v282 = *((_QWORD *)&v1128 + 1);
  *((_QWORD *)&v1130 + 1) = v278;
  v1131 = v279;
  if ((_QWORD)v1128)
    v283 = v1128 + 16;
  else
    v283 = 0;
  if (!*((_QWORD *)&v1128 + 1))
  {
    v278 = v1128;
LABEL_373:
    v286 = 0;
    v1132 = &off_24EC2E190;
    v1133 = v283;
    goto LABEL_374;
  }
  v284 = (unint64_t *)(*((_QWORD *)&v1128 + 1) + 16);
  do
    v285 = __ldxr(v284);
  while (__stxr(v285 + 1, v284));
  v286 = *((_QWORD *)&v1128 + 1);
  v278 = v1128;
  v1132 = &off_24EC2E190;
  *(_QWORD *)&v1133 = v283;
  *((_QWORD *)&v1133 + 1) = v282;
  if (*((_QWORD *)&v1128 + 1))
  {
    v287 = (unint64_t *)(*((_QWORD *)&v1128 + 1) + 16);
    do
      v288 = __ldxr(v287);
    while (__stxr(v288 + 1, v287));
  }
LABEL_374:
  if (v278)
    v289 = v278 + 24;
  else
    v289 = 0;
  v1134 = &off_24EC2E850;
  *(_QWORD *)&v1135 = v289;
  *((_QWORD *)&v1135 + 1) = v286;
  if (SHIBYTE(v1112[2]) < 0)
  {
    operator delete(v1112[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_379;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_379:
    *(_OWORD *)v942 = *(_OWORD *)a2;
    v942[2] = *(void **)(a2 + 16);
    goto LABEL_382;
  }
  sub_223197FA4(v942, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_382:
  v291 = *(void **)a3;
  v290 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v941 = *(_QWORD *)a3;
  *((_QWORD *)&v941 + 1) = v290;
  if (v290)
  {
    v292 = v290 + 1;
    do
      v293 = __ldxr(v292);
    while (__stxr(v293 + 1, v292));
  }
  v294 = a4[6];
  v295 = HIBYTE(v942[2]);
  if (SHIBYTE(v942[2]) < 0)
  {
    sub_223197FA4(v1100, v942[0], (unint64_t)v942[1]);
    v295 = HIBYTE(v942[2]);
  }
  else
  {
    *(_OWORD *)v1100 = *(_OWORD *)v942;
    v1100[2] = v942[2];
  }
  *(void **)((char *)v1040 + 7) = *(void **)((char *)&v942[1] + 7);
  v296 = v942[0];
  v1040[0] = v942[1];
  memset(v942, 0, 24);
  v1052[0] = v1040[0];
  *(void **)((char *)v1052 + 7) = *(void **)((char *)v1040 + 7);
  *(void **)((char *)v1040 + 7) = 0;
  v1040[0] = 0;
  v1076[0] = v291;
  v1076[1] = v290;
  if (v290)
  {
    v297 = v290 + 1;
    do
      v298 = __ldxr(v297);
    while (__stxr(v298 + 1, v297));
  }
  v299 = (char *)operator new();
  v1064[0] = v1052[0];
  *(void **)((char *)v1064 + 7) = *(void **)((char *)v1052 + 7);
  v1052[0] = 0;
  *(void **)((char *)v1052 + 7) = 0;
  v300 = *(_OWORD *)v1076;
  v1076[0] = 0;
  v1076[1] = 0;
  v299[8] = 1;
  *((_QWORD *)v299 + 4) = 0;
  *((_QWORD *)v299 + 5) = 0;
  *(_QWORD *)v299 = &off_24EC314B8;
  *((_QWORD *)v299 + 2) = &unk_24EC31530;
  *((_QWORD *)v299 + 3) = &unk_24EC31570;
  v301 = v1064[0];
  *(void **)(v299 + 63) = *(void **)((char *)v1064 + 7);
  *((_QWORD *)v299 + 6) = v296;
  *((_QWORD *)v299 + 7) = v301;
  v299[71] = v295;
  v1064[0] = 0;
  *(void **)((char *)v1064 + 7) = 0;
  *(_OWORD *)(v299 + 72) = v300;
  v1088[1] = 0;
  v1088[0] = 0;
  v302 = operator new();
  *(_QWORD *)v302 = &off_24EC31658;
  *(_OWORD *)(v302 + 8) = *(_OWORD *)v294;
  *(_QWORD *)v294 = 0;
  *(_QWORD *)(v294 + 8) = 0;
  *((_QWORD *)v299 + 11) = v302;
  *((_QWORD *)v299 + 12) = v299 + 96;
  *((_QWORD *)v299 + 13) = v299 + 96;
  *((_QWORD *)v299 + 14) = 0;
  *((_QWORD *)v299 + 15) = v299 + 120;
  *((_QWORD *)v299 + 16) = v299 + 120;
  *((_QWORD *)v299 + 17) = 0;
  v303 = operator new();
  v304 = operator new(0x10uLL);
  *v304 = 0;
  v304[1] = 0;
  *(_QWORD *)v303 = v304;
  *(_QWORD *)(v303 + 8) = v304 + 2;
  *(_QWORD *)(v303 + 16) = v304 + 2;
  *(_QWORD *)(v303 + 24) = 0;
  *(_QWORD *)(v303 + 32) = 0;
  *(_QWORD *)(v303 + 40) = 0;
  *(_BYTE *)(v303 + 48) = 1;
  *(_QWORD *)(v303 + 56) = 850045863;
  *(_OWORD *)(v303 + 64) = 0u;
  *(_OWORD *)(v303 + 80) = 0u;
  *(_OWORD *)(v303 + 96) = 0u;
  *(_QWORD *)(v303 + 112) = 0;
  *((_QWORD *)v299 + 18) = v303;
  if (!*((_QWORD *)v299 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v305 = (std::__shared_weak_count *)operator new();
  v305->__shared_owners_ = 0;
  v306 = (unint64_t *)&v305->__shared_owners_;
  v305->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC31AF8;
  v305->__shared_weak_owners_ = 0;
  v305[1].__vftable = (std::__shared_weak_count_vtbl *)v299;
  v307 = (std::__shared_weak_count *)*((_QWORD *)v299 + 5);
  if (v307)
  {
    if (v307->__shared_owners_ != -1)
      goto LABEL_406;
    do
      v308 = __ldxr(v306);
    while (__stxr(v308 + 1, v306));
    v309 = (unint64_t *)&v305->__shared_weak_owners_;
    do
      v310 = __ldxr(v309);
    while (__stxr(v310 + 1, v309));
    *((_QWORD *)v299 + 4) = v299;
    *((_QWORD *)v299 + 5) = v305;
    std::__shared_weak_count::__release_weak(v307);
  }
  else
  {
    do
      v311 = __ldxr(v306);
    while (__stxr(v311 + 1, v306));
    v312 = (unint64_t *)&v305->__shared_weak_owners_;
    do
      v313 = __ldxr(v312);
    while (__stxr(v313 + 1, v312));
    *((_QWORD *)v299 + 4) = v299;
    *((_QWORD *)v299 + 5) = v305;
  }
  do
    v314 = __ldaxr(v306);
  while (__stlxr(v314 - 1, v306));
  if (!v314)
  {
    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
    std::__shared_weak_count::__release_weak(v305);
  }
LABEL_406:
  v315 = (std::__shared_weak_count *)v1088[1];
  if (v1088[1])
  {
    v316 = (unint64_t *)((char *)v1088[1] + 8);
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v1088[0] = v299;
  v1088[1] = v305;
  v318 = (std::__shared_weak_count *)v1076[1];
  if (v1076[1])
  {
    v319 = (unint64_t *)((char *)v1076[1] + 8);
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
  v321 = v941;
  v941 = 0uLL;
  *(_OWORD *)&v1112[1] = *(_OWORD *)v1100;
  v1112[0] = &off_24EC2E268;
  v1113 = v1100[2];
  memset(v1100, 0, sizeof(v1100));
  *(void **)&v1114[15] = *(void **)((char *)v1064 + 7);
  *(_QWORD *)v1114 = 0x7974706D45;
  *(void **)&v1114[8] = v1064[0];
  v1114[23] = 5;
  *(void **)((char *)v1064 + 7) = 0;
  v1064[0] = 0;
  v1115 = v321;
  v1076[1] = 0;
  v1076[0] = 0;
  v322 = v1088[0];
  v323 = (char *)v1088[1];
  v1116 = *(_OWORD *)v1088;
  v1088[0] = 0;
  v1088[1] = 0;
  if (*((_QWORD *)&v1116 + 1))
  {
    v324 = (unint64_t *)(v323 + 16);
    do
      v325 = __ldxr(v324);
    while (__stxr(v325 + 1, v324));
  }
  v1117 = &off_24EC2E298;
  v326 = (_QWORD *)operator new();
  *v326 = &off_24EC31B48;
  v326[1] = v322;
  v326[2] = v323;
  *(_QWORD *)&v1118 = v326;
  v328 = *((_QWORD *)&v1116 + 1);
  v327 = v1116;
  if (!*((_QWORD *)&v1116 + 1))
  {
    *((_QWORD *)&v1118 + 1) = v1116;
    v1119 = 0;
    if ((_QWORD)v1116)
      v332 = v1116 + 16;
    else
      v332 = 0;
    goto LABEL_436;
  }
  v329 = (unint64_t *)(*((_QWORD *)&v1116 + 1) + 16);
  do
    v330 = __ldxr(v329);
  while (__stxr(v330 + 1, v329));
  v331 = *((_QWORD *)&v1116 + 1);
  *((_QWORD *)&v1118 + 1) = v327;
  v1119 = v328;
  if ((_QWORD)v1116)
    v332 = v1116 + 16;
  else
    v332 = 0;
  if (!*((_QWORD *)&v1116 + 1))
  {
    v327 = v1116;
LABEL_436:
    v335 = 0;
    v1120 = &off_24EC2E190;
    v1121 = v332;
    goto LABEL_437;
  }
  v333 = (unint64_t *)(*((_QWORD *)&v1116 + 1) + 16);
  do
    v334 = __ldxr(v333);
  while (__stxr(v334 + 1, v333));
  v335 = *((_QWORD *)&v1116 + 1);
  v327 = v1116;
  v1120 = &off_24EC2E190;
  *(_QWORD *)&v1121 = v332;
  *((_QWORD *)&v1121 + 1) = v331;
  if (*((_QWORD *)&v1116 + 1))
  {
    v336 = (unint64_t *)(*((_QWORD *)&v1116 + 1) + 16);
    do
      v337 = __ldxr(v336);
    while (__stxr(v337 + 1, v336));
  }
LABEL_437:
  if (v327)
    v338 = v327 + 24;
  else
    v338 = 0;
  v1122 = &off_24EC2E850;
  *(_QWORD *)&v1123 = v338;
  *((_QWORD *)&v1123 + 1) = v335;
  if (SHIBYTE(v1100[2]) < 0)
  {
    operator delete(v1100[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_442;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_442:
    *(_OWORD *)v940 = *(_OWORD *)a2;
    v940[2] = *(void **)(a2 + 16);
    goto LABEL_445;
  }
  sub_223197FA4(v940, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_445:
  v340 = *(void **)a3;
  v339 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v939 = *(_QWORD *)a3;
  *((_QWORD *)&v939 + 1) = v339;
  if (v339)
  {
    v341 = v339 + 1;
    do
      v342 = __ldxr(v341);
    while (__stxr(v342 + 1, v341));
  }
  v343 = a4[7];
  v344 = HIBYTE(v940[2]);
  if (SHIBYTE(v940[2]) < 0)
  {
    sub_223197FA4(v1088, v940[0], (unint64_t)v940[1]);
    v344 = HIBYTE(v940[2]);
  }
  else
  {
    *(_OWORD *)v1088 = *(_OWORD *)v940;
    v1088[2] = v940[2];
  }
  *(void **)((char *)v1028 + 7) = *(void **)((char *)&v940[1] + 7);
  v345 = v940[0];
  v1028[0] = v940[1];
  memset(v940, 0, 24);
  v1040[0] = v1028[0];
  *(void **)((char *)v1040 + 7) = *(void **)((char *)v1028 + 7);
  *(void **)((char *)v1028 + 7) = 0;
  v1028[0] = 0;
  v1064[0] = v340;
  v1064[1] = v339;
  if (v339)
  {
    v346 = v339 + 1;
    do
      v347 = __ldxr(v346);
    while (__stxr(v347 + 1, v346));
  }
  v348 = (char *)operator new();
  v1052[0] = v1040[0];
  *(void **)((char *)v1052 + 7) = *(void **)((char *)v1040 + 7);
  v1040[0] = 0;
  *(void **)((char *)v1040 + 7) = 0;
  v349 = *(_OWORD *)v1064;
  v1064[0] = 0;
  v1064[1] = 0;
  v348[8] = 1;
  *((_QWORD *)v348 + 4) = 0;
  *((_QWORD *)v348 + 5) = 0;
  *(_QWORD *)v348 = &off_24EC31BC0;
  *((_QWORD *)v348 + 2) = &unk_24EC31C38;
  *((_QWORD *)v348 + 3) = &unk_24EC31C78;
  v350 = v1052[0];
  *(void **)(v348 + 63) = *(void **)((char *)v1052 + 7);
  *((_QWORD *)v348 + 6) = v345;
  *((_QWORD *)v348 + 7) = v350;
  v348[71] = v344;
  v1052[0] = 0;
  *(void **)((char *)v1052 + 7) = 0;
  *(_OWORD *)(v348 + 72) = v349;
  v1076[1] = 0;
  v1076[0] = 0;
  v351 = operator new();
  *(_QWORD *)v351 = &off_24EC31D60;
  *(_OWORD *)(v351 + 8) = *(_OWORD *)v343;
  *(_QWORD *)v343 = 0;
  *(_QWORD *)(v343 + 8) = 0;
  *((_QWORD *)v348 + 11) = v351;
  *((_QWORD *)v348 + 12) = v348 + 96;
  *((_QWORD *)v348 + 13) = v348 + 96;
  *((_QWORD *)v348 + 14) = 0;
  *((_QWORD *)v348 + 15) = v348 + 120;
  *((_QWORD *)v348 + 16) = v348 + 120;
  *((_QWORD *)v348 + 17) = 0;
  v352 = operator new();
  v353 = operator new(0x10uLL);
  *v353 = 0;
  v353[1] = 0;
  *(_QWORD *)v352 = v353;
  *(_QWORD *)(v352 + 8) = v353 + 2;
  *(_QWORD *)(v352 + 16) = v353 + 2;
  *(_QWORD *)(v352 + 24) = 0;
  *(_QWORD *)(v352 + 32) = 0;
  *(_QWORD *)(v352 + 40) = 0;
  *(_BYTE *)(v352 + 48) = 1;
  *(_QWORD *)(v352 + 56) = 850045863;
  *(_OWORD *)(v352 + 64) = 0u;
  *(_OWORD *)(v352 + 80) = 0u;
  *(_OWORD *)(v352 + 96) = 0u;
  *(_QWORD *)(v352 + 112) = 0;
  *((_QWORD *)v348 + 18) = v352;
  if (!*((_QWORD *)v348 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v354 = (std::__shared_weak_count *)operator new();
  v354->__shared_owners_ = 0;
  v355 = (unint64_t *)&v354->__shared_owners_;
  v354->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32200;
  v354->__shared_weak_owners_ = 0;
  v354[1].__vftable = (std::__shared_weak_count_vtbl *)v348;
  v356 = (std::__shared_weak_count *)*((_QWORD *)v348 + 5);
  if (v356)
  {
    if (v356->__shared_owners_ != -1)
      goto LABEL_469;
    do
      v357 = __ldxr(v355);
    while (__stxr(v357 + 1, v355));
    v358 = (unint64_t *)&v354->__shared_weak_owners_;
    do
      v359 = __ldxr(v358);
    while (__stxr(v359 + 1, v358));
    *((_QWORD *)v348 + 4) = v348;
    *((_QWORD *)v348 + 5) = v354;
    std::__shared_weak_count::__release_weak(v356);
  }
  else
  {
    do
      v360 = __ldxr(v355);
    while (__stxr(v360 + 1, v355));
    v361 = (unint64_t *)&v354->__shared_weak_owners_;
    do
      v362 = __ldxr(v361);
    while (__stxr(v362 + 1, v361));
    *((_QWORD *)v348 + 4) = v348;
    *((_QWORD *)v348 + 5) = v354;
  }
  do
    v363 = __ldaxr(v355);
  while (__stlxr(v363 - 1, v355));
  if (!v363)
  {
    ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
    std::__shared_weak_count::__release_weak(v354);
  }
LABEL_469:
  v364 = (std::__shared_weak_count *)v1076[1];
  if (v1076[1])
  {
    v365 = (unint64_t *)((char *)v1076[1] + 8);
    do
      v366 = __ldaxr(v365);
    while (__stlxr(v366 - 1, v365));
    if (!v366)
    {
      ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
      std::__shared_weak_count::__release_weak(v364);
    }
  }
  v1076[0] = v348;
  v1076[1] = v354;
  v367 = (std::__shared_weak_count *)v1064[1];
  if (v1064[1])
  {
    v368 = (unint64_t *)((char *)v1064[1] + 8);
    do
      v369 = __ldaxr(v368);
    while (__stlxr(v369 - 1, v368));
    if (!v369)
    {
      ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
      std::__shared_weak_count::__release_weak(v367);
    }
  }
  v370 = v939;
  v939 = 0uLL;
  *(_OWORD *)&v1100[1] = *(_OWORD *)v1088;
  v1100[0] = &off_24EC2E2D0;
  v1101 = v1088[2];
  memset(v1088, 0, sizeof(v1088));
  *(void **)&v1102[15] = *(void **)((char *)v1052 + 7);
  *(_QWORD *)v1102 = 0x7974706D45;
  *(void **)&v1102[8] = v1052[0];
  v1102[23] = 5;
  *(void **)((char *)v1052 + 7) = 0;
  v1052[0] = 0;
  v1103 = v370;
  v1064[1] = 0;
  v1064[0] = 0;
  v371 = v1076[0];
  v372 = (char *)v1076[1];
  v1104 = *(_OWORD *)v1076;
  v1076[0] = 0;
  v1076[1] = 0;
  if (*((_QWORD *)&v1104 + 1))
  {
    v373 = (unint64_t *)(v372 + 16);
    do
      v374 = __ldxr(v373);
    while (__stxr(v374 + 1, v373));
  }
  v1105 = &off_24EC2E300;
  v375 = (_QWORD *)operator new();
  *v375 = &off_24EC32250;
  v375[1] = v371;
  v375[2] = v372;
  *(_QWORD *)&v1106 = v375;
  v377 = *((_QWORD *)&v1104 + 1);
  v376 = v1104;
  if (!*((_QWORD *)&v1104 + 1))
  {
    *((_QWORD *)&v1106 + 1) = v1104;
    v1107 = 0;
    if ((_QWORD)v1104)
      v381 = v1104 + 16;
    else
      v381 = 0;
    goto LABEL_499;
  }
  v378 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 16);
  do
    v379 = __ldxr(v378);
  while (__stxr(v379 + 1, v378));
  v380 = *((_QWORD *)&v1104 + 1);
  *((_QWORD *)&v1106 + 1) = v376;
  v1107 = v377;
  if ((_QWORD)v1104)
    v381 = v1104 + 16;
  else
    v381 = 0;
  if (!*((_QWORD *)&v1104 + 1))
  {
    v376 = v1104;
LABEL_499:
    v384 = 0;
    v1108 = &off_24EC2E190;
    v1109 = v381;
    goto LABEL_500;
  }
  v382 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 16);
  do
    v383 = __ldxr(v382);
  while (__stxr(v383 + 1, v382));
  v384 = *((_QWORD *)&v1104 + 1);
  v376 = v1104;
  v1108 = &off_24EC2E190;
  *(_QWORD *)&v1109 = v381;
  *((_QWORD *)&v1109 + 1) = v380;
  if (*((_QWORD *)&v1104 + 1))
  {
    v385 = (unint64_t *)(*((_QWORD *)&v1104 + 1) + 16);
    do
      v386 = __ldxr(v385);
    while (__stxr(v386 + 1, v385));
  }
LABEL_500:
  if (v376)
    v387 = v376 + 24;
  else
    v387 = 0;
  v1110 = &off_24EC2E850;
  *(_QWORD *)&v1111 = v387;
  *((_QWORD *)&v1111 + 1) = v384;
  if (SHIBYTE(v1088[2]) < 0)
  {
    operator delete(v1088[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_505;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_505:
    *(_OWORD *)v938 = *(_OWORD *)a2;
    v938[2] = *(void **)(a2 + 16);
    goto LABEL_508;
  }
  sub_223197FA4(v938, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_508:
  v389 = *(void **)a3;
  v388 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v937 = *(_QWORD *)a3;
  *((_QWORD *)&v937 + 1) = v388;
  if (v388)
  {
    v390 = v388 + 1;
    do
      v391 = __ldxr(v390);
    while (__stxr(v391 + 1, v390));
  }
  v392 = HIBYTE(v938[2]);
  if (SHIBYTE(v938[2]) < 0)
  {
    sub_223197FA4(v1076, v938[0], (unint64_t)v938[1]);
    v392 = HIBYTE(v938[2]);
  }
  else
  {
    *(_OWORD *)v1076 = *(_OWORD *)v938;
    v1076[2] = v938[2];
  }
  *(void **)((char *)v1016 + 7) = *(void **)((char *)&v938[1] + 7);
  v393 = v938[0];
  v1016[0] = v938[1];
  memset(v938, 0, 24);
  v1028[0] = v1016[0];
  *(void **)((char *)v1028 + 7) = *(void **)((char *)v1016 + 7);
  *(void **)((char *)v1016 + 7) = 0;
  v1016[0] = 0;
  v1052[0] = v389;
  v1052[1] = v388;
  if (v388)
  {
    v394 = v388 + 1;
    do
      v395 = __ldxr(v394);
    while (__stxr(v395 + 1, v394));
  }
  v396 = (char *)operator new();
  v1040[0] = v1028[0];
  *(void **)((char *)v1040 + 7) = *(void **)((char *)v1028 + 7);
  v1028[0] = 0;
  *(void **)((char *)v1028 + 7) = 0;
  v397 = *(_OWORD *)v1052;
  v1052[0] = 0;
  v1052[1] = 0;
  v396[8] = 1;
  *((_QWORD *)v396 + 4) = 0;
  *((_QWORD *)v396 + 5) = 0;
  *(_QWORD *)v396 = &off_24EC322C8;
  *((_QWORD *)v396 + 2) = &unk_24EC32340;
  *((_QWORD *)v396 + 3) = &unk_24EC32380;
  v398 = v1040[0];
  *(void **)(v396 + 63) = *(void **)((char *)v1040 + 7);
  *((_QWORD *)v396 + 6) = v393;
  *((_QWORD *)v396 + 7) = v398;
  v396[71] = v392;
  v1040[0] = 0;
  *(void **)((char *)v1040 + 7) = 0;
  *(_OWORD *)(v396 + 72) = v397;
  v1064[1] = 0;
  v1064[0] = 0;
  v399 = (_QWORD *)operator new();
  *v399 = &off_24EC32488;
  *((_QWORD *)v396 + 17) = 0;
  *((_QWORD *)v396 + 11) = v399;
  *((_QWORD *)v396 + 12) = v396 + 96;
  *((_QWORD *)v396 + 13) = v396 + 96;
  *((_QWORD *)v396 + 14) = 0;
  *((_QWORD *)v396 + 15) = v396 + 120;
  *((_QWORD *)v396 + 16) = v396 + 120;
  *((_QWORD *)v396 + 18) = 0;
  if (!*((_QWORD *)v396 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v400 = (std::__shared_weak_count *)operator new();
  v400->__shared_owners_ = 0;
  v401 = (unint64_t *)&v400->__shared_owners_;
  v400->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC32988;
  v400->__shared_weak_owners_ = 0;
  v400[1].__vftable = (std::__shared_weak_count_vtbl *)v396;
  v402 = (std::__shared_weak_count *)*((_QWORD *)v396 + 5);
  if (v402)
  {
    if (v402->__shared_owners_ != -1)
      goto LABEL_532;
    do
      v403 = __ldxr(v401);
    while (__stxr(v403 + 1, v401));
    v404 = (unint64_t *)&v400->__shared_weak_owners_;
    do
      v405 = __ldxr(v404);
    while (__stxr(v405 + 1, v404));
    *((_QWORD *)v396 + 4) = v396;
    *((_QWORD *)v396 + 5) = v400;
    std::__shared_weak_count::__release_weak(v402);
  }
  else
  {
    do
      v406 = __ldxr(v401);
    while (__stxr(v406 + 1, v401));
    v407 = (unint64_t *)&v400->__shared_weak_owners_;
    do
      v408 = __ldxr(v407);
    while (__stxr(v408 + 1, v407));
    *((_QWORD *)v396 + 4) = v396;
    *((_QWORD *)v396 + 5) = v400;
  }
  do
    v409 = __ldaxr(v401);
  while (__stlxr(v409 - 1, v401));
  if (!v409)
  {
    ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
    std::__shared_weak_count::__release_weak(v400);
  }
LABEL_532:
  v410 = (std::__shared_weak_count *)v1064[1];
  if (v1064[1])
  {
    v411 = (unint64_t *)((char *)v1064[1] + 8);
    do
      v412 = __ldaxr(v411);
    while (__stlxr(v412 - 1, v411));
    if (!v412)
    {
      ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
      std::__shared_weak_count::__release_weak(v410);
    }
  }
  v1064[0] = v396;
  v1064[1] = v400;
  v413 = (std::__shared_weak_count *)v1052[1];
  if (v1052[1])
  {
    v414 = (unint64_t *)((char *)v1052[1] + 8);
    do
      v415 = __ldaxr(v414);
    while (__stlxr(v415 - 1, v414));
    if (!v415)
    {
      ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
      std::__shared_weak_count::__release_weak(v413);
    }
  }
  v416 = v937;
  v937 = 0uLL;
  *(_OWORD *)&v1088[1] = *(_OWORD *)v1076;
  v1088[0] = &off_24EC2E338;
  v1089 = v1076[2];
  memset(v1076, 0, sizeof(v1076));
  *(void **)&v1090[15] = *(void **)((char *)v1040 + 7);
  *(_QWORD *)v1090 = 0x7974706D45;
  *(void **)&v1090[8] = v1040[0];
  v1090[23] = 5;
  *(void **)((char *)v1040 + 7) = 0;
  v1040[0] = 0;
  v1091 = v416;
  v1052[1] = 0;
  v1052[0] = 0;
  v417 = v1064[0];
  v418 = (char *)v1064[1];
  v1092 = *(_OWORD *)v1064;
  v1064[0] = 0;
  v1064[1] = 0;
  if (*((_QWORD *)&v1092 + 1))
  {
    v419 = (unint64_t *)(v418 + 16);
    do
      v420 = __ldxr(v419);
    while (__stxr(v420 + 1, v419));
  }
  v1093 = &off_24EC2E1C8;
  v421 = (_QWORD *)operator new();
  *v421 = &off_24EC329D8;
  v421[1] = v417;
  v421[2] = v418;
  *(_QWORD *)&v1094 = v421;
  v423 = *((_QWORD *)&v1092 + 1);
  v422 = v1092;
  if (!*((_QWORD *)&v1092 + 1))
  {
    *((_QWORD *)&v1094 + 1) = v1092;
    v1095 = 0;
    if ((_QWORD)v1092)
      v427 = v1092 + 16;
    else
      v427 = 0;
    goto LABEL_562;
  }
  v424 = (unint64_t *)(*((_QWORD *)&v1092 + 1) + 16);
  do
    v425 = __ldxr(v424);
  while (__stxr(v425 + 1, v424));
  v426 = *((_QWORD *)&v1092 + 1);
  *((_QWORD *)&v1094 + 1) = v422;
  v1095 = v423;
  if ((_QWORD)v1092)
    v427 = v1092 + 16;
  else
    v427 = 0;
  if (!*((_QWORD *)&v1092 + 1))
  {
    v422 = v1092;
LABEL_562:
    v430 = 0;
    v1096 = &off_24EC2E368;
    v1097 = v427;
    goto LABEL_563;
  }
  v428 = (unint64_t *)(*((_QWORD *)&v1092 + 1) + 16);
  do
    v429 = __ldxr(v428);
  while (__stxr(v429 + 1, v428));
  v430 = *((_QWORD *)&v1092 + 1);
  v422 = v1092;
  v1096 = &off_24EC2E368;
  *(_QWORD *)&v1097 = v427;
  *((_QWORD *)&v1097 + 1) = v426;
  if (*((_QWORD *)&v1092 + 1))
  {
    v431 = (unint64_t *)(*((_QWORD *)&v1092 + 1) + 16);
    do
      v432 = __ldxr(v431);
    while (__stxr(v432 + 1, v431));
  }
LABEL_563:
  if (v422)
    v433 = v422 + 24;
  else
    v433 = 0;
  v1098 = &off_24EC2E3D8;
  *(_QWORD *)&v1099 = v433;
  *((_QWORD *)&v1099 + 1) = v430;
  if (SHIBYTE(v1076[2]) < 0)
  {
    operator delete(v1076[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_568;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_568:
    *(_OWORD *)v936 = *(_OWORD *)a2;
    v936[2] = *(void **)(a2 + 16);
    goto LABEL_571;
  }
  sub_223197FA4(v936, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_571:
  v435 = *(void **)a3;
  v434 = *(unint64_t **)(a3 + 8);
  *(_QWORD *)&v935 = *(_QWORD *)a3;
  *((_QWORD *)&v935 + 1) = v434;
  if (v434)
  {
    v436 = v434 + 1;
    do
      v437 = __ldxr(v436);
    while (__stxr(v437 + 1, v436));
  }
  v438 = a4[9];
  v439 = HIBYTE(v936[2]);
  if (SHIBYTE(v936[2]) < 0)
  {
    sub_223197FA4(v1064, v936[0], (unint64_t)v936[1]);
    v439 = HIBYTE(v936[2]);
  }
  else
  {
    *(_OWORD *)v1064 = *(_OWORD *)v936;
    v1064[2] = v936[2];
  }
  *(void **)((char *)v1004 + 7) = *(void **)((char *)&v936[1] + 7);
  v440 = v936[0];
  v1004[0] = v936[1];
  memset(v936, 0, 24);
  v1016[0] = v1004[0];
  *(void **)((char *)v1016 + 7) = *(void **)((char *)v1004 + 7);
  *(void **)((char *)v1004 + 7) = 0;
  v1004[0] = 0;
  v1040[0] = v435;
  v1040[1] = v434;
  if (v434)
  {
    v441 = v434 + 1;
    do
      v442 = __ldxr(v441);
    while (__stxr(v442 + 1, v441));
  }
  v443 = (char *)operator new();
  v1028[0] = v1016[0];
  *(void **)((char *)v1028 + 7) = *(void **)((char *)v1016 + 7);
  v1016[0] = 0;
  *(void **)((char *)v1016 + 7) = 0;
  v444 = *(_OWORD *)v1040;
  v1040[0] = 0;
  v1040[1] = 0;
  v443[8] = 1;
  *((_QWORD *)v443 + 4) = 0;
  *((_QWORD *)v443 + 5) = 0;
  *(_QWORD *)v443 = &off_24EC32A50;
  *((_QWORD *)v443 + 2) = &unk_24EC32AC8;
  *((_QWORD *)v443 + 3) = &unk_24EC32B08;
  v445 = v1028[0];
  *(void **)(v443 + 63) = *(void **)((char *)v1028 + 7);
  *((_QWORD *)v443 + 6) = v440;
  *((_QWORD *)v443 + 7) = v445;
  v443[71] = v439;
  v1028[0] = 0;
  *(void **)((char *)v1028 + 7) = 0;
  *(_OWORD *)(v443 + 72) = v444;
  v1052[1] = 0;
  v1052[0] = 0;
  v446 = operator new();
  *(_QWORD *)v446 = &off_24EC32BF0;
  *(_OWORD *)(v446 + 8) = *(_OWORD *)v438;
  *(_QWORD *)v438 = 0;
  *(_QWORD *)(v438 + 8) = 0;
  *((_QWORD *)v443 + 17) = 0;
  *((_QWORD *)v443 + 11) = v446;
  *((_QWORD *)v443 + 12) = v443 + 96;
  *((_QWORD *)v443 + 13) = v443 + 96;
  *((_QWORD *)v443 + 14) = 0;
  *((_QWORD *)v443 + 15) = v443 + 120;
  *((_QWORD *)v443 + 16) = v443 + 120;
  *((_QWORD *)v443 + 18) = 0;
  if (!*((_QWORD *)v443 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v447 = (std::__shared_weak_count *)operator new();
  v447->__shared_owners_ = 0;
  v448 = (unint64_t *)&v447->__shared_owners_;
  v447->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33090;
  v447->__shared_weak_owners_ = 0;
  v447[1].__vftable = (std::__shared_weak_count_vtbl *)v443;
  v449 = (std::__shared_weak_count *)*((_QWORD *)v443 + 5);
  if (v449)
  {
    if (v449->__shared_owners_ != -1)
      goto LABEL_595;
    do
      v450 = __ldxr(v448);
    while (__stxr(v450 + 1, v448));
    v451 = (unint64_t *)&v447->__shared_weak_owners_;
    do
      v452 = __ldxr(v451);
    while (__stxr(v452 + 1, v451));
    *((_QWORD *)v443 + 4) = v443;
    *((_QWORD *)v443 + 5) = v447;
    std::__shared_weak_count::__release_weak(v449);
  }
  else
  {
    do
      v453 = __ldxr(v448);
    while (__stxr(v453 + 1, v448));
    v454 = (unint64_t *)&v447->__shared_weak_owners_;
    do
      v455 = __ldxr(v454);
    while (__stxr(v455 + 1, v454));
    *((_QWORD *)v443 + 4) = v443;
    *((_QWORD *)v443 + 5) = v447;
  }
  do
    v456 = __ldaxr(v448);
  while (__stlxr(v456 - 1, v448));
  if (!v456)
  {
    ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
    std::__shared_weak_count::__release_weak(v447);
  }
LABEL_595:
  v457 = (std::__shared_weak_count *)v1052[1];
  if (v1052[1])
  {
    v458 = (unint64_t *)((char *)v1052[1] + 8);
    do
      v459 = __ldaxr(v458);
    while (__stlxr(v459 - 1, v458));
    if (!v459)
    {
      ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
      std::__shared_weak_count::__release_weak(v457);
    }
  }
  v1052[0] = v443;
  v1052[1] = v447;
  v460 = (std::__shared_weak_count *)v1040[1];
  if (v1040[1])
  {
    v461 = (unint64_t *)((char *)v1040[1] + 8);
    do
      v462 = __ldaxr(v461);
    while (__stlxr(v462 - 1, v461));
    if (!v462)
    {
      ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
      std::__shared_weak_count::__release_weak(v460);
    }
  }
  v463 = v935;
  v935 = 0uLL;
  *(_OWORD *)&v1076[1] = *(_OWORD *)v1064;
  v1076[0] = &off_24EC2E410;
  v1077 = v1064[2];
  memset(v1064, 0, sizeof(v1064));
  *(void **)&v1078[15] = *(void **)((char *)v1028 + 7);
  *(_QWORD *)v1078 = 0x7974706D45;
  *(void **)&v1078[8] = v1028[0];
  v1078[23] = 5;
  *(void **)((char *)v1028 + 7) = 0;
  v1028[0] = 0;
  v1079 = v463;
  v1040[1] = 0;
  v1040[0] = 0;
  v464 = v1052[0];
  v465 = (char *)v1052[1];
  v1080 = *(_OWORD *)v1052;
  v1052[0] = 0;
  v1052[1] = 0;
  if (*((_QWORD *)&v1080 + 1))
  {
    v466 = (unint64_t *)(v465 + 16);
    do
      v467 = __ldxr(v466);
    while (__stxr(v467 + 1, v466));
  }
  v1081 = &off_24EC2E440;
  v468 = (_QWORD *)operator new();
  *v468 = &off_24EC330E0;
  v468[1] = v464;
  v468[2] = v465;
  *(_QWORD *)&v1082 = v468;
  v470 = *((_QWORD *)&v1080 + 1);
  v469 = v1080;
  if (!*((_QWORD *)&v1080 + 1))
  {
    *((_QWORD *)&v1082 + 1) = v1080;
    v1083 = 0;
    if ((_QWORD)v1080)
      v474 = v1080 + 16;
    else
      v474 = 0;
    goto LABEL_625;
  }
  v471 = (unint64_t *)(*((_QWORD *)&v1080 + 1) + 16);
  do
    v472 = __ldxr(v471);
  while (__stxr(v472 + 1, v471));
  v473 = *((_QWORD *)&v1080 + 1);
  *((_QWORD *)&v1082 + 1) = v469;
  v1083 = v470;
  if ((_QWORD)v1080)
    v474 = v1080 + 16;
  else
    v474 = 0;
  if (!*((_QWORD *)&v1080 + 1))
  {
    v469 = v1080;
LABEL_625:
    v477 = 0;
    v1084 = &off_24EC2E888;
    v1085 = v474;
    goto LABEL_626;
  }
  v475 = (unint64_t *)(*((_QWORD *)&v1080 + 1) + 16);
  do
    v476 = __ldxr(v475);
  while (__stxr(v476 + 1, v475));
  v477 = *((_QWORD *)&v1080 + 1);
  v469 = v1080;
  v1084 = &off_24EC2E888;
  *(_QWORD *)&v1085 = v474;
  *((_QWORD *)&v1085 + 1) = v473;
  if (*((_QWORD *)&v1080 + 1))
  {
    v478 = (unint64_t *)(*((_QWORD *)&v1080 + 1) + 16);
    do
      v479 = __ldxr(v478);
    while (__stxr(v479 + 1, v478));
  }
LABEL_626:
  if (v469)
    v480 = v469 + 24;
  else
    v480 = 0;
  v1086 = &off_24EC2E850;
  *(_QWORD *)&v1087 = v480;
  *((_QWORD *)&v1087 + 1) = v477;
  v481 = (std::__shared_weak_count *)v1040[1];
  if (!v1040[1])
    goto LABEL_633;
  v482 = (unint64_t *)((char *)v1040[1] + 8);
  do
    v483 = __ldaxr(v482);
  while (__stlxr(v483 - 1, v482));
  if (!v483)
  {
    ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
    std::__shared_weak_count::__release_weak(v481);
    v484 = (std::__shared_weak_count *)v1052[1];
    if (!v1052[1])
      goto LABEL_637;
  }
  else
  {
LABEL_633:
    v484 = (std::__shared_weak_count *)v1052[1];
    if (!v1052[1])
      goto LABEL_637;
  }
  v485 = (unint64_t *)&v484->__shared_owners_;
  do
    v486 = __ldaxr(v485);
  while (__stlxr(v486 - 1, v485));
  if (v486)
  {
LABEL_637:
    if ((SHIBYTE(v1064[2]) & 0x80000000) == 0)
      goto LABEL_638;
LABEL_643:
    operator delete(v1064[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_639;
    goto LABEL_644;
  }
  ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
  std::__shared_weak_count::__release_weak(v484);
  if (SHIBYTE(v1064[2]) < 0)
    goto LABEL_643;
LABEL_638:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_639:
    *(_OWORD *)v934 = *(_OWORD *)a2;
    v934[2] = *(void **)(a2 + 16);
    goto LABEL_645;
  }
LABEL_644:
  sub_223197FA4(v934, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_645:
  v487 = *(void **)a3;
  v488 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v933 = *(_QWORD *)a3;
  *((_QWORD *)&v933 + 1) = v488;
  if (v488)
  {
    v489 = (unint64_t *)(v488 + 8);
    do
      v490 = __ldxr(v489);
    while (__stxr(v490 + 1, v489));
  }
  v491 = a4[10];
  v492 = HIBYTE(v934[2]);
  if (SHIBYTE(v934[2]) < 0)
  {
    sub_223197FA4(v1052, v934[0], (unint64_t)v934[1]);
    v492 = HIBYTE(v934[2]);
    v487 = (void *)v933;
  }
  else
  {
    *(_OWORD *)v1052 = *(_OWORD *)v934;
    v1052[2] = v934[2];
  }
  v493 = v934[0];
  *(void **)((char *)v1149 + 7) = *(void **)((char *)&v934[1] + 7);
  v1149[0] = v934[1];
  memset(v934, 0, 24);
  v1004[0] = v1149[0];
  *(void **)((char *)v1004 + 7) = *(void **)((char *)v1149 + 7);
  *(void **)((char *)v1149 + 7) = 0;
  v1149[0] = 0;
  v1028[0] = v487;
  v1028[1] = *((void **)&v933 + 1);
  if (*((_QWORD *)&v933 + 1))
  {
    v494 = (unint64_t *)(*((_QWORD *)&v933 + 1) + 8);
    do
      v495 = __ldxr(v494);
    while (__stxr(v495 + 1, v494));
  }
  v496 = (char *)operator new();
  v1016[0] = v1004[0];
  *(void **)((char *)v1016 + 7) = *(void **)((char *)v1004 + 7);
  v1004[0] = 0;
  *(void **)((char *)v1004 + 7) = 0;
  v497 = *(_OWORD *)v1028;
  v1028[0] = 0;
  v1028[1] = 0;
  v496[8] = 1;
  *((_QWORD *)v496 + 4) = 0;
  *((_QWORD *)v496 + 5) = 0;
  *(_QWORD *)v496 = &off_24EC33158;
  *((_QWORD *)v496 + 2) = &unk_24EC331D0;
  *((_QWORD *)v496 + 3) = &unk_24EC33210;
  v498 = v1016[0];
  *(void **)(v496 + 63) = *(void **)((char *)v1016 + 7);
  *((_QWORD *)v496 + 6) = v493;
  *((_QWORD *)v496 + 7) = v498;
  v496[71] = v492;
  v1016[0] = 0;
  *(void **)((char *)v1016 + 7) = 0;
  *(_OWORD *)(v496 + 72) = v497;
  v1040[1] = 0;
  v1040[0] = 0;
  v499 = operator new();
  *(_QWORD *)v499 = &off_24EC332F8;
  *(_OWORD *)(v499 + 8) = *(_OWORD *)v491;
  *(_QWORD *)v491 = 0;
  *(_QWORD *)(v491 + 8) = 0;
  *((_QWORD *)v496 + 17) = 0;
  *((_QWORD *)v496 + 11) = v499;
  *((_QWORD *)v496 + 12) = v496 + 96;
  *((_QWORD *)v496 + 13) = v496 + 96;
  *((_QWORD *)v496 + 14) = 0;
  *((_QWORD *)v496 + 15) = v496 + 120;
  *((_QWORD *)v496 + 16) = v496 + 120;
  *((_QWORD *)v496 + 18) = 0;
  if (!*((_QWORD *)v496 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v500 = (std::__shared_weak_count *)operator new();
  v500->__shared_owners_ = 0;
  v501 = (unint64_t *)&v500->__shared_owners_;
  v500->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33798;
  v500->__shared_weak_owners_ = 0;
  v500[1].__vftable = (std::__shared_weak_count_vtbl *)v496;
  v502 = (std::__shared_weak_count *)*((_QWORD *)v496 + 5);
  if (v502)
  {
    if (v502->__shared_owners_ != -1)
      goto LABEL_669;
    do
      v503 = __ldxr(v501);
    while (__stxr(v503 + 1, v501));
    v504 = (unint64_t *)&v500->__shared_weak_owners_;
    do
      v505 = __ldxr(v504);
    while (__stxr(v505 + 1, v504));
    *((_QWORD *)v496 + 4) = v496;
    *((_QWORD *)v496 + 5) = v500;
    std::__shared_weak_count::__release_weak(v502);
  }
  else
  {
    do
      v506 = __ldxr(v501);
    while (__stxr(v506 + 1, v501));
    v507 = (unint64_t *)&v500->__shared_weak_owners_;
    do
      v508 = __ldxr(v507);
    while (__stxr(v508 + 1, v507));
    *((_QWORD *)v496 + 4) = v496;
    *((_QWORD *)v496 + 5) = v500;
  }
  do
    v509 = __ldaxr(v501);
  while (__stlxr(v509 - 1, v501));
  if (!v509)
  {
    ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
    std::__shared_weak_count::__release_weak(v500);
  }
LABEL_669:
  v510 = (std::__shared_weak_count *)v1040[1];
  if (v1040[1])
  {
    v511 = (unint64_t *)((char *)v1040[1] + 8);
    do
      v512 = __ldaxr(v511);
    while (__stlxr(v512 - 1, v511));
    if (!v512)
    {
      ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
      std::__shared_weak_count::__release_weak(v510);
    }
  }
  v1040[0] = v496;
  v1040[1] = v500;
  v513 = (std::__shared_weak_count *)v1028[1];
  if (v1028[1])
  {
    v514 = (unint64_t *)((char *)v1028[1] + 8);
    do
      v515 = __ldaxr(v514);
    while (__stlxr(v515 - 1, v514));
    if (!v515)
    {
      ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
      std::__shared_weak_count::__release_weak(v513);
    }
  }
  v516 = v933;
  v933 = 0uLL;
  *(_OWORD *)&v1064[1] = *(_OWORD *)v1052;
  v1064[0] = &off_24EC2E478;
  v1065 = v1052[2];
  memset(v1052, 0, sizeof(v1052));
  *(void **)&v1066[15] = *(void **)((char *)v1016 + 7);
  *(_QWORD *)v1066 = 0x7974706D45;
  *(void **)&v1066[8] = v1016[0];
  v1066[23] = 5;
  *(void **)((char *)v1016 + 7) = 0;
  v1016[0] = 0;
  v1067 = v516;
  v1028[1] = 0;
  v1028[0] = 0;
  v517 = v1040[0];
  v518 = (char *)v1040[1];
  v1068 = *(_OWORD *)v1040;
  v1040[0] = 0;
  v1040[1] = 0;
  if (*((_QWORD *)&v1068 + 1))
  {
    v519 = (unint64_t *)(v518 + 16);
    do
      v520 = __ldxr(v519);
    while (__stxr(v520 + 1, v519));
  }
  v1069 = &off_24EC2E4A8;
  v521 = (_QWORD *)operator new();
  *v521 = &off_24EC337E8;
  v521[1] = v517;
  v521[2] = v518;
  *(_QWORD *)&v1070 = v521;
  v523 = *((_QWORD *)&v1068 + 1);
  v522 = v1068;
  if (!*((_QWORD *)&v1068 + 1))
  {
    *((_QWORD *)&v1070 + 1) = v1068;
    v1071 = 0;
    if ((_QWORD)v1068)
      v527 = v1068 + 16;
    else
      v527 = 0;
    goto LABEL_699;
  }
  v524 = (unint64_t *)(*((_QWORD *)&v1068 + 1) + 16);
  do
    v525 = __ldxr(v524);
  while (__stxr(v525 + 1, v524));
  v526 = *((_QWORD *)&v1068 + 1);
  *((_QWORD *)&v1070 + 1) = v522;
  v1071 = v523;
  if ((_QWORD)v1068)
    v527 = v1068 + 16;
  else
    v527 = 0;
  if (!*((_QWORD *)&v1068 + 1))
  {
    v522 = v1068;
LABEL_699:
    v530 = 0;
    v1072 = &off_24EC2E888;
    v1073 = v527;
    goto LABEL_700;
  }
  v528 = (unint64_t *)(*((_QWORD *)&v1068 + 1) + 16);
  do
    v529 = __ldxr(v528);
  while (__stxr(v529 + 1, v528));
  v530 = *((_QWORD *)&v1068 + 1);
  v522 = v1068;
  v1072 = &off_24EC2E888;
  *(_QWORD *)&v1073 = v527;
  *((_QWORD *)&v1073 + 1) = v526;
  if (*((_QWORD *)&v1068 + 1))
  {
    v531 = (unint64_t *)(*((_QWORD *)&v1068 + 1) + 16);
    do
      v532 = __ldxr(v531);
    while (__stxr(v532 + 1, v531));
  }
LABEL_700:
  if (v522)
    v533 = v522 + 24;
  else
    v533 = 0;
  v1074 = &off_24EC2E850;
  *(_QWORD *)&v1075 = v533;
  *((_QWORD *)&v1075 + 1) = v530;
  v534 = (std::__shared_weak_count *)v1028[1];
  if (!v1028[1])
    goto LABEL_707;
  v535 = (unint64_t *)((char *)v1028[1] + 8);
  do
    v536 = __ldaxr(v535);
  while (__stlxr(v536 - 1, v535));
  if (!v536)
  {
    ((void (*)(std::__shared_weak_count *))v534->__on_zero_shared)(v534);
    std::__shared_weak_count::__release_weak(v534);
    v537 = (std::__shared_weak_count *)v1040[1];
    if (!v1040[1])
      goto LABEL_711;
  }
  else
  {
LABEL_707:
    v537 = (std::__shared_weak_count *)v1040[1];
    if (!v1040[1])
      goto LABEL_711;
  }
  v538 = (unint64_t *)&v537->__shared_owners_;
  do
    v539 = __ldaxr(v538);
  while (__stlxr(v539 - 1, v538));
  if (v539)
  {
LABEL_711:
    if ((SHIBYTE(v1052[2]) & 0x80000000) == 0)
      goto LABEL_712;
LABEL_717:
    operator delete(v1052[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_713;
    goto LABEL_718;
  }
  ((void (*)(std::__shared_weak_count *))v537->__on_zero_shared)(v537);
  std::__shared_weak_count::__release_weak(v537);
  if (SHIBYTE(v1052[2]) < 0)
    goto LABEL_717;
LABEL_712:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_713:
    *(_OWORD *)v932 = *(_OWORD *)a2;
    v932[2] = *(void **)(a2 + 16);
    goto LABEL_719;
  }
LABEL_718:
  sub_223197FA4(v932, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_719:
  v540 = *(void **)a3;
  v541 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v931 = *(_QWORD *)a3;
  *((_QWORD *)&v931 + 1) = v541;
  if (v541)
  {
    v542 = (unint64_t *)(v541 + 8);
    do
      v543 = __ldxr(v542);
    while (__stxr(v543 + 1, v542));
  }
  v544 = a4[11];
  v545 = HIBYTE(v932[2]);
  if (SHIBYTE(v932[2]) < 0)
  {
    sub_223197FA4(v1040, v932[0], (unint64_t)v932[1]);
    v545 = HIBYTE(v932[2]);
    v540 = (void *)v931;
  }
  else
  {
    *(_OWORD *)v1040 = *(_OWORD *)v932;
    v1040[2] = v932[2];
  }
  v546 = v932[0];
  *(void **)((char *)&v1153 + 7) = *(void **)((char *)&v932[1] + 7);
  v547 = v932[1];
  BYTE7(v1153) = HIBYTE(v932[1]);
  memset(v932, 0, 24);
  v1149[0] = v547;
  *(void **)((char *)v1149 + 7) = *(void **)((char *)&v1153 + 7);
  *(_QWORD *)((char *)&v1153 + 7) = 0;
  *(_QWORD *)&v1153 = 0;
  v1016[0] = v540;
  v1016[1] = *((void **)&v931 + 1);
  if (*((_QWORD *)&v931 + 1))
  {
    v548 = (unint64_t *)(*((_QWORD *)&v931 + 1) + 8);
    do
      v549 = __ldxr(v548);
    while (__stxr(v549 + 1, v548));
  }
  v550 = (char *)operator new();
  v1004[0] = v1149[0];
  *(void **)((char *)v1004 + 7) = *(void **)((char *)v1149 + 7);
  v1149[0] = 0;
  *(void **)((char *)v1149 + 7) = 0;
  v551 = *(_OWORD *)v1016;
  v1016[0] = 0;
  v1016[1] = 0;
  v550[8] = 1;
  *((_QWORD *)v550 + 4) = 0;
  *((_QWORD *)v550 + 5) = 0;
  *(_QWORD *)v550 = &off_24EC33860;
  *((_QWORD *)v550 + 2) = &unk_24EC338D8;
  *((_QWORD *)v550 + 3) = &unk_24EC33918;
  v552 = v1004[0];
  *(void **)(v550 + 63) = *(void **)((char *)v1004 + 7);
  *((_QWORD *)v550 + 6) = v546;
  *((_QWORD *)v550 + 7) = v552;
  v550[71] = v545;
  v1004[0] = 0;
  *(void **)((char *)v1004 + 7) = 0;
  *(_OWORD *)(v550 + 72) = v551;
  v1028[1] = 0;
  v1028[0] = 0;
  v553 = operator new();
  *(_QWORD *)v553 = &off_24EC33A10;
  *(_OWORD *)(v553 + 8) = *(_OWORD *)v544;
  *(_QWORD *)v544 = 0;
  *(_QWORD *)(v544 + 8) = 0;
  *((_QWORD *)v550 + 17) = 0;
  *((_QWORD *)v550 + 11) = v553;
  *((_QWORD *)v550 + 12) = v550 + 96;
  *((_QWORD *)v550 + 13) = v550 + 96;
  *((_QWORD *)v550 + 14) = 0;
  *((_QWORD *)v550 + 15) = v550 + 120;
  *((_QWORD *)v550 + 16) = v550 + 120;
  *((_QWORD *)v550 + 18) = 0;
  if (!*((_QWORD *)v550 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v554 = (std::__shared_weak_count *)operator new();
  v554->__shared_owners_ = 0;
  v555 = (unint64_t *)&v554->__shared_owners_;
  v554->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC33F00;
  v554->__shared_weak_owners_ = 0;
  v554[1].__vftable = (std::__shared_weak_count_vtbl *)v550;
  v556 = (std::__shared_weak_count *)*((_QWORD *)v550 + 5);
  if (v556)
  {
    if (v556->__shared_owners_ != -1)
      goto LABEL_743;
    do
      v557 = __ldxr(v555);
    while (__stxr(v557 + 1, v555));
    v558 = (unint64_t *)&v554->__shared_weak_owners_;
    do
      v559 = __ldxr(v558);
    while (__stxr(v559 + 1, v558));
    *((_QWORD *)v550 + 4) = v550;
    *((_QWORD *)v550 + 5) = v554;
    std::__shared_weak_count::__release_weak(v556);
  }
  else
  {
    do
      v560 = __ldxr(v555);
    while (__stxr(v560 + 1, v555));
    v561 = (unint64_t *)&v554->__shared_weak_owners_;
    do
      v562 = __ldxr(v561);
    while (__stxr(v562 + 1, v561));
    *((_QWORD *)v550 + 4) = v550;
    *((_QWORD *)v550 + 5) = v554;
  }
  do
    v563 = __ldaxr(v555);
  while (__stlxr(v563 - 1, v555));
  if (!v563)
  {
    ((void (*)(std::__shared_weak_count *))v554->__on_zero_shared)(v554);
    std::__shared_weak_count::__release_weak(v554);
  }
LABEL_743:
  v564 = (std::__shared_weak_count *)v1028[1];
  if (v1028[1])
  {
    v565 = (unint64_t *)((char *)v1028[1] + 8);
    do
      v566 = __ldaxr(v565);
    while (__stlxr(v566 - 1, v565));
    if (!v566)
    {
      ((void (*)(std::__shared_weak_count *))v564->__on_zero_shared)(v564);
      std::__shared_weak_count::__release_weak(v564);
    }
  }
  v1028[0] = v550;
  v1028[1] = v554;
  v567 = (std::__shared_weak_count *)v1016[1];
  if (v1016[1])
  {
    v568 = (unint64_t *)((char *)v1016[1] + 8);
    do
      v569 = __ldaxr(v568);
    while (__stlxr(v569 - 1, v568));
    if (!v569)
    {
      ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
      std::__shared_weak_count::__release_weak(v567);
    }
  }
  v570 = v931;
  v931 = 0uLL;
  *(_OWORD *)&v1052[1] = *(_OWORD *)v1040;
  v1052[0] = &off_24EC2E4E0;
  v1053 = v1040[2];
  memset(v1040, 0, sizeof(v1040));
  *(void **)&v1054[15] = *(void **)((char *)v1004 + 7);
  *(_QWORD *)v1054 = 0x7974706D45;
  *(void **)&v1054[8] = v1004[0];
  v1054[23] = 5;
  *(void **)((char *)v1004 + 7) = 0;
  v1004[0] = 0;
  v1055 = v570;
  v1016[1] = 0;
  v1016[0] = 0;
  v571 = v1028[0];
  v572 = (char *)v1028[1];
  v1056 = *(_OWORD *)v1028;
  v1028[0] = 0;
  v1028[1] = 0;
  if (*((_QWORD *)&v1056 + 1))
  {
    v573 = (unint64_t *)(v572 + 16);
    do
      v574 = __ldxr(v573);
    while (__stxr(v574 + 1, v573));
  }
  v1057 = &off_24EC2E510;
  v575 = (_QWORD *)operator new();
  *v575 = &off_24EC33F50;
  v575[1] = v571;
  v575[2] = v572;
  *(_QWORD *)&v1058 = v575;
  v577 = *((_QWORD *)&v1056 + 1);
  v576 = v1056;
  if (!*((_QWORD *)&v1056 + 1))
  {
    *((_QWORD *)&v1058 + 1) = v1056;
    v1059 = 0;
    if ((_QWORD)v1056)
      v581 = v1056 + 16;
    else
      v581 = 0;
    goto LABEL_773;
  }
  v578 = (unint64_t *)(*((_QWORD *)&v1056 + 1) + 16);
  do
    v579 = __ldxr(v578);
  while (__stxr(v579 + 1, v578));
  v580 = *((_QWORD *)&v1056 + 1);
  *((_QWORD *)&v1058 + 1) = v576;
  v1059 = v577;
  if ((_QWORD)v1056)
    v581 = v1056 + 16;
  else
    v581 = 0;
  if (!*((_QWORD *)&v1056 + 1))
  {
    v576 = v1056;
LABEL_773:
    v584 = 0;
    v1060 = &off_24EC2E548;
    v1061 = v581;
    goto LABEL_774;
  }
  v582 = (unint64_t *)(*((_QWORD *)&v1056 + 1) + 16);
  do
    v583 = __ldxr(v582);
  while (__stxr(v583 + 1, v582));
  v584 = *((_QWORD *)&v1056 + 1);
  v576 = v1056;
  v1060 = &off_24EC2E548;
  *(_QWORD *)&v1061 = v581;
  *((_QWORD *)&v1061 + 1) = v580;
  if (*((_QWORD *)&v1056 + 1))
  {
    v585 = (unint64_t *)(*((_QWORD *)&v1056 + 1) + 16);
    do
      v586 = __ldxr(v585);
    while (__stxr(v586 + 1, v585));
  }
LABEL_774:
  if (v576)
    v587 = v576 + 24;
  else
    v587 = 0;
  v1062 = &off_24EC2E850;
  *(_QWORD *)&v1063 = v587;
  *((_QWORD *)&v1063 + 1) = v584;
  v588 = (std::__shared_weak_count *)v1016[1];
  if (!v1016[1])
    goto LABEL_781;
  v589 = (unint64_t *)((char *)v1016[1] + 8);
  do
    v590 = __ldaxr(v589);
  while (__stlxr(v590 - 1, v589));
  if (!v590)
  {
    ((void (*)(std::__shared_weak_count *))v588->__on_zero_shared)(v588);
    std::__shared_weak_count::__release_weak(v588);
    v591 = (std::__shared_weak_count *)v1028[1];
    if (!v1028[1])
      goto LABEL_785;
  }
  else
  {
LABEL_781:
    v591 = (std::__shared_weak_count *)v1028[1];
    if (!v1028[1])
      goto LABEL_785;
  }
  v592 = (unint64_t *)&v591->__shared_owners_;
  do
    v593 = __ldaxr(v592);
  while (__stlxr(v593 - 1, v592));
  if (v593)
  {
LABEL_785:
    if ((SHIBYTE(v1040[2]) & 0x80000000) == 0)
      goto LABEL_786;
LABEL_791:
    operator delete(v1040[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_787;
    goto LABEL_792;
  }
  ((void (*)(std::__shared_weak_count *))v591->__on_zero_shared)(v591);
  std::__shared_weak_count::__release_weak(v591);
  if (SHIBYTE(v1040[2]) < 0)
    goto LABEL_791;
LABEL_786:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_787:
    *(_OWORD *)v930 = *(_OWORD *)a2;
    v930[2] = *(void **)(a2 + 16);
    goto LABEL_793;
  }
LABEL_792:
  sub_223197FA4(v930, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_793:
  v594 = *(void **)a3;
  v595 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v929 = *(_QWORD *)a3;
  *((_QWORD *)&v929 + 1) = v595;
  if (v595)
  {
    v596 = (unint64_t *)(v595 + 8);
    do
      v597 = __ldxr(v596);
    while (__stxr(v597 + 1, v596));
  }
  v598 = a4[12];
  v599 = HIBYTE(v930[2]);
  if (SHIBYTE(v930[2]) < 0)
  {
    sub_223197FA4(v1028, v930[0], (unint64_t)v930[1]);
    v599 = HIBYTE(v930[2]);
    v594 = (void *)v929;
  }
  else
  {
    *(_OWORD *)v1028 = *(_OWORD *)v930;
    v1028[2] = v930[2];
  }
  v600 = v930[0];
  *(void **)((char *)&v1151 + 7) = *(void **)((char *)&v930[1] + 7);
  v601 = v930[1];
  BYTE7(v1151) = HIBYTE(v930[1]);
  memset(v930, 0, 24);
  *(_QWORD *)&v1153 = v601;
  *(_QWORD *)((char *)&v1153 + 7) = *(_QWORD *)((char *)&v1151 + 7);
  *(_QWORD *)((char *)&v1151 + 7) = 0;
  *(_QWORD *)&v1151 = 0;
  v1004[0] = v594;
  v1004[1] = *((void **)&v929 + 1);
  if (*((_QWORD *)&v929 + 1))
  {
    v602 = (unint64_t *)(*((_QWORD *)&v929 + 1) + 8);
    do
      v603 = __ldxr(v602);
    while (__stxr(v603 + 1, v602));
  }
  v604 = (char *)operator new();
  v1149[0] = (void *)v1153;
  *(void **)((char *)v1149 + 7) = *(void **)((char *)&v1153 + 7);
  *(_QWORD *)&v1153 = 0;
  *(_QWORD *)((char *)&v1153 + 7) = 0;
  v605 = *(_OWORD *)v1004;
  v1004[0] = 0;
  v1004[1] = 0;
  v604[8] = 1;
  *((_QWORD *)v604 + 4) = 0;
  *((_QWORD *)v604 + 5) = 0;
  *(_QWORD *)v604 = &off_24EC33FC8;
  *((_QWORD *)v604 + 2) = &unk_24EC34040;
  *((_QWORD *)v604 + 3) = &unk_24EC34080;
  v606 = v1149[0];
  *(void **)(v604 + 63) = *(void **)((char *)v1149 + 7);
  *((_QWORD *)v604 + 6) = v600;
  *((_QWORD *)v604 + 7) = v606;
  v604[71] = v599;
  v1149[0] = 0;
  *(void **)((char *)v1149 + 7) = 0;
  *(_OWORD *)(v604 + 72) = v605;
  v1016[1] = 0;
  v1016[0] = 0;
  v607 = operator new();
  *(_QWORD *)v607 = &off_24EC34178;
  *(_OWORD *)(v607 + 8) = *(_OWORD *)v598;
  *(_QWORD *)v598 = 0;
  *(_QWORD *)(v598 + 8) = 0;
  *((_QWORD *)v604 + 17) = 0;
  *((_QWORD *)v604 + 11) = v607;
  *((_QWORD *)v604 + 12) = v604 + 96;
  *((_QWORD *)v604 + 13) = v604 + 96;
  *((_QWORD *)v604 + 14) = 0;
  *((_QWORD *)v604 + 15) = v604 + 120;
  *((_QWORD *)v604 + 16) = v604 + 120;
  *((_QWORD *)v604 + 18) = 0;
  if (!*((_QWORD *)v604 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v608 = (std::__shared_weak_count *)operator new();
  v608->__shared_owners_ = 0;
  v609 = (unint64_t *)&v608->__shared_owners_;
  v608->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34668;
  v608->__shared_weak_owners_ = 0;
  v608[1].__vftable = (std::__shared_weak_count_vtbl *)v604;
  v610 = (std::__shared_weak_count *)*((_QWORD *)v604 + 5);
  if (v610)
  {
    if (v610->__shared_owners_ != -1)
      goto LABEL_817;
    do
      v611 = __ldxr(v609);
    while (__stxr(v611 + 1, v609));
    v612 = (unint64_t *)&v608->__shared_weak_owners_;
    do
      v613 = __ldxr(v612);
    while (__stxr(v613 + 1, v612));
    *((_QWORD *)v604 + 4) = v604;
    *((_QWORD *)v604 + 5) = v608;
    std::__shared_weak_count::__release_weak(v610);
  }
  else
  {
    do
      v614 = __ldxr(v609);
    while (__stxr(v614 + 1, v609));
    v615 = (unint64_t *)&v608->__shared_weak_owners_;
    do
      v616 = __ldxr(v615);
    while (__stxr(v616 + 1, v615));
    *((_QWORD *)v604 + 4) = v604;
    *((_QWORD *)v604 + 5) = v608;
  }
  do
    v617 = __ldaxr(v609);
  while (__stlxr(v617 - 1, v609));
  if (!v617)
  {
    ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
    std::__shared_weak_count::__release_weak(v608);
  }
LABEL_817:
  v618 = (std::__shared_weak_count *)v1016[1];
  if (v1016[1])
  {
    v619 = (unint64_t *)((char *)v1016[1] + 8);
    do
      v620 = __ldaxr(v619);
    while (__stlxr(v620 - 1, v619));
    if (!v620)
    {
      ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
      std::__shared_weak_count::__release_weak(v618);
    }
  }
  v1016[0] = v604;
  v1016[1] = v608;
  v621 = (std::__shared_weak_count *)v1004[1];
  if (v1004[1])
  {
    v622 = (unint64_t *)((char *)v1004[1] + 8);
    do
      v623 = __ldaxr(v622);
    while (__stlxr(v623 - 1, v622));
    if (!v623)
    {
      ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
      std::__shared_weak_count::__release_weak(v621);
    }
  }
  v624 = v929;
  v929 = 0uLL;
  *(_OWORD *)&v1040[1] = *(_OWORD *)v1028;
  v1040[0] = &off_24EC2E5B8;
  v1041 = v1028[2];
  memset(v1028, 0, sizeof(v1028));
  *(void **)&v1042[15] = *(void **)((char *)v1149 + 7);
  *(_QWORD *)v1042 = 0x7974706D45;
  *(void **)&v1042[8] = v1149[0];
  v1042[23] = 5;
  *(void **)((char *)v1149 + 7) = 0;
  v1149[0] = 0;
  v1043 = v624;
  v1004[1] = 0;
  v1004[0] = 0;
  v625 = v1016[0];
  v626 = (char *)v1016[1];
  v1044 = *(_OWORD *)v1016;
  v1016[0] = 0;
  v1016[1] = 0;
  if (*((_QWORD *)&v1044 + 1))
  {
    v627 = (unint64_t *)(v626 + 16);
    do
      v628 = __ldxr(v627);
    while (__stxr(v628 + 1, v627));
  }
  v1045 = &off_24EC2E5E8;
  v629 = (_QWORD *)operator new();
  *v629 = &off_24EC346B8;
  v629[1] = v625;
  v629[2] = v626;
  *(_QWORD *)&v1046 = v629;
  v631 = *((_QWORD *)&v1044 + 1);
  v630 = v1044;
  if (!*((_QWORD *)&v1044 + 1))
  {
    *((_QWORD *)&v1046 + 1) = v1044;
    v1047 = 0;
    if ((_QWORD)v1044)
      v635 = v1044 + 16;
    else
      v635 = 0;
    goto LABEL_847;
  }
  v632 = (unint64_t *)(*((_QWORD *)&v1044 + 1) + 16);
  do
    v633 = __ldxr(v632);
  while (__stxr(v633 + 1, v632));
  v634 = *((_QWORD *)&v1044 + 1);
  *((_QWORD *)&v1046 + 1) = v630;
  v1047 = v631;
  if ((_QWORD)v1044)
    v635 = v1044 + 16;
  else
    v635 = 0;
  if (!*((_QWORD *)&v1044 + 1))
  {
    v630 = v1044;
LABEL_847:
    v638 = 0;
    v1048 = &off_24EC2E620;
    v1049 = v635;
    goto LABEL_848;
  }
  v636 = (unint64_t *)(*((_QWORD *)&v1044 + 1) + 16);
  do
    v637 = __ldxr(v636);
  while (__stxr(v637 + 1, v636));
  v638 = *((_QWORD *)&v1044 + 1);
  v630 = v1044;
  v1048 = &off_24EC2E620;
  *(_QWORD *)&v1049 = v635;
  *((_QWORD *)&v1049 + 1) = v634;
  if (*((_QWORD *)&v1044 + 1))
  {
    v639 = (unint64_t *)(*((_QWORD *)&v1044 + 1) + 16);
    do
      v640 = __ldxr(v639);
    while (__stxr(v640 + 1, v639));
  }
LABEL_848:
  if (v630)
    v641 = v630 + 24;
  else
    v641 = 0;
  v1050 = &off_24EC2E850;
  *(_QWORD *)&v1051 = v641;
  *((_QWORD *)&v1051 + 1) = v638;
  v642 = (std::__shared_weak_count *)v1004[1];
  if (!v1004[1])
    goto LABEL_855;
  v643 = (unint64_t *)((char *)v1004[1] + 8);
  do
    v644 = __ldaxr(v643);
  while (__stlxr(v644 - 1, v643));
  if (!v644)
  {
    ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
    std::__shared_weak_count::__release_weak(v642);
    v645 = (std::__shared_weak_count *)v1016[1];
    if (!v1016[1])
      goto LABEL_859;
  }
  else
  {
LABEL_855:
    v645 = (std::__shared_weak_count *)v1016[1];
    if (!v1016[1])
      goto LABEL_859;
  }
  v646 = (unint64_t *)&v645->__shared_owners_;
  do
    v647 = __ldaxr(v646);
  while (__stlxr(v647 - 1, v646));
  if (v647)
  {
LABEL_859:
    if ((SHIBYTE(v1028[2]) & 0x80000000) == 0)
      goto LABEL_860;
LABEL_865:
    operator delete(v1028[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_861;
    goto LABEL_866;
  }
  ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
  std::__shared_weak_count::__release_weak(v645);
  if (SHIBYTE(v1028[2]) < 0)
    goto LABEL_865;
LABEL_860:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_861:
    *(_OWORD *)v928 = *(_OWORD *)a2;
    v928[2] = *(void **)(a2 + 16);
    goto LABEL_867;
  }
LABEL_866:
  sub_223197FA4(v928, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_867:
  v648 = *(void **)a3;
  v649 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v927 = *(_QWORD *)a3;
  *((_QWORD *)&v927 + 1) = v649;
  if (v649)
  {
    v650 = (unint64_t *)(v649 + 8);
    do
      v651 = __ldxr(v650);
    while (__stxr(v651 + 1, v650));
  }
  v652 = a4[13];
  v653 = HIBYTE(v928[2]);
  if (SHIBYTE(v928[2]) < 0)
  {
    sub_223197FA4(v1016, v928[0], (unint64_t)v928[1]);
    v653 = HIBYTE(v928[2]);
    v648 = (void *)v927;
  }
  else
  {
    *(_OWORD *)v1016 = *(_OWORD *)v928;
    v1016[2] = v928[2];
  }
  v654 = v928[0];
  *(void **)((char *)v1154 + 7) = *(void **)((char *)&v928[1] + 7);
  v655 = v928[1];
  HIBYTE(v1154[0]) = HIBYTE(v928[1]);
  memset(v928, 0, 24);
  *(_QWORD *)&v1151 = v655;
  *(_QWORD *)((char *)&v1151 + 7) = *(_QWORD *)((char *)v1154 + 7);
  *(_QWORD *)((char *)v1154 + 7) = 0;
  v1154[0] = 0;
  v1149[0] = v648;
  v1149[1] = *((void **)&v927 + 1);
  if (*((_QWORD *)&v927 + 1))
  {
    v656 = (unint64_t *)(*((_QWORD *)&v927 + 1) + 8);
    do
      v657 = __ldxr(v656);
    while (__stxr(v657 + 1, v656));
  }
  v658 = (char *)operator new();
  *(_QWORD *)&v1153 = v1151;
  *(_QWORD *)((char *)&v1153 + 7) = *(_QWORD *)((char *)&v1151 + 7);
  *(_QWORD *)&v1151 = 0;
  *(_QWORD *)((char *)&v1151 + 7) = 0;
  v659 = *(_OWORD *)v1149;
  v1149[0] = 0;
  v1149[1] = 0;
  v658[8] = 1;
  *((_QWORD *)v658 + 4) = 0;
  *((_QWORD *)v658 + 5) = 0;
  *(_QWORD *)v658 = &off_24EC34730;
  *((_QWORD *)v658 + 2) = &unk_24EC347A8;
  *((_QWORD *)v658 + 3) = &unk_24EC347E8;
  v660 = v1153;
  *(_QWORD *)(v658 + 63) = *(_QWORD *)((char *)&v1153 + 7);
  *((_QWORD *)v658 + 6) = v654;
  *((_QWORD *)v658 + 7) = v660;
  v658[71] = v653;
  *(_QWORD *)&v1153 = 0;
  *(_QWORD *)((char *)&v1153 + 7) = 0;
  *(_OWORD *)(v658 + 72) = v659;
  v1004[1] = 0;
  v1004[0] = 0;
  v661 = operator new();
  *(_QWORD *)v661 = &off_24EC348D0;
  *(_OWORD *)(v661 + 8) = *(_OWORD *)v652;
  *(_QWORD *)v652 = 0;
  *(_QWORD *)(v652 + 8) = 0;
  *((_QWORD *)v658 + 17) = 0;
  *((_QWORD *)v658 + 11) = v661;
  *((_QWORD *)v658 + 12) = v658 + 96;
  *((_QWORD *)v658 + 13) = v658 + 96;
  *((_QWORD *)v658 + 14) = 0;
  *((_QWORD *)v658 + 15) = v658 + 120;
  *((_QWORD *)v658 + 16) = v658 + 120;
  *((_QWORD *)v658 + 18) = 0;
  if (!*((_QWORD *)v658 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v662 = (std::__shared_weak_count *)operator new();
  v662->__shared_owners_ = 0;
  v663 = (unint64_t *)&v662->__shared_owners_;
  v662->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC34D70;
  v662->__shared_weak_owners_ = 0;
  v662[1].__vftable = (std::__shared_weak_count_vtbl *)v658;
  v664 = (std::__shared_weak_count *)*((_QWORD *)v658 + 5);
  if (v664)
  {
    if (v664->__shared_owners_ != -1)
      goto LABEL_891;
    do
      v665 = __ldxr(v663);
    while (__stxr(v665 + 1, v663));
    v666 = (unint64_t *)&v662->__shared_weak_owners_;
    do
      v667 = __ldxr(v666);
    while (__stxr(v667 + 1, v666));
    *((_QWORD *)v658 + 4) = v658;
    *((_QWORD *)v658 + 5) = v662;
    std::__shared_weak_count::__release_weak(v664);
  }
  else
  {
    do
      v668 = __ldxr(v663);
    while (__stxr(v668 + 1, v663));
    v669 = (unint64_t *)&v662->__shared_weak_owners_;
    do
      v670 = __ldxr(v669);
    while (__stxr(v670 + 1, v669));
    *((_QWORD *)v658 + 4) = v658;
    *((_QWORD *)v658 + 5) = v662;
  }
  do
    v671 = __ldaxr(v663);
  while (__stlxr(v671 - 1, v663));
  if (!v671)
  {
    ((void (*)(std::__shared_weak_count *))v662->__on_zero_shared)(v662);
    std::__shared_weak_count::__release_weak(v662);
  }
LABEL_891:
  v672 = (std::__shared_weak_count *)v1004[1];
  if (v1004[1])
  {
    v673 = (unint64_t *)((char *)v1004[1] + 8);
    do
      v674 = __ldaxr(v673);
    while (__stlxr(v674 - 1, v673));
    if (!v674)
    {
      ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
      std::__shared_weak_count::__release_weak(v672);
    }
  }
  v1004[0] = v658;
  v1004[1] = v662;
  v675 = (std::__shared_weak_count *)v1149[1];
  if (v1149[1])
  {
    v676 = (unint64_t *)((char *)v1149[1] + 8);
    do
      v677 = __ldaxr(v676);
    while (__stlxr(v677 - 1, v676));
    if (!v677)
    {
      ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
      std::__shared_weak_count::__release_weak(v675);
    }
  }
  v678 = v927;
  v927 = 0uLL;
  *(_OWORD *)&v1028[1] = *(_OWORD *)v1016;
  v1028[0] = &off_24EC2E690;
  v1029 = v1016[2];
  memset(v1016, 0, sizeof(v1016));
  *(_QWORD *)&v1030[15] = *(_QWORD *)((char *)&v1153 + 7);
  *(_QWORD *)v1030 = 0x7974706D45;
  *(_QWORD *)&v1030[8] = v1153;
  v1030[23] = 5;
  *(_QWORD *)((char *)&v1153 + 7) = 0;
  *(_QWORD *)&v1153 = 0;
  v1031 = v678;
  v1149[1] = 0;
  v1149[0] = 0;
  v679 = v1004[0];
  v680 = (char *)v1004[1];
  v1032 = *(_OWORD *)v1004;
  v1004[0] = 0;
  v1004[1] = 0;
  if (*((_QWORD *)&v1032 + 1))
  {
    v681 = (unint64_t *)(v680 + 16);
    do
      v682 = __ldxr(v681);
    while (__stxr(v682 + 1, v681));
  }
  v1033 = &off_24EC2DF48;
  v683 = (_QWORD *)operator new();
  *v683 = &off_24EC2F058;
  v683[1] = v679;
  v683[2] = v680;
  *(_QWORD *)&v1034 = v683;
  v685 = *((_QWORD *)&v1032 + 1);
  v684 = v1032;
  if (!*((_QWORD *)&v1032 + 1))
  {
    *((_QWORD *)&v1034 + 1) = v1032;
    v1035 = 0;
    if ((_QWORD)v1032)
      v689 = v1032 + 16;
    else
      v689 = 0;
    goto LABEL_921;
  }
  v686 = (unint64_t *)(*((_QWORD *)&v1032 + 1) + 16);
  do
    v687 = __ldxr(v686);
  while (__stxr(v687 + 1, v686));
  v688 = *((_QWORD *)&v1032 + 1);
  *((_QWORD *)&v1034 + 1) = v684;
  v1035 = v685;
  if ((_QWORD)v1032)
    v689 = v1032 + 16;
  else
    v689 = 0;
  if (!*((_QWORD *)&v1032 + 1))
  {
    v684 = v1032;
LABEL_921:
    v692 = 0;
    v1036 = &off_24EC2E6C0;
    v1037 = v689;
    goto LABEL_922;
  }
  v690 = (unint64_t *)(*((_QWORD *)&v1032 + 1) + 16);
  do
    v691 = __ldxr(v690);
  while (__stxr(v691 + 1, v690));
  v692 = *((_QWORD *)&v1032 + 1);
  v684 = v1032;
  v1036 = &off_24EC2E6C0;
  *(_QWORD *)&v1037 = v689;
  *((_QWORD *)&v1037 + 1) = v688;
  if (*((_QWORD *)&v1032 + 1))
  {
    v693 = (unint64_t *)(*((_QWORD *)&v1032 + 1) + 16);
    do
      v694 = __ldxr(v693);
    while (__stxr(v694 + 1, v693));
  }
LABEL_922:
  if (v684)
    v695 = v684 + 24;
  else
    v695 = 0;
  v1038 = &off_24EC2E850;
  *(_QWORD *)&v1039 = v695;
  *((_QWORD *)&v1039 + 1) = v692;
  v696 = (std::__shared_weak_count *)v1149[1];
  if (!v1149[1])
    goto LABEL_929;
  v697 = (unint64_t *)((char *)v1149[1] + 8);
  do
    v698 = __ldaxr(v697);
  while (__stlxr(v698 - 1, v697));
  if (!v698)
  {
    ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
    std::__shared_weak_count::__release_weak(v696);
    v699 = (std::__shared_weak_count *)v1004[1];
    if (!v1004[1])
      goto LABEL_933;
  }
  else
  {
LABEL_929:
    v699 = (std::__shared_weak_count *)v1004[1];
    if (!v1004[1])
      goto LABEL_933;
  }
  v700 = (unint64_t *)&v699->__shared_owners_;
  do
    v701 = __ldaxr(v700);
  while (__stlxr(v701 - 1, v700));
  if (v701)
  {
LABEL_933:
    if ((SHIBYTE(v1016[2]) & 0x80000000) == 0)
      goto LABEL_934;
LABEL_939:
    operator delete(v1016[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_935;
    goto LABEL_940;
  }
  ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
  std::__shared_weak_count::__release_weak(v699);
  if (SHIBYTE(v1016[2]) < 0)
    goto LABEL_939;
LABEL_934:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_935:
    *(_OWORD *)v926 = *(_OWORD *)a2;
    v926[2] = *(void **)(a2 + 16);
    goto LABEL_941;
  }
LABEL_940:
  sub_223197FA4(v926, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_941:
  v702 = *(void **)a3;
  v703 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v925 = *(_QWORD *)a3;
  *((_QWORD *)&v925 + 1) = v703;
  if (v703)
  {
    v704 = (unint64_t *)(v703 + 8);
    do
      v705 = __ldxr(v704);
    while (__stxr(v705 + 1, v704));
  }
  v706 = a4[14];
  v707 = HIBYTE(v926[2]);
  if (SHIBYTE(v926[2]) < 0)
  {
    sub_223197FA4(v1004, v926[0], (unint64_t)v926[1]);
    v707 = HIBYTE(v926[2]);
    v702 = (void *)v925;
  }
  else
  {
    *(_OWORD *)v1004 = *(_OWORD *)v926;
    v1004[2] = v926[2];
  }
  v708 = v926[0];
  *(void **)((char *)v1152 + 7) = *(void **)((char *)&v926[1] + 7);
  v709 = v926[1];
  HIBYTE(v1152[0]) = HIBYTE(v926[1]);
  memset(v926, 0, 24);
  v1154[0] = v709;
  *(_QWORD *)((char *)v1154 + 7) = *(_QWORD *)((char *)v1152 + 7);
  *(_QWORD *)((char *)v1152 + 7) = 0;
  v1152[0] = 0;
  *(_QWORD *)&v1153 = v702;
  *((_QWORD *)&v1153 + 1) = *((_QWORD *)&v925 + 1);
  if (*((_QWORD *)&v925 + 1))
  {
    v710 = (unint64_t *)(*((_QWORD *)&v925 + 1) + 8);
    do
      v711 = __ldxr(v710);
    while (__stxr(v711 + 1, v710));
  }
  v712 = (char *)operator new();
  *(_QWORD *)&v1151 = v1154[0];
  *(_QWORD *)((char *)&v1151 + 7) = *(_QWORD *)((char *)v1154 + 7);
  v1154[0] = 0;
  *(_QWORD *)((char *)v1154 + 7) = 0;
  v713 = v1153;
  v1153 = 0uLL;
  v712[8] = 1;
  *((_QWORD *)v712 + 4) = 0;
  *((_QWORD *)v712 + 5) = 0;
  *(_QWORD *)v712 = &off_24EC34DC0;
  *((_QWORD *)v712 + 2) = &unk_24EC34E38;
  *((_QWORD *)v712 + 3) = &unk_24EC34E78;
  v714 = v1151;
  *(_QWORD *)(v712 + 63) = *(_QWORD *)((char *)&v1151 + 7);
  *((_QWORD *)v712 + 6) = v708;
  *((_QWORD *)v712 + 7) = v714;
  v712[71] = v707;
  *(_QWORD *)&v1151 = 0;
  *(_QWORD *)((char *)&v1151 + 7) = 0;
  *(_OWORD *)(v712 + 72) = v713;
  v1149[1] = 0;
  v1149[0] = 0;
  v715 = operator new();
  *(_QWORD *)v715 = &off_24EC34F60;
  *(_OWORD *)(v715 + 8) = *(_OWORD *)v706;
  *(_QWORD *)v706 = 0;
  *(_QWORD *)(v706 + 8) = 0;
  *((_QWORD *)v712 + 17) = 0;
  *((_QWORD *)v712 + 11) = v715;
  *((_QWORD *)v712 + 12) = v712 + 96;
  *((_QWORD *)v712 + 13) = v712 + 96;
  *((_QWORD *)v712 + 14) = 0;
  *((_QWORD *)v712 + 15) = v712 + 120;
  *((_QWORD *)v712 + 16) = v712 + 120;
  *((_QWORD *)v712 + 18) = 0;
  if (!*((_QWORD *)v712 + 9)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v716 = (std::__shared_weak_count *)operator new();
  v716->__shared_owners_ = 0;
  v717 = (unint64_t *)&v716->__shared_owners_;
  v716->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35400;
  v716->__shared_weak_owners_ = 0;
  v716[1].__vftable = (std::__shared_weak_count_vtbl *)v712;
  v718 = (std::__shared_weak_count *)*((_QWORD *)v712 + 5);
  if (v718)
  {
    if (v718->__shared_owners_ != -1)
      goto LABEL_965;
    do
      v719 = __ldxr(v717);
    while (__stxr(v719 + 1, v717));
    v720 = (unint64_t *)&v716->__shared_weak_owners_;
    do
      v721 = __ldxr(v720);
    while (__stxr(v721 + 1, v720));
    *((_QWORD *)v712 + 4) = v712;
    *((_QWORD *)v712 + 5) = v716;
    std::__shared_weak_count::__release_weak(v718);
  }
  else
  {
    do
      v722 = __ldxr(v717);
    while (__stxr(v722 + 1, v717));
    v723 = (unint64_t *)&v716->__shared_weak_owners_;
    do
      v724 = __ldxr(v723);
    while (__stxr(v724 + 1, v723));
    *((_QWORD *)v712 + 4) = v712;
    *((_QWORD *)v712 + 5) = v716;
  }
  do
    v725 = __ldaxr(v717);
  while (__stlxr(v725 - 1, v717));
  if (!v725)
  {
    ((void (*)(std::__shared_weak_count *))v716->__on_zero_shared)(v716);
    std::__shared_weak_count::__release_weak(v716);
  }
LABEL_965:
  v726 = (std::__shared_weak_count *)v1149[1];
  if (v1149[1])
  {
    v727 = (unint64_t *)((char *)v1149[1] + 8);
    do
      v728 = __ldaxr(v727);
    while (__stlxr(v728 - 1, v727));
    if (!v728)
    {
      ((void (*)(std::__shared_weak_count *))v726->__on_zero_shared)(v726);
      std::__shared_weak_count::__release_weak(v726);
    }
  }
  v1149[0] = v712;
  v1149[1] = v716;
  v729 = (std::__shared_weak_count *)*((_QWORD *)&v1153 + 1);
  if (*((_QWORD *)&v1153 + 1))
  {
    v730 = (unint64_t *)(*((_QWORD *)&v1153 + 1) + 8);
    do
      v731 = __ldaxr(v730);
    while (__stlxr(v731 - 1, v730));
    if (!v731)
    {
      ((void (*)(std::__shared_weak_count *))v729->__on_zero_shared)(v729);
      std::__shared_weak_count::__release_weak(v729);
    }
  }
  v732 = v925;
  v925 = 0uLL;
  *(_OWORD *)&v1016[1] = *(_OWORD *)v1004;
  v1016[0] = &off_24EC2E730;
  v1017 = v1004[2];
  memset(v1004, 0, sizeof(v1004));
  *(_QWORD *)&v1018[15] = *(_QWORD *)((char *)&v1151 + 7);
  *(_QWORD *)v1018 = 0x7974706D45;
  *(_QWORD *)&v1018[8] = v1151;
  v1018[23] = 5;
  *(_QWORD *)((char *)&v1151 + 7) = 0;
  *(_QWORD *)&v1151 = 0;
  v1019 = v732;
  v1153 = 0uLL;
  v733 = v1149[0];
  v734 = (char *)v1149[1];
  v1020 = *(_OWORD *)v1149;
  v1149[0] = 0;
  v1149[1] = 0;
  if (*((_QWORD *)&v1020 + 1))
  {
    v735 = (unint64_t *)(v734 + 16);
    do
      v736 = __ldxr(v735);
    while (__stxr(v736 + 1, v735));
  }
  v1021 = &off_24EC2E760;
  v737 = (_QWORD *)operator new();
  *v737 = &off_24EC35450;
  v737[1] = v733;
  v737[2] = v734;
  *(_QWORD *)&v1022 = v737;
  v739 = *((_QWORD *)&v1020 + 1);
  v738 = v1020;
  if (!*((_QWORD *)&v1020 + 1))
  {
    *((_QWORD *)&v1022 + 1) = v1020;
    v1023 = 0;
    if ((_QWORD)v1020)
      v743 = v1020 + 16;
    else
      v743 = 0;
    goto LABEL_995;
  }
  v740 = (unint64_t *)(*((_QWORD *)&v1020 + 1) + 16);
  do
    v741 = __ldxr(v740);
  while (__stxr(v741 + 1, v740));
  v742 = *((_QWORD *)&v1020 + 1);
  *((_QWORD *)&v1022 + 1) = v738;
  v1023 = v739;
  if ((_QWORD)v1020)
    v743 = v1020 + 16;
  else
    v743 = 0;
  if (!*((_QWORD *)&v1020 + 1))
  {
    v738 = v1020;
LABEL_995:
    v746 = 0;
    v1024 = &off_24EC2E888;
    v1025 = v743;
    goto LABEL_996;
  }
  v744 = (unint64_t *)(*((_QWORD *)&v1020 + 1) + 16);
  do
    v745 = __ldxr(v744);
  while (__stxr(v745 + 1, v744));
  v746 = *((_QWORD *)&v1020 + 1);
  v738 = v1020;
  v1024 = &off_24EC2E888;
  *(_QWORD *)&v1025 = v743;
  *((_QWORD *)&v1025 + 1) = v742;
  if (*((_QWORD *)&v1020 + 1))
  {
    v747 = (unint64_t *)(*((_QWORD *)&v1020 + 1) + 16);
    do
      v748 = __ldxr(v747);
    while (__stxr(v748 + 1, v747));
  }
LABEL_996:
  if (v738)
    v749 = v738 + 24;
  else
    v749 = 0;
  v1026 = &off_24EC2E850;
  *(_QWORD *)&v1027 = v749;
  *((_QWORD *)&v1027 + 1) = v746;
  v750 = (std::__shared_weak_count *)*((_QWORD *)&v1153 + 1);
  if (!*((_QWORD *)&v1153 + 1))
    goto LABEL_1003;
  v751 = (unint64_t *)(*((_QWORD *)&v1153 + 1) + 8);
  do
    v752 = __ldaxr(v751);
  while (__stlxr(v752 - 1, v751));
  if (!v752)
  {
    ((void (*)(std::__shared_weak_count *))v750->__on_zero_shared)(v750);
    std::__shared_weak_count::__release_weak(v750);
    v753 = (std::__shared_weak_count *)v1149[1];
    if (!v1149[1])
      goto LABEL_1007;
  }
  else
  {
LABEL_1003:
    v753 = (std::__shared_weak_count *)v1149[1];
    if (!v1149[1])
      goto LABEL_1007;
  }
  v754 = (unint64_t *)&v753->__shared_owners_;
  do
    v755 = __ldaxr(v754);
  while (__stlxr(v755 - 1, v754));
  if (v755)
  {
LABEL_1007:
    if ((SHIBYTE(v1004[2]) & 0x80000000) == 0)
      goto LABEL_1008;
LABEL_1013:
    operator delete(v1004[0]);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_1009;
    goto LABEL_1014;
  }
  ((void (*)(std::__shared_weak_count *))v753->__on_zero_shared)(v753);
  std::__shared_weak_count::__release_weak(v753);
  if (SHIBYTE(v1004[2]) < 0)
    goto LABEL_1013;
LABEL_1008:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_1009:
    *(_OWORD *)v924 = *(_OWORD *)a2;
    v924[2] = *(void **)(a2 + 16);
    goto LABEL_1015;
  }
LABEL_1014:
  sub_223197FA4(v924, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_1015:
  v756 = *(void **)a3;
  v757 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)&v923 = *(_QWORD *)a3;
  *((_QWORD *)&v923 + 1) = v757;
  if (v757)
  {
    v758 = (unint64_t *)(v757 + 8);
    do
      v759 = __ldxr(v758);
    while (__stxr(v759 + 1, v758));
  }
  v760 = a4[15];
  v761 = HIBYTE(v924[2]);
  if (SHIBYTE(v924[2]) < 0)
  {
    sub_223197FA4(v1149, v924[0], (unint64_t)v924[1]);
    v761 = HIBYTE(v924[2]);
    v756 = (void *)v923;
  }
  else
  {
    *(_OWORD *)v1149 = *(_OWORD *)v924;
    v1150 = v924[2];
  }
  v762 = v924[0];
  *(void **)((char *)v1148 + 7) = *(void **)((char *)&v924[1] + 7);
  v763 = v924[1];
  HIBYTE(v1148[0]) = HIBYTE(v924[1]);
  memset(v924, 0, 24);
  *((_QWORD *)&v1151 + 1) = *((_QWORD *)&v923 + 1);
  v1152[0] = v763;
  *(_QWORD *)((char *)v1152 + 7) = *(_QWORD *)((char *)v1148 + 7);
  *(_QWORD *)((char *)v1148 + 7) = 0;
  v1148[0] = 0;
  *(_QWORD *)&v1151 = v756;
  if (*((_QWORD *)&v923 + 1))
  {
    v764 = (unint64_t *)(*((_QWORD *)&v923 + 1) + 8);
    do
      v765 = __ldxr(v764);
    while (__stxr(v765 + 1, v764));
  }
  v766 = operator new();
  v1154[0] = v1152[0];
  *(_QWORD *)((char *)v1154 + 7) = *(_QWORD *)((char *)v1152 + 7);
  v1152[0] = 0;
  *(_QWORD *)((char *)v1152 + 7) = 0;
  v767 = v1151;
  v1151 = 0uLL;
  *(_BYTE *)(v766 + 8) = 1;
  *(_QWORD *)(v766 + 32) = 0;
  *(_QWORD *)(v766 + 40) = 0;
  *(_QWORD *)v766 = &off_24EC354C8;
  *(_QWORD *)(v766 + 16) = &unk_24EC35540;
  *(_QWORD *)(v766 + 24) = &unk_24EC35580;
  v768 = v1154[0];
  *(_QWORD *)(v766 + 63) = *(_QWORD *)((char *)v1154 + 7);
  *(_QWORD *)(v766 + 48) = v762;
  *(_QWORD *)(v766 + 56) = v768;
  *(_BYTE *)(v766 + 71) = v761;
  v1154[0] = 0;
  *(_QWORD *)((char *)v1154 + 7) = 0;
  *(_OWORD *)(v766 + 72) = v767;
  v1153 = 0uLL;
  v769 = operator new();
  *(_QWORD *)v769 = &off_24EC35668;
  *(_OWORD *)(v769 + 8) = *(_OWORD *)v760;
  *(_QWORD *)v760 = 0;
  *(_QWORD *)(v760 + 8) = 0;
  *(_QWORD *)(v766 + 88) = v769;
  *(_QWORD *)(v766 + 96) = v766 + 96;
  *(_QWORD *)(v766 + 104) = v766 + 96;
  *(_QWORD *)(v766 + 112) = 0;
  *(_QWORD *)(v766 + 120) = v766 + 120;
  *(_QWORD *)(v766 + 128) = v766 + 120;
  *(_QWORD *)(v766 + 136) = 0;
  v770 = operator new();
  v771 = operator new(0x10uLL);
  *v771 = 0;
  v771[1] = 0;
  *(_QWORD *)v770 = v771;
  *(_QWORD *)(v770 + 8) = v771 + 2;
  *(_QWORD *)(v770 + 16) = v771 + 2;
  *(_QWORD *)(v770 + 24) = 0;
  *(_QWORD *)(v770 + 32) = 0;
  *(_QWORD *)(v770 + 40) = 0;
  *(_BYTE *)(v770 + 48) = 1;
  *(_QWORD *)(v770 + 56) = 850045863;
  *(_OWORD *)(v770 + 64) = 0u;
  *(_OWORD *)(v770 + 80) = 0u;
  *(_OWORD *)(v770 + 96) = 0u;
  *(_QWORD *)(v770 + 112) = 0;
  *(_QWORD *)(v766 + 144) = v770;
  if (!*(_QWORD *)(v766 + 72)
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v772 = (std::__shared_weak_count *)operator new();
  v772->__shared_owners_ = 0;
  v773 = (unint64_t *)&v772->__shared_owners_;
  v772->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC35B08;
  v772->__shared_weak_owners_ = 0;
  v772[1].__vftable = (std::__shared_weak_count_vtbl *)v766;
  v774 = *(std::__shared_weak_count **)(v766 + 40);
  if (v774)
  {
    if (v774->__shared_owners_ != -1)
      goto LABEL_1039;
    do
      v775 = __ldxr(v773);
    while (__stxr(v775 + 1, v773));
    v776 = (unint64_t *)&v772->__shared_weak_owners_;
    do
      v777 = __ldxr(v776);
    while (__stxr(v777 + 1, v776));
    *(_QWORD *)(v766 + 32) = v766;
    *(_QWORD *)(v766 + 40) = v772;
    std::__shared_weak_count::__release_weak(v774);
  }
  else
  {
    do
      v778 = __ldxr(v773);
    while (__stxr(v778 + 1, v773));
    v779 = (unint64_t *)&v772->__shared_weak_owners_;
    do
      v780 = __ldxr(v779);
    while (__stxr(v780 + 1, v779));
    *(_QWORD *)(v766 + 32) = v766;
    *(_QWORD *)(v766 + 40) = v772;
  }
  do
    v781 = __ldaxr(v773);
  while (__stlxr(v781 - 1, v773));
  if (!v781)
  {
    ((void (*)(std::__shared_weak_count *))v772->__on_zero_shared)(v772);
    std::__shared_weak_count::__release_weak(v772);
  }
LABEL_1039:
  v782 = (std::__shared_weak_count *)*((_QWORD *)&v1153 + 1);
  if (*((_QWORD *)&v1153 + 1))
  {
    v783 = (unint64_t *)(*((_QWORD *)&v1153 + 1) + 8);
    do
      v784 = __ldaxr(v783);
    while (__stlxr(v784 - 1, v783));
    if (!v784)
    {
      ((void (*)(std::__shared_weak_count *))v782->__on_zero_shared)(v782);
      std::__shared_weak_count::__release_weak(v782);
    }
  }
  *(_QWORD *)&v1153 = v766;
  *((_QWORD *)&v1153 + 1) = v772;
  v785 = (std::__shared_weak_count *)*((_QWORD *)&v1151 + 1);
  if (*((_QWORD *)&v1151 + 1))
  {
    v786 = (unint64_t *)(*((_QWORD *)&v1151 + 1) + 8);
    do
      v787 = __ldaxr(v786);
    while (__stlxr(v787 - 1, v786));
    if (!v787)
    {
      ((void (*)(std::__shared_weak_count *))v785->__on_zero_shared)(v785);
      std::__shared_weak_count::__release_weak(v785);
    }
  }
  *(_OWORD *)&v1004[1] = *(_OWORD *)v1149;
  v1004[0] = &off_24EC2E798;
  v1005 = v1150;
  v1149[1] = 0;
  v1149[0] = 0;
  v1150 = 0;
  *(_QWORD *)&v1006[15] = *(_QWORD *)((char *)v1154 + 7);
  *(_QWORD *)v1006 = 0x7974706D45;
  *(_QWORD *)&v1006[8] = v1154[0];
  v1006[23] = 5;
  *(_QWORD *)((char *)v1154 + 7) = 0;
  v1154[0] = 0;
  v1007 = v923;
  v1151 = 0uLL;
  v788 = v1153;
  v1008 = v1153;
  v1153 = 0uLL;
  if (*((_QWORD *)&v1008 + 1))
  {
    v789 = (unint64_t *)(*((_QWORD *)&v788 + 1) + 16);
    do
      v790 = __ldxr(v789);
    while (__stxr(v790 + 1, v789));
  }
  v1009 = &off_24EC2E7C8;
  v791 = operator new();
  *(_QWORD *)v791 = &off_24EC35B58;
  *(_OWORD *)(v791 + 8) = v788;
  *(_QWORD *)&v1010 = v791;
  v793 = *((_QWORD *)&v1008 + 1);
  v792 = v1008;
  if (!*((_QWORD *)&v1008 + 1))
  {
    *((_QWORD *)&v1010 + 1) = v1008;
    v1011 = 0;
    if ((_QWORD)v1008)
      v797 = v1008 + 16;
    else
      v797 = 0;
    goto LABEL_1069;
  }
  v794 = (unint64_t *)(*((_QWORD *)&v1008 + 1) + 16);
  do
    v795 = __ldxr(v794);
  while (__stxr(v795 + 1, v794));
  v796 = *((_QWORD *)&v1008 + 1);
  *((_QWORD *)&v1010 + 1) = v792;
  v1011 = v793;
  if ((_QWORD)v1008)
    v797 = v1008 + 16;
  else
    v797 = 0;
  if (!*((_QWORD *)&v1008 + 1))
  {
    v792 = v1008;
LABEL_1069:
    v800 = 0;
    v1012 = &off_24EC2E888;
    v1013 = v797;
    goto LABEL_1070;
  }
  v798 = (unint64_t *)(*((_QWORD *)&v1008 + 1) + 16);
  do
    v799 = __ldxr(v798);
  while (__stxr(v799 + 1, v798));
  v800 = *((_QWORD *)&v1008 + 1);
  v792 = v1008;
  v1012 = &off_24EC2E888;
  *(_QWORD *)&v1013 = v797;
  *((_QWORD *)&v1013 + 1) = v796;
  if (*((_QWORD *)&v1008 + 1))
  {
    v801 = (unint64_t *)(*((_QWORD *)&v1008 + 1) + 16);
    do
      v802 = __ldxr(v801);
    while (__stxr(v802 + 1, v801));
  }
LABEL_1070:
  if (v792)
    v803 = v792 + 24;
  else
    v803 = 0;
  v1014 = &off_24EC2E850;
  *(_QWORD *)&v1015 = v803;
  *((_QWORD *)&v1015 + 1) = v800;
  v804 = (std::__shared_weak_count *)*((_QWORD *)&v1151 + 1);
  if (!*((_QWORD *)&v1151 + 1))
    goto LABEL_1077;
  v805 = (unint64_t *)(*((_QWORD *)&v1151 + 1) + 8);
  do
    v806 = __ldaxr(v805);
  while (__stlxr(v806 - 1, v805));
  if (!v806)
  {
    ((void (*)(std::__shared_weak_count *))v804->__on_zero_shared)(v804);
    std::__shared_weak_count::__release_weak(v804);
    v807 = (std::__shared_weak_count *)*((_QWORD *)&v1153 + 1);
    if (!*((_QWORD *)&v1153 + 1))
      goto LABEL_1081;
  }
  else
  {
LABEL_1077:
    v807 = (std::__shared_weak_count *)*((_QWORD *)&v1153 + 1);
    if (!*((_QWORD *)&v1153 + 1))
      goto LABEL_1081;
  }
  v808 = (unint64_t *)&v807->__shared_owners_;
  do
    v809 = __ldaxr(v808);
  while (__stlxr(v809 - 1, v808));
  if (v809)
  {
LABEL_1081:
    if ((SHIBYTE(v1150) & 0x80000000) == 0)
      goto LABEL_1083;
    goto LABEL_1082;
  }
  ((void (*)(std::__shared_weak_count *))v807->__on_zero_shared)(v807);
  std::__shared_weak_count::__release_weak(v807);
  if (SHIBYTE(v1150) < 0)
LABEL_1082:
    operator delete(v1149[0]);
LABEL_1083:
  v810 = operator new();
  *(_QWORD *)v810 = &off_24EC2DF18;
  *(_QWORD *)(v810 + 168) = &off_24EC2DFF0;
  *(_QWORD *)(v810 + 256) = &off_24EC2E020;
  *(_QWORD *)(v810 + 336) = &off_24EC2E058;
  *(_QWORD *)(v810 + 424) = &off_24EC2E088;
  *(_QWORD *)(v810 + 504) = &off_24EC2E0C0;
  *(_QWORD *)(v810 + 592) = &off_24EC2E0F0;
  v922 = v960;
  *(_QWORD *)(v810 + 672) = &off_24EC2E128;
  *(_QWORD *)(v810 + 760) = &off_24EC2E158;
  *(_QWORD *)(v810 + 840) = &off_24EC2E200;
  *(_QWORD *)(v810 + 928) = &off_24EC2E230;
  *(_QWORD *)(v810 + 1008) = &off_24EC2E268;
  *(_QWORD *)(v810 + 1096) = &off_24EC2E298;
  *(_QWORD *)(v810 + 1176) = &off_24EC2E2D0;
  *(_QWORD *)(v810 + 1264) = &off_24EC2E300;
  *(_QWORD *)(v810 + 1344) = &off_24EC2E338;
  *(_QWORD *)(v810 + 1432) = &off_24EC2E1C8;
  *(_QWORD *)(v810 + 1464) = &off_24EC2E368;
  *(_QWORD *)(v810 + 1488) = &off_24EC2E3D8;
  *(_QWORD *)(v810 + 1512) = &off_24EC2E410;
  *(_QWORD *)(v810 + 1600) = &off_24EC2E440;
  *(_QWORD *)(v810 + 1680) = &off_24EC2E478;
  *(_QWORD *)(v810 + 1768) = &off_24EC2E4A8;
  *(_QWORD *)(v810 + 1848) = &off_24EC2E4E0;
  *(_QWORD *)(v810 + 1936) = &off_24EC2E510;
  *(_QWORD *)(v810 + 1968) = &off_24EC2E548;
  *(_QWORD *)(v810 + 2016) = &off_24EC2E5B8;
  *(_QWORD *)(v810 + 2104) = &off_24EC2E5E8;
  *(_QWORD *)(v810 + 2136) = &off_24EC2E620;
  *(_QWORD *)(v810 + 2184) = &off_24EC2E690;
  *(_QWORD *)(v810 + 2304) = &off_24EC2E6C0;
  *(_QWORD *)(v810 + 2352) = &off_24EC2E730;
  *(_QWORD *)(v810 + 2440) = &off_24EC2E760;
  *(_QWORD *)(v810 + 2520) = &off_24EC2E798;
  *(_QWORD *)(v810 + 2608) = &off_24EC2E7C8;
  *a1 = v810;
  v811 = v1147;
  *(_QWORD *)(v810 + 112) = v999;
  *(_QWORD *)(v810 + 120) = &off_24EC2DF80;
  *(_QWORD *)(v810 + 24) = v993;
  v812 = v992;
  v992 = 0uLL;
  v993 = 0;
  *(_QWORD *)(v810 + 48) = *(_QWORD *)&v994[16];
  v813 = *(_OWORD *)v994;
  memset(v994, 0, sizeof(v994));
  v814 = v995;
  v995 = 0uLL;
  v815 = v996;
  v996 = 0uLL;
  v816 = v998;
  *((_QWORD *)&v998 + 1) = 0;
  v999 = 0;
  v817 = v1003;
  v1003 = 0uLL;
  *(_QWORD *)(v810 + 192) = v978;
  v818 = *(_OWORD *)&__p[1];
  __p[1] = 0;
  __p[2] = 0;
  v978 = 0;
  *(_QWORD *)(v810 + 216) = *(_QWORD *)&v979[16];
  v819 = *(_OWORD *)v979;
  memset(v979, 0, sizeof(v979));
  v820 = v980;
  v980 = 0uLL;
  v821 = v981;
  v981 = 0uLL;
  *(_QWORD *)(v810 + 280) = v984;
  v822 = v983;
  *((_QWORD *)&v983 + 1) = 0;
  v984 = 0;
  v823 = v988;
  v988 = 0uLL;
  *(_QWORD *)(v810 + 360) = v964;
  *(_OWORD *)(v810 + 344) = *(_OWORD *)&v963[1];
  v963[1] = 0;
  v963[2] = 0;
  v964 = 0;
  *(_QWORD *)(v810 + 384) = *(_QWORD *)&v965[16];
  v824 = *(_OWORD *)v965;
  memset(v965, 0, sizeof(v965));
  v825 = v966;
  v966 = 0uLL;
  v826 = v967;
  v967 = 0uLL;
  *(_QWORD *)(v810 + 448) = v970;
  v827 = v969;
  *((_QWORD *)&v969 + 1) = 0;
  v970 = 0;
  v828 = v974;
  v974 = 0uLL;
  *(_QWORD *)(v810 + 528) = v950;
  v829 = *(_OWORD *)&v949[1];
  v949[1] = 0;
  v949[2] = 0;
  v950 = 0;
  *(_QWORD *)(v810 + 552) = *(_QWORD *)&v951[16];
  *(_OWORD *)(v810 + 536) = *(_OWORD *)v951;
  memset(v951, 0, sizeof(v951));
  v830 = v952;
  v952 = 0uLL;
  v831 = v953;
  v953 = 0uLL;
  *(_QWORD *)(v810 + 616) = v956;
  v832 = v955;
  *((_QWORD *)&v955 + 1) = 0;
  v956 = 0;
  v960 = 0uLL;
  *(_QWORD *)(v810 + 696) = v1137;
  *(_OWORD *)(v810 + 680) = *(_OWORD *)&v1136[1];
  v1136[1] = 0;
  v1136[2] = 0;
  v1137 = 0;
  *(_QWORD *)(v810 + 720) = *(_QWORD *)&v1138[16];
  v833 = *(_OWORD *)v1138;
  memset(v1138, 0, sizeof(v1138));
  v834 = v1139;
  v1139 = 0uLL;
  v835 = v1140;
  v1140 = 0uLL;
  *(_QWORD *)(v810 + 784) = v1143;
  v836 = v1142;
  *((_QWORD *)&v1142 + 1) = 0;
  v1143 = 0;
  v1147 = 0uLL;
  *(_QWORD *)(v810 + 864) = v1125;
  v837 = *(_OWORD *)&v1124[1];
  v1124[1] = 0;
  v1124[2] = 0;
  v1125 = 0;
  *(_QWORD *)(v810 + 888) = *(_QWORD *)&v1126[16];
  *(_OWORD *)(v810 + 872) = *(_OWORD *)v1126;
  memset(v1126, 0, sizeof(v1126));
  v838 = v1127;
  v1127 = 0uLL;
  v839 = v1128;
  v1128 = 0uLL;
  *(_QWORD *)(v810 + 952) = v1131;
  v840 = v1130;
  *((_QWORD *)&v1130 + 1) = 0;
  v1131 = 0;
  *(_OWORD *)(v810 + 1016) = *(_OWORD *)&v1112[1];
  *(_OWORD *)(v810 + 1208) = *(_OWORD *)v1102;
  *(_OWORD *)(v810 + 1352) = *(_OWORD *)&v1088[1];
  *(_OWORD *)(v810 + 1544) = *(_OWORD *)v1078;
  *(_OWORD *)(v810 + 1688) = *(_OWORD *)&v1064[1];
  *(_OWORD *)(v810 + 1880) = *(_OWORD *)v1054;
  *(_OWORD *)(v810 + 2024) = *(_OWORD *)&v1040[1];
  *(_OWORD *)(v810 + 2216) = *(_OWORD *)v1030;
  *(_OWORD *)(v810 + 2360) = *(_OWORD *)&v1016[1];
  *(_OWORD *)(v810 + 2552) = *(_OWORD *)v1006;
  v841 = v1135;
  v1135 = 0uLL;
  *(_QWORD *)(v810 + 1032) = v1113;
  v1112[1] = 0;
  v1112[2] = 0;
  v1113 = 0;
  *(_QWORD *)(v810 + 1056) = *(_QWORD *)&v1114[16];
  *(_OWORD *)(v810 + 8) = v812;
  v842 = *(_OWORD *)v1114;
  memset(v1114, 0, sizeof(v1114));
  *(_OWORD *)(v810 + 32) = v813;
  v843 = v1115;
  v1115 = 0uLL;
  *(_OWORD *)(v810 + 56) = v814;
  v844 = v1116;
  v1116 = 0uLL;
  *(_QWORD *)(v810 + 1120) = v1119;
  *(_OWORD *)(v810 + 72) = v815;
  v845 = v1118;
  *((_QWORD *)&v1118 + 1) = 0;
  v1119 = 0;
  *(_OWORD *)(v810 + 96) = v816;
  *(_OWORD *)(v810 + 128) = v1001;
  v846 = v1123;
  v1123 = 0uLL;
  *(_QWORD *)(v810 + 1200) = v1101;
  *(_OWORD *)(v810 + 152) = v817;
  v847 = *(_OWORD *)&v1100[1];
  v1100[1] = 0;
  v1100[2] = 0;
  v1101 = 0;
  *(_QWORD *)(v810 + 1224) = *(_QWORD *)&v1102[16];
  memset(v1102, 0, sizeof(v1102));
  *(_OWORD *)(v810 + 176) = v818;
  v848 = v1103;
  v1103 = 0uLL;
  *(_OWORD *)(v810 + 200) = v819;
  v849 = v1104;
  v1104 = 0uLL;
  *(_QWORD *)(v810 + 1288) = v1107;
  *(_OWORD *)(v810 + 224) = v820;
  *(_OWORD *)(v810 + 240) = v821;
  v850 = v1106;
  *((_QWORD *)&v1106 + 1) = 0;
  v1107 = 0;
  *(_QWORD *)(v810 + 792) = &off_24EC2E190;
  *(_QWORD *)(v810 + 960) = &off_24EC2E190;
  *(_QWORD *)(v810 + 1128) = &off_24EC2E190;
  *(_QWORD *)(v810 + 1296) = &off_24EC2E190;
  v851 = v1111;
  v1111 = 0uLL;
  *(_QWORD *)(v810 + 1368) = v1089;
  v1088[1] = 0;
  v1088[2] = 0;
  v1089 = 0;
  *(_QWORD *)(v810 + 1392) = *(_QWORD *)&v1090[16];
  *(_OWORD *)(v810 + 264) = v822;
  *(_OWORD *)(v810 + 296) = v986;
  v852 = *(_OWORD *)v1090;
  memset(v1090, 0, sizeof(v1090));
  *(_OWORD *)(v810 + 320) = v823;
  v853 = v1091;
  v1091 = 0uLL;
  *(_OWORD *)(v810 + 368) = v824;
  v854 = v1092;
  v1092 = 0uLL;
  *(_QWORD *)(v810 + 1456) = v1095;
  *(_OWORD *)(v810 + 392) = v825;
  *(_OWORD *)(v810 + 408) = v826;
  v855 = v1094;
  *((_QWORD *)&v1094 + 1) = 0;
  v1095 = 0;
  v856 = v1099;
  v1099 = 0uLL;
  *(_QWORD *)(v810 + 1536) = v1077;
  *(_OWORD *)(v810 + 432) = v827;
  *(_OWORD *)(v810 + 464) = v972;
  v857 = *(_OWORD *)&v1076[1];
  v1076[1] = 0;
  v1076[2] = 0;
  v1077 = 0;
  *(_QWORD *)(v810 + 1560) = *(_QWORD *)&v1078[16];
  memset(v1078, 0, sizeof(v1078));
  *(_OWORD *)(v810 + 488) = v828;
  v858 = v1079;
  v1079 = 0uLL;
  *(_OWORD *)(v810 + 512) = v829;
  v859 = v1087;
  *(_OWORD *)(v810 + 560) = v830;
  *(_OWORD *)(v810 + 576) = v831;
  v860 = v1080;
  v861 = v1075;
  *(_OWORD *)(v810 + 600) = v832;
  *(_OWORD *)(v810 + 632) = v958;
  *(_OWORD *)(v810 + 656) = v922;
  *(_OWORD *)(v810 + 704) = v833;
  v862 = v1067;
  v863 = v1068;
  v864 = v1063;
  *(_OWORD *)(v810 + 728) = v834;
  *(_OWORD *)(v810 + 744) = v835;
  *(_OWORD *)(v810 + 768) = v836;
  *(_OWORD *)(v810 + 800) = v1145;
  v865 = v1055;
  v866 = v1056;
  v867 = v1051;
  *(_OWORD *)(v810 + 824) = v811;
  *(_OWORD *)(v810 + 848) = v837;
  v868 = v1043;
  v869 = v1044;
  *(_OWORD *)(v810 + 896) = v838;
  *(_OWORD *)(v810 + 912) = v839;
  v870 = v1039;
  *(_OWORD *)(v810 + 936) = v840;
  *(_OWORD *)(v810 + 968) = v1133;
  *(_OWORD *)(v810 + 992) = v841;
  v871 = v1031;
  v872 = v1032;
  v873 = v1027;
  *(_OWORD *)(v810 + 1040) = v842;
  *(_OWORD *)(v810 + 1064) = v843;
  *(_OWORD *)(v810 + 1080) = v844;
  v875 = v1007;
  v874 = v1008;
  *(_OWORD *)(v810 + 1104) = v845;
  *(_OWORD *)(v810 + 1136) = v1121;
  *(_OWORD *)(v810 + 1160) = v846;
  *(_OWORD *)(v810 + 1184) = v847;
  *(_OWORD *)(v810 + 1232) = v848;
  *(_OWORD *)(v810 + 1248) = v849;
  *(_OWORD *)(v810 + 1272) = v850;
  *(_OWORD *)(v810 + 1304) = v1109;
  *(_OWORD *)(v810 + 1328) = v851;
  *(_OWORD *)(v810 + 1376) = v852;
  *(_OWORD *)(v810 + 1400) = v853;
  *(_OWORD *)(v810 + 1416) = v854;
  *(_OWORD *)(v810 + 1440) = v855;
  *(_OWORD *)(v810 + 1472) = v1097;
  *(_OWORD *)(v810 + 1496) = v856;
  *(_OWORD *)(v810 + 1520) = v857;
  *(_OWORD *)(v810 + 1568) = v858;
  *(_OWORD *)(v810 + 1584) = v860;
  *(_OWORD *)(v810 + 1608) = v1082;
  *(_OWORD *)(v810 + 1640) = v1085;
  *(_QWORD *)&v1106 = 0;
  *(_OWORD *)(v810 + 1664) = v859;
  *(_OWORD *)(v810 + 1712) = *(_OWORD *)v1066;
  *(_OWORD *)(v810 + 1736) = v862;
  *(_OWORD *)(v810 + 1752) = v863;
  *(_OWORD *)(v810 + 1776) = v1070;
  *(_OWORD *)(v810 + 1808) = v1073;
  *(_OWORD *)(v810 + 1832) = v861;
  *(_OWORD *)(v810 + 1856) = *(_OWORD *)&v1052[1];
  *(_OWORD *)(v810 + 1904) = v865;
  *(_OWORD *)(v810 + 1920) = v866;
  *(_OWORD *)(v810 + 1944) = v1058;
  *(_OWORD *)(v810 + 1976) = v1061;
  *(_OWORD *)(v810 + 2000) = v864;
  *(_OWORD *)(v810 + 2048) = *(_OWORD *)v1042;
  *(_OWORD *)(v810 + 2072) = v868;
  *(_OWORD *)(v810 + 2088) = v869;
  *(_OWORD *)(v810 + 2112) = v1046;
  *(_OWORD *)(v810 + 2144) = v1049;
  *(_OWORD *)(v810 + 2168) = v867;
  *(_OWORD *)(v810 + 2192) = *(_OWORD *)&v1028[1];
  *(_OWORD *)(v810 + 2240) = v871;
  *(_OWORD *)(v810 + 2256) = v872;
  *(_OWORD *)(v810 + 2280) = v1034;
  *(_OWORD *)(v810 + 2312) = v1037;
  *(_OWORD *)(v810 + 2336) = v870;
  *(_OWORD *)(v810 + 2384) = *(_OWORD *)v1018;
  *(_OWORD *)(v810 + 2408) = v1019;
  *(_OWORD *)(v810 + 2424) = v1020;
  *(_OWORD *)(v810 + 2448) = v1022;
  *(_OWORD *)(v810 + 2480) = v1025;
  *(_OWORD *)(v810 + 2504) = v873;
  *(_OWORD *)(v810 + 2528) = *(_OWORD *)&v1004[1];
  *(_OWORD *)(v810 + 2576) = v875;
  *(_QWORD *)&v1118 = 0;
  v1121 = 0uLL;
  *(_QWORD *)(v810 + 1152) = &off_24EC2E850;
  v1080 = 0uLL;
  *(_QWORD *)(v810 + 1624) = v1083;
  *((_QWORD *)&v1082 + 1) = 0;
  v1083 = 0;
  v1087 = 0uLL;
  *(_QWORD *)(v810 + 1704) = v1065;
  v1064[1] = 0;
  v1064[2] = 0;
  v1065 = 0;
  *(_QWORD *)(v810 + 1728) = *(_QWORD *)&v1066[16];
  memset(v1066, 0, sizeof(v1066));
  v1067 = 0uLL;
  v1068 = 0uLL;
  *(_QWORD *)(v810 + 1792) = v1071;
  *((_QWORD *)&v1070 + 1) = 0;
  v1071 = 0;
  *(_QWORD *)&v1130 = 0;
  v1133 = 0uLL;
  *(_QWORD *)(v810 + 984) = &off_24EC2E850;
  v1075 = 0uLL;
  *(_QWORD *)(v810 + 1872) = v1053;
  v1052[1] = 0;
  v1052[2] = 0;
  v1053 = 0;
  *(_QWORD *)(v810 + 1896) = *(_QWORD *)&v1054[16];
  memset(v1054, 0, sizeof(v1054));
  v1055 = 0uLL;
  v1056 = 0uLL;
  *(_QWORD *)(v810 + 1960) = v1059;
  *((_QWORD *)&v1058 + 1) = 0;
  v1059 = 0;
  *(_QWORD *)(v810 + 88) = &off_24EC2DF48;
  *(_QWORD *)&v998 = 0;
  v1001 = 0uLL;
  *(_QWORD *)(v810 + 144) = &off_24EC2E850;
  *(_QWORD *)&v1142 = 0;
  *(_QWORD *)&v1145 = 0;
  *(_QWORD *)(v810 + 816) = &off_24EC2E850;
  *(_QWORD *)(v810 + 288) = &off_24EC2E888;
  *(_QWORD *)&v983 = 0;
  v986 = 0uLL;
  *(_QWORD *)(v810 + 312) = &off_24EC2E850;
  *((_QWORD *)&v1145 + 1) = 0;
  *(_QWORD *)(v810 + 456) = &off_24EC2E888;
  *(_QWORD *)&v969 = 0;
  v972 = 0uLL;
  *(_QWORD *)(v810 + 480) = &off_24EC2E850;
  *(_QWORD *)(v810 + 624) = &off_24EC2E888;
  *(_QWORD *)&v955 = 0;
  v958 = 0uLL;
  *(_QWORD *)(v810 + 648) = &off_24EC2E850;
  v1109 = 0uLL;
  *(_QWORD *)(v810 + 1320) = &off_24EC2E850;
  *(_QWORD *)&v1094 = 0;
  v1097 = 0uLL;
  *(_QWORD *)(v810 + 1632) = &off_24EC2E888;
  *(_QWORD *)&v1082 = 0;
  v1085 = 0uLL;
  *(_QWORD *)(v810 + 1656) = &off_24EC2E850;
  *(_QWORD *)(v810 + 1800) = &off_24EC2E888;
  *(_QWORD *)&v1070 = 0;
  v1073 = 0uLL;
  *(_QWORD *)(v810 + 1824) = &off_24EC2E850;
  *(_QWORD *)&v1058 = 0;
  v1061 = 0uLL;
  *(_QWORD *)(v810 + 1992) = &off_24EC2E850;
  v1063 = 0uLL;
  *(_QWORD *)(v810 + 2040) = v1041;
  v1040[1] = 0;
  v1040[2] = 0;
  v1041 = 0;
  *(_QWORD *)(v810 + 2064) = *(_QWORD *)&v1042[16];
  memset(v1042, 0, sizeof(v1042));
  v1043 = 0uLL;
  v1044 = 0uLL;
  *(_QWORD *)(v810 + 2128) = v1047;
  v1047 = 0;
  v1046 = 0uLL;
  v1049 = 0uLL;
  *(_QWORD *)(v810 + 2160) = &off_24EC2E850;
  v1051 = 0uLL;
  *(_QWORD *)(v810 + 2208) = v1029;
  v1028[1] = 0;
  v1028[2] = 0;
  v1029 = 0;
  *(_QWORD *)(v810 + 2232) = *(_QWORD *)&v1030[16];
  memset(v1030, 0, sizeof(v1030));
  v1031 = 0uLL;
  v1032 = 0uLL;
  *(_QWORD *)(v810 + 2272) = &off_24EC2DF48;
  *(_QWORD *)(v810 + 2296) = v1035;
  v1035 = 0;
  v1034 = 0uLL;
  v1037 = 0uLL;
  *(_QWORD *)(v810 + 2328) = &off_24EC2E850;
  v1039 = 0uLL;
  *(_QWORD *)(v810 + 2376) = v1017;
  v1016[1] = 0;
  v1016[2] = 0;
  v1017 = 0;
  *(_QWORD *)(v810 + 2400) = *(_QWORD *)&v1018[16];
  memset(v1018, 0, sizeof(v1018));
  v1019 = 0uLL;
  v1020 = 0uLL;
  *(_QWORD *)(v810 + 2464) = v1023;
  *((_QWORD *)&v1022 + 1) = 0;
  v1023 = 0;
  *(_QWORD *)(v810 + 2472) = &off_24EC2E888;
  *(_QWORD *)&v1022 = 0;
  v1025 = 0uLL;
  *(_QWORD *)(v810 + 2496) = &off_24EC2E850;
  v1027 = 0uLL;
  *(_QWORD *)(v810 + 2544) = v1005;
  v1004[1] = 0;
  v1004[2] = 0;
  v1005 = 0;
  *(_QWORD *)(v810 + 2568) = *(_QWORD *)&v1006[16];
  memset(v1006, 0, sizeof(v1006));
  v1007 = 0uLL;
  *(_OWORD *)(v810 + 2592) = v874;
  v1008 = 0uLL;
  *(_OWORD *)(v810 + 2616) = v1010;
  *(_QWORD *)(v810 + 2632) = v1011;
  *((_QWORD *)&v1010 + 1) = 0;
  v1011 = 0;
  *(_QWORD *)(v810 + 2640) = &off_24EC2E888;
  *(_OWORD *)(v810 + 2648) = v1013;
  *(_QWORD *)&v1010 = 0;
  v1013 = 0uLL;
  *(_QWORD *)(v810 + 2664) = &off_24EC2E850;
  *(_OWORD *)(v810 + 2672) = v1015;
  v1015 = 0uLL;
  sub_22331CE44((uint64_t)v1004);
  if (SHIBYTE(v924[2]) < 0)
  {
    operator delete(v924[0]);
    sub_22331D338((uint64_t)v1016);
    v876 = (std::__shared_weak_count *)*((_QWORD *)&v925 + 1);
    if (!*((_QWORD *)&v925 + 1))
      goto LABEL_1094;
  }
  else
  {
    sub_22331D338((uint64_t)v1016);
    v876 = (std::__shared_weak_count *)*((_QWORD *)&v925 + 1);
    if (!*((_QWORD *)&v925 + 1))
      goto LABEL_1094;
  }
  v877 = (unint64_t *)&v876->__shared_owners_;
  do
    v878 = __ldaxr(v877);
  while (__stlxr(v878 - 1, v877));
  if (v878)
  {
LABEL_1094:
    if ((SHIBYTE(v926[2]) & 0x80000000) == 0)
      goto LABEL_1095;
LABEL_1098:
    operator delete(v926[0]);
    sub_22331D5E4((uint64_t)v1028);
    v879 = (std::__shared_weak_count *)*((_QWORD *)&v927 + 1);
    if (!*((_QWORD *)&v927 + 1))
      goto LABEL_1102;
    goto LABEL_1099;
  }
  ((void (*)(std::__shared_weak_count *))v876->__on_zero_shared)(v876);
  std::__shared_weak_count::__release_weak(v876);
  if (SHIBYTE(v926[2]) < 0)
    goto LABEL_1098;
LABEL_1095:
  sub_22331D5E4((uint64_t)v1028);
  v879 = (std::__shared_weak_count *)*((_QWORD *)&v927 + 1);
  if (!*((_QWORD *)&v927 + 1))
    goto LABEL_1102;
LABEL_1099:
  v880 = (unint64_t *)&v879->__shared_owners_;
  do
    v881 = __ldaxr(v880);
  while (__stlxr(v881 - 1, v880));
  if (v881)
  {
LABEL_1102:
    if ((SHIBYTE(v928[2]) & 0x80000000) == 0)
      goto LABEL_1103;
LABEL_1106:
    operator delete(v928[0]);
    sub_22331DAB0((uint64_t)v1040);
    v882 = (std::__shared_weak_count *)*((_QWORD *)&v929 + 1);
    if (!*((_QWORD *)&v929 + 1))
      goto LABEL_1110;
    goto LABEL_1107;
  }
  ((void (*)(std::__shared_weak_count *))v879->__on_zero_shared)(v879);
  std::__shared_weak_count::__release_weak(v879);
  if (SHIBYTE(v928[2]) < 0)
    goto LABEL_1106;
LABEL_1103:
  sub_22331DAB0((uint64_t)v1040);
  v882 = (std::__shared_weak_count *)*((_QWORD *)&v929 + 1);
  if (!*((_QWORD *)&v929 + 1))
    goto LABEL_1110;
LABEL_1107:
  v883 = (unint64_t *)&v882->__shared_owners_;
  do
    v884 = __ldaxr(v883);
  while (__stlxr(v884 - 1, v883));
  if (v884)
  {
LABEL_1110:
    if ((SHIBYTE(v930[2]) & 0x80000000) == 0)
      goto LABEL_1111;
LABEL_1114:
    operator delete(v930[0]);
    sub_22331DF7C((uint64_t)v1052);
    v885 = (std::__shared_weak_count *)*((_QWORD *)&v931 + 1);
    if (!*((_QWORD *)&v931 + 1))
      goto LABEL_1118;
    goto LABEL_1115;
  }
  ((void (*)(std::__shared_weak_count *))v882->__on_zero_shared)(v882);
  std::__shared_weak_count::__release_weak(v882);
  if (SHIBYTE(v930[2]) < 0)
    goto LABEL_1114;
LABEL_1111:
  sub_22331DF7C((uint64_t)v1052);
  v885 = (std::__shared_weak_count *)*((_QWORD *)&v931 + 1);
  if (!*((_QWORD *)&v931 + 1))
    goto LABEL_1118;
LABEL_1115:
  v886 = (unint64_t *)&v885->__shared_owners_;
  do
    v887 = __ldaxr(v886);
  while (__stlxr(v887 - 1, v886));
  if (v887)
  {
LABEL_1118:
    if ((SHIBYTE(v932[2]) & 0x80000000) == 0)
      goto LABEL_1119;
LABEL_1122:
    operator delete(v932[0]);
    sub_22331E448((uint64_t)v1064);
    v888 = (std::__shared_weak_count *)*((_QWORD *)&v933 + 1);
    if (!*((_QWORD *)&v933 + 1))
      goto LABEL_1126;
    goto LABEL_1123;
  }
  ((void (*)(std::__shared_weak_count *))v885->__on_zero_shared)(v885);
  std::__shared_weak_count::__release_weak(v885);
  if (SHIBYTE(v932[2]) < 0)
    goto LABEL_1122;
LABEL_1119:
  sub_22331E448((uint64_t)v1064);
  v888 = (std::__shared_weak_count *)*((_QWORD *)&v933 + 1);
  if (!*((_QWORD *)&v933 + 1))
    goto LABEL_1126;
LABEL_1123:
  v889 = (unint64_t *)&v888->__shared_owners_;
  do
    v890 = __ldaxr(v889);
  while (__stlxr(v890 - 1, v889));
  if (v890)
  {
LABEL_1126:
    if ((SHIBYTE(v934[2]) & 0x80000000) == 0)
      goto LABEL_1127;
LABEL_1130:
    operator delete(v934[0]);
    sub_22331E6F4((uint64_t)v1076);
    v891 = (std::__shared_weak_count *)*((_QWORD *)&v935 + 1);
    if (!*((_QWORD *)&v935 + 1))
      goto LABEL_1134;
    goto LABEL_1131;
  }
  ((void (*)(std::__shared_weak_count *))v888->__on_zero_shared)(v888);
  std::__shared_weak_count::__release_weak(v888);
  if (SHIBYTE(v934[2]) < 0)
    goto LABEL_1130;
LABEL_1127:
  sub_22331E6F4((uint64_t)v1076);
  v891 = (std::__shared_weak_count *)*((_QWORD *)&v935 + 1);
  if (!*((_QWORD *)&v935 + 1))
    goto LABEL_1134;
LABEL_1131:
  v892 = (unint64_t *)&v891->__shared_owners_;
  do
    v893 = __ldaxr(v892);
  while (__stlxr(v893 - 1, v892));
  if (v893)
  {
LABEL_1134:
    if ((SHIBYTE(v936[2]) & 0x80000000) == 0)
      goto LABEL_1135;
LABEL_1138:
    operator delete(v936[0]);
    sub_22331E9A0((uint64_t)v1088);
    v894 = (std::__shared_weak_count *)*((_QWORD *)&v937 + 1);
    if (!*((_QWORD *)&v937 + 1))
      goto LABEL_1142;
    goto LABEL_1139;
  }
  ((void (*)(std::__shared_weak_count *))v891->__on_zero_shared)(v891);
  std::__shared_weak_count::__release_weak(v891);
  if (SHIBYTE(v936[2]) < 0)
    goto LABEL_1138;
LABEL_1135:
  sub_22331E9A0((uint64_t)v1088);
  v894 = (std::__shared_weak_count *)*((_QWORD *)&v937 + 1);
  if (!*((_QWORD *)&v937 + 1))
    goto LABEL_1142;
LABEL_1139:
  v895 = (unint64_t *)&v894->__shared_owners_;
  do
    v896 = __ldaxr(v895);
  while (__stlxr(v896 - 1, v895));
  if (v896)
  {
LABEL_1142:
    if ((SHIBYTE(v938[2]) & 0x80000000) == 0)
      goto LABEL_1143;
LABEL_1146:
    operator delete(v938[0]);
    sub_22331F08C((uint64_t)v1100);
    v897 = (std::__shared_weak_count *)*((_QWORD *)&v939 + 1);
    if (!*((_QWORD *)&v939 + 1))
      goto LABEL_1150;
    goto LABEL_1147;
  }
  ((void (*)(std::__shared_weak_count *))v894->__on_zero_shared)(v894);
  std::__shared_weak_count::__release_weak(v894);
  if (SHIBYTE(v938[2]) < 0)
    goto LABEL_1146;
LABEL_1143:
  sub_22331F08C((uint64_t)v1100);
  v897 = (std::__shared_weak_count *)*((_QWORD *)&v939 + 1);
  if (!*((_QWORD *)&v939 + 1))
    goto LABEL_1150;
LABEL_1147:
  v898 = (unint64_t *)&v897->__shared_owners_;
  do
    v899 = __ldaxr(v898);
  while (__stlxr(v899 - 1, v898));
  if (v899)
  {
LABEL_1150:
    if ((SHIBYTE(v940[2]) & 0x80000000) == 0)
      goto LABEL_1151;
LABEL_1154:
    operator delete(v940[0]);
    sub_22331F4B8((uint64_t)v1112);
    v900 = (std::__shared_weak_count *)*((_QWORD *)&v941 + 1);
    if (!*((_QWORD *)&v941 + 1))
      goto LABEL_1158;
    goto LABEL_1155;
  }
  ((void (*)(std::__shared_weak_count *))v897->__on_zero_shared)(v897);
  std::__shared_weak_count::__release_weak(v897);
  if (SHIBYTE(v940[2]) < 0)
    goto LABEL_1154;
LABEL_1151:
  sub_22331F4B8((uint64_t)v1112);
  v900 = (std::__shared_weak_count *)*((_QWORD *)&v941 + 1);
  if (!*((_QWORD *)&v941 + 1))
    goto LABEL_1158;
LABEL_1155:
  v901 = (unint64_t *)&v900->__shared_owners_;
  do
    v902 = __ldaxr(v901);
  while (__stlxr(v902 - 1, v901));
  if (v902)
  {
LABEL_1158:
    if ((SHIBYTE(v942[2]) & 0x80000000) == 0)
      goto LABEL_1159;
LABEL_1162:
    operator delete(v942[0]);
    sub_22331F764((uint64_t)v1124);
    v903 = (std::__shared_weak_count *)*((_QWORD *)&v943 + 1);
    if (!*((_QWORD *)&v943 + 1))
      goto LABEL_1166;
    goto LABEL_1163;
  }
  ((void (*)(std::__shared_weak_count *))v900->__on_zero_shared)(v900);
  std::__shared_weak_count::__release_weak(v900);
  if (SHIBYTE(v942[2]) < 0)
    goto LABEL_1162;
LABEL_1159:
  sub_22331F764((uint64_t)v1124);
  v903 = (std::__shared_weak_count *)*((_QWORD *)&v943 + 1);
  if (!*((_QWORD *)&v943 + 1))
    goto LABEL_1166;
LABEL_1163:
  v904 = (unint64_t *)&v903->__shared_owners_;
  do
    v905 = __ldaxr(v904);
  while (__stlxr(v905 - 1, v904));
  if (v905)
  {
LABEL_1166:
    if ((SHIBYTE(v944[2]) & 0x80000000) == 0)
      goto LABEL_1167;
LABEL_1170:
    operator delete(v944[0]);
    sub_22331FA10((uint64_t)v1136);
    v906 = (std::__shared_weak_count *)*((_QWORD *)&v945 + 1);
    if (!*((_QWORD *)&v945 + 1))
      goto LABEL_1174;
    goto LABEL_1171;
  }
  ((void (*)(std::__shared_weak_count *))v903->__on_zero_shared)(v903);
  std::__shared_weak_count::__release_weak(v903);
  if (SHIBYTE(v944[2]) < 0)
    goto LABEL_1170;
LABEL_1167:
  sub_22331FA10((uint64_t)v1136);
  v906 = (std::__shared_weak_count *)*((_QWORD *)&v945 + 1);
  if (!*((_QWORD *)&v945 + 1))
    goto LABEL_1174;
LABEL_1171:
  v907 = (unint64_t *)&v906->__shared_owners_;
  do
    v908 = __ldaxr(v907);
  while (__stlxr(v908 - 1, v907));
  if (v908)
  {
LABEL_1174:
    if ((SHIBYTE(v946[2]) & 0x80000000) == 0)
      goto LABEL_1175;
LABEL_1178:
    operator delete(v946[0]);
    sub_22331FCBC((uint64_t)v949);
    v909 = (std::__shared_weak_count *)*((_QWORD *)&v947 + 1);
    if (!*((_QWORD *)&v947 + 1))
      goto LABEL_1182;
    goto LABEL_1179;
  }
  ((void (*)(std::__shared_weak_count *))v906->__on_zero_shared)(v906);
  std::__shared_weak_count::__release_weak(v906);
  if (SHIBYTE(v946[2]) < 0)
    goto LABEL_1178;
LABEL_1175:
  sub_22331FCBC((uint64_t)v949);
  v909 = (std::__shared_weak_count *)*((_QWORD *)&v947 + 1);
  if (!*((_QWORD *)&v947 + 1))
    goto LABEL_1182;
LABEL_1179:
  v910 = (unint64_t *)&v909->__shared_owners_;
  do
    v911 = __ldaxr(v910);
  while (__stlxr(v911 - 1, v910));
  if (v911)
  {
LABEL_1182:
    if ((SHIBYTE(v948[2]) & 0x80000000) == 0)
      goto LABEL_1183;
LABEL_1186:
    operator delete(v948[0]);
    sub_22331FF68((uint64_t)v963);
    v912 = (std::__shared_weak_count *)*((_QWORD *)&v961 + 1);
    if (!*((_QWORD *)&v961 + 1))
      goto LABEL_1190;
    goto LABEL_1187;
  }
  ((void (*)(std::__shared_weak_count *))v909->__on_zero_shared)(v909);
  std::__shared_weak_count::__release_weak(v909);
  if (SHIBYTE(v948[2]) < 0)
    goto LABEL_1186;
LABEL_1183:
  sub_22331FF68((uint64_t)v963);
  v912 = (std::__shared_weak_count *)*((_QWORD *)&v961 + 1);
  if (!*((_QWORD *)&v961 + 1))
    goto LABEL_1190;
LABEL_1187:
  v913 = (unint64_t *)&v912->__shared_owners_;
  do
    v914 = __ldaxr(v913);
  while (__stlxr(v914 - 1, v913));
  if (v914)
  {
LABEL_1190:
    if ((SHIBYTE(v962[2]) & 0x80000000) == 0)
      goto LABEL_1191;
LABEL_1194:
    operator delete(v962[0]);
    sub_223320214((uint64_t)__p);
    v915 = (std::__shared_weak_count *)*((_QWORD *)&v975 + 1);
    if (!*((_QWORD *)&v975 + 1))
      goto LABEL_1198;
    goto LABEL_1195;
  }
  ((void (*)(std::__shared_weak_count *))v912->__on_zero_shared)(v912);
  std::__shared_weak_count::__release_weak(v912);
  if (SHIBYTE(v962[2]) < 0)
    goto LABEL_1194;
LABEL_1191:
  sub_223320214((uint64_t)__p);
  v915 = (std::__shared_weak_count *)*((_QWORD *)&v975 + 1);
  if (!*((_QWORD *)&v975 + 1))
    goto LABEL_1198;
LABEL_1195:
  v916 = (unint64_t *)&v915->__shared_owners_;
  do
    v917 = __ldaxr(v916);
  while (__stlxr(v917 - 1, v916));
  if (v917)
  {
LABEL_1198:
    if ((SHIBYTE(__src[2]) & 0x80000000) == 0)
      goto LABEL_1199;
LABEL_1202:
    operator delete(__src[0]);
    sub_2233204C0((uint64_t)&v991);
    v918 = (std::__shared_weak_count *)*((_QWORD *)&v989 + 1);
    if (!*((_QWORD *)&v989 + 1))
      goto LABEL_1206;
    goto LABEL_1203;
  }
  ((void (*)(std::__shared_weak_count *))v915->__on_zero_shared)(v915);
  std::__shared_weak_count::__release_weak(v915);
  if (SHIBYTE(__src[2]) < 0)
    goto LABEL_1202;
LABEL_1199:
  sub_2233204C0((uint64_t)&v991);
  v918 = (std::__shared_weak_count *)*((_QWORD *)&v989 + 1);
  if (!*((_QWORD *)&v989 + 1))
    goto LABEL_1206;
LABEL_1203:
  v919 = (unint64_t *)&v918->__shared_owners_;
  do
    v920 = __ldaxr(v919);
  while (__stlxr(v920 - 1, v919));
  if (v920)
  {
LABEL_1206:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_1207;
  }
  ((void (*)(std::__shared_weak_count *))v918->__on_zero_shared)(v918);
  std::__shared_weak_count::__release_weak(v918);
  if (SHIBYTE(__dst[2]) < 0)
LABEL_1207:
    operator delete(__dst[0]);
}

void sub_22334A908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_Unwind_Exception *exception_objecta,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a68;
  void *a70;
  char a72;
  char a73;
  void *a74;
  char a75;
  char a76;

  sub_223167354((uint64_t)&a41);
  if (a48 < 0)
    operator delete(__p);
  sub_22331D338((uint64_t)&STACK[0x760]);
  sub_223167354((uint64_t)&a50);
  if (a57 < 0)
    operator delete(a52);
  sub_22331D5E4((uint64_t)&STACK[0x810]);
  sub_223167354((uint64_t)&a59);
  if (a66 < 0)
    operator delete(a61);
  sub_22331DAB0((uint64_t)&STACK[0x8C0]);
  sub_223167354((uint64_t)&a68);
  if (a72 < 0)
    operator delete(a70);
  sub_22331DF7C((uint64_t)&STACK[0x970]);
  sub_223167354((uint64_t)&a73);
  if (a75 < 0)
    operator delete(a74);
  sub_22331E448((uint64_t)&STACK[0xA20]);
  sub_223167354((uint64_t)&a76);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  sub_22331E6F4((uint64_t)&STACK[0xAD0]);
  sub_223167354((uint64_t)&STACK[0x220]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  sub_22331E9A0((uint64_t)&STACK[0xB80]);
  sub_223167354((uint64_t)&STACK[0x250]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  sub_22331F08C((uint64_t)&STACK[0xC30]);
  sub_223167354((uint64_t)&STACK[0x280]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  sub_22331F4B8((uint64_t)&STACK[0xCE0]);
  sub_223167354((uint64_t)&STACK[0x2B0]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  sub_22331F764((uint64_t)&STACK[0xD90]);
  sub_223167354((uint64_t)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  sub_22331FA10((uint64_t)&STACK[0xE40]);
  sub_223167354((uint64_t)&STACK[0x310]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  sub_22331FCBC((uint64_t)&STACK[0x370]);
  sub_223167354((uint64_t)&STACK[0x340]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  sub_22331FF68((uint64_t)&STACK[0x450]);
  sub_223167354((uint64_t)&STACK[0x420]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);
  sub_223320214((uint64_t)&STACK[0x530]);
  sub_223167354((uint64_t)&STACK[0x500]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  sub_2233204C0((uint64_t)&STACK[0x608]);
  sub_223167354((uint64_t)&STACK[0x5E0]);
  if (SLOBYTE(STACK[0x607]) < 0)
    operator delete((void *)STACK[0x5F0]);
  _Unwind_Resume(a1);
}

void sub_22334C114()
{
  void *v0;
  char v1;
  uint64_t v2;

  sub_223167354(v2 - 208);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334BF10);
}

void sub_22334C130()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x847]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x830]);
      if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x847]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xF00]);
    sub_223167354((uint64_t)&STACK[0x6B0]);
    JUMPOUT(0x22334C250);
  }
LABEL_7:
  operator delete((void *)STACK[0x818]);
  goto LABEL_8;
}

void sub_22334C1B0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x6B0]);
  JUMPOUT(0x22334C248);
}

void sub_22334C264()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xF00]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334C250);
}

void sub_22334C280()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x8F7]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x8E0]);
      if ((SLOBYTE(STACK[0x8DF]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x8F7]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x8DF]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0x6B0]);
    sub_223167354((uint64_t)&STACK[0x760]);
    JUMPOUT(0x22334C3A0);
  }
LABEL_7:
  operator delete((void *)STACK[0x8C8]);
  goto LABEL_8;
}

void sub_22334C300()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x760]);
  JUMPOUT(0x22334C398);
}

void sub_22334C3B4()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0x6B0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334C3A0);
}

void sub_22334C3D0()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x9A7]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x990]);
      if ((SLOBYTE(STACK[0x98F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x9A7]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x98F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0x760]);
    sub_223167354((uint64_t)&STACK[0x810]);
    JUMPOUT(0x22334C4F0);
  }
LABEL_7:
  operator delete((void *)STACK[0x978]);
  goto LABEL_8;
}

void sub_22334C450()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x810]);
  JUMPOUT(0x22334C4E8);
}

void sub_22334C504()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0x760]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334C4F0);
}

void sub_22334C520()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xA57]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0xA40]);
      if ((SLOBYTE(STACK[0xA3F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xA57]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0xA3F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0x810]);
    sub_223167354((uint64_t)&STACK[0x8C0]);
    JUMPOUT(0x22334C640);
  }
LABEL_7:
  operator delete((void *)STACK[0xA28]);
  goto LABEL_8;
}

void sub_22334C5A0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x8C0]);
  JUMPOUT(0x22334C638);
}

void sub_22334C654()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0x810]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334C640);
}

void sub_22334C670()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0xB07]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0xAF0]);
      if ((SLOBYTE(STACK[0xAEF]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0xB07]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0xAEF]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0x8C0]);
    sub_223167354((uint64_t)&STACK[0x970]);
    JUMPOUT(0x22334C790);
  }
LABEL_7:
  operator delete((void *)STACK[0xAD8]);
  goto LABEL_8;
}

void sub_22334C6F0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x970]);
  JUMPOUT(0x22334C788);
}

void sub_22334C7A4()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0x8C0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334C790);
}

void sub_22334C7C0()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xBB7]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0xBA0]);
      if ((SLOBYTE(STACK[0xB9F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xBB7]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0xB9F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0x970]);
    sub_223167354((uint64_t)&STACK[0xA20]);
    JUMPOUT(0x22334C8E0);
  }
LABEL_7:
  operator delete((void *)STACK[0xB88]);
  goto LABEL_8;
}

void sub_22334C840()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xA20]);
  JUMPOUT(0x22334C8D8);
}

void sub_22334C8F4()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0x970]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334C8E0);
}

void sub_22334C910()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xC67]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0xC50]);
      if ((SLOBYTE(STACK[0xC4F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xC67]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0xC4F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xA20]);
    sub_223167354((uint64_t)&STACK[0xAD0]);
    JUMPOUT(0x22334CB04);
  }
LABEL_7:
  operator delete((void *)STACK[0xC38]);
  goto LABEL_8;
}

void sub_22334C990()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xAD0]);
  JUMPOUT(0x22334CAFCLL);
}

void sub_22334CB18()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xA20]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334CB04);
}

void sub_22334CB34()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0xD17]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0xD00]);
      if ((SLOBYTE(STACK[0xCFF]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0xD17]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0xCFF]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xAD0]);
    sub_223167354((uint64_t)&STACK[0xB80]);
    JUMPOUT(0x22334CD24);
  }
LABEL_7:
  operator delete((void *)STACK[0xCE8]);
  goto LABEL_8;
}

void sub_22334CBB0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xB80]);
  JUMPOUT(0x22334CD1CLL);
}

void sub_22334CD38()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xAD0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334CD24);
}

void sub_22334CD54()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xDC7]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0xDB0]);
      if ((SLOBYTE(STACK[0xDAF]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0xDC7]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0xDAF]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xB80]);
    sub_223167354((uint64_t)&STACK[0xC30]);
    JUMPOUT(0x22334CE74);
  }
LABEL_7:
  operator delete((void *)STACK[0xD98]);
  goto LABEL_8;
}

void sub_22334CDD4()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xC30]);
  JUMPOUT(0x22334CE6CLL);
}

void sub_22334CE88()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xB80]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334CE74);
}

void sub_22334CEA4()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0xE77]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0xE60]);
      if ((SLOBYTE(STACK[0xE5F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0xE77]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0xE5F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xC30]);
    sub_223167354((uint64_t)&STACK[0xCE0]);
    JUMPOUT(0x22334D094);
  }
LABEL_7:
  operator delete((void *)STACK[0xE48]);
  goto LABEL_8;
}

void sub_22334CF20()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xCE0]);
  JUMPOUT(0x22334D08CLL);
}

void sub_22334D0A8()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xC30]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334D094);
}

void sub_22334D0C4()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0x3A7]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x390]);
      if ((SLOBYTE(STACK[0x38F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v1);
    sub_223167354(v2);
    if (SLOBYTE(STACK[0x3A7]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x38F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xCE0]);
    sub_223167354((uint64_t)&STACK[0xD90]);
    JUMPOUT(0x22334D2A0);
  }
LABEL_7:
  operator delete((void *)STACK[0x378]);
  goto LABEL_8;
}

void sub_22334D140()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xD90]);
  JUMPOUT(0x22334D298);
}

void sub_22334D2B4()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xCE0]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334D2A0);
}

void sub_22334D2D0()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x487]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x470]);
      if ((SLOBYTE(STACK[0x46F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x487]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x46F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xD90]);
    sub_223167354((uint64_t)&STACK[0xE40]);
    JUMPOUT(0x22334D3F0);
  }
LABEL_7:
  operator delete((void *)STACK[0x458]);
  goto LABEL_8;
}

void sub_22334D350()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0xE40]);
  JUMPOUT(0x22334D3E8);
}

void sub_22334D404()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xD90]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334D3F0);
}

void sub_22334D420()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x567]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x550]);
      if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x567]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0xE40]);
    sub_223167354((uint64_t)&STACK[0x370]);
    JUMPOUT(0x22334D540);
  }
LABEL_7:
  operator delete((void *)STACK[0x538]);
  goto LABEL_8;
}

void sub_22334D4A0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x370]);
  JUMPOUT(0x22334D538);
}

void sub_22334D554()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0xE40]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334D540);
}

void sub_22334D570()
{
  std::__shared_weak_count *v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
  {
    std::__shared_weak_count::__release_weak(v0);
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x63F]) < 0)
    {
LABEL_3:
      operator delete((void *)STACK[0x628]);
      if ((SLOBYTE(STACK[0x627]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else
  {
    sub_223167354(v2);
    sub_223167354(v1);
    if (SLOBYTE(STACK[0x63F]) < 0)
      goto LABEL_3;
  }
  if ((SLOBYTE(STACK[0x627]) & 0x80000000) == 0)
  {
LABEL_8:
    sub_223167354((uint64_t)&STACK[0x370]);
    sub_223167354((uint64_t)&STACK[0x450]);
    JUMPOUT(0x22334D690);
  }
LABEL_7:
  operator delete((void *)STACK[0x610]);
  goto LABEL_8;
}

void sub_22334D5F0()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_223167354((uint64_t)&STACK[0x450]);
  JUMPOUT(0x22334D688);
}

void sub_22334D6A4()
{
  void *v0;
  char v1;

  sub_223167354((uint64_t)&STACK[0x370]);
  if (v1 < 0)
    operator delete(v0);
  JUMPOUT(0x22334D690);
}

void sub_22334D6C4(uint64_t a1)
{
  sub_22334EF0C(a1);
  JUMPOUT(0x227684CE8);
}

void sub_22334D6E8(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2EB68;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24EC2EBB8;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_2245022E4(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x227684CE8](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24EC2EC38;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_2245022E4(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_22334DAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22334DBF0(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22334DC00(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_22334DC0C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_22334DC1C(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_2231A9820((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v69, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2ECB8;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2EB68;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_22324A974();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24EC2ED08;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_2245022E4(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x227684CE8](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24EC2ECB8;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24EC2ED88;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_2245022E4(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_22334E238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x22334E14CLL);
    }
    sub_2233236D4(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_22334E2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22334E300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_22334FD8C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_22334FD8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22334E354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22334E378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_22332429C((uint64_t *)va3);
  sub_223167354((uint64_t)va2);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22334E418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_223167354((uint64_t)va);
  sub_223167354((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_22334E434(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_2245023F0(*v1);
  }
  else
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    sub_2245023F0(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_22334E4A8(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC2EE08;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24EC2DFB8;
  v10[4] = v9;
  v14 = v10;
  sub_2245022E4(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_22334E5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_22334E64C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24EC2EE88;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_2245022E4(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_22334E75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_22334E7C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2EF08;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22334E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22334EAA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24EC2E8D0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_2233236D4(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24EC2EF88;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_2245022E4(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_223325E14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_223325EE8(&v22);
}

void sub_22334ECB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_223325EE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_223325EE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_22334ED80(uint64_t a1)
{
  return sub_22334EF0C(a1 - 16);
}

void sub_22334ED88(uint64_t a1)
{
  sub_22334EF0C(a1 - 16);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22334EDB0(uint64_t a1, uint64_t a2)
{
  return sub_22334E4A8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22334EDB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22334E7C0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_22334EDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22334EAA0((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_22334EDC8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_22334EDD0(uint64_t a1)
{
  return sub_22334EF0C(a1 - 24);
}

void sub_22334EDD8(uint64_t a1)
{
  sub_22334EF0C(a1 - 24);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22334EE00(uint64_t a1)
{
  return sub_22334E64C((_QWORD *)(a1 - 24));
}

uint64_t sub_22334EE08(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_22334EE10(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_22334EE78(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x227684CE8);
}

__n128 sub_22334EEE0@<Q0>(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  __n128 result;

  v3 = *(uint64_t **)(a1 + 8);
  *(_BYTE *)a3 = *a2;
  v4 = *v3;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(*v3 + 24);
  result = *(__n128 *)(v4 + 40);
  *(__n128 *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 38) = *(_QWORD *)(v4 + 54);
  return result;
}

uint64_t sub_22334EF0C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24EC2E968;
  *(_QWORD *)(a1 + 16) = &unk_24EC2E9E0;
  *(_QWORD *)(a1 + 24) = &unk_24EC2EA20;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x227684CE8](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_22334F10C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2EB68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22334F11C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2EB68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22334F154(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2EBB8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_22334F198(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2EBB8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22334F1EC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2EBB8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_22334F25C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2EBB8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_22334F2AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_22334F2E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_22334F320(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_22334F644((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_22334F9AC(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_22334F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_22334F9AC(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22334F5CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6"
                     "_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetecti"
                                "onStateEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22334F638()
{
  return &unk_24EC2EC18;
}

void sub_22334F644(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::exception_ptr v17;
  _OWORD v18[3];

  v6 = *a1;
  if (!v6)
  {
    sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
    v7 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (byte_255795670)
      v8 = byte_255795678 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_255795648;
      for (i = qword_255795650; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_255795680);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
    {
      __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
      __cxa_guard_release(&qword_255795680);
    }
    if (!byte_255795670)
      abort();
    qword_255795660(*(_QWORD *)algn_255795668, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v18, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, _OWORD *))(j[2] + 16))(j + 2, v18);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_2233236D4(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v17.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v17), v15))
    {
      sub_2233236D4(2u);
    }
    v16 = v18[1];
    *(_OWORD *)(v14 + 144) = v18[0];
    *(_OWORD *)(v14 + 160) = v16;
    *(_OWORD *)(v14 + 176) = v18[2];
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
}

void sub_22334F8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17)
{
  std::mutex *v17;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  std::mutex::unlock(v17);
  if (a2 == 1)
  {
    v20 = (uint64_t *)__cxa_begin_catch(a1);
    v21 = *v20;
    a11 = *(_QWORD *)(*(_QWORD *)(*v20 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v21 + 16))();
    sub_2233233A4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v22 = (uint64_t *)&a12;
    else
      v22 = a12;
    if ((a17 & 0x80u) == 0)
      v23 = a17;
    else
      v23 = a13;
    sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v22, v23, (void (*)(void **))sub_22457406C);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_22334F980(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x22334F9A0);
}

uint64_t *sub_22334F9AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x2276844A8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_22334FA98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, char a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  MEMORY[0x2276844B4](&a11);
  JUMPOUT(0x22334F9F4);
}

_QWORD *sub_22334FAD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2EC38;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_22334FB0C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2EC38;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22334FB54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2EC38;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_22334FBAC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC2EC38;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_22334FBE4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_22334FBF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_22334FC20(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_22334F644((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_22334F9AC(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_22334FCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_22334F9AC(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_22334FD14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6"
                     "_Lb0EE4SendERKbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetecti"
                                "onStateEvS6_Lb0EE4SendERKbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE4SendERKbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE4SendERKbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22334FD80()
{
  return &unk_24EC2EC98;
}

uint64_t sub_22334FD8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_22334FDFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2ECB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_22334FE0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2ECB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t *sub_22334FE3C(uint64_t a1)
{
  return sub_22334F9AC((uint64_t *)(a1 + 24));
}

_QWORD *sub_22334FE48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2ED08;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_22334FED0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24EC2ED08;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x227684CE8);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_22334FF68(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2ED08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_22334FFF8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2ED08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_223350068(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_2233500E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_223350164(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v23, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v25, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_22334F644(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_22334F9AC((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_223350440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_22335046C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x223350278);
    JUMPOUT(0x223350248);
  }
  sub_2233236D4(3u);
}

void sub_2233504C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2233504F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_22334F9AC(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2233505E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6"
                     "_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetecti"
                                "onStateEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT"
                                "_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_22335064C()
{
  return &unk_24EC2ED68;
}

_QWORD *sub_223350658(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2ED88;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_2233506D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24EC2ED88;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223350760(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2ED88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_2233507D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24EC2ED88;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_223350830(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_2233508A0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_223350910(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v9, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_22334F644((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_22334F9AC((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_223350A20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_223350A98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x223350ACCLL);
  JUMPOUT(0x223350AFCLL);
}

uint64_t sub_223350B04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6"
                     "_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetecti"
                                "onStateEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223350B70()
{
  return &unk_24EC2EDE8;
}

_QWORD *sub_223350B7C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2EE08;
  v2 = a1[4];
  a1[3] = &off_24EC2DFB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_223350BD4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24EC2EE08;
  v2 = a1[4];
  a1[3] = &off_24EC2DFB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223350C3C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24EC2EE08;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24EC2DFB8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_223350CB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223350CD4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24EC2EE08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24EC2DFB8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_223350D3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_223350D54(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24EC2DFB8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_223350DA4(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24EC2DFB8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_223350DF0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24EC2DFB8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223350EA4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223350EE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_"
                     "Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectio"
                                "nStateEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE9SubscribeENS1_12ChannelInputIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223350F4C()
{
  return &unk_24EC2EE68;
}

_QWORD *sub_223350F58(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2EE88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223350F90(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2EE88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_223350FD8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2EE88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_223351028(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24EC2EE88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_223351058(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_223351068(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223351094(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223351128(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223351164(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_"
                     "Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectio"
                                "nStateEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_2233511D0()
{
  return &unk_24EC2EEE8;
}

_QWORD *sub_2233511DC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2EF08;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223351214(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2EF08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335125C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2EF08;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_2233512B4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2EF08;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_2233512EC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233512FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_223351328(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_223323BA8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_223325CA4((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_223325BEC(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_2233236D4(3u);
    }
  }
}

void sub_2233514A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223351514(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6"
                     "_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetecti"
                                "onStateEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223351580()
{
  return &unk_24EC2EF68;
}

_QWORD *sub_22335158C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24EC2EF88;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_2233515C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24EC2EF88;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335160C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24EC2EF88;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_223351664(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24EC2EF88;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_22335169C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_2233516AC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_2233516D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_2233236D4(3u);
        sub_223325BEC(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223351790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233517DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6"
                     "_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetecti"
                                "onStateEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS6_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223351848()
{
  return &unk_24EC2EFE8;
}

void sub_223351858(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x227684CE8);
}

uint64_t sub_22335187C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_223351894(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_9applecv3d13concurrent_sd21Surfac"
                     "eDetectionStateEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_9applecv3d13concurrent"
                                "_sd21SurfaceDetectionStateEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorIbNS1_9applecv3d13concurrent_sd21SurfaceDetectionStateEvS8_Lb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_223351904(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_223351930(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x227684CE8);
}

_QWORD *sub_22335196C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24EC2F058;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_2233519D4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223351A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223351A78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_223351B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223351B1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223351BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_223351BF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_223351CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223351CCC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_223351D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_223167354((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_223351D88(uint64_t a1)
{
  sub_2233535B4(a1);
  JUMPOUT(0x227684CE8);
}

void sub_223351DAC(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  __int128 v6;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count **v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::mutex **v25;
  uint64_t **v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  std::__shared_count v52;
  _BYTE v53[24];
  __int128 v54;
  uint64_t v55;
  __int128 *v56;
  _BYTE v57[24];
  _BYTE *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x40uLL);
    v6 = *(_OWORD *)(a2 + 16);
    v5[1].std::__shared_count = *(std::__shared_count *)a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC2F2D0;
    v9 = v5 + 1;
    *(_OWORD *)&v5[1].__shared_weak_owners_ = v6;
    v5[2].__shared_owners_ = *(_QWORD *)(a2 + 32);
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v11 = (_QWORD *)operator new();
    *v11 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v54 = v11;
    *((_QWORD *)&v54 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_22324A974();
    v12 = v4[4];
    v13 = *v4;
    v14 = (std::__shared_weak_count **)(*v4 + 16 * v12);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    *v14 = v9;
    v16 = v13 + 16 * v12;
    v17 = *(std::__shared_weak_count **)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v5;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (v4[1] - *v4) >> 4;
    v21 = v4[5];
    v22 = v4[4] + 1;
    if (v22 >= v20)
      v23 = (v4[1] - *v4) >> 4;
    else
      v23 = 0;
    v4[4] = v22 - v23;
    if (v21 == v20)
    {
      v24 = v4[3] + 1;
      if (v24 < v20)
        v20 = 0;
      v4[3] = v24 - v20;
      v25 = (std::mutex **)v54;
      if (!(_QWORD)v54)
      {
LABEL_33:
        v35 = (uint64_t **)a1[9];
        v54 = 0uLL;
        v36 = (std::__shared_weak_count *)a1[5];
        if (v36)
        {
          v37 = std::__shared_weak_count::lock(v36);
          if (v37)
          {
            v38 = v37;
            v39 = a1[4];
            v40 = (unint64_t *)&v37->__shared_weak_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            *(_QWORD *)&v54 = v39;
            *((_QWORD *)&v54 + 1) = v37;
            v42 = (unint64_t *)&v37->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          else
          {
            v54 = 0uLL;
          }
        }
        v44 = (char *)operator new(0x30uLL);
        *(_QWORD *)v44 = &off_24EC2F320;
        *(_OWORD *)(v44 + 8) = v54;
        v54 = 0uLL;
        *((_QWORD *)v44 + 3) = v9;
        *((_QWORD *)v44 + 4) = v5;
        v55 = 0;
        v56 = 0;
        v58 = v44;
        sub_2245022E4(*v35, (uint64_t)v57);
        v45 = v58;
        if (v58 == v57)
        {
          v46 = 4;
          v45 = v57;
        }
        else
        {
          if (!v58)
            goto LABEL_47;
          v46 = 5;
        }
        (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_47:
        if (v5)
        {
          v47 = (unint64_t *)&v5->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v21 + 1;
      v25 = (std::mutex **)v54;
      if (!(_QWORD)v54)
        goto LABEL_33;
    }
    std::mutex::unlock(*v25);
    MEMORY[0x227684CE8](v25, 0x20C4093837F09);
    goto LABEL_33;
  }
  v26 = (uint64_t **)a1[9];
  v27 = (std::__shared_weak_count *)a1[5];
  if (v27)
  {
    v28 = std::__shared_weak_count::lock(v27);
    v29 = v28;
    if (v28)
    {
      v30 = a1[4];
      v31 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = (unint64_t *)&v28->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  v52 = *(std::__shared_count *)a2;
  *(_OWORD *)v53 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)&v53[14] = *(_QWORD *)(a2 + 30);
  v49 = (char *)operator new(0x40uLL);
  *(_QWORD *)v49 = &off_24EC2F3A0;
  *((_QWORD *)v49 + 1) = v30;
  *((_QWORD *)v49 + 2) = v29;
  *(std::__shared_count *)(v49 + 24) = v52;
  *(_OWORD *)(v49 + 40) = *(_OWORD *)v53;
  *((_QWORD *)v49 + 7) = *(_QWORD *)&v53[16];
  v56 = (__int128 *)v49;
  sub_2245022E4(*v26, (uint64_t)&v54);
  v50 = v56;
  if (v56 == &v54)
  {
    v51 = 4;
    v50 = &v54;
  }
  else
  {
    if (!v56)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_2233521E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (a20 == v20)
  {
    (*(void (**)(void))(a17 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a20)
  {
    (*(void (**)(void))(*(_QWORD *)a20 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2233522DC(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2233522EC(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_2233522F8(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_223352308(_QWORD *a1, __int128 *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t *v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::mutex **v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t **v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *p_shared_weak_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  std::string *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  __int128 *v64;
  std::string *v65;
  std::runtime_error *exception;
  std::runtime_error *v67;
  __int128 v68;
  __int128 v69;
  _BYTE v70[24];
  _QWORD *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::runtime_error v74;
  char *v75;
  std::__shared_weak_count *v76;
  __int128 v77;
  _QWORD *v78;
  __int128 *v79;
  _QWORD v80[3];
  std::string v81;
  std::string *v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v77 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v77 + 1) = 45;
    v63 = (_QWORD *)a1[6];
    v62 = a1 + 6;
    v61 = v63;
    v64 = (__int128 *)*((unsigned __int8 *)v62 + 23);
    if ((char)v64 < 0)
      v64 = (__int128 *)v62[1];
    else
      v61 = v62;
    v78 = v61;
    v79 = v64;
    sub_2231A9820((uint64_t)&v77, (uint64_t)v80, 0, 0, &v81);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v81;
    else
      v65 = (std::string *)v81.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v74, (const char *)v65);
    v74.__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v67 = std::runtime_error::runtime_error(exception, &v74);
    v67->__vftable = (std::runtime_error_vtbl *)&off_24EC77B58;
    __cxa_throw(v67, (struct type_info *)&unk_24EC77B70, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24EC2F420;
    v6[1].__vftable = *a3;
    v73 = v6;
    v71 = &v6[1].__vftable;
    v72 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v9 = (char *)operator new(0x40uLL);
    v10 = a2[1];
    *(_OWORD *)(v9 + 24) = *a2;
    *((_QWORD *)v9 + 1) = 0;
    v11 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v12 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24EC2F2D0;
    v13 = v9 + 24;
    *(_OWORD *)(v9 + 40) = v10;
    *((_QWORD *)v9 + 7) = *((_QWORD *)a2 + 4);
    v75 = v9 + 24;
    v76 = (std::__shared_weak_count *)v9;
    do
      v14 = __ldxr(v12);
    while (__stxr(v14 + 1, v12));
    v15 = (uint64_t *)a1[18];
    v16 = (_QWORD *)operator new();
    *v16 = v15 + 7;
    std::mutex::lock((std::mutex *)(v15 + 7));
    *(_QWORD *)&v77 = v16;
    *((_QWORD *)&v77 + 1) = v15;
    if (!*((_BYTE *)v15 + 48))
      sub_22324A974();
    v17 = v15[4];
    v18 = *v15;
    v19 = (_QWORD *)(*v15 + 16 * v17);
    do
      v20 = __ldxr(v11);
    while (__stxr(v20 + 1, v11));
    *v19 = v13;
    v21 = v18 + 16 * v17;
    v22 = *(std::__shared_weak_count **)(v21 + 8);
    *(_QWORD *)(v21 + 8) = v9;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (v15[1] - *v15) >> 4;
    v26 = v15[5];
    v27 = v15[4] + 1;
    if (v27 >= v25)
      v28 = (v15[1] - *v15) >> 4;
    else
      v28 = 0;
    v15[4] = v27 - v28;
    if (v26 == v25)
    {
      v29 = v15[3] + 1;
      if (v29 < v25)
        v25 = 0;
      v15[3] = v29 - v25;
      v30 = (std::mutex **)v77;
      if (!(_QWORD)v77)
      {
LABEL_37:
        v40 = (uint64_t **)a1[9];
        v77 = 0uLL;
        v41 = (std::__shared_weak_count *)a1[5];
        if (v41)
        {
          v42 = std::__shared_weak_count::lock(v41);
          if (v42)
          {
            v43 = v42;
            v44 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
            do
              v46 = __ldxr(p_shared_weak_owners);
            while (__stxr(v46 + 1, p_shared_weak_owners));
            *(_QWORD *)&v77 = v44;
            *((_QWORD *)&v77 + 1) = v42;
            v47 = (unint64_t *)&v42->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          else
          {
            v77 = 0uLL;
          }
        }
        v49 = (char *)operator new(0x38uLL);
        *(_QWORD *)v49 = &off_24EC2F470;
        *(_OWORD *)(v49 + 8) = v77;
        v77 = 0uLL;
        *((_QWORD *)v49 + 3) = v13;
        *((_QWORD *)v49 + 4) = v9;
        v78 = 0;
        v79 = 0;
        *((_QWORD *)v49 + 5) = v71;
        *((_QWORD *)v49 + 6) = v72;
        v80[0] = 0;
        v80[1] = 0;
        v82 = (std::string *)v49;
        sub_2245022E4(*v40, (uint64_t)&v81);
        v50 = v82;
        if (v82 == &v81)
        {
          v51 = 4;
          v50 = &v81;
        }
        else
        {
          if (!v82)
            goto LABEL_51;
          v51 = 5;
        }
        (*(void (**)(void))(v50->__r_.__value_.__r.__words[0] + 8 * v51))();
LABEL_51:
        if (v76)
        {
          v52 = &v76->__shared_owners_;
          do
            v53 = __ldaxr((unint64_t *)v52);
          while (__stlxr(v53 - 1, (unint64_t *)v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        if (v73)
        {
          v54 = (unint64_t *)&v73->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        return;
      }
    }
    else
    {
      v15[5] = v26 + 1;
      v30 = (std::mutex **)v77;
      if (!(_QWORD)v77)
        goto LABEL_37;
    }
    std::mutex::unlock(*v30);
    MEMORY[0x227684CE8](v30, 0x20C4093837F09);
    goto LABEL_37;
  }
  v31 = (uint64_t **)a1[9];
  v68 = 0uLL;
  v32 = (std::__shared_weak_count *)a1[5];
  if (v32)
  {
    v33 = std::__shared_weak_count::lock(v32);
    if (v33)
    {
      v34 = v33;
      v35 = a1[4];
      v36 = (unint64_t *)&v33->__shared_weak_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      *(_QWORD *)&v68 = v35;
      *((_QWORD *)&v68 + 1) = v33;
      v38 = (unint64_t *)&v33->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v68 = 0uLL;
    }
  }
  v69 = *a2;
  *(_OWORD *)v70 = a2[1];
  *(_QWORD *)&v70[14] = *(_QWORD *)((char *)a2 + 30);
  v56 = operator new(0x20uLL);
  v56[1] = 0;
  v56[2] = 0;
  *v56 = &unk_24EC2F420;
  v56[3] = *a3;
  *a3 = 0;
  v57 = (char *)operator new(0x50uLL);
  *(_OWORD *)(v57 + 8) = v68;
  *(_OWORD *)(v57 + 24) = v69;
  *(_QWORD *)v57 = &off_24EC2F4F0;
  *(_OWORD *)(v57 + 40) = *(_OWORD *)v70;
  *((_QWORD *)v57 + 7) = *(_QWORD *)&v70[16];
  *((_QWORD *)v57 + 8) = v56 + 3;
  *((_QWORD *)v57 + 9) = v56;
  v79 = (__int128 *)v57;
  sub_2245022E4(*v31, (uint64_t)&v77);
  v59 = v79;
  if (v79 == &v77)
  {
    v60 = 4;
    v59 = &v77;
  }
  else
  {
    if (!v79)
      return;
    v60 = 5;
  }
  (*(void (**)(__int128 *, uint64_t))(*(_QWORD *)v59 + 8 * v60))(v59, v58);
}

