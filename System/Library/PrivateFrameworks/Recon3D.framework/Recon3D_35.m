_DWORD *sub_223F15F80(_DWORD *__dst, _DWORD *__src, int *a3)
{
  int *v3;
  _DWORD *v4;
  int v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;

  v3 = a3;
  v4 = __dst;
  v5 = __src[64];
  if (!v5)
  {
    __dst = memcpy(__dst, a3, 0x104uLL);
LABEL_24:
    v4[64] = -v4[64];
    return __dst;
  }
  v7 = a3[64];
  if (!v7)
    return memcpy(__dst, __src, 0x104uLL);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = -v5;
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = -v7;
  if (v5 > 0 == v7 > 0)
  {
    __dst = (_DWORD *)sub_223F160DC((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)v3, v9, 0);
  }
  else
  {
    v10 = __src;
    do
    {
      v11 = v9;
      v12 = v3;
      v9 = v8;
      v3 = v10;
      v10 = v12;
      v8 = v11;
    }
    while (v9 < v11);
    v13 = 0;
    v14 = 0;
    __dst[64] = v9;
    do
    {
      v15 = v14 + v3[v13] + v12[v13];
      __dst[v13] = v15;
      v14 = HIDWORD(v15);
      ++v13;
    }
    while (v11 != v13);
    v16 = v9 - v11;
    if (v9 > v11)
    {
      v17 = v11;
      v18 = &__dst[v11];
      v19 = (unsigned int *)&v3[v17];
      do
      {
        v20 = *v19++;
        v21 = v14 + v20;
        *v18++ = v21;
        v14 = HIDWORD(v21);
        --v16;
      }
      while (v16);
    }
    if (v14)
    {
      v22 = (int)__dst[64];
      if ((_DWORD)v22 != 64)
      {
        __dst[v22] = 1;
        ++__dst[64];
      }
    }
  }
  if ((__src[64] & 0x80000000) != 0)
    goto LABEL_24;
  return __dst;
}

uint64_t sub_223F160DC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  _DWORD *v21;
  int *v22;
  int v23;
  uint64_t v24;

  v6 = a3;
  v8 = result;
  if (a3 >= a5)
  {
    if (a3 != a5 || (a6 & 1) != 0)
    {
      v14 = (_DWORD *)(result + 256);
      *(_DWORD *)(result + 256) = a3 - 1;
      if (a5)
      {
LABEL_16:
        v16 = 0;
        v15 = 0;
        do
        {
          *(_DWORD *)(result + 4 * v16) = *(_DWORD *)(a2 + 4 * v16) - (v15 & 1) - *(_DWORD *)(a4 + 4 * v16);
          v17 = *(_DWORD *)(a2 + 4 * v16);
          v18 = *(_DWORD *)(a4 + 4 * v16);
          v15 &= v17 == v18;
          if (v17 < v18)
            v15 = 1;
          ++v16;
        }
        while (a5 != v16);
      }
      else
      {
        v15 = 0;
      }
      v19 = v6 > a5;
      v20 = v6 - a5;
      if (v19)
      {
        v21 = (_DWORD *)(result + 4 * a5);
        v22 = (int *)(a2 + 4 * a5);
        do
        {
          *v21++ = *v22 - (v15 & 1);
          v23 = *v22++;
          v15 &= v23 == 0;
          --v20;
        }
        while (v20);
      }
      v24 = *(int *)(result + 256);
      if (*(_DWORD *)(result + 4 * v24))
        *v14 = v24 + 1;
    }
    else
    {
      while (1)
      {
        v11 = v6 - 1;
        v12 = *(_DWORD *)(a2 - 4 + 4 * v6);
        v13 = *(_DWORD *)(a4 - 4 + 4 * v6);
        if (v12 < v13)
        {
          v9 = a4;
          v10 = v6;
          goto LABEL_3;
        }
        if (v12 > v13)
          break;
        --v6;
        if (!v11)
          goto LABEL_26;
      }
      if (v6)
      {
        v14 = (_DWORD *)(result + 256);
        *(_DWORD *)(result + 256) = v6 - 1;
        a5 = v6;
        goto LABEL_16;
      }
LABEL_26:
      *(_DWORD *)(result + 256) = 0;
    }
  }
  else
  {
    v9 = a4;
    v10 = a5;
LABEL_3:
    result = sub_223F160DC(result, v9, v10, a2, v6, 1);
    *(_DWORD *)(v8 + 256) = -*(_DWORD *)(v8 + 256);
  }
  return result;
}

_DWORD *sub_223F1625C(_DWORD *__dst, int *__src, int *a3)
{
  int *v3;
  _DWORD *v4;
  int v5;
  int *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;

  v3 = a3;
  v4 = __dst;
  v5 = __src[64];
  if (!v5)
  {
    __src = a3;
    return memcpy(__dst, __src, 0x104uLL);
  }
  v6 = __src;
  v7 = a3[64];
  if (!v7)
    return memcpy(__dst, __src, 0x104uLL);
  if (v5 >= 0)
    v8 = v5;
  else
    v8 = -v5;
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = -v7;
  if (v5 > 0 != v7 > 0)
  {
    __dst = (_DWORD *)sub_223F160DC((uint64_t)__dst, (uint64_t)__src, v8, (uint64_t)v3, v9, 0);
  }
  else
  {
    v10 = __src;
    do
    {
      v11 = v9;
      v12 = v3;
      v9 = v8;
      v3 = v10;
      v10 = v12;
      v8 = v11;
    }
    while (v9 < v11);
    v13 = 0;
    v14 = 0;
    __dst[64] = v9;
    do
    {
      v15 = v14 + v3[v13] + v12[v13];
      __dst[v13] = v15;
      v14 = HIDWORD(v15);
      ++v13;
    }
    while (v11 != v13);
    v16 = v9 - v11;
    if (v9 > v11)
    {
      v17 = v11;
      v18 = &__dst[v11];
      v19 = (unsigned int *)&v3[v17];
      do
      {
        v20 = *v19++;
        v21 = v14 + v20;
        *v18++ = v21;
        v14 = HIDWORD(v21);
        --v16;
      }
      while (v16);
    }
    if (v14)
    {
      v22 = (int)__dst[64];
      if ((_DWORD)v22 != 64)
      {
        __dst[v22] = 1;
        ++__dst[64];
      }
    }
  }
  if (v6[64] < 0)
    v4[64] = -v4[64];
  return __dst;
}

void sub_223F163BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int *v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unsigned int *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unsigned int *v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  int *v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  int *v252;
  unint64_t v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  int *v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  int *v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  _DWORD *v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unsigned int *v295;
  unint64_t v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unsigned int *v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  int v333;
  unint64_t v334;
  int v335;
  double v336;
  long double v337;
  double v338;
  _DWORD *v339;
  long double v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  _DWORD *v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unsigned int *v352;
  unint64_t v353;
  int v354;
  unint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  int v359;
  _DWORD *v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unint64_t v365;
  int *v366;
  unint64_t v367;
  int v368;
  unint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  _DWORD *v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unsigned int *v381;
  unint64_t v382;
  int v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  int v389;
  _OWORD *v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  int *v396;
  unint64_t v397;
  int v398;
  double v399;
  double v400;
  double v401;
  double v402;
  uint64_t v403;
  int v404;
  int v405;
  int v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  _DWORD *v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unsigned int *v419;
  unint64_t v420;
  int v421;
  int v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  _DWORD *v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unsigned int *v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unint64_t v440;
  int v441;
  _DWORD *v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  int *v448;
  unint64_t v449;
  int v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  int v456;
  _OWORD *v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unsigned int *v463;
  unint64_t v464;
  int v465;
  double v466;
  double v467;
  double v468;
  double v469;
  uint64_t v470;
  int v471;
  int v472;
  int v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  int v479;
  _DWORD *v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  int *v486;
  unint64_t v487;
  int v488;
  int v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  unint64_t v493;
  unint64_t v494;
  int v495;
  _DWORD *v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unsigned int *v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  int v524;
  int v525;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  int v531;
  int *v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  unint64_t v537;
  unsigned int *v538;
  unint64_t v539;
  int v540;
  double v541;
  double v542;
  double v543;
  double v544;
  uint64_t v545;
  int v546;
  long double v547;
  unint64_t v548;
  unint64_t v549;
  double v550;
  double v551;
  double v552;
  int v553;
  uint64_t v554;
  int v555;
  double v556;
  _DWORD *v557;
  int v558;
  unint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  int v563;
  _OWORD *v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unsigned int *v570;
  unint64_t v571;
  int v572;
  int v573;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  _DWORD *v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  unsigned int *v586;
  unint64_t v587;
  int v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t v592;
  int v593;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  unint64_t v597;
  unint64_t v598;
  int v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  int v605;
  _OWORD *v606;
  int v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  unsigned int *v612;
  unint64_t v613;
  int v614;
  int v615;
  unint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  _QWORD *v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unsigned int *v628;
  unint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unint64_t v632;
  unint64_t v633;
  int v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  unint64_t v639;
  int v640;
  int v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  int v647;
  _OWORD *v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  unint64_t v653;
  unsigned int *v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  unint64_t v659;
  uint64_t v660;
  int v661;
  double v662;
  double v663;
  double v664;
  double v665;
  double v666;
  double v667;
  uint64_t v668;
  int v669;
  double v670;
  _DWORD *v671;
  uint64_t v672;
  int v673;
  double v674;
  long double v675;
  _DWORD *v676;
  long double v677;
  unsigned int *v678;
  long double v679;
  uint64_t v680;
  int v681;
  long double v682;
  int v683;
  _DWORD *v684;
  int v685;
  int *v686;
  int v687;
  int v688;
  uint64_t v689;
  int v690;
  uint64_t v691;
  int *v692;
  int v693;
  int v694;
  _DWORD v695[64];
  int v696;
  int v697[64];
  int v698;
  int v699[64];
  int v700;
  int v701[64];
  int v702;
  int v703[65];
  _DWORD __src[65];
  _DWORD v705[64];
  int v706;
  int v707[64];
  int v708;
  int v709[64];
  int v710;
  _DWORD __dst[65];
  _OWORD v712[16];
  int v713;
  _QWORD v714[32];
  int v715;
  _QWORD v716[32];
  int v717;
  _OWORD v718[16];
  int v719;
  _OWORD v720[16];
  int v721;
  _DWORD v722[65];
  _DWORD v723[64];
  int v724;
  _DWORD v725[64];
  int v726;
  int v727[65];
  _DWORD v728[65];
  int v729[64];
  int v730;
  _BYTE v731[260];
  unsigned int v732[65];
  _BYTE v733[260];
  _DWORD v734[65];
  __int128 v735;
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  __int128 v745;
  __int128 v746;
  __int128 v747;
  __int128 v748;
  __int128 v749;
  __int128 v750;
  int v751;
  uint64_t v752;

  v9 = MEMORY[0x24BDAC7A8]();
  v13 = v12;
  v687 = v14;
  v16 = v15;
  v685 = v17;
  v18 = v11;
  v20 = v19;
  v684 = (_DWORD *)v9;
  v752 = *MEMORY[0x24BDAC8D0];
  v21 = v11[3];
  v22 = v11[1];
  v23 = v21 - v22;
  if (v21 <= v22)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      v25 = 0;
      v24 = 0;
      v693 = 1;
      v726 = 0;
      v31 = *v11;
      v32 = v11[2];
      v28 = v31 - v32;
      v691 = v23;
      if (v31 > v32)
        goto LABEL_4;
      goto LABEL_9;
    }
    v25 = v22 - v21;
    v24 = -1;
  }
  else
  {
    v24 = 1;
    v25 = v21 - v22;
  }
  v693 = 0;
  v725[0] = v25;
  v725[1] = 0;
  v726 = v24;
  v26 = *v11;
  v27 = v11[2];
  v28 = v26 - v27;
  v691 = v23;
  if (v26 > v27)
  {
LABEL_4:
    v29 = 1;
    LODWORD(v30) = v28;
    goto LABEL_5;
  }
LABEL_9:
  if ((v28 & 0x8000000000000000) == 0)
  {
    LODWORD(v30) = 0;
    v29 = 0;
    v694 = 1;
    v724 = 0;
    v692 = v10;
    if (v693)
      goto LABEL_6;
    goto LABEL_11;
  }
  v30 = -v28;
  v29 = -1;
LABEL_5:
  v694 = 0;
  v723[0] = v30;
  v723[1] = 0;
  v724 = v29;
  v692 = v10;
  if (v693)
  {
LABEL_6:
    v732[64] = 0;
    goto LABEL_28;
  }
LABEL_11:
  v33 = 0;
  v34 = 0;
  if (v24 >= 0)
    v35 = v24;
  else
    v35 = -v24;
  v36 = v35 - 1 + v35;
  if (v36 >= 0x40)
    LODWORD(v36) = 64;
  v732[64] = v36;
  do
  {
    v37 = 0;
    v38 = 0;
    if (v33 >= v35 - 1)
      v39 = v35 - 1;
    else
      v39 = v33;
    v40 = ~v39;
    v41 = v725;
    do
    {
      if (v33 + v37 < v35)
      {
        v42 = v25 * *v41;
        v34 += v42;
        v38 += HIDWORD(v42);
      }
      --v37;
      ++v41;
    }
    while (v40 != v37);
    v732[v33] = v34;
    v34 = v38 + HIDWORD(v34);
    ++v33;
  }
  while (v33 < (int)v732[64]);
  if (v34 && v732[64] != 64)
    v732[v732[64]++] = v34;
LABEL_28:
  if (v694)
  {
    v727[64] = 0;
  }
  else
  {
    v43 = 0;
    v44 = 0;
    if (v29 >= 0)
      v45 = v29;
    else
      v45 = -v29;
    v46 = v45 - 1 + v45;
    if (v46 >= 0x40)
      LODWORD(v46) = 64;
    v727[64] = v46;
    do
    {
      v47 = 0;
      v48 = 0;
      if (v43 >= v45 - 1)
        v49 = v45 - 1;
      else
        v49 = v43;
      v50 = ~v49;
      v51 = v723;
      do
      {
        if (v43 + v47 < v45)
        {
          v52 = v30 * (unint64_t)*v51;
          v44 += v52;
          v48 += HIDWORD(v52);
        }
        --v47;
        ++v51;
      }
      while (v50 != v47);
      v727[v43] = v44;
      v44 = v48 + HIDWORD(v44);
      ++v43;
    }
    while (v43 < v727[64]);
    if (v44 && v727[64] != 64)
      v727[v727[64]++] = v44;
  }
  sub_223F1625C(v722, (int *)v732, v727);
  v53 = v20[1];
  v54 = v692[1];
  v55 = v53 - v54;
  v688 = v13;
  if (v53 > v54)
  {
    v56 = 1;
    v57 = v53 - v54;
LABEL_49:
    v58 = 0;
    *(_QWORD *)&v720[0] = v57;
    goto LABEL_52;
  }
  if (v55 < 0)
  {
    v57 = v54 - v53;
    v56 = -1;
    goto LABEL_49;
  }
  v57 = 0;
  v56 = 0;
  v58 = 1;
LABEL_52:
  v721 = v56;
  v59 = *v692;
  v60 = *v20;
  v61 = v59 - v60;
  v689 = v16;
  v686 = v20;
  if (v59 > v60)
  {
    v62 = 1;
    v63 = v59 - v60;
    goto LABEL_54;
  }
  if (v61 < 0)
  {
    v63 = v60 - v59;
    v62 = -1;
LABEL_54:
    v64 = 0;
    *(_QWORD *)&v718[0] = v63;
    v719 = v62;
    v65 = v60 + v59;
    if (v65 >= 1)
      goto LABEL_55;
    goto LABEL_60;
  }
  v63 = 0;
  v62 = 0;
  v64 = 1;
  v719 = 0;
  v65 = v60 + v59;
  if (v65 >= 1)
  {
LABEL_55:
    v716[0] = v65;
    v66 = 1;
    v717 = 1;
    v67 = v54 + v53;
    if (v67 >= 1)
      goto LABEL_56;
LABEL_62:
    if (v67 < 0)
    {
      v714[0] = -v67;
      if ((unint64_t)-v67 >> 32)
        v141 = -2;
      else
        v141 = -1;
      v715 = v141;
      v690 = v56;
      if ((v693 | v58) == 1)
        goto LABEL_57;
    }
    else
    {
      v715 = 0;
      v690 = v56;
      if ((v693 | v58) == 1)
        goto LABEL_57;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v65 < 0)
  {
    v716[0] = -v65;
    if ((unint64_t)-v65 >> 32)
      v66 = -2;
    else
      v66 = -1;
    v717 = v66;
    v67 = v54 + v53;
    if (v67 < 1)
      goto LABEL_62;
  }
  else
  {
    v66 = 0;
    v717 = 0;
    v67 = v54 + v53;
    if (v67 < 1)
      goto LABEL_62;
  }
LABEL_56:
  v714[0] = v67;
  v715 = 1;
  v690 = v56;
  if ((v693 | v58) == 1)
  {
LABEL_57:
    v732[64] = 0;
    goto LABEL_86;
  }
LABEL_64:
  v68 = 0;
  v69 = 0;
  if (v24 >= 0)
    v70 = v24;
  else
    v70 = -v24;
  if (v56 >= 0)
    v71 = v56;
  else
    v71 = -v56;
  v72 = v70 - 1;
  v73 = v72 + v71;
  if (v72 + v71 >= 0x40)
    v73 = 64;
  v732[64] = v73;
  do
  {
    v75 = 0;
    v76 = 0;
    if (v68 >= v72)
      v77 = v72;
    else
      v77 = v68;
    v78 = ~v77;
    v79 = v725;
    do
    {
      if (v68 + v75 < v71)
      {
        v80 = v57 * *v79;
        v69 += v80;
        v76 += HIDWORD(v80);
      }
      --v75;
      ++v79;
    }
    while (v78 != v75);
    v732[v68] = v69;
    v69 = v76 + HIDWORD(v69);
    ++v68;
    v74 = v732[64];
  }
  while (v68 < (int)v732[64]);
  if (v69 && v732[64] != 64)
  {
    v732[v732[64]] = v69;
    v74 = ++v732[64];
  }
  if (v691 > 0 != v55 > 0)
    v732[64] = -v74;
LABEL_86:
  v683 = v66;
  if ((v694 | v64) == 1)
  {
    v727[64] = 0;
  }
  else
  {
    v81 = 0;
    v82 = 0;
    if (v29 >= 0)
      v83 = v29;
    else
      v83 = -v29;
    if (v62 >= 0)
      v84 = v62;
    else
      v84 = -v62;
    v85 = v83 - 1;
    v86 = v85 + v84;
    if (v85 + v84 >= 0x40)
      v86 = 64;
    v727[64] = v86;
    do
    {
      v88 = 0;
      v89 = 0;
      if (v81 >= v85)
        v90 = v85;
      else
        v90 = v81;
      v91 = ~v90;
      v92 = v723;
      do
      {
        if (v81 + v88 < v84)
        {
          v93 = v63 * (unint64_t)*v92;
          v82 += v93;
          v89 += HIDWORD(v93);
        }
        --v88;
        ++v92;
      }
      while (v91 != v88);
      v727[v81] = v82;
      v82 = v89 + HIDWORD(v82);
      ++v81;
      v87 = v727[64];
    }
    while (v81 < v727[64]);
    if (v82 && v727[64] != 64)
    {
      v727[v727[64]] = v82;
      v87 = ++v727[64];
    }
    if (v28 > 0 != v61 > 0)
      v727[64] = -v87;
  }
  sub_223F1625C(v712, (int *)v732, v727);
  if ((v694 | v58) == 1)
  {
    v732[64] = 0;
    v94 = v687;
    goto LABEL_134;
  }
  v95 = 0;
  v96 = 0;
  if (v690 >= 0)
    v97 = v690;
  else
    v97 = -v690;
  if (v29 >= 0)
    v98 = v29;
  else
    v98 = -v29;
  v99 = v97 - 1;
  v100 = v99 + v98;
  if (v99 + v98 >= 0x40)
    v100 = 64;
  v732[64] = v100;
  v101 = v723[0];
  do
  {
    v103 = 0;
    v104 = 0;
    if (v95 >= v99)
      v105 = v99;
    else
      v105 = v95;
    v106 = ~v105;
    v107 = (unsigned int *)v720;
    do
    {
      if (v95 + v103 < v98)
      {
        v108 = v101 * (unint64_t)*v107;
        v96 += v108;
        v104 += HIDWORD(v108);
      }
      --v103;
      ++v107;
    }
    while (v106 != v103);
    v732[v95] = v96;
    v96 = v104 + HIDWORD(v96);
    ++v95;
    v102 = v732[64];
  }
  while (v95 < (int)v732[64]);
  if (v96)
  {
    v94 = v687;
    if (v732[64] != 64)
    {
      v732[v732[64]] = v96;
      v102 = ++v732[64];
    }
    if (v28 > 0 != v55 > 0)
      goto LABEL_133;
  }
  else
  {
    v94 = v687;
    if (v28 > 0 != v55 > 0)
LABEL_133:
      v732[64] = -v102;
  }
LABEL_134:
  if ((v693 | v64) == 1)
  {
    v727[64] = 0;
    v109 = v689;
    v110 = v28;
    v111 = v29;
    v112 = v686;
    v113 = v691;
    goto LABEL_158;
  }
  v114 = 0;
  v115 = 0;
  if (v62 >= 0)
    v116 = v62;
  else
    v116 = -v62;
  if (v24 >= 0)
    v117 = v24;
  else
    v117 = -v24;
  v118 = v116 - 1;
  v119 = v118 + v117;
  if (v118 + v117 >= 0x40)
    v119 = 64;
  v727[64] = v119;
  v120 = v725[0];
  v110 = v28;
  v111 = v29;
  v112 = v686;
  v113 = v691;
  do
  {
    v122 = 0;
    v123 = 0;
    if (v114 >= v118)
      v124 = v118;
    else
      v124 = v114;
    v125 = ~v124;
    v126 = (unsigned int *)v718;
    do
    {
      if (v114 + v122 < v117)
      {
        v127 = v120 * (unint64_t)*v126;
        v115 += v127;
        v123 += HIDWORD(v127);
      }
      --v122;
      ++v126;
    }
    while (v125 != v122);
    v727[v114] = v115;
    v115 = v123 + HIDWORD(v115);
    ++v114;
    v121 = v727[64];
  }
  while (v114 < v727[64]);
  if (v115)
  {
    v109 = v689;
    if (v727[64] != 64)
    {
      v727[v727[64]] = v115;
      v121 = ++v727[64];
    }
    if (v691 > 0 != v61 > 0)
      goto LABEL_157;
  }
  else
  {
    v109 = v689;
    if (v691 > 0 != v61 > 0)
LABEL_157:
      v727[64] = -v121;
  }
LABEL_158:
  sub_223F15F80(__dst, v732, v727);
  v128 = v18[3];
  v129 = v692[1];
  v130 = v128 <= v129;
  v131 = v128 - v129;
  if (v130)
  {
    if (v131 < 0)
    {
      v55 = -v131;
      LODWORD(v132) = -1;
      v133 = 0;
      v142 = *v692;
      v143 = v18[2];
      v130 = v142 <= v143;
      v136 = v142 - v143;
      if (v130)
        goto LABEL_165;
    }
    else
    {
      LODWORD(v132) = 0;
      v133 = 1;
      v139 = *v692;
      v140 = v18[2];
      v130 = v139 <= v140;
      v136 = v139 - v140;
      if (v130)
        goto LABEL_165;
    }
LABEL_160:
    LODWORD(v137) = 1;
    v138 = v136;
    if ((v693 & 1) != 0)
    {
LABEL_161:
      v24 = 0;
      goto LABEL_166;
    }
LABEL_186:
    v144 = 0;
    v145 = 0;
    if (v24 >= 0)
      v146 = v24;
    else
      v146 = -v24;
    if ((v137 & 0x80000000) == 0)
      v137 = v137;
    else
      v137 = -(int)v137;
    v147 = v146 - 1;
    v148 = v147 + v137;
    if (v147 + v137 >= 0x40)
      v148 = 64;
    v732[64] = v148;
    do
    {
      v150 = 0;
      v151 = 0;
      if (v144 >= v147)
        v152 = v147;
      else
        v152 = v144;
      v153 = ~v152;
      v154 = v725;
      do
      {
        if (v144 + v150 < v137)
        {
          v155 = v138 * *v154;
          v145 += v155;
          v151 += HIDWORD(v155);
        }
        --v150;
        ++v154;
      }
      while (v153 != v150);
      v732[v144] = v145;
      v145 = v151 + HIDWORD(v145);
      ++v144;
      v149 = v732[64];
    }
    while (v144 < (int)v732[64]);
    if (v145 && v732[64] != 64)
    {
      v732[v732[64]] = v145;
      v149 = ++v732[64];
    }
    if (v113 > 0 == v136 > 0)
    {
      LOBYTE(v693) = 0;
      if ((v694 | v133) == 1)
        goto LABEL_167;
    }
    else
    {
      LOBYTE(v693) = 0;
      v732[64] = -v149;
      if ((v694 | v133) == 1)
        goto LABEL_167;
    }
    goto LABEL_210;
  }
  LODWORD(v132) = 1;
  LODWORD(v55) = v131;
  v133 = 0;
  v134 = *v692;
  v135 = v18[2];
  v130 = v134 <= v135;
  v136 = v134 - v135;
  if (!v130)
    goto LABEL_160;
LABEL_165:
  if (v136 < 0)
  {
    v138 = -v136;
    LODWORD(v137) = -1;
    if ((v693 & 1) != 0)
      goto LABEL_161;
    goto LABEL_186;
  }
LABEL_166:
  v732[64] = 0;
  if ((v694 | v133) == 1)
  {
LABEL_167:
    v727[64] = 0;
    goto LABEL_232;
  }
LABEL_210:
  v156 = 0;
  v157 = 0;
  if (v111 >= 0)
    v158 = v111;
  else
    v158 = -v111;
  if ((v132 & 0x80000000) == 0)
    v132 = v132;
  else
    v132 = -(int)v132;
  v159 = v158 - 1;
  v160 = v159 + v132;
  if (v159 + v132 >= 0x40)
    v160 = 64;
  v727[64] = v160;
  do
  {
    v162 = 0;
    v163 = 0;
    if (v156 >= v159)
      v164 = v159;
    else
      v164 = v156;
    v165 = ~v164;
    v166 = v723;
    do
    {
      if (v156 + v162 < v132)
      {
        v167 = *v166 * (unint64_t)v55;
        v157 += v167;
        v163 += HIDWORD(v167);
      }
      --v162;
      ++v166;
    }
    while (v165 != v162);
    v727[v156] = v157;
    v157 = v163 + HIDWORD(v157);
    ++v156;
    v161 = v727[64];
  }
  while (v156 < v727[64]);
  if (v157 && v727[64] != 64)
  {
    v727[v727[64]] = v157;
    v161 = ++v727[64];
  }
  if (v110 > 0 != v131 > 0)
    v727[64] = -v161;
LABEL_232:
  sub_223F15F80(v709, v732, v727);
  v168 = v18[3];
  v169 = v112[1];
  v130 = v168 <= v169;
  v170 = v168 - v169;
  if (!v130)
  {
    LODWORD(v171) = 1;
    LODWORD(v55) = v170;
    v172 = 0;
    v173 = *v112;
    v174 = v18[2];
    v130 = v173 <= v174;
    v175 = v173 - v174;
    if (!v130)
      goto LABEL_234;
LABEL_262:
    if (v175 < 0)
    {
      v177 = -v175;
      LODWORD(v176) = -1;
      if ((v693 & 1) == 0)
        goto LABEL_235;
    }
    goto LABEL_264;
  }
  if (v170 < 0)
  {
    v55 = -v170;
    LODWORD(v171) = -1;
    v172 = 0;
    v279 = *v112;
    v280 = v18[2];
    v130 = v279 <= v280;
    v175 = v279 - v280;
    if (v130)
      goto LABEL_262;
  }
  else
  {
    LODWORD(v171) = 0;
    v172 = 1;
    v190 = *v112;
    v191 = v18[2];
    v130 = v190 <= v191;
    v175 = v190 - v191;
    if (v130)
      goto LABEL_262;
  }
LABEL_234:
  LODWORD(v176) = 1;
  v177 = v175;
  if ((v693 & 1) == 0)
  {
LABEL_235:
    v178 = 0;
    v179 = 0;
    if (v24 >= 0)
      v180 = v24;
    else
      v180 = -v24;
    if ((v176 & 0x80000000) == 0)
      v176 = v176;
    else
      v176 = -(int)v176;
    v181 = v180 - 1;
    v182 = v181 + v176;
    if (v181 + v176 >= 0x40)
      v182 = 64;
    v732[64] = v182;
    do
    {
      v184 = 0;
      v185 = 0;
      if (v178 >= v181)
        v186 = v181;
      else
        v186 = v178;
      v187 = ~v186;
      v188 = v725;
      do
      {
        if (v178 + v184 < v176)
        {
          v189 = v177 * *v188;
          v179 += v189;
          v185 += HIDWORD(v189);
        }
        --v184;
        ++v188;
      }
      while (v187 != v184);
      v732[v178] = v179;
      v179 = v185 + HIDWORD(v179);
      ++v178;
      v183 = v732[64];
    }
    while (v178 < (int)v732[64]);
    if (v179 && v732[64] != 64)
    {
      v732[v732[64]] = v179;
      v183 = ++v732[64];
    }
    if (v24 > 0 != v175 > 0)
      v732[64] = -v183;
    if ((v694 | v172) == 1)
      goto LABEL_258;
    goto LABEL_265;
  }
LABEL_264:
  v732[64] = 0;
  if ((v694 | v172) == 1)
  {
LABEL_258:
    v727[64] = 0;
    goto LABEL_287;
  }
LABEL_265:
  v192 = 0;
  v193 = 0;
  if (v111 >= 0)
    v194 = v111;
  else
    v194 = -v111;
  if ((v171 & 0x80000000) == 0)
    v171 = v171;
  else
    v171 = -(int)v171;
  v195 = v194 - 1;
  v196 = v195 + v171;
  if (v195 + v171 >= 0x40)
    v196 = 64;
  v727[64] = v196;
  do
  {
    v198 = 0;
    v199 = 0;
    if (v192 >= v195)
      v200 = v195;
    else
      v200 = v192;
    v201 = ~v200;
    v202 = v723;
    do
    {
      if (v192 + v198 < v171)
      {
        v203 = *v202 * (unint64_t)v55;
        v193 += v203;
        v199 += HIDWORD(v203);
      }
      --v198;
      ++v202;
    }
    while (v201 != v198);
    v727[v192] = v193;
    v193 = v199 + HIDWORD(v193);
    ++v192;
    v197 = v727[64];
  }
  while (v192 < v727[64]);
  if (v193 && v727[64] != 64)
  {
    v727[v727[64]] = v193;
    v197 = ++v727[64];
  }
  if (v110 > 0 != v170 > 0)
    v727[64] = -v197;
LABEL_287:
  sub_223F15F80(v707, v732, v727);
  sub_223F1625C(v705, v709, v707);
  LODWORD(v204) = __dst[64];
  if (__dst[64])
  {
    if (v713)
    {
      v205 = 0;
      v206 = 0;
      if (v713 >= 0)
        v207 = v713;
      else
        v207 = -v713;
      v208 = v207 - 1 + v207;
      if (v208 >= 0x40)
        LODWORD(v208) = 64;
      v702 = v208;
      do
      {
        v209 = 0;
        v210 = 0;
        if (v205 >= v207 - 1)
          v211 = v207 - 1;
        else
          v211 = v205;
        v212 = v211 + 1;
        v213 = v205;
        do
        {
          if (v213 < v207)
          {
            v214 = *((unsigned int *)v712 + v213) * (unint64_t)*((unsigned int *)v712 + v209);
            v206 += v214;
            v210 += HIDWORD(v214);
          }
          ++v209;
          --v213;
        }
        while (v212 != v209);
        v701[v205] = v206;
        v206 = v210 + HIDWORD(v206);
        ++v205;
      }
      while (v205 < v702);
      if (v206 && v702 != 64)
        v701[v702++] = v206;
    }
    else
    {
      v702 = 0;
    }
    v225 = 0;
    v226 = 0;
    if ((v204 & 0x80000000) == 0)
      v204 = v204;
    else
      v204 = -(int)v204;
    v227 = v204 - 1 + v204;
    if (v227 >= 0x40)
      LODWORD(v227) = 64;
    v700 = v227;
    do
    {
      v228 = 0;
      v229 = 0;
      if (v225 >= v204 - 1)
        v230 = v204 - 1;
      else
        v230 = v225;
      v231 = v230 + 1;
      v232 = v225;
      do
      {
        if (v232 < v204)
        {
          v233 = __dst[v232] * (unint64_t)__dst[v228];
          v226 += v233;
          v229 += HIDWORD(v233);
        }
        ++v228;
        --v232;
      }
      while (v231 != v228);
      v699[v225] = v226;
      v226 = v229 + HIDWORD(v226);
      ++v225;
    }
    while (v225 < v700);
    if (v226 && v700 != 64)
      v699[v700++] = v226;
    sub_223F1625C(v703, v701, v699);
    v238 = v703[64];
    if (!v703[64])
      goto LABEL_502;
    v239 = v710;
    if (!v710)
      goto LABEL_502;
    v240 = 0;
    v241 = 0;
    if (v703[64] >= 0)
      v242 = v703[64];
    else
      v242 = -v703[64];
    if (v710 >= 0)
      v243 = v710;
    else
      v243 = -v710;
    v244 = v242 - 1;
    v245 = v242 - 1 + v243;
    if (v245 >= 0x40)
      LODWORD(v245) = 64;
    v727[64] = v245;
    v246 = v709;
    do
    {
      v248 = 0;
      v249 = 0;
      if (v240 >= v244)
        v250 = v244;
      else
        v250 = v240;
      v251 = ~v250;
      v252 = v703;
      do
      {
        if (v240 + v248 < v243)
        {
          v253 = v246[v248] * (unint64_t)*v252;
          v241 += v253;
          v249 += HIDWORD(v253);
        }
        --v248;
        ++v252;
      }
      while (v251 != v248);
      v727[v240] = v241;
      v241 = v249 + HIDWORD(v241);
      ++v240;
      v247 = v727[64];
      ++v246;
    }
    while (v240 < v727[64]);
    if (v241 && v727[64] != 64)
    {
      v727[v727[64]] = v241;
      v247 = ++v727[64];
    }
    if (v238 > 0 != v239 > 0)
    {
      v247 = -v247;
      v727[64] = v247;
    }
    if (!v247)
      goto LABEL_502;
    v254 = v708;
    if (!v708)
      goto LABEL_502;
    v255 = 0;
    v256 = 0;
    if (v247 >= 0)
      v257 = v247;
    else
      v257 = -v247;
    if (v708 >= 0)
      v258 = v708;
    else
      v258 = -v708;
    v259 = v257 - 1;
    v260 = v257 - 1 + v258;
    if (v260 >= 0x40)
      LODWORD(v260) = 64;
    v732[64] = v260;
    v261 = v707;
    do
    {
      v263 = 0;
      v264 = 0;
      if (v255 >= v259)
        v265 = v259;
      else
        v265 = v255;
      v266 = ~v265;
      v267 = v727;
      do
      {
        if (v255 + v263 < v258)
        {
          v268 = v261[v263] * (unint64_t)*v267;
          v256 += v268;
          v264 += HIDWORD(v268);
        }
        --v263;
        ++v267;
      }
      while (v266 != v263);
      v732[v255] = v256;
      v256 = v264 + HIDWORD(v256);
      ++v255;
      v262 = v732[64];
      ++v261;
    }
    while (v255 < (int)v732[64]);
    if (v256 && v732[64] != 64)
    {
      v732[v732[64]] = v256;
      v262 = ++v732[64];
    }
    if (v247 > 0 != v254 > 0)
    {
      v262 = -v262;
      v732[64] = v262;
    }
    if (v262)
    {
      v323 = 0;
      v324 = 0;
      if (v262 >= 0)
        v325 = v262;
      else
        v325 = -v262;
      v326 = v325 - 1;
      if (v325 >= 0x40)
        LODWORD(v325) = 64;
      __src[64] = v325;
      do
      {
        v328 = 0;
        v329 = 0;
        if (v323 >= v326)
          v330 = v326;
        else
          v330 = v323;
        v331 = v330 + 1;
        do
        {
          if (v323 == v328)
          {
            v332 = v732[v323];
            v324 += (4 * v332);
            v329 += v332 >> 30;
          }
          ++v328;
        }
        while (v331 != v328);
        __src[v323] = v324;
        v324 = v329 + HIDWORD(v324);
        ++v323;
        v327 = __src[64];
      }
      while (v323 < __src[64]);
      if (v324 && __src[64] != 64)
      {
        __src[__src[64]] = v324;
        v327 = ++__src[64];
      }
      if (v262 <= 0)
        __src[64] = -v327;
    }
    else
    {
LABEL_502:
      __src[64] = 0;
    }
    v333 = __dst[64];
    if (__dst[64] >= 0)
      v334 = __dst[64];
    else
      v334 = -__dst[64];
    if ((_DWORD)v334)
    {
      if (v334 == 1)
      {
        v335 = 0;
        LODWORD(v234) = __dst[0];
        v336 = (double)v234;
      }
      else if (v334 == 2)
      {
        v335 = 0;
        LODWORD(v234) = __dst[1];
        LODWORD(v235) = __dst[0];
        v336 = (double)v234 * 4294967300.0 + (double)v235;
      }
      else
      {
        v339 = &__dst[v334];
        LODWORD(v236) = *(v339 - 2);
        LODWORD(v234) = *(v339 - 1);
        LODWORD(v237) = *(v339 - 3);
        v336 = ((double)v234 * 4294967300.0 + (double)v236) * 4294967300.0 + (double)v237;
        v335 = 32 * v334 - 96;
      }
      if (__dst[64] < 0)
        v336 = -v336;
      v340 = ldexp(v336, v335);
      v338 = 1.0 / v340 * (1.0 / v340);
      if ((v94 & 1) != 0)
        goto LABEL_518;
    }
    else
    {
      v337 = ldexp(0.0, 0);
      v338 = 1.0 / v337 * (1.0 / v337);
      if ((v94 & 1) != 0)
        goto LABEL_518;
    }
    if (!a9)
      goto LABEL_616;
LABEL_518:
    if (v683 && v333)
    {
      v341 = 0;
      v342 = 0;
      if (v683 >= 0)
        v343 = v683;
      else
        v343 = -v683;
      v344 = v343 - 1;
      v345 = v343 - 1 + v334;
      if (v345 >= 0x40)
        LODWORD(v345) = 64;
      v702 = v345;
      v346 = __dst;
      do
      {
        v348 = 0;
        v349 = 0;
        if (v341 >= v344)
          v350 = v344;
        else
          v350 = v341;
        v351 = ~v350;
        v352 = (unsigned int *)v716;
        do
        {
          if (v341 + v348 < v334)
          {
            v353 = v346[v348] * (unint64_t)*v352;
            v342 += v353;
            v349 += HIDWORD(v353);
          }
          --v348;
          ++v352;
        }
        while (v351 != v348);
        v701[v341] = v342;
        v342 = v349 + HIDWORD(v342);
        ++v341;
        v347 = v702;
        ++v346;
      }
      while (v341 < v702);
      if (v342 && v702 != 64)
      {
        v701[v702] = v342;
        v347 = ++v702;
      }
      if (v333 > 0 != v683 > 0)
      {
        v347 = -v347;
        v702 = v347;
      }
      if (v347)
      {
        v355 = 0;
        v356 = 0;
        if (v347 >= 0)
          v357 = v347;
        else
          v357 = -v347;
        v358 = v357 - 1;
        v359 = v358 + v334;
        if (v358 + v334 >= 0x40)
          v359 = 64;
        v703[64] = v359;
        v360 = __dst;
        do
        {
          v362 = 0;
          v363 = 0;
          if (v355 >= v358)
            v364 = v358;
          else
            v364 = v355;
          v365 = ~v364;
          v366 = v701;
          do
          {
            if (v355 + v362 < v334)
            {
              v367 = v360[v362] * (unint64_t)*v366;
              v356 += v367;
              v363 += HIDWORD(v367);
            }
            --v362;
            ++v366;
          }
          while (v365 != v362);
          v703[v355] = v356;
          v356 = v363 + HIDWORD(v356);
          ++v355;
          v361 = v703[64];
          ++v360;
        }
        while (v355 < v703[64]);
        if (v356 && v703[64] != 64)
        {
          v703[v703[64]] = v356;
          v361 = ++v703[64];
        }
        if (v333 > 0 != v347 > 0)
          v703[64] = -v361;
        v354 = v713;
        if (!v713)
          goto LABEL_611;
      }
      else
      {
        v703[64] = 0;
        v354 = v713;
        if (!v713)
          goto LABEL_611;
      }
    }
    else
    {
      v702 = 0;
      v703[64] = 0;
      v354 = v713;
      if (!v713)
        goto LABEL_611;
    }
    v368 = v706;
    if (v706)
    {
      v369 = 0;
      v370 = 0;
      if (v354 >= 0)
        v371 = v354;
      else
        v371 = -v354;
      if (v706 >= 0)
        v372 = v706;
      else
        v372 = -v706;
      v373 = v371 - 1;
      v374 = v371 - 1 + v372;
      if (v374 >= 0x40)
        LODWORD(v374) = 64;
      v698 = v374;
      v375 = v705;
      do
      {
        v377 = 0;
        v378 = 0;
        if (v369 >= v373)
          v379 = v373;
        else
          v379 = v369;
        v380 = ~v379;
        v381 = (unsigned int *)v712;
        do
        {
          if (v369 + v377 < v372)
          {
            v382 = v375[v377] * (unint64_t)*v381;
            v370 += v382;
            v378 += HIDWORD(v382);
          }
          --v377;
          ++v381;
        }
        while (v380 != v377);
        v697[v369] = v370;
        v370 = v378 + HIDWORD(v370);
        ++v369;
        v376 = v698;
        ++v375;
      }
      while (v369 < v698);
      if (v370 && v698 != 64)
      {
        v697[v698] = v370;
        v376 = ++v698;
      }
      if (v354 > 0 != v368 > 0)
      {
        v376 = -v376;
        v698 = v376;
      }
      if (v376)
      {
        v383 = v721;
        if (v721)
        {
          v384 = 0;
          v385 = 0;
          if (v376 >= 0)
            v386 = v376;
          else
            v386 = -v376;
          if (v721 >= 0)
            v387 = v721;
          else
            v387 = -v721;
          v388 = v386 - 1;
          v389 = v388 + v387;
          if (v388 + v387 >= 0x40)
            v389 = 64;
          v700 = v389;
          v390 = v720;
          do
          {
            v392 = 0;
            v393 = 0;
            if (v384 >= v388)
              v394 = v388;
            else
              v394 = v384;
            v395 = ~v394;
            v396 = v697;
            do
            {
              if (v384 + v392 < v387)
              {
                v397 = *((unsigned int *)v390 + v392) * (unint64_t)*v396;
                v385 += v397;
                v393 += HIDWORD(v397);
              }
              --v392;
              ++v396;
            }
            while (v395 != v392);
            v699[v384] = v385;
            v385 = v393 + HIDWORD(v385);
            ++v384;
            v391 = v700;
            v390 = (_OWORD *)((char *)v390 + 4);
          }
          while (v384 < v700);
          if (v385 && v700 != 64)
          {
            v699[v700] = v385;
            v391 = ++v700;
          }
          if (v376 > 0 != v383 > 0)
            v700 = -v391;
          goto LABEL_612;
        }
      }
    }
LABEL_611:
    v700 = 0;
LABEL_612:
    sub_223F1625C(v727, v703, v699);
    memcpy(v732, v727, sizeof(v732));
    v727[0] = 1;
    v727[64] = 1;
    *(_OWORD *)&v733[192] = v720[12];
    *(_OWORD *)&v733[208] = v720[13];
    *(_OWORD *)&v733[224] = v720[14];
    *(_OWORD *)&v733[240] = v720[15];
    *(_OWORD *)&v733[128] = v720[8];
    *(_OWORD *)&v733[144] = v720[9];
    *(_OWORD *)&v733[160] = v720[10];
    *(_OWORD *)&v733[176] = v720[11];
    *(_OWORD *)&v733[64] = v720[4];
    *(_OWORD *)&v733[80] = v720[5];
    *(_OWORD *)&v733[96] = v720[6];
    *(_OWORD *)&v733[112] = v720[7];
    *(_OWORD *)v733 = v720[0];
    *(_OWORD *)&v733[16] = v720[1];
    *(_OWORD *)&v733[32] = v720[2];
    *(_OWORD *)&v733[48] = v720[3];
    v398 = v721;
    if (v685 == 2)
      v398 = -v721;
    *(_DWORD *)&v733[256] = v398;
    memcpy(v728, __src, sizeof(v728));
    if (v94)
    {
      v403 = sub_223F19700((uint64_t)v684, v732, v727, v399, v400, v401, v402);
      *(long double *)v109 = v338 * (ldexp(*(long double *)&v403, v404) * 0.5);
    }
LABEL_616:
    if ((v688 & 1) == 0 && !a9)
      goto LABEL_707;
    v405 = v715;
    if (v715 && (v406 = __dst[64]) != 0)
    {
      v407 = 0;
      v408 = 0;
      if (v715 >= 0)
        v409 = v715;
      else
        v409 = -v715;
      if (__dst[64] >= 0)
        v410 = __dst[64];
      else
        v410 = -__dst[64];
      v411 = v409 - 1;
      v412 = v409 - 1 + v410;
      if (v412 >= 0x40)
        LODWORD(v412) = 64;
      v700 = v412;
      v413 = __dst;
      do
      {
        v415 = 0;
        v416 = 0;
        if (v407 >= v411)
          v417 = v411;
        else
          v417 = v407;
        v418 = ~v417;
        v419 = (unsigned int *)v714;
        do
        {
          if (v407 + v415 < v410)
          {
            v420 = v413[v415] * (unint64_t)*v419;
            v408 += v420;
            v416 += HIDWORD(v420);
          }
          --v415;
          ++v419;
        }
        while (v418 != v415);
        v699[v407] = v408;
        v408 = v416 + HIDWORD(v408);
        ++v407;
        v414 = v700;
        ++v413;
      }
      while (v407 < v700);
      if (v408 && v700 != 64)
      {
        v699[v700] = v408;
        v414 = ++v700;
      }
      if (v405 > 0 != v406 > 0)
      {
        v414 = -v414;
        v700 = v414;
      }
      if (v414)
      {
        v437 = 0;
        v438 = 0;
        if (v414 >= 0)
          v439 = v414;
        else
          v439 = -v414;
        v440 = v439 - 1;
        v441 = v440 + v410;
        if (v440 + v410 >= 0x40)
          v441 = 64;
        v702 = v441;
        v442 = __dst;
        do
        {
          v444 = 0;
          v445 = 0;
          if (v437 >= v440)
            v446 = v440;
          else
            v446 = v437;
          v447 = ~v446;
          v448 = v699;
          do
          {
            if (v437 + v444 < v410)
            {
              v449 = v442[v444] * (unint64_t)*v448;
              v438 += v449;
              v445 += HIDWORD(v449);
            }
            --v444;
            ++v448;
          }
          while (v447 != v444);
          v701[v437] = v438;
          v438 = v445 + HIDWORD(v438);
          ++v437;
          v443 = v702;
          ++v442;
        }
        while (v437 < v702);
        if (v438 && v702 != 64)
        {
          v701[v702] = v438;
          v443 = ++v702;
        }
        if (v406 > 0 != v414 > 0)
          v702 = -v443;
        goto LABEL_639;
      }
    }
    else
    {
      v700 = 0;
    }
    v702 = 0;
LABEL_639:
    v421 = v713;
    if (!v713)
      goto LABEL_702;
    v422 = v706;
    if (!v706)
      goto LABEL_702;
    v423 = 0;
    v424 = 0;
    if (v713 >= 0)
      v425 = v713;
    else
      v425 = -v713;
    if (v706 >= 0)
      v426 = v706;
    else
      v426 = -v706;
    v427 = v425 - 1;
    v428 = v425 - 1 + v426;
    if (v428 >= 0x40)
      LODWORD(v428) = 64;
    v696 = v428;
    v429 = v705;
    do
    {
      v431 = 0;
      v432 = 0;
      if (v423 >= v427)
        v433 = v427;
      else
        v433 = v423;
      v434 = ~v433;
      v435 = (unsigned int *)v712;
      do
      {
        if (v423 + v431 < v426)
        {
          v436 = v429[v431] * (unint64_t)*v435;
          v424 += v436;
          v432 += HIDWORD(v436);
        }
        --v431;
        ++v435;
      }
      while (v434 != v431);
      v695[v423] = v424;
      v424 = v432 + HIDWORD(v424);
      ++v423;
      v430 = v696;
      ++v429;
    }
    while (v423 < v696);
    if (v424 && v696 != 64)
    {
      v695[v696] = v424;
      v430 = ++v696;
    }
    if (v421 > 0 != v422 > 0)
    {
      v430 = -v430;
      v696 = v430;
    }
    if (v430 && (v450 = v719) != 0)
    {
      v451 = 0;
      v452 = 0;
      if (v430 >= 0)
        v453 = v430;
      else
        v453 = -v430;
      if (v719 >= 0)
        v454 = v719;
      else
        v454 = -v719;
      v455 = v453 - 1;
      v456 = v455 + v454;
      if (v455 + v454 >= 0x40)
        v456 = 64;
      v698 = v456;
      v457 = v718;
      do
      {
        v459 = 0;
        v460 = 0;
        if (v451 >= v455)
          v461 = v455;
        else
          v461 = v451;
        v462 = ~v461;
        v463 = v695;
        do
        {
          if (v451 + v459 < v454)
          {
            v464 = *((unsigned int *)v457 + v459) * (unint64_t)*v463;
            v452 += v464;
            v460 += HIDWORD(v464);
          }
          --v459;
          ++v463;
        }
        while (v462 != v459);
        v697[v451] = v452;
        v452 = v460 + HIDWORD(v452);
        ++v451;
        v458 = v698;
        v457 = (_OWORD *)((char *)v457 + 4);
      }
      while (v451 < v698);
      if (v452 && v698 != 64)
      {
        v697[v698] = v452;
        v458 = ++v698;
      }
      if (v430 > 0 != v450 > 0)
        v698 = -v458;
    }
    else
    {
LABEL_702:
      v698 = 0;
    }
    sub_223F1625C(v703, v701, v697);
    memcpy(v734, v703, sizeof(v734));
    v729[0] = 1;
    v730 = 1;
    v747 = v718[12];
    v748 = v718[13];
    v749 = v718[14];
    v750 = v718[15];
    v743 = v718[8];
    v744 = v718[9];
    v745 = v718[10];
    v746 = v718[11];
    v739 = v718[4];
    v740 = v718[5];
    v741 = v718[6];
    v742 = v718[7];
    v735 = v718[0];
    v736 = v718[1];
    v737 = v718[2];
    v738 = v718[3];
    v465 = v719;
    if (v685 == 2)
      v465 = -v719;
    v751 = v465;
    memcpy(v731, __src, sizeof(v731));
    if (v688)
    {
      v470 = sub_223F19700((uint64_t)v684, v734, v729, v466, v467, v468, v469);
      *(long double *)(v109 + 8) = v338 * (ldexp(*(long double *)&v470, v471) * 0.5);
    }
LABEL_707:
    if (!a9)
      return;
    v472 = v727[64];
    if (v727[64] && (v473 = v722[64]) != 0)
    {
      v474 = 0;
      v475 = 0;
      if (v727[64] >= 0)
        v476 = v727[64];
      else
        v476 = -v727[64];
      if (v722[64] >= 0)
        v477 = v722[64];
      else
        v477 = -v722[64];
      v478 = v476 - 1;
      v479 = v478 + v477;
      if (v478 + v477 >= 0x40)
        v479 = 64;
      v703[64] = v479;
      v480 = v722;
      do
      {
        v482 = 0;
        v483 = 0;
        if (v474 >= v478)
          v484 = v478;
        else
          v484 = v474;
        v485 = ~v484;
        v486 = v727;
        do
        {
          if (v474 + v482 < v477)
          {
            v487 = v480[v482] * (unint64_t)*v486;
            v475 += v487;
            v483 += HIDWORD(v487);
          }
          --v482;
          ++v486;
        }
        while (v485 != v482);
        v703[v474] = v475;
        v475 = v483 + HIDWORD(v475);
        ++v474;
        v481 = v703[64];
        ++v480;
      }
      while (v474 < v703[64]);
      if (v475 && v703[64] != 64)
      {
        v703[v703[64]] = v475;
        v481 = ++v703[64];
      }
      if (v472 > 0 != v473 > 0)
        v703[64] = -v481;
    }
    else
    {
      v703[64] = 0;
    }
    memcpy(v727, v703, sizeof(v727));
    v488 = v728[64];
    if (v728[64] && (v489 = v722[64]) != 0)
    {
      v490 = 0;
      v491 = 0;
      if (v728[64] >= 0)
        v492 = v728[64];
      else
        v492 = -v728[64];
      if (v722[64] >= 0)
        v493 = v722[64];
      else
        v493 = -v722[64];
      v494 = v492 - 1;
      v495 = v494 + v493;
      if (v494 + v493 >= 0x40)
        v495 = 64;
      v703[64] = v495;
      v496 = v722;
      do
      {
        v498 = 0;
        v499 = 0;
        if (v490 >= v494)
          v500 = v494;
        else
          v500 = v490;
        v501 = ~v500;
        v502 = v728;
        do
        {
          if (v490 + v498 < v493)
          {
            v503 = v496[v498] * (unint64_t)*v502;
            v491 += v503;
            v499 += HIDWORD(v503);
          }
          --v498;
          ++v502;
        }
        while (v501 != v498);
        v703[v490] = v491;
        v491 = v499 + HIDWORD(v491);
        ++v490;
        v497 = v703[64];
        ++v496;
      }
      while (v490 < v703[64]);
      if (v491 && v703[64] != 64)
      {
        v703[v703[64]] = v491;
        v497 = ++v703[64];
      }
      if (v488 > 0 != v489 > 0)
        v703[64] = -v497;
    }
    else
    {
      v703[64] = 0;
    }
    memcpy(v728, v703, sizeof(v728));
    if (__dst[64])
    {
      v504 = 0;
      v505 = 0;
      if (__dst[64] >= 0)
        v506 = __dst[64];
      else
        v506 = -__dst[64];
      v507 = v506 - 1 + v506;
      if (v507 >= 0x40)
        LODWORD(v507) = 64;
      v700 = v507;
      do
      {
        v508 = 0;
        v509 = 0;
        if (v504 >= v506 - 1)
          v510 = v506 - 1;
        else
          v510 = v504;
        v511 = v510 + 1;
        v512 = v504;
        do
        {
          if (v512 < v506)
          {
            v513 = __dst[v512] * (unint64_t)__dst[v508];
            v505 += v513;
            v509 += HIDWORD(v513);
          }
          ++v508;
          --v512;
        }
        while (v511 != v508);
        v699[v504] = v505;
        v505 = v509 + HIDWORD(v505);
        ++v504;
      }
      while (v504 < v700);
      if (v505 && v700 != 64)
        v699[v700++] = v505;
      LODWORD(v514) = v713;
      if (v713)
      {
LABEL_777:
        v515 = 0;
        v516 = 0;
        if ((v514 & 0x80000000) == 0)
          v514 = v514;
        else
          v514 = -(int)v514;
        v517 = v514 - 1 + v514;
        if (v517 >= 0x40)
          LODWORD(v517) = 64;
        v698 = v517;
        do
        {
          v518 = 0;
          v519 = 0;
          if (v515 >= v514 - 1)
            v520 = v514 - 1;
          else
            v520 = v515;
          v521 = v520 + 1;
          v522 = v515;
          do
          {
            if (v522 < v514)
            {
              v523 = *((unsigned int *)v712 + v522) * (unint64_t)*((unsigned int *)v712 + v518);
              v516 += v523;
              v519 += HIDWORD(v523);
            }
            ++v518;
            --v522;
          }
          while (v521 != v518);
          v697[v515] = v516;
          v516 = v519 + HIDWORD(v516);
          ++v515;
        }
        while (v515 < v698);
        if (v516 && v698 != 64)
          v697[v698++] = v516;
        sub_223F1625C(v701, v699, v697);
        v524 = v706;
        if (!v706)
          goto LABEL_816;
LABEL_798:
        v525 = v702;
        if (v702)
        {
          v526 = 0;
          v527 = 0;
          if (v524 >= 0)
            v528 = v524;
          else
            v528 = -v524;
          if (v702 >= 0)
            v529 = v702;
          else
            v529 = -v702;
          v530 = v528 - 1;
          v531 = v530 + v529;
          if (v530 + v529 >= 0x40)
            v531 = 64;
          v703[64] = v531;
          v532 = v701;
          do
          {
            v534 = 0;
            v535 = 0;
            if (v526 >= v530)
              v536 = v530;
            else
              v536 = v526;
            v537 = ~v536;
            v538 = v705;
            do
            {
              if (v526 + v534 < v529)
              {
                v539 = v532[v534] * (unint64_t)*v538;
                v527 += v539;
                v535 += HIDWORD(v539);
              }
              --v534;
              ++v538;
            }
            while (v537 != v534);
            v703[v526] = v527;
            v527 = v535 + HIDWORD(v527);
            ++v526;
            v533 = v703[64];
            ++v532;
          }
          while (v526 < v703[64]);
          if (v527 && v703[64] != 64)
          {
            v703[v703[64]] = v527;
            v533 = ++v703[64];
          }
          if (v524 > 0 != v525 > 0)
            v703[64] = -v533;
LABEL_822:
          memcpy(v734, v703, sizeof(v734));
          v729[0] = 1;
          v730 = 1;
          v747 = v712[12];
          v748 = v712[13];
          v749 = v712[14];
          v750 = v712[15];
          v743 = v712[8];
          v744 = v712[9];
          v745 = v712[10];
          v746 = v712[11];
          v739 = v712[4];
          v740 = v712[5];
          v741 = v712[6];
          v742 = v712[7];
          v735 = v712[0];
          v736 = v712[1];
          v737 = v712[2];
          v738 = v712[3];
          v540 = v713;
          if (v685 == 2)
            v540 = -v713;
          v751 = v540;
          memcpy(v731, __src, sizeof(v731));
          v545 = sub_223F19C38(v684, v732, v727, v541, v542, v543, v544);
          v547 = ldexp(*(long double *)&v545, v546);
          v550 = 0.5;
          v551 = v547 * 0.5;
          v552 = v338 * v551;
          v553 = v722[64];
          if (v722[64] >= 0)
            v554 = v722[64];
          else
            v554 = -v722[64];
          if ((_DWORD)v554)
            goto LABEL_828;
          goto LABEL_1067;
        }
LABEL_816:
        v703[64] = 0;
        goto LABEL_822;
      }
    }
    else
    {
      v700 = 0;
      LODWORD(v514) = v713;
      if (v713)
        goto LABEL_777;
    }
    v698 = 0;
    sub_223F1625C(v701, v699, v697);
    v524 = v706;
    if (!v706)
      goto LABEL_816;
    goto LABEL_798;
  }
  if (v713)
  {
    v215 = 0;
    v216 = 0;
    if (v713 >= 0)
      v217 = v713;
    else
      v217 = -v713;
    v218 = v217 - 1 + v217;
    if (v218 >= 0x40)
      LODWORD(v218) = 64;
    v732[64] = v218;
    do
    {
      v219 = 0;
      v220 = 0;
      if (v215 >= v217 - 1)
        v221 = v217 - 1;
      else
        v221 = v215;
      v222 = v221 + 1;
      v223 = v215;
      do
      {
        if (v223 < v217)
        {
          v224 = *((unsigned int *)v712 + v223) * (unint64_t)*((unsigned int *)v712 + v219);
          v216 += v224;
          v220 += HIDWORD(v224);
        }
        ++v219;
        --v223;
      }
      while (v222 != v219);
      v732[v215] = v216;
      v216 = v220 + HIDWORD(v216);
      ++v215;
    }
    while (v215 < (int)v732[64]);
    if (v216 && v732[64] != 64)
      v732[v732[64]++] = v216;
    LODWORD(v269) = v706;
    if (v706)
      goto LABEL_386;
LABEL_407:
    v727[64] = 0;
    goto LABEL_408;
  }
  v732[64] = 0;
  LODWORD(v269) = v706;
  if (!v706)
    goto LABEL_407;
LABEL_386:
  v270 = 0;
  v271 = 0;
  if ((v269 & 0x80000000) == 0)
    v269 = v269;
  else
    v269 = -(int)v269;
  v272 = v269 - 1 + v269;
  if (v272 >= 0x40)
    LODWORD(v272) = 64;
  v727[64] = v272;
  do
  {
    v273 = 0;
    v274 = 0;
    if (v270 >= v269 - 1)
      v275 = v269 - 1;
    else
      v275 = v270;
    v276 = v275 + 1;
    v277 = v270;
    do
    {
      if (v277 < v269)
      {
        v278 = v705[v277] * (unint64_t)v705[v273];
        v271 += v278;
        v274 += HIDWORD(v278);
      }
      ++v273;
      --v277;
    }
    while (v276 != v273);
    v727[v270] = v271;
    v271 = v274 + HIDWORD(v271);
    ++v270;
  }
  while (v270 < v727[64]);
  if (v271 && v727[64] != 64)
    v727[v727[64]++] = v271;
LABEL_408:
  sub_223F15F80(__src, v732, v727);
  v281 = v713;
  if (v713 && (v282 = v706) != 0)
  {
    v283 = 0;
    v284 = 0;
    if (v713 >= 0)
      v285 = v713;
    else
      v285 = -v713;
    if (v706 >= 0)
      v286 = v706;
    else
      v286 = -v706;
    v287 = v285 - 1;
    v288 = v287 + v286;
    if (v287 + v286 >= 0x40)
      v288 = 64;
    v732[64] = v288;
    v289 = v705;
    do
    {
      v291 = 0;
      v292 = 0;
      if (v283 >= v287)
        v293 = v287;
      else
        v293 = v283;
      v294 = ~v293;
      v295 = (unsigned int *)v712;
      do
      {
        if (v283 + v291 < v286)
        {
          v296 = v289[v291] * (unint64_t)*v295;
          v284 += v296;
          v292 += HIDWORD(v296);
        }
        --v291;
        ++v295;
      }
      while (v294 != v291);
      v732[v283] = v284;
      v284 = v292 + HIDWORD(v284);
      ++v283;
      v290 = v732[64];
      ++v289;
    }
    while (v283 < (int)v732[64]);
    if (v284 && v732[64] != 64)
    {
      v732[v732[64]] = v284;
      v290 = ++v732[64];
    }
    if (v281 > 0 != v282 > 0)
      v732[64] = -v290;
  }
  else
  {
    v732[64] = 0;
  }
  memcpy(__dst, v732, sizeof(__dst));
  v297 = __dst[64];
  if (__dst[64] && v683)
  {
    v298 = 0;
    v299 = 0;
    if (__dst[64] >= 0)
      v300 = __dst[64];
    else
      v300 = -__dst[64];
    if (v683 >= 0)
      v301 = v683;
    else
      v301 = -v683;
    v302 = v300 - 1;
    v303 = v300 - 1 + v301;
    if (v303 >= 0x40)
      LODWORD(v303) = 64;
    v702 = v303;
    v304 = v716;
    do
    {
      v306 = 0;
      v307 = 0;
      if (v298 >= v302)
        v308 = v302;
      else
        v308 = v298;
      v309 = ~v308;
      v310 = __dst;
      do
      {
        if (v298 + v306 < v301)
        {
          v311 = *((unsigned int *)v304 + v306) * (unint64_t)*v310;
          v299 += v311;
          v307 += HIDWORD(v311);
        }
        --v306;
        ++v310;
      }
      while (v309 != v306);
      v701[v298] = v299;
      v299 = v307 + HIDWORD(v299);
      ++v298;
      v305 = v702;
      v304 = (_QWORD *)((char *)v304 + 4);
    }
    while (v298 < v702);
    if (v299 && v702 != 64)
    {
      v701[v702] = v299;
      v305 = ++v702;
    }
    if (v297 > 0 != v683 > 0)
    {
      v305 = -v305;
      v702 = v305;
    }
    LODWORD(v312) = v690;
    if (v305)
    {
      v313 = 0;
      v314 = 0;
      if (v305 >= 0)
        v315 = v305;
      else
        v315 = -v305;
      v316 = v315 - 1;
      if (v315 >= 0x40)
        LODWORD(v315) = 64;
      v703[64] = v315;
      do
      {
        v318 = 0;
        v319 = 0;
        if (v313 >= v316)
          v320 = v316;
        else
          v320 = v313;
        v321 = v320 + 1;
        do
        {
          if (v313 == v318)
          {
            v322 = v701[v313];
            v314 += (2 * v322);
            v319 += v322 >> 31;
          }
          ++v318;
        }
        while (v321 != v318);
        v703[v313] = v314;
        v314 = v319 + HIDWORD(v314);
        ++v313;
        v317 = v703[64];
      }
      while (v313 < v703[64]);
      if (v314)
      {
        LODWORD(v312) = v690;
        if (v703[64] != 64)
        {
          v703[v703[64]] = v314;
          v317 = ++v703[64];
        }
        if (v305 <= 0)
          goto LABEL_852;
      }
      else
      {
        LODWORD(v312) = v690;
        if (v305 <= 0)
LABEL_852:
          v703[64] = -v317;
      }
    }
    else
    {
      v703[64] = 0;
    }
  }
  else
  {
    v702 = 0;
    LODWORD(v312) = v690;
    v703[64] = 0;
  }
  v558 = __src[64];
  if (__src[64] && (_DWORD)v312)
  {
    v559 = 0;
    v560 = 0;
    if (__src[64] >= 0)
      v561 = __src[64];
    else
      v561 = -__src[64];
    if ((v312 & 0x80000000) == 0)
      v312 = v312;
    else
      v312 = -(int)v312;
    v562 = v561 - 1;
    v563 = v562 + v312;
    if (v562 + v312 >= 0x40)
      v563 = 64;
    v700 = v563;
    v564 = v720;
    do
    {
      v566 = 0;
      v567 = 0;
      if (v559 >= v562)
        v568 = v562;
      else
        v568 = v559;
      v569 = ~v568;
      v570 = __src;
      do
      {
        if (v559 + v566 < v312)
        {
          v571 = *((unsigned int *)v564 + v566) * (unint64_t)*v570;
          v560 += v571;
          v567 += HIDWORD(v571);
        }
        --v566;
        ++v570;
      }
      while (v569 != v566);
      v699[v559] = v560;
      v560 = v567 + HIDWORD(v560);
      ++v559;
      v565 = v700;
      v564 = (_OWORD *)((char *)v564 + 4);
    }
    while (v559 < v700);
    if (v560 && v700 != 64)
    {
      v699[v700] = v560;
      v565 = ++v700;
    }
    if (v558 > 0 != v690 > 0)
      v700 = -v565;
  }
  else
  {
    v700 = 0;
  }
  sub_223F1625C(v727, v703, v699);
  memcpy(v732, v727, sizeof(v732));
  memcpy(v727, v722, sizeof(v727));
  v572 = __dst[64];
  if (__dst[64] && (v573 = v706) != 0)
  {
    v574 = 0;
    v575 = 0;
    if (__dst[64] >= 0)
      v576 = __dst[64];
    else
      v576 = -__dst[64];
    if (v706 >= 0)
      v577 = v706;
    else
      v577 = -v706;
    v578 = v576 - 1;
    v579 = v576 - 1 + v577;
    if (v579 >= 0x40)
      LODWORD(v579) = 64;
    v700 = v579;
    v580 = v705;
    do
    {
      v582 = 0;
      v583 = 0;
      if (v574 >= v578)
        v584 = v578;
      else
        v584 = v574;
      v585 = ~v584;
      v586 = __dst;
      do
      {
        if (v574 + v582 < v577)
        {
          v587 = v580[v582] * (unint64_t)*v586;
          v575 += v587;
          v583 += HIDWORD(v587);
        }
        --v582;
        ++v586;
      }
      while (v585 != v582);
      v699[v574] = v575;
      v575 = v583 + HIDWORD(v575);
      ++v574;
      v581 = v700;
      ++v580;
    }
    while (v574 < v700);
    if (v575 && v700 != 64)
    {
      v699[v700] = v575;
      v581 = ++v700;
    }
    if (v572 > 0 != v573 > 0)
    {
      v581 = -v581;
      v700 = v581;
    }
    if (v581)
    {
      v589 = 0;
      v590 = 0;
      if (v581 >= 0)
        v591 = v581;
      else
        v591 = -v581;
      v592 = v591 - 1;
      if (v591 >= 0x40)
        LODWORD(v591) = 64;
      v702 = v591;
      do
      {
        v594 = 0;
        v595 = 0;
        if (v589 >= v592)
          v596 = v592;
        else
          v596 = v589;
        v597 = v596 + 1;
        do
        {
          if (v589 == v594)
          {
            v598 = v699[v589];
            v590 += (2 * v598);
            v595 += v598 >> 31;
          }
          ++v594;
        }
        while (v597 != v594);
        v701[v589] = v590;
        v590 = v595 + HIDWORD(v590);
        ++v589;
        v593 = v702;
      }
      while (v589 < v702);
      if (v590 && v702 != 64)
      {
        v701[v702] = v590;
        v593 = ++v702;
      }
      if (v581 <= 0)
        v702 = -v593;
      v588 = __src[64];
      if (!__src[64])
        goto LABEL_949;
    }
    else
    {
      v702 = 0;
      v588 = __src[64];
      if (!__src[64])
        goto LABEL_949;
    }
  }
  else
  {
    v700 = 0;
    v702 = 0;
    v588 = __src[64];
    if (!__src[64])
      goto LABEL_949;
  }
  v599 = v713;
  if (!v713)
  {
LABEL_949:
    v698 = 0;
    goto LABEL_950;
  }
  v600 = 0;
  v601 = 0;
  if (v588 >= 0)
    v602 = v588;
  else
    v602 = -v588;
  if (v713 >= 0)
    v603 = v713;
  else
    v603 = -v713;
  v604 = v602 - 1;
  v605 = v604 + v603;
  if (v604 + v603 >= 0x40)
    v605 = 64;
  v698 = v605;
  v606 = v712;
  do
  {
    v608 = 0;
    v609 = 0;
    if (v600 >= v604)
      v610 = v604;
    else
      v610 = v600;
    v611 = ~v610;
    v612 = __src;
    do
    {
      if (v600 + v608 < v603)
      {
        v613 = *((unsigned int *)v606 + v608) * (unint64_t)*v612;
        v601 += v613;
        v609 += HIDWORD(v613);
      }
      --v608;
      ++v612;
    }
    while (v611 != v608);
    v697[v600] = v601;
    v601 = v609 + HIDWORD(v601);
    ++v600;
    v607 = v698;
    v606 = (_OWORD *)((char *)v606 + 4);
  }
  while (v600 < v698);
  if (v601 && v698 != 64)
  {
    v697[v698] = v601;
    v607 = ++v698;
  }
  if (v588 > 0 != v599 > 0)
    v698 = -v607;
LABEL_950:
  sub_223F1625C(v703, v701, v697);
  memcpy(v733, v703, sizeof(v733));
  v728[0] = 1;
  v728[64] = 1;
  v614 = __dst[64];
  if (!__dst[64])
    goto LABEL_989;
  v615 = v715;
  if (!v715)
    goto LABEL_989;
  v616 = 0;
  v617 = 0;
  if (__dst[64] >= 0)
    v618 = __dst[64];
  else
    v618 = -__dst[64];
  if (v715 >= 0)
    v619 = v715;
  else
    v619 = -v715;
  v620 = v618 - 1;
  v621 = v618 - 1 + v619;
  if (v621 >= 0x40)
    LODWORD(v621) = 64;
  v700 = v621;
  v622 = v714;
  do
  {
    v624 = 0;
    v625 = 0;
    if (v616 >= v620)
      v626 = v620;
    else
      v626 = v616;
    v627 = ~v626;
    v628 = __dst;
    do
    {
      if (v616 + v624 < v619)
      {
        v629 = *((unsigned int *)v622 + v624) * (unint64_t)*v628;
        v617 += v629;
        v625 += HIDWORD(v629);
      }
      --v624;
      ++v628;
    }
    while (v627 != v624);
    v699[v616] = v617;
    v617 = v625 + HIDWORD(v617);
    ++v616;
    v623 = v700;
    v622 = (_QWORD *)((char *)v622 + 4);
  }
  while (v616 < v700);
  if (v617 && v700 != 64)
  {
    v699[v700] = v617;
    v623 = ++v700;
  }
  if (v614 > 0 != v615 > 0)
  {
    v623 = -v623;
    v700 = v623;
  }
  if (v623)
  {
    v630 = 0;
    v631 = 0;
    if (v623 >= 0)
      v632 = v623;
    else
      v632 = -v623;
    v633 = v632 - 1;
    if (v632 >= 0x40)
      LODWORD(v632) = 64;
    v702 = v632;
    do
    {
      v635 = 0;
      v636 = 0;
      if (v630 >= v633)
        v637 = v633;
      else
        v637 = v630;
      v638 = v637 + 1;
      do
      {
        if (v630 == v635)
        {
          v639 = v699[v630];
          v631 += (2 * v639);
          v636 += v639 >> 31;
        }
        ++v635;
      }
      while (v638 != v635);
      v701[v630] = v631;
      v631 = v636 + HIDWORD(v631);
      ++v630;
      v634 = v702;
    }
    while (v630 < v702);
    if (v631 && v702 != 64)
    {
      v701[v702] = v631;
      v634 = ++v702;
    }
    if (v623 <= 0)
      v702 = -v634;
  }
  else
  {
LABEL_989:
    v702 = 0;
  }
  v640 = __src[64];
  if (__src[64] && (v641 = v719) != 0)
  {
    v642 = 0;
    v643 = 0;
    if (__src[64] >= 0)
      v644 = __src[64];
    else
      v644 = -__src[64];
    if (v719 >= 0)
      v645 = v719;
    else
      v645 = -v719;
    v646 = v644 - 1;
    v647 = v646 + v645;
    if (v646 + v645 >= 0x40)
      v647 = 64;
    v698 = v647;
    v648 = v718;
    do
    {
      v650 = 0;
      v651 = 0;
      if (v642 >= v646)
        v652 = v646;
      else
        v652 = v642;
      v653 = ~v652;
      v654 = __src;
      do
      {
        if (v642 + v650 < v645)
        {
          v655 = *((unsigned int *)v648 + v650) * (unint64_t)*v654;
          v643 += v655;
          v651 += HIDWORD(v655);
        }
        --v650;
        ++v654;
      }
      while (v653 != v650);
      v697[v642] = v643;
      v643 = v651 + HIDWORD(v643);
      ++v642;
      v649 = v698;
      v648 = (_OWORD *)((char *)v648 + 4);
    }
    while (v642 < v698);
    if (v643 && v698 != 64)
    {
      v697[v698] = v643;
      v649 = ++v698;
    }
    if (v640 > 0 != v641 > 0)
      v698 = -v649;
  }
  else
  {
    v698 = 0;
  }
  sub_223F1625C(v703, v701, v697);
  memcpy(v734, v703, sizeof(v734));
  if (__dst[64] >= 0)
    v660 = __dst[64];
  else
    v660 = -__dst[64];
  if (!(_DWORD)v660)
  {
    v663 = ldexp(0.0, 0);
    v666 = 1.0;
    v667 = 1.0 / v663;
    if (v94)
      goto LABEL_1036;
LABEL_1023:
    if (!v688)
      goto LABEL_1062;
    goto LABEL_1024;
  }
  if (v660 == 1)
  {
    v661 = 0;
    LODWORD(v656) = __dst[0];
    v662 = (double)v656;
  }
  else if (v660 == 2)
  {
    v661 = 0;
    LODWORD(v656) = __dst[1];
    LODWORD(v657) = __dst[0];
    v662 = (double)v656 * 4294967300.0 + (double)v657;
  }
  else
  {
    v671 = &__dst[v660];
    LODWORD(v658) = *(v671 - 2);
    LODWORD(v656) = *(v671 - 1);
    LODWORD(v659) = *(v671 - 3);
    v662 = ((double)v656 * 4294967300.0 + (double)v658) * 4294967300.0 + (double)v659;
    v661 = 32 * v660 - 96;
  }
  if (__dst[64] < 0)
    v662 = -v662;
  v663 = ldexp(v662, v661);
  v666 = 1.0;
  v667 = 1.0 / v663;
  if (!v94)
    goto LABEL_1023;
LABEL_1036:
  if ((v732[64] & 0x80000000) == 0)
    v672 = v732[64];
  else
    v672 = -v732[64];
  if ((_DWORD)v672)
  {
    if (v672 == 1)
    {
      v673 = 0;
      LODWORD(v663) = v732[0];
      v674 = (double)*(unint64_t *)&v663;
    }
    else if (v672 == 2)
    {
      v673 = 0;
      LODWORD(v663) = v732[1];
      LODWORD(v666) = v732[0];
      v674 = (double)*(unint64_t *)&v663 * 4294967300.0 + (double)*(unint64_t *)&v666;
    }
    else
    {
      v678 = &v732[v672];
      LODWORD(v664) = *(v678 - 2);
      LODWORD(v663) = *(v678 - 1);
      LODWORD(v665) = *(v678 - 3);
      v674 = ((double)*(unint64_t *)&v663 * 4294967300.0 + (double)*(unint64_t *)&v664) * 4294967300.0
           + (double)*(unint64_t *)&v665;
      v673 = 32 * v672 - 96;
    }
    if ((v732[64] & 0x80000000) != 0)
      v674 = -v674;
  }
  else
  {
    v673 = 0;
    v674 = 0.0;
  }
  v679 = ldexp(v674, v673);
  v666 = 0.25;
  v663 = v667 * (v679 * 0.25);
  *(double *)v109 = v663;
  if (!v688)
  {
LABEL_1062:
    if (!a9)
      return;
LABEL_1063:
    v680 = sub_223F19700((uint64_t)v684, v732, v727, v663, v666, v664, v665);
    v682 = ldexp(*(long double *)&v680, v681);
    v550 = 0.25;
    v551 = v682 * 0.25;
    v552 = v667 * v551;
    v553 = v722[64];
    if (v722[64] >= 0)
      v554 = v722[64];
    else
      v554 = -v722[64];
    if ((_DWORD)v554)
    {
LABEL_828:
      if (v554 == 1)
      {
        v555 = 0;
        LODWORD(v551) = v722[0];
        v556 = (double)*(unint64_t *)&v551;
      }
      else if (v554 == 2)
      {
        v555 = 0;
        LODWORD(v551) = v722[1];
        LODWORD(v550) = v722[0];
        v556 = (double)*(unint64_t *)&v551 * 4294967300.0 + (double)*(unint64_t *)&v550;
      }
      else
      {
        v557 = &v722[v554];
        LODWORD(v548) = *(v557 - 2);
        LODWORD(v551) = *(v557 - 1);
        LODWORD(v549) = *(v557 - 3);
        v556 = ((double)*(unint64_t *)&v551 * 4294967300.0 + (double)v548) * 4294967300.0 + (double)v549;
        v555 = 32 * v554 - 96;
      }
      if (v553 < 0)
        v556 = -v556;
      goto LABEL_1068;
    }
LABEL_1067:
    v555 = 0;
    v556 = 0.0;
LABEL_1068:
    *(double *)(v109 + 16) = v552 / sqrt(ldexp(v556, v555));
    return;
  }
LABEL_1024:
  if (v734[64] >= 0)
    v668 = v734[64];
  else
    v668 = -v734[64];
  if (!(_DWORD)v668)
  {
    v675 = ldexp(0.0, 0);
    v666 = 0.25;
    v663 = v667 * (v675 * 0.25);
    *(double *)(v109 + 8) = v663;
    if (!a9)
      return;
    goto LABEL_1063;
  }
  if (v668 == 1)
  {
    v669 = 0;
    LODWORD(v663) = v734[0];
    v670 = (double)*(unint64_t *)&v663;
  }
  else if (v668 == 2)
  {
    v669 = 0;
    LODWORD(v663) = v734[1];
    v670 = (double)*(unint64_t *)&v663 * 4294967300.0 + (double)(v734[0] | 0x41F0000000000000uLL);
  }
  else
  {
    v676 = &v734[v668];
    LODWORD(v664) = *(v676 - 2);
    LODWORD(v663) = *(v676 - 1);
    LODWORD(v665) = *(v676 - 3);
    v670 = ((double)*(unint64_t *)&v663 * 4294967300.0 + (double)*(unint64_t *)&v664) * 4294967300.0
         + (double)*(unint64_t *)&v665;
    v669 = 32 * v668 - 96;
  }
  if (v734[64] < 0)
    v670 = -v670;
  v677 = ldexp(v670, v669);
  v666 = 0.25;
  v663 = v667 * (v677 * 0.25);
  *(double *)(v109 + 8) = v663;
  if (a9)
    goto LABEL_1063;
}

uint64_t sub_223F19700(uint64_t a1, _DWORD *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  double v11;
  double v12;
  double v13;
  _DWORD *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int *v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  double v79;
  _DWORD *v80;
  double v81;
  double v82;
  _DWORD v83[64];
  int v84;
  int v85[64];
  int v86;
  _DWORD v87[64];
  int v88;
  _DWORD __src[64];
  int v90;
  _DWORD __dst[64];
  int v92;
  long double v93[2];
  double v94[2];
  int v95;

  v10 = sub_223F1AA90(a4, a5, a6, a7, a1, a2, a3);
  v12 = v11;
  v94[0] = v11;
  v94[1] = v13;
  v14 = a3 + 65;
  sub_223F1AA90(v10, v15, v16, v17, a1, a2 + 65, a3 + 65);
  v93[0] = v18;
  v93[1] = v19;
  if (v12 >= 0.0 && v18 >= 0.0 || v12 <= 0.0 && v18 <= 0.0)
    return sub_223F1AC88(v94, v93);
  v21 = a2[64];
  if (!v21)
    goto LABEL_43;
  v22 = 0;
  v23 = 0;
  if (v21 >= 0)
    v24 = v21;
  else
    v24 = -v21;
  v25 = v24 - 1 + v24;
  if (v25 >= 0x40)
    LODWORD(v25) = 64;
  v88 = v25;
  do
  {
    v27 = 0;
    v28 = 0;
    if (v22 >= v24 - 1)
      v29 = v24 - 1;
    else
      v29 = v22;
    v30 = v29 + 1;
    v31 = v22;
    do
    {
      if (v31 < v24)
      {
        v32 = a2[v31] * (unint64_t)a2[v27];
        v23 += v32;
        v28 += HIDWORD(v32);
      }
      ++v27;
      --v31;
    }
    while (v30 != v27);
    v87[v22] = v23;
    v23 = v28 + HIDWORD(v23);
    ++v22;
    v26 = v88;
  }
  while (v22 < v88);
  if (v23 && v88 != 64)
  {
    v87[v88] = v23;
    v26 = ++v88;
  }
  if (v26 && (v33 = a3[64]) != 0)
  {
    v34 = 0;
    v35 = 0;
    if (v26 >= 0)
      v36 = v26;
    else
      v36 = -v26;
    if (v33 >= 0)
      v37 = v33;
    else
      v37 = -v33;
    v38 = v36 - 1;
    v39 = v38 + v37;
    if (v38 + v37 >= 0x40)
      v39 = 64;
    v90 = v39;
    v40 = a3;
    do
    {
      v42 = 0;
      v43 = 0;
      if (v34 >= v38)
        v44 = v38;
      else
        v44 = v34;
      v45 = ~v44;
      v46 = v87;
      do
      {
        if (v34 + v42 < v37)
        {
          v47 = v40[v42] * (unint64_t)*v46;
          v35 += v47;
          v43 += HIDWORD(v47);
        }
        --v42;
        ++v46;
      }
      while (v45 != v42);
      __src[v34] = v35;
      v35 = v43 + HIDWORD(v35);
      ++v34;
      v41 = v90;
      ++v40;
    }
    while (v34 < v90);
    if (v35 && v90 != 64)
    {
      __src[v90] = v35;
      v41 = ++v90;
    }
    if (v26 > 0 != v33 > 0)
      v90 = -v41;
  }
  else
  {
LABEL_43:
    v90 = 0;
  }
  v48 = a2[129];
  if (!v48)
    goto LABEL_81;
  v49 = 0;
  v50 = 0;
  if (v48 >= 0)
    v51 = v48;
  else
    v51 = -v48;
  v52 = v51 - 1 + v51;
  if (v52 >= 0x40)
    LODWORD(v52) = 64;
  v84 = v52;
  do
  {
    v54 = 0;
    v55 = 0;
    if (v49 >= v51 - 1)
      v56 = v51 - 1;
    else
      v56 = v49;
    v57 = v56 + 1;
    v58 = v49;
    do
    {
      if (v58 < v51)
      {
        v59 = a2[v58 + 65] * (unint64_t)a2[v54 + 65];
        v50 += v59;
        v55 += HIDWORD(v59);
      }
      ++v54;
      --v58;
    }
    while (v57 != v54);
    v83[v49] = v50;
    v50 = v55 + HIDWORD(v50);
    ++v49;
    v53 = v84;
  }
  while (v49 < v84);
  if (v50 && v84 != 64)
  {
    v83[v84] = v50;
    v53 = ++v84;
  }
  if (v53 && (v60 = a3[129]) != 0)
  {
    v61 = 0;
    v62 = 0;
    if (v53 >= 0)
      v63 = v53;
    else
      v63 = -v53;
    if (v60 >= 0)
      v64 = v60;
    else
      v64 = -v60;
    v65 = v63 - 1;
    v66 = v65 + v64;
    if (v65 + v64 >= 0x40)
      v66 = 64;
    v86 = v66;
    do
    {
      v68 = 0;
      v69 = 0;
      if (v61 >= v65)
        v70 = v65;
      else
        v70 = v61;
      v71 = ~v70;
      v72 = v83;
      do
      {
        if (v61 + v68 < v64)
        {
          v73 = v14[v68] * (unint64_t)*v72;
          v62 += v73;
          v69 += HIDWORD(v73);
        }
        --v68;
        ++v72;
      }
      while (v71 != v68);
      v85[v61] = v62;
      v62 = v69 + HIDWORD(v62);
      ++v61;
      v67 = v86;
      ++v14;
    }
    while (v61 < v86);
    if (v62 && v86 != 64)
    {
      v85[v86] = v62;
      v67 = ++v86;
    }
    if (v53 > 0 != v60 > 0)
      v86 = -v67;
  }
  else
  {
LABEL_81:
    v86 = 0;
  }
  sub_223F15F80(__dst, __src, v85);
  if (v92 >= 0)
    v78 = v92;
  else
    v78 = -v92;
  if ((_DWORD)v78)
  {
    if (v78 == 1)
    {
      LODWORD(v74) = __dst[0];
      v79 = (double)v74;
    }
    else if (v78 == 2)
    {
      LODWORD(v74) = __dst[1];
      LODWORD(v75) = __dst[0];
      v79 = (double)v74 * 4294967300.0 + (double)v75;
    }
    else
    {
      v80 = &__dst[v78];
      LODWORD(v76) = *(v80 - 2);
      LODWORD(v74) = *(v80 - 1);
      LODWORD(v77) = *(v80 - 3);
      v79 = ((double)v74 * 4294967300.0 + (double)v76) * 4294967300.0 + (double)v77;
    }
    if (v92 < 0)
      v79 = -v79;
  }
  else
  {
    v79 = 0.0;
  }
  v81 = frexp(v79, &v95);
  v82 = COERCE_DOUBLE(sub_223F1AD60(v94, (uint64_t)v93));
  return frexp(v81 / v82, &v95);
}

uint64_t sub_223F19C38(_DWORD *a1, unsigned int *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  _DWORD *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  unint64_t v101;
  _DWORD *v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  int v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  _DWORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int *v129;
  unint64_t v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int *v169;
  unint64_t v170;
  int v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unsigned int *v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  int v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unsigned int *v209;
  unint64_t v210;
  double v211;
  double v212;
  double v213;
  double v214;
  uint64_t v215;
  int v216;
  int v217;
  double v218;
  double v219;
  int v220;
  int v221;
  long double v222;
  _DWORD v223[64];
  int v224;
  int v225[64];
  int v226;
  _DWORD v227[64];
  int v228;
  int v229[64];
  int v230;
  _DWORD v231[64];
  int v232;
  int v233[64];
  int v234;
  _DWORD v235[64];
  int v236;
  int v237[64];
  int v238;
  _DWORD __dst[65];
  _DWORD v240[64];
  int v241;
  _QWORD __src[33];
  long double v243[2];
  _QWORD v244[2];

  v10 = COERCE_DOUBLE(sub_223F19700((uint64_t)a1, a2, a3, a4, a5, a6, a7));
  *(double *)v244 = v10;
  v244[1] = v11;
  v16 = COERCE_DOUBLE(sub_223F19700((uint64_t)a1, a2 + 130, a3 + 130, v12, v13, v14, v15));
  v243[0] = v16;
  v243[1] = v17;
  if (v10 >= 0.0 && v16 >= 0.0 || v10 <= 0.0 && v16 <= 0.0)
    return sub_223F1AC88(v244, v243);
  v19 = a2[64];
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    if (v19 >= 0)
      v22 = v19;
    else
      v22 = -v19;
    v23 = v22 - 1 + v22;
    if (v23 >= 0x40)
      LODWORD(v23) = 64;
    v236 = v23;
    do
    {
      v25 = 0;
      v26 = 0;
      if (v20 >= v22 - 1)
        v27 = v22 - 1;
      else
        v27 = v20;
      v28 = v27 + 1;
      v29 = v20;
      do
      {
        if (v29 < v22)
        {
          v30 = a2[v29] * (unint64_t)a2[v25];
          v21 += v30;
          v26 += HIDWORD(v30);
        }
        ++v25;
        --v29;
      }
      while (v28 != v25);
      v235[v20] = v21;
      v21 = v26 + HIDWORD(v21);
      ++v20;
      v24 = v236;
    }
    while (v20 < v236);
    if (v21 && v236 != 64)
    {
      v235[v236] = v21;
      v24 = ++v236;
    }
    if (v24 && (v31 = a3[64]) != 0)
    {
      v32 = 0;
      v33 = 0;
      if (v24 >= 0)
        v34 = v24;
      else
        v34 = -v24;
      if (v31 >= 0)
        v35 = v31;
      else
        v35 = -v31;
      v36 = v34 - 1;
      v37 = v36 + v35;
      if (v36 + v35 >= 0x40)
        v37 = 64;
      v238 = v37;
      v38 = a3;
      do
      {
        v40 = 0;
        v41 = 0;
        if (v32 >= v36)
          v42 = v36;
        else
          v42 = v32;
        v43 = ~v42;
        v44 = v235;
        do
        {
          if (v32 + v40 < v35)
          {
            v45 = v38[v40] * (unint64_t)*v44;
            v33 += v45;
            v41 += HIDWORD(v45);
          }
          --v40;
          ++v44;
        }
        while (v43 != v40);
        v237[v32] = v33;
        v33 = v41 + HIDWORD(v33);
        ++v32;
        v39 = v238;
        ++v38;
      }
      while (v32 < v238);
      if (v33 && v238 != 64)
      {
        v237[v238] = v33;
        v39 = ++v238;
      }
      if (v24 > 0 != v31 > 0)
        v238 = -v39;
    }
    else
    {
      v238 = 0;
    }
  }
  else
  {
    v236 = 0;
    v238 = 0;
  }
  v46 = a2 + 65;
  v47 = a2[129];
  if (v47)
  {
    v48 = 0;
    v49 = 0;
    if (v47 >= 0)
      v50 = v47;
    else
      v50 = -v47;
    v51 = v50 - 1 + v50;
    if (v51 >= 0x40)
      LODWORD(v51) = 64;
    v232 = v51;
    do
    {
      v53 = 0;
      v54 = 0;
      if (v48 >= v50 - 1)
        v55 = v50 - 1;
      else
        v55 = v48;
      v56 = v55 + 1;
      v57 = v48;
      do
      {
        if (v57 < v50)
        {
          v58 = v46[v57] * (unint64_t)v46[v53];
          v49 += v58;
          v54 += HIDWORD(v58);
        }
        ++v53;
        --v57;
      }
      while (v56 != v53);
      v231[v48] = v49;
      v49 = v54 + HIDWORD(v49);
      ++v48;
      v52 = v232;
    }
    while (v48 < v232);
    if (v49 && v232 != 64)
    {
      v231[v232] = v49;
      v52 = ++v232;
    }
    v59 = a3 + 65;
    if (v52 && (v60 = a3[129]) != 0)
    {
      v61 = 0;
      v62 = 0;
      if (v52 >= 0)
        v63 = v52;
      else
        v63 = -v52;
      if (v60 >= 0)
        v64 = v60;
      else
        v64 = -v60;
      v65 = v63 - 1;
      v66 = v65 + v64;
      if (v65 + v64 >= 0x40)
        v66 = 64;
      v234 = v66;
      v67 = a3 + 65;
      do
      {
        v69 = 0;
        v70 = 0;
        if (v61 >= v65)
          v71 = v65;
        else
          v71 = v61;
        v72 = ~v71;
        v73 = v231;
        do
        {
          if (v61 + v69 < v64)
          {
            v74 = v67[v69] * (unint64_t)*v73;
            v62 += v74;
            v70 += HIDWORD(v74);
          }
          --v69;
          ++v73;
        }
        while (v72 != v69);
        v233[v61] = v62;
        v62 = v70 + HIDWORD(v62);
        ++v61;
        v68 = v234;
        ++v67;
      }
      while (v61 < v234);
      if (v62 && v234 != 64)
      {
        v233[v234] = v62;
        v68 = ++v234;
      }
      if (v52 > 0 != v60 > 0)
        v234 = -v68;
    }
    else
    {
      v234 = 0;
    }
  }
  else
  {
    v232 = 0;
    v59 = a3 + 65;
    v234 = 0;
  }
  sub_223F1625C(__dst, v237, v233);
  v75 = a2[194];
  if (v75)
  {
    v76 = 0;
    v77 = 0;
    if (v75 >= 0)
      v78 = v75;
    else
      v78 = -v75;
    v79 = v78 - 1 + v78;
    if (v79 >= 0x40)
      LODWORD(v79) = 64;
    v228 = v79;
    do
    {
      v81 = 0;
      v82 = 0;
      if (v76 >= v78 - 1)
        v83 = v78 - 1;
      else
        v83 = v76;
      v84 = v83 + 1;
      v85 = v76;
      do
      {
        if (v85 < v78)
        {
          v86 = a2[v85 + 130] * (unint64_t)a2[v81 + 130];
          v77 += v86;
          v82 += HIDWORD(v86);
        }
        ++v81;
        --v85;
      }
      while (v84 != v81);
      v227[v76] = v77;
      v77 = v82 + HIDWORD(v77);
      ++v76;
      v80 = v228;
    }
    while (v76 < v228);
    if (v77 && v228 != 64)
    {
      v227[v228] = v77;
      v80 = ++v228;
    }
    if (v80 && (v87 = a3[194]) != 0)
    {
      v88 = 0;
      v89 = 0;
      if (v80 >= 0)
        v90 = v80;
      else
        v90 = -v80;
      if (v87 >= 0)
        v91 = v87;
      else
        v91 = -v87;
      v92 = v90 - 1;
      v93 = v92 + v91;
      if (v92 + v91 >= 0x40)
        v93 = 64;
      v230 = v93;
      v94 = a3 + 130;
      do
      {
        v96 = 0;
        v97 = 0;
        if (v88 >= v92)
          v98 = v92;
        else
          v98 = v88;
        v99 = ~v98;
        v100 = v227;
        do
        {
          if (v88 + v96 < v91)
          {
            v101 = v94[v96] * (unint64_t)*v100;
            v89 += v101;
            v97 += HIDWORD(v101);
          }
          --v96;
          ++v100;
        }
        while (v99 != v96);
        v229[v88] = v89;
        v89 = v97 + HIDWORD(v89);
        ++v88;
        v95 = v230;
        ++v94;
      }
      while (v88 < v230);
      if (v89 && v230 != 64)
      {
        v229[v230] = v89;
        v95 = ++v230;
      }
      if (v80 > 0 != v87 > 0)
        v230 = -v95;
    }
    else
    {
      v230 = 0;
    }
  }
  else
  {
    v228 = 0;
    v230 = 0;
  }
  sub_223F15F80(v240, __dst, v229);
  v102 = a2 + 195;
  v103 = a2[259];
  if (v103)
  {
    v104 = 0;
    v105 = 0;
    if (v103 >= 0)
      v106 = v103;
    else
      v106 = -v103;
    v107 = v106 - 1 + v106;
    if (v107 >= 0x40)
      LODWORD(v107) = 64;
    v224 = v107;
    do
    {
      v109 = 0;
      v110 = 0;
      if (v104 >= v106 - 1)
        v111 = v106 - 1;
      else
        v111 = v104;
      v112 = v111 + 1;
      v113 = v104;
      do
      {
        if (v113 < v106)
        {
          v114 = v102[v113] * (unint64_t)v102[v109];
          v105 += v114;
          v110 += HIDWORD(v114);
        }
        ++v109;
        --v113;
      }
      while (v112 != v109);
      v223[v104] = v105;
      v105 = v110 + HIDWORD(v105);
      ++v104;
      v108 = v224;
    }
    while (v104 < v224);
    if (v105 && v224 != 64)
    {
      v223[v224] = v105;
      v108 = ++v224;
    }
    v115 = a3 + 195;
    if (v108 && (v116 = a3[259]) != 0)
    {
      v117 = 0;
      v118 = 0;
      if (v108 >= 0)
        v119 = v108;
      else
        v119 = -v108;
      if (v116 >= 0)
        v120 = v116;
      else
        v120 = -v116;
      v121 = v119 - 1;
      v122 = v121 + v120;
      if (v121 + v120 >= 0x40)
        v122 = 64;
      v226 = v122;
      v123 = a3 + 195;
      do
      {
        v125 = 0;
        v126 = 0;
        if (v117 >= v121)
          v127 = v121;
        else
          v127 = v117;
        v128 = ~v127;
        v129 = v223;
        do
        {
          if (v117 + v125 < v120)
          {
            v130 = v123[v125] * (unint64_t)*v129;
            v118 += v130;
            v126 += HIDWORD(v130);
          }
          --v125;
          ++v129;
        }
        while (v128 != v125);
        v225[v117] = v118;
        v118 = v126 + HIDWORD(v118);
        ++v117;
        v124 = v226;
        ++v123;
      }
      while (v117 < v226);
      if (v118 && v226 != 64)
      {
        v225[v226] = v118;
        v124 = ++v226;
      }
      if (v108 > 0 != v116 > 0)
        v226 = -v124;
    }
    else
    {
      v226 = 0;
    }
  }
  else
  {
    v115 = a3 + 195;
    v226 = 0;
  }
  sub_223F15F80(__src, v240, v225);
  memcpy(a1, __src, 0x104uLL);
  a1[325] = 1;
  a1[389] = 1;
  v131 = a2[64];
  if (!v131)
    goto LABEL_221;
  v132 = a2[129];
  if (!v132)
    goto LABEL_221;
  v133 = 0;
  v134 = 0;
  if (v131 >= 0)
    v135 = v131;
  else
    v135 = -v131;
  if (v132 >= 0)
    v136 = v132;
  else
    v136 = -v132;
  v137 = v135 - 1;
  v138 = v135 - 1 + v136;
  if (v138 >= 0x40)
    LODWORD(v138) = 64;
  v241 = v138;
  do
  {
    v140 = 0;
    v141 = 0;
    if (v133 >= v137)
      v142 = v137;
    else
      v142 = v133;
    v143 = ~v142;
    v144 = a2;
    do
    {
      if (v133 + v140 < v136)
      {
        v145 = v46[v140] * (unint64_t)*v144;
        v134 += v145;
        v141 += HIDWORD(v145);
      }
      --v140;
      ++v144;
    }
    while (v143 != v140);
    v240[v133] = v134;
    v134 = v141 + HIDWORD(v134);
    ++v133;
    v139 = v241;
    ++v46;
  }
  while (v133 < v241);
  if (v134 && v241 != 64)
  {
    v240[v241] = v134;
    v139 = ++v241;
  }
  if (v131 > 0 != v132 > 0)
  {
    v139 = -v139;
    v241 = v139;
  }
  if (v139)
  {
    v146 = 0;
    v147 = 0;
    if (v139 >= 0)
      v148 = v139;
    else
      v148 = -v139;
    v149 = v148 - 1;
    if (v148 >= 0x40)
      LODWORD(v148) = 64;
    LODWORD(__src[32]) = v148;
    do
    {
      v151 = 0;
      v152 = 0;
      if (v146 >= v149)
        v153 = v149;
      else
        v153 = v146;
      v154 = v153 + 1;
      do
      {
        if (v146 == v151)
        {
          v155 = v240[v146];
          v147 += (2 * v155);
          v152 += v155 >> 31;
        }
        ++v151;
      }
      while (v154 != v151);
      *((_DWORD *)__src + v146) = v147;
      v147 = v152 + HIDWORD(v147);
      ++v146;
      v150 = __src[32];
    }
    while (v146 < SLODWORD(__src[32]));
    if (v147 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v147;
      v150 = ++LODWORD(__src[32]);
    }
    if (v139 <= 0)
      LODWORD(__src[32]) = -v150;
  }
  else
  {
LABEL_221:
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 65, __src, 0x104uLL);
  v156 = a3[64];
  if (v156 && (v157 = a3[129]) != 0)
  {
    v158 = 0;
    v159 = 0;
    if (v156 >= 0)
      v160 = v156;
    else
      v160 = -v156;
    if (v157 >= 0)
      v161 = v157;
    else
      v161 = -v157;
    v162 = v160 - 1;
    v163 = v162 + v161;
    if (v162 + v161 >= 0x40)
      v163 = 64;
    LODWORD(__src[32]) = v163;
    do
    {
      v165 = 0;
      v166 = 0;
      if (v158 >= v162)
        v167 = v162;
      else
        v167 = v158;
      v168 = ~v167;
      v169 = a3;
      do
      {
        if (v158 + v165 < v161)
        {
          v170 = v59[v165] * (unint64_t)*v169;
          v159 += v170;
          v166 += HIDWORD(v170);
        }
        --v165;
        ++v169;
      }
      while (v168 != v165);
      *((_DWORD *)__src + v158) = v159;
      v159 = v166 + HIDWORD(v159);
      ++v158;
      v164 = __src[32];
      ++v59;
    }
    while (v158 < SLODWORD(__src[32]));
    if (v159 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v159;
      v164 = ++LODWORD(__src[32]);
    }
    if (v156 > 0 != v157 > 0)
      LODWORD(__src[32]) = -v164;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 390, __src, 0x104uLL);
  v171 = a2[194];
  if (!v171)
    goto LABEL_286;
  v172 = a2[259];
  if (!v172)
    goto LABEL_286;
  v173 = 0;
  v174 = 0;
  if (v171 >= 0)
    v175 = v171;
  else
    v175 = -v171;
  if (v172 >= 0)
    v176 = v172;
  else
    v176 = -v172;
  v177 = v175 - 1;
  v178 = v175 - 1 + v176;
  if (v178 >= 0x40)
    LODWORD(v178) = 64;
  v241 = v178;
  do
  {
    v180 = 0;
    v181 = 0;
    if (v173 >= v177)
      v182 = v177;
    else
      v182 = v173;
    v183 = ~v182;
    v184 = a2 + 130;
    do
    {
      if (v173 + v180 < v176)
      {
        v185 = v102[v180] * (unint64_t)*v184;
        v174 += v185;
        v181 += HIDWORD(v185);
      }
      --v180;
      ++v184;
    }
    while (v183 != v180);
    v240[v173] = v174;
    v174 = v181 + HIDWORD(v174);
    ++v173;
    v179 = v241;
    ++v102;
  }
  while (v173 < v241);
  if (v174 && v241 != 64)
  {
    v240[v241] = v174;
    v179 = ++v241;
  }
  if (v171 > 0 != v172 > 0)
  {
    v179 = -v179;
    v241 = v179;
  }
  if (v179)
  {
    v186 = 0;
    v187 = 0;
    if (v179 >= 0)
      v188 = v179;
    else
      v188 = -v179;
    v189 = v188 - 1;
    if (v188 >= 0x40)
      LODWORD(v188) = 64;
    LODWORD(__src[32]) = v188;
    do
    {
      v191 = 0;
      v192 = 0;
      if (v186 >= v189)
        v193 = v189;
      else
        v193 = v186;
      v194 = v193 + 1;
      do
      {
        if (v186 == v191)
        {
          v195 = v240[v186];
          v187 += (2 * v195);
          v192 += v195 >> 31;
        }
        ++v191;
      }
      while (v194 != v191);
      *((_DWORD *)__src + v186) = v187;
      v187 = v192 + HIDWORD(v187);
      ++v186;
      v190 = __src[32];
    }
    while (v186 < SLODWORD(__src[32]));
    if (v187 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v187;
      v190 = ++LODWORD(__src[32]);
    }
    if (v179 >= 1)
      LODWORD(__src[32]) = -v190;
  }
  else
  {
LABEL_286:
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 130, __src, 0x104uLL);
  v196 = a3[194];
  if (v196 && (v197 = a3[259]) != 0)
  {
    v198 = 0;
    v199 = 0;
    if (v196 >= 0)
      v200 = v196;
    else
      v200 = -v196;
    if (v197 >= 0)
      v201 = v197;
    else
      v201 = -v197;
    v202 = v200 - 1;
    v203 = v202 + v201;
    if (v202 + v201 >= 0x40)
      v203 = 64;
    LODWORD(__src[32]) = v203;
    do
    {
      v205 = 0;
      v206 = 0;
      if (v198 >= v202)
        v207 = v202;
      else
        v207 = v198;
      v208 = ~v207;
      v209 = a3 + 130;
      do
      {
        if (v198 + v205 < v201)
        {
          v210 = v115[v205] * (unint64_t)*v209;
          v199 += v210;
          v206 += HIDWORD(v210);
        }
        --v205;
        ++v209;
      }
      while (v208 != v205);
      *((_DWORD *)__src + v198) = v199;
      v199 = v206 + HIDWORD(v199);
      ++v198;
      v204 = __src[32];
      ++v115;
    }
    while (v198 < SLODWORD(__src[32]));
    if (v199 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v199;
      v204 = ++LODWORD(__src[32]);
    }
    if (v196 > 0 != v197 > 0)
      LODWORD(__src[32]) = -v204;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(a1 + 455, __src, 0x104uLL);
  *(double *)&v215 = COERCE_DOUBLE(sub_223F1AE4C(a1, a1, a1 + 325, v211, v212, v213, v214));
  v217 = v216;
  v218 = *(double *)&v215;
  v219 = COERCE_DOUBLE(sub_223F1AD60(v244, (uint64_t)v243));
  v221 = v217 - v220;
  v222 = frexp(v218 / v219, (int *)&__src[1]);
  LODWORD(__src[1]) += v221;
  return *(_QWORD *)&v222;
}

long double sub_223F1AA90(double a1, double a2, double a3, double a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  int v8;
  uint64_t v9;
  double v10;
  int v11;
  double v12;
  _DWORD *v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  int v19;
  uint64_t v20;
  int v21;
  double v22;
  _DWORD *v23;
  double v24;
  long double v25;
  uint64_t v27;

  v8 = a6[64];
  if (v8 >= 0)
    v9 = v8;
  else
    v9 = -v8;
  v10 = 0.0;
  if ((_DWORD)v9)
  {
    if (v9 == 1)
    {
      v11 = 0;
      LODWORD(a1) = *a6;
      v12 = (double)*(unint64_t *)&a1;
    }
    else if (v9 == 2)
    {
      v11 = 0;
      LODWORD(a2) = *a6;
      LODWORD(a1) = a6[1];
      v12 = (double)*(unint64_t *)&a1 * 4294967300.0 + (double)*(unint64_t *)&a2;
    }
    else
    {
      v13 = &a6[v9];
      LODWORD(a3) = *(v13 - 2);
      LODWORD(a1) = *(v13 - 1);
      LODWORD(a4) = *(v13 - 3);
      v12 = ((double)*(unint64_t *)&a1 * 4294967300.0 + (double)*(unint64_t *)&a3) * 4294967300.0
          + (double)*(unint64_t *)&a4;
      v11 = 32 * v9 - 96;
    }
    if (v8 < 0)
      v12 = -v12;
  }
  else
  {
    v11 = 0;
    v12 = 0.0;
  }
  v14 = frexp(v12, (int *)&v27);
  v18 = v14;
  LODWORD(v27) = v27 + v11;
  v19 = a7[64];
  if (v19 >= 0)
    v20 = v19;
  else
    v20 = -v19;
  if ((_DWORD)v20)
  {
    if (v20 == 1)
    {
      v21 = 0;
      LODWORD(v14) = *a7;
      v22 = (double)*(unint64_t *)&v14;
    }
    else if (v20 == 2)
    {
      v21 = 0;
      LODWORD(v15) = *a7;
      LODWORD(v14) = a7[1];
      v22 = (double)*(unint64_t *)&v14 * 4294967300.0 + (double)v15;
    }
    else
    {
      v23 = &a7[v20];
      LODWORD(v16) = *(v23 - 2);
      LODWORD(v14) = *(v23 - 1);
      LODWORD(v17) = *(v23 - 3);
      v22 = ((double)*(unint64_t *)&v14 * 4294967300.0 + (double)v16) * 4294967300.0 + (double)v17;
      v21 = 32 * v20 - 96;
    }
    if (v19 >= 0)
      v10 = v22;
    else
      v10 = -v22;
  }
  else
  {
    v21 = 0;
  }
  v24 = frexp(v10, (int *)&v27);
  if ((((_DWORD)v27 + v21) & 1) != 0)
    v24 = v24 + v24;
  v25 = frexp(sqrt(v24), (int *)&v27);
  return frexp(v18 * v25, (int *)&v27);
}

uint64_t sub_223F1AC88(_DWORD *a1, long double *a2)
{
  long double v2;
  int v3;
  int v4;
  double v7;
  long double v9;
  int v10;
  long double v11;
  __int128 v12;

  v2 = *(double *)a1;
  if (*(double *)a1 == 0.0)
    return *(_OWORD *)a2;
  v3 = *((_DWORD *)a2 + 2);
  v4 = a1[2];
  if (v3 > v4 + 54)
    return *(_OWORD *)a2;
  v7 = *a2;
  if (*a2 == 0.0 || v4 > v3 + 54)
    return *(_OWORD *)a1;
  if (v4 >= v3)
  {
    v11 = ldexp(v2, v4 - v3);
    *(_QWORD *)&v12 = frexp(v7 + v11, (int *)&v12 + 2);
    v10 = DWORD2(v12) + v3;
  }
  else
  {
    v9 = ldexp(*a2, v3 - v4);
    *(_QWORD *)&v12 = frexp(v2 + v9, (int *)&v12 + 2);
    v10 = DWORD2(v12) + v4;
  }
  DWORD2(v12) = v10;
  return v12;
}

uint64_t sub_223F1AD60(_DWORD *a1, uint64_t a2)
{
  long double v2;
  int v3;
  int v4;
  long double v5;
  double v6;
  int v7;
  double v9;
  long double v11;
  __int128 v12;

  v2 = *(double *)a1;
  v3 = *(_DWORD *)(a2 + 8);
  if (*(double *)a1 == 0.0 || (v4 = a1[2], v3 > v4 + 54))
  {
    v5 = -*(double *)a2;
    goto LABEL_4;
  }
  v9 = *(double *)a2;
  if (*(double *)a2 != 0.0 && v4 <= v3 + 54)
  {
    if (v4 < v3)
    {
      v11 = ldexp(-v9, v3 - v4);
      v6 = frexp(v2 + v11, (int *)&v12 + 2);
      v7 = DWORD2(v12) + v4;
      goto LABEL_5;
    }
    v5 = ldexp(v2, v4 - v3) - v9;
LABEL_4:
    v6 = frexp(v5, (int *)&v12 + 2);
    v7 = DWORD2(v12) + v3;
LABEL_5:
    DWORD2(v12) = v7;
    return *(_QWORD *)&v6;
  }
  return *(_QWORD *)a1;
}

uint64_t sub_223F1AE4C(_DWORD *a1, unsigned int *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  double v11;
  _DWORD *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  long double v18;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  unint64_t v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  _DWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v100;
  unint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int *v140;
  unint64_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  uint64_t v146;
  int v147;
  int v148;
  double v149;
  double v150;
  int v151;
  int v152;
  long double v153;
  _DWORD v154[64];
  int v155;
  int v156[64];
  int v157;
  _DWORD v158[64];
  int v159;
  int v160[64];
  int v161;
  _DWORD v162[64];
  int v163;
  int v164[64];
  int v165;
  _DWORD __dst[64];
  int v167;
  int __src[66];
  long double v169[2];
  double v170[2];

  v10 = COERCE_DOUBLE(sub_223F19700((uint64_t)a1, a2, a3, a4, a5, a6, a7));
  v170[0] = v10;
  v170[1] = v11;
  v12 = a3 + 130;
  sub_223F1AA90(v13, v14, v15, v16, (uint64_t)a1, a2 + 130, a3 + 130);
  v169[0] = v17;
  v169[1] = v18;
  if (v10 >= 0.0 && v17 >= 0.0 || v10 <= 0.0 && v17 <= 0.0)
    return sub_223F1AC88(v170, v169);
  v20 = a2[64];
  if (v20)
  {
    v21 = 0;
    v22 = 0;
    if (v20 >= 0)
      v23 = v20;
    else
      v23 = -v20;
    v24 = v23 - 1 + v23;
    if (v24 >= 0x40)
      LODWORD(v24) = 64;
    v163 = v24;
    do
    {
      v26 = 0;
      v27 = 0;
      if (v21 >= v23 - 1)
        v28 = v23 - 1;
      else
        v28 = v21;
      v29 = v28 + 1;
      v30 = v21;
      do
      {
        if (v30 < v23)
        {
          v31 = a2[v30] * (unint64_t)a2[v26];
          v22 += v31;
          v27 += HIDWORD(v31);
        }
        ++v26;
        --v30;
      }
      while (v29 != v26);
      v162[v21] = v22;
      v22 = v27 + HIDWORD(v22);
      ++v21;
      v25 = v163;
    }
    while (v21 < v163);
    if (v22 && v163 != 64)
    {
      v162[v163] = v22;
      v25 = ++v163;
    }
    if (v25 && (v32 = a3[64]) != 0)
    {
      v33 = 0;
      v34 = 0;
      if (v25 >= 0)
        v35 = v25;
      else
        v35 = -v25;
      if (v32 >= 0)
        v36 = v32;
      else
        v36 = -v32;
      v37 = v35 - 1;
      v38 = v37 + v36;
      if (v37 + v36 >= 0x40)
        v38 = 64;
      v165 = v38;
      v39 = a3;
      do
      {
        v41 = 0;
        v42 = 0;
        if (v33 >= v37)
          v43 = v37;
        else
          v43 = v33;
        v44 = ~v43;
        v45 = v162;
        do
        {
          if (v33 + v41 < v36)
          {
            v46 = v39[v41] * (unint64_t)*v45;
            v34 += v46;
            v42 += HIDWORD(v46);
          }
          --v41;
          ++v45;
        }
        while (v44 != v41);
        v164[v33] = v34;
        v34 = v42 + HIDWORD(v34);
        ++v33;
        v40 = v165;
        ++v39;
      }
      while (v33 < v165);
      if (v34 && v165 != 64)
      {
        v164[v165] = v34;
        v40 = ++v165;
      }
      if (v25 > 0 != v32 > 0)
        v165 = -v40;
    }
    else
    {
      v165 = 0;
    }
  }
  else
  {
    v163 = 0;
    v165 = 0;
  }
  v47 = a2 + 65;
  v48 = a2[129];
  if (v48)
  {
    v49 = 0;
    v50 = 0;
    if (v48 >= 0)
      v51 = v48;
    else
      v51 = -v48;
    v52 = v51 - 1 + v51;
    if (v52 >= 0x40)
      LODWORD(v52) = 64;
    v159 = v52;
    do
    {
      v54 = 0;
      v55 = 0;
      if (v49 >= v51 - 1)
        v56 = v51 - 1;
      else
        v56 = v49;
      v57 = v56 + 1;
      v58 = v49;
      do
      {
        if (v58 < v51)
        {
          v59 = v47[v58] * (unint64_t)v47[v54];
          v50 += v59;
          v55 += HIDWORD(v59);
        }
        ++v54;
        --v58;
      }
      while (v57 != v54);
      v158[v49] = v50;
      v50 = v55 + HIDWORD(v50);
      ++v49;
      v53 = v159;
    }
    while (v49 < v159);
    if (v50 && v159 != 64)
    {
      v158[v159] = v50;
      v53 = ++v159;
    }
    v60 = a3 + 65;
    if (v53 && (v61 = a3[129]) != 0)
    {
      v62 = 0;
      v63 = 0;
      if (v53 >= 0)
        v64 = v53;
      else
        v64 = -v53;
      if (v61 >= 0)
        v65 = v61;
      else
        v65 = -v61;
      v66 = v64 - 1;
      v67 = v66 + v65;
      if (v66 + v65 >= 0x40)
        v67 = 64;
      v161 = v67;
      v68 = a3 + 65;
      do
      {
        v70 = 0;
        v71 = 0;
        if (v62 >= v66)
          v72 = v66;
        else
          v72 = v62;
        v73 = ~v72;
        v74 = v158;
        do
        {
          if (v62 + v70 < v65)
          {
            v75 = v68[v70] * (unint64_t)*v74;
            v63 += v75;
            v71 += HIDWORD(v75);
          }
          --v70;
          ++v74;
        }
        while (v73 != v70);
        v160[v62] = v63;
        v63 = v71 + HIDWORD(v63);
        ++v62;
        v69 = v161;
        ++v68;
      }
      while (v62 < v161);
      if (v63 && v161 != 64)
      {
        v160[v161] = v63;
        v69 = ++v161;
      }
      if (v53 > 0 != v61 > 0)
        v161 = -v69;
    }
    else
    {
      v161 = 0;
    }
  }
  else
  {
    v159 = 0;
    v60 = a3 + 65;
    v161 = 0;
  }
  sub_223F1625C(__dst, v164, v160);
  v76 = a2[194];
  if (!v76)
    goto LABEL_131;
  v77 = 0;
  v78 = 0;
  if (v76 >= 0)
    v79 = v76;
  else
    v79 = -v76;
  v80 = v79 - 1 + v79;
  if (v80 >= 0x40)
    LODWORD(v80) = 64;
  v155 = v80;
  do
  {
    v82 = 0;
    v83 = 0;
    if (v77 >= v79 - 1)
      v84 = v79 - 1;
    else
      v84 = v77;
    v85 = v84 + 1;
    v86 = v77;
    do
    {
      if (v86 < v79)
      {
        v87 = a2[v86 + 130] * (unint64_t)a2[v82 + 130];
        v78 += v87;
        v83 += HIDWORD(v87);
      }
      ++v82;
      --v86;
    }
    while (v85 != v82);
    v154[v77] = v78;
    v78 = v83 + HIDWORD(v78);
    ++v77;
    v81 = v155;
  }
  while (v77 < v155);
  if (v78 && v155 != 64)
  {
    v154[v155] = v78;
    v81 = ++v155;
  }
  if (v81 && (v88 = a3[194]) != 0)
  {
    v89 = 0;
    v90 = 0;
    if (v81 >= 0)
      v91 = v81;
    else
      v91 = -v81;
    if (v88 >= 0)
      v92 = v88;
    else
      v92 = -v88;
    v93 = v91 - 1;
    v94 = v93 + v92;
    if (v93 + v92 >= 0x40)
      v94 = 64;
    v157 = v94;
    do
    {
      v96 = 0;
      v97 = 0;
      if (v89 >= v93)
        v98 = v93;
      else
        v98 = v89;
      v99 = ~v98;
      v100 = v154;
      do
      {
        if (v89 + v96 < v92)
        {
          v101 = v12[v96] * (unint64_t)*v100;
          v90 += v101;
          v97 += HIDWORD(v101);
        }
        --v96;
        ++v100;
      }
      while (v99 != v96);
      v156[v89] = v90;
      v90 = v97 + HIDWORD(v90);
      ++v89;
      v95 = v157;
      ++v12;
    }
    while (v89 < v157);
    if (v90 && v157 != 64)
    {
      v156[v157] = v90;
      v95 = ++v157;
    }
    if (v81 > 0 != v88 > 0)
      v157 = -v95;
  }
  else
  {
LABEL_131:
    v157 = 0;
  }
  sub_223F15F80(__src, __dst, v156);
  memcpy(a1 + 195, __src, 0x104uLL);
  a1[520] = 1;
  a1[584] = 1;
  v102 = a2[64];
  if (!v102)
    goto LABEL_171;
  v103 = a2[129];
  if (!v103)
    goto LABEL_171;
  v104 = 0;
  v105 = 0;
  if (v102 >= 0)
    v106 = v102;
  else
    v106 = -v102;
  if (v103 >= 0)
    v107 = v103;
  else
    v107 = -v103;
  v108 = v106 - 1;
  v109 = v106 - 1 + v107;
  if (v109 >= 0x40)
    LODWORD(v109) = 64;
  v167 = v109;
  do
  {
    v111 = 0;
    v112 = 0;
    if (v104 >= v108)
      v113 = v108;
    else
      v113 = v104;
    v114 = ~v113;
    v115 = a2;
    do
    {
      if (v104 + v111 < v107)
      {
        v116 = v47[v111] * (unint64_t)*v115;
        v105 += v116;
        v112 += HIDWORD(v116);
      }
      --v111;
      ++v115;
    }
    while (v114 != v111);
    __dst[v104] = v105;
    v105 = v112 + HIDWORD(v105);
    ++v104;
    v110 = v167;
    ++v47;
  }
  while (v104 < v167);
  if (v105 && v167 != 64)
  {
    __dst[v167] = v105;
    v110 = ++v167;
  }
  if (v102 > 0 != v103 > 0)
  {
    v110 = -v110;
    v167 = v110;
  }
  if (v110)
  {
    v117 = 0;
    v118 = 0;
    if (v110 >= 0)
      v119 = v110;
    else
      v119 = -v110;
    v120 = v119 - 1;
    if (v119 >= 0x40)
      LODWORD(v119) = 64;
    __src[64] = v119;
    do
    {
      v122 = 0;
      v123 = 0;
      if (v117 >= v120)
        v124 = v120;
      else
        v124 = v117;
      v125 = v124 + 1;
      do
      {
        if (v117 == v122)
        {
          v126 = __dst[v117];
          v118 += (2 * v126);
          v123 += v126 >> 31;
        }
        ++v122;
      }
      while (v125 != v122);
      __src[v117] = v118;
      v118 = v123 + HIDWORD(v118);
      ++v117;
      v121 = __src[64];
    }
    while (v117 < __src[64]);
    if (v118 && __src[64] != 64)
    {
      __src[__src[64]] = v118;
      v121 = ++__src[64];
    }
    if (v110 <= 0)
      __src[64] = -v121;
  }
  else
  {
LABEL_171:
    __src[64] = 0;
  }
  memcpy(a1 + 260, __src, 0x104uLL);
  v127 = a3[64];
  if (v127 && (v128 = a3[129]) != 0)
  {
    v129 = 0;
    v130 = 0;
    if (v127 >= 0)
      v131 = v127;
    else
      v131 = -v127;
    if (v128 >= 0)
      v132 = v128;
    else
      v132 = -v128;
    v133 = v131 - 1;
    v134 = v133 + v132;
    if (v133 + v132 >= 0x40)
      v134 = 64;
    __src[64] = v134;
    do
    {
      v136 = 0;
      v137 = 0;
      if (v129 >= v133)
        v138 = v133;
      else
        v138 = v129;
      v139 = ~v138;
      v140 = a3;
      do
      {
        if (v129 + v136 < v132)
        {
          v141 = v60[v136] * (unint64_t)*v140;
          v130 += v141;
          v137 += HIDWORD(v141);
        }
        --v136;
        ++v140;
      }
      while (v139 != v136);
      __src[v129] = v130;
      v130 = v137 + HIDWORD(v130);
      ++v129;
      v135 = __src[64];
      ++v60;
    }
    while (v129 < __src[64]);
    if (v130 && __src[64] != 64)
    {
      __src[__src[64]] = v130;
      v135 = ++__src[64];
    }
    if (v127 > 0 != v128 > 0)
      __src[64] = -v135;
  }
  else
  {
    __src[64] = 0;
  }
  memcpy(a1 + 585, __src, 0x104uLL);
  *(double *)&v146 = COERCE_DOUBLE(sub_223F19700((uint64_t)a1, a1 + 195, a1 + 520, v142, v143, v144, v145));
  v148 = v147;
  v149 = *(double *)&v146;
  v150 = COERCE_DOUBLE(sub_223F1AD60(v170, (uint64_t)v169));
  v152 = v148 - v151;
  v153 = frexp(v149 / v150, &__src[2]);
  __src[2] += v152;
  return *(_QWORD *)&v153;
}

void sub_223F1B7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int *v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int *v137;
  unint64_t v138;
  _DWORD *v139;
  int v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _DWORD *v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int *v181;
  unint64_t v182;
  int v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  _BYTE *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unsigned int *v197;
  unint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unsigned int *v212;
  unint64_t v213;
  int v214;
  int v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  _BYTE *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int *v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  unsigned int v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unsigned int *v244;
  unint64_t v245;
  int v246;
  unint64_t v247;
  unsigned int v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unsigned int *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  double v267;
  int v268;
  double v269;
  int v270;
  int v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  int v278;
  double v279;
  int v280;
  int v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unsigned int v287;
  int *v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unsigned int *v294;
  unint64_t v295;
  int v296;
  int v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  int v303;
  int *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unsigned int *v310;
  unint64_t v311;
  int v312;
  int v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unsigned int v319;
  int *v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unsigned int *v326;
  unint64_t v327;
  int v328;
  int v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  int v335;
  int *v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unsigned int *v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  int v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  int v391;
  _DWORD *v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unsigned int *v398;
  unint64_t v399;
  int v400;
  int v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  unint64_t v406;
  int v407;
  _DWORD *v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unsigned int *v414;
  unint64_t v415;
  int v416;
  int v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  int v423;
  int *v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unsigned int *v430;
  unint64_t v431;
  int v432;
  int v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  int v439;
  _DWORD *v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unsigned int *v446;
  unint64_t v447;
  int v448;
  int v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  int v455;
  int *v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unsigned int *v462;
  unint64_t v463;
  int v464;
  int v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  int v471;
  _DWORD *v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unsigned int *v478;
  unint64_t v479;
  int v480;
  int v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  int *v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  unint64_t v493;
  int *v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  unint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  uint64_t v506;
  int v507;
  double v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  double v512;
  uint64_t v513;
  int v514;
  double v515;
  unsigned int *v516;
  double v517;
  int v518;
  int v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unint64_t v523;
  unint64_t v524;
  unsigned int v525;
  _DWORD *v526;
  unsigned int v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  unint64_t v531;
  int *v532;
  unint64_t v533;
  double v534;
  int v535;
  unint64_t v536;
  unint64_t v537;
  unint64_t v538;
  uint64_t v539;
  unint64_t v540;
  int v541;
  int v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unsigned int *v547;
  unint64_t v548;
  double v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  double v553;
  int v554;
  uint64_t v555;
  int v556;
  double v557;
  int *v558;
  double v559;
  int *v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  unint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  int v581;
  int *v582;
  double v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  uint64_t v587;
  double v588;
  int v589;
  double v590;
  _DWORD *v591;
  long double v592;
  unint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  int v603;
  int v604;
  unint64_t v605;
  unint64_t v606;
  uint64_t v607;
  unint64_t v608;
  unint64_t v609;
  int v610;
  unsigned int *v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  unsigned int *v617;
  unint64_t v618;
  unint64_t v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  double v629;
  double v630;
  double v631;
  double v632;
  uint64_t v633;
  int v634;
  int v635;
  unint64_t v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t v639;
  unint64_t v640;
  int v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unsigned int *v647;
  unint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  uint64_t v653;
  uint64_t v654;
  unint64_t v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  int v659;
  int v660;
  unint64_t v661;
  unint64_t v662;
  uint64_t v663;
  unint64_t v664;
  unint64_t v665;
  int v666;
  unsigned int *v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unsigned int *v673;
  unint64_t v674;
  unint64_t v675;
  unint64_t v676;
  unint64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  double v685;
  double v686;
  double v687;
  double v688;
  uint64_t v689;
  int v690;
  int v691;
  unint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  int v702;
  unint64_t v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  unint64_t v707;
  int v708;
  int *v709;
  int v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  unsigned int *v715;
  unint64_t v716;
  int v717;
  int v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  unint64_t v723;
  int v724;
  _DWORD *v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  unint64_t v730;
  unsigned int *v731;
  unint64_t v732;
  int v733;
  unint64_t v734;
  unint64_t v735;
  uint64_t v736;
  unint64_t v737;
  unint64_t v738;
  int v739;
  _DWORD *v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  unint64_t v745;
  int *v746;
  unint64_t v747;
  int v748;
  int v749;
  unint64_t v750;
  unint64_t v751;
  uint64_t v752;
  unint64_t v753;
  unint64_t v754;
  int v755;
  _DWORD *v756;
  int v757;
  uint64_t v758;
  uint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unsigned int *v762;
  unint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  unint64_t v773;
  unint64_t v774;
  unint64_t v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  int v784;
  unint64_t v785;
  unint64_t v786;
  unint64_t v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  int v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  unint64_t v800;
  int v801;
  int *v802;
  int v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  unint64_t v807;
  unsigned int *v808;
  unint64_t v809;
  int v810;
  int v811;
  unint64_t v812;
  unint64_t v813;
  uint64_t v814;
  unint64_t v815;
  unint64_t v816;
  int v817;
  unsigned int *v818;
  int v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  unint64_t v823;
  unsigned int *v824;
  unint64_t v825;
  int v826;
  unint64_t v827;
  unint64_t v828;
  uint64_t v829;
  unint64_t v830;
  unint64_t v831;
  int v832;
  unsigned int *v833;
  int v834;
  uint64_t v835;
  uint64_t v836;
  unint64_t v837;
  unint64_t v838;
  int *v839;
  unint64_t v840;
  int v841;
  int v842;
  unint64_t v843;
  unint64_t v844;
  uint64_t v845;
  unint64_t v846;
  unint64_t v847;
  int v848;
  _DWORD *v849;
  int v850;
  uint64_t v851;
  uint64_t v852;
  unint64_t v853;
  unint64_t v854;
  unsigned int *v855;
  unint64_t v856;
  int v857;
  int v858;
  unint64_t v859;
  unint64_t v860;
  uint64_t v861;
  unint64_t v862;
  unint64_t v863;
  unsigned int v864;
  int *v865;
  unsigned int v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  unint64_t v870;
  unsigned int *v871;
  unint64_t v872;
  uint64_t v873;
  int v874;
  unint64_t v875;
  unint64_t v876;
  unint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  unint64_t v882;
  unint64_t v883;
  unint64_t v884;
  unint64_t v885;
  unint64_t v886;
  unint64_t v887;
  unint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  unint64_t v892;
  unint64_t v893;
  unint64_t v894;
  int v895;
  int v896;
  unint64_t v897;
  unint64_t v898;
  uint64_t v899;
  unint64_t v900;
  unint64_t v901;
  int v902;
  int *v903;
  int v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  unint64_t v908;
  unsigned int *v909;
  unint64_t v910;
  int v911;
  unint64_t v912;
  unint64_t v913;
  uint64_t v914;
  unint64_t v915;
  unint64_t v916;
  int v917;
  int v918;
  uint64_t v919;
  uint64_t v920;
  unint64_t v921;
  unint64_t v922;
  unsigned int *v923;
  unint64_t v924;
  int v925;
  int v926;
  unint64_t v927;
  unint64_t v928;
  uint64_t v929;
  unint64_t v930;
  unint64_t v931;
  int v932;
  int v933;
  uint64_t v934;
  uint64_t v935;
  unint64_t v936;
  unint64_t v937;
  int *v938;
  unint64_t v939;
  int v940;
  int v941;
  unint64_t v942;
  unint64_t v943;
  uint64_t v944;
  unint64_t v945;
  unint64_t v946;
  int v947;
  _DWORD *v948;
  int v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  unint64_t v953;
  int *v954;
  unint64_t v955;
  unint64_t v956;
  unint64_t v957;
  unint64_t v958;
  unint64_t v959;
  uint64_t v960;
  uint64_t v961;
  unint64_t v962;
  unint64_t v963;
  unint64_t v964;
  unint64_t v965;
  unint64_t v966;
  unint64_t v967;
  unint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  unint64_t v972;
  unint64_t v973;
  unint64_t v974;
  unint64_t v975;
  int v976;
  int v977;
  unint64_t v978;
  unint64_t v979;
  uint64_t v980;
  unint64_t v981;
  unint64_t v982;
  int v983;
  int *v984;
  int v985;
  uint64_t v986;
  uint64_t v987;
  unint64_t v988;
  unint64_t v989;
  unsigned int *v990;
  unint64_t v991;
  int v992;
  unint64_t v993;
  unint64_t v994;
  uint64_t v995;
  unint64_t v996;
  unint64_t v997;
  int v998;
  unsigned int *v999;
  int v1000;
  uint64_t v1001;
  uint64_t v1002;
  unint64_t v1003;
  unint64_t v1004;
  unsigned int *v1005;
  unint64_t v1006;
  int v1007;
  int v1008;
  unint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  unint64_t v1013;
  int v1014;
  unsigned int *v1015;
  int v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  int *v1021;
  unint64_t v1022;
  int v1023;
  int v1024;
  unint64_t v1025;
  unint64_t v1026;
  uint64_t v1027;
  unint64_t v1028;
  unint64_t v1029;
  int v1030;
  _DWORD *v1031;
  int v1032;
  uint64_t v1033;
  uint64_t v1034;
  unint64_t v1035;
  unint64_t v1036;
  int *v1037;
  unint64_t v1038;
  int v1039;
  int v1040;
  unint64_t v1041;
  unint64_t v1042;
  uint64_t v1043;
  unint64_t v1044;
  unint64_t v1045;
  unsigned int v1046;
  int *v1047;
  unsigned int v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  unint64_t v1052;
  int *v1053;
  unint64_t v1054;
  double v1055;
  double v1056;
  double v1057;
  double v1058;
  uint64_t v1059;
  int v1060;
  double v1061;
  uint64_t v1062;
  int v1063;
  unint64_t v1064;
  unint64_t v1065;
  unint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  unint64_t v1071;
  unint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  unint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  unint64_t v1080;
  unint64_t v1081;
  unint64_t v1082;
  unint64_t v1083;
  int v1084;
  int v1085;
  unint64_t v1086;
  unint64_t v1087;
  uint64_t v1088;
  unint64_t v1089;
  unint64_t v1090;
  unint64_t v1091;
  int *v1092;
  int v1093;
  uint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  unint64_t v1097;
  unsigned int *v1098;
  unint64_t v1099;
  unint64_t v1100;
  unint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  unsigned int v1105;
  unsigned int v1106;
  uint64_t v1107;
  unint64_t v1108;
  unint64_t v1109;
  int *v1110;
  uint64_t v1111;
  int v1112;
  int v1113[64];
  int v1114;
  int v1115[64];
  int v1116;
  _DWORD v1117[64];
  int v1118;
  int v1119[64];
  int v1120;
  unsigned int v1121[64];
  int v1122;
  int v1123[65];
  unsigned int v1124[64];
  int v1125;
  int __dst[65];
  unsigned int v1127[65];
  int v1128[65];
  int v1129[65];
  _DWORD __src[65];
  _DWORD v1131[64];
  int v1132;
  int v1133[64];
  int v1134;
  int v1135;
  int v1136;
  int v1137;
  int v1138[65];
  _DWORD v1139[65];
  _BYTE v1140[260];
  _BYTE v1141[260];
  unsigned int v1142[65];
  _BYTE v1143[260];
  _BYTE v1144[260];
  _DWORD v1145[65];
  _BYTE v1146[260];
  _DWORD v1147[65];
  unsigned int v1148[64];
  int v1149;
  _DWORD v1150[64];
  int v1151;
  unsigned int v1152[64];
  int v1153;
  _DWORD v1154[64];
  int v1155;
  uint64_t v1156;

  v9 = MEMORY[0x24BDAC7A8]();
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = v11;
  v21 = v10;
  v23 = v22;
  v24 = (_DWORD *)v9;
  v1156 = *MEMORY[0x24BDAC8D0];
  v25 = *v10;
  v26 = v10[2];
  v27 = v25 <= v26;
  v28 = v25 - v26;
  if (v27)
  {
    if ((v28 & 0x8000000000000000) == 0)
    {
      v29 = 0;
      v31 = 1;
      v1153 = 0;
      v45 = v10[1];
      v46 = v10[3];
      v34 = __OFSUB__(v45, v46);
      v35 = v45 - v46;
      if (!((v35 < 0) ^ v34 | (v35 == 0)))
        goto LABEL_4;
      goto LABEL_11;
    }
    v30 = -v28;
    v29 = -1;
  }
  else
  {
    v29 = 1;
    LODWORD(v30) = v28;
  }
  v31 = 0;
  v1152[0] = v30;
  v1152[1] = 0;
  v1153 = v29;
  v32 = v10[1];
  v33 = v10[3];
  v34 = __OFSUB__(v32, v33);
  v35 = v32 - v33;
  if (!((v35 < 0) ^ v34 | (v35 == 0)))
  {
LABEL_4:
    LODWORD(v36) = 1;
    v37 = v35;
    goto LABEL_5;
  }
LABEL_11:
  if ((v35 & 0x8000000000000000) == 0)
  {
    v37 = 0;
    LODWORD(v36) = 0;
    v38 = 1;
    v1149 = 0;
    v47 = v11[2];
    v48 = *v11;
    v34 = __OFSUB__(v47, v48);
    v41 = v47 - v48;
    if (!((v41 < 0) ^ v34 | (v41 == 0)))
      goto LABEL_6;
    goto LABEL_14;
  }
  v37 = -v35;
  LODWORD(v36) = -1;
LABEL_5:
  v38 = 0;
  v1148[0] = v37;
  v1148[1] = 0;
  v1149 = v36;
  v39 = v11[2];
  v40 = *v11;
  v34 = __OFSUB__(v39, v40);
  v41 = v39 - v40;
  if (!((v41 < 0) ^ v34 | (v41 == 0)))
  {
LABEL_6:
    LODWORD(v42) = 1;
    LODWORD(v43) = v41;
LABEL_7:
    v44 = 0;
    v1154[0] = v43;
    v1154[1] = 0;
    goto LABEL_16;
  }
LABEL_14:
  if (v41 < 0)
  {
    v43 = -v41;
    LODWORD(v42) = -1;
    goto LABEL_7;
  }
  LODWORD(v42) = 0;
  v44 = 1;
LABEL_16:
  v1155 = v42;
  v49 = v11[3];
  v50 = v11[1];
  v27 = v49 <= v50;
  v51 = v49 - v50;
  if (v27)
  {
    if ((v51 & 0x8000000000000000) == 0)
    {
      v52 = 0;
      v54 = 1;
      v55 = v1154;
      v1151 = 0;
      if ((v38 | v44) == 1)
        goto LABEL_19;
      goto LABEL_22;
    }
    v53 = -v51;
    v52 = -1;
  }
  else
  {
    v52 = 1;
    LODWORD(v53) = v51;
  }
  v54 = 0;
  v1150[0] = v53;
  v1150[1] = 0;
  v55 = v1154;
  v1151 = v52;
  if ((v38 | v44) == 1)
  {
LABEL_19:
    v1142[64] = 0;
    goto LABEL_44;
  }
LABEL_22:
  v56 = 0;
  v57 = 0;
  if ((int)v42 >= 0)
    v42 = v42;
  else
    v42 = -(int)v42;
  if ((v36 & 0x80000000) == 0)
    v36 = v36;
  else
    v36 = -(int)v36;
  v58 = v42 - 1;
  v59 = v58 + v36;
  if (v58 + v36 >= 0x40)
    v59 = 64;
  v1142[64] = v59;
  do
  {
    v61 = 0;
    v62 = 0;
    if (v56 >= v58)
      v63 = v58;
    else
      v63 = v56;
    v64 = ~v63;
    v65 = v1154;
    do
    {
      if (v56 + v61 < v36)
      {
        v66 = v37 * *v65;
        v57 += v66;
        v62 += HIDWORD(v66);
      }
      --v61;
      ++v65;
    }
    while (v64 != v61);
    v1142[v56] = v57;
    v57 = v62 + HIDWORD(v57);
    ++v56;
    v60 = v1142[64];
  }
  while (v56 < (int)v1142[64]);
  if (v57 && v1142[64] != 64)
  {
    v1142[v1142[64]] = v57;
    v60 = ++v1142[64];
  }
  if (v35 > 0 != v41 > 0)
    v1142[64] = -v60;
LABEL_44:
  if ((v31 | v54) == 1)
  {
    v1138[64] = 0;
  }
  else
  {
    v67 = 0;
    v68 = 0;
    if (v29 >= 0)
      v69 = v29;
    else
      v69 = -v29;
    if (v52 >= 0)
      v70 = v52;
    else
      v70 = -v52;
    v71 = v69 - 1;
    v72 = v71 + v70;
    if (v71 + v70 >= 0x40)
      v72 = 64;
    v1138[64] = v72;
    v73 = v1150[0];
    do
    {
      v75 = 0;
      v76 = 0;
      if (v67 >= v71)
        v77 = v71;
      else
        v77 = v67;
      v78 = ~v77;
      v79 = v1152;
      do
      {
        if (v67 + v75 < v70)
        {
          v80 = v73 * (unint64_t)*v79;
          v68 += v80;
          v76 += HIDWORD(v80);
        }
        --v75;
        ++v79;
      }
      while (v78 != v75);
      v1138[v67] = v68;
      v68 = v76 + HIDWORD(v68);
      ++v67;
      v74 = v1138[64];
    }
    while (v67 < v1138[64]);
    if (v68 && v1138[64] != 64)
    {
      v1138[v1138[64]] = v68;
      v74 = ++v1138[64];
    }
    if (v28 > 0 != v51 > 0)
      v1138[64] = -v74;
  }
  sub_223F15F80(&v1135, v1142, v1138);
  if (v1137)
  {
    v81 = *v21;
    if (*v21 <= 0)
    {
      if (v81 < 0)
      {
        v83 = -v81;
        LODWORD(v82) = -1;
        v84 = v1149;
        if (v1149)
          goto LABEL_71;
      }
    }
    else
    {
      LODWORD(v82) = 1;
      v83 = *v21;
      v84 = v1149;
      if (v1149)
      {
LABEL_71:
        v85 = 0;
        v86 = 0;
        if (v84 >= 0)
          v87 = v84;
        else
          v87 = -v84;
        if ((v82 & 0x80000000) == 0)
          v82 = v82;
        else
          v82 = -(int)v82;
        v88 = v87 - 1;
        v89 = v88 + v82;
        if (v88 + v82 >= 0x40)
          v89 = 64;
        v1138[64] = v89;
        do
        {
          v91 = 0;
          v92 = 0;
          if (v85 >= v88)
            v93 = v88;
          else
            v93 = v85;
          v94 = ~v93;
          v95 = v1148;
          do
          {
            if (v85 + v91 < v82)
            {
              v96 = *v95 * (unint64_t)v83;
              v86 += v96;
              v92 += HIDWORD(v96);
            }
            --v91;
            ++v95;
          }
          while (v94 != v91);
          v1138[v85] = v86;
          v86 = v92 + HIDWORD(v86);
          ++v85;
          v90 = v1138[64];
        }
        while (v85 < v1138[64]);
        if (v86 && v1138[64] != 64)
        {
          v1138[v1138[64]] = v86;
          v90 = ++v1138[64];
        }
        if (v81 > 0 != v84 > 0)
          v1138[64] = -v90;
        v107 = v21[1];
        if (v107 > 0)
        {
LABEL_109:
          LODWORD(v108) = 1;
          v109 = v107;
          v110 = v1153;
          if (v1153)
            goto LABEL_110;
          goto LABEL_135;
        }
LABEL_134:
        if (v107 < 0)
        {
          v109 = -v107;
          LODWORD(v108) = -1;
          v110 = v1153;
          if (v1153)
          {
LABEL_110:
            v111 = 0;
            v112 = 0;
            if (v110 >= 0)
              v113 = v110;
            else
              v113 = -v110;
            if ((v108 & 0x80000000) == 0)
              v108 = v108;
            else
              v108 = -(int)v108;
            v114 = v113 - 1;
            v115 = v114 + v108;
            if (v114 + v108 >= 0x40)
              v115 = 64;
            v1134 = v115;
            do
            {
              v117 = 0;
              v118 = 0;
              if (v111 >= v114)
                v119 = v114;
              else
                v119 = v111;
              v120 = ~v119;
              v121 = v1152;
              do
              {
                if (v111 + v117 < v108)
                {
                  v122 = *v121 * (unint64_t)v109;
                  v112 += v122;
                  v118 += HIDWORD(v122);
                }
                --v117;
                ++v121;
              }
              while (v120 != v117);
              v1133[v111] = v112;
              v112 = v118 + HIDWORD(v112);
              ++v111;
              v116 = v1134;
            }
            while (v111 < v1134);
            if (v112 && v1134 != 64)
            {
              v1133[v1134] = v112;
              v116 = ++v1134;
            }
            if (v107 > 0 != v110 > 0)
              v1134 = -v116;
LABEL_136:
            sub_223F15F80(v1142, v1138, v1133);
            memcpy(v1146, v1142, sizeof(v1146));
            v123 = v20[3];
            if (v123 <= 0)
            {
              if (v123 < 0)
              {
                v125 = -v123;
                LODWORD(v124) = -1;
                v126 = v1155;
                if (v1155)
                  goto LABEL_138;
              }
            }
            else
            {
              LODWORD(v124) = 1;
              v125 = v20[3];
              v126 = v1155;
              if (v1155)
              {
LABEL_138:
                v127 = 0;
                v128 = 0;
                if (v126 >= 0)
                  v129 = v126;
                else
                  v129 = -v126;
                if ((v124 & 0x80000000) == 0)
                  v124 = v124;
                else
                  v124 = -(int)v124;
                v130 = v129 - 1;
                v131 = v130 + v124;
                if (v130 + v124 >= 0x40)
                  v131 = 64;
                v1138[64] = v131;
                do
                {
                  v133 = 0;
                  v134 = 0;
                  if (v127 >= v130)
                    v135 = v130;
                  else
                    v135 = v127;
                  v136 = ~v135;
                  v137 = v1154;
                  do
                  {
                    if (v127 + v133 < v124)
                    {
                      v138 = *v137 * (unint64_t)v125;
                      v128 += v138;
                      v134 += HIDWORD(v138);
                    }
                    --v133;
                    ++v137;
                  }
                  while (v136 != v133);
                  v1138[v127] = v128;
                  v128 = v134 + HIDWORD(v128);
                  ++v127;
                  v132 = v1138[64];
                }
                while (v127 < v1138[64]);
                if (v128 && v1138[64] != 64)
                {
                  v1138[v1138[64]] = v128;
                  v132 = ++v1138[64];
                }
                if (v123 > 0 != v126 > 0)
                  v1138[64] = -v132;
                v139 = v1150;
                v140 = v20[2];
                if (v140 > 0)
                {
LABEL_161:
                  LODWORD(v141) = 1;
                  v142 = v140;
                  v143 = v1151;
                  if (v1151)
                    goto LABEL_162;
                  goto LABEL_205;
                }
LABEL_204:
                if (v140 < 0)
                {
                  v142 = -v140;
                  LODWORD(v141) = -1;
                  v143 = v1151;
                  if (v1151)
                  {
LABEL_162:
                    v144 = 0;
                    v145 = 0;
                    if (v143 >= 0)
                      v146 = v143;
                    else
                      v146 = -v143;
                    if ((v141 & 0x80000000) == 0)
                      v141 = v141;
                    else
                      v141 = -(int)v141;
                    v147 = v146 - 1;
                    v148 = v147 + v141;
                    if (v147 + v141 >= 0x40)
                      v148 = 64;
                    v1134 = v148;
                    do
                    {
                      v150 = 0;
                      v151 = 0;
                      if (v144 >= v147)
                        v152 = v147;
                      else
                        v152 = v144;
                      v153 = ~v152;
                      v154 = v1150;
                      do
                      {
                        if (v144 + v150 < v141)
                        {
                          v155 = *v154 * (unint64_t)v142;
                          v145 += v155;
                          v151 += HIDWORD(v155);
                        }
                        --v150;
                        ++v154;
                      }
                      while (v153 != v150);
                      v1133[v144] = v145;
                      v145 = v151 + HIDWORD(v145);
                      ++v144;
                      v149 = v1134;
                    }
                    while (v144 < v1134);
                    if (v145 && v1134 != 64)
                    {
                      v1133[v1134] = v145;
                      v149 = ++v1134;
                    }
                    if (v140 > 0 != v143 > 0)
                      v1134 = -v149;
LABEL_206:
                    sub_223F15F80(v1142, v1138, v1133);
                    v166 = v1147;
                    memcpy(v1147, v1142, sizeof(v1147));
                    v167 = v1153;
                    if (v1153 && (v168 = v1147[64]) != 0)
                    {
                      v169 = 0;
                      v170 = 0;
                      if (v1153 >= 0)
                        v171 = v1153;
                      else
                        v171 = -v1153;
                      if (v1147[64] >= 0)
                        v172 = v1147[64];
                      else
                        v172 = -v1147[64];
                      v173 = v171 - 1;
                      v174 = v173 + v172;
                      if (v173 + v172 >= 0x40)
                        v174 = 64;
                      v1142[64] = v174;
                      v175 = v1147;
                      do
                      {
                        v177 = 0;
                        v178 = 0;
                        if (v169 >= v173)
                          v179 = v173;
                        else
                          v179 = v169;
                        v180 = ~v179;
                        v181 = v1152;
                        do
                        {
                          if (v169 + v177 < v172)
                          {
                            v182 = v175[v177] * (unint64_t)*v181;
                            v170 += v182;
                            v178 += HIDWORD(v182);
                          }
                          --v177;
                          ++v181;
                        }
                        while (v180 != v177);
                        v1142[v169] = v170;
                        v170 = v178 + HIDWORD(v170);
                        ++v169;
                        v176 = v1142[64];
                        ++v175;
                      }
                      while (v169 < (int)v1142[64]);
                      if (v170 && v1142[64] != 64)
                      {
                        v1142[v1142[64]] = v170;
                        v176 = ++v1142[64];
                      }
                      if (v167 > 0 != v168 > 0)
                        v1142[64] = -v176;
                    }
                    else
                    {
                      v1142[64] = 0;
                    }
                    v183 = v1155;
                    if (v1155 && (v184 = *(_DWORD *)&v1146[256]) != 0)
                    {
                      v185 = 0;
                      v186 = 0;
                      if (v1155 >= 0)
                        v187 = v1155;
                      else
                        v187 = -v1155;
                      if (*(int *)&v1146[256] >= 0)
                        v188 = *(unsigned int *)&v1146[256];
                      else
                        v188 = -*(_DWORD *)&v1146[256];
                      v189 = v187 - 1;
                      v190 = v189 + v188;
                      if (v189 + v188 >= 0x40)
                        v190 = 64;
                      v1138[64] = v190;
                      v191 = v1146;
                      do
                      {
                        v193 = 0;
                        v194 = 0;
                        if (v185 >= v189)
                          v195 = v189;
                        else
                          v195 = v185;
                        v196 = ~v195;
                        v197 = v1154;
                        do
                        {
                          if (v185 + v193 < v188)
                          {
                            v198 = *(unsigned int *)&v191[4 * v193] * (unint64_t)*v197;
                            v186 += v198;
                            v194 += HIDWORD(v198);
                          }
                          --v193;
                          ++v197;
                        }
                        while (v196 != v193);
                        v1138[v185] = v186;
                        v186 = v194 + HIDWORD(v186);
                        ++v185;
                        v192 = v1138[64];
                        v191 += 4;
                      }
                      while (v185 < v1138[64]);
                      if (v186 && v1138[64] != 64)
                      {
                        v1138[v1138[64]] = v186;
                        v192 = ++v1138[64];
                      }
                      if (v183 > 0 != v184 > 0)
                        v1138[64] = -v192;
                    }
                    else
                    {
                      v1138[64] = 0;
                    }
                    sub_223F1625C(v1133, (int *)v1142, v1138);
                    v199 = v1149;
                    if (v1149 && (v200 = v1147[64]) != 0)
                    {
                      v201 = 0;
                      v202 = 0;
                      if (v1149 >= 0)
                        v203 = v1149;
                      else
                        v203 = -v1149;
                      if (v1147[64] >= 0)
                        v204 = v1147[64];
                      else
                        v204 = -v1147[64];
                      v205 = v203 - 1;
                      v206 = v205 + v204;
                      if (v205 + v204 >= 0x40)
                        v206 = 64;
                      v1142[64] = v206;
                      do
                      {
                        v208 = 0;
                        v209 = 0;
                        if (v201 >= v205)
                          v210 = v205;
                        else
                          v210 = v201;
                        v211 = ~v210;
                        v212 = v1148;
                        do
                        {
                          if (v201 + v208 < v204)
                          {
                            v213 = v166[v208] * (unint64_t)*v212;
                            v202 += v213;
                            v209 += HIDWORD(v213);
                          }
                          --v208;
                          ++v212;
                        }
                        while (v211 != v208);
                        v1142[v201] = v202;
                        v202 = v209 + HIDWORD(v202);
                        ++v201;
                        v207 = v1142[64];
                        ++v166;
                      }
                      while (v201 < (int)v1142[64]);
                      if (v202 && v1142[64] != 64)
                      {
                        v1142[v1142[64]] = v202;
                        v207 = ++v1142[64];
                      }
                      if (v199 > 0 != v200 > 0)
                        v1142[64] = -v207;
                    }
                    else
                    {
                      v1142[64] = 0;
                    }
                    v214 = v1151;
                    if (v1151 && (v215 = *(_DWORD *)&v1146[256]) != 0)
                    {
                      v216 = 0;
                      v217 = 0;
                      if (v1151 >= 0)
                        v218 = v1151;
                      else
                        v218 = -v1151;
                      if (*(int *)&v1146[256] >= 0)
                        v219 = *(unsigned int *)&v1146[256];
                      else
                        v219 = -*(_DWORD *)&v1146[256];
                      v220 = v218 - 1;
                      v221 = v220 + v219;
                      if (v220 + v219 >= 0x40)
                        v221 = 64;
                      v1138[64] = v221;
                      v222 = v1146;
                      do
                      {
                        v224 = 0;
                        v225 = 0;
                        if (v216 >= v220)
                          v226 = v220;
                        else
                          v226 = v216;
                        v227 = ~v226;
                        v228 = v1150;
                        do
                        {
                          if (v216 + v224 < v219)
                          {
                            v229 = *(unsigned int *)&v222[4 * v224] * (unint64_t)*v228;
                            v217 += v229;
                            v225 += HIDWORD(v229);
                          }
                          --v224;
                          ++v228;
                        }
                        while (v227 != v224);
                        v1138[v216] = v217;
                        v217 = v225 + HIDWORD(v217);
                        ++v216;
                        v223 = v1138[64];
                        v222 += 4;
                      }
                      while (v216 < v1138[64]);
                      if (v217 && v1138[64] != 64)
                      {
                        v1138[v1138[64]] = v217;
                        v223 = ++v1138[64];
                      }
                      if (v214 > 0 != v215 > 0)
                        v1138[64] = -v223;
                    }
                    else
                    {
                      v1138[64] = 0;
                    }
                    sub_223F1625C(v1131, (int *)v1142, v1138);
                    v230 = *v23;
                    if (*v23 <= 0)
                    {
                      if (v230 < 0)
                      {
                        v232 = -v230;
                        LODWORD(v231) = -1;
                        v233 = v1137;
                        if (v1137)
                        {
LABEL_308:
                          v234 = 0;
                          v235 = 0;
                          if (v233 >= 0)
                            v236 = v233;
                          else
                            v236 = -v233;
                          if ((v231 & 0x80000000) == 0)
                            v231 = v231;
                          else
                            v231 = -(int)v231;
                          v237 = v236 - 1;
                          v238 = v237 + v231;
                          if (v237 + v231 >= 0x40)
                            v238 = 64;
                          v1142[64] = v238;
                          do
                          {
                            v240 = 0;
                            v241 = 0;
                            if (v234 >= v237)
                              v242 = v237;
                            else
                              v242 = v234;
                            v243 = ~v242;
                            v244 = (unsigned int *)&v1135;
                            do
                            {
                              if (v234 + v240 < v231)
                              {
                                v245 = *v244 * (unint64_t)v232;
                                v235 += v245;
                                v241 += HIDWORD(v245);
                              }
                              --v240;
                              ++v244;
                            }
                            while (v243 != v240);
                            v1142[v234] = v235;
                            v235 = v241 + HIDWORD(v235);
                            ++v234;
                            v239 = v1142[64];
                          }
                          while (v234 < (int)v1142[64]);
                          if (v235 && v1142[64] != 64)
                          {
                            v1142[v1142[64]] = v235;
                            v239 = ++v1142[64];
                          }
                          if (v230 > 0 != v233 > 0)
                            v1142[64] = -v239;
LABEL_335:
                          sub_223F15F80(__src, v1133, (int *)v1142);
                          v246 = v23[1];
                          if (v246 <= 0)
                          {
                            if (v246 < 0)
                            {
                              v248 = -v246;
                              LODWORD(v247) = -1;
                              v249 = v1137;
                              if (v1137)
                              {
LABEL_337:
                                v250 = 0;
                                v251 = 0;
                                if (v249 >= 0)
                                  v252 = v249;
                                else
                                  v252 = -v249;
                                if ((v247 & 0x80000000) == 0)
                                  v247 = v247;
                                else
                                  v247 = -(int)v247;
                                v253 = v252 - 1;
                                v254 = v253 + v247;
                                if (v253 + v247 >= 0x40)
                                  v254 = 64;
                                v1142[64] = v254;
                                do
                                {
                                  v256 = 0;
                                  v257 = 0;
                                  if (v250 >= v253)
                                    v258 = v253;
                                  else
                                    v258 = v250;
                                  v259 = ~v258;
                                  v260 = (unsigned int *)&v1135;
                                  do
                                  {
                                    if (v250 + v256 < v247)
                                    {
                                      v261 = *v260 * (unint64_t)v248;
                                      v251 += v261;
                                      v257 += HIDWORD(v261);
                                    }
                                    --v256;
                                    ++v260;
                                  }
                                  while (v259 != v256);
                                  v1142[v250] = v251;
                                  v251 = v257 + HIDWORD(v251);
                                  ++v250;
                                  v255 = v1142[64];
                                }
                                while (v250 < (int)v1142[64]);
                                if (v251 && v1142[64] != 64)
                                {
                                  v1142[v1142[64]] = v251;
                                  v255 = ++v1142[64];
                                }
                                if (v246 > 0 != v249 > 0)
                                  v1142[64] = -v255;
LABEL_361:
                                sub_223F15F80(v1129, v1131, (int *)v1142);
                                if (!(__src[64] | v1129[64]))
                                {
                                  if (v1137 >= 0)
                                    v266 = v1137;
                                  else
                                    v266 = -v1137;
                                  v267 = 0.0;
                                  if ((_DWORD)v266)
                                  {
                                    if (v266 == 1)
                                    {
                                      v268 = 0;
                                      LODWORD(v262) = v1135;
                                      v269 = (double)v262;
                                    }
                                    else if (v266 == 2)
                                    {
                                      v268 = 0;
                                      LODWORD(v262) = v1136;
                                      LODWORD(v263) = v1135;
                                      v269 = (double)v262 * 4294967300.0 + (double)v263;
                                    }
                                    else
                                    {
                                      v558 = &v1135 + v266;
                                      LODWORD(v264) = *(v558 - 2);
                                      LODWORD(v262) = *(v558 - 1);
                                      LODWORD(v265) = *(v558 - 3);
                                      v269 = ((double)v262 * 4294967300.0 + (double)v264) * 4294967300.0 + (double)v265;
                                      v268 = 32 * v266 - 96;
                                    }
                                    if (v1137 < 0)
                                      v269 = -v269;
                                    v549 = ldexp(v269, v268);
                                    v553 = v549;
                                    v554 = v1134;
                                    if (v1134 >= 0)
                                      v555 = v1134;
                                    else
                                      v555 = -v1134;
                                    if ((_DWORD)v555)
                                      goto LABEL_850;
                                  }
                                  else
                                  {
                                    v549 = ldexp(0.0, 0);
                                    v553 = v549;
                                    v554 = v1134;
                                    if (v1134 >= 0)
                                      v555 = v1134;
                                    else
                                      v555 = -v1134;
                                    if ((_DWORD)v555)
                                    {
LABEL_850:
                                      if (v555 == 1)
                                      {
                                        v556 = 0;
                                        LODWORD(v549) = v1133[0];
                                        v559 = (double)*(unint64_t *)&v549;
                                      }
                                      else if (v555 == 2)
                                      {
                                        v556 = 0;
                                        LODWORD(v549) = v1133[1];
                                        LODWORD(v550) = v1133[0];
                                        v559 = (double)*(unint64_t *)&v549 * 4294967300.0 + (double)v550;
                                      }
                                      else
                                      {
                                        v582 = &v1133[v555];
                                        LODWORD(v551) = *(v582 - 2);
                                        LODWORD(v549) = *(v582 - 1);
                                        LODWORD(v552) = *(v582 - 3);
                                        v559 = ((double)*(unint64_t *)&v549 * 4294967300.0 + (double)v551)
                                             * 4294967300.0
                                             + (double)v552;
                                        v556 = 32 * v555 - 96;
                                      }
                                      if (v554 >= 0)
                                        v267 = v559;
                                      else
                                        v267 = -v559;
                                      goto LABEL_900;
                                    }
                                  }
                                  v556 = 0;
LABEL_900:
                                  v583 = ldexp(v267, v556);
                                  if (v1132 >= 0)
                                    v587 = v1132;
                                  else
                                    v587 = -v1132;
                                  v588 = v583 / v553;
                                  if ((_DWORD)v587)
                                  {
                                    if (v587 == 1)
                                    {
                                      v589 = 0;
                                      LODWORD(v583) = v1131[0];
                                      v590 = (double)*(unint64_t *)&v583;
                                    }
                                    else if (v587 == 2)
                                    {
                                      v589 = 0;
                                      LODWORD(v583) = v1131[1];
                                      LODWORD(v584) = v1131[0];
                                      v590 = (double)*(unint64_t *)&v583 * 4294967300.0 + (double)v584;
                                    }
                                    else
                                    {
                                      v591 = &v1131[v587];
                                      LODWORD(v585) = *(v591 - 2);
                                      LODWORD(v583) = *(v591 - 1);
                                      LODWORD(v586) = *(v591 - 3);
                                      v590 = ((double)*(unint64_t *)&v583 * 4294967300.0 + (double)v585)
                                           * 4294967300.0
                                           + (double)v586;
                                      v589 = 32 * v587 - 96;
                                    }
                                    if (v1132 < 0)
                                      v590 = -v590;
                                  }
                                  else
                                  {
                                    v589 = 0;
                                    v590 = 0.0;
                                  }
                                  v592 = ldexp(v590, v589);
                                  *(double *)v17 = v588;
                                  *(long double *)(v17 + 8) = v592 / v553;
                                  *(double *)(v17 + 16) = v588;
                                  *(_BYTE *)(v17 + 24) = 1;
                                  return;
                                }
                                if (v1137 >= 0)
                                  v270 = -1;
                                else
                                  v270 = 1;
                                if (v19 == 2)
                                  v271 = v270;
                                else
                                  v271 = -v270;
                                v272 = 1;
                                if (v271 <= 0)
                                {
                                  if ((v271 & 0x80000000) == 0)
                                  {
                                    v272 = 0;
                                    goto LABEL_392;
                                  }
                                  v272 = -1;
                                }
                                v1128[0] = 1;
LABEL_392:
                                v1128[64] = v272;
                                memcpy(__dst, __src, sizeof(__dst));
                                v280 = __dst[64];
                                __dst[64] = -__dst[64];
                                v281 = v1155;
                                if (v1155 && v280)
                                {
                                  v282 = 0;
                                  v283 = 0;
                                  if (v1155 >= 0)
                                    v284 = v1155;
                                  else
                                    v284 = -v1155;
                                  if (v280 >= 0)
                                    v285 = v280;
                                  else
                                    v285 = -v280;
                                  v286 = v284 - 1;
                                  v287 = v286 + v285;
                                  if (v286 + v285 >= 0x40)
                                    v287 = 64;
                                  v1127[64] = v287;
                                  v288 = __dst;
                                  do
                                  {
                                    v290 = 0;
                                    v291 = 0;
                                    if (v282 >= v286)
                                      v292 = v286;
                                    else
                                      v292 = v282;
                                    v293 = ~v292;
                                    v294 = v1154;
                                    do
                                    {
                                      if (v282 + v290 < v285)
                                      {
                                        v295 = v288[v290] * (unint64_t)*v294;
                                        v283 += v295;
                                        v291 += HIDWORD(v295);
                                      }
                                      --v290;
                                      ++v294;
                                    }
                                    while (v293 != v290);
                                    v1127[v282] = v283;
                                    v283 = v291 + HIDWORD(v283);
                                    ++v282;
                                    v289 = v1127[64];
                                    ++v288;
                                  }
                                  while (v282 < (int)v1127[64]);
                                  if (v283 && v1127[64] != 64)
                                  {
                                    v1127[v1127[64]] = v283;
                                    v289 = ++v1127[64];
                                  }
                                  if (v280 < 0 != v281 > 0)
                                    v1127[64] = -v289;
                                }
                                else
                                {
                                  v1127[64] = 0;
                                }
                                memcpy(v1123, v1129, sizeof(v1123));
                                v296 = v1123[64];
                                v1123[64] = -v1123[64];
                                v297 = v1151;
                                if (v1151 && v296)
                                {
                                  v298 = 0;
                                  v299 = 0;
                                  if (v1151 >= 0)
                                    v300 = v1151;
                                  else
                                    v300 = -v1151;
                                  if (v296 >= 0)
                                    v301 = v296;
                                  else
                                    v301 = -v296;
                                  v302 = v300 - 1;
                                  v303 = v302 + v301;
                                  if (v302 + v301 >= 0x40)
                                    v303 = 64;
                                  v1125 = v303;
                                  v304 = v1123;
                                  do
                                  {
                                    v306 = 0;
                                    v307 = 0;
                                    if (v298 >= v302)
                                      v308 = v302;
                                    else
                                      v308 = v298;
                                    v309 = ~v308;
                                    v310 = v1150;
                                    do
                                    {
                                      if (v298 + v306 < v301)
                                      {
                                        v311 = v304[v306] * (unint64_t)*v310;
                                        v299 += v311;
                                        v307 += HIDWORD(v311);
                                      }
                                      --v306;
                                      ++v310;
                                    }
                                    while (v309 != v306);
                                    v1124[v298] = v299;
                                    v299 = v307 + HIDWORD(v299);
                                    ++v298;
                                    v305 = v1125;
                                    ++v304;
                                  }
                                  while (v298 < v1125);
                                  if (v299 && v1125 != 64)
                                  {
                                    v1124[v1125] = v299;
                                    v305 = ++v1125;
                                  }
                                  if (v296 < 0 != v297 > 0)
                                    v1125 = -v305;
                                }
                                else
                                {
                                  v1125 = 0;
                                }
                                sub_223F1625C(v1138, (int *)v1127, (int *)v1124);
                                memcpy(v1142, v1138, sizeof(v1142));
                                memcpy(__dst, __src, sizeof(__dst));
                                v312 = __dst[64];
                                __dst[64] = -__dst[64];
                                v313 = v1153;
                                if (v1153 && v312)
                                {
                                  v314 = 0;
                                  v315 = 0;
                                  if (v1153 >= 0)
                                    v316 = v1153;
                                  else
                                    v316 = -v1153;
                                  if (v312 >= 0)
                                    v317 = v312;
                                  else
                                    v317 = -v312;
                                  v318 = v316 - 1;
                                  v319 = v318 + v317;
                                  if (v318 + v317 >= 0x40)
                                    v319 = 64;
                                  v1127[64] = v319;
                                  v320 = __dst;
                                  do
                                  {
                                    v322 = 0;
                                    v323 = 0;
                                    if (v314 >= v318)
                                      v324 = v318;
                                    else
                                      v324 = v314;
                                    v325 = ~v324;
                                    v326 = v1152;
                                    do
                                    {
                                      if (v314 + v322 < v317)
                                      {
                                        v327 = v320[v322] * (unint64_t)*v326;
                                        v315 += v327;
                                        v323 += HIDWORD(v327);
                                      }
                                      --v322;
                                      ++v326;
                                    }
                                    while (v325 != v322);
                                    v1127[v314] = v315;
                                    v315 = v323 + HIDWORD(v315);
                                    ++v314;
                                    v321 = v1127[64];
                                    ++v320;
                                  }
                                  while (v314 < (int)v1127[64]);
                                  if (v315 && v1127[64] != 64)
                                  {
                                    v1127[v1127[64]] = v315;
                                    v321 = ++v1127[64];
                                  }
                                  if (v312 < 0 != v313 > 0)
                                    v1127[64] = -v321;
                                }
                                else
                                {
                                  v1127[64] = 0;
                                }
                                memcpy(v1123, v1129, sizeof(v1123));
                                v328 = v1123[64];
                                v1123[64] = -v1123[64];
                                v329 = v1149;
                                if (v1149 && v328)
                                {
                                  v330 = 0;
                                  v331 = 0;
                                  if (v1149 >= 0)
                                    v332 = v1149;
                                  else
                                    v332 = -v1149;
                                  if (v328 >= 0)
                                    v333 = v328;
                                  else
                                    v333 = -v328;
                                  v334 = v332 - 1;
                                  v335 = v334 + v333;
                                  if (v334 + v333 >= 0x40)
                                    v335 = 64;
                                  v1125 = v335;
                                  v336 = v1123;
                                  do
                                  {
                                    v338 = 0;
                                    v339 = 0;
                                    if (v330 >= v334)
                                      v340 = v334;
                                    else
                                      v340 = v330;
                                    v341 = ~v340;
                                    v342 = v1148;
                                    do
                                    {
                                      if (v330 + v338 < v333)
                                      {
                                        v343 = v336[v338] * (unint64_t)*v342;
                                        v331 += v343;
                                        v339 += HIDWORD(v343);
                                      }
                                      --v338;
                                      ++v342;
                                    }
                                    while (v341 != v338);
                                    v1124[v330] = v331;
                                    v331 = v339 + HIDWORD(v331);
                                    ++v330;
                                    v337 = v1125;
                                    ++v336;
                                  }
                                  while (v330 < v1125);
                                  if (v331 && v1125 != 64)
                                  {
                                    v1124[v1125] = v331;
                                    v337 = ++v1125;
                                  }
                                  if (v328 < 0 != v329 > 0)
                                    v1125 = -v337;
                                }
                                else
                                {
                                  v1125 = 0;
                                }
                                sub_223F1625C(v1138, (int *)v1127, (int *)v1124);
                                memcpy(v1143, v1138, sizeof(v1143));
                                memcpy(v1144, v1128, sizeof(v1144));
                                v1145[64] = 0;
                                if (v1153)
                                {
                                  v344 = 0;
                                  v345 = 0;
                                  if (v1153 >= 0)
                                    v346 = v1153;
                                  else
                                    v346 = -v1153;
                                  v347 = v346 - 1 + v346;
                                  if (v347 >= 0x40)
                                    LODWORD(v347) = 64;
                                  __dst[64] = v347;
                                  do
                                  {
                                    v348 = 0;
                                    v349 = 0;
                                    if (v344 >= v346 - 1)
                                      v350 = v346 - 1;
                                    else
                                      v350 = v344;
                                    v351 = v350 + 1;
                                    v352 = v344;
                                    do
                                    {
                                      if (v352 < v346)
                                      {
                                        v353 = v1152[v352] * (unint64_t)v1152[v348];
                                        v345 += v353;
                                        v349 += HIDWORD(v353);
                                      }
                                      ++v348;
                                      --v352;
                                    }
                                    while (v351 != v348);
                                    __dst[v344] = v345;
                                    v345 = v349 + HIDWORD(v345);
                                    ++v344;
                                  }
                                  while (v344 < __dst[64]);
                                  if (v345 && __dst[64] != 64)
                                    __dst[__dst[64]++] = v345;
                                  LODWORD(v354) = v1149;
                                  if (v1149)
                                    goto LABEL_511;
                                }
                                else
                                {
                                  __dst[64] = 0;
                                  LODWORD(v354) = v1149;
                                  if (v1149)
                                  {
LABEL_511:
                                    v355 = 0;
                                    v356 = 0;
                                    if ((v354 & 0x80000000) == 0)
                                      v354 = v354;
                                    else
                                      v354 = -(int)v354;
                                    v357 = v354 - 1 + v354;
                                    if (v357 >= 0x40)
                                      LODWORD(v357) = 64;
                                    v1125 = v357;
                                    do
                                    {
                                      v358 = 0;
                                      v359 = 0;
                                      if (v355 >= v354 - 1)
                                        v360 = v354 - 1;
                                      else
                                        v360 = v355;
                                      v361 = v360 + 1;
                                      v362 = v355;
                                      do
                                      {
                                        if (v362 < v354)
                                        {
                                          v363 = v1148[v362] * (unint64_t)v1148[v358];
                                          v356 += v363;
                                          v359 += HIDWORD(v363);
                                        }
                                        ++v358;
                                        --v362;
                                      }
                                      while (v361 != v358);
                                      v1124[v355] = v356;
                                      v356 = v359 + HIDWORD(v356);
                                      ++v355;
                                    }
                                    while (v355 < v1125);
                                    if (v356 && v1125 != 64)
                                      v1124[v1125++] = v356;
LABEL_530:
                                    sub_223F1625C(v1127, __dst, (int *)v1124);
                                    memcpy(v1138, v1127, sizeof(v1138));
                                    if (v1155)
                                    {
                                      v364 = 0;
                                      v365 = 0;
                                      if (v1155 >= 0)
                                        v366 = v1155;
                                      else
                                        v366 = -v1155;
                                      v367 = v366 - 1 + v366;
                                      if (v367 >= 0x40)
                                        LODWORD(v367) = 64;
                                      __dst[64] = v367;
                                      do
                                      {
                                        v368 = 0;
                                        v369 = 0;
                                        if (v364 >= v366 - 1)
                                          v370 = v366 - 1;
                                        else
                                          v370 = v364;
                                        v371 = v370 + 1;
                                        v372 = v364;
                                        do
                                        {
                                          if (v372 < v366)
                                          {
                                            v373 = v1154[v372]
                                                 * (unint64_t)v1154[v368];
                                            v365 += v373;
                                            v369 += HIDWORD(v373);
                                          }
                                          ++v368;
                                          --v372;
                                        }
                                        while (v371 != v368);
                                        __dst[v364] = v365;
                                        v365 = v369 + HIDWORD(v365);
                                        ++v364;
                                      }
                                      while (v364 < __dst[64]);
                                      if (v365 && __dst[64] != 64)
                                        __dst[__dst[64]++] = v365;
                                      LODWORD(v374) = v1151;
                                      if (v1151)
                                        goto LABEL_549;
                                    }
                                    else
                                    {
                                      __dst[64] = 0;
                                      LODWORD(v374) = v1151;
                                      if (v1151)
                                      {
LABEL_549:
                                        v375 = 0;
                                        v376 = 0;
                                        if ((v374 & 0x80000000) == 0)
                                          v374 = v374;
                                        else
                                          v374 = -(int)v374;
                                        v377 = v374 - 1 + v374;
                                        if (v377 >= 0x40)
                                          LODWORD(v377) = 64;
                                        v1125 = v377;
                                        do
                                        {
                                          v378 = 0;
                                          v379 = 0;
                                          if (v375 >= v374 - 1)
                                            v380 = v374 - 1;
                                          else
                                            v380 = v375;
                                          v381 = v380 + 1;
                                          v382 = v375;
                                          do
                                          {
                                            if (v382 < v374)
                                            {
                                              v383 = v1150[v382]
                                                   * (unint64_t)v1150[v378];
                                              v376 += v383;
                                              v379 += HIDWORD(v383);
                                            }
                                            ++v378;
                                            --v382;
                                          }
                                          while (v381 != v378);
                                          v1124[v375] = v376;
                                          v376 = v379 + HIDWORD(v376);
                                          ++v375;
                                        }
                                        while (v375 < v1125);
                                        if (v376 && v1125 != 64)
                                          v1124[v1125++] = v376;
LABEL_568:
                                        sub_223F1625C(v1127, __dst, (int *)v1124);
                                        memcpy(v1139, v1127, sizeof(v1139));
                                        v384 = v1153;
                                        if (v1153 && (v385 = v1155) != 0)
                                        {
                                          v386 = 0;
                                          v387 = 0;
                                          if (v1153 >= 0)
                                            v388 = v1153;
                                          else
                                            v388 = -v1153;
                                          if (v1155 >= 0)
                                            v389 = v1155;
                                          else
                                            v389 = -v1155;
                                          v390 = v388 - 1;
                                          v391 = v390 + v389;
                                          if (v390 + v389 >= 0x40)
                                            v391 = 64;
                                          __dst[64] = v391;
                                          v392 = v1154;
                                          do
                                          {
                                            v394 = 0;
                                            v395 = 0;
                                            if (v386 >= v390)
                                              v396 = v390;
                                            else
                                              v396 = v386;
                                            v397 = ~v396;
                                            v398 = v1152;
                                            do
                                            {
                                              if (v386 + v394 < v389)
                                              {
                                                v399 = v392[v394] * (unint64_t)*v398;
                                                v387 += v399;
                                                v395 += HIDWORD(v399);
                                              }
                                              --v394;
                                              ++v398;
                                            }
                                            while (v397 != v394);
                                            __dst[v386] = v387;
                                            v387 = v395 + HIDWORD(v387);
                                            ++v386;
                                            v393 = __dst[64];
                                            ++v392;
                                          }
                                          while (v386 < __dst[64]);
                                          if (v387 && __dst[64] != 64)
                                          {
                                            __dst[__dst[64]] = v387;
                                            v393 = ++__dst[64];
                                          }
                                          if (v384 > 0 != v385 > 0)
                                            __dst[64] = -v393;
                                        }
                                        else
                                        {
                                          __dst[64] = 0;
                                        }
                                        v400 = v1149;
                                        if (v1149 && (v401 = v1151) != 0)
                                        {
                                          v402 = 0;
                                          v403 = 0;
                                          if (v1149 >= 0)
                                            v404 = v1149;
                                          else
                                            v404 = -v1149;
                                          if (v1151 >= 0)
                                            v405 = v1151;
                                          else
                                            v405 = -v1151;
                                          v406 = v404 - 1;
                                          v407 = v406 + v405;
                                          if (v406 + v405 >= 0x40)
                                            v407 = 64;
                                          v1125 = v407;
                                          v408 = v1150;
                                          do
                                          {
                                            v410 = 0;
                                            v411 = 0;
                                            if (v402 >= v406)
                                              v412 = v406;
                                            else
                                              v412 = v402;
                                            v413 = ~v412;
                                            v414 = v1148;
                                            do
                                            {
                                              if (v402 + v410 < v405)
                                              {
                                                v415 = v408[v410] * (unint64_t)*v414;
                                                v403 += v415;
                                                v411 += HIDWORD(v415);
                                              }
                                              --v410;
                                              ++v414;
                                            }
                                            while (v413 != v410);
                                            v1124[v402] = v403;
                                            v403 = v411 + HIDWORD(v403);
                                            ++v402;
                                            v409 = v1125;
                                            ++v408;
                                          }
                                          while (v402 < v1125);
                                          if (v403 && v1125 != 64)
                                          {
                                            v1124[v1125] = v403;
                                            v409 = ++v1125;
                                          }
                                          if (v400 > 0 != v401 > 0)
                                            v1125 = -v409;
                                        }
                                        else
                                        {
                                          v1125 = 0;
                                        }
                                        sub_223F1625C(v1127, __dst, (int *)v1124);
                                        memcpy(v1140, v1127, sizeof(v1140));
                                        v416 = v1153;
                                        if (v1153 && (v417 = v1129[64]) != 0)
                                        {
                                          v418 = 0;
                                          v419 = 0;
                                          if (v1153 >= 0)
                                            v420 = v1153;
                                          else
                                            v420 = -v1153;
                                          if (v1129[64] >= 0)
                                            v421 = v1129[64];
                                          else
                                            v421 = -v1129[64];
                                          v422 = v420 - 1;
                                          v423 = v422 + v421;
                                          if (v422 + v421 >= 0x40)
                                            v423 = 64;
                                          v1123[64] = v423;
                                          v424 = v1129;
                                          do
                                          {
                                            v426 = 0;
                                            v427 = 0;
                                            if (v418 >= v422)
                                              v428 = v422;
                                            else
                                              v428 = v418;
                                            v429 = ~v428;
                                            v430 = v1152;
                                            do
                                            {
                                              if (v418 + v426 < v421)
                                              {
                                                v431 = v424[v426] * (unint64_t)*v430;
                                                v419 += v431;
                                                v427 += HIDWORD(v431);
                                              }
                                              --v426;
                                              ++v430;
                                            }
                                            while (v429 != v426);
                                            v1123[v418] = v419;
                                            v419 = v427 + HIDWORD(v419);
                                            ++v418;
                                            v425 = v1123[64];
                                            ++v424;
                                          }
                                          while (v418 < v1123[64]);
                                          if (v419 && v1123[64] != 64)
                                          {
                                            v1123[v1123[64]] = v419;
                                            v425 = ++v1123[64];
                                          }
                                          if (v416 > 0 != v417 > 0)
                                            v1123[64] = -v425;
                                        }
                                        else
                                        {
                                          v1123[64] = 0;
                                        }
                                        v432 = v1149;
                                        if (v1149 && (v433 = __src[64]) != 0)
                                        {
                                          v434 = 0;
                                          v435 = 0;
                                          if (v1149 >= 0)
                                            v436 = v1149;
                                          else
                                            v436 = -v1149;
                                          if (__src[64] >= 0)
                                            v437 = __src[64];
                                          else
                                            v437 = -__src[64];
                                          v438 = v436 - 1;
                                          v439 = v438 + v437;
                                          if (v438 + v437 >= 0x40)
                                            v439 = 64;
                                          v1122 = v439;
                                          v440 = __src;
                                          do
                                          {
                                            v442 = 0;
                                            v443 = 0;
                                            if (v434 >= v438)
                                              v444 = v438;
                                            else
                                              v444 = v434;
                                            v445 = ~v444;
                                            v446 = v1148;
                                            do
                                            {
                                              if (v434 + v442 < v437)
                                              {
                                                v447 = v440[v442] * (unint64_t)*v446;
                                                v435 += v447;
                                                v443 += HIDWORD(v447);
                                              }
                                              --v442;
                                              ++v446;
                                            }
                                            while (v445 != v442);
                                            v1121[v434] = v435;
                                            v435 = v443 + HIDWORD(v435);
                                            ++v434;
                                            v441 = v1122;
                                            ++v440;
                                          }
                                          while (v434 < v1122);
                                          if (v435 && v1122 != 64)
                                          {
                                            v1121[v1122] = v435;
                                            v441 = ++v1122;
                                          }
                                          if (v432 > 0 != v433 > 0)
                                            v1122 = -v441;
                                        }
                                        else
                                        {
                                          v1122 = 0;
                                        }
                                        sub_223F15F80(v1124, v1123, (int *)v1121);
                                        v448 = v1155;
                                        if (v1155 && (v449 = v1129[64]) != 0)
                                        {
                                          v450 = 0;
                                          v451 = 0;
                                          if (v1155 >= 0)
                                            v452 = v1155;
                                          else
                                            v452 = -v1155;
                                          if (v1129[64] >= 0)
                                            v453 = v1129[64];
                                          else
                                            v453 = -v1129[64];
                                          v454 = v452 - 1;
                                          v455 = v454 + v453;
                                          if (v454 + v453 >= 0x40)
                                            v455 = 64;
                                          v1118 = v455;
                                          v456 = v1129;
                                          do
                                          {
                                            v458 = 0;
                                            v459 = 0;
                                            if (v450 >= v454)
                                              v460 = v454;
                                            else
                                              v460 = v450;
                                            v461 = ~v460;
                                            v462 = v1154;
                                            do
                                            {
                                              if (v450 + v458 < v453)
                                              {
                                                v463 = v456[v458] * (unint64_t)*v462;
                                                v451 += v463;
                                                v459 += HIDWORD(v463);
                                              }
                                              --v458;
                                              ++v462;
                                            }
                                            while (v461 != v458);
                                            v1117[v450] = v451;
                                            v451 = v459 + HIDWORD(v451);
                                            ++v450;
                                            v457 = v1118;
                                            ++v456;
                                          }
                                          while (v450 < v1118);
                                          if (v451 && v1118 != 64)
                                          {
                                            v1117[v1118] = v451;
                                            v457 = ++v1118;
                                          }
                                          if (v448 > 0 != v449 > 0)
                                            v1118 = -v457;
                                        }
                                        else
                                        {
                                          v1118 = 0;
                                        }
                                        v464 = v1151;
                                        if (v1151 && (v465 = __src[64]) != 0)
                                        {
                                          v466 = 0;
                                          v467 = 0;
                                          if (v1151 >= 0)
                                            v468 = v1151;
                                          else
                                            v468 = -v1151;
                                          if (__src[64] >= 0)
                                            v469 = __src[64];
                                          else
                                            v469 = -__src[64];
                                          v470 = v468 - 1;
                                          v471 = v470 + v469;
                                          if (v470 + v469 >= 0x40)
                                            v471 = 64;
                                          v1116 = v471;
                                          v472 = __src;
                                          do
                                          {
                                            v474 = 0;
                                            v475 = 0;
                                            if (v466 >= v470)
                                              v476 = v470;
                                            else
                                              v476 = v466;
                                            v477 = ~v476;
                                            v478 = v1150;
                                            do
                                            {
                                              if (v466 + v474 < v469)
                                              {
                                                v479 = v472[v474] * (unint64_t)*v478;
                                                v467 += v479;
                                                v475 += HIDWORD(v479);
                                              }
                                              --v474;
                                              ++v478;
                                            }
                                            while (v477 != v474);
                                            v1115[v466] = v467;
                                            v467 = v475 + HIDWORD(v467);
                                            ++v466;
                                            v473 = v1116;
                                            ++v472;
                                          }
                                          while (v466 < v1116);
                                          if (v467 && v1116 != 64)
                                          {
                                            v1115[v1116] = v467;
                                            v473 = ++v1116;
                                          }
                                          if (v464 > 0 != v465 > 0)
                                            v1116 = -v473;
                                        }
                                        else
                                        {
                                          v1116 = 0;
                                        }
                                        sub_223F15F80(v1119, v1117, v1115);
                                        v480 = v1125;
                                        if (!v1125)
                                          goto LABEL_757;
                                        v481 = v1120;
                                        if (!v1120)
                                          goto LABEL_757;
                                        v482 = 0;
                                        v483 = 0;
                                        if (v1125 >= 0)
                                          v484 = v1125;
                                        else
                                          v484 = -v1125;
                                        if (v1120 >= 0)
                                          v485 = v1120;
                                        else
                                          v485 = -v1120;
                                        v486 = v484 - 1;
                                        v487 = v484 - 1 + v485;
                                        if (v487 >= 0x40)
                                          LODWORD(v487) = 64;
                                        __dst[64] = v487;
                                        v488 = v1119;
                                        do
                                        {
                                          v490 = 0;
                                          v491 = 0;
                                          if (v482 >= v486)
                                            v492 = v486;
                                          else
                                            v492 = v482;
                                          v493 = ~v492;
                                          v494 = (int *)v1124;
                                          do
                                          {
                                            if (v482 + v490 < v485)
                                            {
                                              v495 = v488[v490] * (unint64_t)*v494;
                                              v483 += v495;
                                              v491 += HIDWORD(v495);
                                            }
                                            --v490;
                                            ++v494;
                                          }
                                          while (v493 != v490);
                                          __dst[v482] = v483;
                                          v483 = v491 + HIDWORD(v483);
                                          ++v482;
                                          v489 = __dst[64];
                                          ++v488;
                                        }
                                        while (v482 < __dst[64]);
                                        if (v483 && __dst[64] != 64)
                                        {
                                          __dst[__dst[64]] = v483;
                                          v489 = ++__dst[64];
                                        }
                                        if (v480 > 0 != v481 > 0)
                                        {
                                          v489 = -v489;
                                          __dst[64] = v489;
                                        }
                                        if (v489)
                                        {
                                          v496 = 0;
                                          v497 = 0;
                                          if (v489 >= 0)
                                            v498 = v489;
                                          else
                                            v498 = -v489;
                                          v499 = v498 - 1;
                                          if (v498 >= 0x40)
                                            LODWORD(v498) = 64;
                                          v1127[64] = v498;
                                          do
                                          {
                                            v501 = 0;
                                            v502 = 0;
                                            if (v496 >= v499)
                                              v503 = v499;
                                            else
                                              v503 = v496;
                                            v504 = v503 + 1;
                                            do
                                            {
                                              if (v496 == v501)
                                              {
                                                v505 = __dst[v496];
                                                v497 += (2 * v505);
                                                v502 += v505 >> 31;
                                              }
                                              ++v501;
                                            }
                                            while (v504 != v501);
                                            v1127[v496] = v497;
                                            v497 = v502 + HIDWORD(v497);
                                            ++v496;
                                            v500 = v1127[64];
                                          }
                                          while (v496 < (int)v1127[64]);
                                          if (v497 && v1127[64] != 64)
                                          {
                                            v1127[v1127[64]] = v497;
                                            v500 = ++v1127[64];
                                          }
                                          if (v489 >= 1)
                                            v1127[64] = -v500;
                                        }
                                        else
                                        {
LABEL_757:
                                          v1127[64] = 0;
                                        }
                                        memcpy(v1141, v1127, sizeof(v1141));
                                        v506 = sub_223F20B68();
                                        v508 = ldexp(*(long double *)&v506, v507);
                                        v512 = v508;
                                        if (v1137 >= 0)
                                          v513 = v1137;
                                        else
                                          v513 = -v1137;
                                        if ((_DWORD)v513)
                                        {
                                          if (v513 == 1)
                                          {
                                            v514 = 0;
                                            LODWORD(v508) = v1135;
                                            v515 = (double)*(unint64_t *)&v508;
                                          }
                                          else if (v513 == 2)
                                          {
                                            v514 = 0;
                                            LODWORD(v508) = v1136;
                                            LODWORD(v509) = v1135;
                                            v515 = (double)*(unint64_t *)&v508 * 4294967300.0 + (double)v509;
                                          }
                                          else
                                          {
                                            v560 = &v1135 + v513;
                                            LODWORD(v510) = *(v560 - 2);
                                            LODWORD(v508) = *(v560 - 1);
                                            LODWORD(v511) = *(v560 - 3);
                                            v515 = ((double)*(unint64_t *)&v508 * 4294967300.0 + (double)v510)
                                                 * 4294967300.0
                                                 + (double)v511;
                                            v514 = 32 * v513 - 96;
                                          }
                                          if (v1137 < 0)
                                            v515 = -v515;
                                          v557 = v512 * ldexp(v515, v514);
                                          if (!v13)
                                          {
LABEL_1380:
                                            if ((v15 & 1) == 0 && !a9)
                                              return;
                                            if (__src[64])
                                            {
                                              v875 = 0;
                                              v876 = 0;
                                              if (__src[64] >= 0)
                                                v877 = __src[64];
                                              else
                                                v877 = -__src[64];
                                              v878 = v877 - 1 + v877;
                                              if (v878 >= 0x40)
                                                LODWORD(v878) = 64;
                                              v1123[64] = v878;
                                              do
                                              {
                                                v879 = 0;
                                                v880 = 0;
                                                if (v875 >= v877 - 1)
                                                  v881 = v877 - 1;
                                                else
                                                  v881 = v875;
                                                v882 = v881 + 1;
                                                v883 = v875;
                                                do
                                                {
                                                  if (v883 < v877)
                                                  {
                                                    v884 = __src[v883]
                                                         * (unint64_t)__src[v879];
                                                    v876 += v884;
                                                    v880 += HIDWORD(v884);
                                                  }
                                                  ++v879;
                                                  --v883;
                                                }
                                                while (v882 != v879);
                                                v1123[v875] = v876;
                                                v876 = v880 + HIDWORD(v876);
                                                ++v875;
                                              }
                                              while (v875 < v1123[64]);
                                              if (v876 && v1123[64] != 64)
                                                v1123[v1123[64]++] = v876;
                                              LODWORD(v885) = v1129[64];
                                              if (v1129[64])
                                              {
LABEL_1401:
                                                v886 = 0;
                                                v887 = 0;
                                                if ((v885 & 0x80000000) == 0)
                                                  v885 = v885;
                                                else
                                                  v885 = -(int)v885;
                                                v888 = v885 - 1 + v885;
                                                if (v888 >= 0x40)
                                                  LODWORD(v888) = 64;
                                                v1122 = v888;
                                                do
                                                {
                                                  v889 = 0;
                                                  v890 = 0;
                                                  if (v886 >= v885 - 1)
                                                    v891 = v885 - 1;
                                                  else
                                                    v891 = v886;
                                                  v892 = v891 + 1;
                                                  v893 = v886;
                                                  do
                                                  {
                                                    if (v893 < v885)
                                                    {
                                                      v894 = v1129[v893]
                                                           * (unint64_t)v1129[v889];
                                                      v887 += v894;
                                                      v890 += HIDWORD(v894);
                                                    }
                                                    ++v889;
                                                    --v893;
                                                  }
                                                  while (v892 != v889);
                                                  v1121[v886] = v887;
                                                  v887 = v890 + HIDWORD(v887);
                                                  ++v886;
                                                }
                                                while (v886 < v1122);
                                                if (v887 && v1122 != 64)
                                                  v1121[v1122++] = v887;
                                                sub_223F1625C(v1124, v1123, (int *)v1121);
                                                v895 = v1155;
                                                if (!v1155)
                                                  goto LABEL_1443;
LABEL_1425:
                                                v896 = v1125;
                                                if (v1125)
                                                {
                                                  v897 = 0;
                                                  v898 = 0;
                                                  if (v895 >= 0)
                                                    v899 = v895;
                                                  else
                                                    v899 = -v895;
                                                  if (v1125 >= 0)
                                                    v900 = v1125;
                                                  else
                                                    v900 = -v1125;
                                                  v901 = v899 - 1;
                                                  v902 = v901 + v900;
                                                  if (v901 + v900 >= 0x40)
                                                    v902 = 64;
                                                  __dst[64] = v902;
                                                  v903 = (int *)v1124;
                                                  do
                                                  {
                                                    v905 = 0;
                                                    v906 = 0;
                                                    if (v897 >= v901)
                                                      v907 = v901;
                                                    else
                                                      v907 = v897;
                                                    v908 = ~v907;
                                                    v909 = v1154;
                                                    do
                                                    {
                                                      if (v897 + v905 < v900)
                                                      {
                                                        v910 = v903[v905] * (unint64_t)*v909;
                                                        v898 += v910;
                                                        v906 += HIDWORD(v910);
                                                      }
                                                      --v905;
                                                      ++v909;
                                                    }
                                                    while (v908 != v905);
                                                    __dst[v897] = v898;
                                                    v898 = v906 + HIDWORD(v898);
                                                    ++v897;
                                                    v904 = __dst[64];
                                                    ++v903;
                                                  }
                                                  while (v897 < __dst[64]);
                                                  if (v898 && __dst[64] != 64)
                                                  {
                                                    __dst[__dst[64]] = v898;
                                                    v904 = ++__dst[64];
                                                  }
                                                  if (v895 > 0 != v896 > 0)
                                                    __dst[64] = -v904;
LABEL_1449:
                                                  if (v895 && (v911 = __src[64]) != 0)
                                                  {
                                                    v912 = 0;
                                                    v913 = 0;
                                                    if (__src[64] >= 0)
                                                      v914 = __src[64];
                                                    else
                                                      v914 = -__src[64];
                                                    if (v895 >= 0)
                                                      v915 = v895;
                                                    else
                                                      v915 = -v895;
                                                    v916 = v914 - 1;
                                                    v917 = v916 + v915;
                                                    if (v916 + v915 >= 0x40)
                                                      v917 = 64;
                                                    v1116 = v917;
                                                    do
                                                    {
                                                      v919 = 0;
                                                      v920 = 0;
                                                      if (v912 >= v916)
                                                        v921 = v916;
                                                      else
                                                        v921 = v912;
                                                      v922 = ~v921;
                                                      v923 = __src;
                                                      do
                                                      {
                                                        if (v912 + v919 < v915)
                                                        {
                                                          v924 = v55[v919] * (unint64_t)*v923;
                                                          v913 += v924;
                                                          v920 += HIDWORD(v924);
                                                        }
                                                        --v919;
                                                        ++v923;
                                                      }
                                                      while (v922 != v919);
                                                      v1115[v912] = v913;
                                                      v913 = v920 + HIDWORD(v913);
                                                      ++v912;
                                                      v918 = v1116;
                                                      ++v55;
                                                    }
                                                    while (v912 < v1116);
                                                    if (v913 && v1116 != 64)
                                                    {
                                                      v1115[v1116] = v913;
                                                      v918 = ++v1116;
                                                    }
                                                    if (v895 > 0 != v911 > 0)
                                                      v1116 = -v918;
                                                  }
                                                  else
                                                  {
                                                    v1116 = 0;
                                                  }
                                                  v925 = v1129[64];
                                                  if (v1129[64] && (v926 = v1151) != 0)
                                                  {
                                                    v927 = 0;
                                                    v928 = 0;
                                                    if (v1129[64] >= 0)
                                                      v929 = v1129[64];
                                                    else
                                                      v929 = -v1129[64];
                                                    if (v1151 >= 0)
                                                      v930 = v1151;
                                                    else
                                                      v930 = -v1151;
                                                    v931 = v929 - 1;
                                                    v932 = v931 + v930;
                                                    if (v931 + v930 >= 0x40)
                                                      v932 = 64;
                                                    v1114 = v932;
                                                    do
                                                    {
                                                      v934 = 0;
                                                      v935 = 0;
                                                      if (v927 >= v931)
                                                        v936 = v931;
                                                      else
                                                        v936 = v927;
                                                      v937 = ~v936;
                                                      v938 = v1129;
                                                      do
                                                      {
                                                        if (v927 + v934 < v930)
                                                        {
                                                          v939 = v139[v934]
                                                               * (unint64_t)*v938;
                                                          v928 += v939;
                                                          v935 += HIDWORD(v939);
                                                        }
                                                        --v934;
                                                        ++v938;
                                                      }
                                                      while (v937 != v934);
                                                      v1113[v927] = v928;
                                                      v928 = v935 + HIDWORD(v928);
                                                      ++v927;
                                                      v933 = v1114;
                                                      ++v139;
                                                    }
                                                    while (v927 < v1114);
                                                    if (v928 && v1114 != 64)
                                                    {
                                                      v1113[v1114] = v928;
                                                      v933 = ++v1114;
                                                    }
                                                    if (v925 > 0 != v926 > 0)
                                                      v1114 = -v933;
                                                  }
                                                  else
                                                  {
                                                    v1114 = 0;
                                                  }
                                                  sub_223F1625C(v1117, v1115, v1113);
                                                  v940 = v1134;
                                                  if (v1134 && (v941 = v1118) != 0)
                                                  {
                                                    v942 = 0;
                                                    v943 = 0;
                                                    if (v1134 >= 0)
                                                      v944 = v1134;
                                                    else
                                                      v944 = -v1134;
                                                    if (v1118 >= 0)
                                                      v945 = v1118;
                                                    else
                                                      v945 = -v1118;
                                                    v946 = v944 - 1;
                                                    v947 = v946 + v945;
                                                    if (v946 + v945 >= 0x40)
                                                      v947 = 64;
                                                    v1120 = v947;
                                                    v948 = v1117;
                                                    do
                                                    {
                                                      v950 = 0;
                                                      v951 = 0;
                                                      if (v942 >= v946)
                                                        v952 = v946;
                                                      else
                                                        v952 = v942;
                                                      v953 = ~v952;
                                                      v954 = v1133;
                                                      do
                                                      {
                                                        if (v942 + v950 < v945)
                                                        {
                                                          v955 = v948[v950]
                                                               * (unint64_t)*v954;
                                                          v943 += v955;
                                                          v951 += HIDWORD(v955);
                                                        }
                                                        --v950;
                                                        ++v954;
                                                      }
                                                      while (v953 != v950);
                                                      v1119[v942] = v943;
                                                      v943 = v951 + HIDWORD(v943);
                                                      ++v942;
                                                      v949 = v1120;
                                                      ++v948;
                                                    }
                                                    while (v942 < v1120);
                                                    if (v943 && v1120 != 64)
                                                    {
                                                      v1119[v1120] = v943;
                                                      v949 = ++v1120;
                                                    }
                                                    if (v940 > 0 != v941 > 0)
                                                      v1120 = -v949;
                                                  }
                                                  else
                                                  {
                                                    v1120 = 0;
                                                  }
                                                  sub_223F15F80(v1127, __dst, v1119);
                                                  memcpy(v1142, v1127, sizeof(v1142));
                                                  if (__src[64])
                                                  {
                                                    v956 = 0;
                                                    v957 = 0;
                                                    if (__src[64] >= 0)
                                                      v958 = __src[64];
                                                    else
                                                      v958 = -__src[64];
                                                    v959 = v958 - 1 + v958;
                                                    if (v959 >= 0x40)
                                                      LODWORD(v959) = 64;
                                                    v1123[64] = v959;
                                                    do
                                                    {
                                                      v960 = 0;
                                                      v961 = 0;
                                                      if (v956 >= v958 - 1)
                                                        v962 = v958 - 1;
                                                      else
                                                        v962 = v956;
                                                      v963 = v962 + 1;
                                                      v964 = v956;
                                                      do
                                                      {
                                                        if (v964 < v958)
                                                        {
                                                          v965 = __src[v964]
                                                               * (unint64_t)__src[v960];
                                                          v957 += v965;
                                                          v961 += HIDWORD(v965);
                                                        }
                                                        ++v960;
                                                        --v964;
                                                      }
                                                      while (v963 != v960);
                                                      v1123[v956] = v957;
                                                      v957 = v961 + HIDWORD(v957);
                                                      ++v956;
                                                    }
                                                    while (v956 < v1123[64]);
                                                    if (v957 && v1123[64] != 64)
                                                      v1123[v1123[64]++] = v957;
                                                    LODWORD(v966) = v1129[64];
                                                    if (v1129[64])
                                                    {
LABEL_1543:
                                                      v967 = 0;
                                                      v968 = 0;
                                                      if ((v966 & 0x80000000) == 0)
                                                        v966 = v966;
                                                      else
                                                        v966 = -(int)v966;
                                                      v969 = v966 - 1 + v966;
                                                      if (v969 >= 0x40)
                                                        LODWORD(v969) = 64;
                                                      v1122 = v969;
                                                      do
                                                      {
                                                        v970 = 0;
                                                        v971 = 0;
                                                        if (v967 >= v966 - 1)
                                                          v972 = v966 - 1;
                                                        else
                                                          v972 = v967;
                                                        v973 = v972 + 1;
                                                        v974 = v967;
                                                        do
                                                        {
                                                          if (v974 < v966)
                                                          {
                                                            v975 = v1129[v974]
                                                                 * (unint64_t)v1129[v970];
                                                            v968 += v975;
                                                            v971 += HIDWORD(v975);
                                                          }
                                                          ++v970;
                                                          --v974;
                                                        }
                                                        while (v973 != v970);
                                                        v1121[v967] = v968;
                                                        v968 = v971 + HIDWORD(v968);
                                                        ++v967;
                                                      }
                                                      while (v967 < v1122);
                                                      if (v968 && v1122 != 64)
                                                        v1121[v1122++] = v968;
                                                      sub_223F1625C(v1124, v1123, (int *)v1121);
                                                      v976 = v1153;
                                                      if (!v1153)
                                                        goto LABEL_1582;
LABEL_1564:
                                                      v977 = v1125;
                                                      if (v1125)
                                                      {
                                                        v978 = 0;
                                                        v979 = 0;
                                                        if (v976 >= 0)
                                                          v980 = v976;
                                                        else
                                                          v980 = -v976;
                                                        if (v1125 >= 0)
                                                          v981 = v1125;
                                                        else
                                                          v981 = -v1125;
                                                        v982 = v980 - 1;
                                                        v983 = v982 + v981;
                                                        if (v982 + v981 >= 0x40)
                                                          v983 = 64;
                                                        __dst[64] = v983;
                                                        v984 = (int *)v1124;
                                                        do
                                                        {
                                                          v986 = 0;
                                                          v987 = 0;
                                                          if (v978 >= v982)
                                                            v988 = v982;
                                                          else
                                                            v988 = v978;
                                                          v989 = ~v988;
                                                          v990 = v1152;
                                                          do
                                                          {
                                                            if (v978 + v986 < v981)
                                                            {
                                                              v991 = v984[v986] * (unint64_t)*v990;
                                                              v979 += v991;
                                                              v987 += HIDWORD(v991);
                                                            }
                                                            --v986;
                                                            ++v990;
                                                          }
                                                          while (v989 != v986);
                                                          __dst[v978] = v979;
                                                          v979 = v987 + HIDWORD(v979);
                                                          ++v978;
                                                          v985 = __dst[64];
                                                          ++v984;
                                                        }
                                                        while (v978 < __dst[64]);
                                                        if (v979 && __dst[64] != 64)
                                                        {
                                                          __dst[__dst[64]] = v979;
                                                          v985 = ++__dst[64];
                                                        }
                                                        if (v976 > 0 != v977 > 0)
                                                          __dst[64] = -v985;
LABEL_1588:
                                                        if (v976 && (v992 = __src[64]) != 0)
                                                        {
                                                          v993 = 0;
                                                          v994 = 0;
                                                          if (__src[64] >= 0)
                                                            v995 = __src[64];
                                                          else
                                                            v995 = -__src[64];
                                                          if (v976 >= 0)
                                                            v996 = v976;
                                                          else
                                                            v996 = -v976;
                                                          v997 = v995 - 1;
                                                          v998 = v997 + v996;
                                                          if (v997 + v996 >= 0x40)
                                                            v998 = 64;
                                                          v1116 = v998;
                                                          v999 = v1152;
                                                          do
                                                          {
                                                            v1001 = 0;
                                                            v1002 = 0;
                                                            if (v993 >= v997)
                                                              v1003 = v997;
                                                            else
                                                              v1003 = v993;
                                                            v1004 = ~v1003;
                                                            v1005 = __src;
                                                            do
                                                            {
                                                              if (v993 + v1001 < v996)
                                                              {
                                                                v1006 = v999[v1001] * (unint64_t)*v1005;
                                                                v994 += v1006;
                                                                v1002 += HIDWORD(v1006);
                                                              }
                                                              --v1001;
                                                              ++v1005;
                                                            }
                                                            while (v1004 != v1001);
                                                            v1115[v993] = v994;
                                                            v994 = v1002 + HIDWORD(v994);
                                                            ++v993;
                                                            v1000 = v1116;
                                                            ++v999;
                                                          }
                                                          while (v993 < v1116);
                                                          if (v994 && v1116 != 64)
                                                          {
                                                            v1115[v1116] = v994;
                                                            v1000 = ++v1116;
                                                          }
                                                          if (v976 > 0 != v992 > 0)
                                                            v1116 = -v1000;
                                                        }
                                                        else
                                                        {
                                                          v1116 = 0;
                                                        }
                                                        v1007 = v1129[64];
                                                        if (v1129[64] && (v1008 = v1149) != 0)
                                                        {
                                                          v1009 = 0;
                                                          v1010 = 0;
                                                          if (v1129[64] >= 0)
                                                            v1011 = v1129[64];
                                                          else
                                                            v1011 = -v1129[64];
                                                          if (v1149 >= 0)
                                                            v1012 = v1149;
                                                          else
                                                            v1012 = -v1149;
                                                          v1013 = v1011 - 1;
                                                          v1014 = v1013 + v1012;
                                                          if (v1013 + v1012 >= 0x40)
                                                            v1014 = 64;
                                                          v1114 = v1014;
                                                          v1015 = v1148;
                                                          do
                                                          {
                                                            v1017 = 0;
                                                            v1018 = 0;
                                                            if (v1009 >= v1013)
                                                              v1019 = v1013;
                                                            else
                                                              v1019 = v1009;
                                                            v1020 = ~v1019;
                                                            v1021 = v1129;
                                                            do
                                                            {
                                                              if (v1009 + v1017 < v1012)
                                                              {
                                                                v1022 = v1015[v1017]
                                                                      * (unint64_t)*v1021;
                                                                v1010 += v1022;
                                                                v1018 += HIDWORD(v1022);
                                                              }
                                                              --v1017;
                                                              ++v1021;
                                                            }
                                                            while (v1020 != v1017);
                                                            v1113[v1009] = v1010;
                                                            v1010 = v1018 + HIDWORD(v1010);
                                                            ++v1009;
                                                            v1016 = v1114;
                                                            ++v1015;
                                                          }
                                                          while (v1009 < v1114);
                                                          if (v1010 && v1114 != 64)
                                                          {
                                                            v1113[v1114] = v1010;
                                                            v1016 = ++v1114;
                                                          }
                                                          if (v1007 > 0 != v1008 > 0)
                                                            v1114 = -v1016;
                                                        }
                                                        else
                                                        {
                                                          v1114 = 0;
                                                        }
                                                        sub_223F1625C(v1117, v1115, v1113);
                                                        v1023 = v1134;
                                                        if (v1134 && (v1024 = v1118) != 0)
                                                        {
                                                          v1025 = 0;
                                                          v1026 = 0;
                                                          if (v1134 >= 0)
                                                            v1027 = v1134;
                                                          else
                                                            v1027 = -v1134;
                                                          if (v1118 >= 0)
                                                            v1028 = v1118;
                                                          else
                                                            v1028 = -v1118;
                                                          v1029 = v1027 - 1;
                                                          v1030 = v1029 + v1028;
                                                          if (v1029 + v1028 >= 0x40)
                                                            v1030 = 64;
                                                          v1120 = v1030;
                                                          v1031 = v1117;
                                                          do
                                                          {
                                                            v1033 = 0;
                                                            v1034 = 0;
                                                            if (v1025 >= v1029)
                                                              v1035 = v1029;
                                                            else
                                                              v1035 = v1025;
                                                            v1036 = ~v1035;
                                                            v1037 = v1133;
                                                            do
                                                            {
                                                              if (v1025 + v1033 < v1028)
                                                              {
                                                                v1038 = v1031[v1033]
                                                                      * (unint64_t)*v1037;
                                                                v1026 += v1038;
                                                                v1034 += HIDWORD(v1038);
                                                              }
                                                              --v1033;
                                                              ++v1037;
                                                            }
                                                            while (v1036 != v1033);
                                                            v1119[v1025] = v1026;
                                                            v1026 = v1034 + HIDWORD(v1026);
                                                            ++v1025;
                                                            v1032 = v1120;
                                                            ++v1031;
                                                          }
                                                          while (v1025 < v1120);
                                                          if (v1026 && v1120 != 64)
                                                          {
                                                            v1119[v1120] = v1026;
                                                            v1032 = ++v1120;
                                                          }
                                                          if (v1023 > 0 != v1024 > 0)
                                                            v1120 = -v1032;
                                                        }
                                                        else
                                                        {
                                                          v1120 = 0;
                                                        }
                                                        sub_223F15F80(v1127, __dst, v1119);
                                                        memcpy(v1143, v1127, sizeof(v1143));
                                                        v1039 = v1134;
                                                        if (v1134 && (v1040 = v1128[64]) != 0)
                                                        {
                                                          v1041 = 0;
                                                          v1042 = 0;
                                                          if (v1134 >= 0)
                                                            v1043 = v1134;
                                                          else
                                                            v1043 = -v1134;
                                                          if (v1128[64] >= 0)
                                                            v1044 = v1128[64];
                                                          else
                                                            v1044 = -v1128[64];
                                                          v1045 = v1043 - 1;
                                                          v1046 = v1045 + v1044;
                                                          if (v1045 + v1044 >= 0x40)
                                                            v1046 = 64;
                                                          v1127[64] = v1046;
                                                          v1047 = v1128;
                                                          do
                                                          {
                                                            v1049 = 0;
                                                            v1050 = 0;
                                                            if (v1041 >= v1045)
                                                              v1051 = v1045;
                                                            else
                                                              v1051 = v1041;
                                                            v1052 = ~v1051;
                                                            v1053 = v1133;
                                                            do
                                                            {
                                                              if (v1041 + v1049 < v1044)
                                                              {
                                                                v1054 = v1047[v1049]
                                                                      * (unint64_t)*v1053;
                                                                v1042 += v1054;
                                                                v1050 += HIDWORD(v1054);
                                                              }
                                                              --v1049;
                                                              ++v1053;
                                                            }
                                                            while (v1052 != v1049);
                                                            v1127[v1041] = v1042;
                                                            v1042 = v1050 + HIDWORD(v1042);
                                                            ++v1041;
                                                            v1048 = v1127[64];
                                                            ++v1047;
                                                          }
                                                          while (v1041 < (int)v1127[64]);
                                                          if (v1042 && v1127[64] != 64)
                                                          {
                                                            v1127[v1127[64]] = v1042;
                                                            v1048 = ++v1127[64];
                                                          }
                                                          if (v1039 > 0 == v1040 > 0)
                                                          {
                                                            memcpy(v1144, v1127, sizeof(v1144));
                                                            if (!v15)
                                                              goto LABEL_1689;
                                                          }
                                                          else
                                                          {
                                                            v1127[64] = -v1048;
                                                            memcpy(v1144, v1127, sizeof(v1144));
                                                            if (!v15)
                                                            {
LABEL_1689:
                                                              if (!a9)
                                                                return;
LABEL_1697:
                                                              if (__src[64])
                                                              {
                                                                v1064 = 0;
                                                                v1065 = 0;
                                                                if (__src[64] >= 0)
                                                                  v1066 = __src[64];
                                                                else
                                                                  v1066 = -__src[64];
                                                                v1067 = v1066 - 1 + v1066;
                                                                if (v1067 >= 0x40)
                                                                  LODWORD(v1067) = 64;
                                                                v1123[64] = v1067;
                                                                do
                                                                {
                                                                  v1068 = 0;
                                                                  v1069 = 0;
                                                                  if (v1064 >= v1066 - 1)
                                                                    v1070 = v1066 - 1;
                                                                  else
                                                                    v1070 = v1064;
                                                                  v1071 = v1070 + 1;
                                                                  v1072 = v1064;
                                                                  do
                                                                  {
                                                                    if (v1072 < v1066)
                                                                    {
                                                                      v1073 = __src[v1072]
                                                                            * (unint64_t)__src[v1068];
                                                                      v1065 += v1073;
                                                                      v1069 += HIDWORD(v1073);
                                                                    }
                                                                    ++v1068;
                                                                    --v1072;
                                                                  }
                                                                  while (v1071 != v1068);
                                                                  v1123[v1064] = v1065;
                                                                  v1065 = v1069 + HIDWORD(v1065);
                                                                  ++v1064;
                                                                }
                                                                while (v1064 < v1123[64]);
                                                                if (v1065 && v1123[64] != 64)
                                                                  v1123[v1123[64]++] = v1065;
                                                              }
                                                              else
                                                              {
                                                                v1123[64] = 0;
                                                              }
                                                              if (v1129[64])
                                                              {
                                                                v1074 = 0;
                                                                v1075 = 0;
                                                                if (v1129[64] >= 0)
                                                                  v1076 = v1129[64];
                                                                else
                                                                  v1076 = -v1129[64];
                                                                v1077 = v1076 - 1 + v1076;
                                                                if (v1077 >= 0x40)
                                                                  LODWORD(v1077) = 64;
                                                                v1122 = v1077;
                                                                do
                                                                {
                                                                  v1078 = 0;
                                                                  v1079 = 0;
                                                                  if (v1074 >= v1076 - 1)
                                                                    v1080 = v1076 - 1;
                                                                  else
                                                                    v1080 = v1074;
                                                                  v1081 = v1080 + 1;
                                                                  v1082 = v1074;
                                                                  do
                                                                  {
                                                                    if (v1082 < v1076)
                                                                    {
                                                                      v1083 = v1129[v1082]
                                                                            * (unint64_t)v1129[v1078];
                                                                      v1075 += v1083;
                                                                      v1079 += HIDWORD(v1083);
                                                                    }
                                                                    ++v1078;
                                                                    --v1082;
                                                                  }
                                                                  while (v1081 != v1078);
                                                                  v1121[v1074] = v1075;
                                                                  v1075 = v1079 + HIDWORD(v1075);
                                                                  ++v1074;
                                                                }
                                                                while (v1074 < v1122);
                                                                if (v1075 && v1122 != 64)
                                                                  v1121[v1122++] = v1075;
                                                              }
                                                              else
                                                              {
                                                                v1122 = 0;
                                                              }
                                                              sub_223F1625C(v1124, v1123, (int *)v1121);
                                                              v1084 = v1137;
                                                              if (!v1137)
                                                                goto LABEL_1780;
                                                              v1085 = v1125;
                                                              if (!v1125)
                                                                goto LABEL_1780;
                                                              v1086 = 0;
                                                              v1087 = 0;
                                                              if (v1137 >= 0)
                                                                v1088 = v1137;
                                                              else
                                                                v1088 = -v1137;
                                                              if (v1125 >= 0)
                                                                v1089 = v1125;
                                                              else
                                                                v1089 = -v1125;
                                                              v1090 = v1088 - 1;
                                                              v1091 = v1088 - 1 + v1089;
                                                              if (v1091 >= 0x40)
                                                                LODWORD(v1091) = 64;
                                                              __dst[64] = v1091;
                                                              v1092 = (int *)v1124;
                                                              do
                                                              {
                                                                v1094 = 0;
                                                                v1095 = 0;
                                                                if (v1086 >= v1090)
                                                                  v1096 = v1090;
                                                                else
                                                                  v1096 = v1086;
                                                                v1097 = ~v1096;
                                                                v1098 = (unsigned int *)&v1135;
                                                                do
                                                                {
                                                                  if (v1086 + v1094 < v1089)
                                                                  {
                                                                    v1099 = v1092[v1094]
                                                                          * (unint64_t)*v1098;
                                                                    v1087 += v1099;
                                                                    v1095 += HIDWORD(v1099);
                                                                  }
                                                                  --v1094;
                                                                  ++v1098;
                                                                }
                                                                while (v1097 != v1094);
                                                                __dst[v1086] = v1087;
                                                                v1087 = v1095 + HIDWORD(v1087);
                                                                ++v1086;
                                                                v1093 = __dst[64];
                                                                ++v1092;
                                                              }
                                                              while (v1086 < __dst[64]);
                                                              if (v1087 && __dst[64] != 64)
                                                              {
                                                                __dst[__dst[64]] = v1087;
                                                                v1093 = ++__dst[64];
                                                              }
                                                              if (v1084 > 0 != v1085 > 0)
                                                              {
                                                                v1093 = -v1093;
                                                                __dst[64] = v1093;
                                                              }
                                                              if (v1093)
                                                              {
                                                                v1100 = 0;
                                                                v1101 = 0;
                                                                if (v512 >= 0.0)
                                                                  LODWORD(v1102) = 1;
                                                                else
                                                                  LODWORD(v1102) = -1;
                                                                if (v1093 >= 0)
                                                                  v1103 = v1093;
                                                                else
                                                                  v1103 = -v1093;
                                                                if ((v1102 & 0x80000000) == 0)
                                                                  v1102 = v1102;
                                                                else
                                                                  v1102 = -(int)v1102;
                                                                v1104 = v1103 - 1;
                                                                v1105 = v1104 + v1102;
                                                                if (v1104 + v1102 >= 0x40)
                                                                  v1105 = 64;
                                                                v1127[64] = v1105;
                                                                do
                                                                {
                                                                  v1107 = 0;
                                                                  if (v1100 >= v1104)
                                                                    v1108 = v1104;
                                                                  else
                                                                    v1108 = v1100;
                                                                  v1109 = ~v1108;
                                                                  v1110 = __dst;
                                                                  do
                                                                  {
                                                                    if (v1100 + v1107 < v1102)
                                                                      v1101 += *v1110;
                                                                    --v1107;
                                                                    ++v1110;
                                                                  }
                                                                  while (v1109 != v1107);
                                                                  v1127[v1100] = v1101;
                                                                  v1101 >>= 32;
                                                                  ++v1100;
                                                                  v1106 = v1127[64];
                                                                }
                                                                while (v1100 < (int)v1127[64]);
                                                                if (v1101 && v1127[64] != 64)
                                                                {
                                                                  v1127[v1127[64]] = v1101;
                                                                  v1106 = ++v1127[64];
                                                                }
                                                                if (v512 >= 0.0 != v1093 > 0)
                                                                  v1127[64] = -v1106;
                                                              }
                                                              else
                                                              {
LABEL_1780:
                                                                v1127[64] = 0;
                                                              }
                                                              memcpy(v1145, v1127, sizeof(v1145));
                                                              v1111 = sub_223F20B68();
                                                              v1061 = ldexp(*(long double *)&v1111, v1112) / v557;
                                                              goto LABEL_1782;
                                                            }
                                                          }
                                                        }
                                                        else
                                                        {
                                                          v1127[64] = 0;
                                                          memcpy(v1144, v1127, sizeof(v1144));
                                                          if (!v15)
                                                            goto LABEL_1689;
                                                        }
                                                        v1062 = sub_223F20B68();
                                                        *(long double *)v17 = ldexp(*(long double *)&v1062, v1063)
                                                                            / v557;
                                                        if (!a9)
                                                          return;
                                                        goto LABEL_1697;
                                                      }
LABEL_1582:
                                                      __dst[64] = 0;
                                                      goto LABEL_1588;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v1123[64] = 0;
                                                    LODWORD(v966) = v1129[64];
                                                    if (v1129[64])
                                                      goto LABEL_1543;
                                                  }
                                                  v1122 = 0;
                                                  sub_223F1625C(v1124, v1123, (int *)v1121);
                                                  v976 = v1153;
                                                  if (!v1153)
                                                    goto LABEL_1582;
                                                  goto LABEL_1564;
                                                }
LABEL_1443:
                                                __dst[64] = 0;
                                                goto LABEL_1449;
                                              }
                                            }
                                            else
                                            {
                                              v1123[64] = 0;
                                              LODWORD(v885) = v1129[64];
                                              if (v1129[64])
                                                goto LABEL_1401;
                                            }
                                            v1122 = 0;
                                            sub_223F1625C(v1124, v1123, (int *)v1121);
                                            v895 = v1155;
                                            if (!v1155)
                                              goto LABEL_1443;
                                            goto LABEL_1425;
                                          }
                                        }
                                        else
                                        {
                                          v557 = v508 * ldexp(0.0, 0);
                                          if (!v13)
                                            goto LABEL_1380;
                                        }
                                        if (__src[64])
                                        {
                                          v561 = 0;
                                          v562 = 0;
                                          if (__src[64] >= 0)
                                            v563 = __src[64];
                                          else
                                            v563 = -__src[64];
                                          v564 = v563 - 1 + v563;
                                          if (v564 >= 0x40)
                                            LODWORD(v564) = 64;
                                          v1123[64] = v564;
                                          do
                                          {
                                            v565 = 0;
                                            v566 = 0;
                                            if (v561 >= v563 - 1)
                                              v567 = v563 - 1;
                                            else
                                              v567 = v561;
                                            v568 = v567 + 1;
                                            v569 = v561;
                                            do
                                            {
                                              if (v569 < v563)
                                              {
                                                v570 = __src[v569]
                                                     * (unint64_t)__src[v565];
                                                v562 += v570;
                                                v566 += HIDWORD(v570);
                                              }
                                              ++v565;
                                              --v569;
                                            }
                                            while (v568 != v565);
                                            v1123[v561] = v562;
                                            v562 = v566 + HIDWORD(v562);
                                            ++v561;
                                          }
                                          while (v561 < v1123[64]);
                                          if (v562 && v1123[64] != 64)
                                            v1123[v1123[64]++] = v562;
                                          LODWORD(v571) = v1129[64];
                                          if (v1129[64])
                                          {
LABEL_877:
                                            v572 = 0;
                                            v573 = 0;
                                            if ((v571 & 0x80000000) == 0)
                                              v571 = v571;
                                            else
                                              v571 = -(int)v571;
                                            v574 = v571 - 1 + v571;
                                            if (v574 >= 0x40)
                                              LODWORD(v574) = 64;
                                            v1122 = v574;
                                            do
                                            {
                                              v575 = 0;
                                              v576 = 0;
                                              if (v572 >= v571 - 1)
                                                v577 = v571 - 1;
                                              else
                                                v577 = v572;
                                              v578 = v577 + 1;
                                              v579 = v572;
                                              do
                                              {
                                                if (v579 < v571)
                                                {
                                                  v580 = v1129[v579]
                                                       * (unint64_t)v1129[v575];
                                                  v573 += v580;
                                                  v576 += HIDWORD(v580);
                                                }
                                                ++v575;
                                                --v579;
                                              }
                                              while (v578 != v575);
                                              v1121[v572] = v573;
                                              v573 = v576 + HIDWORD(v573);
                                              ++v572;
                                            }
                                            while (v572 < v1122);
                                            if (v573 && v1122 != 64)
                                              v1121[v1122++] = v573;
                                            sub_223F1625C(v1124, v1123, (int *)v1121);
                                            v581 = v1151;
                                            if (!v1151)
                                              goto LABEL_1116;
LABEL_1098:
                                            v702 = v1125;
                                            if (v1125)
                                            {
                                              v703 = 0;
                                              v704 = 0;
                                              if (v581 >= 0)
                                                v705 = v581;
                                              else
                                                v705 = -v581;
                                              if (v1125 >= 0)
                                                v706 = v1125;
                                              else
                                                v706 = -v1125;
                                              v707 = v705 - 1;
                                              v708 = v707 + v706;
                                              if (v707 + v706 >= 0x40)
                                                v708 = 64;
                                              __dst[64] = v708;
                                              v709 = (int *)v1124;
                                              do
                                              {
                                                v711 = 0;
                                                v712 = 0;
                                                if (v703 >= v707)
                                                  v713 = v707;
                                                else
                                                  v713 = v703;
                                                v714 = ~v713;
                                                v715 = v1150;
                                                do
                                                {
                                                  if (v703 + v711 < v706)
                                                  {
                                                    v716 = v709[v711] * (unint64_t)*v715;
                                                    v704 += v716;
                                                    v712 += HIDWORD(v716);
                                                  }
                                                  --v711;
                                                  ++v715;
                                                }
                                                while (v714 != v711);
                                                __dst[v703] = v704;
                                                v704 = v712 + HIDWORD(v704);
                                                ++v703;
                                                v710 = __dst[64];
                                                ++v709;
                                              }
                                              while (v703 < __dst[64]);
                                              if (v704 && __dst[64] != 64)
                                              {
                                                __dst[__dst[64]] = v704;
                                                v710 = ++__dst[64];
                                              }
                                              if (v581 > 0 != v702 > 0)
                                                __dst[64] = -v710;
LABEL_1122:
                                              v717 = __src[64];
                                              if (__src[64] && (v718 = v1155) != 0)
                                              {
                                                v719 = 0;
                                                v720 = 0;
                                                if (__src[64] >= 0)
                                                  v721 = __src[64];
                                                else
                                                  v721 = -__src[64];
                                                if (v1155 >= 0)
                                                  v722 = v1155;
                                                else
                                                  v722 = -v1155;
                                                v723 = v721 - 1;
                                                v724 = v723 + v722;
                                                if (v723 + v722 >= 0x40)
                                                  v724 = 64;
                                                v1116 = v724;
                                                v725 = v1154;
                                                do
                                                {
                                                  v727 = 0;
                                                  v728 = 0;
                                                  if (v719 >= v723)
                                                    v729 = v723;
                                                  else
                                                    v729 = v719;
                                                  v730 = ~v729;
                                                  v731 = __src;
                                                  do
                                                  {
                                                    if (v719 + v727 < v722)
                                                    {
                                                      v732 = v725[v727] * (unint64_t)*v731;
                                                      v720 += v732;
                                                      v728 += HIDWORD(v732);
                                                    }
                                                    --v727;
                                                    ++v731;
                                                  }
                                                  while (v730 != v727);
                                                  v1115[v719] = v720;
                                                  v720 = v728 + HIDWORD(v720);
                                                  ++v719;
                                                  v726 = v1116;
                                                  ++v725;
                                                }
                                                while (v719 < v1116);
                                                if (v720 && v1116 != 64)
                                                {
                                                  v1115[v1116] = v720;
                                                  v726 = ++v1116;
                                                }
                                                if (v717 > 0 != v718 > 0)
                                                  v1116 = -v726;
                                              }
                                              else
                                              {
                                                v1116 = 0;
                                              }
                                              if (v581 && (v733 = v1129[64]) != 0)
                                              {
                                                v734 = 0;
                                                v735 = 0;
                                                if (v1129[64] >= 0)
                                                  v736 = v1129[64];
                                                else
                                                  v736 = -v1129[64];
                                                if (v581 >= 0)
                                                  v737 = v581;
                                                else
                                                  v737 = -v581;
                                                v738 = v736 - 1;
                                                v739 = v738 + v737;
                                                if (v738 + v737 >= 0x40)
                                                  v739 = 64;
                                                v1114 = v739;
                                                v740 = v1150;
                                                do
                                                {
                                                  v742 = 0;
                                                  v743 = 0;
                                                  if (v734 >= v738)
                                                    v744 = v738;
                                                  else
                                                    v744 = v734;
                                                  v745 = ~v744;
                                                  v746 = v1129;
                                                  do
                                                  {
                                                    if (v734 + v742 < v737)
                                                    {
                                                      v747 = v740[v742]
                                                           * (unint64_t)*v746;
                                                      v735 += v747;
                                                      v743 += HIDWORD(v747);
                                                    }
                                                    --v742;
                                                    ++v746;
                                                  }
                                                  while (v745 != v742);
                                                  v1113[v734] = v735;
                                                  v735 = v743 + HIDWORD(v735);
                                                  ++v734;
                                                  v741 = v1114;
                                                  ++v740;
                                                }
                                                while (v734 < v1114);
                                                if (v735 && v1114 != 64)
                                                {
                                                  v1113[v1114] = v735;
                                                  v741 = ++v1114;
                                                }
                                                if (v581 > 0 != v733 > 0)
                                                  v1114 = -v741;
                                              }
                                              else
                                              {
                                                v1114 = 0;
                                              }
                                              sub_223F1625C(v1117, v1115, v1113);
                                              v748 = v1132;
                                              if (v1132 && (v749 = v1118) != 0)
                                              {
                                                v750 = 0;
                                                v751 = 0;
                                                if (v1132 >= 0)
                                                  v752 = v1132;
                                                else
                                                  v752 = -v1132;
                                                if (v1118 >= 0)
                                                  v753 = v1118;
                                                else
                                                  v753 = -v1118;
                                                v754 = v752 - 1;
                                                v755 = v754 + v753;
                                                if (v754 + v753 >= 0x40)
                                                  v755 = 64;
                                                v1120 = v755;
                                                v756 = v1117;
                                                do
                                                {
                                                  v758 = 0;
                                                  v759 = 0;
                                                  if (v750 >= v754)
                                                    v760 = v754;
                                                  else
                                                    v760 = v750;
                                                  v761 = ~v760;
                                                  v762 = v1131;
                                                  do
                                                  {
                                                    if (v750 + v758 < v753)
                                                    {
                                                      v763 = v756[v758] * (unint64_t)*v762;
                                                      v751 += v763;
                                                      v759 += HIDWORD(v763);
                                                    }
                                                    --v758;
                                                    ++v762;
                                                  }
                                                  while (v761 != v758);
                                                  v1119[v750] = v751;
                                                  v751 = v759 + HIDWORD(v751);
                                                  ++v750;
                                                  v757 = v1120;
                                                  ++v756;
                                                }
                                                while (v750 < v1120);
                                                if (v751 && v1120 != 64)
                                                {
                                                  v1119[v1120] = v751;
                                                  v757 = ++v1120;
                                                }
                                                if (v748 > 0 != v749 > 0)
                                                  v1120 = -v757;
                                              }
                                              else
                                              {
                                                v1120 = 0;
                                              }
                                              sub_223F15F80(v1127, __dst, v1119);
                                              memcpy(v1142, v1127, sizeof(v1142));
                                              if (__src[64])
                                              {
                                                v764 = 0;
                                                v765 = 0;
                                                if (__src[64] >= 0)
                                                  v766 = __src[64];
                                                else
                                                  v766 = -__src[64];
                                                v767 = v766 - 1 + v766;
                                                if (v767 >= 0x40)
                                                  LODWORD(v767) = 64;
                                                v1123[64] = v767;
                                                do
                                                {
                                                  v768 = 0;
                                                  v769 = 0;
                                                  if (v764 >= v766 - 1)
                                                    v770 = v766 - 1;
                                                  else
                                                    v770 = v764;
                                                  v771 = v770 + 1;
                                                  v772 = v764;
                                                  do
                                                  {
                                                    if (v772 < v766)
                                                    {
                                                      v773 = __src[v772]
                                                           * (unint64_t)__src[v768];
                                                      v765 += v773;
                                                      v769 += HIDWORD(v773);
                                                    }
                                                    ++v768;
                                                    --v772;
                                                  }
                                                  while (v771 != v768);
                                                  v1123[v764] = v765;
                                                  v765 = v769 + HIDWORD(v765);
                                                  ++v764;
                                                }
                                                while (v764 < v1123[64]);
                                                if (v765 && v1123[64] != 64)
                                                  v1123[v1123[64]++] = v765;
                                                LODWORD(v774) = v1129[64];
                                                if (v1129[64])
                                                {
LABEL_1216:
                                                  v775 = 0;
                                                  v776 = 0;
                                                  if ((v774 & 0x80000000) == 0)
                                                    v774 = v774;
                                                  else
                                                    v774 = -(int)v774;
                                                  v777 = v774 - 1 + v774;
                                                  if (v777 >= 0x40)
                                                    LODWORD(v777) = 64;
                                                  v1122 = v777;
                                                  do
                                                  {
                                                    v778 = 0;
                                                    v779 = 0;
                                                    if (v775 >= v774 - 1)
                                                      v780 = v774 - 1;
                                                    else
                                                      v780 = v775;
                                                    v781 = v780 + 1;
                                                    v782 = v775;
                                                    do
                                                    {
                                                      if (v782 < v774)
                                                      {
                                                        v783 = v1129[v782]
                                                             * (unint64_t)v1129[v778];
                                                        v776 += v783;
                                                        v779 += HIDWORD(v783);
                                                      }
                                                      ++v778;
                                                      --v782;
                                                    }
                                                    while (v781 != v778);
                                                    v1121[v775] = v776;
                                                    v776 = v779 + HIDWORD(v776);
                                                    ++v775;
                                                  }
                                                  while (v775 < v1122);
                                                  if (v776 && v1122 != 64)
                                                    v1121[v1122++] = v776;
                                                  sub_223F1625C(v1124, v1123, (int *)v1121);
                                                  v784 = v1149;
                                                  if (!v1149)
                                                    goto LABEL_1273;
LABEL_1255:
                                                  v795 = v1125;
                                                  if (v1125)
                                                  {
                                                    v796 = 0;
                                                    v797 = 0;
                                                    if (v784 >= 0)
                                                      v798 = v784;
                                                    else
                                                      v798 = -v784;
                                                    if (v1125 >= 0)
                                                      v799 = v1125;
                                                    else
                                                      v799 = -v1125;
                                                    v800 = v798 - 1;
                                                    v801 = v800 + v799;
                                                    if (v800 + v799 >= 0x40)
                                                      v801 = 64;
                                                    __dst[64] = v801;
                                                    v802 = (int *)v1124;
                                                    do
                                                    {
                                                      v804 = 0;
                                                      v805 = 0;
                                                      if (v796 >= v800)
                                                        v806 = v800;
                                                      else
                                                        v806 = v796;
                                                      v807 = ~v806;
                                                      v808 = v1148;
                                                      do
                                                      {
                                                        if (v796 + v804 < v799)
                                                        {
                                                          v809 = v802[v804] * (unint64_t)*v808;
                                                          v797 += v809;
                                                          v805 += HIDWORD(v809);
                                                        }
                                                        --v804;
                                                        ++v808;
                                                      }
                                                      while (v807 != v804);
                                                      __dst[v796] = v797;
                                                      v797 = v805 + HIDWORD(v797);
                                                      ++v796;
                                                      v803 = __dst[64];
                                                      ++v802;
                                                    }
                                                    while (v796 < __dst[64]);
                                                    if (v797 && __dst[64] != 64)
                                                    {
                                                      __dst[__dst[64]] = v797;
                                                      v803 = ++__dst[64];
                                                    }
                                                    if (v784 > 0 != v795 > 0)
                                                      __dst[64] = -v803;
                                                    goto LABEL_1279;
                                                  }
LABEL_1273:
                                                  __dst[64] = 0;
LABEL_1279:
                                                  v810 = __src[64];
                                                  if (__src[64] && (v811 = v1153) != 0)
                                                  {
                                                    v812 = 0;
                                                    v813 = 0;
                                                    if (__src[64] >= 0)
                                                      v814 = __src[64];
                                                    else
                                                      v814 = -__src[64];
                                                    if (v1153 >= 0)
                                                      v815 = v1153;
                                                    else
                                                      v815 = -v1153;
                                                    v816 = v814 - 1;
                                                    v817 = v816 + v815;
                                                    if (v816 + v815 >= 0x40)
                                                      v817 = 64;
                                                    v1116 = v817;
                                                    v818 = v1152;
                                                    do
                                                    {
                                                      v820 = 0;
                                                      v821 = 0;
                                                      if (v812 >= v816)
                                                        v822 = v816;
                                                      else
                                                        v822 = v812;
                                                      v823 = ~v822;
                                                      v824 = __src;
                                                      do
                                                      {
                                                        if (v812 + v820 < v815)
                                                        {
                                                          v825 = v818[v820] * (unint64_t)*v824;
                                                          v813 += v825;
                                                          v821 += HIDWORD(v825);
                                                        }
                                                        --v820;
                                                        ++v824;
                                                      }
                                                      while (v823 != v820);
                                                      v1115[v812] = v813;
                                                      v813 = v821 + HIDWORD(v813);
                                                      ++v812;
                                                      v819 = v1116;
                                                      ++v818;
                                                    }
                                                    while (v812 < v1116);
                                                    if (v813 && v1116 != 64)
                                                    {
                                                      v1115[v1116] = v813;
                                                      v819 = ++v1116;
                                                    }
                                                    if (v810 > 0 != v811 > 0)
                                                      v1116 = -v819;
                                                  }
                                                  else
                                                  {
                                                    v1116 = 0;
                                                  }
                                                  if (v784 && (v826 = v1129[64]) != 0)
                                                  {
                                                    v827 = 0;
                                                    v828 = 0;
                                                    if (v1129[64] >= 0)
                                                      v829 = v1129[64];
                                                    else
                                                      v829 = -v1129[64];
                                                    if (v784 >= 0)
                                                      v830 = v784;
                                                    else
                                                      v830 = -v784;
                                                    v831 = v829 - 1;
                                                    v832 = v831 + v830;
                                                    if (v831 + v830 >= 0x40)
                                                      v832 = 64;
                                                    v1114 = v832;
                                                    v833 = v1148;
                                                    do
                                                    {
                                                      v835 = 0;
                                                      v836 = 0;
                                                      if (v827 >= v831)
                                                        v837 = v831;
                                                      else
                                                        v837 = v827;
                                                      v838 = ~v837;
                                                      v839 = v1129;
                                                      do
                                                      {
                                                        if (v827 + v835 < v830)
                                                        {
                                                          v840 = v833[v835] * (unint64_t)*v839;
                                                          v828 += v840;
                                                          v836 += HIDWORD(v840);
                                                        }
                                                        --v835;
                                                        ++v839;
                                                      }
                                                      while (v838 != v835);
                                                      v1113[v827] = v828;
                                                      v828 = v836 + HIDWORD(v828);
                                                      ++v827;
                                                      v834 = v1114;
                                                      ++v833;
                                                    }
                                                    while (v827 < v1114);
                                                    if (v828 && v1114 != 64)
                                                    {
                                                      v1113[v1114] = v828;
                                                      v834 = ++v1114;
                                                    }
                                                    if (v784 > 0 != v826 > 0)
                                                      v1114 = -v834;
                                                  }
                                                  else
                                                  {
                                                    v1114 = 0;
                                                  }
                                                  sub_223F1625C(v1117, v1115, v1113);
                                                  v841 = v1132;
                                                  if (v1132 && (v842 = v1118) != 0)
                                                  {
                                                    v843 = 0;
                                                    v844 = 0;
                                                    if (v1132 >= 0)
                                                      v845 = v1132;
                                                    else
                                                      v845 = -v1132;
                                                    if (v1118 >= 0)
                                                      v846 = v1118;
                                                    else
                                                      v846 = -v1118;
                                                    v847 = v845 - 1;
                                                    v848 = v847 + v846;
                                                    if (v847 + v846 >= 0x40)
                                                      v848 = 64;
                                                    v1120 = v848;
                                                    v849 = v1117;
                                                    do
                                                    {
                                                      v851 = 0;
                                                      v852 = 0;
                                                      if (v843 >= v847)
                                                        v853 = v847;
                                                      else
                                                        v853 = v843;
                                                      v854 = ~v853;
                                                      v855 = v1131;
                                                      do
                                                      {
                                                        if (v843 + v851 < v846)
                                                        {
                                                          v856 = v849[v851] * (unint64_t)*v855;
                                                          v844 += v856;
                                                          v852 += HIDWORD(v856);
                                                        }
                                                        --v851;
                                                        ++v855;
                                                      }
                                                      while (v854 != v851);
                                                      v1119[v843] = v844;
                                                      v844 = v852 + HIDWORD(v844);
                                                      ++v843;
                                                      v850 = v1120;
                                                      ++v849;
                                                    }
                                                    while (v843 < v1120);
                                                    if (v844 && v1120 != 64)
                                                    {
                                                      v1119[v1120] = v844;
                                                      v850 = ++v1120;
                                                    }
                                                    if (v841 > 0 != v842 > 0)
                                                      v1120 = -v850;
                                                  }
                                                  else
                                                  {
                                                    v1120 = 0;
                                                  }
                                                  sub_223F15F80(v1127, __dst, v1119);
                                                  memcpy(v1143, v1127, sizeof(v1143));
                                                  v857 = v1132;
                                                  if (v1132 && (v858 = v1128[64]) != 0)
                                                  {
                                                    v859 = 0;
                                                    v860 = 0;
                                                    if (v1132 >= 0)
                                                      v861 = v1132;
                                                    else
                                                      v861 = -v1132;
                                                    if (v1128[64] >= 0)
                                                      v862 = v1128[64];
                                                    else
                                                      v862 = -v1128[64];
                                                    v863 = v861 - 1;
                                                    v864 = v863 + v862;
                                                    if (v863 + v862 >= 0x40)
                                                      v864 = 64;
                                                    v1127[64] = v864;
                                                    v865 = v1128;
                                                    do
                                                    {
                                                      v867 = 0;
                                                      v868 = 0;
                                                      if (v859 >= v863)
                                                        v869 = v863;
                                                      else
                                                        v869 = v859;
                                                      v870 = ~v869;
                                                      v871 = v1131;
                                                      do
                                                      {
                                                        if (v859 + v867 < v862)
                                                        {
                                                          v872 = v865[v867] * (unint64_t)*v871;
                                                          v860 += v872;
                                                          v868 += HIDWORD(v872);
                                                        }
                                                        --v867;
                                                        ++v871;
                                                      }
                                                      while (v870 != v867);
                                                      v1127[v859] = v860;
                                                      v860 = v868 + HIDWORD(v860);
                                                      ++v859;
                                                      v866 = v1127[64];
                                                      ++v865;
                                                    }
                                                    while (v859 < (int)v1127[64]);
                                                    if (v860 && v1127[64] != 64)
                                                    {
                                                      v1127[v1127[64]] = v860;
                                                      v866 = ++v1127[64];
                                                    }
                                                    if (v857 > 0 != v858 > 0)
                                                      v1127[64] = -v866;
                                                  }
                                                  else
                                                  {
                                                    v1127[64] = 0;
                                                  }
                                                  memcpy(v1144, v1127, sizeof(v1144));
                                                  v873 = sub_223F20B68();
                                                  *(long double *)(v17 + 8) = ldexp(*(long double *)&v873, v874) / v557;
                                                  goto LABEL_1380;
                                                }
                                              }
                                              else
                                              {
                                                v1123[64] = 0;
                                                LODWORD(v774) = v1129[64];
                                                if (v1129[64])
                                                  goto LABEL_1216;
                                              }
                                              v1122 = 0;
                                              sub_223F1625C(v1124, v1123, (int *)v1121);
                                              v784 = v1149;
                                              if (!v1149)
                                                goto LABEL_1273;
                                              goto LABEL_1255;
                                            }
LABEL_1116:
                                            __dst[64] = 0;
                                            goto LABEL_1122;
                                          }
                                        }
                                        else
                                        {
                                          v1123[64] = 0;
                                          LODWORD(v571) = v1129[64];
                                          if (v1129[64])
                                            goto LABEL_877;
                                        }
                                        v1122 = 0;
                                        sub_223F1625C(v1124, v1123, (int *)v1121);
                                        v581 = v1151;
                                        if (!v1151)
                                          goto LABEL_1116;
                                        goto LABEL_1098;
                                      }
                                    }
                                    v1125 = 0;
                                    goto LABEL_568;
                                  }
                                }
                                v1125 = 0;
                                goto LABEL_530;
                              }
                            }
                          }
                          else
                          {
                            LODWORD(v247) = 1;
                            v248 = v23[1];
                            v249 = v1137;
                            if (v1137)
                              goto LABEL_337;
                          }
                          v1142[64] = 0;
                          goto LABEL_361;
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v231) = 1;
                      v232 = *v23;
                      v233 = v1137;
                      if (v1137)
                        goto LABEL_308;
                    }
                    v1142[64] = 0;
                    goto LABEL_335;
                  }
                }
LABEL_205:
                v1134 = 0;
                goto LABEL_206;
              }
            }
            v1138[64] = 0;
            v139 = v1150;
            v140 = v20[2];
            if (v140 > 0)
              goto LABEL_161;
            goto LABEL_204;
          }
        }
LABEL_135:
        v1134 = 0;
        goto LABEL_136;
      }
    }
    v1138[64] = 0;
    v107 = v21[1];
    if (v107 > 0)
      goto LABEL_109;
    goto LABEL_134;
  }
  if (v1153)
  {
    v97 = 0;
    v98 = 0;
    if (v1153 >= 0)
      v99 = v1153;
    else
      v99 = -v1153;
    v100 = v99 - 1 + v99;
    if (v100 >= 0x40)
      LODWORD(v100) = 64;
    v1138[64] = v100;
    do
    {
      v101 = 0;
      v102 = 0;
      if (v97 >= v99 - 1)
        v103 = v99 - 1;
      else
        v103 = v97;
      v104 = v103 + 1;
      v105 = v97;
      do
      {
        if (v105 < v99)
        {
          v106 = v1152[v105] * (unint64_t)v1152[v101];
          v98 += v106;
          v102 += HIDWORD(v106);
        }
        ++v101;
        --v105;
      }
      while (v104 != v101);
      v1138[v97] = v98;
      v98 = v102 + HIDWORD(v98);
      ++v97;
    }
    while (v97 < v1138[64]);
    if (v98 && v1138[64] != 64)
      v1138[v1138[64]++] = v98;
    LODWORD(v156) = v1149;
    if (v1149)
      goto LABEL_188;
LABEL_382:
    *(_DWORD *)&v1146[256] = 0;
    goto LABEL_383;
  }
  v1138[64] = 0;
  LODWORD(v156) = v1149;
  if (!v1149)
    goto LABEL_382;
LABEL_188:
  v157 = 0;
  v158 = 0;
  if ((v156 & 0x80000000) == 0)
    v156 = v156;
  else
    v156 = -(int)v156;
  v159 = v156 - 1 + v156;
  if (v159 >= 0x40)
    LODWORD(v159) = 64;
  *(_DWORD *)&v1146[256] = v159;
  do
  {
    v160 = 0;
    v161 = 0;
    if (v157 >= v156 - 1)
      v162 = v156 - 1;
    else
      v162 = v157;
    v163 = v162 + 1;
    v164 = v157;
    do
    {
      if (v164 < v156)
      {
        v165 = v1148[v164] * (unint64_t)v1148[v160];
        v158 += v165;
        v161 += HIDWORD(v165);
      }
      ++v160;
      --v164;
    }
    while (v163 != v160);
    *(_DWORD *)&v1146[4 * v157] = v158;
    v158 = v161 + HIDWORD(v158);
    ++v157;
  }
  while (v157 < *(int *)&v1146[256]);
  if (v158 && *(_DWORD *)&v1146[256] != 64)
  {
    *(_DWORD *)&v1146[4 * *(int *)&v1146[256]] = v158;
    ++*(_DWORD *)&v1146[256];
  }
LABEL_383:
  sub_223F1625C(v1142, v1138, (int *)v1146);
  if ((v1142[64] & 0x80000000) == 0)
    v277 = v1142[64];
  else
    v277 = -v1142[64];
  if ((_DWORD)v277)
  {
    if (v277 == 1)
    {
      v278 = 0;
      LODWORD(v273) = v1142[0];
      v279 = (double)v273;
    }
    else if (v277 == 2)
    {
      v278 = 0;
      LODWORD(v273) = v1142[1];
      LODWORD(v274) = v1142[0];
      v279 = (double)v273 * 4294967300.0 + (double)v274;
    }
    else
    {
      v516 = &v1142[v277];
      LODWORD(v275) = *(v516 - 2);
      LODWORD(v273) = *(v516 - 1);
      LODWORD(v276) = *(v516 - 3);
      v279 = ((double)v273 * 4294967300.0 + (double)v275) * 4294967300.0 + (double)v276;
      v278 = 32 * v277 - 96;
    }
    if ((v1142[64] & 0x80000000) != 0)
      v279 = -v279;
  }
  else
  {
    v278 = 0;
    v279 = 0.0;
  }
  v517 = ldexp(v279, v278);
  sub_223F20A10(v1148, *v20 - (uint64_t)v21[2], (uint64_t)v1142);
  sub_223F20A10(v1152, v20[1] - (uint64_t)v21[3], (uint64_t)v1138);
  sub_223F15F80(v1146, v1142, v1138);
  sub_223F20A10(v1152, v23[1] - (uint64_t)v21[3], (uint64_t)v1142);
  sub_223F20A10(v1148, *v23 - (uint64_t)v21[2], (uint64_t)v1138);
  sub_223F15F80(v1133, v1142, v1138);
  sub_223F20A10(v1148, *v23 - (uint64_t)*v20, (uint64_t)v1142);
  sub_223F20A10(v1152, v23[1] - (uint64_t)v20[1], (uint64_t)v1138);
  sub_223F15F80(v1131, v1142, v1138);
  v518 = v1134;
  if (v1134 && (v519 = v1132) != 0)
  {
    v520 = 0;
    v521 = 0;
    if (v1134 >= 0)
      v522 = v1134;
    else
      v522 = -v1134;
    if (v1132 >= 0)
      v523 = v1132;
    else
      v523 = -v1132;
    v524 = v522 - 1;
    v525 = v524 + v523;
    if (v524 + v523 >= 0x40)
      v525 = 64;
    v1142[64] = v525;
    v526 = v1131;
    do
    {
      v528 = 0;
      v529 = 0;
      if (v520 >= v524)
        v530 = v524;
      else
        v530 = v520;
      v531 = ~v530;
      v532 = v1133;
      do
      {
        if (v520 + v528 < v523)
        {
          v533 = v526[v528] * (unint64_t)*v532;
          v521 += v533;
          v529 += HIDWORD(v533);
        }
        --v528;
        ++v532;
      }
      while (v531 != v528);
      v1142[v520] = v521;
      v521 = v529 + HIDWORD(v521);
      ++v520;
      v527 = v1142[64];
      ++v526;
    }
    while (v520 < (int)v1142[64]);
    if (v521 && v1142[64] != 64)
    {
      v1142[v1142[64]] = v521;
      v527 = ++v1142[64];
    }
    if (v518 > 0 != v519 > 0)
      v1142[64] = -v527;
  }
  else
  {
    v1142[64] = 0;
  }
  v534 = v517 + v517;
  memcpy(v1138, v1142, sizeof(v1138));
  v1139[0] = 1;
  v1139[64] = 1;
  if (v13)
  {
    v535 = v1149;
    if (v1149)
    {
      v536 = 0;
      v537 = 0;
      if (v19 == 2)
        LODWORD(v538) = 1;
      else
        LODWORD(v538) = -1;
      if (v1149 >= 0)
        v539 = v1149;
      else
        v539 = -v1149;
      if ((v538 & 0x80000000) == 0)
        v538 = v538;
      else
        v538 = -(int)v538;
      v540 = v539 - 1;
      v541 = v540 + v538;
      if (v540 + v538 >= 0x40)
        v541 = 64;
      __src[64] = v541;
      do
      {
        v543 = 0;
        v544 = 0;
        if (v536 >= v540)
          v545 = v540;
        else
          v545 = v536;
        v546 = ~v545;
        v547 = v1148;
        do
        {
          if (v536 + v543 < v538)
          {
            v548 = *v547;
            v537 += (2 * v548);
            v544 += v548 >> 31;
          }
          --v543;
          ++v547;
        }
        while (v546 != v543);
        __src[v536] = v537;
        v537 = v544 + HIDWORD(v537);
        ++v536;
        v542 = __src[64];
      }
      while (v536 < __src[64]);
      if (v537 && __src[64] != 64)
      {
        __src[__src[64]] = v537;
        v542 = ++__src[64];
      }
      if ((v19 == 2) != v535 > 0)
        __src[64] = -v542;
    }
    else
    {
      __src[64] = 0;
    }
    memcpy(v1142, __src, sizeof(v1142));
    if (v1153)
    {
      v593 = 0;
      v594 = 0;
      if (v1153 >= 0)
        v595 = v1153;
      else
        v595 = -v1153;
      v596 = v595 - 1 + v595;
      if (v596 >= 0x40)
        LODWORD(v596) = 64;
      v1127[64] = v596;
      do
      {
        v597 = 0;
        v598 = 0;
        if (v593 >= v595 - 1)
          v599 = v595 - 1;
        else
          v599 = v593;
        v600 = v599 + 1;
        v601 = v593;
        do
        {
          if (v601 < v595)
          {
            v602 = v1152[v601] * (unint64_t)v1152[v597];
            v594 += v602;
            v598 += HIDWORD(v602);
          }
          ++v597;
          --v601;
        }
        while (v600 != v597);
        v1127[v593] = v594;
        v594 = v598 + HIDWORD(v594);
        ++v593;
      }
      while (v593 < (int)v1127[64]);
      if (v594 && v1127[64] != 64)
        v1127[v1127[64]++] = v594;
    }
    else
    {
      v1127[64] = 0;
    }
    sub_223F20A10(v1127, v20[1] + (uint64_t)v21[3], (uint64_t)v1128);
    v603 = v1153;
    if (v1153 && (v604 = v1149) != 0)
    {
      v605 = 0;
      v606 = 0;
      if (v1153 >= 0)
        v607 = v1153;
      else
        v607 = -v1153;
      if (v1149 >= 0)
        v608 = v1149;
      else
        v608 = -v1149;
      v609 = v607 - 1;
      v610 = v609 + v608;
      if (v609 + v608 >= 0x40)
        v610 = 64;
      v1125 = v610;
      v611 = v1148;
      do
      {
        v613 = 0;
        v614 = 0;
        if (v605 >= v609)
          v615 = v609;
        else
          v615 = v605;
        v616 = ~v615;
        v617 = v1152;
        do
        {
          if (v605 + v613 < v608)
          {
            v618 = v611[v613] * (unint64_t)*v617;
            v606 += v618;
            v614 += HIDWORD(v618);
          }
          --v613;
          ++v617;
        }
        while (v616 != v613);
        v1124[v605] = v606;
        v606 = v614 + HIDWORD(v606);
        ++v605;
        v612 = v1125;
        ++v611;
      }
      while (v605 < v1125);
      if (v606 && v1125 != 64)
      {
        v1124[v1125] = v606;
        v612 = ++v1125;
      }
      if (v603 > 0 != v604 > 0)
        v1125 = -v612;
    }
    else
    {
      v1125 = 0;
    }
    sub_223F20A10(v1124, *v20 + (uint64_t)v21[2] - 2 * *v23, (uint64_t)__dst);
    sub_223F15F80(v1129, v1128, __dst);
    if (v1149)
    {
      v619 = 0;
      v620 = 0;
      if (v1149 >= 0)
        v621 = v1149;
      else
        v621 = -v1149;
      v622 = v621 - 1 + v621;
      if (v622 >= 0x40)
        LODWORD(v622) = 64;
      v1122 = v622;
      do
      {
        v623 = 0;
        v624 = 0;
        if (v619 >= v621 - 1)
          v625 = v621 - 1;
        else
          v625 = v619;
        v626 = v625 + 1;
        v627 = v619;
        do
        {
          if (v627 < v621)
          {
            v628 = v1148[v627] * (unint64_t)v1148[v623];
            v620 += v628;
            v624 += HIDWORD(v628);
          }
          ++v623;
          --v627;
        }
        while (v626 != v623);
        v1121[v619] = v620;
        v620 = v624 + HIDWORD(v620);
        ++v619;
      }
      while (v619 < v1122);
      if (v620 && v1122 != 64)
        v1121[v1122++] = v620;
    }
    else
    {
      v1122 = 0;
    }
    sub_223F20A10(v1121, 2 * v23[1], (uint64_t)v1123);
    sub_223F1625C(__src, v1129, v1123);
    memcpy(v1143, __src, sizeof(v1143));
    v633 = sub_223F19700((uint64_t)v24, v1142, v1138, v629, v630, v631, v632);
    *(long double *)(v17 + 8) = ldexp(*(long double *)&v633, v634) / v534;
  }
  if ((v15 & 1) != 0 || a9)
  {
    v635 = v1153;
    if (v1153)
    {
      v636 = 0;
      v637 = 0;
      if (v19 == 2)
        LODWORD(v638) = 1;
      else
        LODWORD(v638) = -1;
      if (v1153 >= 0)
        v639 = v1153;
      else
        v639 = -v1153;
      if ((v638 & 0x80000000) == 0)
        v638 = v638;
      else
        v638 = -(int)v638;
      v640 = v639 - 1;
      v641 = v640 + v638;
      if (v640 + v638 >= 0x40)
        v641 = 64;
      __src[64] = v641;
      do
      {
        v643 = 0;
        v644 = 0;
        if (v636 >= v640)
          v645 = v640;
        else
          v645 = v636;
        v646 = ~v645;
        v647 = v1152;
        do
        {
          if (v636 + v643 < v638)
          {
            v648 = *v647;
            v637 += (2 * v648);
            v644 += v648 >> 31;
          }
          --v643;
          ++v647;
        }
        while (v646 != v643);
        __src[v636] = v637;
        v637 = v644 + HIDWORD(v637);
        ++v636;
        v642 = __src[64];
      }
      while (v636 < __src[64]);
      if (v637 && __src[64] != 64)
      {
        __src[__src[64]] = v637;
        v642 = ++__src[64];
      }
      if ((v19 == 2) != v635 > 0)
        __src[64] = -v642;
    }
    else
    {
      __src[64] = 0;
    }
    memcpy(v1142, __src, sizeof(v1142));
    if (v1149)
    {
      v649 = 0;
      v650 = 0;
      if (v1149 >= 0)
        v651 = v1149;
      else
        v651 = -v1149;
      v652 = v651 - 1 + v651;
      if (v652 >= 0x40)
        LODWORD(v652) = 64;
      v1127[64] = v652;
      do
      {
        v653 = 0;
        v654 = 0;
        if (v649 >= v651 - 1)
          v655 = v651 - 1;
        else
          v655 = v649;
        v656 = v655 + 1;
        v657 = v649;
        do
        {
          if (v657 < v651)
          {
            v658 = v1148[v657] * (unint64_t)v1148[v653];
            v650 += v658;
            v654 += HIDWORD(v658);
          }
          ++v653;
          --v657;
        }
        while (v656 != v653);
        v1127[v649] = v650;
        v650 = v654 + HIDWORD(v650);
        ++v649;
      }
      while (v649 < (int)v1127[64]);
      if (v650 && v1127[64] != 64)
        v1127[v1127[64]++] = v650;
    }
    else
    {
      v1127[64] = 0;
    }
    sub_223F20A10(v1127, *v20 + (uint64_t)v21[2], (uint64_t)v1128);
    v659 = v1153;
    if (v1153 && (v660 = v1149) != 0)
    {
      v661 = 0;
      v662 = 0;
      if (v1153 >= 0)
        v663 = v1153;
      else
        v663 = -v1153;
      if (v1149 >= 0)
        v664 = v1149;
      else
        v664 = -v1149;
      v665 = v663 - 1;
      v666 = v665 + v664;
      if (v665 + v664 >= 0x40)
        v666 = 64;
      v1125 = v666;
      v667 = v1148;
      do
      {
        v669 = 0;
        v670 = 0;
        if (v661 >= v665)
          v671 = v665;
        else
          v671 = v661;
        v672 = ~v671;
        v673 = v1152;
        do
        {
          if (v661 + v669 < v664)
          {
            v674 = v667[v669] * (unint64_t)*v673;
            v662 += v674;
            v670 += HIDWORD(v674);
          }
          --v669;
          ++v673;
        }
        while (v672 != v669);
        v1124[v661] = v662;
        v662 = v670 + HIDWORD(v662);
        ++v661;
        v668 = v1125;
        ++v667;
      }
      while (v661 < v1125);
      if (v662 && v1125 != 64)
      {
        v1124[v1125] = v662;
        v668 = ++v1125;
      }
      if (v659 > 0 != v660 > 0)
        v1125 = -v668;
    }
    else
    {
      v1125 = 0;
    }
    sub_223F20A10(v1124, v20[1] + (uint64_t)v21[3] - 2 * v23[1], (uint64_t)__dst);
    sub_223F15F80(v1129, v1128, __dst);
    if (v1153)
    {
      v675 = 0;
      v676 = 0;
      if (v1153 >= 0)
        v677 = v1153;
      else
        v677 = -v1153;
      v678 = v677 - 1 + v677;
      if (v678 >= 0x40)
        LODWORD(v678) = 64;
      v1122 = v678;
      do
      {
        v679 = 0;
        v680 = 0;
        if (v675 >= v677 - 1)
          v681 = v677 - 1;
        else
          v681 = v675;
        v682 = v681 + 1;
        v683 = v675;
        do
        {
          if (v683 < v677)
          {
            v684 = v1152[v683] * (unint64_t)v1152[v679];
            v676 += v684;
            v680 += HIDWORD(v684);
          }
          ++v679;
          --v683;
        }
        while (v682 != v679);
        v1121[v675] = v676;
        v676 = v680 + HIDWORD(v676);
        ++v675;
      }
      while (v675 < v1122);
      if (v676 && v1122 != 64)
        v1121[v1122++] = v676;
    }
    else
    {
      v1122 = 0;
    }
    sub_223F20A10(v1121, 2 * *v23, (uint64_t)v1123);
    sub_223F1625C(__src, v1129, v1123);
    memcpy(v1143, __src, sizeof(v1143));
    if (v15)
    {
      v689 = sub_223F19700((uint64_t)v24, v1142, v1138, v685, v686, v687, v688);
      *(long double *)v17 = ldexp(*(long double *)&v689, v690) / v534;
    }
    if (a9)
    {
      *(_OWORD *)&v1144[192] = *(_OWORD *)&v1146[192];
      *(_OWORD *)&v1144[208] = *(_OWORD *)&v1146[208];
      *(_OWORD *)&v1144[224] = *(_OWORD *)&v1146[224];
      *(_OWORD *)&v1144[240] = *(_OWORD *)&v1146[240];
      *(_OWORD *)&v1144[128] = *(_OWORD *)&v1146[128];
      *(_OWORD *)&v1144[144] = *(_OWORD *)&v1146[144];
      *(_OWORD *)&v1144[160] = *(_OWORD *)&v1146[160];
      *(_OWORD *)&v1144[176] = *(_OWORD *)&v1146[176];
      *(_OWORD *)&v1144[64] = *(_OWORD *)&v1146[64];
      *(_OWORD *)&v1144[80] = *(_OWORD *)&v1146[80];
      *(_OWORD *)&v1144[96] = *(_OWORD *)&v1146[96];
      *(_OWORD *)&v1144[112] = *(_OWORD *)&v1146[112];
      *(_OWORD *)v1144 = *(_OWORD *)v1146;
      *(_OWORD *)&v1144[16] = *(_OWORD *)&v1146[16];
      *(_OWORD *)&v1144[32] = *(_OWORD *)&v1146[32];
      *(_OWORD *)&v1144[48] = *(_OWORD *)&v1146[48];
      if (*(int *)&v1146[256] >= 0)
        v691 = *(_DWORD *)&v1146[256];
      else
        v691 = -*(_DWORD *)&v1146[256];
      *(_DWORD *)&v1144[256] = v691;
      if (v1153)
      {
        v692 = 0;
        v693 = 0;
        if (v1153 >= 0)
          v694 = v1153;
        else
          v694 = -v1153;
        v695 = v694 - 1 + v694;
        if (v695 >= 0x40)
          LODWORD(v695) = 64;
        v1129[64] = v695;
        do
        {
          v696 = 0;
          v697 = 0;
          if (v692 >= v694 - 1)
            v698 = v694 - 1;
          else
            v698 = v692;
          v699 = v698 + 1;
          v700 = v692;
          do
          {
            if (v700 < v694)
            {
              v701 = v1152[v700] * (unint64_t)v1152[v696];
              v693 += v701;
              v697 += HIDWORD(v701);
            }
            ++v696;
            --v700;
          }
          while (v699 != v696);
          v1129[v692] = v693;
          v693 = v697 + HIDWORD(v693);
          ++v692;
        }
        while (v692 < v1129[64]);
        if (v693 && v1129[64] != 64)
          v1129[v1129[64]++] = v693;
        LODWORD(v785) = v1149;
        if (v1149)
          goto LABEL_1239;
      }
      else
      {
        v1129[64] = 0;
        LODWORD(v785) = v1149;
        if (v1149)
        {
LABEL_1239:
          v786 = 0;
          v787 = 0;
          if ((v785 & 0x80000000) == 0)
            v785 = v785;
          else
            v785 = -(int)v785;
          v788 = v785 - 1 + v785;
          if (v788 >= 0x40)
            LODWORD(v788) = 64;
          v1128[64] = v788;
          do
          {
            v789 = 0;
            v790 = 0;
            if (v786 >= v785 - 1)
              v791 = v785 - 1;
            else
              v791 = v786;
            v792 = v791 + 1;
            v793 = v786;
            do
            {
              if (v793 < v785)
              {
                v794 = v1148[v793] * (unint64_t)v1148[v789];
                v787 += v794;
                v790 += HIDWORD(v794);
              }
              ++v789;
              --v793;
            }
            while (v792 != v789);
            v1128[v786] = v787;
            v787 = v790 + HIDWORD(v787);
            ++v786;
          }
          while (v786 < v1128[64]);
          if (v787 && v1128[64] != 64)
            v1128[v1128[64]++] = v787;
          goto LABEL_1694;
        }
      }
      v1128[64] = 0;
LABEL_1694:
      sub_223F1625C(__src, v1129, v1128);
      memcpy(v1140, __src, sizeof(v1140));
      v1059 = sub_223F1AE4C(v24, v1142, v1138, v1055, v1056, v1057, v1058);
      v1061 = ldexp(*(long double *)&v1059, v1060) / v534;
LABEL_1782:
      *(double *)(v17 + 16) = v1061;
    }
  }
}

unsigned int *sub_223F20A10@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;

  if (a2 < 1)
  {
    if (a2 < 0)
    {
      v19 = -a2;
      v3 = (unint64_t)-a2 >> 32 ? -2 : -1;
      v20 = v3;
      v4 = result[64];
      if (v4)
        goto LABEL_6;
    }
LABEL_34:
    *(_DWORD *)(a3 + 256) = 0;
    return result;
  }
  v19 = a2;
  if (HIDWORD(a2))
    v3 = 2;
  else
    v3 = 1;
  v20 = v3;
  v4 = result[64];
  if (!v4)
    goto LABEL_34;
LABEL_6:
  v5 = 0;
  v6 = 0;
  if (v4 >= 0)
    v7 = v4;
  else
    v7 = -v4;
  if (v3 >= 0)
    v8 = v3;
  else
    v8 = -v3;
  v9 = v7 - 1;
  v10 = v9 + v8;
  if (v9 + v8 >= 0x40)
    v10 = 64;
  *(_DWORD *)(a3 + 256) = v10;
  v11 = &v19;
  do
  {
    v13 = 0;
    v14 = 0;
    if (v5 >= v9)
      v15 = v9;
    else
      v15 = v5;
    v16 = ~v15;
    v17 = result;
    do
    {
      if (v5 + v13 < v8)
      {
        v18 = *((unsigned int *)v11 + v13) * (unint64_t)*v17;
        v6 += v18;
        v14 += HIDWORD(v18);
      }
      --v13;
      ++v17;
    }
    while (v16 != v13);
    *(_DWORD *)(a3 + 4 * v5) = v6;
    v6 = v14 + HIDWORD(v6);
    ++v5;
    v12 = *(_DWORD *)(a3 + 256);
    v11 = (uint64_t *)((char *)v11 + 4);
  }
  while (v5 < v12);
  if (v6 && v12 != 64)
  {
    *(_DWORD *)(a3 + 4 * v12) = v6;
    v12 = *(_DWORD *)(a3 + 256) + 1;
    *(_DWORD *)(a3 + 256) = v12;
  }
  if (v3 > 0 != v4 > 0)
    *(_DWORD *)(a3 + 256) = -v12;
  return result;
}

uint64_t sub_223F20B68()
{
  uint64_t v0;
  _DWORD *v1;
  unsigned int *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  unsigned int *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  double v27;
  _DWORD *v28;
  int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  int v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unsigned int *v60;
  _DWORD *v61;
  int v62;
  int v63;
  double v64;
  long double v65;
  int v66;
  long double v67;
  unsigned int *v68;
  _DWORD *v69;
  unsigned int *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  double *v77;
  long double *v78;
  int v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  unint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  int v103;
  int v104;
  double v105;
  double v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  int v112;
  int v113;
  double v114;
  long double v115;
  int v116;
  double v117;
  int v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _DWORD *v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  unsigned int *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  int *v191;
  unint64_t v192;
  int v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  int v199;
  unsigned int *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  int *v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  int v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  unsigned int *v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  int *v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  int v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int *v269;
  unint64_t v270;
  int v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  _DWORD *v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  double *v284;
  unint64_t v285;
  int v286;
  int v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unsigned int *v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  int v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  int v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  _DWORD *v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  int *v336;
  unint64_t v337;
  int v338;
  int v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unsigned int *v351;
  unint64_t v352;
  double v353;
  double v354;
  double v355;
  double v356;
  uint64_t v357;
  int v358;
  int v359;
  double v360;
  double *v361;
  double *v362;
  _DWORD *v363;
  int v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  int v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  int v382;
  _DWORD *v383;
  int v384;
  uint64_t v385;
  uint64_t v386;
  unint64_t v387;
  unint64_t v388;
  int *v389;
  unint64_t v390;
  int v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  int v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  int v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  _DWORD *v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unint64_t v415;
  int *v416;
  unint64_t v417;
  int v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  int v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  unint64_t v429;
  int *v430;
  unint64_t v431;
  int v432;
  int v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  int v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unsigned int *v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  int v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  int v469;
  unint64_t v470;
  unint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  int v475;
  int v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  unint64_t v480;
  int *v481;
  unint64_t v482;
  unsigned int *v483;
  int v484;
  int v485;
  unint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  int v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unsigned int *v497;
  unint64_t v498;
  double v499;
  double v500;
  double v501;
  double v502;
  uint64_t v503;
  int v504;
  double v505;
  int v506;
  int v507;
  long double v508;
  _DWORD *v509;
  unsigned int *v510;
  unsigned int *v511;
  _QWORD v512[32];
  int v513;
  double v514[32];
  int v515;
  _QWORD v516[2];
  double v517[2];
  int v518[64];
  int v519;
  int v520[64];
  int v521;
  int v522[64];
  int v523;
  int v524[64];
  int v525;
  int v526[64];
  int v527;
  int v528[64];
  int v529;
  int v530[64];
  int v531;
  _DWORD v532[64];
  int v533;
  _QWORD __src[33];
  _DWORD __dst[65];
  _DWORD v536[130];
  _BYTE v537[260];
  unsigned int v538[65];
  _BYTE v539[260];
  _BYTE v540[260];
  _BYTE v541[260];
  uint64_t v542;

  v0 = MEMORY[0x24BDAC7A8]();
  v7 = v2;
  v8 = v1;
  v9 = v0;
  v542 = *MEMORY[0x24BDAC8D0];
  if (v1[259])
  {
    v10 = v1 + 195;
    v538[0] = 1;
    v538[64] = 1;
    v11 = v2[64];
    v510 = v2 + 65;
    if (v11 && (v12 = v2[129]) != 0)
    {
      v13 = 0;
      v14 = 0;
      if (v11 >= 0)
        v15 = v11;
      else
        v15 = -v11;
      if (v12 >= 0)
        v16 = v12;
      else
        v16 = -v12;
      v17 = v15 - 1;
      v18 = v17 + v16;
      if (v17 + v16 >= 0x40)
        v18 = 64;
      LODWORD(__src[32]) = v18;
      v19 = v2 + 65;
      do
      {
        v21 = 0;
        v22 = 0;
        if (v13 >= v17)
          v23 = v17;
        else
          v23 = v13;
        v24 = ~v23;
        v25 = v7;
        do
        {
          if (v13 + v21 < v16)
          {
            v26 = v19[v21] * (unint64_t)*v25;
            v14 += v26;
            v22 += HIDWORD(v26);
          }
          --v21;
          ++v25;
        }
        while (v24 != v21);
        *((_DWORD *)__src + v13) = v14;
        v14 = v22 + HIDWORD(v14);
        ++v13;
        v20 = __src[32];
        ++v19;
      }
      while (v13 < SLODWORD(__src[32]));
      if (v14 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v14;
        v20 = ++LODWORD(__src[32]);
      }
      if (v11 > 0 != v12 > 0)
        LODWORD(__src[32]) = -v20;
    }
    else
    {
      LODWORD(__src[32]) = 0;
    }
    memcpy(__dst, __src, sizeof(__dst));
    v45 = v7 + 130;
    memcpy(v539, v7 + 130, sizeof(v539));
    v536[0] = 1;
    v536[64] = 1;
    v46 = v8 + 130;
    v509 = v7 + 195;
    v51 = sub_223F1AA90(v47, v48, v49, v50, v9, v8 + 130, v7 + 195);
    v53 = v52;
    v55 = v54;
    v59 = COERCE_DOUBLE(sub_223F19700(v9, v538, __dst, v51, v56, v57, v58));
    v60 = v7;
    v61 = (_DWORD *)v9;
    v63 = v62;
    v64 = v59;
    if ((v62 & 1) != 0)
      v64 = v59 + v59;
    v65 = frexp(sqrt(v64), (int *)&__src[1]);
    v66 = LODWORD(__src[1]) + (v63 >> 1);
    v67 = frexp(v65 * v55, (int *)&__src[1]);
    v68 = v60;
    LODWORD(__src[1]) += v66 + v53;
    v517[0] = v67;
    v517[1] = *(double *)&__src[1];
    memcpy(v538, v8, sizeof(v538));
    memcpy(__dst, v60, sizeof(__dst));
    v69 = v8 + 65;
    memcpy(v539, v8 + 65, sizeof(v539));
    v70 = v510;
    memcpy(v536, v510, 0x104uLL);
    memcpy(v540, v8 + 195, sizeof(v540));
    v536[65] = 1;
    v536[129] = 1;
    v75 = COERCE_DOUBLE(sub_223F1AE4C(v61, v538, __dst, v71, v72, v73, v74));
    *(double *)v516 = v75;
    v516[1] = v76;
    if (v75 >= 0.0 && v517[0] >= 0.0 || v75 <= 0.0 && v517[0] <= 0.0)
    {
      v77 = (double *)v516;
      v78 = v517;
      return sub_223F1AC88(v77, v78);
    }
    v79 = v8[259];
    if (!v79)
      goto LABEL_121;
    v80 = v8[64];
    if (!v80)
      goto LABEL_121;
    v81 = 0;
    v82 = 0;
    if (v79 >= 0)
      v83 = v79;
    else
      v83 = -v79;
    if (v80 >= 0)
      v84 = v80;
    else
      v84 = -v80;
    v85 = v83 - 1;
    v86 = v83 - 1 + v84;
    if (v86 >= 0x40)
      LODWORD(v86) = 64;
    v533 = v86;
    v87 = v8;
    do
    {
      v89 = 0;
      v90 = 0;
      if (v81 >= v85)
        v91 = v85;
      else
        v91 = v81;
      v92 = ~v91;
      v93 = v8 + 195;
      do
      {
        if (v81 + v89 < v84)
        {
          v94 = v87[v89] * (unint64_t)*v93;
          v82 += v94;
          v90 += HIDWORD(v94);
        }
        --v89;
        ++v93;
      }
      while (v92 != v89);
      v532[v81] = v82;
      v82 = v90 + HIDWORD(v82);
      ++v81;
      v88 = v533;
      ++v87;
    }
    while (v81 < v533);
    if (v82 && v533 != 64)
    {
      v532[v533] = v82;
      v88 = ++v533;
    }
    if (v79 > 0 != v80 > 0)
    {
      v88 = -v88;
      v533 = v88;
    }
    if (v88)
    {
      v131 = 0;
      v132 = 0;
      if (v88 >= 0)
        v133 = v88;
      else
        v133 = -v88;
      v134 = v133 - 1;
      if (v133 >= 0x40)
        LODWORD(v133) = 64;
      LODWORD(__src[32]) = v133;
      do
      {
        v136 = 0;
        v137 = 0;
        if (v131 >= v134)
          v138 = v134;
        else
          v138 = v131;
        v139 = v138 + 1;
        do
        {
          if (v131 == v136)
          {
            v140 = v532[v131];
            v132 += (2 * v140);
            v137 += v140 >> 31;
          }
          ++v136;
        }
        while (v139 != v136);
        *((_DWORD *)__src + v131) = v132;
        v132 = v137 + HIDWORD(v132);
        ++v131;
        v135 = __src[32];
      }
      while (v131 < SLODWORD(__src[32]));
      if (v132 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v132;
        v135 = ++LODWORD(__src[32]);
      }
      if (v88 <= 0)
        LODWORD(__src[32]) = -v135;
    }
    else
    {
LABEL_121:
      LODWORD(__src[32]) = 0;
    }
    memcpy(v538, __src, sizeof(v538));
    if (!v79)
      goto LABEL_161;
    v141 = v8[129];
    if (!v141)
      goto LABEL_161;
    v142 = 0;
    v143 = 0;
    if (v79 >= 0)
      v144 = v79;
    else
      v144 = -v79;
    if (v141 >= 0)
      v145 = v141;
    else
      v145 = -v141;
    v146 = v144 - 1;
    v147 = v144 - 1 + v145;
    if (v147 >= 0x40)
      LODWORD(v147) = 64;
    v533 = v147;
    v148 = v8 + 65;
    do
    {
      v150 = 0;
      v151 = 0;
      if (v142 >= v146)
        v152 = v146;
      else
        v152 = v142;
      v153 = ~v152;
      v154 = v8 + 195;
      do
      {
        if (v142 + v150 < v145)
        {
          v155 = v148[v150] * (unint64_t)*v154;
          v143 += v155;
          v151 += HIDWORD(v155);
        }
        --v150;
        ++v154;
      }
      while (v153 != v150);
      v532[v142] = v143;
      v143 = v151 + HIDWORD(v143);
      ++v142;
      v149 = v533;
      ++v148;
    }
    while (v142 < v533);
    if (v143 && v533 != 64)
    {
      v532[v533] = v143;
      v149 = ++v533;
    }
    if (v79 > 0 != v141 > 0)
    {
      v149 = -v149;
      v533 = v149;
    }
    if (v149)
    {
      v156 = 0;
      v157 = 0;
      if (v149 >= 0)
        v158 = v149;
      else
        v158 = -v149;
      v159 = v158 - 1;
      if (v158 >= 0x40)
        LODWORD(v158) = 64;
      LODWORD(__src[32]) = v158;
      do
      {
        v161 = 0;
        v162 = 0;
        if (v156 >= v159)
          v163 = v159;
        else
          v163 = v156;
        v164 = v163 + 1;
        do
        {
          if (v156 == v161)
          {
            v165 = v532[v156];
            v157 += (2 * v165);
            v162 += v165 >> 31;
          }
          ++v161;
        }
        while (v164 != v161);
        *((_DWORD *)__src + v156) = v157;
        v157 = v162 + HIDWORD(v157);
        ++v156;
        v160 = __src[32];
      }
      while (v156 < SLODWORD(__src[32]));
      if (v157 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v157;
        v160 = ++LODWORD(__src[32]);
      }
      if (v149 <= 0)
        LODWORD(__src[32]) = -v160;
    }
    else
    {
LABEL_161:
      LODWORD(__src[32]) = 0;
    }
    memcpy(v539, __src, sizeof(v539));
    v166 = v8[64];
    if (v166)
    {
      v167 = 0;
      v168 = 0;
      if (v166 >= 0)
        v169 = v166;
      else
        v169 = -v166;
      v170 = v169 - 1 + v169;
      if (v170 >= 0x40)
        LODWORD(v170) = 64;
      v527 = v170;
      do
      {
        v172 = 0;
        v173 = 0;
        if (v167 >= v169 - 1)
          v174 = v169 - 1;
        else
          v174 = v167;
        v175 = v174 + 1;
        v176 = v167;
        do
        {
          if (v176 < v169)
          {
            v177 = v8[v176] * (unint64_t)v8[v172];
            v168 += v177;
            v173 += HIDWORD(v177);
          }
          ++v172;
          --v176;
        }
        while (v175 != v172);
        v526[v167] = v168;
        v168 = v173 + HIDWORD(v168);
        ++v167;
        v171 = v527;
      }
      while (v167 < v527);
      if (v168 && v527 != 64)
      {
        v526[v527] = v168;
        v171 = ++v527;
      }
      if (v171 && (v178 = v68[64]) != 0)
      {
        v179 = 0;
        v180 = 0;
        if (v171 >= 0)
          v181 = v171;
        else
          v181 = -v171;
        if (v178 >= 0)
          v182 = v178;
        else
          v182 = -v178;
        v183 = v181 - 1;
        v184 = v183 + v182;
        if (v183 + v182 >= 0x40)
          v184 = 64;
        v529 = v184;
        v185 = v68;
        do
        {
          v187 = 0;
          v188 = 0;
          if (v179 >= v183)
            v189 = v183;
          else
            v189 = v179;
          v190 = ~v189;
          v191 = v526;
          do
          {
            if (v179 + v187 < v182)
            {
              v192 = v185[v187] * (unint64_t)*v191;
              v180 += v192;
              v188 += HIDWORD(v192);
            }
            --v187;
            ++v191;
          }
          while (v190 != v187);
          v528[v179] = v180;
          v180 = v188 + HIDWORD(v180);
          ++v179;
          v186 = v529;
          ++v185;
        }
        while (v179 < v529);
        if (v180 && v529 != 64)
        {
          v528[v529] = v180;
          v186 = ++v529;
        }
        if (v171 > 0 != v178 > 0)
          v529 = -v186;
      }
      else
      {
        v529 = 0;
      }
    }
    else
    {
      v527 = 0;
      v529 = 0;
    }
    v208 = v8[129];
    if (v208)
    {
      v209 = 0;
      v210 = 0;
      if (v208 >= 0)
        v211 = v208;
      else
        v211 = -v208;
      v212 = v211 - 1 + v211;
      if (v212 >= 0x40)
        LODWORD(v212) = 64;
      v523 = v212;
      do
      {
        v214 = 0;
        v215 = 0;
        if (v209 >= v211 - 1)
          v216 = v211 - 1;
        else
          v216 = v209;
        v217 = v216 + 1;
        v218 = v209;
        do
        {
          if (v218 < v211)
          {
            v219 = v69[v218] * (unint64_t)v69[v214];
            v210 += v219;
            v215 += HIDWORD(v219);
          }
          ++v214;
          --v218;
        }
        while (v217 != v214);
        v522[v209] = v210;
        v210 = v215 + HIDWORD(v210);
        ++v209;
        v213 = v523;
      }
      while (v209 < v523);
      if (v210 && v523 != 64)
      {
        v522[v523] = v210;
        v213 = ++v523;
      }
      if (v213 && (v220 = v68[129]) != 0)
      {
        v221 = 0;
        v222 = 0;
        if (v213 >= 0)
          v223 = v213;
        else
          v223 = -v213;
        if (v220 >= 0)
          v224 = v220;
        else
          v224 = -v220;
        v225 = v223 - 1;
        v226 = v225 + v224;
        if (v225 + v224 >= 0x40)
          v226 = 64;
        v525 = v226;
        v227 = v510;
        do
        {
          v229 = 0;
          v230 = 0;
          if (v221 >= v225)
            v231 = v225;
          else
            v231 = v221;
          v232 = ~v231;
          v233 = v522;
          do
          {
            if (v221 + v229 < v224)
            {
              v234 = v227[v229] * (unint64_t)*v233;
              v222 += v234;
              v230 += HIDWORD(v234);
            }
            --v229;
            ++v233;
          }
          while (v232 != v229);
          v524[v221] = v222;
          v222 = v230 + HIDWORD(v222);
          ++v221;
          v228 = v525;
          ++v227;
        }
        while (v221 < v525);
        if (v222 && v525 != 64)
        {
          v524[v525] = v222;
          v228 = ++v525;
        }
        if (v213 > 0 != v220 > 0)
          v525 = -v228;
      }
      else
      {
        v525 = 0;
      }
    }
    else
    {
      v523 = 0;
      v525 = 0;
    }
    sub_223F1625C(v530, v528, v524);
    LODWORD(v235) = v8[259];
    if ((_DWORD)v235)
    {
      v236 = 0;
      v237 = 0;
      if ((v235 & 0x80000000) == 0)
        v235 = v235;
      else
        v235 = -(int)v235;
      v238 = v235 - 1 + v235;
      if (v238 >= 0x40)
        LODWORD(v238) = 64;
      v521 = v238;
      do
      {
        v239 = 0;
        v240 = 0;
        if (v236 >= v235 - 1)
          v241 = v235 - 1;
        else
          v241 = v236;
        v242 = v241 + 1;
        v243 = v236;
        do
        {
          if (v243 < v235)
          {
            v244 = v10[v243] * (unint64_t)v10[v239];
            v237 += v244;
            v240 += HIDWORD(v244);
          }
          ++v239;
          --v243;
        }
        while (v242 != v239);
        v520[v236] = v237;
        v237 = v240 + HIDWORD(v237);
        ++v236;
      }
      while (v236 < v521);
      if (v237 && v521 != 64)
        v520[v521++] = v237;
      sub_223F1625C(v532, v530, v520);
      v245 = v8[194];
      if (!v245)
        goto LABEL_361;
    }
    else
    {
      v521 = 0;
      sub_223F1625C(v532, v530, v520);
      v245 = v8[194];
      if (!v245)
        goto LABEL_361;
    }
    v246 = 0;
    v247 = 0;
    if (v245 >= 0)
      v248 = v245;
    else
      v248 = -v245;
    v249 = v248 - 1 + v248;
    if (v249 >= 0x40)
      LODWORD(v249) = 64;
    v513 = v249;
    do
    {
      v251 = 0;
      v252 = 0;
      if (v246 >= v248 - 1)
        v253 = v248 - 1;
      else
        v253 = v246;
      v254 = v253 + 1;
      v255 = v246;
      do
      {
        if (v255 < v248)
        {
          v256 = v46[v255] * (unint64_t)v46[v251];
          v247 += v256;
          v252 += HIDWORD(v256);
        }
        ++v251;
        --v255;
      }
      while (v254 != v251);
      *((_DWORD *)v512 + v246) = v247;
      v247 = v252 + HIDWORD(v247);
      ++v246;
      v250 = v513;
    }
    while (v246 < v513);
    if (v247 && v513 != 64)
    {
      *((_DWORD *)v512 + v513) = v247;
      v250 = ++v513;
    }
    if (v250)
    {
      v257 = v68[194];
      if (v257)
      {
        v258 = 0;
        v259 = 0;
        if (v250 >= 0)
          v260 = v250;
        else
          v260 = -v250;
        if (v257 >= 0)
          v261 = v257;
        else
          v261 = -v257;
        v262 = v260 - 1;
        v263 = v260 - 1 + v261;
        if (v263 >= 0x40)
          LODWORD(v263) = 64;
        v515 = v263;
        do
        {
          v265 = 0;
          v266 = 0;
          if (v258 >= v262)
            v267 = v262;
          else
            v267 = v258;
          v268 = ~v267;
          v269 = (unsigned int *)v512;
          do
          {
            if (v258 + v265 < v261)
            {
              v270 = v45[v265] * (unint64_t)*v269;
              v259 += v270;
              v266 += HIDWORD(v270);
            }
            --v265;
            ++v269;
          }
          while (v268 != v265);
          *((_DWORD *)v514 + v258) = v259;
          v259 = v266 + HIDWORD(v259);
          ++v258;
          v264 = v515;
          ++v45;
        }
        while (v258 < v515);
        if (v259 && v515 != 64)
        {
          *((_DWORD *)v514 + v515) = v259;
          v264 = ++v515;
        }
        if (v250 > 0 != v257 > 0)
        {
          v264 = -v264;
          v515 = v264;
        }
        if (v264)
        {
          v271 = v68[259];
          if (v271)
          {
            v272 = 0;
            v273 = 0;
            if (v264 >= 0)
              v274 = v264;
            else
              v274 = -v264;
            if (v271 >= 0)
              v275 = v271;
            else
              v275 = -v271;
            v276 = v274 - 1;
            v277 = v276 + v275;
            if (v276 + v275 >= 0x40)
              v277 = 64;
            v519 = v277;
            v278 = v509;
            do
            {
              v280 = 0;
              v281 = 0;
              if (v272 >= v276)
                v282 = v276;
              else
                v282 = v272;
              v283 = ~v282;
              v284 = v514;
              do
              {
                if (v272 + v280 < v275)
                {
                  v285 = v278[v280] * (unint64_t)*(unsigned int *)v284;
                  v273 += v285;
                  v281 += HIDWORD(v285);
                }
                --v280;
                v284 = (double *)((char *)v284 + 4);
              }
              while (v283 != v280);
              v518[v272] = v273;
              v273 = v281 + HIDWORD(v273);
              ++v272;
              v279 = v519;
              ++v278;
            }
            while (v272 < v519);
            if (v273 && v519 != 64)
            {
              v518[v519] = v273;
              v279 = ++v519;
            }
            if (v264 > 0 != v271 > 0)
              v519 = -v279;
            goto LABEL_362;
          }
        }
      }
    }
LABEL_361:
    v519 = 0;
LABEL_362:
    sub_223F15F80(__src, v532, v518);
    memcpy(v540, __src, sizeof(v540));
    v286 = v8[64];
    if (!v286)
      goto LABEL_401;
    v287 = v8[129];
    if (!v287)
      goto LABEL_401;
    v288 = 0;
    v289 = 0;
    if (v286 >= 0)
      v290 = v286;
    else
      v290 = -v286;
    if (v287 >= 0)
      v291 = v287;
    else
      v291 = -v287;
    v292 = v290 - 1;
    v293 = v290 - 1 + v291;
    if (v293 >= 0x40)
      LODWORD(v293) = 64;
    v531 = v293;
    do
    {
      v295 = 0;
      v296 = 0;
      if (v288 >= v292)
        v297 = v292;
      else
        v297 = v288;
      v298 = ~v297;
      v299 = v8;
      do
      {
        if (v288 + v295 < v291)
        {
          v300 = v69[v295] * (unint64_t)*v299;
          v289 += v300;
          v296 += HIDWORD(v300);
        }
        --v295;
        ++v299;
      }
      while (v298 != v295);
      v530[v288] = v289;
      v289 = v296 + HIDWORD(v289);
      ++v288;
      v294 = v531;
      ++v69;
    }
    while (v288 < v531);
    if (v289 && v531 != 64)
    {
      v530[v531] = v289;
      v294 = ++v531;
    }
    if (v286 > 0 != v287 > 0)
    {
      v294 = -v294;
      v531 = v294;
    }
    if (v294)
    {
      v301 = 0;
      v302 = 0;
      if (v294 >= 0)
        v303 = v294;
      else
        v303 = -v294;
      v304 = v303 - 1;
      if (v303 >= 0x40)
        LODWORD(v303) = 64;
      v533 = v303;
      do
      {
        v306 = 0;
        v307 = 0;
        if (v301 >= v304)
          v308 = v304;
        else
          v308 = v301;
        v309 = v308 + 1;
        do
        {
          if (v301 == v306)
          {
            v310 = v530[v301];
            v302 += (2 * v310);
            v307 += v310 >> 31;
          }
          ++v306;
        }
        while (v309 != v306);
        v532[v301] = v302;
        v302 = v307 + HIDWORD(v302);
        ++v301;
        v305 = v533;
      }
      while (v301 < v533);
      if (v302 && v533 != 64)
      {
        v532[v533] = v302;
        v305 = ++v533;
      }
      if (v294 <= 0)
        v533 = -v305;
    }
    else
    {
LABEL_401:
      v533 = 0;
    }
    v311 = v8[194];
    if (!v311)
      goto LABEL_439;
    v312 = 0;
    v313 = 0;
    if (v311 >= 0)
      v314 = v311;
    else
      v314 = -v311;
    v315 = v314 - 1 + v314;
    if (v315 >= 0x40)
      LODWORD(v315) = 64;
    v527 = v315;
    do
    {
      v317 = 0;
      v318 = 0;
      if (v312 >= v314 - 1)
        v319 = v314 - 1;
      else
        v319 = v312;
      v320 = v319 + 1;
      v321 = v312;
      do
      {
        if (v321 < v314)
        {
          v322 = v46[v321] * (unint64_t)v46[v317];
          v313 += v322;
          v318 += HIDWORD(v322);
        }
        ++v317;
        --v321;
      }
      while (v320 != v317);
      v526[v312] = v313;
      v313 = v318 + HIDWORD(v313);
      ++v312;
      v316 = v527;
    }
    while (v312 < v527);
    if (v313 && v527 != 64)
    {
      v526[v527] = v313;
      v316 = ++v527;
    }
    if (v316 && (v323 = v68[259]) != 0)
    {
      v324 = 0;
      v325 = 0;
      if (v316 >= 0)
        v326 = v316;
      else
        v326 = -v316;
      if (v323 >= 0)
        v327 = v323;
      else
        v327 = -v323;
      v328 = v326 - 1;
      v329 = v328 + v327;
      if (v328 + v327 >= 0x40)
        v329 = 64;
      v529 = v329;
      v330 = v509;
      do
      {
        v332 = 0;
        v333 = 0;
        if (v324 >= v328)
          v334 = v328;
        else
          v334 = v324;
        v335 = ~v334;
        v336 = v526;
        do
        {
          if (v324 + v332 < v327)
          {
            v337 = v330[v332] * (unint64_t)*v336;
            v325 += v337;
            v333 += HIDWORD(v337);
          }
          --v332;
          ++v336;
        }
        while (v335 != v332);
        v528[v324] = v325;
        v325 = v333 + HIDWORD(v325);
        ++v324;
        v331 = v529;
        ++v330;
      }
      while (v324 < v529);
      if (v325 && v529 != 64)
      {
        v528[v529] = v325;
        v331 = ++v529;
      }
      if (v316 > 0 != v323 > 0)
        v529 = -v331;
    }
    else
    {
LABEL_439:
      v529 = 0;
    }
    sub_223F15F80(__src, v532, v528);
    memcpy(v541, __src, sizeof(v541));
    v338 = v68[64];
    if (v338 && (v339 = v68[129]) != 0)
    {
      v340 = 0;
      v341 = 0;
      if (v338 >= 0)
        v342 = v338;
      else
        v342 = -v338;
      if (v339 >= 0)
        v343 = v339;
      else
        v343 = -v339;
      v344 = v342 - 1;
      v345 = v344 + v343;
      if (v344 + v343 >= 0x40)
        v345 = 64;
      LODWORD(__src[32]) = v345;
      do
      {
        v347 = 0;
        v348 = 0;
        if (v340 >= v344)
          v349 = v344;
        else
          v349 = v340;
        v350 = ~v349;
        v351 = v68;
        do
        {
          if (v340 + v347 < v343)
          {
            v352 = v70[v347] * (unint64_t)*v351;
            v341 += v352;
            v348 += HIDWORD(v352);
          }
          --v347;
          ++v351;
        }
        while (v350 != v347);
        *((_DWORD *)__src + v340) = v341;
        v341 = v348 + HIDWORD(v341);
        ++v340;
        v346 = __src[32];
        ++v70;
      }
      while (v340 < SLODWORD(__src[32]));
      if (v341 && LODWORD(__src[32]) != 64)
      {
        *((_DWORD *)__src + SLODWORD(__src[32])) = v341;
        v346 = ++LODWORD(__src[32]);
      }
      if (v338 > 0 != v339 > 0)
        LODWORD(__src[32]) = -v346;
    }
    else
    {
      LODWORD(__src[32]) = 0;
    }
    memcpy(v537, __src, sizeof(v537));
    *(double *)&v357 = COERCE_DOUBLE(sub_223F22CA0((uint64_t)v61, v538, __dst, v353, v354, v355, v356));
    v359 = v358;
    v360 = *(double *)&v357;
    v361 = (double *)v516;
    v362 = v517;
    goto LABEL_693;
  }
  *(_QWORD *)&v514[0] = sub_223F19700(v0, v1, v2, v3, v4, v5, v6);
  v514[1] = v27;
  v538[0] = 1;
  v538[64] = 1;
  v28 = v7 + 65;
  v29 = v7[64];
  if (v29 && (v30 = v7[129]) != 0)
  {
    v31 = 0;
    v32 = 0;
    if (v29 >= 0)
      v33 = v29;
    else
      v33 = -v29;
    if (v30 >= 0)
      v34 = v30;
    else
      v34 = -v30;
    v35 = v33 - 1;
    v36 = v35 + v34;
    if (v35 + v34 >= 0x40)
      v36 = 64;
    LODWORD(__src[32]) = v36;
    v37 = v7 + 65;
    do
    {
      v39 = 0;
      v40 = 0;
      if (v31 >= v35)
        v41 = v35;
      else
        v41 = v31;
      v42 = ~v41;
      v43 = v7;
      do
      {
        if (v31 + v39 < v34)
        {
          v44 = v37[v39] * (unint64_t)*v43;
          v32 += v44;
          v40 += HIDWORD(v44);
        }
        --v39;
        ++v43;
      }
      while (v42 != v39);
      *((_DWORD *)__src + v31) = v32;
      v32 = v40 + HIDWORD(v32);
      ++v31;
      v38 = __src[32];
      ++v37;
    }
    while (v31 < SLODWORD(__src[32]));
    if (v32 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v32;
      v38 = ++LODWORD(__src[32]);
    }
    if (v29 > 0 != v30 > 0)
      LODWORD(__src[32]) = -v38;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(__dst, __src, sizeof(__dst));
  v95 = v7 + 130;
  memcpy(v539, v7 + 130, sizeof(v539));
  v536[0] = 1;
  v536[64] = 1;
  v96 = v8 + 130;
  v511 = v7;
  v97 = v7 + 195;
  v102 = sub_223F1AA90(v98, v99, v100, v101, v9, v8 + 130, v97);
  v104 = v103;
  v106 = v105;
  v107 = v9;
  v111 = COERCE_DOUBLE(sub_223F19700(v9, v538, __dst, v102, v108, v109, v110));
  v113 = v112;
  v114 = v111;
  if ((v112 & 1) != 0)
    v114 = v111 + v111;
  v115 = frexp(sqrt(v114), (int *)&__src[1]);
  v116 = LODWORD(__src[1]) + (v113 >> 1);
  v117 = frexp(v115 * v106, (int *)&__src[1]);
  LODWORD(__src[1]) += v116 + v104;
  *(double *)v512 = v117;
  v512[1] = __src[1];
  if (v514[0] >= 0.0 && v117 >= 0.0 || v514[0] <= 0.0 && v117 <= 0.0)
  {
    v77 = v514;
    v78 = (long double *)v512;
    return sub_223F1AC88(v77, v78);
  }
  v119 = v8[64];
  if (v119)
  {
    v120 = 0;
    v121 = 0;
    if (v119 >= 0)
      v122 = v119;
    else
      v122 = -v119;
    v123 = v122 - 1 + v122;
    if (v123 >= 0x40)
      LODWORD(v123) = 64;
    v529 = v123;
    do
    {
      v125 = 0;
      v126 = 0;
      if (v120 >= v122 - 1)
        v127 = v122 - 1;
      else
        v127 = v120;
      v128 = v127 + 1;
      v129 = v120;
      do
      {
        if (v129 < v122)
        {
          v130 = v8[v129] * (unint64_t)v8[v125];
          v121 += v130;
          v126 += HIDWORD(v130);
        }
        ++v125;
        --v129;
      }
      while (v128 != v125);
      v528[v120] = v121;
      v121 = v126 + HIDWORD(v121);
      ++v120;
      v124 = v529;
    }
    while (v120 < v529);
    if (v121 && v529 != 64)
    {
      v528[v529] = v121;
      v124 = ++v529;
    }
    if (v124 && (v193 = v511[64]) != 0)
    {
      v194 = 0;
      v195 = 0;
      if (v124 >= 0)
        v196 = v124;
      else
        v196 = -v124;
      if (v193 >= 0)
        v197 = v193;
      else
        v197 = -v193;
      v198 = v196 - 1;
      v199 = v198 + v197;
      if (v198 + v197 >= 0x40)
        v199 = 64;
      v531 = v199;
      v200 = v511;
      do
      {
        v202 = 0;
        v203 = 0;
        if (v194 >= v198)
          v204 = v198;
        else
          v204 = v194;
        v205 = ~v204;
        v206 = v528;
        do
        {
          if (v194 + v202 < v197)
          {
            v207 = v200[v202] * (unint64_t)*v206;
            v195 += v207;
            v203 += HIDWORD(v207);
          }
          --v202;
          ++v206;
        }
        while (v205 != v202);
        v530[v194] = v195;
        v195 = v203 + HIDWORD(v195);
        ++v194;
        v201 = v531;
        ++v200;
      }
      while (v194 < v531);
      if (v195 && v531 != 64)
      {
        v530[v531] = v195;
        v201 = ++v531;
      }
      if (v124 > 0 != v193 > 0)
        v531 = -v201;
    }
    else
    {
      v531 = 0;
    }
  }
  else
  {
    v529 = 0;
    v531 = 0;
  }
  v363 = v8 + 65;
  v364 = v8[129];
  if (v364)
  {
    v365 = 0;
    v366 = 0;
    if (v364 >= 0)
      v367 = v364;
    else
      v367 = -v364;
    v368 = v367 - 1 + v367;
    if (v368 >= 0x40)
      LODWORD(v368) = 64;
    v525 = v368;
    do
    {
      v370 = 0;
      v371 = 0;
      if (v365 >= v367 - 1)
        v372 = v367 - 1;
      else
        v372 = v365;
      v373 = v372 + 1;
      v374 = v365;
      do
      {
        if (v374 < v367)
        {
          v375 = v363[v374] * (unint64_t)v363[v370];
          v366 += v375;
          v371 += HIDWORD(v375);
        }
        ++v370;
        --v374;
      }
      while (v373 != v370);
      v524[v365] = v366;
      v366 = v371 + HIDWORD(v366);
      ++v365;
      v369 = v525;
    }
    while (v365 < v525);
    if (v366 && v525 != 64)
    {
      v524[v525] = v366;
      v369 = ++v525;
    }
    if (v369 && (v376 = v511[129]) != 0)
    {
      v377 = 0;
      v378 = 0;
      if (v369 >= 0)
        v379 = v369;
      else
        v379 = -v369;
      if (v376 >= 0)
        v380 = v376;
      else
        v380 = -v376;
      v381 = v379 - 1;
      v382 = v381 + v380;
      if (v381 + v380 >= 0x40)
        v382 = 64;
      v527 = v382;
      v383 = v28;
      do
      {
        v385 = 0;
        v386 = 0;
        if (v377 >= v381)
          v387 = v381;
        else
          v387 = v377;
        v388 = ~v387;
        v389 = v524;
        do
        {
          if (v377 + v385 < v380)
          {
            v390 = v383[v385] * (unint64_t)*v389;
            v378 += v390;
            v386 += HIDWORD(v390);
          }
          --v385;
          ++v389;
        }
        while (v388 != v385);
        v526[v377] = v378;
        v378 = v386 + HIDWORD(v378);
        ++v377;
        v384 = v527;
        ++v383;
      }
      while (v377 < v527);
      if (v378 && v527 != 64)
      {
        v526[v527] = v378;
        v384 = ++v527;
      }
      if (v369 > 0 != v376 > 0)
        v527 = -v384;
    }
    else
    {
      v527 = 0;
    }
  }
  else
  {
    v525 = 0;
    v527 = 0;
  }
  sub_223F1625C(v532, v530, v526);
  v391 = v8[194];
  if (!v391)
    goto LABEL_588;
  v392 = 0;
  v393 = 0;
  if (v391 >= 0)
    v394 = v391;
  else
    v394 = -v391;
  v395 = v394 - 1 + v394;
  if (v395 >= 0x40)
    LODWORD(v395) = 64;
  v519 = v395;
  do
  {
    v397 = 0;
    v398 = 0;
    if (v392 >= v394 - 1)
      v399 = v394 - 1;
    else
      v399 = v392;
    v400 = v399 + 1;
    v401 = v392;
    do
    {
      if (v401 < v394)
      {
        v402 = v96[v401] * (unint64_t)v96[v397];
        v393 += v402;
        v398 += HIDWORD(v402);
      }
      ++v397;
      --v401;
    }
    while (v400 != v397);
    v518[v392] = v393;
    v393 = v398 + HIDWORD(v393);
    ++v392;
    v396 = v519;
  }
  while (v392 < v519);
  if (v393 && v519 != 64)
  {
    v518[v519] = v393;
    v396 = ++v519;
  }
  if (!v396)
    goto LABEL_588;
  v403 = v511[259];
  if (!v403)
    goto LABEL_588;
  v404 = 0;
  v405 = 0;
  if (v396 >= 0)
    v406 = v396;
  else
    v406 = -v396;
  if (v403 >= 0)
    v407 = v403;
  else
    v407 = -v403;
  v408 = v406 - 1;
  v409 = v406 - 1 + v407;
  if (v409 >= 0x40)
    LODWORD(v409) = 64;
  v521 = v409;
  v410 = v97;
  do
  {
    v412 = 0;
    v413 = 0;
    if (v404 >= v408)
      v414 = v408;
    else
      v414 = v404;
    v415 = ~v414;
    v416 = v518;
    do
    {
      if (v404 + v412 < v407)
      {
        v417 = v410[v412] * (unint64_t)*v416;
        v405 += v417;
        v413 += HIDWORD(v417);
      }
      --v412;
      ++v416;
    }
    while (v415 != v412);
    v520[v404] = v405;
    v405 = v413 + HIDWORD(v405);
    ++v404;
    v411 = v521;
    ++v410;
  }
  while (v404 < v521);
  if (v405 && v521 != 64)
  {
    v520[v521] = v405;
    v411 = ++v521;
  }
  if (v396 > 0 != v403 > 0)
  {
    v411 = -v411;
    v521 = v411;
  }
  if (v411 && (v418 = v511[194]) != 0)
  {
    v419 = 0;
    v420 = 0;
    if (v411 >= 0)
      v421 = v411;
    else
      v421 = -v411;
    if (v418 >= 0)
      v422 = v418;
    else
      v422 = -v418;
    v423 = v421 - 1;
    v424 = v423 + v422;
    if (v423 + v422 >= 0x40)
      v424 = 64;
    v523 = v424;
    do
    {
      v426 = 0;
      v427 = 0;
      if (v419 >= v423)
        v428 = v423;
      else
        v428 = v419;
      v429 = ~v428;
      v430 = v520;
      do
      {
        if (v419 + v426 < v422)
        {
          v431 = v95[v426] * (unint64_t)*v430;
          v420 += v431;
          v427 += HIDWORD(v431);
        }
        --v426;
        ++v430;
      }
      while (v429 != v426);
      v522[v419] = v420;
      v420 = v427 + HIDWORD(v420);
      ++v419;
      v425 = v523;
      ++v95;
    }
    while (v419 < v523);
    if (v420 && v523 != 64)
    {
      v522[v523] = v420;
      v425 = ++v523;
    }
    if (v411 > 0 != v418 > 0)
      v523 = -v425;
  }
  else
  {
LABEL_588:
    v523 = 0;
  }
  sub_223F15F80(__src, v532, v522);
  memcpy(v538, __src, sizeof(v538));
  __dst[0] = 1;
  __dst[64] = 1;
  v432 = v8[64];
  if (!v432)
    goto LABEL_628;
  v433 = v8[129];
  if (!v433)
    goto LABEL_628;
  v434 = 0;
  v435 = 0;
  if (v432 >= 0)
    v436 = v432;
  else
    v436 = -v432;
  if (v433 >= 0)
    v437 = v433;
  else
    v437 = -v433;
  v438 = v436 - 1;
  v439 = v436 - 1 + v437;
  if (v439 >= 0x40)
    LODWORD(v439) = 64;
  v531 = v439;
  do
  {
    v441 = 0;
    v442 = 0;
    if (v434 >= v438)
      v443 = v438;
    else
      v443 = v434;
    v444 = ~v443;
    v445 = v8;
    do
    {
      if (v434 + v441 < v437)
      {
        v446 = v363[v441] * (unint64_t)*v445;
        v435 += v446;
        v442 += HIDWORD(v446);
      }
      --v441;
      ++v445;
    }
    while (v444 != v441);
    v530[v434] = v435;
    v435 = v442 + HIDWORD(v435);
    ++v434;
    v440 = v531;
    ++v363;
  }
  while (v434 < v531);
  if (v435 && v531 != 64)
  {
    v530[v531] = v435;
    v440 = ++v531;
  }
  if (v432 > 0 != v433 > 0)
  {
    v440 = -v440;
    v531 = v440;
  }
  if (v440)
  {
    v447 = 0;
    v448 = 0;
    if (v440 >= 0)
      v449 = v440;
    else
      v449 = -v440;
    v450 = v449 - 1;
    if (v449 >= 0x40)
      LODWORD(v449) = 64;
    v533 = v449;
    do
    {
      v452 = 0;
      v453 = 0;
      if (v447 >= v450)
        v454 = v450;
      else
        v454 = v447;
      v455 = v454 + 1;
      do
      {
        if (v447 == v452)
        {
          v456 = v530[v447];
          v448 += (2 * v456);
          v453 += v456 >> 31;
        }
        ++v452;
      }
      while (v455 != v452);
      v532[v447] = v448;
      v448 = v453 + HIDWORD(v448);
      ++v447;
      v451 = v533;
    }
    while (v447 < v533);
    if (v448 && v533 != 64)
    {
      v532[v533] = v448;
      v451 = ++v533;
    }
    if (v440 <= 0)
      v533 = -v451;
  }
  else
  {
LABEL_628:
    v533 = 0;
  }
  v457 = v8[194];
  if (!v457)
    goto LABEL_666;
  v458 = 0;
  v459 = 0;
  if (v457 >= 0)
    v460 = v457;
  else
    v460 = -v457;
  v461 = v460 - 1 + v460;
  if (v461 >= 0x40)
    LODWORD(v461) = 64;
  v527 = v461;
  do
  {
    v463 = 0;
    v464 = 0;
    if (v458 >= v460 - 1)
      v465 = v460 - 1;
    else
      v465 = v458;
    v466 = v465 + 1;
    v467 = v458;
    do
    {
      if (v467 < v460)
      {
        v468 = v96[v467] * (unint64_t)v96[v463];
        v459 += v468;
        v464 += HIDWORD(v468);
      }
      ++v463;
      --v467;
    }
    while (v466 != v463);
    v526[v458] = v459;
    v459 = v464 + HIDWORD(v459);
    ++v458;
    v462 = v527;
  }
  while (v458 < v527);
  if (v459 && v527 != 64)
  {
    v526[v527] = v459;
    v462 = ++v527;
  }
  if (v462 && (v469 = v511[259]) != 0)
  {
    v470 = 0;
    v471 = 0;
    if (v462 >= 0)
      v472 = v462;
    else
      v472 = -v462;
    if (v469 >= 0)
      v473 = v469;
    else
      v473 = -v469;
    v474 = v472 - 1;
    v475 = v474 + v473;
    if (v474 + v473 >= 0x40)
      v475 = 64;
    v529 = v475;
    do
    {
      v477 = 0;
      v478 = 0;
      if (v470 >= v474)
        v479 = v474;
      else
        v479 = v470;
      v480 = ~v479;
      v481 = v526;
      do
      {
        if (v470 + v477 < v473)
        {
          v482 = v97[v477] * (unint64_t)*v481;
          v471 += v482;
          v478 += HIDWORD(v482);
        }
        --v477;
        ++v481;
      }
      while (v480 != v477);
      v528[v470] = v471;
      v471 = v478 + HIDWORD(v471);
      ++v470;
      v476 = v529;
      ++v97;
    }
    while (v470 < v529);
    if (v471)
    {
      v483 = v511;
      if (v529 != 64)
      {
        v528[v529] = v471;
        v476 = ++v529;
      }
    }
    else
    {
      v483 = v511;
    }
    if (v462 > 0 != v469 > 0)
      v529 = -v476;
  }
  else
  {
LABEL_666:
    v529 = 0;
    v483 = v511;
  }
  sub_223F15F80(__src, v532, v528);
  memcpy(v539, __src, sizeof(v539));
  v484 = v483[64];
  if (v484 && (v485 = v483[129]) != 0)
  {
    v486 = 0;
    v487 = 0;
    if (v484 >= 0)
      v488 = v484;
    else
      v488 = -v484;
    if (v485 >= 0)
      v489 = v485;
    else
      v489 = -v485;
    v490 = v488 - 1;
    v491 = v490 + v489;
    if (v490 + v489 >= 0x40)
      v491 = 64;
    LODWORD(__src[32]) = v491;
    do
    {
      v493 = 0;
      v494 = 0;
      if (v486 >= v490)
        v495 = v490;
      else
        v495 = v486;
      v496 = ~v495;
      v497 = v483;
      do
      {
        if (v486 + v493 < v489)
        {
          v498 = v28[v493] * (unint64_t)*v497;
          v487 += v498;
          v494 += HIDWORD(v498);
        }
        --v493;
        ++v497;
      }
      while (v496 != v493);
      *((_DWORD *)__src + v486) = v487;
      v487 = v494 + HIDWORD(v487);
      ++v486;
      v492 = __src[32];
      ++v28;
    }
    while (v486 < SLODWORD(__src[32]));
    if (v487 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v487;
      v492 = ++LODWORD(__src[32]);
    }
    if (v484 > 0 != v485 > 0)
      LODWORD(__src[32]) = -v492;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(v536, __src, 0x104uLL);
  *(double *)&v503 = COERCE_DOUBLE(sub_223F19700(v107, v538, __dst, v499, v500, v501, v502));
  v359 = v504;
  v360 = *(double *)&v503;
  v361 = v514;
  v362 = (double *)v512;
LABEL_693:
  v505 = COERCE_DOUBLE(sub_223F1AD60(v361, (uint64_t)v362));
  v507 = v359 - v506;
  v508 = frexp(v360 / v505, (int *)&__src[1]);
  LODWORD(__src[1]) += v507;
  return *(_QWORD *)&v508;
}

uint64_t sub_223F22CA0(uint64_t a1, unsigned int *a2, _DWORD *a3, double a4, double a5, double a6, double a7)
{
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  long double v17;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  _DWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int *v44;
  unint64_t v45;
  _DWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  _DWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int *v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int *v125;
  unint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int *v140;
  unint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unsigned int *v155;
  unint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  double v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  int v173;
  int v174;
  double v175;
  double v176;
  int v177;
  int v178;
  long double v179;
  _DWORD v180[64];
  int v181;
  _DWORD v182[64];
  int v183;
  int v184[64];
  int v185;
  int v186[64];
  int v187;
  _DWORD v188[64];
  int v189;
  int v190[64];
  int v191;
  _DWORD v192[64];
  int v193;
  int v194[64];
  int v195;
  _QWORD __src[33];
  long double v197[2];
  _QWORD v198[2];
  _DWORD __dst[65];
  _BYTE v200[260];
  _DWORD v201[65];
  _BYTE v202[260];
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  v10 = COERCE_DOUBLE(sub_223F19700(a1, a2, a3, a4, a5, a6, a7));
  *(double *)v198 = v10;
  v198[1] = v11;
  v16 = COERCE_DOUBLE(sub_223F19700(a1, a2 + 130, a3 + 130, v12, v13, v14, v15));
  v197[0] = v16;
  v197[1] = v17;
  if (v10 >= 0.0 && v16 >= 0.0 || v10 <= 0.0 && v16 <= 0.0)
    return sub_223F1AC88(v198, v197);
  v19 = a2[64];
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    if (v19 >= 0)
      v22 = v19;
    else
      v22 = -v19;
    v23 = v22 - 1 + v22;
    if (v23 >= 0x40)
      LODWORD(v23) = 64;
    v193 = v23;
    do
    {
      v25 = 0;
      v26 = 0;
      if (v20 >= v22 - 1)
        v27 = v22 - 1;
      else
        v27 = v20;
      v28 = v27 + 1;
      v29 = v20;
      do
      {
        if (v29 < v22)
        {
          v30 = a2[v29] * (unint64_t)a2[v25];
          v21 += v30;
          v26 += HIDWORD(v30);
        }
        ++v25;
        --v29;
      }
      while (v28 != v25);
      v192[v20] = v21;
      v21 = v26 + HIDWORD(v21);
      ++v20;
      v24 = v193;
    }
    while (v20 < v193);
    if (v21 && v193 != 64)
    {
      v192[v193] = v21;
      v24 = ++v193;
    }
    if (v24 && (v31 = a3[64]) != 0)
    {
      v32 = 0;
      v33 = 0;
      if (v24 >= 0)
        v34 = v24;
      else
        v34 = -v24;
      if (v31 >= 0)
        v35 = v31;
      else
        v35 = -v31;
      v36 = v34 - 1;
      v37 = v36 + v35;
      if (v36 + v35 >= 0x40)
        v37 = 64;
      v195 = v37;
      v38 = a3;
      do
      {
        v40 = 0;
        v41 = 0;
        if (v32 >= v36)
          v42 = v36;
        else
          v42 = v32;
        v43 = ~v42;
        v44 = v192;
        do
        {
          if (v32 + v40 < v35)
          {
            v45 = v38[v40] * (unint64_t)*v44;
            v33 += v45;
            v41 += HIDWORD(v45);
          }
          --v40;
          ++v44;
        }
        while (v43 != v40);
        v194[v32] = v33;
        v33 = v41 + HIDWORD(v33);
        ++v32;
        v39 = v195;
        ++v38;
      }
      while (v32 < v195);
      if (v33 && v195 != 64)
      {
        v194[v195] = v33;
        v39 = ++v195;
      }
      if (v24 > 0 != v31 > 0)
        v195 = -v39;
    }
    else
    {
      v195 = 0;
    }
  }
  else
  {
    v193 = 0;
    v195 = 0;
  }
  v46 = a2 + 65;
  v47 = a2[129];
  if (v47)
  {
    v48 = 0;
    v49 = 0;
    if (v47 >= 0)
      v50 = v47;
    else
      v50 = -v47;
    v51 = v50 - 1 + v50;
    if (v51 >= 0x40)
      LODWORD(v51) = 64;
    v189 = v51;
    do
    {
      v53 = 0;
      v54 = 0;
      if (v48 >= v50 - 1)
        v55 = v50 - 1;
      else
        v55 = v48;
      v56 = v55 + 1;
      v57 = v48;
      do
      {
        if (v57 < v50)
        {
          v58 = v46[v57] * (unint64_t)v46[v53];
          v49 += v58;
          v54 += HIDWORD(v58);
        }
        ++v53;
        --v57;
      }
      while (v56 != v53);
      v188[v48] = v49;
      v49 = v54 + HIDWORD(v49);
      ++v48;
      v52 = v189;
    }
    while (v48 < v189);
    if (v49 && v189 != 64)
    {
      v188[v189] = v49;
      v52 = ++v189;
    }
    v59 = a3 + 65;
    if (v52 && (v60 = a3[129]) != 0)
    {
      v61 = 0;
      v62 = 0;
      if (v52 >= 0)
        v63 = v52;
      else
        v63 = -v52;
      if (v60 >= 0)
        v64 = v60;
      else
        v64 = -v60;
      v65 = v63 - 1;
      v66 = v65 + v64;
      if (v65 + v64 >= 0x40)
        v66 = 64;
      v191 = v66;
      v67 = a3 + 65;
      do
      {
        v69 = 0;
        v70 = 0;
        if (v61 >= v65)
          v71 = v65;
        else
          v71 = v61;
        v72 = ~v71;
        v73 = v188;
        do
        {
          if (v61 + v69 < v64)
          {
            v74 = v67[v69] * (unint64_t)*v73;
            v62 += v74;
            v70 += HIDWORD(v74);
          }
          --v69;
          ++v73;
        }
        while (v72 != v69);
        v190[v61] = v62;
        v62 = v70 + HIDWORD(v62);
        ++v61;
        v68 = v191;
        ++v67;
      }
      while (v61 < v191);
      if (v62 && v191 != 64)
      {
        v190[v191] = v62;
        v68 = ++v191;
      }
      if (v52 > 0 != v60 > 0)
        v191 = -v68;
    }
    else
    {
      v191 = 0;
    }
  }
  else
  {
    v189 = 0;
    v59 = a3 + 65;
    v191 = 0;
  }
  sub_223F1625C(__src, v194, v190);
  LODWORD(v75) = a2[194];
  if ((_DWORD)v75)
  {
    v76 = 0;
    v77 = 0;
    if ((v75 & 0x80000000) == 0)
      v75 = v75;
    else
      v75 = -(int)v75;
    v78 = v75 - 1 + v75;
    if (v78 >= 0x40)
      LODWORD(v78) = 64;
    v187 = v78;
    do
    {
      v79 = 0;
      v80 = 0;
      if (v76 >= v75 - 1)
        v81 = v75 - 1;
      else
        v81 = v76;
      v82 = v81 + 1;
      v83 = v76;
      do
      {
        if (v83 < v75)
        {
          v84 = a2[v83 + 130] * (unint64_t)a2[v79 + 130];
          v77 += v84;
          v80 += HIDWORD(v84);
        }
        ++v79;
        --v83;
      }
      while (v82 != v79);
      v186[v76] = v77;
      v77 = v80 + HIDWORD(v77);
      ++v76;
    }
    while (v76 < v187);
    if (v77 && v187 != 64)
      v186[v187++] = v77;
  }
  else
  {
    v187 = 0;
  }
  sub_223F15F80(__dst, __src, v186);
  v85 = a2 + 195;
  v86 = a2[259];
  if (!v86)
    goto LABEL_174;
  v87 = 0;
  v88 = 0;
  if (v86 >= 0)
    v89 = v86;
  else
    v89 = -v86;
  v90 = v89 - 1 + v89;
  if (v90 >= 0x40)
    LODWORD(v90) = 64;
  v181 = v90;
  do
  {
    v92 = 0;
    v93 = 0;
    if (v87 >= v89 - 1)
      v94 = v89 - 1;
    else
      v94 = v87;
    v95 = v94 + 1;
    v96 = v87;
    do
    {
      if (v96 < v89)
      {
        v97 = v85[v96] * (unint64_t)v85[v92];
        v88 += v97;
        v93 += HIDWORD(v97);
      }
      ++v92;
      --v96;
    }
    while (v95 != v92);
    v180[v87] = v88;
    v88 = v93 + HIDWORD(v88);
    ++v87;
    v91 = v181;
  }
  while (v87 < v181);
  if (v88 && v181 != 64)
  {
    v180[v181] = v88;
    v91 = ++v181;
  }
  if (!v91)
    goto LABEL_174;
  v98 = a3[64];
  if (!v98)
    goto LABEL_174;
  v99 = 0;
  v100 = 0;
  if (v91 >= 0)
    v101 = v91;
  else
    v101 = -v91;
  if (v98 >= 0)
    v102 = v98;
  else
    v102 = -v98;
  v103 = v101 - 1;
  v104 = v101 - 1 + v102;
  if (v104 >= 0x40)
    LODWORD(v104) = 64;
  v183 = v104;
  v105 = a3;
  do
  {
    v107 = 0;
    v108 = 0;
    if (v99 >= v103)
      v109 = v103;
    else
      v109 = v99;
    v110 = ~v109;
    v111 = v180;
    do
    {
      if (v99 + v107 < v102)
      {
        v112 = v105[v107] * (unint64_t)*v111;
        v100 += v112;
        v108 += HIDWORD(v112);
      }
      --v107;
      ++v111;
    }
    while (v110 != v107);
    v182[v99] = v100;
    v100 = v108 + HIDWORD(v100);
    ++v99;
    v106 = v183;
    ++v105;
  }
  while (v99 < v183);
  if (v100 && v183 != 64)
  {
    v182[v183] = v100;
    v106 = ++v183;
  }
  if (v91 > 0 != v98 > 0)
  {
    v106 = -v106;
    v183 = v106;
  }
  if (v106 && (v113 = a3[129]) != 0)
  {
    v114 = 0;
    v115 = 0;
    if (v106 >= 0)
      v116 = v106;
    else
      v116 = -v106;
    if (v113 >= 0)
      v117 = v113;
    else
      v117 = -v113;
    v118 = v116 - 1;
    v119 = v118 + v117;
    if (v118 + v117 >= 0x40)
      v119 = 64;
    v185 = v119;
    do
    {
      v121 = 0;
      v122 = 0;
      if (v114 >= v118)
        v123 = v118;
      else
        v123 = v114;
      v124 = ~v123;
      v125 = v182;
      do
      {
        if (v114 + v121 < v117)
        {
          v126 = v59[v121] * (unint64_t)*v125;
          v115 += v126;
          v122 += HIDWORD(v126);
        }
        --v121;
        ++v125;
      }
      while (v124 != v121);
      v184[v114] = v115;
      v115 = v122 + HIDWORD(v115);
      ++v114;
      v120 = v185;
      ++v59;
    }
    while (v114 < v185);
    if (v115 && v185 != 64)
    {
      v184[v185] = v115;
      v120 = ++v185;
    }
    if (v106 > 0 != v113 > 0)
      v185 = -v120;
  }
  else
  {
LABEL_174:
    v185 = 0;
  }
  sub_223F15F80(v201, __dst, v184);
  __dst[0] = 1;
  __dst[64] = 1;
  v127 = a2[64];
  if (v127 && (v128 = a2[129]) != 0)
  {
    v129 = 0;
    v130 = 0;
    if (v127 >= 0)
      v131 = v127;
    else
      v131 = -v127;
    if (v128 >= 0)
      v132 = v128;
    else
      v132 = -v128;
    v133 = v131 - 1;
    v134 = v133 + v132;
    if (v133 + v132 >= 0x40)
      v134 = 64;
    v193 = v134;
    do
    {
      v136 = 0;
      v137 = 0;
      if (v129 >= v133)
        v138 = v133;
      else
        v138 = v129;
      v139 = ~v138;
      v140 = a2;
      do
      {
        if (v129 + v136 < v132)
        {
          v141 = v46[v136] * (unint64_t)*v140;
          v130 += v141;
          v137 += HIDWORD(v141);
        }
        --v136;
        ++v140;
      }
      while (v139 != v136);
      v192[v129] = v130;
      v130 = v137 + HIDWORD(v130);
      ++v129;
      v135 = v193;
      ++v46;
    }
    while (v129 < v193);
    if (v130 && v193 != 64)
    {
      v192[v193] = v130;
      v135 = ++v193;
    }
    if (v127 > 0 != v128 > 0)
      v193 = -v135;
  }
  else
  {
    v193 = 0;
  }
  v142 = a2[194];
  if (v142 && (v143 = a2[259]) != 0)
  {
    v144 = 0;
    v145 = 0;
    if (v142 >= 0)
      v146 = v142;
    else
      v146 = -v142;
    if (v143 >= 0)
      v147 = v143;
    else
      v147 = -v143;
    v148 = v146 - 1;
    v149 = v148 + v147;
    if (v148 + v147 >= 0x40)
      v149 = 64;
    v191 = v149;
    do
    {
      v151 = 0;
      v152 = 0;
      if (v144 >= v148)
        v153 = v148;
      else
        v153 = v144;
      v154 = ~v153;
      v155 = a2 + 130;
      do
      {
        if (v144 + v151 < v147)
        {
          v156 = v85[v151] * (unint64_t)*v155;
          v145 += v156;
          v152 += HIDWORD(v156);
        }
        --v151;
        ++v155;
      }
      while (v154 != v151);
      v190[v144] = v145;
      v145 = v152 + HIDWORD(v145);
      ++v144;
      v150 = v191;
      ++v85;
    }
    while (v144 < v191);
    if (v145 && v191 != 64)
    {
      v190[v191] = v145;
      v150 = ++v191;
    }
    if (v142 > 0 != v143 > 0)
      v191 = -v150;
  }
  else
  {
    v191 = 0;
  }
  sub_223F15F80(v194, v192, v190);
  v157 = v195;
  if (v195)
  {
    v158 = 0;
    v159 = 0;
    if (v195 >= 0)
      v160 = v195;
    else
      v160 = -v195;
    v161 = v160 - 1;
    if (v160 >= 0x40)
      LODWORD(v160) = 64;
    LODWORD(__src[32]) = v160;
    do
    {
      v163 = 0;
      v164 = 0;
      if (v158 >= v161)
        v165 = v161;
      else
        v165 = v158;
      v166 = v165 + 1;
      do
      {
        if (v158 == v163)
        {
          v167 = v194[v158];
          v159 += (2 * v167);
          v164 += v167 >> 31;
        }
        ++v163;
      }
      while (v166 != v163);
      *((_DWORD *)__src + v158) = v159;
      v159 = v164 + HIDWORD(v159);
      ++v158;
      v162 = __src[32];
    }
    while (v158 < SLODWORD(__src[32]));
    if (v159 && LODWORD(__src[32]) != 64)
    {
      *((_DWORD *)__src + SLODWORD(__src[32])) = v159;
      v162 = ++LODWORD(__src[32]);
    }
    if (v157 <= 0)
      LODWORD(__src[32]) = -v162;
  }
  else
  {
    LODWORD(__src[32]) = 0;
  }
  memcpy(v202, __src, sizeof(v202));
  memcpy(v200, a3 + 195, sizeof(v200));
  *(double *)&v172 = COERCE_DOUBLE(sub_223F19700(a1, v201, __dst, v168, v169, v170, v171));
  v174 = v173;
  v175 = *(double *)&v172;
  v176 = COERCE_DOUBLE(sub_223F1AD60(v198, (uint64_t)v197));
  v178 = v174 - v177;
  v179 = frexp(v175 / v176, (int *)&__src[1]);
  LODWORD(__src[1]) += v178;
  return *(_QWORD *)&v179;
}

void sub_223F23840()
{
  uint64_t v0;
  int *v1;
  int *v2;
  int *v3;
  int v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _DWORD *v41;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  double v69;
  double v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int *v90;
  unint64_t v91;
  unsigned int *v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int *v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  double v111;
  uint64_t v112;
  int v113;
  double v114;
  double v115;
  double v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int *v135;
  unint64_t v136;
  unsigned int *v137;
  int v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int *v152;
  unint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  _DWORD *v157;
  unsigned int *v158;
  int v159;
  double v160;
  double v161;
  double v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int *v181;
  unint64_t v182;
  unsigned int *v183;
  int v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int *v198;
  unint64_t v199;
  int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  int v207;
  _DWORD *v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int *v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  char v222;
  _DWORD *v223;
  int v224;
  int v225[64];
  int v226;
  int v227[64];
  int v228;
  int __dst[65];
  _DWORD v230[260];
  unsigned int __src[195];
  int v232[65];
  _QWORD v233[32];
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  _DWORD v239[64];
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  _DWORD v247[64];
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  int v253;
  int v254;
  uint64_t v255;

  v0 = MEMORY[0x24BDAC7A8]();
  v224 = v4;
  v220 = v5;
  v222 = v6;
  v221 = v7;
  v223 = (_DWORD *)v0;
  v255 = *MEMORY[0x24BDAC8D0];
  v8 = v1[2];
  v9 = *v1;
  v10 = v8 - v9;
  if (v8 <= v9)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      v248 = 0;
      v12 = v2[2];
      v13 = *v2;
      v14 = v12 - v13;
      if (v12 > v13)
        goto LABEL_4;
      goto LABEL_27;
    }
    LODWORD(v10) = v9 - v8;
    v11 = -1;
  }
  else
  {
    v11 = 1;
  }
  v247[0] = v10;
  v247[1] = 0;
  v248 = v11;
  v12 = v2[2];
  v13 = *v2;
  v14 = v12 - v13;
  if (v12 > v13)
  {
LABEL_4:
    v15 = 1;
    goto LABEL_5;
  }
LABEL_27:
  if ((v14 & 0x8000000000000000) == 0)
  {
    v251 = 0;
    v16 = v3[2];
    v17 = *v3;
    v18 = v16 - v17;
    if (v16 > v17)
      goto LABEL_6;
    goto LABEL_29;
  }
  v14 = -v14;
  v15 = -1;
LABEL_5:
  v249 = v14;
  v250 = 0;
  v251 = v15;
  v16 = v3[2];
  v17 = *v3;
  v18 = v16 - v17;
  if (v16 > v17)
  {
LABEL_6:
    v19 = 1;
    goto LABEL_7;
  }
LABEL_29:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v254 = 0;
    v20 = v1[3];
    v21 = v1[1];
    v22 = v20 - v21;
    if (v20 > v21)
      goto LABEL_8;
    goto LABEL_31;
  }
  v18 = -v18;
  v19 = -1;
LABEL_7:
  v252 = v18;
  v253 = 0;
  v254 = v19;
  v20 = v1[3];
  v21 = v1[1];
  v22 = v20 - v21;
  if (v20 > v21)
  {
LABEL_8:
    v23 = 1;
    goto LABEL_9;
  }
LABEL_31:
  if ((v22 & 0x8000000000000000) == 0)
  {
    v240 = 0;
    v24 = v2[3];
    v25 = v2[1];
    v26 = v24 - v25;
    if (v24 > v25)
      goto LABEL_10;
    goto LABEL_33;
  }
  v22 = -v22;
  v23 = -1;
LABEL_9:
  v239[0] = v22;
  v239[1] = 0;
  v240 = v23;
  v24 = v2[3];
  v25 = v2[1];
  v26 = v24 - v25;
  if (v24 > v25)
  {
LABEL_10:
    v27 = 1;
    goto LABEL_11;
  }
LABEL_33:
  if ((v26 & 0x8000000000000000) == 0)
  {
    v243 = 0;
    v28 = v3[3];
    v29 = v3[1];
    v30 = v28 - v29;
    if (v28 > v29)
      goto LABEL_12;
    goto LABEL_35;
  }
  v26 = -v26;
  v27 = -1;
LABEL_11:
  v241 = v26;
  v242 = 0;
  v243 = v27;
  v28 = v3[3];
  v29 = v3[1];
  v30 = v28 - v29;
  if (v28 > v29)
  {
LABEL_12:
    v31 = 1;
    goto LABEL_13;
  }
LABEL_35:
  if (v30 < 0)
  {
    v30 = -v30;
    v31 = -1;
LABEL_13:
    v244 = v30;
    v245 = 0;
    v246 = v31;
    v32 = (int)v20 * (uint64_t)(int)v9 - (int)v21 * (uint64_t)(int)v8;
    if (v32 >= 1)
      goto LABEL_14;
    goto LABEL_37;
  }
  v246 = 0;
  v32 = (int)v20 * (uint64_t)(int)v9 - (int)v21 * (uint64_t)(int)v8;
  if (v32 >= 1)
  {
LABEL_14:
    v233[0] = v32;
    if (HIDWORD(v32))
      v33 = 2;
    else
      v33 = 1;
    v234 = v33;
    v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
    if (v34 >= 1)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_37:
  if (v32 < 0)
  {
    v233[0] = -v32;
    if ((unint64_t)-v32 >> 32)
      v38 = -2;
    else
      v38 = -1;
    v234 = v38;
    v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
    if (v34 >= 1)
    {
LABEL_18:
      v235 = v34;
      if (HIDWORD(v34))
        v35 = 2;
      else
        v35 = 1;
      v236 = v35;
      v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
      if (v36 >= 1)
        goto LABEL_22;
LABEL_41:
      if (v36 < 0)
      {
        v237 = -v36;
        if ((unint64_t)-v36 >> 32)
          v37 = -2;
        else
          v37 = -1;
      }
      else
      {
        v37 = 0;
      }
      goto LABEL_62;
    }
  }
  else
  {
    v234 = 0;
    v34 = (int)v24 * (uint64_t)(int)v13 - (int)v25 * (uint64_t)(int)v12;
    if (v34 >= 1)
      goto LABEL_18;
  }
LABEL_39:
  if (v34 < 0)
  {
    v235 = -v34;
    if ((unint64_t)-v34 >> 32)
      v39 = -2;
    else
      v39 = -1;
    v236 = v39;
    v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
    if (v36 >= 1)
      goto LABEL_22;
    goto LABEL_41;
  }
  v236 = 0;
  v36 = (int)v28 * (uint64_t)(int)v17 - (int)v29 * (uint64_t)(int)v16;
  if (v36 < 1)
    goto LABEL_41;
LABEL_22:
  v237 = v36;
  if (HIDWORD(v36))
    v37 = 2;
  else
    v37 = 1;
LABEL_62:
  v40 = 0;
  v238 = v37;
  v41 = v239;
  v42 = v247;
  do
  {
    LODWORD(v44) = v247[65 * v40 + 64];
    if (!(_DWORD)v44)
    {
      v55 = 0;
      goto LABEL_85;
    }
    v45 = 0;
    v46 = 0;
    if ((v44 & 0x80000000) == 0)
      v44 = v44;
    else
      v44 = -(int)v44;
    v47 = v44 - 1 + v44;
    if (v47 >= 0x40)
      LODWORD(v47) = 64;
    __dst[64] = v47;
    v48 = v42;
    do
    {
      v49 = 0;
      v50 = 0;
      if (v45 >= v44 - 1)
        v51 = v44 - 1;
      else
        v51 = v45;
      v52 = ~v51;
      v53 = v42;
      do
      {
        if (v45 + v49 < v44)
        {
          v54 = v48[v49] * (unint64_t)*v53;
          v46 += v54;
          v50 += HIDWORD(v54);
        }
        --v49;
        ++v53;
      }
      while (v52 != v49);
      __dst[v45] = v46;
      v46 = v50 + HIDWORD(v46);
      ++v45;
      ++v48;
    }
    while (v45 < __dst[64]);
    if (v46 && __dst[64] != 64)
    {
      __dst[__dst[64]] = v46;
      v55 = __dst[64] + 1;
LABEL_85:
      __dst[64] = v55;
    }
    LODWORD(v56) = v239[65 * v40 + 64];
    if (!(_DWORD)v56)
    {
      v43 = 0;
LABEL_64:
      v228 = v43;
      goto LABEL_65;
    }
    v57 = 0;
    v58 = 0;
    if ((v56 & 0x80000000) == 0)
      v56 = v56;
    else
      v56 = -(int)v56;
    v59 = v56 - 1 + v56;
    if (v59 >= 0x40)
      LODWORD(v59) = 64;
    v228 = v59;
    v60 = v41;
    do
    {
      v61 = 0;
      v62 = 0;
      if (v57 >= v56 - 1)
        v63 = v56 - 1;
      else
        v63 = v57;
      v64 = ~v63;
      v65 = v41;
      do
      {
        if (v57 + v61 < v56)
        {
          v66 = v60[v61] * (unint64_t)*v65;
          v58 += v66;
          v62 += HIDWORD(v66);
        }
        --v61;
        ++v65;
      }
      while (v64 != v61);
      v227[v57] = v58;
      v58 = v62 + HIDWORD(v58);
      ++v57;
      ++v60;
    }
    while (v57 < v228);
    if (v58 && v228 != 64)
    {
      v227[v228] = v58;
      v43 = v228 + 1;
      goto LABEL_64;
    }
LABEL_65:
    sub_223F1625C(__src, __dst, v227);
    memcpy(&v230[65 * v40++], __src, 0x104uLL);
    v42 += 65;
    v41 += 65;
  }
  while (v40 != 3);
  v67 = 0;
  do
  {
    v73 = v67 + 1;
    v74 = (int)v67 - 1;
    if (v67 == 2)
      v75 = 0;
    else
      v75 = v67 + 1;
    if (!v67)
      v74 = 2;
    v76 = v247[65 * v75 + 64];
    if (!v76)
      goto LABEL_138;
    v77 = v239[65 * v74 + 64];
    if (!v77)
    {
      v76 = 0;
      goto LABEL_138;
    }
    v78 = 0;
    v79 = 0;
    v80 = &v239[65 * v74];
    if (v76 >= 0)
      v81 = v76;
    else
      v81 = -v76;
    if (v77 >= 0)
      v82 = v77;
    else
      v82 = -v77;
    v83 = v81 - 1;
    v84 = v83 + v82;
    if (v83 + v82 >= 0x40)
      v84 = 64;
    v228 = v84;
    do
    {
      v86 = 0;
      v87 = 0;
      if (v78 >= v83)
        v88 = v83;
      else
        v88 = v78;
      v89 = ~v88;
      v90 = &v247[65 * v75];
      do
      {
        if (v78 + v86 < v82)
        {
          v91 = v80[v86] * (unint64_t)*v90;
          v79 += v91;
          v87 += HIDWORD(v91);
        }
        --v86;
        ++v90;
      }
      while (v89 != v86);
      v227[v78] = v79;
      v79 = v87 + HIDWORD(v79);
      ++v78;
      v85 = v228;
      ++v80;
    }
    while (v78 < v228);
    if (v79 && v228 != 64)
    {
      v227[v228] = v79;
      v85 = ++v228;
    }
    if (v76 > 0 != v77 > 0)
    {
      v76 = -v85;
LABEL_138:
      v228 = v76;
    }
    v92 = &v247[65 * v74];
    v93 = v92[64];
    if (!v93 || (v94 = v239[65 * v75 + 64]) == 0)
    {
      v68 = 0;
LABEL_106:
      v226 = v68;
      goto LABEL_107;
    }
    v95 = 0;
    v96 = 0;
    v97 = &v239[65 * v75];
    if (v93 >= 0)
      v98 = v93;
    else
      v98 = -v93;
    if (v94 >= 0)
      v99 = v94;
    else
      v99 = -v94;
    v100 = v98 - 1;
    v101 = v100 + v99;
    if (v100 + v99 >= 0x40)
      v101 = 64;
    v226 = v101;
    do
    {
      v103 = 0;
      v104 = 0;
      if (v95 >= v100)
        v105 = v100;
      else
        v105 = v95;
      v106 = ~v105;
      v107 = v92;
      do
      {
        if (v95 + v103 < v99)
        {
          v108 = v97[v103] * (unint64_t)*v107;
          v96 += v108;
          v104 += HIDWORD(v108);
        }
        --v103;
        ++v107;
      }
      while (v106 != v103);
      v225[v95] = v96;
      v96 = v104 + HIDWORD(v96);
      ++v95;
      v102 = v226;
      ++v97;
    }
    while (v95 < v226);
    if (v96 && v226 != 64)
    {
      v225[v226] = v96;
      v102 = ++v226;
    }
    if (v93 > 0 != v94 > 0)
    {
      v68 = -v102;
      goto LABEL_106;
    }
LABEL_107:
    sub_223F15F80(__dst, v227, v225);
    memcpy(&__src[65 * v67++], __dst, 0x104uLL);
  }
  while (v73 != 3);
  v109 = sub_223F1AE4C(v223, __src, v230, v69, v70, v71, v72);
  v111 = ldexp(*(long double *)&v109, v110);
  if (v220)
  {
    v112 = 0;
    while (1)
    {
      v118 = v112 + 1;
      v119 = (int)v112 - 1;
      if (v112 == 2)
        v120 = 0;
      else
        v120 = v112 + 1;
      if (!v112)
        v119 = 2;
      v121 = v239[65 * v120 + 64];
      if (!v121)
        goto LABEL_198;
      v122 = *((_DWORD *)&v233[32] + 65 * v119);
      if (!v122)
        break;
      v123 = 0;
      v124 = 0;
      v125 = (char *)v233 + 260 * v119;
      if (v121 >= 0)
        v126 = v121;
      else
        v126 = -v121;
      if (v122 >= 0)
        v127 = v122;
      else
        v127 = -v122;
      v128 = v126 - 1;
      v129 = v128 + v127;
      if (v128 + v127 >= 0x40)
        v129 = 64;
      v228 = v129;
      do
      {
        v131 = 0;
        v132 = 0;
        if (v123 >= v128)
          v133 = v128;
        else
          v133 = v123;
        v134 = ~v133;
        v135 = &v239[65 * v120];
        do
        {
          if (v123 + v131 < v127)
          {
            v136 = *(unsigned int *)&v125[4 * v131] * (unint64_t)*v135;
            v124 += v136;
            v132 += HIDWORD(v136);
          }
          --v131;
          ++v135;
        }
        while (v134 != v131);
        v227[v123] = v124;
        v124 = v132 + HIDWORD(v124);
        ++v123;
        v130 = v228;
        v125 += 4;
      }
      while (v123 < v228);
      if (v124 && v228 != 64)
      {
        v227[v228] = v124;
        v130 = ++v228;
      }
      if (v121 > 0 != v122 > 0)
      {
        v121 = -v130;
LABEL_198:
        v228 = v121;
      }
      v137 = &v239[65 * v119];
      v138 = v137[64];
      if (v138 && (v139 = *((_DWORD *)&v233[32] + 65 * v120)) != 0)
      {
        v140 = 0;
        v141 = 0;
        v142 = (char *)v233 + 260 * v120;
        if (v138 >= 0)
          v143 = v138;
        else
          v143 = -v138;
        if (v139 >= 0)
          v144 = v139;
        else
          v144 = -v139;
        v145 = v143 - 1;
        v146 = v145 + v144;
        if (v145 + v144 >= 0x40)
          v146 = 64;
        v226 = v146;
        do
        {
          v148 = 0;
          v149 = 0;
          if (v140 >= v145)
            v150 = v145;
          else
            v150 = v140;
          v151 = ~v150;
          v152 = v137;
          do
          {
            if (v140 + v148 < v144)
            {
              v153 = *(unsigned int *)&v142[4 * v148] * (unint64_t)*v152;
              v141 += v153;
              v149 += HIDWORD(v153);
            }
            --v148;
            ++v152;
          }
          while (v151 != v148);
          v225[v140] = v141;
          v141 = v149 + HIDWORD(v141);
          ++v140;
          v147 = v226;
          v142 += 4;
        }
        while (v140 < v226);
        if (v141 && v226 != 64)
        {
          v225[v226] = v141;
          v147 = ++v226;
        }
        if (v138 > 0 == v139 > 0)
          goto LABEL_167;
        v113 = -v147;
      }
      else
      {
        v113 = 0;
      }
      v226 = v113;
LABEL_167:
      sub_223F15F80(__dst, v227, v225);
      memcpy(&__src[65 * v112++], __dst, 0x104uLL);
      if (v118 == 3)
      {
        v154 = sub_223F1AE4C(v223, __src, v230, v114, v115, v116, v117);
        *(long double *)(v221 + 8) = ldexp(*(long double *)&v154, v155) / v111;
        goto LABEL_224;
      }
    }
    v121 = 0;
    goto LABEL_198;
  }
LABEL_224:
  if ((v222 & 1) == 0 && !v224)
    return;
  v156 = 0;
  v232[64] = 0;
  v157 = v239;
  v158 = __src;
  while (2)
  {
    v164 = v156 + 1;
    v165 = (int)v156 - 1;
    if (v156 == 2)
      v166 = 0;
    else
      v166 = v156 + 1;
    if (!v156)
      v165 = 2;
    v167 = v247[65 * v166 + 64];
    if (!v167)
      goto LABEL_261;
    v168 = *((_DWORD *)&v233[32] + 65 * v165);
    if (!v168)
    {
      v167 = 0;
LABEL_261:
      v228 = v167;
      goto LABEL_262;
    }
    v169 = 0;
    v170 = 0;
    v171 = (char *)v233 + 260 * v165;
    if (v167 >= 0)
      v172 = v167;
    else
      v172 = -v167;
    if (v168 >= 0)
      v173 = v168;
    else
      v173 = -v168;
    v174 = v172 - 1;
    v175 = v174 + v173;
    if (v174 + v173 >= 0x40)
      v175 = 64;
    v228 = v175;
    do
    {
      v177 = 0;
      v178 = 0;
      if (v169 >= v174)
        v179 = v174;
      else
        v179 = v169;
      v180 = ~v179;
      v181 = &v247[65 * v166];
      do
      {
        if (v169 + v177 < v173)
        {
          v182 = *(unsigned int *)&v171[4 * v177] * (unint64_t)*v181;
          v170 += v182;
          v178 += HIDWORD(v182);
        }
        --v177;
        ++v181;
      }
      while (v180 != v177);
      v227[v169] = v170;
      v170 = v178 + HIDWORD(v170);
      ++v169;
      v176 = v228;
      v171 += 4;
    }
    while (v169 < v228);
    if (v170 && v228 != 64)
    {
      v227[v228] = v170;
      v176 = ++v228;
    }
    if (v167 > 0 != v168 > 0)
    {
      v167 = -v176;
      goto LABEL_261;
    }
LABEL_262:
    v183 = &v247[65 * v165];
    v184 = v183[64];
    if (!v184 || (v185 = *((_DWORD *)&v233[32] + 65 * v166)) == 0)
    {
      v200 = 0;
      goto LABEL_287;
    }
    v186 = 0;
    v187 = 0;
    v188 = (char *)v233 + 260 * v166;
    if (v184 >= 0)
      v189 = v184;
    else
      v189 = -v184;
    if (v185 >= 0)
      v190 = v185;
    else
      v190 = -v185;
    v191 = v189 - 1;
    v192 = v191 + v190;
    if (v191 + v190 >= 0x40)
      v192 = 64;
    v226 = v192;
    do
    {
      v194 = 0;
      v195 = 0;
      if (v186 >= v191)
        v196 = v191;
      else
        v196 = v186;
      v197 = ~v196;
      v198 = v183;
      do
      {
        if (v186 + v194 < v190)
        {
          v199 = *(unsigned int *)&v188[4 * v194] * (unint64_t)*v198;
          v187 += v199;
          v195 += HIDWORD(v199);
        }
        --v194;
        ++v198;
      }
      while (v197 != v194);
      v225[v186] = v187;
      v187 = v195 + HIDWORD(v187);
      ++v186;
      v193 = v226;
      v188 += 4;
    }
    while (v186 < v226);
    if (v187 && v226 != 64)
    {
      v225[v226] = v187;
      v193 = ++v226;
    }
    if (v184 > 0 != v185 > 0)
    {
      v200 = -v193;
LABEL_287:
      v226 = v200;
    }
    sub_223F15F80(__dst, v227, v225);
    memcpy(&__src[65 * v156], __dst, 0x104uLL);
    if (v224)
    {
      v159 = __src[65 * v156 + 64];
      if (!v159)
        goto LABEL_228;
      v201 = v239[65 * v156 + 64];
      if (!v201)
      {
        v159 = 0;
        goto LABEL_228;
      }
      v202 = 0;
      v203 = 0;
      if (v159 >= 0)
        v204 = v159;
      else
        v204 = -v159;
      if (v201 >= 0)
        v205 = v201;
      else
        v205 = -v201;
      v206 = v204 - 1;
      v207 = v206 + v205;
      if (v206 + v205 >= 0x40)
        v207 = 64;
      v228 = v207;
      v208 = v157;
      do
      {
        v210 = 0;
        v211 = 0;
        if (v202 >= v206)
          v212 = v206;
        else
          v212 = v202;
        v213 = ~v212;
        v214 = v158;
        do
        {
          if (v202 + v210 < v205)
          {
            v215 = v208[v210] * (unint64_t)*v214;
            v203 += v215;
            v211 += HIDWORD(v215);
          }
          --v210;
          ++v214;
        }
        while (v213 != v210);
        v227[v202] = v203;
        v203 = v211 + HIDWORD(v203);
        ++v202;
        v209 = v228;
        ++v208;
      }
      while (v202 < v228);
      if (v203 && v228 != 64)
      {
        v227[v228] = v203;
        v209 = ++v228;
      }
      if (v159 > 0 != v201 > 0)
      {
        v159 = -v209;
LABEL_228:
        v228 = v159;
      }
      sub_223F1625C(__dst, v232, v227);
      memcpy(v232, __dst, sizeof(v232));
    }
    v158 += 65;
    v157 += 65;
    ++v156;
    if (v164 != 3)
      continue;
    break;
  }
  if ((v222 & 1) != 0)
  {
    v216 = sub_223F1AE4C(v223, __src, v230, v160, v161, v162, v163);
    v160 = ldexp(*(long double *)&v216, v217) / v111;
    *(double *)v221 = v160;
  }
  if (v224)
  {
    v230[195] = 1;
    v230[259] = 1;
    v218 = sub_223F19C38(v223, __src, v230, v160, v161, v162, v163);
    *(long double *)(v221 + 16) = ldexp(*(long double *)&v218, v219) / v111;
  }
}

void sub_223F24750(void **a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  double v32;
  double v33;
  _BOOL4 v34;
  double v35;
  BOOL v36;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = (char *)*a1;
    v9 = v5 - (_BYTE *)*a1;
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      sub_22316E078();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_223174E94();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_37;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_37;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = (__int128 *)(v5 - 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *v20;
        *(v19 - 1) = *(v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 2;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
      v6 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v7;
    a1[2] = &v14[8 * v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  a1[1] = v7;
  v24 = (char *)*a1;
  v25 = (char *)v7 - (_BYTE *)*a1;
  if (v25 >= 9)
  {
    v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    v29 = *(v7 - 1);
    v28 = (char *)(v7 - 1);
    v27 = v29;
    v30 = &v24[8 * v26];
    v31 = *(_QWORD *)v30;
    v32 = *(double *)(v29 + 32);
    v33 = *(double *)(*(_QWORD *)v30 + 32);
    v34 = *(double *)(v29 + 24) < *(double *)(*(_QWORD *)v30 + 24);
    if (v32 != v33)
      v34 = v32 < v33;
    if (v34)
    {
      do
      {
        *(_QWORD *)v28 = v31;
        v28 = v30;
        if (!v26)
          break;
        v26 = (v26 - 1) >> 1;
        v30 = &v24[8 * v26];
        v31 = *(_QWORD *)v30;
        v35 = *(double *)(*(_QWORD *)v30 + 32);
        v36 = *(double *)(v27 + 24) < *(double *)(*(_QWORD *)v30 + 24);
        if (v32 != v35)
          v36 = v32 < v35;
      }
      while (v36);
      *(_QWORD *)v28 = v27;
    }
  }
}

char *sub_223F24940(_QWORD *a1, int *a2, int *a3, uint64_t *a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  char **v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _BOOL4 v31;
  int v32;
  int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  _BOOL4 v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  _BOOL4 v44;
  BOOL v45;
  char **v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v80;
  uint64_t v81;

  v12 = *a4;
  v11 = a4[1];
  v14 = (char *)a1[4];
  v13 = a1[5];
  if ((unint64_t)v14 >= v13)
  {
    v16 = (char **)(a1 + 3);
    v17 = (char *)a1[3];
    v18 = (v14 - v17) >> 5;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 59)
      sub_22316E078();
    v20 = v13 - (_QWORD)v17;
    if (v20 >> 4 > v19)
      v19 = v20 >> 4;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
      v21 = 0x7FFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 59)
        goto LABEL_112;
      v22 = (char *)operator new(32 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = &v22[32 * v18];
    *(_QWORD *)v23 = v12;
    *((_QWORD *)v23 + 1) = v11;
    *((_QWORD *)v23 + 2) = 0;
    *((_QWORD *)v23 + 3) = 0;
    v15 = v23 + 32;
    if (v14 != v17)
    {
      do
      {
        v24 = *((_OWORD *)v14 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v14 - 2);
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 32;
        v14 -= 32;
      }
      while (v14 != v17);
      v14 = *v16;
    }
    a1[3] = v23;
    a1[4] = v15;
    a1[5] = &v22[32 * v21];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_QWORD *)v14 = v12;
    *((_QWORD *)v14 + 1) = v11;
    v15 = v14 + 32;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
  }
  a1[4] = v15;
  v25 = v15 - 4;
  a5[1] = v15 - 4;
  *(_QWORD *)(a6 + 8) = v15 - 4;
  v27 = *a2;
  v26 = a2[1];
  v28 = a2[2];
  v29 = a2[3];
  v31 = *a2 != v28 || v26 != v29;
  v32 = *a3;
  v33 = a3[2];
  if (*a3 == v33)
  {
    v36 = a3[1];
    v40 = a3[3];
    v41 = v36 == v40;
    v34 = v36 != v40;
    if (v31 && v41)
    {
      if (v27 == v32 && v26 == v36)
      {
LABEL_47:
        v39 = 1;
        v35 = a2[1];
        if (v32 == v33)
          goto LABEL_48;
        goto LABEL_62;
      }
      v35 = a3[1];
      if (v28 != v32 || v29 != v36)
        goto LABEL_28;
      v39 = 1;
      v35 = a2[3];
      if (v32 == v33)
        goto LABEL_48;
LABEL_62:
      v44 = 1;
LABEL_63:
      if (v31 || !v44)
      {
LABEL_64:
        v46 = (char **)(a1 + 6);
        v47 = v39;
LABEL_65:
        v47 |= 2uLL;
        goto LABEL_69;
      }
      if (v32 == v27 && v35 == v26)
        goto LABEL_68;
      if (v33 != v27)
        goto LABEL_64;
      v46 = (char **)(a1 + 6);
      v47 = v39;
      if (a3[3] != v26)
        goto LABEL_65;
      goto LABEL_69;
    }
  }
  else
  {
    v34 = 1;
  }
  if (!v31 && v34)
  {
    v35 = a3[1];
    if (v32 == v27 && v35 == v26)
      goto LABEL_47;
    v36 = a3[3];
    if (v33 != v27 || v36 != v26)
      goto LABEL_28;
    v39 = 1;
    if (v32 == v33)
      goto LABEL_48;
    goto LABEL_62;
  }
  v35 = a3[1];
  v36 = a3[3];
LABEL_28:
  v38 = v32 != v33 || v35 != v36;
  v39 = v31 ^ v38 ^ 1;
  if (v32 != v33)
    goto LABEL_62;
LABEL_48:
  v42 = a3[3];
  v43 = v35 == v42;
  v44 = v35 != v42;
  if (!v31 || !v43)
    goto LABEL_63;
  if (v27 == v32 && v26 == v35)
  {
LABEL_68:
    v46 = (char **)(a1 + 6);
    v47 = v39;
    goto LABEL_69;
  }
  v45 = v29 == v35 && v28 == v32;
  v46 = (char **)(a1 + 6);
  v47 = v39;
  if (!v45)
    goto LABEL_65;
LABEL_69:
  v80 = a5;
  v81 = a6;
  v49 = v46[1];
  v48 = (unint64_t)v46[2];
  if ((unint64_t)v49 >= v48)
  {
    v51 = *v46;
    v52 = 0xAAAAAAAAAAAAAAABLL * ((v49 - *v46) >> 4);
    v53 = v52 + 1;
    if (v52 + 1 > 0x555555555555555)
      goto LABEL_111;
    v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v51) >> 4);
    if (2 * v54 > v53)
      v53 = 2 * v54;
    if (v54 >= 0x2AAAAAAAAAAAAAALL)
      v55 = 0x555555555555555;
    else
      v55 = v53;
    if (v55)
    {
      if (v55 > 0x555555555555555)
        goto LABEL_112;
      v56 = v25;
      v57 = (char *)operator new(48 * v55);
    }
    else
    {
      v56 = v25;
      v57 = 0;
    }
    v58 = &v57[48 * v52];
    *(_OWORD *)v58 = 0u;
    *((_OWORD *)v58 + 1) = 0u;
    *((_QWORD *)v58 + 4) = 0;
    *((_QWORD *)v58 + 5) = v47;
    v50 = v58 + 48;
    if (v49 != v51)
    {
      do
      {
        v59 = *((_OWORD *)v49 - 3);
        v60 = *((_OWORD *)v49 - 1);
        *((_OWORD *)v58 - 2) = *((_OWORD *)v49 - 2);
        *((_OWORD *)v58 - 1) = v60;
        *((_OWORD *)v58 - 3) = v59;
        v58 -= 48;
        v49 -= 48;
      }
      while (v49 != v51);
      v49 = *v46;
    }
    *v46 = v58;
    v46[1] = v50;
    v46[2] = &v57[48 * v55];
    if (v49)
      operator delete(v49);
    v25 = v56;
    a5 = v80;
  }
  else
  {
    *(_OWORD *)v49 = 0u;
    *((_OWORD *)v49 + 1) = 0u;
    *((_QWORD *)v49 + 4) = 0;
    *((_QWORD *)v49 + 5) = v47;
    v50 = v49 + 48;
  }
  v46[1] = v50;
  *((_QWORD *)v50 - 6) = *a1 + 24 * *((_QWORD *)a2 + 2);
  v61 = v50 - 48;
  v62 = (unint64_t)v46[2];
  if ((unint64_t)v50 >= v62)
  {
    v64 = *v46;
    v65 = 0xAAAAAAAAAAAAAAABLL * ((v50 - *v46) >> 4);
    v66 = v65 + 1;
    if (v65 + 1 <= 0x555555555555555)
    {
      v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (_QWORD)v64) >> 4);
      if (2 * v67 > v66)
        v66 = 2 * v67;
      if (v67 >= 0x2AAAAAAAAAAAAAALL)
        v68 = 0x555555555555555;
      else
        v68 = v66;
      if (!v68)
      {
        v69 = v25;
        v70 = 0;
LABEL_102:
        v71 = &v70[48 * v65];
        *(_OWORD *)v71 = 0u;
        *((_OWORD *)v71 + 1) = 0u;
        v72 = &v70[48 * v68];
        *((_QWORD *)v71 + 4) = 0;
        *((_QWORD *)v71 + 5) = v47;
        v63 = v71 + 48;
        if (v50 == v64)
        {
          *v46 = v71;
          v46[1] = v63;
          v76 = v50;
          v46[2] = v72;
        }
        else
        {
          v73 = v50;
          do
          {
            v74 = *((_OWORD *)v73 - 3);
            v75 = *((_OWORD *)v73 - 1);
            *((_OWORD *)v71 - 2) = *((_OWORD *)v73 - 2);
            *((_OWORD *)v71 - 1) = v75;
            *((_OWORD *)v71 - 3) = v74;
            v71 -= 48;
            v73 -= 48;
          }
          while (v73 != v64);
          v76 = *v46;
          *v46 = v71;
          v46[1] = v63;
          v46[2] = v72;
          if (!v76)
            goto LABEL_109;
        }
        operator delete(v76);
LABEL_109:
        v25 = v69;
        a5 = v80;
        goto LABEL_110;
      }
      if (v68 <= 0x555555555555555)
      {
        v69 = v25;
        v70 = (char *)operator new(48 * v68);
        goto LABEL_102;
      }
LABEL_112:
      sub_223174E94();
    }
LABEL_111:
    sub_22316E078();
  }
  *(_OWORD *)v50 = 0u;
  *((_OWORD *)v50 + 1) = 0u;
  *((_QWORD *)v50 + 4) = 0;
  *((_QWORD *)v50 + 5) = v47;
  v63 = v50 + 48;
LABEL_110:
  v46[1] = v63;
  *((_QWORD *)v63 - 6) = *a1 + 24 * *((_QWORD *)a3 + 2);
  *((_QWORD *)v50 - 4) = v63 - 48;
  *((_QWORD *)v63 - 5) = v25;
  *((_QWORD *)v63 - 4) = v61;
  a5[4] = v61;
  *((_QWORD *)v50 - 3) = a5;
  v77 = a5[2];
  *(_QWORD *)(v77 + 24) = v81;
  *(_QWORD *)(v81 + 32) = v77;
  v78 = *(_QWORD *)(v81 + 16);
  *(_QWORD *)(v78 + 24) = v63 - 48;
  *((_QWORD *)v63 - 2) = v78;
  return v50 - 48;
}

unint64_t sub_223F24E90@<X0>(unint64_t result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  unsigned int v6;
  int v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t *v13;
  uint64_t v14;
  int64_t v15;
  char *v16;
  float32x2_t *v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  float v22;
  float32x2_t *v23;
  uint64_t v24;
  float32x2_t v25;
  uint64_t v26;
  float32x2_t v27;
  int64_t v28;
  int64_t v29;
  int64x2_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  int64x2_t *v34;
  unint64_t v35;
  int64x2_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  int64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  float v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  int64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  uint64_t *v117;
  uint64_t v118;
  int64_t v119;
  char *v120;
  char *v121;
  char *v122;
  int32x2_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  float32x4_t *v130;
  unint64_t v131;
  float *v132;
  float *v133;
  unint64_t v134;
  uint64_t v135;
  float32x4_t *v136;
  float32x4_t *v137;
  uint64_t v138;
  float32x4_t v139;
  float v140;
  float v141;
  unsigned int v142;
  int32x4_t *v143;
  uint64_t v144;
  uint64_t v145;
  float32x4_t v146;
  unint64_t v147;
  __int128 *v148;
  char *v149;
  uint64_t v150;
  int32x4_t *v151;
  uint64_t v152;
  int32x4_t *v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  uint64_t v158;
  __int128 v159;
  int64x2_t *v160;
  float32x4_t v161;
  float32x4_t v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  __int128 v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  int32x2_t v177;
  float v178;
  float v179;
  uint64_t v180;
  float32x4_t v181;
  int8x16_t v182;
  float32x4_t v183;
  _DWORD *v184;
  _DWORD *v185;
  char *v186;
  char *v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  _DWORD *v196;
  unsigned int v197;
  size_t v198;
  unsigned int v199;
  size_t v200;
  float32x2_t v201;
  float32x2_t v202;
  float32x2_t *v203;
  uint64_t v204;
  _QWORD *v205;
  float32x4_t *v206;
  float32x4_t *v207;
  float *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  float *v215;
  char *v216;
  float32x2_t *v217;
  float *v218;
  float *v219;
  float *v220;
  float *v221;
  float *v222;
  float *v223;
  float *v224;
  float *v225;
  unsigned int *v226;
  int64_t v227;
  float v228;
  _DWORD *v229;
  uint64_t v230;
  float32x2_t v231;
  float32x2_t v232;
  unsigned int v233;
  float v234;
  float v235;
  uint64_t v236;
  unsigned int v237;
  float v238;
  char *v239;
  char *i;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int64x2_t v245;
  unint64_t v246;
  uint64_t __sz;
  uint64_t v248;
  size_t v249;
  char *v250;
  float32x2_t *v251;
  float32x2_t *v252;
  size_t v253;
  size_t v254;
  uint64_t v255;
  unint64_t v256;
  unsigned int v257;
  char *v258;
  float32x2_t *v259;
  char *v260;
  float32x2_t *v261;
  _QWORD *v262;
  float32x4_t *v263;
  uint64_t v264;
  float32x4_t *v265;
  char *v266;
  int v267;
  void *__p;
  size_t v269;
  char *v270;
  void *v271;
  char *v272;
  char *v273;
  float32x4_t v274;
  _QWORD v275[2];
  unsigned int v276;
  int64x2_t *v277;
  float32x4_t *p_p;
  _QWORD *v279;
  __int128 v280;
  int v281;
  float *v282;
  _QWORD *v283;
  float32x4_t **v284;
  int v285;
  uint64_t v286;

  v3 = result;
  v286 = *MEMORY[0x24BDAC8D0];
  if (result <= 1)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (result)
    {
      result = (unint64_t)operator new(0x24uLL);
      *(_QWORD *)(a3 + 8) = result + 36;
      *(_QWORD *)(a3 + 16) = result + 36;
      *(_QWORD *)(result + 8) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 16) = 0xFFFFFFFF00000000;
      *(_QWORD *)(result + 24) = 0xFFFFFFFF00000000;
      *(_DWORD *)(result + 32) = 0;
      *(_QWORD *)a3 = result;
      *(_DWORD *)(a3 + 24) = 1065353216;
      *(_QWORD *)(a3 + 28) = 0;
      *(_DWORD *)(a3 + 36) = 1065353216;
      *(_QWORD *)result = 0xFFFFFFFF00000000;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1065353216;
      *(_QWORD *)(a3 + 28) = 0;
      *(_DWORD *)(a3 + 36) = 1065353216;
    }
    return result;
  }
  v6 = result - 1;
  if ((result - 1) >= 2)
    v7 = 2;
  else
    v7 = result - 1;
  v8 = result;
  v9 = (((8 * result) & 0x3FFFFFFF8) + 31) & 0x7FFFFFFE0;
  v275[1] = v9 >> 2;
  v10 = operator new(v9, (std::align_val_t)0x20uLL);
  v11 = 0;
  v275[0] = v10;
  v276 = v3;
  v252 = &a2[v8];
  v255 = 8 * v3;
  v12 = 8 * v3;
  v13 = a2;
  do
  {
    v14 = (uint64_t)*v13++;
    *(_QWORD *)(v275[0] + 4 * (v11 & 0xFFFFFFFE)) = v14;
    v11 += 2;
    v12 -= 8;
  }
  while (v12);
  if (v6 >= 5)
    v15 = 5;
  else
    v15 = v6;
  v271 = 0;
  v272 = 0;
  v273 = 0;
  v243 = v3;
  v244 = a3;
  v3 = v3;
  v246 = v3;
  v257 = v7;
  if ((_DWORD)v3)
  {
    v16 = (char *)operator new(48 * v3);
    v271 = v16;
    v272 = v16;
    v273 = &v16[48 * v3];
    v17 = (float32x2_t *)operator new(8 * v3);
    v18 = 4 * v3;
    v3 = (unint64_t)operator new(v18);
    bzero((void *)v3, v18);
    v19 = (char *)(v3 + v18);
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v19 = 0;
  }
  v20 = 0;
  v256 = (unint64_t)&v19[-v3];
  __sz = 2 * (_QWORD)&v19[-v3];
  v21 = (unint64_t)(v15 - 2) >> 1;
  v254 = (8 * (_BYTE)v15 + 31) & 0x60;
  v248 = (uint64_t)&v19[-v3] >> 2;
  v249 = v254 >> 2;
  v253 = (4 * (_BYTE)v7 * (_BYTE)v7 + 31) & 0x60;
  v22 = 2.0;
  v245 = vdupq_n_s64(4uLL);
  v23 = a2;
  v261 = v17;
  v250 = v19;
  v251 = a2;
  do
  {
    v24 = 0;
    v259 = v23;
    v25 = *v23;
    v26 = v255;
    do
    {
      while (1)
      {
        v27 = vsub_f32(a2[v24], v25);
        v17[v24] = v27;
        if (v20 == v24)
          break;
        *(_DWORD *)(v3 + 4 * v24++) = vmla_lane_f32(vmul_f32(v27, v27), (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27, 1).u32[0];
        v26 -= 8;
        if (!v26)
          goto LABEL_22;
      }
      *(_DWORD *)(v3 + 4 * v24++) = 2139095040;
      v26 -= 8;
    }
    while (v26);
LABEL_22:
    v277 = 0;
    p_p = 0;
    v279 = 0;
    if (v19 == (char *)v3)
    {
      v33 = 0;
      v31 = 0;
      v29 = v15 - 1;
      v28 = v15 - 2;
      goto LABEL_31;
    }
    v29 = v15 - 1;
    v28 = v15 - 2;
    if (v256 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_22367C394();
    v30 = (int64x2_t *)operator new(__sz);
    v31 = (uint64_t *)v30;
    v277 = v30;
    if (v256 < 0x10)
    {
      v32 = 0;
      v33 = (uint64_t *)v30;
      do
LABEL_30:
        *v33++ = v32++;
      while (v248 != v32);
      goto LABEL_31;
    }
    v33 = &v30->i64[v248 & 0xFFFFFFFFFFFFFFFCLL];
    v34 = v30 + 1;
    v35 = v248 & 0xFFFFFFFFFFFFFFFCLL;
    v36 = (int64x2_t)xmmword_2245F5410;
    do
    {
      v34[-1] = v36;
      *v34 = vaddq_s64(v36, vdupq_n_s64(2uLL));
      v36 = vaddq_s64(v36, v245);
      v34 += 2;
      v35 -= 4;
    }
    while (v35);
    v32 = v248 & 0xFFFFFFFFFFFFFFFCLL;
    if (v248 != (v248 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_30;
LABEL_31:
    if (!(_DWORD)v15)
      goto LABEL_120;
    if ((_DWORD)v15 != 1)
    {
      v41 = (unint64_t)(v15 - 2) >> 1;
      do
      {
        if (v21 >= v41)
        {
          v43 = (2 * v41) | 1;
          v44 = &v31[v43];
          if (2 * v41 + 2 < (unint64_t)v15 && *(float *)(v3 + 4 * *v44) < *(float *)(v3 + 4 * v44[1]))
          {
            ++v44;
            v43 = 2 * v41 + 2;
          }
          v45 = &v31[v41];
          v46 = *v44;
          v47 = *v45;
          v48 = *(float *)(v3 + 4 * *v45);
          if (*(float *)(v3 + 4 * *v44) >= v48)
          {
            do
            {
              *v45 = v46;
              v45 = v44;
              if (v21 < v43)
                break;
              v49 = 2 * v43;
              v43 = (2 * v43) | 1;
              v44 = &v31[v43];
              v50 = v49 + 2;
              if (v50 < v15 && *(float *)(v3 + 4 * *v44) < *(float *)(v3 + 4 * v44[1]))
              {
                ++v44;
                v43 = v50;
              }
              v46 = *v44;
            }
            while (*(float *)(v3 + 4 * *v44) >= v48);
            *v45 = v47;
          }
        }
      }
      while (v41-- > 0);
    }
    v37 = &v31[v15];
    if (v37 != v33)
    {
      if (v15 < 2)
      {
        v38 = *v31;
        v39 = &v31[v15];
        do
        {
          v40 = *v39;
          if (*(float *)(v3 + 4 * *v39) < *(float *)(v3 + 4 * v38))
          {
            *v39 = v38;
            *v31 = v40;
            v38 = v40;
          }
          ++v39;
        }
        while (v39 != v33);
        goto LABEL_68;
      }
      v51 = v31 + 1;
      v52 = v31 + 2;
      v53 = &v31[v15];
      while (2)
      {
        v54 = *v53;
        v55 = *(float *)(v3 + 4 * *v53);
        if (v55 < *(float *)(v3 + 4 * *v31))
        {
          *v53 = *v31;
          *v31 = v54;
          if ((_DWORD)v15 == 2 || *(float *)(v3 + 4 * *v51) >= *(float *)(v3 + 4 * *v52))
          {
            v56 = v31 + 1;
            v57 = 1;
            v58 = *v51;
            if (*(float *)(v3 + 4 * *v51) >= v55)
            {
LABEL_62:
              v59 = v31;
              do
              {
                *v59 = v58;
                v59 = v56;
                if (v21 < v57)
                  break;
                v60 = 2 * v57;
                v57 = (2 * v57) | 1;
                v56 = &v31[v57];
                v61 = v60 + 2;
                if (v61 < v15 && *(float *)(v3 + 4 * *v56) < *(float *)(v3 + 4 * v56[1]))
                {
                  ++v56;
                  v57 = v61;
                }
                v58 = *v56;
              }
              while (*(float *)(v3 + 4 * *v56) >= v55);
              *v59 = v54;
            }
          }
          else
          {
            v56 = v31 + 2;
            v57 = 2;
            v58 = *v52;
            if (*(float *)(v3 + 4 * *v52) >= v55)
              goto LABEL_62;
          }
        }
        if (++v53 == v33)
          break;
        continue;
      }
    }
LABEL_68:
    if ((_DWORD)v15 != 1)
    {
      v62 = 0;
      v63 = *v31;
      v64 = v31;
      do
      {
        v65 = v64;
        v64 += v62 + 1;
        v66 = 2 * v62;
        v62 = (2 * v62) | 1;
        v67 = v66 + 2;
        if (v67 < v15 && *(float *)(v3 + 4 * *v64) < *(float *)(v3 + 4 * v64[1]))
        {
          ++v64;
          v62 = v67;
        }
        *v65 = *v64;
      }
      while (v62 <= v21);
      v68 = v37 - 1;
      if (v64 == v37 - 1)
      {
        *v64 = v63;
      }
      else
      {
        *v64 = *v68;
        *v68 = v63;
        v69 = (char *)v64 - (char *)v31 + 8;
        if (v69 >= 9)
        {
          v70 = (((unint64_t)v69 >> 3) - 2) >> 1;
          v71 = &v31[v70];
          v72 = *v71;
          v73 = *v64;
          v74 = *(float *)(v3 + 4 * *v64);
          if (*(float *)(v3 + 4 * *v71) < v74)
          {
            do
            {
              v75 = v71;
              *v64 = v72;
              if (!v70)
                break;
              v70 = (v70 - 1) >> 1;
              v71 = &v31[v70];
              v72 = *v71;
              v64 = v75;
            }
            while (*(float *)(v3 + 4 * *v71) < v74);
            *v75 = v73;
          }
        }
      }
      if (v15 >= 3)
      {
        v76 = 0;
        v77 = *v31;
        v78 = v31;
        do
        {
          v79 = v78;
          v78 += v76 + 1;
          v80 = 2 * v76;
          v76 = (2 * v76) | 1;
          v81 = v80 + 2;
          if (v81 < v29 && *(float *)(v3 + 4 * *v78) < *(float *)(v3 + 4 * v78[1]))
          {
            ++v78;
            v76 = v81;
          }
          *v79 = *v78;
        }
        while (v76 <= (uint64_t)((unint64_t)(v15 - 3) >> 1));
        v82 = v37 - 2;
        if (v78 == v37 - 2)
        {
          *v78 = v77;
        }
        else
        {
          *v78 = *v82;
          *v82 = v77;
          v83 = (char *)v78 - (char *)v31 + 8;
          if (v83 >= 9)
          {
            v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
            v85 = &v31[v84];
            v86 = *v85;
            v87 = *v78;
            v88 = *(float *)(v3 + 4 * *v78);
            if (*(float *)(v3 + 4 * *v85) < v88)
            {
              do
              {
                v89 = v85;
                *v78 = v86;
                if (!v84)
                  break;
                v84 = (v84 - 1) >> 1;
                v85 = &v31[v84];
                v86 = *v85;
                v78 = v89;
              }
              while (*(float *)(v3 + 4 * *v85) < v88);
              *v89 = v87;
            }
          }
        }
        if (v15 >= 4)
        {
          v90 = 0;
          v91 = *v31;
          v92 = v31;
          do
          {
            v93 = v92;
            v92 += v90 + 1;
            v94 = 2 * v90;
            v90 = (2 * v90) | 1;
            v95 = v94 + 2;
            if (v95 < v28 && *(float *)(v3 + 4 * *v92) < *(float *)(v3 + 4 * v92[1]))
            {
              ++v92;
              v90 = v95;
            }
            *v93 = *v92;
          }
          while (v90 <= (uint64_t)((unint64_t)(v15 - 4) >> 1));
          v96 = v37 - 3;
          if (v92 == v37 - 3)
          {
            *v92 = v91;
          }
          else
          {
            *v92 = *v96;
            *v96 = v91;
            v97 = (char *)v92 - (char *)v31 + 8;
            if (v97 >= 9)
            {
              v98 = (((unint64_t)v97 >> 3) - 2) >> 1;
              v99 = &v31[v98];
              v100 = *v99;
              v101 = *v92;
              v102 = *(float *)(v3 + 4 * *v92);
              if (*(float *)(v3 + 4 * *v99) < v102)
              {
                do
                {
                  v103 = v99;
                  *v92 = v100;
                  if (!v98)
                    break;
                  v98 = (v98 - 1) >> 1;
                  v99 = &v31[v98];
                  v100 = *v99;
                  v92 = v103;
                }
                while (*(float *)(v3 + 4 * *v99) < v102);
                *v103 = v101;
              }
            }
          }
          if (v15 >= 5)
          {
            v104 = 0;
            v105 = *v31;
            v106 = v31;
            do
            {
              v107 = v106;
              v106 += v104 + 1;
              v108 = 2 * v104;
              v104 = (2 * v104) | 1;
              v109 = v108 + 2;
              if (v109 < v15 - 3 && *(float *)(v3 + 4 * *v106) < *(float *)(v3 + 4 * v106[1]))
              {
                ++v106;
                v104 = v109;
              }
              *v107 = *v106;
            }
            while (v104 <= (uint64_t)((unint64_t)(v15 - 5) >> 1));
            v110 = v37 - 4;
            if (v106 == v110)
            {
              *v106 = v105;
            }
            else
            {
              *v106 = *v110;
              *v110 = v105;
              v111 = (char *)v106 - (char *)v31 + 8;
              if (v111 >= 9)
              {
                v112 = (((unint64_t)v111 >> 3) - 2) >> 1;
                v113 = &v31[v112];
                v114 = *v113;
                v115 = *v106;
                v116 = *(float *)(v3 + 4 * *v106);
                if (*(float *)(v3 + 4 * *v113) < v116)
                {
                  do
                  {
                    v117 = v113;
                    *v106 = v114;
                    if (!v112)
                      break;
                    v112 = (v112 - 1) >> 1;
                    v113 = &v31[v112];
                    v114 = *v113;
                    v106 = v117;
                  }
                  while (*(float *)(v3 + 4 * *v113) < v116);
                  *v117 = v115;
                }
              }
            }
          }
        }
      }
    }
LABEL_120:
    v118 = v33 - v31;
    if (v118 >= v15)
      v119 = v15;
    else
      v119 = v118;
    __p = 0;
    v269 = 0;
    v270 = 0;
    if (v119)
    {
      if (v119 < 0)
        sub_22367C394();
      v120 = (char *)operator new(8 * v119);
      v121 = &v120[8 * v119];
      __p = v120;
      v270 = v121;
      v260 = v120;
      memcpy(v120, v31, 8 * v119);
      v269 = (size_t)v121;
      v17 = v261;
      if (v31)
LABEL_126:
        operator delete(v31);
    }
    else
    {
      v121 = 0;
      v260 = 0;
      v17 = v261;
      if (v31)
        goto LABEL_126;
    }
    v122 = (char *)operator new(v254, (std::align_val_t)0x20uLL);
    v124 = v122;
    v258 = v16;
    if (v260 != v121)
    {
      v125 = 0;
      v126 = v260;
      do
      {
        v127 = *(_QWORD *)v126;
        v126 += 8;
        *(float *)v123.i32 = sqrtf(*(float *)(v3 + 4 * v127));
        v123 = (int32x2_t)vdiv_f32(v17[v127], (float32x2_t)vdup_lane_s32(v123, 0));
        *(int32x2_t *)&v122[4 * (v125 & 0xFFFFFFFE)] = v123;
        v125 += 2;
      }
      while (v126 != v121);
    }
    LODWORD(v265) = 2;
    HIDWORD(v265) = v257;
    v266 = v122;
    v267 = 0;
    v263 = (float32x4_t *)&v265;
    v279 = (_QWORD *)(v253 >> 2);
    p_p = (float32x4_t *)operator new(v253, (std::align_val_t)0x20uLL);
    LODWORD(v280) = v257;
    DWORD1(v280) = v257;
    v283 = &v263;
    v284 = &v265;
    v285 = 1065353216;
    sub_223F26604((uint64_t)&p_p, (uint64_t)&v282);
    v128 = (DWORD1(v280) * v280);
    v129 = (float *)operator new((4 * v128 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
    v130 = p_p;
    if ((_DWORD)v128)
    {
      v131 = (v128 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v132 = v129;
      v133 = (float *)p_p;
      if (v131 < 7)
        goto LABEL_257;
      v132 = v129;
      v133 = (float *)p_p;
      if ((unint64_t)((char *)v129 - (char *)p_p) < 0x20)
        goto LABEL_257;
      v134 = v131 + 1;
      v135 = v134 & 0x7FFFFFFFFFFFFFF8;
      v132 = &v129[v135];
      v133 = &p_p->f32[v135];
      v136 = p_p + 1;
      v137 = (float32x4_t *)(v129 + 4);
      v138 = v134 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v139 = vabsq_f32(*v136);
        v137[-1] = vabsq_f32(v136[-1]);
        *v137 = v139;
        v136 += 2;
        v137 += 2;
        v138 -= 8;
      }
      while (v138);
      if (v134 != (v134 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_257:
        do
        {
          v140 = *v133++;
          *v132++ = fabsf(v140);
        }
        while (v132 != &v129[v128]);
      }
    }
    if (v130)
      MEMORY[0x227684CB8](v130, 0x1000C8052888210);
    v141 = *v129;
    if ((_DWORD)v128 == 1)
    {
      v142 = 0;
      v143 = (int32x4_t *)v260;
    }
    else
    {
      v142 = 0;
      v144 = 4 * v128 - 4;
      v145 = 1;
      v143 = (int32x4_t *)v260;
      do
      {
        if (v129[v145] < v141)
        {
          v142 = v145;
          v141 = v129[v145];
        }
        ++v145;
        v144 -= 4;
      }
      while (v144);
    }
    if (v141 < v22)
    {
      v146.i64[0] = *(_QWORD *)&v124[8 * (v142 % v257)];
      v146.i64[1] = *(_QWORD *)&v124[8 * (v142 / v257)];
      v274 = v146;
      v22 = v141;
    }
    LODWORD(v279) = v15;
    if (v143 != (int32x4_t *)v121)
    {
      v147 = v121 - (char *)v143 - 8;
      v148 = &v280;
      v149 = (char *)v143;
      if (v147 < 0x38)
        goto LABEL_258;
      v150 = (v147 >> 3) + 1;
      v148 = (__int128 *)((char *)&v280 + 4 * (v150 & 0x3FFFFFFFFFFFFFF8));
      v149 = &v143->i8[8 * (v150 & 0x3FFFFFFFFFFFFFF8)];
      v151 = v143 + 2;
      v152 = v150 & 0x3FFFFFFFFFFFFFF8;
      v153 = (int32x4_t *)&v281;
      do
      {
        v155 = v151[-2];
        v154 = v151[-1];
        v157 = *v151;
        v156 = v151[1];
        v151 += 4;
        v153[-1] = vuzp1q_s32(v155, v154);
        *v153 = vuzp1q_s32(v157, v156);
        v153 += 2;
        v152 -= 8;
      }
      while (v152);
      if (v150 != (v150 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_258:
        do
        {
          v158 = *(_QWORD *)v149;
          v149 += 8;
          *(_DWORD *)v148 = v158;
          v148 = (__int128 *)((char *)v148 + 4);
        }
        while (v149 != v121);
      }
    }
    if (v16 < v273)
    {
      v19 = v250;
      *(_QWORD *)v16 = v124;
      *((_QWORD *)v16 + 1) = v249;
      v277 = 0;
      p_p = 0;
      *((_DWORD *)v16 + 4) = (_DWORD)v279;
      v159 = v280;
      *((_DWORD *)v16 + 10) = v281;
      *(_OWORD *)(v16 + 24) = v159;
      v16 += 48;
      a2 = v251;
      v272 = v258 + 48;
      v160 = v277;
      if (!v277)
        goto LABEL_156;
LABEL_155:
      MEMORY[0x227684CB8](v160, 0x1000C8052888210);
      goto LABEL_156;
    }
    v163 = (char *)v271;
    v164 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (_BYTE *)v271) >> 4);
    v165 = v164 + 1;
    if (v164 + 1 > 0x555555555555555)
      sub_22316E078();
    if (0x5555555555555556 * ((v273 - (_BYTE *)v271) >> 4) > v165)
      v165 = 0x5555555555555556 * ((v273 - (_BYTE *)v271) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v273 - (_BYTE *)v271) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v166 = 0x555555555555555;
    else
      v166 = v165;
    if (v166)
    {
      if (v166 > 0x555555555555555)
        sub_223174E94();
      v167 = (char *)operator new(48 * v166);
    }
    else
    {
      v167 = 0;
    }
    v168 = &v167[48 * v164];
    v277 = 0;
    p_p = 0;
    *(_QWORD *)v168 = v124;
    *((_QWORD *)v168 + 1) = v249;
    *((_DWORD *)v168 + 4) = (_DWORD)v279;
    LODWORD(v279) = 0;
    *(_OWORD *)(v168 + 24) = v280;
    *((_DWORD *)v168 + 10) = v281;
    v169 = v168 + 48;
    if (v16 == v163)
    {
      v271 = v168;
      v272 = v168 + 48;
      v273 = &v167[48 * v166];
      v17 = v261;
    }
    else
    {
      v170 = 0;
      do
      {
        v171 = &v168[v170];
        v172 = &v16[v170];
        *((_QWORD *)v171 - 5) = 0;
        *((_QWORD *)v171 - 6) = *(_QWORD *)&v16[v170 - 48];
        *((_QWORD *)v172 - 6) = 0;
        *((_QWORD *)v171 - 5) = *(_QWORD *)&v16[v170 - 40];
        *((_QWORD *)v172 - 5) = 0;
        *((_DWORD *)v171 - 8) = *(_DWORD *)&v16[v170 - 32];
        *((_DWORD *)v172 - 8) = 0;
        v173 = *(_OWORD *)&v16[v170 - 24];
        *((_DWORD *)v171 - 2) = *(_DWORD *)&v16[v170 - 8];
        *(_OWORD *)(v171 - 24) = v173;
        v170 -= 48;
      }
      while (&v16[v170] != v163);
      v16 = (char *)v271;
      v174 = v272;
      v271 = &v168[v170];
      v272 = v168 + 48;
      v273 = &v167[48 * v166];
      v17 = v261;
      while (v174 != v16)
      {
        v176 = *((_QWORD *)v174 - 6);
        v174 -= 48;
        v175 = v176;
        if (v176)
          MEMORY[0x227684CB8](v175, 0x1000C8052888210);
      }
    }
    v19 = v250;
    if (v16)
      operator delete(v16);
    v16 = v169;
    a2 = v251;
    v272 = v16;
    v160 = v277;
    if (v277)
      goto LABEL_155;
LABEL_156:
    MEMORY[0x227684CB8](v129, 0x1000C8052888210);
    if (__p)
      operator delete(__p);
    v23 = v259 + 1;
    ++v20;
  }
  while (&v259[1] != v252);
  v161.i64[0] = v274.i64[1];
  v177 = *(int32x2_t *)v274.f32;
  v178 = fabsf(vmla_lane_f32(vmul_f32(*(float32x2_t *)v274.f32, *(float32x2_t *)&v274.u32[2]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v274.u32[2], 1), *(float32x2_t *)v274.f32, 1).f32[0]);
  if (v178 == 1.0 || (v178 <= 1.0 ? (v179 = 1.0 - v178) : (v179 = v178 + -1.0), v179 <= 0.000001))
  {
    v177 = vrev64_s32(*(int32x2_t *)&v274.u32[2]);
    *(int32x2_t *)v274.f32 = v177;
  }
  if (fabsf(*(float *)v177.i32) >= fabsf(v274.f32[2]))
  {
    v162.i64[0] = v274.i64[1];
    *(int32x2_t *)v161.f32 = v177;
    if (*(float *)v177.i32 >= 0.0)
      goto LABEL_194;
    goto LABEL_193;
  }
  v180 = v274.i64[1];
  *(int32x2_t *)&v162.u32[2] = v177;
  v274 = v162;
  *(int32x2_t *)v162.f32 = v177;
  if (v161.f32[0] < 0.0)
  {
LABEL_193:
    v181.i64[0] = vnegq_f32(v161).u64[0];
    v182 = (int8x16_t)v274;
    v181.i64[1] = v274.i64[1];
    v274 = v181;
    v162 = (float32x4_t)vextq_s8(v182, v182, 8uLL);
  }
LABEL_194:
  if (v162.f32[1] >= 0.0)
  {
    *(_QWORD *)v244 = 0;
    *(_QWORD *)(v244 + 8) = 0;
    *(_QWORD *)(v244 + 16) = 0;
    if (v246)
      goto LABEL_198;
LABEL_196:
    v184 = 0;
    *(float32x4_t *)(v244 + 24) = v274;
  }
  else
  {
    v183.i64[0] = v274.i64[0];
    v183.i64[1] = vnegq_f32(v162).u64[0];
    v274 = v183;
    *(_QWORD *)v244 = 0;
    *(_QWORD *)(v244 + 8) = 0;
    *(_QWORD *)(v244 + 16) = 0;
    if (!v246)
      goto LABEL_196;
LABEL_198:
    v185 = operator new(36 * v246);
    v184 = v185;
    *(_QWORD *)v244 = v185;
    *(_QWORD *)(v244 + 8) = v185;
    v186 = (char *)&v185[9 * v246];
    *(_QWORD *)(v244 + 16) = v186;
    v187 = (char *)v185;
    if (36 * v246 - 36 < 0x24)
      goto LABEL_259;
    v188 = (36 * v246 - 36) / 0x24 + 1;
    v187 = (char *)&v185[9 * (v188 & 0xFFFFFFFFFFFFFFELL)];
    v189 = (char *)(v185 + 9);
    v190 = v188 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v189 - 36) = 0xFFFFFFFF00000000;
      *(_QWORD *)v189 = 0xFFFFFFFF00000000;
      *((_DWORD *)v189 - 7) = 0;
      *((_DWORD *)v189 + 2) = 0;
      *(_QWORD *)(v189 + 12) = 0xFFFFFFFFLL;
      *((_QWORD *)v189 - 3) = 0xFFFFFFFFLL;
      *((_QWORD *)v189 - 2) = 0xFFFFFFFFLL;
      *(_QWORD *)(v189 + 20) = 0xFFFFFFFFLL;
      *((_QWORD *)v189 - 1) = 0xFFFFFFFFLL;
      *(_QWORD *)(v189 + 28) = 0xFFFFFFFFLL;
      v189 += 72;
      v190 -= 2;
    }
    while (v190);
    if (v188 != (v188 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_259:
      do
      {
        *(_QWORD *)v187 = 0xFFFFFFFF00000000;
        *((_QWORD *)v187 + 1) = 0xFFFFFFFF00000000;
        *((_QWORD *)v187 + 2) = 0xFFFFFFFF00000000;
        *((_QWORD *)v187 + 3) = 0xFFFFFFFF00000000;
        *((_DWORD *)v187 + 8) = 0;
        v187 += 36;
      }
      while (v187 != v186);
    }
    *(_QWORD *)(v244 + 8) = v186;
    *(float32x4_t *)(v244 + 24) = v274;
    v191 = 36 * v246 - 36;
    if (v191 < 0x24)
    {
      LODWORD(v192) = 0;
      v193 = (char *)v185;
      goto LABEL_208;
    }
    v194 = 0;
    v195 = v191 / 0x24 + 1;
    v192 = v195 & 0xFFFFFFFFFFFFFFELL;
    v193 = (char *)&v185[9 * (v195 & 0xFFFFFFFFFFFFFFELL)];
    v196 = v185;
    do
    {
      *v196 = v194;
      v196[9] = v194 + 1;
      v194 += 2;
      v196 += 18;
    }
    while (v192 != v194);
    if (v195 != v192)
    {
      do
      {
LABEL_208:
        *(_DWORD *)v193 = v192;
        v193 += 36;
        LODWORD(v192) = v192 + 1;
      }
      while (v193 != v186);
    }
  }
  v265 = &v274;
  v266 = 0;
  v263 = &v274;
  v264 = 0x100000000;
  __p = v275;
  v197 = v276;
  v198 = (4 * v276 + 31) & 0x7FFFFFFE0;
  v283 = (_QWORD *)(v198 >> 2);
  v282 = (float *)operator new(v198, (std::align_val_t)0x20uLL);
  LODWORD(v284) = v197;
  p_p = (float32x4_t *)&__p;
  v279 = &v265;
  LODWORD(v280) = 1065353216;
  sub_223F26774((uint64_t)&v282, (uint64_t)&v277);
  v262 = v275;
  v199 = v276;
  v200 = (4 * v276 + 31) & 0x7FFFFFFE0;
  v269 = v200 >> 2;
  __p = operator new(v200, (std::align_val_t)0x20uLL);
  LODWORD(v270) = v199;
  p_p = (float32x4_t *)&v262;
  v279 = &v263;
  LODWORD(v280) = 1065353216;
  sub_223F26774((uint64_t)&__p, (uint64_t)&v277);
  v203 = v261;
  if (v243 && (_DWORD)v15)
  {
    v204 = 0;
    v205 = v271;
    v206 = v263;
    v207 = v265;
    v208 = v282;
    v209 = 2 * HIDWORD(v266);
    v210 = v209 + v266;
    v211 = v209 + ((_DWORD)v266 + 1);
    v212 = 2 * HIDWORD(v264);
    v213 = v212 + v264;
    v214 = v212 + (v264 + 1);
    v215 = (float *)__p;
    v216 = (char *)v271 + 24;
    do
    {
      v217 = (float32x2_t *)v205[6 * v204];
      v218 = (float *)&v184[9 * v204];
      v219 = v218 + 1;
      v220 = v218 + 3;
      v221 = v218 + 4;
      v222 = v218 + 7;
      v223 = v218 + 8;
      v224 = v218 + 5;
      v225 = v218 + 6;
      v226 = (unsigned int *)v216;
      v227 = v15;
      do
      {
        v231 = *v217;
        v201.i32[0] = v207->i32[v210];
        v232 = vmul_f32(*v217, v201);
        v201.i32[0] = v207->i32[v211];
        v232.f32[0] = vmla_lane_f32(v232, v201, *v217, 1).f32[0];
        v202.i32[0] = v206->i32[v213];
        v201.i32[0] = v206->i32[v214];
        if (v232.f32[0] <= 0.98481)
          goto LABEL_226;
        v233 = *v226;
        v234 = v208[*v226] - v208[v204];
        if (v234 <= 0.0)
        {
          if (*(_DWORD *)v219 == -1 || fabsf(v234) < fabsf(v219[1]))
          {
            *(_DWORD *)v219 = v233;
            v219[1] = v234;
            v235 = -v234;
            v236 = (uint64_t)&v184[9 * v233 + 3];
            goto LABEL_225;
          }
        }
        else if (*(_DWORD *)v220 == -1 || fabsf(v234) < fabsf(*v221))
        {
          *(_DWORD *)v220 = v233;
          v220[1] = v234;
          v235 = -v234;
          v236 = (uint64_t)&v184[9 * v233 + 1];
LABEL_225:
          *(_DWORD *)v236 = v204;
          *(float *)(v236 + 4) = v235;
        }
LABEL_226:
        v202 = vmla_lane_f32(vmul_f32(v231, v202), v201, v231, 1);
        if (v202.f32[0] > 0.98481)
        {
          v237 = *v226;
          v238 = v215[*v226] - v215[v204];
          if (v238 <= 0.0)
          {
            if (*(_DWORD *)v222 == -1 || fabsf(v238) < fabsf(*v223))
            {
              *(_DWORD *)v222 = v237;
              v222[1] = v238;
              v228 = -v238;
              v229 = &v184[9 * v237 + 5];
              v230 = 2;
LABEL_215:
              *v229 = v204;
              *(float *)&v184[9 * v237 + 2 + 2 * v230] = v228;
              v203 = v261;
            }
          }
          else if (*(_DWORD *)v224 == -1 || fabsf(v238) < fabsf(*v225))
          {
            *(_DWORD *)v224 = v237;
            v224[1] = v238;
            v228 = -v238;
            v229 = &v184[9 * v237 + 7];
            v230 = 3;
            goto LABEL_215;
          }
        }
        ++v226;
        ++v217;
        --v227;
      }
      while (v227);
      ++v204;
      v216 += 48;
    }
    while (v204 != v246);
  }
  if (__p)
    MEMORY[0x227684CB8](__p, 0x1000C8052888210);
  if (v282)
    MEMORY[0x227684CB8](v282, 0x1000C8052888210);
  if (v3)
    operator delete((void *)v3);
  if (v203)
    operator delete(v203);
  v239 = (char *)v271;
  if (v271)
  {
    for (i = v272; i != v239; i -= 48)
    {
      v242 = *((_QWORD *)i - 6);
      v241 = v242;
      if (v242)
        MEMORY[0x227684CB8](v241, 0x1000C8052888210);
    }
    operator delete(v239);
  }
  result = v275[0];
  if (v275[0])
    return MEMORY[0x227684CB8](v275[0], 0x1000C8052888210);
  return result;
}

void sub_223F263BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52)
{
  void *v52;
  uint64_t v53;
  void *v55;
  uint64_t v56;

  if (v52)
  {
    operator delete(v52);
    v55 = __p;
    if (!__p)
    {
LABEL_3:
      sub_223F2658C(&a52);
      v56 = *(_QWORD *)(v53 - 216);
      if (!v56)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v55 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v55);
  sub_223F2658C(&a52);
  v56 = *(_QWORD *)(v53 - 216);
  if (!v56)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_4:
  MEMORY[0x227684CB8](v56, 0x1000C8052888210);
  goto LABEL_5;
}

void **sub_223F2658C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 6);
        v3 -= 48;
        v5 = v6;
        if (v6)
          MEMORY[0x227684CB8](v5, 0x1000C8052888210);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_223F26604(uint64_t a1, uint64_t a2)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  const float *v7;
  float *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  float *v14;
  size_t v15;
  int v16;
  void *v17;
  size_t v18;
  unint64_t v19;

  v4 = *(float **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const float **)(v6 + 8);
  if (&v7[-*(unsigned int *)(v6 + 16)] == v4 || (v8 = *(float **)(v5 + 8), &v8[-*(unsigned int *)(v5 + 16)] == v4))
  {
    v11 = *(_DWORD *)(v6 + 4);
    v12 = *(_DWORD *)(v5 + 4);
    v13 = (4 * v12 * v11 + 31) & 0x7FFFFFFE0;
    v18 = v13 >> 2;
    v17 = operator new(v13, (std::align_val_t)0x20uLL);
    v19 = __PAIR64__(v12, v11);
    sub_223F26604(&v17, a2);
    v14 = *(float **)a1;
    v15 = v18;
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v15;
    *(_QWORD *)(a1 + 16) = v19;
    if (v14)
      MEMORY[0x227684CB8](v14, 0x1000C8052888210);
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 4);
    if (*(_DWORD *)v6 * v9 && (v10 = *(_DWORD *)(v5 + 4), v10 * *(_DWORD *)v5))
    {
      sub_22322BCB0(1, 0, v9, v10, *(_DWORD *)v6, v7, 2, v8, *(float *)(a2 + 24), 0.0, 2, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 20);
      if (v16 * *(_DWORD *)(a1 + 16))
        bzero(v4, 4 * (v16 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_223F2674C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x227684CB8](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void sub_223F26774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  int v16;

  v4 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v9 = *(unsigned int *)(v4 + 16);
    v10 = (4 * v9 + 31) & 0x7FFFFFFE0;
    v15 = v10 >> 2;
    v14 = operator new(v10, (std::align_val_t)0x20uLL);
    v16 = v9;
    sub_223F26774(&v14, a2);
    v11 = *(void **)a1;
    v12 = v15;
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 16) = v16;
    if (v11)
      MEMORY[0x227684CB8](v11, 0x1000C8052888210);
  }
  else if ((*(_DWORD *)(v4 + 16) & 0x7FFFFFFF) != 0)
  {
    v5 = *(uint64_t **)(a2 + 16);
    v6 = *((unsigned int *)v5 + 2);
    v7 = 2 * *((unsigned int *)v5 + 3);
    v8 = *v5;
    LODWORD(v14) = *(_DWORD *)(v8 + 4 * (v7 + v6));
    HIDWORD(v14) = *(_DWORD *)(v8 + 4 * (v7 + (v6 + 1)));
    sub_22322BD28();
  }
  else
  {
    v13 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v13)
      bzero(*(void **)a1, 4 * v13);
  }
}

void sub_223F268B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x227684CB8](a10, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

float sub_223F268DC(float *a1, float *a2)
{
  float v2;
  float result;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v2 = a2[2];
  result = 0.0;
  if (*a1 <= v2)
  {
    v4 = a1[1];
    v5 = a2[3];
    if (v4 <= v5)
    {
      v6 = a1[2];
      if (v6 >= *a2)
      {
        v7 = a1[3];
        v8 = a2[1];
        if (v7 >= v8)
        {
          if (*a1 >= *a2)
            v9 = *a1;
          else
            v9 = *a2;
          if (v4 >= v8)
            v10 = a1[1];
          else
            v10 = a2[1];
          if (v2 >= v6)
            v2 = a1[2];
          if (v5 >= v7)
            v5 = a1[3];
          if (v9 <= v2)
            v11 = v2;
          else
            v11 = v9;
          if (v9 > v2)
            v9 = v2;
          if (v10 <= v5)
            v12 = v5;
          else
            v12 = v10;
          if (v10 > v5)
            v10 = v5;
          return (float)(v11 - v9) * (float)(v12 - v10);
        }
      }
    }
  }
  return result;
}

void sub_223F26968(uint64_t *a1, uint64_t a2, uint64_t a3, float32x2_t *a4, double a5, double a6, double a7, double a8, double a9, double a10, __n128 a11)
{
  float v15;
  float v16;
  _BOOL4 v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t *v26;
  uint64_t v27;
  float32x2_t *v28;
  float v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  _BOOL4 v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  float v39;
  float32x2_t v40;
  float v41;
  BOOL v42;
  float *v43;
  float v44;
  float v45;
  BOOL v46;
  float v47;
  float v48;
  float v49;
  float v50;
  BOOL v51;
  float v52;
  float v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  float32x2_t *v61;
  float *v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float v70;
  float *v72;
  float v73;
  float v75;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  float *v81;
  uint64_t v82;
  __int128 v83;
  float v84;
  float v86;
  BOOL v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  float *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  BOOL v106;
  float v107;
  float v108;
  float v109;
  BOOL v110;
  float v111;
  float v112;
  unint64_t v113;
  float *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _BYTE *v121;
  char *v122;
  float *v123;
  float v124;
  BOOL v125;
  float v126;
  float v127;
  float v128;
  BOOL v129;
  float v130;
  float v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  float *v137;
  uint64_t v138;
  __int128 v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  float32x2_t *v150;
  unint64_t v151;
  float *v152;
  float32x2_t v153;
  float *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  _OWORD *v165;
  float *v166;
  uint64_t v167;
  __int128 v168;
  __n128 v169;
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  _BOOL4 v173;

  v15 = a4->f32[0];
  v16 = a4[1].f32[0];
  if (a4->f32[0] == v16)
    v17 = a4->f32[1] > a4[1].f32[1];
  else
    v17 = a4->f32[0] < v16;
  a1[1] = 0;
  a1[2] = 0;
  v18 = 2 * a2;
  *a1 = 0;
  v173 = v17;
  if (!(2 * a2))
  {
    v19 = 0;
    if (!a2)
      return;
    goto LABEL_9;
  }
  if (v18 >> 61)
    sub_22316E078();
  v19 = (float *)operator new(16 * a2);
  *a1 = (uint64_t)v19;
  a1[1] = (uint64_t)v19;
  a1[2] = (uint64_t)&v19[2 * v18];
  v17 = v173;
  if (a2)
  {
LABEL_9:
    v20 = 0;
    v21 = v15 != v16;
    v22 = 4 * v21;
    v23 = v19;
    v171 = a3;
    v172 = 4 * v21;
    do
    {
      v25 = v20;
      v26 = (float32x2_t *)(a3 + 8 * v20++);
      if (v20 == a2)
        v27 = 0;
      else
        v27 = v25 + 1;
      v28 = (float32x2_t *)(a3 + 8 * v27);
      v29 = *(float *)((char *)a4->f32 + v22);
      if (((v17 ^ (*(float *)((char *)v26->f32 + v22) <= v29)) & 1) != 0)
      {
        if (((v17 ^ (v28->f32[v21] <= v29)) & 1) != 0)
          goto LABEL_32;
        a11.n128_u64[0] = (unint64_t)*a4;
        v30 = a4[1];
        v31 = vsub_f32(v30, *a4);
        LODWORD(v32) = HIDWORD(*(unint64_t *)a4);
        v33 = sqrtf(vmla_lane_f32(vmul_f32(v31, v31), (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1), v31, 1).f32[0]);
        v34 = 1;
        v35 = *a4;
      }
      else
      {
        v35 = *a4;
        v30 = a4[1];
        v36 = vsub_f32(v30, *a4);
        v37 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*a4, *v26)), v36);
        v38 = vsub_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)v37, 1)).f32[0];
        a11.n128_u64[0] = (unint64_t)vmla_lane_f32(vmul_f32(v36, v36), (float32x2_t)vdup_lane_s32((int32x2_t)v36, 1), v36, 1);
        v33 = sqrtf(a11.n128_f32[0]);
        v39 = v38 / v33;
        v34 = (float)(v38 / v33) == 0.0;
        if ((float)(v38 / v33) < 0.0)
          v39 = 0.0 - v39;
        if (v39 <= 0.000001)
          v34 = 1;
        LODWORD(v32) = HIDWORD(*(unint64_t *)a4);
        a11.n128_u32[0] = (unsigned __int32)*a4;
        if (((v17 ^ (v28->f32[v21] <= v29)) & 1) != 0)
        {
          if (v34)
          {
LABEL_32:
            v43 = (float *)*a1;
            if ((float *)*a1 != v23)
            {
              v44 = *(v23 - 2);
              v45 = v28->f32[0];
              v46 = v44 < v28->f32[0];
              if (v44 == v28->f32[0])
                goto LABEL_37;
              v47 = v44 - v45;
              v48 = v45 - v44;
              if (!v46)
                v48 = v47;
              if (v48 <= 0.000001)
              {
LABEL_37:
                v49 = *(v23 - 1);
                v50 = v28->f32[1];
                v51 = v49 < v50;
                if (v49 == v50)
                  continue;
                v52 = v49 - v50;
                v53 = v50 - v49;
                if (!v51)
                  v53 = v52;
                if (v53 <= 0.000001)
                  continue;
              }
            }
            v54 = a1[2];
            if ((unint64_t)v23 >= v54)
            {
              v55 = (char *)((char *)v23 - (char *)v43);
              v56 = ((char *)v23 - (char *)v43) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                sub_22316E078();
              v58 = v54 - (_QWORD)v43;
              if (v58 >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                if (v59 >> 61)
                  sub_223174E94();
                v60 = (char *)operator new(8 * v59);
                v61 = (float32x2_t *)&v60[8 * v56];
                *v61 = *v28;
                v24 = (uint64_t)&v61[1];
                if (v43 != v23)
                {
LABEL_51:
                  if ((unint64_t)(v55 - 8) < 0x168
                    || (v77 = ((char *)(v23 - 2) - (char *)v43) & 0xFFFFFFFFFFFFFFF8,
                        &v55[(_QWORD)v60 - 8 - v77] > &v55[(_QWORD)v60 - 8])
                    || (float *)((char *)v23 - v77 - 8) > v23 - 2
                    || (unint64_t)((char *)v43 - v60) < 0x20)
                  {
                    v62 = v23;
                    a3 = v171;
                  }
                  else
                  {
                    v78 = ((unint64_t)(v55 - 8) >> 3) + 1;
                    v79 = 8 * (v78 & 0x3FFFFFFFFFFFFFFCLL);
                    v62 = &v23[v79 / 0xFFFFFFFFFFFFFFFCLL];
                    v61 = (float32x2_t *)((char *)v61 - v79);
                    v80 = &v60[8 * v56 - 16];
                    v81 = v23 - 4;
                    v82 = v78 & 0x3FFFFFFFFFFFFFFCLL;
                    a3 = v171;
                    do
                    {
                      v83 = *(_OWORD *)v81;
                      *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
                      *(_OWORD *)v80 = v83;
                      v80 -= 32;
                      v81 -= 8;
                      v82 -= 4;
                    }
                    while (v82);
                    if (v78 == (v78 & 0x3FFFFFFFFFFFFFFCLL))
                      goto LABEL_54;
                  }
                  do
                  {
                    v63 = *(float32x2_t *)(v62 - 2);
                    v62 -= 2;
                    v61[-1] = v63;
                    --v61;
                  }
                  while (v62 != v43);
LABEL_54:
                  v23 = (float *)*a1;
                  *a1 = (uint64_t)v61;
                  a1[1] = v24;
                  a1[2] = (uint64_t)&v60[8 * v59];
                  if (!v23)
                    goto LABEL_196;
LABEL_194:
                  v154 = v23;
                  goto LABEL_195;
                }
              }
              else
              {
                v60 = 0;
                v61 = (float32x2_t *)(8 * v56);
                *(float32x2_t *)(8 * v56) = *v28;
                v24 = 8 * v56 + 8;
                if (v43 != v23)
                  goto LABEL_51;
              }
              a3 = v171;
              *a1 = (uint64_t)v61;
              a1[1] = v24;
              a1[2] = (uint64_t)&v60[8 * v59];
              if (!v23)
                goto LABEL_196;
              goto LABEL_194;
            }
LABEL_10:
            *(float32x2_t *)v23 = *v28;
            v24 = (uint64_t)(v23 + 2);
            goto LABEL_11;
          }
LABEL_64:
          v67 = *v26;
          v68 = *v28;
          v69 = vsub_f32(*v28, *v26);
          if (v15 == v16)
          {
            v73 = fabsf(v69.f32[0]);
            if (v69.f32[0] != 0.0 && v73 > 0.000001)
            {
              LODWORD(v32) = HIDWORD(*(unint64_t *)v26);
              v84 = fabsf(v69.f32[1]);
              if (v69.f32[1] != 0.0 && v84 > 0.000001)
                v32 = v67.f32[1] + (float)((float)(a11.n128_f32[0] - v67.f32[0]) * (float)(v69.f32[1] / v69.f32[0]));
              v72 = (float *)*a1;
              if ((float *)*a1 != v23)
                goto LABEL_100;
            }
            else
            {
              LODWORD(v32) = HIDWORD(*(unint64_t *)v28);
              v72 = (float *)*a1;
              if ((float *)*a1 != v23)
                goto LABEL_100;
            }
          }
          else
          {
            v70 = fabsf(v69.f32[1]);
            if (v69.f32[1] != 0.0 && v70 > 0.000001)
            {
              v75 = fabsf(v69.f32[0]);
              if (v69.f32[0] != 0.0 && v75 > 0.000001)
              {
                a11.n128_f32[0] = v67.f32[0] + (float)((float)(v32 - v67.f32[1]) * (float)(v69.f32[0] / v69.f32[1]));
                v72 = (float *)*a1;
                if ((float *)*a1 == v23)
                  goto LABEL_110;
                goto LABEL_100;
              }
              a11.n128_u32[0] = (unsigned __int32)*v26;
              v72 = (float *)*a1;
              if ((float *)*a1 != v23)
                goto LABEL_100;
            }
            else
            {
              a11.n128_u32[0] = (unsigned __int32)*v28;
              v72 = (float *)*a1;
              if ((float *)*a1 == v23)
                goto LABEL_110;
LABEL_100:
              v86 = *(v23 - 2);
              v87 = v86 < a11.n128_f32[0];
              if (v86 == a11.n128_f32[0])
                goto LABEL_107;
              v88 = v86 - a11.n128_f32[0];
              v89 = a11.n128_f32[0] - v86;
              if (!v87)
                v89 = v88;
              if (v89 <= 0.000001)
              {
LABEL_107:
                v90 = *(v23 - 1);
                v91 = v90 < v32;
                if (v90 == v32)
                  goto LABEL_128;
                v92 = v90 - v32;
                v93 = v32 - v90;
                if (!v91)
                  v93 = v92;
                if (v93 <= 0.000001)
                {
LABEL_128:
                  v106 = a11.n128_f32[0] < v68.f32[0];
                  if (a11.n128_f32[0] == v68.f32[0])
                    goto LABEL_135;
                  v107 = a11.n128_f32[0] - v68.f32[0];
                  v108 = v68.f32[0] - a11.n128_f32[0];
                  if (!v106)
                    v108 = v107;
                  if (v108 <= 0.000001)
                  {
LABEL_135:
                    v109 = v28->f32[1];
                    v110 = v32 < v109;
                    if (v32 == v109)
                      continue;
                    v111 = v32 - v109;
                    v112 = v109 - v32;
                    if (!v110)
                      v112 = v111;
                    if (v112 <= 0.000001)
                      continue;
                  }
                  v113 = a1[2];
                  if ((unint64_t)v23 >= v113)
                  {
                    v114 = (float *)*a1;
                    v115 = (uint64_t)v23 - *a1;
                    v116 = v115 >> 3;
                    v117 = (v115 >> 3) + 1;
                    if (v117 >> 61)
LABEL_219:
                      sub_22316E078();
                    v118 = v113 - (_QWORD)v114;
                    if (v118 >> 2 > v117)
                      v117 = v118 >> 2;
                    if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
                      v119 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v119 = v117;
                    if (v119)
                    {
                      if (v119 >> 61)
LABEL_221:
                        sub_223174E94();
                      v120 = v119;
                      v121 = operator new(8 * v119);
                      v119 = v120;
                    }
                    else
                    {
                      v121 = 0;
                    }
                    v150 = (float32x2_t *)&v121[8 * v116];
                    *v150 = *v28;
                    v24 = (uint64_t)&v150[1];
                    a3 = v171;
                    if (v23 != v114)
                    {
                      v151 = (char *)v23 - (char *)v114 - 8;
                      if (v151 < 0x168)
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      v155 = ((char *)(v23 - 2) - (char *)v114) & 0xFFFFFFFFFFFFFFF8;
                      if (&v121[v115 - 8 - v155] > &v121[v115 - 8])
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      if ((float *)((char *)v23 - v155 - 8) > v23 - 2)
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      if ((unint64_t)((char *)v23 - v121 - v115) < 0x20)
                      {
                        v152 = v23;
                        goto LABEL_191;
                      }
                      v163 = (v151 >> 3) + 1;
                      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
                      v152 = &v23[v164 / 0xFFFFFFFFFFFFFFFCLL];
                      v150 = (float32x2_t *)((char *)v150 - v164);
                      v165 = &v121[8 * v116 - 16];
                      v166 = v23 - 4;
                      v167 = v163 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v168 = *(_OWORD *)v166;
                        *(v165 - 1) = *((_OWORD *)v166 - 1);
                        *v165 = v168;
                        v165 -= 2;
                        v166 -= 8;
                        v167 -= 4;
                      }
                      while (v167);
                      if (v163 != (v163 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_191:
                          v153 = *(float32x2_t *)(v152 - 2);
                          v152 -= 2;
                          v150[-1] = v153;
                          --v150;
                        }
                        while (v152 != v114);
                      }
                      v23 = (float *)*a1;
                    }
                    *a1 = (uint64_t)v150;
                    a1[1] = v24;
                    a1[2] = (uint64_t)&v121[8 * v119];
                    if (!v23)
                      goto LABEL_196;
                    goto LABEL_194;
                  }
                  goto LABEL_10;
                }
              }
            }
          }
LABEL_110:
          v94 = a1[2];
          if ((unint64_t)v23 < v94)
          {
            *v23 = a11.n128_f32[0];
            v23[1] = v32;
            v19 = v23 + 2;
LABEL_127:
            a1[1] = (uint64_t)v19;
            v68.i32[0] = v28->i32[0];
            v23 = v19;
            goto LABEL_128;
          }
          v95 = (char *)((char *)v23 - (char *)v72);
          v96 = ((char *)v23 - (char *)v72) >> 3;
          v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 61)
            goto LABEL_219;
          v98 = v94 - (_QWORD)v72;
          if (v98 >> 2 > v97)
            v97 = v98 >> 2;
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
            v99 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v99 = v97;
          v169 = a11;
          if (v99)
          {
            if (v99 >> 61)
              goto LABEL_221;
            v100 = (char *)operator new(8 * v99);
            a11 = v169;
            v101 = (uint64_t)&v100[8 * v96];
            *(_DWORD *)v101 = v169.n128_u32[0];
            *(float *)(v101 + 4) = v32;
            if (v72 != v23)
            {
LABEL_121:
              if ((unint64_t)(v95 - 8) < 0x168
                || (v133 = ((char *)(v23 - 2) - (char *)v72) & 0xFFFFFFFFFFFFFFF8,
                    &v95[(_QWORD)v100 - 8 - v133] > &v95[(_QWORD)v100 - 8])
                || (float *)((char *)v23 - v133 - 8) > v23 - 2
                || (unint64_t)((char *)v72 - v100) < 0x20)
              {
                v102 = v23;
                v103 = v101;
                a3 = v171;
              }
              else
              {
                v134 = ((unint64_t)(v95 - 8) >> 3) + 1;
                v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
                v102 = &v23[v135 / 0xFFFFFFFFFFFFFFFCLL];
                v103 = v101 - v135;
                v136 = &v100[8 * v96 - 16];
                v137 = v23 - 4;
                v138 = v134 & 0x3FFFFFFFFFFFFFFCLL;
                a3 = v171;
                do
                {
                  v139 = *(_OWORD *)v137;
                  *((_OWORD *)v136 - 1) = *((_OWORD *)v137 - 1);
                  *(_OWORD *)v136 = v139;
                  v136 -= 32;
                  v137 -= 8;
                  v138 -= 4;
                }
                while (v138);
                if (v134 == (v134 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_124:
                  v23 = (float *)*a1;
                  v105 = &v100[8 * v99];
                  v19 = (float *)(v101 + 8);
                  *a1 = v103;
                  a1[1] = v101 + 8;
                  a1[2] = (uint64_t)v105;
                  if (v23)
                    goto LABEL_125;
                  goto LABEL_126;
                }
              }
              do
              {
                v104 = *((_QWORD *)v102 - 1);
                v102 -= 2;
                *(_QWORD *)(v103 - 8) = v104;
                v103 -= 8;
              }
              while (v102 != v72);
              goto LABEL_124;
            }
          }
          else
          {
            v100 = 0;
            v101 = 8 * v96;
            *(_DWORD *)v101 = a11.n128_u32[0];
            *(float *)(v101 + 4) = v32;
            if (v72 != v23)
              goto LABEL_121;
          }
          a3 = v171;
          v122 = &v100[8 * v99];
          v19 = (float *)(v101 + 8);
          *a1 = v101;
          a1[1] = v101 + 8;
          a1[2] = (uint64_t)v122;
          if (v23)
          {
LABEL_125:
            operator delete(v23);
            a11 = v169;
          }
LABEL_126:
          v17 = v173;
          v22 = v172;
          v21 = v15 != v16;
          goto LABEL_127;
        }
      }
      v40 = vmul_f32(vsub_f32(v35, *v28), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v30, v35)));
      v41 = vsub_f32((float32x2_t)vdup_lane_s32((int32x2_t)v40, 1), v40).f32[0] / v33;
      v42 = v41 != 0.0;
      if (v41 < 0.0)
        v41 = 0.0 - v41;
      if (v41 <= 0.000001)
        v42 = 0;
      if (v34 && !v42)
        goto LABEL_32;
      if (!v42)
        goto LABEL_64;
      if (!v34)
        continue;
      v64 = *v26;
      v65 = vsub_f32(*v28, *v26);
      if (v15 == v16)
      {
        LODWORD(v66) = HIDWORD(*(unint64_t *)v28);
        if (v65.f32[0] != 0.0 && fabsf(v65.f32[0]) > 0.000001)
        {
          LODWORD(v66) = HIDWORD(*(unint64_t *)v26);
          if (v65.f32[1] != 0.0 && fabsf(v65.f32[1]) > 0.000001)
            v66 = v64.f32[1] + (float)((float)(v65.f32[1] / v65.f32[0]) * vsub_f32(v35, v64).f32[0]);
        }
      }
      else
      {
        a11.n128_u32[0] = (unsigned __int32)*v28;
        v66 = v35.f32[1];
        if (v65.f32[1] != 0.0 && fabsf(v65.f32[1]) > 0.000001)
        {
          a11.n128_u32[0] = (unsigned __int32)*v26;
          if (v65.f32[0] != 0.0 && fabsf(v65.f32[0]) > 0.000001)
            a11.n128_f32[0] = v64.f32[0] + vmuls_lane_f32(v65.f32[0] / v65.f32[1], vsub_f32(v35, v64), 1);
        }
      }
      v123 = (float *)*a1;
      if ((float *)*a1 != v19)
      {
        v124 = *(v19 - 2);
        v125 = v124 < a11.n128_f32[0];
        if (v124 == a11.n128_f32[0])
          goto LABEL_159;
        v126 = v124 - a11.n128_f32[0];
        v127 = a11.n128_f32[0] - v124;
        if (!v125)
          v127 = v126;
        if (v127 <= 0.000001)
        {
LABEL_159:
          v128 = *(v19 - 1);
          v129 = v128 < v66;
          if (v128 == v66)
            goto LABEL_165;
          v130 = v128 - v66;
          v131 = v66 - v128;
          if (!v129)
            v131 = v130;
          if (v131 <= 0.000001)
          {
LABEL_165:
            v23 = v19;
            continue;
          }
        }
      }
      v132 = a1[2];
      if ((unint64_t)v19 >= v132)
      {
        v140 = (char *)((char *)v19 - (char *)v123);
        v141 = ((char *)v19 - (char *)v123) >> 3;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 61)
          sub_22316E078();
        v143 = v132 - (_QWORD)v123;
        if (v143 >> 2 > v142)
          v142 = v143 >> 2;
        if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8)
          v144 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v144 = v142;
        if (v144)
        {
          v170 = a11;
          if (v144 >> 61)
            sub_223174E94();
          v145 = (char *)operator new(8 * v144);
          a11.n128_u64[1] = v170.n128_u64[1];
          v146 = (uint64_t)&v145[8 * v141];
          *(_DWORD *)v146 = v170.n128_u32[0];
          *(float *)(v146 + 4) = v66;
          if (v123 != v19)
          {
LABEL_182:
            if ((unint64_t)(v140 - 8) < 0x168
              || (v156 = ((char *)(v19 - 2) - (char *)v123) & 0xFFFFFFFFFFFFFFF8,
                  &v140[(_QWORD)v145 - 8 - v156] > &v140[(_QWORD)v145 - 8])
              || (float *)((char *)v19 - v156 - 8) > v19 - 2
              || (unint64_t)((char *)v123 - v145) < 0x20)
            {
              v147 = (char *)v19;
              v148 = v146;
            }
            else
            {
              v157 = ((unint64_t)(v140 - 8) >> 3) + 1;
              v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
              v147 = (char *)&v19[v158 / 0xFFFFFFFFFFFFFFFCLL];
              v148 = v146 - v158;
              v159 = &v145[8 * v141 - 16];
              v160 = (char *)(v19 - 4);
              v161 = v157 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v162 = *(_OWORD *)v160;
                *((_OWORD *)v159 - 1) = *((_OWORD *)v160 - 1);
                *(_OWORD *)v159 = v162;
                v159 -= 32;
                v160 -= 32;
                v161 -= 4;
              }
              while (v161);
              if (v157 == (v157 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_185:
                v19 = (float *)*a1;
                v24 = v146 + 8;
                *a1 = v148;
                a1[1] = v146 + 8;
                a1[2] = (uint64_t)&v145[8 * v144];
                if (!v19)
                  goto LABEL_196;
LABEL_203:
                v154 = v19;
LABEL_195:
                operator delete(v154);
LABEL_196:
                v17 = v173;
                v22 = v172;
                v21 = v15 != v16;
                goto LABEL_11;
              }
            }
            do
            {
              v149 = *((_QWORD *)v147 - 1);
              v147 -= 8;
              *(_QWORD *)(v148 - 8) = v149;
              v148 -= 8;
            }
            while (v147 != (char *)v123);
            goto LABEL_185;
          }
        }
        else
        {
          v145 = 0;
          v146 = 8 * v141;
          *(_DWORD *)v146 = a11.n128_u32[0];
          *(float *)(v146 + 4) = v66;
          if (v123 != v19)
            goto LABEL_182;
        }
        v24 = v146 + 8;
        *a1 = v146;
        a1[1] = v146 + 8;
        a1[2] = (uint64_t)&v145[8 * v144];
        if (v19)
          goto LABEL_203;
        goto LABEL_196;
      }
      *v19 = a11.n128_f32[0];
      v19[1] = v66;
      v24 = (uint64_t)(v19 + 2);
LABEL_11:
      a1[1] = v24;
      v19 = (float *)v24;
      v23 = (float *)v24;
    }
    while (v20 != a2);
  }
}

void sub_223F274C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_223F274F4@<D0>(uint64_t a1@<X0>, char *a2@<X1>, float32x2_t *a3@<X2>, uint64_t *a4@<X8>, double a5@<D4>, double a6@<D5>, __n128 a7@<Q6>)
{
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 *v86;
  _OWORD *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  _OWORD *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  __n128 v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  double result;
  float32x2_t *v131;
  float32x2_t v132;
  uint64_t v133;
  double v134;
  unint64_t v135;
  unint64_t v136;
  _BYTE v137[24];

  v11 = 2 * a1;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!(2 * a1))
  {
    v13 = 0;
    v12 = 0;
    v14 = 0;
    v15 = 8 * a1;
    if (8 * a1 < 1)
      goto LABEL_69;
LABEL_6:
    v16 = (8 * a1) >> 3;
    v17 = v14 - v12;
    v18 = (uint64_t)(v14 - v12) >> 3;
    v19 = (uint64_t *)(v12 + ((v14 - v12) & 0xFFFFFFFFFFFFFFF8));
    v20 = (uint64_t)&v13[-v12];
    if (v16 > v20 >> 3)
    {
      v133 = (uint64_t)(v14 - v12) >> 3;
      v131 = a3;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)v16)
        v21 = (8 * a1) >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22 >> 61)
        sub_223174E94();
      v23 = (char *)operator new(8 * v22);
      v24 = &v23[8 * v133];
      memcpy(v24, a2, v15);
      v25 = &v24[8 * v16];
      v26 = v17 - 8;
      if (v17 >= 8)
      {
        v66 = v19;
        if (v26 < 0x18)
          goto LABEL_82;
        v67 = (v26 >> 3) + 1;
        v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
        v66 = &v19[v68 / 0xFFFFFFFFFFFFFFF8];
        v24 -= v68;
        v69 = 8 * v133 - 16;
        v70 = &v23[v69];
        v71 = (__int128 *)(v12 + v69);
        v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v73 = *v71;
          *((_OWORD *)v70 - 1) = *(v71 - 1);
          *(_OWORD *)v70 = v73;
          v70 -= 32;
          v71 -= 2;
          v72 -= 4;
        }
        while (v72);
        if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_82:
          do
          {
            v74 = *--v66;
            *((_QWORD *)v24 - 1) = v74;
            v24 -= 8;
          }
          while (v66 != (uint64_t *)v12);
        }
        v27 = (uint64_t *)a4[1];
        v28 = &v23[8 * v22];
        if (v27 == v19)
          goto LABEL_55;
      }
      else
      {
        v27 = (uint64_t *)v12;
        v28 = &v23[8 * v22];
        if ((uint64_t *)v12 == v19)
        {
LABEL_55:
          v83 = (void *)*a4;
          *a4 = (uint64_t)v24;
          a4[1] = (uint64_t)v25;
          a4[2] = (uint64_t)v28;
          a3 = v131;
          if (v83)
            operator delete(v83);
          goto LABEL_69;
        }
      }
      v75 = (unint64_t)v27 + -v12 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8;
      if (v75 < 0x18)
        goto LABEL_83;
      v76 = (v75 >> 3) + 1;
      v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
      v19 = (uint64_t *)((char *)v19 + v77);
      v25 += v77;
      v78 = &v23[8 * v133 + 16 + 8 * v16];
      v79 = (__int128 *)(8 * v133 + v12 + 16);
      v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v81 = *v79;
        *((_OWORD *)v78 - 1) = *(v79 - 1);
        *(_OWORD *)v78 = v81;
        v78 += 32;
        v79 += 2;
        v80 -= 4;
      }
      while (v80);
      if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_83:
        do
        {
          v82 = *v19++;
          *(_QWORD *)v25 = v82;
          v25 += 8;
        }
        while (v19 != v27);
      }
      goto LABEL_55;
    }
    v29 = v17 & 0xFFFFFFFFFFFFFFF8;
    v30 = -(uint64_t)(v17 & 0xFFFFFFFFFFFFFFF8);
    v31 = v30 >> 3;
    if (v30 >> 3 >= v16)
    {
      v32 = &a2[8 * v16];
      v33 = (_QWORD *)v12;
    }
    else
    {
      v32 = &a2[8 * v31];
      v33 = (_QWORD *)v12;
      if (v31 != a1)
      {
        v34 = v29 + 8 * a1 - 8;
        v35 = &a2[8 * v31];
        v33 = (_QWORD *)v12;
        if (v34 < 0x38)
          goto LABEL_84;
        v35 = &a2[8 * v31];
        v33 = (_QWORD *)v12;
        if (v29 - (_QWORD)a2 + v12 < 0x20)
          goto LABEL_84;
        v36 = (v34 >> 3) + 1;
        v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        v35 = &v32[v37];
        v33 = (_QWORD *)(v12 + v37);
        v38 = (_OWORD *)(v12 + 16);
        v39 = (__int128 *)&a2[8 * v31 + 16];
        v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v41 = *v39;
          *(v38 - 1) = *(v39 - 1);
          *v38 = v41;
          v38 += 2;
          v39 += 2;
          v40 -= 4;
        }
        while (v40);
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_84:
          do
          {
            v42 = *(_QWORD *)v35;
            v35 += 8;
            *v33++ = v42;
          }
          while (v35 != &a2[v15]);
        }
      }
      a4[1] = (uint64_t)v33;
      if (v30 < 1)
        goto LABEL_69;
    }
    v43 = (char *)&v19[v16];
    v44 = (char *)((char *)v33 - v43);
    v45 = ((char *)v33 - v43) >> 3;
    v46 = &v33[-v16];
    v47 = v33;
    if ((unint64_t)v46 < v12)
    {
      v48 = &v44[v17 & 0xFFFFFFFFFFFFFFF8];
      v49 = (unint64_t)&v48[v12 + 8];
      if (v12 > v49)
        v49 = v12;
      v50 = v49 + ~v12 - (_QWORD)v48;
      v51 = &v33[-v16];
      v47 = v33;
      if (v50 < 0x58)
        goto LABEL_85;
      v51 = &v33[-v16];
      v47 = v33;
      if ((unint64_t)&v43[-(v17 & 0xFFFFFFFFFFFFFFF8) - v12] < 0x20)
        goto LABEL_85;
      v52 = (v50 >> 3) + 1;
      v53 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      v51 = &v46[v53];
      v47 = &v33[v53];
      v54 = v33 + 2;
      v55 = (__int128 *)(8 * v45 + 8 * v18 + v12 + 16);
      v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v57 = *v55;
        *(v54 - 1) = *(v55 - 1);
        *v54 = v57;
        v54 += 2;
        v55 += 2;
        v56 -= 4;
      }
      while (v56);
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_85:
        do
        {
          v58 = *v51++;
          *v47++ = v58;
        }
        while ((unint64_t)v51 < v12);
      }
    }
    a4[1] = (uint64_t)v47;
    if (v33 != (_QWORD *)v43)
    {
      v59 = v44 - 8;
      if ((unint64_t)(v44 - 8) < 0x1A8
        || (_QWORD *)((char *)v33 - ((unint64_t)v59 & 0xFFFFFFFFFFFFFFF8) - 8) > v33 - 1
        || &v44[(v17 & 0xFFFFFFFFFFFFFFF8) - 8 + v12 - ((unint64_t)v59 & 0xFFFFFFFFFFFFFFF8)] > &v44[(v17 & 0xFFFFFFFFFFFFFFF8) - 8 + v12]
        || (unint64_t)(&v44[(v17 & 0xFFFFFFFFFFFFFFF8) + v12] - (char *)v33) < 0x20)
      {
        v60 = v33;
      }
      else
      {
        v84 = ((unint64_t)v59 >> 3) + 1;
        v85 = 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
        v60 = &v33[v85 / 0xFFFFFFFFFFFFFFF8];
        v46 = (uint64_t *)((char *)v46 - v85);
        v86 = (__int128 *)(8 * v45 + 8 * v18 + v12 - 16);
        v87 = v33 - 2;
        v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v89 = *v86;
          *(v87 - 1) = *(v86 - 1);
          *v87 = v89;
          v86 -= 2;
          v87 -= 2;
          v88 -= 4;
        }
        while (v88);
        if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_41;
      }
      v61 = v60 - 1;
      do
      {
        v62 = *--v46;
        *v61-- = v62;
      }
      while (v46 != v19);
    }
LABEL_41:
    v63 = v32 - a2;
    if (v32 == a2)
      goto LABEL_69;
    v64 = v63 - 8;
    if ((unint64_t)(v63 - 8) >= 0x38)
    {
      v65 = a2;
      if ((v17 & 0xFFFFFFFFFFFFFFF8) + v12 - (unint64_t)a2 >= 0x20)
      {
        v90 = (v64 >> 3) + 1;
        v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = (uint64_t *)((char *)v19 + v91);
        v65 = &a2[v91];
        v92 = (__int128 *)(a2 + 16);
        v93 = (_OWORD *)(v12 + 8 * v18 + 16);
        v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v95 = *v92;
          *(v93 - 1) = *(v92 - 1);
          *v93 = v95;
          v92 += 2;
          v93 += 2;
          v94 -= 4;
        }
        while (v94);
        if (v90 == (v90 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_69;
      }
    }
    else
    {
      v65 = a2;
    }
    do
    {
      v96 = *(_QWORD *)v65;
      v65 += 8;
      *v19++ = v96;
    }
    while (v65 != v32);
    goto LABEL_69;
  }
  if (v11 >> 61)
    sub_22316E078();
  v12 = (unint64_t)operator new(16 * a1);
  v13 = (char *)(v12 + 8 * v11);
  *a4 = v12;
  a4[1] = v12;
  a4[2] = (uint64_t)v13;
  v14 = v12;
  v15 = 8 * a1;
  if (8 * a1 >= 1)
    goto LABEL_6;
LABEL_69:
  v97 = a3[1];
  v98 = vmul_f32(vadd_f32(*a3, v97), (float32x2_t)0x3F0000003F000000);
  v99 = vsub_f32(v98, v97);
  v100 = v98.f32[1];
  v101 = v99.f32[1];
  v102 = v98.f32[1] + v99.f32[1];
  v103 = *a4;
  v104 = a4[1];
  v132 = vadd_f32(v98, v99);
  *(float32x2_t *)&v134 = vsub_f32(v98, v99);
  v135 = (unint64_t)v132;
  LODWORD(v136) = LODWORD(v134);
  *((float *)&v136 + 1) = v98.f32[1] + v99.f32[1];
  sub_223F26968((uint64_t *)v137, (v104 - v103) >> 3, v103, (float32x2_t *)&v135, *(double *)&v98, *(double *)&v99, *(double *)&v132, v134, a5, a6, a7);
  v111 = v100 - v101;
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v112 = *(_QWORD *)v137;
  *a4 = *(_QWORD *)v137;
  v113 = *(_QWORD *)&v137[8];
  *(_OWORD *)(a4 + 1) = *(_OWORD *)&v137[8];
  v135 = __PAIR64__(LODWORD(v102), LODWORD(v134));
  v136 = __PAIR64__(LODWORD(v111), LODWORD(v134));
  sub_223F26968((uint64_t *)v137, (v113 - v112) >> 3, v112, (float32x2_t *)&v135, v134, v105, v106, v107, v108, v109, v110);
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v120 = *(_QWORD *)v137;
  *a4 = *(_QWORD *)v137;
  v121 = *(_QWORD *)&v137[8];
  *(_OWORD *)(a4 + 1) = *(_OWORD *)&v137[8];
  v135 = __PAIR64__(LODWORD(v111), LODWORD(v134));
  v136 = __PAIR64__(LODWORD(v111), v132.u32[0]);
  sub_223F26968((uint64_t *)v137, (v121 - v120) >> 3, v120, (float32x2_t *)&v135, *(double *)&v132, v114, v115, v116, v117, v118, v119);
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  v128 = *(_QWORD *)v137;
  *a4 = *(_QWORD *)v137;
  v129 = *(_QWORD *)&v137[8];
  *(_OWORD *)(a4 + 1) = *(_OWORD *)&v137[8];
  v135 = __PAIR64__(LODWORD(v111), v132.u32[0]);
  v136 = (unint64_t)v132;
  sub_223F26968((uint64_t *)v137, (v129 - v128) >> 3, v128, (float32x2_t *)&v135, *(double *)&v132, v122, v123, v124, v125, v126, v127);
  if (*a4)
  {
    operator delete((void *)*a4);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  result = *(double *)v137;
  *(_OWORD *)a4 = *(_OWORD *)v137;
  a4[2] = *(_QWORD *)&v137[16];
  return result;
}

void sub_223F27BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223F27BD0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;

  v4 = (char *)*result;
  v3 = (char *)result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    *(_QWORD *)&v8 = operator new((unint64_t)v5 >> 1);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 4 * (v5 >> 3);
    v11 = &v8;
    do
    {
      v10 = *(_DWORD *)v4;
      result = sub_2233D7140((uint64_t *)&v11, &v10);
      v4 += 8;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_223F27C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223F27C9C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 *v11;

  v4 = *result;
  v3 = result[1];
  v9 = 0;
  v8 = 0uLL;
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0uLL;
  }
  else
  {
    if (v5 < 0)
      sub_22316E078();
    *(_QWORD *)&v8 = operator new((unint64_t)v5 >> 1);
    *((_QWORD *)&v8 + 1) = v8;
    v9 = v8 + 4 * (v5 >> 3);
    v11 = &v8;
    do
    {
      v10 = *(_DWORD *)(v4 + 4);
      result = sub_2233D7140((uint64_t *)&v11, &v10);
      v4 += 8;
    }
    while (v4 != v3);
    v6 = v8;
    v7 = v9;
  }
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_223F27D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223F27D68@<X0>(uint64_t *result@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x2_t *v4;
  float32x2_t *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int32 v12;
  __int128 *v13;

  v5 = (float32x2_t *)*result;
  v4 = (float32x2_t *)result[1];
  v11 = 0;
  v10 = 0uLL;
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    v9 = 0;
    v8 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_22316E078();
    *(_QWORD *)&v10 = operator new((unint64_t)v6 >> 1);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 4 * (v6 >> 3);
    v13 = &v10;
    do
    {
      v12 = vmla_lane_f32(vmul_f32(*v5, *a2), (float32x2_t)vdup_lane_s32((int32x2_t)*a2, 1), *v5, 1).u32[0];
      result = sub_2233D7140((uint64_t *)&v13, &v12);
      ++v5;
    }
    while (v5 != v4);
    v8 = v10;
    v9 = v11;
  }
  *(_OWORD *)a3 = v8;
  *(_QWORD *)(a3 + 16) = v9;
  return result;
}

void sub_223F27E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F27E50(float32x2_t *a1@<X0>, char **a2@<X1>, char **a3@<X8>, float a4@<S0>)
{
  char *v6;
  char *v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  BOOL v12;
  uint64_t v13;
  float *v14;
  float32x2_t v15;
  float *v16;
  __int128 v17;
  __int128 v18;
  float v19;
  char *v20;
  float *v21;
  float v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  float *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  float *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  float *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  char *v67;
  uint64_t v68;

  v7 = *a2;
  v6 = a2[1];
  v8 = fabsf(a1->f32[0]);
  v9 = a1->f32[0] != 0.0 && v8 > 0.000001;
  if (!v9 && ((v10 = a1->f32[1], v11 = fabsf(v10), v10 != 0.0) ? (v12 = v11 > 0.000001) : (v12 = 0), !v12) || v6 == v7)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  v13 = v6 - v7;
  if (v6 - v7 < 0)
    sub_22316E078();
  v14 = (float *)operator new((unint64_t)v13 >> 1);
  v16 = &v14[v13 >> 3];
  *(float32x2_t *)&v17 = *a1;
  *(int32x2_t *)&v18 = vdup_lane_s32((int32x2_t)*a1, 1);
  v19 = sqrtf(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v17, *(float32x2_t *)&v17), *(float32x2_t *)&v18, *a1, 1).f32[0]);
  v20 = &v7[8 * (v13 >> 3)];
  v21 = v14;
  v67 = v20;
  do
  {
    while (1)
    {
      LODWORD(v17) = *(_DWORD *)v7;
      LODWORD(v18) = *((_DWORD *)v7 + 1);
      v15.i32[0] = a1[1].i32[0];
      *(float32x2_t *)&v17 = vadd_f32(v15, vmla_lane_f32(vmul_f32(*a1, *(float32x2_t *)&v17), *(float32x2_t *)&v18, *a1, 1));
      v22 = *(float *)&v17 / v19;
      if (v14 >= v16)
        break;
      *v14++ = v22;
      v7 += 8;
      if (v7 == v20)
        goto LABEL_45;
    }
    v23 = v14 - v21;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62)
      sub_22316E078();
    if (((char *)v16 - (char *)v21) >> 1 > v24)
      v24 = ((char *)v16 - (char *)v21) >> 1;
    if ((unint64_t)((char *)v16 - (char *)v21) >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      if (v25 >> 62)
        sub_223174E94();
      v26 = operator new(4 * v25);
      v27 = (float *)&v26[4 * v23];
      *v27 = v22;
      v28 = (uint64_t)(v27 + 1);
      v29 = (char *)v14 - (char *)v21;
      if (v14 == v21)
        goto LABEL_29;
    }
    else
    {
      v26 = 0;
      v27 = (float *)(4 * v23);
      *(float *)(4 * v23) = v22;
      v28 = 4 * v23 + 4;
      v29 = (char *)v14 - (char *)v21;
      if (v14 == v21)
        goto LABEL_29;
    }
    v30 = v29 - 4;
    if (v30 < 0xBC)
    {
      v31 = v14;
      goto LABEL_28;
    }
    v33 = ((char *)(v14 - 1) - (char *)v21) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v26[(char *)v14 - (char *)v21 - 4 - v33] > &v26[(char *)v14 - (char *)v21 - 4])
    {
      v31 = v14;
      do
      {
LABEL_28:
        v32 = *((_DWORD *)v31-- - 1);
        *((_DWORD *)v27-- - 1) = v32;
      }
      while (v31 != v21);
      goto LABEL_29;
    }
    if ((float *)((char *)v14 - v33 - 4) > v14 - 1)
    {
      v31 = v14;
      goto LABEL_28;
    }
    if ((unint64_t)((char *)v21 - v26) < 0x20)
    {
      v31 = v14;
      goto LABEL_28;
    }
    v34 = (v30 >> 2) + 1;
    v35 = 4 * (v34 & 0x7FFFFFFFFFFFFFF8);
    v31 = &v14[v35 / 0xFFFFFFFFFFFFFFFCLL];
    v27 = (float *)((char *)v27 - v35);
    v36 = &v26[4 * v23 - 16];
    v37 = v14 - 4;
    v38 = v34 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v18 = *((_OWORD *)v37 - 1);
      v17 = *(_OWORD *)v37;
      *(v36 - 1) = v18;
      *v36 = v17;
      v36 -= 2;
      v37 -= 8;
      v38 -= 8;
    }
    while (v38);
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_28;
LABEL_29:
    v16 = (float *)&v26[4 * v25];
    if (v21)
      operator delete(v21);
    v21 = v27;
    v14 = (float *)v28;
    v20 = v67;
    v7 += 8;
  }
  while (v7 != v67);
LABEL_45:
  if (v21 == v14)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_83;
  }
  v39 = a2[1];
  v40 = 0;
  v41 = v39 - *a2;
  if (v39 == *a2)
  {
    *a3 = 0;
    a3[1] = 0;
    v14 = v21;
    a3[2] = 0;
    if (!v21)
      return;
LABEL_83:
    operator delete(v14);
    return;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = v41 >> 3;
  v68 = v47;
  while (2)
  {
    if (fabsf(v21[v46]) < a4)
    {
      if ((unint64_t)v45 < v44)
      {
        *(_QWORD *)v45 = v46;
        v45 += 8;
      }
      else
      {
        v48 = (v45 - v43) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          sub_22367C394();
        v50 = v44 - (_QWORD)v43;
        if (v50 >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 61)
            sub_223174E94();
          v52 = operator new(8 * v51);
          v42 = &v52[8 * v48];
          *(_QWORD *)v42 = v46;
          v53 = (uint64_t)(v42 + 8);
          v54 = v45 - v43;
          if (v45 == v43)
            goto LABEL_66;
        }
        else
        {
          v52 = 0;
          v42 = (char *)(8 * v48);
          *(_QWORD *)(8 * v48) = v46;
          v53 = 8 * v48 + 8;
          v54 = v45 - v43;
          if (v45 == v43)
            goto LABEL_66;
        }
        v55 = v54 - 8;
        if (v55 >= 0x168)
        {
          v58 = (v45 - 8 - v43) & 0xFFFFFFFFFFFFFFF8;
          if (&v52[v45 - v43 - 8 - v58] > &v52[v45 - v43 - 8])
          {
            v56 = v45;
          }
          else if (&v45[-v58 - 8] > v45 - 8)
          {
            v56 = v45;
          }
          else if ((unint64_t)(v43 - v52) >= 0x20)
          {
            v59 = (v55 >> 3) + 1;
            v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
            v56 = &v45[-v60];
            v42 -= v60;
            v61 = &v52[8 * v48 - 16];
            v62 = v45 - 16;
            v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v64 = *(_OWORD *)v62;
              *(v61 - 1) = *((_OWORD *)v62 - 1);
              *v61 = v64;
              v61 -= 2;
              v62 -= 32;
              v63 -= 4;
            }
            while (v63);
            if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_66;
          }
          else
          {
            v56 = v45;
          }
        }
        else
        {
          v56 = v45;
        }
        do
        {
          v57 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *((_QWORD *)v42 - 1) = v57;
          v42 -= 8;
        }
        while (v56 != v43);
LABEL_66:
        v40 = &v52[8 * v51];
        if (v43)
          operator delete(v43);
        v43 = v42;
        v44 = (unint64_t)v40;
        v45 = (char *)v53;
        v47 = v68;
      }
    }
    if (++v46 != v47)
      continue;
    break;
  }
  *a3 = v42;
  a3[1] = v45;
  v14 = v21;
  a3[2] = v40;
  if (v21)
    goto LABEL_83;
}

void sub_223F2837C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;

  operator delete(v18);
  if (v19)
    operator delete(v19);
  _Unwind_Resume(a1);
}

void sub_223F283E0(float32x2_t *a1@<X0>, uint64_t *a2@<X1>, char **a3@<X8>, float a4@<S0>)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  float v13;
  float v15;
  float v16;
  float32x2_t v18;
  uint64_t v19;
  float v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  int64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char **v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  void *__p[3];
  void *v69[3];
  char **v70;
  void **v71;
  __int128 v72;
  _QWORD *v73;

  v7 = a2[1];
  v8 = v7 - *a2;
  if (v8 <= 0xF)
  {
    if (*a2 == v7)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    if (v8 == 8)
    {
      v9 = operator new(8uLL);
      *v9 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v10 = (char *)operator new(0x18uLL);
      a3[2] = v10 + 24;
      *a3 = v10;
      a3[1] = v10;
      v69[0] = v10;
      __p[0] = v10;
      v70 = a3 + 2;
      v71 = __p;
      *(_QWORD *)&v72 = v69;
      BYTE8(v72) = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      v11 = operator new(8uLL);
      *(_QWORD *)v10 = v11;
      *v11++ = *v9;
      *((_QWORD *)v10 + 1) = v11;
      *((_QWORD *)v10 + 2) = v11;
      a3[1] = v10 + 24;
      v12 = v9;
LABEL_22:
      operator delete(v12);
      return;
    }
  }
  v13 = fabsf(a1->f32[0]);
  if (a1->f32[0] != 0.0 && v13 > 0.000001)
  {
    v15 = a1->f32[1];
    v16 = fabsf(v15);
    if (v15 != 0.0 && v16 > 0.000001)
    {
      v18 = vdiv_f32((float32x2_t)0x3F800000BF800000, *a1);
      v70 = (char **)vmul_n_f32(v18, 1.0/ sqrtf(vmla_lane_f32(vmul_f32(v18, v18), (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1), v18, 1).f32[0]));
      sub_223F27D68(a2, (float32x2_t *)&v70, (uint64_t)v69);
    }
    else
    {
      sub_223F27C9C(a2, (uint64_t)v69);
    }
  }
  else
  {
    sub_223F27BD0(a2, (uint64_t)v69);
  }
  sub_223F28A94((uint64_t *)v69, (uint64_t *)__p);
  v19 = *(_QWORD *)__p[0];
  v20 = *((float *)v69[0] + *(_QWORD *)__p[0]);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v70 = a3;
  LOBYTE(v71) = 0;
  v21 = (char *)operator new(0x18uLL);
  a3[2] = v21 + 24;
  v67 = a3 + 2;
  *a3 = v21;
  a3[1] = v21;
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *(_QWORD *)v21 = 0;
  v22 = operator new(8uLL);
  *(_QWORD *)v21 = v22;
  *v22++ = v19;
  *((_QWORD *)v21 + 1) = v22;
  *((_QWORD *)v21 + 2) = v22;
  a3[1] = v21 + 24;
  v23 = a2[1] - *a2;
  if (v23 != 8)
  {
    v24 = v23 >> 3;
    v25 = 1;
    v66 = v23 >> 3;
    while (1)
    {
      v27 = v20;
      v28 = *((_QWORD *)__p[0] + v25);
      v20 = *((float *)v69[0] + v28);
      v29 = a3[1];
      if (vabds_f32(v20, v27) > a4)
      {
        if ((unint64_t)v29 >= *v67)
        {
          v41 = *a3;
          v42 = 0xAAAAAAAAAAAAAAABLL * ((v29 - *a3) >> 3);
          v43 = v42 + 1;
          if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_22316E078();
          if (0x5555555555555556 * ((uint64_t)(*v67 - (_QWORD)v41) >> 3) > v43)
            v43 = 0x5555555555555556 * ((uint64_t)(*v67 - (_QWORD)v41) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v67 - (_QWORD)v41) >> 3) >= 0x555555555555555)
            v44 = 0xAAAAAAAAAAAAAAALL;
          else
            v44 = v43;
          v73 = a3 + 2;
          if (v44)
          {
            if (v44 > 0xAAAAAAAAAAAAAAALL)
              sub_223174E94();
            v45 = (char **)operator new(24 * v44);
          }
          else
          {
            v45 = 0;
          }
          v55 = (char *)&v45[3 * v42];
          v70 = v45;
          v71 = (void **)v55;
          v56 = (char *)&v45[3 * v44];
          *(_QWORD *)&v72 = v55;
          *((_QWORD *)&v72 + 1) = v56;
          *((_QWORD *)v55 + 1) = 0;
          *(_QWORD *)v55 = 0;
          *((_QWORD *)v55 + 2) = 0;
          v57 = operator new(8uLL);
          *(_QWORD *)v55 = v57;
          v58 = v55 + 24;
          *v57 = v28;
          *(int64x2_t *)(v55 + 8) = vdupq_n_s64((unint64_t)(v57 + 1));
          *(_QWORD *)&v72 = v55 + 24;
          if (v29 == v41)
          {
            *a3 = v55;
            a3[1] = v58;
            a3[2] = v56;
            v24 = v66;
          }
          else
          {
            v24 = v66;
            do
            {
              v59 = v55;
              *((_QWORD *)v55 - 2) = 0;
              *((_QWORD *)v55 - 1) = 0;
              v60 = *(_OWORD *)(v29 - 24);
              v29 -= 24;
              *(_OWORD *)(v55 - 24) = v60;
              v55 -= 24;
              *((_QWORD *)v59 - 1) = *((_QWORD *)v29 + 2);
              *(_QWORD *)v29 = 0;
              *((_QWORD *)v29 + 1) = 0;
              *((_QWORD *)v29 + 2) = 0;
            }
            while (v29 != v41);
            v29 = *a3;
            v61 = a3[1];
            *a3 = v55;
            v62 = (char *)v72;
            *(_OWORD *)(a3 + 1) = v72;
            v58 = v62;
            if (v61 != v29)
            {
              v63 = v61;
              do
              {
                v65 = (void *)*((_QWORD *)v63 - 3);
                v63 -= 24;
                v64 = v65;
                if (v65)
                {
                  *((_QWORD *)v61 - 2) = v64;
                  operator delete(v64);
                }
                v61 = v63;
              }
              while (v63 != v29);
            }
          }
          if (v29)
            operator delete(v29);
          a3[1] = v58;
        }
        else
        {
          *(_QWORD *)v29 = 0;
          *((_QWORD *)v29 + 1) = 0;
          *((_QWORD *)v29 + 2) = 0;
          v30 = operator new(8uLL);
          *(_QWORD *)v29 = v30;
          *v30++ = v28;
          *((_QWORD *)v29 + 1) = v30;
          *((_QWORD *)v29 + 2) = v30;
          a3[1] = v29 + 24;
          a3[1] = v29 + 24;
        }
        goto LABEL_27;
      }
      v32 = (char *)*((_QWORD *)v29 - 2);
      v31 = *((_QWORD *)v29 - 1);
      if ((unint64_t)v32 >= v31)
        break;
      *(_QWORD *)v32 = v28;
      v26 = (uint64_t)(v32 + 8);
LABEL_26:
      *((_QWORD *)v29 - 2) = v26;
LABEL_27:
      if (++v25 == v24)
        goto LABEL_18;
    }
    v33 = (char *)*((_QWORD *)v29 - 3);
    v34 = (v32 - v33) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      sub_22367C394();
    v36 = v31 - (_QWORD)v33;
    if (v36 >> 2 > v35)
      v35 = v36 >> 2;
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v35;
    if (v37)
    {
      if (v37 >> 61)
        sub_223174E94();
      v38 = operator new(8 * v37);
      v39 = &v38[8 * v34];
      *v39 = v28;
      v26 = (uint64_t)(v39 + 1);
      v40 = v32 - v33;
      if (v32 == v33)
        goto LABEL_58;
    }
    else
    {
      v38 = 0;
      v39 = (_QWORD *)(8 * v34);
      *(_QWORD *)(8 * v34) = v28;
      v26 = 8 * v34 + 8;
      v40 = v32 - v33;
      if (v32 == v33)
      {
LABEL_58:
        *((_QWORD *)v29 - 3) = v39;
        *((_QWORD *)v29 - 2) = v26;
        *((_QWORD *)v29 - 1) = &v38[8 * v37];
        if (v33)
          operator delete(v33);
        v24 = v66;
        goto LABEL_26;
      }
    }
    v46 = v40 - 8;
    if (v46 < 0x58)
      goto LABEL_80;
    if ((unint64_t)(v33 - v38) < 0x20)
      goto LABEL_80;
    v47 = (v46 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v49 = &v32[-v48];
    v39 = (_QWORD *)((char *)v39 - v48);
    v50 = &v38[8 * v34 - 16];
    v51 = v32 - 16;
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    v32 = v49;
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_80:
      do
      {
        v54 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *--v39 = v54;
      }
      while (v32 != v33);
    }
    goto LABEL_58;
  }
LABEL_18:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v12 = v69[0];
  if (v69[0])
  {
    v69[1] = v69[0];
    goto LABEL_22;
  }
}

void sub_223F28960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a10);
  sub_22324A4B0((uint64_t)va);
  v10[1] = v12;
  v14 = *v10;
  if (*v10)
  {
    if (v12 != v14)
    {
      v15 = v12;
      do
      {
        v17 = (void *)*(v15 - 3);
        v15 -= 3;
        v16 = v17;
        if (v17)
        {
          *(v12 - 2) = v16;
          operator delete(v16);
        }
        v12 = v15;
      }
      while (v15 != v14);
      v12 = *v10;
    }
    v10[1] = v14;
    operator delete(v12);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_223F289C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F289DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void **a18)
{
  uint64_t v18;
  uint64_t v19;
  void *v21;

  *(_QWORD *)(v18 + 8) = v19;
  sub_223E9C760(&a18);
  if (__p)
  {
    operator delete(__p);
    v21 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v21 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_223F28A94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int8 *v10;
  int64x2_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  int64x2_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t *v20[2];

  v4 = a1[1];
  v5 = v4 - *a1;
  if (v4 == *a1)
  {
    v10 = 0;
    v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_22367C394();
    v6 = (int64x2_t *)operator new(2 * v5);
    v7 = (uint64_t)v6;
    v8 = v5 >> 2;
    if ((unint64_t)v5 >= 0x10)
    {
      v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      v5 = (uint64_t)&v6->i64[v8 & 0xFFFFFFFFFFFFFFFCLL];
      v11 = (int64x2_t)xmmword_2245F5410;
      v12 = v6 + 1;
      v13 = vdupq_n_s64(2uLL);
      v14 = vdupq_n_s64(4uLL);
      v15 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v12[-1] = v11;
        *v12 = vaddq_s64(v11, v13);
        v11 = vaddq_s64(v11, v14);
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      goto LABEL_11;
    }
    v9 = 0;
    v5 = (uint64_t)v6;
    do
    {
      *(_QWORD *)v5 = v9;
      v5 += 8;
      ++v9;
LABEL_11:
      ;
    }
    while (v8 != v9);
    v10 = &v6->i8[8 * v8];
  }
  v16 = 126 - 2 * __clz((v5 - v7) >> 3);
  v20[0] = a1;
  v20[1] = (uint64_t *)&v19;
  if (v5 == v7)
    v17 = 0;
  else
    v17 = v16;
  result = sub_223F2975C(v7, (char *)v5, v20, v17, 1);
  *a2 = v7;
  a2[1] = v5;
  a2[2] = (uint64_t)v10;
  return result;
}

void sub_223F28BD8()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x223F28BE4);
  JUMPOUT(0x223F28BE8);
}

float64x2_t sub_223F28BF0@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, float64x2_t result@<Q0>)
{
  float64x2_t *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  int v12;
  float64x2_t *v13;
  double v14;
  double v15;
  BOOL v16;
  double v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float64x2_t v27;
  float64x2_t v28;
  double v33;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  float64_t v46;
  double v47;
  double v48;
  double v51;
  double v52;
  double v53;
  BOOL v54;
  _BOOL4 v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64_t *v59;
  double v60;
  float64x2_t *v61;
  double v62;
  float64x2_t *v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;

  v4 = a1 + 1;
  v5 = a1[1].f64[0];
  result.f64[0] = a1->f64[0];
  if (a1->f64[0] != v5)
  {
    v6 = result.f64[0] - v5;
    if (a1->f64[0] < v5)
      v6 = v5 - result.f64[0];
    if (v6 > 0.00000001)
      goto LABEL_9;
  }
  v7 = a1->f64[1];
  v8 = a1[1].f64[1];
  _NF = v7 < v8;
  if (v7 == v8)
    goto LABEL_11;
  v10 = v7 - v8;
  v11 = v8 - v7;
  if (!_NF)
    v11 = v10;
  if (v11 <= 0.00000001)
  {
LABEL_11:
    v12 = 1;
    v13 = a2 + 1;
    v14 = a2[1].f64[0];
    v15 = a2->f64[0];
    v16 = a2->f64[0] < v14;
    if (a2->f64[0] == v14)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v12 = 0;
    v13 = a2 + 1;
    v14 = a2[1].f64[0];
    v15 = a2->f64[0];
    v16 = a2->f64[0] < v14;
    if (a2->f64[0] == v14)
      goto LABEL_15;
  }
  v17 = v15 - v14;
  if (v16)
    v17 = v14 - v15;
  if (v17 <= 0.00000001)
  {
LABEL_15:
    v18 = a2->f64[1];
    v19 = a2[1].f64[1];
    v20 = v18 < v19;
    if (v18 != v19)
    {
      v21 = v18 - v19;
      v22 = v19 - v18;
      if (!v20)
        v22 = v21;
      if (v22 > 0.00000001)
        goto LABEL_19;
    }
    if (v12)
      goto LABEL_65;
    v35 = v5 - result.f64[0];
    v36 = a1->f64[1];
    v37 = a1[1].f64[1];
    v38 = v35 * (v36 - v18) - (result.f64[0] - v15) * (v37 - v36);
    v39 = *a1;
    result = a1[1];
    _D17 = vsubq_f64(result, *a1).f64[1];
    __asm { FMLA            D16, D17, V7.D[1] }
    v42 = v38 / sqrt(_D16);
    v43 = v42 == 0.0;
    if (v42 < 0.0)
      v42 = 0.0 - v42;
    if (!v43 && v42 > 0.00000001)
      goto LABEL_65;
    if (v39.f64[0] == v15)
    {
      if (v36 + -0.00000001 <= v18 && v18 <= v37 + 0.00000001)
        goto LABEL_60;
      if (v36 + 0.00000001 < v18)
        goto LABEL_65;
      result.f64[0] = a1[1].f64[1];
      v15 = a2->f64[1];
    }
    else
    {
      if (v39.f64[0] + -0.00000001 <= v15 && v15 <= result.f64[0] + 0.00000001)
        goto LABEL_60;
      if (v39.f64[0] + 0.00000001 < v15)
        goto LABEL_65;
    }
    result.f64[0] = result.f64[0] + -0.00000001;
    if (v15 < result.f64[0])
      goto LABEL_65;
LABEL_60:
    result = *a2;
    v65 = *v13;
    *(float64x2_t *)a3 = *a2;
    *(float64x2_t *)(a3 + 16) = v65;
    *(_BYTE *)(a3 + 32) = 1;
    return result;
  }
LABEL_19:
  if (v12)
  {
    v23 = a2->f64[1];
    v24 = a1->f64[1];
    v25 = a2[1].f64[1];
    v26 = (v14 - v15) * (v23 - v24) - (v15 - result.f64[0]) * (v25 - v23);
    v28 = *a2;
    v27 = a2[1];
    _D17 = vsubq_f64(v27, *a2).f64[1];
    __asm { FMLA            D16, D17, V7.D[1] }
    v33 = v26 / sqrt(_D16);
    _ZF = v33 == 0.0;
    if (v33 < 0.0)
      v33 = 0.0 - v33;
    if (!_ZF && v33 > 0.00000001)
      goto LABEL_65;
    if (v28.f64[0] == result.f64[0])
    {
      if (v23 + -0.00000001 > v24 || v24 > v25 + 0.00000001)
      {
        result.f64[0] = v23 + 0.00000001;
        if (v23 + 0.00000001 >= v24)
        {
          v27.f64[0] = a2[1].f64[1];
          result.f64[0] = a1->f64[1];
          goto LABEL_64;
        }
        goto LABEL_65;
      }
    }
    else if (v28.f64[0] + -0.00000001 > result.f64[0] || result.f64[0] > v27.f64[0] + 0.00000001)
    {
      if (v28.f64[0] + 0.00000001 >= result.f64[0])
      {
LABEL_64:
        if (result.f64[0] < v27.f64[0] + -0.00000001)
          goto LABEL_65;
        goto LABEL_66;
      }
LABEL_65:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return result;
    }
LABEL_66:
    result = *a1;
    v66 = *v4;
    *(float64x2_t *)a3 = *a1;
    *(float64x2_t *)(a3 + 16) = v66;
    *(_BYTE *)(a3 + 32) = 1;
    return result;
  }
  v44 = v5 - result.f64[0];
  v45 = a1->f64[1];
  v46 = result.f64[0] - v15;
  v47 = a1[1].f64[1] - v45;
  v48 = v44 * (v45 - a2->f64[1]) - v46 * v47;
  result = vsubq_f64(a1[1], *a1);
  _D7 = result.f64[1];
  __asm { FMLA            D5, D7, V0.D[1] }
  v51 = sqrt(_D5);
  v52 = v48 / v51;
  if (v48 / v51 < 0.0)
    v52 = 0.0 - v52;
  if (v48 / v51 != 0.0 && v52 > 0.00000001)
    goto LABEL_65;
  v53 = ((v45 - a2[1].f64[1]) * result.f64[0] - v47 * (a1->f64[0] - v14)) / v51;
  v54 = v53 == 0.0;
  if (v53 < 0.0)
    v53 = 0.0 - v53;
  if (!v54 && v53 > 0.00000001)
    goto LABEL_65;
  v55 = result.f64[0] == 0.0;
  result = vabsq_f64(result);
  if (result.f64[0] <= 0.00000001)
    v55 = 1;
  v56 = (v55 | vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)result, 1), result)).u32[0]) & 1;
  v57 = *a1;
  v70 = *v4;
  v71 = v57;
  if (*(double *)((unint64_t)&v71 & 0xFFFFFFFFFFFFFFF7 | (8 * v56)) > *(double *)((unint64_t)&v70 & 0xFFFFFFFFFFFFFFF7 | (8 * v56)))
  {
    result = *v4;
    v70 = *a1;
    v71 = result;
  }
  v58 = *a2;
  v68 = *v13;
  v69 = v58;
  v59 = (float64_t *)((unint64_t)&v69 | (8 * v56));
  result.f64[0] = *v59;
  if (*v59 > *(double *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFF7 | (8 * (v56 & 1))))
  {
    result = *v13;
    v68 = *a2;
    v69 = result;
    result.f64[0] = *v59;
  }
  v60 = *(double *)((unint64_t)&v70 | (8 * v56));
  if (v60 >= result.f64[0]
    && (v61 = &v68,
        v62 = *(double *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFF7 | (8 * (v56 & 1))),
        v63 = &v71,
        v64 = *(double *)((unint64_t)&v71 | (8 * v56)),
        v62 >= v64))
  {
    if (v64 <= result.f64[0])
      v63 = &v69;
    if (v60 < v62)
      v61 = &v70;
    result = *v63;
    v67 = *v61;
    *(float64x2_t *)a3 = *v63;
    *(float64x2_t *)(a3 + 16) = v67;
    *(_BYTE *)(a3 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  return result;
}

void sub_223F290C8(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>)
{
  double v4;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  double v12;
  double v13;
  char v15;
  double v16;
  double v17;
  double v18;
  float64x2_t v19;
  float64x2_t v23;
  double v24;
  float64_t v25;
  float64x2_t v26;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  _BOOL4 v34;
  double v35;
  double v36;
  double v37;
  double v38;
  _BOOL4 v39;
  BOOL v40;
  double v41;
  double v42;
  double v43;
  double v44;
  char v45;
  double v46;
  float64_t v48;
  double v49;
  float64_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  char v61;
  BOOL v62;
  float64x2_t v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  double v67;
  float64x2_t v68;
  unsigned __int8 v69;
  double v70;
  double v71;
  BOOL v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  int v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  BOOL v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  double v97;
  uint64_t v98;
  float64x2_t v99;
  float64x2_t v100;
  _QWORD v101[4];
  unsigned __int8 v102;

  v4 = a4.f64[0];
  v7 = a1->f64[0];
  v8 = a2->f64[0];
  if (a1->f64[0] == a2->f64[0])
  {
    v9 = a1->f64[1];
    v10 = a2->f64[1];
    if (v9 == v10)
    {
      a4.f64[0] = a1[1].f64[0];
      v11.f64[0] = a2[1].f64[0];
      if (a4.f64[0] == v11.f64[0])
      {
        v12 = a1[1].f64[1];
        v13 = a2[1].f64[1];
        if (v12 == v13)
        {
LABEL_12:
          v15 = 0;
          v16 = 0.0;
          v17 = 0.0;
          goto LABEL_42;
        }
      }
    }
  }
  a4.f64[0] = a1[1].f64[0];
  if (a4.f64[0] == v8)
  {
    v12 = a1[1].f64[1];
    v10 = a2->f64[1];
    v11.f64[0] = a2[1].f64[0];
    if (v12 == v10 && v7 == v11.f64[0])
    {
      v9 = a1->f64[1];
      v13 = a2[1].f64[1];
      if (v9 == v13)
        goto LABEL_12;
    }
    v18 = a2->f64[1];
  }
  else
  {
    v18 = a2->f64[1];
    v11.f64[0] = a2[1].f64[0];
  }
  v19 = *a1;
  a4 = a1[1];
  __asm { FMOV            V4.2D, #0.5 }
  v23 = vmulq_f64(vaddq_f64(*a1, a4), _Q4);
  v24 = a2[1].f64[1] - v18;
  v25 = (v11.f64[0] - v8) * (v18 - v23.f64[1]) - v24 * (v8 - v23.f64[0]);
  v26 = *a2;
  v11 = a2[1];
  _Q24 = vsubq_f64(v11, *a2);
  _D6 = _Q24.f64[1];
  __asm { FMLA            D4, D6, V24.D[1] }
  v29 = sqrt(_Q4.f64[0]);
  v30 = v25 / v29;
  v31 = v23.f64[0] + 10.0;
  v32 = v23.f64[1] + 10.0;
  v33 = vsubq_f64(a4, *a1);
  v34 = v33.f64[0] == 0.0;
  if (fabs(v33.f64[0]) <= 0.00000001)
    v34 = 1;
  v9 = a1->f64[1];
  v35 = fabs(v33.f64[1]);
  if (v34)
  {
    v36 = v23.f64[0];
    v37 = v23.f64[1] + 10.0;
  }
  else if (v33.f64[1] == 0.0 || v35 <= 0.00000001)
  {
    v36 = v23.f64[0] + 10.0;
    v37 = a1->f64[1];
  }
  else
  {
    v37 = v19.f64[1] + v33.f64[1] / v33.f64[0] * (v31 - v19.f64[0]);
    v36 = v23.f64[0] + 10.0;
  }
  v10 = a2->f64[1];
  v13 = a2[1].f64[1];
  v12 = a1[1].f64[1];
  v38 = ((v18 - v37) * _Q24.f64[0] - v24 * (v26.f64[0] - v36)) / v29;
  v39 = v33.f64[1] == 0.0;
  if (v35 <= 0.00000001)
    v39 = 1;
  v40 = v34 || v39;
  if (v39)
  {
    v41 = v23.f64[1];
  }
  else
  {
    v31 = a1->f64[0];
    v41 = v23.f64[1] + 10.0;
  }
  v42 = v19.f64[0] + v33.f64[0] / v33.f64[1] * (v32 - v19.f64[1]);
  if (v40)
  {
    v42 = v31;
    v32 = v41;
  }
  v43 = (_Q24.f64[0] * (v18 - v32) - v24 * (v26.f64[0] - v42)) / v29 - v30;
  if (v43 == 0.0
    || ((v44 = fabs(v43), v44 <= 0.00000001) ? (v45 = 1) : (v45 = v39),
        (v45 & 1) != 0
     || v38 - v30 != 0.0 && ((v46 = vabdd_f64(v38, v30), v46 > 0.00000001) ? (_NF = v46 < v44) : (_NF = 0), _NF)))
  {
    v15 = 0;
    v16 = (v38 - v30) / 10.0;
    v17 = v30 - v23.f64[0] * v16;
  }
  else
  {
    v16 = v43 / 10.0;
    v17 = v30 - v23.f64[1] * (v43 / 10.0);
    v15 = 1;
  }
LABEL_42:
  v48 = (v11.f64[0] - v8) * (v10 - v9);
  v49 = v13 - v10;
  v50 = v48 - (v8 - v7) * (v13 - v10);
  v51 = *a2;
  v52 = a2[1];
  _Q16 = vsubq_f64(v52, *a2);
  _D20 = _Q16.f64[1];
  __asm { FMLA            D18, D20, V16.D[1] }
  v56 = sqrt(_D18);
  v57 = v50 / v56;
  v58 = fabs(v50 / v56);
  if (v16 == 0.0 || fabs(v16) <= 0.00000001)
  {
    if (v58 > v4)
    {
LABEL_119:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      return;
    }
    if ((vmovn_s64(vceqq_f64(v51, v52)).u8[0] & 1) != 0
      || ((v69 = vmovn_s64(vcgtq_f64(v52, v51)).u8[0], *(_QWORD *)&v70 = *(_OWORD *)&vsubq_f64(v51, v52), (v69 & 1) == 0)
        ? (v71 = v70)
        : (v71 = _Q16.f64[0]),
          v71 <= 0.00000001))
    {
      a4.f64[0] = a2->f64[0];
    }
    else
    {
      v72 = v10 < v13;
      if (v10 == v13)
        goto LABEL_78;
      v73 = v10 - v13;
      if (v72)
        v73 = v49;
      if (v73 <= 0.00000001)
      {
LABEL_78:
        v9 = v10;
        v51.f64[0] = a1->f64[0];
        v12 = v10;
      }
      else
      {
        v74 = v49 / _Q16.f64[0];
        v75 = v10 - v51.f64[0] * v74;
        v76 = v74 * v74 + 1.0;
        v51.f64[0] = (v7 + v9 * v74 - v74 * v75) / v76;
        v9 = v75 + v74 * v51.f64[0];
        a4.f64[0] = (v74 * v12 + a4.f64[0] - v74 * v75) / v76;
        v12 = v75 + v74 * a4.f64[0];
      }
    }
    v99.f64[0] = v51.f64[0];
    v99.f64[1] = v9;
    v100.f64[0] = a4.f64[0];
    v100.f64[1] = v12;
    *(_QWORD *)&v78 = *(_OWORD *)&sub_223F28BF0(&v99, a2, (uint64_t)v101, a4);
    v81 = v102;
    if (!v102)
      goto LABEL_118;
LABEL_80:
    v82 = *(double *)v101;
    v78 = *(double *)&v101[1];
    v79 = *(double *)&v101[2];
    v80 = *(double *)&v101[3];
    goto LABEL_81;
  }
  v59 = ((v10 - v12) * _Q16.f64[0] - v49 * (v51.f64[0] - a4.f64[0])) / v56;
  v60 = fabs(v59);
  v61 = sub_223766150(a1, a2, (uint64_t)&v98, 0);
  v62 = v58 <= v4 || v60 <= v4;
  if (!v62 && (v61 & 1) == 0)
    goto LABEL_119;
  v63 = *a1;
  v64 = a1[1];
  v65 = -v4;
  v66 = *a1;
  if (v58 > v4)
  {
    if (v57 >= 0.0)
      v67 = v4;
    else
      v67 = -v4;
    v66.f64[0] = (v67 - v17) / v16;
    v68 = vsubq_f64(v64, v63);
    if ((v15 & 1) != 0)
    {
      if (v68.f64[1] == 0.0 || fabs(v68.f64[1]) <= 0.00000001)
      {
        v68.f64[0] = 0.0;
      }
      else if (v68.f64[0] == 0.0 || fabs(v68.f64[0]) <= 0.00000001)
      {
        v68.f64[0] = a1->f64[0];
      }
      else
      {
        v68.f64[0] = v63.f64[0] + (v66.f64[0] - v63.f64[1]) * (v68.f64[0] / v68.f64[1]);
      }
      v68.f64[1] = v66.f64[0];
      goto LABEL_98;
    }
    if (v68.f64[0] == 0.0 || fabs(v68.f64[0]) <= 0.00000001)
    {
      v68 = (float64x2_t)*(unint64_t *)&v66.f64[0];
LABEL_98:
      v66 = v68;
      goto LABEL_99;
    }
    v77 = a1->f64[1];
    if (v68.f64[1] != 0.0 && fabs(v68.f64[1]) > 0.00000001)
      v77 = v63.f64[1] + (v66.f64[0] - v63.f64[0]) * (v68.f64[1] / v68.f64[0]);
    v66.f64[1] = v77;
  }
LABEL_99:
  if (v60 > v4)
  {
    if (v59 >= 0.0)
      v65 = v4;
    v95.f64[0] = (v65 - v17) / v16;
    v96 = vsubq_f64(v64, v63);
    if ((v15 & 1) != 0)
    {
      if (v96.f64[1] == 0.0 || fabs(v96.f64[1]) <= 0.00000001)
      {
        v64.f64[0] = 0.0;
        v64.f64[1] = v95.f64[0];
      }
      else
      {
        if (v96.f64[0] != 0.0 && fabs(v96.f64[0]) > 0.00000001)
          v63.f64[0] = v63.f64[0] + (v95.f64[0] - v63.f64[1]) * (v96.f64[0] / v96.f64[1]);
        v63.f64[1] = v95.f64[0];
        v64 = v63;
      }
    }
    else if (v96.f64[0] == 0.0 || fabs(v96.f64[0]) <= 0.00000001)
    {
      v64 = (float64x2_t)*(unint64_t *)&v95.f64[0];
    }
    else
    {
      v97 = a1->f64[1];
      if (v96.f64[1] != 0.0 && fabs(v96.f64[1]) > 0.00000001)
        v97 = v63.f64[1] + (v95.f64[0] - v63.f64[0]) * (v96.f64[1] / v96.f64[0]);
      v95.f64[1] = v97;
      v64 = v95;
    }
  }
  v99 = v66;
  v100 = v64;
  *(_QWORD *)&v78 = *(_OWORD *)&sub_223F28BF0(a1, &v99, (uint64_t)v101, v66);
  v81 = v102;
  if (v102)
    goto LABEL_80;
LABEL_118:
  v82 = 0.0;
  if (!v81)
    goto LABEL_119;
LABEL_81:
  v83 = a1->f64[0];
  v84 = a1[1].f64[0];
  if (a1->f64[0] == v84
    || ((v85 = v84 - v83, a1->f64[0] >= v84) ? (v86 = v83 - v84) : (v86 = v84 - v83), v86 <= 0.00000001))
  {
    v79 = a1->f64[0];
  }
  else
  {
    v87 = a1->f64[1];
    v88 = a1[1].f64[1];
    v89 = v87 < v88;
    if (v87 == v88)
      goto LABEL_93;
    v90 = v87 - v88;
    v91 = v88 - v87;
    if (v89)
      v90 = v91;
    if (v90 <= 0.00000001)
    {
LABEL_93:
      v78 = a1->f64[1];
      v83 = v82;
      v80 = v78;
    }
    else
    {
      v92 = v91 / v85;
      v93 = v87 - v83 * v92;
      v94 = v92 * v92 + 1.0;
      v83 = (v82 + v78 * v92 - v92 * v93) / v94;
      v78 = v93 + v92 * v83;
      v79 = (v79 + v80 * v92 - v92 * v93) / v94;
      v80 = v93 + v92 * v79;
    }
  }
  *(double *)a3 = v83;
  *(double *)(a3 + 8) = v78;
  *(double *)(a3 + 16) = v79;
  *(double *)(a3 + 24) = v80;
  *(_BYTE *)(a3 + 32) = 1;
}

uint64_t sub_223F2975C(uint64_t result, char *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  float v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  uint64_t *v100;
  float v101;
  float v102;
  uint64_t *v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  uint64_t v127;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v85 = *((_QWORD *)a2 - 1);
        v86 = *v10;
        if (*(float *)(**a3 + 4 * v85) < *(float *)(**a3 + 4 * *v10))
        {
          *v10 = v85;
          *((_QWORD *)a2 - 1) = v86;
        }
        return result;
      case 3uLL:
        v87 = *v10;
        v88 = v10[1];
        v89 = **a3;
        v90 = *(float *)(v89 + 4 * v88);
        v91 = *(float *)(v89 + 4 * *v10);
        v92 = *((_QWORD *)a2 - 1);
        v93 = *(float *)(v89 + 4 * v92);
        if (v90 >= v91)
        {
          if (v93 < v90)
          {
            v10[1] = v92;
            *((_QWORD *)a2 - 1) = v88;
            v116 = *v10;
            v115 = v10[1];
            if (*(float *)(v89 + 4 * v115) < *(float *)(v89 + 4 * *v10))
            {
              *v10 = v115;
              v10[1] = v116;
            }
          }
        }
        else
        {
          if (v93 >= v90)
          {
            *v10 = v88;
            v10[1] = v87;
            v127 = *((_QWORD *)a2 - 1);
            if (*(float *)(v89 + 4 * v127) >= v91)
              return result;
            v10[1] = v127;
          }
          else
          {
            *v10 = v92;
          }
          *((_QWORD *)a2 - 1) = v87;
        }
        return result;
      case 4uLL:
        v94 = v10 + 1;
        v95 = v10[1];
        v96 = v10 + 2;
        v97 = v10[2];
        v98 = **a3;
        v99 = *(float *)(v98 + 4 * v95);
        v100 = (uint64_t *)*v10;
        v101 = *(float *)(v98 + 4 * *v10);
        v102 = *(float *)(v98 + 4 * v97);
        if (v99 >= v101)
        {
          if (v102 >= v99)
          {
LABEL_140:
            v95 = v97;
            v117 = *((_QWORD *)a2 - 1);
            if (*(float *)(v98 + 4 * v117) >= *(float *)(v98 + 4 * v95))
              return result;
LABEL_141:
            *v96 = v117;
            *((_QWORD *)a2 - 1) = v95;
            v123 = *v96;
            v124 = *v94;
            v125 = *(float *)(v98 + 4 * v123);
            if (v125 < *(float *)(v98 + 4 * v124))
            {
              v10[1] = v123;
              v10[2] = v124;
              v126 = *v10;
              if (v125 < *(float *)(v98 + 4 * *v10))
              {
                *v10 = v123;
                v10[1] = v126;
              }
            }
            return result;
          }
          *v94 = v97;
          *v96 = v95;
          v103 = v10;
          v104 = (uint64_t **)(v10 + 1);
          result = v95;
          if (v102 >= v101)
          {
LABEL_131:
            v117 = *((_QWORD *)a2 - 1);
            if (*(float *)(v98 + 4 * v117) >= *(float *)(v98 + 4 * v95))
              return result;
            goto LABEL_141;
          }
        }
        else
        {
          v103 = v10;
          v104 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v102 >= v99)
          {
            *v10 = v95;
            v10[1] = (uint64_t)v100;
            v103 = v10 + 1;
            v104 = (uint64_t **)(v10 + 2);
            result = (uint64_t)v100;
            if (v102 >= v101)
              goto LABEL_140;
          }
        }
        *v103 = v97;
        *v104 = v100;
        v95 = result;
        goto LABEL_131;
      case 5uLL:
        return (uint64_t)sub_223F2A3CC(v10, v10 + 1, v10 + 2, v10 + 3, (uint64_t *)a2 - 1, a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (uint64_t *)a2)
              return (uint64_t)sub_223F2A570((char *)v10, a2, a2, a3);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = **a3;
          v16 = *((_QWORD *)a2 - 1);
          v17 = *(float *)(v15 + 4 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 4 * *v10);
            v25 = *(float *)(v15 + 4 * *v14);
            if (v24 >= v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *((_QWORD *)a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 4 * *v10) < *(float *)(v15 + 4 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 < v24)
              {
                *v14 = v16;
                goto LABEL_31;
              }
              *v14 = v22;
              *v10 = v23;
              v40 = *((_QWORD *)a2 - 1);
              if (*(float *)(v15 + 4 * v40) < v25)
              {
                *v10 = v40;
LABEL_31:
                *((_QWORD *)a2 - 1) = v23;
              }
            }
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 4 * *v14);
          v21 = *(float *)(v15 + 4 * *v10);
          if (v20 >= v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *((_QWORD *)a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 4 * *v14) < *(float *)(v15 + 4 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *((_QWORD *)a2 - 1);
              if (*(float *)(v15 + 4 * v29) >= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *((_QWORD *)a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 4 * v33);
          v36 = *(float *)(v15 + 4 * v34);
          v37 = *((_QWORD *)a2 - 2);
          v38 = *(float *)(v15 + 4 * v37);
          if (v35 >= v36)
          {
            if (v38 < v35)
            {
              *v31 = v37;
              *((_QWORD *)a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 4 * *v31) < *(float *)(v15 + 4 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v42 = *((_QWORD *)a2 - 2);
              if (*(float *)(v15 + 4 * v42) >= v36)
                goto LABEL_37;
              *v31 = v42;
            }
            else
            {
              v10[1] = v37;
            }
            *((_QWORD *)a2 - 2) = v34;
          }
LABEL_37:
          v43 = &v10[v13];
          v46 = v43[1];
          v44 = v43 + 1;
          v45 = v46;
          v47 = v10[2];
          v48 = *(float *)(v15 + 4 * v46);
          v49 = *(float *)(v15 + 4 * v47);
          v50 = *((_QWORD *)a2 - 3);
          v51 = *(float *)(v15 + 4 * v50);
          if (v48 >= v49)
          {
            if (v51 < v48)
            {
              *v44 = v50;
              *((_QWORD *)a2 - 3) = v45;
              v52 = v10[2];
              if (*(float *)(v15 + 4 * *v44) < *(float *)(v15 + 4 * v52))
              {
                v10[2] = *v44;
                *v44 = v52;
              }
            }
          }
          else
          {
            if (v51 >= v48)
            {
              v10[2] = v45;
              *v44 = v47;
              v53 = *((_QWORD *)a2 - 3);
              if (*(float *)(v15 + 4 * v53) >= v49)
                goto LABEL_46;
              *v44 = v53;
            }
            else
            {
              v10[2] = v50;
            }
            *((_QWORD *)a2 - 3) = v47;
          }
LABEL_46:
          v54 = *v14;
          v55 = *v31;
          v56 = *(float *)(v15 + 4 * *v14);
          v57 = *(float *)(v15 + 4 * *v31);
          v58 = *v44;
          v59 = *(float *)(v15 + 4 * *v44);
          if (v56 < v57)
          {
            if (v59 >= v56)
            {
              *v31 = v54;
              *v14 = v55;
              v31 = v14;
              v54 = v58;
              if (v59 >= v57)
              {
                v60 = *v10;
                *v10 = v55;
                *v14 = v60;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v59 >= v56)
            goto LABEL_54;
          *v14 = v58;
          *v44 = v54;
          v44 = v14;
          v54 = v55;
          if (v59 < v57)
          {
LABEL_53:
            *v31 = v58;
            *v44 = v55;
LABEL_54:
            v61 = *v10;
            *v10 = v54;
            *v14 = v61;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v41 = *(float *)(v15 + 4 * v28);
            if (*(float *)(v15 + 4 * *(v10 - 1)) < v41)
              goto LABEL_56;
            if (v41 >= *(float *)(v15 + 4 * *((_QWORD *)a2 - 1)))
            {
              v77 = v10 + 1;
              do
              {
                v10 = v77;
                if (v77 >= (uint64_t *)a2)
                  break;
                ++v77;
              }
              while (v41 >= *(float *)(v15 + 4 * *v10));
            }
            else
            {
              do
              {
                v76 = v10[1];
                ++v10;
              }
              while (v41 >= *(float *)(v15 + 4 * v76));
            }
            v78 = (uint64_t *)a2;
            if (v10 < (uint64_t *)a2)
            {
              v78 = (uint64_t *)a2;
              do
                v79 = *--v78;
              while (v41 < *(float *)(v15 + 4 * v79));
            }
            if (v10 < v78)
            {
              v80 = *v10;
              v81 = *v78;
              do
              {
                *v10 = v81;
                *v78 = v80;
                do
                {
                  v82 = v10[1];
                  ++v10;
                  v80 = v82;
                }
                while (v41 >= *(float *)(v15 + 4 * v82));
                do
                {
                  v83 = *--v78;
                  v81 = v83;
                }
                while (v41 < *(float *)(v15 + 4 * v83));
              }
              while (v10 < v78);
            }
            v84 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v84;
            a5 = 0;
            *v84 = v28;
            continue;
          }
          v75 = *v10;
          *v10 = v58;
          *v14 = v75;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v41 = *(float *)(v15 + 4 * v28);
LABEL_56:
          v62 = 0;
          do
            v63 = v10[++v62];
          while (*(float *)(v15 + 4 * v63) < v41);
          v64 = &v10[v62];
          v65 = a2;
          if (v62 == 1)
          {
            v65 = a2;
            do
            {
              if (v64 >= (uint64_t *)v65)
                break;
              v67 = *((_QWORD *)v65 - 1);
              v65 -= 8;
            }
            while (*(float *)(v15 + 4 * v67) >= v41);
          }
          else
          {
            do
            {
              v66 = *((_QWORD *)v65 - 1);
              v65 -= 8;
            }
            while (*(float *)(v15 + 4 * v66) >= v41);
          }
          if (v64 >= (uint64_t *)v65)
          {
            v73 = v64 - 1;
            if (v64 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v68 = *(_QWORD *)v65;
            v69 = &v10[v62];
            v70 = (uint64_t *)v65;
            do
            {
              *v69 = v68;
              *v70 = v63;
              do
              {
                v71 = v69[1];
                ++v69;
                v63 = v71;
              }
              while (*(float *)(v15 + 4 * v71) < v41);
              do
              {
                v72 = *--v70;
                v68 = v72;
              }
              while (*(float *)(v15 + 4 * v72) >= v41);
            }
            while (v69 < v70);
            v73 = v69 - 1;
            if (v69 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v73;
          }
LABEL_74:
          *v73 = v28;
          if (v64 < (uint64_t *)v65)
            goto LABEL_77;
          v74 = sub_223F2A03C(v10, v73, a3);
          v10 = v73 + 1;
          result = sub_223F2A03C(v73 + 1, (uint64_t *)a2, a3);
          if (!(_DWORD)result)
          {
            if (v74)
              continue;
LABEL_77:
            result = sub_223F2975C(v9, v73, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v73 + 1;
            continue;
          }
          a2 = (char *)v73;
          if (v74)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
        {
          if (v10 != (uint64_t *)a2)
          {
            v105 = v10 + 1;
            if (v10 + 1 != (uint64_t *)a2)
            {
              v106 = **a3;
              v107 = 8;
              v108 = v10;
              do
              {
                v111 = *v108;
                v110 = v108[1];
                v108 = v105;
                v112 = *(float *)(v106 + 4 * v110);
                if (v112 < *(float *)(v106 + 4 * v111))
                {
                  v113 = v107;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v113) = v111;
                    v114 = v113 - 8;
                    if (v113 == 8)
                    {
                      v109 = v10;
                      goto LABEL_116;
                    }
                    v111 = *(uint64_t *)((char *)v10 + v113 - 16);
                    v113 -= 8;
                  }
                  while (v112 < *(float *)(v106 + 4 * v111));
                  v109 = (uint64_t *)((char *)v10 + v114);
LABEL_116:
                  *v109 = v110;
                }
                v105 = v108 + 1;
                v107 += 8;
              }
              while (v108 + 1 != (uint64_t *)a2);
            }
          }
        }
        else if (v10 != (uint64_t *)a2)
        {
          v118 = v10 + 1;
          if (v10 + 1 != (uint64_t *)a2)
          {
            v119 = **a3;
            do
            {
              v121 = *v9;
              v120 = v9[1];
              v9 = v118;
              v122 = *(float *)(v119 + 4 * v120);
              if (v122 < *(float *)(v119 + 4 * v121))
              {
                do
                {
                  *v118 = v121;
                  v121 = *(v118 - 2);
                  --v118;
                }
                while (v122 < *(float *)(v119 + 4 * v121));
                *v118 = v120;
              }
              v118 = v9 + 1;
            }
            while (v9 + 1 != (uint64_t *)a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_223F2A03C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(a2 - 1);
      v15 = *a1;
      if (*(float *)(**a3 + 4 * v14) >= *(float *)(**a3 + 4 * *a1))
        return 1;
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      v16 = *a1;
      v17 = a1[1];
      v18 = **a3;
      v19 = *(float *)(v18 + 4 * v17);
      v20 = *(float *)(v18 + 4 * *a1);
      v21 = *(a2 - 1);
      v22 = *(float *)(v18 + 4 * v21);
      if (v19 >= v20)
      {
        if (v22 >= v19)
          return 1;
        a1[1] = v21;
        *(a2 - 1) = v17;
        v44 = *a1;
        v43 = a1[1];
        if (*(float *)(v18 + 4 * v43) >= *(float *)(v18 + 4 * *a1))
          return 1;
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 >= v19)
      {
        *a1 = v17;
        a1[1] = v16;
        v50 = *(a2 - 1);
        if (*(float *)(v18 + 4 * v50) >= v20)
          return 1;
        a1[1] = v50;
        *(a2 - 1) = v16;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v16;
        return 1;
      }
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = **a3;
      v28 = *(float *)(v27 + 4 * v24);
      v29 = *a1;
      v30 = *(float *)(v27 + 4 * *a1);
      v31 = *(float *)(v27 + 4 * v26);
      if (v28 < v30)
      {
        v32 = a1;
        v33 = a1 + 2;
        v34 = *a1;
        if (v31 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          v32 = a1 + 1;
          v33 = a1 + 2;
          v34 = v29;
          if (v31 >= v30)
            goto LABEL_38;
        }
LABEL_35:
        *v32 = v26;
        *v33 = v29;
        v24 = v34;
LABEL_36:
        v45 = *(a2 - 1);
        if (*(float *)(v27 + 4 * v45) >= *(float *)(v27 + 4 * v24))
          return 1;
        goto LABEL_39;
      }
      if (v31 < v28)
      {
        *v23 = v26;
        *v25 = v24;
        v32 = a1;
        v33 = a1 + 1;
        v34 = v24;
        if (v31 >= v30)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v24 = v26;
      v45 = *(a2 - 1);
      if (*(float *)(v27 + 4 * v45) >= *(float *)(v27 + 4 * v24))
        return 1;
LABEL_39:
      *v25 = v45;
      *(a2 - 1) = v24;
      v46 = *v25;
      v47 = *v23;
      v48 = *(float *)(v27 + 4 * v46);
      if (v48 >= *(float *)(v27 + 4 * v47))
        return 1;
      a1[1] = v46;
      a1[2] = v47;
      v49 = *a1;
      if (v48 >= *(float *)(v27 + 4 * *a1))
        return 1;
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_223F2A3CC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = **a3;
      v8 = *(float *)(v7 + 4 * v6);
      v9 = *a1;
      v10 = *(float *)(v7 + 4 * *a1);
      v11 = *(float *)(v7 + 4 * v4);
      if (v8 >= v10)
      {
        if (v11 >= v8 || (a1[1] = v4, *v5 = v6, v12 = a1, v13 = a1 + 1, v11 >= v10))
        {
LABEL_20:
          v35 = a1 + 3;
          if (a1 + 3 == a2)
            return 1;
          v36 = 0;
          for (i = 24; ; i += 8)
          {
            v38 = *v35;
            v39 = *v5;
            v40 = *(float *)(v7 + 4 * *v35);
            if (v40 < *(float *)(v7 + 4 * v39))
              break;
LABEL_23:
            v5 = v35++;
            if (v35 == a2)
              return 1;
          }
          v41 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v41) = v39;
            v42 = v41 - 8;
            if (v41 == 8)
            {
              *a1 = v38;
              if (++v36 != 8)
                goto LABEL_23;
              return v35 + 1 == a2;
            }
            v39 = *(uint64_t *)((char *)a1 + v41 - 16);
            v41 -= 8;
          }
          while (v40 < *(float *)(v7 + 4 * v39));
          *(uint64_t *)((char *)a1 + v42) = v38;
          if (++v36 != 8)
            goto LABEL_23;
          return v35 + 1 == a2;
        }
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_20;
        }
      }
      *v12 = v4;
      *v13 = v9;
      goto LABEL_20;
  }
}

uint64_t *sub_223F2A3CC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *a2;
  v7 = *result;
  v8 = **a6;
  v9 = *(float *)(v8 + 4 * *a2);
  v10 = *(float *)(v8 + 4 * *result);
  v11 = *a3;
  v12 = *(float *)(v8 + 4 * *a3);
  if (v9 >= v10)
  {
    if (v12 >= v9)
    {
      v6 = *a3;
      v14 = *a4;
      if (*(float *)(v8 + 4 * *a4) >= *(float *)(v8 + 4 * v11))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v11;
    *a3 = v6;
    v13 = *result;
    if (*(float *)(v8 + 4 * *a2) < *(float *)(v8 + 4 * *result))
    {
      *result = *a2;
      *a2 = v13;
      v6 = *a3;
      v14 = *a4;
      if (*(float *)(v8 + 4 * *a4) >= *(float *)(v8 + 4 * *a3))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 >= v9)
    {
      *result = v6;
      *a2 = v7;
      v6 = *a3;
      if (*(float *)(v8 + 4 * *a3) >= v10)
        goto LABEL_11;
      *a2 = v6;
    }
    else
    {
      *result = v11;
    }
    *a3 = v7;
    v6 = v7;
  }
LABEL_11:
  v14 = *a4;
  if (*(float *)(v8 + 4 * *a4) >= *(float *)(v8 + 4 * v6))
    goto LABEL_17;
LABEL_14:
  *a3 = v14;
  *a4 = v6;
  v15 = *a2;
  if (*(float *)(v8 + 4 * *a3) < *(float *)(v8 + 4 * *a2))
  {
    *a2 = *a3;
    *a3 = v15;
    v16 = *result;
    if (*(float *)(v8 + 4 * *a2) < *(float *)(v8 + 4 * *result))
    {
      *result = *a2;
      *a2 = v16;
    }
  }
LABEL_17:
  v17 = *a4;
  if (*(float *)(v8 + 4 * *a5) < *(float *)(v8 + 4 * *a4))
  {
    *a4 = *a5;
    *a5 = v17;
    v18 = *a3;
    if (*(float *)(v8 + 4 * *a4) < *(float *)(v8 + 4 * *a3))
    {
      *a3 = *a4;
      *a4 = v18;
      v19 = *a2;
      if (*(float *)(v8 + 4 * *a3) < *(float *)(v8 + 4 * *a2))
      {
        *a2 = *a3;
        *a3 = v19;
        v20 = *result;
        if (*(float *)(v8 + 4 * *a2) < *(float *)(v8 + 4 * *result))
        {
          *result = *a2;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

char *sub_223F2A570(char *a1, char *a2, char *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  float v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  char *v39;
  int64_t v41;
  uint64_t *v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  if (a1 == a2)
    return a3;
  v4 = a2 - a1;
  v5 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9 && (unint64_t)v4 >= 0x10)
  {
    v41 = (unint64_t)(v5 - 2) >> 1;
    v42 = *a4;
    v43 = v41;
    do
    {
      if (v41 >= v43)
      {
        v44 = (2 * v43) | 1;
        v45 = &a1[8 * v44];
        v46 = *v42;
        if (2 * v43 + 2 < v5 && *(float *)(v46 + 4 * *(_QWORD *)v45) < *(float *)(v46 + 4 * *((_QWORD *)v45 + 1)))
        {
          v45 += 8;
          v44 = 2 * v43 + 2;
        }
        v47 = &a1[8 * v43];
        v48 = *(_QWORD *)v45;
        v49 = *(_QWORD *)v47;
        v50 = *(float *)(v46 + 4 * *(_QWORD *)v47);
        if (*(float *)(v46 + 4 * *(_QWORD *)v45) >= v50)
        {
          do
          {
            v51 = v45;
            *(_QWORD *)v47 = v48;
            if (v41 < v44)
              break;
            v52 = 2 * v44;
            v44 = (2 * v44) | 1;
            v45 = &a1[8 * v44];
            v53 = v52 + 2;
            if (v53 < v5 && *(float *)(v46 + 4 * *(_QWORD *)v45) < *(float *)(v46 + 4 * *((_QWORD *)v45 + 1)))
            {
              v45 += 8;
              v44 = v53;
            }
            v48 = *(_QWORD *)v45;
            v47 = v51;
          }
          while (*(float *)(v46 + 4 * *(_QWORD *)v45) >= v50);
          *(_QWORD *)v51 = v49;
        }
      }
      v24 = v43-- <= 0;
    }
    while (!v24);
  }
  v6 = a2;
  if (a2 != a3)
  {
    v7 = **a4;
    if (v4 < 16)
    {
      v8 = *(_QWORD *)a1;
      v9 = a2;
      do
      {
        v10 = *(_QWORD *)v9;
        if (*(float *)(v7 + 4 * *(_QWORD *)v9) < *(float *)(v7 + 4 * v8))
        {
          *(_QWORD *)v9 = v8;
          *(_QWORD *)a1 = v10;
          v8 = v10;
        }
        v9 += 8;
      }
      while (v9 != a3);
LABEL_25:
      v6 = a3;
      goto LABEL_26;
    }
    v11 = (uint64_t *)(a1 + 8);
    v12 = (uint64_t *)(a1 + 16);
    v13 = a2;
    while (1)
    {
      v14 = *(_QWORD *)v13;
      v15 = *(float *)(v7 + 4 * *(_QWORD *)v13);
      if (v15 < *(float *)(v7 + 4 * *(_QWORD *)a1))
      {
        *(_QWORD *)v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = v14;
        if (v4 == 16 || *(float *)(v7 + 4 * *v11) >= *(float *)(v7 + 4 * *v12))
        {
          v16 = a1 + 8;
          v17 = 1;
          v18 = *v11;
          if (*(float *)(v7 + 4 * *v11) >= v15)
          {
LABEL_19:
            v19 = a1;
            do
            {
              v20 = v16;
              *(_QWORD *)v19 = v18;
              if ((uint64_t)((unint64_t)(v5 - 2) >> 1) < v17)
                break;
              v21 = 2 * v17;
              v17 = (2 * v17) | 1;
              v16 = &a1[8 * v17];
              v22 = v21 + 2;
              if (v22 < v5 && *(float *)(v7 + 4 * *(_QWORD *)v16) < *(float *)(v7 + 4 * *((_QWORD *)v16 + 1)))
              {
                v16 += 8;
                v17 = v22;
              }
              v18 = *(_QWORD *)v16;
              v19 = v20;
            }
            while (*(float *)(v7 + 4 * *(_QWORD *)v16) >= v15);
            *(_QWORD *)v20 = v14;
          }
        }
        else
        {
          v16 = a1 + 16;
          v17 = 2;
          v18 = *v12;
          if (*(float *)(v7 + 4 * *v12) >= v15)
            goto LABEL_19;
        }
      }
      v13 += 8;
      if (v13 == a3)
        goto LABEL_25;
    }
  }
LABEL_26:
  if (v4 >= 9)
  {
    v23 = (unint64_t)v4 >> 3;
    do
    {
      v25 = 0;
      v26 = *(_QWORD *)a1;
      v27 = *a4;
      v28 = a1;
      do
      {
        v29 = v28;
        v28 += 8 * v25 + 8;
        v30 = 2 * v25;
        v25 = (2 * v25) | 1;
        v31 = v30 + 2;
        if (v31 < v23 && *(float *)(*v27 + 4 * *(_QWORD *)v28) < *(float *)(*v27 + 4 * *((_QWORD *)v28 + 1)))
        {
          v28 += 8;
          v25 = v31;
        }
        *(_QWORD *)v29 = *(_QWORD *)v28;
      }
      while (v25 <= (uint64_t)((unint64_t)(v23 - 2) >> 1));
      a2 -= 8;
      if (v28 == a2)
      {
        *(_QWORD *)v28 = v26;
      }
      else
      {
        *(_QWORD *)v28 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v26;
        v32 = v28 - a1 + 8;
        if (v32 >= 9)
        {
          v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
          v34 = &a1[8 * v33];
          v35 = *(_QWORD *)v34;
          v36 = *(_QWORD *)v28;
          v37 = *v27;
          v38 = *(float *)(v37 + 4 * *(_QWORD *)v28);
          if (*(float *)(v37 + 4 * *(_QWORD *)v34) < v38)
          {
            do
            {
              v39 = v34;
              *(_QWORD *)v28 = v35;
              if (!v33)
                break;
              v33 = (v33 - 1) >> 1;
              v34 = &a1[8 * v33];
              v35 = *(_QWORD *)v34;
              v28 = v39;
            }
            while (*(float *)(v37 + 4 * *(_QWORD *)v34) < v38);
            *(_QWORD *)v39 = v36;
          }
        }
      }
      v24 = v23-- <= 2;
    }
    while (!v24);
  }
  return v6;
}

uint64_t sub_223F2A93C@<X0>(int32x2_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q1>, float32x4_t a5@<Q3>)
{
  float32x2_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t result;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float v16;
  float v17;
  float v18;
  int8x16_t v19;
  float v20;
  int8x16_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int32x2_t v26;
  int32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  float v38;
  float v39;
  int8x16_t v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int32 v55;
  uint64_t v56;
  __int32 v57;
  char v58;
  _BYTE v59[20];
  float v60;
  _BYTE v61[24];

  *(_OWORD *)v61 = xmmword_2245C76E0;
  v7.i32[1] = 1065353216;
  *(_QWORD *)&v61[16] = 0x3F80000000000000;
  v7.i32[0] = a1[1].i32[0];
  *(int32x2_t *)a4.f32 = *a1;
  v8 = a4;
  v8.i32[2] = v7.i32[0];
  *(int32x2_t *)a5.f32 = vdup_lane_s32(*a1, 1);
  a4.i32[0] = 1.0;
  v9 = vmulq_n_f32(v8, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32), *(float32x2_t *)a5.f32, (float32x2_t)*a1, 1), v7, v7).f32[0]));
  *(_QWORD *)v59 = 0;
  *(_DWORD *)&v59[8] = 0;
  v60 = v9.f32[2];
  *(_QWORD *)&v59[12] = v9.i64[0];
  LODWORD(v54) = 897988541;
  result = sub_223F064FC((float *)((unint64_t)v59 | 0xC), (float *)((unint64_t)v61 | 0xC), (float *)&v54, *(double *)v9.i64, *(double *)a4.i64, *(double *)v8.i64, a5);
  if ((result & 1) != 0)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v11.i64[0] = *(_QWORD *)&v59[12];
  v13 = v11;
  *(float *)&v13.i32[2] = v60;
  v12.i64[0] = *(_QWORD *)&v61[12];
  v14 = v12;
  v14.i32[2] = *(_DWORD *)&v61[20];
  v15 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v13, v13, 0xCuLL), v13, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), v13, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v14, v14, 0xCuLL), v14, 8uLL));
  v16 = fabsf(*(float *)v15.i32);
  v17 = fabsf(*(float *)&v15.i32[1]);
  v18 = fabsf(*(float *)&v15.i32[2]);
  if (v16 <= v17)
  {
    if (v17 > v18)
    {
      v19 = *(int8x16_t *)v59;
      v24 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v59), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59, 1), *(float32x2_t *)v13.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0];
      v21 = *(int8x16_t *)v61;
      v25 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v61), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61, 1), *(float32x2_t *)v14.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
      v23 = (float)((float)(*(float *)&v61[12] * v24) - (float)(*(float *)&v59[12] * v25)) / *(float *)&v15.i32[1];
      v14.i32[1] = 0;
      v14.i32[3] = 0;
      *(float *)v14.i32 = (float)((float)(v60 * v25) - (float)(*(float *)&v61[20] * v24)) / *(float *)&v15.i32[1];
      goto LABEL_8;
    }
LABEL_9:
    v19 = *(int8x16_t *)v59;
    v26 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v59), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59, 1), *(float32x2_t *)v13.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
    v21 = *(int8x16_t *)v61;
    v27 = (int32x2_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v61), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61, 1), *(float32x2_t *)v14.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
    *(float32x2_t *)v14.i8 = vdiv_f32(vsub_f32(vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v13.i8, 4uLL), (float32x2_t)vzip1_s32(v26, v27)), vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v14.i8, 4uLL), (float32x2_t)vzip1_s32(v27, v26))), (float32x2_t)vdup_laneq_s32((int32x4_t)v15, 2));
    goto LABEL_10;
  }
  if (v16 <= v18)
    goto LABEL_9;
  v19 = *(int8x16_t *)v59;
  v20 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v13.i8, *(float32x2_t *)v59), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v59, 1), *(float32x2_t *)v13.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)).f32[0];
  v21 = *(int8x16_t *)v61;
  v22 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v14.i8, *(float32x2_t *)v61), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61, 1), *(float32x2_t *)v14.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)).f32[0];
  v23 = (float)((float)(*(float *)&v59[16] * v22) - (float)(*(float *)&v61[16] * v20)) / *(float *)v15.i32;
  v14.i32[0] = 0;
  v14.i32[3] = 0;
  *(float *)&v14.i32[1] = (float)((float)(*(float *)&v61[20] * v20) - (float)(v60 * v22)) / *(float *)v15.i32;
LABEL_8:
  *(float *)&v14.i32[2] = v23;
LABEL_10:
  v28 = vaddq_f32((float32x4_t)v21, (float32x4_t)v19);
  v29.i64[0] = 0x3F0000003F000000;
  v29.i64[1] = 0x3F0000003F000000;
  v30 = (int8x16_t)vmlaq_f32(vnegq_f32((float32x4_t)v14), v28, v29);
  v31 = (int8x16_t)vsubq_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)v14), (float32x4_t)v14);
  v29.i64[0] = vextq_s8(v31, v31, 8uLL).u64[0];
  LODWORD(v32) = vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v30.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), *(float32x2_t *)v31.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), *(float32x2_t *)v29.f32), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v31.i8, *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1), *(float32x2_t *)v31.i8, 1), *(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32)).u32[0];
  *(int32x2_t *)v29.f32 = vdup_lane_s32(*(int32x2_t *)v15.i8, 1);
  v30.i64[0] = vextq_s8(v15, v15, 8uLL).u64[0];
  v29.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v15.i8), *(float32x2_t *)v29.f32, *(float32x2_t *)v15.i8, 1), *(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8).f32[0]);
  v29.f32[0] = v29.f32[0] + v29.f32[0];
  v33 = vmlaq_n_f32((float32x4_t)v14, (float32x4_t)v31, v32);
  v34 = vdivq_f32((float32x4_t)v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0));
  v35 = vsubq_f32(v33, v34);
  v36 = vaddq_f32(v34, v33);
  v55 = v35.i32[2];
  v54 = v35.i64[0];
  v57 = v36.i32[2];
  v56 = v36.i64[0];
  v58 = 1;
  v37 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v37 + 72))(v37, &v54, &v53);
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)v37 + 72))(v37, (unint64_t)&v54 | 0xC, &v52);
  if (*(float *)&v53 == *(float *)&v52)
    goto LABEL_20;
  v38 = *(float *)&v53 - *(float *)&v52;
  if (*(float *)&v53 < *(float *)&v52)
    v38 = *(float *)&v52 - *(float *)&v53;
  if (v38 <= 0.000001)
  {
LABEL_20:
    v46.i64[0] = COERCE_UNSIGNED_INT(1.0);
    v46.f32[2] = -*(float *)&v53;
    if (1.0 == 0.0)
      goto LABEL_28;
  }
  else
  {
    if (*((float *)&v53 + 1) == *((float *)&v52 + 1))
      goto LABEL_27;
    v39 = *((float *)&v53 + 1) - *((float *)&v52 + 1);
    if (*((float *)&v53 + 1) < *((float *)&v52 + 1))
      v39 = *((float *)&v52 + 1) - *((float *)&v53 + 1);
    if (v39 <= 0.000001)
    {
LABEL_27:
      v46.i32[1] = 1.0;
      v46.f32[2] = -*((float *)&v53 + 1);
      goto LABEL_28;
    }
    __asm { FMOV            V4.4S, #1.0 }
    v45.i64[1] = _Q4.i64[1];
    v45.i64[0] = v53;
    _Q4.i64[0] = v52;
    v46 = vsubq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v45, v45, 0xCuLL), v45, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), _Q4, 0xCuLL)), vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(_Q4, _Q4, 0xCuLL), _Q4, 8uLL)));
    if (v46.f32[0] == 0.0)
      goto LABEL_28;
  }
  if (fabsf(v46.f32[0]) > 0.000001)
  {
    if (v46.f32[1] == 0.0 || fabsf(v46.f32[1]) <= 0.000001)
    {
      v51 = (float)-v46.f32[2] / v46.f32[0];
      v48 = (float)a2[23];
      v50 = 0.0;
      v49 = v51;
    }
    else
    {
      v47 = -v46.f32[2];
      if (fabsf(v46.f32[0] / v46.f32[1]) <= 1.0)
      {
        v51 = (float)a2[22];
        v50 = v47 / v46.f32[1];
        v49 = 0.0;
        v48 = (float)(v46.f32[2] + (float)(v46.f32[0] * v51)) / (float)-v46.f32[1];
      }
      else
      {
        v48 = (float)a2[23];
        v49 = v47 / v46.f32[0];
        v50 = 0.0;
        v51 = (float)(v46.f32[2] + (float)(v46.f32[1] * v48)) / (float)-v46.f32[0];
      }
    }
    goto LABEL_30;
  }
LABEL_28:
  v48 = (float)-v46.f32[2] / v46.f32[1];
  v51 = (float)a2[22];
  v49 = 0.0;
  v50 = v48;
LABEL_30:
  *(_QWORD *)a3 = LODWORD(v49) | ((unint64_t)LODWORD(v50) << 32);
  *(_QWORD *)(a3 + 8) = LODWORD(v51) | ((unint64_t)LODWORD(v48) << 32);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_223F2AE6C(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v3;
  unint64_t v6;
  size_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v3 = a2;
  v6 = (unint64_t)a2 >> 61;
  v7 = 8 * (_QWORD)a2;
  if (!a2)
  {
    v9 = 0;
    v8 = 0;
    v10 = *(_QWORD **)a1;
    v11 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 == v11)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v6)
    sub_22367C394();
  v8 = (char *)operator new(8 * (_QWORD)a2);
  v9 = &v8[8 * (_QWORD)v3];
  bzero(v8, v7);
  v10 = *(_QWORD **)a1;
  v11 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v11)
  {
    do
    {
LABEL_6:
      v12 = v10[1];
      v13 = v10[2];
      ++*(_QWORD *)&v8[8 * *v10];
      ++*(_QWORD *)&v8[8 * v12];
      ++*(_QWORD *)&v8[8 * v13];
      v10 += 10;
    }
    while (v10 != v11);
  }
LABEL_7:
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!v3)
  {
    v14 = 0;
    v15 = v9 - v8;
    if (v9 != v8)
      goto LABEL_10;
LABEL_19:
    v17 = 0;
    v19 = (v3 - v14) >> 3;
    goto LABEL_20;
  }
  if (v6)
    sub_22367C394();
  v14 = (char *)operator new(v7);
  *a3 = v14;
  v3 = &v14[8 * (_QWORD)v3];
  a3[2] = v3;
  bzero(v14, v7);
  a3[1] = v3;
  v15 = v9 - v8;
  if (v9 == v8)
    goto LABEL_19;
LABEL_10:
  v16 = 0;
  v17 = 0;
  v18 = v15 >> 3;
  if (v18 <= 1)
    v18 = 1;
  do
  {
    if (*(_QWORD *)&v8[8 * v16])
      *(_QWORD *)&v14[8 * v17++] = v16;
    ++v16;
  }
  while (v18 != v16);
  v19 = (v3 - v14) >> 3;
  if (v17 > v19)
  {
    sub_223F2B610((uint64_t)a3, v17 - v19);
LABEL_23:
    operator delete(v8);
    return;
  }
LABEL_20:
  if (v19 > v17)
    a3[1] = &v14[8 * v17];
  if (v8)
    goto LABEL_23;
}

void sub_223F2B03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

double sub_223F2B090@<D0>(unint64_t a1@<X0>, float32x2_t *a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v18;
  float32x4_t v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  float32x4_t *v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  double result;
  float32x2_t *v49;
  uint64_t v50;
  uint64_t v51;
  __int32 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char *v56;

  v55 = 0uLL;
  v56 = 0;
  if (a1)
  {
    if (a1 >> 61)
      sub_22316E078();
    *(_QWORD *)&v55 = operator new(8 * a1);
    *((_QWORD *)&v55 + 1) = v55;
    v56 = (char *)(v55 + 8 * a1);
  }
  v53 = 0;
  v54 = 0uLL;
  sub_2239996F4((uint64_t)&v53, a1);
  if (a1)
  {
    v49 = (float32x2_t *)((char *)a2 + 12 * a1);
    __asm { FMOV            V8.2S, #-1.0 }
    while (1)
    {
      v9.i32[0] = a3[1].i32[0];
      v10.i32[0] = a3[3].i32[0];
      v11.i32[0] = a3[5].i32[0];
      v12.i32[0] = a2[1].i32[0];
      *(float32x2_t *)v18.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a3, COERCE_FLOAT(*a2)), a3[2], *a2, 1), a3[4], v12.f32[0]);
      *(float32x2_t *)&v18.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.f32, *a2), v10, *a2, 1), v12, v11);
      *(float32x2_t *)v9.f32 = a3[6];
      v9.i32[2] = a3[7].i32[0];
      v19 = vaddq_f32(v18, v9);
      v52 = v19.i32[2];
      v50 = _D8;
      v51 = v19.i64[0];
      v20 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a4 + 64))(a4, &v51, &v50);
      v21 = (_BYTE *)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1) >= (unint64_t)v56)
      {
        v23 = (_BYTE *)v55;
        v24 = *((_QWORD *)&v55 + 1) - v55;
        v25 = (uint64_t)(*((_QWORD *)&v55 + 1) - v55) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          sub_22316E078();
        v27 = (uint64_t)&v56[-v55];
        if ((uint64_t)&v56[-v55] >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 61)
            sub_223174E94();
          v29 = operator new(8 * v28);
          v30 = &v29[8 * v25];
          *v30 = v50;
          v22 = (uint64_t)(v30 + 1);
          v31 = (char *)(v21 - v23);
          if (v21 != v23)
          {
LABEL_32:
            v37 = (unint64_t)(v31 - 8);
            if (v37 < 0x58)
              goto LABEL_47;
            if ((unint64_t)(v21 - v29 - v24) < 0x20)
              goto LABEL_47;
            v38 = (v37 >> 3) + 1;
            v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
            v40 = &v21[-v39];
            v30 = (_QWORD *)((char *)v30 - v39);
            v41 = (float32x4_t *)&v29[8 * v25 - 16];
            v42 = (float32x4_t *)(v21 - 16);
            v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v9 = v42[-1];
              v44 = *v42;
              v41[-1] = v9;
              *v41 = v44;
              v41 -= 2;
              v42 -= 2;
              v43 -= 4;
            }
            while (v43);
            v21 = v40;
            if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_47:
              do
              {
                v45 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *--v30 = v45;
              }
              while (v21 != v23);
            }
            v21 = (_BYTE *)v55;
            *(_QWORD *)&v55 = v30;
            *((_QWORD *)&v55 + 1) = v22;
            v56 = &v29[8 * v28];
            if (!v21)
              goto LABEL_20;
LABEL_19:
            operator delete(v21);
            goto LABEL_20;
          }
        }
        else
        {
          v29 = 0;
          v30 = (_QWORD *)(8 * v25);
          *(_QWORD *)(8 * v25) = v50;
          v22 = 8 * v25 + 8;
          v31 = (char *)(v21 - v23);
          if (v21 != v23)
            goto LABEL_32;
        }
        *(_QWORD *)&v55 = v30;
        *((_QWORD *)&v55 + 1) = v22;
        v56 = &v29[8 * v28];
        if (v21)
          goto LABEL_19;
      }
      else
      {
        **((_QWORD **)&v55 + 1) = v50;
        v22 = (uint64_t)(v21 + 8);
      }
LABEL_20:
      *((_QWORD *)&v55 + 1) = v22;
      v32 = v54;
      if ((_QWORD)v54 == *((_QWORD *)&v54 + 1) << 6)
      {
        if ((uint64_t)v54 + 1 < 0)
          sub_2233DCD38();
        v33 = *((_QWORD *)&v54 + 1) << 7;
        if (*((_QWORD *)&v54 + 1) << 7 <= ((unint64_t)v54 & 0xFFFFFFFFFFFFFFC0) + 64)
          v33 = (v54 & 0xFFFFFFFFFFFFFFC0) + 64;
        if ((unint64_t)v54 <= 0x3FFFFFFFFFFFFFFELL)
          v34 = v33;
        else
          v34 = 0x7FFFFFFFFFFFFFFFLL;
        sub_2239996F4((uint64_t)&v53, v34);
        v32 = v54;
      }
      *(_QWORD *)&v54 = v32 + 1;
      v35 = v32 >> 6;
      v36 = 1 << v32;
      if (v20)
      {
        *(_QWORD *)(v53 + 8 * v35) |= v36;
        a2 = (float32x2_t *)((char *)a2 + 12);
        if (a2 == v49)
          break;
      }
      else
      {
        *(_QWORD *)(v53 + 8 * v35) &= ~v36;
        a2 = (float32x2_t *)((char *)a2 + 12);
        if (a2 == v49)
          break;
      }
    }
  }
  *(_OWORD *)a5 = v55;
  v46 = v53;
  *(_QWORD *)(a5 + 16) = v56;
  *(_QWORD *)(a5 + 24) = v46;
  result = *(double *)&v54;
  *(_OWORD *)(a5 + 32) = v54;
  return result;
}

void sub_223F2B3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_223F2B420(unint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, float32x2_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x2_t v13;
  unsigned __int32 v14;
  size_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  size_t v20;
  float32x2_t v21;
  int32x2_t v22;
  float v23;
  __int128 v25;
  uint64_t v26;
  _BYTE v27[20];
  __int32 v28;
  float32x2_t v29;
  __int32 v30;
  _BYTE v31[24];
  uint64_t v32;
  __int32 v33;
  float32x2_t v34;
  void **v35;
  simd_float3x3 v36;

  v36.columns[1] = *(simd_float3 *)(a5 + 16);
  v9 = *(float32x4_t *)(a5 + 32);
  v10 = *(float32x4_t *)(a5 + 48);
  v11 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)a4->f32)), (float32x4_t)v36.columns[1], *a4, 1), v9, *(float32x4_t *)a4->f32, 2), v10, *(float32x4_t *)a4->f32, 3);
  v12 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)a4[2].f32)), (float32x4_t)v36.columns[1], a4[2], 1), v9, *(float32x4_t *)a4[2].f32, 2), v10, *(float32x4_t *)a4[2].f32, 3);
  v36.columns[0] = (simd_float3)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)a4[6].f32)), (float32x4_t)v36.columns[1], a4[6], 1), v9, *(float32x4_t *)a4[6].f32, 2), v10, *(float32x4_t *)a4[6].f32, 3);
  v36.columns[1].i64[0] = a3[5];
  v9.i64[0] = a3[6];
  v10.i64[0] = a3[7];
  v13 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v36.columns[1].f32, *(float *)v11.i32), *(float32x2_t *)v9.f32, *(float32x2_t *)v11.i8, 1), *(float32x2_t *)v10.f32, (float32x4_t)v11, 2);
  v14 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, 0), 0, *(float32x2_t *)v11.i8, 1)).u32[0];
  *(float32x2_t *)v11.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v36.columns[1].f32, *(float *)v12.i32), *(float32x2_t *)v9.f32, *(float32x2_t *)v12.i8, 1), *(float32x2_t *)v10.f32, (float32x4_t)v12, 2);
  *(float32x2_t *)v36.columns[1].f32 = vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v36.columns[1].f32, v36.columns[0].f32[0]), *(float32x2_t *)v9.f32, *(float32x2_t *)v36.columns[0].f32, 1);
  v36.columns[2] = (simd_float3)vextq_s8((int8x16_t)v36.columns[0], (int8x16_t)v36.columns[0], 8uLL);
  *(float32x2_t *)v36.columns[1].f32 = vmla_laneq_f32(*(float32x2_t *)v36.columns[1].f32, *(float32x2_t *)v10.f32, (float32x4_t)v36.columns[0], 2);
  *(float32x2_t *)v31 = v13;
  *(_DWORD *)&v31[8] = v14;
  *(_QWORD *)&v31[12] = v11.i64[0];
  *(_DWORD *)&v31[20] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v12.i8, 0), 0, *(float32x2_t *)v12.i8, 1)).u32[0];
  *(float32x2_t *)v36.columns[0].f32 = vadd_f32(*(float32x2_t *)v36.columns[2].f32, vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.columns[0].f32, 0), 0, *(float32x2_t *)v36.columns[0].f32, 1));
  v32 = v36.columns[1].i64[0];
  v33 = v36.columns[0].i32[0];
  sub_22322BB84((uint64_t)v31, (uint64_t)v27, v36);
  memset(v31, 0, sizeof(v31));
  if (a1)
  {
    if (a1 >> 61)
      sub_22316E078();
    v15 = 8 * a1;
    *(_QWORD *)v31 = operator new(v15);
    *(_QWORD *)&v31[8] = *(_QWORD *)v31;
    *(_QWORD *)&v31[16] = *(_QWORD *)v31 + v15;
    v20 = a2 + v15;
    v35 = (void **)v31;
    do
    {
      v16.i32[0] = *(_DWORD *)a2;
      v17.i32[0] = *(_DWORD *)(a2 + 4);
      v18.i32[0] = v28;
      v19.i32[0] = v30;
      v21 = vadd_f32(v29, vmla_n_f32(vmul_n_f32(*(float32x2_t *)v27, *(float *)a2), *(float32x2_t *)&v27[12], v17.f32[0]));
      v22 = (int32x2_t)vadd_f32(v19, vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v27, *(int8x16_t *)v27, 8uLL), v16), v17, v18));
      v23 = fabsf(*(float *)v22.i32);
      if (*(float *)v22.i32 != 0.0 && v23 > 0.000001)
        v21 = vdiv_f32(v21, (float32x2_t)vdup_lane_s32(v22, 0));
      v34 = v21;
      sub_2232EA538(&v35, &v34);
      a2 += 8;
    }
    while (a2 != v20);
    v25 = *(_OWORD *)v31;
    v26 = *(_QWORD *)&v31[16];
  }
  else
  {
    v26 = 0;
    v25 = 0uLL;
  }
  *(_OWORD *)a6 = v25;
  *(_QWORD *)(a6 + 16) = v26;
}

void sub_223F2B5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F2B610(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_22367C394();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_223174E94();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

float32x4_t sub_223F2B7AC@<Q0>(uint64_t a1@<X0>, int a2@<W1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v28;
  float64x2_t v29;
  unint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v35;
  float64x2_t v40;
  float32x4_t result;

  a4.i64[0] = *(_QWORD *)a1;
  a5.i64[0] = *(_QWORD *)(a1 + 12);
  a5.i32[2] = *(_DWORD *)(a1 + 20);
  v6 = vcvt_hight_f64_f32(a5);
  v7 = vcvtq_f64_f32(*(float32x2_t *)a5.f32);
  v8 = (float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL);
  v9.f64[1] = 1.0;
  if (a2 == 1)
  {
    v10.f64[0] = v7.f64[0];
    v10.f64[1] = v8.f64[0];
    v11 = (int64x2_t)vmulq_f64(v10, (float64x2_t)0);
    _Q20.f64[0] = v6.f64[0];
    *(_QWORD *)&_Q20.f64[1] = v11.i64[0];
    _Q19 = (float64x2_t)vdupq_laneq_s64(v11, 1);
    v13 = vmulq_f64(v10, (float64x2_t)xmmword_2245F5CB0);
    v14 = (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)vmulq_f64(v6, (float64x2_t)0), 8uLL);
    v15 = vsubq_f64(_Q19, v13);
    _Q17 = vsubq_f64(_Q20, v14);
    _Q18 = vmulq_f64(_Q17, _Q17);
    _Q19.f64[0] = _Q17.f64[1];
    __asm { FMLA            D18, D19, V17.D[1] }
    _Q18.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q18.f64[0], v15.f64[0], v15.f64[0]));
    v22 = vmulq_n_f64(_Q17, _Q18.f64[0]);
    _Q16 = vmulq_f64(v15, _Q18);
    _Q18.f64[0] = v8.f64[0];
    _Q18.f64[1] = v6.f64[0];
    _Q20.f64[0] = v6.f64[0];
    _Q20.f64[1] = v7.f64[0];
    v24.f64[0] = _Q16.f64[0];
    v24.f64[1] = v22.f64[0];
    _Q18 = vmlsq_f64(vmulq_f64(_Q18, v24), _Q20, (float64x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)_Q16, 8uLL));
    v26 = vmlsq_f64(vmulq_laneq_f64(v7, v22, 1), v8, v22);
    _D21 = _Q18.f64[1];
    __asm { FMLA            D20, D21, V18.D[1] }
    _Q19.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q20.f64[0], v26.f64[0], v26.f64[0]));
    v28 = vmulq_n_f64(_Q18, _Q19.f64[0]);
    v29 = (float64x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)vmulq_f64(v26, _Q19), 8uLL);
    *(_QWORD *)&_Q19.f64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
    v31 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
  }
  else
  {
    v32.f64[0] = v8.f64[0];
    v32.f64[1] = v6.f64[0];
    v33.f64[0] = v6.f64[0];
    v33.f64[1] = v7.f64[0];
    v5.f64[0] = -0.0;
    _Q21 = vmlaq_f64(vmulq_f64(v33, (float64x2_t)xmmword_2245D2420), v32, (float64x2_t)xmmword_2245F5CB0);
    v35 = vmlaq_f64(vmulq_f64(v8, v5), v7, (float64x2_t)0);
    _Q18 = vmulq_f64(_Q21, _Q21);
    _D19 = _Q21.f64[1];
    __asm { FMLA            D18, D19, V21.D[1] }
    _Q18.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q18.f64[0], v35.f64[0], v35.f64[0]));
    _Q22 = vmulq_f64(v35, _Q18);
    v28 = vmulq_n_f64(_Q21, _Q18.f64[0]);
    v29 = (float64x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)_Q22, 8uLL);
    _Q22.f64[1] = v28.f64[0];
    _Q17 = vmlsq_f64(vmulq_f64(v33, v29), v32, _Q22);
    v40 = vmlsq_laneq_f64(vmulq_f64(v8, v28), v7, v28, 1);
    _Q16 = vmulq_f64(_Q17, _Q17);
    _Q22.f64[0] = _Q17.f64[1];
    __asm { FMLA            D16, D22, V17.D[1] }
    _Q16.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q16.f64[0], v40.f64[0], v40.f64[0]));
    v22 = vmulq_n_f64(_Q17, _Q16.f64[0]);
    *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vmulq_f64(v40, _Q16);
    v31 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    *(_QWORD *)&_Q19.f64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  }
  v28.f64[1] = v29.f64[0];
  v7.f64[1] = v8.f64[0];
  *(_QWORD *)&v22.f64[1] = v31;
  *(_QWORD *)&_Q16.f64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
  *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
  a4.i32[2] = *(_DWORD *)(a1 + 8);
  *(_QWORD *)&v6.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
  *(_QWORD *)&v9.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(a4);
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v22), _Q16);
  a3[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28), _Q19);
  result = vcvt_hight_f32_f64(*(int32x2_t *)a4.f32, v9);
  a3[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v7), v6);
  a3[3] = result;
  return result;
}

float64_t sub_223F2B9A0@<D0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  float64x2_t v3;
  float32x4_t v4;
  float64x2_t v5;
  unsigned __int8 v6;
  uint64_t *v7;
  float64x2_t v8;
  float64x2_t v9;
  unsigned __int8 v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  unint64_t v29;
  float64x2_t v31;
  int64x2_t v32;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v39;
  float64x2_t v41;
  int v43;
  int v44;
  int v45;
  int v46;
  float64x2_t v48;
  float32x4_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  uint64_t v57;
  uint64_t v58;

  v4.i64[0] = *(_QWORD *)a1;
  v4.i32[2] = *(_DWORD *)(a1 + 8);
  a3.i64[0] = *(_QWORD *)(a1 + 12);
  a3.i32[2] = *(_DWORD *)(a1 + 20);
  v5 = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
  v6 = atomic_load((unsigned __int8 *)&qword_25578F140);
  v7 = &qword_25578F000;
  if ((v6 & 1) == 0)
  {
    v55 = a2;
    v57 = a1;
    v53 = v4;
    v49 = a3;
    v51 = v5;
    v43 = __cxa_guard_acquire(&qword_25578F140);
    a3 = v49;
    v5 = v51;
    v4 = v53;
    v7 = &qword_25578F000;
    v44 = v43;
    a2 = v55;
    a1 = v57;
    if (v44)
    {
      dword_25578F138 = 1065098332;
      __cxa_guard_release(&qword_25578F140);
      a3 = v49;
      v5 = v51;
      v4 = v53;
      v7 = &qword_25578F000;
      a2 = v55;
      a1 = v57;
    }
  }
  v8 = vcvt_hight_f64_f32(a3);
  v9 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
  v10 = atomic_load((unsigned __int8 *)&qword_25578F150);
  if ((v10 & 1) == 0)
  {
    v56 = a2;
    v58 = a1;
    v54 = v4;
    v50 = v8;
    v52 = v5;
    v48 = v9;
    v45 = __cxa_guard_acquire(&qword_25578F150);
    v9 = v48;
    v8 = v50;
    v5 = v52;
    v4 = v54;
    v7 = &qword_25578F000;
    v46 = v45;
    a2 = v56;
    a1 = v58;
    if (v46)
    {
      dword_25578F148 = 1043452119;
      __cxa_guard_release(&qword_25578F150);
      v9 = v48;
      v8 = v50;
      v5 = v52;
      v4 = v54;
      v7 = &qword_25578F000;
      a2 = v56;
      a1 = v58;
    }
  }
  v11.f64[1] = 1.0;
  if (fabsf(*(float *)(a1 + 20)) >= *((float *)v7 + 78))
  {
    v31.f64[0] = v5.f64[0];
    v31.f64[1] = v9.f64[0];
    v32 = (int64x2_t)vmulq_f64(v31, (float64x2_t)0);
    _Q16.f64[0] = v8.f64[0];
    *(_QWORD *)&_Q16.f64[1] = v32.i64[0];
    _Q7 = (float64x2_t)vdupq_laneq_s64(v32, 1);
    v34 = vmulq_f64(v31, (float64x2_t)xmmword_2245F5CB0);
    v35 = (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)vmulq_f64(v8, (float64x2_t)0), 8uLL);
    v36 = vsubq_f64(_Q7, v34);
    _Q5 = vsubq_f64(_Q16, v35);
    _Q6 = vmulq_f64(_Q5, _Q5);
    _Q7.f64[0] = _Q5.f64[1];
    __asm { FMLA            D6, D7, V5.D[1] }
    _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v36.f64[0], v36.f64[0]));
    v27 = vmulq_n_f64(_Q5, _Q6.f64[0]);
    _Q4 = vmulq_f64(v36, _Q6);
    _Q6.f64[0] = v9.f64[0];
    _Q6.f64[1] = v8.f64[0];
    _Q16.f64[0] = v8.f64[0];
    _Q16.f64[1] = v5.f64[0];
    v39.f64[0] = _Q4.f64[0];
    v39.f64[1] = v27.f64[0];
    _Q6 = vmlsq_f64(vmulq_f64(_Q6, v39), _Q16, (float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)_Q4, 8uLL));
    v41 = vmlsq_f64(vmulq_laneq_f64(v5, v27, 1), v9, v27);
    _D17 = _Q6.f64[1];
    __asm { FMLA            D16, D17, V6.D[1] }
    _Q7.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q16.f64[0], v41.f64[0], v41.f64[0]));
    v23 = vmulq_n_f64(_Q6, _Q7.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)vmulq_f64(v41, _Q7), 8uLL);
    *(_QWORD *)&_Q7.f64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v29 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  }
  else
  {
    v12.f64[0] = v9.f64[0];
    v12.f64[1] = v8.f64[0];
    v13.f64[0] = v8.f64[0];
    v13.f64[1] = v5.f64[0];
    v3.f64[0] = -0.0;
    _Q17 = vmlaq_f64(vmulq_f64(v13, (float64x2_t)xmmword_2245D2420), v12, (float64x2_t)xmmword_2245F5CB0);
    v15 = vmlaq_f64(vmulq_f64(v9, v3), v5, (float64x2_t)0);
    _Q6 = vmulq_f64(_Q17, _Q17);
    _D7 = _Q17.f64[1];
    __asm { FMLA            D6, D7, V17.D[1] }
    _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q6.f64[0], v15.f64[0], v15.f64[0]));
    _Q18 = vmulq_f64(v15, _Q6);
    v23 = vmulq_n_f64(_Q17, _Q6.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)_Q18, 8uLL);
    _Q18.f64[1] = v23.f64[0];
    _Q5 = vmlsq_f64(vmulq_f64(v13, v24), v12, _Q18);
    v26 = vmlsq_laneq_f64(vmulq_f64(v9, v23), v5, v23, 1);
    _Q4 = vmulq_f64(_Q5, _Q5);
    _Q18.f64[0] = _Q5.f64[1];
    __asm { FMLA            D4, D18, V5.D[1] }
    _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v26.f64[0], v26.f64[0]));
    v27 = vmulq_n_f64(_Q5, _Q4.f64[0]);
    *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vmulq_f64(v26, _Q4);
    v29 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    *(_QWORD *)&_Q7.f64[0] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  }
  v23.f64[1] = v24.f64[0];
  v5.f64[1] = v9.f64[0];
  *(_QWORD *)&v27.f64[1] = v29;
  *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
  *(_QWORD *)&_Q7.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
  *(_QWORD *)&v8.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
  *(_QWORD *)&v11.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v4);
  *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v27), _Q4);
  a2[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v23), _Q7);
  a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v8);
  a2[3] = vcvt_hight_f32_f64(*(int32x2_t *)v4.f32, v11);
  return v11.f64[0];
}

__n128 sub_223F2BCA8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q4>)
{
  float64x2_t v3;
  uint64_t v4;
  int8x16_t v5;
  float64x2_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  unint64_t v9;
  float64x2_t v10;
  unsigned __int8 v11;
  float64x2_t v13;
  float64x2_t v15;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  __n128 result;
  unint64_t v28;
  unint64_t v29;
  float64x2_t v30;
  int64x2_t v31;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v38;
  float64x2_t v40;
  int v42;
  int v43;
  int v44;
  int v45;
  float64x2_t v46;
  unint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(int8x16_t *)a1;
  v3.f64[0] = *(float64_t *)(a1 + 40);
  v6 = *(float64x2_t *)(a1 + 24);
  v7 = atomic_load((unsigned __int8 *)&qword_25578F160);
  v8 = &qword_25578F000;
  if ((v7 & 1) == 0)
  {
    v56 = a2;
    v58 = a1;
    v52 = *(_QWORD *)(a1 + 16);
    v54 = *(int8x16_t *)a1;
    v48 = *(float64x2_t *)(a1 + 24);
    v50 = v3;
    v42 = __cxa_guard_acquire(&qword_25578F160);
    v6 = v48;
    v3 = v50;
    v4 = v52;
    v5 = v54;
    v8 = &qword_25578F000;
    v43 = v42;
    a2 = v56;
    a1 = v58;
    if (v43)
    {
      qword_25578F158 = 0x3FEF838B8C811C17;
      __cxa_guard_release(&qword_25578F160);
      v6 = v48;
      v3 = v50;
      v4 = v52;
      v5 = v54;
      v8 = &qword_25578F000;
      a2 = v56;
      a1 = v58;
    }
  }
  v9 = vextq_s8(v5, v5, 8uLL).u64[0];
  v10 = (float64x2_t)vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL);
  v11 = atomic_load((unsigned __int8 *)&qword_25578F170);
  if ((v11 & 1) == 0)
  {
    v57 = a2;
    v59 = a1;
    v53 = v4;
    v55 = v5.i64[0];
    v49 = v6;
    v51 = v3;
    v46 = v10;
    v47 = v9;
    v44 = __cxa_guard_acquire(&qword_25578F170);
    v10 = v46;
    v9 = v47;
    v6 = v49;
    v3 = v51;
    v4 = v53;
    v5.i64[0] = v55;
    v8 = &qword_25578F000;
    v45 = v44;
    a2 = v57;
    a1 = v59;
    if (v45)
    {
      qword_25578F168 = 0x3FC63A1A7E0B738CLL;
      __cxa_guard_release(&qword_25578F170);
      v10 = v46;
      v9 = v47;
      v6 = v49;
      v3 = v51;
      v4 = v53;
      v5.i64[0] = v55;
      v8 = &qword_25578F000;
      a2 = v57;
      a1 = v59;
    }
  }
  if (fabs(*(double *)(a1 + 40)) >= *((double *)v8 + 43))
  {
    v30.f64[0] = v6.f64[0];
    v30.f64[1] = v10.f64[0];
    v31 = (int64x2_t)vmulq_f64(v30, (float64x2_t)0);
    _Q4.f64[0] = v3.f64[0];
    *(_QWORD *)&_Q4.f64[1] = v31.i64[0];
    _Q3 = (float64x2_t)vdupq_laneq_s64(v31, 1);
    v34 = vmulq_f64(v30, (float64x2_t)xmmword_2245F5CB0);
    v35 = vsubq_f64(_Q3, v34);
    _Q0 = vsubq_f64(_Q4, (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)vmulq_f64(v3, (float64x2_t)0), 8uLL));
    _Q1 = vmulq_f64(_Q0, _Q0);
    _Q3.f64[0] = _Q0.f64[1];
    __asm { FMLA            D1, D3, V0.D[1] }
    _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], v35.f64[0], v35.f64[0]));
    result = (__n128)vmulq_n_f64(_Q0, _Q1.f64[0]);
    _Q1 = vmulq_f64(v35, _Q1);
    v35.f64[0] = v10.f64[0];
    v35.f64[1] = v3.f64[0];
    _Q4.f64[0] = v3.f64[0];
    _Q4.f64[1] = v6.f64[0];
    v38.f64[0] = _Q1.f64[0];
    *(_QWORD *)&v38.f64[1] = result.n128_u64[0];
    _Q2 = vmlsq_f64(vmulq_f64(v35, v38), _Q4, (float64x2_t)vextq_s8((int8x16_t)result, (int8x16_t)_Q1, 8uLL));
    v40 = vmlsq_f64(vmulq_laneq_f64(v6, (float64x2_t)result, 1), v10, (float64x2_t)result);
    _D5 = _Q2.f64[1];
    __asm { FMLA            D4, D5, V2.D[1] }
    _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v40.f64[0], v40.f64[0]));
    v23 = vmulq_n_f64(_Q2, _Q3.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)vmulq_f64(v40, _Q3), 8uLL);
    v29 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    v28 = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
  }
  else
  {
    _Q0.f64[0] = v10.f64[0];
    _Q0.f64[1] = v3.f64[0];
    v13.f64[0] = v3.f64[0];
    v13.f64[1] = v6.f64[0];
    a3.f64[0] = -0.0;
    _Q5 = vmlaq_f64(vmulq_f64(v13, (float64x2_t)xmmword_2245D2420), _Q0, (float64x2_t)xmmword_2245F5CB0);
    v15 = vmlaq_f64(vmulq_f64(v10, a3), v6, (float64x2_t)0);
    _Q2 = vmulq_f64(_Q5, _Q5);
    _D3 = _Q5.f64[1];
    __asm { FMLA            D2, D3, V5.D[1] }
    _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v15.f64[0], v15.f64[0]));
    _Q4 = vmulq_f64(v15, _Q2);
    v23 = vmulq_n_f64(_Q5, _Q2.f64[0]);
    v24 = (float64x2_t)vextq_s8((int8x16_t)v23, (int8x16_t)_Q4, 8uLL);
    _Q4.f64[1] = v23.f64[0];
    _Q1 = vmlsq_f64(vmulq_f64(v13, v24), _Q0, _Q4);
    v25 = vmlsq_laneq_f64(vmulq_f64(v10, v23), v6, v23, 1);
    _Q4.f64[0] = _Q1.f64[1];
    __asm { FMLA            D0, D4, V1.D[1] }
    _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q0.f64[0], v25.f64[0], v25.f64[0]));
    result = (__n128)vmulq_n_f64(_Q1, _Q4.f64[0]);
    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vmulq_f64(v25, _Q4);
    v28 = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    v29 = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  }
  result.n128_u64[1] = v28;
  v23.f64[1] = v24.f64[0];
  v6.f64[1] = v10.f64[0];
  *(float64_t *)(a2 + 16) = _Q1.f64[0];
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = v29;
  *(float64x2_t *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 56) = 0;
  *(float64_t *)(a2 + 80) = v3.f64[0];
  *(float64x2_t *)(a2 + 64) = v6;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 112) = v4;
  v5.i64[1] = v9;
  *(int8x16_t *)(a2 + 96) = v5;
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  return result;
}

float sub_223F2BF8C(unint64_t a1, float *a2)
{
  float v2;
  float *v3;
  float v4;
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v2 = 0.0;
  if (a1 >= 3)
  {
    v3 = a2 + 3;
    v4 = 0.0;
    v5 = a1 - 1;
    v6 = a2[1];
    v7 = *a2;
    do
    {
      v8 = *v3;
      v9 = v4 - (float)(v7 * *v3);
      v7 = *(v3 - 1);
      v4 = v9 + (float)(v6 * v7);
      v3 += 2;
      v6 = v8;
      --v5;
    }
    while (v5);
    v2 = (float)((float)(v4 - (float)(a2[1] * a2[2 * a1 - 2])) + (float)(*a2 * a2[2 * a1 - 1])) * 0.5;
  }
  return fabsf(v2);
}

void sub_223F2C004(void *a1@<X0>, const void **a2@<X1>, unint64_t *a3@<X8>)
{
  const void *v6;
  int64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  void *v36[4];
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  void *v41[2];
  void *v42[2];
  int v43;
  void *v44;
  void **v45;
  _QWORD *v46;
  int8x8_t v47;
  _QWORD *v48;
  unint64_t v49;

  if (a1 != (void *)1)
  {
    if (!a1)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    sub_223F3195C(a1, (uint64_t)a2, (uint64_t)&v46);
    v11 = v48;
    v10 = v49;
    memset(v36, 0, 24);
    if (v49)
    {
      if (v49 >> 61)
        sub_22367C394();
      v12 = (char *)operator new(8 * v49);
      v36[0] = v12;
      v36[1] = v12;
      v36[2] = &v12[8 * v10];
      v41[0] = v36;
      v13 = v12;
      if (!v11)
      {
LABEL_14:
        v14 = (v12 - v13) >> 3;
        v15 = 126 - 2 * __clz(v14);
        v36[0] = &v46;
        if (v12 == v13)
          v16 = 0;
        else
          v16 = v15;
        sub_223F2D698(v13, (unint64_t *)v12, (uint64_t *)v36, v16, 1);
        sub_223F32500(v14, v13, 0, a1, &v44);
        *(_OWORD *)v41 = 0u;
        *(_OWORD *)v42 = 0u;
        v43 = 1065353216;
        v17 = (void **)v44;
        v18 = v45;
        if (v44 == v45)
          goto LABEL_43;
        while (1)
        {
          if (!*(_QWORD *)&v47)
            goto LABEL_62;
          v19 = (unint64_t)*v17;
          v20 = (uint8x8_t)vcnt_s8(v47);
          v20.i16[0] = vaddlv_u8(v20);
          if (v20.u32[0] > 1uLL)
          {
            v21 = (unint64_t)*v17;
            if (v19 >= *(_QWORD *)&v47)
              v21 = v19 % *(_QWORD *)&v47;
          }
          else
          {
            v21 = (*(_QWORD *)&v47 - 1) & v19;
          }
          v22 = (uint64_t **)v46[v21];
          if (!v22 || (v23 = *v22) == 0)
LABEL_62:
            sub_223198218("unordered_map::at: key not found");
          if (v20.u32[0] < 2uLL)
          {
            while (1)
            {
              v25 = v23[1];
              if (v25 == v19)
              {
                if (v23[2] == v19)
                  goto LABEL_38;
              }
              else if ((v25 & (*(_QWORD *)&v47 - 1)) != v21)
              {
                goto LABEL_62;
              }
              v23 = (uint64_t *)*v23;
              if (!v23)
                goto LABEL_62;
            }
          }
          while (1)
          {
            v24 = v23[1];
            if (v24 == v19)
              break;
            if (v24 >= *(_QWORD *)&v47)
              v24 %= *(_QWORD *)&v47;
            if (v24 != v21)
              goto LABEL_62;
LABEL_28:
            v23 = (uint64_t *)*v23;
            if (!v23)
              goto LABEL_62;
          }
          if (v23[2] != v19)
            goto LABEL_28;
LABEL_38:
          v36[0] = *v17;
          v26 = *(_OWORD *)(v23 + 3);
          v36[3] = (void *)v23[5];
          *(_OWORD *)&v36[1] = v26;
          LOBYTE(v37) = 0;
          v38 = 0;
          if (*((_BYTE *)v23 + 56))
          {
            v37 = v23[6];
            v38 = 1;
          }
          LOBYTE(v39) = 0;
          v40 = 0;
          if (*((_BYTE *)v23 + 68))
          {
            v39 = *(uint64_t *)((char *)v23 + 60);
            v40 = 1;
          }
          sub_223F2EAF8((uint64_t)v41, (unint64_t *)v36, (uint64_t)v36);
          if (++v17 == v18)
          {
LABEL_43:
            if ((unint64_t)a1 >= 0x100
              && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Geometry/PolygonUtil.cpp", 223, (uint64_t)"polygons.size() <= static_cast<size_t>(std::numeric_limits<uint8_t>::max())", 75, (uint64_t)"Support at most 254 holes.", 26, (void (*)(void **))sub_22457406C))
            {
              abort();
            }
            memset(v36, 0, sizeof(v36));
            LODWORD(v37) = 1065353216;
            sub_223F2EE68(a3, 0, (uint64_t)a1, (uint64_t)a2, 0, v41, v36);
            v27 = v36[2];
            if (v36[2])
            {
              do
              {
                v28 = (_QWORD *)*v27;
                operator delete(v27);
                v27 = v28;
              }
              while (v28);
            }
            v29 = v36[0];
            v36[0] = 0;
            if (v29)
              operator delete(v29);
            v30 = v42[0];
            if (v42[0])
            {
              do
              {
                v31 = (_QWORD *)*v30;
                operator delete(v30);
                v30 = v31;
              }
              while (v31);
            }
            v32 = v41[0];
            v41[0] = 0;
            if (v32)
              operator delete(v32);
            if (v44)
            {
              v45 = (void **)v44;
              operator delete(v44);
            }
            if (v13)
              operator delete(v13);
            v33 = v48;
            if (v48)
            {
              do
              {
                v34 = (_QWORD *)*v33;
                operator delete(v33);
                v33 = v34;
              }
              while (v34);
            }
            v35 = v46;
            v46 = 0;
            if (v35)
              operator delete(v35);
            return;
          }
        }
      }
    }
    else
    {
      v12 = 0;
      v41[0] = v36;
      v13 = 0;
      if (!v48)
        goto LABEL_14;
    }
    do
    {
      v44 = (void *)v11[2];
      sub_2237A4B60((uint64_t *)v41, &v44);
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    v13 = (char *)v36[0];
    v12 = (char *)v36[1];
    goto LABEL_14;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v7 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (v7)
  {
    if (v7 < 0)
      sub_22316E078();
    v8 = operator new(v7);
    *a3 = (unint64_t)v8;
    a3[1] = (unint64_t)v8;
    a3[2] = (unint64_t)v8 + 8 * (v7 >> 3);
    v9 = v7 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v8, v6, v9);
    a3[1] = (unint64_t)v8 + v9;
  }
}

void sub_223F2C420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  void *v24;
  uint64_t v25;

  sub_22322E828((uint64_t)&a9);
  sub_22322E828((uint64_t)&a17);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v24)
    operator delete(v24);
  sub_22322E828(v25 - 120);
  _Unwind_Resume(a1);
}

void sub_223F2C4C0(unint64_t a1@<X0>, char *a2@<X1>, char **a3@<X8>, float a4@<S0>)
{
  char *v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  char *v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;

  v4 = a2;
  if (a1 <= 2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (a1)
    {
      v7 = 8 * a1;
      if (((8 * a1) & 0x8000000000000000) != 0)
        sub_22316E078();
      v8 = (char *)operator new(8 * a1);
      *a3 = v8;
      a3[2] = &v8[8 * ((uint64_t)(8 * a1) >> 3)];
      memcpy(v8, v4, v7 & 0xFFFFFFFFFFFFFFF8);
      a3[1] = &v8[8 * a1];
    }
    return;
  }
  v9 = *(_QWORD *)a2;
  v78 = a2 + 12;
  v10 = (float)(a4 * 0.5) * 0.017453;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v11 = HIDWORD(v9);
  v12 = (char *)operator new(8uLL);
  *(_QWORD *)v12 = v9;
  v13 = v12 + 8;
  a3[2] = v12 + 8;
  *a3 = v12;
  a3[1] = v12 + 8;
  v14 = 1;
  while (v14 + 1 < a1)
  {
    v15 = *(float *)&v9;
    v16 = atan2f(*(float *)&v11 - *(float *)&v4[8 * v14 + 4], *(float *)&v9 - *(float *)&v4[8 * v14]);
    v17 = v10 + v16;
    v18 = v16 - v10;
    if (v18 >= 0.0)
      v19 = 0.0;
    else
      v19 = 6.2832;
    v20 = v18 + v19;
    if (v17 >= (float)(v18 + v19))
      v21 = 0.0;
    else
      v21 = 6.2832;
    v22 = v17 + v21;
    v23 = (float *)&v78[8 * v14++];
    while (1)
    {
      v24 = atan2f(*(float *)&v11 - *v23, v15 - *(v23 - 1));
      v25 = v10 + v24;
      v26 = v24 - v10;
      v27 = 6.2832;
      if (v26 >= 0.0)
        v28 = 0.0;
      else
        v28 = 6.2832;
      v29 = v26 + v28;
      if (v25 >= v29)
        v27 = 0.0;
      v30 = v25 + v27;
      if (v20 < v29)
        v20 = v29;
      if (v30 < v22)
        v22 = v30;
      if (v20 >= v22 || (float)(v22 - v20) <= 0.000001)
        break;
      ++v14;
      v23 += 2;
      if (v14 >= a1)
        goto LABEL_61;
    }
    v32 = *(_QWORD *)(v23 - 3);
    v33 = (unint64_t)a3[2];
    v77 = v4;
    if ((unint64_t)v13 >= v33)
    {
      v35 = *a3;
      v36 = v13 - *a3;
      v37 = v36 >> 3;
      v38 = (v36 >> 3) + 1;
      if (v38 >> 61)
        sub_22316E078();
      v39 = v33 - (_QWORD)v35;
      if (v39 >> 2 > v38)
        v38 = v39 >> 2;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      v76 = v32;
      if (v40)
      {
        if (v40 >> 61)
          sub_223174E94();
        v41 = operator new(8 * v40);
        v32 = v76;
        v42 = &v41[8 * v37];
        v43 = &v41[8 * v40];
        *(_QWORD *)v42 = v76;
        v34 = (uint64_t)(v42 + 8);
        v44 = (char *)(v13 - v35);
        if (v13 != v35)
        {
LABEL_41:
          v45 = (unint64_t)(v44 - 8);
          if (v45 < 0x168)
          {
            v46 = v13;
            goto LABEL_43;
          }
          v48 = (v13 - 8 - v35) & 0xFFFFFFFFFFFFFFF8;
          if (&v41[v36 - 8 - v48] > &v41[v36 - 8])
          {
            v46 = v13;
            goto LABEL_43;
          }
          if (&v13[-v48 - 8] > v13 - 8)
          {
            v46 = v13;
            goto LABEL_43;
          }
          if ((unint64_t)(v13 - &v41[v36]) < 0x20)
          {
            v46 = v13;
            goto LABEL_43;
          }
          v49 = (v45 >> 3) + 1;
          v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          v46 = &v13[-v50];
          v42 -= v50;
          v51 = &v41[8 * v37 - 16];
          v52 = v13 - 16;
          v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v54 = *(_OWORD *)v52;
            *(v51 - 1) = *((_OWORD *)v52 - 1);
            *v51 = v54;
            v51 -= 2;
            v52 -= 32;
            v53 -= 4;
          }
          while (v53);
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_43:
              v47 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v42 - 1) = v47;
              v42 -= 8;
            }
            while (v46 != v35);
          }
          v13 = *a3;
          *a3 = v42;
          a3[1] = (char *)v34;
          a3[2] = v43;
          if (!v13)
            goto LABEL_49;
LABEL_48:
          operator delete(v13);
          v32 = v76;
          goto LABEL_49;
        }
      }
      else
      {
        v41 = 0;
        v42 = (char *)(8 * v37);
        v43 = 0;
        *(_QWORD *)(8 * v37) = v32;
        v34 = 8 * v37 + 8;
        v44 = (char *)(v13 - v35);
        if (v13 != v35)
          goto LABEL_41;
      }
      *a3 = v42;
      a3[1] = (char *)v34;
      a3[2] = v43;
      goto LABEL_48;
    }
    *(_QWORD *)v13 = v32;
    v34 = (uint64_t)(v13 + 8);
LABEL_49:
    a3[1] = (char *)v34;
    LODWORD(v9) = v32;
    LODWORD(v11) = HIDWORD(v32);
    v13 = (char *)v34;
    v4 = v77;
    if (v14 >= a1)
      return;
  }
LABEL_61:
  v55 = &v4[8 * a1];
  v56 = (unint64_t)a3[2];
  if ((unint64_t)v13 < v56)
  {
    *(_QWORD *)v13 = *((_QWORD *)v55 - 1);
    a3[1] = v13 + 8;
    return;
  }
  v57 = *a3;
  v58 = v13 - *a3;
  v59 = v58 >> 3;
  v60 = (v58 >> 3) + 1;
  if (v60 >> 61)
    sub_22316E078();
  v61 = v56 - (_QWORD)v57;
  if (v61 >> 2 > v60)
    v60 = v61 >> 2;
  if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
    v62 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v62 = v60;
  if (v62)
  {
    if (v62 >> 61)
      sub_223174E94();
    v63 = operator new(8 * v62);
  }
  else
  {
    v63 = 0;
  }
  v64 = &v63[8 * v59];
  v65 = &v63[8 * v62];
  *(_QWORD *)v64 = *((_QWORD *)v55 - 1);
  v66 = v64 + 8;
  if (v13 == v57)
  {
    *a3 = v64;
    a3[1] = v66;
    a3[2] = v65;
    goto LABEL_84;
  }
  v67 = v13 - v57 - 8;
  if (v67 < 0x58)
  {
    v68 = v13;
    goto LABEL_82;
  }
  if ((unint64_t)(v13 - &v63[v58]) < 0x20)
  {
    v68 = v13;
    goto LABEL_82;
  }
  v69 = (v67 >> 3) + 1;
  v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
  v68 = &v13[-v70];
  v64 -= v70;
  v71 = &v63[8 * v59 - 16];
  v72 = v13 - 16;
  v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v74 = *(_OWORD *)v72;
    *(v71 - 1) = *((_OWORD *)v72 - 1);
    *v71 = v74;
    v71 -= 2;
    v72 -= 32;
    v73 -= 4;
  }
  while (v73);
  if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
  {
    do
    {
LABEL_82:
      v75 = *((_QWORD *)v68 - 1);
      v68 -= 8;
      *((_QWORD *)v64 - 1) = v75;
      v64 -= 8;
    }
    while (v68 != v57);
  }
  v13 = *a3;
  *a3 = v64;
  a3[1] = v66;
  a3[2] = v65;
  if (v13)
LABEL_84:
    operator delete(v13);
  a3[1] = v66;
}

void sub_223F2C9C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_223F2C9EC(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, float32x2_t **a4@<X8>)
{
  uint64_t v6;
  unint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _BOOL4 v19;
  float32x2_t v20;
  float v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  float v27;
  BOOL v28;
  float *v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  float v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  float32x2_t *v45;
  float *v46;
  float32x2_t v47;
  float *v48;
  float v49;
  BOOL v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  float v55;
  float v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  float v60;
  BOOL v61;
  float v62;
  float v63;
  float v64;
  BOOL v65;
  float v66;
  float v67;
  unint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  float32x2_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  float *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  _OWORD *v88;
  float *v89;
  uint64_t v90;
  __int128 v91;
  float32x2_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  unint64_t v97;
  float32x2_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  float32x2_t *v105;
  char *v106;
  unint64_t v107;
  float32x2_t *v108;
  float32x2_t v109;
  int64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  float32x2_t *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  float *v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  uint64_t v124;
  float *v125;
  _OWORD *v126;
  float *v127;
  uint64_t v128;
  __int128 v129;
  float32x2_t v130;
  uint64_t v131;
  uint64_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;

  v6 = a1;
  v8 = 2 * a1;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!(2 * a1))
  {
    v9 = 0;
    if (!a1)
      return;
    goto LABEL_6;
  }
  if (v8 >> 61)
    sub_22316E078();
  v9 = (float *)operator new(16 * a1);
  *a4 = (float32x2_t *)v9;
  a4[1] = (float32x2_t *)v9;
  a4[2] = (float32x2_t *)&v9[2 * v8];
  if (v6)
  {
LABEL_6:
    v10 = 0;
    v131 = a2;
    v132 = v6;
    while (1)
    {
      v12 = v10;
      v13 = (float *)(a2 + 8 * v10++);
      v14 = v10 == v6 ? 0 : v12 + 1;
      v15 = a3->f32[1];
      v16 = a3[1].f32[0] - a3->f32[0];
      v17 = a3[1].f32[1] - v15;
      v18 = (float)(v16 * (float)(v15 - v13[1])) - (float)((float)(a3->f32[0] - *v13) * v17);
      if (v18 >= 0.0)
      {
        v20 = vsub_f32(a3[1], *a3);
        v21 = v18
            / sqrtf(vmla_lane_f32(vmul_f32(v20, v20), (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1), v20, 1).f32[0]);
        v19 = v21 == 0.0;
        if (v21 < 0.0)
          v21 = 0.0 - v21;
        if (v21 <= 0.000001)
          v19 = 1;
      }
      else
      {
        v19 = 1;
      }
      v22 = (float *)(a2 + 8 * v14);
      v24 = *v22;
      v23 = v22[1];
      v25 = (float)(v16 * (float)(v15 - v23)) - (float)(v17 * (float)(a3->f32[0] - *v22));
      if (v25 >= 0.0)
      {
        v26 = vsub_f32(a3[1], *a3);
        v27 = v25
            / sqrtf(vmla_lane_f32(vmul_f32(v26, v26), (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1), v26, 1).f32[0]);
        v28 = v27 != 0.0;
        if (v27 < 0.0)
          v27 = 0.0 - v27;
        if (v27 <= 0.000001)
          v28 = 0;
        if (v19 && !v28)
        {
LABEL_28:
          v29 = (float *)*a4;
          if (*a4 != (float32x2_t *)v9)
          {
            v30 = *(v9 - 2);
            v31 = v30 < v24;
            if (v30 == v24)
              goto LABEL_33;
            v32 = v30 - v24;
            v33 = v24 - v30;
            if (!v31)
              v33 = v32;
            if (v33 <= 0.000001)
            {
LABEL_33:
              v34 = *(v9 - 1);
              v35 = v34 < v23;
              if (v34 == v23)
                goto LABEL_9;
              v36 = v34 - v23;
              v37 = v23 - v34;
              if (!v35)
                v37 = v36;
              if (v37 <= 0.000001)
                goto LABEL_9;
            }
          }
          v38 = (unint64_t)a4[2];
          if ((unint64_t)v9 >= v38)
          {
            v39 = (char *)((char *)v9 - (char *)v29);
            v40 = ((char *)v9 - (char *)v29) >> 3;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61)
              sub_22316E078();
            v42 = v38 - (_QWORD)v29;
            if (v42 >> 2 > v41)
              v41 = v42 >> 2;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              if (v43 >> 61)
                sub_223174E94();
              v44 = (char *)operator new(8 * v43);
              v45 = (float32x2_t *)&v44[8 * v40];
              *v45 = *(float32x2_t *)v22;
              v11 = (uint64_t)&v45[1];
              if (v29 != v9)
              {
LABEL_47:
                if ((unint64_t)(v39 - 8) < 0x168
                  || (v78 = ((char *)(v9 - 2) - (char *)v29) & 0xFFFFFFFFFFFFFFF8,
                      &v39[(_QWORD)v44 - 8 - v78] > &v39[(_QWORD)v44 - 8])
                  || (float *)((char *)v9 - v78 - 8) > v9 - 2
                  || (unint64_t)((char *)v29 - v44) < 0x20)
                {
                  v46 = v9;
                }
                else
                {
                  v79 = ((unint64_t)(v39 - 8) >> 3) + 1;
                  v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
                  v46 = &v9[v80 / 0xFFFFFFFFFFFFFFFCLL];
                  v45 = (float32x2_t *)((char *)v45 - v80);
                  v81 = &v44[8 * v40 - 16];
                  v82 = v9 - 4;
                  v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v84 = *(_OWORD *)v82;
                    *((_OWORD *)v81 - 1) = *((_OWORD *)v82 - 1);
                    *(_OWORD *)v81 = v84;
                    v81 -= 32;
                    v82 -= 8;
                    v83 -= 4;
                  }
                  while (v83);
                  if (v79 == (v79 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_50:
                    v9 = (float *)*a4;
                    *a4 = v45;
                    a4[1] = (float32x2_t *)v11;
                    a4[2] = (float32x2_t *)&v44[8 * v43];
                    if (v9)
                      goto LABEL_51;
                    goto LABEL_52;
                  }
                }
                do
                {
                  v47 = *(float32x2_t *)(v46 - 2);
                  v46 -= 2;
                  v45[-1] = v47;
                  --v45;
                }
                while (v46 != v29);
                goto LABEL_50;
              }
            }
            else
            {
              v44 = 0;
              v45 = (float32x2_t *)(8 * v40);
              *(_QWORD *)(8 * v40) = *(_QWORD *)v22;
              v11 = 8 * v40 + 8;
              if (v29 != v9)
                goto LABEL_47;
            }
            *a4 = v45;
            a4[1] = (float32x2_t *)v11;
            a4[2] = (float32x2_t *)&v44[8 * v43];
            if (v9)
LABEL_51:
              operator delete(v9);
LABEL_52:
            v6 = v132;
            goto LABEL_8;
          }
LABEL_7:
          *(_QWORD *)v9 = *(_QWORD *)v22;
          v11 = (uint64_t)(v9 + 2);
          goto LABEL_8;
        }
        if (v28)
        {
          if (!v19)
            goto LABEL_9;
          v133 = *(float32x2_t *)v13;
          v134 = *(float32x2_t *)v22;
          sub_22369F3FC(a3, &v133, &v135, 1);
          v48 = (float *)*a4;
          v9 = (float *)a4[1];
          if (*a4 != (float32x2_t *)v9)
          {
            v49 = *(v9 - 2);
            v50 = v49 < v135.f32[0];
            if (v49 == v135.f32[0])
              goto LABEL_63;
            v51 = v49 - v135.f32[0];
            v52 = v135.f32[0] - v49;
            if (!v50)
              v52 = v51;
            if (v52 <= 0.000001)
            {
LABEL_63:
              v53 = *(v9 - 1);
              v54 = v53 < v135.f32[1];
              if (v53 == v135.f32[1])
                goto LABEL_9;
              v55 = v53 - v135.f32[1];
              v56 = v135.f32[1] - v53;
              if (!v54)
                v56 = v55;
              if (v56 <= 0.000001)
                goto LABEL_9;
            }
          }
          v57 = (unint64_t)a4[2];
          if ((unint64_t)v9 < v57)
          {
            *(float32x2_t *)v9 = v135;
            v58 = (uint64_t)(v9 + 2);
LABEL_162:
            a4[1] = (float32x2_t *)v58;
            v9 = (float *)v58;
            v6 = v132;
            goto LABEL_9;
          }
          v110 = (char *)v9 - (char *)v48;
          v111 = ((char *)v9 - (char *)v48) >> 3;
          v112 = v111 + 1;
          if ((unint64_t)(v111 + 1) >> 61)
            sub_22316E078();
          v113 = v57 - (_QWORD)v48;
          if (v113 >> 2 > v112)
            v112 = v113 >> 2;
          if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
            v114 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v114 = v112;
          if (v114)
          {
            if (v114 >> 61)
              sub_223174E94();
            v115 = operator new(8 * v114);
            v116 = (float32x2_t *)&v115[8 * v111];
            *v116 = v135;
            v58 = (uint64_t)&v116[1];
            if (v48 != v9)
              goto LABEL_146;
LABEL_153:
            *a4 = v116;
            a4[1] = (float32x2_t *)v58;
            a4[2] = (float32x2_t *)&v115[8 * v114];
            if (!v48)
              goto LABEL_162;
          }
          else
          {
            v115 = 0;
            v116 = (float32x2_t *)(8 * v111);
            *(float32x2_t *)(8 * v111) = v135;
            v58 = 8 * v111 + 8;
            if (v48 == v9)
              goto LABEL_153;
LABEL_146:
            if ((unint64_t)(v110 - 8) < 0x58)
              goto LABEL_173;
            if ((unint64_t)((char *)v48 - v115) < 0x20)
              goto LABEL_173;
            v123 = ((unint64_t)(v110 - 8) >> 3) + 1;
            v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
            v125 = &v9[v124 / 0xFFFFFFFFFFFFFFFCLL];
            v116 = (float32x2_t *)((char *)v116 - v124);
            v126 = &v115[8 * v111 - 16];
            v127 = v9 - 4;
            v128 = v123 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *(_OWORD *)v127;
              *(v126 - 1) = *((_OWORD *)v127 - 1);
              *v126 = v129;
              v126 -= 2;
              v127 -= 8;
              v128 -= 4;
            }
            while (v128);
            v9 = v125;
            if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_173:
              do
              {
                v130 = *(float32x2_t *)(v9 - 2);
                v9 -= 2;
                v116[-1] = v130;
                --v116;
              }
              while (v9 != v48);
            }
            v48 = (float *)*a4;
            *a4 = v116;
            a4[1] = (float32x2_t *)v58;
            a4[2] = (float32x2_t *)&v115[8 * v114];
            if (!v48)
              goto LABEL_162;
          }
          operator delete(v48);
          goto LABEL_162;
        }
      }
      else if (v19)
      {
        goto LABEL_28;
      }
      v133 = *(float32x2_t *)v13;
      v134 = *(float32x2_t *)v22;
      sub_22369F3FC(a3, &v133, &v135, 1);
      v59 = (float *)*a4;
      v9 = (float *)a4[1];
      if (*a4 == (float32x2_t *)v9)
        break;
      v60 = *(v9 - 2);
      v61 = v60 < v135.f32[0];
      if (v60 != v135.f32[0])
      {
        v62 = v60 - v135.f32[0];
        v63 = v135.f32[0] - v60;
        if (!v61)
          v63 = v62;
        if (v63 > 0.000001)
          break;
      }
      v64 = *(v9 - 1);
      v65 = v64 < v135.f32[1];
      if (v64 != v135.f32[1])
      {
        v66 = v64 - v135.f32[1];
        v67 = v135.f32[1] - v64;
        if (!v65)
          v67 = v66;
        if (v67 > 0.000001)
          break;
      }
LABEL_110:
      v93 = *v22;
      if (v135.f32[0] == *v22)
        goto LABEL_117;
      v94 = v93 - v135.f32[0];
      if (v135.f32[0] >= *v22)
        v94 = v135.f32[0] - v93;
      if (v94 <= 0.000001)
      {
LABEL_117:
        v95 = v22[1];
        if (v135.f32[1] == v95)
          goto LABEL_9;
        v96 = v95 - v135.f32[1];
        if (v135.f32[1] >= v95)
          v96 = v135.f32[1] - v95;
        if (v96 <= 0.000001)
          goto LABEL_9;
      }
      v97 = (unint64_t)a4[2];
      if ((unint64_t)v9 < v97)
        goto LABEL_7;
      v98 = *a4;
      v99 = (char *)v9 - (char *)*a4;
      v100 = v99 >> 3;
      v101 = (v99 >> 3) + 1;
      if (v101 >> 61)
LABEL_164:
        sub_22316E078();
      v102 = v97 - (_QWORD)v98;
      if (v102 >> 2 > v101)
        v101 = v102 >> 2;
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
        v103 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v103 = v101;
      if (v103)
      {
        if (v103 >> 61)
LABEL_166:
          sub_223174E94();
        v104 = operator new(8 * v103);
        v105 = (float32x2_t *)&v104[8 * v100];
        *v105 = *(float32x2_t *)v22;
        v11 = (uint64_t)&v105[1];
        v106 = (char *)((char *)v9 - (char *)v98);
        if (v9 != (float *)v98)
        {
LABEL_128:
          v107 = (unint64_t)(v106 - 8);
          if (v107 < 0x58 || (unint64_t)((char *)v9 - v104 - v99) < 0x20)
          {
            v108 = (float32x2_t *)v9;
            a2 = v131;
            goto LABEL_131;
          }
          v117 = (v107 >> 3) + 1;
          v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
          v108 = (float32x2_t *)&v9[v118 / 0xFFFFFFFFFFFFFFFCLL];
          v105 = (float32x2_t *)((char *)v105 - v118);
          v119 = &v104[8 * v100 - 16];
          v120 = v9 - 4;
          v121 = v117 & 0x3FFFFFFFFFFFFFFCLL;
          a2 = v131;
          do
          {
            v122 = *(_OWORD *)v120;
            *(v119 - 1) = *((_OWORD *)v120 - 1);
            *v119 = v122;
            v119 -= 2;
            v120 -= 8;
            v121 -= 4;
          }
          while (v121);
          if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_131:
              v109 = v108[-1];
              --v108;
              v105[-1] = v109;
              --v105;
            }
            while (v108 != v98);
          }
          v9 = (float *)*a4;
          *a4 = v105;
          a4[1] = (float32x2_t *)v11;
          a4[2] = (float32x2_t *)&v104[8 * v103];
          v6 = v132;
          if (!v9)
            goto LABEL_8;
LABEL_136:
          operator delete(v9);
          goto LABEL_8;
        }
      }
      else
      {
        v104 = 0;
        v105 = (float32x2_t *)(8 * v100);
        *(_QWORD *)(8 * v100) = *(_QWORD *)v22;
        v11 = 8 * v100 + 8;
        v106 = (char *)((char *)v9 - (char *)v98);
        if (v9 != (float *)v98)
          goto LABEL_128;
      }
      a2 = v131;
      v6 = v132;
      *a4 = v105;
      a4[1] = (float32x2_t *)v11;
      a4[2] = (float32x2_t *)&v104[8 * v103];
      if (v9)
        goto LABEL_136;
LABEL_8:
      a4[1] = (float32x2_t *)v11;
      v9 = (float *)v11;
LABEL_9:
      if (v10 == v6)
        return;
    }
    v68 = (unint64_t)a4[2];
    if ((unint64_t)v9 < v68)
    {
      *(float32x2_t *)v9 = v135;
      v69 = (uint64_t)(v9 + 2);
LABEL_109:
      a4[1] = (float32x2_t *)v69;
      v9 = (float *)v69;
      goto LABEL_110;
    }
    v70 = (char *)v9 - (char *)v59;
    v71 = ((char *)v9 - (char *)v59) >> 3;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 61)
      goto LABEL_164;
    v73 = v68 - (_QWORD)v59;
    if (v73 >> 2 > v72)
      v72 = v73 >> 2;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
      v74 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    if (v74)
    {
      if (v74 >> 61)
        goto LABEL_166;
      v75 = operator new(8 * v74);
      v76 = (float32x2_t *)&v75[8 * v71];
      *v76 = v135;
      v69 = (uint64_t)&v76[1];
      if (v59 != v9)
      {
LABEL_86:
        v77 = v70 - 8;
        if ((unint64_t)(v70 - 8) >= 0x58)
        {
          a2 = v131;
          if ((unint64_t)((char *)v59 - v75) >= 0x20)
          {
            v85 = (v77 >> 3) + 1;
            v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
            v87 = &v9[v86 / 0xFFFFFFFFFFFFFFFCLL];
            v76 = (float32x2_t *)((char *)v76 - v86);
            v88 = &v75[8 * v71 - 16];
            v89 = v9 - 4;
            v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v91 = *(_OWORD *)v89;
              *(v88 - 1) = *((_OWORD *)v89 - 1);
              *v88 = v91;
              v88 -= 2;
              v89 -= 8;
              v90 -= 4;
            }
            while (v90);
            v9 = v87;
            if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_106:
              v59 = (float *)*a4;
              *a4 = v76;
              a4[1] = (float32x2_t *)v69;
              a4[2] = (float32x2_t *)&v75[8 * v74];
              if (!v59)
              {
LABEL_108:
                v6 = v132;
                goto LABEL_109;
              }
LABEL_107:
              operator delete(v59);
              goto LABEL_108;
            }
          }
        }
        else
        {
          a2 = v131;
        }
        do
        {
          v92 = *(float32x2_t *)(v9 - 2);
          v9 -= 2;
          v76[-1] = v92;
          --v76;
        }
        while (v9 != v59);
        goto LABEL_106;
      }
    }
    else
    {
      v75 = 0;
      v76 = (float32x2_t *)(8 * v71);
      *(float32x2_t *)(8 * v71) = v135;
      v69 = 8 * v71 + 8;
      if (v59 != v9)
        goto LABEL_86;
    }
    a2 = v131;
    *a4 = v76;
    a4[1] = (float32x2_t *)v69;
    a4[2] = (float32x2_t *)&v75[8 * v74];
    if (!v59)
      goto LABEL_108;
    goto LABEL_107;
  }
}

void sub_223F2D358(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_223F2D394(unint64_t a1@<X0>, const void *a2@<X1>, float *a3@<X2>, float *a4@<X3>, float *a5@<X4>, _QWORD *a6@<X8>)
{
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t *v37;
  uint64_t v38;
  char *v39;
  float32x2_t *v40;
  float32x2_t *v41;
  uint64_t v42;
  float32x2_t *v43;
  float32x2_t *v44;
  uint64_t v45;
  void *__p;
  _BYTE *v47;
  uint64_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;

  if (a1 > 2)
  {
    v9 = *a3;
    v10 = *a4;
    if (*a3 == *a4)
      goto LABEL_11;
    v11 = v9 - v10;
    if (*a3 < *a4)
      v11 = v10 - v9;
    if (v11 <= 0.000001)
    {
LABEL_11:
      v12 = a3[1];
      v13 = a4[1];
      v14 = v12 < v13;
      if (v12 == v13)
        goto LABEL_30;
      v15 = v12 - v13;
      v16 = v13 - v12;
      if (!v14)
        v16 = v15;
      if (v16 <= 0.000001)
        goto LABEL_30;
    }
    v17 = *a5;
    v18 = v10 < *a5;
    if (v10 == *a5)
      goto LABEL_19;
    v19 = v10 - v17;
    v20 = v17 - v10;
    if (!v18)
      v20 = v19;
    if (v20 <= 0.000001)
    {
LABEL_19:
      v21 = a4[1];
      v22 = a5[1];
      v23 = v21 < v22;
      if (v21 == v22)
        goto LABEL_30;
      v24 = v21 - v22;
      v25 = v22 - v21;
      if (!v23)
        v25 = v24;
      if (v25 <= 0.000001)
        goto LABEL_30;
    }
    v26 = v9 < v17;
    if (v9 != v17)
    {
      v27 = v9 - v17;
      v28 = v17 - v9;
      if (!v26)
        v28 = v27;
      if (v28 > 0.000001)
        goto LABEL_28;
    }
    v29 = a3[1];
    v30 = a5[1];
    v31 = v29 < v30;
    if (v29 == v30)
      goto LABEL_30;
    v32 = v29 - v30;
    v33 = v30 - v29;
    if (!v31)
      v33 = v32;
    if (v33 <= 0.000001)
    {
LABEL_30:
      v38 = 8 * a1;
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      if (((8 * a1) & 0x8000000000000000) != 0)
        sub_22316E078();
      v39 = (char *)operator new(8 * a1);
      *a6 = v39;
      a6[2] = &v39[8 * ((uint64_t)(8 * a1) >> 3)];
      memcpy(v39, a2, v38 & 0xFFFFFFFFFFFFFFF8);
      a6[1] = &v39[8 * a1];
    }
    else
    {
LABEL_28:
      v34 = *(float32x2_t *)a3;
      v35 = *(float32x2_t *)a4;
      v51 = v34;
      v52 = v35;
      v36 = *(float32x2_t *)a5;
      v49 = v34;
      v50 = v36;
      if ((float)((float)((float)(v35.f32[0] - v34.f32[0]) * (float)(v34.f32[1] - v36.f32[1]))
                 - (float)((float)(v35.f32[1] - v34.f32[1]) * (float)(v34.f32[0] - v36.f32[0]))) <= 0.0)
      {
        v37 = &v50;
        v49 = v36;
      }
      else
      {
        v37 = &v52;
        v51 = v35;
      }
      *v37 = v34;
      sub_223F2C9EC(a1, (uint64_t)a2, &v51, (float32x2_t **)&__p);
      v40 = (float32x2_t *)__p;
      if (__p == v47)
        goto LABEL_38;
      sub_223F2C9EC((v47 - (_BYTE *)__p) >> 3, (uint64_t)__p, &v49, &v43);
      if (__p)
      {
        v47 = __p;
        operator delete(__p);
      }
      v40 = v43;
      v41 = v44;
      v42 = v45;
      __p = v43;
      v48 = v45;
      if (v43 == v44)
      {
LABEL_38:
        *a6 = 0;
        a6[1] = 0;
        a6[2] = 0;
        if (v40)
        {
          v47 = v40;
          operator delete(v40);
        }
      }
      else
      {
        *a6 = v43;
        a6[1] = v41;
        a6[2] = v42;
      }
    }
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void sub_223F2D664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_223F2D698(char *result, unint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  unint64_t *v25;
  unint64_t v26;
  float v27;
  unint64_t v28;
  float v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  unint64_t v35;
  float v36;
  unint64_t *v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  float v42;
  unint64_t v43;
  float v44;
  unint64_t *v45;
  unint64_t v46;
  float v47;
  unint64_t *v48;
  unint64_t v49;
  float v50;
  unint64_t v51;
  unint64_t v52;
  float v53;
  unint64_t v54;
  float v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  float v59;
  unint64_t v60;
  unint64_t *v61;
  BOOL v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  float v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  float v73;
  int64_t v74;
  int64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  float v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  float v84;
  unint64_t v85;
  unint64_t v86;
  float v87;
  unint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  float v93;
  uint64_t v94;
  unint64_t *v95;
  BOOL v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  float v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  float v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  float v115;
  unint64_t v116;
  unint64_t v117;
  float v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  float v124;
  unint64_t v125;
  unint64_t *v126;
  int64_t v127;
  unint64_t *v128;
  int64_t v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v126 = a2 - 3;
  v128 = a2 - 2;
  v11 = v9;
  v131 = a2;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v57 = *(a2 - 1);
        v133 = *v9;
        v58 = v133;
        v134 = v57;
        v59 = *((float *)sub_223F2E564(*a3, v57, &v134) + 6);
        result = sub_223F2E564(*a3, v58, &v133);
        if (v59 < *((float *)result + 6))
        {
          v60 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v60;
        }
        return result;
      case 3:
        return sub_223F2E184(v9, v9 + 1, v10, a3);
      case 4:
        return sub_223F2E84C(v9, v9 + 1, v9 + 2, v10, a3);
      case 5:
        return sub_223F2E978(v9, v9 + 1, v9 + 2, v9 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v61 = v9 + 1;
          v63 = v9 == a2 || v61 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v63)
            {
              v64 = 0;
              v65 = v9;
              do
              {
                v68 = *v65;
                v67 = v65[1];
                v65 = v61;
                v133 = v68;
                v134 = v67;
                v69 = *((float *)sub_223F2E564(*a3, v67, &v134) + 6);
                result = sub_223F2E564(*a3, v68, &v133);
                if (v69 < *((float *)result + 6))
                {
                  v70 = *v65;
                  v71 = v64;
                  do
                  {
                    *(unint64_t *)((char *)v9 + v71 + 8) = *(unint64_t *)((char *)v9 + v71);
                    if (!v71)
                    {
                      v66 = v9;
                      goto LABEL_71;
                    }
                    v133 = *(unint64_t *)((char *)v9 + v71 - 8);
                    v72 = v133;
                    v134 = v70;
                    v73 = *((float *)sub_223F2E564(*a3, v70, &v134) + 6);
                    result = sub_223F2E564(*a3, v72, &v133);
                    v71 -= 8;
                  }
                  while (v73 < *((float *)result + 6));
                  v66 = (unint64_t *)((char *)v9 + v71 + 8);
LABEL_71:
                  *v66 = v70;
                  a2 = v131;
                }
                v61 = v65 + 1;
                v64 += 8;
              }
              while (v65 + 1 != a2);
            }
          }
          else if (!v63)
          {
            do
            {
              v117 = *v9;
              v116 = v9[1];
              v9 = v61;
              v133 = v117;
              v134 = v116;
              v118 = *((float *)sub_223F2E564(*a3, v116, &v134) + 6);
              result = sub_223F2E564(*a3, v117, &v133);
              if (v118 < *((float *)result + 6))
              {
                v119 = *v9;
                v120 = v9;
                do
                {
                  v121 = v120;
                  v122 = *--v120;
                  *v121 = v122;
                  v133 = *(v121 - 2);
                  v123 = v133;
                  v134 = v119;
                  v124 = *((float *)sub_223F2E564(*a3, v119, &v134) + 6);
                  result = sub_223F2E564(*a3, v123, &v133);
                }
                while (v124 < *((float *)result + 6));
                *v120 = v119;
              }
              v61 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v125 = v12;
            v74 = (unint64_t)(v13 - 2) >> 1;
            v129 = v74;
            do
            {
              v75 = v74;
              if (v129 >= v74)
              {
                v76 = (2 * v74) | 1;
                v77 = &v9[v76];
                if (2 * v74 + 2 < v13)
                {
                  v78 = *v77;
                  v133 = v77[1];
                  v79 = v133;
                  v134 = v78;
                  v80 = *((float *)sub_223F2E564(*a3, v78, &v134) + 6);
                  if (v80 < *((float *)sub_223F2E564(*a3, v79, &v133) + 6))
                  {
                    ++v77;
                    v76 = 2 * v75 + 2;
                  }
                }
                v81 = &v9[v75];
                v82 = *v77;
                v133 = *v81;
                v83 = v133;
                v134 = v82;
                v84 = *((float *)sub_223F2E564(*a3, v82, &v134) + 6);
                result = sub_223F2E564(*a3, v83, &v133);
                if (v84 >= *((float *)result + 6))
                {
                  v127 = v75;
                  v85 = *v81;
                  do
                  {
                    v88 = v77;
                    *v81 = *v77;
                    if (v129 < v76)
                      break;
                    v89 = 2 * v76;
                    v76 = (2 * v76) | 1;
                    v77 = &v9[v76];
                    v90 = v89 + 2;
                    if (v89 + 2 < v13)
                    {
                      v91 = *v77;
                      v133 = v77[1];
                      v92 = v133;
                      v134 = v91;
                      v93 = *((float *)sub_223F2E564(*a3, v91, &v134) + 6);
                      if (v93 < *((float *)sub_223F2E564(*a3, v92, &v133) + 6))
                      {
                        ++v77;
                        v76 = v90;
                      }
                    }
                    v86 = *v77;
                    v133 = v85;
                    v134 = v86;
                    v87 = *((float *)sub_223F2E564(*a3, v86, &v134) + 6);
                    result = sub_223F2E564(*a3, v85, &v133);
                    v81 = v88;
                  }
                  while (v87 >= *((float *)result + 6));
                  *v88 = v85;
                  a2 = v131;
                  v75 = v127;
                }
              }
              v74 = v75 - 1;
            }
            while (v75);
            v94 = v125 >> 3;
            do
            {
              v132 = a2;
              v97 = 0;
              v130 = *v9;
              v98 = v9;
              do
              {
                v99 = v98;
                v98 += v97 + 1;
                v100 = 2 * v97;
                v97 = (2 * v97) | 1;
                v101 = v100 + 2;
                if (v100 + 2 < v94)
                {
                  v102 = *v98;
                  v133 = v98[1];
                  v103 = v133;
                  v134 = v102;
                  v104 = *((float *)sub_223F2E564(*a3, v102, &v134) + 6);
                  result = sub_223F2E564(*a3, v103, &v133);
                  if (v104 < *((float *)result + 6))
                  {
                    ++v98;
                    v97 = v101;
                  }
                }
                *v99 = *v98;
              }
              while (v97 <= (uint64_t)((unint64_t)(v94 - 2) >> 1));
              v105 = v132 - 1;
              if (v98 == v132 - 1)
              {
                v95 = v132 - 1;
                *v98 = v130;
              }
              else
              {
                *v98 = *v105;
                v95 = v132 - 1;
                *v105 = v130;
                v106 = (char *)v98 - (char *)v9 + 8;
                if (v106 >= 9)
                {
                  v107 = (((unint64_t)v106 >> 3) - 2) >> 1;
                  v108 = &v9[v107];
                  v109 = *v108;
                  v133 = *v98;
                  v110 = v133;
                  v134 = v109;
                  v111 = *((float *)sub_223F2E564(*a3, v109, &v134) + 6);
                  result = sub_223F2E564(*a3, v110, &v133);
                  if (v111 < *((float *)result + 6))
                  {
                    v112 = *v98;
                    do
                    {
                      v113 = v108;
                      *v98 = *v108;
                      if (!v107)
                        break;
                      v107 = (v107 - 1) >> 1;
                      v108 = &v9[v107];
                      v114 = *v108;
                      v133 = v112;
                      v134 = v114;
                      v115 = *((float *)sub_223F2E564(*a3, v114, &v134) + 6);
                      result = sub_223F2E564(*a3, v112, &v133);
                      v98 = v113;
                    }
                    while (v115 < *((float *)result + 6));
                    *v113 = v112;
                  }
                }
              }
              v96 = v94-- <= 2;
              a2 = v95;
            }
            while (!v96);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v9[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_223F2E184(v15, v9, v10, a3);
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        else
        {
          sub_223F2E184(v9, v15, v10, a3);
          v16 = v14;
          sub_223F2E184(v9 + 1, &v9[v16 - 1], v128, a3);
          sub_223F2E184(v9 + 2, &v9[v16 + 1], v126, a3);
          sub_223F2E184(&v9[v16 - 1], v15, &v9[v16 + 1], a3);
          v17 = *v9;
          *v9 = v9[v16];
          v9[v16] = v17;
          a2 = v131;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_11;
        }
        v18 = *(v9 - 1);
        v133 = *v9;
        v19 = v133;
        v134 = v18;
        v20 = *((float *)sub_223F2E564(*a3, v18, &v134) + 6);
        if (v20 >= *((float *)sub_223F2E564(*a3, v19, &v133) + 6))
        {
          v40 = *v9;
          v133 = *v10;
          v41 = v133;
          v134 = v40;
          v42 = *((float *)sub_223F2E564(*a3, v40, &v134) + 6);
          result = sub_223F2E564(*a3, v41, &v133);
          if (v42 >= *((float *)result + 6))
          {
            v45 = v9 + 1;
            do
            {
              v11 = v45;
              if (v45 >= a2)
                break;
              ++v45;
              v133 = *v11;
              v46 = v133;
              v134 = v40;
              v47 = *((float *)sub_223F2E564(*a3, v40, &v134) + 6);
              result = sub_223F2E564(*a3, v46, &v133);
            }
            while (v47 >= *((float *)result + 6));
          }
          else
          {
            v11 = v9;
            do
            {
              v43 = v11[1];
              ++v11;
              v133 = v43;
              v134 = v40;
              v44 = *((float *)sub_223F2E564(*a3, v40, &v134) + 6);
              result = sub_223F2E564(*a3, v43, &v133);
            }
            while (v44 >= *((float *)result + 6));
          }
          v48 = a2;
          if (v11 < a2)
          {
            v48 = a2;
            do
            {
              v49 = *--v48;
              v133 = v49;
              v134 = v40;
              v50 = *((float *)sub_223F2E564(*a3, v40, &v134) + 6);
              result = sub_223F2E564(*a3, v49, &v133);
            }
            while (v50 < *((float *)result + 6));
          }
          while (v11 < v48)
          {
            v51 = *v11;
            *v11 = *v48;
            *v48 = v51;
            do
            {
              v52 = v11[1];
              ++v11;
              v133 = v52;
              v134 = v40;
              v53 = *((float *)sub_223F2E564(*a3, v40, &v134) + 6);
            }
            while (v53 >= *((float *)sub_223F2E564(*a3, v52, &v133) + 6));
            do
            {
              v54 = *--v48;
              v133 = v54;
              v134 = v40;
              v55 = *((float *)sub_223F2E564(*a3, v40, &v134) + 6);
              result = sub_223F2E564(*a3, v54, &v133);
            }
            while (v55 < *((float *)result + 6));
          }
          v56 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v56;
          a5 = 0;
          *v56 = v40;
          continue;
        }
LABEL_11:
        v21 = 0;
        v22 = *v9;
        do
        {
          v23 = v9[v21 + 1];
          v133 = v22;
          v134 = v23;
          v24 = *((float *)sub_223F2E564(*a3, v23, &v134) + 6);
          ++v21;
        }
        while (v24 < *((float *)sub_223F2E564(*a3, v22, &v133) + 6));
        v25 = &v9[v21];
        if (v21 == 1)
        {
          a2 = v131;
          do
          {
            if (v25 >= a2)
              break;
            v28 = *--a2;
            v133 = v22;
            v134 = v28;
            v29 = *((float *)sub_223F2E564(*a3, v28, &v134) + 6);
          }
          while (v29 >= *((float *)sub_223F2E564(*a3, v22, &v133) + 6));
        }
        else
        {
          do
          {
            v26 = *--a2;
            v133 = v22;
            v134 = v26;
            v27 = *((float *)sub_223F2E564(*a3, v26, &v134) + 6);
          }
          while (v27 >= *((float *)sub_223F2E564(*a3, v22, &v133) + 6));
        }
        if (v25 >= a2)
        {
          v37 = v25 - 1;
          if (v25 - 1 == v9)
            goto LABEL_29;
LABEL_28:
          *v9 = *v37;
          goto LABEL_29;
        }
        v30 = &v9[v21];
        v31 = a2;
        do
        {
          v32 = *v30;
          *v30 = *v31;
          *v31 = v32;
          do
          {
            v33 = v30[1];
            ++v30;
            v133 = v22;
            v134 = v33;
            v34 = *((float *)sub_223F2E564(*a3, v33, &v134) + 6);
          }
          while (v34 < *((float *)sub_223F2E564(*a3, v22, &v133) + 6));
          do
          {
            v35 = *--v31;
            v133 = v22;
            v134 = v35;
            v36 = *((float *)sub_223F2E564(*a3, v35, &v134) + 6);
          }
          while (v36 >= *((float *)sub_223F2E564(*a3, v22, &v133) + 6));
        }
        while (v30 < v31);
        v37 = v30 - 1;
        if (v37 != v9)
          goto LABEL_28;
LABEL_29:
        *v37 = v22;
        v38 = v25 >= a2;
        a2 = v131;
        if (!v38)
        {
LABEL_33:
          result = (char *)sub_223F2D698(v9, v37, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v37 + 1;
          continue;
        }
        v39 = sub_223F2E32C(v9, v37, a3);
        v11 = v37 + 1;
        result = (char *)sub_223F2E32C(v37 + 1, v131, a3);
        if (!(_DWORD)result)
        {
          if (v39)
            continue;
          goto LABEL_33;
        }
        a2 = v37;
        if (!v39)
          goto LABEL_2;
        return result;
    }
  }
}

char *sub_223F2E184(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v8;
  float v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  char *result;
  unint64_t v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v8 = *a2;
  v25 = *a1;
  v26 = v8;
  v9 = *((float *)sub_223F2E564(*a4, v8, &v26) + 6);
  v10 = sub_223F2E564(*a4, v25, &v25);
  v11 = *a3;
  v12 = *a2;
  if (v9 >= *((float *)v10 + 6))
  {
    v25 = *a2;
    v26 = v11;
    v16 = *((float *)sub_223F2E564(*a4, v11, &v26) + 6);
    result = sub_223F2E564(*a4, v12, &v25);
    if (v16 < *((float *)result + 6))
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      v18 = *a2;
      v25 = *a1;
      v19 = v25;
      v26 = v18;
      v20 = *((float *)sub_223F2E564(*a4, v18, &v26) + 6);
      result = sub_223F2E564(*a4, v19, &v25);
      if (v20 < *((float *)result + 6))
      {
        v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  else
  {
    v25 = *a2;
    v26 = v11;
    v13 = *((float *)sub_223F2E564(*a4, v11, &v26) + 6);
    result = sub_223F2E564(*a4, v12, &v25);
    v15 = *a1;
    if (v13 >= *((float *)result + 6))
    {
      *a1 = *a2;
      *a2 = v15;
      v22 = *a3;
      v25 = v15;
      v26 = v22;
      v23 = *((float *)sub_223F2E564(*a4, v22, &v26) + 6);
      result = sub_223F2E564(*a4, v15, &v25);
      if (v23 < *((float *)result + 6))
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v15;
    }
  }
  return result;
}

BOOL sub_223F2E32C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  float v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  unint64_t v22;
  unint64_t v23;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v22 = *a1;
      v23 = v8;
      v9 = *((float *)sub_223F2E564(*a3, v8, &v23) + 6);
      if (v9 < *((float *)sub_223F2E564(*a3, v22, &v22) + 6))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_223F2E184(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_223F2E84C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_223F2E978(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_223F2E184(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v16 = *v11;
    v22 = v16;
    v23 = v15;
    v17 = *((float *)sub_223F2E564(*a3, v15, &v23) + 6);
    if (v17 < *((float *)sub_223F2E564(*a3, v16, &v22) + 6))
      break;
LABEL_13:
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
  v18 = *v12;
  v19 = v13;
  do
  {
    *(unint64_t *)((char *)a1 + v19 + 24) = *(unint64_t *)((char *)a1 + v19 + 16);
    if (v19 == -16)
    {
      *a1 = v18;
      if (++v14 != 8)
        goto LABEL_13;
      return v12 + 1 == a2;
    }
    v22 = *(unint64_t *)((char *)a1 + v19 + 8);
    v20 = v22;
    v23 = v18;
    v21 = *((float *)sub_223F2E564(*a3, v18, &v23) + 6);
    v19 -= 8;
  }
  while (v21 < *((float *)sub_223F2E564(*a3, v20, &v22) + 6));
  *(unint64_t *)((char *)a1 + v19 + 24) = v18;
  if (++v14 != 8)
    goto LABEL_13;
  return v12 + 1 == a2;
}

char *sub_223F2E564(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = (char *)operator new(0x48uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *(_QWORD *)v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_223F2E838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_223F2E84C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v10;
  float v11;
  char *result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  sub_223F2E184(a1, a2, a3, a5);
  v10 = *a4;
  v22 = *a3;
  v23 = v10;
  v11 = *((float *)sub_223F2E564(*a5, v10, &v23) + 6);
  result = sub_223F2E564(*a5, v22, &v22);
  if (v11 < *((float *)result + 6))
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    v14 = *a3;
    v22 = *a2;
    v15 = v22;
    v23 = v14;
    v16 = *((float *)sub_223F2E564(*a5, v14, &v23) + 6);
    result = sub_223F2E564(*a5, v15, &v22);
    if (v16 < *((float *)result + 6))
    {
      v17 = *a2;
      *a2 = *a3;
      *a3 = v17;
      v18 = *a2;
      v22 = *a1;
      v19 = v22;
      v23 = v18;
      v20 = *((float *)sub_223F2E564(*a5, v18, &v23) + 6);
      result = sub_223F2E564(*a5, v19, &v22);
      if (v20 < *((float *)result + 6))
      {
        v21 = *a1;
        *a1 = *a2;
        *a2 = v21;
      }
    }
  }
  return result;
}

char *sub_223F2E978(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  unint64_t v12;
  float v13;
  char *result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  sub_223F2E84C(a1, a2, a3, a4, a6);
  v12 = *a5;
  v28 = *a4;
  v29 = v12;
  v13 = *((float *)sub_223F2E564(*a6, v12, &v29) + 6);
  result = sub_223F2E564(*a6, v28, &v28);
  if (v13 < *((float *)result + 6))
  {
    v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    v16 = *a4;
    v28 = *a3;
    v17 = v28;
    v29 = v16;
    v18 = *((float *)sub_223F2E564(*a6, v16, &v29) + 6);
    result = sub_223F2E564(*a6, v17, &v28);
    if (v18 < *((float *)result + 6))
    {
      v19 = *a3;
      *a3 = *a4;
      *a4 = v19;
      v20 = *a3;
      v28 = *a2;
      v21 = v28;
      v29 = v20;
      v22 = *((float *)sub_223F2E564(*a6, v20, &v29) + 6);
      result = sub_223F2E564(*a6, v21, &v28);
      if (v22 < *((float *)result + 6))
      {
        v23 = *a2;
        *a2 = *a3;
        *a3 = v23;
        v24 = *a2;
        v28 = *a1;
        v25 = v28;
        v29 = v24;
        v26 = *((float *)sub_223F2E564(*a6, v24, &v29) + 6);
        result = sub_223F2E564(*a6, v25, &v28);
        if (v26 < *((float *)result + 6))
        {
          v27 = *a1;
          *a1 = *a2;
          *a2 = v27;
        }
      }
    }
  }
  return result;
}

char *sub_223F2EAF8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v14;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return (char *)v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return (char *)v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = (char *)operator new(0x48uLL);
  v15 = v14;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_QWORD *)v14 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v14 + 5) = *(_QWORD *)(a3 + 24);
  v14[48] = 0;
  v14[56] = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    *((_QWORD *)v14 + 6) = *(_QWORD *)(a3 + 32);
    v14[56] = 1;
  }
  v14[60] = 0;
  v14[68] = 0;
  if (*(_BYTE *)(a3 + 52))
  {
    *(_QWORD *)(v14 + 60) = *(_QWORD *)(a3 + 44);
    v14[68] = 1;
  }
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v7 && (float)(v17 * (float)v7) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v19)
    {
LABEL_30:
      *(_QWORD *)v15 = *v19;
LABEL_65:
      *v19 = v15;
      goto LABEL_66;
    }
  }
  else
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_41;
    if (prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v7)
LABEL_41:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v27 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v19)
          goto LABEL_30;
      }
      else
      {
        v3 = v6;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v19)
          goto LABEL_30;
      }
    }
    else
    {
      v3 = v27 & v6;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v6));
      if (v19)
        goto LABEL_30;
    }
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_223F2EE54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_223F2EE68(unint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, _QWORD *a6, _QWORD *a7)
{
  float v7;
  float v8;
  float v9;
  float v10;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t v18;
  uint8x8_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  char **v41;
  char **v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  int8x8_t v50;
  uint8x8_t v51;
  unint64_t v52;
  float **v53;
  float *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  int v61;
  unint64_t *v62;
  uint64_t *v63;
  unsigned int v64;
  float *v65;
  unint64_t v66;
  float *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unsigned int v75;
  _BYTE *v76;
  float *v77;
  char *v78;
  char *v79;
  float *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  float *v84;
  _OWORD *v85;
  float *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char *v90;
  unsigned int v91;
  float v92;
  BOOL v93;
  float v94;
  float v95;
  float v96;
  BOOL v97;
  float v98;
  float v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  unsigned int v109;
  _BYTE *v110;
  float *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  float *v115;
  uint64_t v116;
  unsigned int v117;
  unint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t *v130;
  unsigned int v131;
  unint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  float *v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD *v147;
  unint64_t *v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  float *v152;
  char *v153;
  uint64_t v154;
  float *v155;
  float *v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  float *v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v163;
  __int128 *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  float *v168;
  float *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  _OWORD *v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  _OWORD *v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  float *v190;
  uint64_t v191;
  uint64_t v192;
  _OWORD *v193;
  __int128 *v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _OWORD *v202;
  __int128 *v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  void *v207;
  unsigned int v208;
  unint64_t v209;
  float *v210;
  float *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  float *v219;
  char *v220;
  char *v221;
  float *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  float *v226;
  _OWORD *v227;
  float *v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  char *v232;
  unint64_t *v233;
  float *v234;
  float v235;
  BOOL v236;
  float v237;
  float v238;
  float v239;
  BOOL v240;
  float v241;
  float v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  _BYTE *v251;
  float *v252;
  char *v253;
  char *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  float *v258;
  _OWORD *v259;
  float *v260;
  uint64_t v261;
  __int128 v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  __int128 *v266;
  float *v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  _OWORD *v272;
  float *v273;
  uint64_t v274;
  __int128 v275;
  float *v276;
  float *v277;
  float v278;
  float v279;
  float v280;
  float v281;
  float v282;
  float v283;
  BOOL v284;
  float v285;
  float v286;
  unint64_t v287;
  _QWORD *v288;
  int64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  _BYTE *v294;
  _QWORD *v295;
  unint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  float *v300;
  _OWORD *v301;
  float *v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  char *v306;
  void *v307;
  char **v308;
  int64_t v309;
  uint64_t v310;
  unint64_t *v311;
  unint64_t *v312;
  char **v316;
  unsigned int v317;
  uint64_t v318;
  unsigned int v319;
  unint64_t *__p;
  unint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  void *v325;
  unint64_t *v326;
  unint64_t *v327;
  unint64_t v328;

  v328 = a5;
  v12 = (_QWORD *)a6[2];
  v326 = 0;
  v327 = 0;
  v325 = 0;
  v319 = a2;
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v17 = v12[2];
      v18 = (int8x8_t)a7[1];
      if (v18)
      {
        v19 = (uint8x8_t)vcnt_s8(v18);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          v20 = v12[2];
          if (v17 >= *(_QWORD *)&v18)
            v20 = v17 % *(_QWORD *)&v18;
        }
        else
        {
          v20 = (*(_QWORD *)&v18 - 1) & v17;
        }
        v21 = *(_QWORD **)(*a7 + 8 * v20);
        if (v21)
        {
          v22 = (_QWORD *)*v21;
          if (v22)
          {
            if (v19.u32[0] < 2uLL)
            {
              v23 = *(_QWORD *)&v18 - 1;
              while (1)
              {
                v25 = v22[1];
                if (v17 == v25)
                {
                  if (v22[2] == v17)
                    goto LABEL_6;
                }
                else if ((v25 & v23) != v20)
                {
                  goto LABEL_27;
                }
                v22 = (_QWORD *)*v22;
                if (!v22)
                  goto LABEL_27;
              }
            }
            do
            {
              v24 = v22[1];
              if (v17 == v24)
              {
                if (v22[2] == v17)
                  goto LABEL_6;
              }
              else
              {
                if (v24 >= *(_QWORD *)&v18)
                  v24 %= *(_QWORD *)&v18;
                if (v24 != v20)
                  break;
              }
              v22 = (_QWORD *)*v22;
            }
            while (v22);
          }
        }
      }
LABEL_27:
      v26 = bswap32(v17);
      v27 = HIWORD(v26);
      v28 = HIBYTE(v26);
      if (a2 != v27 && v28 != a2)
        goto LABEL_6;
      if (a2 == v27)
      {
        if (v15 >= v14)
        {
          v30 = ((char *)v15 - (char *)v13) >> 4;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60)
            goto LABEL_350;
          if (v14 - v13 > v31)
            v31 = v14 - v13;
          if ((unint64_t)((char *)v14 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v31;
          if (v32 >> 60)
            goto LABEL_351;
          v33 = (char *)operator new(16 * v32);
          v34 = &v33[16 * v30];
          *(_QWORD *)v34 = v12[4];
          *((_QWORD *)v34 + 1) = v12[2];
          if (v15 != v13)
          {
            v35 = &v33[16 * v30];
            do
            {
              v36 = v35 - 16;
              *((_OWORD *)v35 - 1) = *((_OWORD *)v15 - 1);
              v15 -= 2;
              v35 -= 16;
            }
            while (v15 != v13);
            goto LABEL_57;
          }
          v36 = &v33[16 * v30];
          v14 = (unint64_t *)&v33[16 * v32];
          v15 = (unint64_t *)(v34 + 16);
          if (v13)
LABEL_58:
            operator delete(v13);
          goto LABEL_59;
        }
        v16 = v12[4];
      }
      else
      {
        if (v15 >= v14)
        {
          v37 = ((char *)v15 - (char *)v13) >> 4;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 60)
          {
LABEL_350:
            v326 = v15;
            v327 = v14;
            v325 = v13;
            sub_2236EA0B4();
          }
          if (v14 - v13 > v38)
            v38 = v14 - v13;
          if ((unint64_t)((char *)v14 - (char *)v13) >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v38;
          if (v32 >> 60)
          {
LABEL_351:
            v327 = v14;
            v325 = v13;
            sub_223174E94();
          }
          v33 = (char *)operator new(16 * v32);
          v34 = &v33[16 * v37];
          *(_QWORD *)v34 = v12[5];
          *((_QWORD *)v34 + 1) = v12[2];
          if (v15 == v13)
          {
            v36 = &v33[16 * v37];
            v14 = (unint64_t *)&v33[16 * v32];
            v15 = (unint64_t *)(v34 + 16);
            if (v13)
              goto LABEL_58;
          }
          else
          {
            v39 = &v33[16 * v37];
            do
            {
              v36 = v39 - 16;
              *((_OWORD *)v39 - 1) = *((_OWORD *)v15 - 1);
              v15 -= 2;
              v39 -= 16;
            }
            while (v15 != v13);
LABEL_57:
            v14 = (unint64_t *)&v33[16 * v32];
            v15 = (unint64_t *)(v34 + 16);
            if (v13)
              goto LABEL_58;
          }
LABEL_59:
          v13 = (unint64_t *)v36;
          goto LABEL_5;
        }
        v16 = v12[5];
      }
      *v15 = v16;
      v15[1] = v12[2];
      v15 += 2;
LABEL_5:
      sub_223F061DC((uint64_t)a7, v12 + 2, v12 + 2);
LABEL_6:
      v12 = (_QWORD *)*v12;
      a2 = v319;
      if (!v12)
      {
        v326 = v15;
        v327 = v14;
        v325 = v13;
        goto LABEL_66;
      }
    }
  }
  v15 = 0;
  v13 = 0;
LABEL_66:
  v40 = 126 - 2 * __clz(((char *)v15 - (char *)v13) >> 4);
  v41 = (char **)(a4 + 24 * a2);
  v42 = v41 + 1;
  if (v15 == v13)
    v43 = 0;
  else
    v43 = v40;
  v324 = (v41[1] - *v41) >> 3;
  v322 = &v328;
  v323 = &v324;
  sub_223F30360((unint64_t)v13, v15, &v322, v43, 1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v316 = v41;
  v44 = *v41;
  v45 = v328;
  v46 = &(*v41)[8 * (int)v328];
  v47 = (unint64_t *)v325;
  v312 = v326;
  if (v325 != v326)
  {
    v308 = v41 + 1;
    v48 = a6;
    v311 = a1;
    while (1)
    {
      if (*v47 < v328)
        v46 = *v316;
      v49 = v47[1];
      v50 = (int8x8_t)v48[1];
      if (!*(_QWORD *)&v50)
        goto LABEL_94;
      v51 = (uint8x8_t)vcnt_s8(v50);
      v51.i16[0] = vaddlv_u8(v51);
      if (v51.u32[0] > 1uLL)
      {
        v52 = v47[1];
        if (v49 >= *(_QWORD *)&v50)
          v52 = v49 % *(_QWORD *)&v50;
      }
      else
      {
        v52 = (*(_QWORD *)&v50 - 1) & v49;
      }
      v53 = *(float ***)(*v48 + 8 * v52);
      if (v53)
      {
        v54 = *v53;
        if (*v53)
        {
          if (v51.u32[0] < 2uLL)
          {
            v55 = *(_QWORD *)&v50 - 1;
            while (1)
            {
              v57 = *((_QWORD *)v54 + 1);
              if (v49 == v57)
              {
                if (*((_QWORD *)v54 + 2) == v49)
                  goto LABEL_95;
              }
              else if ((v57 & v55) != v52)
              {
                goto LABEL_94;
              }
              v54 = *(float **)v54;
              if (!v54)
                goto LABEL_95;
            }
          }
          do
          {
            v56 = *((_QWORD *)v54 + 1);
            if (v49 == v56)
            {
              if (*((_QWORD *)v54 + 2) == v49)
                break;
            }
            else
            {
              if (v56 >= *(_QWORD *)&v50)
                v56 %= *(_QWORD *)&v50;
              if (v56 != v52)
                goto LABEL_94;
            }
            v54 = *(float **)v54;
          }
          while (v54);
        }
      }
      else
      {
LABEL_94:
        v54 = 0;
      }
LABEL_95:
      v58 = (uint64_t)&(*v316)[8 * (int)*v47];
      sub_22367C3A8(a1, a1[1], v46, (char *)(v58 + 8), (v58 + 8 - (uint64_t)v46) >> 3);
      v59 = bswap32(v49) >> 16;
      LODWORD(v8) &= 0xFFFFFF00;
      LODWORD(v10) &= 0xFFFFFF00;
      if (v319 == v59)
      {
        if (*((_BYTE *)v54 + 56))
        {
          v8 = v54[12];
          v7 = v54[13];
          v60 = 1;
          if (*((_BYTE *)v54 + 68))
            goto LABEL_98;
LABEL_103:
          v61 = 0;
        }
        else
        {
          v60 = 0;
          if (!*((_BYTE *)v54 + 68))
            goto LABEL_103;
LABEL_98:
          v10 = v54[15];
          v9 = v54[16];
          v61 = 1;
        }
        sub_223F2EE68(&v322, v59 >> 8, a3, a4, *((_QWORD *)v54 + 5), v48, a7);
        goto LABEL_108;
      }
      if (*((_BYTE *)v54 + 68))
      {
        v8 = v54[15];
        v7 = v54[16];
        v60 = 1;
        if (!*((_BYTE *)v54 + 56))
          goto LABEL_106;
      }
      else
      {
        v60 = 0;
        if (!*((_BYTE *)v54 + 56))
        {
LABEL_106:
          v61 = 0;
          goto LABEL_107;
        }
      }
      v10 = v54[12];
      v9 = v54[13];
      v61 = 1;
LABEL_107:
      sub_223F2EE68(&v322, v59, a3, a4, *((_QWORD *)v54 + 4), v48, a7);
LABEL_108:
      v62 = v322;
      v63 = v323;
      v64 = v61;
      v65 = (float *)a1[1];
      __p = v322;
      if (v60)
      {
        v66 = a1[2];
        if ((unint64_t)v65 < v66)
        {
          *v65 = v8;
          v65[1] = v7;
          v67 = v65 + 2;
LABEL_132:
          a1[1] = (unint64_t)v67;
          v65 = v67;
          goto LABEL_133;
        }
        v68 = *a1;
        v69 = (uint64_t)v65 - *a1;
        v70 = v69 >> 3;
        v71 = (v69 >> 3) + 1;
        if (v71 >> 61)
          goto LABEL_346;
        v72 = v66 - v68;
        if (v72 >> 2 > v71)
          v71 = v72 >> 2;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        if (v73)
        {
          if (v73 >> 61)
            goto LABEL_349;
          v74 = v47;
          v75 = v64;
          v76 = operator new(8 * v73);
          v64 = v75;
          v47 = v74;
          a1 = v311;
          v77 = (float *)&v76[8 * v70];
          *v77 = v8;
          v77[1] = v7;
          v78 = (char *)v65 - v68;
          if (v65 != (float *)v68)
          {
LABEL_120:
            v79 = v78 - 8;
            if ((unint64_t)(v78 - 8) < 0x58)
            {
              v80 = v77;
              goto LABEL_129;
            }
            v80 = v77;
            if ((unint64_t)((char *)v65 - v76 - v69) < 0x20)
              goto LABEL_357;
            v82 = ((unint64_t)v79 >> 3) + 1;
            v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v84 = &v65[v83 / 0xFFFFFFFFFFFFFFFCLL];
            v80 = &v77[v83 / 0xFFFFFFFFFFFFFFFCLL];
            v85 = &v76[8 * v70 - 16];
            v86 = v65 - 4;
            v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v88 = *(_OWORD *)v86;
              *(v85 - 1) = *((_OWORD *)v86 - 1);
              *v85 = v88;
              v85 -= 2;
              v86 -= 8;
              v87 -= 4;
            }
            while (v87);
            v65 = v84;
            if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_357:
              do
              {
LABEL_129:
                v89 = *((_QWORD *)v65 - 1);
                v65 -= 2;
                *((_QWORD *)v80 - 1) = v89;
                v80 -= 2;
              }
              while (v65 != (float *)v68);
            }
            v65 = (float *)*a1;
            v90 = &v76[8 * v73];
            v67 = v77 + 2;
            *a1 = (unint64_t)v80;
            a1[1] = (unint64_t)(v77 + 2);
            a1[2] = (unint64_t)v90;
            v62 = __p;
            if (!v65)
              goto LABEL_132;
LABEL_131:
            v91 = v64;
            operator delete(v65);
            v64 = v91;
            goto LABEL_132;
          }
        }
        else
        {
          v76 = 0;
          v77 = (float *)(8 * v70);
          *v77 = v8;
          v77[1] = v7;
          v78 = (char *)v65 - v68;
          if (v65 != (float *)v68)
            goto LABEL_120;
        }
        v81 = &v76[8 * v73];
        v67 = v77 + 2;
        *a1 = (unint64_t)v77;
        a1[1] = (unint64_t)(v77 + 2);
        a1[2] = (unint64_t)v81;
        v62 = __p;
        if (!v65)
          goto LABEL_132;
        goto LABEL_131;
      }
LABEL_133:
      v318 = v58;
      v317 = v60;
      if (v64)
      {
        v92 = *(v65 - 2);
        v93 = v92 < v10;
        if (v92 != v10)
        {
          v94 = v92 - v10;
          v95 = v10 - v92;
          if (!v93)
            v95 = v94;
          if (v95 > 0.000001)
            goto LABEL_142;
        }
        v96 = *(v65 - 1);
        v97 = v96 < v9;
        if (v96 != v9)
        {
          v98 = v96 - v9;
          v99 = v9 - v96;
          if (!v97)
            v99 = v98;
          if (v99 > 0.000001)
          {
LABEL_142:
            v100 = a1[2];
            if ((unint64_t)v65 < v100)
            {
              *v65 = v10;
              v65[1] = v9;
              v101 = (uint64_t)(v65 + 2);
LABEL_162:
              a1[1] = v101;
              v65 = (float *)v101;
              goto LABEL_163;
            }
            v102 = *a1;
            v103 = (uint64_t)v65 - *a1;
            v104 = v103 >> 3;
            v105 = (v103 >> 3) + 1;
            if (v105 >> 61)
LABEL_346:
              sub_22316E078();
            v106 = v100 - v102;
            if (v106 >> 2 > v105)
              v105 = v106 >> 2;
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
              v107 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v107 = v105;
            if (v107)
            {
              if (v107 >> 61)
LABEL_349:
                sub_223174E94();
              v108 = v47;
              v109 = v64;
              v110 = operator new(8 * v107);
              v64 = v109;
              v47 = v108;
              a1 = v311;
              v111 = (float *)&v110[8 * v104];
              v112 = &v110[8 * v107];
              *v111 = v10;
              v111[1] = v9;
              v101 = (uint64_t)(v111 + 2);
              v113 = (char *)v65 - v102;
              if (v65 != (float *)v102)
              {
LABEL_153:
                v114 = (unint64_t)(v113 - 8);
                if (v114 < 0x58 || (unint64_t)((char *)v65 - &v110[v103]) < 0x20)
                {
                  v115 = v65;
                  v62 = __p;
                  goto LABEL_156;
                }
                v270 = (v114 >> 3) + 1;
                v271 = 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL);
                v115 = &v65[v271 / 0xFFFFFFFFFFFFFFFCLL];
                v111 = (float *)((char *)v111 - v271);
                v272 = &v110[8 * v104 - 16];
                v273 = v65 - 4;
                v274 = v270 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v275 = *(_OWORD *)v273;
                  *(v272 - 1) = *((_OWORD *)v273 - 1);
                  *v272 = v275;
                  v272 -= 2;
                  v273 -= 8;
                  v274 -= 4;
                }
                while (v274);
                v62 = __p;
                if (v270 != (v270 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_156:
                    v116 = *((_QWORD *)v115 - 1);
                    v115 -= 2;
                    *((_QWORD *)v111 - 1) = v116;
                    v111 -= 2;
                  }
                  while (v115 != (float *)v102);
                }
                v65 = (float *)*a1;
                *a1 = (unint64_t)v111;
                a1[1] = v101;
                a1[2] = (unint64_t)v112;
                if (!v65)
                  goto LABEL_162;
LABEL_161:
                v117 = v64;
                operator delete(v65);
                v64 = v117;
                goto LABEL_162;
              }
            }
            else
            {
              v110 = 0;
              v111 = (float *)(8 * v104);
              v112 = 0;
              *v111 = v10;
              v111[1] = v9;
              v101 = 8 * v104 + 8;
              v113 = (char *)v65 - v102;
              if (v65 != (float *)v102)
                goto LABEL_153;
            }
            *a1 = (unint64_t)v111;
            a1[1] = v101;
            a1[2] = (unint64_t)v112;
            v62 = __p;
            goto LABEL_161;
          }
        }
      }
LABEL_163:
      v118 = &v62[v64];
      v119 = (char *)v63 - (char *)v118;
      if ((char *)v63 - (char *)v118 < 1)
        goto LABEL_237;
      v120 = v64;
      v121 = v119 >> 3;
      v122 = *a1;
      v123 = (uint64_t)v65 - *a1;
      v124 = v123 >> 3;
      v125 = (float *)(*a1 + (v123 & 0xFFFFFFFFFFFFFFF8));
      v126 = a1[2];
      if (v119 >> 3 > (uint64_t)(v126 - (_QWORD)v65) >> 3)
      {
        v127 = v124 + v121;
        if ((unint64_t)(v124 + v121) >> 61)
          sub_22316E078();
        v128 = v126 - v122;
        if (v128 >> 2 > v127)
          v127 = v128 >> 2;
        if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
          v129 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v129 = v127;
        if (v129)
        {
          v309 = (char *)v63 - (char *)v118;
          v310 = v119 >> 3;
          if (v129 >> 61)
            sub_223174E94();
          v130 = v47;
          v131 = v64;
          v132 = v129;
          v133 = operator new(8 * v129);
          v64 = v131;
          v47 = v130;
          v121 = v310;
          a1 = v311;
          v124 = v123 >> 3;
          v129 = v132;
          v119 = (char *)v63 - (char *)v118;
          v134 = (uint64_t)&v133[8 * (v123 >> 3)];
          v135 = (_QWORD *)(v134 + 8 * v310);
          v136 = v309 - 8;
          if ((unint64_t)(v309 - 8) < 0x38)
          {
LABEL_174:
            v137 = (_QWORD *)v134;
            goto LABEL_218;
          }
        }
        else
        {
          v133 = 0;
          v134 = 8 * v124;
          v135 = (_QWORD *)(8 * v124 + 8 * v121);
          v136 = v119 - 8;
          if ((unint64_t)(v119 - 8) < 0x38)
            goto LABEL_174;
        }
        v137 = (_QWORD *)v134;
        if ((unint64_t)(&v133[v123 & 0xFFFFFFFFFFFFFFF8] - (_BYTE *)v118) < 0x20)
          goto LABEL_358;
        v180 = (v136 >> 3) + 1;
        v181 = 8 * (v180 & 0x3FFFFFFFFFFFFFFCLL);
        v137 = (_QWORD *)(v134 + v181);
        v118 = (unint64_t *)((char *)v118 + v181);
        v182 = &__p[v120 + 2];
        v183 = &v133[8 * v124 + 16];
        v184 = v180 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v185 = *(_OWORD *)v182;
          *(v183 - 1) = *((_OWORD *)v182 - 1);
          *v183 = v185;
          v182 += 4;
          v183 += 2;
          v184 -= 4;
        }
        while (v184);
        if (v180 != (v180 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_358:
          do
          {
LABEL_218:
            v186 = *v118++;
            *v137++ = v186;
          }
          while (v137 != v135);
        }
        v187 = *a1;
        if ((float *)*a1 != v125)
        {
          v188 = v122 + (v123 & 0xFFFFFFFFFFFFFFF8);
          v189 = v188 - v187 - 8;
          if (v189 < 0x68)
          {
            v190 = v125;
            goto LABEL_226;
          }
          v190 = v125;
          if (v188 - (unint64_t)&v133[v123 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_359;
          v191 = (v189 >> 3) + 1;
          v192 = 8 * (v191 & 0x3FFFFFFFFFFFFFFCLL);
          v190 = &v125[v192 / 0xFFFFFFFFFFFFFFFCLL];
          v134 -= v192;
          v193 = &v133[8 * v124 - 16];
          v194 = (__int128 *)(v122 + 8 * v124 - 16);
          v195 = v191 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v196 = *v194;
            *(v193 - 1) = *(v194 - 1);
            *v193 = v196;
            v193 -= 2;
            v194 -= 2;
            v195 -= 4;
          }
          while (v195);
          if (v191 != (v191 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_359:
            do
            {
LABEL_226:
              v197 = *((_QWORD *)v190 - 1);
              v190 -= 2;
              *(_QWORD *)(v134 - 8) = v197;
              v134 -= 8;
            }
            while (v190 != (float *)v187);
          }
          v65 = (float *)a1[1];
        }
        if (v65 != v125)
        {
          v198 = (v123 & 0xFFFFFFFFFFFFFFF8) + v122;
          v199 = (unint64_t)v65 - v198 - 8;
          if (v199 < 0x68)
            goto LABEL_360;
          if ((unint64_t)&v133[(v123 & 0xFFFFFFFFFFFFFFF8) + (v119 & 0xFFFFFFFFFFFFFFF8) - v198] < 0x20)
            goto LABEL_360;
          v200 = (v199 >> 3) + 1;
          v201 = 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
          v125 = (float *)((char *)v125 + v201);
          v135 = (_QWORD *)((char *)v135 + v201);
          v202 = &v133[8 * v124 + 16 + 8 * v121];
          v203 = (__int128 *)(v122 + 8 * v124 + 16);
          v204 = v200 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v205 = *v203;
            *(v202 - 1) = *(v203 - 1);
            *v202 = v205;
            v202 += 2;
            v203 += 2;
            v204 -= 4;
          }
          while (v204);
          if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_360:
            do
            {
              v206 = *(_QWORD *)v125;
              v125 += 2;
              *v135++ = v206;
            }
            while (v125 != v65);
          }
        }
        v207 = (void *)*a1;
        *a1 = v134;
        a1[1] = (unint64_t)v135;
        a1[2] = (unint64_t)&v133[8 * v129];
        if (v207)
        {
          v208 = v64;
          operator delete(v207);
          v64 = v208;
        }
        goto LABEL_237;
      }
      v138 = (char *)v65 - (char *)v125;
      v139 = ((char *)v65 - (char *)v125) >> 3;
      if (v139 >= v121)
      {
        v140 = &v118[v121];
        v144 = v65;
        goto LABEL_188;
      }
      v140 = &v118[v139];
      if (v140 == (unint64_t *)v63)
      {
        v144 = v65;
        a1[1] = (unint64_t)v65;
        if (v138 < 1)
          goto LABEL_237;
LABEL_188:
        v152 = &v125[2 * v121];
        v153 = (char *)((char *)v144 - (char *)v152);
        v154 = ((char *)v144 - (char *)v152) >> 3;
        v155 = &v144[-2 * v121];
        v156 = v144;
        if (v155 < v65)
        {
          v157 = &v153[v123 & 0xFFFFFFFFFFFFFFF8];
          v158 = (unint64_t)&v157[v122 + 8];
          if ((unint64_t)v65 > v158)
            v158 = (unint64_t)v65;
          v159 = v158 + ~v122 - (_QWORD)v157;
          v160 = &v144[-2 * v121];
          v156 = v144;
          if (v159 < 0x58)
            goto LABEL_361;
          v160 = &v144[-2 * v121];
          v156 = v144;
          if ((unint64_t)v152 - (v123 & 0xFFFFFFFFFFFFFFF8) - v122 < 0x20)
            goto LABEL_361;
          v161 = (v159 >> 3) + 1;
          v162 = 2 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
          v160 = &v155[v162];
          v156 = &v144[v162];
          v163 = v144 + 4;
          v164 = (__int128 *)(v122 + 8 * v154 + 8 * v124 + 16);
          v165 = v161 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v166 = *v164;
            *(v163 - 1) = *(v164 - 1);
            *v163 = v166;
            v163 += 2;
            v164 += 2;
            v165 -= 4;
          }
          while (v165);
          if (v161 != (v161 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_361:
            do
            {
              v167 = *(_QWORD *)v160;
              v160 += 2;
              *(_QWORD *)v156 = v167;
              v156 += 2;
            }
            while (v160 < v65);
          }
        }
        a1[1] = (unint64_t)v156;
        if (v144 != v152)
        {
          if ((unint64_t)(v153 - 8) < 0x78
            || v122 + (v123 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)v152 < 0x20)
          {
            v168 = v144;
            goto LABEL_201;
          }
          v264 = ((unint64_t)(v153 - 8) >> 3) + 1;
          v265 = 8 * (v264 & 0x3FFFFFFFFFFFFFFCLL);
          v168 = &v144[v265 / 0xFFFFFFFFFFFFFFFCLL];
          v155 = (float *)((char *)v155 - v265);
          v266 = (__int128 *)(v122 + 8 * v154 + 8 * v124 - 16);
          v267 = v144 - 4;
          v268 = v264 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v269 = *v266;
            *((_OWORD *)v267 - 1) = *(v266 - 1);
            *(_OWORD *)v267 = v269;
            v266 -= 2;
            v267 -= 8;
            v268 -= 4;
          }
          while (v268);
          if (v264 != (v264 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_201:
            v169 = v168 - 2;
            do
            {
              v170 = *((_QWORD *)v155 - 1);
              v155 -= 2;
              *(_QWORD *)v169 = v170;
              v169 -= 2;
            }
            while (v155 != v125);
          }
        }
        if (v140 != v118)
        {
          v171 = -8;
          if (!v64)
            v171 = 0;
          v172 = (char *)v140 - (char *)__p + v171 - 8;
          if (v172 < 0x18)
            goto LABEL_362;
          if ((unint64_t)((char *)v125 - (char *)v118) < 0x20)
            goto LABEL_362;
          v173 = (v172 >> 3) + 1;
          v174 = 8 * (v173 & 0x3FFFFFFFFFFFFFFCLL);
          v125 = (float *)((char *)v125 + v174);
          v118 = (unint64_t *)((char *)v118 + v174);
          v175 = &__p[v64 + 2];
          v176 = (_OWORD *)(v122 + 8 * v124 + 16);
          v177 = v173 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v178 = *(_OWORD *)v175;
            *(v176 - 1) = *((_OWORD *)v175 - 1);
            *v176 = v178;
            v175 += 4;
            v176 += 2;
            v177 -= 4;
          }
          while (v177);
          if (v173 != (v173 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_362:
            do
            {
              v179 = *v118++;
              *(_QWORD *)v125 = v179;
              v125 += 2;
            }
            while (v118 != v140);
          }
        }
        goto LABEL_237;
      }
      v141 = -8;
      if (!v64)
        v141 = 0;
      v142 = (char *)v63 - (char *)__p - v138 + v141 - 8;
      v143 = (uint64_t *)&v118[v139];
      v144 = v65;
      if (v142 < 0x58)
        goto LABEL_363;
      v143 = (uint64_t *)&v118[v139];
      v144 = v65;
      if ((unint64_t)-((char *)__p - (char *)v125 + 8 * v64) < 0x20)
        goto LABEL_363;
      v145 = (v142 >> 3) + 1;
      v146 = 2 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
      v143 = (uint64_t *)&v140[(unint64_t)v146 / 2];
      v144 = &v65[v146];
      v147 = v65 + 4;
      v148 = &__p[v139 + 2 + v64];
      v149 = v145 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v150 = *(_OWORD *)v148;
        *(v147 - 1) = *((_OWORD *)v148 - 1);
        *v147 = v150;
        v147 += 2;
        v148 += 4;
        v149 -= 4;
      }
      while (v149);
      if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_363:
        do
        {
          v151 = *v143++;
          *(_QWORD *)v144 = v151;
          v144 += 2;
        }
        while (v143 != v63);
      }
      a1[1] = (unint64_t)v144;
      if (v138 >= 1)
        goto LABEL_188;
LABEL_237:
      v48 = a6;
      if (v64)
      {
        v210 = (float *)a1[1];
        v209 = a1[2];
        if ((unint64_t)v210 < v209)
        {
          *v210 = v10;
          v210[1] = v9;
          v211 = v210 + 2;
LABEL_261:
          a1[1] = (unint64_t)v211;
          goto LABEL_262;
        }
        v212 = *a1;
        v213 = (uint64_t)v210 - *a1;
        v214 = v213 >> 3;
        v215 = (v213 >> 3) + 1;
        if (v215 >> 61)
          goto LABEL_345;
        v216 = v209 - v212;
        if (v216 >> 2 > v215)
          v215 = v216 >> 2;
        if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFF8)
          v217 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v217 = v215;
        if (v217)
        {
          if (v217 >> 61)
            goto LABEL_348;
          v218 = operator new(8 * v217);
          v219 = (float *)&v218[8 * v214];
          *v219 = v10;
          v219[1] = v9;
          v220 = (char *)v210 - v212;
          if (v210 != (float *)v212)
          {
LABEL_249:
            v221 = v220 - 8;
            if ((unint64_t)(v220 - 8) < 0x58)
            {
              v222 = v219;
              goto LABEL_258;
            }
            v222 = v219;
            if ((unint64_t)((char *)v210 - &v218[v213]) < 0x20)
              goto LABEL_364;
            v224 = ((unint64_t)v221 >> 3) + 1;
            v225 = 8 * (v224 & 0x3FFFFFFFFFFFFFFCLL);
            v226 = &v210[v225 / 0xFFFFFFFFFFFFFFFCLL];
            v222 = &v219[v225 / 0xFFFFFFFFFFFFFFFCLL];
            v227 = &v218[8 * v214 - 16];
            v228 = v210 - 4;
            v229 = v224 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v230 = *(_OWORD *)v228;
              *(v227 - 1) = *((_OWORD *)v228 - 1);
              *v227 = v230;
              v227 -= 2;
              v228 -= 8;
              v229 -= 4;
            }
            while (v229);
            v210 = v226;
            if (v224 != (v224 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_364:
              do
              {
LABEL_258:
                v231 = *((_QWORD *)v210 - 1);
                v210 -= 2;
                *((_QWORD *)v222 - 1) = v231;
                v222 -= 2;
              }
              while (v210 != (float *)v212);
            }
            v210 = (float *)*a1;
            v232 = &v218[8 * v217];
            v211 = v219 + 2;
            *a1 = (unint64_t)v222;
            a1[1] = (unint64_t)(v219 + 2);
            a1[2] = (unint64_t)v232;
            if (!v210)
              goto LABEL_261;
LABEL_260:
            operator delete(v210);
            goto LABEL_261;
          }
        }
        else
        {
          v218 = 0;
          v219 = (float *)(8 * v214);
          *v219 = v10;
          v219[1] = v9;
          v220 = (char *)v210 - v212;
          if (v210 != (float *)v212)
            goto LABEL_249;
        }
        v223 = &v218[8 * v217];
        v211 = v219 + 2;
        *a1 = (unint64_t)v219;
        a1[1] = (unint64_t)(v219 + 2);
        a1[2] = (unint64_t)v223;
        if (!v210)
          goto LABEL_261;
        goto LABEL_260;
      }
LABEL_262:
      v233 = __p;
      if (!v317)
        goto LABEL_297;
      v234 = (float *)a1[1];
      v235 = *(v234 - 2);
      v236 = v235 < v8;
      if (v235 == v8)
        goto LABEL_270;
      v237 = v235 - v8;
      v238 = v8 - v235;
      if (!v236)
        v238 = v237;
      if (v238 <= 0.000001)
      {
LABEL_270:
        v239 = *(v234 - 1);
        v240 = v239 < v7;
        if (v239 == v7)
          goto LABEL_297;
        v241 = v239 - v7;
        v242 = v7 - v239;
        if (!v240)
          v242 = v241;
        if (v242 <= 0.000001)
          goto LABEL_297;
      }
      v243 = a1[2];
      if ((unint64_t)v234 >= v243)
      {
        v245 = *a1;
        v246 = (uint64_t)v234 - *a1;
        v247 = v246 >> 3;
        v248 = (v246 >> 3) + 1;
        if (v248 >> 61)
LABEL_345:
          sub_22316E078();
        v249 = v243 - v245;
        if (v249 >> 2 > v248)
          v248 = v249 >> 2;
        if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF8)
          v250 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v250 = v248;
        if (v250)
        {
          if (v250 >> 61)
LABEL_348:
            sub_223174E94();
          v251 = operator new(8 * v250);
          v252 = (float *)&v251[8 * v247];
          v253 = &v251[8 * v250];
          *v252 = v8;
          v252[1] = v7;
          v244 = (uint64_t)(v252 + 2);
          v254 = (char *)v234 - v245;
          if (v234 != (float *)v245)
          {
LABEL_282:
            v255 = (unint64_t)(v254 - 8);
            if (v255 < 0x58)
              goto LABEL_365;
            if ((unint64_t)((char *)v234 - &v251[v246]) < 0x20)
              goto LABEL_365;
            v256 = (v255 >> 3) + 1;
            v257 = 8 * (v256 & 0x3FFFFFFFFFFFFFFCLL);
            v258 = &v234[v257 / 0xFFFFFFFFFFFFFFFCLL];
            v252 = (float *)((char *)v252 - v257);
            v259 = &v251[8 * v247 - 16];
            v260 = v234 - 4;
            v261 = v256 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v262 = *(_OWORD *)v260;
              *(v259 - 1) = *((_OWORD *)v260 - 1);
              *v259 = v262;
              v259 -= 2;
              v260 -= 8;
              v261 -= 4;
            }
            while (v261);
            v234 = v258;
            if (v256 != (v256 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_365:
              do
              {
                v263 = *((_QWORD *)v234 - 1);
                v234 -= 2;
                *((_QWORD *)v252 - 1) = v263;
                v252 -= 2;
              }
              while (v234 != (float *)v245);
            }
            v234 = (float *)*a1;
            *a1 = (unint64_t)v252;
            a1[1] = v244;
            a1[2] = (unint64_t)v253;
            if (!v234)
              goto LABEL_295;
            goto LABEL_294;
          }
        }
        else
        {
          v251 = 0;
          v252 = (float *)(8 * v247);
          v253 = 0;
          *v252 = v8;
          v252[1] = v7;
          v244 = 8 * v247 + 8;
          v254 = (char *)v234 - v245;
          if (v234 != (float *)v245)
            goto LABEL_282;
        }
        *a1 = (unint64_t)v252;
        a1[1] = v244;
        a1[2] = (unint64_t)v253;
LABEL_294:
        operator delete(v234);
LABEL_295:
        v233 = __p;
        goto LABEL_296;
      }
      *v234 = v8;
      v234[1] = v7;
      v244 = (uint64_t)(v234 + 2);
LABEL_296:
      a1[1] = v244;
LABEL_297:
      if (v233)
        operator delete(v233);
      v46 = (char *)(v318 + 8 * v317);
      v47 += 2;
      if (v47 == v312)
      {
        v44 = *v316;
        v45 = v328;
        v42 = v308;
        break;
      }
    }
  }
  if ((int)((unint64_t)(v46 - v44) >> 3) >= (int)v45)
  {
    sub_22367C3A8(a1, a1[1], v46, *v42, (*v42 - v46) >> 3);
    v44 = *v316;
    v45 = v328;
    v46 = *v316;
  }
  if (v45)
    sub_22367C3A8(a1, a1[1], v46, &v44[8 * (int)v45], (&v44[8 * (int)v45] - v46) >> 3);
  v276 = (float *)*a1;
  v277 = (float *)a1[1];
  if ((float *)*a1 != v277)
  {
    v278 = *v276;
    v279 = *(v277 - 2);
    if (*v276 != v279)
    {
      v280 = v278 - v279;
      v281 = v279 - v278;
      if (*v276 >= v279)
        v281 = v280;
      if (v281 > 0.000001)
        goto LABEL_321;
    }
    v282 = v276[1];
    v283 = *(v277 - 1);
    v284 = v282 < v283;
    if (v282 != v283)
    {
      v285 = v282 - v283;
      v286 = v283 - v282;
      if (!v284)
        v286 = v285;
      if (v286 > 0.000001)
      {
LABEL_321:
        v287 = a1[2];
        if ((unint64_t)v277 < v287)
        {
          *(_QWORD *)v277 = *(_QWORD *)v276;
          v288 = v277 + 2;
LABEL_341:
          a1[1] = (unint64_t)v288;
          goto LABEL_342;
        }
        v289 = (char *)v277 - (char *)v276;
        v290 = ((char *)v277 - (char *)v276) >> 3;
        v291 = v290 + 1;
        if ((unint64_t)(v290 + 1) >> 61)
          sub_22316E078();
        v292 = v287 - (_QWORD)v276;
        if (v292 >> 2 > v291)
          v291 = v292 >> 2;
        if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF8)
          v293 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v293 = v291;
        if (v293)
        {
          if (v293 >> 61)
            sub_223174E94();
          v294 = operator new(8 * v293);
          v295 = &v294[8 * v290];
          *v295 = *(_QWORD *)v276;
          v296 = v289 - 8;
          if ((unint64_t)(v289 - 8) < 0x58)
            goto LABEL_332;
        }
        else
        {
          v294 = 0;
          v295 = (_QWORD *)(8 * v290);
          *(_QWORD *)(8 * v290) = *(_QWORD *)v276;
          v296 = v289 - 8;
          if ((unint64_t)(v289 - 8) < 0x58)
          {
LABEL_332:
            v297 = v295;
            goto LABEL_338;
          }
        }
        v297 = v295;
        if ((unint64_t)((char *)v276 - v294) >= 0x20)
        {
          v298 = (v296 >> 3) + 1;
          v299 = 8 * (v298 & 0x3FFFFFFFFFFFFFFCLL);
          v300 = &v277[v299 / 0xFFFFFFFFFFFFFFFCLL];
          v297 = &v295[v299 / 0xFFFFFFFFFFFFFFF8];
          v301 = &v294[8 * v290 - 16];
          v302 = v277 - 4;
          v303 = v298 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v304 = *(_OWORD *)v302;
            *(v301 - 1) = *((_OWORD *)v302 - 1);
            *v301 = v304;
            v301 -= 2;
            v302 -= 8;
            v303 -= 4;
          }
          while (v303);
          v277 = v300;
          if (v298 == (v298 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_339:
            v306 = &v294[8 * v293];
            v307 = (void *)*a1;
            v288 = v295 + 1;
            *a1 = (unint64_t)v297;
            a1[1] = (unint64_t)(v295 + 1);
            a1[2] = (unint64_t)v306;
            if (v307)
              operator delete(v307);
            goto LABEL_341;
          }
        }
        do
        {
LABEL_338:
          v305 = *((_QWORD *)v277 - 1);
          v277 -= 2;
          *--v297 = v305;
        }
        while (v277 != v276);
        goto LABEL_339;
      }
    }
  }
LABEL_342:
  if (v325)
    operator delete(v325);
}

void sub_223F302C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  void *v32;

  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_223F30360(unint64_t result, unint64_t *a2, unint64_t **a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  int64_t v108;
  unint64_t *v109;
  int64_t v110;
  int64_t v111;
  unint64_t *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t *i;
  unint64_t *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = a2 - 2;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v84 = a3[1];
        v85 = *(a2 - 2);
        v86 = *v11;
        v87 = **a3;
        v88 = v85;
        if (v85 < v87)
        {
          v88 = *v84 + v85;
          v89 = *v11;
          if (v86 >= v87)
          {
LABEL_137:
            if (v88 >= v89)
              return result;
            goto LABEL_232;
          }
        }
        else
        {
          v89 = *v11;
          if (v86 >= v87)
            goto LABEL_137;
        }
        if (v88 >= *v84 + v86)
          return result;
LABEL_232:
        *v11 = v85;
        *(a2 - 2) = v86;
        v157 = v11[1];
        v11[1] = *(a2 - 1);
        *(a2 - 1) = v157;
        return result;
      case 3uLL:
        return (unint64_t)sub_223F312B8(v11, v11 + 2, v10, a3);
      case 4uLL:
        return (unint64_t)sub_223F317B8(v11, v11 + 2, v11 + 4, v10, a3);
      case 5uLL:
        return (unint64_t)sub_223F310A0(v11, v11 + 2, v11 + 4, v11 + 6, v10, a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
          {
            if (v11 == a2)
              return result;
            v90 = v11 + 2;
            if (v11 + 2 == a2)
              return result;
            v91 = 0;
            v92 = *a3;
            v93 = a3[1];
            v94 = v11;
LABEL_149:
            v96 = v90;
            v97 = v94[2];
            v98 = *v92;
            v99 = v97;
            if (v97 < *v92)
            {
              v99 = *v93 + v97;
              v100 = *v94;
              v101 = *v94;
              if (*v94 >= v98)
              {
LABEL_151:
                if (v99 >= v101)
                  goto LABEL_148;
LABEL_155:
                v102 = v94[3];
                v103 = v91;
                while (1)
                {
                  v104 = (char *)v11 + v103;
                  v105 = *(unint64_t *)((char *)v11 + v103 + 8);
                  *((_QWORD *)v104 + 2) = v100;
                  *((_QWORD *)v104 + 3) = v105;
                  if (!v103)
                  {
                    v95 = v11;
                    goto LABEL_147;
                  }
                  result = *v92;
                  v106 = v97;
                  if (v97 < *v92)
                  {
                    v106 = *v93 + v97;
                    v100 = *((_QWORD *)v104 - 2);
                    v107 = v100;
                    if (v100 < result)
LABEL_162:
                      v107 = *v93 + v100;
                  }
                  else
                  {
                    v100 = *((_QWORD *)v104 - 2);
                    v107 = v100;
                    if (v100 < result)
                      goto LABEL_162;
                  }
                  v103 -= 16;
                  if (v106 >= v107)
                  {
                    v95 = (unint64_t *)((char *)v11 + v103 + 16);
LABEL_147:
                    *v95 = v97;
                    v95[1] = v102;
LABEL_148:
                    v90 = v96 + 2;
                    v91 += 16;
                    v94 = v96;
                    if (v96 + 2 == a2)
                      return result;
                    goto LABEL_149;
                  }
                }
              }
            }
            else
            {
              v100 = *v94;
              v101 = *v94;
              if (*v94 >= v98)
                goto LABEL_151;
            }
            if (v99 >= *v93 + v100)
              goto LABEL_148;
            goto LABEL_155;
          }
          if (v11 == a2)
            return result;
          v158 = v11 + 2;
          if (v11 + 2 == a2)
            return result;
          v159 = *a3;
          for (i = v11 + 3; ; i += 2)
          {
            v161 = v158;
            v162 = a3[1];
            v163 = v9[2];
            v164 = *v159;
            v165 = v163;
            if (v163 < *v159)
            {
              v165 = *v162 + v163;
              v166 = *v9;
              v167 = *v9;
              if (*v9 < v164)
              {
LABEL_243:
                if (v165 >= *v162 + v166)
                  goto LABEL_237;
LABEL_244:
                v168 = v9[3];
                v169 = i;
                while (2)
                {
                  *(v169 - 1) = v166;
                  *v169 = *(v169 - 2);
                  v170 = a3[1];
                  v171 = *v159;
                  v172 = v163;
                  if (v163 < *v159)
                  {
                    v172 = *v170 + v163;
                    v166 = *(v169 - 5);
                    result = v166;
                    if (v166 < v171)
                      goto LABEL_250;
                  }
                  else
                  {
                    v166 = *(v169 - 5);
                    result = v166;
                    if (v166 < v171)
LABEL_250:
                      result = *v170 + v166;
                  }
                  v169 -= 2;
                  if (v172 >= result)
                  {
                    *(v169 - 1) = v163;
                    *v169 = v168;
                    goto LABEL_237;
                  }
                  continue;
                }
              }
            }
            else
            {
              v166 = *v9;
              v167 = *v9;
              if (*v9 < v164)
                goto LABEL_243;
            }
            if (v165 < v167)
              goto LABEL_244;
LABEL_237:
            v158 = v161 + 2;
            v9 = v161;
            if (v161 + 2 == a2)
              return result;
          }
        }
        if (a4)
        {
          v14 = v13 >> 1;
          v15 = &v11[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            result = (unint64_t)sub_223F312B8(&v9[2 * (v13 >> 1)], v9, v10, a3);
            --a4;
            v18 = *a3;
            v19 = a3[1];
            v20 = *v9;
            v21 = **a3;
            if ((a5 & 1) != 0)
              goto LABEL_16;
          }
          else
          {
            sub_223F312B8(v9, &v9[2 * (v13 >> 1)], v10, a3);
            v16 = &v9[2 * v14];
            sub_223F312B8(v9 + 2, v16 - 2, a2 - 4, a3);
            sub_223F312B8(v9 + 4, &v9[2 * v14 + 2], a2 - 6, a3);
            result = (unint64_t)sub_223F312B8(v16 - 2, v15, &v9[2 * v14 + 2], a3);
            v17 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v17;
            v10 = a2 - 2;
            --a4;
            v18 = *a3;
            v19 = a3[1];
            v20 = *v9;
            v21 = **a3;
            if ((a5 & 1) != 0)
              goto LABEL_16;
          }
          v22 = *(v9 - 2);
          if (v22 < v21)
            v22 += *v19;
          if (v20 < v21)
          {
            v23 = *v19 + v20;
            if (v22 < v23)
              goto LABEL_16;
LABEL_74:
            v55 = *v10;
            if (*v10 < v21)
              v55 += *v19;
            if (v23 >= v55)
            {
              if (v20 >= v21)
              {
                v82 = v9 + 2;
                do
                {
                  v11 = v82;
                  if (v82 >= a2)
                    break;
                  v83 = *v82;
                  if (*v82 < v21)
                    v83 += *v19;
                  v82 += 2;
                }
                while (v20 >= v83);
              }
              else
              {
                v61 = v9 + 2;
                do
                {
                  v11 = v61;
                  if (v61 >= a2)
                    break;
                  v61 += 2;
                  v62 = *v19;
                  if (*v11 >= v21)
                    v62 = 0;
                }
                while (*v19 + v20 >= v62 + *v11);
              }
            }
            else
            {
              v11 = v9;
              if (v20 >= v21)
              {
                do
                {
                  v60 = v11[2];
                  v11 += 2;
                  v59 = v60;
                  if (v60 < v21)
                    v59 += *v19;
                }
                while (v20 >= v59);
              }
              else
              {
                v11 = v9;
                do
                {
                  v57 = v11[2];
                  v11 += 2;
                  v56 = v57;
                  if (v57 >= v21)
                    v58 = 0;
                  else
                    v58 = *v19;
                }
                while (*v19 + v20 >= v58 + v56);
              }
            }
            v63 = v9[1];
            v64 = a2;
            if (v11 < a2)
            {
              v64 = a2;
              if (v20 >= v21)
              {
                do
                {
                  v81 = *(v64 - 2);
                  v64 -= 2;
                  v80 = v81;
                  if (v81 < v21)
                    v80 += *v19;
                }
                while (v20 < v80);
              }
              else
              {
                v64 = a2;
                do
                {
                  v66 = *(v64 - 2);
                  v64 -= 2;
                  v65 = v66;
                  if (v66 >= v21)
                    v67 = 0;
                  else
                    v67 = *v19;
                }
                while (*v19 + v20 < v67 + v65);
              }
            }
            if (v11 < v64)
            {
              v68 = *v11;
              v69 = *v64;
              do
              {
                *v11 = v69;
                *v64 = v68;
                v70 = v11[1];
                v11[1] = v64[1];
                v64[1] = v70;
                v71 = *v18;
                if (v20 >= *v18)
                {
                  do
                  {
                    v76 = v11[2];
                    v11 += 2;
                    v68 = v76;
                    v77 = v76;
                    if (v76 < v71)
                      v77 = *v19 + v68;
                  }
                  while (v20 >= v77);
                }
                else
                {
                  do
                  {
                    v72 = v11[2];
                    v11 += 2;
                    v68 = v72;
                    if (v72 >= v71)
                      v73 = 0;
                    else
                      v73 = *v19;
                  }
                  while (*v19 + v20 >= v73 + v68);
                }
                if (v20 >= v71)
                {
                  do
                  {
                    v78 = *(v64 - 2);
                    v64 -= 2;
                    v69 = v78;
                    v79 = v78;
                    if (v78 < v71)
                      v79 = *v19 + v69;
                  }
                  while (v20 < v79);
                }
                else
                {
                  do
                  {
                    v74 = *(v64 - 2);
                    v64 -= 2;
                    v69 = v74;
                    if (v74 >= v71)
                      v75 = 0;
                    else
                      v75 = *v19;
                    result = v75 + v69;
                  }
                  while (*v19 + v20 < result);
                }
              }
              while (v11 < v64);
            }
            if (v11 - 2 != v9)
            {
              *v9 = *(v11 - 2);
              v9[1] = *(v11 - 1);
            }
            a5 = 0;
            *(v11 - 2) = v20;
            *(v11 - 1) = v63;
            continue;
          }
          if (v22 >= v20)
          {
            v23 = v20;
            goto LABEL_74;
          }
LABEL_16:
          v24 = v9;
          if (v20 >= v21)
          {
            do
            {
              v33 = v24[2];
              v24 += 2;
              v25 = v33;
              v34 = v33;
              if (v33 < v21)
                v34 = *v19 + v25;
            }
            while (v34 < v20);
          }
          else
          {
            v24 = v9;
            do
            {
              v26 = v24[2];
              v24 += 2;
              v25 = v26;
              if (v26 >= v21)
                v27 = 0;
              else
                v27 = *v19;
            }
            while (v27 + v25 < *v19 + v20);
          }
          v28 = v9[1];
          if (v24 - 2 == v9)
          {
            v29 = a2;
            if (v20 >= v21)
            {
              do
              {
                if (v24 >= v29)
                  break;
                v53 = *(v29 - 2);
                v29 -= 2;
                v52 = v53;
                if (v53 < v21)
                  v52 += *v19;
              }
              while (v52 >= v20);
            }
            else
            {
              v29 = a2;
              do
              {
                if (v24 >= v29)
                  break;
                v38 = *(v29 - 2);
                v29 -= 2;
                v37 = v38;
                v39 = v38 >= v21 ? 0 : *v19;
              }
              while (v39 + v37 >= *v19 + v20);
            }
          }
          else
          {
            v29 = a2;
            if (v20 >= v21)
            {
              do
              {
                v36 = *(v29 - 2);
                v29 -= 2;
                v35 = v36;
                if (v36 < v21)
                  v35 += *v19;
              }
              while (v35 >= v20);
            }
            else
            {
              v29 = a2;
              do
              {
                v31 = *(v29 - 2);
                v29 -= 2;
                v30 = v31;
                if (v31 >= v21)
                  v32 = 0;
                else
                  v32 = *v19;
              }
              while (v32 + v30 >= *v19 + v20);
            }
          }
          v11 = v24;
          if (v24 < v29)
          {
            v40 = *v29;
            v11 = v24;
            v41 = v29;
            do
            {
              *v11 = v40;
              *v41 = v25;
              v42 = v11[1];
              v11[1] = v41[1];
              v41[1] = v42;
              v43 = *v18;
              if (v20 >= *v18)
              {
                do
                {
                  v48 = v11[2];
                  v11 += 2;
                  v25 = v48;
                  v49 = v48;
                  if (v48 < v43)
                    v49 = *v19 + v25;
                }
                while (v49 < v20);
              }
              else
              {
                do
                {
                  v44 = v11[2];
                  v11 += 2;
                  v25 = v44;
                  if (v44 >= v43)
                    v45 = 0;
                  else
                    v45 = *v19;
                }
                while (v45 + v25 < *v19 + v20);
              }
              if (v20 >= v43)
              {
                do
                {
                  v50 = *(v41 - 2);
                  v41 -= 2;
                  v40 = v50;
                  v51 = v50;
                  if (v50 < v43)
                    v51 = *v19 + v40;
                }
                while (v51 >= v20);
              }
              else
              {
                do
                {
                  v46 = *(v41 - 2);
                  v41 -= 2;
                  v40 = v46;
                  if (v46 >= v43)
                    v47 = 0;
                  else
                    v47 = *v19;
                }
                while (v47 + v40 >= *v19 + v20);
              }
            }
            while (v11 < v41);
          }
          if (v11 - 2 != v9)
          {
            *v9 = *(v11 - 2);
            v9[1] = *(v11 - 1);
          }
          *(v11 - 2) = v20;
          *(v11 - 1) = v28;
          if (v24 < v29)
            goto LABEL_72;
          v54 = sub_223F314E0(v9, v11 - 2, (uint64_t)a3);
          result = sub_223F314E0(v11, a2, (uint64_t)a3);
          if (!(_DWORD)result)
          {
            if (v54)
              continue;
LABEL_72:
            result = sub_223F30360(v9, v11 - 2, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = v11 - 2;
          if (v54)
            return result;
          goto LABEL_2;
        }
        if (v11 != a2)
        {
          v108 = (v13 - 2) >> 1;
          v109 = *a3;
          v110 = v108;
          while (1)
          {
            v111 = v110;
            if (v108 < v110)
              goto LABEL_167;
            v112 = a3[1];
            v113 = (2 * v111) | 1;
            v114 = &v11[2 * v113];
            v115 = *v109;
            if (2 * v111 + 2 < (uint64_t)v13)
            {
              v121 = *v114;
              if (*v114 < v115)
                v121 += *v112;
              v123 = v114[2];
              v114 += 2;
              v122 = v123;
              if (v123 < v115)
                v122 += *v112;
              if (v121 < v122)
                v113 = 2 * v111 + 2;
              else
                v114 = &v11[2 * v113];
              v116 = *v114;
              v117 = *v114;
              if (*v114 >= v115)
              {
LABEL_171:
                v118 = &v11[2 * v111];
                v119 = *v118;
                v120 = *v118;
                if (*v118 >= v115)
                  goto LABEL_172;
                goto LABEL_183;
              }
            }
            else
            {
              v116 = *v114;
              v117 = *v114;
              if (*v114 >= v115)
                goto LABEL_171;
            }
            v117 = *v112 + v116;
            v118 = &v11[2 * v111];
            v119 = *v118;
            v120 = *v118;
            if (*v118 >= v115)
            {
LABEL_172:
              if (v117 >= v120)
                goto LABEL_184;
              goto LABEL_167;
            }
LABEL_183:
            if (v117 >= *v112 + v119)
            {
LABEL_184:
              v124 = v118[1];
              while (1)
              {
                v125 = v118;
                v118 = v114;
                *v125 = v116;
                v125[1] = v114[1];
                if (v108 < v113)
                {
LABEL_166:
                  *v118 = v119;
                  v118[1] = v124;
                  v109 = *a3;
                  goto LABEL_167;
                }
                v126 = (2 * v113) | 1;
                v114 = &v11[2 * v126];
                v127 = *v109;
                if (2 * v113 + 2 < (uint64_t)v13)
                  break;
                v113 = (2 * v113) | 1;
                v116 = *v114;
                v131 = *v114;
                if (*v114 < v127)
                  goto LABEL_198;
LABEL_199:
                v132 = v119;
                if (v119 < v127)
                  v132 = *v112 + v119;
                if (v131 < v132)
                  goto LABEL_166;
              }
              v128 = *v114;
              if (*v114 < v127)
                v128 += *v112;
              v130 = v114[2];
              v114 += 2;
              v129 = v130;
              if (v130 < v127)
                v129 += *v112;
              if (v128 < v129)
              {
                v113 = 2 * v113 + 2;
              }
              else
              {
                v114 = &v11[2 * v126];
                v113 = (2 * v113) | 1;
              }
              v116 = *v114;
              v131 = *v114;
              if (*v114 >= v127)
                goto LABEL_199;
LABEL_198:
              v131 = *v112 + v116;
              goto LABEL_199;
            }
LABEL_167:
            v110 = v111 - 1;
            if (!v111)
            {
              v133 = (unint64_t)v12 >> 4;
              while (1)
              {
                v135 = 0;
                v136 = *v11;
                v137 = v11[1];
                v138 = *a3;
                v139 = a3[1];
                v140 = v11;
                do
                {
                  v141 = (uint64_t)&v140[2 * v135 + 2];
                  result = 2 * v135;
                  v142 = (2 * v135) | 1;
                  v143 = 2 * v135 + 2;
                  if (v143 < v133)
                  {
                    result = *(_QWORD *)v141;
                    if (*(_QWORD *)v141 < *v138)
                      result += *v139;
                    v144 = *(_QWORD *)(v141 + 16);
                    if (v144 < *v138)
                      v144 += *v139;
                    if (result < v144)
                    {
                      v141 += 16;
                      v142 = v143;
                    }
                  }
                  *v140 = *(_QWORD *)v141;
                  v140[1] = *(_QWORD *)(v141 + 8);
                  v140 = (_QWORD *)v141;
                  v135 = v142;
                }
                while (v142 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
                if ((unint64_t *)v141 == a2 - 2)
                {
                  *(_QWORD *)v141 = v136;
                  *(_QWORD *)(v141 + 8) = v137;
                  goto LABEL_203;
                }
                *(_QWORD *)v141 = *(a2 - 2);
                *(_QWORD *)(v141 + 8) = *(a2 - 1);
                *(a2 - 2) = v136;
                *(a2 - 1) = v137;
                v145 = v141 - (_QWORD)v11 + 16;
                if (v145 >= 17)
                  break;
LABEL_203:
                a2 -= 2;
                if (v133-- <= 2)
                  return result;
              }
              v146 = *a3;
              v147 = a3[1];
              v148 = (((unint64_t)v145 >> 4) - 2) >> 1;
              v149 = &v11[2 * v148];
              v150 = *v149;
              result = **a3;
              v151 = *v149;
              if (*v149 < result)
              {
                v151 = *v147 + v150;
                v152 = *(_QWORD *)v141;
                v153 = *(_QWORD *)v141;
                if (*(_QWORD *)v141 >= result)
                {
LABEL_217:
                  if (v151 >= v153)
                    goto LABEL_203;
LABEL_221:
                  v154 = *(_QWORD *)(v141 + 8);
                  while (1)
                  {
                    result = v141;
                    v141 = (uint64_t)v149;
                    *(_QWORD *)result = v150;
                    *(_QWORD *)(result + 8) = v149[1];
                    if (!v148)
                    {
LABEL_229:
                      *(_QWORD *)v141 = v152;
                      *(_QWORD *)(v141 + 8) = v154;
                      goto LABEL_203;
                    }
                    v148 = (v148 - 1) >> 1;
                    v149 = &v11[2 * v148];
                    v150 = *v149;
                    v155 = *v146;
                    result = *v149;
                    if (*v149 < *v146)
                    {
                      result = *v147 + v150;
                      v156 = v152;
                      if (v152 < v155)
LABEL_228:
                        v156 = *v147 + v152;
                    }
                    else
                    {
                      v156 = v152;
                      if (v152 < v155)
                        goto LABEL_228;
                    }
                    if (result >= v156)
                      goto LABEL_229;
                  }
                }
              }
              else
              {
                v152 = *(_QWORD *)v141;
                v153 = *(_QWORD *)v141;
                if (*(_QWORD *)v141 >= result)
                  goto LABEL_217;
              }
              result = *v147;
              if (v151 >= *v147 + v152)
                goto LABEL_203;
              goto LABEL_221;
            }
          }
        }
        return result;
    }
  }
}

unint64_t *sub_223F310A0(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unint64_t **a6)
{
  unint64_t *result;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  result = sub_223F317B8(a1, a2, a3, a4, a6);
  v13 = *a6;
  v14 = a6[1];
  v15 = *a5;
  v16 = *a4;
  v17 = **a6;
  v18 = *a5;
  if (*a5 < v17)
  {
    v18 = *v14 + v15;
    v19 = *a4;
    if (v16 >= v17)
    {
LABEL_3:
      if (v18 >= v19)
        return result;
      goto LABEL_7;
    }
  }
  else
  {
    v19 = *a4;
    if (v16 >= v17)
      goto LABEL_3;
  }
  if (v18 >= *v14 + v16)
    return result;
LABEL_7:
  *a4 = v15;
  *a5 = v16;
  v20 = a4[1];
  a4[1] = a5[1];
  a5[1] = v20;
  v21 = a6[1];
  v22 = *a4;
  v23 = *a3;
  v24 = *v13;
  v25 = *a4;
  if (*a4 < *v13)
  {
    v25 = *v21 + v22;
    v26 = *a3;
    if (v23 >= v24)
    {
LABEL_9:
      if (v25 >= v26)
        return result;
      goto LABEL_13;
    }
  }
  else
  {
    v26 = *a3;
    if (v23 >= v24)
      goto LABEL_9;
  }
  if (v25 >= *v21 + v23)
    return result;
LABEL_13:
  *a3 = v22;
  *a4 = v23;
  v27 = a3[1];
  a3[1] = a4[1];
  a4[1] = v27;
  v28 = a6[1];
  v29 = *a3;
  v30 = *a2;
  v31 = *v13;
  v32 = *a3;
  if (*a3 < *v13)
  {
    v32 = *v28 + v29;
    v33 = *a2;
    if (v30 >= v31)
    {
LABEL_15:
      if (v32 >= v33)
        return result;
      goto LABEL_19;
    }
  }
  else
  {
    v33 = *a2;
    if (v30 >= v31)
      goto LABEL_15;
  }
  if (v32 >= *v28 + v30)
    return result;
LABEL_19:
  *a2 = v29;
  *a3 = v30;
  v34 = a2[1];
  a2[1] = a3[1];
  a3[1] = v34;
  v35 = a6[1];
  v36 = *a2;
  v37 = *a1;
  v38 = *v13;
  v39 = *a2;
  if (*a2 < v38)
  {
    v39 = *v35 + v36;
    v40 = *a1;
    if (v37 >= v38)
    {
LABEL_21:
      if (v39 < v40)
        goto LABEL_25;
      return result;
    }
  }
  else
  {
    v40 = *a1;
    if (v37 >= v38)
      goto LABEL_21;
  }
  if (v39 < *v35 + v37)
  {
LABEL_25:
    *a1 = v36;
    *a2 = v37;
    v41 = a1[1];
    a1[1] = a2[1];
    a2[1] = v41;
  }
  return result;
}

unint64_t *sub_223F312B8(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t **a4)
{
  unint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;

  v4 = *a4;
  v5 = (uint64_t *)a4[1];
  v6 = *a2;
  v7 = *result;
  v8 = **a4;
  v9 = *a2;
  if (*a2 < v8)
  {
    v9 = *v5 + v6;
    v10 = *result;
    if (v7 >= v8)
    {
LABEL_3:
      v11 = *a3;
      if (v9 < v10)
        goto LABEL_4;
LABEL_10:
      v16 = v11;
      if (v11 < v8)
      {
        v16 = *v5 + v11;
        v17 = *a2;
        if (v6 >= v8)
        {
LABEL_12:
          if (v16 >= v17)
            return result;
          goto LABEL_22;
        }
      }
      else
      {
        v17 = *a2;
        if (v6 >= v8)
          goto LABEL_12;
      }
      if (v16 >= *v5 + v6)
        return result;
LABEL_22:
      *a2 = v11;
      *a3 = v6;
      v26 = a2 + 1;
      v27 = a2[1];
      a2[1] = a3[1];
      a3[1] = v27;
      v28 = (uint64_t *)a4[1];
      v29 = *a2;
      v30 = *result;
      v31 = *v4;
      v32 = *a2;
      if (*a2 < v31)
      {
        v32 = *v28 + v29;
        v33 = *result;
        if (v30 >= v31)
        {
LABEL_24:
          if (v32 >= v33)
            return result;
          goto LABEL_31;
        }
      }
      else
      {
        v33 = *result;
        if (v30 >= v31)
          goto LABEL_24;
      }
      if (v32 >= *v28 + v30)
        return result;
LABEL_31:
      *result++ = v29;
      *a2 = v30;
      v36 = *result;
      *result = *v26;
      *v26 = v36;
      return result;
    }
  }
  else
  {
    v10 = *result;
    if (v7 >= v8)
      goto LABEL_3;
  }
  v11 = *a3;
  if (v9 >= *v5 + v7)
    goto LABEL_10;
LABEL_4:
  v12 = v11;
  if (v11 >= v8)
  {
    v13 = *a2;
    if (v6 >= v8)
      goto LABEL_6;
LABEL_15:
    if (v12 < *v5 + v6)
      goto LABEL_7;
    goto LABEL_16;
  }
  v12 = *v5 + v11;
  v13 = *a2;
  if (v6 < v8)
    goto LABEL_15;
LABEL_6:
  if (v12 < v13)
  {
LABEL_7:
    *result++ = v11;
    *a3 = v7;
    v14 = a3 + 1;
    v15 = *result;
    *result = *v14;
    *v14 = v15;
    return result;
  }
LABEL_16:
  *result = v6;
  *a2 = v7;
  v18 = (uint64_t *)(a2 + 1);
  v19 = result[1];
  result[1] = a2[1];
  a2[1] = v19;
  v20 = (uint64_t *)a4[1];
  v21 = *a3;
  v22 = *a2;
  v23 = *v4;
  v24 = *a3;
  if (*a3 < v23)
  {
    v24 = *v20 + v21;
    v25 = *a2;
    if (v22 >= v23)
    {
LABEL_18:
      if (v24 < v25)
        goto LABEL_28;
      return result;
    }
  }
  else
  {
    v25 = *a2;
    if (v22 >= v23)
      goto LABEL_18;
  }
  if (v24 < *v20 + v22)
  {
LABEL_28:
    *a2 = v21;
    *a3 = v22;
    v34 = (uint64_t *)(a3 + 1);
    result = a2 + 1;
    v35 = *v18;
    *v18 = *v34;
    *v34 = v35;
  }
  return result;
}

BOOL sub_223F314E0(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v28 = *(_QWORD **)(a3 + 8);
      v29 = *(a2 - 2);
      v30 = *a1;
      v31 = **(_QWORD **)a3;
      v32 = v29;
      if (v29 < v31)
      {
        v32 = *v28 + v29;
        v33 = *a1;
        if (v30 >= v31)
        {
LABEL_26:
          if (v32 >= v33)
            return result;
          goto LABEL_33;
        }
      }
      else
      {
        v33 = *a1;
        if (v30 >= v31)
          goto LABEL_26;
      }
      if (v32 >= *v28 + v30)
        return result;
LABEL_33:
      *a1 = v29;
      *(a2 - 2) = v30;
      v34 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v34;
      return result;
    case 3:
      sub_223F312B8(a1, a1 + 2, a2 - 2, (unint64_t **)a3);
      return 1;
    case 4:
      sub_223F317B8(a1, a1 + 2, a1 + 4, a2 - 2, (unint64_t **)a3);
      return 1;
    case 5:
      sub_223F310A0(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, (unint64_t **)a3);
      return 1;
    default:
      v8 = a1 + 4;
      sub_223F312B8(a1, a1 + 2, a1 + 4, (unint64_t **)a3);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = *(unint64_t **)a3;
      while (2)
      {
        v13 = *(_QWORD **)(a3 + 8);
        v14 = *v9;
        v15 = *v12;
        v16 = *v9;
        if (*v9 < *v12)
        {
          v16 = *v13 + v14;
          v17 = *v8;
          v18 = *v8;
          if (*v8 >= v15)
          {
LABEL_9:
            if (v16 >= v18)
            {
LABEL_22:
              v8 = v9;
              v10 += 16;
              v9 += 2;
              if (v9 == a2)
                return 1;
              continue;
            }
            goto LABEL_13;
          }
        }
        else
        {
          v17 = *v8;
          v18 = *v8;
          if (*v8 >= v15)
            goto LABEL_9;
        }
        break;
      }
      if (v16 >= *v13 + v17)
        goto LABEL_22;
LABEL_13:
      v19 = v9[1];
      v20 = v10;
      while (1)
      {
        v21 = (unint64_t *)((char *)a1 + v20);
        v22 = *(unint64_t *)((char *)a1 + v20 + 40);
        v21[6] = v17;
        v21[7] = v22;
        if (v20 == -32)
        {
          *a1 = v14;
          a1[1] = v19;
          if (++v11 != 8)
            goto LABEL_22;
          return v9 + 2 == a2;
        }
        v23 = *(_QWORD **)(a3 + 8);
        v24 = *v12;
        v25 = v14;
        if (v14 < *v12)
        {
          v25 = *v23 + v14;
          v17 = v21[2];
          v26 = v17;
          if (v17 < v24)
LABEL_20:
            v26 = *v23 + v17;
        }
        else
        {
          v17 = v21[2];
          v26 = v17;
          if (v17 < v24)
            goto LABEL_20;
        }
        v20 -= 16;
        if (v25 >= v26)
        {
          v27 = (char *)a1 + v20;
          *((_QWORD *)v27 + 6) = v14;
          *((_QWORD *)v27 + 7) = v19;
          if (++v11 != 8)
            goto LABEL_22;
          return v9 + 2 == a2;
        }
      }
  }
}

unint64_t *sub_223F317B8(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t **a5)
{
  unint64_t *result;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  result = sub_223F312B8(a1, a2, a3, a5);
  v11 = *a5;
  v12 = a5[1];
  v13 = *a4;
  v14 = *a3;
  v15 = **a5;
  v16 = *a4;
  if (*a4 < v15)
  {
    v16 = *v12 + v13;
    v17 = *a3;
    if (v14 >= v15)
    {
LABEL_3:
      if (v16 >= v17)
        return result;
      goto LABEL_7;
    }
  }
  else
  {
    v17 = *a3;
    if (v14 >= v15)
      goto LABEL_3;
  }
  if (v16 >= *v12 + v14)
    return result;
LABEL_7:
  *a3 = v13;
  *a4 = v14;
  v18 = a3[1];
  a3[1] = a4[1];
  a4[1] = v18;
  v19 = a5[1];
  v20 = *a3;
  v21 = *a2;
  v22 = *v11;
  v23 = *a3;
  if (*a3 < *v11)
  {
    v23 = *v19 + v20;
    v24 = *a2;
    if (v21 >= v22)
    {
LABEL_9:
      if (v23 >= v24)
        return result;
      goto LABEL_13;
    }
  }
  else
  {
    v24 = *a2;
    if (v21 >= v22)
      goto LABEL_9;
  }
  if (v23 >= *v19 + v21)
    return result;
LABEL_13:
  *a2 = v20;
  *a3 = v21;
  v25 = a2[1];
  a2[1] = a3[1];
  a3[1] = v25;
  v26 = a5[1];
  v27 = *a2;
  v28 = *a1;
  v29 = *v11;
  v30 = *a2;
  if (*a2 < v29)
  {
    v30 = *v26 + v27;
    v31 = *a1;
    if (v28 >= v29)
    {
LABEL_15:
      if (v30 < v31)
        goto LABEL_19;
      return result;
    }
  }
  else
  {
    v31 = *a1;
    if (v28 >= v29)
      goto LABEL_15;
  }
  if (v30 < *v26 + v28)
  {
LABEL_19:
    *a1 = v27;
    *a2 = v28;
    v32 = a1[1];
    a1[1] = a2[1];
    a2[1] = v32;
  }
  return result;
}

void sub_223F3195C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  float32x2_t **v5;
  float32x2_t *v6;
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t *v9;
  float32x2_t v10;
  int32x2_t v11;
  __n128 v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  void **v31;
  char *v32;
  char *v33;
  unint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  unint64_t v37;
  _OWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __n128 *v43;
  void **v44;
  char *v45;
  void **v46;
  char **v47;
  char **v48;
  int v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __n128 v70;
  char v71;
  void **v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  int v78;
  unsigned __int8 *v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  float *v84;
  unsigned __int8 *v85;
  unsigned int v86;
  unsigned int v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int8x8_t v92;
  uint8x8_t v93;
  unint64_t v94;
  uint64_t **v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  float *v101;
  int v102;
  void *v103;
  void *v104;
  float *v105;
  char v106;
  float *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  float *v111;
  int v112;
  int v113;
  int v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v121;
  uint64_t v122;
  char v123;
  _OWORD *v124;
  void **v125;
  void *v126;
  void *v127;
  void *v128[2];
  void *__p[2];
  _BYTE v130[20];
  char v131;
  __int128 v132;
  void *v133[2];
  __int128 v134;
  float32x2_t v135;
  char v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[24];
  char *v141;
  uint64_t v142;

  v3 = (_QWORD *)a3;
  v142 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (a1 == (void *)1)
    return;
  v4 = 1;
  while (2)
  {
    v116 = v4;
    v5 = (float32x2_t **)(a2 + 24 * v4);
    v6 = *v5;
    v7 = v5[1];
    if (v6 == v7)
      goto LABEL_4;
    v8 = 0;
    v9 = v6;
    do
    {
      v10 = *v9++;
      v11.i32[1] = v10.i32[1];
      v8 = vadd_f32(v8, v10);
    }
    while (v9 != v7);
    *(float *)v11.i32 = (float)(unint64_t)(v7 - v6);
    v135 = vdiv_f32(v8, (float32x2_t)vdup_lane_s32(v11, 0));
    v136 = 1;
    v12 = 0uLL;
    *(_OWORD *)v133 = 0u;
    v134 = 0u;
    v132 = 0u;
    if (!a1)
    {
      v65 = 0;
      v64 = 0;
      v63 = 0;
      v62 = 0;
      goto LABEL_77;
    }
    v13 = 0;
    do
    {
      v14 = (uint64_t *)(a2 + 24 * (_QWORD)v13);
      v15 = *v14;
      v16 = v14[1] - *v14;
      v17 = v16 >> 3;
      v138 = v16 >> 3;
      v139 = v15;
      v12 = 0uLL;
      *(_OWORD *)v128 = 0u;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v130 = 0u;
      v126 = v13;
      if ((unint64_t)v16 >= 0x18)
      {
        v137 = 0;
        *(_QWORD *)v140 = &v138;
        *(_QWORD *)&v140[8] = &v135;
        v18 = 1;
        *(_QWORD *)&v140[16] = v128;
        v141 = &v137;
        while (v17 != v18)
        {
          v19 = v18 + 1;
          sub_223F35110(v140, v18 - 1, v18);
          v18 = v19;
        }
        v20 = v139 + 8 * v138;
        v21 = *(float *)v139;
        v22 = *(float *)(v20 - 8);
        if (*(float *)v139 != v22)
        {
          v23 = v21 - v22;
          v24 = v22 - v21;
          if (*(float *)v139 >= v22)
            v24 = v23;
          if (v24 > 0.000001)
            goto LABEL_23;
        }
        v12.n128_u32[0] = *(_DWORD *)(v139 + 4);
        v25 = *(float *)(v20 - 4);
        v26 = v12.n128_f32[0] < v25;
        if (v12.n128_f32[0] != v25)
        {
          v27 = v12.n128_f32[0] - v25;
          v12.n128_f32[0] = v25 - v12.n128_f32[0];
          if (!v26)
            v12.n128_f32[0] = v27;
          if (v12.n128_f32[0] > 0.000001)
LABEL_23:
            sub_223F35110(v140, v138 - 1, 0);
        }
        v13 = v126;
      }
      v28 = 0;
      v29 = 0;
      do
      {
        v123 = v28;
        v30 = (unint64_t)&v128[3 * v29];
        v31 = &v133[3 * v29 - 2];
        v33 = (char *)*v31;
        v32 = (char *)v31[1];
        v34 = 0xCCCCCCCCCCCCCCCDLL * ((v32 - (_BYTE *)*v31) >> 3);
        v36 = *(_OWORD **)v30;
        v35 = *(_OWORD **)(v30 + 8);
        v37 = v34 + (((uint64_t)v35 - *(_QWORD *)v30) >> 5);
        v125 = v31;
        if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v31[2] - (_BYTE *)*v31) >> 3) >= v37)
        {
          v40 = (char *)v31[1];
          v44 = &v133[3 * v29 - 2];
          if (v36 != v35)
            goto LABEL_41;
        }
        else
        {
          if (v37 > 0x666666666666666)
LABEL_168:
            sub_22316E078();
          v38 = *(_OWORD **)(v30 + 8);
          v39 = (char *)operator new(40 * v37);
          v40 = &v39[40 * v34];
          v41 = v40;
          if (v32 != v33)
          {
            v42 = 0;
            do
            {
              v43 = (__n128 *)&v40[v42];
              v43[-3].n128_u8[8] = v32[v42 - 40];
              v12 = *(__n128 *)&v32[v42 - 32];
              v43[-2] = v12;
              v43[-1].n128_u8[0] = 0;
              v43[-1].n128_u8[8] = 0;
              if (v32[v42 - 8])
              {
                v43[-1].n128_u64[0] = *(_QWORD *)&v32[v42 - 16];
                v43[-1].n128_u8[8] = 1;
              }
              v42 -= 40;
            }
            while (&v32[v42] != v33);
            v41 = &v40[v42];
          }
          v45 = &v39[40 * v37];
          v44 = &v133[3 * v29 - 2];
          *v125 = v41;
          v125[1] = v40;
          v125[2] = v45;
          if (!v33)
          {
            v13 = v126;
            v35 = v38;
            if (v36 == v38)
              goto LABEL_26;
LABEL_41:
            v46 = &v133[3 * v29 - 2];
            v47 = (char **)(v46 + 1);
            v48 = (char **)(v46 + 2);
            v124 = v35;
            while (1)
            {
              *(_OWORD *)&v140[7] = *v36;
              v49 = *((unsigned __int8 *)v36 + 24);
              if (*((_BYTE *)v36 + 24))
              {
                v30 = *((_QWORD *)v36 + 2);
                v50 = *v48;
                if (v40 < *v48)
                  goto LABEL_45;
              }
              else
              {
                v30 &= 0xFFFFFFFFFFFFFF00;
                v50 = *v48;
                if (v40 < *v48)
                {
LABEL_45:
                  *v40 = (char)v13;
                  v12 = *(__n128 *)&v140[7];
                  *(_OWORD *)(v40 + 8) = *(_OWORD *)&v140[7];
                  v40[24] = 0;
                  v40[32] = 0;
                  if (v49)
                  {
                    *((_QWORD *)v40 + 3) = v30;
                    v40[32] = 1;
                  }
                  *v47 = v40 + 40;
                  v36 += 2;
                  v40 += 40;
                  if (v36 == v35)
                    goto LABEL_26;
                  continue;
                }
              }
              v51 = (char *)*v44;
              v52 = 0xCCCCCCCCCCCCCCCDLL * ((v40 - v51) >> 3) + 1;
              if (v52 > 0x666666666666666)
                goto LABEL_168;
              v53 = 0xCCCCCCCCCCCCCCCDLL * ((v50 - v51) >> 3);
              if (2 * v53 > v52)
                v52 = 2 * v53;
              if (v53 >= 0x333333333333333)
                v54 = 0x666666666666666;
              else
                v54 = v52;
              if (v54)
              {
                if (v54 > 0x666666666666666)
                  sub_223174E94();
                v55 = (char *)operator new(40 * v54);
                v13 = v126;
              }
              else
              {
                v55 = 0;
              }
              v56 = &v55[8 * ((v40 - v51) >> 3)];
              *v56 = (char)v13;
              v12 = *(__n128 *)&v140[7];
              *(_OWORD *)(v56 + 8) = *(_OWORD *)&v140[7];
              v56[24] = 0;
              v56[32] = 0;
              if (v49)
              {
                *((_QWORD *)v56 + 3) = v30;
                v56[32] = 1;
              }
              if (v40 == v51)
              {
                v59 = &v55[8 * ((v40 - v51) >> 3)];
                v44 = v125;
              }
              else
              {
                v57 = 0;
                do
                {
                  v58 = &v56[v57];
                  *(v58 - 40) = v40[v57 - 40];
                  v12 = *(__n128 *)&v40[v57 - 32];
                  *((__n128 *)v58 - 2) = v12;
                  *(v58 - 16) = 0;
                  *(v58 - 8) = 0;
                  if (v40[v57 - 8])
                  {
                    *((_QWORD *)v58 - 2) = *(_QWORD *)&v40[v57 - 16];
                    *(v58 - 8) = 1;
                  }
                  v57 -= 40;
                }
                while (&v40[v57] != v51);
                v44 = v125;
                v40 = (char *)*v125;
                v59 = &v56[v57];
              }
              v60 = &v55[40 * v54];
              *v44 = v59;
              v61 = v56 + 40;
              *v47 = v56 + 40;
              *v48 = v60;
              if (v40)
              {
                operator delete(v40);
                v13 = v126;
              }
              v35 = v124;
              *v47 = v61;
              v36 += 2;
              v40 = v61;
              if (v36 == v124)
                goto LABEL_26;
            }
          }
          operator delete(v33);
          v36 = *(_OWORD **)v30;
          v35 = *(_OWORD **)(v30 + 8);
          v13 = v126;
          if (*(_OWORD **)v30 != v35)
            goto LABEL_41;
        }
LABEL_26:
        v28 = 1;
        v29 = 1;
      }
      while ((v123 & 1) == 0);
      if (__p[1])
      {
        *(void **)v130 = __p[1];
        operator delete(__p[1]);
        v13 = v126;
      }
      if (v128[0])
      {
        v128[1] = v128[0];
        operator delete(v128[0]);
        v13 = v126;
      }
      v13 = (char *)v13 + 1;
    }
    while (v13 != a1);
    v63 = (char *)*((_QWORD *)&v132 + 1);
    v62 = v132;
    v64 = (char *)v133[1];
    v65 = (char *)v134;
    v3 = (_QWORD *)a3;
LABEL_77:
    v66 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v65 - v64) >> 3));
    if (v65 == v64)
      v67 = 0;
    else
      v67 = v66;
    v68 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v63[-v62] >> 3));
    if (v63 == (char *)v62)
      v69 = 0;
    else
      v69 = v68;
    v127 = (void *)v62;
    v70.n128_f64[0] = sub_223F32EA8(v62, v63, v69, 1, v12);
    sub_223F32EA8((uint64_t)v64, v65, v67, 1, v70);
    v71 = 0;
    v72 = (void **)&v132;
    v73 = 1;
    do
    {
      v74 = v71;
      v75 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v72[1] - (_BYTE *)*v72) >> 3);
      if (v75 >= 2)
      {
        v76 = 0;
        v77 = (unsigned __int8 *)*v72;
        while (1)
        {
          v78 = *v77;
          v77 += 40;
          if (!v78)
            break;
          if (v75 == ++v76)
          {
            v76 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)v72[1] - (_BYTE *)*v72) >> 3);
            break;
          }
        }
        v79 = (unsigned __int8 *)*v72 + 8 * (((_BYTE *)v72[1] - (_BYTE *)*v72) >> 3) - 40;
        do
        {
          v80 = v75 - 1;
          v81 = *v79;
          v79 -= 40;
          if (v81)
            v82 = v75 == 1;
          else
            v82 = 1;
          --v75;
        }
        while (!v82);
        if (v76 < v80)
        {
LABEL_100:
          v83 = v76;
          v84 = (float *)*v72;
          v85 = (unsigned __int8 *)*v72 + 40 * v76++;
          v86 = *v85;
          v87 = v85[40];
          if (v86 == v87)
            goto LABEL_99;
          v88 = vabds_f32(v84[10 * v76 + 2], v84[10 * v83 + 2]);
          if (v86 >= v87)
            v89 = v85[40];
          else
            v89 = *v85;
          if (v86 <= v87)
            v90 = v87;
          else
            v90 = v86;
          v91 = v90 | (v89 << 8);
          v92 = (int8x8_t)v3[1];
          if (!*(_QWORD *)&v92)
            goto LABEL_127;
          v93 = (uint8x8_t)vcnt_s8(v92);
          v93.i16[0] = vaddlv_u8(v93);
          if (v93.u32[0] > 1uLL)
          {
            v94 = v91;
            if (v91 >= *(_QWORD *)&v92)
              v94 = v91 % *(_QWORD *)&v92;
          }
          else
          {
            v94 = (v92.i32[0] - 1) & v91;
          }
          v95 = *(uint64_t ***)(*v3 + 8 * v94);
          if (!v95 || (v96 = *v95) == 0)
          {
LABEL_127:
            v100 = v121 & 0xFFFFFFFFFFFFFF00;
            v122 &= 0xFFFFFFFFFFFFFF00;
            if (v86 >= v87)
            {
              v105 = &v84[10 * v76];
              v102 = *((unsigned __int8 *)v105 + 32);
              if (*((_BYTE *)v105 + 32))
              {
                v121 = *(_QWORD *)&v84[10 * v76 + 6];
                v102 = 1;
                v103 = (void *)*((_QWORD *)v105 + 2);
                v104 = *(void **)&v84[10 * v83 + 4];
                if (!LOBYTE(v84[10 * v83 + 8]))
                  goto LABEL_139;
              }
              else
              {
                v121 &= 0xFFFFFFFFFFFFFF00;
                v103 = (void *)*((_QWORD *)v105 + 2);
                v104 = *(void **)&v84[10 * v83 + 4];
                if (!LOBYTE(v84[10 * v83 + 8]))
                  goto LABEL_139;
              }
LABEL_134:
              v106 = 0;
              v122 = *(_QWORD *)&v84[10 * v83 + 6];
              v128[0] = (void *)v91;
              *(float *)&v128[1] = v88;
              __p[0] = v103;
              __p[1] = v104;
              v130[0] = 0;
              v130[8] = 0;
              if (!v102)
              {
LABEL_136:
                v130[12] = 0;
                v131 = 0;
                if ((v106 & 1) == 0)
                {
                  *(_QWORD *)&v130[12] = v122;
                  v131 = 1;
                }
                sub_223F2EAF8((uint64_t)v3, (unint64_t *)v128, (uint64_t)v128);
                goto LABEL_99;
              }
            }
            else
            {
              v101 = &v84[10 * v83];
              v102 = *((unsigned __int8 *)v101 + 32);
              if (*((_BYTE *)v101 + 32))
              {
                v100 = *(_QWORD *)&v84[10 * v83 + 6];
                v102 = 1;
              }
              v121 = v100;
              v103 = (void *)*((_QWORD *)v101 + 2);
              v104 = *(void **)&v84[10 * v76 + 4];
              if (LOBYTE(v84[10 * v76 + 8]))
              {
                v83 = v76;
                goto LABEL_134;
              }
LABEL_139:
              v106 = 1;
              v128[0] = (void *)v91;
              *(float *)&v128[1] = v88;
              __p[0] = v103;
              __p[1] = v104;
              v130[0] = 0;
              v130[8] = 0;
              if (!v102)
                goto LABEL_136;
            }
            *(_QWORD *)v130 = v121;
            v130[8] = 1;
            goto LABEL_136;
          }
          if (v93.u32[0] < 2uLL)
          {
            v97 = *(_QWORD *)&v92 - 1;
            while (1)
            {
              v99 = v96[1];
              if (v99 == v91)
              {
                if (v96[2] == v91)
                  goto LABEL_141;
              }
              else if ((v99 & v97) != v94)
              {
                goto LABEL_127;
              }
              v96 = (uint64_t *)*v96;
              if (!v96)
                goto LABEL_127;
            }
          }
          while (1)
          {
            v98 = v96[1];
            if (v98 == v91)
            {
              if (v96[2] == v91)
              {
LABEL_141:
                if (v88 > *((float *)v96 + 6))
                  goto LABEL_99;
                v118 &= 0xFFFFFFFFFFFFFF00;
                v117 &= 0xFFFFFFFFFFFFFF00;
                if (v86 >= v87)
                {
                  v111 = &v84[10 * v76];
                  v108 = *((unsigned __int8 *)v111 + 32);
                  if (*((_BYTE *)v111 + 32))
                  {
                    v118 = *(_QWORD *)&v84[10 * v76 + 6];
                    v108 = 1;
                  }
                  v109 = *((_QWORD *)v111 + 2);
                  v110 = *(_QWORD *)&v84[10 * v83 + 4];
                  if (!LOBYTE(v84[10 * v83 + 8]))
                    goto LABEL_154;
LABEL_150:
                  v117 = *(_QWORD *)&v84[10 * v83 + 6];
                  v112 = 1;
                  *((float *)v96 + 6) = v88;
                  v96[4] = v109;
                  v96[5] = v110;
                  v113 = *((unsigned __int8 *)v96 + 56);
                  if (v113 == v108)
                    goto LABEL_151;
LABEL_155:
                  if (v113)
                  {
                    *((_BYTE *)v96 + 56) = 0;
LABEL_157:
                    v114 = *((unsigned __int8 *)v96 + 68);
                    if (v114 == v112)
                      goto LABEL_158;
                  }
                  else
                  {
                    v96[6] = v118;
                    *((_BYTE *)v96 + 56) = 1;
                    v114 = *((unsigned __int8 *)v96 + 68);
                    if (v114 == v112)
                      goto LABEL_158;
                  }
LABEL_161:
                  if (v114)
                  {
                    *((_BYTE *)v96 + 68) = 0;
                  }
                  else
                  {
                    *(uint64_t *)((char *)v96 + 60) = v117;
                    *((_BYTE *)v96 + 68) = 1;
                  }
                  goto LABEL_99;
                }
                v107 = &v84[10 * v83];
                v108 = *((unsigned __int8 *)v107 + 32);
                if (*((_BYTE *)v107 + 32))
                {
                  v118 = *(_QWORD *)&v84[10 * v83 + 6];
                  v108 = 1;
                }
                v109 = *((_QWORD *)v107 + 2);
                v110 = *(_QWORD *)&v84[10 * v76 + 4];
                if (LOBYTE(v84[10 * v76 + 8]))
                {
                  v83 = v76;
                  goto LABEL_150;
                }
LABEL_154:
                v112 = 0;
                *((float *)v96 + 6) = v88;
                v96[4] = v109;
                v96[5] = v110;
                v113 = *((unsigned __int8 *)v96 + 56);
                if (v113 != v108)
                  goto LABEL_155;
LABEL_151:
                if (!v113)
                  goto LABEL_157;
                v96[6] = v118;
                v114 = *((unsigned __int8 *)v96 + 68);
                if (v114 != v112)
                  goto LABEL_161;
LABEL_158:
                if (v114)
                  *(uint64_t *)((char *)v96 + 60) = v117;
LABEL_99:
                if (v80 == v76)
                  break;
                goto LABEL_100;
              }
            }
            else
            {
              if (v98 >= *(_QWORD *)&v92)
                v98 %= *(_QWORD *)&v92;
              if (v98 != v94)
                goto LABEL_127;
            }
            v96 = (uint64_t *)*v96;
            if (!v96)
              goto LABEL_127;
          }
        }
      }
      v72 = &v133[3 * v73 - 2];
      v71 = 1;
      v73 = 2;
    }
    while ((v74 & 1) == 0);
    if (v133[1])
      operator delete(v133[1]);
    if (v127)
      operator delete(v127);
LABEL_4:
    v4 = v116 + 1;
    if ((void *)(v116 + 1) != a1)
      continue;
    break;
  }
}

void sub_223F3242C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p)
{
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;

  sub_2233400F8((uint64_t)&a23);
  if (__p)
  {
    operator delete(__p);
    v35 = a31;
    if (!a31)
    {
LABEL_3:
      v36 = *(_QWORD **)(a10 + 16);
      if (v36)
        goto LABEL_4;
      goto LABEL_5;
    }
  }
  else
  {
    v35 = a31;
    if (!a31)
      goto LABEL_3;
  }
  operator delete(v35);
  v36 = *(_QWORD **)(a10 + 16);
  if (v36)
  {
    do
    {
LABEL_4:
      v37 = (_QWORD *)*v36;
      operator delete(v36);
      v36 = v37;
    }
    while (v37);
  }
LABEL_5:
  v38 = *(void **)a10;
  *(_QWORD *)a10 = 0;
  if (v38)
    operator delete(v38);
  _Unwind_Resume(a1);
}

void sub_223F32500(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  void *v5;
  _QWORD *v9;
  uint64_t v10;
  size_t v11;
  int32x4_t *v12;
  uint64_t v13;
  int32x4_t *v14;
  unint64_t v15;
  int32x4_t v16;
  int32x4_t *v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t **v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  _QWORD *v62;
  int64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unsigned int v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78;
  _QWORD *v79;
  _QWORD *v80;
  void *v81;
  unsigned int v83;
  unsigned int v84;
  _QWORD *v85[4];
  void *__p;
  __int8 *v87;
  __int8 *v88;
  int v89;
  void *v90[2];
  void *v91[2];
  int v92;
  void *v93[2];
  void *v94[2];
  int v95;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (!a1)
    return;
  v5 = a4;
  v9 = a5;
  *(_OWORD *)v93 = 0u;
  *(_OWORD *)v94 = 0u;
  v95 = 1065353216;
  *(_OWORD *)v90 = 0u;
  *(_OWORD *)v91 = 0u;
  v92 = 1065353216;
  __p = 0;
  v87 = 0;
  v88 = 0;
  if ((_DWORD)a4)
  {
    v10 = a4;
    v11 = 4 * a4;
    v12 = (int32x4_t *)operator new(v11);
    __p = v12;
    v88 = &v12->i8[4 * v10];
    bzero(v12, 4 * v5);
    v87 = &v12->i8[v11];
    v89 = (int)v5;
    if (v11 - 4 >= 0x1C)
    {
      v15 = ((v11 - 4) >> 2) + 1;
      v13 = v15 & 0x7FFFFFFFFFFFFFF8;
      v14 = (int32x4_t *)((char *)v12 + 4 * (v15 & 0x7FFFFFFFFFFFFFF8));
      v16 = (int32x4_t)xmmword_2246499B0;
      v17 = v12 + 1;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      v19.i64[0] = 0x800000008;
      v19.i64[1] = 0x800000008;
      v20 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v17[-1] = v16;
        *v17 = vaddq_s32(v16, v18);
        v16 = vaddq_s32(v16, v19);
        v17 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v15 == v13)
        goto LABEL_10;
    }
    else
    {
      LODWORD(v13) = 0;
      v14 = v12;
    }
    do
    {
      v14->i32[0] = v13;
      v14 = (int32x4_t *)((char *)v14 + 4);
      LODWORD(v13) = v13 + 1;
    }
    while (v14 != (int32x4_t *)&v12->i8[v11]);
  }
  else
  {
    v89 = 0;
  }
LABEL_10:
  v85[0] = v93;
  v85[1] = &__p;
  v85[2] = v90;
  v85[3] = v9;
  v21 = &a2[a1];
  do
  {
    v84 = *a2;
    v23 = bswap32(v84);
    v24 = BYTE2(v23);
    v25 = HIBYTE(v23);
    if (!v90[1])
    {
      v28 = 1;
      goto LABEL_57;
    }
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v90[1]);
    v26.i16[0] = vaddlv_u8(v26);
    if (v26.u32[0] > 1uLL)
    {
      v27 = BYTE2(v23);
      if (v90[1] <= (void *)BYTE2(v23))
        v27 = BYTE2(v23) % (unint64_t)v90[1];
    }
    else
    {
      v27 = (LODWORD(v90[1]) - 1) & (unint64_t)BYTE2(v23);
    }
    v29 = (uint64_t **)*((_QWORD *)v90[0] + v27);
    if (!v29 || (v30 = *v29) == 0)
    {
      v28 = 1;
      if (v26.u32[0] > 1uLL)
        goto LABEL_37;
LABEL_42:
      v33 = (LODWORD(v90[1]) - 1) & v25;
      v34 = (uint64_t **)*((_QWORD *)v90[0] + v33);
      if (v34)
        goto LABEL_43;
LABEL_57:
      if (BYTE2(v23) == (_DWORD)a3)
      {
        v83 = HIBYTE(v23);
        sub_223ED130C((uint64_t)v90, &v83, &v83);
        v38 = sub_223ED44F8((uint64_t *)&__p, v25);
        sub_223F32C30(v85, v38);
        goto LABEL_70;
      }
      if ((_DWORD)v25 == (_DWORD)a3)
      {
        if (v28)
          goto LABEL_61;
      }
      else
      {
        if (!v28)
        {
          v83 = HIBYTE(v23);
          sub_223ED130C((uint64_t)v90, &v83, &v83);
          goto LABEL_70;
        }
        v40 = sub_223ED44F8((uint64_t *)&__p, BYTE2(v23));
        if (v40 != sub_223ED44F8((uint64_t *)&__p, v25))
        {
          v41 = (unint64_t)(v87 - (_BYTE *)__p) >> 2;
          if (v41 > v24 && v25 < v41)
          {
            v42 = sub_223ED44F8((uint64_t *)&__p, v24);
            v43 = sub_223ED44F8((uint64_t *)&__p, v25);
            if (v42 != v43)
            {
              *((_DWORD *)__p + v42) = v43;
              --v89;
            }
          }
          sub_223A1AA44((uint64_t)v93, &v84, &v84);
        }
      }
      goto LABEL_13;
    }
    if (v26.u32[0] < 2uLL)
    {
      while (1)
      {
        v32 = v30[1];
        if (v32 == BYTE2(v23))
        {
          if (*((_DWORD *)v30 + 4) == BYTE2(v23))
            goto LABEL_36;
        }
        else if ((v32 & ((uint64_t)v90[1] - 1)) != v27)
        {
          goto LABEL_35;
        }
        v30 = (uint64_t *)*v30;
        if (!v30)
          goto LABEL_36;
      }
    }
    while (1)
    {
      v31 = v30[1];
      if (v31 == BYTE2(v23))
      {
        if (*((_DWORD *)v30 + 4) == BYTE2(v23))
          goto LABEL_36;
        goto LABEL_25;
      }
      if ((void *)v31 >= v90[1])
        v31 %= (unint64_t)v90[1];
      if (v31 != v27)
        break;
LABEL_25:
      v30 = (uint64_t *)*v30;
      if (!v30)
        goto LABEL_36;
    }
LABEL_35:
    v30 = 0;
LABEL_36:
    v28 = v30 == 0;
    if (v26.u32[0] <= 1uLL)
      goto LABEL_42;
LABEL_37:
    v33 = HIBYTE(v23);
    if (v90[1] <= (void *)v25)
      v33 = v25 % (unint64_t)v90[1];
    v34 = (uint64_t **)*((_QWORD *)v90[0] + v33);
    if (!v34)
      goto LABEL_57;
LABEL_43:
    v35 = *v34;
    if (!v35)
      goto LABEL_57;
    if (v26.u32[0] < 2uLL)
    {
      while (1)
      {
        v37 = v35[1];
        if (v37 == v25)
        {
          if (*((_DWORD *)v35 + 4) == (_DWORD)v25)
            goto LABEL_95;
        }
        else if ((v37 & ((uint64_t)v90[1] - 1)) != v33)
        {
          goto LABEL_57;
        }
        v35 = (uint64_t *)*v35;
        if (!v35)
          goto LABEL_57;
      }
    }
    while (2)
    {
      v36 = v35[1];
      if (v36 != v25)
      {
        if ((void *)v36 >= v90[1])
          v36 %= (unint64_t)v90[1];
        if (v36 != v33)
          goto LABEL_57;
        goto LABEL_47;
      }
      if (*((_DWORD *)v35 + 4) != (_DWORD)v25)
      {
LABEL_47:
        v35 = (uint64_t *)*v35;
        if (!v35)
          goto LABEL_57;
        continue;
      }
      break;
    }
LABEL_95:
    if (BYTE2(v23) == (_DWORD)a3 || !v28)
      goto LABEL_13;
    if ((_DWORD)v25 != (_DWORD)a3)
    {
      v83 = BYTE2(v23);
      sub_223ED130C((uint64_t)v90, &v83, &v83);
      goto LABEL_70;
    }
LABEL_61:
    v83 = BYTE2(v23);
    sub_223ED130C((uint64_t)v90, &v83, &v83);
    v39 = sub_223ED44F8((uint64_t *)&__p, v24);
    sub_223F32C30(v85, v39);
LABEL_70:
    v44 = (unint64_t)(v87 - (_BYTE *)__p) >> 2;
    if (v44 > v24 && v25 < v44)
    {
      v45 = sub_223ED44F8((uint64_t *)&__p, v24);
      v46 = sub_223ED44F8((uint64_t *)&__p, v25);
      if (v45 != v46)
      {
        *((_DWORD *)__p + v45) = v46;
        --v89;
      }
    }
    v47 = v84;
    v49 = (char *)v9[1];
    v48 = v9[2];
    if ((unint64_t)v49 < v48)
    {
      *(_QWORD *)v49 = v84;
      v22 = (uint64_t)(v49 + 8);
      goto LABEL_12;
    }
    v50 = a2;
    v51 = v21;
    v52 = a3;
    v53 = v5;
    v54 = (char *)*v9;
    v55 = (uint64_t)&v49[-*v9];
    v56 = v55 >> 3;
    v57 = (v55 >> 3) + 1;
    if (v57 >> 61)
      sub_22367C394();
    v58 = v48 - (_QWORD)v54;
    if (v58 >> 2 > v57)
      v57 = v58 >> 2;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    if (!v59)
    {
      v61 = 0;
      v62 = (_QWORD *)(8 * v56);
      *(_QWORD *)(8 * v56) = v84;
      v22 = 8 * v56 + 8;
      v63 = v49 - v54;
      if (v49 != v54)
        goto LABEL_84;
LABEL_87:
      v5 = v53;
      a3 = v52;
      v21 = v51;
      a2 = v50;
      goto LABEL_93;
    }
    if (v59 >> 61)
      sub_223174E94();
    v60 = v59;
    v61 = operator new(8 * v59);
    v59 = v60;
    v62 = &v61[8 * v56];
    *v62 = v47;
    v22 = (uint64_t)(v62 + 1);
    v63 = v49 - v54;
    if (v49 == v54)
      goto LABEL_87;
LABEL_84:
    v64 = v63 - 8;
    if (v64 < 0x58)
    {
      v5 = v53;
      a3 = v52;
      v21 = v51;
      a2 = v50;
      goto LABEL_92;
    }
    v65 = v49 - &v61[v55];
    v5 = v53;
    a3 = v52;
    v21 = v51;
    a2 = v50;
    if (v65 < 0x20)
      goto LABEL_116;
    v66 = (v64 >> 3) + 1;
    v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
    v68 = &v49[-v67];
    v62 = (_QWORD *)((char *)v62 - v67);
    v69 = &v61[8 * v56 - 16];
    v70 = v49 - 16;
    v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v72 = *(_OWORD *)v70;
      *(v69 - 1) = *((_OWORD *)v70 - 1);
      *v69 = v72;
      v69 -= 2;
      v70 -= 32;
      v71 -= 4;
    }
    while (v71);
    v49 = v68;
    if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_116:
      do
      {
LABEL_92:
        v73 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *--v62 = v73;
      }
      while (v49 != v54);
    }
LABEL_93:
    v9 = a5;
    *a5 = v62;
    a5[1] = v22;
    a5[2] = &v61[8 * v59];
    if (v54)
      operator delete(v54);
LABEL_12:
    v9[1] = v22;
    if (v91[1] == v5)
      break;
LABEL_13:
    ++a2;
  }
  while (a2 != v21);
  v75 = sub_223ED44F8((uint64_t *)&__p, a3);
  sub_223F32C30(v85, v75);
  if (__p)
  {
    v87 = (__int8 *)__p;
    operator delete(__p);
  }
  v76 = v91[0];
  if (v91[0])
  {
    do
    {
      v77 = (_QWORD *)*v76;
      operator delete(v76);
      v76 = v77;
    }
    while (v77);
  }
  v78 = v90[0];
  v90[0] = 0;
  if (v78)
    operator delete(v78);
  v79 = v94[0];
  if (v94[0])
  {
    do
    {
      v80 = (_QWORD *)*v79;
      operator delete(v79);
      v79 = v80;
    }
    while (v80);
  }
  v81 = v93[0];
  v93[0] = 0;
  if (v81)
    operator delete(v81);
}

void sub_223F32BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v26;

  if (__p)
    operator delete(__p);
  sub_22322E828((uint64_t)&a19);
  sub_22322E828((uint64_t)&a25);
  v26 = *(void **)a9;
  if (*(_QWORD *)a9)
  {
    *(_QWORD *)(a9 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void sub_223F32C30(_QWORD **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  void *v32;
  void *__p[3];

  if ((*a1)[3])
  {
    v2 = (uint64_t *)(*a1)[2];
    if (v2)
    {
      v3 = a2;
      while (1)
      {
        while (1)
        {
          v5 = *((unsigned int *)v2 + 4);
          v6 = bswap32(v5);
          if (sub_223ED44F8(a1[1], BYTE2(v6)) == v3)
            break;
          v2 = (uint64_t *)*v2;
          if (!v2)
            return;
        }
        if (sub_223ED44F8(a1[1], HIBYTE(v6)) != v3
          && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Geometry/PolygonUtilImpl.cpp", 298, (uint64_t)"nodeGroupId == unionFind.find(nodeId2)", 38, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v7 = (uint64_t)a1[2];
        LODWORD(__p[0]) = BYTE2(v6);
        sub_223ED130C(v7, (unsigned int *)__p, __p);
        v8 = (uint64_t)a1[2];
        LODWORD(__p[0]) = HIBYTE(v6);
        sub_223ED130C(v8, (unsigned int *)__p, __p);
        v9 = a1[3];
        v11 = (char *)v9[1];
        v10 = v9[2];
        if ((unint64_t)v11 >= v10)
          break;
        *(_QWORD *)v11 = v5;
        v12 = (uint64_t)(v11 + 8);
LABEL_30:
        v9[1] = v12;
        v31 = (uint64_t *)*v2;
        sub_2231AFBB8(*a1, v2, (uint64_t)__p);
        v32 = __p[0];
        __p[0] = 0;
        if (v32)
          operator delete(v32);
        v2 = v31;
        if (!v31)
          return;
      }
      v13 = (char *)*v9;
      v14 = (uint64_t)&v11[-*v9];
      v15 = v14 >> 3;
      v16 = (v14 >> 3) + 1;
      if (v16 >> 61)
        sub_22367C394();
      v17 = v10 - (_QWORD)v13;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          sub_223174E94();
        v19 = operator new(8 * v18);
        v20 = &v19[8 * v15];
        *v20 = v5;
        v12 = (uint64_t)(v20 + 1);
        v21 = v11 - v13;
        if (v11 == v13)
          goto LABEL_27;
      }
      else
      {
        v19 = 0;
        v20 = (_QWORD *)(8 * v15);
        *(_QWORD *)(8 * v15) = v5;
        v12 = 8 * v15 + 8;
        v21 = v11 - v13;
        if (v11 == v13)
        {
LABEL_27:
          *v9 = v20;
          v9[1] = v12;
          v9[2] = &v19[8 * v18];
          if (v13)
            operator delete(v13);
          v3 = a2;
          goto LABEL_30;
        }
      }
      v22 = v21 - 8;
      if (v22 < 0x58)
        goto LABEL_39;
      if ((unint64_t)(v11 - v19 - v14) < 0x20)
        goto LABEL_39;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v11[-v24];
      v20 = (_QWORD *)((char *)v20 - v24);
      v26 = &v19[8 * v15 - 16];
      v27 = v11 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v11 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_39:
        do
        {
          v30 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v20 = v30;
        }
        while (v11 != v13);
      }
      goto LABEL_27;
    }
  }
}

double sub_223F32EA8(uint64_t a1, char *a2, uint64_t a3, char a4, __n128 a5)
{
  uint64_t v5;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char v15;
  __n128 *v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  char *v29;
  char *v30;
  float v31;
  char *v32;
  float v33;
  unint64_t v34;
  char v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  int v41;
  float v42;
  float v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  int v48;
  __n128 v49;
  char v50;
  char v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  unint64_t v57;
  float v58;
  char *v59;
  char *v60;
  float v61;
  char v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  _BYTE *v66;
  _QWORD *v67;
  int v68;
  float v69;
  float v70;
  char *v71;
  __int128 *v72;
  char v73;
  uint64_t v74;
  char *v75;
  int v76;
  char *v77;
  char *v78;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  int64_t v91;
  int64_t v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  float v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  char *v107;
  char v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int64_t v115;
  _OWORD *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  _BYTE *v125;
  char *v126;
  char v127;
  int v128;
  _BYTE *v129;
  float v130;
  int v131;
  int v132;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  __n128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  int v149;
  int v150;
  int v151;

__n128 sub_223F33F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v10;
  __n128 result;
  __n128 *v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  _QWORD *v17;
  int v18;
  __n128 *v19;
  unsigned __int8 *v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  __n128 *v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  __n128 *v30;
  char v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;

  result = sub_223F34D1C(a1, a2, a3, a4);
  v10 = (__n128 *)(a5 + 8);
  result.n128_u32[0] = *(_DWORD *)(a5 + 8);
  v12 = (__n128 *)(a4 + 8);
  if (result.n128_f32[0] >= *(float *)(a4 + 8))
    return result;
  v13 = *(_BYTE *)a4;
  *(_BYTE *)a4 = *(_BYTE *)a5;
  *(_BYTE *)a5 = v13;
  v36 = *v12;
  if (!*(_BYTE *)(a4 + 32))
  {
    *v12 = *v10;
    v20 = (unsigned __int8 *)(a5 + 32);
    if (!*(_BYTE *)(a5 + 32))
    {
      result = v36;
      *v10 = v36;
      result.n128_u32[0] = v12->n128_u32[0];
      v19 = (__n128 *)(a3 + 8);
      if (v12->n128_f32[0] >= *(float *)(a3 + 8))
        return result;
      goto LABEL_17;
    }
    v14 = 0;
    v17 = (_QWORD *)(a5 + 24);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_BYTE *)(a4 + 32) = 1;
    v15 = (_BYTE *)(a5 + 32);
    v18 = *v20;
    result = v36;
    *v10 = v36;
    if (!v18)
      goto LABEL_5;
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(a4 + 24);
  *v12 = *v10;
  v16 = *(unsigned __int8 *)(a5 + 32);
  v15 = (_BYTE *)(a5 + 32);
  v17 = v15 - 8;
  if (v16)
  {
    *(_QWORD *)(a4 + 24) = *v17;
    v18 = *v15;
    result = v36;
    *v10 = v36;
    if (v18 == 1)
      goto LABEL_5;
LABEL_12:
    if (v18)
    {
      *v15 = 0;
      result.n128_u32[0] = v12->n128_u32[0];
      v19 = (__n128 *)(a3 + 8);
      if (v12->n128_f32[0] >= *(float *)(a3 + 8))
        return result;
      goto LABEL_17;
    }
    *v17 = v14;
    *v15 = 1;
    goto LABEL_16;
  }
  *(_BYTE *)(a4 + 32) = 0;
  v18 = *v15;
  result = v36;
  *v10 = v36;
  if (v18 != 1)
    goto LABEL_12;
LABEL_5:
  if (v18)
  {
    *v17 = v14;
    result.n128_u32[0] = v12->n128_u32[0];
    v19 = (__n128 *)(a3 + 8);
    if (v12->n128_f32[0] >= *(float *)(a3 + 8))
      return result;
    goto LABEL_17;
  }
LABEL_16:
  result.n128_u32[0] = v12->n128_u32[0];
  v19 = (__n128 *)(a3 + 8);
  if (v12->n128_f32[0] >= *(float *)(a3 + 8))
    return result;
LABEL_17:
  v21 = *(_BYTE *)a3;
  *(_BYTE *)a3 = *(_BYTE *)a4;
  *(_BYTE *)a4 = v21;
  v37 = *v19;
  if (*(_BYTE *)(a3 + 32))
  {
    v22 = *(_QWORD *)(a3 + 24);
    *v19 = *v12;
    v23 = (_QWORD *)(a4 + 24);
    if (*(_BYTE *)(a4 + 32))
    {
      *(_QWORD *)(a3 + 24) = *v23;
      v24 = *(unsigned __int8 *)(a4 + 32);
      result = v37;
      *v12 = v37;
      if (v24 == 1)
        goto LABEL_20;
LABEL_29:
      if (v24)
      {
        *(_BYTE *)(a4 + 32) = 0;
        result.n128_u32[0] = v19->n128_u32[0];
        v25 = (__n128 *)(a2 + 8);
        if (v19->n128_f32[0] >= *(float *)(a2 + 8))
          return result;
        goto LABEL_34;
      }
      *(_QWORD *)(a4 + 24) = v22;
      *(_BYTE *)(a4 + 32) = 1;
      goto LABEL_33;
    }
    *(_BYTE *)(a3 + 32) = 0;
    v24 = *(unsigned __int8 *)(a4 + 32);
    result = v37;
    *v12 = v37;
    if (v24 != 1)
      goto LABEL_29;
LABEL_20:
    if (v24)
    {
      *v23 = v22;
      result.n128_u32[0] = v19->n128_u32[0];
      v25 = (__n128 *)(a2 + 8);
      if (v19->n128_f32[0] >= *(float *)(a2 + 8))
        return result;
      goto LABEL_34;
    }
LABEL_33:
    result.n128_u32[0] = v19->n128_u32[0];
    v25 = (__n128 *)(a2 + 8);
    if (v19->n128_f32[0] >= *(float *)(a2 + 8))
      return result;
    goto LABEL_34;
  }
  *v19 = *v12;
  if (*(_BYTE *)(a4 + 32))
  {
    v22 = 0;
    v23 = (_QWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_BYTE *)(a3 + 32) = 1;
    v24 = *(unsigned __int8 *)(a4 + 32);
    result = v37;
    *v12 = v37;
    if (v24)
      goto LABEL_29;
    goto LABEL_20;
  }
  result = v37;
  *v12 = v37;
  result.n128_u32[0] = v19->n128_u32[0];
  v25 = (__n128 *)(a2 + 8);
  if (v19->n128_f32[0] >= *(float *)(a2 + 8))
    return result;
LABEL_34:
  v26 = *(_BYTE *)a2;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)a3 = v26;
  v38 = *v25;
  if (!*(_BYTE *)(a2 + 32))
  {
    *v25 = *v19;
    if (!*(_BYTE *)(a3 + 32))
    {
      result = v38;
      *v19 = v38;
      goto LABEL_49;
    }
    v27 = 0;
    v28 = (_QWORD *)(a3 + 24);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_BYTE *)(a2 + 32) = 1;
    v29 = *(unsigned __int8 *)(a3 + 32);
    result = v38;
    *v19 = v38;
    if (!v29)
      goto LABEL_37;
    goto LABEL_45;
  }
  v27 = *(_QWORD *)(a2 + 24);
  *v25 = *v19;
  v28 = (_QWORD *)(a3 + 24);
  if (*(_BYTE *)(a3 + 32))
  {
    *(_QWORD *)(a2 + 24) = *v28;
    v29 = *(unsigned __int8 *)(a3 + 32);
    result = v38;
    *v19 = v38;
    if (v29 == 1)
      goto LABEL_37;
LABEL_45:
    if (v29)
    {
      *(_BYTE *)(a3 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a3 + 24) = v27;
      *(_BYTE *)(a3 + 32) = 1;
    }
    goto LABEL_49;
  }
  *(_BYTE *)(a2 + 32) = 0;
  v29 = *(unsigned __int8 *)(a3 + 32);
  result = v38;
  *v19 = v38;
  if (v29 != 1)
    goto LABEL_45;
LABEL_37:
  if (v29)
    *v28 = v27;
LABEL_49:
  result.n128_u32[0] = v25->n128_u32[0];
  v30 = (__n128 *)(a1 + 8);
  if (v25->n128_f32[0] < *(float *)(a1 + 8))
  {
    v31 = *(_BYTE *)a1;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)a2 = v31;
    v39 = *v30;
    if (*(_BYTE *)(a1 + 32))
    {
      v32 = *(_QWORD *)(a1 + 24);
      *v30 = *v25;
      v33 = (_QWORD *)(a2 + 24);
      if (*(_BYTE *)(a2 + 32))
        *(_QWORD *)(a1 + 24) = *v33;
      else
        *(_BYTE *)(a1 + 32) = 0;
      v34 = 1;
    }
    else
    {
      *v30 = *v25;
      if (!*(_BYTE *)(a2 + 32))
      {
        result = v39;
        *v25 = v39;
        return result;
      }
      v32 = 0;
      v34 = 0;
      v33 = (_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_BYTE *)(a1 + 32) = 1;
    }
    v35 = *(unsigned __int8 *)(a2 + 32);
    result = v39;
    *v25 = v39;
    if (v35 == v34)
    {
      if (v35)
        *v33 = v32;
    }
    else if (v35)
    {
      *(_BYTE *)(a2 + 32) = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 24) = v32;
      *(_BYTE *)(a2 + 32) = 1;
    }
  }
  return result;
}

__n128 sub_223F34424(char *a1, char *a2, char *a3)
{
  __n128 *v3;
  __n128 result;
  __n128 *v5;
  __n128 *v6;
  float v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  _QWORD *v12;
  int v13;
  char v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  unsigned __int8 *v34;
  int v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;

  v3 = (__n128 *)(a2 + 8);
  result.n128_u32[0] = *((_DWORD *)a2 + 2);
  v5 = (__n128 *)(a1 + 8);
  v6 = (__n128 *)(a3 + 8);
  v7 = *((float *)a3 + 2);
  if (result.n128_f32[0] < *((float *)a1 + 2))
  {
    v8 = *a1;
    if (v7 < result.n128_f32[0])
    {
      *a1 = *a3;
      *a3 = v8;
      v36 = *v5;
      if (a1[32])
      {
        v9 = *((_QWORD *)a1 + 3);
        *v5 = *v6;
        v11 = a3[32];
        v10 = a3 + 32;
        v12 = v10 - 8;
        if (v11)
        {
          *((_QWORD *)a1 + 3) = *v12;
          v13 = *v10;
          result = v36;
          *v6 = v36;
          if (v13 == 1)
          {
LABEL_31:
            if (v13)
              *v12 = v9;
            return result;
          }
        }
        else
        {
          a1[32] = 0;
          v13 = *v10;
          result = v36;
          *v6 = v36;
          if (v13 == 1)
            goto LABEL_31;
        }
        goto LABEL_18;
      }
      *v5 = *v6;
      v24 = (unsigned __int8 *)(a3 + 32);
      if (a3[32])
      {
        v9 = 0;
        v12 = a3 + 24;
        *((_QWORD *)a1 + 3) = *((_QWORD *)a3 + 3);
        a1[32] = 1;
        v10 = a3 + 32;
        v13 = *v24;
        result = v36;
        *v6 = v36;
        if (!v13)
          goto LABEL_31;
LABEL_18:
        if (v13)
        {
          *v10 = 0;
          return result;
        }
        *v12 = v9;
LABEL_75:
        *v10 = 1;
        return result;
      }
LABEL_61:
      result = v36;
      *v6 = v36;
      return result;
    }
    *a1 = *a2;
    *a2 = v8;
    v38 = *v5;
    if (a1[32])
    {
      v20 = *((_QWORD *)a1 + 3);
      *v5 = *v3;
      v21 = a2 + 32;
      v22 = a2 + 24;
      if (a2[32])
      {
        *((_QWORD *)a1 + 3) = *v22;
        v23 = *v21;
        result = v38;
        *v3 = v38;
        if (v23 == 1)
        {
LABEL_38:
          if (v23)
          {
            *v22 = v20;
            result.n128_u32[0] = v6->n128_u32[0];
            if (v6->n128_f32[0] >= v3->n128_f32[0])
              return result;
            goto LABEL_54;
          }
          goto LABEL_53;
        }
      }
      else
      {
        a1[32] = 0;
        v23 = *v21;
        result = v38;
        *v3 = v38;
        if (v23 == 1)
          goto LABEL_38;
      }
    }
    else
    {
      *v5 = *v3;
      v21 = a2 + 32;
      if (!a2[32])
      {
        result = v38;
        *v3 = v38;
        result.n128_u32[0] = v6->n128_u32[0];
        if (v6->n128_f32[0] >= v3->n128_f32[0])
          return result;
        goto LABEL_54;
      }
      v20 = 0;
      v22 = a2 + 24;
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      a1[32] = 1;
      v23 = *v21;
      result = v38;
      *v3 = v38;
      if (!v23)
        goto LABEL_38;
    }
    if (v23)
    {
      *v21 = 0;
      result.n128_u32[0] = v6->n128_u32[0];
      if (v6->n128_f32[0] >= v3->n128_f32[0])
        return result;
      goto LABEL_54;
    }
    *v22 = v20;
    *v21 = 1;
LABEL_53:
    result.n128_u32[0] = v6->n128_u32[0];
    if (v6->n128_f32[0] >= v3->n128_f32[0])
      return result;
LABEL_54:
    v30 = *a2;
    *a2 = *a3;
    *a3 = v30;
    v36 = *v3;
    if (a2[32])
    {
      v31 = *((_QWORD *)a2 + 3);
      *v3 = *v6;
      v32 = a3[32];
      v10 = a3 + 32;
      v33 = v10 - 8;
      if (v32)
        *((_QWORD *)a2 + 3) = *v33;
      else
        a2[32] = 0;
      v35 = *v10;
      result = v36;
      *v6 = v36;
      if (v35 == 1)
      {
LABEL_71:
        if (v35)
          *v33 = v31;
        return result;
      }
    }
    else
    {
      *v3 = *v6;
      v34 = (unsigned __int8 *)(a3 + 32);
      if (!a3[32])
        goto LABEL_61;
      v31 = 0;
      v33 = a3 + 24;
      *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
      a2[32] = 1;
      v10 = a3 + 32;
      v35 = *v34;
      result = v36;
      *v6 = v36;
      if (!v35)
        goto LABEL_71;
    }
    if (v35)
    {
      *v10 = 0;
      return result;
    }
    *v33 = v31;
    goto LABEL_75;
  }
  if (v7 >= result.n128_f32[0])
    return result;
  v14 = *a2;
  *a2 = *a3;
  *a3 = v14;
  v37 = *v3;
  if (a2[32])
  {
    v15 = *((_QWORD *)a2 + 3);
    *v3 = *v6;
    v17 = a3[32];
    v16 = a3 + 32;
    v18 = v16 - 8;
    if (v17)
    {
      *((_QWORD *)a2 + 3) = *v18;
      v19 = *v16;
      result = v37;
      *v6 = v37;
      if (v19 == 1)
      {
LABEL_34:
        if (v19)
        {
          *v18 = v15;
          result.n128_u32[0] = v3->n128_u32[0];
          if (v3->n128_f32[0] >= v5->n128_f32[0])
            return result;
          goto LABEL_44;
        }
        goto LABEL_43;
      }
    }
    else
    {
      a2[32] = 0;
      v19 = *v16;
      result = v37;
      *v6 = v37;
      if (v19 == 1)
        goto LABEL_34;
    }
  }
  else
  {
    *v3 = *v6;
    v25 = (unsigned __int8 *)(a3 + 32);
    if (!a3[32])
    {
      result = v37;
      *v6 = v37;
      result.n128_u32[0] = v3->n128_u32[0];
      if (v3->n128_f32[0] >= v5->n128_f32[0])
        return result;
      goto LABEL_44;
    }
    v15 = 0;
    v18 = a3 + 24;
    *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
    a2[32] = 1;
    v16 = a3 + 32;
    v19 = *v25;
    result = v37;
    *v6 = v37;
    if (!v19)
      goto LABEL_34;
  }
  if (v19)
  {
    *v16 = 0;
    result.n128_u32[0] = v3->n128_u32[0];
    if (v3->n128_f32[0] >= v5->n128_f32[0])
      return result;
    goto LABEL_44;
  }
  *v18 = v15;
  *v16 = 1;
LABEL_43:
  result.n128_u32[0] = v3->n128_u32[0];
  if (v3->n128_f32[0] >= v5->n128_f32[0])
    return result;
LABEL_44:
  v26 = *a1;
  *a1 = *a2;
  *a2 = v26;
  v39 = *v5;
  if (!a1[32])
  {
    *v5 = *v3;
    if (!a2[32])
    {
      result = v39;
      *v3 = v39;
      return result;
    }
    v27 = 0;
    v28 = a2 + 24;
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    a1[32] = 1;
    v29 = a2[32];
    result = v39;
    *v3 = v39;
    if (!v29)
      goto LABEL_67;
    goto LABEL_50;
  }
  v27 = *((_QWORD *)a1 + 3);
  *v5 = *v3;
  v28 = a2 + 24;
  if (!a2[32])
  {
    a1[32] = 0;
    v29 = a2[32];
    result = v39;
    *v3 = v39;
    if (v29 == 1)
      goto LABEL_67;
LABEL_50:
    if (v29)
    {
      a2[32] = 0;
    }
    else
    {
      *((_QWORD *)a2 + 3) = v27;
      a2[32] = 1;
    }
    return result;
  }
  *((_QWORD *)a1 + 3) = *v28;
  v29 = a2[32];
  result = v39;
  *v3 = v39;
  if (v29 != 1)
    goto LABEL_50;
LABEL_67:
  if (v29)
    *v28 = v27;
  return result;
}

__n128 sub_223F34984(uint64_t a1, uint64_t a2, __n128 result)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  char v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  int v27;

  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v17 = (__n128 *)(a2 - 32);
      result.n128_u32[0] = *(_DWORD *)(a2 - 32);
      v18 = (__n128 *)(a1 + 8);
      if (result.n128_f32[0] >= *(float *)(a1 + 8))
        return result;
      v19 = *(_BYTE *)a1;
      *(_BYTE *)a1 = *(_BYTE *)(a2 - 40);
      *(_BYTE *)(a2 - 40) = v19;
      v26 = *v18;
      if (*(_BYTE *)(a1 + 32))
      {
        v20 = *(_QWORD *)(a1 + 24);
        *v18 = *v17;
        v21 = (_BYTE *)(a2 - 8);
        v22 = (_QWORD *)(a2 - 16);
        if (*(_BYTE *)(a2 - 8))
          *(_QWORD *)(a1 + 24) = *v22;
        else
          *(_BYTE *)(a1 + 32) = 0;
        v23 = 1;
      }
      else
      {
        *v18 = *v17;
        if (!*(_BYTE *)(a2 - 8))
        {
          result = v26;
          *v17 = v26;
          return result;
        }
        v20 = 0;
        v23 = 0;
        v22 = (_QWORD *)(a2 - 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 16);
        *(_BYTE *)(a1 + 32) = 1;
        v21 = (_BYTE *)(a2 - 8);
      }
      v24 = *v21;
      result = v26;
      *v17 = v26;
      if (v24 == v23)
      {
        if (v24)
          *v22 = v20;
      }
      else if (v24)
      {
        *v21 = 0;
      }
      else
      {
        *v22 = v20;
        *v21 = 1;
      }
      return result;
    case 3uLL:
      result.n128_u64[0] = sub_223F34424((char *)a1, (char *)(a1 + 40), (char *)(a2 - 40)).n128_u64[0];
      return result;
    case 4uLL:
      result.n128_u64[0] = sub_223F34D1C(a1, a1 + 40, a1 + 80, a2 - 40).n128_u64[0];
      return result;
    case 5uLL:
      result.n128_u64[0] = sub_223F33F3C(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40).n128_u64[0];
      return result;
    default:
      v5 = a1 + 80;
      result.n128_u64[0] = sub_223F34424((char *)a1, (char *)(a1 + 40), (char *)(a1 + 80)).n128_u64[0];
      v7 = a1 + 120;
      if (a1 + 120 == a2)
        return result;
      v8 = 0;
      v9 = 0;
LABEL_8:
      result.n128_u32[0] = *(_DWORD *)(v7 + 8);
      if (result.n128_f32[0] >= *(float *)(v5 + 8))
        goto LABEL_7;
      v10 = *(_BYTE *)v7;
      v25 = *(_QWORD *)(v7 + 12);
      v27 = *(_DWORD *)(v7 + 20);
      v11 = *(unsigned __int8 *)(v7 + 32);
      if (*(_BYTE *)(v7 + 32))
      {
        v6 = *(_QWORD *)(v7 + 24);
        v11 = 1;
      }
      else
      {
        v6 &= 0xFFFFFFFFFFFFFF00;
      }
      v12 = v8;
      break;
  }
  while (1)
  {
    v13 = v12;
    v14 = a1 + v12;
    *(_BYTE *)(v14 + 120) = *(_BYTE *)(v14 + 80);
    *(_OWORD *)(v14 + 128) = *(_OWORD *)(v14 + 88);
    if (*(unsigned __int8 *)(v14 + 152) != *(unsigned __int8 *)(v14 + 112))
      break;
    if (*(_BYTE *)(v14 + 152))
    {
      *(_QWORD *)(v14 + 144) = *(_QWORD *)(v14 + 104);
      if (v13 == -80)
        goto LABEL_23;
      goto LABEL_20;
    }
LABEL_19:
    if (v13 == -80)
      goto LABEL_23;
LABEL_20:
    v12 = v13 - 40;
    if (result.n128_f32[0] >= *(float *)(a1 + v13 + 48))
    {
      v15 = a1 + v12 + 120;
      goto LABEL_24;
    }
  }
  if (*(_BYTE *)(v14 + 152))
  {
    *(_BYTE *)(v14 + 152) = 0;
    goto LABEL_19;
  }
  *(_QWORD *)(v14 + 144) = *(_QWORD *)(v14 + 104);
  *(_BYTE *)(v14 + 152) = 1;
  if (v13 != -80)
    goto LABEL_20;
LABEL_23:
  v15 = a1;
LABEL_24:
  *(_BYTE *)v15 = v10;
  v16 = a1 + v13;
  *(_DWORD *)(a1 + v13 + 88) = result.n128_u32[0];
  *(_QWORD *)(v15 + 12) = v25;
  *(_DWORD *)(v15 + 20) = v27;
  if (*(unsigned __int8 *)(v15 + 32) == v11)
  {
    if (*(_BYTE *)(v15 + 32))
      *(_QWORD *)(v16 + 104) = v6;
  }
  else if (*(_BYTE *)(v15 + 32))
  {
    *(_BYTE *)(v15 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(v16 + 104) = v6;
    *(_BYTE *)(v15 + 32) = 1;
  }
  if (++v9 != 8)
  {
LABEL_7:
    v5 = v7;
    v8 += 40;
    v7 += 40;
    if (v7 == a2)
      return result;
    goto LABEL_8;
  }
  return result;
}

__n128 sub_223F34D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 *v8;
  __n128 result;
  __n128 *v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  _QWORD *v15;
  int v16;
  unsigned __int8 *v17;
  __n128 *v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  __n128 *v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;

  result = sub_223F34424((char *)a1, (char *)a2, (char *)a3);
  v8 = (__n128 *)(a4 + 8);
  result.n128_u32[0] = *(_DWORD *)(a4 + 8);
  v10 = (__n128 *)(a3 + 8);
  if (result.n128_f32[0] >= *(float *)(a3 + 8))
    return result;
  v11 = *(_BYTE *)a3;
  *(_BYTE *)a3 = *(_BYTE *)a4;
  *(_BYTE *)a4 = v11;
  v28 = *v10;
  if (*(_BYTE *)(a3 + 32))
  {
    v12 = *(_QWORD *)(a3 + 24);
    *v10 = *v8;
    v14 = *(unsigned __int8 *)(a4 + 32);
    v13 = (_BYTE *)(a4 + 32);
    v15 = v13 - 8;
    if (v14)
    {
      *(_QWORD *)(a3 + 24) = *v15;
      v16 = *v13;
      result = v28;
      *v8 = v28;
      if (v16 == 1)
      {
LABEL_12:
        if (v16)
        {
          *v15 = v12;
          result.n128_u32[0] = v10->n128_u32[0];
          v18 = (__n128 *)(a2 + 8);
          if (v10->n128_f32[0] >= *(float *)(a2 + 8))
            return result;
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    else
    {
      *(_BYTE *)(a3 + 32) = 0;
      v16 = *v13;
      result = v28;
      *v8 = v28;
      if (v16 == 1)
        goto LABEL_12;
    }
LABEL_8:
    if (v16)
    {
      *v13 = 0;
      result.n128_u32[0] = v10->n128_u32[0];
      v18 = (__n128 *)(a2 + 8);
      if (v10->n128_f32[0] >= *(float *)(a2 + 8))
        return result;
      goto LABEL_17;
    }
    *v15 = v12;
    *v13 = 1;
LABEL_16:
    result.n128_u32[0] = v10->n128_u32[0];
    v18 = (__n128 *)(a2 + 8);
    if (v10->n128_f32[0] >= *(float *)(a2 + 8))
      return result;
    goto LABEL_17;
  }
  *v10 = *v8;
  v17 = (unsigned __int8 *)(a4 + 32);
  if (*(_BYTE *)(a4 + 32))
  {
    v12 = 0;
    v15 = (_QWORD *)(a4 + 24);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_BYTE *)(a3 + 32) = 1;
    v13 = (_BYTE *)(a4 + 32);
    v16 = *v17;
    result = v28;
    *v8 = v28;
    if (!v16)
      goto LABEL_12;
    goto LABEL_8;
  }
  result = v28;
  *v8 = v28;
  result.n128_u32[0] = v10->n128_u32[0];
  v18 = (__n128 *)(a2 + 8);
  if (v10->n128_f32[0] >= *(float *)(a2 + 8))
    return result;
LABEL_17:
  v19 = *(_BYTE *)a2;
  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)a3 = v19;
  v29 = *v18;
  if (*(_BYTE *)(a2 + 32))
  {
    v20 = *(_QWORD *)(a2 + 24);
    *v18 = *v10;
    v21 = (_QWORD *)(a3 + 24);
    if (*(_BYTE *)(a3 + 32))
    {
      *(_QWORD *)(a2 + 24) = *v21;
      v22 = *(unsigned __int8 *)(a3 + 32);
      result = v29;
      *v10 = v29;
      if (v22 == 1)
        goto LABEL_29;
    }
    else
    {
      *(_BYTE *)(a2 + 32) = 0;
      v22 = *(unsigned __int8 *)(a3 + 32);
      result = v29;
      *v10 = v29;
      if (v22 == 1)
        goto LABEL_29;
    }
  }
  else
  {
    *v18 = *v10;
    if (!*(_BYTE *)(a3 + 32))
    {
      result = v29;
      *v10 = v29;
      result.n128_u32[0] = v18->n128_u32[0];
      v23 = (__n128 *)(a1 + 8);
      if (v18->n128_f32[0] >= *(float *)(a1 + 8))
        return result;
      goto LABEL_34;
    }
    v20 = 0;
    v21 = (_QWORD *)(a3 + 24);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_BYTE *)(a2 + 32) = 1;
    v22 = *(unsigned __int8 *)(a3 + 32);
    result = v29;
    *v10 = v29;
    if (!v22)
    {
LABEL_29:
      if (v22)
      {
        *v21 = v20;
        result.n128_u32[0] = v18->n128_u32[0];
        v23 = (__n128 *)(a1 + 8);
        if (v18->n128_f32[0] >= *(float *)(a1 + 8))
          return result;
        goto LABEL_34;
      }
LABEL_33:
      result.n128_u32[0] = v18->n128_u32[0];
      v23 = (__n128 *)(a1 + 8);
      if (v18->n128_f32[0] >= *(float *)(a1 + 8))
        return result;
      goto LABEL_34;
    }
  }
  if (!v22)
  {
    *(_QWORD *)(a3 + 24) = v20;
    *(_BYTE *)(a3 + 32) = 1;
    goto LABEL_33;
  }
  *(_BYTE *)(a3 + 32) = 0;
  result.n128_u32[0] = v18->n128_u32[0];
  v23 = (__n128 *)(a1 + 8);
  if (v18->n128_f32[0] >= *(float *)(a1 + 8))
    return result;
LABEL_34:
  v24 = *(_BYTE *)a1;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)a2 = v24;
  v30 = *v23;
  if (*(_BYTE *)(a1 + 32))
  {
    v25 = *(_QWORD *)(a1 + 24);
    *v23 = *v18;
    v26 = (_QWORD *)(a2 + 24);
    if (*(_BYTE *)(a2 + 32))
    {
      *(_QWORD *)(a1 + 24) = *v26;
      v27 = *(unsigned __int8 *)(a2 + 32);
      result = v30;
      *v18 = v30;
      if (v27 == 1)
      {
LABEL_45:
        if (v27)
          *v26 = v25;
        return result;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 32) = 0;
      v27 = *(unsigned __int8 *)(a2 + 32);
      result = v30;
      *v18 = v30;
      if (v27 == 1)
        goto LABEL_45;
    }
  }
  else
  {
    *v23 = *v18;
    if (!*(_BYTE *)(a2 + 32))
    {
      result = v30;
      *v18 = v30;
      return result;
    }
    v25 = 0;
    v26 = (_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_BYTE *)(a1 + 32) = 1;
    v27 = *(unsigned __int8 *)(a2 + 32);
    result = v30;
    *v18 = v30;
    if (!v27)
      goto LABEL_45;
  }
  if (v27)
  {
    *(_BYTE *)(a2 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v25;
    *(_BYTE *)(a2 + 32) = 1;
  }
  return result;
}

void sub_223F35110(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  float *v5;
  uint64_t v6;
  float32x2_t *v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  void **v20;
  int v21;
  float v22;
  int v23;
  float v24;
  float32x2_t v25;
  float v26;
  float v28;
  float v29;
  float v31;
  float v32;
  float v33;
  void **v35;
  float v36;
  float v37;
  float *v38;
  float v39;
  float v40;
  int v41;
  int v42;
  float v43;
  float32x2_t v44;
  float v45;
  float v47;
  float v49;
  float v50;
  float v51;
  float v52;
  float32x2_t v53;
  float v54;
  uint64_t v55;
  float v56;
  float v57;
  char v58;

  v5 = (float *)a1[1];
  v6 = *(_QWORD *)(*a1 + 8);
  v7 = (float32x2_t *)(v6 + 8 * a2);
  v8 = (float32x2_t *)(v6 + 8 * a3);
  v9 = *v7;
  v10 = *v7;
  v11 = *v8;
  v12 = *v8;
  v13 = COERCE_FLOAT(*v7);
  v14 = *v5;
  v15 = v5[1];
  v16 = v13 - *v5;
  v17 = COERCE_FLOAT(HIDWORD(*(unint64_t *)v7)) - v15;
  v18 = vabds_f32(v13, *v5);
  if (v16 == 0.0 || v18 <= 0.000001)
  {
    v20 = (void **)a1[2];
    v54 = COERCE_FLOAT(HIDWORD(*(unint64_t *)v7)) - v15;
    v55 = a2;
    LOBYTE(v56) = 0;
    v58 = 0;
LABEL_6:
    v53 = v10;
    sub_223F35494(v20, (uint64_t)&v54);
    v10 = v53;
    goto LABEL_44;
  }
  v21 = v14 == v13;
  if (v14 <= v13)
    v22 = v16;
  else
    v22 = v14 - v13;
  if (v22 <= 0.000001)
    v21 = 1;
  if (v14 == v11.f32[0])
  {
    if (v14 < v13)
      LOBYTE(v21) = 1;
    if ((v21 & 1) == 0)
      goto LABEL_44;
  }
  else
  {
    v23 = v14 > v11.f32[0];
    v24 = v11.f32[0] - v14;
    if (v14 > v11.f32[0])
      v24 = v14 - v11.f32[0];
    if (v14 < v13)
      v21 = 1;
    if (v24 <= 0.000001)
      v23 = 1;
    if (v23 != v21)
      goto LABEL_44;
  }
  v25 = vsub_f32(v12, v10);
  v26 = fabsf(v25.f32[0]);
  if (v25.f32[0] != 0.0 && v26 > 0.000001)
  {
    LODWORD(v28) = HIDWORD(*(unint64_t *)v7);
    v29 = fabsf(v25.f32[1]);
    if (v25.f32[1] != 0.0 && v29 > 0.000001)
      v28 = v10.f32[1] + (float)((float)(v14 - v13) * (float)(v25.f32[1] / v25.f32[0]));
    if (v14 != v11.f32[0])
    {
      v31 = v11.f32[0] - v14;
      if (v14 >= v11.f32[0])
        v31 = v14 - v11.f32[0];
      if (v31 > 0.000001)
        goto LABEL_43;
    }
    if (v28 != v11.f32[1])
    {
      v32 = v11.f32[1] - v28;
      if (v28 >= v11.f32[1])
        v32 = v28 - v11.f32[1];
      if (v32 > 0.000001)
      {
LABEL_43:
        v54 = v28 - v15;
        v55 = a2;
        v56 = v14;
        v57 = v28;
        v58 = 1;
        v20 = (void **)a1[2];
        goto LABEL_6;
      }
    }
  }
LABEL_44:
  v33 = fabsf(v17);
  if (v17 == 0.0 || v33 <= 0.000001)
  {
    v35 = (void **)(a1[2] + 24);
    v54 = v16;
    v55 = a2;
    LOBYTE(v56) = 0;
    v58 = 0;
LABEL_49:
    sub_223F35494(v35, (uint64_t)&v54);
    return;
  }
  v36 = v7->f32[1];
  v37 = v8->f32[1];
  v38 = (float *)a1[1];
  v39 = v38[1];
  v40 = v36 - v39;
  if (v36 < v39)
    v40 = v39 - v36;
  v41 = v36 == v39 || v40 <= 0.000001;
  if (v37 == v39)
  {
    if (v36 > v39)
      LOBYTE(v41) = 1;
    if ((v41 & 1) == 0)
      return;
  }
  else
  {
    v42 = v37 < v39;
    v43 = v37 - v39;
    if (v37 < v39)
      v43 = v39 - v37;
    if (v36 > v39)
      v41 = 1;
    if (v43 <= 0.000001)
      v42 = 1;
    if (v42 != v41)
      return;
  }
  v44 = vsub_f32(v12, v10);
  v45 = fabsf(v44.f32[1]);
  if (v44.f32[1] != 0.0 && v45 > 0.000001)
  {
    v47 = fabsf(v44.f32[0]);
    if (v44.f32[0] != 0.0 && v47 > 0.000001)
      v9.f32[0] = (float)((float)(v44.f32[0] / v44.f32[1]) * (float)(v39 - v10.f32[1])) + v13;
    v49 = v8->f32[0];
    if (v8->f32[0] != v9.f32[0])
    {
      v50 = v9.f32[0] - v49;
      v51 = v49 - v9.f32[0];
      if (v8->f32[0] <= v9.f32[0])
        v51 = v50;
      if (v51 > 0.000001)
        goto LABEL_87;
    }
    if (v37 != v39)
    {
      v52 = v39 >= v37 ? v39 - v37 : v37 - v39;
      if (v52 > 0.000001)
      {
LABEL_87:
        v54 = v9.f32[0] - *v38;
        v55 = a2;
        v56 = v9.f32[0];
        v57 = v39;
        v58 = 1;
        v35 = (void **)(a1[2] + 24);
        goto LABEL_49;
      }
    }
  }
}

void sub_223F35494(void **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v5[16] = 0;
    v5[24] = 0;
    if (*(_BYTE *)(a2 + 24))
    {
      *((_QWORD *)v5 + 2) = *(_QWORD *)(a2 + 16);
      v5[24] = 1;
    }
    v6 = v5 + 32;
LABEL_5:
    a1[1] = v6;
    return;
  }
  v7 = (char *)*a1;
  v8 = (v5 - (_BYTE *)*a1) >> 5;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 59)
    sub_22316E078();
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 4 > v9)
    v9 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    if (v11 >> 59)
      sub_223174E94();
    v12 = (char *)operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[32 * v8];
  *(_OWORD *)v13 = *(_OWORD *)a2;
  v13[16] = 0;
  v13[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *((_QWORD *)v13 + 2) = *(_QWORD *)(a2 + 16);
    v13[24] = 1;
  }
  v6 = v13 + 32;
  if (v5 != v7)
  {
    v14 = 0;
    do
    {
      v15 = &v13[v14];
      *((_OWORD *)v15 - 2) = *(_OWORD *)&v5[v14 - 32];
      *(v15 - 16) = 0;
      *(v15 - 8) = 0;
      if (v5[v14 - 8])
      {
        *((_QWORD *)v15 - 2) = *(_QWORD *)&v5[v14 - 16];
        *(v15 - 8) = 1;
      }
      v14 -= 32;
    }
    while (&v5[v14] != v7);
    v5 = (char *)*a1;
    v13 += v14;
  }
  *a1 = v13;
  a1[1] = v6;
  a1[2] = &v12[32 * v11];
  if (!v5)
    goto LABEL_5;
  operator delete(v5);
  a1[1] = v6;
}

float32x2_t *sub_223F35620@<X0>(float32x2_t *result@<X0>, int a2@<W1>, float32x2_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;

  v4 = result->u32[0];
  v3 = result->u32[1];
  v6 = result[1].u32[0];
  v5 = result[1].u32[1];
  v7 = vmul_f32(vadd_f32(*result, result[1]), (float32x2_t)0x3F0000003F000000);
  switch(a2)
  {
    case 0:
      *a3 = (float32x2_t)(v4 | (v3 << 32));
      a3[1] = v7;
      LODWORD(v5) = v7.i32[1];
      if (*(float *)&v4 > v7.f32[0])
      {
        a3->i32[0] = v7.i32[0];
        a3[1].i32[0] = v4;
      }
      if (*(float *)&v3 <= v7.f32[1])
        return result;
      goto LABEL_9;
    case 1:
      LODWORD(v5) = v7.i32[1];
      *a3 = (float32x2_t)(v7.u32[0] | (unint64_t)(v3 << 32));
      a3[1] = (float32x2_t)(v6 | ((unint64_t)v7.u32[1] << 32));
      if (v7.f32[0] > *(float *)&v6)
      {
        a3->i32[0] = v6;
        a3[1].i32[0] = v7.i32[0];
      }
      if (*(float *)&v3 <= v7.f32[1])
        return result;
      goto LABEL_9;
    case 2:
      LODWORD(v3) = v7.i32[1];
      *a3 = (float32x2_t)(v4 | ((unint64_t)v7.u32[1] << 32));
      a3[1] = (float32x2_t)(v7.u32[0] | (unint64_t)(v5 << 32));
      if (*(float *)&v4 > v7.f32[0])
      {
        a3->i32[0] = v7.i32[0];
        a3[1].i32[0] = v4;
      }
      if (v7.f32[1] > *(float *)&v5)
        goto LABEL_9;
      return result;
    case 3:
      *a3 = v7;
      a3[1] = (float32x2_t)(v6 | (v5 << 32));
      LODWORD(v3) = v7.i32[1];
      if (v7.f32[0] > *(float *)&v6)
      {
        a3->i32[0] = v6;
        a3[1].i32[0] = v7.i32[0];
      }
      if (v7.f32[1] <= *(float *)&v5)
        return result;
LABEL_9:
      a3->i32[1] = v5;
      a3[1].i32[1] = v3;
      return result;
    default:
      sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Geometry/QuadTree.cpp", 51, (uint64_t)"", 0, (uint64_t)"Invalid quadrant index", 22, (void (*)(void **))sub_22457406C);
      abort();
  }
}

uint64_t sub_223F35794(unint64_t a1, float32x2_t *a2, int32x2_t a3)
{
  _BOOL8 v3;
  uint64_t v6;
  float32x2_t v7;
  char *v8;
  BOOL v10;
  char *v12;
  char *v13;
  char *v14;
  int32x2_t v15;
  char **v16;

  if (a1 < 2)
    return 1;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (a1 >> 61)
    sub_2236B43DC();
  v6 = 8 * a1;
  v12 = (char *)operator new(8 * a1);
  v13 = v12;
  v14 = &v12[v6];
  v16 = &v12;
  v7 = (float32x2_t)vdup_lane_s32(a3, 0);
  do
  {
    v15 = vcvt_s32_f32(vrndm_f32(vdiv_f32(*a2, v7)));
    sub_2236B43F0((void ***)&v16, &v15);
    ++a2;
    v6 -= 8;
  }
  while (v6);
  if (v12 + 8 == v13)
  {
    v3 = 1;
    if (!v12)
      return v3;
  }
  else
  {
    v8 = v12 + 16;
    do
    {
      v3 = *((_DWORD *)v8 - 2) == *((_DWORD *)v8 - 4) && *((_DWORD *)v8 - 1) == *((_DWORD *)v8 - 3);
      v10 = !v3 || v8 == v13;
      v8 += 8;
    }
    while (!v10);
    if (!v12)
      return v3;
  }
  operator delete(v12);
  return v3;
}

void sub_223F358A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float32x4_t sub_223F358C8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t result@<Q0>, unint64_t a5@<D1>, float32x4_t a6@<Q3>)
{
  float32x4_t v7;
  float32x2_t v8;
  float v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  float v13;
  float v14;
  int8x16_t v15;
  float v16;
  uint64_t v18;
  float32x4_t v19;
  int8x16_t v20;

  result.i64[0] = *(_QWORD *)(a1 + 48);
  result.i32[2] = *(_DWORD *)(a1 + 56);
  LODWORD(a5) = *(_DWORD *)(a1 + 40);
  a6.i64[0] = *(_QWORD *)(a1 + 32);
  v7 = a6;
  v7.i32[2] = a5;
  v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 1);
  v9 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a6.f32, *(float32x2_t *)a6.f32), v8, *(float32x2_t *)a6.f32, 1), (float32x2_t)a5, (float32x2_t)a5).f32[0];
  if (v9 == 1.0)
    goto LABEL_12;
  v10 = v9 >= 1.0 ? v9 + -1.0 : 1.0 - v9;
  if (v10 <= 0.000001)
    goto LABEL_12;
  v8.f32[0] = 1.0 / sqrtf(v9);
  v7 = vmulq_n_f32(v7, v8.f32[0]);
  v11 = vmul_lane_f32(v8, *(float32x2_t *)a6.f32, 1);
  v12 = vmul_f32((float32x2_t)a5, v8);
  v8 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.f32, 1);
  a5 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v13 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32), v11, *(float32x2_t *)v7.f32, 1), (float32x2_t)a5, v12).f32[0];
  if (v13 == 1.0)
    goto LABEL_12;
  v14 = v13 >= 1.0 ? v13 + -1.0 : 1.0 - v13;
  if (v14 <= 0.000001)
  {
LABEL_12:
    v16 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)v7.f32), v8, *(float32x2_t *)result.f32, 1), (float32x2_t)a5, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL)).f32[0];
  }
  else
  {
    *(float *)&a5 = sqrtf(v13);
    v15 = (int8x16_t)vmulq_n_f32(v7, 1.0 / *(float *)&a5);
    v16 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)result.f32, *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), *(float32x2_t *)result.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL)).f32[0];
    result = (float32x4_t)vdupq_lane_s32((int32x2_t)a5, 0);
    v7 = vdivq_f32(v7, result);
  }
  result.f32[0] = fabsf(v16);
  if (v16 != 0.0 && result.f32[0] > 0.000001)
  {
    v20 = (int8x16_t)v7;
    v18 = (*(uint64_t (**)(uint64_t, float32x4_t))(*(_QWORD *)a2 + 16))(a2, result);
    *(float32x2_t *)v19.f32 = vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)(v18 + 24));
    *(float32x2_t *)&v19.u32[2] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)(v18 + 32)), *(float32x2_t *)(v18 + 36), *(float32x2_t *)v20.i8, 1));
    result = vmulq_n_f32(v19, -1.0 / v16);
    *(_DWORD *)(a3 + 8) = result.i32[2];
    *(_QWORD *)a3 = result.i64[0];
    *(_BYTE *)(a3 + 12) = 1;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 12) = 0;
  }
  return result;
}

uint64_t *sub_223F35A88@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v4)(_QWORD);
  uint64_t *result;
  uint64_t *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t *v16;
  float v17;
  __int128 v18;
  unint64_t v19;
  float v20;
  __int8 *v21;
  float *v22;
  float32x2_t v23;
  int64x2_t v24;
  uint64_t *v25;
  unint64_t v26;
  float64x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  __int128 v30;
  float v31;
  float v32;
  __int128 v33;
  float *v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t *v37;
  uint64_t v38;
  float32x4_t v39;
  _QWORD *v40;
  void *v41;
  _BYTE *v42;
  _BYTE *v43;
  int64_t v44;
  char *v45;
  char *v46;
  _BYTE *v47;
  _OWORD *v48;
  int64x2_t v49;
  int64x2_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float32x2_t v55;
  float v56;
  int64x2_t v57;
  __int128 v58;
  unint64_t v59;

  v59 = a1;
  v4 = off_255792BD8;
  if ((*(_BYTE *)off_255792BD8(&off_255792BD8) & 1) != 0)
  {
    result = (uint64_t *)off_255792BC0(&off_255792BC0);
    v6 = result;
    v7 = (int8x8_t)result[1];
    if (!*(_QWORD *)&v7)
      goto LABEL_22;
  }
  else
  {
    v48 = (_OWORD *)off_255792BC0(&off_255792BC0);
    *v48 = 0u;
    v48[1] = 0u;
    *((_DWORD *)v48 + 8) = 1065353216;
    _tlv_atexit((void (__cdecl *)(void *))sub_223F35FD4, v48);
    *(_BYTE *)v4(&off_255792BD8) = 1;
    result = (uint64_t *)off_255792BC0(&off_255792BC0);
    v6 = result;
    v7 = (int8x8_t)result[1];
    if (!*(_QWORD *)&v7)
      goto LABEL_22;
  }
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a1;
    if (*(_QWORD *)&v7 <= a1)
      v9 = a1 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a1;
  }
  v10 = *(_QWORD **)(*v6 + 8 * v9);
  if (v10)
  {
    v11 = (_QWORD *)*v10;
    if (v11)
    {
      if (v8.u32[0] < 2uLL)
      {
        v12 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v14 = v11[1];
          if (v14 == a1)
          {
            if (v11[2] == a1)
              goto LABEL_44;
          }
          else if ((v14 & v12) != v9)
          {
            goto LABEL_22;
          }
          v11 = (_QWORD *)*v11;
          if (!v11)
            goto LABEL_22;
        }
      }
      do
      {
        v13 = v11[1];
        if (v13 == a1)
        {
          if (v11[2] == a1)
          {
LABEL_44:
            *a2 = 0;
            a2[1] = 0;
            a2[2] = 0;
            v43 = (_BYTE *)v11[3];
            v47 = (_BYTE *)v11[4];
            v44 = v47 - v43;
            if (v47 != v43)
            {
              if (v44 < 0)
                sub_22316E078();
              v45 = (char *)operator new(v47 - v43);
LABEL_42:
              *a2 = v45;
              a2[1] = v45;
              v46 = &v45[4 * (v44 >> 2)];
              a2[2] = v46;
              result = (uint64_t *)memcpy(v45, v43, v44);
              a2[1] = v46;
            }
            return result;
          }
        }
        else
        {
          if (v13 >= *(_QWORD *)&v7)
            v13 %= *(_QWORD *)&v7;
          if (v13 != v9)
            break;
        }
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
  }
LABEL_22:
  if (!a1)
  {
    v21 = 0;
    v22 = 0;
    v16 = 0;
    goto LABEL_37;
  }
  if (a1 >> 62)
    sub_22316E078();
  v15 = 4 * a1;
  v16 = (float32x4_t *)operator new(4 * a1);
  v17 = (float)((float)((float)((float)((float)a1 + -1.0) * 0.5) + -1.0) * 0.3) + 0.8;
  v54 = 1.0 / (float)(v17 * (float)(v17 + v17));
  bzero(v16, 4 * a1);
  if (a1 >= 4)
  {
    *(float *)&v18 = (float)(a1 - 1) * 0.5;
    v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v18, 0);
    v19 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = (int64x2_t)xmmword_2245F5410;
    v25 = &v16->i64[1];
    LODWORD(v58) = 0;
    v49 = vdupq_n_s64(4uLL);
    v50 = vdupq_n_s64(2uLL);
    v26 = a1 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v57 = v24;
      v27 = vcvtq_f64_u64((uint64x2_t)vaddq_s64(v24, v50));
      v28 = vabd_f32(vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v24)), v23);
      *(float32x2_t *)&v27.f64[0] = vabd_f32(vcvt_f32_f64(v27), v23);
      v29 = vmul_n_f32(vmul_f32(v28, vneg_f32(v28)), v54);
      v53 = v29.f32[0];
      v55 = vmul_n_f32(vmul_f32(*(float32x2_t *)&v27.f64[0], vneg_f32(*(float32x2_t *)&v27.f64[0])), v54);
      v56 = expf(v29.f32[1]);
      v52 = expf(v53);
      v51 = expf(v55.f32[1]);
      *(float *)&v30 = expf(v55.f32[0]);
      *((float *)&v30 + 1) = v51;
      *(v25 - 1) = __PAIR64__(LODWORD(v56), LODWORD(v52));
      *v25 = v30;
      *(float *)&v30 = (float)((float)((float)(*(float *)&v58 + v52) + v56) + *(float *)&v30) + v51;
      v58 = v30;
      v24 = vaddq_s64(v57, v49);
      v25 += 2;
      v26 -= 4;
    }
    while (v26);
    v20 = (float)(a1 - 1) * 0.5;
    if (v19 == a1)
      goto LABEL_31;
  }
  else
  {
    v19 = 0;
    v20 = (float)(a1 - 1) * 0.5;
    LODWORD(v18) = 0;
    v58 = v18;
  }
  do
  {
    v31 = vabds_f32((float)v19, v20);
    v32 = expf(v54 * (float)-(float)(v31 * v31));
    v16->f32[v19] = v32;
    v33 = v58;
    *(float *)&v33 = *(float *)&v58 + v32;
    v58 = v33;
    v20 = (float)(a1 - 1) * 0.5;
    ++v19;
  }
  while (a1 != v19);
LABEL_31:
  v22 = &v16->f32[(unint64_t)v15 / 4];
  v34 = (float *)v16;
  if ((unint64_t)(v15 - 4) < 0x1C)
    goto LABEL_54;
  v35 = ((unint64_t)(v15 - 4) >> 2) + 1;
  v34 = &v16->f32[v35 & 0x7FFFFFFFFFFFFFF8];
  v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v58, 0);
  v37 = v16 + 1;
  v38 = v35 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v39 = vdivq_f32(*v37, v36);
    v37[-1] = vdivq_f32(v37[-1], v36);
    *v37 = v39;
    v37 += 2;
    v38 -= 8;
  }
  while (v38);
  if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_54:
    do
    {
      *v34 = *v34 / *(float *)&v58;
      ++v34;
    }
    while (v34 != v22);
  }
  v21 = &v16->i8[4 * a1];
LABEL_37:
  v40 = sub_223F3603C(v6, a1, &v59);
  v41 = (void *)v40[3];
  if (v41)
  {
    v40[4] = v41;
    operator delete(v41);
    v40[3] = 0;
    v40[4] = 0;
    v40[5] = 0;
  }
  v40[3] = v16;
  v40[4] = v22;
  v40[5] = v21;
  result = sub_223F3603C(v6, a1, &v59);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v43 = (_BYTE *)result[3];
  v42 = (_BYTE *)result[4];
  v44 = v42 - v43;
  if (v42 != v43)
  {
    if (v44 < 0)
      sub_22316E078();
    v45 = (char *)operator new(v42 - v43);
    goto LABEL_42;
  }
  return result;
}

void sub_223F35F80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F35FD4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

_QWORD *sub_223F3603C(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_223174E94();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_223F364D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223EB996C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F364EC(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 a3@<W2>, int a4@<W3>, void **a5@<X8>)
{
  float *v7;
  float *v8;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float v16;
  float32x2_t *v17;
  float32x2_t *v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v22;
  std::string::size_type v23;
  BOOL v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __int128 v29;
  char *v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x2_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x2_t v37;
  float32x4_t v38;
  double v39;
  int8x16_t v40;
  float32x4_t v41;
  double v42;
  float32x2_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  __int128 v60;
  float32x2_t *v61;
  float32x2_t *v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  __int128 v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  int64_t v70;
  uint64_t v71;
  char *v72;
  int8x16_t v73;
  int8x16_t v74;
  float32x4_t v75;
  uint64_t v76;
  float32x4_t v77;
  float32x4_t v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  BOOL v94;
  int *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int *v99;
  uint64_t v100;
  int *v101;
  int *v102;
  char *v103;
  char *v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  char *v111;
  int v112;
  int v113;
  int v114;
  char *v115;
  int v116;
  char *v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unsigned int v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int *v128;
  int *v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int *v134;
  int *v135;
  int v136;
  int *v137;
  int *v138;
  int *v139;
  int *v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unint64_t v151;
  int32x4_t v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  float v158;
  float v159;
  float *v160;
  float *v161;
  float v162;
  float v163;
  float *v164;
  float *v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  char v175;
  int v176;
  unint64_t v177;
  int32x4_t *v178;
  unint64_t v179;
  char v180;
  int32x4_t v181;
  int v182;
  unint64_t v183;
  int32x4_t *v184;
  BOOL v185;
  uint64_t v186;
  _DWORD *v187;
  unsigned int v188;
  uint64_t v189;
  unsigned __int8 *v190;
  float *v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  float *v197;
  unsigned __int8 *v198;
  float *v199;
  _DWORD *v200;
  int v201;
  unsigned __int8 *v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  uint64_t v216;
  double v217;
  uint64_t v218;
  double v219;
  float64x2_t v220;
  double v221;
  BOOL v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unsigned int *v231;
  unint64_t v232;
  uint64_t v233;
  float v234;
  uint8x8_t v235;
  unint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  unint64_t v242;
  unint64_t v243;
  uint8x8_t v244;
  _QWORD *v245;
  _QWORD *v246;
  unint64_t v247;
  _QWORD *v248;
  unsigned int v249;
  uint64_t v250;
  BOOL v251;
  unint64_t v252;
  unint64_t v253;
  _BOOL8 v254;
  BOOL v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  _BYTE *v265;
  int v266;
  int v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  int v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint8x8_t v276;
  unint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  _QWORD *v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  uint64_t v309;
  BOOL v310;
  unint64_t v311;
  unint64_t **v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t v315;
  void **v316;
  void **v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  _BYTE *v322;
  int v323;
  unsigned int v324;
  int v325;
  int v326;
  _QWORD *v327;
  unsigned int v328;
  unint64_t v329;
  int v330;
  unsigned int v331;
  uint64_t v332;
  void *v333;
  _QWORD *v334;
  int64x2_t v335;
  char *v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  float64x2_t *v342;
  float64x2_t *v343;
  float64x2_t v344;
  float64x2_t *v345;
  _QWORD *v346;
  void *v347;
  BOOL v348;
  unint64_t v349;
  unint64_t v350;
  _BOOL8 v351;
  BOOL v352;
  uint64_t v353;
  unint64_t *v354;
  BOOL v355;
  unint64_t v356;
  unsigned int v357;
  int v358;
  int v359;
  int v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  int v366;
  unint64_t v367;
  unint64_t *v368;
  int v369;
  char *v370;
  char v371;
  char v372;
  char v373;
  char v374;
  char v375;
  __int128 v376;
  void *v377;
  BOOL v378;
  uint64_t v379;
  uint64_t v380;
  _BOOL4 v381;
  float32x2_t v382;
  _QWORD *v383;
  _QWORD *v384;
  void *v385;
  char *v386;
  char *v387;
  uint32x2_t *v388;
  uint32x2_t *v389;
  uint64_t v390;
  float32x2_t *v391;
  uint64_t v392;
  uint32x2_t *v393;
  float32x2_t v394;
  float32x2_t *v395;
  int64_t v396;
  uint64_t v397;
  unint64_t v398;
  int64_t v399;
  unint64_t v400;
  _BYTE *v401;
  float32x2_t *v402;
  char *v403;
  float32x2_t *v404;
  int64_t v405;
  unint64_t v406;
  float32x2_t *v407;
  float32x2_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  _OWORD *v412;
  float32x2_t *v413;
  uint64_t v414;
  __int128 v415;
  float v416;
  float *v417;
  float v418;
  uint64_t v419;
  float v420;
  float v421;
  float v422;
  float v423;
  float *v424;
  float *v425;
  float *v426;
  float v427;
  float *v428;
  float v429;
  float v430;
  float v431;
  char *v433;
  char **v434;
  char *v435;
  char *v436;
  int64_t v437;
  char *v438;
  uint64_t v439;
  char *v440;
  char *v441;
  char *v442;
  char *v443;
  char *v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  _BYTE *v450;
  char *v451;
  int64_t v452;
  unint64_t v453;
  char *v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  _OWORD *v459;
  char *v460;
  uint64_t v461;
  __int128 v462;
  char *v463;
  char *v464;
  char *v465;
  void *v466;
  void *v467;
  _QWORD *v468;
  void *v469;
  _BYTE *v470;
  int8x16_t v471;
  float32x2_t v472;
  unsigned __int8 v473;
  unsigned __int8 v474;
  float32x4_t v475;
  float64x2_t v476;
  float32x4_t v477;
  float32x2_t v478;
  int8x16_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v485;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v494;
  unint64_t v496;
  _QWORD *v498;
  void *v499;
  float64x2_t v500;
  int64x2_t v501;
  int8x16_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v508;
  float64x2_t v510;
  uint64_t v512;
  uint64_t v513;
  char *v514;
  float64x2_t v515;
  int32x2_t v516;
  uint64_t v517;
  unint64_t v518;
  char *v519;
  float32x2_t v520;
  float32x2_t v521;
  unint64_t v522;
  int8x16_t v523;
  int8x16_t v524;
  int8x16_t v525;
  unint64_t v526;
  uint64_t v527;
  char *v528;
  unint64_t v529;
  float *v530;
  __int128 v531;
  uint64_t v532;
  float v533;
  uint64_t v534;
  float *v535;
  float v536;
  uint64_t v537;
  float v538;
  float v539;
  float v540;
  float v541;
  float32x4_t v542;
  uint64_t v543;
  char *v544;
  void **v545;
  unint64_t v546;
  char *v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  float64x2_t v552;
  float64x2_t v553;
  char *v554;
  char *v555;
  unint64_t v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  _QWORD *v560;
  float64x2_t v561;
  float64x2_t v562;
  char *v563;
  __int128 v564;
  float64x2_t v565;
  __int128 v566;
  __int128 v567;
  unint64_t v568;
  char *v569;
  uint64_t v570;
  char *v571;
  char *v572;
  __int128 v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  __int128 v578;
  char *v579;
  void *v580;
  void *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  void *v585;
  void *v586;
  uint64_t v587;
  uint64_t v588;
  void *v589;
  uint64_t v590;
  void *v591;
  void *v592;
  int v593;
  int v594;
  unsigned __int8 v595;
  std::string *v596;
  __int128 v597;
  std::string *v598;
  __int128 v599;
  void **v600;
  uint64_t v601;
  unsigned __int8 v602;
  uint64_t *v603;
  std::__shared_weak_count *v604;
  unint64_t *v605;
  unint64_t v606;
  uint64_t v607;
  void *v608;
  std::__shared_weak_count *v609;
  unint64_t *p_shared_owners;
  unint64_t v611;
  __int128 v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t *v615;
  unint64_t v616;
  std::__shared_weak_count *v617;
  unint64_t *v618;
  unint64_t v619;
  std::__shared_weak_count *v620;
  unint64_t *v621;
  unint64_t v622;
  std::__shared_weak_count *v623;
  unint64_t *v624;
  unint64_t v625;
  unint64_t *v626;
  unint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  char *v631;
  char *i;
  void *v633;
  void *v634;
  float32x2_t v635;
  float32x2_t v636;
  float32x4_t v637;
  float32x2_t v638;
  float32x2_t v639;
  int8x16_t v640;
  void **v641;
  float64x2_t *v642;
  uint64_t v643;
  uint64_t v644;
  float32x2_t *v645;
  unsigned __int8 **v646;
  char *v647;
  char *v648;
  int v649;
  unsigned __int8 **v650;
  int v651;
  unint64_t v652;
  unsigned int v653;
  int v654;
  float64x2_t v655;
  unsigned int v656;
  unsigned int v657;
  __int32 v658;
  void *v659[2];
  float32x2_t v660;
  _QWORD *v661;
  int v662;
  void *v663[2];
  float64x2_t v664;
  float32x2_t v665;
  uint64_t v666;
  uint64_t v667;
  float32x4_t v668;
  float64x2_t v669;
  float32x2_t v670;
  unint64_t v671;
  uint64_t v672;
  float32x4_t v673;
  float64x2_t v674;
  float32x4_t v675;
  int v676;
  uint64_t v677;
  float64x2_t v678;
  int32x2_t v679;
  float64x2_t v680;
  float32x2_t v681;
  int v682;
  int v683;
  float64x2_t v684;
  float32x4_t v685;
  void *v686[2];
  float32x2_t v687;
  int *v688;
  unsigned int *v689;
  float64x2_t v690;
  float32x2_t v691;
  float64x2_t v692;
  int8x16_t v693;
  int v694;
  float *v695;
  float64x2_t v696;
  float32x2_t v697;
  unint64_t v698;
  unsigned __int8 *v699;
  float64x2_t v700;
  float *v701;
  float32x2_t v702;
  int8x16_t v703;
  int8x16_t v704;
  uint64_t v705;
  uint64_t v706;
  float64x2_t v707;
  char *v708;
  float64x2_t v709;
  float32x2_t v710;
  float32x2_t v711;
  float32x2_t v712;
  void *v713;
  _BYTE *v714;
  char *v715;
  _BYTE v716[32];
  void *v717[2];
  __int128 v718;
  __int128 v719;
  __int128 v720;
  void *__p[10];
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  int v725;
  __int128 v726;
  unint64_t v727;
  __int128 v728;
  float64x2_t *v729;
  char v730;
  char v731;
  std::string __dst;
  void *v733;
  void *v734;
  unsigned int v735;
  unsigned int v736;
  void *v737;
  _BYTE *v738;
  void *v739;
  __int128 v740;
  float32x4_t v741;
  float32x4_t v742;
  int8x16_t v743;
  float32x4_t v744;
  _BYTE v745[28];
  void *v746;
  void *v747;
  void *v748;
  __int128 v749;
  uint64_t v750;
  char v751;
  uint64_t v752;
  int v753;
  void *v754[4];
  size_t v755;
  void *v756;
  void *v757[4];
  int v758;
  uint64_t v759[3];
  char *v760;
  char *v761;
  float *v762;
  float *v763;
  float *v764;
  void **v765;

  v750 = 0x3DCCCCCD3C23D70ALL;
  v751 = 1;
  v752 = 0x3FC000003BA3D70ALL;
  v753 = 1056964608;
  if (!*(_BYTE *)(a1 + 280) || (v7 = *(float **)(a1 + 232), v8 = *(float **)(a1 + 240), v7 == v8))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  memset(__p, 0, 24);
  if (0xAAAAAAAAAAAAAAABLL * (v8 - v7) >= 0x1555555555555556)
    sub_22316E078();
  __p[0] = operator new((char *)v8 - (char *)v7);
  __p[1] = __p[0];
  __p[2] = (char *)__p[0] + 4 * (v8 - v7);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  do
  {
    v12.f64[0] = *v7;
    v13.f64[0] = v7[1];
    v14 = v7[2];
    v15 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 104), v12.f64[0]), *(float64x2_t *)(a1 + 136), v13.f64[0]), *(float64x2_t *)(a1 + 168), v14);
    v12.f64[0] = *(double *)(a1 + 120) * v12.f64[0] + *(double *)(a1 + 152) * v13.f64[0] + *(double *)(a1 + 184) * v14;
    v13.f64[0] = *(float64_t *)(a1 + 216);
    *(float32x2_t *)v716 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(a1 + 200), v15));
    v16 = vaddq_f64(v13, v12).f64[0];
    *(float *)&v716[8] = v16;
    sub_22339DC14((char ***)&__dst, (uint64_t *)v716);
    v7 += 3;
  }
  while (v7 != v8);
  v646 = a2;
  v644 = a1;
  v641 = a5;
  v17 = (float32x2_t *)__p[0];
  v18 = (float32x2_t *)__p[1];
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  v745[24] = 0;
  memset(v745, 0, 17);
  __p[0] = 0;
  *(_QWORD *)v716 = 0;
  sub_223F3BD1C((unint64_t *)&v746, v716, (unint64_t *)__p, 1, &__dst, 1, 0);
  v643 = a3;
  if (a3)
  {
    v19 = *((unsigned int *)a2 + 42);
    v20 = *((unsigned int *)a2 + 43);
    if ((_DWORD)v20)
      _ZF = v19 == 0;
    else
      _ZF = 1;
    LODWORD(v754[0]) = 0;
    v22 = v19 | (v20 << 32);
    if (_ZF)
      v22 = 0;
    v23 = v22 << 32;
    if (!HIDWORD(v22))
      v23 = 0;
    if ((_DWORD)v22)
      v24 = HIDWORD(v22) == 0;
    else
      v24 = 1;
    __p[0] = (void *)v22;
    __p[1] = (void *)(v23 | (v22 != 0));
    LOBYTE(__p[2]) = 0;
    LOBYTE(__p[3]) = 0;
    *(void **)v716 = __p[1];
    if (v24)
      v22 = 0;
    __dst.__r_.__value_.__r.__words[0] = v22;
    if (((v23 >> 30) & ((v23 >> 30) - 1)) != 0)
      v25 = 4;
    else
      v25 = v23 >> 30;
    sub_223F3BD1C((unint64_t *)&__p[4], &__dst, (unint64_t *)v716, 1, v754, 1, v25);
    *(_OWORD *)v745 = *(_OWORD *)__p;
    *(_OWORD *)&v745[12] = *(_OWORD *)((char *)&__p[1] + 4);
    v749 = *(_OWORD *)&__p[7];
    v746 = __p[4];
    if (v747)
      free(v747);
    v747 = __p[5];
    v748 = __p[6];
  }
  v652 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 2);
  v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 104)), *(float64x2_t *)(a1 + 120));
  v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 136)), *(float64x2_t *)(a1 + 152));
  v28 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 168)), *(float64x2_t *)(a1 + 184));
  v744 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 200)), *(float64x2_t *)(a1 + 216));
  v743 = (int8x16_t)v28;
  v742 = v27;
  v741 = v26;
  v740 = 0uLL;
  v739 = 0;
  v645 = v17;
  if (!a4)
  {
    if (v18 != v17)
    {
      sub_223FAA080((void ***)v652, v17, (float32x2_t *)a1, (uint64_t)__p);
      sub_223FA733C((uint64_t)&v750, ((char *)__p[1] - (char *)__p[0]) >> 3, (float32x2_t *)__p[0], v652, v17, 0, 0, (uint64_t *)v716);
      goto LABEL_31;
    }
LABEL_34:
    v30 = 0;
    v29 = 0uLL;
    goto LABEL_35;
  }
  if (v18 == v17)
    goto LABEL_34;
  sub_223FAA080((void ***)v652, v17, (float32x2_t *)a1, (uint64_t)__p);
  sub_223FA733C((uint64_t)&v750, ((char *)__p[1] - (char *)__p[0]) >> 3, (float32x2_t *)__p[0], v652, v17, (float32x2_t *)&v741, 1, (uint64_t *)v716);
LABEL_31:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v29 = *(_OWORD *)&v716[8];
  v30 = *(char **)v716;
LABEL_35:
  v739 = v30;
  v740 = v29;
  v31 = (int32x4_t)v741;
  v32 = (int32x4_t)v742;
  v640 = v743;
  v33 = v744;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v648 = (char *)v29;
  if (v30 == (char *)v29)
    goto LABEL_828;
  v639 = (float32x2_t)vzip1q_s32(v31, v32).u64[0];
  v34 = (float32x2_t)vtrn2q_s32(v31, v32).u64[0];
  v35 = (int8x16_t)vnegq_f32(v33);
  v638 = (float32x2_t)vzip2q_s32(v31, v32).u64[0];
  *(float32x2_t *)v36.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v32.i8), *(float *)v35.i32), v34, *(float32x2_t *)v33.f32, 1), v638, v33, 2);
  v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v640.i8, 1);
  v650 = a2 + 11;
  v642 = (float64x2_t *)(a2 + 35);
  v636 = (float32x2_t)vextq_s8(v640, v640, 8uLL).u64[0];
  v635 = (float32x2_t)vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v34, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v34, 1), 0xCuLL).u64[0];
  *(float32x2_t *)&v36.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v640.i8, *(float32x2_t *)v35.i8), v37, *(float32x2_t *)v33.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), v636);
  v637 = v36;
  while (2)
  {
    sub_223F3A420((uint64_t)&__dst, (uint64_t *)v30);
    if ((sub_223F3C35C(&v735) & 1) == 0 || sub_223F52F44((uint64_t)&__dst, v38, v39, v40, v41, v42, v43) < 15.0)
      goto LABEL_820;
    v722 = (float64x2_t)unk_224690C28;
    v723 = (float64x2_t)xmmword_224690C38;
    v724 = (float64x2_t)unk_224690C48;
    *(_OWORD *)__p = xmmword_224690BD8;
    *(_OWORD *)&__p[2] = unk_224690BE8;
    *(_OWORD *)&__p[4] = xmmword_224690BF8;
    memset(&__p[6], 0, 32);
    v725 = 0;
    v730 = 0;
    v731 = 0;
    v726 = 0uLL;
    LOBYTE(v728) = 0;
    v727 = 0;
    v647 = v30;
    if (!v643)
      goto LABEL_561;
    if (*(_DWORD *)&v745[4])
      v44 = *(_DWORD *)v745 == 0;
    else
      v44 = 1;
    if (v44)
      v45 = 0;
    else
      v45 = *(_QWORD *)v745;
    *(_QWORD *)v716 = v747;
    *(_QWORD *)&v716[8] = v45;
    *(_QWORD *)&v716[16] = *(_QWORD *)&v745[8];
    if (HIDWORD(v45) * *(_DWORD *)&v745[12] == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v46 = *(unsigned int *)&v716[16];
    }
    else
    {
      v46 = *(unsigned int *)&v745[8];
    }
    v754[0] = v716;
    v754[1] = &unk_224690BD4;
    if (v46 == 1)
    {
      sub_223F3BF78((uint64_t)v754);
    }
    else if (*(_DWORD *)&v716[8] && *(_DWORD *)&v716[12])
    {
      v47 = *(_DWORD *)&v716[8] - 1;
      v48 = *(_DWORD **)v716;
      v49 = 4 * v46;
      v50 = *(_DWORD *)&v716[12] - 1;
      if (*(_DWORD *)&v716[12] != 1)
      {
        v51 = *(unsigned int *)&v716[20];
        if (*(_DWORD *)&v716[8] == 1)
        {
          do
          {
            *v48 = -1;
            v48 += v51;
            --v50;
          }
          while (v50);
        }
        else
        {
          v52 = 0;
          v53 = 4 * *(unsigned int *)&v716[20];
          do
          {
            v54 = v48;
            v55 = v47;
            do
            {
              *v54 = -1;
              v54 = (_DWORD *)((char *)v54 + v49);
              --v55;
            }
            while (v55);
            *v54 = -1;
            v48 = (_DWORD *)((char *)v48 + v53);
            ++v52;
          }
          while (v52 != v50);
        }
      }
      for (; v47; --v47)
      {
        *v48 = -1;
        v48 = (_DWORD *)((char *)v48 + v49);
      }
      *v48 = -1;
    }
    if (*(_DWORD *)&v745[4])
      v56 = *(_DWORD *)v745 == 0;
    else
      v56 = 1;
    if (v56)
      v57 = 0;
    else
      v57 = *(_QWORD *)v745;
    v58 = v747;
    v59 = *(_QWORD *)&v745[8];
    v698 = HIDWORD(v57);
    v705 = HIDWORD(*(_QWORD *)&v745[8]);
    if (HIDWORD(v57) * *(_DWORD *)&v745[12] == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v60 = *(_OWORD *)(v646 + 31);
    v62 = *(float32x2_t **)(v644 + 232);
    v61 = *(float32x2_t **)(v644 + 240);
    v64 = *(float64x2_t *)(v646 + 23);
    v63 = *(float64x2_t *)(v646 + 25);
    v66 = *(_OWORD *)(v646 + 27);
    v65 = *(float64x2_t *)(v646 + 29);
    v67 = *(float64x2_t *)(v646 + 33);
    v69 = *v642;
    v68 = v642[1];
    memset(v716, 0, 24);
    v70 = (char *)v61 - (char *)v62;
    if (v61 == v62)
    {
      v661 = 0;
      v656 = v735;
      v649 = v735 - 1;
      if (v735 == 1)
        goto LABEL_269;
LABEL_81:
      v79 = v736 - 1;
      if (v736 == 1)
        goto LABEL_269;
      v80 = 0;
      v671 = (v70 - (uint64_t)v661) >> 3;
      v651 = 8 * v59;
      v654 = v57;
      v653 = v736 - 1;
LABEL_84:
      v81 = 0;
      v82 = v80 + 1;
      v676 = v80;
      v682 = v80 + 1;
      while (1)
      {
        v83 = v735 * v81 + v80;
        v84 = (v738 - (_BYTE *)v737) >> 3;
        if (v84 <= v83
          || (v85 = v735 * v81 + v82, v84 <= v85)
          || (v694 = v81 + 1, v86 = v735 * (v81 + 1), v87 = v86 + v82, v84 <= v87)
          || (v88 = v86 + v80, v84 <= v88))
        {
          sub_2236C5448();
        }
        v89 = *((_QWORD *)v737 + v83);
        v90 = *((_QWORD *)v737 + v85);
        v91 = *((_QWORD *)v737 + v87);
        v92 = *((_QWORD *)v737 + v88);
        v94 = v91 >= v671 || v92 >= v671;
        if (v90 >= v671)
          v94 = 1;
        if (v89 >= v671)
          v94 = 1;
        if (!v94)
          break;
LABEL_86:
        v81 = v694;
        v82 = v682;
        if (v694 == v79)
        {
          v80 = v682;
          if (v682 == v649)
            goto LABEL_269;
          goto LABEL_84;
        }
      }
      v95 = (int *)operator new(0x20uLL);
      v96 = v81;
      v97 = v661[v89];
      *(_QWORD *)v95 = v97;
      v98 = v661[v90];
      *((_QWORD *)v95 + 1) = v98;
      v99 = v95 + 2;
      v100 = v661[v91];
      *((_QWORD *)v95 + 2) = v100;
      v101 = v95 + 4;
      v688 = v95;
      v666 = v661[v92];
      *((_QWORD *)v95 + 3) = v666;
      v102 = v95 + 6;
      v103 = (char *)operator new(0x40uLL);
      v104 = v103;
      if (SHIDWORD(v98) >= SHIDWORD(v97))
        v105 = HIDWORD(v97);
      else
        v105 = HIDWORD(v98);
      if (SHIDWORD(v97) <= SHIDWORD(v98))
        v106 = HIDWORD(v98);
      else
        v106 = HIDWORD(v97);
      if (v105 == v106)
      {
        v107 = 0;
      }
      else
      {
        if (SHIDWORD(v98) >= SHIDWORD(v97))
          v108 = v97;
        else
          v108 = v98;
        *(_DWORD *)v103 = v105;
        *((_DWORD *)v103 + 1) = v106;
        *((float *)v103 + 2) = (float)v108;
        *((float *)v103 + 3) = (float)(v98 - v97) / (float)(HIDWORD(v98) - HIDWORD(v97));
        v107 = 1;
      }
      if (SHIDWORD(v100) >= SHIDWORD(v98))
        v109 = HIDWORD(v98);
      else
        v109 = HIDWORD(v100);
      if (SHIDWORD(v98) <= SHIDWORD(v100))
        v110 = HIDWORD(v100);
      else
        v110 = HIDWORD(v98);
      if (v109 < v105)
        v105 = v109;
      if (v106 <= v110)
        v106 = v110;
      if (v109 != v110)
      {
        v111 = &v103[16 * v107];
        if (SHIDWORD(v100) >= SHIDWORD(v98))
          v112 = v98;
        else
          v112 = v100;
        *(_DWORD *)v111 = v109;
        *((_DWORD *)v111 + 1) = v110;
        *((float *)v111 + 2) = (float)v112;
        *((float *)v111 + 3) = (float)(v100 - v98) / (float)(HIDWORD(v100) - HIDWORD(v98));
        ++v107;
      }
      if (SHIDWORD(v666) >= SHIDWORD(v100))
        v113 = HIDWORD(v100);
      else
        v113 = HIDWORD(v666);
      if (SHIDWORD(v100) <= SHIDWORD(v666))
        v114 = HIDWORD(v666);
      else
        v114 = HIDWORD(v100);
      if (v113 < v105)
        v105 = v113;
      if (v106 <= v114)
        v106 = v114;
      if (v113 != v114)
      {
        v115 = &v103[16 * v107];
        if (SHIDWORD(v666) >= SHIDWORD(v100))
          v116 = v100;
        else
          v116 = v666;
        *(_DWORD *)v115 = v113;
        *((_DWORD *)v115 + 1) = v114;
        *((float *)v115 + 2) = (float)v116;
        *((float *)v115 + 3) = (float)(v666 - v100) / (float)(HIDWORD(v666) - HIDWORD(v100));
        ++v107;
      }
      v117 = &v103[16 * v107];
      if (SHIDWORD(v97) >= SHIDWORD(v666))
        v118 = HIDWORD(v666);
      else
        v118 = HIDWORD(v97);
      if (SHIDWORD(v666) <= SHIDWORD(v97))
        v119 = HIDWORD(v97);
      else
        v119 = HIDWORD(v666);
      if (v118 >= v105)
        v120 = v105;
      else
        v120 = v118;
      if (v106 <= v119)
        v121 = v119;
      else
        v121 = v106;
      if (v118 != v119)
      {
        if (SHIDWORD(v97) >= SHIDWORD(v666))
          v122 = v666;
        else
          v122 = v97;
        *((_DWORD *)v117 + 1) = v119;
        *((float *)v117 + 2) = (float)v122;
        *((float *)v117 + 3) = (float)(v97 - v666) / (float)(HIDWORD(v97) - HIDWORD(v666));
        *(_DWORD *)v117 = v118;
        v117 += 16;
      }
      v123 = v676 + v96 * v656;
      v124 = 126 - 2 * __clz((v117 - v103) >> 4);
      if (v117 == v103)
        v125 = 0;
      else
        v125 = v124;
      sub_223F3A960((float *)v103, (float *)v117, v125, 1);
      if (v120 == v121)
      {
        v126 = v688[2];
        v127 = *v688;
        if (v126 >= *v688)
          v128 = v688;
        else
          v128 = v99;
        if (v126 >= v127)
          v129 = v99;
        else
          v129 = v688;
        v130 = v688[6];
        v131 = v688[4];
        if (v126 >= v127)
          v132 = *v688;
        else
          v132 = v688[2];
        if (v126 <= v127)
          v133 = *v688;
        else
          v133 = v688[2];
        if (v131 >= v132)
          v134 = v128;
        else
          v134 = v101;
        if (v130 >= v133)
          v135 = v102;
        else
          v135 = v129;
        if (v126 <= v127)
          v136 = *v688;
        else
          v136 = v688[2];
        if (v126 >= v127)
          v126 = *v688;
        if (v130 >= v126)
          v137 = v128;
        else
          v137 = v102;
        if (v131 >= v136)
          v138 = v101;
        else
          v138 = v129;
        if (v130 < v131)
          v139 = v137;
        else
          v139 = v134;
        if (v130 < v131)
          v140 = v138;
        else
          v140 = v135;
        v141 = v139[1];
        if (v141 < 1)
          goto LABEL_85;
        if (v141 >= (int)v698)
          goto LABEL_85;
        v142 = *v139;
        if (v142 >= v654)
          goto LABEL_85;
        v143 = *v140;
        LODWORD(v144) = v143 >= 1 ? v143 + 1 : 1;
        v144 = (int)v144 >= v654 ? v654 : v144;
        v145 = v142 & ~(v142 >> 31);
        if ((_DWORD)v145 == (_DWORD)v144)
          goto LABEL_85;
        v146 = v141 * v705;
        v147 = v144 - v145;
        if ((unint64_t)(v144 - v145) < 0x10
          || ((v179 = ~v145 + v144, !__CFADD__((_DWORD)v145, (_DWORD)v179)) ? (v180 = 0) : (v180 = 1),
              v59 != 1 || (v180 & 1) != 0 || HIDWORD(v179)))
        {
          v148 = v145;
        }
        else
        {
          v148 = (v147 & 0xFFFFFFFFFFFFFFF8) + v145;
          v181 = vdupq_n_s32(v123);
          v182 = v146 + v145;
          v183 = v147 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v184 = (int32x4_t *)&v58[v182];
            *v184 = v181;
            v184[1] = v181;
            v182 += v651;
            v183 -= 8;
          }
          while (v183);
          if (v147 == (v147 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_85;
        }
        v149 = v59 * v148 + v146;
        v150 = v144 - v148;
        do
        {
          v58[v149] = v123;
          v149 += v59;
          --v150;
        }
        while (v150);
LABEL_85:
        operator delete(v104);
        operator delete(v688);
        v79 = v653;
        v80 = v676;
        goto LABEL_86;
      }
      if (v120 == v121 + 1)
        goto LABEL_85;
      v151 = 0;
      v152 = vdupq_n_s32(v123);
      v153 = v705 * v120;
      v154 = 1;
      while (1)
      {
        if (v151 <= v154)
          v155 = v154;
        else
          v155 = v151;
        if (v120 < v121 && *(_DWORD *)&v104[16 * v151 + 4] == v120)
          v151 = v155 + 1;
        if (v151 <= v154)
          v156 = v154;
        else
          v156 = v151;
        if (v120 < v121 && *(_DWORD *)&v104[16 * v154 + 4] == v120)
          v157 = v156 + 1;
        else
          v157 = v154;
        v158 = *(float *)&v104[16 * v151 + 8];
        v159 = *(float *)&v104[16 * v157 + 8];
        if (v158 <= v159)
          v154 = v157;
        else
          v154 = v151;
        if (v158 > v159)
          v151 = v157;
        v160 = (float *)&v104[16 * v151];
        v162 = v160[2];
        v161 = v160 + 2;
        v163 = v162;
        v164 = (float *)&v104[16 * v154];
        v165 = v164 + 2;
        if (v120 < 1)
          goto LABEL_217;
        if (v120 >= (int)v698)
          goto LABEL_217;
        v166 = llroundf(v163);
        if (v654 <= v166)
          goto LABEL_217;
        v167 = llroundf(*v165);
        LODWORD(v168) = v167 >= 1 ? v167 + 1 : 1;
        v168 = (int)v168 >= v654 ? v654 : v168;
        v169 = v166 & ~(v166 >> 31);
        if ((_DWORD)v169 == (_DWORD)v168)
          goto LABEL_217;
        v170 = v168 - v169;
        if ((unint64_t)(v168 - v169) < 0x10
          || ((v174 = ~v169 + v168, !__CFADD__((_DWORD)v169, (_DWORD)v174)) ? (v175 = 0) : (v175 = 1),
              v59 != 1 || (v175 & 1) != 0 || HIDWORD(v174)))
        {
          v171 = v169;
        }
        else
        {
          v171 = (v170 & 0xFFFFFFFFFFFFFFF8) + v169;
          v176 = v153 + v169;
          v177 = v170 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v178 = (int32x4_t *)&v58[v176];
            *v178 = v152;
            v178[1] = v152;
            v176 += v651;
            v177 -= 8;
          }
          while (v177);
          if (v170 == (v170 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_217;
        }
        v172 = v153 + v59 * v171;
        v173 = v168 - v171;
        do
        {
          v58[v172] = v123;
          v172 += v59;
          --v173;
        }
        while (v173);
LABEL_217:
        *v161 = v163 + *(float *)&v104[16 * v151 + 12];
        *v165 = v164[3] + *v165;
        v153 += v705;
        _ZF = v120++ == v121;
        if (_ZF)
          goto LABEL_85;
      }
    }
    v655 = v64;
    *(_OWORD *)v659 = v66;
    v664 = v63;
    v669 = v65;
    v674 = v69;
    v680 = v67;
    *(_OWORD *)v686 = v60;
    v692 = v68;
    v71 = v70 / 12;
    if ((unint64_t)(v70 / 12) >> 61)
      sub_2236B43DC();
    v72 = (char *)operator new(8 * v71);
    v73 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v659), v669);
    v74 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v686), v680);
    v75 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v674), v692);
    *(_QWORD *)v716 = v72;
    *(_QWORD *)&v716[8] = v72;
    *(_QWORD *)&v716[16] = &v72[8 * v71];
    v762 = (float *)v716;
    v687 = *(float32x2_t *)v73.i8;
    v693 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v655), v664);
    v670 = (float32x2_t)vextq_s8(v693, v693, 8uLL).u64[0];
    v675 = v75;
    v681 = *(float32x2_t *)v74.i8;
    v660 = (float32x2_t)vextq_s8(v74, v74, 8uLL).u64[0];
    v665 = (float32x2_t)vextq_s8(v73, v73, 8uLL).u64[0];
    v76 = 12 * v71;
    do
    {
      v73.i32[0] = v62[1].i32[0];
      *(float32x2_t *)v77.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v693.i8, COERCE_FLOAT(*v62)), v687, *v62, 1), v681, *(float *)v73.i32);
      *(float32x2_t *)&v77.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v670, *v62), v665, *v62, 1), *(float32x2_t *)v73.i8, v660);
      v78 = vaddq_f32(v675, v77);
      LODWORD(v754[1]) = v78.i32[2];
      v754[0] = (void *)v78.i64[0];
      (*((void (**)(unsigned __int8 **, void **, void **))*v650 + 9))(v650, v754, v757);
      v759[0] = (uint64_t)vcvt_s32_f32(vrnda_f32((float32x2_t)v757[0]));
      sub_2236B43F0((void ***)&v762, v759);
      v62 = (float32x2_t *)((char *)v62 + 12);
      v76 -= 12;
    }
    while (v76);
    v70 = *(_QWORD *)&v716[8];
    v661 = *(_QWORD **)v716;
    v656 = v735;
    v649 = v735 - 1;
    if (v735 != 1)
      goto LABEL_81;
LABEL_269:
    if (v661)
      operator delete(v661);
    if (*(_DWORD *)&v745[4])
      v185 = *(_DWORD *)v745 == 0;
    else
      v185 = 1;
    if (v185)
      v186 = 0;
    else
      v186 = *(_QWORD *)v745;
    v187 = v747;
    v188 = *(_DWORD *)&v745[8];
    v189 = HIDWORD(*(_QWORD *)&v745[8]);
    v17 = v645;
    if (HIDWORD(v186) * *(_DWORD *)&v745[12] == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v719 = 0u;
    v720 = 0u;
    *(_OWORD *)v717 = 0u;
    v718 = 0u;
    memset(v716, 0, sizeof(v716));
    v190 = *v646;
    v191 = (float *)v646[3];
    v706 = *((unsigned int *)v646 + 10);
    v677 = *((unsigned int *)v646 + 11);
    if (!(_DWORD)v186 || !HIDWORD(v186))
      goto LABEL_308;
    v192 = *((unsigned int *)v646 + 4);
    v193 = v186 - 1;
    v194 = HIDWORD(v186) - 1;
    if (HIDWORD(v186) == 1)
    {
      v198 = *v646;
      v197 = (float *)v646[3];
    }
    else
    {
      v195 = *((unsigned int *)v646 + 5);
      if ((_DWORD)v186 == 1)
      {
        v197 = (float *)v646[3];
        v198 = *v646;
        do
        {
          if (*v187 != -1 && *v197 >= 0.5)
            *(_QWORD *)&v716[8 * *v198] = (unint64_t)((double)*(unint64_t *)&v716[8 * *v198] + 1.0);
          v198 += v195;
          v187 += v189;
          v197 += v677;
          --v194;
        }
        while (v194);
        goto LABEL_305;
      }
      v196 = 0;
      v197 = (float *)v646[3];
      v198 = *v646;
      do
      {
        v199 = v197;
        v200 = v187;
        v201 = v186 - 1;
        v202 = v198;
        do
        {
          if (*v200 != -1 && *v199 >= 0.5)
            *(_QWORD *)&v716[8 * *v202] = (unint64_t)((double)*(unint64_t *)&v716[8 * *v202] + 1.0);
          v202 += v192;
          v200 += v188;
          v199 += v706;
          --v201;
        }
        while (v201);
        if (*v200 != -1 && *v199 >= 0.5)
          *(_QWORD *)&v716[8 * *v202] = (unint64_t)((double)*(unint64_t *)&v716[8 * *v202] + 1.0);
        v187 += v189;
        v198 += v195;
        v197 += v677;
        ++v196;
      }
      while (v196 != v194);
    }
    if ((_DWORD)v186 != 1)
    {
      do
      {
        if (*v187 != -1 && *v197 >= 0.5)
          *(_QWORD *)&v716[8 * *v198] = (unint64_t)((double)*(unint64_t *)&v716[8 * *v198] + 1.0);
        v198 += v192;
        v187 += v188;
        v197 += v706;
        --v193;
      }
      while (v193);
    }
LABEL_305:
    if (*v187 != -1 && *v197 >= 0.5)
      *(_QWORD *)&v716[8 * *v198] = (unint64_t)((double)*(unint64_t *)&v716[8 * *v198] + 1.0);
LABEL_308:
    if ((char *)v717[0]
       + (unint64_t)v717[1]
       + (unint64_t)v718
       + *(_QWORD *)&v716[8]
       + *(_QWORD *)v716
       + *(_QWORD *)&v716[16]
       + *(_QWORD *)&v716[24]
       + *((_QWORD *)&v718 + 1)
       + (_QWORD)v719
       + *((_QWORD *)&v719 + 1)
       + (_QWORD)v720
       + *((_QWORD *)&v720 + 1) < (void *)0x32)
      goto LABEL_338;
    v203.f64[0] = (double)*(unint64_t *)&v716[16];
    v204.f64[0] = (double)(unint64_t)v717[0];
    v205.f64[0] = (double)(unint64_t)v718;
    v206.f64[0] = (double)(unint64_t)v719;
    v207.f64[0] = (double)*(unint64_t *)v716;
    v207.f64[1] = (double)*(unint64_t *)&v716[8];
    v203.f64[1] = (double)*(unint64_t *)&v716[24];
    v204.f64[1] = (double)(unint64_t)v717[1];
    v205.f64[1] = (double)*((unint64_t *)&v718 + 1);
    v206.f64[1] = (double)*((unint64_t *)&v719 + 1);
    v208.f64[0] = (double)(unint64_t)v720;
    v208.f64[1] = (double)*((unint64_t *)&v720 + 1);
    v209 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)*(unint64_t *)v716+ (double)*(unint64_t *)&v716[8]+ (double)*(unint64_t *)&v716[16]+ (double)*(unint64_t *)&v716[24]+ (double)(unint64_t)v717[0]+ (double)(unint64_t)v717[1]+ (double)(unint64_t)v718+ (double)*((unint64_t *)&v718 + 1)+ (double)(unint64_t)v719+ (double)*((unint64_t *)&v719 + 1)+ (double)(unint64_t)v720+ (double)*((unint64_t *)&v720 + 1)), 0);
    v210 = vdivq_f64(v208, v209);
    v211 = vdivq_f64(v206, v209);
    v212 = vdivq_f64(v205, v209);
    v213 = vdivq_f64(v204, v209);
    v214 = vdivq_f64(v203, v209);
    v215 = vdivq_f64(v207, v209);
    v216 = v215.f64[1] > v215.f64[0];
    if (v215.f64[1] > v215.f64[0])
      v215.f64[0] = v215.f64[1];
    if (v214.f64[0] > v215.f64[0])
    {
      v215.f64[0] = v214.f64[0];
      v216 = 2;
    }
    if (v214.f64[1] > v215.f64[0])
    {
      v215.f64[0] = v214.f64[1];
      v216 = 3;
    }
    if (v213.f64[0] > v215.f64[0])
    {
      v215.f64[0] = v213.f64[0];
      v216 = 4;
    }
    if (v213.f64[1] > v215.f64[0])
    {
      v215.f64[0] = v213.f64[1];
      v216 = 5;
    }
    if (v212.f64[0] > v215.f64[0])
    {
      v215.f64[0] = v212.f64[0];
      v216 = 6;
    }
    if (v212.f64[1] > v215.f64[0])
    {
      v215.f64[0] = v212.f64[1];
      v216 = 7;
    }
    if (v211.f64[0] > v215.f64[0])
    {
      v215.f64[0] = v211.f64[0];
      v216 = 8;
    }
    v217 = v211.f64[1] <= v215.f64[0] ? v215.f64[0] : v211.f64[1];
    v218 = v211.f64[1] <= v215.f64[0] ? v216 : 9;
    v219 = v210.f64[0] <= v217 ? v217 : v210.f64[0];
    v220 = v210;
    v221 = v210.f64[1] <= v219 ? v219 : v210.f64[1];
    if (v221 < 0.75)
    {
LABEL_338:
      v30 = v647;
      goto LABEL_809;
    }
    if (*(_DWORD *)&v745[4])
      v222 = *(_DWORD *)v745 == 0;
    else
      v222 = 1;
    if (v222)
      v223 = 0;
    else
      v223 = *(_QWORD *)v745;
    v224 = (unsigned int *)v747;
    v657 = *(_DWORD *)&v745[8];
    v667 = HIDWORD(*(_QWORD *)&v745[8]);
    if (HIDWORD(v223) * *(_DWORD *)&v745[12] == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v190 = *v646;
      v191 = (float *)v646[3];
      v706 = *((unsigned int *)v646 + 10);
      v677 = *((unsigned int *)v646 + 11);
    }
    LODWORD(v759[0]) = -1;
    if (v220.f64[0] <= v217)
      v225 = v218;
    else
      v225 = 10;
    LODWORD(v713) = 1056964608;
    v226 = *((unsigned int *)v646 + 4);
    v672 = *((unsigned int *)v646 + 5);
    memset(v757, 0, sizeof(v757));
    v758 = 1065353216;
    v754[0] = v759;
    v754[1] = v757;
    v754[2] = &v713;
    if ((_DWORD)v223 && HIDWORD(v223))
    {
      v227 = v223 - 1;
      v228 = HIDWORD(v223) - 1;
      if (HIDWORD(v223) == 1)
        goto LABEL_402;
      if ((_DWORD)v223 != 1)
      {
        v229 = 0;
        v662 = HIDWORD(v223) - 1;
        while (1)
        {
          v683 = v229;
          v230 = 0;
          v689 = v224;
          v231 = v224;
          v699 = v190;
          v695 = v191;
          do
          {
            v232 = *v231;
            if (LODWORD(v759[0]) == (_DWORD)v232)
              goto LABEL_357;
            v233 = *v190;
            v234 = *v191;
            if (v757[1])
            {
              v235 = (uint8x8_t)vcnt_s8((int8x8_t)v757[1]);
              v235.i16[0] = vaddlv_u8(v235);
              if (v235.u32[0] > 1uLL)
              {
                v236 = *v231;
                if (v757[1] <= (void *)v232)
                  v236 = v232 % (unint64_t)v757[1];
              }
              else
              {
                v236 = (LODWORD(v757[1]) - 1) & v232;
              }
              v237 = (_QWORD *)*((_QWORD *)v757[0] + v236);
              if (v237)
              {
                v238 = (_QWORD *)*v237;
                if (v238)
                {
                  if (v235.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v240 = v238[1];
                      if (v240 == v232)
                      {
                        if (v238[2] == v232)
                          goto LABEL_381;
                      }
                      else if ((v240 & ((uint64_t)v757[1] - 1)) != v236)
                      {
                        goto LABEL_379;
                      }
                      v238 = (_QWORD *)*v238;
                      if (!v238)
                        goto LABEL_379;
                    }
                  }
                  do
                  {
                    v239 = v238[1];
                    if (v239 == v232)
                    {
                      if (v238[2] == v232)
                        goto LABEL_381;
                    }
                    else
                    {
                      if ((void *)v239 >= v757[1])
                        v239 %= (unint64_t)v757[1];
                      if (v239 != v236)
                        break;
                    }
                    v238 = (_QWORD *)*v238;
                  }
                  while (v238);
                }
              }
            }
LABEL_379:
            v241 = (char *)operator new(0x78uLL);
            *((_QWORD *)v241 + 1) = v232;
            *((_QWORD *)v241 + 2) = v232;
            *(_OWORD *)(v241 + 24) = 0u;
            *(_OWORD *)(v241 + 40) = 0u;
            *(_OWORD *)(v241 + 56) = 0u;
            *(_OWORD *)(v241 + 72) = 0u;
            *(_OWORD *)(v241 + 88) = 0u;
            *(_OWORD *)(v241 + 104) = 0u;
            *(_QWORD *)v241 = 0;
            if (!sub_223F3B83C((uint64_t)v757, v232, v232))
            {
              v242 = (unint64_t)v757[1];
              v243 = *((_QWORD *)v241 + 1);
              v244 = (uint8x8_t)vcnt_s8((int8x8_t)v757[1]);
              v244.i16[0] = vaddlv_u8(v244);
              if (v244.u32[0] > 1uLL)
              {
                if ((void *)v243 >= v757[1])
                  v243 %= (unint64_t)v757[1];
              }
              else
              {
                v243 &= (unint64_t)v757[1] - 1;
              }
              v245 = v757[0];
              v246 = (_QWORD *)*((_QWORD *)v757[0] + v243);
              if (v246)
              {
                *(_QWORD *)v241 = *v246;
                goto LABEL_395;
              }
              *(void **)v241 = v757[2];
              v757[2] = v241;
              v245[v243] = &v757[2];
              if (*(_QWORD *)v241)
              {
                v247 = *(_QWORD *)(*(_QWORD *)v241 + 8);
                if (v244.u32[0] > 1uLL)
                {
                  if (v247 >= v242)
                    v247 %= v242;
                }
                else
                {
                  v247 &= v242 - 1;
                }
                v246 = (char *)v757[0] + 8 * v247;
LABEL_395:
                *v246 = v241;
              }
              ++v757[3];
              if (v233 > 0xB)
                goto LABEL_357;
LABEL_397:
              if (*(float *)&v713 <= v234)
              {
                v762 = (float *)v232;
                v248 = sub_223F3BA44((uint64_t)v757, v232, &v762);
                v248[v233 + 3] = (unint64_t)((double)(unint64_t)v248[v233 + 3] + 1.0);
              }
              goto LABEL_357;
            }
            operator delete(v241);
LABEL_381:
            if (v233 <= 0xB)
              goto LABEL_397;
LABEL_357:
            v231 += v657;
            v190 += v226;
            v191 += v706;
            ++v230;
          }
          while (v230 != v227);
          sub_223F3B5A8((uint64_t)v754, *v231, *v190, *v191);
          v224 = &v689[v667];
          v190 = &v699[v672];
          v191 = &v695[v677];
          v229 = v683 + 1;
          if (v683 + 1 == v662)
            goto LABEL_402;
        }
      }
      do
      {
        sub_223F3B5A8((uint64_t)v754, *v224, *v190, *v191);
        v190 += v672;
        v224 += v667;
        v191 += v677;
        --v228;
      }
      while (v228);
LABEL_402:
      while (v227)
      {
        sub_223F3B5A8((uint64_t)v754, *v224, *v190, *v191);
        v190 += v226;
        v224 += v657;
        v191 += v706;
        --v227;
      }
      v17 = v645;
      sub_223F3B5A8((uint64_t)v754, *v224, *v190, *v191);
    }
    v249 = v735;
    v250 = v736;
    if (v736)
      v251 = v735 == 0;
    else
      v251 = 1;
    LOBYTE(v760) = 0;
    v252 = v735 | ((unint64_t)v736 << 32);
    if (v251)
      v252 = 0;
    v253 = v252 << 32;
    if (!HIDWORD(v252))
      v253 = 0;
    v254 = v252 != 0;
    if ((_DWORD)v252)
      v255 = HIDWORD(v252) == 0;
    else
      v255 = 1;
    v754[0] = (void *)v252;
    v754[1] = (void *)(v253 | v254);
    LOBYTE(v754[2]) = 0;
    LOBYTE(v754[3]) = 0;
    v762 = (float *)(v253 | v254);
    if (v255)
      v252 = 0;
    v759[0] = v252;
    if ((HIDWORD(v253) & (HIDWORD(v253) - 1)) != 0)
      v256 = 1;
    else
      v256 = HIDWORD(v253);
    sub_223F3A558(&v755, v759, (void **)&v762, 1, (uint64_t)&v760, 1, v256);
    if (v249 == 1)
      goto LABEL_534;
    if (v220.f64[1] <= v219)
      v257 = v225;
    else
      v257 = 11;
    if ((_DWORD)v250 == 1)
      goto LABEL_533;
    v258 = 0;
    while (2)
    {
      v259 = 0;
      v260 = v258 + 1;
      while (2)
      {
        v268 = v735 * v259 + v258;
        v269 = (v738 - (_BYTE *)v737) >> 3;
        if (v269 <= v268)
          goto LABEL_902;
        if (*((_QWORD *)v737 + v268) >= v652)
          goto LABEL_428;
        v270 = v735 * v259 + v260;
        if (v269 <= v270)
          goto LABEL_902;
        if (*((_QWORD *)v737 + v270) >= v652)
          goto LABEL_428;
        v271 = v735 * (v259 + 1);
        v272 = (v271 + v258);
        if (v269 <= v272)
          goto LABEL_902;
        if (*((_QWORD *)v737 + v272) >= v652)
          goto LABEL_428;
        v273 = (v271 + v260);
        if (v269 <= v273)
LABEL_902:
          sub_2236C5448();
        if (*((_QWORD *)v737 + v273) >= v652)
          goto LABEL_428;
        v274 = (unint64_t)v757[1];
        if (!v757[1])
          goto LABEL_428;
        v275 = v258 + v249 * v259;
        v276 = (uint8x8_t)vcnt_s8((int8x8_t)v757[1]);
        v276.i16[0] = vaddlv_u8(v276);
        v277 = v276.u32[0];
        if (v276.u32[0] > 1uLL)
        {
          v278 = v258 + v249 * v259;
          if (v757[1] <= (void *)v275)
            v278 = v275 % (unint64_t)v757[1];
        }
        else
        {
          v278 = (LODWORD(v757[1]) - 1) & v275;
        }
        v279 = (_QWORD *)*((_QWORD *)v757[0] + v278);
        if (!v279)
          goto LABEL_428;
        v280 = (_QWORD *)*v279;
        if (!*v279)
          goto LABEL_428;
        v281 = (unint64_t)v757[1] - 1;
        if (v276.u32[0] < 2uLL)
        {
          while (1)
          {
            v282 = v280[1];
            if (v282 == v275)
            {
              if (v280[2] == v275)
                goto LABEL_458;
            }
            else if ((v282 & v281) != v278)
            {
              goto LABEL_428;
            }
            v280 = (_QWORD *)*v280;
            if (!v280)
              goto LABEL_428;
          }
        }
        while (1)
        {
          v283 = v280[1];
          if (v283 == v275)
            break;
          if ((void *)v283 >= v757[1])
            v283 %= (unint64_t)v757[1];
          if (v283 != v278)
            goto LABEL_428;
LABEL_452:
          v280 = (_QWORD *)*v280;
          if (!v280)
            goto LABEL_428;
        }
        if (v280[2] != v275)
          goto LABEL_452;
LABEL_458:
        v284 = v280[3];
        v285 = v280[4];
        v287 = v280[5];
        v286 = v280[6];
        v288 = v280[7];
        v289 = v280[8];
        v290 = v280[9];
        v291 = v280[10];
        v292 = v280[11];
        v293 = v280[12];
        v294 = v280[13];
        v295 = v280[14];
        if (v285 + v284 + v287 + v286 + v288 + v289 + v290 + v291 + v292 + v293 + v294 + v295 >= 0x19)
        {
          v296.f64[0] = (double)v284;
          v297.f64[0] = (double)v288;
          v298.f64[0] = (double)v290;
          v299.f64[0] = (double)v292;
          v300.f64[0] = (double)v294;
          v296.f64[1] = (double)v285;
          v301.f64[0] = (double)v287;
          v301.f64[1] = (double)v286;
          v297.f64[1] = (double)v289;
          v298.f64[1] = (double)v291;
          v299.f64[1] = (double)v293;
          v300.f64[1] = (double)v295;
          v302 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v284+ (double)v285+ (double)v287+ (double)v286+ (double)v288+ (double)v289+ (double)v290+ (double)v291+ (double)v292+ (double)v293+ (double)v294+ (double)v295), 0);
          v303 = vdivq_f64(v300, v302);
          v304 = vdivq_f64(v299, v302);
          v305 = vdivq_f64(v298, v302);
          v306 = vdivq_f64(v297, v302);
          v307 = vdivq_f64(v301, v302);
          v308 = vdivq_f64(v296, v302);
          v309 = v308.f64[1] > v308.f64[0];
          if (v308.f64[1] > v308.f64[0])
            v308.f64[0] = v308.f64[1];
          if (v307.f64[0] > v308.f64[0])
          {
            v308.f64[0] = v307.f64[0];
            v309 = 2;
          }
          if (v307.f64[1] > v308.f64[0])
          {
            v308.f64[0] = v307.f64[1];
            v309 = 3;
          }
          if (v306.f64[0] > v308.f64[0])
          {
            v308.f64[0] = v306.f64[0];
            v309 = 4;
          }
          if (v306.f64[1] > v308.f64[0])
          {
            v308.f64[0] = v306.f64[1];
            v309 = 5;
          }
          if (v305.f64[0] > v308.f64[0])
          {
            v308.f64[0] = v305.f64[0];
            v309 = 6;
          }
          if (v305.f64[1] > v308.f64[0])
          {
            v308.f64[0] = v305.f64[1];
            v309 = 7;
          }
          if (v304.f64[0] > v308.f64[0])
          {
            v308.f64[0] = v304.f64[0];
            v309 = 8;
          }
          if (v304.f64[1] > v308.f64[0])
          {
            v308.f64[0] = v304.f64[1];
            v309 = 9;
          }
          if (v303.f64[0] > v308.f64[0])
          {
            v308.f64[0] = v303.f64[0];
            v309 = 10;
          }
          if (v303.f64[1] > v308.f64[0])
          {
            v308.f64[0] = v303.f64[1];
            v309 = 11;
          }
          v310 = v309 != v257 || v308.f64[0] < 0.75;
          if (!v310)
          {
            v261 = (int)v754[1];
            v262 = HIDWORD(v754[1]);
            v263 = LODWORD(v754[1]) * v258;
            v264 = HIDWORD(v754[1]) * v259;
            v265 = v756;
            *((_BYTE *)v756 + (HIDWORD(v754[1]) * v259 + LODWORD(v754[1]) * v258)) = 1;
            v266 = v261 * v260;
            v265[v264 + v266] = 1;
            v267 = v262 * (v259 + 1);
            v265[v267 + v263] = 1;
            v265[v267 + v266] = 1;
            v17 = v645;
            goto LABEL_428;
          }
        }
        if (v277 > 1)
        {
          v311 = v258 + v249 * v259;
          v17 = v645;
          if (v757[1] <= (void *)v275)
            v311 = v275 % (unint64_t)v757[1];
        }
        else
        {
          v311 = v281 & v275;
          v17 = v645;
        }
        v312 = (unint64_t **)*((_QWORD *)v757[0] + v311);
        if (v312)
        {
          v313 = *v312;
          if (*v312)
          {
            if (v277 < 2)
            {
              while (1)
              {
                v314 = v313[1];
                if (v314 == v275)
                {
                  if (v313[2] == v275)
                    goto LABEL_506;
                }
                else if ((v314 & v281) != v311)
                {
                  goto LABEL_428;
                }
                v313 = (unint64_t *)*v313;
                if (!v313)
                  goto LABEL_428;
              }
            }
            do
            {
              v315 = v313[1];
              if (v315 == v275)
              {
                if (v313[2] == v275)
                {
LABEL_506:
                  if (v277 > 1)
                  {
                    if (v757[1] <= (void *)v275)
                      v275 %= (unint64_t)v757[1];
                  }
                  else
                  {
                    v275 &= v281;
                  }
                  v316 = (void **)*((_QWORD *)v757[0] + v275);
                  do
                  {
                    v317 = v316;
                    v316 = (void **)*v316;
                  }
                  while (v316 != (void **)v313);
                  if (v317 == &v757[2])
                    goto LABEL_523;
                  v318 = (unint64_t)v317[1];
                  if (v277 > 1)
                  {
                    if ((void *)v318 >= v757[1])
                      v318 %= (unint64_t)v757[1];
                  }
                  else
                  {
                    v318 &= v281;
                  }
                  if (v318 != v275)
                  {
LABEL_523:
                    if (!*v313)
                      goto LABEL_524;
                    v319 = *(_QWORD *)(*v313 + 8);
                    if (v277 > 1)
                    {
                      if ((void *)v319 >= v757[1])
                        v319 %= (unint64_t)v757[1];
                    }
                    else
                    {
                      v319 &= v281;
                    }
                    if (v319 != v275)
LABEL_524:
                      *((_QWORD *)v757[0] + v275) = 0;
                  }
                  v320 = (unint64_t *)*v313;
                  if (*v313)
                  {
                    v321 = v320[1];
                    if (v277 > 1)
                    {
                      if (v321 >= v274)
                        v321 %= v274;
                    }
                    else
                    {
                      v321 &= v281;
                    }
                    if (v321 != v275)
                    {
                      *((_QWORD *)v757[0] + v321) = v317;
                      v320 = (unint64_t *)*v313;
                    }
                  }
                  *v317 = v320;
                  *v313 = 0;
                  --v757[3];
                  operator delete(v313);
                  break;
                }
              }
              else
              {
                if ((void *)v315 >= v757[1])
                  v315 %= (unint64_t)v757[1];
                if (v315 != v311)
                  break;
              }
              v313 = (unint64_t *)*v313;
            }
            while (v313);
          }
        }
LABEL_428:
        if (++v259 != (_DWORD)v250 - 1)
          continue;
        break;
      }
      ++v258;
      if (v260 != v249 - 1)
        continue;
      break;
    }
LABEL_533:
    if (!v249)
    {
      v322 = v756;
LABEL_543:
      if (v322)
        goto LABEL_544;
      goto LABEL_545;
    }
LABEL_534:
    v322 = v756;
    if (!(_DWORD)v250)
      goto LABEL_543;
    v323 = 0;
    v324 = 0;
    v325 = (int)v754[1];
    v326 = HIDWORD(v754[1]);
    do
    {
      v327 = v737;
      v328 = v735;
      v329 = (v738 - (_BYTE *)v737) >> 3;
      v330 = v323;
      v331 = v324;
      v332 = v250;
      do
      {
        if (!v322[v330])
        {
          if (v329 <= v331)
            sub_2236C5448();
          v327[v331] = v652;
        }
        v331 += v328;
        v330 += v326;
        --v332;
      }
      while (v332);
      ++v324;
      v323 += v325;
    }
    while (v324 != v249);
LABEL_544:
    free(v322);
LABEL_545:
    v333 = v757[3];
    v334 = v757[2];
    if (v757[3] <= (void *)1)
    {
LABEL_555:
      if (!v334)
        goto LABEL_557;
      goto LABEL_556;
    }
    v335 = 0uLL;
    if (v757[2])
    {
      v336 = (char *)v757[2];
      v337 = 0uLL;
      v338 = 0uLL;
      v339 = 0uLL;
      v340 = 0uLL;
      v341 = 0uLL;
      do
      {
        v337 = vaddq_s64(*(int64x2_t *)(v336 + 40), v337);
        v335 = vaddq_s64(*(int64x2_t *)(v336 + 24), v335);
        v338 = vaddq_s64(*(int64x2_t *)(v336 + 56), v338);
        v339 = vaddq_s64(*(int64x2_t *)(v336 + 72), v339);
        v341 = vaddq_s64(*(int64x2_t *)(v336 + 104), v341);
        v340 = vaddq_s64(*(int64x2_t *)(v336 + 88), v340);
        v336 = *(char **)v336;
      }
      while (v336);
      v700 = vcvtq_f64_u64((uint64x2_t)v337);
      v707 = vcvtq_f64_u64((uint64x2_t)v335);
      v690 = vcvtq_f64_u64((uint64x2_t)v339);
      v696 = vcvtq_f64_u64((uint64x2_t)v338);
      v684 = vcvtq_f64_u64((uint64x2_t)v340);
      v335 = (int64x2_t)vcvtq_f64_u64((uint64x2_t)v341);
    }
    else
    {
      v700 = 0uLL;
      v707 = 0uLL;
      v690 = 0uLL;
      v696 = 0uLL;
      v684 = 0uLL;
    }
    v678 = (float64x2_t)v335;
    v342 = (float64x2_t *)operator new(0x60uLL);
    v343 = v342;
    v344 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(vaddvq_f64(v707)+ v700.f64[0]+ v700.f64[1]+ v696.f64[0]+ v696.f64[1]+ v690.f64[0]+ v690.f64[1]+ v684.f64[0]+ v684.f64[1]+ v678.f64[0]+ v678.f64[1]), 0);
    v345 = v342 + 6;
    v342[4] = vdivq_f64(v684, v344);
    v342[5] = vdivq_f64(v678, v344);
    v342[2] = vdivq_f64(v696, v344);
    v342[3] = vdivq_f64(v690, v344);
    *v342 = vdivq_f64(v707, v344);
    v342[1] = vdivq_f64(v700, v344);
    if (v730)
    {
      if ((_QWORD)v728)
      {
        *((_QWORD *)&v728 + 1) = v728;
        operator delete((void *)v728);
        v334 = v757[2];
      }
      *(_QWORD *)&v728 = v343;
      *((_QWORD *)&v728 + 1) = v345;
      v729 = v345;
      goto LABEL_555;
    }
    *(_QWORD *)&v728 = v342;
    *((_QWORD *)&v728 + 1) = v342 + 6;
    v729 = v342 + 6;
    v730 = 1;
    if (v334)
    {
      do
      {
LABEL_556:
        v346 = (_QWORD *)*v334;
        operator delete(v334);
        v334 = v346;
      }
      while (v346);
    }
LABEL_557:
    v347 = v757[0];
    v757[0] = 0;
    if (v347)
      operator delete(v347);
    v310 = (unint64_t)v333 > 1;
    v30 = v647;
    if (v310)
    {
LABEL_561:
      if (v736)
        v348 = v735 == 0;
      else
        v348 = 1;
      LOBYTE(v762) = 0;
      v349 = v735 | ((unint64_t)v736 << 32);
      if (v348)
        v349 = 0;
      v350 = v349 << 32;
      if (!HIDWORD(v349))
        v350 = 0;
      v351 = v349 != 0;
      if ((_DWORD)v349)
        v352 = HIDWORD(v349) == 0;
      else
        v352 = 1;
      *(_QWORD *)v716 = v349;
      *(_QWORD *)&v716[8] = v350 | v351;
      v716[16] = 0;
      v716[24] = 0;
      v754[0] = (void *)(v350 | v351);
      if (v352)
        v349 = 0;
      v757[0] = (void *)v349;
      if ((HIDWORD(v350) & (HIDWORD(v350) - 1)) != 0)
        v353 = 1;
      else
        v353 = HIDWORD(v350);
      sub_223316930((size_t *)v717, v757, v754, 1, (void **)&v762, 1, v353);
      v354 = (unint64_t *)v737;
      if (v736)
        v355 = v735 == 0;
      else
        v355 = 1;
      if (v355)
        v356 = 0;
      else
        v356 = v735 | ((unint64_t)v736 << 32);
      if (v356 <= 0x100000000)
        v357 = 0;
      else
        v357 = v356;
      if (HIDWORD(v356) * v357 == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v358 = *(_DWORD *)v716;
      v359 = *(_DWORD *)&v716[4];
      if (*(_DWORD *)v716 && *(_DWORD *)&v716[4])
      {
        v360 = *(_DWORD *)v716 - 1;
        v361 = *(unsigned int *)&v716[8];
        v362 = (char *)v717[1];
        v363 = 8 * (v356 != 0);
        v364 = *(_DWORD *)&v716[4] - 1;
        if (*(_DWORD *)&v716[4] == 1)
        {
          v367 = v652;
        }
        else
        {
          v365 = *(unsigned int *)&v716[12];
          if (*(_DWORD *)v716 == 1)
          {
            v367 = v652;
            do
            {
              if (*v354 >= v652)
                v373 = 0;
              else
                v373 = -1;
              *v362 = v373;
              v362 += v365;
              v354 += v357;
              --v364;
            }
            while (v364);
          }
          else
          {
            v366 = 0;
            v367 = v652;
            do
            {
              v368 = v354;
              v369 = v360;
              v370 = v362;
              do
              {
                if (*v368 >= v652)
                  v371 = 0;
                else
                  v371 = -1;
                *v370 = v371;
                v370 += v361;
                v368 = (unint64_t *)((char *)v368 + v363);
                --v369;
              }
              while (v369);
              if (*v368 >= v652)
                v372 = 0;
              else
                v372 = -1;
              *v370 = v372;
              v362 += v365;
              v354 += v357;
              ++v366;
            }
            while (v366 != v364);
          }
        }
        for (; v360; --v360)
        {
          if (*v354 >= v367)
            v374 = 0;
          else
            v374 = -1;
          *v362 = v374;
          v362 += v361;
          v354 = (unint64_t *)((char *)v354 + v363);
        }
        if (*v354 >= v367)
          v375 = 0;
        else
          v375 = -1;
        *v362 = v375;
        v358 = *(_DWORD *)v716;
        v359 = *(_DWORD *)&v716[4];
      }
      v376 = 0uLL;
      memset(v754, 0, sizeof(v754));
      LODWORD(v755) = 1065353216;
      v377 = v717[1];
      if (v359)
        v378 = v358 == 0;
      else
        v378 = 1;
      v379 = *(_QWORD *)&v716[8];
      if (v378)
        v380 = 0;
      else
        v380 = *(_QWORD *)v716;
      if (HIDWORD(v380) * *(_DWORD *)&v716[12] == -1)
      {
        v381 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C);
        v376 = 0uLL;
        if (v381)
          abort();
      }
      v759[0] = (uint64_t)v377;
      v759[1] = v380;
      v759[2] = v379;
      LOBYTE(v762) = 0;
      *(_OWORD *)v757 = v376;
      *(_OWORD *)&v757[2] = v376;
      v758 = 1065353216;
      sub_2236EA858((uint64_t)v757, (unsigned __int8 *)&v762, &v762);
      sub_223FAFFB4(v759, (uint64_t)v757, (uint64_t)v754, 1, &v760);
      v383 = v757[2];
      if (v757[2])
      {
        do
        {
          v384 = (_QWORD *)*v383;
          operator delete(v383);
          v383 = v384;
        }
        while (v384);
      }
      v385 = v757[0];
      v757[0] = 0;
      if (v385)
        operator delete(v385);
      v386 = v760;
      v387 = v761;
      if (v760 == v761)
      {
        v714 = 0;
        v713 = 0;
        v715 = 0;
        if (v760)
          goto LABEL_728;
        goto LABEL_735;
      }
      v762 = 0;
      v763 = 0;
      v764 = 0;
      if ((0xAAAAAAAAAAAAAAABLL * ((v761 - v760) >> 3)) >> 62)
        sub_22316E078();
      v762 = (float *)operator new(0xAAAAAAAAAAAAAAACLL * ((v761 - v760) >> 3));
      v763 = v762;
      v764 = &v762[0xEAAAAAAAAAAAAAABLL * ((v387 - v386) >> 3)];
      v765 = (void **)&v762;
      while (1)
      {
        v389 = *(uint32x2_t **)v386;
        v388 = (uint32x2_t *)*((_QWORD *)v386 + 1);
        memset(v757, 0, 24);
        v390 = (char *)v388 - (char *)v389;
        if (v388 == v389)
        {
          v416 = 0.0;
          goto LABEL_674;
        }
        if (v390 < 0)
          sub_22316E078();
        v391 = (float32x2_t *)operator new((char *)v388 - (char *)v389);
        v392 = v390 >> 3;
        v757[0] = v391;
        v757[1] = v391;
        v757[2] = &v391[v392];
        v393 = &v389[v392];
        do
        {
          while (1)
          {
            while (1)
            {
              v394 = vcvt_f32_u32(*v389);
              if (v391 >= v757[2])
                break;
              *v391++ = v394;
              v757[1] = v391;
              if (++v389 == v393)
                goto LABEL_666;
            }
            v395 = (float32x2_t *)v757[0];
            v396 = (char *)v391 - (char *)v757[0];
            v397 = ((char *)v391 - (char *)v757[0]) >> 3;
            v398 = v397 + 1;
            if ((unint64_t)(v397 + 1) >> 61)
              sub_22316E078();
            v399 = (char *)v757[2] - (char *)v757[0];
            if (((char *)v757[2] - (char *)v757[0]) >> 2 > v398)
              v398 = v399 >> 2;
            v400 = (unint64_t)v399 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v398;
            if (!v400)
              break;
            if (v400 >> 61)
              sub_223174E94();
            v401 = operator new(8 * v400);
            v402 = (float32x2_t *)&v401[8 * v397];
            v403 = &v401[8 * v400];
            *v402 = v394;
            v404 = v402 + 1;
            v405 = (char *)v391 - (char *)v395;
            if (v391 == v395)
              goto LABEL_653;
LABEL_646:
            v406 = v405 - 8;
            if (v406 < 0x168)
            {
              v407 = v391;
              goto LABEL_648;
            }
            v409 = ((char *)&v391[-1] - (char *)v395) & 0xFFFFFFFFFFFFFFF8;
            if (&v401[v396 - 8 - v409] > &v401[v396 - 8])
            {
              v407 = v391;
              do
              {
LABEL_648:
                v408 = v407[-1];
                --v407;
                v402[-1] = v408;
                --v402;
              }
              while (v407 != v395);
              goto LABEL_649;
            }
            if ((float32x2_t *)((char *)&v391[-1] - v409) > &v391[-1])
            {
              v407 = v391;
              goto LABEL_648;
            }
            if ((unint64_t)((char *)v391 - v401 - v396) < 0x20)
            {
              v407 = v391;
              goto LABEL_648;
            }
            v410 = (v406 >> 3) + 1;
            v411 = 8 * (v410 & 0x3FFFFFFFFFFFFFFCLL);
            v407 = &v391[v411 / 0xFFFFFFFFFFFFFFF8];
            v402 = (float32x2_t *)((char *)v402 - v411);
            v412 = &v401[8 * v397 - 16];
            v413 = v391 - 2;
            v414 = v410 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v415 = *(_OWORD *)v413->f32;
              *(v412 - 1) = *(_OWORD *)v413[-2].f32;
              *v412 = v415;
              v412 -= 2;
              v413 -= 4;
              v414 -= 4;
            }
            while (v414);
            if (v410 != (v410 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_648;
LABEL_649:
            v391 = (float32x2_t *)v757[0];
            v757[0] = v402;
            v757[1] = v404;
            v757[2] = v403;
            if (v391)
              goto LABEL_654;
            v391 = v404;
            v757[1] = v404;
            if (++v389 == v393)
              goto LABEL_666;
          }
          v401 = 0;
          v402 = (float32x2_t *)(8 * v397);
          v403 = 0;
          *(float32x2_t *)(8 * v397) = v394;
          v404 = (float32x2_t *)(8 * v397 + 8);
          v405 = (char *)v391 - (char *)v395;
          if (v391 != v395)
            goto LABEL_646;
LABEL_653:
          v757[0] = v402;
          v757[1] = v404;
          v757[2] = v403;
LABEL_654:
          operator delete(v391);
          v391 = v404;
          v757[1] = v404;
          ++v389;
        }
        while (v389 != v393);
LABEL_666:
        if ((unint64_t)((char *)v391 - (char *)v757[0]) >= 0x18)
        {
          v417 = (float *)((char *)v757[0] + 12);
          v418 = 0.0;
          v419 = (((char *)v391 - (char *)v757[0]) >> 3) - 1;
          v420 = *((float *)v757[0] + 1);
          v421 = *(float *)v757[0];
          do
          {
            v422 = *v417;
            v423 = v418 - (float)(v421 * *v417);
            v421 = *(v417 - 1);
            v418 = v423 + (float)(v420 * v421);
            v417 += 2;
            v420 = v422;
            --v419;
          }
          while (v419);
          v416 = fabsf((float)((float)(v418- (float)(*((float *)v757[0] + 1)* *((float *)v757[0] + 2 * (((char *)v391 - (char *)v757[0]) >> 3) - 2)))+ (float)(*(float *)v757[0]* *((float *)v757[0] + 2 * (((char *)v391 - (char *)v757[0]) >> 3) - 1)))* 0.5);
LABEL_673:
          operator delete(v757[0]);
          goto LABEL_674;
        }
        v416 = 0.0;
        if (v757[0])
          goto LABEL_673;
LABEL_674:
        *(float *)v757 = v416;
        sub_2233D7140((uint64_t *)&v765, v757);
        v386 += 24;
        if (v386 == v387)
        {
          v424 = v762;
          if (v762 == v763)
          {
            v426 = v762;
          }
          else
          {
            v425 = v762 + 1;
            v426 = v762;
            if (v762 + 1 != v763)
            {
              v427 = *v762;
              v426 = v762;
              v428 = v762 + 1;
              do
              {
                v429 = *v428++;
                v430 = v429;
                if (v427 < v429)
                {
                  v427 = v430;
                  v426 = v425;
                }
                v425 = v428;
              }
              while (v428 != v763);
            }
          }
          v431 = fabsf(*v426);
          if (*v426 == 0.0 || v431 <= 0.000001)
          {
            v714 = 0;
            v713 = 0;
            v715 = 0;
            goto LABEL_725;
          }
          v433 = &v760[24 * (v426 - v762)];
          v435 = (char *)*((_QWORD *)v433 + 1);
          v434 = (char **)(v433 + 8);
          v436 = *(char **)v433;
          v715 = 0;
          v713 = 0;
          v714 = 0;
          v437 = v435 - v436;
          if (v435 != v436)
          {
            if (v437 < 0)
              sub_22367C394();
            v438 = (char *)operator new(v437);
            v439 = (uint64_t)v438;
            v440 = &v438[8 * (v437 >> 3)];
            v713 = v438;
            v714 = v438;
            v715 = v440;
            v441 = *(char **)v433;
            v442 = *v434;
            if (*(char **)v433 != *v434)
            {
              v701 = v424;
              v443 = v438;
              v444 = v438;
              v708 = *v434;
              while (1)
              {
                v445 = *(_DWORD *)v441 + v735 * *((_DWORD *)v441 + 1);
                if (v445 >= (v738 - (_BYTE *)v737) >> 3)
                {
                  v715 = v440;
                  v713 = v443;
                  v714 = (_BYTE *)v439;
                  sub_2236C5448();
                }
                v446 = *((_QWORD *)v737 + v445);
                if (v446 >= v652)
                  goto LABEL_695;
                if (v444 >= v440)
                  break;
                *(_QWORD *)v444 = v446;
                v444 += 8;
                v439 = (uint64_t)v444;
LABEL_695:
                v441 += 8;
                if (v441 == v442)
                {
                  v715 = v440;
                  v713 = v443;
                  v714 = (_BYTE *)v439;
                  v424 = v701;
                  goto LABEL_725;
                }
              }
              v447 = (v444 - v443) >> 3;
              v448 = v447 + 1;
              if ((unint64_t)(v447 + 1) >> 61)
              {
                v715 = v440;
                v713 = v443;
                v714 = (_BYTE *)v439;
                sub_22367C394();
              }
              if ((v440 - v443) >> 2 > v448)
                v448 = (v440 - v443) >> 2;
              if ((unint64_t)(v440 - v443) >= 0x7FFFFFFFFFFFFFF8)
                v449 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v449 = v448;
              if (v449)
              {
                if (v449 >> 61)
                {
                  v715 = v440;
                  v713 = v443;
                  v714 = (_BYTE *)v439;
                  sub_223174E94();
                }
                v450 = operator new(8 * v449);
                v451 = &v450[8 * v447];
                *(_QWORD *)v451 = v446;
                v439 = (uint64_t)(v451 + 8);
                v452 = v444 - v443;
                if (v444 != v443)
                {
LABEL_708:
                  v453 = v452 - 8;
                  if (v453 < 0x168
                    || (v456 = (v444 - 8 - v443) & 0xFFFFFFFFFFFFFFF8,
                        &v450[v444 - v443 - 8 - v456] > &v450[v444 - v443 - 8])
                    || &v444[-v456 - 8] > v444 - 8
                    || (unint64_t)(v443 - v450) < 0x20)
                  {
                    v454 = v444;
                    v17 = v645;
                  }
                  else
                  {
                    v457 = (v453 >> 3) + 1;
                    v458 = 8 * (v457 & 0x3FFFFFFFFFFFFFFCLL);
                    v454 = &v444[-v458];
                    v451 -= v458;
                    v459 = &v450[8 * v447 - 16];
                    v460 = v444 - 16;
                    v461 = v457 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v462 = *(_OWORD *)v460;
                      *(v459 - 1) = *((_OWORD *)v460 - 1);
                      *v459 = v462;
                      v459 -= 2;
                      v460 -= 32;
                      v461 -= 4;
                    }
                    while (v461);
                    v17 = v645;
                    if (v457 == (v457 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_711:
                      v440 = &v450[8 * v449];
                      if (v443)
                        goto LABEL_712;
                      goto LABEL_713;
                    }
                  }
                  do
                  {
                    v455 = *((_QWORD *)v454 - 1);
                    v454 -= 8;
                    *((_QWORD *)v451 - 1) = v455;
                    v451 -= 8;
                  }
                  while (v454 != v443);
                  goto LABEL_711;
                }
              }
              else
              {
                v450 = 0;
                v451 = (char *)(8 * v447);
                *(_QWORD *)(8 * v447) = v446;
                v439 = 8 * v447 + 8;
                v452 = v444 - v443;
                if (v444 != v443)
                  goto LABEL_708;
              }
              v17 = v645;
              v440 = &v450[8 * v449];
              if (v443)
LABEL_712:
                operator delete(v443);
LABEL_713:
              v443 = v451;
              v444 = (char *)v439;
              v442 = v708;
              goto LABEL_695;
            }
          }
LABEL_725:
          if (v424)
            operator delete(v424);
          v386 = v760;
          if (v760)
          {
LABEL_728:
            v463 = v761;
            v464 = v386;
            if (v761 != v386)
            {
              v465 = v761;
              do
              {
                v467 = (void *)*((_QWORD *)v465 - 3);
                v465 -= 24;
                v466 = v467;
                if (v467)
                {
                  *((_QWORD *)v463 - 2) = v466;
                  operator delete(v466);
                }
                v463 = v465;
              }
              while (v465 != v386);
              v464 = v760;
            }
            v761 = v386;
            operator delete(v464);
          }
LABEL_735:
          v468 = v754[2];
          v30 = v647;
          if (v754[2])
          {
            do
            {
              v498 = (_QWORD *)*v468;
              v499 = (void *)v468[3];
              if (v499)
              {
                v468[4] = v499;
                operator delete(v499);
              }
              operator delete(v468);
              v468 = v498;
            }
            while (v498);
          }
          v469 = v754[0];
          v754[0] = 0;
          if (v469)
            operator delete(v469);
          if (v717[1])
            free(v717[1]);
          v470 = v713;
          if ((unint64_t)(v714 - (_BYTE *)v713) >= 0x18)
          {
            v471 = *(int8x16_t *)&__dst.__r_.__value_.__l.__data_;
            v472 = *(float32x2_t *)((char *)&__dst.__r_.__value_.__r.__words[1] + 4);
            v382.i32[0] = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
            v473 = atomic_load((unsigned __int8 *)&qword_25578F140);
            if ((v473 & 1) == 0)
            {
              v703 = *(int8x16_t *)&__dst.__r_.__value_.__l.__data_;
              v711 = v382;
              v593 = __cxa_guard_acquire(&qword_25578F140);
              v471 = v703;
              v382 = v711;
              if (v593)
              {
                dword_25578F138 = 1065098332;
                __cxa_guard_release(&qword_25578F140);
                v471 = v703;
                v382 = v711;
              }
            }
            v474 = atomic_load((unsigned __int8 *)&qword_25578F150);
            if ((v474 & 1) == 0)
            {
              v704 = v471;
              v712 = v382;
              v594 = __cxa_guard_acquire(&qword_25578F150);
              v471 = v704;
              v382 = v712;
              if (v594)
              {
                dword_25578F148 = 1043452119;
                __cxa_guard_release(&qword_25578F150);
                v471 = v704;
                v382 = v712;
              }
            }
            *(float32x2_t *)v475.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v639, *(float *)v471.i32), v635, *(float32x2_t *)v471.i8, 1), v638, (float32x4_t)v471, 2);
            *(_QWORD *)&v476.f64[1] = v640.i64[1];
            *(float32x2_t *)&v475.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v640.i8, *(float32x2_t *)v471.i8), v37, *(float32x2_t *)v471.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v471, v471, 8uLL), v636);
            v477 = vaddq_f32(v475, v637);
            v478 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v640.i8, v472), v37, v472, 1), v382, v636);
            v479 = (int8x16_t)vcvtq_f64_f32(vmla_n_f32(vmla_lane_f32(vmul_n_f32(v639, v472.f32[0]), v635, v472, 1), v638, v382.f32[0]));
            v480 = vcvtq_f64_f32(v478);
            v481 = (float64x2_t)vextq_s8(v479, v479, 8uLL);
            if (fabsf(v478.f32[0]) >= *(float *)&dword_25578F138)
            {
              *(_QWORD *)&v500.f64[0] = v479.i64[0];
              v500.f64[1] = v481.f64[0];
              v501 = (int64x2_t)vmulq_f64(v500, (float64x2_t)0);
              _Q4.f64[0] = v480.f64[0];
              *(_QWORD *)&_Q4.f64[1] = v501.i64[0];
              v503 = (int8x16_t)vmulq_f64(v500, (float64x2_t)xmmword_2245F5CB0);
              v504 = (float64x2_t)vextq_s8(v503, (int8x16_t)vmulq_f64(v480, (float64x2_t)0), 8uLL);
              v505 = vsubq_f64((float64x2_t)vdupq_laneq_s64(v501, 1), (float64x2_t)v503);
              _Q2 = vsubq_f64(_Q4, v504);
              _Q3 = vmulq_f64(_Q2, _Q2);
              _Q4.f64[0] = _Q2.f64[1];
              __asm { FMLA            D3, D4, V2.D[1] }
              _Q3.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q3.f64[0], v505.f64[0], v505.f64[0]));
              v494 = (int8x16_t)vmulq_n_f64(_Q2, _Q3.f64[0]);
              _Q1 = (int8x16_t)vmulq_f64(v505, _Q3);
              _Q3.f64[0] = v481.f64[0];
              _Q3.f64[1] = v480.f64[0];
              _Q4.f64[0] = v480.f64[0];
              *(_QWORD *)&_Q4.f64[1] = v479.i64[0];
              *(_QWORD *)&v508.f64[0] = _Q1.i64[0];
              *(_QWORD *)&v508.f64[1] = v494.i64[0];
              _Q3 = vmlsq_f64(vmulq_f64(_Q3, v508), _Q4, (float64x2_t)vextq_s8(v494, _Q1, 8uLL));
              v510 = vmlsq_f64(vmulq_laneq_f64((float64x2_t)v479, (float64x2_t)v494, 1), v481, (float64x2_t)v494);
              _Q4 = vmulq_f64(_Q3, _Q3);
              _D5 = _Q3.f64[1];
              __asm { FMLA            D4, D5, V3.D[1] }
              _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v510.f64[0], v510.f64[0]));
              v491 = (int8x16_t)vmulq_n_f64(_Q3, _Q4.f64[0]);
              v492 = vextq_s8(v491, (int8x16_t)vmulq_f64(v510, _Q4), 8uLL);
              *(_QWORD *)&_Q4.f64[0] = vextq_s8(v492, v492, 8uLL).u64[0];
              v496 = vextq_s8(v494, v494, 8uLL).u64[0];
            }
            else
            {
              v482.f64[0] = v481.f64[0];
              v482.f64[1] = v480.f64[0];
              v483.f64[0] = v480.f64[0];
              *(_QWORD *)&v483.f64[1] = v479.i64[0];
              v476.f64[0] = -0.0;
              _Q4 = vmlaq_f64(vmulq_f64(v483, (float64x2_t)xmmword_2245D2420), v482, (float64x2_t)xmmword_2245F5CB0);
              v485 = vmlaq_f64(vmulq_f64(v481, v476), (float64x2_t)v479, (float64x2_t)0);
              _Q5 = vmulq_f64(_Q4, _Q4);
              _D6 = _Q4.f64[1];
              __asm { FMLA            D5, D6, V4.D[1] }
              _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v485.f64[0], v485.f64[0]));
              _Q6 = (int8x16_t)vmulq_f64(v485, _Q5);
              v491 = (int8x16_t)vmulq_n_f64(_Q4, _Q5.f64[0]);
              v492 = vextq_s8(v491, _Q6, 8uLL);
              _Q6.i64[1] = v491.i64[0];
              _Q2 = vmlsq_f64(vmulq_f64(v483, (float64x2_t)v492), v482, (float64x2_t)_Q6);
              _Q4 = vmlsq_laneq_f64(vmulq_f64(v481, (float64x2_t)v491), (float64x2_t)v479, (float64x2_t)v491, 1);
              _Q1 = (int8x16_t)vmulq_f64(_Q2, _Q2);
              _Q6.i64[0] = *(_QWORD *)&_Q2.f64[1];
              __asm { FMLA            D1, D6, V2.D[1] }
              *(double *)_Q1.i64 = 1.0 / sqrt(vmlad_n_f64(*(double *)_Q1.i64, _Q4.f64[0], _Q4.f64[0]));
              v494 = (int8x16_t)vmulq_n_f64(_Q2, *(double *)_Q1.i64);
              _Q1.i64[0] = *(_OWORD *)&vmulq_f64(_Q4, (float64x2_t)_Q1);
              v496 = vextq_s8(v494, v494, 8uLL).u64[0];
              *(_QWORD *)&_Q4.f64[0] = vextq_s8(v492, v492, 8uLL).u64[0];
            }
            v512 = *(_QWORD *)(v644 + 232);
            v513 = *(_QWORD *)(v644 + 240);
            v514 = (char *)v713;
            v491.i64[1] = v492.i64[0];
            v479.i64[1] = *(_QWORD *)&v481.f64[0];
            v494.i64[1] = v496;
            _Q1.i64[1] = vextq_s8((int8x16_t)xmmword_224690B10, (int8x16_t)xmmword_224690B10, 8uLL).u64[0];
            *(_QWORD *)&_Q4.f64[1] = vextq_s8((int8x16_t)xmmword_224690B30, (int8x16_t)xmmword_224690B30, 8uLL).u64[0];
            *(_QWORD *)&v480.f64[1] = vextq_s8((int8x16_t)xmmword_224690B50, (int8x16_t)xmmword_224690B50, 8uLL).u64[0];
            v515.f64[1] = 1.0;
            *(_QWORD *)&v515.f64[0] = *(_OWORD *)&vcvt_hight_f64_f32(v477);
            v516 = (int32x2_t)vcvt_f32_f64((float64x2_t)v494);
            v673 = vcvt_hight_f32_f64(v516, (float64x2_t)_Q1);
            v679 = (int32x2_t)vcvt_f32_f64((float64x2_t)v479);
            v668 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)v491), _Q4);
            v685 = vcvt_hight_f32_f64(*(int32x2_t *)v477.f32, v515);
            memset(v754, 0, 24);
            v517 = v714 - (_BYTE *)v713;
            if (v714 == v713)
            {
              v530 = 0;
              v531 = 0uLL;
            }
            else
            {
              v658 = v516.i32[0];
              *(float64x2_t *)v663 = v480;
              v709 = (float64x2_t)v479;
              v518 = -(((_BYTE *)v713 - v714) >> 3);
              if (v518 >> 61)
                sub_22316E078();
              v519 = (char *)operator new(-8 * (((_BYTE *)v713 - v714) >> 3));
              v520 = (float32x2_t)vzip1q_s32((int32x4_t)v673, (int32x4_t)v668).u64[0];
              v521 = vmul_n_f32(v520, COERCE_FLOAT(v685.i32[0] ^ 0x80000000));
              v522 = vcvt_hight_f32_f64((int32x2_t)v520, v709).u64[0];
              v523 = (int8x16_t)vtrn2q_s32((int32x4_t)v673, (int32x4_t)v668);
              v523.i32[2] = v679.i32[1];
              v524 = (int8x16_t)vzip2q_s32((int32x4_t)v673, (int32x4_t)v668);
              v525 = vextq_s8(vextq_s8(v523, v523, 0xCuLL), v524, 8uLL);
              v691 = (float32x2_t)v525.u64[1];
              v697 = (float32x2_t)__PAIR64__(v525.u32[0], v523.u32[0]);
              v702 = (float32x2_t)v522;
              v710 = vmla_n_f32(vmla_lane_f32(v521, *(float32x2_t *)v523.i8, (float32x2_t)(v685.i64[0] ^ 0x8000000080000000), 1), *(float32x2_t *)v524.i8, COERCE_FLOAT(v685.i32[2] ^ 0x80000000));
              v754[0] = v519;
              v754[1] = v519;
              v754[2] = &v519[8 * v518];
              v526 = 0xAAAAAAAAAAAAAAABLL * ((v513 - v512) >> 2);
              *(_QWORD *)v716 = v514;
              *(_QWORD *)&v716[8] = v512;
              *(_QWORD *)&v716[16] = v526;
              v762 = (float *)v754;
              v527 = 8 * (v517 >> 3);
              v528 = v514 + 8;
              do
              {
                v529 = *((_QWORD *)v528 - 1);
                if (v526 <= v529)
                  sub_22457354C((unint64_t *)&v716[16], v529);
                v759[0] = (uint64_t)vadd_f32(vmla_n_f32(vmla_lane_f32(vmul_n_f32(v702, COERCE_FLOAT(*(_QWORD *)(v512 + 12 * v529))), v697, *(float32x2_t *)(v512 + 12 * v529), 1), v691, *(float *)(v512 + 12 * v529 + 8)), v710);
                sub_2232EA538((void ***)&v762, v759);
                *(_QWORD *)v716 = v528;
                v528 += 8;
                v527 -= 8;
              }
              while (v527);
              v530 = (float *)v754[0];
              v531 = *(_OWORD *)&v754[1];
              v516.i32[0] = v658;
              v480 = *(float64x2_t *)v663;
            }
            v757[0] = v530;
            *(_OWORD *)&v757[1] = v531;
            v532 = v531 - (_QWORD)v530;
            v533 = 0.0;
            v30 = v647;
            if ((unint64_t)v532 >= 0x18)
            {
              v534 = (v532 >> 3) - 1;
              v535 = v530 + 3;
              v536 = 0.0;
              v537 = v534;
              v538 = v530[1];
              v539 = *v530;
              do
              {
                v540 = *v535;
                v541 = v536 - (float)(v539 * *v535);
                v539 = *(v535 - 1);
                v536 = v541 + (float)(v538 * v539);
                v535 += 2;
                v538 = v540;
                --v537;
              }
              while (v537);
              v533 = (float)((float)(v536 - (float)(v530[1] * v530[2 * v534])) + (float)(*v530 * v530[2 * v534 + 1]))
                   * 0.5;
            }
            if (fabsf(v533) >= 0.01)
            {
              *(float64x2_t *)__p = vcvtq_f64_f32((float32x2_t)__PAIR64__(v673.u32[1], v516.u32[0]));
              v542 = vcvt_hight_f32_f64(v679, v480);
              *(float64x2_t *)&__p[2] = vcvt_hight_f64_f32(v673);
              *(float64x2_t *)&__p[4] = vcvtq_f64_f32(*(float32x2_t *)v668.f32);
              *(float64x2_t *)&__p[6] = vcvt_hight_f64_f32(v668);
              *(float64x2_t *)&__p[8] = vcvtq_f64_f32(*(float32x2_t *)v542.f32);
              v722 = vcvt_hight_f64_f32(v542);
              v723 = vcvtq_f64_f32(*(float32x2_t *)v685.f32);
              v724 = vcvt_hight_f64_f32(v685);
              v725 = 1022739087;
              v543 = *((_QWORD *)&v726 + 1);
              if (*((_QWORD *)&v726 + 1) >= v727)
              {
                v544 = sub_2236ADCEC((char **)&v726, (uint64_t)v757);
                v30 = v647;
                *((_QWORD *)&v726 + 1) = v544;
                v545 = v641;
                v547 = (char *)v641[1];
                v546 = (unint64_t)v641[2];
                if ((unint64_t)v547 >= v546)
                  goto LABEL_767;
LABEL_763:
                v548 = *(_OWORD *)__p;
                v549 = *(_OWORD *)&__p[2];
                v550 = *(_OWORD *)&__p[6];
                *((_OWORD *)v547 + 2) = *(_OWORD *)&__p[4];
                *((_OWORD *)v547 + 3) = v550;
                *(_OWORD *)v547 = v548;
                *((_OWORD *)v547 + 1) = v549;
                v551 = *(_OWORD *)&__p[8];
                v552 = v722;
                v553 = v724;
                *((float64x2_t *)v547 + 6) = v723;
                *((float64x2_t *)v547 + 7) = v553;
                *((_OWORD *)v547 + 4) = v551;
                *((float64x2_t *)v547 + 5) = v552;
                *((_DWORD *)v547 + 32) = v725;
                *((_QWORD *)v547 + 17) = 0;
                *((_QWORD *)v547 + 18) = 0;
                *((_QWORD *)v547 + 19) = 0;
                *(_OWORD *)(v547 + 136) = v726;
                *((_QWORD *)v547 + 19) = v727;
                v726 = 0uLL;
                v727 = 0;
                v547[160] = 0;
                v547[184] = 0;
                if (v730)
                {
                  *((_QWORD *)v547 + 20) = 0;
                  *((_QWORD *)v547 + 21) = 0;
                  *((_QWORD *)v547 + 22) = 0;
                  *((_OWORD *)v547 + 10) = v728;
                  *((_QWORD *)v547 + 22) = v729;
                  v728 = 0uLL;
                  v729 = 0;
                  v547[184] = 1;
                }
                v547[192] = v731;
                v554 = v547 + 200;
              }
              else
              {
                **((_QWORD **)&v726 + 1) = 0;
                *(_QWORD *)(v543 + 8) = 0;
                *(_QWORD *)(v543 + 16) = 0;
                *(_OWORD *)v543 = *(_OWORD *)v757;
                *(void **)(v543 + 16) = v757[2];
                memset(v757, 0, 24);
                v544 = (char *)(v543 + 24);
                *((_QWORD *)&v726 + 1) = v543 + 24;
                v545 = v641;
                v547 = (char *)v641[1];
                v546 = (unint64_t)v641[2];
                if ((unint64_t)v547 < v546)
                  goto LABEL_763;
LABEL_767:
                v555 = (char *)*v545;
                v556 = 0x8F5C28F5C28F5C29 * ((v547 - (_BYTE *)*v545) >> 3);
                v557 = v556 + 1;
                if (v556 + 1 > 0x147AE147AE147AELL)
                  sub_22316E078();
                v558 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v546 - (_QWORD)v555) >> 3);
                if (2 * v558 > v557)
                  v557 = 2 * v558;
                if (v558 >= 0xA3D70A3D70A3D7)
                  v559 = 0x147AE147AE147AELL;
                else
                  v559 = v557;
                if (v559)
                {
                  if (v559 > 0x147AE147AE147AELL)
                    sub_223174E94();
                  v560 = operator new(200 * v559);
                }
                else
                {
                  v560 = 0;
                }
                v561 = v722;
                v562 = v723;
                v563 = (char *)&v560[25 * v556];
                v564 = *(_OWORD *)&__p[6];
                *((_OWORD *)v563 + 4) = *(_OWORD *)&__p[8];
                *((float64x2_t *)v563 + 5) = v561;
                v565 = v724;
                *((float64x2_t *)v563 + 6) = v562;
                *((float64x2_t *)v563 + 7) = v565;
                v566 = *(_OWORD *)&__p[2];
                v567 = *(_OWORD *)&__p[4];
                *(_OWORD *)v563 = *(_OWORD *)__p;
                *((_OWORD *)v563 + 1) = v566;
                *((_OWORD *)v563 + 2) = v567;
                *((_OWORD *)v563 + 3) = v564;
                *((_DWORD *)v563 + 32) = v725;
                v568 = v727;
                *((_QWORD *)v563 + 17) = v726;
                *((_QWORD *)v563 + 18) = v544;
                *((_QWORD *)v563 + 19) = v568;
                v727 = 0;
                v726 = 0uLL;
                v563[160] = 0;
                v563[184] = 0;
                if (v730)
                {
                  *((_QWORD *)v563 + 22) = 0;
                  *((_OWORD *)v563 + 10) = v728;
                  v560[25 * v556 + 22] = v729;
                  v729 = 0;
                  v728 = 0uLL;
                  v563[184] = 1;
                }
                v569 = (char *)&v560[25 * v559];
                LOBYTE(v560[25 * v556 + 24]) = v731;
                v554 = v563 + 200;
                if (v547 == v555)
                {
                  *v641 = v563;
                  v641[1] = v554;
                  v641[2] = v569;
                }
                else
                {
                  v570 = 0;
                  do
                  {
                    v571 = &v563[v570];
                    v572 = &v547[v570];
                    v573 = *(_OWORD *)&v547[v570 - 200];
                    v574 = *(_OWORD *)&v547[v570 - 184];
                    v575 = *(_OWORD *)&v547[v570 - 168];
                    *(_OWORD *)(v571 - 152) = *(_OWORD *)&v547[v570 - 152];
                    *(_OWORD *)(v571 - 168) = v575;
                    *(_OWORD *)(v571 - 184) = v574;
                    *(_OWORD *)(v571 - 200) = v573;
                    v576 = *(_OWORD *)&v547[v570 - 136];
                    v577 = *(_OWORD *)&v547[v570 - 120];
                    v578 = *(_OWORD *)&v547[v570 - 104];
                    *(_OWORD *)(v571 - 88) = *(_OWORD *)&v547[v570 - 88];
                    *(_OWORD *)(v571 - 104) = v578;
                    *(_OWORD *)(v571 - 120) = v577;
                    *(_OWORD *)(v571 - 136) = v576;
                    *((_DWORD *)v571 - 18) = *(_DWORD *)&v547[v570 - 72];
                    *((_QWORD *)v571 - 7) = 0;
                    *((_QWORD *)v571 - 6) = 0;
                    *((_OWORD *)v571 - 4) = *(_OWORD *)&v547[v570 - 64];
                    *((_QWORD *)v571 - 6) = *(_QWORD *)&v547[v570 - 48];
                    *((_QWORD *)v572 - 8) = 0;
                    *((_QWORD *)v572 - 7) = 0;
                    *((_QWORD *)v572 - 6) = 0;
                    *(v571 - 40) = 0;
                    *(v571 - 16) = 0;
                    if (v547[v570 - 16])
                    {
                      *((_QWORD *)v571 - 4) = 0;
                      *((_QWORD *)v571 - 3) = 0;
                      *(_OWORD *)(v571 - 40) = *(_OWORD *)(v572 - 40);
                      *((_QWORD *)v571 - 3) = *((_QWORD *)v572 - 3);
                      *((_QWORD *)v572 - 5) = 0;
                      *((_QWORD *)v572 - 4) = 0;
                      *((_QWORD *)v572 - 3) = 0;
                      *(v571 - 16) = 1;
                    }
                    *(v571 - 8) = *(v572 - 8);
                    v570 -= 200;
                  }
                  while (&v547[v570] != v555);
                  v547 = (char *)*v641;
                  v579 = (char *)v641[1];
                  *v641 = &v563[v570];
                  v641[1] = v554;
                  v641[2] = v569;
                  while (v579 != v547)
                  {
                    if (*(v579 - 16))
                    {
                      v581 = (void *)*((_QWORD *)v579 - 5);
                      if (v581)
                      {
                        *((_QWORD *)v579 - 4) = v581;
                        operator delete(v581);
                      }
                    }
                    v582 = *((_QWORD *)v579 - 8);
                    if (v582)
                    {
                      v583 = *((_QWORD *)v579 - 7);
                      v580 = (void *)*((_QWORD *)v579 - 8);
                      if (v583 != v582)
                      {
                        v584 = *((_QWORD *)v579 - 7);
                        do
                        {
                          v586 = *(void **)(v584 - 24);
                          v584 -= 24;
                          v585 = v586;
                          if (v586)
                          {
                            *(_QWORD *)(v583 - 16) = v585;
                            operator delete(v585);
                          }
                          v583 = v584;
                        }
                        while (v584 != v582);
                        v580 = (void *)*((_QWORD *)v579 - 8);
                      }
                      *((_QWORD *)v579 - 7) = v582;
                      operator delete(v580);
                    }
                    v579 -= 200;
                  }
                }
                v30 = v647;
                if (v547)
                  operator delete(v547);
              }
              v641[1] = v554;
              v530 = (float *)v757[0];
            }
            if (v530)
            {
              v757[1] = v530;
              operator delete(v530);
            }
            v470 = v713;
          }
          if (v470)
          {
            v714 = v470;
            operator delete(v470);
          }
          break;
        }
      }
    }
LABEL_809:
    if (v730 && (_QWORD)v728)
    {
      *((_QWORD *)&v728 + 1) = v728;
      operator delete((void *)v728);
    }
    v587 = v726;
    if ((_QWORD)v726)
    {
      v588 = *((_QWORD *)&v726 + 1);
      v589 = (void *)v726;
      if (*((_QWORD *)&v726 + 1) != (_QWORD)v726)
      {
        v590 = *((_QWORD *)&v726 + 1);
        do
        {
          v592 = *(void **)(v590 - 24);
          v590 -= 24;
          v591 = v592;
          if (v592)
          {
            *(_QWORD *)(v588 - 16) = v591;
            operator delete(v591);
          }
          v588 = v590;
        }
        while (v590 != v587);
        v589 = (void *)v726;
      }
      *((_QWORD *)&v726 + 1) = v587;
      operator delete(v589);
    }
LABEL_820:
    if (v737)
    {
      v738 = v737;
      operator delete(v737);
    }
    if (v733)
    {
      v734 = v733;
      operator delete(v733);
    }
    v30 += 88;
    if (v30 != v648)
      continue;
    break;
  }
LABEL_828:
  v595 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v595 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    __dst = *(std::string *)byte_25578BAF8;
  v596 = std::string::append(&__dst, ".", 1uLL);
  v597 = *(_OWORD *)&v596->__r_.__value_.__l.__data_;
  *(_QWORD *)&v716[16] = *((_QWORD *)&v596->__r_.__value_.__l + 2);
  *(_OWORD *)v716 = v597;
  v596->__r_.__value_.__l.__size_ = 0;
  v596->__r_.__value_.__r.__words[2] = 0;
  v596->__r_.__value_.__r.__words[0] = 0;
  v598 = std::string::append((std::string *)v716, "SingleShot.ArrayedPointPlaneDetector.detections", 0x2FuLL);
  v599 = *(_OWORD *)&v598->__r_.__value_.__l.__data_;
  __p[2] = (void *)v598->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v599;
  v598->__r_.__value_.__l.__size_ = 0;
  v598->__r_.__value_.__r.__words[2] = 0;
  v598->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v600 = __p;
  else
    v600 = (void **)__p[0];
  strlen((const char *)v600);
  sub_2241471F8();
  v601 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if ((v716[23] & 0x80000000) != 0)
      goto LABEL_899;
LABEL_837:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_900:
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((v716[23] & 0x80000000) == 0)
      goto LABEL_837;
LABEL_899:
    operator delete(*(void **)v716);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_900;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v601 + 24))(v601))
  {
    v602 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v602 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v601 + 24))(v601))
    {
      v757[0] = (void *)(uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      v757[1] = (void *)2;
      v603 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v601 + 24))(v601))
      {
        sub_223EE4CC8(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v740 - (_QWORD)v739) >> 3), (uint64_t)v739, v652, (uint64_t)v17, (_DWORD *)v644, (uint64_t)__p);
        v716[0] = 0;
        v716[24] = 0;
        sub_2231C6C30(__p, (__int128 *)v716, (__int128 *)v757, &__dst);
        if (v716[24] && (v716[23] & 0x80000000) != 0)
          operator delete(*(void **)v716);
        v604 = (std::__shared_weak_count *)__p[2];
        if (__p[2])
        {
          v605 = (unint64_t *)((char *)__p[2] + 8);
          do
            v606 = __ldaxr(v605);
          while (__stlxr(v606 - 1, v605));
          if (!v606)
          {
            ((void (*)(std::__shared_weak_count *))v604->__on_zero_shared)(v604);
            std::__shared_weak_count::__release_weak(v604);
          }
        }
        v607 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v601 + 56))(v601);
        v608 = *(void **)v607;
        v609 = *(std::__shared_weak_count **)(v607 + 8);
        if (v609)
        {
          p_shared_owners = (unint64_t *)&v609->__shared_owners_;
          do
            v611 = __ldxr(p_shared_owners);
          while (__stxr(v611 + 1, p_shared_owners));
        }
        v612 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
        v754[0] = &off_24EC6A3B8;
        *(_OWORD *)&v754[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
        *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
        __p[0] = v608;
        __p[1] = v609;
        if (v609)
        {
          v613 = (unint64_t *)&v609->__shared_owners_;
          do
            v614 = __ldxr(v613);
          while (__stxr(v614 + 1, v613));
        }
        __p[2] = &off_24EC6A3B8;
        *(_OWORD *)&__p[3] = v612;
        if (*((_QWORD *)&v612 + 1))
        {
          v615 = (unint64_t *)(*((_QWORD *)&v612 + 1) + 8);
          do
            v616 = __ldxr(v615);
          while (__stxr(v616 + 1, v615));
        }
        (*(void (**)(uint64_t *, void **))(*v603 + 16))(v603, __p);
        v617 = (std::__shared_weak_count *)__p[4];
        if (__p[4])
        {
          v618 = (unint64_t *)((char *)__p[4] + 8);
          do
            v619 = __ldaxr(v618);
          while (__stlxr(v619 - 1, v618));
          if (!v619)
          {
            ((void (*)(std::__shared_weak_count *))v617->__on_zero_shared)(v617);
            std::__shared_weak_count::__release_weak(v617);
          }
        }
        v620 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v621 = (unint64_t *)((char *)__p[1] + 8);
          do
            v622 = __ldaxr(v621);
          while (__stlxr(v622 - 1, v621));
          if (!v622)
          {
            ((void (*)(std::__shared_weak_count *))v620->__on_zero_shared)(v620);
            std::__shared_weak_count::__release_weak(v620);
          }
        }
        v623 = (std::__shared_weak_count *)v754[2];
        if (v754[2])
        {
          v624 = (unint64_t *)((char *)v754[2] + 8);
          do
            v625 = __ldaxr(v624);
          while (__stlxr(v625 - 1, v624));
          if (!v625)
          {
            ((void (*)(std::__shared_weak_count *))v623->__on_zero_shared)(v623);
            std::__shared_weak_count::__release_weak(v623);
          }
        }
        if (v609)
        {
          v626 = (unint64_t *)&v609->__shared_owners_;
          do
            v627 = __ldaxr(v626);
          while (__stlxr(v627 - 1, v626));
          if (!v627)
          {
            ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
            std::__shared_weak_count::__release_weak(v609);
          }
        }
        v628 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
        if (__dst.__r_.__value_.__r.__words[2])
        {
          v629 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
          do
            v630 = __ldaxr(v629);
          while (__stlxr(v630 - 1, v629));
          if (!v630)
          {
            ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
            std::__shared_weak_count::__release_weak(v628);
          }
        }
      }
    }
  }
  v631 = (char *)v739;
  if (v739)
  {
    for (i = (char *)v740; i != v631; i -= 88)
    {
      v633 = (void *)*((_QWORD *)i - 4);
      if (v633)
      {
        *((_QWORD *)i - 3) = v633;
        operator delete(v633);
      }
      v634 = (void *)*((_QWORD *)i - 8);
      if (v634)
      {
        *((_QWORD *)i - 7) = v634;
        operator delete(v634);
      }
    }
    operator delete(v631);
  }
  if (v747)
    free(v747);
  if (v17)
    operator delete(v17);
}

void sub_223F39E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;

  sub_2241231D8(v46);
  v49 = (std::__shared_weak_count *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x480]);
  if (v45)
  {
    v52 = (unint64_t *)&v45->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  sub_2241231D8((uint64_t)&STACK[0x370]);
  *(_QWORD *)(v47 - 216) = a40;
  sub_223F3A870((void ***)(v47 - 216));
  sub_223F3A2D4((void **)&STACK[0x3C8]);
  if (STACK[0x448])
    free((void *)STACK[0x448]);
  if (a45)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void **sub_223F3A2D4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 88;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223F3A354(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  if (*(_BYTE *)(a1 + 184))
  {
    v2 = *(void **)(a1 + 160);
    if (v2)
    {
      *(_QWORD *)(a1 + 168) = v2;
      operator delete(v2);
    }
  }
  v3 = *(_QWORD *)(a1 + 136);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = *(void **)(a1 + 136);
    if (v4 != v3)
    {
      v6 = *(_QWORD *)(a1 + 144);
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v3;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_223F3A3E0(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_223F3A420(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  char *v17;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  v6 = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 12) = v5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_BYTE *)a2[3];
  v7 = (_BYTE *)a2[4];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_22367C394();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  v12 = a2[6];
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v14 = (_BYTE *)a2[7];
  v13 = (_BYTE *)a2[8];
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0)
      sub_22367C394();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 64) = v17;
  }
  *(_QWORD *)(a1 + 80) = a2[10];
  return a1;
}

void sub_223F3A524(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

size_t *sub_223F3A558(size_t *a1, _DWORD *a2, void **a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  void *v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  int v19;
  void *v20;
  unint64_t v21;
  BOOL v22;
  void *memptr[3];
  _QWORD v25[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (void *)((*a2 != 0) | (unint64_t)(v13 << 32));
  }
  v14 = (v12 * HIDWORD(v11));
  v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  *a1 = v14;
  a1[1] = 0;
  a1[2] = v18;
  if ((_DWORD)v14)
  {
    memptr[0] = 0;
    v19 = malloc_type_posix_memalign(memptr, v18, v14, 0x1F88E90uLL);
    if (v19)
      sub_2244E2E20(v19, a1[2], v14);
    v20 = memptr[0];
    a1[1] = (size_t)memptr[0];
    v21 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
    if (v20 && a6)
    {
      if ((_DWORD)v21)
        v22 = HIDWORD(v21) == 0;
      else
        v22 = 1;
      if (v22)
        v21 = 0;
      memptr[0] = v20;
      memptr[1] = (void *)v21;
      memptr[2] = v11;
      if (HIDWORD(v21) * HIDWORD(v11) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v25[0] = memptr;
      v25[1] = a5;
      sub_223F3A6F8(v25);
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (size_t)v11;
  }
  return a1;
}

void sub_223F3A6DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F3A6F8(_QWORD *result)
{
  char **v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  BOOL v8;
  _BYTE *v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;

  v1 = (char **)*result;
  v2 = *(unsigned int *)(*result + 16);
  if ((_DWORD)v2 != 1)
  {
    v6 = *((_DWORD *)v1 + 2);
    v7 = *((_DWORD *)v1 + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
      return result;
    v9 = (_BYTE *)result[1];
    v10 = v6 - 1;
    v11 = *v1;
    v12 = v7 - 1;
    if (v12)
    {
      v13 = *((unsigned int *)v1 + 5);
      if (!v10)
      {
        do
        {
          *v11 = *v9;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v9;
        return result;
      }
      for (i = 0; i != v12; ++i)
      {
        v15 = v10;
        v16 = v11;
        do
        {
          *v16 = *v9;
          v16 += v2;
          --v15;
        }
        while (v15);
        *v16 = *v9;
        v11 += v13;
      }
    }
    for (; v10; --v10)
    {
      *v11 = *v9;
      v11 += v2;
    }
    goto LABEL_18;
  }
  v3 = *((unsigned int *)v1 + 5);
  v4 = *((unsigned int *)v1 + 2);
  v5 = (unsigned __int8 *)result[1];
  if ((_DWORD)v3 == (_DWORD)v4)
    return memset(*v1, *v5, (*((_DWORD *)v1 + 3) * v3));
  v17 = *((_DWORD *)v1 + 3);
  if ((_DWORD)v4)
    v18 = v17 == 0;
  else
    v18 = 1;
  if (!v18)
  {
    v19 = *v1;
    v20 = v17 - 1;
    if (v17 != 1)
    {
      do
      {
        memset(v19, *v5, v4);
        v19 += v3;
        --v20;
      }
      while (v20);
    }
    return memset(v19, *v5, v4);
  }
  return result;
}

void sub_223F3A870(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
      operator delete(v5);
    }
    else
    {
      do
      {
        if (*(v4 - 16))
        {
          v7 = (void *)*((_QWORD *)v4 - 5);
          if (v7)
          {
            *((_QWORD *)v4 - 4) = v7;
            operator delete(v7);
          }
        }
        v8 = *((_QWORD *)v4 - 8);
        if (v8)
        {
          v9 = *((_QWORD *)v4 - 7);
          v6 = (void *)*((_QWORD *)v4 - 8);
          if (v9 != v8)
          {
            v10 = *((_QWORD *)v4 - 7);
            do
            {
              v12 = *(void **)(v10 - 24);
              v10 -= 24;
              v11 = v12;
              if (v12)
              {
                *(_QWORD *)(v9 - 16) = v11;
                operator delete(v11);
              }
              v9 = v10;
            }
            while (v10 != v8);
            v6 = (void *)*((_QWORD *)v4 - 8);
          }
          *((_QWORD *)v4 - 7) = v8;
          operator delete(v6);
        }
        v4 -= 200;
      }
      while (v4 != v2);
      v13 = **a1;
      v1[1] = v2;
      operator delete(v13);
    }
  }
}

void sub_223F3A960(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

BOOL sub_223F3B2BC(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_2236B6494(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_2236B62E8((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

void sub_223F3B5A8(uint64_t a1, unsigned int a2, unsigned __int8 a3, float a4)
{
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  if (**(_DWORD **)a1 == a2)
    return;
  v7 = *(uint64_t **)(a1 + 8);
  v8 = a2;
  v9 = v7[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = a2;
      if (v9 <= a2)
        v11 = a2 % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & a2;
    }
    v12 = *(_QWORD **)(*v7 + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = v9 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == a2)
            {
              if (v13[2] == a2)
                goto LABEL_24;
            }
            else if ((v16 & v14) != v11)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == a2)
          {
            if (v13[2] == a2)
              goto LABEL_24;
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v17 = (char *)operator new(0x78uLL);
  *((_QWORD *)v17 + 1) = v8;
  *((_QWORD *)v17 + 2) = v8;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_QWORD *)v17 = 0;
  if (!sub_223F3B83C((uint64_t)v7, v8, v8))
  {
    v18 = (int8x8_t)v7[1];
    v19 = *((_QWORD *)v17 + 1);
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v18)
        v19 %= *(_QWORD *)&v18;
    }
    else
    {
      v19 &= *(_QWORD *)&v18 - 1;
    }
    v21 = *v7;
    v22 = *(_QWORD **)(*v7 + 8 * v19);
    if (v22)
    {
      *(_QWORD *)v17 = *v22;
    }
    else
    {
      *(_QWORD *)v17 = v7[2];
      v7[2] = (uint64_t)v17;
      *(_QWORD *)(v21 + 8 * v19) = v7 + 2;
      if (!*(_QWORD *)v17)
        goto LABEL_39;
      v23 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v23 >= *(_QWORD *)&v18)
          v23 %= *(_QWORD *)&v18;
      }
      else
      {
        v23 &= *(_QWORD *)&v18 - 1;
      }
      v22 = (_QWORD *)(*v7 + 8 * v23);
    }
    *v22 = v17;
LABEL_39:
    ++v7[3];
    if (a3 > 0xBu)
      return;
    goto LABEL_40;
  }
  operator delete(v17);
LABEL_24:
  if (a3 <= 0xBu)
  {
LABEL_40:
    if (**(float **)(a1 + 16) <= a4)
    {
      v24 = *(_QWORD *)(a1 + 8);
      v26 = v8;
      v25 = sub_223F3BA44(v24, v8, &v26);
      v25[a3 + 3] = (unint64_t)((double)(unint64_t)v25[a3 + 3] + 1.0);
    }
  }
}

void sub_223F3B828(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F3B83C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t prime;
  size_t v17;
  uint8x8_t v18;
  uint64_t v19;
  size_t v20;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_22;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2 % v4;
    if (v4 > a2)
      v6 = a2;
    v7 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_22;
  }
  else
  {
    v6 = (v4 - 1) & a2;
    v7 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_22;
  }
  result = (_QWORD *)*v7;
  if (*v7)
  {
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        v10 = result[1];
        if (v10 == a2)
        {
          if (result[2] == a3)
            return result;
        }
        else if ((v10 & (v4 - 1)) != v6)
        {
          goto LABEL_22;
        }
        result = (_QWORD *)*result;
        if (!result)
          goto LABEL_22;
      }
    }
    do
    {
      v9 = result[1];
      if (v9 == a2)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v9 >= v4)
          v9 %= v4;
        if (v9 != v6)
          break;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
LABEL_22:
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (v4 && (float)(v12 * (float)v4) >= v11)
    return 0;
  v13 = 1;
  if (v4 >= 3)
    v13 = (v4 & (v4 - 1)) != 0;
  v14 = v13 | (2 * v4);
  v15 = vcvtps_u32_f32(v11 / v12);
  if (v14 <= v15)
    prime = v15;
  else
    prime = v14;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_46;
  if (prime < v4)
  {
    v17 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v18 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v18.i16[0] = vaddlv_u8(v18), v18.u32[0] > 1uLL))
    {
      v20 = std::__next_prime(v17);
      if (prime <= v20)
        prime = v20;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v19 = 1 << -(char)__clz(v17 - 1);
      if (v17 >= 2)
        v17 = v19;
      if (prime <= v17)
        prime = v17;
      if (prime >= v4)
        return 0;
    }
LABEL_46:
    sub_2231B0668(a1, prime);
  }
  return 0;
}

_QWORD *sub_223F3BA44(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x78uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_223F3BD08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_223F3BD1C(unint64_t *a1, _DWORD *a2, unint64_t *a3, char a4, _DWORD *a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  _DWORD *v21;
  unint64_t v22;
  BOOL v23;
  void *v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  void *memptr[3];
  _QWORD v35[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = v12 * HIDWORD(v11);
  v15 = 4 * v14;
  v16 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
  v18 = v17 | (v17 >> 16) | ((v17 | (v17 >> 16)) >> 32);
  if (v18 + 1 > 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  *a1 = v15;
  a1[1] = 0;
  a1[2] = v19;
  if (v14)
  {
    memptr[0] = 0;
    v20 = malloc_type_posix_memalign(memptr, v19, 4 * v14, 0x1F88E90uLL);
    if (v20)
      sub_2244E2E20(v20, a1[2], v15);
    v21 = memptr[0];
    a1[1] = (unint64_t)memptr[0];
    v22 = *(_QWORD *)a2;
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
    if (v21 && a6)
    {
      if ((_DWORD)v22)
        v23 = HIDWORD(v22) == 0;
      else
        v23 = 1;
      if (v23)
        v24 = 0;
      else
        v24 = (void *)v22;
      memptr[0] = v21;
      memptr[1] = v24;
      memptr[2] = (void *)(v11 & 0x3FFFFFFF3FFFFFFFLL);
      if (HIDWORD(v24) * ((v11 >> 30) >> 2) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v35[0] = memptr;
      v35[1] = a5;
      if ((v11 & 0x3FFFFFFF) == 1)
      {
        sub_223F3BF78((uint64_t)v35);
      }
      else if ((_DWORD)v24 && HIDWORD(v24))
      {
        v25 = (_DWORD)v24 - 1;
        v26 = 4 * (v11 & 0x3FFFFFFF);
        v27 = HIDWORD(v24) - 1;
        if (HIDWORD(v24) != 1)
        {
          v28 = HIDWORD(v11) & 0x3FFFFFFF;
          if ((_DWORD)v24 == 1)
          {
            do
            {
              *v21 = *a5;
              v21 += v28;
              --v27;
            }
            while (v27);
          }
          else
          {
            v29 = 0;
            v30 = 4 * v28;
            do
            {
              v31 = v21;
              v32 = (_DWORD)v24 - 1;
              do
              {
                *v31 = *a5;
                v31 = (_DWORD *)((char *)v31 + v26);
                --v32;
              }
              while (v32);
              *v31 = *a5;
              v21 = (_DWORD *)((char *)v21 + v30);
              ++v29;
            }
            while (v29 != v27);
          }
        }
        if ((_DWORD)v24 != 1)
        {
          do
          {
            *v21 = *a5;
            v21 = (_DWORD *)((char *)v21 + v26);
            --v25;
          }
          while (v25);
        }
        *v21 = *a5;
      }
    }
  }
  else
  {
    a1[3] = *(_QWORD *)a2;
    a1[4] = (4 * v11) & 0xFFFFFFFCFFFFFFFCLL;
  }
  return a1;
}

void sub_223F3BF5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F3BF78(uint64_t result)
{
  uint64_t v1;
  const float *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];
  _DWORD v22[5];
  _QWORD v23[2];

  v1 = *(_QWORD *)result;
  v2 = *(const float **)(result + 8);
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  v5 = *(_DWORD *)(*(_QWORD *)result + 16);
  v4 = *(_DWORD *)(*(_QWORD *)result + 20);
  if (v4 == v5 * (_DWORD)v3)
  {
    v6 = (*(_DWORD *)(v1 + 12) * v3);
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
        abort();
    }
    else if (!(_DWORD)v6)
    {
      return result;
    }
    v12 = v6 - ((_DWORD)v6 != 0) + 1;
    if (v12 < 0x10)
      goto LABEL_19;
    v13 = 4 * v6;
    if (!(_DWORD)v6)
      v13 = 4;
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      v14 = (_DWORD *)v7;
LABEL_20:
      v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    v16 = vld1q_dup_f32(v2);
    v17 = (float32x4_t *)(v7 + 16);
    v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
  else
  {
    v20 = 0;
    v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    v21[2] = v2;
    v9 = *(_DWORD *)(v1 + 12);
    if ((_DWORD)v3)
      v10 = v9 == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      v22[2] = v5;
      v22[3] = v9 - 1;
      v22[4] = v4;
      v11 = *(_QWORD *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_223F3C108((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_223F3C108(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  uint64_t v8;
  unsigned int i;
  const float *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  const float *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  unint64_t v31;

  v4 = a4;
  v7 = *(_DWORD *)(result + 8);
  *(_QWORD *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    v8 = result;
    for (i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(_QWORD *)a2 = v4;
      v10 = *(const float **)(a3 + 16);
      v11 = **(_QWORD **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          if ((_DWORD)result)
            goto LABEL_37;
        }
      }
      if (v11 >= 1)
      {
        v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          v15 = -4;
          if (!v12)
            v15 = 0;
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            v17 = vld1q_dup_f32(v10);
            v18 = (float32x4_t *)(v4 + 16);
            v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_3;
          }
        }
        else
        {
          v14 = (_DWORD *)v4;
        }
        v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(_QWORD *)a2 = v4;
  v21 = *(uint64_t **)(a3 + 8);
  v22 = *(const float **)(a3 + 16);
  v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      result = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
      if ((_DWORD)result)
LABEL_37:
        abort();
    }
  }
  if (v23 >= 1)
  {
    v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10)
      goto LABEL_29;
    v26 = 4 * v23;
    if (!v24)
      v26 = 4;
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      v27 = (_DWORD *)v4;
LABEL_30:
      v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    v29 = vld1q_dup_f32(v22);
    v30 = (float32x4_t *)(v4 + 16);
    v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_30;
  }
  return result;
}

uint64_t sub_223F3C35C(unsigned int *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 < 3 || v2 < 3)
    return 0;
  v6 = v1 - 1;
  v7 = v2 - 1;
  v8 = (v7 * v6);
  if ((_DWORD)v8)
  {
    v9 = operator new((v7 * v6));
    v10 = &v9[v8];
    bzero(v9, (v7 * v6));
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = 0;
  v12 = *((_QWORD *)a1 + 1);
  v13 = (*((_QWORD *)a1 + 2) - v12) >> 3;
  v14 = v10 - v9;
  do
  {
    v15 = v11++;
    v16 = v2 - 1;
    v17 = v15;
    do
    {
      if (v13 <= v17)
LABEL_85:
        sub_2236C5448();
      if (*(_QWORD *)(v12 + 8 * v17) != -1)
      {
        v18 = v17 + 1;
        if (v13 <= v18)
          goto LABEL_85;
        if (*(_QWORD *)(v12 + 8 * v18) != -1)
        {
          v19 = v1 + v17;
          if (v13 <= v19)
            goto LABEL_85;
          if (*(_QWORD *)(v12 + 8 * v19) != -1)
          {
            v20 = v1 + v17 + 1;
            if (v13 <= v20)
              goto LABEL_85;
            if (*(_QWORD *)(v12 + 8 * v20) != -1)
            {
              if (v14 <= v15)
                sub_2236C5448();
              v9[v15] = 1;
            }
          }
        }
      }
      v17 += v1;
      v15 += v6;
      --v16;
    }
    while (v16);
  }
  while (v11 != (_DWORD)v6);
  v21 = 0;
  v22 = v2 - 2;
  v23 = 2 * v1 - 2;
  do
  {
    v24 = v21;
    v25 = v21++ < v1 - 2;
    if (v24)
    {
      if (v14 <= v24)
        goto LABEL_87;
      if (!v9[v24])
        goto LABEL_37;
      v26 = (v24 - 1);
      if (v14 <= v26)
        goto LABEL_87;
      if (!v9[v26])
        goto LABEL_90;
      v27 = (v6 + v24);
      if (v14 <= v27)
        goto LABEL_87;
      if (!v9[v27])
      {
LABEL_90:
        if (!v25)
          goto LABEL_37;
        if (v14 <= v21)
          goto LABEL_87;
        if (!v9[v21])
          goto LABEL_37;
        v28 = (v6 + v24);
        if (v14 <= v28)
          goto LABEL_87;
        if (!v9[v28])
        {
LABEL_37:
          v29 = 1;
          while (1)
          {
            v30 = v1 + v24 - 1;
            if (v14 <= v30)
              goto LABEL_87;
            if (v9[v30])
            {
              v31 = v1 + v24 - 2;
              if (v14 <= v31)
                goto LABEL_87;
              if (v9[v31])
              {
                if (v14 <= v24)
                  goto LABEL_87;
                if (v9[v24])
                  goto LABEL_80;
                if (v29 < v22)
                {
                  v32 = (v23 + v24);
                  if (v14 <= v32)
                    goto LABEL_87;
                  if (v9[v32])
                    goto LABEL_80;
                }
              }
              if (v25)
              {
                v33 = v1 + v24;
                if (v14 <= v33)
                  goto LABEL_87;
                if (v9[v33])
                {
                  if (v14 <= v24)
                    goto LABEL_87;
                  if (v9[v24])
                    goto LABEL_80;
                  if (v29 < v22)
                  {
                    v34 = (v23 + v24);
                    if (v14 <= v34)
                      goto LABEL_87;
                    if (v9[v34])
                      goto LABEL_80;
                  }
                }
              }
            }
            ++v29;
            LODWORD(v24) = v24 + v6;
            if (v7 == v29)
              goto LABEL_24;
          }
        }
      }
      goto LABEL_80;
    }
    if (v25)
    {
      if (v10 == v9)
        goto LABEL_87;
      if (!*v9)
        goto LABEL_64;
      if (v14 <= v21)
        goto LABEL_87;
      if (!v9[v21])
        goto LABEL_64;
      if (v14 <= v6)
        goto LABEL_87;
      if (!v9[v6])
      {
LABEL_64:
        v35 = 0;
        v36 = 1;
        while (1)
        {
          v37 = v1 + v35 - 1;
          if (v14 <= v37)
            break;
          if (v9[v37])
          {
            v38 = v1 + v35;
            if (v14 <= v38)
              break;
            if (v9[v38])
            {
              if (v14 <= v35)
                break;
              if (v9[v35])
                goto LABEL_80;
              if (v36 < v22)
              {
                v39 = v23 + v35;
                if (v14 <= v39)
                  break;
                if (v9[v39])
                  goto LABEL_80;
              }
            }
          }
          ++v36;
          v35 += v6;
          if (v7 == v36)
            goto LABEL_24;
        }
LABEL_87:
        sub_2236C5448();
      }
LABEL_80:
      v4 = 1;
      goto LABEL_81;
    }
    v40 = 0;
    v41 = v2 - 1;
    do
    {
      if (v14 <= v40)
        goto LABEL_87;
      v40 += v6;
      --v41;
    }
    while (v41);
LABEL_24:
    ;
  }
  while (v21 != v6);
  v4 = 0;
  if (!v9)
    return v4;
LABEL_81:
  operator delete(v9);
  return v4;
}

void sub_223F3C700(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F3C71C(uint64_t a1, void **a2, const void *a3, char *a4, const void *a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 *a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t i;
  int v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  *(_QWORD *)a1 = *a13;
  v20 = operator new();
  sub_223F45B80(v20, a2, a3, a4, a5, a6, a7, v21, a9, a10, a11, a12);
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = sub_223F46D00;
  v22 = 5489;
  *(_DWORD *)(a1 + 24) = 5489;
  v23 = 1;
  for (i = 7; i != 630; ++i)
  {
    v25 = 1812433253 * (v22 ^ (v22 >> 30));
    v22 = v25 + v23;
    *(_DWORD *)(a1 + 4 * i) = i + v25 - 6;
    ++v23;
  }
  *(_QWORD *)(a1 + 2520) = 0;
  v26 = (std::__shared_weak_count *)operator new(0x28uLL);
  v27 = v26;
  v26->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  v26->__shared_weak_owners_ = 0;
  v26->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v26[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v26[1].__shared_owners_) = 5489;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2528) = &off_24EC7A6B0;
  *(_QWORD *)(a1 + 2536) = v26 + 1;
  *(_QWORD *)(a1 + 2544) = v26;
  do
    v30 = __ldxr(p_shared_owners);
  while (__stxr(v30 + 1, p_shared_owners));
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (v32)
  {
    if (*(_DWORD *)a1 < 3u || *(_DWORD *)(a1 + 4) <= 2u)
    {
LABEL_22:
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/DensePlaneExtraction.cpp", 361, (uint64_t)"areParametersValid(m_params)", 28, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (*(_DWORD *)a1 < 3u || *(_DWORD *)(a1 + 4) <= 2u)
      goto LABEL_22;
  }
  return a1;
}

void sub_223F3C954(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_2245658A0(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(v1 + 16))(v4);
  _Unwind_Resume(a1);
}

void sub_223F3C9B0(uint64_t a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *i;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;

  v5 = *(_QWORD **)(a1 + 8);
  v6 = v5[37];
  v53 = 0;
  v54 = 0;
  v7 = *(_QWORD *)(v6 + 24);
  v50 = *(_QWORD *)(v6 + 32);
  v52 = v5;
  v8 = 0;
  if (v7 == v50)
  {
    v29 = 0;
  }
  else
  {
    do
    {
      v51 = v7;
      v9 = *(uint64_t ***)(v7 + 16);
      v10 = **v9;
      v11 = (uint64_t **)v9[4][2];
      v12 = **v11;
      do
      {
        v14 = v12;
        v11 = (uint64_t **)v11[4][2];
        v12 = **v11;
        v15 = v5[21];
        v16 = v15 + 12 * v10;
        v17 = v15 + 12 * v14;
        v18 = v15 + 12 * v12;
        a3.n128_u64[0] = *(_QWORD *)v17;
        a3.n128_u32[2] = *(_DWORD *)(v17 + 8);
        a4.i64[0] = *(_QWORD *)v16;
        a4.i32[2] = *(_DWORD *)(v16 + 8);
        a5.i64[0] = *(_QWORD *)v18;
        a5.i32[2] = *(_DWORD *)(v18 + 8);
        v19 = (int8x16_t)vsubq_f32((float32x4_t)a3, a4);
        v20 = (int8x16_t)vsubq_f32(a5, a4);
        v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL);
        a4 = (float32x4_t)vextq_s8(vextq_s8(v20, v20, 0xCuLL), v20, 8uLL);
        a3 = (__n128)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v19, v19, 0xCuLL), v19, 8uLL), v21), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL), a4);
        a5 = (float32x4_t)vextq_s8((int8x16_t)a3, (int8x16_t)a3, 8uLL);
        a4.f32[0] = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a3.n128_u64[0], (float32x2_t)a3.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a3.n128_u64[0], 1), (float32x2_t)a3.n128_u64[0], 1), *(float32x2_t *)a5.f32, *(float32x2_t *)a5.f32).f32[0]);
        v22 = fabsf(a4.f32[0] * 0.5);
        v23 = (float)(a4.f32[0] * 0.5) != 0.0 && v22 > 0.000001;
        if (v23 && fabsf(vmuls_lane_f32(1.0 / a4.f32[0], (float32x4_t)a3, 2)) <= 0.25882)
        {
          if (v8 < v54)
          {
            *(_QWORD *)v8 = v10;
            *((_QWORD *)v8 + 1) = v14;
            v13 = v8 + 24;
            *((_QWORD *)v8 + 2) = v12;
          }
          else
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v53) >> 3) + 1;
            if (v24 > 0xAAAAAAAAAAAAAAALL)
              sub_223323BA8();
            if (0x5555555555555556 * ((v54 - v53) >> 3) > v24)
              v24 = 0x5555555555555556 * ((v54 - v53) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v54 - v53) >> 3) >= 0x555555555555555)
              v25 = 0xAAAAAAAAAAAAAAALL;
            else
              v25 = v24;
            if (v25)
            {
              if (v25 > 0xAAAAAAAAAAAAAAALL)
                sub_223174E94();
              v26 = (char *)operator new(24 * v25);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[8 * ((v8 - v53) >> 3)];
            *(_QWORD *)v27 = v10;
            *((_QWORD *)v27 + 1) = v14;
            *((_QWORD *)v27 + 2) = v12;
            v28 = v27;
            if (v8 != v53)
            {
              do
              {
                a3 = *(__n128 *)(v8 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v8 - 1);
                *(__n128 *)(v28 - 24) = a3;
                v28 -= 24;
                v8 -= 24;
              }
              while (v8 != v53);
              v8 = v53;
            }
            v13 = v27 + 24;
            v53 = v28;
            v54 = &v26[24 * v25];
            if (v8)
              operator delete(v8);
            v5 = v52;
          }
          v8 = v13;
        }
      }
      while (v12 != v10);
      v7 = v51 + 32;
    }
    while (v51 + 32 != v50);
    v29 = v53;
  }
  v31 = v5[21];
  v30 = v5[22];
  v32 = (v30 - v31) >> 2;
  v33 = 0xAAAAAAAAAAAAAAABLL * v32;
  v34 = (0xAAAAAAAAAAAAAAABLL * v32) >> 61;
  v35 = 0x5555555555555558 * v32;
  if (v30 == v31)
  {
    v37 = 0;
    v36 = 0;
    if (v29 == v8)
      goto LABEL_40;
    goto LABEL_38;
  }
  if (v34)
    sub_22367C394();
  v36 = (char *)operator new(0x5555555555555558 * v32);
  v37 = &v36[8 * v33];
  bzero(v36, v35);
  if (v29 != v8)
  {
LABEL_38:
    v38 = v29;
    do
    {
      ++*(_QWORD *)&v36[8 * *(_QWORD *)v38];
      ++*(_QWORD *)&v36[8 * *((_QWORD *)v38 + 1)];
      ++*(_QWORD *)&v36[8 * *((_QWORD *)v38 + 2)];
      v38 += 24;
    }
    while (v38 != v8);
  }
LABEL_40:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v30 == v31)
  {
    v42 = 0;
    v41 = 0;
    v39 = a2;
    v40 = v52;
    v43 = v37 - v36;
    if (v37 != v36)
      goto LABEL_43;
LABEL_52:
    v45 = 0;
    v47 = v42 - v41;
    goto LABEL_53;
  }
  if (v34)
    sub_22367C394();
  v39 = a2;
  v40 = v52;
  v41 = operator new(v35);
  *a2 = v41;
  v42 = &v41[v33];
  a2[2] = v42;
  bzero(v41, v35);
  a2[1] = v42;
  v43 = v37 - v36;
  if (v37 == v36)
    goto LABEL_52;
LABEL_43:
  v44 = 0;
  v45 = 0;
  v46 = v43 >> 3;
  if (v46 <= 1)
    v46 = 1;
  do
  {
    if (*(_QWORD *)&v36[8 * v44])
      v41[v45++] = v44;
    ++v44;
  }
  while (v46 != v44);
  v47 = v42 - v41;
  if (v45 > v47)
  {
    sub_223F2B610((uint64_t)v39, v45 - v47);
LABEL_56:
    operator delete(v36);
    v41 = (_QWORD *)*v39;
    v42 = (_QWORD *)v39[1];
    goto LABEL_57;
  }
LABEL_53:
  if (v47 > v45)
  {
    v42 = &v41[v45];
    v39[1] = v42;
  }
  if (v36)
    goto LABEL_56;
LABEL_57:
  if (v41 != v42)
  {
    while (v40[27] > *v41)
    {
      if (++v41 == v42)
        goto LABEL_69;
    }
    if (v41 != v42)
    {
      for (i = v41 + 1; i != v42; ++i)
      {
        if (v40[27] > *i)
          *v41++ = *i;
      }
    }
    if (v41 != v42)
      v39[1] = v41;
  }
LABEL_69:
  if (v29)
    operator delete(v29);
}

void sub_223F3CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;
  void **v19;
  void *v21;

  v21 = *v19;
  if (*v19)
  {
    *(_QWORD *)(a9 + 8) = v21;
    operator delete(v21);
  }
  operator delete(v18);
  if (v17)
    operator delete(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F3CF54@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _OWORD *a4@<X8>)
{
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned __int16 *v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  unsigned __int16 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  unsigned __int16 *v57;
  int64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  _OWORD *v63;
  char *v64;
  unint64_t v65;
  __int128 v66;
  unsigned __int16 v67;
  _QWORD *v68;
  uint64_t v69;
  float32x2_t *v70;
  float32x2_t *v71;
  uint64_t v72;
  uint64_t (**v73)();
  size_t v74;
  _QWORD *v75;
  size_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x2_t v85;
  float32x2_t v86;
  _QWORD *v87;
  uint64_t v91;
  unint64_t v92;
  unint64_t **v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  BOOL v105;
  _QWORD *v106;
  size_t v107;
  _QWORD *v108;
  unint64_t v109;
  unint64_t **v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  unint64_t *v116;
  unint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  float v126;
  float v127;
  const char *v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  void **v140;
  int v141;
  int v142;
  unint64_t v143;
  _DWORD *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  float v150;
  float v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  int v163;
  _QWORD *v164;
  void **v165;
  int v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  unsigned __int8 *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  _QWORD *v177;
  __int128 v178;
  _QWORD *v179;
  unint64_t v180;
  _QWORD *v181;
  void *v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  unint64_t v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  void *v193;
  __int128 v194;
  unint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  float32x2_t v203;
  int8x16_t v204;
  float32x2_t v205;
  float v206;
  float v207;
  int8x16_t v208;
  float32x2_t v209;
  float v210;
  BOOL v211;
  float32x2_t v212;
  float v213;
  unint64_t *v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v222;
  _QWORD *v223;
  int v224;
  unsigned __int8 v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  float v229;
  uint64_t v230;
  uint64_t v231;
  size_t v232;
  const char *v233;
  unsigned __int8 v234;
  unsigned __int8 v235;
  const char *v236;
  size_t v237;
  const char *v238;
  _BYTE *v239;
  size_t v240;
  uint64_t v241;
  uint64_t v242;
  __int128 *v243;
  NSObject *v244;
  unint64_t v245;
  uint64_t v246;
  size_t v247;
  uint64_t v248;
  size_t v249;
  std::__shared_weak_count_vtbl *v250;
  std::__shared_weak_count *v251;
  std::__shared_weak_count *v252;
  unint64_t *p_shared_owners;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  void *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  void *v281;
  float v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  _QWORD *v286;
  _BYTE *v287;
  _BYTE *v288;
  int64_t v289;
  uint64_t v290;
  _QWORD *v291;
  _BYTE *v292;
  _BYTE *v293;
  int64_t v294;
  uint64_t v295;
  _QWORD *v296;
  _BYTE *v297;
  _BYTE *v298;
  int64_t v299;
  unint64_t v300;
  char *v301;
  _QWORD *v302;
  const void *v303;
  int64_t v304;
  char *v305;
  char *v306;
  const void *v307;
  int64_t v308;
  char *v309;
  char *v310;
  int64_t v311;
  char *v312;
  char *v313;
  unint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  _WORD *v317;
  _WORD *v318;
  uint64_t v319;
  _QWORD *v320;
  unint64_t v321;
  uint8x8_t v322;
  void **v323;
  _QWORD *v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _BOOL8 v328;
  unint64_t v329;
  unint64_t v330;
  size_t prime;
  void *v332;
  void *v333;
  uint64_t v334;
  _QWORD **v335;
  size_t v336;
  size_t v337;
  size_t v338;
  _QWORD *i;
  size_t v340;
  uint64_t v341;
  unint64_t v342;
  uint8x8_t v343;
  uint64_t v344;
  _QWORD *v345;
  void *v346;
  uint64_t v347;
  size_t v348;
  uint64_t *v349;
  float *v350;
  float *v351;
  float *v352;
  float *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  _BYTE *v358;
  _WORD *v359;
  int64_t v360;
  unint64_t v361;
  float *v362;
  __int16 v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  int8x16_t *v367;
  int8x16_t *v368;
  unint64_t v369;
  _QWORD *v370;
  _QWORD *v371;
  void *v372;
  char *v373;
  char *v374;
  void *v375;
  char *v376;
  void *v377;
  void *v378;
  float *v379;
  unint64_t v380;
  uint64_t v381;
  unsigned __int16 v382;
  BOOL v383;
  _QWORD *v384;
  unint64_t v385;
  char *v386;
  char *v387;
  unint64_t v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  uint64_t v393;
  uint64_t v394;
  _QWORD *v395;
  int8x16_t *v396;
  int8x16_t *v397;
  unint64_t v398;
  char *v399;
  _QWORD *v400;
  char *v401;
  unint64_t v402;
  _QWORD *v403;
  _WORD *v404;
  _QWORD *v405;
  unint64_t v406;
  _QWORD *v407;
  unint64_t v408;
  int8x16_t **v409;
  _QWORD *v410;
  _QWORD *v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  char *v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  __int16 v419;
  unint64_t v420;
  void *v421;
  _WORD *v422;
  int64_t v423;
  unint64_t v424;
  char *v425;
  int8x16_t *v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  int8x16_t *v430;
  int8x16_t *v431;
  uint64_t v432;
  int8x16_t v433;
  int v434;
  _QWORD *v435;
  unint64_t v436;
  void **v437;
  int8x16_t *v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  _QWORD *v443;
  int8x16_t *v444;
  _QWORD *v445;
  unint64_t v446;
  char *v447;
  _QWORD *v448;
  uint64_t v449;
  char *v450;
  unint64_t v451;
  unint64_t v452;
  char *v453;
  uint64_t v454;
  unint64_t v455;
  char *i8;
  int8x16_t *v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  int8x16_t *v464;
  _QWORD *v465;
  _QWORD *v466;
  void *v467;
  _QWORD *v468;
  _QWORD *v469;
  void *v470;
  _QWORD *v471;
  _QWORD *v472;
  void *v473;
  unint64_t v474;
  char *v475;
  uint64_t *v476;
  uint64_t *v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  unint64_t v481;
  unint64_t v482;
  char *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  void *v487;
  void *v488;
  uint64_t *v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  void *v494;
  uint64_t v495;
  void *v496;
  void *v497;
  uint64_t *v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t j;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t v508;
  unsigned int v509;
  unint64_t v510;
  uint64_t v511;
  char *v512;
  unint64_t v513;
  unsigned __int16 **v514;
  unsigned __int16 *v515;
  _QWORD *v516;
  unint64_t v517;
  unint64_t v518;
  uint64_t *v519;
  unint64_t v520;
  uint64_t v521;
  _QWORD *v522;
  unint64_t v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  char *v530;
  char *v531;
  char *v532;
  uint64_t v533;
  char *v534;
  char *v535;
  _QWORD *v536;
  char *v537;
  __int128 v538;
  _QWORD *v539;
  _QWORD *v540;
  void *v541;
  void *v542;
  _QWORD *v543;
  uint64_t v544;
  _QWORD *v545;
  _QWORD *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  unint64_t v550;
  _QWORD *v551;
  _QWORD *v552;
  _QWORD *v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  unint64_t v557;
  char *v558;
  char *v559;
  uint64_t v560;
  uint64_t *v561;
  unint64_t v562;
  _QWORD *v563;
  _QWORD *v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  unint64_t v568;
  char *v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  _OWORD *v578;
  int32x4_t v579;
  uint64_t v580;
  unsigned int v581;
  unint64_t v582;
  uint64_t v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  char *v588;
  __n128 v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  size_t v596;
  size_t v597;
  unsigned int *v598;
  unsigned int v599;
  uint64_t *v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  unsigned int *v604;
  unsigned int v605;
  unsigned int v606;
  unsigned int *v607;
  unsigned int v608;
  unsigned int v609;
  uint64_t v610;
  char *v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  _QWORD *v619;
  char *v620;
  char *v621;
  unint64_t v622;
  unint64_t v623;
  unint64_t v624;
  uint64_t *v625;
  char *v626;
  char *v627;
  uint64_t v628;
  __n128 v629;
  char *v630;
  __n128 *v631;
  __int128 v632;
  uint64_t v633;
  size_t v634;
  unsigned int *v635;
  unsigned int v636;
  unsigned int v637;
  unsigned int *v638;
  unsigned int v639;
  unsigned int v640;
  unint64_t v641;
  char *v642;
  char *v643;
  uint64_t v644;
  size_t v645;
  char *v646;
  char *v647;
  uint64_t v648;
  unsigned __int16 v649;
  uint64_t v650;
  char *v651;
  uint64_t *v652;
  char *v653;
  unint64_t v654;
  _QWORD *v655;
  char *v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  _QWORD *v663;
  char *v664;
  char *v665;
  uint64_t v666;
  _BYTE *v667;
  unsigned __int16 *v668;
  int64_t v669;
  unint64_t v670;
  uint64_t v671;
  unint64_t v672;
  char *v673;
  _OWORD *v674;
  char *v675;
  unint64_t v676;
  __int128 v677;
  unsigned __int16 v678;
  uint64_t v679;
  unsigned __int16 **v680;
  void *v681;
  unsigned __int16 **v682;
  unsigned __int16 *v683;
  unsigned __int16 *v684;
  uint64_t v685;
  uint64_t v686;
  _OWORD *v687;
  float32x4_t v688;
  int8x16_t v689;
  float32x4_t v690;
  float32x4_t v691;
  int8x16_t v692;
  float32x4_t v693;
  float32x2_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  int v698;
  unsigned __int16 *v699;
  unsigned int v700;
  uint64_t v701;
  uint64_t v702;
  __int128 v703;
  uint64_t v704;
  size_t v705;
  int *ii;
  _OWORD *v707;
  unint64_t v708;
  unint64_t v709;
  unint64_t v710;
  _QWORD *v711;
  char *v712;
  __int128 v713;
  uint64_t v714;
  _BYTE *v715;
  uint64_t v716;
  size_t v717;
  int *jj;
  char *v719;
  _OWORD *v720;
  uint64_t v721;
  unint64_t v722;
  char *v723;
  _OWORD *v724;
  __int128 v725;
  uint64_t v726;
  char *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  _OWORD *v732;
  char *v733;
  _QWORD *v734;
  _QWORD *v735;
  void *v736;
  int8x8_t v737;
  BOOL v738;
  BOOL v739;
  unint64_t v740;
  uint8x8_t v741;
  uint64_t v742;
  unint64_t v743;
  uint8x8_t v744;
  uint64_t v745;
  _QWORD *v746;
  uint64_t v747;
  uint64_t v748;
  float v749;
  float v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int8x16_t v756;
  int8x16_t v757;
  float *v758;
  float v759;
  uint64_t v761;
  uint64_t v762;
  unint64_t *v763;
  uint64_t v764;
  int v765;
  unint64_t v766;
  float v767;
  unint64_t *v768;
  char *v769;
  char *v770;
  _QWORD *v771;
  _QWORD *v772;
  void *v773;
  unint64_t v774;
  unsigned int v775;
  unsigned __int8 v776;
  uint64_t v777;
  uint64_t k;
  unsigned __int8 v779;
  unsigned __int8 v780;
  uint64_t v781;
  uint64_t m;
  unsigned __int8 v783;
  int64_t v784;
  int32x4_t *v785;
  int32x4_t *v786;
  uint64_t v787;
  int32x4_t *v788;
  unint64_t v789;
  int32x4_t *v790;
  uint64_t v791;
  int32x4_t v792;
  unint64_t v793;
  uint64_t v794;
  unsigned __int8 v795;
  uint64_t v796;
  uint64_t n;
  unsigned __int8 v798;
  char *v799;
  char *v800;
  __int32 v801;
  _QWORD *v802;
  uint64_t v803;
  char *v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  unint64_t v808;
  unint64_t v809;
  unint64_t v810;
  unint64_t v811;
  unint64_t v812;
  unsigned int v813;
  unsigned int v814;
  int v815;
  unint64_t v816;
  std::__shared_weak_count *v817;
  unint64_t *v818;
  unint64_t v819;
  float *v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  unint64_t v824;
  uint64_t v825;
  uint64_t v826;
  int8x16_t v827;
  float32x2_t v828;
  float32x2_t v829;
  float32x2_t v830;
  double v831;
  unint64_t v832;
  float v833;
  float v834;
  unint64_t *v835;
  uint64_t v836;
  unint64_t v837;
  unint64_t v838;
  uint64_t v839;
  int8x16_t v840;
  int8x16_t v841;
  float32x2_t v842;
  float v843;
  float32x2_t v844;
  uint64_t v846;
  int8x16_t v847;
  float32x2_t v848;
  float32x2_t v849;
  int v850;
  unint64_t *v851;
  char *v852;
  char *v853;
  uint64_t v854;
  char *v855;
  unint64_t *v856;
  unint64_t v857;
  uint64_t v858;
  int8x16_t v859;
  int8x16_t v860;
  float32x2_t v861;
  float32x2_t v862;
  float32x2_t v863;
  float v864;
  float32x2_t v865;
  uint64_t v867;
  float32x2_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  unint64_t v872;
  unint64_t v873;
  _BYTE *v874;
  char *v875;
  int64_t v876;
  unint64_t v877;
  char *v878;
  uint64_t v879;
  char *v880;
  unint64_t v881;
  uint64_t v882;
  uint64_t v883;
  int8x16_t *v884;
  int8x16_t *v885;
  uint64_t v886;
  int8x16_t v887;
  unint64_t *v888;
  float32x4_t v889;
  uint64_t v890;
  uint64_t v891;
  float v892;
  float v893;
  uint64_t v894;
  float v895;
  unint64_t *v896;
  unint64_t *v897;
  uint64_t v898;
  unint64_t v899;
  float32x4_t v900;
  unint64_t *v901;
  unint64_t v902;
  uint64_t v903;
  unint64_t v904;
  float32x4_t v905;
  __int32 v906;
  __int32 v907;
  unint64_t *v908;
  float32x4_t v909;
  float32x4_t v910;
  __int32 v911;
  __int32 v912;
  uint64_t v913;
  int8x16_t v914;
  float32x4_t v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  float32x4_t v920;
  int v921;
  int8x16_t v922;
  float32x4_t v923;
  char v924;
  void *v925;
  void *v926;
  char *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  unint64_t v932;
  unint64_t v933;
  char *v934;
  char *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  void *v939;
  _QWORD *v940;
  _QWORD *v941;
  void *v942;
  float32x4_t v943;
  uint64_t v944;
  int v945;
  unsigned __int8 v946;
  unsigned __int8 v947;
  float v948;
  float32x4_t v949;
  int32x4_t v950;
  int8x16_t v951;
  int v952;
  int v953;
  void *v954;
  char *v955;
  _BYTE *v956;
  _BYTE *v957;
  int64_t v958;
  char *v959;
  size_t v960;
  char *v961;
  _BYTE *v962;
  _BYTE *v963;
  int64_t v964;
  char *v965;
  uint64_t v966;
  uint64_t v967;
  void *v968;
  uint64_t v969;
  uint64_t *v970;
  uint64_t *v971;
  void *v972;
  char *v973;
  void *v974;
  void *v975;
  _QWORD *v976;
  void *v977;
  uint64_t v978;
  _QWORD *result;
  uint64_t v980;
  _QWORD *v981;
  void *v982;
  unint64_t *v983;
  unint64_t *v984;
  unint64_t *v985;
  float32x2_t __dst;
  float32x4_t v987;
  char *v988;
  _QWORD *v989;
  void **v990;
  uint64_t v991;
  int32x4_t v992;
  uint64_t v993;
  _QWORD *v994;
  int v995;
  unint64_t v996;
  _QWORD *v997;
  float32x2_t *v998;
  _QWORD *v1000;
  char *v1001;
  unint64_t v1002;
  float v1003;
  unint64_t v1004;
  __int16 v1005;
  __int16 v1006;
  unint64_t v1007;
  _QWORD *v1008;
  int v1009;
  float32x4_t v1010;
  char *v1011;
  unsigned __int16 **v1012;
  _QWORD *v1013;
  unint64_t *v1014;
  _QWORD *v1015;
  char *v1016;
  unint64_t *v1017;
  uint64_t v1018;
  uint64_t v1019;
  float32x2_t v1020;
  char *v1021;
  uint64_t v1022;
  float32x2_t v1023;
  float32x4_t v1024;
  unsigned int *v1025;
  int8x16_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  float32x4_t v1029;
  unint64_t v1030;
  _OWORD *v1031;
  char *v1033;
  int v1034;
  unint64_t **v1035;
  char *v1036;
  int8x8_t v1037;
  uint64_t v1038;
  float32x4_t v1039;
  float32x4_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  char *v1043;
  unint64_t v1044;
  uint64_t v1045;
  char *v1046;
  unsigned __int16 *v1047;
  unint64_t v1048;
  float32x4_t v1049;
  unint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  unint64_t v1054;
  unsigned __int16 *v1055;
  uint64_t v1056;
  char *v1057;
  unint64_t v1058;
  _QWORD *v1059;
  char *v1060;
  char *v1061;
  char *v1062;
  unsigned __int16 v1063;
  char *v1064;
  unint64_t *v1065;
  unint64_t *v1066;
  void *v1067;
  void *v1068;
  char *v1069;
  void *v1070;
  char *v1071;
  char *v1072;
  _QWORD *v1073;
  __int128 v1074;
  unint64_t v1075;
  size_t __sz[2];
  int64_t v1077;
  void *v1078;
  uint64_t v1079;
  void *v1080;
  uint64_t v1081;
  __int32 v1082;
  uint64_t v1083;
  char v1084;
  void *v1085;
  __int128 v1086;
  _QWORD *v1087;
  char *v1088;
  _QWORD *v1089;
  __int128 v1090;
  __int128 v1091;
  int v1092;
  unint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  __int128 v1096;
  __int128 v1097;
  const char *v1098;
  __int128 v1099;
  __int128 v1100;
  int v1101;
  _QWORD v1102[4];
  void *v1103;
  __int128 v1104;
  void *__p;
  float *v1106;
  __int8 *v1107;
  char v1108;
  _BYTE object[40];
  __int128 v1110;
  __int128 v1111;
  int v1112;
  uint64_t v1113;
  __int128 v1114;
  uint64_t v1115;
  char v1116;
  _BYTE v1117[56];
  __int128 v1118;
  int v1119;
  int v1120;
  _BYTE v1121[24];
  uint64_t v1122;
  char v1123;
  _BYTE v1124[24];
  _BYTE *v1125;
  uint64_t v1126;

  v1126 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223F43A40(v1117);
  v1031 = a4;
  if (**(int **)(*(_QWORD *)v1117 + 56) <= 1)
  {
    v5 = atomic_load((unsigned __int8 *)&qword_2540CE028);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE028))
    {
      qword_2540CE020 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SplitAndDensify");
      __cxa_guard_release(&qword_2540CE028);
    }
    v6 = qword_2540CE020;
    *(_BYTE *)(qword_2540CE020 + 16) = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v6 = std::chrono::steady_clock::now();
    *(_BYTE *)(v6 + 16) = 1;
  }
  v1095 = 0;
  v1094 = 0;
  v1093 = 0;
  v7 = operator new(0x28uLL);
  *v7 = &off_24EC64230;
  v7[1] = &v1095;
  v7[2] = &v1094;
  v7[3] = &v1093;
  v1125 = v7;
  v9 = *a2;
  if (*a2 == a2[1])
  {
    a4[4] = 0u;
    a4[5] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    *a4 = 0u;
    a4[1] = 0u;
    v73 = &off_24EC64230;
    goto LABEL_1278;
  }
  v10 = 0;
  v1063 = 0;
  v1041 = *((_QWORD *)a1 + 1);
  v1090 = 0u;
  v1091 = 0u;
  v1092 = 1065353216;
  do
  {
    v1058 = v10;
    v13 = v9 + 80 * v10;
    v15 = *(unint64_t **)(v13 + 32);
    v14 = *(unint64_t **)(v13 + 40);
    while (v15 != v14)
    {
      v17 = *v15;
      *(_QWORD *)v1117 = v17;
      if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 272) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
      {
        v18 = sub_223F43D64((uint64_t)&v1090, v17, v1117);
        v20 = (char *)v18[4];
        v19 = v18[5];
        if ((unint64_t)v20 >= v19)
        {
          v21 = (char *)v18[3];
          v22 = v20 - v21;
          if (v20 - v21 <= -3)
            sub_223257BE4();
          v23 = v22 >> 1;
          v24 = v19 - (_QWORD)v21;
          if (v24 <= (v22 >> 1) + 1)
            v25 = v23 + 1;
          else
            v25 = v24;
          if (v24 >= 0x7FFFFFFFFFFFFFFELL)
            v26 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
          {
            if (v26 < 0)
              sub_223174E94();
            v27 = operator new(2 * v26);
            v28 = (unsigned __int16 *)&v27[2 * v23];
            *v28 = v1063;
            v16 = (uint64_t)(v28 + 1);
            v29 = v20 - v21;
            if (v20 == v21)
            {
LABEL_32:
              v18[3] = v28;
              v18[4] = v16;
              v18[5] = &v27[2 * v26];
              if (v21)
                operator delete(v21);
              goto LABEL_9;
            }
          }
          else
          {
            v27 = 0;
            v28 = (unsigned __int16 *)(2 * v23);
            *(_WORD *)(2 * v23) = v1063;
            v16 = 2 * v23 + 2;
            v29 = v20 - v21;
            if (v20 == v21)
              goto LABEL_32;
          }
          v30 = v29 - 2;
          if (v30 < 0x1E)
            goto LABEL_1354;
          if (v20 - v27 - (v22 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_1354;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v20[-v32];
          v28 = (unsigned __int16 *)((char *)v28 - v32);
          v34 = &v27[2 * v23 - 16];
          v35 = v20 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v20 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_1354:
            do
            {
              v38 = *((_WORD *)v20 - 1);
              v20 -= 2;
              *--v28 = v38;
            }
            while (v20 != v21);
          }
          goto LABEL_32;
        }
        *(_WORD *)v20 = v1063;
        v16 = (uint64_t)(v20 + 2);
LABEL_9:
        v18[4] = v16;
      }
      ++v15;
    }
    v39 = v9 + 80 * v1058;
    v41 = *(_QWORD **)(v39 + 56);
    v40 = *(_QWORD **)(v39 + 64);
    v1059 = v40;
    while (v41 != v40)
    {
      v42 = (unint64_t *)(*(_QWORD *)(v1041 + 224) + 16 * *v41);
      v44 = *v42;
      v43 = v42[1];
      v45 = v43 + v44;
      if (v44 < v43 + v44)
      {
        while (1)
        {
          *(_QWORD *)v1117 = v44;
          if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 272) + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
            goto LABEL_41;
          v47 = sub_223F43D64((uint64_t)&v1090, v44, v1117);
          v49 = (char *)v47[4];
          v48 = v47[5];
          if ((unint64_t)v49 >= v48)
            break;
          *(_WORD *)v49 = v1063;
          v46 = (uint64_t)(v49 + 2);
LABEL_40:
          v47[4] = v46;
LABEL_41:
          if (++v44 == v45)
            goto LABEL_35;
        }
        v50 = (char *)v47[3];
        v51 = v49 - v50;
        if (v49 - v50 <= -3)
          sub_223257BE4();
        v52 = v51 >> 1;
        v53 = v48 - (_QWORD)v50;
        if (v53 <= (v51 >> 1) + 1)
          v54 = v52 + 1;
        else
          v54 = v53;
        if (v53 >= 0x7FFFFFFFFFFFFFFELL)
          v55 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v55 = v54;
        if (v55)
        {
          if (v55 < 0)
            sub_223174E94();
          v56 = operator new(2 * v55);
          v57 = (unsigned __int16 *)&v56[2 * v52];
          *v57 = v1063;
          v46 = (uint64_t)(v57 + 1);
          v58 = v49 - v50;
          if (v49 == v50)
            goto LABEL_62;
LABEL_56:
          v59 = v58 - 2;
          if (v59 < 0x1E)
            goto LABEL_1355;
          if (v49 - v56 - (v51 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_1355;
          v60 = (v59 >> 1) + 1;
          v61 = 2 * (v60 & 0xFFFFFFFFFFFFFFF0);
          v62 = &v49[-v61];
          v57 = (unsigned __int16 *)((char *)v57 - v61);
          v63 = &v56[2 * v52 - 16];
          v64 = v49 - 16;
          v65 = v60 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v66 = *(_OWORD *)v64;
            *(v63 - 1) = *((_OWORD *)v64 - 1);
            *v63 = v66;
            v63 -= 2;
            v64 -= 32;
            v65 -= 16;
          }
          while (v65);
          v49 = v62;
          if (v60 != (v60 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_1355:
            do
            {
              v67 = *((_WORD *)v49 - 1);
              v49 -= 2;
              *--v57 = v67;
            }
            while (v49 != v50);
          }
        }
        else
        {
          v56 = 0;
          v57 = (unsigned __int16 *)(2 * v52);
          *(_WORD *)(2 * v52) = v1063;
          v46 = 2 * v52 + 2;
          v58 = v49 - v50;
          if (v49 != v50)
            goto LABEL_56;
        }
LABEL_62:
        v47[3] = v57;
        v47[4] = v46;
        v47[5] = &v56[2 * v55];
        if (v50)
          operator delete(v50);
        goto LABEL_40;
      }
LABEL_35:
      ++v41;
      v40 = v1059;
    }
    v10 = ++v1063;
    v9 = *a2;
    v11 = a2[1];
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - *a2) >> 4);
  }
  while (v12 > v1063);
  v68 = (_QWORD *)*((_QWORD *)a1 + 1);
  v989 = (_QWORD *)v68[37];
  if (*((_BYTE *)a3 + 40))
  {
    v69 = *a2;
    v70 = (float32x2_t *)v68[31];
    v71 = (float32x2_t *)v68[32];
    memset(v1117, 0, 24);
    v72 = (char *)v71 - (char *)v70;
    if (v71 == v70)
    {
      v1001 = 0;
      v9 = v69;
    }
    else
    {
      if (v72 < 0)
        sub_2236B43DC();
      *(_QWORD *)v1117 = operator new((char *)v71 - (char *)v70);
      *(_QWORD *)&v1117[8] = *(_QWORD *)v1117;
      *(_QWORD *)&v1117[16] = *(_QWORD *)v1117 + 8 * (v72 >> 3);
      *(_QWORD *)object = v1117;
      do
      {
        *(int32x2_t *)&v1096 = vcvt_s32_f32(*v70);
        sub_2236B43F0((void ***)object, &v1096);
        ++v70;
      }
      while (v70 != v71);
      v1001 = *(char **)v1117;
      v9 = *a2;
      v11 = a2[1];
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - *a2) >> 4);
    }
  }
  else
  {
    v1001 = 0;
  }
  v1088 = 0;
  v1087 = 0;
  v1089 = 0;
  *(_QWORD *)v1117 = &v1087;
  v1117[8] = 0;
  if (v11 == v9)
  {
    v77 = 0;
    v75 = 0;
    v1060 = 0;
    v1064 = 0;
  }
  else
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v74 = 24 * v12;
    v75 = operator new(24 * v12);
    v1087 = v75;
    v1089 = &v75[3 * v12];
    v76 = 24 * ((24 * v12 - 24) / 0x18) + 24;
    bzero(v75, v76);
    v77 = (_QWORD *)((char *)v75 + v76);
    v1088 = (char *)v75 + v76;
    v78 = (char *)operator new(v74);
    bzero(v78, v76);
    v1060 = v78;
    v1064 = &v78[v76];
  }
  v80 = v989[3];
  v79 = v989[4];
  v1085 = 0;
  v1086 = 0uLL;
  v81 = v79 - v80;
  v1013 = v68;
  if (!v81)
    goto LABEL_662;
  if (v81 < 0)
    sub_223323BA8();
  v82 = v81 >> 5;
  v1085 = operator new(24 * (v81 >> 5));
  *(_QWORD *)&v1086 = v1085;
  *((_QWORD *)&v1086 + 1) = (char *)v1085 + 24 * v82;
  v87 = (_QWORD *)v989[3];
  v1000 = (_QWORD *)v989[4];
  if (v87 == v1000)
    goto LABEL_662;
  v990 = &v1080;
  __asm { FMOV            V0.4S, #3.0 }
  v1024 = (float32x4_t)_Q0;
  while (2)
  {
    v1015 = v87;
    v1018 = 0;
    v91 = v87[2];
    v87[3] &= 0x1FuLL;
    v92 = **(_QWORD **)v91;
    v93 = *(unint64_t ***)(*(_QWORD *)(v91 + 32) + 16);
    v94 = **v93;
    v1030 = v92 >> 6;
    v1027 = 1 << v92;
    v1021 = &v1001[8 * v92];
    v95 = v92;
    v1044 = v92;
    while (2)
    {
      v96 = v95;
      v93 = (unint64_t **)v93[4][2];
      v97 = v1013[21];
      v98 = v97 + 12 * v96;
      v99 = v97 + 12 * v94;
      v1050 = **v93;
      v100 = v97 + 12 * v1050;
      _Q0.i64[0] = *(_QWORD *)v99;
      _Q0.i32[2] = *(_DWORD *)(v99 + 8);
      v83.i64[0] = *(_QWORD *)v98;
      v83.i32[2] = *(_DWORD *)(v98 + 8);
      v84.i64[0] = *(_QWORD *)v100;
      v84.i32[2] = *(_DWORD *)(v100 + 8);
      v101 = (int8x16_t)vsubq_f32((float32x4_t)_Q0, (float32x4_t)v83);
      v102 = (int8x16_t)vsubq_f32((float32x4_t)v84, (float32x4_t)v83);
      v103 = (float32x4_t)vextq_s8(vextq_s8(v101, v101, 0xCuLL), v101, 8uLL);
      v104 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), v102, 0xCuLL);
      _Q0 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), v101, 0xCuLL);
      v84 = (int8x16_t)vmlsq_f32(vmulq_f32(v103, v104), (float32x4_t)_Q0, (float32x4_t)vextq_s8(vextq_s8(v102, v102, 0xCuLL), v102, 8uLL));
      v83 = vextq_s8(v84, v84, 8uLL);
      *(float *)_Q0.i32 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v84.i8, 1), *(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8).f32[0])* 0.5;
      *(float *)v83.i32 = fabsf(*(float *)_Q0.i32);
      v105 = *(float *)_Q0.i32 != 0.0 && *(float *)v83.i32 > 0.000001;
      if (!v105)
        goto LABEL_84;
      v106 = (_QWORD *)v1086;
      if ((unint64_t)v1086 >= *((_QWORD *)&v1086 + 1))
      {
        v110 = v93;
        v111 = v1085;
        v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1086 - (_QWORD)v1085) >> 3);
        v113 = v112 + 1;
        if (v112 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_223323BA8();
        if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v1086 + 1) - (_QWORD)v1085) >> 3) > v113)
          v113 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v1086 + 1) - (_QWORD)v1085) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1086 + 1) - (_QWORD)v1085) >> 3) >= 0x555555555555555)
          v114 = 0xAAAAAAAAAAAAAAALL;
        else
          v114 = v113;
        if (v114)
        {
          if (v114 > 0xAAAAAAAAAAAAAAALL)
            sub_223174E94();
          v115 = (char *)operator new(24 * v114);
        }
        else
        {
          v115 = 0;
        }
        v116 = (unint64_t *)&v115[24 * v112];
        *v116 = v1044;
        v116[1] = v94;
        v116[2] = v1050;
        v117 = v116;
        if (v106 != v111)
        {
          do
          {
            _Q0 = *(int8x16_t *)(v106 - 3);
            *(v117 - 1) = *(v106 - 1);
            *(int8x16_t *)(v117 - 3) = _Q0;
            v117 -= 3;
            v106 -= 3;
          }
          while (v106 != v111);
          v106 = v1085;
        }
        v108 = v116 + 3;
        v1085 = v117;
        *(_QWORD *)&v1086 = v116 + 3;
        *((_QWORD *)&v1086 + 1) = &v115[24 * v114];
        if (v106)
          operator delete(v106);
        v107 = v1044;
        v93 = v110;
        v109 = v1050;
      }
      else
      {
        v107 = v1044;
        *(_QWORD *)v1086 = v1044;
        v106[1] = v94;
        v108 = v106 + 3;
        v109 = v1050;
        v106[2] = v1050;
      }
      *(_QWORD *)&v1086 = v108;
      __sz[0] = v107;
      __sz[1] = v94;
      v1077 = v109;
      LOBYTE(v1078) = 0;
      v1084 = 0;
      v1117[0] = 0;
      v1123 = 0;
      v118 = *((_QWORD *)a1 + 1);
      v1035 = v93;
      if (*((_BYTE *)a3 + 40))
      {
        v119 = *(_QWORD *)(v118 + 272);
        v120 = v1027 & *(_QWORD *)(v119 + 8 * v1030);
        LODWORD(v121) = v120 != 0;
        if (v120)
        {
          v122 = (1 << v94) & *(_QWORD *)(v119 + ((v94 >> 3) & 0x1FFFFFFFFFFFFFF8));
          LODWORD(v121) = v122 != 0;
          if (v122)
            v121 = (*(_QWORD *)(v119 + ((v1050 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v1050) & 1;
        }
        if (!(_DWORD)v121)
          goto LABEL_638;
        v123 = &v1001[8 * v94];
        v124 = &v1001[8 * v1050];
        v125 = (*((_DWORD *)v123 + 1) - *((_DWORD *)v1021 + 1)) * (*(_DWORD *)v1021 - *(_DWORD *)v124)
             + (*((_DWORD *)v1021 + 1) - *((_DWORD *)v124 + 1)) * (*(_DWORD *)v1021 - *(_DWORD *)v123);
        if (v125 < 0)
          v125 = -v125;
        v126 = (double)v125 * 0.5;
        v127 = fabsf(v126);
        if (v126 == 0.0 || v127 <= 0.000001)
          goto LABEL_638;
        v130 = *((_QWORD *)a3 + 3);
        v129 = (const char *)*((_QWORD *)a3 + 4);
        v1103 = *(void **)v1021;
        *(_QWORD *)&v1104 = *(_QWORD *)v123;
        *((_QWORD *)&v1104 + 1) = *(_QWORD *)v124;
        v1096 = *a3;
        *(_QWORD *)&v1097 = *((_QWORD *)a3 + 2);
        *((_QWORD *)&v1097 + 1) = v130;
        v1098 = v129;
        v1099 = 0u;
        v1100 = 0u;
        v1101 = 1065353216;
        memset(v1102, 0, sizeof(v1102));
        v131 = v130 + 1;
        if (v130 != -1)
        {
          if (v131 >> 61)
            sub_22367C394();
          v132 = (char *)operator new(8 * v131);
          v133 = &v132[8 * v131];
          v1102[1] = v132;
          v1102[3] = v133;
          bzero(v132, 8 * v130 + 8);
          v1102[2] = v133;
        }
        v1106 = 0;
        __p = 0;
        v1107 = 0;
        __p = operator new(0x30uLL);
        v1106 = (float *)__p;
        v1107 = (char *)__p + 48;
        LODWORD(v1070) = 0;
        LODWORD(v1067) = 0;
        sub_2236B5220(3, (uint64_t)&v1103, &v1070, &v1067, (char **)&__p);
        v134 = 126 - 2 * __clz(((char *)v1106 - (_BYTE *)__p) >> 4);
        if (v1106 == __p)
          v135 = 0;
        else
          v135 = v134;
        sub_223F441A4((float *)__p, v1106, v135, 1);
        v136 = (int)v1070;
        v137 = (int)v1067;
        if ((_DWORD)v1070 == (_DWORD)v1067)
        {
          v138 = (int)v1103;
          if ((int)v1104 >= (int)v1103)
            v139 = (int)v1103;
          else
            v139 = v1104;
          if ((int)v1104 >= (int)v1103)
            v140 = (void **)&v1104;
          else
            v140 = &v1103;
          v141 = DWORD2(v1104);
          if (SDWORD2(v1104) < v139)
          {
            v142 = HIDWORD(v1104);
            if ((HIDWORD(v1104) & 0x80000000) != 0)
              goto LABEL_199;
            goto LABEL_183;
          }
          if ((int)v1104 > (int)v1103)
            v138 = v1104;
          if ((int)v1104 >= (int)v1103)
            v165 = &v1103;
          else
            v165 = (void **)&v1104;
          if (SDWORD2(v1104) >= v138)
            v140 = (void **)&v1104 + 1;
          v141 = v139;
          v142 = *((_DWORD *)v165 + 1);
          if ((v142 & 0x80000000) == 0)
          {
LABEL_183:
            if (v142 < SHIDWORD(v1096))
            {
              v166 = *(_DWORD *)v140;
              v167 = v141 & ~(v141 >> 31);
              if (SDWORD2(v1096) <= 1)
                v168 = 1;
              else
                v168 = DWORD2(v1096);
              if (DWORD2(v1096) - 1 < v167)
                v167 = DWORD2(v1096) - 1;
              if (v168 >= v166 + 1)
                v169 = v166 + 1;
              else
                v169 = v168;
              v170 = (v169 - v167);
              if ((_DWORD)v170)
              {
                v171 = (unsigned __int8 *)(v1096 + (DWORD1(v1097) * v142 + v1097 * v167));
                v172 = BYTE8(v1097);
                v173 = -v170;
                do
                {
                  v175 = *v171++;
                  v174 = v175;
                  if (*((_QWORD *)&v1097 + 1) <= (unint64_t)v175)
                  {
                    v176 = 0;
                    v174 = v172;
                  }
                  else
                  {
                    v176 = v1098[16 * v174];
                  }
                  ++*(_QWORD *)(v1102[1] + 8 * v174);
                  LODWORD(v1073) = v176;
                  v177 = sub_223F44DEC((uint64_t)&v1099, v176, &v1073);
                  ++v177[3];
                  ++v1102[0];
                  _CF = __CFADD__(v173++, 1);
                }
                while (!_CF);
              }
            }
          }
        }
        else if ((_DWORD)v1070 != (_DWORD)v1067 + 1)
        {
          v143 = 0;
          v144 = __p;
          v145 = 1;
          do
          {
            if (v143 <= v145)
              v146 = v145;
            else
              v146 = v143;
            if (v144[4 * v143 + 1] == v136 && v136 < (int)v1067)
              v147 = v146 + 1;
            else
              v147 = v143;
            if (v147 <= v145)
              v148 = v145;
            else
              v148 = v147;
            if (v144[4 * v145 + 1] == v136 && v136 < (int)v1067)
              v149 = v148 + 1;
            else
              v149 = v145;
            v150 = *(float *)&v144[4 * v147 + 2];
            v151 = *(float *)&v144[4 * v149 + 2];
            if (v150 <= v151)
              v145 = v149;
            else
              v145 = v147;
            if (v150 <= v151)
              v143 = v147;
            else
              v143 = v149;
            if ((v136 & 0x80000000) == 0 && v136 < SHIDWORD(v1096))
            {
              v152 = llroundf(*(float *)&v144[4 * v145 + 2]);
              v153 = llroundf(*(float *)&v144[4 * v143 + 2]);
              v154 = v153 & ~(v153 >> 31);
              v155 = SDWORD2(v1096) <= 1 ? 1 : DWORD2(v1096);
              v156 = DWORD2(v1096) - 1 >= v154 ? v154 : DWORD2(v1096) - 1;
              v157 = v155 >= (int)(v152 + 1) ? v152 + 1 : v155;
              v158 = (v157 - v156);
              if (v157 != v156)
              {
                v159 = BYTE8(v1097);
                v160 = (unsigned __int8 *)(v1096 + (v156 * v1097 + DWORD1(v1097) * v136));
                do
                {
                  v162 = *v160++;
                  v161 = v162;
                  if (*((_QWORD *)&v1097 + 1) <= (unint64_t)v162)
                  {
                    v163 = 0;
                    v161 = v159;
                  }
                  else
                  {
                    v163 = v1098[16 * v161];
                  }
                  ++*(_QWORD *)(v1102[1] + 8 * v161);
                  LODWORD(v1073) = v163;
                  v164 = sub_223F44DEC((uint64_t)&v1099, v163, &v1073);
                  ++v164[3];
                  ++v1102[0];
                  --v158;
                }
                while (v158);
                v144 = __p;
              }
            }
            *(float *)&v144[4 * v143 + 2] = *(float *)&v144[4 * v143 + 3] + *(float *)&v144[4 * v143 + 2];
            *(float *)&v144[4 * v145 + 2] = *(float *)&v144[4 * v145 + 3] + *(float *)&v144[4 * v145 + 2];
            _ZF = v136++ == v137;
          }
          while (!_ZF);
        }
LABEL_199:
        if (__p)
        {
          v1106 = (float *)__p;
          operator delete(__p);
        }
        v83.i32[3] = HIDWORD(v1097);
        *(_OWORD *)object = v1096;
        *(_OWORD *)&object[16] = v1097;
        v178 = v1099;
        v179 = (_QWORD *)v1100;
        v1099 = 0uLL;
        *(_QWORD *)&object[32] = v1098;
        v1110 = v178;
        v1111 = v1100;
        v1112 = v1101;
        if (*((_QWORD *)&v1100 + 1))
        {
          v180 = *(_QWORD *)(v1100 + 8);
          if ((*((_QWORD *)&v178 + 1) & (*((_QWORD *)&v178 + 1) - 1)) != 0)
          {
            if (v180 >= *((_QWORD *)&v178 + 1))
              v180 %= *((_QWORD *)&v178 + 1);
          }
          else
          {
            v180 &= *((_QWORD *)&v178 + 1) - 1;
          }
          v179 = 0;
          *(_QWORD *)(v178 + 8 * v180) = &v1111;
          v1100 = 0uLL;
        }
        _Q0.i32[3] = HIDWORD(v1102[2]);
        v1114 = *(_OWORD *)&v1102[1];
        v1113 = v1102[0];
        v1115 = v1102[3];
        memset(&v1102[1], 0, 24);
        v1116 = 1;
        if (v179)
        {
          do
          {
            v181 = (_QWORD *)*v179;
            operator delete(v179);
            v179 = v181;
          }
          while (v181);
        }
        v182 = (void *)v1099;
        *(_QWORD *)&v1099 = 0;
        if (v182)
          operator delete(v182);
        if (v1123 == v1116)
        {
          if (!v1123)
            goto LABEL_254;
          v83.i32[3] = *(_DWORD *)&object[28];
          *(_OWORD *)v1117 = *(_OWORD *)object;
          *(_OWORD *)&v1117[16] = *(_OWORD *)&object[16];
          *(_QWORD *)&v1117[32] = *(_QWORD *)&object[32];
          if (*((_QWORD *)&v1118 + 1))
          {
            v183 = (_QWORD *)v1118;
            if ((_QWORD)v1118)
            {
              do
              {
                v184 = (_QWORD *)*v183;
                operator delete(v183);
                v183 = v184;
              }
              while (v184);
            }
            *(_QWORD *)&v1118 = 0;
            v185 = *(_QWORD *)&v1117[48];
            if (*(_QWORD *)&v1117[48])
            {
              v186 = 0;
              do
                *(_QWORD *)(*(_QWORD *)&v1117[40] + 8 * v186++) = 0;
              while (v185 != v186);
            }
            *((_QWORD *)&v1118 + 1) = 0;
          }
          v187 = v1110;
          *(_QWORD *)&v1110 = 0;
          v188 = *(void **)&v1117[40];
          *(_QWORD *)&v1117[40] = v187;
          if (v188)
            operator delete(v188);
          v189 = *((_QWORD *)&v1110 + 1);
          *((_QWORD *)&v1110 + 1) = 0;
          v1119 = v1112;
          *(_QWORD *)&v1117[48] = v189;
          v1118 = v1111;
          if (*((_QWORD *)&v1111 + 1))
          {
            v190 = *(_QWORD *)(v1111 + 8);
            if ((v189 & (v189 - 1)) != 0)
            {
              if (v190 >= v189)
                v190 %= v189;
            }
            else
            {
              v190 &= v189 - 1;
            }
            *(_QWORD *)(*(_QWORD *)&v1117[40] + 8 * v190) = &v1118;
            v1111 = 0uLL;
          }
          *(_QWORD *)v1121 = v1113;
          if (*(_QWORD *)&v1121[8])
          {
            *(_QWORD *)&v1121[16] = *(_QWORD *)&v1121[8];
            operator delete(*(void **)&v1121[8]);
          }
          _Q0.i32[3] = HIDWORD(v1114);
          *(_OWORD *)&v1121[8] = v1114;
          v1122 = v1115;
          v1115 = 0;
          v1114 = 0uLL;
          if (!v1116)
            goto LABEL_254;
        }
        else if (v1123)
        {
          if (*(_QWORD *)&v1121[8])
          {
            *(_QWORD *)&v1121[16] = *(_QWORD *)&v1121[8];
            operator delete(*(void **)&v1121[8]);
          }
          v191 = (_QWORD *)v1118;
          if ((_QWORD)v1118)
          {
            do
            {
              v192 = (_QWORD *)*v191;
              operator delete(v191);
              v191 = v192;
            }
            while (v192);
          }
          v193 = *(void **)&v1117[40];
          *(_QWORD *)&v1117[40] = 0;
          if (v193)
            operator delete(v193);
          v1123 = 0;
          if (!v1116)
            goto LABEL_254;
        }
        else
        {
          v83.i32[3] = *(_DWORD *)&object[28];
          *(_OWORD *)v1117 = *(_OWORD *)object;
          *(_OWORD *)&v1117[16] = *(_OWORD *)&object[16];
          v194 = v1110;
          v1110 = 0uLL;
          *(_QWORD *)&v1117[32] = *(_QWORD *)&object[32];
          *(_OWORD *)&v1117[40] = v194;
          v1118 = v1111;
          v1119 = v1112;
          if (*((_QWORD *)&v1111 + 1))
          {
            v195 = *(_QWORD *)(v1111 + 8);
            if ((*((_QWORD *)&v194 + 1) & (*((_QWORD *)&v194 + 1) - 1)) != 0)
            {
              if (v195 >= *((_QWORD *)&v194 + 1))
                v195 %= *((_QWORD *)&v194 + 1);
            }
            else
            {
              v195 &= *((_QWORD *)&v194 + 1) - 1;
            }
            *(_QWORD *)(v194 + 8 * v195) = &v1118;
            v1111 = 0uLL;
          }
          _Q0.i32[3] = HIDWORD(v1114);
          *(_OWORD *)&v1121[8] = v1114;
          *(_QWORD *)v1121 = v1113;
          v1122 = v1115;
          v1115 = 0;
          v1114 = 0uLL;
          v1123 = 1;
          if (!v1116)
            goto LABEL_254;
        }
        if ((_QWORD)v1114)
        {
          *((_QWORD *)&v1114 + 1) = v1114;
          operator delete((void *)v1114);
        }
        v196 = (_QWORD *)v1111;
        if ((_QWORD)v1111)
        {
          do
          {
            v197 = (_QWORD *)*v196;
            operator delete(v196);
            v196 = v197;
          }
          while (v197);
        }
        v198 = (void *)v1110;
        *(_QWORD *)&v1110 = 0;
        if (v198)
          operator delete(v198);
LABEL_254:
        v118 = *((_QWORD *)a1 + 1);
      }
      v199 = v1013[21];
      v200 = v199 + 12 * v1044;
      v201 = v199 + 12 * v94;
      v202 = v199 + 12 * v1050;
      _Q0.i64[0] = *(_QWORD *)v200;
      _Q0.i32[2] = *(_DWORD *)(v200 + 8);
      v83.i64[0] = *(_QWORD *)v201;
      v83.i32[2] = *(_DWORD *)(v201 + 8);
      v104.i64[0] = *(_QWORD *)v202;
      v104.i32[2] = *(_DWORD *)(v202 + 8);
      v203.i32[1] = v1024.i32[1];
      v204 = (int8x16_t)vdivq_f32(vaddq_f32(vaddq_f32((float32x4_t)_Q0, (float32x4_t)v83), v104), v1024);
      v203.i32[0] = *(_DWORD *)(v118 + 8);
      v85.i32[0] = *(_DWORD *)(v118 + 24);
      v86.i32[0] = *(_DWORD *)(v118 + 40);
      v205 = vmla_lane_f32(vmul_f32(v203, *(float32x2_t *)v204.i8), v85, *(float32x2_t *)v204.i8, 1);
      v84 = vextq_s8(v204, v204, 8uLL);
      *(float *)v84.i32 = fmaxf((float)((float)((float)(*(float *)(v118 + 56)+ vmla_f32(v205, *(float32x2_t *)v84.i8, v86).f32[0])+ -0.5)/ 3.0)+ 1.0, 1.0);
      v206 = *(float *)v84.i32 * 0.2;
      v105 = *(float *)v84.i32 <= 3.0;
      v84.i32[0] = 1058642330;
      if (v105)
        *(float *)v84.i32 = v206;
      v207 = *(float *)v84.i32 * *(float *)v84.i32;
      v208 = (int8x16_t)vsubq_f32((float32x4_t)v83, (float32x4_t)_Q0);
      v209 = (float32x2_t)vextq_s8(v208, v208, 8uLL).u64[0];
      v210 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v208.i8, *(float32x2_t *)v208.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v208.i8, 1), *(float32x2_t *)v208.i8, 1), v209, v209).f32[0];
      v83 = (int8x16_t)vsubq_f32(v104, (float32x4_t)v83);
      v85 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
      v86 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v83.i8, 1), v85, v85);
      _Q0 = (int8x16_t)vsubq_f32((float32x4_t)_Q0, v104);
      *(int32x2_t *)v83.i8 = vdup_lane_s32(*(int32x2_t *)_Q0.i8, 1);
      v211 = v210 <= v207 && v86.f32[0] <= v207;
      v212 = (float32x2_t)vextq_s8(_Q0, _Q0, 8uLL).u64[0];
      LODWORD(v213) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)_Q0.i8, *(float32x2_t *)_Q0.i8), *(float32x2_t *)v83.i8, *(float32x2_t *)_Q0.i8, 1), v212, v212).u32[0];
      if (v211 && v213 <= v207)
        goto LABEL_371;
      if (!v1123)
        goto LABEL_645;
      v215 = *(unint64_t **)&v1121[8];
      if (*(_QWORD *)&v1121[8] == *(_QWORD *)&v1121[16])
        goto LABEL_638;
      v216 = *(_QWORD *)&v1121[8] + 8;
      if (*(_QWORD *)&v1121[8] + 8 != *(_QWORD *)&v1121[16])
      {
        v217 = **(_QWORD **)&v1121[8];
        v218 = (unint64_t *)(*(_QWORD *)&v1121[8] + 8);
        do
        {
          v220 = *v218++;
          v219 = v220;
          _CF = v217 >= v220;
          if (v217 <= v220)
            v217 = v219;
          if (!_CF)
            v215 = (unint64_t *)v216;
          v216 = (uint64_t)v218;
        }
        while (v218 != *(unint64_t **)&v1121[16]);
      }
      if ((float)((float)*v215 / (float)*(unint64_t *)v1121) < 0.8)
        goto LABEL_638;
      v222 = (_QWORD *)v1118;
      if (!(_QWORD)v1118)
        goto LABEL_638;
      v223 = *(_QWORD **)v1118;
      if (*(_QWORD *)v1118)
      {
        do
        {
          if (v222[3] < v223[3])
            v222 = v223;
          v223 = (_QWORD *)*v223;
        }
        while (v223);
        if (!v222)
          goto LABEL_638;
      }
      v224 = *((_DWORD *)v222 + 4);
      if (!v224 || sub_223F47430(&v1117[40], *((_DWORD *)v222 + 4)) < 0.8)
        goto LABEL_638;
      v225 = atomic_load((unsigned __int8 *)&qword_2540CE048);
      if ((v225 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE048))
      {
        sub_22455F53C(&v1096);
        sub_223174DE4(object, "cv3d.acv.surfacedetection");
        sub_2232300E0((uint64_t **)&v1096, (uint64_t)object, &qword_2540CE040);
        if ((object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_guard_release(&qword_2540CE048);
      }
      v1073 = (_QWORD *)qword_2540CE040;
      if (**(int **)(qword_2540CE040 + 56) > 2)
        goto LABEL_371;
      v226 = *(unsigned __int8 *)(qword_2540CE040 + 72);
      v227 = sub_22322F254(qword_2540CE040, "OSLogSurrogateAppender", 1, 0);
      v228 = v227;
      if (!v226 && !v227)
        goto LABEL_371;
      *(_QWORD *)&v1096 = &v1073;
      *((std::chrono::steady_clock::time_point *)&v1096 + 1) = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v1097 = std::chrono::system_clock::now();
      DWORD2(v1097) = 2;
      v1098 = "unknown file";
      LODWORD(v1099) = 299;
      *((_QWORD *)&v1099 + 1) = "unknown function";
      v1100 = 0uLL;
      v229 = sub_223F47430(&v1117[40], v224);
      v1004 = v228;
      v230 = *(_QWORD *)v1096;
      v231 = *(_QWORD *)v1096 + 16;
      if (*(char *)(*(_QWORD *)v1096 + 39) < 0)
      {
        v233 = *(const char **)(v230 + 16);
        v232 = *(_QWORD *)(v230 + 24);
        v993 = *(_QWORD *)v1096;
        v235 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v235 & 1) != 0)
          goto LABEL_291;
      }
      else
      {
        v232 = *(unsigned __int8 *)(*(_QWORD *)v1096 + 39);
        v233 = (const char *)(*(_QWORD *)v1096 + 16);
        v993 = *(_QWORD *)v1096;
        v234 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v234 & 1) != 0)
          goto LABEL_291;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)&__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)&__p, &xmmword_255788F40);
        if (v1108 && SHIBYTE(v1107) < 0)
          operator delete(__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_291:
      if (byte_255788F57 >= 0)
        v236 = (const char *)&xmmword_255788F40;
      else
        v236 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v237 = byte_255788F57;
      else
        v237 = *((_QWORD *)&xmmword_255788F40 + 1);
      v238 = v236;
      *(_QWORD *)object = os_log_create(v236, v233);
      if (v237 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      v991 = v231;
      if (v237 >= 0x17)
      {
        v240 = v232;
        v241 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v237 | 7) != 0x17)
          v241 = v237 | 7;
        v242 = v241 + 1;
        v239 = operator new(v241 + 1);
        *(_QWORD *)&object[24] = v242 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v239;
        *(_QWORD *)&object[16] = v237;
        v232 = v240;
        goto LABEL_304;
      }
      object[31] = v237;
      v239 = &object[8];
      if (v237)
LABEL_304:
        memmove(v239, v238, v237);
      v239[v237] = 0;
      object[32] = 1;
      if (v232 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v232 >= 0x17)
      {
        v246 = (v232 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v232 | 7) != 0x17)
          v246 = v232 | 7;
        v247 = v232;
        v248 = v246 + 1;
        v243 = (__int128 *)operator new(v246 + 1);
        *(_QWORD *)&v1111 = v248 | 0x8000000000000000;
        *(_QWORD *)&v1110 = v243;
        *((_QWORD *)&v1110 + 1) = v247;
        v232 = v247;
      }
      else
      {
        BYTE7(v1111) = v232;
        v243 = &v1110;
        if (!v232)
        {
          LOBYTE(v1110) = 0;
          BYTE8(v1111) = 1;
          v244 = *(NSObject **)object;
          if ((SBYTE7(v1111) & 0x80000000) == 0)
            goto LABEL_309;
          goto LABEL_315;
        }
      }
      memmove(v243, v233, v232);
      *((_BYTE *)v243 + v232) = 0;
      BYTE8(v1111) = 1;
      v244 = *(NSObject **)object;
      if ((SBYTE7(v1111) & 0x80000000) == 0)
      {
LABEL_309:
        v245 = v1004;
        if (!object[32])
          goto LABEL_318;
        goto LABEL_316;
      }
LABEL_315:
      operator delete((void *)v1110);
      v245 = v1004;
      if (!object[32])
        goto LABEL_318;
LABEL_316:
      if ((object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
LABEL_318:
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (v245 && *(_QWORD *)(v245 + 24))
      {
        v249 = _os_log_pack_size();
        v250 = (std::__shared_weak_count_vtbl *)operator new(v249, (std::align_val_t)8uLL);
        v251 = (std::__shared_weak_count *)operator new();
        v252 = v251;
        v251->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v251->__shared_owners_;
        v251->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
        v251->__shared_weak_owners_ = 0;
        v251[1].__vftable = v250;
        *(_QWORD *)object = v250;
        *(_QWORD *)&object[8] = v250;
        *(_QWORD *)&object[16] = v251;
        do
          v254 = __ldxr(p_shared_owners);
        while (__stxr(v254 + 1, p_shared_owners));
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *(_QWORD *)&v1110 = 0;
        do
          v255 = __ldaxr(p_shared_owners);
        while (__stlxr(v255 - 1, p_shared_owners));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
          std::__shared_weak_count::__release_weak(v252);
        }
        v256 = *(_QWORD *)object;
        v257 = _os_log_pack_fill();
        *(_DWORD *)v257 = 67109376;
        *(_DWORD *)(v257 + 4) = v224;
        *(_WORD *)(v257 + 8) = 2048;
        *(double *)(v257 + 10) = v229;
        v258 = (char *)operator new();
        v259 = *(unsigned __int8 *)(v993 + 39);
        v260 = v991;
        if ((v259 & 0x80u) != 0)
        {
          v260 = *(_QWORD *)(v993 + 16);
          v259 = *(_QWORD *)(v993 + 24);
        }
        *(_QWORD *)v258 = v256;
        *(_OWORD *)(v258 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v258 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *((_QWORD *)v258 + 5) = v260;
        *((_QWORD *)v258 + 6) = v259;
        v258[56] = 2;
        v1103 = 0;
        __p = v258;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v245 + 24) + 40))(*(_QWORD *)(v245 + 24), &__p);
        v261 = __p;
        __p = 0;
        if (v261)
        {
          v262 = (std::__shared_weak_count *)*((_QWORD *)v261 + 4);
          if (v262)
          {
            v263 = (unint64_t *)&v262->__shared_owners_;
            do
              v264 = __ldaxr(v263);
            while (__stlxr(v264 - 1, v263));
            if (!v264)
            {
              ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
              std::__shared_weak_count::__release_weak(v262);
            }
          }
          v265 = (std::__shared_weak_count *)*((_QWORD *)v261 + 2);
          if (v265)
          {
            v266 = (unint64_t *)&v265->__shared_owners_;
            do
              v267 = __ldaxr(v266);
            while (__stlxr(v267 - 1, v266));
            if (!v267)
            {
              ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
              std::__shared_weak_count::__release_weak(v265);
            }
          }
          MEMORY[0x227684CE8](v261, 0x10F0C40B62ED6C6);
          v268 = v1103;
          v1103 = 0;
          if (v268)
          {
            v269 = (std::__shared_weak_count *)*((_QWORD *)v268 + 4);
            if (v269)
            {
              v270 = (unint64_t *)&v269->__shared_owners_;
              do
                v271 = __ldaxr(v270);
              while (__stlxr(v271 - 1, v270));
              if (!v271)
              {
                ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                std::__shared_weak_count::__release_weak(v269);
              }
            }
            v272 = (std::__shared_weak_count *)*((_QWORD *)v268 + 2);
            if (v272)
            {
              v273 = (unint64_t *)&v272->__shared_owners_;
              do
                v274 = __ldaxr(v273);
              while (__stlxr(v274 - 1, v273));
              if (!v274)
              {
                ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                std::__shared_weak_count::__release_weak(v272);
              }
            }
            MEMORY[0x227684CE8](v268, 0x10F0C40B62ED6C6);
          }
        }
        v275 = *(std::__shared_weak_count **)&object[32];
        if (*(_QWORD *)&object[32])
        {
          v276 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
          do
            v277 = __ldaxr(v276);
          while (__stlxr(v277 - 1, v276));
          if (!v277)
          {
            ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
            std::__shared_weak_count::__release_weak(v275);
          }
        }
        v278 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v279 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v280 = __ldaxr(v279);
          while (__stlxr(v280 - 1, v279));
          if (!v280)
          {
            ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
            std::__shared_weak_count::__release_weak(v278);
          }
        }
      }
      else
      {
        os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG);
        *(_DWORD *)object = 67109376;
        *(_DWORD *)&object[4] = v224;
        *(_WORD *)&object[8] = 2048;
        *(double *)&object[10] = v229;
        v281 = (void *)_os_log_send_and_compose_impl();
        if (v281)
          free(v281);
      }
      if (v226)
      {
        v282 = sub_223F47430(&v1117[40], v224);
        sub_22322C138((uint64_t)&v1096, "Triangle accepted due to semantic info: %d %f", v224, v282);
        sub_223182C08((uint64_t)&v1096);
      }
      sub_223182C08((uint64_t)&v1096);
      v283 = (std::__shared_weak_count *)*((_QWORD *)&v1100 + 1);
      if (*((_QWORD *)&v1100 + 1))
      {
        v284 = (unint64_t *)(*((_QWORD *)&v1100 + 1) + 8);
        do
          v285 = __ldaxr(v284);
        while (__stlxr(v285 - 1, v284));
        if (!v285)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
          if (!v1123)
            goto LABEL_375;
          goto LABEL_372;
        }
      }
LABEL_371:
      if (!v1123)
        goto LABEL_375;
LABEL_372:
      if (v1084)
      {
        v1082 = v1119;
        sub_223331410(&v1078, (uint64_t *)v1118, 0);
        v1083 = *(_QWORD *)v1121;
      }
      else
      {
        sub_223330C6C((uint64_t)&v1078, (uint64_t)&v1117[40]);
        v1083 = *(_QWORD *)v1121;
        v1084 = 1;
      }
LABEL_375:
      v1067 = (void *)v1044;
      v286 = sub_223F46FC4((uint64_t)&v1090, v1044, &v1067);
      memset(object, 0, 24);
      v288 = (_BYTE *)v286[3];
      v287 = (_BYTE *)v286[4];
      v289 = v287 - v288;
      if (v287 != v288)
      {
        if (v289 < 0)
          sub_223257BE4();
        *(_QWORD *)object = operator new(v287 - v288);
        *(_QWORD *)&object[8] = *(_QWORD *)object;
        v290 = *(_QWORD *)object + 2 * (v289 >> 1);
        *(_QWORD *)&object[16] = v290;
        memcpy(*(void **)object, v288, v289);
        *(_QWORD *)&object[8] = v290;
      }
      v1065 = (unint64_t *)v94;
      v291 = sub_223F46FC4((uint64_t)&v1090, v94, &v1065);
      *(_QWORD *)&object[24] = 0;
      *(_QWORD *)&object[32] = 0;
      *(_QWORD *)&v1110 = 0;
      v293 = (_BYTE *)v291[3];
      v292 = (_BYTE *)v291[4];
      v294 = v292 - v293;
      if (v292 != v293)
      {
        if (v294 < 0)
          sub_223257BE4();
        *(_QWORD *)&object[24] = operator new(v292 - v293);
        *(_QWORD *)&object[32] = *(_QWORD *)&object[24];
        v295 = *(_QWORD *)&object[24] + 2 * (v294 >> 1);
        *(_QWORD *)&v1110 = v295;
        memcpy(*(void **)&object[24], v293, v294);
        *(_QWORD *)&object[32] = v295;
      }
      v1075 = v1050;
      v296 = sub_223F46FC4((uint64_t)&v1090, v1050, &v1075);
      *((_QWORD *)&v1110 + 1) = 0;
      v1111 = 0uLL;
      v298 = (_BYTE *)v296[3];
      v297 = (_BYTE *)v296[4];
      v299 = v297 - v298;
      if (v297 == v298)
      {
        v301 = 0;
        v300 = 0;
      }
      else
      {
        if (v299 < 0)
          sub_223257BE4();
        v300 = (unint64_t)operator new(v297 - v298);
        *((_QWORD *)&v1110 + 1) = v300;
        *(_QWORD *)&v1111 = v300;
        v301 = (char *)(v300 + 2 * (v299 >> 1));
        *((_QWORD *)&v1111 + 1) = v301;
        memcpy((void *)v300, v298, v299);
        *(_QWORD *)&v1111 = v301;
      }
      v1104 = 0uLL;
      v1103 = 0;
      v302 = operator new(0x48uLL);
      v1103 = v302;
      *(_QWORD *)&v1104 = v302;
      *((_QWORD *)&v1104 + 1) = v302 + 9;
      v1073 = v302;
      v1070 = v302;
      *(_QWORD *)&v1096 = (char *)&v1104 + 8;
      *((_QWORD *)&v1096 + 1) = &v1070;
      *(_QWORD *)&v1097 = &v1073;
      v302[1] = 0;
      BYTE8(v1097) = 0;
      *v302 = 0;
      v302[2] = 0;
      v303 = *(const void **)object;
      v304 = *(_QWORD *)&object[8] - *(_QWORD *)object;
      if (*(_QWORD *)&object[8] != *(_QWORD *)object)
      {
        if (v304 < 0)
          goto LABEL_1331;
        v305 = (char *)operator new(*(_QWORD *)&object[8] - *(_QWORD *)object);
        *v302 = v305;
        v302[1] = v305;
        v306 = &v305[2 * (v304 >> 1)];
        v302[2] = v306;
        memcpy(v305, v303, v304);
        v302[1] = v306;
      }
      v302[3] = 0;
      v1073 = v302 + 3;
      v302[4] = 0;
      v302[5] = 0;
      v307 = *(const void **)&object[24];
      v308 = *(_QWORD *)&object[32] - *(_QWORD *)&object[24];
      if (*(_QWORD *)&object[32] != *(_QWORD *)&object[24])
      {
        if (v308 < 0)
          goto LABEL_1331;
        v309 = (char *)operator new(*(_QWORD *)&object[32] - *(_QWORD *)&object[24]);
        v302[3] = v309;
        v302[4] = v309;
        v310 = &v309[2 * (v308 >> 1)];
        v302[5] = v310;
        memcpy(v309, v307, v308);
        v302[4] = v310;
      }
      v302[6] = 0;
      v1073 = v302 + 6;
      v302[7] = 0;
      v302[8] = 0;
      v311 = (int64_t)&v301[-v300];
      if (v301 == (char *)v300)
        goto LABEL_394;
      if (v311 < 0)
LABEL_1331:
        sub_223257BE4();
      v312 = (char *)operator new((size_t)&v301[-v300]);
      v302[6] = v312;
      v313 = &v312[2 * (v311 >> 1)];
      v302[8] = v313;
      memcpy(v312, (const void *)v300, v311);
      v302[7] = v313;
LABEL_394:
      v314 = 0;
      v315 = 0;
      *(_QWORD *)&v1104 = v302 + 9;
      _Q0.i32[3] = 0;
      v1096 = 0u;
      v1097 = 0u;
      LODWORD(v1098) = 1065353216;
      v87 = v1015;
      do
      {
        v316 = &v302[3 * v315];
        v317 = (_WORD *)*v316;
        v318 = (_WORD *)v316[1];
        while (v317 != v318)
        {
          v321 = (unsigned __int16)*v317;
          if (v314)
          {
            v322 = (uint8x8_t)vcnt_s8((int8x8_t)v314);
            v322.i16[0] = vaddlv_u8(v322);
            if (v322.u32[0] > 1uLL)
            {
              v300 = (unsigned __int16)*v317;
              if (v314 <= v321)
                v300 = v321 % v314;
            }
            else
            {
              v300 = ((_DWORD)v314 - 1) & v321;
            }
            v323 = *(void ***)(v1096 + 8 * v300);
            if (v323)
            {
              v324 = *v323;
              if (*v323)
              {
                if (v322.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v326 = v324[1];
                    if (v326 == v321)
                    {
                      if (*((unsigned __int16 *)v324 + 8) == (_DWORD)v321)
                        goto LABEL_401;
                    }
                    else if ((v326 & (v314 - 1)) != v300)
                    {
                      goto LABEL_423;
                    }
                    v324 = (_QWORD *)*v324;
                    if (!v324)
                      goto LABEL_423;
                  }
                }
                do
                {
                  v325 = v324[1];
                  if (v325 == v321)
                  {
                    if (*((unsigned __int16 *)v324 + 8) == (_DWORD)v321)
                      goto LABEL_401;
                  }
                  else
                  {
                    if (v325 >= v314)
                      v325 %= v314;
                    if (v325 != v300)
                      break;
                  }
                  v324 = (_QWORD *)*v324;
                }
                while (v324);
              }
            }
          }
LABEL_423:
          v324 = operator new(0x18uLL);
          *v324 = 0;
          v324[1] = v321;
          *((_WORD *)v324 + 8) = *v317;
          *((_BYTE *)v324 + 18) = 0;
          *(float *)_Q0.i32 = (float)(unint64_t)(*((_QWORD *)&v1097 + 1) + 1);
          if (!v314 || (float)(*(float *)&v1098 * (float)v314) < *(float *)_Q0.i32)
          {
            v328 = (v314 & (v314 - 1)) != 0;
            if (v314 < 3)
              v328 = 1;
            v329 = v328 | (2 * v314);
            v330 = vcvtps_u32_f32(*(float *)_Q0.i32 / *(float *)&v1098);
            if (v329 <= v330)
              prime = v330;
            else
              prime = v329;
            if (prime == 1)
            {
              prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              prime = std::__next_prime(prime);
              v314 = *((_QWORD *)&v1096 + 1);
            }
            if (prime <= v314)
            {
              if (prime >= v314)
                goto LABEL_478;
              v342 = vcvtps_u32_f32((float)*((unint64_t *)&v1097 + 1) / *(float *)&v1098);
              if (v314 < 3
                || (v343 = (uint8x8_t)vcnt_s8((int8x8_t)v314), v343.i16[0] = vaddlv_u8(v343), v343.u32[0] > 1uLL))
              {
                v342 = std::__next_prime(v342);
              }
              else
              {
                v344 = 1 << -(char)__clz(v342 - 1);
                if (v342 >= 2)
                  v342 = v344;
              }
              if (prime <= v342)
                prime = v342;
              if (prime >= v314)
              {
                v314 = *((_QWORD *)&v1096 + 1);
                if ((*((_QWORD *)&v1096 + 1) & (*((_QWORD *)&v1096 + 1) - 1)) != 0)
                  goto LABEL_488;
              }
              else
              {
                if (prime)
                  goto LABEL_439;
                v346 = (void *)v1096;
                *(_QWORD *)&v1096 = 0;
                if (v346)
                  operator delete(v346);
                v314 = 0;
                *((_QWORD *)&v1096 + 1) = 0;
              }
LABEL_397:
              v300 = ((_DWORD)v314 - 1) & v321;
              v319 = v1096;
              v320 = *(_QWORD **)(v1096 + 8 * v300);
              if (v320)
                goto LABEL_398;
              goto LABEL_426;
            }
LABEL_439:
            if (prime >> 61)
              sub_223174E94();
            v332 = operator new(8 * prime);
            v333 = (void *)v1096;
            *(_QWORD *)&v1096 = v332;
            if (v333)
              operator delete(v333);
            v334 = 0;
            *((_QWORD *)&v1096 + 1) = prime;
            do
              *(_QWORD *)(v1096 + 8 * v334++) = 0;
            while (prime != v334);
            v335 = (_QWORD **)v1097;
            if (!(_QWORD)v1097)
            {
LABEL_487:
              v314 = prime;
              if ((prime & (prime - 1)) == 0)
                goto LABEL_397;
              goto LABEL_488;
            }
            v336 = *(_QWORD *)(v1097 + 8);
            v337 = prime - 1;
            if ((prime & (prime - 1)) == 0)
            {
              v338 = v336 & v337;
              *(_QWORD *)(v1096 + 8 * v338) = &v1097;
              for (i = *v335; *v335; i = *v335)
              {
                v340 = i[1] & v337;
                if (v340 == v338)
                {
                  v335 = (_QWORD **)i;
                }
                else if (*(_QWORD *)(v1096 + 8 * v340))
                {
                  *v335 = (_QWORD *)*i;
                  v341 = 8 * v340;
                  *i = **(_QWORD **)(v1096 + v341);
                  **(_QWORD **)(v1096 + v341) = i;
                }
                else
                {
                  *(_QWORD *)(v1096 + 8 * v340) = v335;
                  v335 = (_QWORD **)i;
                  v338 = v340;
                }
              }
              goto LABEL_487;
            }
            if (v336 < prime)
            {
              *(_QWORD *)(v1096 + 8 * v336) = &v1097;
              v345 = *v335;
              if (*v335)
                goto LABEL_482;
LABEL_477:
              v314 = prime;
LABEL_478:
              if ((v314 & (v314 - 1)) == 0)
                goto LABEL_397;
LABEL_488:
              if (v314 <= v321)
              {
                v300 = v321 % v314;
                v319 = v1096;
                v320 = *(_QWORD **)(v1096 + 8 * (v321 % v314));
                if (!v320)
                  goto LABEL_426;
              }
              else
              {
                v300 = v321;
                v319 = v1096;
                v320 = *(_QWORD **)(v1096 + 8 * v321);
                if (!v320)
                  goto LABEL_426;
              }
LABEL_398:
              *v324 = *v320;
              goto LABEL_399;
            }
            v336 %= prime;
            *(_QWORD *)(v1096 + 8 * v336) = &v1097;
            v345 = *v335;
            if (!*v335)
              goto LABEL_477;
            while (1)
            {
LABEL_482:
              v348 = v345[1];
              if (v348 >= prime)
                v348 %= prime;
              if (v348 == v336)
                goto LABEL_481;
              if (*(_QWORD *)(v1096 + 8 * v348))
                break;
              *(_QWORD *)(v1096 + 8 * v348) = v335;
              v335 = (_QWORD **)v345;
              v345 = (_QWORD *)*v345;
              v336 = v348;
              if (!v345)
                goto LABEL_487;
            }
            *v335 = (_QWORD *)*v345;
            v347 = 8 * v348;
            *v345 = **(_QWORD **)(v1096 + v347);
            **(_QWORD **)(v1096 + v347) = v345;
            v345 = v335;
LABEL_481:
            v335 = (_QWORD **)v345;
            v345 = (_QWORD *)*v345;
            if (!v345)
              goto LABEL_487;
            goto LABEL_482;
          }
          v319 = v1096;
          v320 = *(_QWORD **)(v1096 + 8 * v300);
          if (v320)
            goto LABEL_398;
LABEL_426:
          *v324 = v1097;
          *(_QWORD *)&v1097 = v324;
          *(_QWORD *)(v319 + 8 * v300) = &v1097;
          if (!*v324)
            goto LABEL_400;
          v327 = *(_QWORD *)(*v324 + 8);
          if ((v314 & (v314 - 1)) != 0)
          {
            if (v327 >= v314)
              v327 %= v314;
          }
          else
          {
            v327 &= v314 - 1;
          }
          v320 = (_QWORD *)(v1096 + 8 * v327);
LABEL_399:
          *v320 = v324;
LABEL_400:
          ++*((_QWORD *)&v1097 + 1);
LABEL_401:
          ++*((_BYTE *)v324 + 18);
          ++v317;
        }
        ++v315;
      }
      while (v315 != 3);
      v349 = (uint64_t *)v1097;
      v1107 = 0;
      __p = 0;
      v1106 = 0;
      if (!(_QWORD)v1097)
        goto LABEL_530;
      v350 = 0;
      v351 = 0;
      v352 = 0;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1104 - (_QWORD)v1103) >> 3) == *((unsigned __int8 *)v349 + 18))
        {
          if (v352 < v351)
          {
            *(_WORD *)v352 = *((_WORD *)v349 + 8);
            v353 = (float *)((char *)v352 + 2);
LABEL_496:
            v1106 = v353;
            v352 = v353;
            goto LABEL_497;
          }
          v354 = (char *)v352 - (char *)v350;
          if ((char *)v352 - (char *)v350 <= -3)
            sub_223257BE4();
          v355 = v354 >> 1;
          if ((char *)v351 - (char *)v350 <= (unint64_t)((v354 >> 1) + 1))
            v356 = v355 + 1;
          else
            v356 = (char *)v351 - (char *)v350;
          if ((unint64_t)((char *)v351 - (char *)v350) >= 0x7FFFFFFFFFFFFFFELL)
            v357 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v357 = v356;
          if (v357)
          {
            if (v357 < 0)
              sub_223174E94();
            v358 = operator new(2 * v357);
            v359 = &v358[2 * v355];
            *v359 = *((_WORD *)v349 + 8);
            v353 = (float *)(v359 + 1);
            v360 = (char *)v352 - (char *)v350;
            if (v352 == v350)
              goto LABEL_515;
          }
          else
          {
            v358 = 0;
            v359 = (_WORD *)(2 * v355);
            *(_WORD *)(2 * v355) = *((_WORD *)v349 + 8);
            v353 = (float *)(2 * v355 + 2);
            v360 = (char *)v352 - (char *)v350;
            if (v352 == v350)
              goto LABEL_515;
          }
          v361 = v360 - 2;
          if (v361 >= 0x5E)
          {
            v364 = ((char *)v352 - 2 - (char *)v350) & 0xFFFFFFFFFFFFFFFELL;
            if (&v358[(v354 & 0xFFFFFFFFFFFFFFFELL) - 2 - v364] > &v358[(v354 & 0xFFFFFFFFFFFFFFFELL) - 2])
            {
              v362 = v352;
            }
            else if ((char *)v352 - v364 - 2 > (char *)v352 - 2)
            {
              v362 = v352;
            }
            else if ((char *)v352 - v358 - (v354 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
            {
              v365 = (v361 >> 1) + 1;
              v366 = 2 * (v365 & 0xFFFFFFFFFFFFFFF0);
              v362 = (float *)((char *)v352 - v366);
              v359 = (_WORD *)((char *)v359 - v366);
              v367 = (int8x16_t *)&v358[2 * v355 - 16];
              v368 = (int8x16_t *)(v352 - 4);
              v369 = v365 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                v83 = v368[-1];
                _Q0 = *v368;
                v367[-1] = v83;
                *v367 = _Q0;
                v367 -= 2;
                v368 -= 2;
                v369 -= 16;
              }
              while (v369);
              if (v365 == (v365 & 0xFFFFFFFFFFFFFFF0))
                goto LABEL_515;
            }
            else
            {
              v362 = v352;
            }
          }
          else
          {
            v362 = v352;
          }
          do
          {
            v363 = *((_WORD *)v362 - 1);
            v362 = (float *)((char *)v362 - 2);
            *--v359 = v363;
          }
          while (v362 != v350);
LABEL_515:
          v351 = (float *)&v358[2 * v357];
          __p = v359;
          v1107 = (__int8 *)v351;
          if (v350)
            operator delete(v350);
          v350 = (float *)v359;
          goto LABEL_496;
        }
LABEL_497:
        v349 = (uint64_t *)*v349;
      }
      while (v349);
      v370 = (_QWORD *)v1097;
      if ((_QWORD)v1097)
      {
        do
        {
          v371 = (_QWORD *)*v370;
          operator delete(v370);
          v370 = v371;
        }
        while (v371);
      }
LABEL_530:
      v372 = (void *)v1096;
      *(_QWORD *)&v1096 = 0;
      if (v372)
        operator delete(v372);
      v373 = (char *)v1103;
      if (v1103)
      {
        v374 = (char *)v1104;
        v375 = v1103;
        if ((void *)v1104 != v1103)
        {
          v376 = (char *)v1104;
          do
          {
            v378 = (void *)*((_QWORD *)v376 - 3);
            v376 -= 24;
            v377 = v378;
            if (v378)
            {
              *((_QWORD *)v374 - 2) = v377;
              operator delete(v377);
            }
            v374 = v376;
          }
          while (v376 != v373);
          v375 = v1103;
        }
        *(_QWORD *)&v1104 = v373;
        operator delete(v375);
      }
      if (*((_QWORD *)&v1110 + 1))
      {
        *(_QWORD *)&v1111 = *((_QWORD *)&v1110 + 1);
        operator delete(*((void **)&v1110 + 1));
      }
      if (*(_QWORD *)&object[24])
      {
        *(_QWORD *)&object[32] = *(_QWORD *)&object[24];
        operator delete(*(void **)&object[24]);
      }
      if (*(_QWORD *)object)
      {
        *(_QWORD *)&object[8] = *(_QWORD *)object;
        operator delete(*(void **)object);
      }
      v379 = (float *)__p;
      if (__p == v1106)
        goto LABEL_636;
      v380 = 0;
      v381 = *(_QWORD *)(v1041 + 224);
      v382 = *(_WORD *)__p;
      while (2)
      {
        v384 = (_QWORD *)(*a2 + 80 * *(unsigned __int16 *)v379);
        v385 = (uint64_t)(v384[5] - v384[4]) >> 3;
        v386 = (char *)v384[7];
        v387 = (char *)v384[8];
        if (v386 != v387)
        {
          v388 = v387 - v386 - 8;
          if (v388 < 8)
          {
            v389 = v386;
            goto LABEL_559;
          }
          v390 = 0;
          v391 = (v388 >> 3) + 1;
          v389 = &v386[8 * (v391 & 0x3FFFFFFFFFFFFFFELL)];
          v392 = v386 + 8;
          v393 = v391 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v385 += *(_QWORD *)(v381 + 16 * *(v392 - 1) + 8);
            v390 += *(_QWORD *)(v381 + 16 * *v392 + 8);
            v392 += 2;
            v393 -= 2;
          }
          while (v393);
          v385 += v390;
          if (v391 != (v391 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_559:
              v394 = *(_QWORD *)v389;
              v389 += 8;
              v385 += *(_QWORD *)(v381 + 16 * v394 + 8);
            }
            while (v389 != v387);
          }
        }
        v383 = v380 >= v385;
        if (v380 <= v385)
          v380 = v385;
        if (!v383)
          v382 = *(_WORD *)v379;
        v379 = (float *)((char *)v379 + 2);
        if (v379 != v1106)
          continue;
        break;
      }
      v395 = v1087;
      v396 = (int8x16_t *)v1087[3 * v382];
      v397 = (int8x16_t *)v1087[3 * v382 + 1];
      v398 = 0xCCCCCCCCCCCCCCCDLL * (v397 - v396);
      if (!v1018 || v397 == v396)
      {
        v405 = &v1087[3 * v382];
        v408 = v405[2];
        v407 = v405 + 2;
        v406 = v408;
        v409 = (int8x16_t **)(v407 - 1);
        if ((unint64_t)v397 >= v408)
          goto LABEL_594;
      }
      else
      {
        v399 = &v1060[24 * v382];
        v400 = v399 + 8;
        v401 = (char *)*((_QWORD *)v399 + 1);
        v403 = v399 + 16;
        v402 = *((_QWORD *)v399 + 2);
        if ((unint64_t)v401 < v402)
        {
          *(_WORD *)v401 = v398;
          *((_WORD *)v401 + 1) = v398 - 1;
          v404 = v401 + 4;
          v87 = v1015;
          goto LABEL_593;
        }
        v994 = v399 + 8;
        v415 = *(char **)v399;
        v416 = (uint64_t)&v401[-*(_QWORD *)v399] >> 2;
        v417 = v416 + 1;
        if ((unint64_t)(v416 + 1) >> 62)
          sub_22316E078();
        v988 = &v401[-*(_QWORD *)v399];
        v1005 = v398;
        v418 = v402 - (_QWORD)v415;
        if (v418 >> 1 > v417)
          v417 = v418 >> 1;
        if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL)
          v417 = 0x3FFFFFFFFFFFFFFFLL;
        if (v417 >> 62)
          sub_223174E94();
        v419 = v398 - 1;
        v420 = v417;
        v421 = operator new(4 * v417);
        v422 = (char *)v421 + 4 * v416;
        LOWORD(v398) = v1005;
        *v422 = v1005;
        v422[1] = v419;
        v423 = v401 - v415;
        if (v401 == v415)
        {
          v425 = (char *)v421 + 4 * v416;
        }
        else
        {
          v424 = v423 - 4;
          if ((unint64_t)(v423 - 4) < 0x2C)
          {
            v425 = (char *)v421 + 4 * v416;
            goto LABEL_589;
          }
          v425 = (char *)v421 + 4 * v416;
          if ((unint64_t)(v401 - &v988[(_QWORD)v421]) < 0x20)
            goto LABEL_1356;
          v427 = (v424 >> 2) + 1;
          v428 = 4 * (v427 & 0x7FFFFFFFFFFFFFF8);
          v429 = &v401[-v428];
          v425 = (char *)&v422[v428 / 0xFFFFFFFFFFFFFFFELL];
          v430 = (int8x16_t *)((char *)v421 + 4 * v416 - 16);
          v431 = (int8x16_t *)(v401 - 16);
          v432 = v427 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v83 = v431[-1];
            v433 = *v431;
            v430[-1] = v83;
            *v430 = v433;
            v430 -= 2;
            v431 -= 2;
            v432 -= 8;
          }
          while (v432);
          v401 = v429;
          LOWORD(v398) = v1005;
          if (v427 != (v427 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_1356:
            do
            {
LABEL_589:
              v434 = *((_DWORD *)v401 - 1);
              v401 -= 4;
              *((_DWORD *)v425 - 1) = v434;
              v425 -= 4;
            }
            while (v401 != v415);
          }
        }
        *(_QWORD *)&v1060[24 * v382] = v425;
        v404 = v422 + 2;
        v400 = v994;
        *v994 = v422 + 2;
        *v403 = (char *)v421 + 4 * v420;
        if (v415)
        {
          operator delete(v415);
          LOWORD(v398) = v1005;
          v395 = v1087;
        }
        v87 = v1015;
LABEL_593:
        *v400 = v404;
        v397 = (int8x16_t *)v395[3 * v382 + 1];
        v435 = &v395[3 * v382];
        v436 = v435[2];
        v407 = v435 + 2;
        v406 = v436;
        v409 = (int8x16_t **)(v407 - 1);
        if ((unint64_t)v397 >= v436)
        {
LABEL_594:
          v437 = (void **)&v395[3 * v382];
          v438 = (int8x16_t *)*v437;
          v439 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v397 - (_BYTE *)*v437) >> 4);
          v440 = v439 + 1;
          if (v439 + 1 > 0x333333333333333)
            sub_223323BA8();
          v441 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v406 - (_QWORD)v438) >> 4);
          if (2 * v441 > v440)
            v440 = 2 * v441;
          if (v441 >= 0x199999999999999)
            v442 = 0x333333333333333;
          else
            v442 = v440;
          v1006 = v398;
          if (v442)
          {
            if (v442 > 0x333333333333333)
              sub_223174E94();
            v443 = operator new(80 * v442);
          }
          else
          {
            v443 = 0;
          }
          v444 = (int8x16_t *)&v443[10 * v439];
          _Q0.i32[3] = HIDWORD(__sz[1]);
          *v444 = *(int8x16_t *)__sz;
          v444[1].i64[0] = v1077;
          v444[1].i8[8] = 0;
          v444[4].i8[8] = 0;
          if (v1084)
          {
            v445 = v1078;
            v446 = v1079;
            v1079 = 0;
            v1078 = 0;
            v444[1].i64[1] = (uint64_t)v445;
            v447 = (char *)&v443[10 * v439];
            v448 = v1080;
            v449 = v1081;
            *((_QWORD *)v447 + 5) = v1080;
            v450 = v447 + 40;
            *((_QWORD *)v450 - 1) = v446;
            *((_QWORD *)v450 + 1) = v449;
            *((_DWORD *)v450 + 4) = v1082;
            if (v449)
            {
              v451 = v448[1];
              if ((v446 & (v446 - 1)) != 0)
              {
                _CF = v451 >= v446;
                v452 = v451 % v446;
                if (!_CF)
                  v452 = v451;
              }
              else
              {
                v452 = v451 & (v446 - 1);
              }
              v445[v452] = v450;
              v1080 = 0;
              v1081 = 0;
            }
            v443[10 * v439 + 8] = v1083;
            v444[4].i8[8] = 1;
            v397 = *v409;
            v438 = (int8x16_t *)*v437;
          }
          v453 = (char *)&v443[10 * v442];
          v426 = v444 + 5;
          if (v397 == v438)
          {
            *v437 = v444;
            *v409 = v426;
            *v407 = v453;
          }
          else
          {
            v454 = 0;
            do
            {
              i8 = v444[v454].i8;
              v457 = &v397[v454];
              _Q0 = v397[v454 - 5];
              *((_QWORD *)i8 - 8) = v397[v454 - 4].i64[0];
              *((int8x16_t *)i8 - 5) = _Q0;
              *(i8 - 56) = 0;
              *(i8 - 8) = 0;
              if (v397[v454 - 1].i8[8])
              {
                v458 = v457[-4].i64[1];
                v457[-4].i64[1] = 0;
                *((_QWORD *)i8 - 7) = v458;
                *((_QWORD *)i8 - 6) = v457[-3].i64[0];
                v457[-3].i64[0] = 0;
                v461 = v457[-3].i64[1];
                v459 = &v457[-3].i64[1];
                v460 = v461;
                *((_QWORD *)i8 - 5) = v461;
                v462 = v459[1];
                *((_QWORD *)i8 - 4) = v462;
                *((_DWORD *)i8 - 6) = *((_DWORD *)v459 + 4);
                if (v462)
                {
                  v455 = *(_QWORD *)(v460 + 8);
                  v463 = *((_QWORD *)i8 - 6);
                  if ((v463 & (v463 - 1)) != 0)
                  {
                    if (v455 >= v463)
                      v455 %= v463;
                  }
                  else
                  {
                    v455 &= v463 - 1;
                  }
                  *(_QWORD *)(v458 + 8 * v455) = i8 - 40;
                  *v459 = 0;
                  v459[1] = 0;
                }
                v444[v454 - 1].i64[0] = v397[v454 - 1].i64[0];
                *(i8 - 8) = 1;
              }
              v454 -= 5;
            }
            while (&v397[v454] != v438);
            v438 = (int8x16_t *)*v437;
            v464 = *v409;
            *v437 = &v444[v454];
            *v409 = v426;
            *v407 = v453;
            while (v464 != v438)
            {
              if (v464[-1].i8[8])
              {
                v465 = (_QWORD *)v464[-3].i64[1];
                if (v465)
                {
                  do
                  {
                    v466 = (_QWORD *)*v465;
                    operator delete(v465);
                    v465 = v466;
                  }
                  while (v466);
                }
                v467 = (void *)v464[-4].i64[1];
                v464[-4].i64[1] = 0;
                if (v467)
                  operator delete(v467);
              }
              v464 -= 5;
            }
          }
          if (v438)
            operator delete(v438);
          LOWORD(v398) = v1006;
          goto LABEL_635;
        }
      }
      _Q0 = *(int8x16_t *)__sz;
      v397[1].i64[0] = v1077;
      *v397 = _Q0;
      v397[1].i8[8] = 0;
      v397[4].i8[8] = 0;
      if (v1084)
      {
        v410 = v1078;
        v1078 = 0;
        v397[1].i64[1] = (uint64_t)v410;
        v397[2].i64[0] = v1079;
        v1079 = 0;
        v411 = v1080;
        v397[2].i64[1] = (uint64_t)v1080;
        v412 = v1081;
        v397[3].i64[0] = v1081;
        v397[3].i32[2] = v1082;
        if (v412)
        {
          v413 = v411[1];
          v414 = v397[2].u64[0];
          if ((v414 & (v414 - 1)) != 0)
          {
            if (v413 >= v414)
              v413 %= v414;
          }
          else
          {
            v413 &= v414 - 1;
          }
          v410[v413] = (char *)v397 + 40;
          v1080 = 0;
          v1081 = 0;
        }
        v397[4].i64[0] = v1083;
        v397[4].i8[8] = 1;
      }
      v426 = v397 + 5;
LABEL_635:
      *v409 = v426;
      ++v1018;
      v87[3] = ((unint64_t)(unsigned __int16)(v382 + 1) << 21) | (32 * (unsigned __int16)v398) | v87[3] & 0x1FLL;
      v379 = (float *)__p;
LABEL_636:
      if (v379)
      {
        v1106 = v379;
        operator delete(v379);
      }
LABEL_638:
      if (v1123)
      {
        if (*(_QWORD *)&v1121[8])
        {
          *(_QWORD *)&v1121[16] = *(_QWORD *)&v1121[8];
          operator delete(*(void **)&v1121[8]);
        }
        v468 = (_QWORD *)v1118;
        if ((_QWORD)v1118)
        {
          do
          {
            v469 = (_QWORD *)*v468;
            operator delete(v468);
            v468 = v469;
          }
          while (v469);
        }
        v470 = *(void **)&v1117[40];
        *(_QWORD *)&v1117[40] = 0;
        if (v470)
          operator delete(v470);
      }
LABEL_645:
      if (v1084)
      {
        v471 = v1080;
        if (v1080)
        {
          do
          {
            v472 = (_QWORD *)*v471;
            operator delete(v471);
            v471 = v472;
          }
          while (v472);
        }
        v473 = v1078;
        v1078 = 0;
        if (v473)
          operator delete(v473);
      }
      v93 = v1035;
LABEL_84:
      v94 = v1050;
      v95 = v1044;
      if (v1050 != v1044)
        continue;
      break;
    }
    v87 += 4;
    if (v87 != v1000)
      continue;
    break;
  }
  v77 = v1088;
  v75 = v1087;
LABEL_662:
  v1104 = 0uLL;
  v1103 = 0;
  if (v77 != v75)
  {
    v474 = 0xAAAAAAAAAAAAAAABLL * (v77 - v75);
    if (v474 > 0x492492492492492)
      sub_22316E078();
    v475 = (char *)operator new(0x5555555555555568 * (v77 - v75));
    v476 = (uint64_t *)v1103;
    v477 = (uint64_t *)v1104;
    v1103 = v475;
    *(_QWORD *)&v1104 = v475;
    *((_QWORD *)&v1104 + 1) = &v475[56 * v474];
    while (v477 != v476)
    {
      v477 -= 7;
      sub_223F45688(v477);
    }
    if (v476)
      operator delete(v476);
    v75 = v1087;
    v77 = v1088;
  }
  if (v75 != v77)
  {
    v478 = v1104;
    do
    {
      while (1)
      {
        v479 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v75[1] - *v75) >> 4);
        if (v478 >= *((_QWORD *)&v1104 + 1))
          break;
        sub_223F45750(v478, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v75[1] - *v75) >> 4));
        v478 += 56;
        *(_QWORD *)&v1104 = v478;
        v75 += 3;
        if (v75 == v77)
          goto LABEL_706;
      }
      v480 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v478 - (_QWORD)v1103) >> 3);
      v481 = v480 + 1;
      if ((unint64_t)(v480 + 1) > 0x492492492492492)
        sub_22316E078();
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1104 + 1) - (_QWORD)v1103) >> 3) > v481)
        v481 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1104 + 1) - (_QWORD)v1103) >> 3);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v1104 + 1) - (_QWORD)v1103) >> 3)) >= 0x249249249249249)
        v482 = 0x492492492492492;
      else
        v482 = v481;
      *(_QWORD *)&v1117[32] = (char *)&v1104 + 8;
      if (v482)
      {
        if (v482 > 0x492492492492492)
          sub_223174E94();
        v483 = (char *)operator new(56 * v482);
      }
      else
      {
        v483 = 0;
      }
      *(_QWORD *)v1117 = v483;
      *(_QWORD *)&v1117[8] = &v483[56 * v480];
      *(_QWORD *)&v1117[16] = *(_QWORD *)&v1117[8];
      *(_QWORD *)&v1117[24] = &v483[56 * v482];
      sub_223F45750(*(uint64_t *)&v1117[8], v479);
      v484 = 0;
      v485 = *(_QWORD *)&v1117[8];
      *(_QWORD *)&v1117[16] += 56;
      v486 = v1104;
      v487 = v1103;
      while ((void *)(v486 + v484) != v487)
      {
        v484 -= 56;
        sub_223F451B0(v484 + v485, (_QWORD *)(v484 + v486));
      }
      v488 = (void *)(v485 + v484);
      v489 = (uint64_t *)v1103;
      v490 = (uint64_t *)v1104;
      v1103 = v488;
      v1054 = *(_QWORD *)&v1117[16];
      v1104 = *(_OWORD *)&v1117[16];
      if (v490 != v489)
      {
        do
        {
          v491 = *(v490 - 1);
          if (v491)
            MEMORY[0x227684CE8](v491, 0xC400A2AC0F1);
          v492 = *(v490 - 4);
          if (v492)
          {
            v493 = *(v490 - 3);
            v494 = (void *)*(v490 - 4);
            if (v493 != v492)
            {
              v495 = *(v490 - 3);
              do
              {
                v497 = *(void **)(v495 - 32);
                v495 -= 32;
                v496 = v497;
                if (v497)
                {
                  *(_QWORD *)(v493 - 24) = v496;
                  operator delete(v496);
                }
                v493 = v495;
              }
              while (v495 != v492);
              v494 = (void *)*(v490 - 4);
            }
            *(v490 - 3) = v492;
            operator delete(v494);
          }
          v498 = v490 - 7;
          if (*(v490 - 5))
          {
            v500 = *(v490 - 7);
            v499 = (uint64_t *)*(v490 - 6);
            v501 = *v499;
            *(_QWORD *)(v501 + 8) = *(_QWORD *)(v500 + 8);
            **(_QWORD **)(v500 + 8) = v501;
            *(v490 - 5) = 0;
            if (v499 != v498)
            {
              do
              {
                v502 = (uint64_t *)v499[1];
                operator delete(v499);
                v499 = v502;
              }
              while (v502 != v498);
            }
          }
          v490 = v498;
        }
        while (v498 != v489);
      }
      if (v489)
        operator delete(v489);
      v478 = v1054;
      *(_QWORD *)&v1104 = v1054;
      v75 += 3;
    }
    while (v75 != v77);
  }
LABEL_706:
  v503 = v989[6];
  for (j = v989[7]; v503 != j; v503 += 48)
  {
    v505 = *(_QWORD *)(v503 + 8);
    if (v505)
    {
      v506 = *(_QWORD *)(*(_QWORD *)(v503 + 16) + 8);
      if (v506)
      {
        v507 = *(_QWORD *)(v505 + 24);
        v508 = (v507 >> 21) & 0xFFF;
        v509 = (_DWORD)v508
             ? (((v507 >> 21) & 0xFFF) - 1) & 0xFF00 | ((unsigned __int16)(v507 >> 5) << 16) | ((v507 >> 21) - 1)
             : 0;
        v510 = *(_QWORD *)(v506 + 24);
        v511 = (v510 >> 21) & 0xFFF;
        if ((_DWORD)v511)
        {
          if ((_DWORD)v508 && (unsigned __int16)(v511 - 1) == (unsigned __int16)v509)
            sub_223F472BC((uint64_t)v1117, HIWORD(v509), (unsigned __int16)(v510 >> 5), (uint64_t **)v1103 + 7 * (unsigned __int16)v509);
        }
      }
    }
  }
  v512 = v1060;
  if (v1064 != v1060)
  {
    v513 = 0;
    while (1)
    {
      v1061 = v512;
      v514 = (unsigned __int16 **)&v512[24 * v513];
      v515 = *v514;
      v1055 = v514[1];
      v1051 = v513;
      if (*v514 != v1055)
        break;
LABEL_720:
      ++v513;
      v512 = v1061;
      if (v513 >= 0xAAAAAAAAAAAAAAABLL * ((v1064 - v1061) >> 3))
        goto LABEL_788;
    }
    while (2)
    {
      v517 = *v515;
      v518 = v515[1];
      v519 = (uint64_t *)((char *)v1103 + 56 * v513);
      if (v517 <= v518)
        v520 = v515[1];
      else
        v520 = *v515;
      v521 = v519[3];
      v522 = (_QWORD *)v519[4];
      v523 = ((uint64_t)v522 - v521) >> 5;
      if (v520 >= v523)
      {
        v524 = v520 + 1;
        v525 = v520 + 1 - v523;
        v526 = v519[5];
        if (v525 <= (v526 - (uint64_t)v522) >> 5)
        {
          if (v524 != v523)
          {
            v543 = &v522[4 * v525];
            v544 = 32 * v520 - 32 * v523 + 32;
            do
            {
              *v522 = 0;
              v522[1] = 0;
              v522[2] = 0;
              v522 += 4;
              v544 -= 32;
            }
            while (v544);
            v522 = v543;
          }
          v519[4] = (uint64_t)v522;
        }
        else
        {
          v527 = v526 - v521;
          v528 = v527 >> 4;
          if (v527 >> 4 <= v524)
            v528 = v520 + 1;
          if ((unint64_t)v527 >= 0x7FFFFFFFFFFFFFE0)
            v529 = 0x7FFFFFFFFFFFFFFLL;
          else
            v529 = v528;
          if (v529 >> 59)
LABEL_1307:
            sub_223174E94();
          v530 = (char *)operator new(32 * v529);
          v531 = &v530[32 * v523];
          v532 = &v530[32 * v524];
          v533 = 32 * v520 - 32 * v523 + 32;
          v534 = v531;
          do
          {
            *(_QWORD *)v534 = 0;
            *((_QWORD *)v534 + 1) = 0;
            *((_QWORD *)v534 + 2) = 0;
            v534 += 32;
            v533 -= 32;
          }
          while (v533);
          v535 = &v530[32 * v529];
          v536 = (_QWORD *)v519[3];
          if (v522 == v536)
          {
            v519[3] = (uint64_t)v531;
            v519[4] = (uint64_t)v532;
            v519[5] = (uint64_t)v535;
          }
          else
          {
            do
            {
              v537 = v531;
              *((_QWORD *)v531 - 3) = 0;
              *((_QWORD *)v531 - 2) = 0;
              v538 = *((_OWORD *)v522 - 2);
              v522 -= 4;
              *((_OWORD *)v531 - 2) = v538;
              v531 -= 32;
              *((_QWORD *)v537 - 2) = v522[2];
              *v522 = 0;
              v522[1] = 0;
              v522[2] = 0;
            }
            while (v522 != v536);
            v522 = (_QWORD *)v519[3];
            v539 = (_QWORD *)v519[4];
            v519[3] = (uint64_t)v531;
            v519[4] = (uint64_t)v532;
            v519[5] = (uint64_t)v535;
            if (v539 != v522)
            {
              v540 = v539;
              do
              {
                v542 = (void *)*(v540 - 4);
                v540 -= 4;
                v541 = v542;
                if (v542)
                {
                  *(v539 - 3) = v541;
                  operator delete(v541);
                }
                v539 = v540;
              }
              while (v540 != v522);
            }
          }
          if (v522)
            operator delete(v522);
        }
      }
      v545 = operator new(0x28uLL);
      v546 = v545;
      v545[2] = v517;
      v545[3] = v518;
      v545[1] = v519;
      v547 = *v519;
      *v545 = *v519;
      *(_QWORD *)(v547 + 8) = v545;
      *v519 = (uint64_t)v545;
      v548 = v519[3];
      ++v519[2];
      v549 = (uint64_t *)(v548 + 32 * v517);
      v551 = (_QWORD *)v549[1];
      v550 = v549[2];
      if ((unint64_t)v551 < v550)
      {
        *v551 = v518;
        v551[1] = v545;
        v552 = v551 + 2;
        goto LABEL_771;
      }
      v553 = (_QWORD *)*v549;
      v554 = ((uint64_t)v551 - *v549) >> 4;
      v555 = v554 + 1;
      if ((unint64_t)(v554 + 1) >> 60)
        sub_22316E078();
      v556 = v550 - (_QWORD)v553;
      if (v556 >> 3 > v555)
        v555 = v556 >> 3;
      if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFF0)
        v557 = 0xFFFFFFFFFFFFFFFLL;
      else
        v557 = v555;
      if (v557)
      {
        if (v557 >> 60)
          sub_223174E94();
        v558 = (char *)operator new(16 * v557);
        v559 = &v558[16 * v554];
        *(_QWORD *)v559 = v518;
        *((_QWORD *)v559 + 1) = v546;
        v560 = (uint64_t)v559;
        if (v551 == v553)
        {
LABEL_769:
          v552 = v559 + 16;
          *v549 = v560;
          v549[1] = (uint64_t)(v559 + 16);
          v549[2] = (uint64_t)&v558[16 * v557];
          if (v551)
            goto LABEL_770;
          goto LABEL_771;
        }
      }
      else
      {
        v558 = 0;
        v559 = (char *)(16 * v554);
        *(_QWORD *)v559 = v518;
        *((_QWORD *)v559 + 1) = v546;
        v560 = 16 * v554;
        if (v551 == v553)
          goto LABEL_769;
      }
      do
      {
        *(_OWORD *)(v560 - 16) = *((_OWORD *)v551 - 1);
        v560 -= 16;
        v551 -= 2;
      }
      while (v551 != v553);
      v551 = (_QWORD *)*v549;
      v552 = v559 + 16;
      *v549 = v560;
      v549[1] = (uint64_t)(v559 + 16);
      v549[2] = (uint64_t)&v558[16 * v557];
      if (v551)
LABEL_770:
        operator delete(v551);
LABEL_771:
      v549[1] = (uint64_t)v552;
      v561 = (uint64_t *)(v519[3] + 32 * v518);
      v563 = (_QWORD *)v561[1];
      v562 = v561[2];
      if ((unint64_t)v563 < v562)
      {
        *v563 = v517;
        v563[1] = v546;
        v516 = v563 + 2;
        v513 = v1051;
        goto LABEL_724;
      }
      v564 = (_QWORD *)*v561;
      v565 = ((uint64_t)v563 - *v561) >> 4;
      v566 = v565 + 1;
      if ((unint64_t)(v565 + 1) >> 60)
        sub_22316E078();
      v567 = v562 - (_QWORD)v564;
      if (v567 >> 3 > v566)
        v566 = v567 >> 3;
      if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFF0)
        v568 = 0xFFFFFFFFFFFFFFFLL;
      else
        v568 = v566;
      if (v568)
      {
        if (v568 >> 60)
          goto LABEL_1307;
        v569 = (char *)operator new(16 * v568);
        v570 = &v569[16 * v565];
        *(_QWORD *)v570 = v517;
        *((_QWORD *)v570 + 1) = v546;
        v571 = (uint64_t)v570;
        if (v563 != v564)
        {
LABEL_781:
          v513 = v1051;
          do
          {
            *(_OWORD *)(v571 - 16) = *((_OWORD *)v563 - 1);
            v571 -= 16;
            v563 -= 2;
          }
          while (v563 != v564);
          v563 = (_QWORD *)*v561;
          v516 = v570 + 16;
          *v561 = v571;
          v561[1] = (uint64_t)(v570 + 16);
          v561[2] = (uint64_t)&v569[16 * v568];
          if (!v563)
          {
LABEL_724:
            v561[1] = (uint64_t)v516;
            v515 += 2;
            if (v515 == v1055)
              goto LABEL_720;
            continue;
          }
LABEL_787:
          operator delete(v563);
          goto LABEL_724;
        }
      }
      else
      {
        v569 = 0;
        v570 = (char *)(16 * v565);
        *(_QWORD *)v570 = v517;
        *((_QWORD *)v570 + 1) = v546;
        v571 = 16 * v565;
        if (v563 != v564)
          goto LABEL_781;
      }
      break;
    }
    v513 = v1051;
    v516 = v570 + 16;
    *v561 = v571;
    v561[1] = (uint64_t)(v570 + 16);
    v561[2] = (uint64_t)&v569[16 * v568];
    if (!v563)
      goto LABEL_724;
    goto LABEL_787;
  }
LABEL_788:
  v1062 = v512;
  v572 = *((_QWORD *)a1 + 1);
  v574 = *(_DWORD *)(v572 + 152);
  v573 = *(_DWORD *)(v572 + 156);
  v1008 = (_QWORD *)v572;
  v576 = *a2;
  v575 = a2[1];
  v1073 = 0;
  v1074 = 0uLL;
  if (v575 == v576)
  {
    v578 = v1031;
    goto LABEL_1250;
  }
  v577 = 0xCCCCCCCCCCCCCCCDLL * ((v575 - v576) >> 4);
  v578 = v1031;
  if (v577 > 0x492492492492492)
    sub_22316E078();
  *(_QWORD *)&v1117[32] = (char *)&v1074 + 8;
  *(_QWORD *)v1117 = operator new(0xCCCCCCCCCCCCCCD8 * ((v575 - v576) >> 4));
  *(_QWORD *)&v1117[8] = *(_QWORD *)v1117;
  *(_QWORD *)&v1117[16] = *(_QWORD *)v1117;
  *(_QWORD *)&v1117[24] = *(_QWORD *)v1117 + 56 * v577;
  sub_223F45854((uint64_t *)&v1073, v1117);
  sub_223F459AC((uint64_t)v1117);
  v580 = a2[1];
  v1019 = *a2;
  if (v580 != *a2)
  {
    v995 = 0;
    v581 = v574 * v573;
    v582 = 0;
    *(float *)v579.i32 = (float)v581;
    v1003 = (float)v581;
    v1052 = (uint64_t)(a1 + 6);
    v997 = (_QWORD *)((unint64_t)v1117 | 0xC);
    v987 = (float32x4_t)v579;
    __dst = *(float32x2_t *)v579.i8;
    v992 = v579;
    while (1)
    {
      v584 = (char *)v1103 + 56 * v582;
      v586 = *((_QWORD *)v584 + 3);
      v585 = *((_QWORD *)v584 + 4);
      v587 = v585 - v586;
      if (v585 != v586)
        break;
      v583 = v1019;
LABEL_795:
      ++v582;
      v1019 = v583;
      if (v582 >= 0xCCCCCCCCCCCCCCCDLL * ((v580 - v583) >> 4))
        goto LABEL_1250;
    }
    v996 = v582;
    v1016 = (char *)v1087;
    v1071 = 0;
    v1070 = 0;
    v1072 = 0;
    if ((v587 & 0x8000000000000000) != 0)
      sub_22367C394();
    v588 = (char *)operator new(v587 >> 2);
    v1070 = v588;
    v1072 = &v588[8 * ((uint64_t)v587 >> 5)];
    bzero(v588, v587 >> 2);
    v1071 = &v588[v587 >> 2];
    if (*((_QWORD *)v584 + 4) == *((_QWORD *)v584 + 3))
      goto LABEL_858;
    *(_DWORD *)v1117 = 0;
    v589.n128_f64[0] = sub_223EFA57C((uint64_t *)__sz);
    v591 = *((_QWORD *)v584 + 3);
    v590 = *((_QWORD *)v584 + 4);
    v592 = v590 - v591;
    if (v590 != v591)
    {
      bzero((void *)__sz[0], (v592 >> 3) & 0xFFFFFFFFFFFFFFFCLL);
      v593 = 0;
      v594 = v592 >> 5;
      v595 = -1;
      v1033 = v588;
      v1036 = v584;
      v1022 = v594;
      while (1)
      {
        v596 = __sz[0];
        if (!*(_DWORD *)(__sz[0] + 4 * v593))
        {
          v597 = __sz[1];
          v1096 = *(_OWORD *)__sz;
          if (__sz[1])
          {
            v598 = (unsigned int *)(__sz[1] + 8);
            do
              v599 = __ldxr(v598);
            while (__stxr(v599 + 1, v598));
          }
          v1025 = (unsigned int *)v597;
          ++v595;
          memset(object, 0, 24);
          *(_DWORD *)(v596 + 4 * v593) = 1;
          *(_QWORD *)&v588[8 * v593] = v595;
          v600 = (uint64_t *)(*((_QWORD *)v584 + 3) + 32 * v593);
          v602 = *v600;
          v601 = v600[1];
          *(_QWORD *)v1117 = v593;
          v1117[8] = 0;
          *(_QWORD *)&v1117[40] = v602;
          *(_QWORD *)&v1117[48] = v593;
          *(_QWORD *)&v1118 = v601;
          v1028 = v593;
          *((_QWORD *)&v1118 + 1) = v593;
          v603 = sub_2236BBE80((void **)object, (uint64_t)v1117);
          *(_QWORD *)&object[8] = v603;
          v1042 = v595;
          if (*(char **)object != v603)
          {
            while (1)
            {
              v611 = v603 - 72;
              v610 = *((_QWORD *)v603 - 9);
              if (*(v603 - 64))
                *(v603 - 64) = 0;
              v612 = (uint64_t *)*((_QWORD *)v603 - 4);
              v613 = *((_QWORD *)v603 - 3);
              v614 = (uint64_t *)*((_QWORD *)v603 - 2);
              v615 = *((_QWORD *)v611 + 8);
              *(_QWORD *)&object[8] = v611;
              v616 = v1096;
              if (v612 != v614)
                break;
LABEL_817:
              *(_DWORD *)(v616 + 4 * v610) = 4;
              v603 = v611;
              v578 = v1031;
              if (*(char **)object == v611)
                goto LABEL_807;
            }
            while (2)
            {
              while (1)
              {
                v617 = *v612;
                if (!*(_DWORD *)(v616 + 4 * *v612))
                  break;
                v612 += 2;
                if (v612 == v614)
                  goto LABEL_817;
              }
              v618 = v612[1] + 32;
              v619 = v612 + 2;
              if ((unint64_t)v611 < *(_QWORD *)&object[16])
              {
                *(_QWORD *)v611 = v610;
                *((_QWORD *)v611 + 2) = v613;
                *((_QWORD *)v611 + 3) = v617;
                v611[8] = 1;
                *((_QWORD *)v611 + 4) = v618;
                *((_QWORD *)v611 + 5) = v619;
                *((_QWORD *)v611 + 6) = v613;
                *((_QWORD *)v611 + 7) = v614;
                v620 = v611 + 72;
                *((_QWORD *)v611 + 8) = v615;
                goto LABEL_844;
              }
              v621 = *(char **)object;
              v622 = 0x8E38E38E38E38E39 * ((uint64_t)&v611[-*(_QWORD *)object] >> 3);
              v623 = v622 + 1;
              if (v622 + 1 > 0x38E38E38E38E38ELL)
                sub_22316E078();
              if (0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 3) > v623)
                v623 = 0x1C71C71C71C71C72 * ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 3);
              if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&object[16] - *(_QWORD *)object) >> 3) >= 0x1C71C71C71C71C7)
                v624 = 0x38E38E38E38E38ELL;
              else
                v624 = v623;
              if (v624 > 0x38E38E38E38E38ELL)
                sub_223174E94();
              v625 = v614;
              v1045 = v615;
              v1056 = v616;
              v626 = (char *)operator new(72 * v624);
              v627 = &v626[72 * v622];
              *(_QWORD *)v627 = v610;
              *((_QWORD *)v627 + 2) = v613;
              *((_QWORD *)v627 + 3) = v617;
              v627[8] = 1;
              *((_QWORD *)v627 + 4) = v618;
              *((_QWORD *)v627 + 5) = v619;
              *((_QWORD *)v627 + 6) = v613;
              *((_QWORD *)v627 + 7) = v625;
              *((_QWORD *)v627 + 8) = v1045;
              v620 = v627 + 72;
              if (v611 == v621)
              {
                *(_QWORD *)object = &v626[72 * v622];
                *(_QWORD *)&object[8] = v627 + 72;
                *(_QWORD *)&object[16] = &v626[72 * v624];
                v595 = v1042;
                v588 = v1033;
                v584 = v1036;
                v616 = v1056;
                if (v611)
                  goto LABEL_843;
              }
              else
              {
                v628 = 0;
                v595 = v1042;
                v588 = v1033;
                do
                {
                  v630 = &v627[v628];
                  v631 = (__n128 *)&v611[v628];
                  *((_QWORD *)v630 - 9) = *(_QWORD *)&v611[v628 - 72];
                  *(v630 - 64) = 0;
                  if (v611[v628 - 64])
                  {
                    v632 = *(__int128 *)((char *)&v631[-4] + 8);
                    *((_QWORD *)v630 - 5) = v631[-3].n128_u64[1];
                    *(_OWORD *)(v630 - 56) = v632;
                    *(v630 - 64) = 1;
                  }
                  v589 = v631[-2];
                  v629 = v631[-1];
                  *((__n128 *)v630 - 2) = v589;
                  *((__n128 *)v630 - 1) = v629;
                  v628 -= 72;
                }
                while (&v611[v628] != v621);
                *(_QWORD *)object = &v627[v628];
                *(_QWORD *)&object[8] = v627 + 72;
                *(_QWORD *)&object[16] = &v626[72 * v624];
                v616 = v1056;
                do
                {
                  if (*(v611 - 64))
                    *(v611 - 64) = 0;
                  v611 -= 72;
                }
                while (v611 != v621);
                v611 = v621;
                v584 = v1036;
                if (v611)
                {
LABEL_843:
                  operator delete(v611);
                  v616 = v1096;
                }
              }
LABEL_844:
              *(_QWORD *)&object[8] = v620;
              *(_DWORD *)(v616 + 4 * v617) = 1;
              *(_QWORD *)&v588[8 * v617] = v595;
              v633 = *((_QWORD *)v584 + 3) + 32 * v617;
              v612 = *(uint64_t **)v633;
              v614 = *(uint64_t **)(v633 + 8);
              v611 = v620;
              v615 = v617;
              v610 = v617;
              v613 = v617;
              if (*(uint64_t **)v633 == v614)
                goto LABEL_817;
              continue;
            }
          }
LABEL_807:
          if (v603)
          {
            *(_QWORD *)&object[8] = v603;
            operator delete(v603);
          }
          v593 = v1028;
          v594 = v1022;
          if (v1025)
          {
            v604 = v1025 + 2;
            do
            {
              v605 = __ldaxr(v604);
              v606 = v605 - 1;
            }
            while (__stlxr(v606, v604));
            if (!v606)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v1025 + 16))(v1025);
              v607 = v1025 + 3;
              do
              {
                v608 = __ldaxr(v607);
                v609 = v608 - 1;
              }
              while (__stlxr(v609, v607));
              if (!v609)
                (*(void (**)(unsigned int *))(*(_QWORD *)v1025 + 24))(v1025);
            }
          }
        }
        if (++v593 == v594)
          goto LABEL_849;
      }
    }
    v595 = -1;
LABEL_849:
    v634 = __sz[1];
    if (__sz[1])
    {
      v635 = (unsigned int *)(__sz[1] + 8);
      do
      {
        v636 = __ldaxr(v635);
        v637 = v636 - 1;
      }
      while (__stlxr(v637, v635));
      if (!v637)
      {
        (*(void (**)(size_t, __n128))(*(_QWORD *)v634 + 16))(v634, v589);
        v638 = (unsigned int *)(v634 + 12);
        do
        {
          v639 = __ldaxr(v638);
          v640 = v639 - 1;
        }
        while (__stlxr(v640, v638));
        if (!v640)
          (*(void (**)(size_t))(*(_QWORD *)v634 + 24))(v634);
      }
    }
    v641 = v595 + 1;
    if (v595 == -1)
    {
LABEL_858:
      v642 = 0;
      v643 = 0;
    }
    else
    {
      if (v641 > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      v644 = 24 * v641;
      v643 = (char *)operator new(24 * v641);
      v645 = 24 * ((v644 - 24) / 0x18uLL) + 24;
      bzero(v643, v645);
      v642 = &v643[v645];
    }
    v646 = v1071;
    v647 = (char *)v1070;
    v1057 = v643;
    if (v1071 != v1070)
    {
      v648 = 0;
      v649 = 0;
      while (1)
      {
        v651 = &v643[24 * *(_QWORD *)&v647[8 * v648]];
        v652 = (uint64_t *)(v651 + 8);
        v653 = (char *)*((_QWORD *)v651 + 1);
        v655 = v651 + 16;
        v654 = *((_QWORD *)v651 + 2);
        if ((unint64_t)v653 >= v654)
          break;
        *(_WORD *)v653 = v649;
        v650 = (uint64_t)(v653 + 2);
        v578 = v1031;
LABEL_864:
        *v652 = v650;
        v648 = ++v649;
        if (v649 >= (unint64_t)((v646 - v647) >> 3))
          goto LABEL_887;
      }
      v656 = *(char **)v651;
      v657 = (uint64_t)&v653[-*(_QWORD *)v651];
      if (v657 <= -3)
        sub_223257BE4();
      v658 = v657 >> 1;
      v659 = v654 - (_QWORD)v656;
      if (v659 <= (v657 >> 1) + 1)
        v660 = v658 + 1;
      else
        v660 = v659;
      if (v659 >= 0x7FFFFFFFFFFFFFFELL)
        v661 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v661 = v660;
      if (v661)
      {
        v1046 = v651;
        if (v661 < 0)
          sub_223174E94();
        v662 = (uint64_t *)(v651 + 8);
        v663 = v651 + 16;
        v664 = v647;
        v665 = v646;
        v666 = v661;
        v667 = operator new(2 * v661);
        v646 = v665;
        v647 = v664;
        v655 = v663;
        v652 = v662;
        v658 = v657 >> 1;
        v651 = v1046;
        v661 = v666;
        v668 = (unsigned __int16 *)&v667[2 * (v657 >> 1)];
        *v668 = v649;
        v650 = (uint64_t)(v668 + 1);
        v669 = v653 - v656;
        if (v653 == v656)
          goto LABEL_884;
      }
      else
      {
        v667 = 0;
        v668 = (unsigned __int16 *)(2 * v658);
        *(_WORD *)(2 * v658) = v649;
        v650 = 2 * v658 + 2;
        v669 = v653 - v656;
        if (v653 == v656)
        {
LABEL_884:
          *(_QWORD *)v651 = v668;
          *v652 = v650;
          *v655 = &v667[2 * v661];
          if (v656)
          {
            operator delete(v656);
            v646 = v1071;
            v647 = (char *)v1070;
          }
          v578 = v1031;
          v643 = v1057;
          goto LABEL_864;
        }
      }
      v670 = v669 - 2;
      if (v670 < 0x1E)
        goto LABEL_1357;
      if ((unint64_t)(v653 - &v667[v657 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
        goto LABEL_1357;
      v671 = (v670 >> 1) + 1;
      v672 = 2 * (v671 & 0xFFFFFFFFFFFFFFF0);
      v673 = &v653[-v672];
      v668 = (unsigned __int16 *)((char *)v668 - v672);
      v674 = &v667[2 * v658 - 16];
      v675 = v653 - 16;
      v676 = v671 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v677 = *(_OWORD *)v675;
        *(v674 - 1) = *((_OWORD *)v675 - 1);
        *v674 = v677;
        v674 -= 2;
        v675 -= 32;
        v676 -= 16;
      }
      while (v676);
      v653 = v673;
      if (v671 != (v671 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_1357:
        do
        {
          v678 = *((_WORD *)v653 - 1);
          v653 -= 2;
          *--v668 = v678;
        }
        while (v653 != v656);
      }
      goto LABEL_884;
    }
LABEL_887:
    if (v643 == v642)
    {
      if (!v642)
      {
LABEL_1247:
        v582 = v996;
        if (v1070)
        {
          v1071 = (char *)v1070;
          operator delete(v1070);
        }
        v583 = *a2;
        v580 = a2[1];
        goto LABEL_795;
      }
LABEL_1246:
      operator delete(v643);
      goto LABEL_1247;
    }
    v1043 = &v1016[24 * v996];
    v679 = v1019 + 80 * v996;
    v998 = (float32x2_t *)(v679 + 12);
    v1011 = (char *)(v679 + 24);
    v680 = (unsigned __int16 **)v643;
    while (1)
    {
      v1012 = v680;
      v683 = *v680;
      v684 = v680[1];
      v1069 = 0;
      v1067 = 0;
      v1068 = 0;
      v685 = (char *)v684 - (char *)v683;
      if (v684 != v683)
      {
        if ((unint64_t)v685 >= 0x666666666666667)
          sub_223323BA8();
        v686 = v685 >> 1;
        v687 = operator new(80 * (v685 >> 1));
        v1067 = v687;
        v1068 = v687;
        v1069 = (char *)&v687[5 * v686];
        v1047 = v1012[1];
        if (v683 != v1047)
          break;
      }
LABEL_895:
      sub_223F2AE6C((uint64_t)&v1067, (char *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1013[22] - v1013[21]) >> 2)), &v1065);
      v698 = *v1011;
      if (v698 == 1)
      {
        v1017 = v1065;
        if (*a1 > (unint64_t)(v1066 - v1065))
          goto LABEL_994;
      }
      else if (v698 == 2)
      {
        v1017 = v1065;
        if (a1[1] > (unint64_t)(v1066 - v1065))
          goto LABEL_994;
      }
      v746 = v1067;
      if (v1067 == v1068)
      {
        v750 = 0.0;
        v749 = 0.0;
      }
      else
      {
        v747 = v1013[21];
        v748 = v1008[31];
        v749 = 0.0;
        v750 = 0.0;
        do
        {
          v751 = v746[1];
          v752 = v747 + 12 * *v746;
          v753 = v746[2];
          v754 = v747 + 12 * v751;
          v755 = v747 + 12 * v753;
          v690.i64[0] = *(_QWORD *)v754;
          v691.i64[0] = *(_QWORD *)v752;
          v690.i32[2] = *(_DWORD *)(v754 + 8);
          v691.i32[2] = *(_DWORD *)(v752 + 8);
          v692.i64[0] = *(_QWORD *)v755;
          v756 = (int8x16_t)vsubq_f32(v690, v691);
          v692.i32[2] = *(_DWORD *)(v755 + 8);
          v757 = (int8x16_t)vsubq_f32((float32x4_t)v692, v691);
          v693 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v757, (int32x4_t)v757), v757, 0xCuLL);
          v691 = (float32x4_t)vextq_s8(vextq_s8(v757, v757, 0xCuLL), v757, 8uLL);
          v692 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v756, v756, 0xCuLL), v756, 8uLL), v693), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v756, (int32x4_t)v756), v756, 0xCuLL), v691);
          v690 = (float32x4_t)vextq_s8(v692, v692, 8uLL);
          v758 = (float *)(v748 + 8 * *v746);
          v749 = v749
               + (float)(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v692.i8, *(float32x2_t *)v692.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v692.i8, 1), *(float32x2_t *)v692.i8, 1), *(float32x2_t *)v690.f32, *(float32x2_t *)v690.f32).f32[0])* 0.5);
          v750 = v750
               + (float)(vabds_f32((float)(*v758 - *(float *)(v748 + 8 * v753))* (float)(*(float *)(v748 + 8 * v751 + 4) - v758[1]), (float)(*v758 - *(float *)(v748 + 8 * v751))* (float)(*(float *)(v748 + 8 * v753 + 4) - v758[1]))* 0.5);
          v746 += 10;
        }
        while (v746 != v1068);
      }
      v759 = v750 / v1003;
      _NF = v749 < 0.0025 && v759 < 0.05;
      v1017 = v1065;
      if (!_NF)
      {
        v762 = v1013[21];
        v761 = v1013[22];
        v763 = v1066;
        v764 = v1008[25];
        v1038 = v1008[24];
        *(_QWORD *)&v1096 = 2;
        DWORD2(v1096) = 100;
        LOBYTE(v1098) = 0;
        BYTE4(v1098) = 0;
        v1002 = vcvtas_u32_f32((float)(unint64_t)-(v1065 - v1066) * 0.9);
        *(_QWORD *)&v1097 = v1002;
        BYTE8(v1097) = 1;
        object[0] = 0;
        object[24] = 0;
        v1110 = 0uLL;
        *(_QWORD *)&object[32] = 0;
        LODWORD(v1111) = 0;
        LODWORD(v1075) = (unint64_t)((char *)v1066 - (char *)v1065) >> 3;
        if (v1075 < 2)
        {
LABEL_1130:
          v578 = v1031;
          goto LABEL_1181;
        }
        v1009 = 0;
        v765 = 0;
        v1048 = 0xAAAAAAAAAAAAAAABLL * ((v761 - v762) >> 2);
        v766 = 0x8E38E38E38E38E39 * ((v764 - v1038) >> 2);
        v1007 = 0;
        v767 = 0.0;
        v1014 = v1066;
        while (1)
        {
          v1034 = v765;
          v774 = v766;
          v775 = v1075;
          if (v1096 > v1075)
          {
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v776 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v776 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670 || byte_255795678)
            {
              v777 = qword_255795648;
              for (k = qword_255795650; v777 != k; v777 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v777)(*(_QWORD *)(v777 + 8), "T{0} <= k && k <= n", 19, "", 0);
            }
            v779 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v779 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              abort();
            qword_255795660(*(_QWORD *)algn_255795668, "T{0} <= k && k <= n", 19, "", 0);
            v775 = v1075;
          }
          if (v775)
          {
            if ((double)v775 * 0.5 < (double)v1096)
            {
              if (v1096 <= v775)
                goto LABEL_1027;
              sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 225, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
              v780 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v780 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670 || byte_255795678)
              {
                v781 = qword_255795648;
                for (m = qword_255795650; v781 != m; v781 += 16)
                  (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v781)(*(_QWORD *)(v781 + 8), "T{0} <= k && k <= n", 19, "", 0);
              }
              v783 = atomic_load((unsigned __int8 *)&qword_255795680);
              if ((v783 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
              {
                __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                __cxa_guard_release(&qword_255795680);
              }
              if (!byte_255795670)
                abort();
              qword_255795660(*(_QWORD *)algn_255795668, "T{0} <= k && k <= n", 19, "", 0);
              v775 = v1075;
              v1107 = 0;
              __p = 0;
              v1106 = 0;
              if ((_DWORD)v1075)
              {
LABEL_1027:
                v784 = 4 * v775;
                v785 = (int32x4_t *)operator new(v784);
                __p = v785;
                v1107 = &v785->i8[v784];
                bzero(v785, v784);
                v786 = (int32x4_t *)((char *)v785 + v784);
                v1106 = (float *)&v785->i32[(unint64_t)v784 / 4];
                if ((unint64_t)(v784 - 4) < 0x1C)
                {
                  LODWORD(v787) = 0;
                  v788 = v785;
                  goto LABEL_1034;
                }
                v789 = ((unint64_t)(v784 - 4) >> 2) + 1;
                v787 = v789 & 0x7FFFFFFFFFFFFFF8;
                v788 = (int32x4_t *)((char *)v785 + 4 * (v789 & 0x7FFFFFFFFFFFFFF8));
                v688 = (float32x4_t)xmmword_2246499B0;
                v790 = v785 + 1;
                v791 = v789 & 0x7FFFFFFFFFFFFFF8;
                v690.i64[0] = 0x400000004;
                v690.i64[1] = 0x400000004;
                v792.i64[0] = 0x800000008;
                v792.i64[1] = 0x800000008;
                do
                {
                  v790[-1] = (int32x4_t)v688;
                  *v790 = vaddq_s32((int32x4_t)v688, (int32x4_t)v690);
                  v688 = (float32x4_t)vaddq_s32((int32x4_t)v688, v792);
                  v790 += 2;
                  v791 -= 8;
                }
                while (v791);
                if (v789 != v787)
                {
                  do
                  {
LABEL_1034:
                    v788->i32[0] = v787;
                    v788 = (int32x4_t *)((char *)v788 + 4);
                    LODWORD(v787) = v787 + 1;
                  }
                  while (v788 != v786);
                }
                v793 = v1096;
                v794 = v784 >> 2;
                if (v794 < v1096)
                {
LABEL_1036:
                  sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Shuffle.h", 119, (uint64_t)"0 <= k && k <= n", 16, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
                  v795 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v795 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670 || byte_255795678)
                  {
                    v796 = qword_255795648;
                    for (n = qword_255795650; v796 != n; v796 += 16)
                      (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v796)(*(_QWORD *)(v796 + 8), "0 <= k && k <= n", 16, "", 0);
                  }
                  v798 = atomic_load((unsigned __int8 *)&qword_255795680);
                  if ((v798 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
                  {
                    __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
                    __cxa_guard_release(&qword_255795680);
                  }
                  if (!byte_255795670)
                    abort();
                  qword_255795660(*(_QWORD *)algn_255795668, "0 <= k && k <= n", 16, "", 0);
                }
              }
              else
              {
                v785 = 0;
                v786 = 0;
                v793 = v1096;
                v794 = 0;
                if ((_DWORD)v1096)
                  goto LABEL_1036;
              }
              if ((_DWORD)v793)
              {
                v799 = 0;
                v800 = (char *)(v794 - 1);
                do
                {
                  __sz[0] = (size_t)(a1 + 6);
                  v802 = (_QWORD *)operator new();
                  *v802 = &off_24EC633E0;
                  v802[1] = 0;
                  v802[2] = 0;
                  v802[3] = v1052;
                  __sz[1] = (size_t)v802;
                  v1077 = (int64_t)v799;
                  v803 = (uint64_t)v800;
                  v1078 = v800;
                  v804 = (char *)(v800 - v799);
                  if (v800 != v799)
                  {
                    v805 = (unint64_t)(v804 + 1);
                    if (v804 != (char *)-1)
                    {
                      v806 = __clz(v805);
                      v807 = 63;
                      if (((v805 << v806) & 0x7FFFFFFFFFFFFFFFLL) != 0)
                        v807 = 64;
                      v808 = v807 - v806;
                      *(_QWORD *)v1117 = a1 + 6;
                      *(_QWORD *)&v1117[8] = v808;
                      v809 = (v807 - v806) >> 5;
                      if ((v808 & 0x1F) != 0)
                        v810 = v809 + 1;
                      else
                        v810 = v809;
                      v811 = v808 / v810;
                      *(_QWORD *)&v1117[24] = v810;
                      *(_QWORD *)&v1117[16] = v811;
                      v812 = (-1 << (v808 / v810)) & 0x100000000;
                      if (v811 >= 0x40)
                        v812 = 0;
                      *(_QWORD *)&v1117[40] = v812;
                      if ((v812 ^ 0x100000000) <= v812 / v810)
                      {
LABEL_1059:
                        *(_QWORD *)&v1117[32] = v810 - v808 % v810;
                        if (v811 >= 0x3F)
                          goto LABEL_1067;
                        *(_QWORD *)&v1117[48] = 0x80000000uLL >> v811 << (v811 + 1);
                        v813 = 0xFFFFFFFF >> -(char)v811;
                        if (!v811)
                          v813 = 0;
                        LODWORD(v1118) = v813;
                        if (v811 >= 0x1F)
                          v814 = -1;
                        else
                          v814 = 0xFFFFFFFF >> ~(_BYTE)v811;
                      }
                      else
                      {
                        v811 = v808 / ++v810;
                        *(_QWORD *)&v1117[24] = v810;
                        *(_QWORD *)&v1117[16] = v811;
                        if (v811 <= 0x3F)
                        {
                          *(_QWORD *)&v1117[40] = (-1 << (v808 / v810)) & 0x100000000;
                          goto LABEL_1059;
                        }
                        *(_QWORD *)&v1117[40] = 0;
                        *(_QWORD *)&v1117[32] = v810 - (v808 % v810);
                        LODWORD(v811) = 64;
LABEL_1067:
                        *(_QWORD *)&v1117[48] = 0;
                        v815 = -(int)v811;
                        v814 = -1;
                        LODWORD(v1118) = 0xFFFFFFFF >> v815;
                      }
                      DWORD1(v1118) = v814;
                      do
                        v816 = sub_223CD09C0((uint64_t *)v1117);
                      while (v816 >= v805);
                      v803 = v1077 + v816;
                      goto LABEL_1071;
                    }
                    *(_QWORD *)v1117 = a1 + 6;
                    *(_OWORD *)&v1117[8] = xmmword_22466ECF0;
                    *(int64x2_t *)&v1117[24] = vdupq_n_s64(2uLL);
                    *(_OWORD *)&v1117[40] = xmmword_22466EC90;
                    *(_QWORD *)&v1118 = -1;
                    v803 = sub_223CD09C0((uint64_t *)v1117);
                  }
LABEL_1071:
                  v817 = (std::__shared_weak_count *)__sz[1];
                  if (__sz[1])
                  {
                    v818 = (unint64_t *)(__sz[1] + 8);
                    do
                      v819 = __ldaxr(v818);
                    while (__stlxr(v819 - 1, v818));
                    if (!v819)
                    {
                      ((void (*)(std::__shared_weak_count *))v817->__on_zero_shared)(v817);
                      std::__shared_weak_count::__release_weak(v817);
                    }
                  }
                  v801 = v785->i32[(_QWORD)v799];
                  v785->i32[(_QWORD)v799] = v785->i32[v803];
                  v785->i32[v803] = v801;
                  ++v799;
                }
                while (v799 != (char *)v793);
              }
              v763 = v1014;
              if ((int32x4_t *)((char *)v785 + 4 * v1096) != v786)
                v1106 = (float *)&v785->i32[v1096];
              goto LABEL_1078;
            }
            sub_223CD005C(v1052, (unsigned int *)&v1075, (unsigned int *)&v1096, (uint64_t)&__p);
          }
          else
          {
            v1106 = 0;
            __p = 0;
            v1107 = 0;
          }
LABEL_1078:
          v820 = (float *)__p;
          v821 = *(unsigned int *)__p;
          *(_QWORD *)&v1117[32] = v1038;
          *(_QWORD *)&v1117[40] = v774;
          *(_QWORD *)&v1117[8] = v762;
          *(_QWORD *)v1117 = &v1017[v821];
          *(_QWORD *)&v1117[16] = v1048;
          *(_QWORD *)&v1117[24] = *(_QWORD *)v1117;
          v822 = **(_QWORD **)v1117;
          if (v1048 <= **(_QWORD **)v1117)
            goto LABEL_1301;
          v766 = v774;
          if (v774 <= v822)
          {
            v984 = (unint64_t *)&v1117[40];
            goto LABEL_1302;
          }
          v823 = *((unsigned int *)__p + 1);
          *(_QWORD *)&v1117[32] = v1038;
          *(_QWORD *)&v1117[40] = v774;
          *(_QWORD *)&v1117[8] = v762;
          *(_QWORD *)v1117 = &v1017[v823];
          *(_QWORD *)&v1117[16] = v1048;
          *(_QWORD *)&v1117[24] = *(_QWORD *)v1117;
          v824 = **(_QWORD **)v1117;
          if (v1048 <= **(_QWORD **)v1117)
          {
            v822 = **(_QWORD **)v1117;
LABEL_1301:
            v984 = (unint64_t *)&v1117[16];
LABEL_1302:
            sub_22457354C(v984, v822);
          }
          v643 = v1057;
          if (v774 <= v824)
          {
            v984 = (unint64_t *)&v1117[40];
            v822 = **(_QWORD **)v1117;
            goto LABEL_1302;
          }
          v825 = v762 + 12 * v822;
          v826 = v762 + 12 * v824;
          v697.i64[0] = *(_QWORD *)v825;
          v697.i32[2] = *(_DWORD *)(v825 + 8);
          v690.i64[0] = *(_QWORD *)v826;
          v690.i32[2] = *(_DWORD *)(v826 + 8);
          v827 = (int8x16_t)vsubq_f32(v690, v697);
          v828 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v827.i8, 1);
          v829 = (float32x2_t)vextq_s8(v827, v827, 8uLL).u64[0];
          v830 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v827.i8, *(float32x2_t *)v827.i8), v828, *(float32x2_t *)v827.i8, 1), v829, v829);
          if (v830.f32[0] == 0.0)
            goto LABEL_1006;
          v831 = v830.f32[0];
          if (v830.f32[0] <= 0.0)
            v831 = 0.0 - v830.f32[0];
          if (v831 <= 0.00000001)
          {
LABEL_1006:
            v1106 = v820;
            operator delete(v820);
            v765 = v1034 + 1;
            if (v1034 == 99)
              goto LABEL_1126;
          }
          else
          {
            v1010 = v690;
            *(_QWORD *)v1117 = v1017;
            *(_QWORD *)&v1117[8] = v762;
            *(_QWORD *)&v1117[16] = v1048;
            *(_QWORD *)&v1117[24] = v1017;
            *(_QWORD *)&v1117[32] = v1038;
            *(_QWORD *)&v1117[40] = v774;
            *(_QWORD *)&v1117[48] = 0;
            if (v1017 != v763)
            {
              v832 = 0;
              v833 = 0.0;
              v834 = *((float *)&v1096 + 1);
              v835 = v1017 + 1;
              v836 = 1;
              v1026 = v827;
              v1029 = v697;
              v1020 = v830;
              v1023 = v829;
              while (1)
              {
                v837 = *(v835 - 1);
                if (v1048 <= v837)
                  break;
                v838 = *(v835 - 1);
                if (v774 <= v838)
                {
                  v983 = (unint64_t *)&v1117[40];
                  v837 = *(v835 - 1);
                  goto LABEL_1292;
                }
                v839 = v762 + 12 * v837;
                v688.i64[0] = *(_QWORD *)v839;
                v688.i32[2] = *(_DWORD *)(v839 + 8);
                v840 = (int8x16_t)vsubq_f32(v688, v697);
                v841 = (int8x16_t)vsubq_f32(vmlaq_n_f32(v697, (float32x4_t)v827, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v827.i8, *(float32x2_t *)v840.i8), v828, *(float32x2_t *)v840.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v840, v840, 8uLL), v829), v830).f32[0]), v688);
                v844 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v841.i8, 1);
                v842 = (float32x2_t)vextq_s8(v841, v841, 8uLL).u64[0];
                v843 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v841.i8, *(float32x2_t *)v841.i8), v844, *(float32x2_t *)v841.i8, 1), v842, v842).f32[0];
                v844.i32[0] = 0;
                if (v843 != 0.0 && v843 > 0.000001)
                {
                  v846 = v1038 + 36 * v838;
                  v844.f32[0] = 1.0 / sqrtf(v843);
                  v847 = (int8x16_t)vmulq_n_f32((float32x4_t)v841, v844.f32[0]);
                  v693.i32[0] = *(_DWORD *)(v846 + 8);
                  v694.i32[0] = *(_DWORD *)(v846 + 20);
                  v695.i32[0] = *(_DWORD *)(v846 + 32);
                  v848 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v846, *(float *)v847.i32), *(float32x2_t *)(v846 + 12), *(float32x2_t *)v847.i8, 1), *(float32x2_t *)(v846 + 24), (float32x4_t)v847, 2);
                  v849 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v693.f32, *(float32x2_t *)v847.i8), v694, *(float32x2_t *)v847.i8, 1);
                  v694 = (float32x2_t)vextq_s8(v847, v847, 8uLL).u64[0];
                  *(float32x2_t *)v693.f32 = vmla_f32(v849, v694, *(float32x2_t *)v695.f32);
                  if (v843 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v847.i8, v848), vmul_lane_f32(v844, *(float32x2_t *)v841.i8, 1), v848, 1), *(float32x2_t *)v693.f32, vmul_f32(v842, v844)).f32[0])v844.f32[0] = 0.0;
                  else
                    v844.f32[0] = 1.0;
                }
                if (v844.f32[0] <= v834)
                {
                  ++v832;
                  v688.f32[0] = expf(-v844.f32[0]);
                  v830 = v1020;
                  v829 = v1023;
                  v827 = v1026;
                  v697 = v1029;
                  v833 = v833 + v688.f32[0];
                }
                *(_QWORD *)v1117 = v835;
                *(_QWORD *)&v1117[24] = v835;
                *(_QWORD *)&v1117[48] = v836++;
                _ZF = v835++ == v763;
                if (_ZF)
                  goto LABEL_1102;
              }
              v983 = (unint64_t *)&v1117[16];
LABEL_1292:
              sub_22457354C(v983, v837);
            }
            v832 = 0;
            v833 = 0.0;
LABEL_1102:
            if (v833 <= v767)
            {
              v643 = v1057;
              v766 = v774;
              goto LABEL_1006;
            }
            *(_DWORD *)&object[8] = v697.i32[2];
            *(_QWORD *)object = v697.i64[0];
            *(_DWORD *)&object[20] = v1010.i32[2];
            *(_QWORD *)&object[12] = v1010.i64[0];
            v643 = v1057;
            v766 = v774;
            if (v1009)
            {
              *(float *)&v1111 = v833;
              v850 = v1034;
              if (BYTE8(v1097))
                goto LABEL_1109;
            }
            else
            {
              object[24] = 1;
              *(float *)&v1111 = v833;
              v850 = v1034;
              if (BYTE8(v1097))
              {
LABEL_1109:
                if (v832 >= (unint64_t)v1097)
                  goto LABEL_1131;
              }
            }
            if (BYTE4(v1098) && v833 >= *(float *)&v1098)
            {
LABEL_1131:
              v1106 = v820;
              operator delete(v820);
              memset(v1117, 0, 24);
              if (!v832)
              {
LABEL_1132:
                v853 = 0;
                v852 = 0;
                v851 = v1017;
                goto LABEL_1133;
              }
LABEL_1128:
              if (v832 >> 61)
                sub_22367C394();
              v851 = v1017;
              v852 = (char *)operator new(8 * v832);
              v853 = &v852[8 * v832];
LABEL_1133:
              *(_QWORD *)&object[32] = v852;
              *(_QWORD *)&v1110 = v852;
              *((_QWORD *)&v1110 + 1) = v853;
              *(_QWORD *)v1117 = v851;
              *(_QWORD *)&v1117[8] = v762;
              *(_QWORD *)&v1117[16] = v1048;
              *(_QWORD *)&v1117[24] = v851;
              *(_QWORD *)&v1117[32] = v1038;
              *(_QWORD *)&v1117[40] = v766;
              *(_QWORD *)&v1117[48] = 0;
              if (v851 == v763)
              {
                v855 = v852;
                v578 = v1031;
LABEL_1178:
                if (v852)
                  operator delete(v852);
                v643 = v1057;
                if ((v855 - v852) >> 3 >= v1002)
                  goto LABEL_1233;
LABEL_1181:
                if (*v1011 == 1)
                {
                  v888 = v1065;
                  if (v1065 == v1066)
                  {
                    v689.i32[0] = 0;
                    v889 = 0uLL;
                  }
                  else
                  {
                    v889 = 0uLL;
                    v689.i32[0] = 0;
                    do
                    {
                      v891 = *v888++;
                      v890 = v891;
                      v892 = sqrtf(*(float *)(v1008[24] + 36 * v891 + 32));
                      v893 = 1.0 / v892;
                      if (v892 <= 0.0)
                        v893 = 100.0;
                      v894 = v1013[21] + 12 * v890;
                      v692.i64[0] = *(_QWORD *)v894;
                      v895 = fminf(v893, 100.0);
                      v692.i32[2] = *(_DWORD *)(v894 + 8);
                      v889 = vaddq_f32(v889, vmulq_n_f32((float32x4_t)v692, v895));
                      *(float *)v689.i32 = *(float *)v689.i32 + v895;
                    }
                    while (v888 != v1066);
                  }
                  *(float32x2_t *)v922.i8 = *v998;
                  v922.i32[2] = v998[1].i32[0];
                  v923 = vdivq_f32(v889, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v689.i8, 0));
LABEL_1199:
                  *(_DWORD *)&v1117[8] = v923.i32[2];
                  *(_QWORD *)v1117 = v923.i64[0];
                  *(_DWORD *)&v1117[20] = v922.i32[2];
                  *(_QWORD *)&v1117[12] = v922.i64[0];
                  v924 = *v1011;
                  v1117[24] = *v1011;
                  v925 = v1067;
                  v926 = v1068;
                  *(_QWORD *)&v1117[32] = v1067;
                  *(_QWORD *)&v1117[40] = v1068;
                  v927 = v1069;
                  *(_QWORD *)&v1117[48] = v1069;
                  v1067 = 0;
                  v1068 = 0;
                  v1069 = 0;
                  v928 = v1074;
                  if ((unint64_t)v1074 >= *((_QWORD *)&v1074 + 1))
                  {
                    v931 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1074 - (_QWORD)v1073) >> 3);
                    v932 = v931 + 1;
                    if ((unint64_t)(v931 + 1) > 0x492492492492492)
                      sub_22316E078();
                    if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1074 + 1) - (_QWORD)v1073) >> 3) > v932)
                      v932 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*((_QWORD *)&v1074 + 1) - (_QWORD)v1073) >> 3);
                    if ((unint64_t)(0x6DB6DB6DB6DB6DB7
                                          * ((uint64_t)(*((_QWORD *)&v1074 + 1) - (_QWORD)v1073) >> 3)) >= 0x249249249249249)
                      v933 = 0x492492492492492;
                    else
                      v933 = v932;
                    *(_QWORD *)&object[32] = (char *)&v1074 + 8;
                    if (v933 > 0x492492492492492)
                      sub_223174E94();
                    v934 = (char *)operator new(56 * v933);
                    v935 = &v934[56 * v931];
                    *(_QWORD *)v935 = *(_QWORD *)v1117;
                    *(_QWORD *)object = v934;
                    *(_QWORD *)&object[8] = v935;
                    *((_DWORD *)v935 + 2) = *(_DWORD *)&v1117[8];
                    *(_QWORD *)(v935 + 12) = *v997;
                    *((_DWORD *)v935 + 5) = *(_DWORD *)(((unint64_t)v1117 | 0xC) + 8);
                    v935[24] = v924;
                    *((_QWORD *)v935 + 4) = v925;
                    *((_QWORD *)v935 + 5) = v926;
                    *((_QWORD *)v935 + 6) = v927;
                    memset(&v1117[32], 0, 24);
                    *(_QWORD *)&object[24] = &v934[56 * v933];
                    *(_QWORD *)&object[16] = v935 + 56;
                    sub_223F45854((uint64_t *)&v1073, object);
                    v936 = v1074;
                    sub_223F459AC((uint64_t)object);
                    v937 = *(_QWORD *)&v1117[32];
                    *(_QWORD *)&v1074 = v936;
                    v643 = v1057;
                    if (*(_QWORD *)&v1117[32])
                    {
                      v938 = *(_QWORD *)&v1117[40];
                      v939 = *(void **)&v1117[32];
                      if (*(_QWORD *)&v1117[40] != *(_QWORD *)&v1117[32])
                      {
                        do
                        {
                          if (*(_BYTE *)(v938 - 8))
                          {
                            v940 = *(_QWORD **)(v938 - 40);
                            if (v940)
                            {
                              do
                              {
                                v941 = (_QWORD *)*v940;
                                operator delete(v940);
                                v940 = v941;
                              }
                              while (v941);
                            }
                            v942 = *(void **)(v938 - 56);
                            *(_QWORD *)(v938 - 56) = 0;
                            v643 = v1057;
                            if (v942)
                              operator delete(v942);
                          }
                          v938 -= 80;
                        }
                        while (v938 != v937);
                        v939 = *(void **)&v1117[32];
                      }
                      *(_QWORD *)&v1117[40] = v937;
                      operator delete(v939);
                    }
                  }
                  else
                  {
                    v929 = *(_QWORD *)v1117;
                    *(_DWORD *)(v1074 + 8) = *(_DWORD *)&v1117[8];
                    *(_QWORD *)v928 = v929;
                    v930 = *v997;
                    *(_DWORD *)(v928 + 20) = *(_DWORD *)(((unint64_t)v1117 | 0xC) + 8);
                    *(_QWORD *)(v928 + 12) = v930;
                    *(_BYTE *)(v928 + 24) = v1117[24];
                    *(_QWORD *)(v928 + 40) = 0;
                    *(_QWORD *)(v928 + 48) = 0;
                    *(_QWORD *)(v928 + 32) = 0;
                    *(_OWORD *)(v928 + 32) = *(_OWORD *)&v1117[32];
                    *(_QWORD *)(v928 + 48) = *(_QWORD *)&v1117[48];
                    *(_QWORD *)&v1074 = v928 + 56;
                    v643 = v1057;
                  }
                  goto LABEL_1233;
                }
                v896 = v1065;
                v897 = v1066;
                if (v1065 != v1066)
                {
                  v898 = v1013[21];
                  v899 = 0xAAAAAAAAAAAAAAABLL * ((v1013[22] - v898) >> 2);
                  *(_QWORD *)v1117 = v1065;
                  *(_QWORD *)&v1117[8] = v898;
                  *(_QWORD *)&v1117[16] = v899;
                  v900 = 0uLL;
                  v901 = v1065;
                  do
                  {
                    v902 = *v901;
                    if (v899 <= *v901)
LABEL_1296:
                      sub_22457354C((unint64_t *)&v1117[16], v902);
                    v903 = v898 + 12 * v902;
                    v689.i64[0] = *(_QWORD *)v903;
                    v689.i32[2] = *(_DWORD *)(v903 + 8);
                    v900 = vaddq_f32(v900, (float32x4_t)v689);
                    *(_QWORD *)v1117 = ++v901;
                  }
                  while (v901 != v1066);
                  v904 = 0;
                  *(float *)v689.i32 = (float)(unint64_t)-(v1065 - v1066);
                  v909 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v689.i8, 0);
                  v1049 = v909;
                  v905 = vdivq_f32(v900, v909);
                  v900.i32[0] = 0;
                  v906 = 0;
                  v907 = 0;
                  *(_QWORD *)v1117 = v1065;
                  *(_QWORD *)&v1117[8] = v898;
                  *(_QWORD *)&v1117[16] = v899;
                  v908 = v1065;
                  v909.i32[0] = 0;
                  v910.i32[0] = 0;
                  v911 = 0;
                  v691.i32[0] = 0;
                  v912 = 0;
                  v695.i32[0] = 0;
                  do
                  {
                    v902 = *v908;
                    if (v899 <= *v908)
                      goto LABEL_1296;
                    v913 = v898 + 12 * v902;
                    v696.i64[0] = *(_QWORD *)v913;
                    v696.i32[2] = *(_DWORD *)(v913 + 8);
                    v914 = (int8x16_t)vsubq_f32(v696, v905);
                    *(float32x2_t *)v915.f32 = vmul_n_f32(*(float32x2_t *)v914.i8, *(float *)v914.i32);
                    v916 = (float32x4_t)vextq_s8(v914, v914, 8uLL);
                    *(float32x2_t *)&v915.u32[2] = vmul_f32(*(float32x2_t *)v916.f32, *(float32x2_t *)v914.i8);
                    *(float32x2_t *)v917.f32 = vmul_lane_f32(*(float32x2_t *)v914.i8, *(float32x2_t *)v914.i8, 1);
                    *(float32x2_t *)&v917.u32[2] = vmul_lane_f32(*(float32x2_t *)v916.f32, *(float32x2_t *)v914.i8, 1);
                    *(float32x2_t *)v916.f32 = vmul_laneq_f32(*(float32x2_t *)v914.i8, (float32x4_t)v914, 2);
                    v696 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v914, (float32x4_t)v914), 2);
                    v916.i32[2] = v696.i32[0];
                    v900.i32[1] = v906;
                    v900.i32[2] = v907;
                    v909.i32[1] = v910.i32[0];
                    v909.i32[2] = v911;
                    v691.i32[1] = v912;
                    v691.i32[2] = v695.i32[0];
                    v900 = vaddq_f32(v900, v915);
                    v909 = vaddq_f32(v909, v917);
                    v691 = vaddq_f32(v691, v916);
                    v911 = v909.i32[2];
                    v910.i32[0] = v909.i32[1];
                    v907 = v900.i32[2];
                    v906 = v900.i32[1];
                    v695.i32[0] = v691.i32[2];
                    v912 = v691.i32[1];
                    ++v904;
                    *(_QWORD *)v1117 = ++v908;
                  }
                  while (v908 != v1066);
                  v905.f32[0] = (float)v904;
                  v918 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v905.f32, 0);
                  v910.i32[1] = v909.i32[2];
                  v910.i64[1] = v691.i64[0];
                  v900.i64[1] = __PAIR64__(v909.u32[0], v900.u32[2]);
                  v1121[12] = 0;
                  *(_QWORD *)&v1121[4] = 0x300000003;
                  *(float32x4_t *)object = vdivq_f32(v900, v918);
                  *(float32x4_t *)&object[16] = vdivq_f32(v910, v918);
                  *(_DWORD *)&object[32] = vdivq_f32(v695, v905).u32[0];
                  sub_223CD406C((uint64_t)v1117);
                  if (v1121[12])
                  {
                    v921 = v1119;
                    v995 = *(unsigned __int16 *)((char *)&v1119 + 1) | (HIBYTE(v1119) << 16);
                    LODWORD(v990) = v1120;
                    v919.i32[0] = *(_DWORD *)&v1117[44];
                    v987 = v919;
                    v919.i32[0] = v1118;
                    __dst = *(float32x2_t *)v919.f32;
                    v919.i32[0] = HIDWORD(v1118);
                    v992 = (int32x4_t)v919;
                  }
                  else
                  {
                    v921 = 0;
                  }
                  *(_QWORD *)v1117 = v896;
                  *(_QWORD *)&v1117[8] = v898;
                  v943 = 0uLL;
                  *(_QWORD *)&v1117[16] = v899;
                  do
                  {
                    v902 = *v896;
                    if (v899 <= *v896)
                      goto LABEL_1296;
                    v944 = v898 + 12 * v902;
                    v919.i64[0] = *(_QWORD *)v944;
                    v919.i32[2] = *(_DWORD *)(v944 + 8);
                    v943 = vaddq_f32(v943, v919);
                    *(_QWORD *)v1117 = ++v896;
                  }
                  while (v896 != v897);
                  if (v1121[12])
                  {
                    v945 = v921 | (v995 << 8);
                    v643 = v1057;
                    if (*(float *)&v945 != 0.0)
                    {
                      v682 = v1012;
                      if (fabsf(*(float *)&v945) <= 0.000001 || (float)(*(float *)&v990 / *(float *)&v945) < 0.01)
                        goto LABEL_1234;
                      v946 = atomic_load((unsigned __int8 *)&qword_25578F140);
                      if ((v946 & 1) == 0)
                      {
                        v1039 = v943;
                        v952 = __cxa_guard_acquire(&qword_25578F140);
                        v943 = v1039;
                        v682 = v1012;
                        if (v952)
                        {
                          dword_25578F138 = 1065098332;
                          __cxa_guard_release(&qword_25578F140);
                          v943 = v1039;
                          v682 = v1012;
                        }
                      }
                      v947 = atomic_load((unsigned __int8 *)&qword_25578F150);
                      if ((v947 & 1) == 0)
                      {
                        v1040 = v943;
                        v953 = __cxa_guard_acquire(&qword_25578F150);
                        v943 = v1040;
                        v682 = v1012;
                        if (v953)
                        {
                          dword_25578F148 = 1043452119;
                          __cxa_guard_release(&qword_25578F150);
                          v943 = v1040;
                          v682 = v1012;
                        }
                      }
                      v948 = fabsf(*(float *)v992.i32);
                      if (v948 >= *(float *)&dword_25578F138 || v948 > *(float *)&dword_25578F148)
                      {
LABEL_1234:
                        v768 = v1065;
                        if (!v1065)
                          goto LABEL_996;
LABEL_995:
                        v1066 = v768;
                        operator delete(v768);
                        v682 = v1012;
                        goto LABEL_996;
                      }
                      v949.i64[1] = v987.i64[1];
                      v950.i64[0] = v987.i64[0];
                      v950.u64[1] = (unint64_t)__dst;
                      v923 = vdivq_f32(v943, v1049);
                      v951 = (int8x16_t)vuzp1q_s32(v950, v992);
                      *(float32x2_t *)v920.f32 = *v998;
                      v943.i32[0] = v998[1].i32[0];
                      *(float32x2_t *)v949.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v987.f32, *v998), __dst, *v998, 1), *(float32x2_t *)v943.f32, *(float32x2_t *)v992.i8);
                      v920.i32[0] = 0;
                      v922 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v920, v949), 0), (int8x16_t)vnegq_f32((float32x4_t)v951), v951);
                      goto LABEL_1199;
                    }
                  }
                  else
                  {
                    v643 = v1057;
                  }
                }
LABEL_1233:
                v682 = v1012;
                goto LABEL_1234;
              }
              v854 = 0;
              v855 = v852;
              v856 = v851;
              v578 = v1031;
              while (2)
              {
                v857 = *v856;
                if (*(_QWORD *)&v1117[16] <= *v856)
                {
                  v985 = (unint64_t *)&v1117[16];
LABEL_1305:
                  sub_22457354C(v985, v857);
                }
                if (*(_QWORD *)&v1117[40] <= *v851)
                {
                  v985 = (unint64_t *)&v1117[40];
                  v857 = *v851;
                  goto LABEL_1305;
                }
                v858 = *(_QWORD *)&v1117[8] + 12 * v857;
                v689.i64[0] = *(_QWORD *)&object[12];
                v689.i32[2] = *(_DWORD *)&object[20];
                v690.i64[0] = *(_QWORD *)v858;
                v690.i32[2] = *(_DWORD *)(v858 + 8);
                v859 = (int8x16_t)vsubq_f32((float32x4_t)v689, *(float32x4_t *)object);
                v860 = (int8x16_t)vsubq_f32(v690, *(float32x4_t *)object);
                v861 = (float32x2_t)vextq_s8(v859, v859, 8uLL).u64[0];
                v862 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v860.i8, 1);
                v863 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v859.i8, *(float32x2_t *)v860.i8), v862, *(float32x2_t *)v859.i8, 1);
                v692 = vextq_s8(v860, v860, 8uLL);
                v689 = (int8x16_t)vsubq_f32(vmlaq_n_f32(*(float32x4_t *)object, (float32x4_t)v859, vdiv_f32(vmla_f32(v863, *(float32x2_t *)v692.i8, v861), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v859.i8, *(float32x2_t *)v859.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v859.i8, 1), *(float32x2_t *)v859.i8, 1), v861, v861)).f32[0]), v690);
                v865 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v689.i8, 1);
                v690 = (float32x4_t)vextq_s8(v689, v689, 8uLL);
                v864 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v689.i8, *(float32x2_t *)v689.i8), v865, *(float32x2_t *)v689.i8, 1), *(float32x2_t *)v690.f32, *(float32x2_t *)v690.f32).f32[0];
                v865.i32[0] = 0;
                if (v864 != 0.0 && v864 > 0.000001)
                {
                  v867 = *(_QWORD *)&v1117[32] + 36 * *v851;
                  v865.f32[0] = 1.0 / sqrtf(v864);
                  v692 = (int8x16_t)vmulq_n_f32((float32x4_t)v689, v865.f32[0]);
                  v861.i32[0] = *(_DWORD *)(v867 + 8);
                  v862.i32[0] = *(_DWORD *)(v867 + 20);
                  v695.i32[0] = *(_DWORD *)(v867 + 32);
                  v868 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v867, *(float *)v692.i32), *(float32x2_t *)(v867 + 12), *(float32x2_t *)v692.i8, 1), *(float32x2_t *)(v867 + 24), (float32x4_t)v692, 2);
                  *(float32x2_t *)v689.i8 = vmul_lane_f32(v865, *(float32x2_t *)v689.i8, 1);
                  if (v864 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v692.i8, v868), *(float32x2_t *)v689.i8, v868, 1), vmla_f32(vmla_lane_f32(vmul_f32(v861, *(float32x2_t *)v692.i8), v862, *(float32x2_t *)v692.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v692, v692, 8uLL), *(float32x2_t *)v695.f32), vmul_f32(*(float32x2_t *)v690.f32, v865)).f32[0])v865.f32[0] = 0.0;
                  else
                    v865.f32[0] = 1.0;
                }
                if (v865.f32[0] <= *((float *)&v1096 + 1))
                {
                  if (v855 < v853)
                  {
                    *(_QWORD *)v855 = v854;
                    v869 = (uint64_t)(v855 + 8);
                    goto LABEL_1163;
                  }
                  v870 = (v855 - v852) >> 3;
                  v871 = v870 + 1;
                  if ((unint64_t)(v870 + 1) >> 61)
                    sub_22367C394();
                  if ((v853 - v852) >> 2 > v871)
                    v871 = (v853 - v852) >> 2;
                  if ((unint64_t)(v853 - v852) >= 0x7FFFFFFFFFFFFFF8)
                    v872 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v872 = v871;
                  if (v872)
                  {
                    if (v872 >> 61)
                      sub_223174E94();
                    v873 = v872;
                    v874 = operator new(8 * v872);
                    v872 = v873;
                    v875 = &v874[8 * v870];
                    *(_QWORD *)v875 = v854;
                    v869 = (uint64_t)(v875 + 8);
                    v876 = v855 - v852;
                    if (v855 != v852)
                    {
LABEL_1157:
                      v877 = v876 - 8;
                      if (v877 < 0x168
                        || (v881 = (v855 - 8 - v852) & 0xFFFFFFFFFFFFFFF8,
                            &v874[v855 - v852 - 8 - v881] > &v874[v855 - v852 - 8])
                        || &v855[-v881 - 8] > v855 - 8
                        || (unint64_t)(v852 - v874) < 0x20)
                      {
                        v878 = v855;
                        v578 = v1031;
                      }
                      else
                      {
                        v882 = (v877 >> 3) + 1;
                        v883 = 8 * (v882 & 0x3FFFFFFFFFFFFFFCLL);
                        v878 = &v855[-v883];
                        v875 -= v883;
                        v884 = (int8x16_t *)&v874[8 * v870 - 16];
                        v885 = (int8x16_t *)(v855 - 16);
                        v886 = v882 & 0x3FFFFFFFFFFFFFFCLL;
                        v578 = v1031;
                        do
                        {
                          v689 = v885[-1];
                          v887 = *v885;
                          v884[-1] = v689;
                          *v884 = v887;
                          v884 -= 2;
                          v885 -= 2;
                          v886 -= 4;
                        }
                        while (v886);
                        if (v882 == (v882 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_1160:
                          v853 = &v874[8 * v872];
                          *(_QWORD *)&object[32] = v875;
                          *((_QWORD *)&v1110 + 1) = v853;
                          if (v852)
                            goto LABEL_1161;
                          goto LABEL_1162;
                        }
                      }
                      do
                      {
                        v879 = *((_QWORD *)v878 - 1);
                        v878 -= 8;
                        *((_QWORD *)v875 - 1) = v879;
                        v875 -= 8;
                      }
                      while (v878 != v852);
                      goto LABEL_1160;
                    }
                  }
                  else
                  {
                    v874 = 0;
                    v875 = (char *)(8 * v870);
                    *(_QWORD *)(8 * v870) = v854;
                    v869 = 8 * v870 + 8;
                    v876 = v855 - v852;
                    if (v855 != v852)
                      goto LABEL_1157;
                  }
                  v578 = v1031;
                  v853 = &v874[8 * v872];
                  *(_QWORD *)&object[32] = v875;
                  *((_QWORD *)&v1110 + 1) = v853;
                  if (v852)
                  {
LABEL_1161:
                    v880 = v853;
                    operator delete(v852);
                    v853 = v880;
                    v856 = *(unint64_t **)v1117;
                    v851 = *(unint64_t **)&v1117[24];
                  }
LABEL_1162:
                  v852 = v875;
LABEL_1163:
                  *(_QWORD *)&v1110 = v869;
                  v854 = *(_QWORD *)&v1117[48];
                  v855 = (char *)v869;
                }
                ++v856;
                ++v851;
                *(_QWORD *)v1117 = v856;
                *(_QWORD *)&v1117[24] = v851;
                *(_QWORD *)&v1117[48] = ++v854;
                if (v856 == v1014 && v851 == v1014)
                  goto LABEL_1178;
                continue;
              }
            }
            v1009 = 1;
            v767 = v833;
            v1007 = v832;
            v1106 = v820;
            operator delete(v820);
            v765 = v850 + 1;
            if (v765 == 100)
            {
LABEL_1126:
              v832 = v1007;
              if (v1009)
              {
                memset(v1117, 0, 24);
                if (!v1007)
                  goto LABEL_1132;
                goto LABEL_1128;
              }
              goto LABEL_1130;
            }
          }
        }
      }
LABEL_994:
      v682 = v1012;
      v768 = v1017;
      if (v1017)
        goto LABEL_995;
LABEL_996:
      v769 = (char *)v1067;
      if (v1067)
      {
        v770 = (char *)v1068;
        v681 = v1067;
        if (v1068 != v1067)
        {
          do
          {
            if (*(v770 - 8))
            {
              v771 = (_QWORD *)*((_QWORD *)v770 - 5);
              if (v771)
              {
                do
                {
                  v772 = (_QWORD *)*v771;
                  operator delete(v771);
                  v771 = v772;
                }
                while (v772);
              }
              v773 = (void *)*((_QWORD *)v770 - 7);
              *((_QWORD *)v770 - 7) = 0;
              v643 = v1057;
              if (v773)
                operator delete(v773);
            }
            v770 -= 80;
          }
          while (v770 != v769);
          v681 = v1067;
        }
        v1068 = v769;
        operator delete(v681);
        v682 = v1012;
      }
      v680 = v682 + 3;
      if (v680 == (unsigned __int16 **)v642)
      {
        if (!v643)
          goto LABEL_1247;
        do
        {
          v955 = v642 - 24;
          v954 = (void *)*((_QWORD *)v642 - 3);
          if (v954)
          {
            *((_QWORD *)v642 - 2) = v954;
            operator delete(v954);
          }
          v642 -= 24;
        }
        while (v955 != v643);
        goto LABEL_1246;
      }
    }
    while (1)
    {
      v700 = *v683;
      v701 = *(_QWORD *)v1043;
      v702 = *(_QWORD *)v1043 + 80 * *v683;
      if (v687 < (_OWORD *)v1069)
      {
        v703 = *(_OWORD *)v702;
        *((_QWORD *)v687 + 2) = *(_QWORD *)(v702 + 16);
        *v687 = v703;
        *((_BYTE *)v687 + 24) = 0;
        *((_BYTE *)v687 + 72) = 0;
        if (*(_BYTE *)(v701 + 80 * v700 + 72))
        {
          v704 = v701 + 80 * v700;
          *(_OWORD *)((char *)v687 + 24) = 0u;
          *(_OWORD *)((char *)v687 + 40) = 0u;
          *((_DWORD *)v687 + 14) = *(_DWORD *)(v704 + 56);
          v705 = *(_QWORD *)(v704 + 32);
          if (v705 == 1)
          {
            v705 = 2;
            goto LABEL_906;
          }
          if ((v705 & (v705 - 1)) != 0)
          {
            v705 = std::__next_prime(*(_QWORD *)(v704 + 32));
            v737 = (int8x8_t)v687[2];
            v738 = v705 >= *(_QWORD *)&v737;
            if (v705 > *(_QWORD *)&v737)
              goto LABEL_906;
          }
          else
          {
            v737 = 0;
            v738 = 1;
            if (v705)
              goto LABEL_906;
          }
          if (!v738)
          {
            v740 = vcvtps_u32_f32((float)*((unint64_t *)v687 + 6) / *((float *)v687 + 14));
            if (*(_QWORD *)&v737 < 3uLL
              || (v741 = (uint8x8_t)vcnt_s8(v737), v741.i16[0] = vaddlv_u8(v741), v741.u32[0] > 1uLL))
            {
              v740 = std::__next_prime(v740);
            }
            else
            {
              v742 = 1 << -(char)__clz(v740 - 1);
              if (v740 >= 2)
                v740 = v742;
            }
            if (v705 <= v740)
              v705 = v740;
            if (v705 < *(_QWORD *)&v737)
LABEL_906:
              sub_2231B0668((uint64_t)v687 + 24, v705);
          }
          for (ii = *(int **)(v704 + 40); ii; ii = *(int **)ii)
            sub_223330DAC((uint64_t)v687 + 24, ii + 4, (_OWORD *)ii + 1);
          *((_QWORD *)v687 + 8) = *(_QWORD *)(v701 + 80 * v700 + 64);
          *((_BYTE *)v687 + 72) = 1;
        }
        v687 += 5;
        v643 = v1057;
        v699 = v1047;
        goto LABEL_901;
      }
      v707 = v1067;
      v708 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v687 - (_BYTE *)v1067) >> 4);
      v709 = v708 + 1;
      if (v708 + 1 > 0x333333333333333)
        sub_223323BA8();
      if (0x999999999999999ALL * ((v1069 - (_BYTE *)v1067) >> 4) > v709)
        v709 = 0x999999999999999ALL * ((v1069 - (_BYTE *)v1067) >> 4);
      v710 = 0xCCCCCCCCCCCCCCCDLL * ((v1069 - (_BYTE *)v1067) >> 4) >= 0x199999999999999 ? 0x333333333333333 : v709;
      *(_QWORD *)&v1117[32] = &v1069;
      if (v710)
      {
        if (v710 > 0x333333333333333)
          sub_223174E94();
        v711 = operator new(80 * v710);
      }
      else
      {
        v711 = 0;
      }
      v712 = (char *)&v711[10 * v708];
      *(_QWORD *)v1117 = v711;
      *(_QWORD *)&v1117[8] = v712;
      *(_QWORD *)&v1117[16] = v712;
      *(_QWORD *)&v1117[24] = &v711[10 * v710];
      v713 = *(_OWORD *)v702;
      *((_QWORD *)v712 + 2) = *(_QWORD *)(v702 + 16);
      v712[24] = 0;
      v714 = (uint64_t)(v712 + 24);
      *(_OWORD *)v712 = v713;
      v712[72] = 0;
      v715 = v712 + 72;
      if (*(_BYTE *)(v701 + 80 * v700 + 72))
        break;
      v719 = (char *)&v711[10 * v708];
LABEL_928:
      v720 = v719 + 80;
      *(_QWORD *)&v1117[16] = v720;
      v578 = v1031;
      v643 = v1057;
      v699 = v1047;
      if (v687 == v707)
      {
        v687 = v720;
        v732 = v707;
      }
      else
      {
        v721 = 0;
        do
        {
          v723 = &v712[v721 * 16];
          v724 = &v687[v721];
          v725 = v687[v721 - 5];
          *((_QWORD *)v723 - 8) = *(_QWORD *)&v687[v721 - 4];
          *((_OWORD *)v723 - 5) = v725;
          *(v723 - 56) = 0;
          *(v723 - 8) = 0;
          if (BYTE8(v687[v721 - 1]))
          {
            v726 = *((_QWORD *)v724 - 7);
            *((_QWORD *)v724 - 7) = 0;
            *((_QWORD *)v723 - 7) = v726;
            *((_QWORD *)v723 - 6) = *((_QWORD *)v724 - 6);
            *((_QWORD *)v724 - 6) = 0;
            v729 = *((_QWORD *)v724 - 5);
            v727 = (char *)v724 - 40;
            v728 = v729;
            *((_QWORD *)v723 - 5) = v729;
            v730 = *((_QWORD *)v727 + 1);
            *((_QWORD *)v723 - 4) = v730;
            *((_DWORD *)v723 - 6) = *((_DWORD *)v727 + 4);
            if (v730)
            {
              v722 = *(_QWORD *)(v728 + 8);
              v731 = *((_QWORD *)v723 - 6);
              if ((v731 & (v731 - 1)) != 0)
              {
                if (v722 >= v731)
                  v722 %= v731;
              }
              else
              {
                v722 &= v731 - 1;
              }
              *(_QWORD *)(v726 + 8 * v722) = v723 - 40;
              *(_QWORD *)v727 = 0;
              *((_QWORD *)v727 + 1) = 0;
            }
            *(_QWORD *)&v712[v721 * 16 - 16] = *(_QWORD *)&v687[v721 - 1];
            *(v723 - 8) = 1;
          }
          v721 -= 5;
        }
        while (&v687[v721] != v707);
        v732 = v1067;
        v707 = v1068;
        v712 += v721 * 16;
        v687 = *(_OWORD **)&v1117[16];
      }
      v1067 = v712;
      v1068 = v687;
      v733 = v1069;
      v1069 = *(char **)&v1117[24];
      *(_QWORD *)&v1117[24] = v733;
      *(_QWORD *)&v1117[8] = v732;
      *(_QWORD *)v1117 = v732;
      if (v707 == v732)
      {
        if (!v707)
          goto LABEL_901;
      }
      else
      {
        do
        {
          *(_QWORD *)&v1117[16] = v707 - 5;
          if (*((_BYTE *)v707 - 8))
          {
            v734 = (_QWORD *)*((_QWORD *)v707 - 5);
            if (v734)
            {
              do
              {
                v735 = (_QWORD *)*v734;
                operator delete(v734);
                v734 = v735;
              }
              while (v735);
            }
            v736 = (void *)*((_QWORD *)v707 - 7);
            *((_QWORD *)v707 - 7) = 0;
            v643 = v1057;
            if (v736)
              operator delete(v736);
          }
          v707 = *(_OWORD **)&v1117[16];
        }
        while (*(_OWORD **)&v1117[16] != v732);
        v707 = *(_OWORD **)v1117;
        if (!*(_QWORD *)v1117)
          goto LABEL_901;
      }
      operator delete(v707);
LABEL_901:
      v1068 = v687;
      if (++v683 == v699)
        goto LABEL_895;
    }
    v716 = v701 + 80 * v700;
    *(_OWORD *)v714 = 0u;
    *(_OWORD *)(v712 + 40) = 0u;
    *((_DWORD *)v712 + 14) = *(_DWORD *)(v716 + 56);
    v717 = *(_QWORD *)(v716 + 32);
    if (v717 == 1)
    {
      v717 = 2;
LABEL_923:
      sub_2231B0668(v714, v717);
LABEL_924:
      for (jj = *(int **)(v716 + 40); jj; jj = *(int **)jj)
        sub_223330DAC(v714, jj + 4, (_OWORD *)jj + 1);
      v711[10 * v708 + 8] = *(_QWORD *)(v701 + 80 * v700 + 64);
      *v715 = 1;
      v687 = v1068;
      v707 = v1067;
      v719 = *(char **)&v1117[16];
      v712 = *(char **)&v1117[8];
      goto LABEL_928;
    }
    if ((v717 & (v717 - 1)) != 0)
    {
      v717 = std::__next_prime(*(_QWORD *)(v716 + 32));
      v1037 = *(int8x8_t *)(v714 + 8);
      v739 = v717 >= *(_QWORD *)&v1037;
      if (v717 > *(_QWORD *)&v1037)
        goto LABEL_923;
    }
    else
    {
      v1037 = 0;
      v739 = 1;
      if (v717)
        goto LABEL_923;
    }
    if (v739)
      goto LABEL_924;
    v743 = vcvtps_u32_f32((float)*(unint64_t *)(v714 + 24) / *(float *)(v714 + 32));
    if (*(_QWORD *)&v1037 < 3uLL
      || (v744 = (uint8x8_t)vcnt_s8(v1037), v744.i16[0] = vaddlv_u8(v744), v744.u32[0] > 1uLL))
    {
      v743 = std::__next_prime(v743);
    }
    else
    {
      v745 = 1 << -(char)__clz(v743 - 1);
      if (v743 >= 2)
        v743 = v745;
    }
    if (v717 <= v743)
      v717 = v743;
    if (v717 >= *(_QWORD *)&v1037)
      goto LABEL_924;
    goto LABEL_923;
  }
LABEL_1250:
  *(_QWORD *)v578 = 0;
  *((_QWORD *)v578 + 1) = 0;
  *((_QWORD *)v578 + 2) = 0;
  v957 = (_BYTE *)v1013[21];
  v956 = (_BYTE *)v1013[22];
  v958 = v956 - v957;
  if (v956 == v957)
  {
    v959 = 0;
    v961 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v958 >> 2) >= 0x1555555555555556)
      sub_22316E078();
    v959 = (char *)operator new(v958);
    *(_QWORD *)v578 = v959;
    *((_QWORD *)v578 + 1) = v959;
    *((_QWORD *)v578 + 2) = &v959[4 * (v958 >> 2)];
    v960 = 12 * ((v958 - 12) / 0xCuLL) + 12;
    memcpy(v959, v957, v960);
    v961 = &v959[v960];
    *((_QWORD *)v578 + 1) = &v959[v960];
  }
  *((_QWORD *)v578 + 3) = 0;
  *((_QWORD *)v578 + 4) = 0;
  *((_QWORD *)v578 + 5) = 0;
  v963 = (_BYTE *)v1008[24];
  v962 = (_BYTE *)v1008[25];
  v964 = v962 - v963;
  if (v962 != v963)
  {
    if (0x8E38E38E38E38E39 * (v964 >> 2) >= 0x71C71C71C71C71DLL)
      sub_22316E078();
    v965 = (char *)operator new(v964);
    *((_QWORD *)v578 + 3) = v965;
    *((_QWORD *)v578 + 4) = v965;
    *((_QWORD *)v578 + 5) = &v965[4 * (v964 >> 2)];
    memcpy(v965, v963, 36 * ((v964 - 36) / 0x24uLL) + 36);
    *((_QWORD *)v578 + 4) = &v965[36 * ((v964 - 36) / 0x24uLL) + 36];
  }
  v966 = (uint64_t)v1073;
  *((_QWORD *)v578 + 6) = v1073;
  v967 = v1074;
  *(_OWORD *)((char *)v578 + 56) = v1074;
  v1074 = 0uLL;
  v1073 = 0;
  v968 = v1085;
  *((_QWORD *)v578 + 9) = v1085;
  v969 = v1086;
  v578[5] = v1086;
  v1085 = 0;
  v1086 = 0uLL;
  v1095 = 0x6DB6DB6DB6DB6DB7 * ((v967 - v966) >> 3);
  v1094 = 0xAAAAAAAAAAAAAAABLL * ((v961 - v959) >> 2);
  v1093 = 0xAAAAAAAAAAAAAAABLL * ((v969 - (uint64_t)v968) >> 3);
  *(_QWORD *)v1117 = &v1073;
  sub_223F45A94((void ***)v1117);
  v970 = (uint64_t *)v1103;
  if (v1103)
  {
    v971 = (uint64_t *)v1104;
    v972 = v1103;
    if ((void *)v1104 != v1103)
    {
      do
      {
        v971 -= 7;
        sub_223F45688(v971);
      }
      while (v971 != v970);
      v972 = v1103;
    }
    *(_QWORD *)&v1104 = v970;
    operator delete(v972);
  }
  if (v1085)
  {
    *(_QWORD *)&v1086 = v1085;
    operator delete(v1085);
  }
  if (v1062)
  {
    if (v1064 != v1062)
    {
      v973 = v1064;
      do
      {
        v975 = (void *)*((_QWORD *)v973 - 3);
        v973 -= 24;
        v974 = v975;
        if (v975)
        {
          *((_QWORD *)v1064 - 2) = v974;
          operator delete(v974);
        }
        v1064 = v973;
      }
      while (v973 != v1062);
    }
    operator delete(v1062);
  }
  *(_QWORD *)v1117 = &v1087;
  sub_223F4405C((void ***)v1117);
  if (v1001)
    operator delete(v1001);
  v976 = (_QWORD *)v1091;
  if ((_QWORD)v1091)
  {
    do
    {
      v981 = (_QWORD *)*v976;
      v982 = (void *)v976[3];
      if (v982)
      {
        v976[4] = v982;
        operator delete(v982);
      }
      operator delete(v976);
      v976 = v981;
    }
    while (v981);
  }
  v977 = (void *)v1090;
  *(_QWORD *)&v1090 = 0;
  if (v977)
    operator delete(v977);
  v7 = v1125;
  if (!v1125)
    sub_223198474();
  v73 = *(uint64_t (***)())v1125;
LABEL_1278:
  ((void (*)(_QWORD *, uint64_t))v73[6])(v7, v8);
  result = v1125;
  if (v1125 == v1124)
  {
    v980 = 4;
    result = v1124;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v980))(result, v978);
  }
  else if (v1125)
  {
    v980 = 5;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 8 * v980))(result, v978);
  }
  return result;
}

void sub_223F43018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE028);
  _Unwind_Resume(a1);
}

void sub_223F43030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char *a70;
  char *a71;
  uint64_t v71;
  void *v73;
  char *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  char *v81;
  void *v82;
  void *v83;

  if (LOBYTE(STACK[0x3C8]) && SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x320]);
  sub_223F43B34((uint64_t)&STACK[0x450]);
  sub_223F43B94((uint64_t)&STACK[0x260]);
  v73 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v73;
    operator delete(v73);
    v74 = a70;
    if (!a70)
      goto LABEL_10;
  }
  else
  {
    v74 = a70;
    if (!a70)
      goto LABEL_10;
  }
  if (a71 != v74)
  {
    v81 = a71;
    do
    {
      v83 = (void *)*((_QWORD *)v81 - 3);
      v81 -= 24;
      v82 = v83;
      if (v83)
      {
        *((_QWORD *)a71 - 2) = v82;
        operator delete(v82);
      }
      a71 = v81;
    }
    while (v81 != a70);
  }
  operator delete(a70);
LABEL_10:
  STACK[0x2B0] = (unint64_t)&STACK[0x2C8];
  sub_223F4405C((void ***)&STACK[0x2B0]);
  if (a32)
    operator delete(a32);
  v75 = (_QWORD *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    do
    {
      v78 = (_QWORD *)*v75;
      v79 = (void *)v75[3];
      if (v79)
      {
        v75[4] = v79;
        operator delete(v79);
      }
      operator delete(v75);
      v75 = v78;
    }
    while (v78);
  }
  v76 = (void *)STACK[0x2E0];
  STACK[0x2E0] = 0;
  if (v76)
    operator delete(v76);
  v77 = *(_QWORD *)(v71 - 176);
  if (!v77)
    sub_223198474();
  (*(void (**)(uint64_t))(*(_QWORD *)v77 + 48))(v77);
  v80 = *(_QWORD *)(v71 - 176);
  if (v80 == v71 - 200)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v71 - 200) + 32))(v71 - 200);
    _Unwind_Resume(a1);
  }
  if (v80)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 40))(v80);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223F43A40(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE038);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE038))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE030);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE038);
  }
  *a1 = qword_2540CE030;
}

void sub_223F43ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE038);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE038);
  _Unwind_Resume(a1);
}

uint64_t sub_223F43B34(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 112))
  {
    v2 = *(void **)(a1 + 88);
    if (v2)
    {
      *(_QWORD *)(a1 + 96) = v2;
      operator delete(v2);
    }
    v3 = *(_QWORD **)(a1 + 56);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v5)
      operator delete(v5);
  }
  return a1;
}

uint64_t sub_223F43B94(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD **)(a1 + 40);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v4)
      operator delete(v4);
  }
  return a1;
}

uint64_t sub_223F43BE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 != v2)
    {
      do
      {
        if (*(_BYTE *)(v3 - 8))
        {
          v5 = *(_QWORD **)(v3 - 40);
          if (v5)
          {
            do
            {
              v6 = (_QWORD *)*v5;
              operator delete(v5);
              v5 = v6;
            }
            while (v6);
          }
          v7 = *(void **)(v3 - 56);
          *(_QWORD *)(v3 - 56) = 0;
          if (v7)
            operator delete(v7);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_223F43C74(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
        {
          v5 = (_QWORD *)*((_QWORD *)v3 - 5);
          if (v5)
          {
            do
            {
              v6 = (_QWORD *)*v5;
              operator delete(v5);
              v5 = v6;
            }
            while (v6);
          }
          v7 = (void *)*((_QWORD *)v3 - 7);
          *((_QWORD *)v3 - 7) = 0;
          if (v7)
            operator delete(v7);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t **sub_223F43D04(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 7;
        sub_223F45688(v3);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_223F43D64(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_223F44048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223EB996C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F4405C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void *v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (void **)v1[1];
      do
      {
        v9 = (char *)*(v6 - 3);
        v6 -= 3;
        v8 = v9;
        if (v9)
        {
          v10 = (char *)*(v4 - 2);
          v7 = v8;
          if (v10 != v8)
          {
            do
            {
              if (*(v10 - 8))
              {
                v11 = (_QWORD *)*((_QWORD *)v10 - 5);
                if (v11)
                {
                  do
                  {
                    v12 = (_QWORD *)*v11;
                    operator delete(v11);
                    v11 = v12;
                  }
                  while (v12);
                }
                v13 = (void *)*((_QWORD *)v10 - 7);
                *((_QWORD *)v10 - 7) = 0;
                if (v13)
                  operator delete(v13);
              }
              v10 -= 80;
            }
            while (v10 != v8);
            v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_223F4414C(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[7];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)a1[5];
  a1[5] = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_223F441A4(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  float v15;
  int v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  float *i;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v28;
  float *v29;
  unint64_t v30;
  int v31;
  float v32;
  float *v34;
  unint64_t v35;
  float *v37;
  int v38;
  BOOL v39;
  float *v41;
  int v42;
  float v43;
  int v45;
  uint64_t v46;
  float *v47;
  float v48;
  float v49;
  int v51;
  BOOL v52;
  BOOL v54;
  float *v55;
  float v56;
  float v57;
  float *v59;
  int v60;
  BOOL v61;
  __int128 *v62;
  __int128 *v63;
  float *v64;
  int v65;
  int v66;
  BOOL v67;
  __int128 v68;
  int v69;
  int v70;
  __int128 v71;
  int v72;
  float *v73;
  BOOL v75;
  uint64_t v76;
  float *v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  float *v85;
  int v86;
  int64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  float *v92;
  int v93;
  BOOL v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v108;
  float *v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  BOOL v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  int v119;
  float v120;
  BOOL v121;
  uint64_t v122;
  unint64_t v123;
  float *v124;
  float *v126;
  int v127;
  float v128;
  BOOL v129;
  uint64_t v130;
  float *j;
  int v132;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;

BOOL sub_223F44B00(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float *v6;
  float *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v18;
  int v19;
  BOOL v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  float *v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = a2 - 4;
      v19 = *((_DWORD *)a2 - 4);
      if (v19 < *(_DWORD *)a1 || (v19 == *(_DWORD *)a1 ? (v20 = *(a2 - 1) < a1[3]) : (v20 = 0), v20))
      {
        v21 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)v18 = v21;
      }
      return result;
    case 3:
      sub_2236B6494(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v24 = a2 - 4;
      v25 = *((_DWORD *)a2 - 4);
      v26 = *((_DWORD *)a1 + 8);
      if (v25 < v26 || (result = 1, v25 == v26) && *(a2 - 1) < a1[11])
      {
        v27 = *v23;
        *v23 = *(_OWORD *)v24;
        *(_OWORD *)v24 = v27;
        v28 = *((_DWORD *)a1 + 8);
        v29 = *((_DWORD *)a1 + 4);
        if (v28 < v29 || (result = 1, v28 == v29) && a1[11] < a1[7])
        {
          v30 = *v22;
          *v22 = *v23;
          *v23 = v30;
          v31 = *((_DWORD *)a1 + 4);
          if (v31 < *(_DWORD *)a1 || (result = 1, v31 == *(_DWORD *)a1) && a1[7] < a1[3])
          {
            v32 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v22;
            *v22 = v32;
            return 1;
          }
        }
      }
      return result;
    case 5:
      sub_2236B62E8((uint64_t)a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), (uint64_t)(a2 - 4));
      return 1;
    default:
      v6 = a1 + 8;
      sub_2236B6494(a1, a1 + 4, a1 + 8);
      v7 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)v7;
    v12 = v7[3];
    if (*(_DWORD *)v7 < *(_DWORD *)v6 || (v11 == *(_DWORD *)v6 ? (v13 = v12 < v6[3]) : (v13 = 0), v13))
    {
      v14 = *(_QWORD *)(v7 + 1);
      *(_OWORD *)v7 = *(_OWORD *)v6;
      v10 = (uint64_t)a1;
      if (v6 != a1)
      {
        v15 = v8;
        while (1)
        {
          v16 = *(_DWORD *)((char *)a1 + v15 + 16);
          if (v11 >= v16 && (v11 != v16 || v12 >= *(float *)((char *)a1 + v15 + 28)))
            break;
          *(_OWORD *)((char *)a1 + v15 + 32) = *(_OWORD *)((char *)a1 + v15 + 16);
          v15 -= 16;
          if (v15 == -32)
          {
            v10 = (uint64_t)a1;
            goto LABEL_6;
          }
        }
        v10 = (uint64_t)a1 + v15 + 32;
      }
LABEL_6:
      *(_DWORD *)v10 = v11;
      *(_QWORD *)(v10 + 4) = v14;
      *(float *)(v10 + 12) = v12;
      if (++v9 == 8)
        return v7 + 4 == a2;
    }
    v6 = v7;
    v8 += 16;
    v7 += 4;
    if (v7 == a2)
      return 1;
  }
}

_QWORD *sub_223F44DEC(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
    goto LABEL_50;
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v7)
    goto LABEL_34;
  if (prime < v7)
  {
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (prime <= v19)
      prime = v19;
    if (prime < v7)
LABEL_34:
      sub_2231B0668(a1, prime);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v22 = v7 - 1;
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6)
    {
      v3 = v6 % v7;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
      if (!v24)
        goto LABEL_53;
LABEL_51:
      *v10 = *v24;
LABEL_59:
      *v24 = v10;
      goto LABEL_60;
    }
    v3 = v6;
LABEL_50:
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v24)
      goto LABEL_53;
    goto LABEL_51;
  }
  v3 = v22 & v6;
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v22 & v6));
  if (v24)
    goto LABEL_51;
LABEL_53:
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_223F450C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_223F450DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    if (*(_BYTE *)(i - 8))
    {
      v4 = *(_QWORD **)(i - 40);
      if (v4)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          operator delete(v4);
          v4 = v5;
        }
        while (v5);
      }
      v6 = *(void **)(i - 56);
      *(_QWORD *)(i - 56) = 0;
      if (v6)
        operator delete(v6);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223F45160(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    sub_223F45688((uint64_t *)(i - 56));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223F451B0(uint64_t a1, _QWORD *a2)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD *i;
  uint64_t v13;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 32) = 0u;
  if (a2[4] != a2[3])
  {
    v5 = 0;
    do
    {
      v7 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(a1 + 32);
      if (v6 - v7 == -32)
      {
        if (v6 != v7)
        {
          v8 = *(_QWORD *)(a1 + 32);
          do
          {
            v10 = *(void **)(v8 - 32);
            v8 -= 32;
            v9 = v10;
            if (v10)
            {
              *(_QWORD *)(v6 - 24) = v9;
              operator delete(v9);
            }
            v6 = v8;
          }
          while (v8 != v7);
        }
        *(_QWORD *)(a1 + 32) = v7;
      }
      else
      {
        sub_223F45504(v4, 1uLL);
      }
      ++v5;
    }
    while (v5 < (uint64_t)(a2[4] - a2[3]) >> 5);
  }
  for (i = (_QWORD *)a2[1]; i != a2; i = (_QWORD *)i[1])
    sub_223F472BC((uint64_t)&v13, i[2], i[3], (uint64_t **)a1);
  *(_QWORD *)(a1 + 48) = operator new();
  return a1;
}

void sub_223F452C8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  void **v2;
  _QWORD *v3;
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v5 = (char *)*v2;
  if (*v2)
  {
    v6 = (char *)v1[4];
    v7 = *v2;
    if (v6 != v5)
    {
      v8 = (char *)v1[4];
      do
      {
        v10 = (void *)*((_QWORD *)v8 - 4);
        v8 -= 32;
        v9 = v10;
        if (v10)
        {
          *((_QWORD *)v6 - 3) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *v2;
    }
    v1[4] = (uint64_t)v5;
    operator delete(v7);
  }
  if (*v3)
  {
    v12 = *v1;
    v11 = (uint64_t *)v1[1];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v1[2] = 0;
    if (v11 != v1)
    {
      do
      {
        v14 = (uint64_t *)v11[1];
        operator delete(v11);
        v11 = v14;
      }
      while (v14 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_223F4537C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      v5 = a1[4];
      do
      {
        v7 = *(void **)(v5 - 32);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 24) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  if (a1[2])
  {
    v9 = *a1;
    v8 = (uint64_t *)a1[1];
    v10 = *v8;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v9 + 8) = v10;
    a1[2] = 0;
    if (v8 != a1)
    {
      do
      {
        v11 = (uint64_t *)v8[1];
        operator delete(v8);
        v8 = v11;
      }
      while (v11 != a1);
    }
  }
  return a1;
}

void **sub_223F45430(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 4);
        v5 -= 32;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 3) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_223F454A4(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void sub_223F45504(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      v11 = 32 * a2;
      v12 = &v5[32 * a2];
      do
      {
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        v5 += 32;
        v11 -= 32;
      }
      while (v11);
      v5 = v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (v5 - *a1) >> 5;
    if ((v6 + a2) >> 59)
      sub_22316E078();
    v7 = v4 - *a1;
    v8 = v7 >> 4;
    if (v7 >> 4 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 59)
        sub_223174E94();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[32 * v6];
    v14 = 32 * a2;
    v15 = &v13[32 * a2];
    v16 = v13;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v14 -= 32;
    }
    while (v14);
    v17 = &v10[32 * v9];
    v18 = *a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
    }
    else
    {
      do
      {
        v19 = v13;
        *((_QWORD *)v13 - 3) = 0;
        *((_QWORD *)v13 - 2) = 0;
        v20 = *((_OWORD *)v5 - 2);
        v5 -= 32;
        *((_OWORD *)v13 - 2) = v20;
        v13 -= 32;
        *((_QWORD *)v19 - 2) = *((_QWORD *)v5 + 2);
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
      }
      while (v5 != v18);
      v5 = *a1;
      v21 = a1[1];
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v17;
      if (v21 != v5)
      {
        v22 = v21;
        do
        {
          v24 = (void *)*((_QWORD *)v22 - 4);
          v22 -= 32;
          v23 = v24;
          if (v24)
          {
            *((_QWORD *)v21 - 3) = v23;
            operator delete(v23);
          }
          v21 = v22;
        }
        while (v22 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_223F45688(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v2 = a1[6];
  if (v2)
    MEMORY[0x227684CE8](v2, 0xC400A2AC0F1);
  v3 = a1[3];
  if (v3)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 != v3)
    {
      v6 = a1[4];
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  if (a1[2])
  {
    v10 = *a1;
    v9 = (uint64_t *)a1[1];
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    a1[2] = 0;
    if (v9 != a1)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != a1);
    }
  }
}

uint64_t sub_223F45750(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = a1;
  *(_QWORD *)(a1 + 8) = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (a2)
  {
    if (a2 >> 59)
      sub_22316E078();
    v3 = 4 * a2;
    v4 = operator new(32 * a2);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v4;
    v5 = &v4[v3];
    *(_QWORD *)(a1 + 40) = &v4[v3];
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4 += 4;
      v3 -= 4;
    }
    while (v3 * 8);
    *(_QWORD *)(a1 + 32) = v5;
  }
  *(_QWORD *)(a1 + 48) = operator new();
  return a1;
}

void sub_223F457E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_223F4537C(v1);
  _Unwind_Resume(a1);
}

void sub_223F457F4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = v1[3];
  if (v3)
  {
    v4 = v1[4];
    v5 = (void *)v1[3];
    if (v4 != v3)
    {
      v6 = v1[4];
      do
      {
        v8 = *(void **)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 24) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[3];
    }
    v1[4] = v3;
    operator delete(v5);
  }
  sub_223F454A4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223F45854(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 56);
      *(_DWORD *)(v8 - 48) = *(_DWORD *)(v4 + v7 - 48);
      *(_QWORD *)(v8 - 56) = v9;
      v10 = *(_QWORD *)(v4 + v7 - 44);
      *(_DWORD *)(v8 - 36) = *(_DWORD *)(v4 + v7 - 36);
      *(_QWORD *)(v8 - 44) = v10;
      *(_BYTE *)(v8 - 32) = *(_BYTE *)(v4 + v7 - 32);
      result = sub_2233309B8((_QWORD *)(v6 + v7 - 24), (uint64_t *)(v4 + v7 - 24));
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v11 = *v3;
  *v3 = v6;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void sub_223F45928(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  if (v3)
  {
    do
    {
      v6 = *(_QWORD *)(v2 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v2 + 40);
        v5 = *(void **)(v2 + 32);
        if (v7 != v6)
        {
          do
          {
            if (*(_BYTE *)(v7 - 8))
            {
              v8 = *(_QWORD **)(v7 - 40);
              if (v8)
              {
                do
                {
                  v9 = (_QWORD *)*v8;
                  operator delete(v8);
                  v8 = v9;
                }
                while (v9);
              }
              v10 = *(void **)(v7 - 56);
              *(_QWORD *)(v7 - 56) = 0;
              if (v10)
                operator delete(v10);
            }
            v7 -= 80;
          }
          while (v7 != v6);
          v5 = *(void **)(v2 + 32);
        }
        *(_QWORD *)(v2 + 40) = v6;
        operator delete(v5);
      }
      v2 += 56;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F459AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        v4 = i - 56;
        *(_QWORD *)(a1 + 16) = i - 56;
        v5 = *(_QWORD *)(i - 24);
        if (v5)
          break;
        i -= 56;
        if (v4 == v2)
          goto LABEL_15;
      }
      v6 = *(_QWORD *)(i - 16);
      v7 = *(void **)(i - 24);
      if (v6 != v5)
        break;
      *(_QWORD *)(i - 16) = v5;
      operator delete(v7);
      i = *(_QWORD *)(a1 + 16);
      if (i == v2)
        goto LABEL_15;
    }
    do
    {
      if (*(_BYTE *)(v6 - 8))
      {
        v8 = *(_QWORD **)(v6 - 40);
        if (v8)
        {
          do
          {
            v9 = (_QWORD *)*v8;
            operator delete(v8);
            v8 = v9;
          }
          while (v9);
        }
        v10 = *(void **)(v6 - 56);
        *(_QWORD *)(v6 - 56) = 0;
        if (v10)
          operator delete(v10);
      }
      v6 -= 80;
    }
    while (v6 != v5);
    v11 = *(void **)(i - 24);
    *(_QWORD *)(i - 16) = v5;
    operator delete(v11);
  }
LABEL_15:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_223F45A94(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *((_QWORD *)v4 - 3);
        if (v7)
        {
          v8 = *((_QWORD *)v4 - 2);
          v6 = (void *)*((_QWORD *)v4 - 3);
          if (v8 != v7)
          {
            do
            {
              if (*(_BYTE *)(v8 - 8))
              {
                v9 = *(_QWORD **)(v8 - 40);
                if (v9)
                {
                  do
                  {
                    v10 = (_QWORD *)*v9;
                    operator delete(v9);
                    v9 = v10;
                  }
                  while (v10);
                }
                v11 = *(void **)(v8 - 56);
                *(_QWORD *)(v8 - 56) = 0;
                if (v11)
                  operator delete(v11);
              }
              v8 -= 80;
            }
            while (v8 != v7);
            v6 = (void *)*((_QWORD *)v4 - 3);
          }
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v6);
        }
        v4 -= 56;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_223F45B80(uint64_t a1, void **a2, const void *a3, char *a4, const void *a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, __int128 *a11, uint64_t a12)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float32x2_t *v20;
  char *v21;
  size_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char *v28;
  char *v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  __int32 *v36;
  __int32 *v37;
  char *v38;
  uint64_t v39;
  int8x16_t v40;
  float32x2_t v41;
  unint64_t v42;
  double v43;
  float32x4_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  int v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  void *v70;
  _DWORD *v71;
  uint64_t v72;
  _DWORD *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *i;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  _DWORD *v98;
  _DWORD *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  void *v103;
  float32x4_t *v104;
  float32x4_t *v105;
  float32x4_t v106;
  float32x4_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  __int128 v126;
  unint64_t v127;
  unint64_t j;
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  char *v139;
  char *v140;
  _BYTE *v141;
  __int128 v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int128 v148;
  BOOL v149;
  uint64_t v150;
  char *v151;
  char *v152;
  __int128 v153;
  __int128 v154;
  char *v155;
  char *v156;
  char *v157;
  float32x2_t *v158;
  float32x2_t *v159;
  uint64_t v160;
  _DWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  char *v170;
  uint64_t v171;
  void **v173;
  unint64_t v174;
  char *v175;
  _BYTE *v177;
  char *v178;
  uint64_t v179;
  int8x16_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  char *v184;
  char *v185;
  void **v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  void *__p;
  char *v194;
  char *v195;
  void *v196[9];
  void *v197;
  void *v198;
  uint64_t v199;
  __int16 v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  _QWORD **v204;
  _QWORD *v205;
  _QWORD v206[331];

  v16 = *a11;
  v17 = a11[1];
  v18 = a11[3];
  *(_OWORD *)(a1 + 32) = a11[2];
  *(_OWORD *)(a1 + 48) = v18;
  *(_OWORD *)a1 = v16;
  *(_OWORD *)(a1 + 16) = v17;
  *(_QWORD *)(a1 + 64) = &off_24EC64998;
  v171 = a1 + 64;
  *(_QWORD *)(a1 + 72) = &off_24EC64920;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a12 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a12 + 32);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a12 + 48);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a12 + 64);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a12 + 72);
  *(_QWORD *)(a1 + 140) = *(_QWORD *)(a12 + 76);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a12 + 88);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a12 + 96);
  __p = 0;
  v194 = 0;
  v195 = 0;
  if (a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((12 * (uint64_t)a2) >> 2) > 0x1555555555555555)
      sub_22316E078();
    v20 = (float32x2_t *)operator new(12 * (_QWORD)a2);
    v21 = (char *)v20 + 4 * ((12 * (uint64_t)a2) >> 2);
    __p = v20;
    v195 = v21;
    v22 = 12 * ((12 * (uint64_t)a2 - 12) / 0xCuLL) + 12;
    memcpy(v20, a3, v22);
    v23 = (char *)v20 + v22;
    v194 = (char *)v20 + v22;
  }
  else
  {
    v21 = 0;
    v23 = 0;
    v20 = 0;
  }
  v173 = a2;
  v190 = 0;
  v191 = 0;
  v192 = 0;
  if (a4)
  {
    v24 = 0x8E38E38E38E38E39 * ((36 * (uint64_t)a4) >> 2);
    if (v24 > 0x71C71C71C71C71CLL)
      sub_22316E078();
    v25 = 36 * (_QWORD)a4;
    a4 = (char *)operator new(36 * (_QWORD)a4);
    v26 = &a4[36 * v24];
    v190 = a4;
    v192 = v26;
    v27 = 36 * ((v25 - 36) / 0x24uLL) + 36;
    memcpy(a4, a5, v27);
    v28 = &a4[v27];
    v191 = &a4[v27];
    v186 = v173;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    if (a6)
      goto LABEL_8;
  }
  else
  {
    v26 = 0;
    v28 = 0;
    v186 = v173;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    if (a6)
    {
LABEL_8:
      if (a6 >> 60)
        sub_2236EA0B4();
      v29 = (char *)operator new(16 * a6);
      v170 = &v29[16 * a6];
      bzero(v29, 16 * a6);
      v32 = 0;
      v175 = v29;
      v174 = a6;
      while (1)
      {
        v33 = 0;
        v34 = 0;
        v35 = (_QWORD *)(a7 + 24 * v32);
        v36 = (__int32 *)v35 + 5;
        v31.i64[0] = *v35;
        v37 = (__int32 *)(v35 + 1);
        v39 = *(_QWORD *)((char *)v35 + 12);
        v38 = (char *)v35 + 12;
        v30.i64[0] = v39;
        v30.i32[2] = *v36;
        v178 = v194;
        v179 = v32;
        v177 = __p;
        v31.i32[2] = *v37;
        v40 = (int8x16_t)vsubq_f32(v30, v31);
        v41 = (float32x2_t)vextq_s8(v40, v40, 8uLL).u64[0];
        *(double *)v44.i64 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1), *(float32x2_t *)v40.i8, 1), v41, v41).f32[0]);
        v42 = (unint64_t)(*(double *)v44.i64 / 0.100000001);
        v43 = vabdd_f64(0.100000001, *(double *)v44.i64 / (double)v42);
        *(double *)v44.i64 = vabdd_f64(0.100000001, *(double *)v44.i64 / (double)(v42 + 1));
        if (v43 < *(double *)v44.i64)
          v45 = v42;
        else
          v45 = v42 + 1;
        v46 = v45 + 1;
        if (v45 == -1)
          goto LABEL_17;
        v180 = v40;
        v182 = v31;
        if (v46 > 0x1555555555555555)
          sub_22316E078();
        v33 = (char *)operator new(12 * v46);
        v34 = &v33[12 * v46];
        v184 = v33;
        v47 = v33;
        v40 = v180;
        v31 = v182;
        if (v45)
        {
LABEL_17:
          v48 = 0;
          v44.f32[0] = (float)v45;
          v181 = vdivq_f32((float32x4_t)v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0));
          v47 = v33;
          while (1)
          {
            while (v33 < v34)
            {
              *((_DWORD *)v33 + 2) = v31.i32[2];
              *(_QWORD *)v33 = v31.i64[0];
              v33 += 12;
              v44 = v181;
              v31 = vaddq_f32(v181, v31);
              if (++v48 == v45)
                goto LABEL_38;
            }
            v49 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v47) >> 2) + 1;
            if (v49 > 0x1555555555555555)
              sub_22316E078();
            if (0x5555555555555556 * ((v34 - v47) >> 2) > v49)
              v49 = 0x5555555555555556 * ((v34 - v47) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v34 - v47) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v50 = 0x1555555555555555;
            else
              v50 = v49;
            v183 = v31;
            if (v50)
            {
              if (v50 > 0x1555555555555555)
                sub_223174E94();
              v51 = (char *)operator new(12 * v50);
              v31 = v183;
              v52 = (uint64_t)&v51[4 * ((v33 - v47) >> 2)];
              *(_QWORD *)v52 = v183.i64[0];
              *(_DWORD *)(v52 + 8) = v183.i32[2];
              if (v33 == v47)
              {
LABEL_36:
                v56 = v33;
                v47 = (_BYTE *)v52;
                v34 = &v51[12 * v50];
                v33 = (char *)(v52 + 12);
                if (!v56)
                  goto LABEL_33;
                goto LABEL_32;
              }
            }
            else
            {
              v51 = 0;
              v52 = 4 * ((v33 - v47) >> 2);
              *(_QWORD *)v52 = v31.i64[0];
              *(_DWORD *)(v52 + 8) = v31.i32[2];
              if (v33 == v47)
                goto LABEL_36;
            }
            v53 = (_DWORD *)v52;
            do
            {
              v54 = *(_QWORD *)(v33 - 12);
              v33 -= 12;
              v55 = *((_DWORD *)v33 + 2);
              *(_QWORD *)(v53 - 3) = v54;
              v53 -= 3;
              v53[2] = v55;
            }
            while (v33 != v47);
            v56 = v47;
            v47 = v53;
            v34 = &v51[12 * v50];
            v33 = (char *)(v52 + 12);
            if (!v56)
              goto LABEL_33;
LABEL_32:
            operator delete(v56);
            v31 = v183;
LABEL_33:
            v44 = v181;
            v31 = vaddq_f32(v181, v31);
            if (++v48 == v45)
            {
LABEL_38:
              v184 = v47;
              break;
            }
          }
        }
        if (v33 >= v34)
        {
          v62 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v47) >> 2) + 1;
          if (v62 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((v34 - v47) >> 2) > v62)
            v62 = 0x5555555555555556 * ((v34 - v47) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v34 - v47) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v63 = 0x1555555555555555;
          else
            v63 = v62;
          if (v63)
          {
            if (v63 > 0x1555555555555555)
              sub_223174E94();
            v64 = (char *)operator new(12 * v63);
          }
          else
          {
            v64 = 0;
          }
          v65 = &v64[4 * ((v33 - v47) >> 2)];
          v66 = *(_QWORD *)v38;
          *((_DWORD *)v65 + 2) = *((_DWORD *)v38 + 2);
          *(_QWORD *)v65 = v66;
          v58 = v65 + 12;
          if (v33 == v47)
          {
            v184 = &v64[4 * ((v33 - v47) >> 2)];
            v59 = v179;
LABEL_59:
            operator delete(v47);
            v185 = v58;
            v60 = v184;
            v61 = v58 - v184;
            if (v58 - v184 < 1)
              goto LABEL_96;
            goto LABEL_60;
          }
          v59 = v179;
          do
          {
            v67 = *(_QWORD *)(v33 - 12);
            v33 -= 12;
            v68 = *((_DWORD *)v33 + 2);
            *(_QWORD *)(v65 - 12) = v67;
            v65 -= 12;
            *((_DWORD *)v65 + 2) = v68;
          }
          while (v33 != v47);
          v184 = v65;
          if (v47)
            goto LABEL_59;
          v185 = v58;
          v60 = v65;
          v61 = v58 - v65;
          if (v58 - v184 < 1)
            goto LABEL_96;
        }
        else
        {
          v57 = *(_QWORD *)v38;
          *((_DWORD *)v33 + 2) = *((_DWORD *)v38 + 2);
          *(_QWORD *)v33 = v57;
          v58 = v33 + 12;
          v59 = v179;
          v185 = v33 + 12;
          v60 = v184;
          v61 = v33 + 12 - v184;
          if (v61 < 1)
            goto LABEL_96;
        }
LABEL_60:
        v69 = v61 / 12;
        v70 = __p;
        v71 = v194;
        v72 = (v194 - (_BYTE *)__p) / 12;
        v73 = (char *)__p + 12 * v72;
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v195 - v194) >> 2)) < v61 / 12)
        {
          if ((unint64_t)(v72 + v69) > 0x1555555555555555)
            sub_22316E078();
          v74 = 0x5555555555555556 * ((v195 - (_BYTE *)__p) >> 2);
          if (v74 <= v72 + v69)
            v74 = v72 + v69;
          if (0xAAAAAAAAAAAAAAABLL * ((v195 - (_BYTE *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v75 = 0x1555555555555555;
          else
            v75 = v74;
          if (v75)
          {
            if (v75 > 0x1555555555555555)
              sub_223174E94();
            v76 = (char *)operator new(12 * v75);
          }
          else
          {
            v76 = 0;
          }
          v93 = &v76[12 * v72];
          v94 = 12 * v69;
          v95 = &v93[12 * v69];
          v96 = v93;
          do
          {
            v97 = *(_QWORD *)v60;
            *((_DWORD *)v96 + 2) = *((_DWORD *)v60 + 2);
            *(_QWORD *)v96 = v97;
            v96 += 12;
            v60 += 12;
            v94 -= 12;
          }
          while (v94);
          v98 = __p;
          if (__p != v73)
          {
            v99 = v73;
            do
            {
              v100 = *(_QWORD *)(v99 - 3);
              v99 -= 3;
              v101 = v99[2];
              *(_QWORD *)(v93 - 12) = v100;
              v93 -= 12;
              *((_DWORD *)v93 + 2) = v101;
            }
            while (v99 != v98);
            v71 = v194;
          }
          for (; v73 != v71; v73 += 3)
          {
            v102 = *(_QWORD *)v73;
            *((_DWORD *)v95 + 2) = v73[2];
            *(_QWORD *)v95 = v102;
            v95 += 12;
          }
          v103 = __p;
          __p = v93;
          v194 = v95;
          v195 = &v76[12 * v75];
          if (v103)
            operator delete(v103);
          goto LABEL_96;
        }
        v77 = v194 - (char *)v73;
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v194 - (char *)v73) >> 2)) >= v69)
        {
          v78 = &v60[12 * v69];
          v79 = v194;
LABEL_77:
          v83 = (unint64_t)&v79[-12 * v69];
          for (i = v79; v83 < (unint64_t)v71; v83 += 12)
          {
            v85 = *(_QWORD *)v83;
            *((_DWORD *)i + 2) = *(_DWORD *)(v83 + 8);
            *(_QWORD *)i = v85;
            i += 12;
          }
          v86 = (char *)&v73[3 * v69];
          v194 = i;
          if (v79 != v86)
          {
            v87 = 0xAAAAAAAAAAAAAAABLL * ((v79 - v86) >> 2);
            v88 = v79 - 12;
            v89 = 12 * v87;
            v90 = (uint64_t)v70 + 12 * v72 - 12;
            do
            {
              v91 = *(_QWORD *)(v90 + v89);
              *((_DWORD *)v88 + 2) = *(_DWORD *)(v90 + v89 + 8);
              *(_QWORD *)v88 = v91;
              v88 -= 12;
              v89 -= 12;
            }
            while (v89);
          }
          for (; v60 != v78; v60 += 12)
          {
            v92 = *(_QWORD *)v60;
            v73[2] = *((_DWORD *)v60 + 2);
            *(_QWORD *)v73 = v92;
            v73 += 3;
          }
          goto LABEL_96;
        }
        v78 = &v60[4 * ((v194 - (char *)v73) >> 2)];
        v79 = v194;
        if (v78 != v58)
        {
          v80 = &v60[4 * ((v194 - (char *)v73) >> 2)];
          v81 = v194;
          do
          {
            v82 = *(_QWORD *)v80;
            *((_DWORD *)v81 + 2) = *((_DWORD *)v80 + 2);
            *(_QWORD *)v81 = v82;
            v81 += 12;
            v80 += 12;
            v79 += 12;
          }
          while (v80 != v58);
        }
        v194 = v79;
        if (v77 >= 1)
          goto LABEL_77;
LABEL_96:
        v104 = (float32x4_t *)(a10 + 72 * v59);
        v105 = (float32x4_t *)(a10 + 36 * ((2 * v59) | 1));
        v44.i32[0] = v104[2].i32[0];
        v31.i32[0] = v105[2].i32[0];
        v106 = vaddq_f32(v44, v31);
        v31.i64[0] = 0x3F0000003F000000;
        v31.i64[1] = 0x3F0000003F000000;
        v30 = vmulq_f32(v106, v31);
        v107 = vmulq_f32(vaddq_f32(*v104, *v105), v31);
        *(float32x4_t *)&v196[2] = vmulq_f32(vaddq_f32(v104[1], v105[1]), v31);
        *(float32x4_t *)v196 = v107;
        LODWORD(v196[4]) = v30.i32[0];
        v108 = v185;
        if (v185 == v184)
        {
          v119 = v185;
          v120 = v175;
        }
        else
        {
          v109 = v190;
          v110 = v191;
          v111 = v191 - v190;
          v112 = (v185 - v184) / 12;
          v113 = (v191 - v190) / 36;
          v114 = (unint64_t)&v190[36 * v113];
          if (0x8E38E38E38E38E39 * ((v192 - v191) >> 2) >= v112)
          {
            v121 = 0x8E38E38E38E38E39 * ((uint64_t)&v191[-v114] >> 2);
            if (v112 <= v121)
            {
              v123 = (unint64_t)v191;
              v121 = (v185 - v184) / 12;
LABEL_114:
              v127 = v123 - 36 * v112;
              for (j = v123; v127 < (unint64_t)v110; j += 36)
              {
                v129 = *(_OWORD *)v127;
                v130 = *(_OWORD *)(v127 + 16);
                *(_DWORD *)(j + 32) = *(_DWORD *)(v127 + 32);
                *(_OWORD *)j = v129;
                *(_OWORD *)(j + 16) = v130;
                v127 += 36;
              }
              v131 = v114 + 36 * v112;
              v191 = (char *)j;
              if (v123 != v131)
              {
                v132 = 0x8E38E38E38E38E39 * ((uint64_t)(v123 - v131) >> 2);
                v133 = v123 - 36;
                v134 = 36 * v132;
                v135 = (uint64_t)&v109[36 * v113 - 36];
                do
                {
                  v136 = *(_OWORD *)(v135 + v134);
                  v137 = *(_OWORD *)(v135 + v134 + 16);
                  *(_DWORD *)(v133 + 32) = *(_DWORD *)(v135 + v134 + 32);
                  *(_OWORD *)v133 = v136;
                  *(_OWORD *)(v133 + 16) = v137;
                  v133 -= 36;
                  v134 -= 36;
                }
                while (v134);
              }
              if (j <= (unint64_t)v196)
                v138 = 0;
              else
                v138 = (v185 - v184) / 12;
              if (v114 > (unint64_t)v196)
                v138 = 0;
              v139 = (char *)v196 + 36 * v138;
              v141 = v177;
              v140 = v178;
              do
              {
                v30 = *(float32x4_t *)v139;
                v142 = *((_OWORD *)v139 + 1);
                *(_DWORD *)(v114 + 32) = *((_DWORD *)v139 + 8);
                *(float32x4_t *)v114 = v30;
                *(_OWORD *)(v114 + 16) = v142;
                v114 += 36;
                --v121;
              }
              while (v121);
              v119 = v185;
              v108 = v184;
              v120 = v175;
              v143 = v174;
              goto LABEL_141;
            }
            v122 = 0;
            v123 = (unint64_t)&v191[36 * (v112 - v121)];
            v124 = 36 * v112 - 4 * ((uint64_t)&v191[-v114] >> 2);
            do
            {
              v125 = &v110[v122];
              v30 = *(float32x4_t *)v196;
              v126 = *(_OWORD *)&v196[2];
              *((_DWORD *)v125 + 8) = v196[4];
              *(float32x4_t *)v125 = v30;
              *((_OWORD *)v125 + 1) = v126;
              v122 += 36;
            }
            while (v124 != v122);
            v191 = (char *)v123;
            if (v110 != (char *)v114)
              goto LABEL_114;
            v119 = v185;
            v108 = v184;
            v120 = v175;
          }
          else
          {
            v115 = v113 + v112;
            if (v113 + v112 > 0x71C71C71C71C71CLL)
              sub_22316E078();
            if (0x1C71C71C71C71C72 * ((v192 - v190) >> 2) > v115)
              v115 = 0x1C71C71C71C71C72 * ((v192 - v190) >> 2);
            if (0x8E38E38E38E38E39 * ((v192 - v190) >> 2) >= 0x38E38E38E38E38ELL)
              v116 = 0x71C71C71C71C71CLL;
            else
              v116 = v115;
            if (v116)
            {
              if (v116 > 0x71C71C71C71C71CLL)
                sub_223174E94();
              v117 = v116;
              v118 = (char *)operator new(36 * v116);
              v109 = v190;
              v116 = v117;
              v112 = (v185 - v184) / 12;
              v59 = v179;
            }
            else
            {
              v118 = 0;
            }
            v144 = &v118[36 * v113];
            v145 = 36 * v112;
            v146 = &v144[36 * v112];
            v147 = v144;
            do
            {
              v30 = *(float32x4_t *)v196;
              v148 = *(_OWORD *)&v196[2];
              *((_DWORD *)v147 + 8) = v196[4];
              *(float32x4_t *)v147 = v30;
              *((_OWORD *)v147 + 1) = v148;
              v147 += 36;
              v145 -= 36;
            }
            while (v145);
            v149 = (unint64_t)(v111 + 35) >= 0x47;
            v120 = v175;
            if (v149)
            {
              v150 = 36 * v113;
              v151 = v109 - 36;
              do
              {
                v152 = &v118[v150];
                v30 = *(float32x4_t *)&v151[v150];
                v153 = *(_OWORD *)&v151[v150 + 16];
                *((_DWORD *)v152 - 1) = *(_DWORD *)&v151[v150 + 32];
                *(_OWORD *)(v152 - 20) = v153;
                *(float32x4_t *)(v152 - 36) = v30;
                v150 -= 36;
              }
              while (v150);
              v144 = v118;
            }
            for (; (char *)v114 != v110; v146 += 36)
            {
              v30 = *(float32x4_t *)v114;
              v154 = *(_OWORD *)(v114 + 16);
              *((_DWORD *)v146 + 8) = *(_DWORD *)(v114 + 32);
              *(float32x4_t *)v146 = v30;
              *((_OWORD *)v146 + 1) = v154;
              v114 += 36;
            }
            v190 = v144;
            v191 = v146;
            v192 = &v118[36 * v116];
            if (v109)
            {
              operator delete(v109);
              v108 = v184;
              v119 = v185;
            }
            else
            {
              v119 = v185;
              v108 = v184;
            }
          }
        }
        v143 = v174;
        v141 = v177;
        v140 = v178;
LABEL_141:
        v155 = &v120[16 * v59];
        *(_QWORD *)v155 = 0xAAAAAAAAAAAAAAABLL * ((v140 - v141) >> 2);
        *((_QWORD *)v155 + 1) = 0xAAAAAAAAAAAAAAABLL * ((v119 - v108) >> 2);
        if (v108)
          operator delete(v108);
        v32 = v59 + 1;
        if (v32 == v143)
        {
          v20 = (float32x2_t *)__p;
          v23 = v194;
          v21 = v195;
          a4 = v190;
          v28 = v191;
          v26 = v192;
          v157 = v170;
          v156 = v170;
          goto LABEL_146;
        }
      }
    }
  }
  v120 = 0;
  v157 = 0;
  v156 = 0;
LABEL_146:
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 176) = v23;
  *(_QWORD *)(a1 + 184) = v21;
  *(_QWORD *)(a1 + 192) = a4;
  *(_QWORD *)(a1 + 200) = v28;
  *(_QWORD *)(a1 + 208) = v26;
  *(_QWORD *)(a1 + 216) = v173;
  *(_QWORD *)(a1 + 224) = v120;
  *(_QWORD *)(a1 + 232) = v157;
  *(_QWORD *)(a1 + 240) = v156;
  sub_223F2B090(0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v20) >> 2), v20, (float32x2_t *)a1, v171, a1 + 248);
  v158 = *(float32x2_t **)(a1 + 248);
  v159 = *(float32x2_t **)(a1 + 256);
  memset(v196, 0, 24);
  v160 = (char *)v159 - (char *)v158;
  if (v159 == v158)
  {
    v161 = 0;
    v162 = 0;
  }
  else
  {
    if (v160 < 0)
      sub_2236B43DC();
    v196[0] = operator new((char *)v159 - (char *)v158);
    v196[1] = v196[0];
    v196[2] = (char *)v196[0] + 8 * (v160 >> 3);
    v186 = v196;
    do
    {
      __p = (void *)vcvt_s32_f32(*v158);
      sub_2236B43F0(&v186, &__p);
      ++v158;
    }
    while (v158 != v159);
    v162 = v196[0];
    v161 = v196[1];
  }
  v163 = operator new();
  *(_QWORD *)(v163 + 64) = 0;
  *(_OWORD *)(v163 + 32) = 0u;
  *(_OWORD *)(v163 + 48) = 0u;
  *(_OWORD *)v163 = 0u;
  *(_OWORD *)(v163 + 16) = 0u;
  *(_QWORD *)(a1 + 296) = v163;
  v197 = 0;
  v198 = 0;
  v200 = 0;
  v199 = 0;
  memset(&v196[1], 0, 57);
  v201 = (uint64_t)&v201;
  v202 = &v201;
  v205 = 0;
  v206[0] = 0;
  *(_DWORD *)((char *)v206 + 7) = 0;
  v203 = 0;
  v204 = &v205;
  v206[329] = 0;
  if (v162 != v161)
  {
    v164 = v162;
    do
    {
      LODWORD(v186) = *v164;
      LODWORD(__p) = v164[1];
      sub_223F0AA64(v196, (int *)&v186, (int *)&__p);
      v164 += 2;
    }
    while (v164 != v161);
  }
  sub_223F0A67C((uint64_t *)v196, (char **)v163);
  sub_223198030((uint64_t)&v204, v205);
  if (v203)
  {
    v166 = v201;
    v165 = v202;
    v167 = *v202;
    *(_QWORD *)(v167 + 8) = *(_QWORD *)(v201 + 8);
    **(_QWORD **)(v166 + 8) = v167;
    v203 = 0;
    if (v165 != &v201)
    {
      do
      {
        v168 = (uint64_t *)v165[1];
        operator delete(v165);
        v165 = v168;
      }
      while (v168 != &v201);
    }
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v196[5])
  {
    v196[6] = v196[5];
    operator delete(v196[5]);
  }
  if (v196[1])
  {
    v196[2] = v196[1];
    operator delete(v196[1]);
  }
  if (v162)
    operator delete(v162);
  return a1;
}

void sub_223F46A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v39;
  void *v40;
  uint64_t *v41;

  sub_223F0A9BC((uint64_t)&a38);
  sub_223F46C8C(v41);
  if (v40)
    operator delete(v40);
  sub_223F46C00(v39);
  sub_223F46C3C(a12 + 168);
  *a11 = &off_24EC64998;
  _Unwind_Resume(a1);
}

void sub_223F46B84()
{
  JUMPOUT(0x223F46B90);
}

uint64_t sub_223F46C00(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
    operator delete(v2);
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_223F46C3C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_223F46C8C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      *(_QWORD *)(v2 + 56) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(_QWORD *)(v2 + 32) = v4;
      operator delete(v4);
    }
    v5 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x227684CE8](v2, 0x20C407AED9174);
  }
  return a1;
}

_QWORD *sub_223F46D00(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (result)
  {
    v1 = result;
    v2 = result[37];
    result[37] = 0;
    if (v2)
    {
      v3 = *(void **)(v2 + 48);
      if (v3)
      {
        *(_QWORD *)(v2 + 56) = v3;
        operator delete(v3);
      }
      v4 = *(void **)(v2 + 24);
      if (v4)
      {
        *(_QWORD *)(v2 + 32) = v4;
        operator delete(v4);
      }
      v5 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x227684CE8](v2, 0x20C407AED9174);
    }
    v6 = (void *)v1[34];
    if (v6)
      operator delete(v6);
    v7 = (void *)v1[31];
    if (v7)
    {
      v1[32] = v7;
      operator delete(v7);
    }
    v8 = (void *)v1[28];
    if (v8)
    {
      v1[29] = v8;
      operator delete(v8);
    }
    v9 = (void *)v1[24];
    if (v9)
    {
      v1[25] = v9;
      operator delete(v9);
    }
    v10 = (void *)v1[21];
    if (v10)
    {
      v1[22] = v10;
      operator delete(v10);
    }
    v1[8] = &off_24EC64998;
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_223F46DE8()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223F46DFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24EC64230;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_223F46E3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC64230;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223F46E64()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_223F43A40(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_2540CE058);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE058))
    {
      qword_2540CE050 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SplitAndDensify");
      __cxa_guard_release(&qword_2540CE058);
    }
    v1 = qword_2540CE050;
    if (*(_BYTE *)(qword_2540CE050 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_223F46F30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE058);
  _Unwind_Resume(a1);
}

uint64_t sub_223F46F4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExtraction15sp"
                     "litAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEENS3_8optionalINS6_15Lo"
                     "okUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExt"
                                "raction15splitAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEE"
                                "NS3_8optionalINS6_15LookUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExtraction15splitAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEENS3_8optionalINS6_15LookUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection20DensePlaneExtraction15splitAndDensifyERKNS3_6vectorINS6_20PlaneDetectionResultENS3_9allocatorIS9_EEEENS3_8optionalINS6_15LookUpImageViewIKhNS6_14LabelAndNormalEEEEEE3$_2JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F46FB8()
{
  return &unk_24EC64290;
}

_QWORD *sub_223F46FC4(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v10[4] = 0;
  v10[5] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_2231B0668(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*v10)
  {
    v25 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_223F472A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223EB996C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F472BC(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t **a4)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char v22;
  char **v23;
  char v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  void *v28;

  if (a2 <= a3)
    v8 = a3;
  else
    v8 = a2;
  v10 = a4[3];
  v9 = a4[4];
  v11 = a4 + 3;
  v12 = ((char *)v9 - (char *)v10) >> 5;
  if (v8 >= v12)
  {
    v13 = v8 + 1;
    if (v13 <= v12)
    {
      if (v13 < v12)
      {
        v14 = &v10[4 * v13];
        if (v9 != v14)
        {
          v15 = a4[4];
          do
          {
            v17 = (void *)*(v15 - 4);
            v15 -= 4;
            v16 = v17;
            if (v17)
            {
              *(v9 - 3) = (uint64_t)v16;
              operator delete(v16);
            }
            v9 = v15;
          }
          while (v15 != v14);
        }
        a4[4] = v14;
      }
    }
    else
    {
      sub_223F45504((char **)a4 + 3, v13 - v12);
    }
  }
  v18 = (uint64_t *)operator new(0x28uLL);
  v18[2] = a2;
  v18[3] = a3;
  v19 = (char *)*a4;
  *v18 = (uint64_t)*a4;
  v18[1] = (uint64_t)a4;
  *((_QWORD *)v19 + 1) = v18;
  *a4 = v18;
  v20 = a4[3];
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  *(_QWORD *)&v27 = a3;
  *((_QWORD *)&v27 + 1) = v18;
  v28 = &unk_24EC574F0;
  v21 = sub_2236BBCA8((char **)&v20[4 * a2], &v27);
  if (v22)
  {
    v23 = (char **)(*v11 + 32 * a3);
    *(_QWORD *)&v27 = a2;
    *((_QWORD *)&v27 + 1) = v18;
    v28 = &unk_24EC574F0;
    sub_2236BBCA8(v23, &v27);
    v24 = 1;
  }
  else
  {
    v25 = v21;
    v26 = *v18;
    *(_QWORD *)(v26 + 8) = v18[1];
    *(_QWORD *)v18[1] = v26;
    a4[2] = (uint64_t *)((char *)a4[2] - 1);
    operator delete(v18);
    v24 = 0;
    v18 = (uint64_t *)*((_QWORD *)v25 + 1);
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = v18 + 4;
  *(_BYTE *)(a1 + 24) = v24;
}

float sub_223F47430(_QWORD *a1, int a2)
{
  unint64_t v2;
  float result;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = a1[1];
  result = 0.0;
  if (v2)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v2 <= a2)
        v6 = a2 % v2;
    }
    else
    {
      v6 = (v2 - 1) & a2;
    }
    v7 = *(uint64_t ***)(*a1 + 8 * v6);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        if (v5.u32[0] < 2uLL)
        {
          v9 = v2 - 1;
          while (1)
          {
            v11 = v8[1];
            if (v11 == a2)
            {
              if (*((_DWORD *)v8 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v11 & v9) != v6)
            {
              return result;
            }
            v8 = (uint64_t *)*v8;
            if (!v8)
              return result;
          }
        }
        do
        {
          v10 = v8[1];
          if (v10 == a2)
          {
            if (*((_DWORD *)v8 + 4) == a2)
            {
LABEL_22:
              v12 = a1[5];
              if (!v12)
              {
                if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/DensifierResult.cpp", 41, (uint64_t)"numPixels > 0", 13, (uint64_t)&unk_2245AB53A, 0, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                v12 = a1[5];
              }
              return (float)(unint64_t)v8[3] / (float)v12;
            }
          }
          else
          {
            if (v10 >= v2)
              v10 %= v2;
            if (v10 != v6)
              return result;
          }
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

void sub_223F47580(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, std::string *a5@<X4>, uint64_t a6@<X5>, float32x2_t *a7@<X6>, _DWORD *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  simd_float3x3 v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  float32x4_t v39;
  uint64_t v40;
  float32x4_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  int32x2_t *v44;
  __int128 v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int8 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  void **v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t *v61;
  void *v62;
  char *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  __int128 v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  size_t v101;
  char *v102;
  unsigned __int8 **v103;
  size_t v104;
  int32x4_t v106;
  int32x4_t v107;
  float32x2_t v108;
  float32x4_t v109;
  BOOL v110;
  unint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  unsigned __int8 *v114;
  char *v115;
  char *v116;
  unint64_t v117;
  __int128 v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  unsigned __int32 v122;
  __int128 v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float32x2_t *v133;
  float32x2_t *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  int8x16_t v141;
  int8x16_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  float v153;
  __int128 v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  float32x2_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  int v164;
  std::string::size_type v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char v176;
  unsigned __int8 *v177;
  float32x4_t v178;
  unsigned __int8 v179;
  uint64_t v180;
  float *v181;
  float32x2_t *v182;
  _QWORD *v183;
  void *v184;
  float *v185;
  float v186;
  uint64_t v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float *v192;
  _OWORD *v193;
  _OWORD *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  __int128 v199;
  __int128 v200;
  float32x4_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  void *v210;
  void *v211;
  unsigned __int8 v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  void *v216;
  uint64_t *v217;
  char *v218;
  void *v219;
  char *v220;
  void *v221;
  void *v222;
  _BOOL8 v223;
  uint64_t v224;
  char *v228;
  float32x2_t *v230;
  uint64_t *v231;
  unsigned __int8 *v232;
  uint64_t v233;
  unsigned __int8 *v234;
  unint64_t v237;
  char *v238;
  _BYTE *v239;
  void *v240;
  char *v241;
  void *__p[2];
  _BYTE v243[32];
  float32x4_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float v249;
  float32x4_t v250;
  uint64_t v251;
  void *v252[2];
  _OWORD *v253;
  char v254;
  char v255;
  _QWORD v256[3];
  std::string __dst;
  _QWORD *v258;
  _QWORD *v259;
  float32x2_t v260;
  float32x2_t v261;
  float32x2_t v262;
  __int128 v263;
  std::string::size_type v264;
  unsigned __int8 *v265[3];
  void *v266[4];
  int v267;
  std::string v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  void *v273;
  char *v274;
  float32x2_t v275;
  int v276;
  void *v277;
  __int128 v278;
  __int128 v279;
  char *v280;
  _BYTE v281[32];
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  void *v286;
  __int128 v287;
  uint64_t v288[3];

  v288[0] = *MEMORY[0x24BDAC8D0];
  v12 = *a2;
  v13 = a2[1];
  v14 = *((_DWORD *)a2 + 4);
  v15 = *((_DWORD *)a2 + 5);
  v16 = HIDWORD(v13);
  v17 = (HIDWORD(v13) * v13);
  v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  if (v17 > v18)
    sub_2231DC564((char **)a1, v17 - v18);
  v19 = v13;
  kdebug_trace();
  sub_223F49304(__p);
  v21 = a9;
  if (**((int **)__p[0] + 7) <= 1)
  {
    v22 = atomic_load((unsigned __int8 *)&qword_2540CE088);
    if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE088))
    {
      qword_2540CE080 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ComputesPointsFromDepthMap");
      __cxa_guard_release(&qword_2540CE088);
    }
    v23 = qword_2540CE080;
    *(_BYTE *)(qword_2540CE080 + 16) = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v23 = std::chrono::steady_clock::now();
    *(_BYTE *)(v23 + 16) = 1;
    v21 = a9;
  }
  v20.columns[1].i32[0] = *(_DWORD *)(a6 + 20);
  __p[0] = (void *)*(unsigned int *)(a6 + 16);
  __p[1] = 0;
  *(_QWORD *)v243 = v20.columns[1].u32[0];
  *(_QWORD *)&v243[8] = *(_QWORD *)(a6 + 24);
  v20.columns[0].i64[0] = *(_QWORD *)&v243[8];
  *(_DWORD *)&v243[16] = 1065353216;
  sub_22322BB84((uint64_t)__p, (uint64_t)v281, v20);
  if (v16 && v19)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = *(float *)v281;
    v28 = *(float *)&v281[16];
    v29 = *(float *)&v281[24];
    v30 = *(float *)&v281[28];
    if (v16 <= 1)
      v31 = 1;
    else
      v31 = v16;
    __asm { FMOV            V4.4S, #1.0 }
    do
    {
      v36 = 0;
      v37 = 12 * v25;
      v38 = v24;
      do
      {
        v39.i64[1] = *((_QWORD *)&_Q4 + 1);
        v39.f32[0] = v29 + (float)(v27 * (float)v36);
        v39.f32[1] = v30 + (float)(v28 * (float)v26);
        v40 = *(_QWORD *)a1 + v37;
        v41 = vmulq_n_f32(v39, *(float *)(v12 + 4 * v38));
        *(_DWORD *)(v40 + 8) = v41.i32[2];
        *(_QWORD *)v40 = v41.i64[0];
        ++v36;
        v38 += v14;
        v37 += 12;
      }
      while (v19 != v36);
      ++v26;
      v24 += v15;
      v25 += v36;
    }
    while (v26 != v31);
  }
  kdebug_trace();
  sub_223F49304(&__dst);
  if (**(int **)(__dst.__r_.__value_.__r.__words[0] + 56) <= 1)
  {
    v42 = atomic_load((unsigned __int8 *)&qword_2540CE098);
    if ((v42 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE098))
    {
      qword_2540CE090 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ComputesPointsFromDepthMap");
      __cxa_guard_release(&qword_2540CE098);
      v21 = a9;
    }
    v43 = qword_2540CE090;
    if (*(_BYTE *)(qword_2540CE090 + 16))
    {
      *(_QWORD *)(v43 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v43;
      *(_BYTE *)(v43 + 16) = 0;
    }
  }
  v44 = *(int32x2_t **)a1;
  v45 = *a3;
  v272 = *((_QWORD *)a3 + 2);
  v46 = a4[1];
  v269 = *a4;
  v270 = v46;
  v271 = v45;
  v268 = *a5;
  kdebug_trace();
  sub_223F49304(__p);
  if (**((int **)__p[0] + 7) <= 1)
  {
    v47 = atomic_load((unsigned __int8 *)&qword_2540CE0A8);
    if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE0A8))
    {
      qword_2540CE0A0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_CreateConnectedComponents");
      __cxa_guard_release(&qword_2540CE0A8);
      v21 = a9;
    }
    v48 = qword_2540CE0A0;
    *(_BYTE *)(qword_2540CE0A0 + 16) = 0;
    *(_QWORD *)(v48 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v48 = std::chrono::steady_clock::now();
    *(_BYTE *)(v48 + 16) = 1;
  }
  *(_OWORD *)v281 = v271;
  *(_QWORD *)&v281[16] = v272;
  *(_OWORD *)__p = v269;
  *(_OWORD *)v243 = v270;
  __dst = v268;
  sub_223ED33A8(v44, (uint64_t)v281, (uint64_t)__p, (uint64_t)&__dst, (int64x2_t **)&v273, 8.1096, 0.05);
  v49 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v274 - (_BYTE *)v273) >> 3));
  if (v274 == v273)
    v50 = 0;
  else
    v50 = v49;
  sub_223F4962C((uint64_t *)v273, (uint64_t *)v274, v50, 1);
  kdebug_trace();
  sub_223F49304(v266);
  if (**((int **)v266[0] + 7) <= 1)
  {
    v51 = atomic_load((unsigned __int8 *)&qword_2540CE0B8);
    if ((v51 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE0B8))
    {
      qword_2540CE0B0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_CreateConnectedComponents");
      __cxa_guard_release(&qword_2540CE0B8);
      v21 = a9;
    }
    v52 = qword_2540CE0B0;
    if (*(_BYTE *)(qword_2540CE0B0 + 16))
    {
      *(_QWORD *)(v52 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v52;
      *(_BYTE *)(v52 + 16) = 0;
    }
  }
  v53 = atomic_load((unsigned __int8 *)&unk_25578BB10);
  if ((v53 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
  {
    __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
    __cxa_guard_release((__guard *)&unk_25578BB10);
  }
  if (byte_25578BAF8[23] < 0)
    sub_223197FA4(&__dst, *(void **)byte_25578BAF8, *(unint64_t *)&byte_25578BAF8[8]);
  else
    __dst = *(std::string *)byte_25578BAF8;
  v54 = std::string::append(&__dst, ".", 1uLL);
  v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  *(_QWORD *)&v281[16] = *((_QWORD *)&v54->__r_.__value_.__l + 2);
  *(_OWORD *)v281 = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  v56 = std::string::append((std::string *)v281, "ContinousTrackingResults.ConnectedComponents", 0x2CuLL);
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  *(_QWORD *)v243 = *((_QWORD *)&v56->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  if (v243[7] >= 0)
    v58 = __p;
  else
    v58 = (void **)__p[0];
  strlen((const char *)v58);
  sub_2241471F8();
  v59 = (*(uint64_t (**)(void))(qword_2557952E0 + 48))();
  if ((v243[7] & 0x80000000) == 0)
  {
    if ((v281[23] & 0x80000000) == 0)
      goto LABEL_38;
LABEL_53:
    operator delete(*(void **)v281);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
LABEL_54:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_39;
  }
  operator delete(__p[0]);
  if ((v281[23] & 0x80000000) != 0)
    goto LABEL_53;
LABEL_38:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_39:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59))
  {
    v60 = atomic_load((unsigned __int8 *)&unk_25578BB10);
    if ((v60 & 1) == 0 && __cxa_guard_acquire((__guard *)&unk_25578BB10))
    {
      __cxa_atexit((void (*)(void *))sub_22333F670, &qword_25578BAF0, &dword_22314D000);
      __cxa_guard_release((__guard *)&unk_25578BB10);
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59))
    {
      *(_QWORD *)&v279 = (uint64_t)(*(double *)&qword_25578BAF0 * 1000000000.0);
      *((_QWORD *)&v279 + 1) = 2;
      v61 = sub_2241471F8();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59))
      {
        sub_223ED5278(0xAAAAAAAAAAAAAAABLL * ((v274 - (_BYTE *)v273) >> 3), v281);
        v231 = v61;
        v233 = v59;
        v62 = (void *)a2[1];
        v266[0] = v62;
        LOBYTE(v277) = 0;
        __p[0] = &off_24EC21B18;
        sub_2233B32D0(v266, &v277, (uint64_t *)&__p[1]);
        v63 = (char *)v273;
        v238 = v274;
        if (v273 != v274)
        {
          v240 = 0;
          v64 = v62;
          do
          {
            v66 = *(unint64_t **)v63;
            v65 = (unint64_t *)*((_QWORD *)v63 + 1);
            if (*(unint64_t **)v63 != v65)
            {
              v67 = *(unsigned __int16 *)(*(_QWORD *)v281 + 3 * (_QWORD)v240) | (*(unsigned __int8 *)(*(_QWORD *)v281 + 3 * (_QWORD)v240 + 2) << 16);
              do
              {
                v69 = *v66;
                v71 = LODWORD(v248.f64[1]);
                v70 = HIDWORD(v248.f64[1]);
                v72 = *(_QWORD *)&v243[16];
                if (!*(_QWORD *)&v243[16]
                  && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
                {
                  abort();
                }
                v68 = v72 + v71 * (v69 % v64) + v70 * (v69 / v64);
                *(_BYTE *)(v68 + 2) = BYTE2(v67);
                *(_WORD *)v68 = v67;
                ++v66;
              }
              while (v66 != v65);
            }
            v63 += 24;
            v240 = (char *)v240 + 1;
          }
          while (v63 != v238);
        }
        if (*(_QWORD *)v281)
        {
          *(_QWORD *)&v281[8] = *(_QWORD *)v281;
          operator delete(*(void **)v281);
        }
        v281[0] = 0;
        v281[24] = 0;
        sub_2231C6C30(__p, (__int128 *)v281, &v279, &__dst);
        if (v281[24] && (v281[23] & 0x80000000) != 0)
          operator delete(*(void **)v281);
        v73 = *(std::__shared_weak_count **)v243;
        v21 = a9;
        if (*(_QWORD *)v243)
        {
          v74 = (unint64_t *)(*(_QWORD *)v243 + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v233 + 56))(v233);
        v77 = *(void **)v76;
        v78 = *(std::__shared_weak_count **)(v76 + 8);
        if (v78)
        {
          p_shared_owners = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(p_shared_owners);
          while (__stxr(v80 + 1, p_shared_owners));
        }
        v81 = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
        v266[0] = &off_24EC6A3B8;
        *(_OWORD *)&v266[1] = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
        *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
        __p[0] = v77;
        __p[1] = v78;
        if (v78)
        {
          v82 = (unint64_t *)&v78->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        *(_QWORD *)v243 = &off_24EC6A3B8;
        *(_OWORD *)&v243[8] = v81;
        if (*((_QWORD *)&v81 + 1))
        {
          v84 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
        (*(void (**)(uint64_t *, void **))(*v231 + 16))(v231, __p);
        v86 = *(std::__shared_weak_count **)&v243[16];
        if (*(_QWORD *)&v243[16])
        {
          v87 = (unint64_t *)(*(_QWORD *)&v243[16] + 8);
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        v89 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v90 = (unint64_t *)((char *)__p[1] + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        v92 = (std::__shared_weak_count *)v266[2];
        if (v266[2])
        {
          v93 = (unint64_t *)((char *)v266[2] + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (v78)
        {
          v95 = (unint64_t *)&v78->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v97 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
        if (__dst.__r_.__value_.__r.__words[2])
        {
          v98 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
      }
    }
  }
  v100 = a2[1];
  v101 = (HIDWORD(v100) * v100);
  v102 = *(char **)(a1 + 24);
  v103 = (unsigned __int8 **)(a1 + 24);
  v104 = *(_QWORD *)(a1 + 32) - (_QWORD)v102;
  if (v104)
    _ZF = v101 == v104;
  else
    _ZF = 0;
  if (_ZF)
  {
    if (HIDWORD(v100) * (_DWORD)v100)
      memset(v102, 255, v101);
  }
  else if (v101 <= v104)
  {
    if (v101 < v104)
      *(_QWORD *)(a1 + 32) = &v102[v101];
  }
  else
  {
    sub_2232E92B0((unint64_t *)(a1 + 24), v101 - v104, byte_224690E91);
  }
  LOBYTE(__p[0]) = -1;
  memset(v266, 0, sizeof(v266));
  v267 = 1065353216;
  sub_2236EA858((uint64_t)v266, (unsigned __int8 *)__p, __p);
  if ((_DWORD)v100)
    v110 = HIDWORD(v100) == 0;
  else
    v110 = 1;
  if (v110)
    v111 = 0;
  else
    v111 = v100;
  v112 = (_DWORD)v111 != 0;
  if (v111 <= 0x100000000)
    v113 = 0x100000000;
  else
    v113 = v111;
  v232 = (unsigned __int8 *)v111;
  v234 = *v103;
  v114 = *v103;
  if (HIDWORD(v111) * (_DWORD)v113 == -1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v114 = *v103;
  }
  v115 = *(char **)a1;
  v239 = v273;
  v116 = v274;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2) != *(_QWORD *)(a1 + 32)
                                                                                     - (_QWORD)v114
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/DepthMapPlaneDetector.cpp", 132, (uint64_t)"points.size() == planeLabels.size()", 35, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v224 = v113;
  v117 = 0xAAAAAAAAAAAAAAABLL * ((v116 - v239) >> 3);
  *(float32x2_t *)v106.i8 = *a7;
  v106.i32[2] = a7[1].i32[0];
  *(float32x2_t *)v107.i8 = a7[2];
  v107.i32[2] = a7[3].i32[0];
  v108.i32[0] = a7[5].i32[0];
  *(_QWORD *)&v118 = vzip1q_s32(v106, v107).u64[0];
  *(float32x2_t *)v109.f32 = a7[6];
  v109.i32[2] = a7[7].i32[0];
  v119 = (int8x16_t)vnegq_f32(v109);
  v120 = (int8x16_t)vtrn2q_s32(v106, v107);
  v120.i32[2] = HIDWORD(*(_QWORD *)&a7[4]);
  v121 = (int8x16_t)vzip2q_s32(v106, v107);
  v121.i32[2] = v108.i32[0];
  v122 = vmla_f32(vmls_lane_f32(vmul_f32(a7[4], *(float32x2_t *)v119.i8), (float32x2_t)vdup_lane_s32((int32x2_t)a7[4], 1), *(float32x2_t *)v109.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL), v108).u32[0];
  *((_QWORD *)&v118 + 1) = *(_QWORD *)&a7[4];
  HIDWORD(v123) = 0;
  LODWORD(v123) = vdupq_lane_s32(*(int32x2_t *)&v120, 0).i32[3];
  *(_QWORD *)((char *)&v123 + 4) = vextq_s8(v120, v121, 4uLL).u64[0];
  v121.i64[1] = vdupq_laneq_s32((int32x4_t)v121, 2).u32[0];
  *(_OWORD *)v243 = v123;
  *(int8x16_t *)&v243[16] = v121;
  *(_OWORD *)__p = v118;
  *(float32x2_t *)v244.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(*(float32x2_t *)&v118, *(float *)v119.i32), *(float32x2_t *)v120.i8, *(float32x2_t *)v109.f32, 1), *(float32x2_t *)v121.i8, v109, 2);
  v244.i64[1] = v122 | 0x3F80000000000000;
  if (v117 >= 5)
    v117 = 5;
  v237 = v117;
  if (!v117)
  {
    v125 = 0;
    v124 = 0;
    v176 = 1;
    goto LABEL_184;
  }
  v223 = v112;
  v124 = 0;
  v125 = 0;
  v228 = 0;
  v126 = 0;
  v230 = (float32x2_t *)((unint64_t)&v277 | 0xC);
  do
  {
    v127 = &v239[24 * v126];
    v129 = *(uint64_t **)v127;
    v128 = (uint64_t *)*((_QWORD *)v127 + 1);
    v130 = *(_QWORD *)v127 - (_QWORD)v128;
    v279 = 0uLL;
    v280 = 0;
    v241 = v124;
    if (v129 == v128)
    {
      v140 = 0;
      v134 = 0;
    }
    else
    {
      v131 = v130 >> 3;
      v132 = -v131;
      if ((unint64_t)-v131 >= 0x1555555555555556)
        sub_22316E078();
      v133 = (float32x2_t *)operator new(-12 * v131);
      v134 = v133;
      v135 = 0;
      *(_QWORD *)&v279 = v133;
      v280 = (char *)v133 + 12 * v132;
      do
      {
        v136 = (char *)v133 + v135;
        v137 = *v129++;
        v138 = &v115[12 * v137];
        v139 = *(_QWORD *)v138;
        *((_DWORD *)v136 + 2) = *((_DWORD *)v138 + 2);
        *(_QWORD *)v136 = v139;
        v135 += 12;
      }
      while (v129 != v128);
      v140 = (char *)v133 + v135;
      *((_QWORD *)&v279 + 1) = v140;
      v124 = v241;
    }
    sub_223F4AC80(0xAAAAAAAAAAAAAAABLL * ((v140 - (char *)v134) >> 2), v134, (uint64_t)v281);
    if (!BYTE8(v283))
      goto LABEL_174;
    v141 = *(int8x16_t *)v243;
    v142 = *(int8x16_t *)&v243[16];
    *(float32x2_t *)v143.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)__p[0], *(float *)v281), *(float32x2_t *)v243, *(float32x2_t *)v281, 1), *(float32x2_t *)&v243[16], *(float32x4_t *)v281, 2);
    v144 = (float32x2_t)vextq_s8(*(int8x16_t *)__p, *(int8x16_t *)__p, 8uLL).u64[0];
    v145 = (float32x2_t)vextq_s8(v141, v141, 8uLL).u64[0];
    v146 = (float32x2_t)vextq_s8(v142, v142, 8uLL).u64[0];
    v147 = vmla_f32(vmla_lane_f32(vmul_f32(v144, *(float32x2_t *)v281), v145, *(float32x2_t *)v281, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v281, *(int8x16_t *)v281, 8uLL), v146);
    *(float32x2_t *)&v143.u32[2] = v147;
    v148 = vaddq_f32(v244, v143);
    v147.i32[0] = *(_DWORD *)&v281[20];
    *(float32x2_t *)v149.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)__p[0], *(float *)&v281[12]), *(float32x2_t *)v243, *(float32x2_t *)&v281[12], 1), *(float32x2_t *)&v243[16], *(float *)&v281[20]);
    *(float32x2_t *)v141.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v144, *(float32x2_t *)&v281[12]), v145, *(float32x2_t *)&v281[12], 1), v147, v146);
    v150 = (int8x16_t)vsubq_f32(v148, v244);
    v143.i64[0] = vextq_s8(v150, v150, 8uLL).u64[0];
    v151 = (int8x16_t)vmulq_n_f32((float32x4_t)v150, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v150.i8, *(float32x2_t *)v150.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v150.i8, 1), *(float32x2_t *)v150.i8, 1), *(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32).f32[0]));
    v149.i64[1] = v141.i64[0];
    LODWORD(v278) = v148.i32[2];
    v277 = (void *)v148.i64[0];
    *(float32x2_t *)v142.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v149.f32, *(float32x2_t *)v151.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.i8, 1), *(float32x2_t *)v149.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL), *(float32x2_t *)v141.i8);
    v141.i32[0] = 0;
    v152 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v142, (float32x4_t)v141), 0), (int8x16_t)vnegq_f32(v149), (int8x16_t)v149);
    HIDWORD(v278) = v152.i32[2];
    *(_QWORD *)((char *)&v278 + 4) = v152.i64[0];
    v153 = fabsf(vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL), vmla_lane_f32(vmul_f32(*(float32x2_t *)v152.i8, 0), 0, *(float32x2_t *)v152.i8, 1)).f32[0]);
    if (v153 <= 0.99619)
    {
      if (v153 >= 0.17365)
      {
        if ((*a8 & 4) == 0)
        {
LABEL_147:
          v124 = v241;
LABEL_172:
          if ((_QWORD)v282)
          {
            *((_QWORD *)&v282 + 1) = v282;
            operator delete((void *)v282);
          }
          goto LABEL_174;
        }
      }
      else if ((*a8 & 2) == 0)
      {
        goto LABEL_147;
      }
    }
    else if ((*a8 & 1) == 0)
    {
      goto LABEL_147;
    }
    v154 = v282;
    v155 = *(_QWORD **)v127;
    v287 = 0uLL;
    v286 = 0;
    if ((_QWORD)v282 == *((_QWORD *)&v282 + 1))
    {
      v159 = 0;
      v157 = 0;
      v124 = v241;
      if (v153 > 0.99619)
        goto LABEL_149;
    }
    else
    {
      if ((unint64_t)-((uint64_t)(v282 - *((_QWORD *)&v282 + 1)) >> 3) >> 61)
        sub_22367C394();
      v156 = operator new(-8 * ((uint64_t)(v282 - *((_QWORD *)&v282 + 1)) >> 3));
      v157 = v156;
      v158 = 0;
      v286 = v156;
      *((_QWORD *)&v287 + 1) = &v156[-((uint64_t)(v154 - *((_QWORD *)&v154 + 1)) >> 3)];
      do
      {
        v156[v158] = v155[*(_QWORD *)(v154 + v158 * 8)];
        ++v158;
      }
      while ((_QWORD)v154 + v158 * 8 != *((_QWORD *)&v154 + 1));
      v159 = (float32x2_t)&v156[v158];
      v21 = a9;
      v124 = v241;
      if (v153 > 0.99619)
      {
LABEL_149:
        sub_223F4BE38((uint64_t)v115, (float32x2_t *)__p, (uint64_t)(*(_QWORD *)&v159 - (_QWORD)v157) >> 3, v157, v230, (uint64_t)&__dst);
        v277 = (void *)__dst.__r_.__value_.__r.__words[0];
        LODWORD(v278) = __dst.__r_.__value_.__r.__words[1];
        *v230 = *(float32x2_t *)((char *)&__dst.__r_.__value_.__r.__words[1] + 4);
        *(_DWORD *)(((unint64_t)&v277 | 0xC) + 8) = HIDWORD(__dst.__r_.__value_.__r.__words[2]);
        if (v157)
        {
          operator delete(v157);
          *(_QWORD *)&v287 = 0;
        }
        v157 = v258;
        v159 = (float32x2_t)v259;
        v286 = v258;
        *((float32x2_t *)&v287 + 1) = v260;
        if (v258 == v259)
          goto LABEL_169;
      }
    }
    v160 = v125 - v124;
    if (v157 != *(_QWORD **)&v159)
    {
      v161 = v157;
      do
      {
        v162 = *v161++;
        v114[v162] = (unint64_t)v160 >> 5;
      }
      while (v161 != (uint64_t *)v159);
    }
    v163 = (v160 >> 5);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v277;
    LODWORD(__dst.__r_.__value_.__r.__words[1]) = v278;
    v275 = *v230;
    v276 = *(_DWORD *)(((unint64_t)&v277 | 0xC) + 8);
    v164 = *(_DWORD *)&v281[24];
    if (v125 < v228)
    {
      *(_DWORD *)v125 = v163;
      v165 = __dst.__r_.__value_.__r.__words[0];
      *((_DWORD *)v125 + 3) = __dst.__r_.__value_.__r.__words[1];
      *(_QWORD *)(v125 + 4) = v165;
      *((float32x2_t *)v125 + 2) = v275;
      *((_DWORD *)v125 + 6) = v276;
      *((_DWORD *)v125 + 7) = v164;
      v125 += 32;
      goto LABEL_169;
    }
    v166 = v160 >> 5;
    v167 = (v160 >> 5) + 1;
    if (v167 >> 59)
      sub_22316E078();
    if ((v228 - v241) >> 4 > v167)
      v167 = (v228 - v241) >> 4;
    if ((unint64_t)(v228 - v241) >= 0x7FFFFFFFFFFFFFE0)
      v168 = 0x7FFFFFFFFFFFFFFLL;
    else
      v168 = v167;
    if (v168 >> 59)
      sub_223174E94();
    v169 = (char *)operator new(32 * v168);
    v170 = &v169[32 * v166];
    *(_DWORD *)v170 = v163;
    *(_QWORD *)(v170 + 4) = v277;
    *((_DWORD *)v170 + 3) = v278;
    *((float32x2_t *)v170 + 2) = *v230;
    *((_DWORD *)v170 + 6) = *(_DWORD *)(((unint64_t)&v277 | 0xC) + 8);
    *((_DWORD *)v170 + 7) = v164;
    if (v125 == v241)
    {
      v124 = &v169[32 * v166];
      v228 = &v169[32 * v168];
      v125 = v170 + 32;
      if (v241)
        goto LABEL_168;
    }
    else
    {
      v171 = 0;
      do
      {
        v172 = &v170[v171];
        *((_DWORD *)v172 - 8) = *(_DWORD *)&v125[v171 - 32];
        v173 = *(_QWORD *)&v125[v171 - 28];
        *((_DWORD *)v172 - 5) = *(_DWORD *)&v125[v171 - 20];
        *(_QWORD *)(v172 - 28) = v173;
        v174 = *(_QWORD *)&v125[v171 - 16];
        *((_DWORD *)v172 - 2) = *(_DWORD *)&v125[v171 - 8];
        *((_QWORD *)v172 - 2) = v174;
        *((_DWORD *)v172 - 1) = *(_DWORD *)&v125[v171 - 4];
        v171 -= 32;
      }
      while (&v125[v171] != v241);
      v124 = &v170[v171];
      v228 = &v169[32 * v168];
      v125 = v170 + 32;
      if (v241)
LABEL_168:
        operator delete(v241);
    }
LABEL_169:
    if (v157)
    {
      *(_QWORD *)&v287 = v157;
      operator delete(v157);
    }
    if (BYTE8(v283))
      goto LABEL_172;
LABEL_174:
    if ((_QWORD)v279)
      operator delete((void *)v279);
    ++v126;
  }
  while (v126 != v237);
  if (v124 == v125)
  {
    v176 = 1;
    v125 = v124;
    v112 = v223;
  }
  else
  {
    v175 = v124;
    v112 = v223;
    do
    {
      LOBYTE(__p[0]) = *(_DWORD *)v175;
      sub_2236EAB58((uint64_t)v266, (unsigned __int8 *)__p, __p);
      v175 += 32;
    }
    while (v175 != v125);
    v176 = 0;
  }
LABEL_184:
  v177 = (unsigned __int8 *)(v112 | (v224 << 32));
  v265[0] = v234;
  v265[1] = v232;
  v265[2] = v177;
  v263 = *(_OWORD *)&a5->__r_.__value_.__l.__data_;
  v264 = a5->__r_.__value_.__r.__words[2];
  sub_223F4C3C8(v265, (unsigned __int8 **)&v263, (((_DWORD)v125 - (_DWORD)v124) >> 5), (int8x16_t **)&v279);
  kdebug_trace();
  sub_223F49304(__p);
  if (**((int **)__p[0] + 7) <= 1)
  {
    v179 = atomic_load((unsigned __int8 *)&qword_2540CE068);
    if ((v179 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE068))
    {
      qword_2540CE060 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ComputePlaneGeometryObservations");
      __cxa_guard_release(&qword_2540CE068);
      v21 = a9;
    }
    v180 = qword_2540CE060;
    *(_BYTE *)(qword_2540CE060 + 16) = 0;
    *(_QWORD *)(v180 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v180 = std::chrono::steady_clock::now();
    *(_BYTE *)(v180 + 16) = 1;
  }
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  if ((v176 & 1) == 0)
  {
    v181 = (float *)v124;
    v182 = a7;
    do
    {
      v275.i8[0] = *(_DWORD *)v181;
      sub_223F2B9A0((uint64_t)(v181 + 1), (float32x4_t *)&__dst, v178);
      sub_223F4A94C(v266, (unsigned __int8 *)&v275);
      v256[0] = v234;
      v256[1] = v232;
      v256[2] = v177;
      v183 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
      sub_223F532C4((uint64_t)v256, (uint64_t)v266, v182, v183, (uint64_t)(v181 + 1), (float32x2_t *)&__dst, (uint64_t)&v277);
      sub_2236EA858((uint64_t)v266, (unsigned __int8 *)&v275, &v275);
      v184 = v277;
      v178.i32[0] = 0;
      if ((_QWORD)v278 - (_QWORD)v277 >= 0x18uLL)
      {
        v185 = (float *)((char *)v277 + 12);
        v186 = 0.0;
        v187 = ((uint64_t)(v278 - (_QWORD)v277) >> 3) - 1;
        v188 = *((float *)v277 + 1);
        v189 = *(float *)v277;
        do
        {
          v190 = *v185;
          v191 = v186 - (float)(v189 * *v185);
          v189 = *(v185 - 1);
          v186 = v191 + (float)(v188 * v189);
          v185 += 2;
          v188 = v190;
          --v187;
        }
        while (v187);
        v192 = (float *)((char *)v277 + 8 * ((uint64_t)(v278 - (_QWORD)v277) >> 3) - 8);
        v178.f32[0] = (float)((float)(v186 - (float)(*((float *)v277 + 1) * *v192)) + (float)(*(float *)v277 * v192[1]))
                    * 0.5;
      }
      v178.f32[0] = fabsf(v178.f32[0]);
      if (v178.f32[0] >= 0.0025)
      {
        *(float64x2_t *)__p = vcvtq_f64_f32((float32x2_t)__dst.__r_.__value_.__l.__data_);
        *(float64x2_t *)v243 = vcvtq_f64_f32((float32x2_t)__dst.__r_.__value_.__r.__words[1]);
        *(float64x2_t *)&v243[16] = vcvtq_f64_f32((float32x2_t)__dst.__r_.__value_.__r.__words[2]);
        v244 = (float32x4_t)vcvtq_f64_f32((float32x2_t)v258);
        v245 = vcvtq_f64_f32((float32x2_t)v259);
        v246 = vcvtq_f64_f32(v260);
        v247 = vcvtq_f64_f32(v261);
        v248 = vcvtq_f64_f32(v262);
        v249 = v181[7] * 3.0;
        v286 = v277;
        v287 = v278;
        v277 = 0;
        v278 = 0uLL;
        v251 = 0;
        v250 = 0uLL;
        v250.i64[0] = (uint64_t)operator new(0x18uLL);
        v250.i64[1] = v250.i64[0];
        v251 = v250.i64[0] + 24;
        v250.i64[1] = (uint64_t)sub_2236B97AC((uint64_t)&v251, (uint64_t)&v286, (uint64_t)v288, v250.i64[0]);
        v193 = (_OWORD *)(v279 + 96 * v275.u8[0]);
        v282 = v193[2];
        v283 = v193[3];
        v284 = v193[4];
        v285 = v193[5];
        *(_OWORD *)v281 = *v193;
        *(_OWORD *)&v281[16] = v193[1];
        v194 = operator new(0x60uLL);
        v195 = v283;
        v194[2] = v282;
        v194[3] = v195;
        v196 = v285;
        v194[4] = v284;
        v194[5] = v196;
        v197 = *(_OWORD *)&v281[16];
        *v194 = *(_OWORD *)v281;
        v194[1] = v197;
        v252[0] = v194;
        v252[1] = v194 + 6;
        v253 = v194 + 6;
        v254 = 1;
        v255 = 0;
        if (v286)
        {
          *(_QWORD *)&v287 = v286;
          operator delete(v286);
        }
        v198 = *(_QWORD *)(v21 + 8);
        if (v198 >= *(_QWORD *)(v21 + 16))
        {
          v205 = sub_223F4A4D8((void **)v21, (uint64_t)__p);
        }
        else
        {
          v199 = *(_OWORD *)__p;
          v200 = *(_OWORD *)v243;
          v201 = v244;
          *(_OWORD *)(v198 + 32) = *(_OWORD *)&v243[16];
          *(float32x4_t *)(v198 + 48) = v201;
          *(_OWORD *)v198 = v199;
          *(_OWORD *)(v198 + 16) = v200;
          v202 = v245;
          v203 = v246;
          v204 = v248;
          *(float64x2_t *)(v198 + 96) = v247;
          *(float64x2_t *)(v198 + 112) = v204;
          *(float64x2_t *)(v198 + 64) = v202;
          *(float64x2_t *)(v198 + 80) = v203;
          *(float *)(v198 + 128) = v249;
          *(_QWORD *)(v198 + 136) = 0;
          *(_QWORD *)(v198 + 144) = 0;
          *(_QWORD *)(v198 + 152) = 0;
          v178 = v250;
          *(float32x4_t *)(v198 + 136) = v250;
          *(_QWORD *)(v198 + 152) = v251;
          v250 = 0uLL;
          v251 = 0;
          *(_BYTE *)(v198 + 160) = 0;
          *(_BYTE *)(v198 + 184) = 0;
          if (v254)
          {
            *(_QWORD *)(v198 + 160) = 0;
            *(_QWORD *)(v198 + 168) = 0;
            *(_QWORD *)(v198 + 176) = 0;
            v178 = *(float32x4_t *)v252;
            *(_OWORD *)(v198 + 160) = *(_OWORD *)v252;
            *(_QWORD *)(v198 + 176) = v253;
            v252[0] = 0;
            v252[1] = 0;
            v253 = 0;
            *(_BYTE *)(v198 + 184) = 1;
          }
          *(_BYTE *)(v198 + 192) = v255;
          v205 = (char *)(v198 + 200);
        }
        *(_QWORD *)(v21 + 8) = v205;
        if (v254 && v252[0])
        {
          v252[1] = v252[0];
          operator delete(v252[0]);
        }
        v206 = v250.i64[0];
        if (v250.i64[0])
        {
          v207 = v250.i64[1];
          v208 = (void *)v250.i64[0];
          if (v250.i64[1] != v250.i64[0])
          {
            v209 = v250.i64[1];
            do
            {
              v211 = *(void **)(v209 - 24);
              v209 -= 24;
              v210 = v211;
              if (v211)
              {
                *(_QWORD *)(v207 - 16) = v210;
                operator delete(v210);
              }
              v207 = v209;
            }
            while (v209 != v206);
            v208 = (void *)v250.i64[0];
            v182 = a7;
          }
          v250.i64[1] = v206;
          operator delete(v208);
        }
        v184 = v277;
      }
      if (v184)
      {
        *(_QWORD *)&v278 = v184;
        operator delete(v184);
      }
      v181 += 8;
    }
    while (v181 != (float *)v125);
  }
  kdebug_trace();
  sub_223F49304(__p);
  if (**((int **)__p[0] + 7) <= 1)
  {
    v212 = atomic_load((unsigned __int8 *)&qword_2540CE078);
    if ((v212 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE078))
    {
      qword_2540CE070 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_ComputePlaneGeometryObservations");
      __cxa_guard_release(&qword_2540CE078);
    }
    v213 = qword_2540CE070;
    if (*(_BYTE *)(qword_2540CE070 + 16))
    {
      *(_QWORD *)(v213 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v213;
      *(_BYTE *)(v213 + 16) = 0;
    }
  }
  if ((_QWORD)v279)
  {
    *((_QWORD *)&v279 + 1) = v279;
    operator delete((void *)v279);
  }
  if (v124)
    operator delete(v124);
  v214 = v266[2];
  if (v266[2])
  {
    do
    {
      v215 = (_QWORD *)*v214;
      operator delete(v214);
      v214 = v215;
    }
    while (v215);
  }
  v216 = v266[0];
  v266[0] = 0;
  if (v216)
    operator delete(v216);
  v217 = (uint64_t *)v273;
  if (v273)
  {
    v218 = v274;
    v219 = v273;
    if (v274 != v273)
    {
      v220 = v274;
      do
      {
        v222 = (void *)*((_QWORD *)v220 - 3);
        v220 -= 24;
        v221 = v222;
        if (v222)
        {
          *((_QWORD *)v218 - 2) = v221;
          operator delete(v221);
        }
        v218 = v220;
      }
      while (v220 != (char *)v217);
      v219 = v273;
    }
    v274 = (char *)v217;
    operator delete(v219);
  }
}

void sub_223F48E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *v68;

  __cxa_guard_abort(&qword_2540CE078);
  a25 = a15;
  sub_223F3A870((void ***)&a25);
  v68 = (void *)STACK[0x298];
  if (STACK[0x298])
  {
    STACK[0x2A0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (a24)
    operator delete(a24);
  sub_22322E828((uint64_t)&a67);
  sub_22317C838((void **)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_223F49304(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_255795068);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_255795068))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_255795060);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_255795068);
  }
  *a1 = qword_255795060;
}

void sub_223F493A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_255795068);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_255795068);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F493F8@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, float32x2_t *a7@<X6>, _DWORD *a8@<X7>, uint64_t a9@<X8>)
{
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *result;
  uint64_t v25;
  std::string v26;
  __int128 v27[2];
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223F49304(v32);
  if (**(int **)(v32[0] + 56) <= 1)
  {
    v18 = atomic_load((unsigned __int8 *)&qword_255795058);
    if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_255795058))
    {
      qword_255795050 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_DepthBasedDetect");
      __cxa_guard_release(&qword_255795058);
    }
    v19 = qword_255795050;
    *(_BYTE *)(qword_255795050 + 16) = 0;
    *(_QWORD *)(v19 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v19 = std::chrono::steady_clock::now();
    *(_BYTE *)(v19 + 16) = 1;
  }
  v32[0] = &off_24EC642B0;
  v33 = v32;
  v20 = *a1;
  v30 = *a2;
  v31 = *((_QWORD *)a2 + 2);
  v21 = *(_OWORD *)a3;
  v29 = *(_QWORD *)(a3 + 16);
  v22 = a4[1];
  v27[0] = *a4;
  v27[1] = v22;
  v28 = v21;
  v23 = *a5;
  v26.__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v23;
  sub_223F47580(v20, (uint64_t *)&v30, &v28, v27, &v26, a6, a7, a8, a9);
  if (!v33)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v33 + 48))(v33);
  result = v33;
  if (v33 == v32)
  {
    v25 = 4;
    result = v32;
  }
  else
  {
    if (!v33)
      return result;
    v25 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
}

void sub_223F495E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_255795058);
  _Unwind_Resume(a1);
}

void sub_223F495F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_22318A1C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223F49610(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223F4962C(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  BOOL v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;

uint64_t *sub_223F49F58(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = sub_223F4A3E4(a1, a2, a3, a4);
  v11 = *a4;
  if (a5[1] - *a5 > (unint64_t)(a4[1] - *a4))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    v14 = *a3;
    if (a4[1] - *a4 > (unint64_t)(a3[1] - *a3))
    {
      *a3 = *a4;
      *a4 = v14;
      v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      v16 = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      v17 = *a2;
      if (a3[1] - *a3 > (unint64_t)(a2[1] - *a2))
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        v20 = *a1;
        if (a2[1] - *a2 > (unint64_t)(a1[1] - *a1))
        {
          *a1 = *a2;
          *a2 = v20;
          v21 = a1[1];
          a1[1] = a2[1];
          a2[1] = v21;
          v22 = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_223F4A098(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a2;
  v4 = *result;
  v5 = a2[1] - *a2;
  v6 = *a3;
  v7 = a3[1] - *a3;
  if (v5 > result[1] - *result)
  {
    if (v7 <= v5)
    {
      *result = v3;
      *a2 = v4;
      v15 = result[1];
      result[1] = a2[1];
      a2[1] = v15;
      v8 = a2 + 2;
      v16 = result[2];
      result[2] = a2[2];
      a2[2] = v16;
      v17 = *a2;
      if (a3[1] - *a3 <= (unint64_t)(a2[1] - *a2))
        return result;
      *a2 = *a3;
      *a3 = v17;
      v9 = a2[1];
      a2[1] = a3[1];
    }
    else
    {
      v8 = result + 2;
      *result = v6;
      *a3 = v4;
      v9 = result[1];
      result[1] = a3[1];
    }
    a3[1] = v9;
    v12 = a3 + 2;
    goto LABEL_10;
  }
  if (v7 > v5)
  {
    *a2 = v6;
    *a3 = v3;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = a2 + 2;
    v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    v13 = *result;
    if (a2[1] - *a2 > (unint64_t)(result[1] - *result))
    {
      *result = *a2;
      *a2 = v13;
      v14 = result[1];
      result[1] = a2[1];
      a2[1] = v14;
      v8 = result + 2;
LABEL_10:
      v18 = *v8;
      *v8 = *v12;
      *v12 = v18;
    }
  }
  return result;
}

BOOL sub_223F4A1BC(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = *(a2 - 3);
      v20 = *a1;
      if (*(a2 - 2) - v19 > (unint64_t)(a1[1] - *a1))
      {
        *a1 = v19;
        *(a2 - 3) = v20;
        v21 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v21;
        v22 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v22;
      }
      break;
    case 3uLL:
      sub_223F4A098(a1, a1 + 3, a2 - 3);
      result = 1;
      break;
    case 4uLL:
      sub_223F4A3E4(a1, a1 + 3, a1 + 6, a2 - 3);
      result = 1;
      break;
    case 5uLL:
      sub_223F49F58(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      result = 1;
      break;
    default:
      v6 = a1 + 6;
      sub_223F4A098(a1, a1 + 3, a1 + 6);
      v7 = a1 + 9;
      if (a1 + 9 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *v7;
          v11 = v7[1];
          v12 = *v6;
          v13 = v11 - *v7;
          if (v13 > v6[1] - *v6)
            break;
LABEL_12:
          v6 = v7;
          v8 += 24;
          v7 += 3;
          if (v7 == a2)
            goto LABEL_13;
        }
        v14 = v7[2];
        *v7 = 0;
        v7[1] = 0;
        v15 = v8;
        v7[2] = 0;
        do
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          v17 = *(uint64_t *)((char *)a1 + v15 + 64);
          v16[10] = *(uint64_t *)((char *)a1 + v15 + 56);
          v16[11] = v17;
          v16[8] = 0;
          v16[9] = v12;
          v16[6] = 0;
          v16[7] = 0;
          if (v15 == -48)
          {
            *a1 = v10;
            a1[1] = v11;
            a1[2] = v14;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_19;
          }
          v12 = v16[3];
          v15 -= 24;
        }
        while (v13 > v16[4] - v12);
        v18 = (char *)a1 + v15;
        *((_QWORD *)v18 + 9) = v10;
        *((_QWORD *)v18 + 10) = v11;
        *(uint64_t *)((char *)a1 + v15 + 88) = v14;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_19:
        result = v7 + 3 == a2;
      }
      break;
  }
  return result;
}

uint64_t *sub_223F4A3E4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_223F4A098(a1, a2, a3);
  v9 = *a3;
  if (a4[1] - *a4 > (unint64_t)(a3[1] - *a3))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    v12 = *a2;
    if (a3[1] - *a3 > (unint64_t)(a2[1] - *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      v15 = *a1;
      if (a2[1] - *a2 > (unint64_t)(a1[1] - *a1))
      {
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

char *sub_223F4A4D8(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  __int128 v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;

  v3 = 0x8F5C28F5C28F5C29 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x147AE147AE147AELL)
    sub_22316E078();
  if (0x1EB851EB851EB852 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x1EB851EB851EB852 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0x8F5C28F5C28F5C29 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xA3D70A3D70A3D7)
    v6 = 0x147AE147AE147AELL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x147AE147AE147AELL)
      sub_223174E94();
    v7 = operator new(200 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 80);
  v9 = (char *)&v7[25 * v3];
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v9 + 5) = v8;
  v10 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v9 + 7) = v10;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v9 + 3) = v12;
  *((_DWORD *)v9 + 32) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(v9 + 136) = *(_OWORD *)(a2 + 136);
  *((_QWORD *)v9 + 19) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v9[160] = 0;
  v9[184] = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    *((_QWORD *)v9 + 22) = 0;
    *((_OWORD *)v9 + 10) = *(_OWORD *)(a2 + 160);
    v7[25 * v3 + 22] = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    v9[184] = 1;
  }
  v13 = (char *)&v7[25 * v6];
  LOBYTE(v7[25 * v3 + 24]) = *(_BYTE *)(a2 + 192);
  v14 = v9 + 200;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v9[v17];
      v19 = &v16[v17];
      v20 = *(_OWORD *)&v16[v17 - 200];
      v21 = *(_OWORD *)&v16[v17 - 184];
      v22 = *(_OWORD *)&v16[v17 - 168];
      *(_OWORD *)(v18 - 152) = *(_OWORD *)&v16[v17 - 152];
      *(_OWORD *)(v18 - 168) = v22;
      *(_OWORD *)(v18 - 184) = v21;
      *(_OWORD *)(v18 - 200) = v20;
      v23 = *(_OWORD *)&v16[v17 - 136];
      v24 = *(_OWORD *)&v16[v17 - 120];
      v25 = *(_OWORD *)&v16[v17 - 104];
      *(_OWORD *)(v18 - 88) = *(_OWORD *)&v16[v17 - 88];
      *(_OWORD *)(v18 - 104) = v25;
      *(_OWORD *)(v18 - 120) = v24;
      *(_OWORD *)(v18 - 136) = v23;
      *((_DWORD *)v18 - 18) = *(_DWORD *)&v16[v17 - 72];
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_OWORD *)v18 - 4) = *(_OWORD *)&v16[v17 - 64];
      *((_QWORD *)v18 - 6) = *(_QWORD *)&v16[v17 - 48];
      *((_QWORD *)v19 - 8) = 0;
      *((_QWORD *)v19 - 7) = 0;
      *((_QWORD *)v19 - 6) = 0;
      *(v18 - 40) = 0;
      *(v18 - 16) = 0;
      if (v16[v17 - 16])
      {
        *((_QWORD *)v18 - 4) = 0;
        *((_QWORD *)v18 - 3) = 0;
        *(_OWORD *)(v18 - 40) = *(_OWORD *)(v19 - 40);
        *((_QWORD *)v18 - 3) = *((_QWORD *)v19 - 3);
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v19 - 3) = 0;
        *(v18 - 16) = 1;
      }
      *(v18 - 8) = *(v19 - 8);
      v17 -= 200;
    }
    while (&v16[v17] != v15);
    v16 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = &v9[v17];
    a1[1] = v14;
    a1[2] = v13;
    while (v26 != v16)
    {
      if (*(v26 - 16))
      {
        v28 = (void *)*((_QWORD *)v26 - 5);
        if (v28)
        {
          *((_QWORD *)v26 - 4) = v28;
          operator delete(v28);
        }
      }
      v29 = *((_QWORD *)v26 - 8);
      if (v29)
      {
        v30 = *((_QWORD *)v26 - 7);
        v27 = (void *)*((_QWORD *)v26 - 8);
        if (v30 != v29)
        {
          v31 = *((_QWORD *)v26 - 7);
          do
          {
            v33 = *(void **)(v31 - 24);
            v31 -= 24;
            v32 = v33;
            if (v33)
            {
              *(_QWORD *)(v30 - 16) = v32;
              operator delete(v32);
            }
            v30 = v31;
          }
          while (v31 != v29);
          v27 = (void *)*((_QWORD *)v26 - 8);
        }
        *((_QWORD *)v26 - 7) = v29;
        operator delete(v27);
      }
      v26 -= 200;
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

size_t *sub_223F4A7B4(size_t *a1, size_t a2, void **a3, char a4, uint64_t a5)
{
  void *v7;
  int v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  int v16;
  void *v17;
  unint64_t v18;
  BOOL v19;
  void *memptr[3];
  size_t v22[2];

  if (a4)
  {
    v7 = *a3;
    v8 = *(_DWORD *)(a2 + 12);
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a2 + 8);
    v8 = *(_DWORD *)(a2 + 12);
    v10 = (_DWORD)v9 != 0;
    if (v8)
      v9 = v9;
    else
      v9 = 0;
    v7 = (void *)(v10 | (v9 << 32));
  }
  v11 = (v8 * HIDWORD(v7));
  v12 = (a5 - 1) | ((unint64_t)(a5 - 1) >> 1) | (((a5 - 1) | ((unint64_t)(a5 - 1) >> 1)) >> 2);
  v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  v14 = v13 | (v13 >> 16) | ((v13 | (v13 >> 16)) >> 32);
  if (v14 + 1 > 8)
    v15 = v14 + 1;
  else
    v15 = 8;
  *a1 = v11;
  a1[1] = 0;
  a1[2] = v15;
  if (!(_DWORD)v11)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a2 + 8);
    a1[3] = v18;
    a1[4] = (size_t)v7;
    if (!*(_DWORD *)(a2 + 8))
      return a1;
    goto LABEL_15;
  }
  memptr[0] = 0;
  v16 = malloc_type_posix_memalign(memptr, v15, v11, 0x1F88E90uLL);
  if (v16)
    sub_2244E2E20(v16, a1[2], v11);
  v17 = memptr[0];
  a1[1] = (size_t)memptr[0];
  v18 = *(_QWORD *)(a2 + 8);
  a1[3] = v18;
  a1[4] = (size_t)v7;
  if (*(_DWORD *)(a2 + 8))
  {
LABEL_15:
    if (*(_DWORD *)(a2 + 12))
    {
      if ((_DWORD)v18)
        v19 = HIDWORD(v18) == 0;
      else
        v19 = 1;
      if (v19)
        v18 = 0;
      memptr[0] = v17;
      memptr[1] = (void *)v18;
      memptr[2] = v7;
      if (HIDWORD(v18) * HIDWORD(v7) == -1
        && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v22[0] = a2;
      v22[1] = (size_t)memptr;
      sub_22330C664(v22);
    }
  }
  return a1;
}

void sub_223F4A930(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F4A94C(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  void *v12;
  void *__p;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == (uint64_t *)v3)
      {
        if (*((unsigned __int8 *)v7 + 16) == (_DWORD)v3)
          goto LABEL_22;
      }
      else if (((unint64_t)v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (uint64_t **)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = (unint64_t)v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (uint64_t **)*v7;
    if (!v7)
      return 0;
  }
  if (*((unsigned __int8 *)v7 + 16) != (_DWORD)v3)
    goto LABEL_11;
LABEL_22:
  sub_2231AFBB8(a1, v7, (uint64_t)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
    operator delete(v12);
  return 1;
}

uint64_t sub_223F4AA60(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 24);
    if (v2)
    {
      *(_QWORD *)(v1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_223F4AABC()
{
  JUMPOUT(0x227684CE8);
}

_WORD *sub_223F4AAD0(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24EC642B0;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_223F4AB08(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24EC642B0;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

void sub_223F4AB28()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_223F49304(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_2540CE0C8);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE0C8))
    {
      qword_2540CE0C0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_DepthBasedDetect");
      __cxa_guard_release(&qword_2540CE0C8);
    }
    v1 = qword_2540CE0C0;
    if (*(_BYTE *)(qword_2540CE0C0 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_223F4ABEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE0C8);
  _Unwind_Resume(a1);
}

uint64_t sub_223F4AC08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection21DepthMapPlaneDetector6det"
                     "ectENS0_3arr9ArrayViewIKfNS0_3dim2DXILj2EEEPSA_EESF_NS9_ISA_NSC_ILj3EEESE_EENS9_IKhSD_PSI_EERKNS5_6"
                     "camera13PinholeCameraERKN3cva15SE3GroupStorageIfNSP_6MatrixIfLj4ELj4ELb1EEEEERKNS6_17PlaneOrientationsEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection21DepthMapPlaneD"
                                "etector6detectENS0_3arr9ArrayViewIKfNS0_3dim2DXILj2EEEPSA_EESF_NS9_ISA_NSC_ILj3EEESE_EEN"
                                "S9_IKhSD_PSI_EERKNS5_6camera13PinholeCameraERKN3cva15SE3GroupStorageIfNSP_6MatrixIfLj4EL"
                                "j4ELb1EEEEERKNS6_17PlaneOrientationsEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection21DepthMapPlaneDetector6detectENS0_3arr9ArrayViewIKfNS0_3dim2DXILj2EEEPSA_EESF_NS9_ISA_NSC_ILj3EEESE_EENS9_IKhSD_PSI_EERKNS5_6camera13PinholeCameraERKN3cva15SE3GroupStorageIfNSP_6MatrixIfLj4ELj4ELb1EEEEERKNS6_17PlaneOrientationsEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection21DepthMapPlaneDetector6detectENS0_3arr9ArrayViewIKfNS0_3dim2DXILj2EEEPSA_EESF_NS9_ISA_NSC_ILj3EEESE_EENS9_IKhSD_PSI_EERKNS5_6camera13PinholeCameraERKN3cva15SE3GroupStorageIfNSP_6MatrixIfLj4ELj4ELb1EEEEERKNS6_17PlaneOrientationsEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F4AC74()
{
  return &unk_24EC64310;
}

void sub_223F4AC80(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  int8x16_t v11;
  float32x4_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  int v21;
  int v22;
  float v23;
  unsigned int v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x2_t v28;
  unsigned int *v29;
  char *v30;
  char *v31;
  char *v32;
  int8x16_t v33;
  float32x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float v38;
  int32x2_t v39;
  float v40;
  unint64_t v41;
  float32x2_t v42;
  float v43;
  uint64_t v44;
  float32x2_t *v45;
  int v46;
  _BYTE *v47;
  char *v49;
  char *v50;
  float v51;
  uint64_t v52;
  char *v53;
  float32x2_t *v54;
  float32x2_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t *v69;
  int8x16_t *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  float32x4_t v74;
  float v75;
  uint64_t *v76;
  int8x16_t v77;
  uint64_t v78;
  char *v79;
  float32x4_t v80;
  int32x4_t v81;
  uint64_t *v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  int32x4_t v98;
  uint64_t *v99;
  uint64_t v100;
  int8x16_t v101;
  float32x2_t v102;
  int32x4_t v103;
  float32x2_t v104;
  float32x2_t v105;
  int8x16_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  float v111;
  float v112;
  int8x16_t v113;
  float32x2_t v114;
  float32x2_t v115;
  float32x2_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  float v120;
  float v121;
  int8x16_t v122;
  float v123;
  _QWORD *v124;
  _QWORD *v125;
  int64_t v126;
  float32x2_t v127;
  int8x16_t v128;
  float32x2_t v129;
  float32x2_t *v130;
  float *v131;
  float *v132;
  unint64_t v133;
  float v134;
  float *v135;
  uint64_t v136;
  float *v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  float v141;
  float *v142;
  unint64_t v143;
  float v144;
  float *v145;
  uint64_t v146;
  float *v147;
  uint64_t v148;
  float v149;
  float v150;
  float v151;
  char *v152;
  __int128 v153;
  uint64_t v154;
  int8x16_t v155;
  int8x16_t v156;
  unint64_t v157;
  float32x2_t v158;
  float32x2_t v159;
  int8x16_t v160;
  float v161;
  uint64_t v162;
  int v163;
  char v164;
  void *v165[2];
  char *v166;
  float v167;
  int **v168;
  int **v169;
  char *v170;
  __int32 v171;
  __int32 v172;
  __int32 v173;
  float v174;
  float v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t (**v179)();
  std::__shared_weak_count *v180;
  std::__shared_weak_count *v181;
  void *__p;
  _BYTE *v183;
  uint64_t v184;
  unsigned int v185;
  _BYTE v186[12];
  uint64_t v187;
  __int32 v188;
  char *v189;
  char *v190;
  char *v191;
  float v192;
  uint64_t v193;
  float *v194;
  unint64_t v195;
  uint64_t *v196;
  float v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223F4BD44(&v168);
  if (*v168[7] <= 1)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_2540CE0D8);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE0D8))
    {
      qword_2540CE0D0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_DetectPlanesRANSAC");
      __cxa_guard_release(&qword_2540CE0D8);
    }
    v7 = qword_2540CE0D0;
    *(_BYTE *)(qword_2540CE0D0 + 16) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v7 = std::chrono::steady_clock::now();
    *(_BYTE *)(v7 + 16) = 1;
  }
  v193 = 0x3CCCCCCD00000003;
  LODWORD(v194) = 20;
  LOBYTE(v195) = 0;
  LOBYTE(v196) = 0;
  LOBYTE(v197) = 0;
  v8 = 5489;
  v198 = 0;
  v9 = 1;
  LODWORD(v168) = 5489;
  do
  {
    v8 = v9 + 1812433253 * (v8 ^ (v8 >> 30));
    *((_DWORD *)&v168 + v9++) = v8;
  }
  while (v9 != 624);
  v178 = 0;
  v10 = (std::__shared_weak_count *)operator new(0x28uLL);
  v13 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v10[1].__shared_owners_) = 5489;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v179 = &off_24EC7A6B0;
  v180 = v10 + 1;
  v181 = v10;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v13);
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v186[0] = 0;
  BYTE4(v187) = 0;
  v190 = 0;
  v191 = 0;
  v189 = 0;
  v192 = 0.0;
  v185 = a1;
  if (v193 > a1)
  {
    LOBYTE(v161) = 0;
    v164 = 0;
    v165[1] = 0;
    v166 = 0;
    v165[0] = 0;
    v167 = 0.0;
    v19 = v181;
    if (!v181)
      goto LABEL_120;
    goto LABEL_116;
  }
  v20 = (int)v194;
  if (!(_DWORD)v194)
  {
    v23 = 0.0;
    goto LABEL_111;
  }
  v154 = a3;
  v21 = 0;
  v157 = 0;
  v22 = 0;
  v23 = 0.0;
  do
  {
    v24 = v185;
    if (v193 > v185)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v24 = v185;
    }
    if (v24)
    {
      v11.i32[0] = v193;
      if ((double)v24 * 0.5 >= (double)v11.u64[0])
        sub_223CD005C((uint64_t)&v168, &v185, (unsigned int *)&v193, (uint64_t)&__p);
      else
        sub_223CCFE58((uint64_t)&v168, &v185, (unsigned int *)&v193, (int32x4_t **)&__p);
      v29 = (unsigned int *)__p;
      if ((_BYTE *)__p - v183 == -12)
        goto LABEL_32;
    }
    else
    {
      v183 = 0;
      __p = 0;
      v184 = 0;
      v29 = 0;
    }
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/DepthMapPlaneDetectorImpl.cpp", 73, (uint64_t)"Size(samples) == 3", 18, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
LABEL_32:
    v30 = (char *)a2 + 12 * *v29;
    v31 = (char *)a2 + 12 * v29[2];
    v26.i64[0] = *(_QWORD *)v31;
    v26.i32[2] = *((_DWORD *)v31 + 2);
    v32 = (char *)a2 + 12 * v29[1];
    v25.i64[0] = *(_QWORD *)v30;
    v25.i32[2] = *((_DWORD *)v30 + 2);
    v35 = (int8x16_t)vsubq_f32((float32x4_t)v26, v25);
    v27.i64[0] = *(_QWORD *)v32;
    v27.i32[2] = *((_DWORD *)v32 + 2);
    v33 = (int8x16_t)vsubq_f32(v27, v25);
    v11 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v35, v35, 0xCuLL), v35, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), v33, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v33, v33, 0xCuLL), v33, 8uLL));
    *(int32x2_t *)v35.i8 = vdup_lane_s32(*(int32x2_t *)v11.i8, 1);
    v34 = (float32x2_t)vextq_s8(v11, v11, 8uLL).u64[0];
    *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8), *(float32x2_t *)v35.i8, *(float32x2_t *)v11.i8, 1), v34, v34);
    *(float *)v35.i32 = sqrtf(v12.f32[0]);
    if (*(float *)v35.i32 < 0.01)
      goto LABEL_56;
    v35 = (int8x16_t)vdivq_f32((float32x4_t)v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 0));
    v34 = (float32x2_t)vextq_s8(v35, v35, 8uLL).u64[0];
    *(float32x2_t *)v11.i8 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1), *(float32x2_t *)v35.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL), v34);
    if (*(float *)v11.i32 <= 0.0)
    {
      *(int32x2_t *)v12.f32 = vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
      *(float *)v11.i32 = -*(float *)v11.i32;
      v39 = (int32x2_t)vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), *(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32), v34, v34);
      if (*(float *)v39.i32 != 1.0)
      {
        v40 = *(float *)v39.i32 + -1.0;
        if (*(float *)v39.i32 < 1.0)
          v40 = 1.0 - *(float *)v39.i32;
        if (v40 > 0.000001)
        {
          *(float *)v39.i32 = sqrtf(*(float *)v39.i32);
          v35 = (int8x16_t)vdivq_f32((float32x4_t)v35, (float32x4_t)vdupq_lane_s32(v39, 0));
          v41 = 0;
          if (!a1)
            goto LABEL_55;
          goto LABEL_46;
        }
      }
      goto LABEL_45;
    }
    v36 = (int8x16_t)vnegq_f32((float32x4_t)v35);
    *(int32x2_t *)v12.f32 = vdup_lane_s32(*(int32x2_t *)v36.i8, 1);
    v37 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
    v34 = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v35.i8), *(float32x2_t *)v12.f32, *(float32x2_t *)v35.i8, 1), v37, v37);
    if (v34.f32[0] != 1.0)
    {
      v38 = v34.f32[0] + -1.0;
      if (v34.f32[0] < 1.0)
        v38 = 1.0 - v34.f32[0];
      if (v38 > 0.000001)
      {
        *(float *)v35.i32 = sqrtf(v34.f32[0]);
        v35 = (int8x16_t)vdivq_f32((float32x4_t)v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 0));
LABEL_45:
        v41 = 0;
        if (!a1)
          goto LABEL_55;
        goto LABEL_46;
      }
    }
    v35 = v36;
    v41 = 0;
    if (!a1)
    {
LABEL_55:
      v43 = 0.0;
      if (v23 >= 0.0)
        goto LABEL_56;
      goto LABEL_51;
    }
LABEL_46:
    *(int32x2_t *)v12.f32 = vdup_lane_s32(*(int32x2_t *)v35.i8, 1);
    v42 = (float32x2_t)vextq_s8(v35, v35, 8uLL).u64[0];
    v43 = 0.0;
    v44 = 12 * a1;
    v45 = a2;
    do
    {
      v28.i32[0] = v45[1].i32[0];
      if (fabsf(*(float *)v11.i32+ vmla_f32(vmla_lane_f32(vmul_f32(*v45, *(float32x2_t *)v35.i8), *(float32x2_t *)v12.f32, *v45, 1), v42, v28).f32[0]) <= *((float *)&v193 + 1))
      {
        v43 = v43 + 1.0;
        ++v41;
      }
      v45 = (float32x2_t *)((char *)v45 + 12);
      v44 -= 12;
    }
    while (v44);
    if (v43 <= v23)
    {
LABEL_56:
      v46 = 3;
      v47 = __p;
      if (!__p)
        goto LABEL_58;
LABEL_57:
      v183 = v47;
      operator delete(v47);
      goto LABEL_58;
    }
LABEL_51:
    *(_DWORD *)v186 = v11.i32[0];
    LODWORD(v187) = v35.i32[2];
    *(_QWORD *)&v186[4] = v35.i64[0];
    if (v21)
    {
      v192 = v43;
      if (!(_BYTE)v196)
        goto LABEL_65;
    }
    else
    {
      BYTE4(v187) = 1;
      v192 = v43;
      if (!(_BYTE)v196)
        goto LABEL_65;
    }
    if (v41 >= v195)
    {
      v46 = 2;
      v21 = 1;
      v23 = v43;
      v157 = v41;
      v47 = __p;
      if (__p)
        goto LABEL_57;
      goto LABEL_58;
    }
LABEL_65:
    if (v43 < v197 || v198 == 0)
      v46 = 0;
    else
      v46 = 2;
    v21 = 1;
    v23 = v43;
    v157 = v41;
    v47 = __p;
    if (__p)
      goto LABEL_57;
LABEL_58:
    if (v46 != 3 && v46)
      break;
    ++v22;
  }
  while (v22 != v20);
  if (!v21)
  {
    a3 = v154;
LABEL_111:
    LOBYTE(v161) = 0;
    v164 = 0;
    v165[0] = 0;
    v165[1] = 0;
    v166 = 0;
    v167 = v23;
    v19 = v181;
    if (!v181)
      goto LABEL_120;
    goto LABEL_116;
  }
  v183 = 0;
  __p = 0;
  v184 = 0;
  a3 = v154;
  if (v157)
  {
    if (v157 >> 61)
      sub_22367C394();
    v49 = (char *)operator new(8 * v157);
    v50 = &v49[8 * v157];
    v189 = v49;
    v190 = v49;
    v191 = v50;
    v51 = *(float *)v186;
    if (a1)
    {
LABEL_77:
      v52 = 0;
      v53 = v49;
      v54 = a2;
      v55 = (float32x2_t *)((char *)a2 + 12 * a1);
      while (2)
      {
        v35.i32[0] = v187;
        v34.i32[0] = v54[1].i32[0];
        *(float32x2_t *)v12.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*v54, *(float32x2_t *)&v186[4]), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v186[4], 1), *v54, 1), *(float32x2_t *)v35.i8, v34);
        if (fabsf(v51 + v12.f32[0]) > *((float *)&v193 + 1))
          goto LABEL_80;
        if (v53 < v50)
        {
          *(_QWORD *)v53 = v52;
          v56 = (uint64_t)(v53 + 8);
        }
        else
        {
          v57 = (v53 - v49) >> 3;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 61)
            sub_22367C394();
          if ((v50 - v49) >> 2 > v58)
            v58 = (v50 - v49) >> 2;
          if ((unint64_t)(v50 - v49) >= 0x7FFFFFFFFFFFFFF8)
            v59 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59)
          {
            if (v59 >> 61)
              sub_223174E94();
            v60 = operator new(8 * v59);
            v61 = &v60[8 * v57];
            *(_QWORD *)v61 = v52;
            v56 = (uint64_t)(v61 + 8);
            v62 = v53 - v49;
            if (v53 != v49)
            {
LABEL_92:
              v63 = v62 - 8;
              if (v63 < 0x168
                || (v66 = (v53 - 8 - v49) & 0xFFFFFFFFFFFFFFF8, &v60[v53 - v49 - 8 - v66] > &v60[v53 - v49 - 8])
                || &v53[-v66 - 8] > v53 - 8
                || (unint64_t)(v49 - v60) < 0x20)
              {
                v64 = v53;
                v55 = (float32x2_t *)((char *)a2 + 12 * a1);
              }
              else
              {
                v67 = (v63 >> 3) + 1;
                v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
                v64 = &v53[-v68];
                v61 -= v68;
                v69 = (int8x16_t *)&v60[8 * v57 - 16];
                v70 = (int8x16_t *)(v53 - 16);
                v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
                v55 = (float32x2_t *)((char *)a2 + 12 * a1);
                do
                {
                  v35 = v70[-1];
                  v11 = *v70;
                  v69[-1] = v35;
                  *v69 = v11;
                  v69 -= 2;
                  v70 -= 2;
                  v71 -= 4;
                }
                while (v71);
                if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_95:
                  v50 = &v60[8 * v59];
                  v189 = v61;
                  v191 = v50;
                  if (v49)
                    goto LABEL_96;
                  goto LABEL_97;
                }
              }
              do
              {
                v65 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *((_QWORD *)v61 - 1) = v65;
                v61 -= 8;
              }
              while (v64 != v49);
              goto LABEL_95;
            }
          }
          else
          {
            v60 = 0;
            v61 = (char *)(8 * v57);
            *(_QWORD *)(8 * v57) = v52;
            v56 = 8 * v57 + 8;
            v62 = v53 - v49;
            if (v53 != v49)
              goto LABEL_92;
          }
          v55 = (float32x2_t *)((char *)a2 + 12 * a1);
          v50 = &v60[8 * v59];
          v189 = v61;
          v191 = v50;
          if (v49)
LABEL_96:
            operator delete(v49);
LABEL_97:
          v49 = v61;
        }
        v190 = (char *)v56;
        v53 = (char *)v56;
LABEL_80:
        v54 = (float32x2_t *)((char *)v54 + 12);
        ++v52;
        if (v54 == v55)
        {
          v51 = *(float *)v186;
          a3 = v154;
          goto LABEL_115;
        }
        continue;
      }
    }
  }
  else
  {
    v50 = 0;
    v49 = 0;
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v51 = *(float *)v186;
    if (a1)
      goto LABEL_77;
  }
  v53 = v49;
LABEL_115:
  v161 = v51;
  v162 = *(_QWORD *)&v186[4];
  v163 = v187;
  v164 = 1;
  v165[0] = v49;
  v165[1] = v53;
  v166 = v50;
  v167 = v23;
  v19 = v181;
  if (v181)
  {
LABEL_116:
    v72 = (unint64_t *)&v19->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_120:
  v193 = (uint64_t)&off_24EC64330;
  v194 = &v161;
  v195 = 0;
  v196 = &v193;
  if (!v164)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    v82 = v196;
    if (v196)
      goto LABEL_133;
    goto LABEL_126;
  }
  v74 = 0uLL;
  if (v165[0] == v165[1])
  {
    v75 = 0.0;
    v11.i32[0] = 0;
    v77 = 0uLL;
  }
  else
  {
    v11.i32[0] = 0;
    v75 = 0.0;
    v76 = (uint64_t *)v165[0];
    v77 = 0uLL;
    do
    {
      v78 = *v76++;
      v79 = (char *)a2 + 12 * v78;
      v80.i64[0] = *(_QWORD *)(v79 + 4);
      v80.i64[1] = v80.i64[0];
      v75 = v75 + vmul_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v80.f32).f32[0];
      v81 = (int32x4_t)v80;
      *(float *)v11.i32 = *(float *)v11.i32 + (float)(*(float *)v79 * *(float *)v79);
      v81.i32[0] = *(_DWORD *)v79;
      v12 = vmulq_f32((float32x4_t)vzip1q_s32(vrev64q_s32(v81), v81), v80);
      v77 = (int8x16_t)vaddq_f32((float32x4_t)v77, v12);
      v12.i64[0] = *(_QWORD *)v79;
      v12.i32[2] = *((_DWORD *)v79 + 2);
      v74 = vaddq_f32(v74, v12);
    }
    while (v76 != v165[1]);
  }
  v12.f32[0] = (float)(unint64_t)(((char *)v165[1] - (char *)v165[0]) >> 3);
  v83 = (int8x16_t)vdivq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0));
  v74.f32[0] = sqrtf(v12.f32[0]);
  v11.i32[1] = v77.i32[2];
  v84 = (int8x16_t)vmulq_n_f32((float32x4_t)v83, v74.f32[0]);
  v11.i32[2] = v77.i32[1];
  v85 = (float32x4_t)vextq_s8(v77, v77, 8uLL);
  v85.f32[1] = v75;
  v86 = (float32x4_t)vrev64q_s32((int32x4_t)v77);
  v87 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
  v156 = v83;
  v88 = vmul_lane_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v83.i8, 1);
  *(float32x2_t *)v83.i8 = vmul_n_f32(*(float32x2_t *)v84.i8, *(float *)v84.i32);
  v89 = (float32x2_t)vextq_s8(v84, v84, 8uLL).u64[0];
  v83.u64[1] = (unint64_t)vmul_f32(v89, *(float32x2_t *)v84.i8);
  *(float32x2_t *)v90.f32 = vmul_n_f32(*(float32x2_t *)v84.i8, v88.f32[0]);
  *(float32x2_t *)&v90.u32[2] = vmul_f32(v89, v88);
  v159 = v87;
  v91 = vmul_f32(*(float32x2_t *)v74.f32, v87);
  *(float32x2_t *)v92.f32 = vmul_n_f32(*(float32x2_t *)v84.i8, v91.f32[0]);
  *(float32x2_t *)&v92.u32[2] = vmul_f32(v89, v91);
  v93 = vsubq_f32((float32x4_t)v11, (float32x4_t)v83);
  v94 = vsubq_f32(v85, v90);
  v177 = 0;
  v176 = 0x300000003;
  *(_DWORD *)&v186[8] = v93.i32[2];
  v188 = v94.i32[2];
  v95 = vsubq_f32(v86, v92);
  v187 = v94.i64[0];
  LODWORD(v190) = v95.i32[2];
  *(_QWORD *)v186 = v93.i64[0];
  v189 = (char *)v95.i64[0];
  sub_223CD406C((uint64_t)&v168);
  if (!v177 || v174 == 0.0 || fabsf(v174) <= 0.000001 || (float)(v175 / v174) < 0.01)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 56) = 0;
    v82 = v196;
    if (v196)
      goto LABEL_133;
LABEL_126:
    sub_223198474();
  }
  v101 = v156;
  v102 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v156.i8, 1);
  v96.i32[0] = v171;
  v97.i32[0] = v172;
  *(float32x2_t *)v103.i8 = v96;
  v103.u64[1] = (unint64_t)v97;
  v98.i32[0] = v173;
  v104 = vmla_f32(vmla_f32(vmul_f32(v96, v96), v97, v97), *(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8);
  v104.f32[0] = 1.0 / sqrtf(v104.f32[0]);
  v105 = vmul_f32(v96, v104);
  v106 = (int8x16_t)vmulq_n_f32((float32x4_t)vuzp1q_s32(v103, v98), v104.f32[0]);
  v107 = vmul_f32(v97, v104);
  v108 = vmul_f32(*(float32x2_t *)v98.i8, v104);
  v109 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1);
  v110 = (float32x2_t)vextq_s8(v106, v106, 8uLL).u64[0];
  v111 = vmla_f32(vmla_lane_f32(vmul_f32(v105, *(float32x2_t *)v106.i8), v107, *(float32x2_t *)v106.i8, 1), v110, v108).f32[0];
  if (v111 == 1.0 || (v111 >= 1.0 ? (v112 = v111 + -1.0) : (v112 = 1.0 - v111), v112 <= 0.000001))
  {
    v123 = -vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v106.i8), v109, v102), v110, v159).f32[0];
    v113 = v106;
    v124 = v165[0];
    v125 = v165[1];
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v126 = (char *)v165[1] - (char *)v165[0];
    if (v165[1] != v165[0])
      goto LABEL_154;
LABEL_175:
    v151 = 0.0;
    goto LABEL_182;
  }
  v109.f32[0] = 1.0 / sqrtf(v111);
  v113 = (int8x16_t)vmulq_n_f32((float32x4_t)v106, v109.f32[0]);
  v114 = vmul_f32(v105, v109);
  v115 = vmul_f32(v107, v109);
  v116 = vmul_f32(v108, v109);
  v117 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v113.i8, 1);
  v118 = vmla_lane_f32(vmul_f32(v114, *(float32x2_t *)v113.i8), v115, *(float32x2_t *)v113.i8, 1);
  v119 = (float32x2_t)vextq_s8(v113, v113, 8uLL).u64[0];
  v120 = vmla_f32(v118, v119, v116).f32[0];
  if (v120 == 1.0 || (v120 >= 1.0 ? (v121 = v120 + -1.0) : (v121 = 1.0 - v120), v121 <= 0.000001))
  {
    v123 = -vmla_f32(vmla_f32(vmul_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v113.i8), v117, v102), v119, v159).f32[0];
    v124 = v165[0];
    v125 = v165[1];
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v126 = (char *)v165[1] - (char *)v165[0];
    if (v165[1] != v165[0])
      goto LABEL_154;
    goto LABEL_175;
  }
  v119.f32[0] = sqrtf(v120);
  v122 = (int8x16_t)vmulq_n_f32((float32x4_t)v113, 1.0 / v119.f32[0]);
  v123 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v156.i8, *(float32x2_t *)v122.i8), v102, *(float32x2_t *)v122.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL), v159).f32[0];
  v113 = (int8x16_t)vdivq_f32((float32x4_t)v113, (float32x4_t)vdupq_lane_s32((int32x2_t)v119, 0));
  v124 = v165[0];
  v125 = v165[1];
  v168 = 0;
  v169 = 0;
  v170 = 0;
  v126 = (char *)v165[1] - (char *)v165[0];
  if (v165[1] == v165[0])
    goto LABEL_175;
LABEL_154:
  v160 = v113;
  v155 = v106;
  if (v126 < 0)
    sub_22316E078();
  v168 = (int **)operator new((unint64_t)v126 >> 1);
  v169 = v168;
  v170 = (char *)v168 + 4 * (v126 >> 3);
  *(_QWORD *)v186 = &v168;
  v128 = v160;
  v129 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v160.i8, 1);
  v158 = (float32x2_t)vextq_s8(v128, v128, 8uLL).u64[0];
  do
  {
    v130 = (float32x2_t *)((char *)a2 + 12 * *v124);
    v127.i32[0] = v130[1].i32[0];
    *(float *)&__p = v123
                   + vmla_f32(vmla_lane_f32(vmul_f32(*v130, *(float32x2_t *)v128.i8), v129, *v130, 1), v158, v127).f32[0];
    sub_2233D7140((uint64_t *)v186, &__p);
    ++v124;
    v128.i64[0] = v160.i64[0];
  }
  while (v124 != v125);
  v132 = (float *)v168;
  v131 = (float *)v169;
  if (v168 == v169)
  {
    v150 = 0.0;
  }
  else
  {
    v133 = (char *)v169 - (char *)v168 - 4;
    v134 = 0.0;
    v135 = (float *)v168;
    if (v133 < 4)
      goto LABEL_195;
    v136 = (v133 >> 2) + 1;
    v135 = (float *)v168 + (v136 & 0x7FFFFFFFFFFFFFFELL);
    v137 = (float *)v168 + 1;
    v138 = v136 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v134 = (float)(v134 + *(v137 - 1)) + *v137;
      v137 += 2;
      v138 -= 2;
    }
    while (v138);
    if (v136 != (v136 & 0x7FFFFFFFFFFFFFFELL))
    {
LABEL_195:
      do
      {
        v139 = *v135++;
        v134 = v134 + v139;
      }
      while (v135 != (float *)v169);
    }
    v168 = 0;
    v169 = 0;
    v170 = 0;
    v140 = (char *)v131 - (char *)v132;
    if ((char *)v131 - (char *)v132 < 0)
      sub_22316E078();
    v141 = v134 / (float)(unint64_t)(v140 >> 2);
    v168 = (int **)operator new((char *)v131 - (char *)v132);
    v169 = v168;
    v170 = (char *)v168 + 4 * (v140 >> 2);
    *(_QWORD *)v186 = &v168;
    v142 = v132;
    do
    {
      *(float *)&__p = (float)(*v142 - v141) * (float)(*v142 - v141);
      sub_2233D7140((uint64_t *)v186, &__p);
      ++v142;
    }
    while (v142 != v131);
    if (v168 == v169)
    {
      v150 = 0.0;
    }
    else
    {
      v143 = (char *)v169 - (char *)v168 - 4;
      v144 = 0.0;
      v145 = (float *)v168;
      if (v143 < 4)
        goto LABEL_196;
      v146 = (v143 >> 2) + 1;
      v145 = (float *)v168 + (v146 & 0x7FFFFFFFFFFFFFFELL);
      v147 = (float *)v168 + 1;
      v148 = v146 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v144 = (float)(v144 + *(v147 - 1)) + *v147;
        v147 += 2;
        v148 -= 2;
      }
      while (v148);
      if (v146 != (v146 & 0x7FFFFFFFFFFFFFFELL))
      {
LABEL_196:
        do
        {
          v149 = *v145++;
          v144 = v144 + v149;
        }
        while (v145 != (float *)v169);
      }
      v150 = v144 / (float)(unint64_t)(((char *)v169 - (char *)v168) >> 2);
    }
    if (v168)
      operator delete(v168);
  }
  v151 = sqrtf(v150);
  if (v132)
    operator delete(v132);
  v106 = v155;
  v101 = v156;
LABEL_182:
  v152 = v166;
  v153 = *(_OWORD *)v165;
  v165[0] = 0;
  v165[1] = 0;
  v166 = 0;
  *(_DWORD *)(a3 + 8) = v101.i32[2];
  *(_DWORD *)(a3 + 20) = v106.i32[2];
  *(_QWORD *)a3 = v101.i64[0];
  *(_QWORD *)(a3 + 12) = v106.i64[0];
  *(float *)(a3 + 24) = v151;
  *(_OWORD *)(a3 + 32) = v153;
  *(_QWORD *)(a3 + 48) = v152;
  *(_BYTE *)(a3 + 56) = 1;
  v82 = v196;
  if (!v196)
    goto LABEL_126;
LABEL_133:
  (*(void (**)(uint64_t *))(*v82 + 48))(v82);
  v99 = v196;
  if (v196 == &v193)
  {
    v100 = 4;
    v99 = &v193;
  }
  else
  {
    if (!v196)
      goto LABEL_138;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_138:
  if (v165[0])
  {
    v165[1] = v165[0];
    operator delete(v165[0]);
  }
}

void sub_223F4BC20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE0D8);
  _Unwind_Resume(a1);
}

void sub_223F4BC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p)
{
  void *v29;
  uint64_t v30;

  if (__p)
    operator delete(__p);
  if (v29)
    operator delete(v29);
  sub_22318A1C8((_QWORD *)(v30 - 176));
  if (a25)
  {
    operator delete(a25);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223F4BD44(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE0E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE0E8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE0E0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE0E8);
  }
  *a1 = qword_2540CE0E0;
}

void sub_223F4BDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE0E8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE0E8);
  _Unwind_Resume(a1);
}

void sub_223F4BE38(uint64_t a1@<X1>, float32x2_t *a2@<X2>, unint64_t a3@<X3>, _QWORD *a4@<X4>, float32x2_t *a5@<X5>, uint64_t a6@<X8>)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v14;
  float32x2_t v15;
  uint64_t v16;
  _QWORD *v17;
  float32x2_t *v18;
  void *v19;
  __int128 v20;
  uint64_t v21;
  int64x2_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int64x2_t v27;
  int64x2_t *v28;
  int64x2_t v29;
  int64x2_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  float *v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t v51;
  float32x4_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float32x4_t v61;
  void *__p;
  __int128 v64;
  uint64_t *v65[2];
  void *v66;
  __int128 v67;
  uint64_t v68;

  v14 = a2[7].f32[0];
  v6.i32[0] = a2[1].i32[0];
  v7.i32[0] = a2[3].i32[0];
  v8.i32[0] = a2[5].i32[0];
  v66 = 0;
  v67 = 0uLL;
  if (a3)
  {
    if ((unint64_t)-((uint64_t)(-8 * a3) >> 3) >> 62)
      sub_22316E078();
    v66 = operator new(-4 * ((uint64_t)(-8 * a3) >> 3));
    *(_QWORD *)&v67 = v66;
    *((_QWORD *)&v67 + 1) = (char *)v66 - 4 * ((uint64_t)(-8 * a3) >> 3);
    v65[0] = (uint64_t *)&v66;
    v16 = 8 * a3;
    v17 = a4;
    do
    {
      v18 = (float32x2_t *)(a1 + 12 * *v17);
      v15.i32[0] = v18[1].i32[0];
      *(float *)&v68 = v14 + vmla_f32(vmla_lane_f32(vmul_f32(v6, *v18), v7, *v18, 1), v15, v8).f32[0];
      sub_2233D7140((uint64_t *)v65, &v68);
      ++v17;
      v16 -= 8;
    }
    while (v16);
    v19 = v66;
    v20 = v67;
  }
  else
  {
    v19 = 0;
    v20 = 0uLL;
  }
  __p = v19;
  v64 = v20;
  v66 = 0;
  v67 = 0uLL;
  v21 = v20 - (_QWORD)v19;
  if ((void *)v20 == v19)
  {
    v26 = 0;
    v23 = 0;
  }
  else
  {
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_22367C394();
    v22 = (int64x2_t *)operator new(2 * v21);
    v23 = (uint64_t *)v22;
    v24 = v21 >> 2;
    if ((unint64_t)v21 >= 0x10)
    {
      v25 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      v26 = &v22->i64[v24 & 0xFFFFFFFFFFFFFFFCLL];
      v27 = (int64x2_t)xmmword_2245F5410;
      v28 = v22 + 1;
      v29 = vdupq_n_s64(2uLL);
      v30 = vdupq_n_s64(4uLL);
      v31 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v28[-1] = v27;
        *v28 = vaddq_s64(v27, v29);
        v27 = vaddq_s64(v27, v30);
        v28 += 2;
        v31 -= 4;
      }
      while (v31);
      goto LABEL_18;
    }
    v25 = 0;
    v26 = (uint64_t *)v22;
    do
    {
      *v26++ = v25++;
LABEL_18:
      ;
    }
    while (v24 != v25);
  }
  v32 = v26 - v23;
  v33 = 126 - 2 * __clz(v32);
  v65[0] = (uint64_t *)&__p;
  v65[1] = &v68;
  if (v26 == v23)
    v34 = 0;
  else
    v34 = v33;
  sub_223F4C90C((uint64_t)v23, v26, v65, v34, 1);
  v66 = 0;
  v67 = 0uLL;
  v35 = (char *)v26 - (char *)v23;
  if (v26 == v23)
  {
    v37 = 0;
    if (a3)
      goto LABEL_27;
LABEL_39:
    v39 = 0;
    v44 = 0;
    v66 = 0;
    v67 = 0uLL;
    v42 = 1;
    goto LABEL_41;
  }
  if ((v35 & 0x8000000000000000) != 0)
    sub_22316E078();
  v66 = operator new(v35 >> 1);
  *(_QWORD *)&v67 = v66;
  *((_QWORD *)&v67 + 1) = (char *)v66 + 4 * v32;
  v65[0] = (uint64_t *)&v66;
  v36 = v23;
  do
  {
    LODWORD(v68) = *((_DWORD *)__p + *v36);
    sub_2233D7140((uint64_t *)v65, &v68);
    ++v36;
  }
  while (v36 != v26);
  v37 = (float *)v66;
  if (!a3)
    goto LABEL_39;
LABEL_27:
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 1;
  v42 = 1;
  do
  {
    if (v41 < a3)
    {
      while ((float)(v37[v41] - v37[v38]) < 0.075)
      {
        if (a3 == ++v41)
        {
          v41 = a3;
          break;
        }
      }
    }
    v43 = v41 - v38;
    --v41;
    if (v43 > v40)
    {
      v42 = v41;
      v40 = v43;
      v39 = v38;
    }
    ++v38;
  }
  while (v38 != a3);
  v66 = 0;
  v67 = 0uLL;
  if (v40)
  {
    if (v40 >> 61)
      sub_22367C394();
    v44 = (char *)operator new(8 * v40);
    v66 = v44;
    *(_QWORD *)&v67 = v44;
    *((_QWORD *)&v67 + 1) = &v44[8 * v40];
  }
  else
  {
    v44 = 0;
  }
LABEL_41:
  v45 = &v23[v39];
  v65[0] = (uint64_t *)&v66;
  if (v45 == &v23[v42 + 1])
    goto LABEL_50;
  v46 = 8 * v42 - 8 * v39 + 8;
  do
  {
    v68 = a4[*v45];
    sub_2237A4B60((uint64_t *)v65, &v68);
    ++v45;
    v46 -= 8;
  }
  while (v46);
  v44 = (char *)v66;
  v51 = v67;
  if (v66 == (void *)v67)
  {
LABEL_50:
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0x3F80000000000000;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = 0;
    *(_QWORD *)(a6 + 40) = 0;
    if (v44)
    {
      *(_QWORD *)&v67 = v44;
      operator delete(v44);
    }
    if (v37)
      goto LABEL_53;
  }
  else
  {
    v52 = 0uLL;
    v53 = (uint64_t *)v66;
    do
    {
      v54 = *v53++;
      v55 = a1 + 12 * v54;
      v47.i64[0] = *(_QWORD *)v55;
      v47.i32[2] = *(_DWORD *)(v55 + 8);
      v52 = vaddq_f32(v52, v47);
    }
    while (v53 != (uint64_t *)v67);
    v47.f32[0] = (float)(unint64_t)-(((uint64_t)v66 - (uint64_t)v67) >> 3);
    v56 = (int8x16_t)vdivq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 0));
    v48.i32[0] = a2[1].i32[0];
    v49.i32[0] = a2[3].i32[0];
    v50.i32[0] = a2[5].i32[0];
    *(float32x2_t *)v57.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a2, *(float *)v56.i32), a2[2], *(float32x2_t *)v56.i8, 1), a2[4], (float32x4_t)v56, 2);
    v58 = vmla_lane_f32(vmul_f32(v48, *(float32x2_t *)v56.i8), v49, *(float32x2_t *)v56.i8, 1);
    v59 = (float32x4_t)vextq_s8(v56, v56, 8uLL);
    v60 = vmla_f32(v58, *(float32x2_t *)v59.f32, v50);
    *(float32x2_t *)&v57.u32[2] = v60;
    *(float32x2_t *)v59.f32 = a2[6];
    v59.i32[2] = a2[7].i32[0];
    v61 = vaddq_f32(v57, v59);
    v60.i32[0] = a5[1].i32[0];
    v57.f32[0] = vadd_f32(v60, vmla_lane_f32(vmul_f32(*a5, 0), 0, *a5, 1)).f32[0];
    *(_DWORD *)(a6 + 8) = v61.i32[2];
    *(_QWORD *)a6 = v61.i64[0];
    *(_DWORD *)(a6 + 12) = 0;
    *(_DWORD *)(a6 + 16) = 0;
    if (v57.f32[0] > 0.0)
    {
      *(_DWORD *)(a6 + 20) = 1065353216;
      *(_QWORD *)(a6 + 24) = v44;
      *(_QWORD *)(a6 + 32) = v51;
      *(_QWORD *)(a6 + 40) = *((_QWORD *)&v67 + 1);
      if (!v37)
        goto LABEL_54;
LABEL_53:
      operator delete(v37);
      goto LABEL_54;
    }
    *(_DWORD *)(a6 + 20) = -1082130432;
    *(_QWORD *)(a6 + 24) = v44;
    *(_QWORD *)(a6 + 32) = v51;
    *(_QWORD *)(a6 + 40) = *((_QWORD *)&v67 + 1);
    if (v37)
      goto LABEL_53;
  }
LABEL_54:
  if (v23)
    operator delete(v23);
  if (__p)
  {
    *(_QWORD *)&v64 = __p;
    operator delete(__p);
  }
}

void sub_223F4C350(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  void *v17;

  if (!__p || (operator delete(__p), v17))
    operator delete(v17);
  if (v16)
    JUMPOUT(0x223F4C3A8);
  JUMPOUT(0x223F4C3B0);
}

void sub_223F4C3C8(unsigned __int8 **a1@<X0>, unsigned __int8 **a2@<X1>, unsigned int a3@<W2>, int8x16_t **a4@<X8>)
{
  size_t v8;
  float64x2_t *v9;
  float64x2_t *v10;
  int v11;
  int v12;
  BOOL v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int i;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  int64_t v29;
  unint64_t v30;
  int8x16_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  float64x2_t *v34;
  float64x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  int8x16_t *v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t **v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (a3)
  {
    v8 = 96 * a3;
    v9 = (float64x2_t *)operator new(v8);
    bzero(v9, v8 - ((unsigned __int16)(v8 - 96 - 96 * ((((_WORD)v8 - 96) & 0xFFE0u) / 0x60)) & 0xFFE0));
    v10 = &v9[6 * a3];
    v11 = *((_DWORD *)a1 + 2);
    v12 = *((_DWORD *)a1 + 3);
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (v13)
      goto LABEL_33;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = *((_DWORD *)a1 + 2);
    v12 = *((_DWORD *)a1 + 3);
    if (v11)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (v14)
      goto LABEL_33;
  }
  v15 = v11 - 1;
  v16 = *((unsigned int *)a1 + 4);
  v17 = *((unsigned int *)a2 + 4);
  v18 = *a1;
  v19 = *a2;
  v20 = v12 - 1;
  if (v20)
  {
    v21 = *((unsigned int *)a2 + 5);
    v22 = *((unsigned int *)a1 + 5);
    if (!v15)
    {
      do
      {
        if (*v18 < a3)
          v9[6 * *v18].f64[*v19] = v9[6 * *v18].f64[*v19] + 1.0;
        v18 += v22;
        v19 += v21;
        --v20;
      }
      while (v20);
      goto LABEL_31;
    }
    for (i = 0; i != v20; ++i)
    {
      v24 = v15;
      v25 = v18;
      v26 = v19;
      do
      {
        if (*v25 < a3)
          v9[6 * *v25].f64[*v26] = v9[6 * *v25].f64[*v26] + 1.0;
        v25 += v16;
        v26 += v17;
        --v24;
      }
      while (v24);
      v27 = *v25;
      if (v27 < a3)
        v9[6 * v27].f64[*v26] = v9[6 * v27].f64[*v26] + 1.0;
      v18 += v22;
      v19 += v21;
    }
  }
  for (; v15; --v15)
  {
    if (*v18 < a3)
      v9[6 * *v18].f64[*v19] = v9[6 * *v18].f64[*v19] + 1.0;
    v18 += v16;
    v19 += v17;
  }
LABEL_31:
  v28 = *v18;
  if (v28 < a3)
    v9[6 * v28].f64[*v19] = v9[6 * v28].f64[*v19] + 1.0;
LABEL_33:
  v29 = (char *)v10 - (char *)v9;
  v58 = a4;
  if (v10 != v9)
  {
    v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 5);
    if (v30 > 0x2AAAAAAAAAAAAAALL)
      sub_22316E078();
    v31 = (int8x16_t *)operator new(v29);
    v32 = &v31[6 * v30];
    v33 = v31;
    v34 = v9;
    while (1)
    {
      while (1)
      {
        v35 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v34->f64[0]+ v34->f64[1]+ v34[1].f64[0]+ v34[1].f64[1]+ v34[2].f64[0]+ v34[2].f64[1]+ v34[3].f64[0]+ v34[3].f64[1]+ v34[4].f64[0]+ v34[4].f64[1]+ v34[5].f64[0]+ v34[5].f64[1]), 0);
        v36 = (int8x16_t)vdivq_f64(v34[5], v35);
        v37 = (int8x16_t)vdivq_f64(v34[4], v35);
        v38 = (int8x16_t)vdivq_f64(v34[3], v35);
        v39 = (int8x16_t)vdivq_f64(v34[2], v35);
        v40 = (int8x16_t)vdivq_f64(v34[1], v35);
        v41 = (int8x16_t)vdivq_f64(*v34, v35);
        v42 = vextq_s8(v36, v36, 8uLL).u64[0];
        v43 = vextq_s8(v37, v37, 8uLL).u64[0];
        v44 = vextq_s8(v38, v38, 8uLL).u64[0];
        v45 = vextq_s8(v39, v39, 8uLL).u64[0];
        v46 = vextq_s8(v40, v40, 8uLL).u64[0];
        v47 = vextq_s8(v41, v41, 8uLL).u64[0];
        if (v33 >= v32)
          break;
        v41.i64[1] = v47;
        v40.i64[1] = v46;
        v39.i64[1] = v45;
        *v33 = v41;
        v33[1] = v40;
        v38.i64[1] = v44;
        v37.i64[1] = v43;
        v33[2] = v39;
        v33[3] = v38;
        v36.i64[1] = v42;
        v33[4] = v37;
        v33[5] = v36;
        v33 += 6;
        v34 += 6;
        if (v34 == v10)
          goto LABEL_58;
      }
      v48 = 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v31) >> 5) + 1;
      if (v48 > 0x2AAAAAAAAAAAAAALL)
        sub_22316E078();
      if (0x5555555555555556 * (((char *)v32 - (char *)v31) >> 5) > v48)
        v48 = 0x5555555555555556 * (((char *)v32 - (char *)v31) >> 5);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v31) >> 5) >= 0x155555555555555)
        v49 = 0x2AAAAAAAAAAAAAALL;
      else
        v49 = v48;
      if (v49)
      {
        v59 = v47;
        v60 = v46;
        v61 = v45;
        v62 = v41.i64[0];
        v63 = v40.i64[0];
        v64 = v44;
        v65 = v43;
        v66 = v39.i64[0];
        v67 = v38.i64[0];
        v68 = v42;
        v69 = v37.i64[0];
        v70 = v36.i64[0];
        if (v49 > 0x2AAAAAAAAAAAAAALL)
          sub_223174E94();
        v50 = (char *)operator new(96 * v49);
        v37.i64[0] = v69;
        v36.i64[0] = v70;
        v38.i64[0] = v67;
        v42 = v68;
        v43 = v65;
        v39.i64[0] = v66;
        v40.i64[0] = v63;
        v44 = v64;
        v45 = v61;
        v41.i64[0] = v62;
        v47 = v59;
        v46 = v60;
      }
      else
      {
        v50 = 0;
      }
      v41.i64[1] = v47;
      v51 = (int8x16_t *)&v50[32 * (((char *)v33 - (char *)v31) >> 5)];
      v40.i64[1] = v46;
      v39.i64[1] = v45;
      *v51 = v41;
      v51[1] = v40;
      v38.i64[1] = v44;
      v37.i64[1] = v43;
      v51[2] = v39;
      v51[3] = v38;
      v36.i64[1] = v42;
      v51[4] = v37;
      v51[5] = v36;
      if (v33 == v31)
      {
        v53 = (int8x16_t *)&v50[32 * (((char *)v33 - (char *)v31) >> 5)];
        v32 = (int8x16_t *)&v50[96 * v49];
        v33 = v51 + 6;
        if (!v31)
          goto LABEL_53;
      }
      else
      {
        v52 = (int8x16_t *)&v50[32 * (((char *)v33 - (char *)v31) >> 5)];
        do
        {
          v53 = v52 - 6;
          v54 = v33[-5];
          v52[-6] = v33[-6];
          v52[-5] = v54;
          v55 = v33[-4];
          v56 = v33[-3];
          v57 = v33[-1];
          v52[-2] = v33[-2];
          v52[-1] = v57;
          v52[-4] = v55;
          v52[-3] = v56;
          v33 -= 6;
          v52 -= 6;
        }
        while (v33 != v31);
        v32 = (int8x16_t *)&v50[96 * v49];
        v33 = v51 + 6;
        if (!v31)
          goto LABEL_53;
      }
      operator delete(v31);
LABEL_53:
      v31 = v53;
      v34 += 6;
      if (v34 == v10)
        goto LABEL_58;
    }
  }
  v32 = 0;
  v33 = 0;
  v31 = 0;
LABEL_58:
  *v58 = v31;
  v58[1] = v33;
  v58[2] = v32;
  if (v9)
    operator delete(v9);
}

void sub_223F4C8BC(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 112);
  if (v4)
  {
    *(_QWORD *)(v2 - 104) = v4;
    operator delete(v4);
  }
  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F4C90C(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  uint64_t v93;
  float v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  uint64_t *v101;
  float v102;
  float v103;
  uint64_t *v104;
  uint64_t **v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  float v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  float v155;
  uint64_t v156;
  uint64_t v157;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v87 = *(a2 - 1);
        v88 = *v10;
        if (*(float *)(**a3 + 4 * v87) < *(float *)(**a3 + 4 * *v10))
        {
          *v10 = v87;
          goto LABEL_173;
        }
        return result;
      case 3:
        v89 = **a3;
        v88 = *v10;
        v90 = v10[1];
        v91 = *(float *)(v89 + 4 * v90);
        v92 = *(float *)(v89 + 4 * *v10);
        v93 = *(a2 - 1);
        v94 = *(float *)(v89 + 4 * v93);
        if (v91 >= v92)
        {
          if (v94 < v91)
          {
            v10[1] = v93;
            *(a2 - 1) = v90;
            v146 = *v10;
            v145 = v10[1];
            if (*(float *)(v89 + 4 * v145) < *(float *)(v89 + 4 * *v10))
            {
              *v10 = v145;
              v10[1] = v146;
            }
          }
        }
        else
        {
          if (v94 >= v91)
          {
            *v10 = v90;
            v10[1] = v88;
            v157 = *(a2 - 1);
            if (*(float *)(v89 + 4 * v157) >= v92)
              return result;
            v10[1] = v157;
          }
          else
          {
            *v10 = v93;
          }
LABEL_173:
          *(a2 - 1) = v88;
        }
        return result;
      case 4:
        v95 = v10 + 1;
        v96 = v10[1];
        v97 = v10 + 2;
        v98 = v10[2];
        v99 = **a3;
        v100 = *(float *)(v99 + 4 * v96);
        v101 = (uint64_t *)*v10;
        v102 = *(float *)(v99 + 4 * *v10);
        v103 = *(float *)(v99 + 4 * v98);
        if (v100 >= v102)
        {
          if (v103 >= v100)
          {
LABEL_167:
            v96 = v98;
            v147 = *(a2 - 1);
            if (*(float *)(v99 + 4 * v147) >= *(float *)(v99 + 4 * v96))
              return result;
LABEL_168:
            *v97 = v147;
            *(a2 - 1) = v96;
            v153 = *v97;
            v154 = *v95;
            v155 = *(float *)(v99 + 4 * v153);
            if (v155 < *(float *)(v99 + 4 * v154))
            {
              v10[1] = v153;
              v10[2] = v154;
              v156 = *v10;
              if (v155 < *(float *)(v99 + 4 * *v10))
              {
                *v10 = v153;
                v10[1] = v156;
              }
            }
            return result;
          }
          *v95 = v98;
          *v97 = v96;
          v104 = v10;
          v105 = (uint64_t **)(v10 + 1);
          result = v96;
          if (v103 >= v102)
          {
LABEL_158:
            v147 = *(a2 - 1);
            if (*(float *)(v99 + 4 * v147) >= *(float *)(v99 + 4 * v96))
              return result;
            goto LABEL_168;
          }
        }
        else
        {
          v104 = v10;
          v105 = (uint64_t **)(v10 + 2);
          result = *v10;
          if (v103 >= v100)
          {
            *v10 = v96;
            v10[1] = (uint64_t)v101;
            v104 = v10 + 1;
            v105 = (uint64_t **)(v10 + 2);
            result = (uint64_t)v101;
            if (v103 >= v102)
              goto LABEL_167;
          }
        }
        *v104 = v98;
        *v105 = v101;
        v96 = result;
        goto LABEL_158;
      case 5:
        return (uint64_t)sub_223F4D3DC(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, **a3);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v117 = (unint64_t)(v12 - 2) >> 1;
              v118 = v117;
              do
              {
                if (v117 >= v118)
                {
                  v120 = (2 * v118) | 1;
                  v121 = &v10[v120];
                  v122 = **a3;
                  if (2 * v118 + 2 < v12 && *(float *)(v122 + 4 * *v121) < *(float *)(v122 + 4 * v121[1]))
                  {
                    ++v121;
                    v120 = 2 * v118 + 2;
                  }
                  result = (uint64_t)&v10[v118];
                  v123 = *v121;
                  v124 = *(_QWORD *)result;
                  v125 = *(float *)(v122 + 4 * *(_QWORD *)result);
                  if (*(float *)(v122 + 4 * *v121) >= v125)
                  {
                    do
                    {
                      v126 = v121;
                      *(_QWORD *)result = v123;
                      if (v117 < v120)
                        break;
                      v127 = 2 * v120;
                      v120 = (2 * v120) | 1;
                      v121 = &v10[v120];
                      v128 = v127 + 2;
                      if (v128 < v12 && *(float *)(v122 + 4 * *v121) < *(float *)(v122 + 4 * v121[1]))
                      {
                        ++v121;
                        v120 = v128;
                      }
                      v123 = *v121;
                      result = (uint64_t)v126;
                    }
                    while (*(float *)(v122 + 4 * *v121) >= v125);
                    *v126 = v124;
                  }
                }
                v119 = v118-- <= 0;
              }
              while (!v119);
              v129 = (unint64_t)v11 >> 3;
              do
              {
                v130 = 0;
                v131 = *v10;
                v132 = *a3;
                v133 = v10;
                do
                {
                  v134 = v133;
                  v133 += v130 + 1;
                  v135 = 2 * v130;
                  v130 = (2 * v130) | 1;
                  v136 = v135 + 2;
                  if (v136 < v129)
                  {
                    result = v133[1];
                    if (*(float *)(*v132 + 4 * *v133) < *(float *)(*v132 + 4 * result))
                    {
                      ++v133;
                      v130 = v136;
                    }
                  }
                  *v134 = *v133;
                }
                while (v130 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                if (v133 == --a2)
                {
                  *v133 = v131;
                }
                else
                {
                  *v133 = *a2;
                  *a2 = v131;
                  v137 = (char *)v133 - (char *)v10 + 8;
                  if (v137 >= 9)
                  {
                    v138 = (((unint64_t)v137 >> 3) - 2) >> 1;
                    v139 = &v10[v138];
                    v140 = *v139;
                    v141 = *v133;
                    v142 = **a3;
                    v143 = *(float *)(v142 + 4 * *v133);
                    if (*(float *)(v142 + 4 * *v139) < v143)
                    {
                      do
                      {
                        v144 = v139;
                        *v133 = v140;
                        if (!v138)
                          break;
                        v138 = (v138 - 1) >> 1;
                        v139 = &v10[v138];
                        v140 = *v139;
                        v133 = v144;
                      }
                      while (*(float *)(v142 + 4 * *v139) < v143);
                      *v144 = v141;
                    }
                  }
                }
                v119 = v129-- <= 2;
              }
              while (!v119);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = **a3;
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + 4 * v16);
          if ((unint64_t)v11 < 0x401)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 4 * *v10);
            v25 = *(float *)(v15 + 4 * *v14);
            if (v24 >= v25)
            {
              if (v17 < v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 4 * *v10) < *(float *)(v15 + 4 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 < v24)
              {
                *v14 = v16;
                goto LABEL_31;
              }
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + 4 * v40) < v25)
              {
                *v10 = v40;
LABEL_31:
                *(a2 - 1) = v23;
              }
            }
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 4 * *v14);
          v21 = *(float *)(v15 + 4 * *v10);
          if (v20 >= v21)
          {
            if (v17 < v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 4 * *v14) < *(float *)(v15 + 4 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 >= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + 4 * v29) >= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 4 * v33);
          v36 = *(float *)(v15 + 4 * v34);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + 4 * v37);
          if (v35 >= v36)
          {
            if (v38 < v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 4 * *v31) < *(float *)(v15 + 4 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v41 = *(a2 - 2);
              if (*(float *)(v15 + 4 * v41) >= v36)
                goto LABEL_37;
              *v31 = v41;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v42 = &v10[v13];
          v45 = v42[1];
          v43 = v42 + 1;
          v44 = v45;
          v46 = v10[2];
          v47 = *(float *)(v15 + 4 * v45);
          v48 = *(float *)(v15 + 4 * v46);
          v49 = *(a2 - 3);
          v50 = *(float *)(v15 + 4 * v49);
          if (v47 >= v48)
          {
            if (v50 < v47)
            {
              *v43 = v49;
              *(a2 - 3) = v44;
              v51 = v10[2];
              if (*(float *)(v15 + 4 * *v43) < *(float *)(v15 + 4 * v51))
              {
                v10[2] = *v43;
                *v43 = v51;
              }
            }
          }
          else
          {
            if (v50 >= v47)
            {
              v10[2] = v44;
              *v43 = v46;
              v52 = *(a2 - 3);
              if (*(float *)(v15 + 4 * v52) >= v48)
                goto LABEL_46;
              *v43 = v52;
            }
            else
            {
              v10[2] = v49;
            }
            *(a2 - 3) = v46;
          }
LABEL_46:
          v53 = *v14;
          v54 = *v31;
          v55 = *(float *)(v15 + 4 * *v14);
          v56 = *(float *)(v15 + 4 * *v31);
          v57 = *v43;
          v58 = *(float *)(v15 + 4 * *v43);
          if (v55 < v56)
          {
            if (v58 >= v55)
            {
              *v31 = v53;
              *v14 = v54;
              v31 = v14;
              v53 = v57;
              if (v58 >= v56)
              {
                v59 = *v10;
                *v10 = v54;
                *v14 = v59;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v58 >= v55)
            goto LABEL_54;
          *v14 = v57;
          *v43 = v53;
          v43 = v14;
          v53 = v54;
          if (v58 < v56)
          {
LABEL_53:
            *v31 = v57;
            *v43 = v54;
LABEL_54:
            v60 = *v10;
            *v10 = v53;
            *v14 = v60;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v61 = *(float *)(v15 + 4 * v28);
            if (*(float *)(v15 + 4 * *(v10 - 1)) < v61)
              goto LABEL_56;
            if (v61 >= *(float *)(v15 + 4 * *(a2 - 1)))
            {
              v79 = v10 + 1;
              do
              {
                v10 = v79;
                if (v79 >= a2)
                  break;
                ++v79;
              }
              while (v61 >= *(float *)(v15 + 4 * *v10));
            }
            else
            {
              do
              {
                v78 = v10[1];
                ++v10;
              }
              while (v61 >= *(float *)(v15 + 4 * v78));
            }
            v80 = a2;
            if (v10 < a2)
            {
              v80 = a2;
              do
                v81 = *--v80;
              while (v61 < *(float *)(v15 + 4 * v81));
            }
            if (v10 < v80)
            {
              v82 = *v10;
              v83 = *v80;
              do
              {
                *v10 = v83;
                *v80 = v82;
                do
                {
                  v84 = v10[1];
                  ++v10;
                  v82 = v84;
                }
                while (v61 >= *(float *)(v15 + 4 * v84));
                do
                {
                  v85 = *--v80;
                  v83 = v85;
                }
                while (v61 < *(float *)(v15 + 4 * v85));
              }
              while (v10 < v80);
            }
            v86 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v86;
            a5 = 0;
            *v86 = v28;
            continue;
          }
          v77 = *v10;
          *v10 = v57;
          *v14 = v77;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v62 = 0;
          v63 = **a3;
          v64 = *(float *)(v63 + 4 * v28);
          do
            v65 = v10[++v62];
          while (*(float *)(v63 + 4 * v65) < v64);
          v66 = &v10[v62];
          v67 = a2;
          if (v62 == 1)
          {
            v67 = a2;
            do
            {
              if (v66 >= v67)
                break;
              v69 = *--v67;
            }
            while (*(float *)(v63 + 4 * v69) >= v64);
          }
          else
          {
            do
              v68 = *--v67;
            while (*(float *)(v63 + 4 * v68) >= v64);
          }
          if (v66 >= v67)
          {
            v75 = v66 - 1;
            if (v66 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v70 = *v67;
            v71 = &v10[v62];
            v72 = v67;
            do
            {
              *v71 = v70;
              *v72 = v65;
              do
              {
                v73 = v71[1];
                ++v71;
                v65 = v73;
              }
              while (*(float *)(v63 + 4 * v73) < v64);
              do
              {
                v74 = *--v72;
                v70 = v74;
              }
              while (*(float *)(v63 + 4 * v74) >= v64);
            }
            while (v71 < v72);
            v75 = v71 - 1;
            if (v71 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v75;
          }
LABEL_74:
          *v75 = v28;
          if (v66 < v67)
            goto LABEL_77;
          v76 = sub_223F4D578(v10, v75, *a3);
          v10 = v75 + 1;
          result = sub_223F4D578(v75 + 1, a2, *a3);
          if (!(_DWORD)result)
          {
            if (v76)
              continue;
LABEL_77:
            result = sub_223F4C90C(v9, v75, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v75 + 1;
            continue;
          }
          a2 = v75;
          if (v76)
            return result;
          goto LABEL_2;
        }
        v106 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v107 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v108 = *v106;
              v109 = 8;
              v110 = v10;
              do
              {
                v113 = *v110;
                v112 = v110[1];
                v110 = v107;
                v114 = *(float *)(v108 + 4 * v112);
                if (v114 < *(float *)(v108 + 4 * v113))
                {
                  v115 = v109;
                  do
                  {
                    *(uint64_t *)((char *)v10 + v115) = v113;
                    v116 = v115 - 8;
                    if (v115 == 8)
                    {
                      v111 = v10;
                      goto LABEL_116;
                    }
                    v113 = *(uint64_t *)((char *)v10 + v115 - 16);
                    v115 -= 8;
                  }
                  while (v114 < *(float *)(v108 + 4 * v113));
                  v111 = (uint64_t *)((char *)v10 + v116);
LABEL_116:
                  *v111 = v112;
                }
                v107 = v110 + 1;
                v109 += 8;
              }
              while (v110 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v148 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v149 = *v106;
            do
            {
              v151 = *v9;
              v150 = v9[1];
              v9 = v148;
              v152 = *(float *)(v149 + 4 * v150);
              if (v152 < *(float *)(v149 + 4 * v151))
              {
                do
                {
                  *v148 = v151;
                  v151 = *(v148 - 2);
                  --v148;
                }
                while (v152 < *(float *)(v149 + 4 * v151));
                *v148 = v150;
              }
              v148 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t *sub_223F4D3DC(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a2;
  v7 = *result;
  v8 = *(float *)(a6 + 4 * *a2);
  v9 = *(float *)(a6 + 4 * *result);
  v10 = *a3;
  v11 = *(float *)(a6 + 4 * *a3);
  if (v8 >= v9)
  {
    if (v11 >= v8)
    {
      v6 = *a3;
      v13 = *a4;
      if (*(float *)(a6 + 4 * *a4) >= *(float *)(a6 + 4 * v10))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a2 = v10;
    *a3 = v6;
    v12 = *result;
    if (*(float *)(a6 + 4 * *a2) < *(float *)(a6 + 4 * *result))
    {
      *result = *a2;
      *a2 = v12;
      v6 = *a3;
      v13 = *a4;
      if (*(float *)(a6 + 4 * *a4) >= *(float *)(a6 + 4 * *a3))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v11 >= v8)
    {
      *result = v6;
      *a2 = v7;
      v6 = *a3;
      if (*(float *)(a6 + 4 * *a3) >= v9)
        goto LABEL_11;
      *a2 = v6;
    }
    else
    {
      *result = v10;
    }
    *a3 = v7;
    v6 = v7;
  }
LABEL_11:
  v13 = *a4;
  if (*(float *)(a6 + 4 * *a4) >= *(float *)(a6 + 4 * v6))
    goto LABEL_17;
LABEL_14:
  *a3 = v13;
  *a4 = v6;
  v14 = *a2;
  if (*(float *)(a6 + 4 * *a3) < *(float *)(a6 + 4 * *a2))
  {
    *a2 = *a3;
    *a3 = v14;
    v15 = *result;
    if (*(float *)(a6 + 4 * *a2) < *(float *)(a6 + 4 * *result))
    {
      *result = *a2;
      *a2 = v15;
    }
  }
LABEL_17:
  v16 = *a4;
  if (*(float *)(a6 + 4 * *a5) < *(float *)(a6 + 4 * *a4))
  {
    *a4 = *a5;
    *a5 = v16;
    v17 = *a3;
    if (*(float *)(a6 + 4 * *a4) < *(float *)(a6 + 4 * *a3))
    {
      *a3 = *a4;
      *a4 = v17;
      v18 = *a2;
      if (*(float *)(a6 + 4 * *a3) < *(float *)(a6 + 4 * *a2))
      {
        *a2 = *a3;
        *a3 = v18;
        v19 = *result;
        if (*(float *)(a6 + 4 * *a2) < *(float *)(a6 + 4 * *result))
        {
          *result = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL sub_223F4D578(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v14 = *(a2 - 1);
      v15 = *a1;
      if (*(float *)(*a3 + 4 * v14) >= *(float *)(*a3 + 4 * *a1))
        return 1;
      *a1 = v14;
      *(a2 - 1) = v15;
      return 1;
    case 3:
      v16 = *a3;
      v17 = *a1;
      v18 = a1[1];
      v19 = *(float *)(*a3 + 4 * v18);
      v20 = *(float *)(*a3 + 4 * *a1);
      v21 = *(a2 - 1);
      v22 = *(float *)(*a3 + 4 * v21);
      if (v19 >= v20)
      {
        if (v22 >= v19)
          return 1;
        a1[1] = v21;
        *(a2 - 1) = v18;
        v44 = *a1;
        v43 = a1[1];
        if (*(float *)(v16 + 4 * v43) >= *(float *)(v16 + 4 * *a1))
          return 1;
        *a1 = v43;
        a1[1] = v44;
        return 1;
      }
      else if (v22 >= v19)
      {
        *a1 = v18;
        a1[1] = v17;
        v50 = *(a2 - 1);
        if (*(float *)(v16 + 4 * v50) >= v20)
          return 1;
        a1[1] = v50;
        *(a2 - 1) = v17;
        return 1;
      }
      else
      {
        *a1 = v21;
        *(a2 - 1) = v17;
        return 1;
      }
    case 4:
      v23 = a1 + 1;
      v24 = a1[1];
      v25 = a1 + 2;
      v26 = a1[2];
      v27 = *a3;
      v28 = *(float *)(*a3 + 4 * v24);
      v29 = *a1;
      v30 = *(float *)(*a3 + 4 * *a1);
      v31 = *(float *)(*a3 + 4 * v26);
      if (v28 < v30)
      {
        v32 = a1;
        v33 = a1 + 2;
        v34 = *a1;
        if (v31 >= v28)
        {
          *a1 = v24;
          a1[1] = v29;
          v32 = a1 + 1;
          v33 = a1 + 2;
          v34 = v29;
          if (v31 >= v30)
            goto LABEL_38;
        }
LABEL_35:
        *v32 = v26;
        *v33 = v29;
        v24 = v34;
LABEL_36:
        v45 = *(a2 - 1);
        if (*(float *)(v27 + 4 * v45) >= *(float *)(v27 + 4 * v24))
          return 1;
        goto LABEL_39;
      }
      if (v31 < v28)
      {
        *v23 = v26;
        *v25 = v24;
        v32 = a1;
        v33 = a1 + 1;
        v34 = v24;
        if (v31 >= v30)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v24 = v26;
      v45 = *(a2 - 1);
      if (*(float *)(v27 + 4 * v45) >= *(float *)(v27 + 4 * v24))
        return 1;
LABEL_39:
      *v25 = v45;
      *(a2 - 1) = v24;
      v46 = *v25;
      v47 = *v23;
      v48 = *(float *)(v27 + 4 * v46);
      if (v48 >= *(float *)(v27 + 4 * v47))
        return 1;
      a1[1] = v46;
      a1[2] = v47;
      v49 = *a1;
      if (v48 >= *(float *)(v27 + 4 * *a1))
        return 1;
      *a1 = v46;
      a1[1] = v49;
      return 1;
    case 5:
      sub_223F4D3DC(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, *a3);
      return 1;
    default:
      v5 = a1 + 2;
      v4 = a1[2];
      v6 = a1[1];
      v7 = *a3;
      v8 = *(float *)(*a3 + 4 * v6);
      v9 = *a1;
      v10 = *(float *)(*a3 + 4 * *a1);
      v11 = *(float *)(*a3 + 4 * v4);
      if (v8 >= v10)
      {
        if (v11 >= v8 || (a1[1] = v4, *v5 = v6, v12 = a1, v13 = a1 + 1, v11 >= v10))
        {
LABEL_20:
          v35 = a1 + 3;
          if (a1 + 3 == a2)
            return 1;
          v36 = 0;
          for (i = 24; ; i += 8)
          {
            v38 = *v35;
            v39 = *v5;
            v40 = *(float *)(v7 + 4 * *v35);
            if (v40 < *(float *)(v7 + 4 * v39))
              break;
LABEL_23:
            v5 = v35++;
            if (v35 == a2)
              return 1;
          }
          v41 = i;
          do
          {
            *(uint64_t *)((char *)a1 + v41) = v39;
            v42 = v41 - 8;
            if (v41 == 8)
            {
              *a1 = v38;
              if (++v36 != 8)
                goto LABEL_23;
              return v35 + 1 == a2;
            }
            v39 = *(uint64_t *)((char *)a1 + v41 - 16);
            v41 -= 8;
          }
          while (v40 < *(float *)(v7 + 4 * v39));
          *(uint64_t *)((char *)a1 + v42) = v38;
          if (++v36 != 8)
            goto LABEL_23;
          return v35 + 1 == a2;
        }
      }
      else
      {
        v12 = a1;
        v13 = a1 + 2;
        if (v11 >= v8)
        {
          *a1 = v6;
          a1[1] = v9;
          v12 = a1 + 1;
          v13 = a1 + 2;
          if (v11 >= v10)
            goto LABEL_20;
        }
      }
      *v12 = v4;
      *v13 = v9;
      goto LABEL_20;
  }
}

void sub_223F4D900()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223F4D914(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC64330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223F4D94C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC64330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223F4D96C()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_223F4BD44(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_2540CE0F8);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE0F8))
    {
      qword_2540CE0F0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_DetectPlanesRANSAC");
      __cxa_guard_release(&qword_2540CE0F8);
    }
    v1 = qword_2540CE0F0;
    if (*(_BYTE *)(qword_2540CE0F0 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_223F4DA3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE0F8);
  _Unwind_Resume(a1);
}

uint64_t sub_223F4DA58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection12computePlaneENS0_4spanIKN"
                     "3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEEE3$_1JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection12computePlaneEN"
                                "S0_4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEEE3$_1JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection12computePlaneENS0_4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEEE3$_1JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3acv16surfacedetection12computePlaneENS0_4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEEE3$_1JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F4DAC4()
{
  return &unk_24EC64390;
}

_QWORD *sub_223F4DAD0@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  float v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  float32x2_t v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x2_t v41;
  uint64_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  float32x2_t v46;
  float v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  float *v61;
  __int32 v62;
  unint64_t v63;
  char *v64;
  char *j;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  const float *v70;
  float32x2_t v71;
  int64x2_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *k;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint8x8_t v86;
  void **v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  float v91;
  _QWORD *v92;
  _QWORD *v93;
  _BOOL4 v94;
  unint64_t v95;
  unint64_t v96;
  size_t prime;
  void *v98;
  void *v99;
  uint64_t v100;
  _QWORD **v101;
  size_t v102;
  size_t v103;
  size_t v104;
  _QWORD *m;
  size_t v106;
  uint64_t v107;
  unint64_t v108;
  uint8x8_t v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  size_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  __int128 *v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t *v136;
  float *v137;
  unsigned int v138;
  unint64_t v139;
  float v140;
  unint64_t *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  unint64_t *v147;
  int64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD *v155;
  char *v156;
  uint64_t v157;
  __int128 v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unint64_t v162;
  float32x4_t v163;
  __int128 v164;
  unint64_t *v165;
  unint64_t *v166;
  float v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint8x8_t v172;
  unint64_t v173;
  float **v174;
  float *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  char *v185;
  char *v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  float32x4_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  float *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  float v199;
  int64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  _BYTE *v206;
  char *v207;
  int64_t v208;
  unint64_t v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  int64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  _BYTE *v221;
  char *v222;
  int64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  float32x4_t *v232;
  float32x4_t *v233;
  uint64_t v234;
  float32x4_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  float32x4_t *v239;
  float32x4_t *v240;
  uint64_t v241;
  float32x4_t v242;
  unsigned __int8 v243;
  float32x4_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  char *v248;
  void *v249;
  unint64_t v250;
  uint8x8_t v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  _QWORD *v255;
  char *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  char *v263;
  unint64_t v264;
  unint64_t v265;
  char *v266;
  unint64_t v267;
  float v268;
  float *v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  unint64_t v273;
  unint64_t v274;
  char *v275;
  unint64_t v276;
  float v277;
  unint64_t v278;
  float *v279;
  unint64_t v280;
  int v281;
  char *v282;
  char *v283;
  void *v284;
  void *v285;
  _QWORD *v286;
  void *v287;
  _QWORD *result;
  uint64_t v289;
  _QWORD *v290;
  void *v291;
  unsigned int *v292;
  uint64_t *v293;
  uint64_t v294;
  int32x4_t v295;
  char *v296;
  float v297;
  char *v298;
  unint64_t v299;
  int64x2_t v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t v303;
  __int128 v304;
  __int128 v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  char *__p;
  void *v313;
  char *v314;
  char *v315;
  char *v316;
  void *v317[2];
  char *v318;
  void *v319[2];
  char *v320;
  unint64_t *v321;
  unint64_t *v322;
  unint64_t *v323;
  void *v324;
  char *v325;
  unint64_t v326;
  void *v327[2];
  void *v328[2];
  float v329;
  int32x2_t v330;
  unint64_t v331;
  __int128 v332;
  char *v333;
  __int128 v334;
  char *v335;
  _QWORD v336[3];
  _QWORD *v337;
  uint64_t v338;

  v338 = *MEMORY[0x24BDAC8D0];
  v331 = 0;
  kdebug_trace();
  sub_223F4F9F0(&v313);
  v294 = (uint64_t)a4;
  if (**((int **)v313 + 7) <= 1)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_2540CE108);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE108))
    {
      qword_2540CE100 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_HorizontalDetect");
      __cxa_guard_release(&qword_2540CE108);
    }
    v9 = qword_2540CE100;
    *(_BYTE *)(qword_2540CE100 + 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v9 = std::chrono::steady_clock::now();
    *(_BYTE *)(v9 + 16) = 1;
  }
  v336[0] = &off_24EC643B0;
  v336[1] = &v331;
  v336[2] = 0;
  v337 = v336;
  v10 = *a2;
  if (*a2 != a2[2] || (v308 = *a3, 2 * *a3 != a3[2]))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/HorizontalPlaneDetector.cpp", 295, (uint64_t)"validateDetectParams(pointsAndVariances, linesAndVariances)", 59, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v10 = *a2;
    v308 = *a3;
  }
  if (v10 <= 2 && v308 <= 1)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_440;
  }
  v11 = a2[1];
  v12 = a2[3];
  v302 = a3[1];
  v299 = a3[3];
  v13 = v308 + v10;
  if (v308 + v10)
  {
    if (v13 >> 59)
      sub_22316E078();
    v14 = (char *)operator new(32 * v13);
    v13 = (unint64_t)&v14[32 * v13];
    v292 = (unsigned int *)a1;
    v307 = v10;
    __p = v14;
    if (v10)
      goto LABEL_14;
  }
  else
  {
    v14 = 0;
    v292 = (unsigned int *)a1;
    v307 = v10;
    __p = 0;
    if (v10)
    {
LABEL_14:
      v15 = 0;
      v16 = v14;
      while (1)
      {
        while (1)
        {
          a1 = v11 + 12 * v15;
          v19 = fminf(sqrtf(*(float *)(v12 + 4 * v15)), 0.05);
          if ((unint64_t)v16 >= v13)
            break;
          *(_QWORD *)v16 = v15;
          v17 = *(_QWORD *)a1;
          *((_DWORD *)v16 + 4) = *(_DWORD *)(a1 + 8);
          *((_QWORD *)v16 + 1) = v17;
          v18 = v19 + *((float *)v16 + 4);
          *((float *)v16 + 5) = *(float *)(a1 + 8) - v19;
          *((float *)v16 + 6) = v18;
          *((_DWORD *)v16 + 7) = 1065353216;
          v16 += 32;
          if (++v15 == v10)
            goto LABEL_35;
        }
        v20 = (v16 - __p) >> 5;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 59)
          sub_22316E078();
        if ((uint64_t)(v13 - (_QWORD)__p) >> 4 > v21)
          v21 = (uint64_t)(v13 - (_QWORD)__p) >> 4;
        if (v13 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
          v22 = 0x7FFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22 >> 59)
          sub_223174E94();
        v23 = (char *)operator new(32 * v22);
        v24 = &v23[32 * v20];
        *(_QWORD *)v24 = v15;
        v25 = *(_QWORD *)a1;
        *((_DWORD *)v24 + 4) = *(_DWORD *)(a1 + 8);
        *((_QWORD *)v24 + 1) = v25;
        v26 = v19 + *((float *)v24 + 4);
        *((float *)v24 + 5) = *(float *)(a1 + 8) - v19;
        *((float *)v24 + 6) = v26;
        *((_DWORD *)v24 + 7) = 1065353216;
        a1 = (unint64_t)v24;
        if (v16 == __p)
        {
          v27 = __p;
          v10 = v307;
          v13 = (unint64_t)&v23[32 * v22];
          v16 = v24 + 32;
          if (!__p)
            goto LABEL_29;
        }
        else
        {
          v27 = __p;
          v10 = v307;
          do
          {
            v28 = *((_QWORD *)v16 - 4);
            v16 -= 32;
            *(_QWORD *)(a1 - 32) = v28;
            a1 -= 32;
            v29 = *((_QWORD *)v16 + 1);
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v16 + 4);
            *(_QWORD *)(a1 + 8) = v29;
            v30 = *(_QWORD *)(v16 + 20);
            *(_DWORD *)(a1 + 28) = *((_DWORD *)v16 + 7);
            *(_QWORD *)(a1 + 20) = v30;
          }
          while (v16 != __p);
          v13 = (unint64_t)&v23[32 * v22];
          v16 = v24 + 32;
          if (!__p)
            goto LABEL_29;
        }
        operator delete(v27);
LABEL_29:
        __p = (char *)a1;
        if (++v15 == v10)
          goto LABEL_35;
      }
    }
  }
  v16 = v14;
LABEL_35:
  if (v308)
  {
    for (i = 0; i != v308; ++i)
    {
      a1 = v302 + 24 * i;
      v34 = (float *)(v299 + 8 * i);
      v35 = *(float *)(a1 + 8);
      v36 = *(float *)(a1 + 20);
      v37 = sqrtf(*v34);
      v38 = sqrtf(v34[1]);
      *(float *)&v313 = v35 - v37;
      *((float *)&v313 + 1) = v37 + v35;
      *(float *)&v314 = v36 - v38;
      *((float *)&v314 + 1) = v38 + v36;
      sub_223F4FC14((uint64_t)&v313, (float *)&v315, 2, 1, v38 + v36);
      if (*((float *)&v313 + 1) >= *(float *)&v314)
      {
        v39.i64[0] = *(_QWORD *)a1;
        v39.i32[2] = *(_DWORD *)(a1 + 8);
        v42 = i + v10;
        v40.i64[0] = *(_QWORD *)(a1 + 12);
        v40.i32[2] = *(_DWORD *)(a1 + 20);
        v43.i64[0] = 0x3F0000003F000000;
        v43.i64[1] = 0x3F0000003F000000;
        v44 = (int32x4_t)vmulq_f32(vaddq_f32(v39, v40), v43);
        v41.f32[0] = (float)(fminf(v37, 0.05) + fminf(v38, 0.05)) * 0.5;
        v45 = (int8x16_t)vsubq_f32(v40, v39);
        v46 = (float32x2_t)vextq_s8(v45, v45, 8uLL).u64[0];
        v47 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v45.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1), *(float32x2_t *)v45.i8, 1), v46, v46).f32[0])/ 0.05;
        if ((unint64_t)v16 >= v13)
        {
          v48 = (v16 - __p) >> 5;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 59)
            sub_22316E078();
          v295 = v44;
          v297 = v41.f32[0];
          if ((uint64_t)(v13 - (_QWORD)__p) >> 4 > v49)
            v49 = (uint64_t)(v13 - (_QWORD)__p) >> 4;
          if (v13 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFE0)
            v50 = 0x7FFFFFFFFFFFFFFLL;
          else
            v50 = v49;
          if (v50 >> 59)
            sub_223174E94();
          v51 = (char *)operator new(32 * v50);
          v52 = &v51[32 * v48];
          *(_QWORD *)v52 = v42;
          *((_QWORD *)v52 + 1) = v295.i64[0];
          *((_DWORD *)v52 + 4) = v295.i32[2];
          *((float *)v52 + 5) = *(float *)&v295.i32[2] - v297;
          *((float *)v52 + 6) = v297 + *(float *)&v295.i32[2];
          *((float *)v52 + 7) = v47;
          v53 = v52;
          if (v16 == __p)
          {
            v54 = __p;
            v10 = v307;
            v13 = (unint64_t)&v51[32 * v50];
            v16 = v52 + 32;
            if (__p)
              goto LABEL_52;
          }
          else
          {
            v54 = __p;
            v10 = v307;
            do
            {
              v55 = *((_QWORD *)v16 - 4);
              v16 -= 32;
              *((_QWORD *)v53 - 4) = v55;
              v53 -= 32;
              v56 = *((_QWORD *)v16 + 1);
              *((_DWORD *)v53 + 4) = *((_DWORD *)v16 + 4);
              *((_QWORD *)v53 + 1) = v56;
              v57 = *(_QWORD *)(v16 + 20);
              *((_DWORD *)v53 + 7) = *((_DWORD *)v16 + 7);
              *(_QWORD *)(v53 + 20) = v57;
            }
            while (v16 != __p);
            v13 = (unint64_t)&v51[32 * v50];
            v16 = v52 + 32;
            if (__p)
LABEL_52:
              operator delete(v54);
          }
          __p = v53;
          continue;
        }
        *(_QWORD *)v16 = v42;
        *((_DWORD *)v16 + 4) = v44.i32[2];
        *((_QWORD *)v16 + 1) = v44.i64[0];
        v32 = (float32x2_t)vdup_laneq_s32(v44, 2);
        LODWORD(v33) = vsub_f32(v32, v41).u32[0];
        HIDWORD(v33) = vadd_f32(v32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v41, 0)).i32[1];
        *(_QWORD *)(v16 + 20) = v33;
        *((float *)v16 + 7) = v47;
        v16 += 32;
      }
    }
  }
  v58 = v16 - __p;
  if ((unint64_t)(v16 - __p) > 0x3F)
  {
    v60 = __p;
    if (__p != v16)
    {
      v60 = __p;
      v61 = (float *)(__p + 32);
      if (__p + 32 != v16)
      {
        v60 = __p;
        do
        {
          if (v61[5] < *((float *)v60 + 5))
            v60 = (char *)v61;
          v61 += 8;
        }
        while (v61 != (float *)v16);
      }
    }
    v62 = *((_DWORD *)v60 + 5);
    *(_OWORD *)v327 = 0u;
    *(_OWORD *)v328 = 0u;
    v329 = 1.0;
    v330.i32[0] = 1000593162;
    v330.i32[1] = v62;
    v324 = 0;
    v325 = 0;
    v326 = 0;
    if (v58 < 0)
      sub_22316E078();
    v63 = v58 >> 5;
    v317[0] = &v326;
    v59 = __p;
    v313 = operator new(56 * (v58 >> 5));
    v314 = (char *)v313;
    v315 = (char *)v313;
    v316 = (char *)v313 + 56 * v63;
    sub_223F50B44(&v324, &v313);
    v64 = v314;
    for (j = v315; j != v64; j -= 56)
    {
      v66 = (void *)*((_QWORD *)j - 4);
      if (v66)
      {
        *((_QWORD *)j - 3) = v66;
        operator delete(v66);
      }
    }
    if (v313)
      operator delete(v313);
    v67 = 0;
    if (v63 <= 1)
      v68 = 1;
    else
      v68 = v63;
    v303 = v68;
    while (1)
    {
      v69 = &v59[32 * v67];
      v70 = (const float *)&v330 + 1;
      v71 = vld1_dup_f32(v70);
      v72 = (int64x2_t)vcvtq_u64_f64(vcvtq_f64_f32(vrndm_f32(vdiv_f32(vsub_f32(*(float32x2_t *)(v69 + 20), v71), (float32x2_t)vdup_lane_s32(v330, 0)))));
      v73 = v325;
      if ((unint64_t)v325 >= v326)
      {
        v75 = 0x6DB6DB6DB6DB6DB7 * ((v325 - (_BYTE *)v324) >> 3);
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) > 0x492492492492492)
          sub_22316E078();
        if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v326 - (_QWORD)v324) >> 3) > v76)
          v76 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v326 - (_QWORD)v324) >> 3);
        v77 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v326 - (_QWORD)v324) >> 3)) >= 0x249249249249249
            ? 0x492492492492492
            : v76;
        v317[0] = &v326;
        if (v77)
        {
          v300 = v72;
          if (v77 > 0x492492492492492)
            goto LABEL_453;
          v78 = (char *)operator new(56 * v77);
          v72 = v300;
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[56 * v75];
        v313 = v78;
        v314 = v79;
        v315 = v79;
        v316 = &v78[56 * v77];
        *(_QWORD *)v79 = v69;
        *(int64x2_t *)(v79 + 8) = v72;
        sub_223F35A88(vsubq_s64(vdupq_laneq_s64(v72, 1), v72).u64[0] + 1, (_QWORD *)v79 + 3);
        v78[56 * v75 + 48] = 0;
        v315 += 56;
        sub_223F50B44(&v324, &v313);
        v74 = v325;
        v80 = v314;
        for (k = v315; k != v80; k -= 56)
        {
          v82 = (void *)*((_QWORD *)k - 4);
          if (v82)
          {
            *((_QWORD *)k - 3) = v82;
            operator delete(v82);
          }
        }
        if (v313)
          operator delete(v313);
      }
      else
      {
        *(_QWORD *)v325 = v69;
        *(int64x2_t *)(v73 + 8) = v72;
        sub_223F35A88(vsubq_s64(vdupq_laneq_s64(v72, 1), v72).u64[0] + 1, (_QWORD *)v73 + 3);
        v73[48] = 0;
        v74 = v73 + 56;
      }
      v325 = v74;
      v83 = *((_QWORD *)v74 - 6);
      if (v83 <= *((_QWORD *)v74 - 5))
        break;
LABEL_76:
      if (++v67 == v303)
      {
        v135 = 0;
        v136 = 0;
        v137 = (float *)v328[0];
        v138 = *v292;
        v322 = 0;
        v323 = 0;
        v321 = 0;
        if (v328[1] >= (void *)2)
        {
          if ((unint64_t)v328[1] >> 62)
            sub_22367C394();
          v139 = (unint64_t)v328[1] >> 1;
          v136 = (unint64_t *)operator new(8 * ((unint64_t)v328[1] >> 1));
          v135 = &v136[v139];
          v321 = v136;
          v322 = v136;
          v323 = v135;
        }
        if (!v137)
        {
          v141 = v136;
LABEL_251:
          v159 = 126 - 2 * __clz(v136 - v141);
          v313 = v327;
          if (v136 == v141)
            v160 = 0;
          else
            v160 = v159;
          sub_223F50D20((uint64_t)v141, v136, (uint64_t **)&v313, v160, 1);
          v161 = *v292;
          v162 = v322 - v321;
          *(_QWORD *)(v294 + 8) = 0;
          *(_QWORD *)(v294 + 16) = 0;
          *(_QWORD *)v294 = 0;
          sub_223F527FC(v294, v162);
          v166 = v321;
          v165 = v322;
          if (v321 == v322)
          {
            v165 = v321;
LABEL_425:
            v331 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v294 + 8) - *(_QWORD *)v294) >> 4);
            if (v165)
            {
              v322 = v165;
              operator delete(v165);
            }
            v282 = (char *)v324;
            if (v324)
            {
              v283 = v325;
              v284 = v324;
              if (v325 != v324)
              {
                do
                {
                  v285 = (void *)*((_QWORD *)v283 - 4);
                  if (v285)
                  {
                    *((_QWORD *)v283 - 3) = v285;
                    operator delete(v285);
                  }
                  v283 -= 56;
                }
                while (v283 != v282);
                v284 = v324;
              }
              v325 = v282;
              operator delete(v284);
            }
            v286 = v328[0];
            if (v328[0])
            {
              do
              {
                v290 = (_QWORD *)*v286;
                v291 = (void *)v286[4];
                if (v291)
                {
                  v286[5] = v291;
                  operator delete(v291);
                }
                operator delete(v286);
                v286 = v290;
              }
              while (v290);
            }
            v287 = v327[0];
            v327[0] = 0;
            if (v287)
              operator delete(v287);
            goto LABEL_438;
          }
          v167 = (float)v161;
          v293 = (uint64_t *)((unint64_t)&v313 | 0xC);
LABEL_261:
          v171 = *--v165;
          v170 = v171;
          v322 = v165;
          if (!v327[1])
            goto LABEL_450;
          v172 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
          v172.i16[0] = vaddlv_u8(v172);
          if (v172.u32[0] > 1uLL)
          {
            v173 = v170;
            if (v327[1] <= (void *)v170)
              v173 = v170 % (unint64_t)v327[1];
          }
          else
          {
            v173 = ((unint64_t)v327[1] - 1) & v170;
          }
          v174 = (float **)*((_QWORD *)v327[0] + v173);
          if (!v174 || (v175 = *v174) == 0)
LABEL_450:
            sub_223198218("unordered_map::at: key not found");
          v176 = (unint64_t)v327[1] - 1;
          if (v172.u32[0] < 2uLL)
          {
            while (1)
            {
              v177 = *((_QWORD *)v175 + 1);
              if (v177 == v170)
              {
                if (*((_QWORD *)v175 + 2) == v170)
                  goto LABEL_274;
              }
              else if ((v177 & v176) != v173)
              {
                goto LABEL_450;
              }
              v175 = *(float **)v175;
              if (!v175)
                goto LABEL_450;
            }
          }
          while (1)
          {
            v179 = *((_QWORD *)v175 + 1);
            if (v179 == v170)
            {
              if (*((_QWORD *)v175 + 2) == v170)
              {
LABEL_274:
                if (v175[14] < v167)
                  goto LABEL_260;
                v334 = 0uLL;
                v335 = 0;
                v332 = 0uLL;
                v333 = 0;
                if (v172.u32[0] > 1uLL)
                {
                  v178 = v170;
                  if (v327[1] <= (void *)v170)
                    v178 = v170 % (unint64_t)v327[1];
                }
                else
                {
                  v178 = v176 & v170;
                }
                v180 = (_QWORD *)*((_QWORD *)v327[0] + v178);
                if (!v180 || (v181 = (_QWORD *)*v180) == 0)
LABEL_451:
                  sub_223198218("unordered_map::at: key not found");
                if (v172.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v182 = v181[1];
                    if (v182 == v170)
                    {
                      if (v181[2] == v170)
                        goto LABEL_294;
                    }
                    else if ((v182 & v176) != v178)
                    {
                      goto LABEL_451;
                    }
                    v181 = (_QWORD *)*v181;
                    if (!v181)
                      goto LABEL_451;
                  }
                }
                while (2)
                {
                  v192 = v181[1];
                  if (v192 != v170)
                  {
                    if ((void *)v192 >= v327[1])
                      v192 %= (unint64_t)v327[1];
                    if (v192 != v178)
                      goto LABEL_451;
LABEL_297:
                    v181 = (_QWORD *)*v181;
                    if (!v181)
                      goto LABEL_451;
                    continue;
                  }
                  break;
                }
                if (v181[2] != v170)
                  goto LABEL_297;
LABEL_294:
                v184 = (_QWORD *)v181[4];
                v183 = (_QWORD *)v181[5];
                if (v184 == v183)
                {
                  LODWORD(v164) = 0;
                  v191 = 0uLL;
LABEL_366:
                  v243 = atomic_load((unsigned __int8 *)&qword_25578E170);
                  if ((v243 & 1) == 0)
                  {
                    v311 = v191;
                    v306 = v164;
                    v281 = __cxa_guard_acquire(&qword_25578E170);
                    *(_QWORD *)&v164 = v306;
                    v191 = v311;
                    if (v281)
                    {
                      qword_25578E158 = 0;
                      *(_QWORD *)&dword_25578E160 = 0;
                      *(uint64_t *)((char *)&qword_25578E164 + 4) = 0x3F80000000000000;
                      __cxa_guard_release(&qword_25578E170);
                      *(_QWORD *)&v164 = v306;
                      v191 = v311;
                    }
                  }
                  v244 = vdivq_f32(v191, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v164, 0));
                  LODWORD(v314) = v244.i32[2];
                  v313 = (void *)v244.i64[0];
                  *v293 = qword_25578E164;
                  *(_DWORD *)(((unint64_t)&v313 | 0xC) + 8) = dword_25578E16C;
                  LOBYTE(v316) = 1;
                  *(_OWORD *)v317 = v334;
                  v318 = v335;
                  *(_OWORD *)v319 = v332;
                  v320 = v333;
                  v245 = *(_QWORD *)(v294 + 8);
                  if (v245 >= *(_QWORD *)(v294 + 16))
                  {
                    v248 = sub_223F52B4C((char **)v294, (uint64_t)&v313);
                    v249 = v319[0];
                    *(_QWORD *)(v294 + 8) = v248;
                    if (v249)
                    {
                      v319[1] = v249;
                      operator delete(v249);
                    }
                  }
                  else
                  {
                    v246 = v313;
                    *(_DWORD *)(v245 + 8) = (_DWORD)v314;
                    *(_QWORD *)v245 = v246;
                    v247 = *v293;
                    *(_DWORD *)(v245 + 20) = *(_DWORD *)(((unint64_t)&v313 | 0xC) + 8);
                    *(_QWORD *)(v245 + 12) = v247;
                    *(_BYTE *)(v245 + 24) = (_BYTE)v316;
                    *(_QWORD *)(v245 + 40) = 0;
                    *(_QWORD *)(v245 + 48) = 0;
                    *(_QWORD *)(v245 + 32) = 0;
                    *(_OWORD *)(v245 + 32) = *(_OWORD *)v317;
                    *(_QWORD *)(v245 + 48) = v318;
                    *(_QWORD *)(v245 + 56) = 0;
                    v317[0] = 0;
                    v317[1] = 0;
                    v318 = 0;
                    *(_QWORD *)(v245 + 64) = 0;
                    *(_QWORD *)(v245 + 72) = 0;
                    *(_OWORD *)(v245 + 56) = *(_OWORD *)v319;
                    *(_QWORD *)(v245 + 72) = v320;
                    v319[0] = 0;
                    v319[1] = 0;
                    v320 = 0;
                    *(_QWORD *)(v294 + 8) = v245 + 80;
                  }
                  if (v317[0])
                  {
                    v317[1] = v317[0];
                    operator delete(v317[0]);
                  }
                  v250 = (unint64_t)v327[1];
                  if (!v327[1])
                    goto LABEL_450;
                  v251 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
                  v251.i16[0] = vaddlv_u8(v251);
                  if (v251.u32[0] > 1uLL)
                  {
                    v252 = v170;
                    if (v327[1] <= (void *)v170)
                      v252 = v170 % (unint64_t)v327[1];
                  }
                  else
                  {
                    v252 = ((unint64_t)v327[1] - 1) & v170;
                  }
                  v253 = v327[0];
                  v254 = (_QWORD *)*((_QWORD *)v327[0] + v252);
                  if (!v254)
                    goto LABEL_450;
                  v255 = (_QWORD *)*v254;
                  if (!*v254)
                    goto LABEL_450;
                  v256 = (char *)v324;
                  v257 = (unint64_t)v327[1] - 1;
                  if (v251.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v258 = v255[1];
                      if (v258 == v170)
                      {
                        if (v255[2] == v170)
                          goto LABEL_386;
                      }
                      else if ((v258 & v257) != v252)
                      {
                        goto LABEL_450;
                      }
                      v255 = (_QWORD *)*v255;
                      if (!v255)
                        goto LABEL_450;
                    }
                  }
                  while (1)
                  {
                    v261 = v255[1];
                    if (v261 == v170)
                    {
                      if (v255[2] == v170)
                      {
LABEL_386:
                        v259 = (uint64_t *)v255[4];
                        v260 = (uint64_t *)v255[5];
                        if (v259 != v260)
                        {
                          if (v251.u32[0] >= 2uLL)
                          {
                            do
                            {
                              v271 = *v259;
                              v272 = &v256[56 * *v259];
                              v272[48] = 1;
                              v273 = *((_QWORD *)v272 + 1);
                              v274 = *((_QWORD *)v272 + 2);
                              if (v273 <= v274)
                              {
                                v275 = &v256[56 * v271 + 24];
                                v276 = *((_QWORD *)v272 + 1);
                                do
                                {
                                  v278 = v276;
                                  if (v276 >= v250)
                                    v278 = v276 % v250;
                                  v279 = (float *)v253[v278];
                                  if (v279)
                                  {
                                    while (1)
                                    {
                                      v279 = *(float **)v279;
                                      if (!v279)
                                        break;
                                      v280 = *((_QWORD *)v279 + 1);
                                      if (v280 == v276)
                                      {
                                        if (*((_QWORD *)v279 + 2) == v276)
                                        {
                                          v277 = *(float *)(*(_QWORD *)v272 + 28);
                                          v279[6] = v279[6]
                                                  - (float)(v277 * *(float *)(*(_QWORD *)v275 + 4 * (v276 - v273)));
                                          v279[14] = v279[14] - v277;
                                          break;
                                        }
                                      }
                                      else
                                      {
                                        if (v280 >= v250)
                                          v280 %= v250;
                                        if (v280 != v278)
                                          break;
                                      }
                                    }
                                  }
                                  ++v276;
                                }
                                while (v276 <= v274);
                              }
                              ++v259;
                            }
                            while (v259 != v260);
                          }
                          else
                          {
                            do
                            {
                              v262 = *v259;
                              v263 = &v256[56 * *v259];
                              v263[48] = 1;
                              v264 = *((_QWORD *)v263 + 1);
                              v265 = *((_QWORD *)v263 + 2);
                              if (v264 <= v265)
                              {
                                v266 = &v256[56 * v262 + 24];
                                v267 = *((_QWORD *)v263 + 1);
                                do
                                {
                                  v269 = (float *)v253[v267 & v257];
                                  if (v269)
                                  {
                                    while (1)
                                    {
                                      v269 = *(float **)v269;
                                      if (!v269)
                                        break;
                                      v270 = *((_QWORD *)v269 + 1);
                                      if (v270 == v267)
                                      {
                                        if (*((_QWORD *)v269 + 2) == v267)
                                        {
                                          v268 = *(float *)(*(_QWORD *)v263 + 28);
                                          v269[6] = v269[6]
                                                  - (float)(v268 * *(float *)(*(_QWORD *)v266 + 4 * (v267 - v264)));
                                          v269[14] = v269[14] - v268;
                                          break;
                                        }
                                      }
                                      else if ((v270 & v257) != (v267 & v257))
                                      {
                                        break;
                                      }
                                    }
                                  }
                                  ++v267;
                                }
                                while (v267 <= v265);
                              }
                              ++v259;
                            }
                            while (v259 != v260);
                          }
                        }
                        v168 = 126 - 2 * __clz(v322 - v321);
                        v313 = v327;
                        if (v322 == v321)
                          v169 = 0;
                        else
                          v169 = v168;
                        sub_223F50D20((uint64_t)v321, v322, (uint64_t **)&v313, v169, 1);
                        v166 = v321;
                        v165 = v322;
LABEL_260:
                        if (v166 == v165)
                          goto LABEL_425;
                        goto LABEL_261;
                      }
                    }
                    else
                    {
                      if ((void *)v261 >= v327[1])
                        v261 %= (unint64_t)v327[1];
                      if (v261 != v252)
                        goto LABEL_450;
                    }
                    v255 = (_QWORD *)*v255;
                    if (!v255)
                      goto LABEL_450;
                  }
                }
                v185 = 0;
                v186 = 0;
                v187 = 0;
                v188 = 0;
                v189 = 0;
                v190 = 0;
                v191 = 0uLL;
                LODWORD(v164) = 0;
                v301 = (_QWORD *)v181[5];
                while (2)
                {
                  if (*((_BYTE *)v324 + 56 * *v184 + 48))
                    goto LABEL_305;
                  v194 = (char *)v324 + 56 * *v184;
                  v195 = *(float **)v194;
                  v196 = **(_QWORD **)v194;
                  if (v307 <= v196)
                    v197 = v307;
                  else
                    v197 = 0;
                  v198 = v196 - v197;
                  v199 = v195[7] * *(float *)(*((_QWORD *)v194 + 3) + 4 * (v170 - *((_QWORD *)v194 + 1)));
                  v163.i64[0] = *((_QWORD *)v195 + 1);
                  v163.f32[2] = v195[4];
                  v163 = vmulq_n_f32(v163, v199);
                  v191 = vaddq_f32(v191, v163);
                  *(float *)&v164 = *(float *)&v164 + v199;
                  if (v307 > v196)
                  {
                    if (v185 < v187)
                    {
                      *(_QWORD *)v185 = v198;
                      v193 = (uint64_t)(v185 + 8);
                    }
                    else
                    {
                      v200 = v185 - v190;
                      v201 = (v185 - v190) >> 3;
                      v202 = v201 + 1;
                      if ((unint64_t)(v201 + 1) >> 61)
                        goto LABEL_458;
                      if ((v187 - v190) >> 2 > v202)
                        v202 = (v187 - v190) >> 2;
                      if ((unint64_t)(v187 - v190) >= 0x7FFFFFFFFFFFFFF8)
                        v203 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v203 = v202;
                      v309 = v191;
                      v304 = v164;
                      v296 = v188;
                      if (v203)
                      {
                        if (v203 >> 61)
                          goto LABEL_455;
                        v204 = v186;
                        v205 = v185;
                        v206 = operator new(8 * v203);
                        v191 = v309;
                        v164 = v304;
                        v185 = v205;
                        v186 = v204;
                        v207 = &v206[8 * v201];
                        *(_QWORD *)v207 = v198;
                        v193 = (uint64_t)(v207 + 8);
                        v208 = v185 - v190;
                        if (v185 != v190)
                        {
LABEL_321:
                          v209 = v208 - 8;
                          if (v209 < 0x168
                            || (v229 = (v185 - 8 - v190) & 0xFFFFFFFFFFFFFFF8, &v206[v200 - 8 - v229] > &v206[v200 - 8])
                            || &v185[-v229 - 8] > v185 - 8
                            || (unint64_t)(v185 - &v206[v200]) < 0x20)
                          {
                            v210 = v185;
                            v59 = __p;
                          }
                          else
                          {
                            v230 = (v209 >> 3) + 1;
                            v231 = 8 * (v230 & 0x3FFFFFFFFFFFFFFCLL);
                            v210 = &v185[-v231];
                            v207 -= v231;
                            v232 = (float32x4_t *)&v206[8 * v201 - 16];
                            v233 = (float32x4_t *)(v185 - 16);
                            v234 = v230 & 0x3FFFFFFFFFFFFFFCLL;
                            v59 = __p;
                            do
                            {
                              v163 = v233[-1];
                              v235 = *v233;
                              v232[-1] = v163;
                              *v232 = v235;
                              v232 -= 2;
                              v233 -= 2;
                              v234 -= 4;
                            }
                            while (v234);
                            if (v230 == (v230 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_324:
                              v187 = &v206[8 * v203];
                              *(_QWORD *)&v334 = v207;
                              v335 = v187;
                              if (v190)
                                goto LABEL_325;
                              goto LABEL_326;
                            }
                          }
                          do
                          {
                            v211 = *((_QWORD *)v210 - 1);
                            v210 -= 8;
                            *((_QWORD *)v207 - 1) = v211;
                            v207 -= 8;
                          }
                          while (v210 != v190);
                          goto LABEL_324;
                        }
                      }
                      else
                      {
                        v206 = 0;
                        v207 = (char *)(8 * v201);
                        *(_QWORD *)(8 * v201) = v198;
                        v193 = 8 * v201 + 8;
                        v208 = v185 - v190;
                        if (v185 != v190)
                          goto LABEL_321;
                      }
                      v59 = __p;
                      v187 = &v206[8 * v203];
                      *(_QWORD *)&v334 = v207;
                      v335 = v187;
                      if (v190)
                      {
LABEL_325:
                        v212 = v187;
                        v213 = v186;
                        operator delete(v190);
                        v187 = v212;
                        v186 = v213;
                        v164 = v304;
                        v191 = v309;
                      }
LABEL_326:
                      v190 = v207;
                      v183 = v301;
                      v188 = v296;
                    }
                    *((_QWORD *)&v334 + 1) = v193;
                    v185 = (char *)v193;
LABEL_305:
                    if (++v184 == v183)
                      goto LABEL_366;
                    continue;
                  }
                  break;
                }
                if (v186 < v188)
                {
                  *(_QWORD *)v186 = v198;
                  v214 = (uint64_t)(v186 + 8);
LABEL_344:
                  *((_QWORD *)&v332 + 1) = v214;
                  v186 = (char *)v214;
                  goto LABEL_305;
                }
                v215 = v186 - v189;
                v216 = (v186 - v189) >> 3;
                v217 = v216 + 1;
                if ((unint64_t)(v216 + 1) >> 61)
LABEL_458:
                  sub_22367C394();
                if ((v188 - v189) >> 2 > v217)
                  v217 = (v188 - v189) >> 2;
                if ((unint64_t)(v188 - v189) >= 0x7FFFFFFFFFFFFFF8)
                  v218 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v218 = v217;
                v310 = v191;
                v305 = v164;
                v298 = v187;
                if (v218)
                {
                  if (v218 >> 61)
LABEL_455:
                    sub_223174E94();
                  v219 = v186;
                  v220 = v185;
                  v221 = operator new(8 * v218);
                  v191 = v310;
                  v164 = v305;
                  v185 = v220;
                  v186 = v219;
                  v222 = &v221[8 * v216];
                  *(_QWORD *)v222 = v198;
                  v214 = (uint64_t)(v222 + 8);
                  v223 = v186 - v189;
                  if (v186 != v189)
                  {
LABEL_338:
                    v224 = v223 - 8;
                    if (v224 < 0x168
                      || (v236 = (v186 - 8 - v189) & 0xFFFFFFFFFFFFFFF8, &v221[v215 - 8 - v236] > &v221[v215 - 8])
                      || &v186[-v236 - 8] > v186 - 8
                      || (unint64_t)(v186 - &v221[v215]) < 0x20)
                    {
                      v225 = v186;
                      v59 = __p;
                    }
                    else
                    {
                      v237 = (v224 >> 3) + 1;
                      v238 = 8 * (v237 & 0x3FFFFFFFFFFFFFFCLL);
                      v225 = &v186[-v238];
                      v222 -= v238;
                      v239 = (float32x4_t *)&v221[8 * v216 - 16];
                      v240 = (float32x4_t *)(v186 - 16);
                      v241 = v237 & 0x3FFFFFFFFFFFFFFCLL;
                      v59 = __p;
                      do
                      {
                        v163 = v240[-1];
                        v242 = *v240;
                        v239[-1] = v163;
                        *v239 = v242;
                        v239 -= 2;
                        v240 -= 2;
                        v241 -= 4;
                      }
                      while (v241);
                      if (v237 == (v237 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_341:
                        v188 = &v221[8 * v218];
                        *(_QWORD *)&v332 = v222;
                        v333 = v188;
                        if (v189)
                          goto LABEL_342;
                        goto LABEL_343;
                      }
                    }
                    do
                    {
                      v226 = *((_QWORD *)v225 - 1);
                      v225 -= 8;
                      *((_QWORD *)v222 - 1) = v226;
                      v222 -= 8;
                    }
                    while (v225 != v189);
                    goto LABEL_341;
                  }
                }
                else
                {
                  v221 = 0;
                  v222 = (char *)(8 * v216);
                  *(_QWORD *)(8 * v216) = v198;
                  v214 = 8 * v216 + 8;
                  v223 = v186 - v189;
                  if (v186 != v189)
                    goto LABEL_338;
                }
                v59 = __p;
                v188 = &v221[8 * v218];
                *(_QWORD *)&v332 = v222;
                v333 = v188;
                if (v189)
                {
LABEL_342:
                  v227 = v188;
                  v228 = v185;
                  operator delete(v189);
                  v188 = v227;
                  v185 = v228;
                  v164 = v305;
                  v191 = v310;
                }
LABEL_343:
                v189 = v222;
                v183 = v301;
                v187 = v298;
                goto LABEL_344;
              }
            }
            else
            {
              if ((void *)v179 >= v327[1])
                v179 %= (unint64_t)v327[1];
              if (v179 != v173)
                goto LABEL_450;
            }
            v175 = *(float **)v175;
            if (!v175)
              goto LABEL_450;
          }
        }
        v140 = (float)v138;
        v141 = v136;
        v142 = (char *)v136;
        while (1)
        {
          if (v137[14] >= v140)
          {
            if (v142 >= (char *)v135)
            {
              v143 = (v142 - (char *)v141) >> 3;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 61)
              {
                v322 = v136;
                v323 = v135;
                v321 = v141;
                sub_22367C394();
              }
              if (((char *)v135 - (char *)v141) >> 2 > v144)
                v144 = ((char *)v135 - (char *)v141) >> 2;
              if ((unint64_t)((char *)v135 - (char *)v141) >= 0x7FFFFFFFFFFFFFF8)
                v145 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v145 = v144;
              if (v145)
              {
                if (v145 >> 61)
                {
                  v323 = v135;
                  v321 = v141;
                  sub_223174E94();
                }
                v146 = operator new(8 * v145);
                v147 = (unint64_t *)&v146[8 * v143];
                *v147 = *((_QWORD *)v137 + 2);
                v136 = v147 + 1;
                v148 = v142 - (char *)v141;
                if (v142 == (char *)v141)
                  goto LABEL_236;
LABEL_233:
                v149 = v148 - 8;
                if (v149 < 0x168)
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                v152 = (v142 - 8 - (char *)v141) & 0xFFFFFFFFFFFFFFF8;
                if (&v146[v142 - (char *)v141 - 8 - v152] > &v146[v142 - (char *)v141 - 8])
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                if (&v142[-v152 - 8] > v142 - 8)
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                if ((unint64_t)((char *)v141 - v146) < 0x20)
                {
                  v150 = (unint64_t *)v142;
                  goto LABEL_235;
                }
                v153 = (v149 >> 3) + 1;
                v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
                v150 = (unint64_t *)&v142[-v154];
                v147 = (unint64_t *)((char *)v147 - v154);
                v155 = &v146[8 * v143 - 16];
                v156 = v142 - 16;
                v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v158 = *(_OWORD *)v156;
                  *(v155 - 1) = *((_OWORD *)v156 - 1);
                  *v155 = v158;
                  v155 -= 2;
                  v156 -= 32;
                  v157 -= 4;
                }
                while (v157);
                if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_235:
                    v151 = *--v150;
                    *--v147 = v151;
                  }
                  while (v150 != v141);
                }
              }
              else
              {
                v146 = 0;
                v147 = (unint64_t *)(8 * v143);
                *(_QWORD *)(8 * v143) = *((_QWORD *)v137 + 2);
                v136 = (unint64_t *)(8 * v143 + 8);
                v148 = v142 - (char *)v141;
                if (v142 != (char *)v141)
                  goto LABEL_233;
              }
LABEL_236:
              v135 = (unint64_t *)&v146[8 * v145];
              if (v141)
                operator delete(v141);
              v141 = v147;
              v142 = (char *)v136;
              goto LABEL_219;
            }
            *(_QWORD *)v142 = *((_QWORD *)v137 + 2);
            v142 += 8;
            v136 = (unint64_t *)v142;
          }
LABEL_219:
          v137 = *(float **)v137;
          if (!v137)
          {
            v322 = v136;
            v323 = v135;
            v321 = v141;
            v59 = __p;
            goto LABEL_251;
          }
        }
      }
    }
    while (1)
    {
      v85 = (unint64_t)v327[1];
      if (v327[1])
      {
        v86 = (uint8x8_t)vcnt_s8((int8x8_t)v327[1]);
        v86.i16[0] = vaddlv_u8(v86);
        if (v86.u32[0] > 1uLL)
        {
          a1 = v83;
          if (v327[1] <= (void *)v83)
            a1 = v83 % (unint64_t)v327[1];
        }
        else
        {
          a1 = ((unint64_t)v327[1] - 1) & v83;
        }
        v87 = (void **)*((_QWORD *)v327[0] + a1);
        if (v87)
        {
          v88 = (char *)*v87;
          if (*v87)
          {
            if (v86.u32[0] < 2uLL)
            {
              while (1)
              {
                v90 = *((_QWORD *)v88 + 1);
                if (v90 == v83)
                {
                  if (*((_QWORD *)v88 + 2) == v83)
                    goto LABEL_193;
                }
                else if ((v90 & ((unint64_t)v327[1] - 1)) != a1)
                {
                  goto LABEL_120;
                }
                v88 = *(char **)v88;
                if (!v88)
                  goto LABEL_120;
              }
            }
            do
            {
              v89 = *((_QWORD *)v88 + 1);
              if (v89 == v83)
              {
                if (*((_QWORD *)v88 + 2) == v83)
                  goto LABEL_193;
              }
              else
              {
                if ((void *)v89 >= v327[1])
                  v89 %= (unint64_t)v327[1];
                if (v89 != a1)
                  break;
              }
              v88 = *(char **)v88;
            }
            while (v88);
          }
        }
      }
LABEL_120:
      v88 = (char *)operator new(0x40uLL);
      *(_QWORD *)v88 = 0;
      *((_QWORD *)v88 + 1) = v83;
      *((_QWORD *)v88 + 2) = v83;
      *(_OWORD *)(v88 + 24) = 0u;
      *(_OWORD *)(v88 + 40) = 0u;
      *((_QWORD *)v88 + 7) = 0;
      v91 = (float)((unint64_t)v328[1] + 1);
      if (!v85 || (float)(v329 * (float)v85) < v91)
        break;
      v92 = v327[0];
      v93 = (_QWORD *)*((_QWORD *)v327[0] + a1);
      if (v93)
        goto LABEL_123;
LABEL_172:
      *(void **)v88 = v328[0];
      v328[0] = v88;
      v92[a1] = v328;
      if (*(_QWORD *)v88)
      {
        v114 = *(_QWORD *)(*(_QWORD *)v88 + 8);
        if ((v85 & (v85 - 1)) != 0)
        {
          if (v114 >= v85)
            v114 %= v85;
        }
        else
        {
          v114 &= v85 - 1;
        }
        v93 = (char *)v327[0] + 8 * v114;
        goto LABEL_191;
      }
LABEL_192:
      ++v328[1];
LABEL_193:
      *((float *)v88 + 6) = *((float *)v88 + 6)
                          + (float)(*(float *)(*((_QWORD *)v74 - 7) + 28)
                                  * *(float *)(*((_QWORD *)v74 - 4) + 4 * (v83 - *((_QWORD *)v74 - 6))));
      v118 = (_QWORD *)*((_QWORD *)v88 + 5);
      v117 = *((_QWORD *)v88 + 6);
      if ((unint64_t)v118 >= v117)
      {
        a1 = *((_QWORD *)v88 + 4);
        v119 = (uint64_t)((uint64_t)v118 - a1) >> 3;
        v120 = v119 + 1;
        if ((unint64_t)(v119 + 1) >> 61)
          sub_22367C394();
        v121 = v117 - a1;
        if (v121 >> 2 > v120)
          v120 = v121 >> 2;
        if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
          v122 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v122 = v120;
        if (v122)
        {
          if (v122 >> 61)
LABEL_453:
            sub_223174E94();
          v123 = (char *)operator new(8 * v122);
          v124 = &v123[8 * v119];
          *(_QWORD *)v124 = v67;
          v84 = (uint64_t)(v124 + 8);
          v125 = (char *)v118 - a1;
          if (v118 == (_QWORD *)a1)
            goto LABEL_211;
        }
        else
        {
          v123 = 0;
          v124 = (char *)(8 * v119);
          *(_QWORD *)(8 * v119) = v67;
          v84 = 8 * v119 + 8;
          v125 = (char *)v118 - a1;
          if (v118 == (_QWORD *)a1)
          {
LABEL_211:
            *((_QWORD *)v88 + 4) = v124;
            *((_QWORD *)v88 + 5) = v84;
            *((_QWORD *)v88 + 6) = &v123[8 * v122];
            if (a1)
              operator delete((void *)a1);
            goto LABEL_99;
          }
        }
        v126 = (unint64_t)(v125 - 8);
        if (v126 < 0x58)
          goto LABEL_473;
        if (a1 - (unint64_t)v123 < 0x20)
          goto LABEL_473;
        v127 = (v126 >> 3) + 1;
        v128 = 8 * (v127 & 0x3FFFFFFFFFFFFFFCLL);
        v129 = &v118[v128 / 0xFFFFFFFFFFFFFFF8];
        v124 -= v128;
        v130 = &v123[8 * v119 - 16];
        v131 = (__int128 *)(v118 - 2);
        v132 = v127 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v133 = *v131;
          *((_OWORD *)v130 - 1) = *(v131 - 1);
          *(_OWORD *)v130 = v133;
          v130 -= 32;
          v131 -= 2;
          v132 -= 4;
        }
        while (v132);
        v118 = v129;
        if (v127 != (v127 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_473:
          do
          {
            v134 = *--v118;
            *((_QWORD *)v124 - 1) = v134;
            v124 -= 8;
          }
          while (v118 != (_QWORD *)a1);
        }
        goto LABEL_211;
      }
      *v118 = v67;
      v84 = (uint64_t)(v118 + 1);
LABEL_99:
      *((_QWORD *)v88 + 5) = v84;
      *((float *)v88 + 14) = *(float *)(*((_QWORD *)v74 - 7) + 28) + *((float *)v88 + 14);
      ++v83;
      v59 = __p;
      if (v83 > *((_QWORD *)v74 - 5))
        goto LABEL_76;
    }
    v94 = (v85 & (v85 - 1)) == 0;
    if (v85 < 3)
      v94 = 0;
    v95 = (2 * v85) | !v94;
    v96 = vcvtps_u32_f32(v91 / v329);
    if (v95 <= v96)
      prime = v96;
    else
      prime = v95;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v85 = (unint64_t)v327[1];
    }
    if (prime <= v85)
    {
      if (prime >= v85)
        goto LABEL_170;
      v108 = vcvtps_u32_f32((float)(unint64_t)v328[1] / v329);
      if (v85 < 3 || (v109 = (uint8x8_t)vcnt_s8((int8x8_t)v85), v109.i16[0] = vaddlv_u8(v109), v109.u32[0] > 1uLL))
      {
        v108 = std::__next_prime(v108);
      }
      else
      {
        v110 = 1 << -(char)__clz(v108 - 1);
        if (v108 >= 2)
          v108 = v110;
      }
      if (prime <= v108)
        prime = v108;
      if (prime >= v85)
      {
        v85 = (unint64_t)v327[1];
        v113 = (uint64_t)v327[1] - 1;
        if (((unint64_t)v327[1] & ((unint64_t)v327[1] - 1)) == 0)
          goto LABEL_171;
LABEL_183:
        if (v85 <= v83)
        {
          a1 = v83 % v85;
          v92 = v327[0];
          v93 = (_QWORD *)*((_QWORD *)v327[0] + v83 % v85);
          if (!v93)
            goto LABEL_172;
        }
        else
        {
          a1 = v83;
          v92 = v327[0];
          v93 = (_QWORD *)*((_QWORD *)v327[0] + v83);
          if (!v93)
            goto LABEL_172;
        }
LABEL_123:
        *(_QWORD *)v88 = *v93;
LABEL_191:
        *v93 = v88;
        goto LABEL_192;
      }
      if (!prime)
      {
        v112 = v327[0];
        v327[0] = 0;
        if (v112)
          operator delete(v112);
        v85 = 0;
        v327[1] = 0;
        v113 = -1;
        goto LABEL_171;
      }
    }
    if (prime >> 61)
      sub_223174E94();
    v98 = operator new(8 * prime);
    v99 = v327[0];
    v327[0] = v98;
    if (v99)
      operator delete(v99);
    v100 = 0;
    v327[1] = (void *)prime;
    do
      *((_QWORD *)v327[0] + v100++) = 0;
    while (prime != v100);
    v101 = (_QWORD **)v328[0];
    if (!v328[0])
    {
LABEL_182:
      v85 = prime;
      v113 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_183;
LABEL_171:
      a1 = v113 & v83;
      v92 = v327[0];
      v93 = (_QWORD *)*((_QWORD *)v327[0] + (v113 & v83));
      if (!v93)
        goto LABEL_172;
      goto LABEL_123;
    }
    v102 = *((_QWORD *)v328[0] + 1);
    v103 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v104 = v102 & v103;
      *((_QWORD *)v327[0] + v104) = v328;
      for (m = *v101; *v101; m = *v101)
      {
        v106 = m[1] & v103;
        if (v106 == v104)
        {
          v101 = (_QWORD **)m;
        }
        else if (*((_QWORD *)v327[0] + v106))
        {
          *v101 = (_QWORD *)*m;
          v107 = 8 * v106;
          *m = **(_QWORD **)((char *)v327[0] + v107);
          **(_QWORD **)((char *)v327[0] + v107) = m;
        }
        else
        {
          *((_QWORD *)v327[0] + v106) = v101;
          v101 = (_QWORD **)m;
          v104 = v106;
        }
      }
      goto LABEL_182;
    }
    if (v102 < prime)
    {
      *((_QWORD *)v327[0] + v102) = v328;
      v111 = *v101;
      if (*v101)
        goto LABEL_177;
      goto LABEL_169;
    }
    v102 %= prime;
    *((_QWORD *)v327[0] + v102) = v328;
    v111 = *v101;
    if (!*v101)
    {
LABEL_169:
      v85 = prime;
LABEL_170:
      v113 = v85 - 1;
      if ((v85 & (v85 - 1)) != 0)
        goto LABEL_183;
      goto LABEL_171;
    }
    while (1)
    {
LABEL_177:
      v116 = v111[1];
      if (v116 >= prime)
        v116 %= prime;
      if (v116 == v102)
        goto LABEL_176;
      if (*((_QWORD *)v327[0] + v116))
      {
        *v101 = (_QWORD *)*v111;
        v115 = 8 * v116;
        *v111 = **(_QWORD **)((char *)v327[0] + v115);
        **(_QWORD **)((char *)v327[0] + v115) = v111;
        v111 = v101;
LABEL_176:
        v101 = (_QWORD **)v111;
        v111 = (_QWORD *)*v111;
        if (!v111)
          goto LABEL_182;
      }
      else
      {
        *((_QWORD *)v327[0] + v116) = v101;
        v101 = (_QWORD **)v111;
        v111 = (_QWORD *)*v111;
        v102 = v116;
        if (!v111)
          goto LABEL_182;
      }
    }
  }
  *(_QWORD *)v294 = 0;
  *(_QWORD *)(v294 + 8) = 0;
  *(_QWORD *)(v294 + 16) = 0;
  v59 = __p;
LABEL_438:
  if (v59)
    operator delete(v59);
LABEL_440:
  if (!v337)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v337 + 48))(v337);
  result = v337;
  if (v337 == v336)
  {
    v289 = 4;
    result = v336;
  }
  else
  {
    if (!v337)
      return result;
    v289 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v289))();
}

void sub_223F4F7E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE108);
  _Unwind_Resume(a1);
}

void sub_223F4F7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  uint64_t v44;

  sub_223F4FB24(a12);
  if (__p)
    operator delete(__p);
  sub_223F4FBA4(&a40);
  sub_223919E54((uint64_t)&a43);
  if (v43)
    operator delete(v43);
  sub_22318A1C8((_QWORD *)(v44 - 160));
  _Unwind_Resume(a1);
}

void sub_223F4F9F0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE118);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE118))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE110);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE118);
  }
  *a1 = qword_2540CE110;
}

void sub_223F4FA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE118);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE118);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F4FAE4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void **sub_223F4FB24(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_223F4FBA4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
        {
          *((_QWORD *)v3 - 3) = v5;
          operator delete(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

float sub_223F4FC14(uint64_t a1, float *a2, uint64_t a3, char a4, float result)
{
  float *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  int v19;
  float v20;
  int *v21;
  float v22;
  float v23;
  int v24;
  float v25;
  int *v26;
  float *v27;
  int v28;
  int v29;
  float v30;
  int v31;
  int v32;
  float v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  int v42;
  float v43;
  int *v44;
  int v45;
  int v46;
  float v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int *v55;
  int v56;
  int v57;
  float v58;
  float *v59;
  int v60;
  float v61;
  int v62;
  float v63;
  float v64;
  int v65;
  int v66;
  int *v67;
  int *v68;
  int *v69;
  int v70;
  int v71;
  float v72;
  int v73;
  uint64_t v74;
  int v75;
  float v76;
  unint64_t v77;
  float *v78;
  float v79;
  float v80;
  float v81;
  float *v82;
  int v83;
  float v84;
  float v85;
  float *v86;
  BOOL v87;
  unint64_t v88;
  float v89;
  float *v90;
  float v91;
  int v92;
  float v93;
  float v94;
  int v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  int v101;
  float v102;
  float *v103;
  float v104;
  int v105;
  float v106;
  int v107;
  int v108;
  float v109;
  int v110;
  float v111;
  int v112;
  float *v113;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  float *v119;
  int v120;
  uint64_t v121;
  float v122;
  int64_t v123;
  int64_t v124;
  BOOL v125;
  uint64_t v126;
  float *v127;
  float *v128;
  int v129;
  float *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float *v136;
  float *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  float *v142;
  int v143;
  float *v144;
  int v145;
  int v146;
  float v147;
  uint64_t v148;
  int v149;
  float *v150;
  uint64_t v151;

BOOL sub_223F506BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  int *v12;
  int v13;
  float v14;
  float v15;
  int *v16;
  float *v17;
  float v18;
  float v19;
  float v20;
  int *v21;
  int v22;
  int v23;
  int *v24;
  float v25;
  float v26;
  int v27;
  float v28;
  float v29;
  int v30;
  int v31;
  float v32;
  int v33;
  float v34;
  int v35;
  int v36;
  int v37;
  float v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  float v46;
  int v47;
  uint64_t v48;
  float v49;
  uint64_t v50;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)a1;
      if (v6 <= *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 8) = v7;
        v8 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v8;
      }
      return result;
    case 3:
      v9 = *(float *)(a1 + 8);
      v10 = *(float *)a1;
      v11 = *(float *)(a2 - 8);
      if (v9 <= *(float *)a1)
      {
        if (v11 <= v9)
        {
          v16 = (int *)(a1 + 4);
          *(float *)a1 = v11;
        }
        else
        {
          v16 = (int *)(a1 + 12);
          v36 = *(_DWORD *)(a1 + 12);
          v37 = *(_DWORD *)(a1 + 4);
          *(float *)a1 = v9;
          *(_DWORD *)(a1 + 4) = v36;
          *(float *)(a1 + 8) = v10;
          *(_DWORD *)(a1 + 12) = v37;
          v38 = *(float *)(a2 - 8);
          if (v38 > v10)
            return result;
          *(float *)(a1 + 8) = v38;
        }
        *(float *)(a2 - 8) = v10;
        v12 = (int *)(a2 - 4);
        goto LABEL_28;
      }
      if (v11 <= v9)
      {
        *(float *)(a1 + 8) = v11;
        *(float *)(a2 - 8) = v9;
        v12 = (int *)(a1 + 12);
        v13 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v13;
        v14 = *(float *)(a1 + 8);
        v15 = *(float *)a1;
        if (v14 <= *(float *)a1)
        {
          *(float *)a1 = v14;
          *(float *)(a1 + 8) = v15;
          v16 = (int *)(a1 + 4);
LABEL_28:
          v41 = *v16;
          *v16 = *v12;
          *v12 = v41;
          return result;
        }
      }
      return result;
    case 4:
      sub_223F50A0C((_DWORD *)a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      sub_223F50A0C((_DWORD *)a1, a1 + 8, a1 + 16, a1 + 24);
      v25 = *(float *)(a2 - 8);
      v26 = *(float *)(a1 + 24);
      if (v25 > v26)
        return 1;
      *(float *)(a1 + 24) = v25;
      *(float *)(a2 - 8) = v26;
      v27 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v27;
      v28 = *(float *)(a1 + 24);
      v29 = *(float *)(a1 + 16);
      if (v28 > v29)
        return 1;
      v30 = *(_DWORD *)(a1 + 20);
      v31 = *(_DWORD *)(a1 + 28);
      *(float *)(a1 + 16) = v28;
      *(_DWORD *)(a1 + 20) = v31;
      *(float *)(a1 + 24) = v29;
      *(_DWORD *)(a1 + 28) = v30;
      v32 = *(float *)(a1 + 8);
      if (v28 > v32)
        return 1;
      v33 = *(_DWORD *)(a1 + 12);
      *(float *)(a1 + 8) = v28;
      *(_DWORD *)(a1 + 12) = v31;
      *(float *)(a1 + 16) = v32;
      *(_DWORD *)(a1 + 20) = v33;
      v34 = *(float *)a1;
      if (v28 > *(float *)a1)
        return 1;
      v35 = *(_DWORD *)(a1 + 4);
      *(float *)a1 = v28;
      *(_DWORD *)(a1 + 4) = v31;
      *(float *)(a1 + 8) = v34;
      *(_DWORD *)(a1 + 12) = v35;
      return 1;
    default:
      v17 = (float *)(a1 + 16);
      v18 = *(float *)(a1 + 16);
      v19 = *(float *)(a1 + 8);
      v20 = *(float *)a1;
      if (v19 <= *(float *)a1)
      {
        if (v18 <= v19)
        {
          v24 = (int *)(a1 + 4);
          *(float *)a1 = v18;
        }
        else
        {
          v24 = (int *)(a1 + 12);
          v39 = *(_DWORD *)(a1 + 12);
          v40 = *(_DWORD *)(a1 + 4);
          *(float *)a1 = v19;
          *(_DWORD *)(a1 + 4) = v39;
          *(float *)(a1 + 8) = v20;
          *(_DWORD *)(a1 + 12) = v40;
          if (v18 > v20)
            goto LABEL_32;
          *(float *)(a1 + 8) = v18;
        }
        *(float *)(a1 + 16) = v20;
        v21 = (int *)(a1 + 20);
        goto LABEL_31;
      }
      if (v18 <= v19)
      {
        v21 = (int *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 20);
        *(float *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 20) = v22;
        *(float *)(a1 + 8) = v18;
        *(_DWORD *)(a1 + 12) = v23;
        if (v18 <= v20)
        {
          *(float *)a1 = v18;
          *(float *)(a1 + 8) = v20;
          v24 = (int *)(a1 + 4);
LABEL_31:
          v42 = *v24;
          *v24 = *v21;
          *v21 = v42;
        }
      }
LABEL_32:
      v43 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v44 = 0;
      v45 = 0;
      while (1)
      {
        v46 = *(float *)v43;
        if (*(float *)v43 <= *v17)
          break;
LABEL_41:
        v17 = (float *)v43;
        v44 += 8;
        v43 += 8;
        if (v43 == a2)
          return 1;
      }
      v47 = *(_DWORD *)(v43 + 4);
      v48 = v44;
      do
      {
        *(_QWORD *)(a1 + v48 + 24) = *(_QWORD *)(a1 + v48 + 16);
        if (v48 == -16)
        {
          *(float *)a1 = v46;
          *(_DWORD *)(a1 + 4) = v47;
          if (++v45 != 8)
            goto LABEL_41;
          return v43 + 8 == a2;
        }
        v49 = *(float *)(a1 + v48 + 8);
        v48 -= 8;
      }
      while (v49 >= v46);
      v50 = a1 + v48;
      *(float *)(v50 + 24) = v46;
      *(_DWORD *)(v50 + 28) = v47;
      if (++v45 != 8)
        goto LABEL_41;
      return v43 + 8 == a2;
  }
}

float sub_223F50A0C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v4;
  float v5;
  float v6;
  int *v7;
  int v8;
  float v9;
  int *v10;
  int v11;
  float v12;
  int v13;
  float result;
  float v15;
  int v16;
  float v17;
  int v18;
  float v19;

  v4 = *(float *)a2;
  v5 = *(float *)a1;
  v6 = *(float *)a3;
  if (*(float *)a2 <= *(float *)a1)
  {
    if (v6 <= v4)
    {
      v10 = a1 + 1;
      *(float *)a1 = v6;
      *(float *)a3 = v5;
      v7 = (int *)(a3 + 4);
      goto LABEL_9;
    }
    *(float *)a1 = v4;
    *(float *)a2 = v5;
    v10 = (int *)(a2 + 4);
    v11 = a1[1];
    a1[1] = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v11;
    v12 = *(float *)a2;
    if (*(float *)a3 <= *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v12;
      v7 = (int *)(a3 + 4);
      goto LABEL_9;
    }
  }
  else if (v6 <= v4)
  {
    *(float *)a2 = v6;
    *(float *)a3 = v4;
    v7 = (int *)(a2 + 4);
    v8 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v8;
    v9 = *(float *)a1;
    if (*(float *)a2 <= *(float *)a1)
    {
      *a1 = *(_DWORD *)a2;
      v10 = a1 + 1;
      *(float *)a2 = v9;
LABEL_9:
      v13 = *v10;
      *v10 = *v7;
      *v7 = v13;
    }
  }
  result = *(float *)a4;
  v15 = *(float *)a3;
  if (*(float *)a4 <= *(float *)a3)
  {
    *(float *)a3 = result;
    *(float *)a4 = v15;
    v16 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v16;
    result = *(float *)a3;
    v17 = *(float *)a2;
    if (*(float *)a3 <= *(float *)a2)
    {
      *(float *)a2 = result;
      *(float *)a3 = v17;
      v18 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v18;
      result = *(float *)a2;
      v19 = *(float *)a1;
      if (*(float *)a2 <= *(float *)a1)
      {
        *(float *)a1 = result;
        *(float *)a2 = v19;
        result = *((float *)a1 + 1);
        a1[1] = *(_DWORD *)(a2 + 4);
        *(float *)(a2 + 4) = result;
      }
    }
  }
  return result;
}

_QWORD *sub_223F50B44(_QWORD *result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *result;
  v3 = result[1];
  v5 = a2[1];
  if (v3 != *result)
  {
    v17 = result;
    v6 = 0;
    do
    {
      v8 = v5 + v6;
      v9 = *(_OWORD *)(v3 + v6 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(v3 + v6 - 40);
      *(_QWORD *)(v5 + v6 - 32) = 0;
      *(_OWORD *)(v8 - 56) = v9;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      v11 = *(_BYTE **)(v3 + v6 - 32);
      v10 = *(_BYTE **)(v3 + v6 - 24);
      v12 = v10 - v11;
      if (v10 != v11)
      {
        if (v12 < 0)
          sub_22316E078();
        v13 = (char *)operator new(v10 - v11);
        *(_QWORD *)(v5 + v6 - 32) = v13;
        v7 = &v13[4 * (v12 >> 2)];
        *(_QWORD *)(v8 - 24) = v13;
        *(_QWORD *)(v8 - 16) = v7;
        memcpy(v13, v11, v12);
        *(_QWORD *)(v8 - 24) = v7;
      }
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(v3 + v6 - 8);
      v6 -= 56;
    }
    while (v3 + v6 != v4);
    v5 += v6;
    result = v17;
  }
  a2[1] = v5;
  v14 = *result;
  *result = v5;
  a2[1] = v14;
  v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

void sub_223F50C6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v1 + v2 - 32);
  if (v4)
  {
    *(_QWORD *)(v1 + v2 - 24) = v4;
    operator delete(v4);
  }
  for (; v2; v2 += 56)
  {
    v5 = *(void **)(v1 + v2 + 24);
    if (v5)
    {
      *(_QWORD *)(v1 + v2 + 32) = v5;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F50CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 56;
        *(_QWORD *)(a1 + 16) = v2 - 56;
        v5 = *(void **)(v2 - 32);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 56;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223F50D20(uint64_t result, unint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float **v29;
  float *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  float **v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int8x8_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  float **v55;
  float *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  float **v61;
  float *v62;
  float v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  float **v68;
  float *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  float **v74;
  float *v75;
  float v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  int8x8_t v89;
  uint8x8_t v90;
  unint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  float **v98;
  float *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  float **v104;
  float *v105;
  float v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  float **v110;
  float *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  float **v115;
  float *v116;
  float v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  BOOL v124;
  unint64_t *v125;
  unint64_t *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t *v129;
  unint64_t v130;
  int8x8_t v131;
  uint8x8_t v132;
  unint64_t v133;
  float **v134;
  float *v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  float **v140;
  float *v141;
  uint64_t v142;
  unint64_t v143;
  int64_t v144;
  int64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t *v148;
  uint64_t **v149;
  unint64_t v150;
  uint64_t **v151;
  uint64_t v152;
  unint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  uint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  unint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  int8x8_t v164;
  unint64_t v165;
  uint8x8_t v166;
  unint64_t v167;
  float **v168;
  float *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  float **v175;
  float *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t *v183;
  unint64_t v184;
  unint64_t *v185;
  int8x8_t v186;
  uint8x8_t v187;
  unint64_t v188;
  float **v189;
  float *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  float **v195;
  float *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  uint64_t *v201;
  unint64_t *v202;
  unint64_t v203;
  int8x8_t v204;
  uint8x8_t v205;
  unint64_t v206;
  float **v207;
  float *v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  float **v213;
  float *v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t *v217;
  int64_t v218;
  unint64_t *v219;
  unint64_t *v220;
  int64_t v221;

  v9 = (unint64_t *)result;
LABEL_2:
  v220 = a2 - 1;
  v10 = v9;
  while (2)
  {
    v11 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = a2 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_223F521EC(*a3, *(a2 - 1), *v10);
        if ((_DWORD)result)
        {
          v121 = *v10;
          *v10 = *(a2 - 1);
          *(a2 - 1) = v121;
        }
        return result;
      case 3:
        return sub_223F5246C(v10, v10 + 1, v220, a3);
      case 4:
        return sub_223F5274C(v10, v10 + 1, v10 + 2, v220, a3);
      case 5:
        return sub_223F52394(v10, v10 + 1, v10 + 2, v10 + 3, v220, a3);
      default:
        if (v12 > 191)
        {
          if (!a4)
          {
            if (v10 == a2)
              return result;
            v217 = a2;
            v144 = (unint64_t)(v13 - 2) >> 1;
            v219 = v10;
            v221 = v144;
            do
            {
              v145 = v144;
              if (v221 >= v144)
              {
                v146 = (2 * v144) | 1;
                v147 = &v11[v146];
                if (2 * v144 + 2 < v13 && sub_223F521EC(*a3, *v147, v147[1]))
                {
                  ++v147;
                  v146 = 2 * v145 + 2;
                }
                v148 = &v11[v145];
                if (!sub_223F521EC(*a3, *v147, *v148))
                {
                  v218 = v145;
                  v149 = a3;
                  v150 = *v148;
                  do
                  {
                    v153 = v147;
                    *v148 = *v147;
                    if (v221 < v146)
                      break;
                    v152 = (2 * v146) | 1;
                    v147 = &v219[v152];
                    v154 = 2 * v146 + 2;
                    if (v154 < v13)
                    {
                      v151 = v149;
                      if (sub_223F521EC(*v149, *v147, v147[1]))
                      {
                        ++v147;
                        v152 = v154;
                      }
                    }
                    else
                    {
                      v151 = v149;
                    }
                    v148 = v153;
                    v146 = v152;
                  }
                  while (!sub_223F521EC(*v151, *v147, v150));
                  *v153 = v150;
                  a3 = v149;
                  v145 = v218;
                  v11 = v219;
                }
              }
              v144 = v145 - 1;
            }
            while (v145);
            v155 = (unint64_t)v12 >> 3;
            v156 = v217;
            while (1)
            {
              v158 = 0;
              v159 = *v11;
              result = (uint64_t)*a3;
              v160 = v11;
              while (2)
              {
                v161 = &v160[v158 + 1];
                v162 = (2 * v158) | 1;
                v163 = 2 * v158 + 2;
                if (v163 >= v155)
                  goto LABEL_339;
                v164 = *(int8x8_t *)(result + 8);
                if (!*(_QWORD *)&v164)
                  goto LABEL_475;
                v165 = *v161;
                v166 = (uint8x8_t)vcnt_s8(v164);
                v166.i16[0] = vaddlv_u8(v166);
                if (v166.u32[0] > 1uLL)
                {
                  v167 = *v161;
                  if (*(_QWORD *)&v164 <= v165)
                    v167 = v165 % *(_QWORD *)&v164;
                }
                else
                {
                  v167 = (*(_QWORD *)&v164 - 1) & v165;
                }
                v168 = *(float ***)(*(_QWORD *)result + 8 * v167);
                if (!v168)
                  goto LABEL_475;
                v169 = *v168;
                if (!*v168)
                  goto LABEL_475;
                v170 = v161[1];
                v171 = *(_QWORD *)&v164 - 1;
                if (v166.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v172 = *((_QWORD *)v169 + 1);
                    if (v172 == v165)
                    {
                      if (*((_QWORD *)v169 + 2) == v165)
                        goto LABEL_354;
                    }
                    else if ((v172 & v171) != v167)
                    {
                      goto LABEL_475;
                    }
                    v169 = *(float **)v169;
                    if (!v169)
                      goto LABEL_475;
                  }
                }
                while (1)
                {
                  v174 = *((_QWORD *)v169 + 1);
                  if (v174 == v165)
                    break;
                  if (v174 >= *(_QWORD *)&v164)
                    v174 %= *(_QWORD *)&v164;
                  if (v174 != v167)
                    goto LABEL_475;
LABEL_357:
                  v169 = *(float **)v169;
                  if (!v169)
                    goto LABEL_475;
                }
                if (*((_QWORD *)v169 + 2) != v165)
                  goto LABEL_357;
LABEL_354:
                if (v166.u32[0] > 1uLL)
                {
                  v173 = v161[1];
                  if (*(_QWORD *)&v164 <= v170)
                    v173 = v170 % *(_QWORD *)&v164;
                }
                else
                {
                  v173 = v171 & v170;
                }
                v175 = *(float ***)(*(_QWORD *)result + 8 * v173);
                if (!v175)
                  goto LABEL_475;
                v176 = *v175;
                if (!v176)
                  goto LABEL_475;
                if (v166.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v177 = *((_QWORD *)v176 + 1);
                    if (v177 == v170)
                    {
                      if (*((_QWORD *)v176 + 2) == v170)
                        goto LABEL_337;
                    }
                    else if ((v177 & v171) != v173)
                    {
                      goto LABEL_475;
                    }
                    v176 = *(float **)v176;
                    if (!v176)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v178 = *((_QWORD *)v176 + 1);
                  if (v178 != v170)
                  {
                    if (v178 >= *(_QWORD *)&v164)
                      v178 %= *(_QWORD *)&v164;
                    if (v178 != v173)
                      goto LABEL_475;
LABEL_375:
                    v176 = *(float **)v176;
                    if (!v176)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v176 + 2) != v170)
                  goto LABEL_375;
LABEL_337:
                if (v169[6] < v176[6])
                {
                  ++v161;
                  v162 = v163;
                }
LABEL_339:
                *v160 = *v161;
                v160 = v161;
                v158 = v162;
                if (v162 <= (uint64_t)((unint64_t)(v155 - 2) >> 1))
                  continue;
                break;
              }
              if (v161 == --v156)
              {
                *v161 = v159;
                goto LABEL_335;
              }
              *v161 = *v156;
              *v156 = v159;
              v179 = (char *)v161 - (char *)v11 + 8;
              if (v179 >= 9)
              {
                v180 = (((unint64_t)v179 >> 3) - 2) >> 1;
                v181 = &v11[v180];
                result = sub_223F521EC((_QWORD *)result, *v181, *v161);
                if ((_DWORD)result)
                {
                  v182 = *v161;
                  v183 = *a3;
                  v184 = *v181;
                  while (1)
                  {
                    v185 = v181;
                    *v161 = v184;
                    if (!v180)
                    {
LABEL_427:
                      *v185 = v182;
                      break;
                    }
                    v186 = (int8x8_t)v183[1];
                    if (!*(_QWORD *)&v186)
                      goto LABEL_475;
                    v180 = (v180 - 1) >> 1;
                    v181 = &v11[v180];
                    v184 = *v181;
                    v187 = (uint8x8_t)vcnt_s8(v186);
                    v187.i16[0] = vaddlv_u8(v187);
                    if (v187.u32[0] > 1uLL)
                    {
                      v188 = *v181;
                      if (*(_QWORD *)&v186 <= v184)
                        v188 = v184 % *(_QWORD *)&v186;
                    }
                    else
                    {
                      v188 = (*(_QWORD *)&v186 - 1) & v184;
                    }
                    v189 = *(float ***)(*v183 + 8 * v188);
                    if (!v189)
                      goto LABEL_475;
                    v190 = *v189;
                    if (!*v189)
                      goto LABEL_475;
                    v191 = *(_QWORD *)&v186 - 1;
                    if (v187.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v192 = *((_QWORD *)v190 + 1);
                        if (v192 == v184)
                        {
                          result = *((_QWORD *)v190 + 2);
                          if (result == v184)
                            goto LABEL_400;
                        }
                        else if ((v192 & v191) != v188)
                        {
                          goto LABEL_475;
                        }
                        v190 = *(float **)v190;
                        if (!v190)
                          goto LABEL_475;
                      }
                    }
                    while (1)
                    {
                      v194 = *((_QWORD *)v190 + 1);
                      if (v194 == v184)
                        break;
                      if (v194 >= *(_QWORD *)&v186)
                        v194 %= *(_QWORD *)&v186;
                      if (v194 != v188)
                        goto LABEL_475;
LABEL_403:
                      v190 = *(float **)v190;
                      if (!v190)
                        goto LABEL_475;
                    }
                    result = *((_QWORD *)v190 + 2);
                    if (result != v184)
                      goto LABEL_403;
LABEL_400:
                    if (v187.u32[0] > 1uLL)
                    {
                      v193 = v182;
                      if (*(_QWORD *)&v186 <= v182)
                        v193 = v182 % *(_QWORD *)&v186;
                    }
                    else
                    {
                      v193 = v191 & v182;
                    }
                    v195 = *(float ***)(*v183 + 8 * v193);
                    if (!v195)
                      goto LABEL_475;
                    v196 = *v195;
                    if (!v196)
                      goto LABEL_475;
                    if (v187.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v197 = *((_QWORD *)v196 + 1);
                        if (v197 == v182)
                        {
                          if (*((_QWORD *)v196 + 2) == v182)
                            goto LABEL_385;
                        }
                        else if ((v197 & v191) != v193)
                        {
                          goto LABEL_475;
                        }
                        v196 = *(float **)v196;
                        if (!v196)
                          goto LABEL_475;
                      }
                    }
                    while (2)
                    {
                      v198 = *((_QWORD *)v196 + 1);
                      if (v198 != v182)
                      {
                        if (v198 >= *(_QWORD *)&v186)
                          v198 %= *(_QWORD *)&v186;
                        if (v198 != v193)
                          goto LABEL_475;
LABEL_421:
                        v196 = *(float **)v196;
                        if (!v196)
                          goto LABEL_475;
                        continue;
                      }
                      break;
                    }
                    if (*((_QWORD *)v196 + 2) != v182)
                      goto LABEL_421;
LABEL_385:
                    v161 = v185;
                    if (v190[6] >= v196[6])
                      goto LABEL_427;
                  }
                }
              }
LABEL_335:
              if (v155-- <= 2)
                return result;
            }
          }
          v14 = (unint64_t)v13 >> 1;
          v15 = &v10[(unint64_t)v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_223F5246C(v15, v10, v220, a3);
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_11;
LABEL_10:
            if (sub_223F521EC(*a3, *(v10 - 1), *v10))
              goto LABEL_11;
            v81 = *v10;
            result = sub_223F521EC(*a3, *v10, *v220);
            if ((result & 1) != 0)
            {
              do
              {
                v82 = v10[1];
                ++v10;
                result = sub_223F521EC(*a3, v81, v82);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v83 = v10 + 1;
              do
              {
                v10 = v83;
                if (v83 >= a2)
                  break;
                ++v83;
                result = sub_223F521EC(*a3, v81, *v10);
              }
              while (!(_DWORD)result);
            }
            v84 = a2;
            if (v10 < a2)
            {
              v84 = a2;
              do
              {
                v85 = *--v84;
                result = sub_223F521EC(*a3, v81, v85);
              }
              while ((result & 1) != 0);
            }
            if (v10 < v84)
            {
              v86 = *a3;
              v87 = *v10;
              v88 = *v84;
              do
              {
                *v10 = v88;
                *v84 = v87;
                v89 = (int8x8_t)v86[1];
                if (!*(_QWORD *)&v89)
                  goto LABEL_475;
                v90 = (uint8x8_t)vcnt_s8(v89);
                v90.i16[0] = vaddlv_u8(v90);
                v91 = v90.u32[0];
                v92 = *(_QWORD *)&v89 - 1;
                v93 = *(_QWORD *)&v89 > v81;
                v94 = *v86;
                if (v90.u32[0] >= 2uLL)
                {
                  v95 = -1;
                }
                else
                {
                  v93 = 1;
                  v95 = *(_QWORD *)&v89 - 1;
                }
                v96 = v95 & v81;
                while (2)
                {
                  v97 = v96;
                  if (!v93)
                    v97 = v81 % *(_QWORD *)&v89;
                  v98 = *(float ***)(v94 + 8 * v97);
                  if (!v98)
                    goto LABEL_475;
                  v99 = *v98;
                  if (!*v98)
                    goto LABEL_475;
                  v100 = v10[1];
                  ++v10;
                  v87 = v100;
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v101 = *((_QWORD *)v99 + 1);
                      if (v101 == v81)
                      {
                        if (*((_QWORD *)v99 + 2) == v81)
                          goto LABEL_184;
                      }
                      else if ((v101 & v92) != v97)
                      {
                        goto LABEL_475;
                      }
                      v99 = *(float **)v99;
                      if (!v99)
                        goto LABEL_475;
                    }
                  }
                  while (1)
                  {
                    v103 = *((_QWORD *)v99 + 1);
                    if (v103 == v81)
                      break;
                    if (v103 >= *(_QWORD *)&v89)
                      v103 %= *(_QWORD *)&v89;
                    if (v103 != v97)
                      goto LABEL_475;
LABEL_187:
                    v99 = *(float **)v99;
                    if (!v99)
                      goto LABEL_475;
                  }
                  if (*((_QWORD *)v99 + 2) != v81)
                    goto LABEL_187;
LABEL_184:
                  if (v91 > 1)
                  {
                    v102 = v87;
                    if (*(_QWORD *)&v89 <= v87)
                      v102 = v87 % *(_QWORD *)&v89;
                  }
                  else
                  {
                    v102 = v87 & v92;
                  }
                  v104 = *(float ***)(v94 + 8 * v102);
                  if (!v104)
                    goto LABEL_475;
                  v105 = *v104;
                  if (!v105)
                    goto LABEL_475;
                  v106 = v99[6];
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v107 = *((_QWORD *)v105 + 1);
                      if (v107 == v87)
                      {
                        if (*((_QWORD *)v105 + 2) == v87)
                          goto LABEL_173;
                      }
                      else if ((v107 & v92) != v102)
                      {
                        goto LABEL_475;
                      }
                      v105 = *(float **)v105;
                      if (!v105)
                        goto LABEL_475;
                    }
                  }
                  while (2)
                  {
                    v108 = *((_QWORD *)v105 + 1);
                    if (v108 != v87)
                    {
                      if (v108 >= *(_QWORD *)&v89)
                        v108 %= *(_QWORD *)&v89;
                      if (v108 != v102)
                        goto LABEL_475;
LABEL_205:
                      v105 = *(float **)v105;
                      if (!v105)
                        goto LABEL_475;
                      continue;
                    }
                    break;
                  }
                  if (*((_QWORD *)v105 + 2) != v87)
                    goto LABEL_205;
LABEL_173:
                  if (v106 >= v105[6])
                    continue;
                  break;
                }
                while (2)
                {
                  v109 = v96;
                  if (!v93)
                    v109 = v81 % *(_QWORD *)&v89;
                  v110 = *(float ***)(v94 + 8 * v109);
                  if (!v110)
                    goto LABEL_475;
                  v111 = *v110;
                  if (!*v110)
                    goto LABEL_475;
                  v112 = *--v84;
                  v88 = v112;
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v113 = *((_QWORD *)v111 + 1);
                      if (v113 == v81)
                      {
                        if (*((_QWORD *)v111 + 2) == v81)
                          goto LABEL_222;
                      }
                      else if ((v113 & v92) != v109)
                      {
                        goto LABEL_475;
                      }
                      v111 = *(float **)v111;
                      if (!v111)
                        goto LABEL_475;
                    }
                  }
                  while (2)
                  {
                    v114 = *((_QWORD *)v111 + 1);
                    if (v114 != v81)
                    {
                      if (v114 >= *(_QWORD *)&v89)
                        v114 %= *(_QWORD *)&v89;
                      if (v114 != v109)
                        goto LABEL_475;
LABEL_225:
                      v111 = *(float **)v111;
                      if (!v111)
                        goto LABEL_475;
                      continue;
                    }
                    break;
                  }
                  if (*((_QWORD *)v111 + 2) != v81)
                    goto LABEL_225;
LABEL_222:
                  if (v91 > 1)
                  {
                    result = v88;
                    if (*(_QWORD *)&v89 <= v88)
                      result = v88 % *(_QWORD *)&v89;
                  }
                  else
                  {
                    result = v88 & v92;
                  }
                  v115 = *(float ***)(v94 + 8 * result);
                  if (!v115)
                    goto LABEL_475;
                  v116 = *v115;
                  if (!v116)
                    goto LABEL_475;
                  v117 = v111[6];
                  if (v91 < 2)
                  {
                    while (1)
                    {
                      v118 = *((_QWORD *)v116 + 1);
                      if (v118 == v88)
                      {
                        if (*((_QWORD *)v116 + 2) == v88)
                          goto LABEL_211;
                      }
                      else if ((v118 & v92) != result)
                      {
                        goto LABEL_475;
                      }
                      v116 = *(float **)v116;
                      if (!v116)
                        goto LABEL_475;
                    }
                  }
                  while (2)
                  {
                    v119 = *((_QWORD *)v116 + 1);
                    if (v119 != v88)
                    {
                      if (v119 >= *(_QWORD *)&v89)
                        v119 %= *(_QWORD *)&v89;
                      if (v119 != result)
                        goto LABEL_475;
LABEL_243:
                      v116 = *(float **)v116;
                      if (!v116)
                        goto LABEL_475;
                      continue;
                    }
                    break;
                  }
                  if (*((_QWORD *)v116 + 2) != v88)
                    goto LABEL_243;
LABEL_211:
                  if (v117 < v116[6])
                    continue;
                  break;
                }
              }
              while (v10 < v84);
            }
            v120 = v10 - 1;
            if (v10 - 1 != v11)
              *v11 = *v120;
            a5 = 0;
            *v120 = v81;
            continue;
          }
          sub_223F5246C(v10, v15, v220, a3);
          v16 = v14;
          sub_223F5246C(v10 + 1, &v10[v16 - 1], a2 - 2, a3);
          sub_223F5246C(v10 + 2, &v10[v16 + 1], a2 - 3, a3);
          sub_223F5246C(&v10[v16 - 1], v15, &v10[v16 + 1], a3);
          v17 = *v10;
          *v10 = v10[v16];
          v10[v16] = v17;
          --a4;
          if ((a5 & 1) == 0)
            goto LABEL_10;
LABEL_11:
          v18 = (int8x8_t)(*a3)[1];
          if (!*(_QWORD *)&v18)
            goto LABEL_475;
          v19 = *v10;
          v20 = (uint8x8_t)vcnt_s8(v18);
          v20.i16[0] = vaddlv_u8(v20);
          v21 = v20.u32[0];
          v22 = *(_QWORD *)&v18 - 1;
          v23 = **a3;
          v24 = v10;
          while (2)
          {
            v25 = v24;
            v27 = v24[1];
            ++v24;
            v26 = v27;
            if (v21 > 1)
            {
              v28 = v26;
              if (*(_QWORD *)&v18 <= v26)
                v28 = v26 % *(_QWORD *)&v18;
            }
            else
            {
              v28 = v26 & v22;
            }
            v29 = *(float ***)(v23 + 8 * v28);
            if (!v29)
              goto LABEL_475;
            v30 = *v29;
            if (!v30)
              goto LABEL_475;
            if (v21 < 2)
            {
              while (1)
              {
                v31 = *((_QWORD *)v30 + 1);
                if (v31 == v26)
                {
                  if (*((_QWORD *)v30 + 2) == v26)
                  {
                    v32 = v30[6];
                    v33 = (*(_QWORD *)&v18 - 1) & *v10;
                    goto LABEL_37;
                  }
                }
                else if ((v31 & v22) != v28)
                {
                  goto LABEL_475;
                }
                v30 = *(float **)v30;
                if (!v30)
                  goto LABEL_475;
              }
            }
            while (1)
            {
              v34 = *((_QWORD *)v30 + 1);
              if (v34 == v26)
                break;
              if (v34 >= *(_QWORD *)&v18)
                v34 %= *(_QWORD *)&v18;
              if (v34 != v28)
                goto LABEL_475;
LABEL_28:
              v30 = *(float **)v30;
              if (!v30)
                goto LABEL_475;
            }
            if (*((_QWORD *)v30 + 2) != v26)
              goto LABEL_28;
            v32 = v30[6];
            if (*(_QWORD *)&v18 <= v19)
              v33 = v19 % *(_QWORD *)&v18;
            else
              v33 = *v10;
LABEL_37:
            v35 = *(float ***)(v23 + 8 * v33);
            if (!v35)
              goto LABEL_475;
            v36 = *v35;
            if (!v36)
              goto LABEL_475;
            if (v21 < 2)
            {
              while (1)
              {
                v37 = *((_QWORD *)v36 + 1);
                if (v37 == v19)
                {
                  if (*((_QWORD *)v36 + 2) == v19)
                    goto LABEL_13;
                }
                else if ((v37 & v22) != v33)
                {
                  goto LABEL_475;
                }
                v36 = *(float **)v36;
                if (!v36)
                  goto LABEL_475;
              }
            }
            while (2)
            {
              v38 = *((_QWORD *)v36 + 1);
              if (v38 != v19)
              {
                if (v38 >= *(_QWORD *)&v18)
                  v38 %= *(_QWORD *)&v18;
                if (v38 != v33)
                  goto LABEL_475;
LABEL_47:
                v36 = *(float **)v36;
                if (!v36)
                  goto LABEL_475;
                continue;
              }
              break;
            }
            if (*((_QWORD *)v36 + 2) != v19)
              goto LABEL_47;
LABEL_13:
            if (v32 < v36[6])
              continue;
            break;
          }
          v39 = a2;
          v9 = v10;
          if (v25 == v10)
          {
            v39 = a2;
            do
            {
              if (v24 >= v39)
                break;
              v41 = *--v39;
            }
            while (!sub_223F521EC(*a3, v41, v19));
          }
          else
          {
            do
              v40 = *--v39;
            while (!sub_223F521EC(*a3, v40, v19));
          }
          if (v24 < v39)
          {
            v42 = *a3;
            v43 = *v24;
            v10 = v24;
            v44 = v39;
            v45 = *v39;
            while (1)
            {
              *v10 = v45;
              *v44 = v43;
              v46 = (int8x8_t)v42[1];
              if (!*(_QWORD *)&v46)
                goto LABEL_475;
              v47 = (uint8x8_t)vcnt_s8(v46);
              v47.i16[0] = vaddlv_u8(v47);
              v48 = v47.u32[0];
              v49 = *(_QWORD *)&v46 - 1;
              v50 = *v42;
              v51 = *(_QWORD *)&v46 <= v19 && v47.u32[0] >= 2uLL;
              v52 = !v51;
              while (2)
              {
                v53 = v10[1];
                ++v10;
                v43 = v53;
                if (v48 > 1)
                {
                  v54 = v43;
                  if (*(_QWORD *)&v46 <= v43)
                    v54 = v43 % *(_QWORD *)&v46;
                }
                else
                {
                  v54 = v43 & v49;
                }
                v55 = *(float ***)(v50 + 8 * v54);
                if (!v55)
                  goto LABEL_475;
                v56 = *v55;
                if (!v56)
                  goto LABEL_475;
                if (v48 < 2)
                {
                  while (1)
                  {
                    v57 = *((_QWORD *)v56 + 1);
                    if (v57 == v43)
                    {
                      if (*((_QWORD *)v56 + 2) == v43)
                      {
                        v58 = *(_QWORD *)&v46 - 1;
                        if (!v52)
                          goto LABEL_83;
LABEL_92:
                        v59 = v58 & v19;
                        goto LABEL_93;
                      }
                    }
                    else if ((v57 & v49) != v54)
                    {
                      goto LABEL_475;
                    }
                    v56 = *(float **)v56;
                    if (!v56)
                      goto LABEL_475;
                  }
                }
                while (1)
                {
                  v60 = *((_QWORD *)v56 + 1);
                  if (v60 == v43)
                    break;
                  if (v60 >= *(_QWORD *)&v46)
                    v60 %= *(_QWORD *)&v46;
                  if (v60 != v54)
                    goto LABEL_475;
LABEL_85:
                  v56 = *(float **)v56;
                  if (!v56)
                    goto LABEL_475;
                }
                if (*((_QWORD *)v56 + 2) != v43)
                  goto LABEL_85;
                v58 = -1;
                if (v52)
                  goto LABEL_92;
LABEL_83:
                v59 = v19 % *(_QWORD *)&v46;
LABEL_93:
                v61 = *(float ***)(v50 + 8 * v59);
                if (!v61)
                  goto LABEL_475;
                v62 = *v61;
                if (!v62)
                  goto LABEL_475;
                v63 = v56[6];
                if (v48 < 2)
                {
                  while (1)
                  {
                    v64 = *((_QWORD *)v62 + 1);
                    if (v64 == v19)
                    {
                      if (*((_QWORD *)v62 + 2) == v19)
                        goto LABEL_69;
                    }
                    else if ((v64 & v49) != v59)
                    {
                      goto LABEL_475;
                    }
                    v62 = *(float **)v62;
                    if (!v62)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v65 = *((_QWORD *)v62 + 1);
                  if (v65 != v19)
                  {
                    if (v65 >= *(_QWORD *)&v46)
                      v65 %= *(_QWORD *)&v46;
                    if (v65 != v59)
                      goto LABEL_475;
LABEL_103:
                    v62 = *(float **)v62;
                    if (!v62)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v62 + 2) != v19)
                  goto LABEL_103;
LABEL_69:
                if (v63 < v62[6])
                  continue;
                break;
              }
              while (2)
              {
                v66 = *--v44;
                v45 = v66;
                if (v48 > 1)
                {
                  v67 = v45;
                  if (*(_QWORD *)&v46 <= v45)
                    v67 = v45 % *(_QWORD *)&v46;
                }
                else
                {
                  v67 = v45 & v49;
                }
                v68 = *(float ***)(v50 + 8 * v67);
                if (!v68)
                  goto LABEL_475;
                v69 = *v68;
                if (!v69)
                  goto LABEL_475;
                if (v48 < 2)
                {
                  while (1)
                  {
                    v70 = *((_QWORD *)v69 + 1);
                    if (v70 == v45)
                    {
                      if (*((_QWORD *)v69 + 2) == v45)
                      {
                        v71 = *(_QWORD *)&v46 - 1;
                        if (!v52)
                          goto LABEL_123;
LABEL_132:
                        v72 = v71 & v19;
                        goto LABEL_133;
                      }
                    }
                    else if ((v70 & v49) != v67)
                    {
                      goto LABEL_475;
                    }
                    v69 = *(float **)v69;
                    if (!v69)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v73 = *((_QWORD *)v69 + 1);
                  if (v73 != v45)
                  {
                    if (v73 >= *(_QWORD *)&v46)
                      v73 %= *(_QWORD *)&v46;
                    if (v73 != v67)
                      goto LABEL_475;
LABEL_125:
                    v69 = *(float **)v69;
                    if (!v69)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v69 + 2) != v45)
                  goto LABEL_125;
                v71 = -1;
                if (v52)
                  goto LABEL_132;
LABEL_123:
                v72 = v19 % *(_QWORD *)&v46;
LABEL_133:
                v74 = *(float ***)(v50 + 8 * v72);
                if (!v74)
                  goto LABEL_475;
                v75 = *v74;
                if (!v75)
                  goto LABEL_475;
                v76 = v69[6];
                if (v48 < 2)
                {
                  while (1)
                  {
                    v77 = *((_QWORD *)v75 + 1);
                    if (v77 == v19)
                    {
                      if (*((_QWORD *)v75 + 2) == v19)
                        goto LABEL_109;
                    }
                    else if ((v77 & v49) != v72)
                    {
                      goto LABEL_475;
                    }
                    v75 = *(float **)v75;
                    if (!v75)
                      goto LABEL_475;
                  }
                }
                while (2)
                {
                  v78 = *((_QWORD *)v75 + 1);
                  if (v78 != v19)
                  {
                    if (v78 >= *(_QWORD *)&v46)
                      v78 %= *(_QWORD *)&v46;
                    if (v78 != v72)
                      goto LABEL_475;
LABEL_143:
                    v75 = *(float **)v75;
                    if (!v75)
                      goto LABEL_475;
                    continue;
                  }
                  break;
                }
                if (*((_QWORD *)v75 + 2) != v19)
                  goto LABEL_143;
LABEL_109:
                if (v76 >= v75[6])
                  continue;
                break;
              }
              if (v10 >= v44)
                goto LABEL_150;
            }
          }
          v10 = v24;
LABEL_150:
          v79 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v79;
          *v79 = v19;
          if (v24 < v39)
          {
LABEL_155:
            result = sub_223F50D20(v9, v10 - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          v80 = sub_223F5256C(v9, v10 - 1, a3);
          result = sub_223F5256C(v10, a2, a3);
          if (!(_DWORD)result)
          {
            if (!v80)
              goto LABEL_155;
            continue;
          }
          a2 = v10 - 1;
          if (v80)
            return result;
          goto LABEL_2;
        }
        v122 = v10 + 1;
        v124 = v10 == a2 || v122 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v124)
          {
            v125 = v10;
            do
            {
              v127 = v122;
              result = sub_223F521EC(*a3, v125[1], *v125);
              if (!(_DWORD)result)
                goto LABEL_272;
              v128 = *v127;
              v129 = *a3;
              v126 = v127;
              v130 = *v125;
LABEL_276:
              *v126 = v130;
              if (v125 != v10)
              {
                v131 = (int8x8_t)v129[1];
                if (!*(_QWORD *)&v131)
                  goto LABEL_475;
                v126 = v125;
                v132 = (uint8x8_t)vcnt_s8(v131);
                v132.i16[0] = vaddlv_u8(v132);
                if (v132.u32[0] > 1uLL)
                {
                  v133 = v128;
                  if (*(_QWORD *)&v131 <= v128)
                    v133 = v128 % *(_QWORD *)&v131;
                }
                else
                {
                  v133 = (*(_QWORD *)&v131 - 1) & v128;
                }
                v134 = *(float ***)(*v129 + 8 * v133);
                if (!v134)
                  goto LABEL_475;
                v135 = *v134;
                if (!*v134)
                  goto LABEL_475;
                --v125;
                v130 = *(v126 - 1);
                v136 = *(_QWORD *)&v131 - 1;
                if (v132.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v137 = *((_QWORD *)v135 + 1);
                    if (v137 == v128)
                    {
                      result = *((_QWORD *)v135 + 2);
                      if (result == v128)
                        goto LABEL_290;
                    }
                    else if ((v137 & v136) != v133)
                    {
                      goto LABEL_475;
                    }
                    v135 = *(float **)v135;
                    if (!v135)
                      goto LABEL_475;
                  }
                }
                while (1)
                {
                  v139 = *((_QWORD *)v135 + 1);
                  if (v139 == v128)
                  {
                    result = *((_QWORD *)v135 + 2);
                    if (result == v128)
                    {
LABEL_290:
                      if (v132.u32[0] > 1uLL)
                      {
                        v138 = *(v126 - 1);
                        if (*(_QWORD *)&v131 <= v130)
                          v138 = v130 % *(_QWORD *)&v131;
                      }
                      else
                      {
                        v138 = v136 & v130;
                      }
                      v140 = *(float ***)(*v129 + 8 * v138);
                      if (!v140)
                        goto LABEL_475;
                      v141 = *v140;
                      if (!v141)
                        goto LABEL_475;
                      if (v132.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v142 = *((_QWORD *)v141 + 1);
                          if (v142 == v130)
                          {
                            if (*((_QWORD *)v141 + 2) == v130)
                              goto LABEL_275;
                          }
                          else if ((v142 & v136) != v138)
                          {
                            goto LABEL_475;
                          }
                          v141 = *(float **)v141;
                          if (!v141)
                            goto LABEL_475;
                        }
                      }
                      while (2)
                      {
                        v143 = *((_QWORD *)v141 + 1);
                        if (v143 != v130)
                        {
                          if (v143 >= *(_QWORD *)&v131)
                            v143 %= *(_QWORD *)&v131;
                          if (v143 != v138)
                            goto LABEL_475;
LABEL_311:
                          v141 = *(float **)v141;
                          if (!v141)
                            goto LABEL_475;
                          continue;
                        }
                        break;
                      }
                      if (*((_QWORD *)v141 + 2) != v130)
                        goto LABEL_311;
LABEL_275:
                      if (v135[6] >= v141[6])
                        goto LABEL_271;
                      goto LABEL_276;
                    }
                  }
                  else
                  {
                    if (v139 >= *(_QWORD *)&v131)
                      v139 %= *(_QWORD *)&v131;
                    if (v139 != v133)
                      goto LABEL_475;
                  }
                  v135 = *(float **)v135;
                  if (!v135)
                    goto LABEL_475;
                }
              }
              v126 = v10;
LABEL_271:
              *v126 = v128;
LABEL_272:
              v122 = v127 + 1;
              v125 = v127;
            }
            while (v127 + 1 != a2);
          }
          return result;
        }
        if (v124)
          return result;
        while (2)
        {
          v199 = v122;
          result = sub_223F521EC(*a3, v11[1], *v11);
          if (!(_DWORD)result)
            goto LABEL_431;
          v200 = *v199;
          v201 = *a3;
          v202 = v199;
          v203 = *v11;
          while (2)
          {
            *v202 = v203;
            v204 = (int8x8_t)v201[1];
            if (!*(_QWORD *)&v204)
              goto LABEL_475;
            v202 = v11;
            v205 = (uint8x8_t)vcnt_s8(v204);
            v205.i16[0] = vaddlv_u8(v205);
            if (v205.u32[0] > 1uLL)
            {
              v206 = v200;
              if (*(_QWORD *)&v204 <= v200)
                v206 = v200 % *(_QWORD *)&v204;
            }
            else
            {
              v206 = (*(_QWORD *)&v204 - 1) & v200;
            }
            v207 = *(float ***)(*v201 + 8 * v206);
            if (!v207 || (v208 = *v207) == 0)
LABEL_475:
              sub_223198218("unordered_map::at: key not found");
            --v11;
            v203 = *(v202 - 1);
            v209 = *(_QWORD *)&v204 - 1;
            if (v205.u32[0] < 2uLL)
            {
              while (1)
              {
                v210 = *((_QWORD *)v208 + 1);
                if (v210 == v200)
                {
                  result = *((_QWORD *)v208 + 2);
                  if (result == v200)
                    goto LABEL_448;
                }
                else if ((v210 & v209) != v206)
                {
                  goto LABEL_475;
                }
                v208 = *(float **)v208;
                if (!v208)
                  goto LABEL_475;
              }
            }
            while (1)
            {
              v212 = *((_QWORD *)v208 + 1);
              if (v212 == v200)
                break;
              if (v212 >= *(_QWORD *)&v204)
                v212 %= *(_QWORD *)&v204;
              if (v212 != v206)
                goto LABEL_475;
LABEL_451:
              v208 = *(float **)v208;
              if (!v208)
                goto LABEL_475;
            }
            result = *((_QWORD *)v208 + 2);
            if (result != v200)
              goto LABEL_451;
LABEL_448:
            if (v205.u32[0] > 1uLL)
            {
              v211 = *(v202 - 1);
              if (*(_QWORD *)&v204 <= v203)
                v211 = v203 % *(_QWORD *)&v204;
            }
            else
            {
              v211 = v209 & v203;
            }
            v213 = *(float ***)(*v201 + 8 * v211);
            if (!v213)
              goto LABEL_475;
            v214 = *v213;
            if (!v214)
              goto LABEL_475;
            if (v205.u32[0] < 2uLL)
            {
              while (1)
              {
                v215 = *((_QWORD *)v214 + 1);
                if (v215 == v203)
                {
                  if (*((_QWORD *)v214 + 2) == v203)
                    goto LABEL_434;
                }
                else if ((v215 & v209) != v211)
                {
                  goto LABEL_475;
                }
                v214 = *(float **)v214;
                if (!v214)
                  goto LABEL_475;
              }
            }
            while (1)
            {
              v216 = *((_QWORD *)v214 + 1);
              if (v216 == v203)
                break;
              if (v216 >= *(_QWORD *)&v204)
                v216 %= *(_QWORD *)&v204;
              if (v216 != v211)
                goto LABEL_475;
LABEL_469:
              v214 = *(float **)v214;
              if (!v214)
                goto LABEL_475;
            }
            if (*((_QWORD *)v214 + 2) != v203)
              goto LABEL_469;
LABEL_434:
            if (v208[6] < v214[6])
              continue;
            break;
          }
          *v202 = v200;
LABEL_431:
          v122 = v199 + 1;
          v11 = v199;
          if (v199 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

BOOL sub_223F521EC(_QWORD *a1, unint64_t a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unint64_t v5;
  float **v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float **v12;
  float *v13;
  uint64_t v14;
  unint64_t v16;

  v3 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v3)
    goto LABEL_41;
  v4 = (uint8x8_t)vcnt_s8(v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (*(_QWORD *)&v3 <= a2)
      v5 = a2 % *(_QWORD *)&v3;
  }
  else
  {
    v5 = (*(_QWORD *)&v3 - 1) & a2;
  }
  v6 = *(float ***)(*a1 + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
LABEL_41:
    sub_223198218("unordered_map::at: key not found");
  v8 = *(_QWORD *)&v3 - 1;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = *((_QWORD *)v7 + 1);
      if (v9 == a2)
      {
        if (*((_QWORD *)v7 + 2) == a2)
          goto LABEL_14;
      }
      else if ((v9 & v8) != v5)
      {
        goto LABEL_41;
      }
      v7 = *(float **)v7;
      if (!v7)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v11 = *((_QWORD *)v7 + 1);
    if (v11 == a2)
      break;
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
    if (v11 != v5)
      goto LABEL_41;
LABEL_17:
    v7 = *(float **)v7;
    if (!v7)
      goto LABEL_41;
  }
  if (*((_QWORD *)v7 + 2) != a2)
    goto LABEL_17;
LABEL_14:
  if (v4.u32[0] > 1uLL)
  {
    v10 = a3;
    if (*(_QWORD *)&v3 <= a3)
      v10 = a3 % *(_QWORD *)&v3;
  }
  else
  {
    v10 = v8 & a3;
  }
  v12 = *(float ***)(*a1 + 8 * v10);
  if (!v12)
    goto LABEL_41;
  v13 = *v12;
  if (!v13)
    goto LABEL_41;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v14 = *((_QWORD *)v13 + 1);
      if (v14 == a3)
      {
        if (*((_QWORD *)v13 + 2) == a3)
          return v7[6] < v13[6];
      }
      else if ((v14 & v8) != v10)
      {
        goto LABEL_41;
      }
      v13 = *(float **)v13;
      if (!v13)
        goto LABEL_41;
    }
  }
  while (1)
  {
    v16 = *((_QWORD *)v13 + 1);
    if (v16 == a3)
      break;
    if (v16 >= *(_QWORD *)&v3)
      v16 %= *(_QWORD *)&v3;
    if (v16 != v10)
      goto LABEL_41;
LABEL_35:
    v13 = *(float **)v13;
    if (!v13)
      goto LABEL_41;
  }
  if (*((_QWORD *)v13 + 2) != a3)
    goto LABEL_35;
  return v7[6] < v13[6];
}

BOOL sub_223F52394(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, _QWORD **a6)
{
  _BOOL8 result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_223F5274C(a1, a2, a3, a4, a6);
  result = sub_223F521EC(*a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_223F521EC(*a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_223F521EC(*a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_223F521EC(*a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL sub_223F5246C(unint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD **a4)
{
  BOOL v8;
  _BOOL8 result;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v8 = sub_223F521EC(*a4, *a2, *a1);
  result = sub_223F521EC(*a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_223F521EC(*a4, *a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = sub_223F521EC(*a4, *a2, *a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_223F5256C(unint64_t *a1, unint64_t *a2, _QWORD **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_223F521EC(*a3, *(a2 - 1), *a1))
      {
        v15 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v15;
      }
      return 1;
    case 3:
      sub_223F5246C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_223F5274C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_223F52394(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_223F5246C(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (!sub_223F521EC(*a3, *v9, *v8))
  {
LABEL_11:
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
  v12 = *v9;
  v13 = v10;
  do
  {
    v14 = (char *)a1 + v13;
    *(unint64_t *)((char *)a1 + v13 + 24) = *(unint64_t *)((char *)a1 + v13 + 16);
    if (v13 == -16)
    {
      *a1 = v12;
      if (++v11 != 8)
        goto LABEL_11;
      return v9 + 1 == a2;
    }
    v13 -= 8;
  }
  while (sub_223F521EC(*a3, v12, *((_QWORD *)v14 + 1)));
  *(unint64_t *)((char *)a1 + v13 + 24) = v12;
  if (++v11 != 8)
    goto LABEL_11;
  return v9 + 1 == a2;
}

BOOL sub_223F5274C(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, _QWORD **a5)
{
  _BOOL8 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  sub_223F5246C(a1, a2, a3, a5);
  result = sub_223F521EC(*a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_223F521EC(*a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_223F521EC(*a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

void sub_223F527FC(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  __int128 v12;

  v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      sub_22316E078();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 80 * a2;
    v6 = (char *)operator new(80 * a2);
    v7 = &v6[80 * ((v4 - v2) / 80)];
    *(_QWORD *)&v12 = v7;
    *((_QWORD *)&v12 + 1) = &v6[v5];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v6[v5];
    }
    else
    {
      v8 = 0;
      do
      {
        sub_223F52A1C((uint64_t)&v7[v8 - 80], (uint64_t *)&v4[v8 - 80]);
        v8 -= 80;
      }
      while (&v4[v8] != v2);
      v2 = *(char **)a1;
      v9 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8];
      *(_OWORD *)(a1 + 8) = v12;
      while (v9 != v2)
      {
        v10 = (void *)*((_QWORD *)v9 - 3);
        if (v10)
        {
          *((_QWORD *)v9 - 2) = v10;
          operator delete(v10);
        }
        v11 = (void *)*((_QWORD *)v9 - 6);
        if (v11)
        {
          *((_QWORD *)v9 - 5) = v11;
          operator delete(v11);
        }
        v9 -= 80;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_223F529A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_223F52A1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v5 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(_QWORD *)(a1 + 12) = v5;
  LOBYTE(v5) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)a2[4];
  v6 = (_BYTE *)a2[5];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_22367C394();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 48) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 40) = v10;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)a2[7];
  v11 = (_BYTE *)a2[8];
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_22367C394();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 72) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 64) = v15;
  }
  return a1;
}

void sub_223F52B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_223F52B4C(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  __int128 v19;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_22316E078();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v4;
  if (v5 > 0x333333333333333)
    sub_223174E94();
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = &v8[80 * v3];
  v10 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v9 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v9 + 5) = *(_DWORD *)(a2 + 20);
  v9[24] = *(_BYTE *)(a2 + 24);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = v9 + 80;
  *(_QWORD *)&v19 = v9 + 80;
  *((_QWORD *)&v19 + 1) = v10;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      sub_223F52A1C((uint64_t)&v9[v14 - 80], (uint64_t *)&v12[v14 - 80]);
      v14 -= 80;
    }
    while (&v12[v14] != v13);
    v12 = *a1;
    v15 = a1[1];
    *a1 = &v9[v14];
    *(_OWORD *)(a1 + 1) = v19;
    v11 = (char *)v19;
    while (v15 != v12)
    {
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      v17 = (void *)*((_QWORD *)v15 - 6);
      if (v17)
      {
        *((_QWORD *)v15 - 5) = v17;
        operator delete(v17);
      }
      v15 -= 80;
    }
  }
  if (v12)
    operator delete(v12);
  return v11;
}

void sub_223F52D7C()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223F52D90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC643B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223F52DC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC643B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223F52DE8()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_223F4F9F0(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_2540CE128);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE128))
    {
      qword_2540CE120 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_HorizontalDetect");
      __cxa_guard_release(&qword_2540CE128);
    }
    v1 = qword_2540CE120;
    if (*(_BYTE *)(qword_2540CE120 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_223F52EB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE128);
  _Unwind_Resume(a1);
}

uint64_t sub_223F52ECC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPlaneDetector6"
                     "detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPla"
                                "neDetector6detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPlaneDetector6detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection23HorizontalPlaneDetector6detectENS7_22PointsAndVariancesViewENS7_21LinesAndVariancesViewEE3$_2JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F52F38()
{
  return &unk_24EC64410;
}

float32_t sub_223F52F44(uint64_t a1, float32x4_t a2, double a3, int8x16_t a4, float32x4_t a5, double a6, float32x2_t a7)
{
  int8x16_t v7;
  float v8;
  int8x16_t v9;
  int8x16_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int8x16_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float v25;

  a2.i32[0] = *(_DWORD *)(a1 + 20);
  a4.i64[0] = *(_QWORD *)(a1 + 12);
  v7 = a4;
  a7.i32[0] = *(_DWORD *)(a1 + 8);
  *(float32x2_t *)a5.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a4.i8, *(float32x2_t *)a1), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1, 1), *(float32x2_t *)a4.i8, 1), a7, *(float32x2_t *)a2.f32);
  a2.i32[0] = 0;
  v8 = -a5.f32[0];
  if (a5.f32[0] <= 0.0)
    v8 = a5.f32[0];
  if (fabsf(a5.f32[0]) > 0.000001 && v8 != 0.0)
  {
    v9 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(a5, a2), 0);
    v7.i32[2] = *(_DWORD *)(a1 + 20);
    v10 = vbslq_s8(v9, (int8x16_t)vnegq_f32((float32x4_t)v7), v7);
    v11 = fabsf(*(float *)&v10.i32[2]);
    if (v11 == 1.0 || (v11 <= 1.0 ? (v12 = 1.0 - v11) : (v12 = v11 + -1.0), v12 <= 0.000001))
    {
      a2.i32[0] = 1127481344;
    }
    else
    {
      if (fabsf(*(float *)v10.i32) <= fabsf(*(float *)&v10.i32[1]))
      {
        v15 = (float)((float)(v8 - *(float *)v10.i32) - *(float *)&v10.i32[2]) / *(float *)&v10.i32[1];
        v16 = -1.0;
        v13 = 1.0;
        v14 = (float)((float)(v8 + *(float *)v10.i32) - *(float *)&v10.i32[2]) / *(float *)&v10.i32[1];
      }
      else
      {
        v13 = (float)((float)(v8 - *(float *)&v10.i32[1]) - *(float *)&v10.i32[2]) / *(float *)v10.i32;
        v14 = -1.0;
        v15 = 1.0;
        v16 = (float)((float)(v8 + *(float *)&v10.i32[1]) - *(float *)&v10.i32[2]) / *(float *)v10.i32;
      }
      __asm { FMOV            V7.4S, #1.0 }
      v20.i64[1] = _Q7.i64[1];
      v20.i64[0] = __PAIR64__(LODWORD(v15), LODWORD(v13));
      _Q7.i64[0] = __PAIR64__(LODWORD(v14), LODWORD(v16));
      v21 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v20, v20, 0xCuLL), v20, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q7, (int32x4_t)_Q7), _Q7, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(_Q7, _Q7, 0xCuLL), _Q7, 8uLL));
      v23 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1);
      v22 = (float32x2_t)vextq_s8(v21, v21, 8uLL).u64[0];
      v23.f32[0] = 1.0
                 / sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v21.i8), v23, *(float32x2_t *)v21.i8, 1), v22, v22).f32[0]);
      v24 = vmulq_n_f32((float32x4_t)v21, v23.f32[0]);
      v25 = -1.0;
      if (v24.f32[2] >= 0.0)
        v25 = 1.0;
      _VF = (float)(v8 / *(float *)&v10.i32[2]) >= 1.0 || *(float *)&v10.i32[2] == 0.0;
      *(float *)v9.i32 = -v25;
      if (_VF)
        *(float *)v9.i32 = v25;
      a2.f32[0] = acosf(vmla_f32(vmla_lane_f32(vmul_f32(vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v9.i8), *(float32x2_t *)v10.i8), vmul_f32(vmul_lane_f32(v23, *(float32x2_t *)v21.i8, 1), *(float32x2_t *)v9.i8), *(float32x2_t *)v10.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL), vmul_f32(vmul_f32(v22, v23), *(float32x2_t *)v9.i8)).f32[0])* 57.296;
    }
  }
  return a2.f32[0];
}

uint64_t sub_223F53124(uint64_t a1, int a2)
{
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t i;
  int v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v4 = (_DWORD *)operator new();
  *v4 = a2;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = sub_223F56A60;
  v5 = 5489;
  *(_DWORD *)(a1 + 16) = 5489;
  v6 = 1;
  for (i = 5; i != 628; ++i)
  {
    v8 = 1812433253 * (v5 ^ (v5 >> 30));
    v5 = v8 + v6;
    *(_DWORD *)(a1 + 4 * i) = i + v8 - 4;
    ++v6;
  }
  *(_QWORD *)(a1 + 2512) = 0;
  v9 = (std::__shared_weak_count *)operator new(0x28uLL);
  v10 = v9;
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v9[1].__shared_owners_) = 5489;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2520) = &off_24EC7A6B0;
  *(_QWORD *)(a1 + 2528) = v9 + 1;
  *(_QWORD *)(a1 + 2536) = v9;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return a1;
}

void sub_223F5329C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  MEMORY[0x227684CE8](v2, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

void sub_223F532C4(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, float32x2_t *a6@<X5>, uint64_t a7@<X8>)
{
  _BYTE *v12;
  _BYTE *v13;
  void *__p;
  _BYTE *v15;
  void *v16;
  _BYTE *v17;
  __int128 v18;
  uint64_t v19;
  void *v20;
  _BYTE *v21;

  v18 = *(_OWORD *)a1;
  v19 = *(_QWORD *)(a1 + 16);
  sub_223F53460((uint64_t)&v20, &v18, a2);
  v12 = v20;
  if (v20 != v21)
  {
    sub_223F56C64((v21 - (_BYTE *)v20) >> 3, v20, a3, (uint64_t)a4, a5, (float32x2_t **)&v16, 5.0);
    v13 = v16;
    if (v16 == v17)
    {
      *(_QWORD *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_QWORD *)(a7 + 16) = 0;
      if (v13)
      {
LABEL_6:
        v17 = v13;
        operator delete(v13);
      }
    }
    else
    {
      sub_223F2B420((v17 - (_BYTE *)v16) >> 3, (uint64_t)v16, a4, a6, (uint64_t)a3, (uint64_t)&__p);
      sub_223F2C4C0((v15 - (_BYTE *)__p) >> 3, (char *)__p, (char **)a7, 1.0);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
      v13 = v16;
      if (v16)
        goto LABEL_6;
    }
    v12 = v20;
    if (!v20)
      return;
    goto LABEL_8;
  }
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  if (v12)
  {
LABEL_8:
    v21 = v12;
    operator delete(v12);
  }
}

void sub_223F533EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  void *v20;
  void *v21;

  if (__p)
  {
    operator delete(__p);
    v20 = a12;
    if (!a12)
    {
LABEL_3:
      v21 = a18;
      if (!a18)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v20 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v20);
  v21 = a18;
  if (!a18)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v21);
  _Unwind_Resume(exception_object);
}

void sub_223F53460(uint64_t a1, __int128 *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  uint32x2_t *v6;
  uint32x2_t *v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  BOOL v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  unsigned __int8 *i;
  char *v20;
  uint32x2_t *v21;
  void *v22;
  float v23;
  float *v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;
  char *v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  unsigned __int8 v46;
  void *__p;
  char *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  char *v53;
  void *v54[2];
  void *v55[2];
  int v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)v55 = 0u;
  v56 = 1065353216;
  v50 = *a2;
  v51 = *((_QWORD *)a2 + 2);
  sub_223FAFFB4((uint64_t *)&v50, a3, (uint64_t)v54, 1, (char **)&v52);
  v5 = (char *)v52;
  v4 = v53;
  if (v52 == v53)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v5)
      goto LABEL_45;
  }
  else
  {
    v6 = *(uint32x2_t **)v52;
    v7 = (uint32x2_t *)*((_QWORD *)v52 + 1);
    v8 = **(_DWORD **)v52;
    v9 = v7[-1].u32[0];
    v10 = v9 - v8;
    v11 = v8 >= v9;
    v12 = v8 - v9;
    if (v12 == 0 || !v11)
      v12 = v10;
    if (v12)
      goto LABEL_8;
    v13 = v6->u32[1];
    v14 = v7[-1].u32[1];
    v15 = v14 - v13;
    v11 = v13 >= v14;
    v16 = v13 - v14;
    if (v16 == 0 || !v11)
      v16 = v15;
    if (v16)
    {
LABEL_8:
      if ((unint64_t)((char *)v7 - (char *)v6) < 0x18)
        goto LABEL_9;
    }
    else if ((unint64_t)((char *)v7 - (char *)v6) < 0x20)
    {
LABEL_9:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      if (v4 == v5)
        goto LABEL_51;
      goto LABEL_46;
    }
    sub_223F56400((void ***)&v57, v6, v7);
    __p = operator new(0x18uLL);
    v49 = (char *)__p + 24;
    v48 = (char *)sub_2236B97AC((uint64_t)&v49, (uint64_t)&v57, (uint64_t)&v59, __p);
    if ((_QWORD)v57)
    {
      *((_QWORD *)&v57 + 1) = v57;
      operator delete((void *)v57);
    }
    if (v55[1])
    {
      v46 = 0;
      *(_QWORD *)&v57 = &v46;
      v17 = sub_223F564D4((uint64_t)v54, &v46, (uint64_t)&unk_2245BA939, (_BYTE **)&v57);
      v18 = (unsigned __int8 *)v17[3];
      for (i = (unsigned __int8 *)v17[4]; v18 != i; ++v18)
      {
        v20 = (char *)v52 + 24 * *v18;
        v21 = (uint32x2_t *)*((_QWORD *)v20 + 1);
        if ((unint64_t)v21 - *(_QWORD *)v20 >= 0x18)
        {
          sub_223F56400((void ***)&v57, *(uint32x2_t **)v20, v21);
          v22 = (void *)v57;
          v23 = 0.0;
          if (*((_QWORD *)&v57 + 1) - (_QWORD)v57 >= 0x18uLL)
          {
            v24 = (float *)(v57 + 12);
            v25 = 0.0;
            v26 = ((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3) - 1;
            v27 = *(float *)(v57 + 4);
            v28 = *(float *)v57;
            do
            {
              v29 = *v24;
              v30 = v25 - (float)(v28 * *v24);
              v28 = *(v24 - 1);
              v25 = v30 + (float)(v27 * v28);
              v24 += 2;
              v27 = v29;
              --v26;
            }
            while (v26);
            v23 = (float)((float)(v25
                                - (float)(*(float *)(v57 + 4)
                                        * *(float *)(v57 + 8 * (((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3) - 1))))
                        + (float)(*(float *)v57
                                * *(float *)(v57 + 8 * (((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3) - 1) + 4)))
                * 0.5;
          }
          if (fabsf(v23) >= 10.0)
          {
            v31 = v48;
            if (v48 >= v49)
            {
              v32 = sub_2236ADCEC((char **)&__p, (uint64_t)&v57);
              v22 = (void *)v57;
            }
            else
            {
              v22 = 0;
              *(_QWORD *)v48 = 0;
              *((_QWORD *)v31 + 1) = 0;
              *((_QWORD *)v31 + 2) = 0;
              *(_OWORD *)v31 = v57;
              *((_QWORD *)v31 + 2) = v58;
              v57 = 0uLL;
              v58 = 0;
              v32 = v31 + 24;
            }
            v48 = v32;
          }
          if (v22)
          {
            *((_QWORD *)&v57 + 1) = v22;
            operator delete(v22);
          }
        }
      }
    }
    if (v48 - (_BYTE *)__p == 24)
    {
      sub_223F2C4C0((uint64_t)(*((_QWORD *)__p + 1) - *(_QWORD *)__p) >> 3, *(char **)__p, (char **)a1, 1.0);
    }
    else
    {
      sub_223F2C004((void *)(0xAAAAAAAAAAAAAAABLL * ((v48 - (_BYTE *)__p) >> 3)), (const void **)__p, (unint64_t *)&v57);
      sub_223F2C4C0((uint64_t)(*((_QWORD *)&v57 + 1) - v57) >> 3, (char *)v57, (char **)a1, 1.0);
      if ((_QWORD)v57)
      {
        *((_QWORD *)&v57 + 1) = v57;
        operator delete((void *)v57);
      }
    }
    v33 = (char *)__p;
    if (__p)
    {
      v34 = v48;
      v35 = __p;
      if (v48 != __p)
      {
        v36 = v48;
        do
        {
          v38 = (void *)*((_QWORD *)v36 - 3);
          v36 -= 24;
          v37 = v38;
          if (v38)
          {
            *((_QWORD *)v34 - 2) = v37;
            operator delete(v37);
          }
          v34 = v36;
        }
        while (v36 != v33);
        v35 = __p;
      }
      v48 = v33;
      operator delete(v35);
    }
    v5 = (char *)v52;
    if (v52)
    {
LABEL_45:
      v4 = v53;
      if (v53 == v5)
      {
LABEL_51:
        v53 = v5;
        operator delete(v4);
        goto LABEL_52;
      }
LABEL_46:
      v39 = v4;
      do
      {
        v41 = (void *)*((_QWORD *)v39 - 3);
        v39 -= 24;
        v40 = v41;
        if (v41)
        {
          *((_QWORD *)v4 - 2) = v40;
          operator delete(v40);
        }
        v4 = v39;
      }
      while (v39 != v5);
      v4 = (char *)v52;
      goto LABEL_51;
    }
  }
LABEL_52:
  v42 = v55[0];
  if (v55[0])
  {
    do
    {
      v44 = (_QWORD *)*v42;
      v45 = (void *)v42[3];
      if (v45)
      {
        v42[4] = v45;
        operator delete(v45);
      }
      operator delete(v42);
      v42 = v44;
    }
    while (v44);
  }
  v43 = v54[0];
  v54[0] = 0;
  if (v43)
    operator delete(v43);
}

void sub_223F5388C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, void *);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v5 = *(void **)(v3 - 96);
  if (v5)
  {
    *(_QWORD *)(v2 + 8) = v5;
    operator delete(v5);
  }
  sub_22317C838((void **)va);
  sub_22317C838((void **)va1);
  sub_223EB8208((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_223F53988(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, float32x4_t *a6@<X5>, float32x2_t *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, _QWORD *a10, char a11)
{
  unsigned __int8 v15;
  uint64_t v16;
  size_t v17;
  int8x16_t *v18;
  unint64_t v19;
  int8x16_t *v20;
  unint64_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  int8x8_t v28;
  int8x8_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int8 *v32;
  float32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  char *v37;
  uint64_t *v38;
  float32x4_t *v39;
  _DWORD *v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  float32x4_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x2_t *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  char *v80;
  int64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  _QWORD *v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  float32x4_t *v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  float32x4_t *v107;
  uint64_t v108;
  float32x4_t v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t *v113;
  int8x16_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float32x2_t v118;
  double *v119;
  double v120;
  double v121;
  uint64_t v122;
  double v123;
  double v124;
  BOOL v125;
  uint64_t v126;
  float32x2_t *v127;
  float *v128;
  float *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  float v140;
  float v141;
  unint64_t v142;
  float v143;
  float v145;
  BOOL v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  int64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  double *v165;
  unint64_t v166;
  char *v167;
  _BYTE *v168;
  char *v169;
  unint64_t v170;
  uint64_t v171;
  __int32 *v172;
  uint64_t v173;
  void *v174;
  unint64_t v175;
  void *v176;
  _BYTE *v177;
  float32x2_t v178;
  int8x16_t v179;
  float32x4_t v180;
  double v181;
  float32x2_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x2_t v185;
  float32x4_t v186;
  float32x4_t v187;
  double v188;
  int8x16_t v189;
  int8x16_t v190;
  float32x4_t v191;
  int32x4_t v192;
  float32x2_t v193;
  float32x2_t v194;
  int8x16_t v195;
  float32x4_t v196;
  float32x2_t v197;
  float32x4_t v198;
  _BYTE *v199;
  void *v200;
  void *v201;
  void *v202;
  float32x4_t v203;
  _QWORD *v204;
  _BYTE *v205;
  _QWORD *v206;
  unint64_t v207;
  _BYTE *v208;
  uint64_t v209;
  unint64_t *v210;
  int v211;
  float v212;
  uint64_t v213;
  unsigned int v214;
  void *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  int8x16_t v222;
  float32x2_t v223;
  float32x2_t v224;
  float32x2_t v225;
  double v226;
  unint64_t v227;
  float v228;
  float v229;
  float32x2_t v230;
  unint64_t *v231;
  unint64_t v232;
  char *v233;
  int8x16_t v234;
  int8x16_t v235;
  float32x2_t v236;
  float v237;
  float32x2_t v238;
  char *v240;
  int8x16_t v241;
  float32x2_t v242;
  float32x2_t v243;
  _BYTE *v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  size_t v248;
  _BYTE *v249;
  char *v250;
  unint64_t v251;
  char *v252;
  char *v253;
  _QWORD *v254;
  float32x2_t v255;
  char *v256;
  unint64_t *v257;
  unint64_t v258;
  uint64_t v259;
  int8x16_t v260;
  int8x16_t v261;
  float32x2_t v262;
  float32x2_t v263;
  float32x2_t v264;
  uint64_t v266;
  int8x16_t v267;
  float32x2_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _BYTE *v273;
  float32x2_t *v274;
  int64_t v275;
  unint64_t v276;
  char *v277;
  float32x2_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int8x16_t *v282;
  int8x16_t *v283;
  uint64_t v284;
  float v285;
  int8x16_t v286;
  float v287;
  float32x2_t v288;
  int32x4_t v289;
  float32x2_t v290;
  int8x16_t v291;
  float32x2_t v292;
  float32x2_t v293;
  float32x4_t v294;
  float32x2_t v295;
  float32x2_t v296;
  float32x4_t v297;
  int8x16_t v298;
  int8x16_t v299;
  void *v300;
  _OWORD *v301;
  __int128 *v302;
  unint64_t v303;
  __int128 v304;
  _QWORD *v305;
  uint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  char *v309;
  char v310;
  float *v311;
  float v312;
  double *v313;
  float v314;
  void *v315;
  uint64_t v316;
  char *v317;
  size_t v318;
  _OWORD *v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  float64x2_t v328;
  float64x2_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  void *v335;
  void *v336;
  _QWORD *v337;
  _QWORD *v338;
  void *v339;
  _QWORD *v340;
  uint64_t v341;
  float32x2_t *v342;
  void *v343;
  unint64_t v344;
  unint64_t v345;
  int v346;
  float32x4_t v347;
  uint64_t v350;
  uint64_t v351;
  double *v352;
  double *v353;
  float32x2_t v354;
  float32x2_t v355;
  float32x2_t v357;
  char v358;
  float32x2_t v359;
  unint64_t v360;
  int8x16_t v361;
  int v362;
  float32x4_t v363;
  float32x2_t *v364;
  uint64_t v365;
  char *v368;
  uint64_t v369;
  unint64_t *v370;
  _BYTE v371[32];
  void *v372[2];
  void *__p[4];
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float v377;
  __int128 v378;
  uint64_t v379;
  void *v380[2];
  _OWORD *v381;
  char v382;
  char v383;
  __int128 v384;
  uint64_t v385;
  float32x4_t v386;
  unint64_t v387;
  unint64_t *v388;
  char *v389;
  unint64_t v390;
  float32x2_t v391;
  float32x2_t v392;
  _BYTE v393[24];
  char v394;
  void *v395[2];
  void *v396;
  __int128 v397;
  void *v398;
  char v399;
  void *v400;
  _BYTE *v401;
  uint64_t v402;
  void *v403;
  _BYTE *v404;
  uint64_t v405;
  _QWORD *v406;
  _QWORD *v407;
  char *v408;
  unsigned __int8 v409;
  float *v410;
  char *v411;
  char *v412;
  void *v413;
  char *v414;
  char *v415;
  _BYTE v416[24];
  __int128 v417;
  uint64_t v418;
  void *v419[2];
  void *v420[2];
  int v421;
  __int128 v422;
  unint64_t v423;
  _OWORD v424[2];
  void *v425;
  _BYTE *v426;
  void *v427;
  _BYTE *v428;
  unint64_t v429;
  char v430;
  float v431;
  char v432;
  void *v433;
  void *v434;
  uint64_t v435;
  unsigned int v436;
  _BYTE v437[32];
  __int128 v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  uint64_t v442;
  int v443;
  _QWORD v444[3];
  _QWORD *v445;
  char *v446;
  char *v447;
  uint64_t v448;
  _QWORD v449[4];

  v449[1] = *MEMORY[0x24BDAC8D0];
  v422 = 0uLL;
  v423 = 0;
  kdebug_trace();
  sub_223F561AC(v371);
  if (**(int **)(*(_QWORD *)v371 + 56) <= 1)
  {
    v15 = atomic_load((unsigned __int8 *)&qword_2540CE138);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE138))
    {
      qword_2540CE130 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SegmentBasedDetect");
      __cxa_guard_release(&qword_2540CE138);
    }
    v16 = qword_2540CE130;
    *(_BYTE *)(qword_2540CE130 + 16) = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v16 = std::chrono::steady_clock::now();
    *(_BYTE *)(v16 + 16) = 1;
  }
  v444[0] = &off_24EC64430;
  v444[1] = &v422;
  v444[2] = 0;
  v445 = v444;
  if (a3 != a5
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/SegmentBasedPlaneDetector.cpp", 280, (uint64_t)"points.size() == pointsCovariance.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  if (a3 <= 9)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    goto LABEL_432;
  }
  v442 = 0x10100010000;
  v443 = 0;
  v17 = a2[3];
  memset(v371, 0, 24);
  if (v17)
  {
    if ((v17 & 0x8000000000000000) != 0)
      sub_22316E078();
    v18 = (int8x16_t *)operator new(v17);
    bzero(v18, v17);
    if (v17 < 8)
    {
      LODWORD(v19) = 0;
      v20 = v18;
      goto LABEL_25;
    }
    if (v17 >= 0x20)
    {
      v21 = v17 & 0xFFFFFFFFFFFFFFE0;
      v23 = (int8x16_t)xmmword_224691470;
      v24 = v18 + 1;
      v25.i64[0] = 0x1010101010101010;
      v25.i64[1] = 0x1010101010101010;
      v26.i64[0] = 0x2020202020202020;
      v26.i64[1] = 0x2020202020202020;
      v27 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24[-1] = v23;
        *v24 = vaddq_s8(v23, v25);
        v23 = vaddq_s8(v23, v26);
        v24 += 2;
        v27 -= 32;
      }
      while (v27);
      if (v17 == v21)
        goto LABEL_26;
      if ((v17 & 0x18) == 0)
      {
        v20 = (int8x16_t *)((char *)v18 + v21);
        LODWORD(v19) = v17 & 0xFFFFFFE0;
        do
        {
LABEL_25:
          v20->i8[0] = v19;
          v20 = (int8x16_t *)((char *)v20 + 1);
          LODWORD(v19) = v19 + 1;
        }
        while (v20 != (int8x16_t *)&v18->i8[v17]);
LABEL_26:
        v31 = 0;
        *(_OWORD *)v419 = 0u;
        *(_OWORD *)v420 = 0u;
        v421 = 1065353216;
        do
        {
          sub_2236EA858((uint64_t)v419, &v18->u8[v31], &v18->i8[v31]);
          ++v31;
        }
        while (v17 != v31);
        goto LABEL_28;
      }
      v22 = v17 & 0xFFFFFFFFFFFFFFE0;
    }
    else
    {
      LODWORD(v21) = 0;
      v22 = 0;
    }
    v19 = v17 & 0xFFFFFFFFFFFFFFF8;
    v20 = (int8x16_t *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFF8));
    v28 = vadd_s8(vdup_n_s8(v21), (int8x8_t)0x706050403020100);
    v29 = (int8x8_t *)&v18->i8[v22];
    v30 = v22 - (v17 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v29++ = v28;
      v28 = vadd_s8(v28, (int8x8_t)0x808080808080808);
      v30 += 8;
    }
    while (v30);
    if (v17 == v19)
      goto LABEL_26;
    goto LABEL_25;
  }
  v18 = 0;
  *(_OWORD *)v419 = 0u;
  *(_OWORD *)v420 = 0u;
  v421 = 1065353216;
LABEL_28:
  sub_2236EA858((uint64_t)v419, byte_224691488, byte_224691488);
  if (v18)
    operator delete(v18);
  memset(v371, 0, 24);
  if (a3 > 0x1555555555555555)
    sub_22316E078();
  *(_QWORD *)v371 = operator new(12 * a3);
  *(_QWORD *)&v371[8] = *(_QWORD *)v371;
  *(_QWORD *)&v371[16] = *(_QWORD *)v371 + 12 * a3;
  memset(v437, 0, 24);
  if (a3 > 0x71C71C71C71C71CLL)
    sub_22316E078();
  v32 = (__int8 *)operator new(36 * a3);
  v37 = &v32[36 * a3];
  v38 = (uint64_t *)((char *)a4 + 12 * a3);
  v39 = (float32x4_t *)((char *)a6 + 36 * a5);
  *(_QWORD *)v437 = v32;
  *(_QWORD *)&v437[8] = v32;
  *(_QWORD *)&v437[16] = v37;
  do
  {
    if (a6[2].f32[0] <= 0.01)
    {
      v40 = *(_DWORD **)&v371[8];
      if (*(_QWORD *)&v371[8] >= *(_QWORD *)&v371[16])
      {
        v45 = *(_DWORD **)v371;
        v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v371[8] - *(_QWORD *)v371) >> 2);
        v47 = v46 + 1;
        if (v46 + 1 > 0x1555555555555555)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v371[16] - *(_QWORD *)v371) >> 2) > v47)
          v47 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v371[16] - *(_QWORD *)v371) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v371[16] - *(_QWORD *)v371) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v48 = 0x1555555555555555;
        else
          v48 = v47;
        if (v48)
        {
          if (v48 > 0x1555555555555555)
            goto LABEL_441;
          v49 = (char *)operator new(12 * v48);
        }
        else
        {
          v49 = 0;
        }
        v50 = *a4;
        v51 = &v49[12 * v46];
        *((_DWORD *)v51 + 2) = *((_DWORD *)a4 + 2);
        *(_QWORD *)v51 = v50;
        v52 = v51;
        if (v40 != v45)
        {
          do
          {
            v53 = *(_QWORD *)(v40 - 3);
            v40 -= 3;
            v54 = v40[2];
            *(_QWORD *)(v52 - 12) = v53;
            v52 -= 12;
            *((_DWORD *)v52 + 2) = v54;
          }
          while (v40 != v45);
          v40 = v45;
        }
        v55 = v51 + 12;
        *(_QWORD *)v371 = v52;
        *(_QWORD *)&v371[16] = &v49[12 * v48];
        if (v40)
          operator delete(v40);
        *(_QWORD *)&v371[8] = v55;
        v42 = *(float32x4_t **)&v437[8];
        v43 = *(_QWORD *)&v437[16];
        if (*(_QWORD *)&v437[8] < *(_QWORD *)&v437[16])
          goto LABEL_36;
      }
      else
      {
        v41 = *a4;
        *(_DWORD *)(*(_QWORD *)&v371[8] + 8) = *((_DWORD *)a4 + 2);
        *(_QWORD *)v40 = v41;
        *(_QWORD *)&v371[8] = v40 + 3;
        v42 = *(float32x4_t **)&v437[8];
        v43 = *(_QWORD *)&v437[16];
        if (*(_QWORD *)&v437[8] < *(_QWORD *)&v437[16])
        {
LABEL_36:
          v44 = *a6;
          v33 = a6[1];
          v42[2].i32[0] = a6[2].i32[0];
          *v42 = v44;
          v42[1] = v33;
          v32 = &v42[2].i8[4];
LABEL_68:
          *(_QWORD *)&v437[8] = v32;
          goto LABEL_69;
        }
      }
      v56 = *(float32x4_t **)v437;
      v57 = 0x8E38E38E38E38E39 * (((uint64_t)v42 - *(_QWORD *)v437) >> 2);
      v58 = v57 + 1;
      if (v57 + 1 > 0x71C71C71C71C71CLL)
        sub_22316E078();
      v59 = 0x8E38E38E38E38E39 * ((v43 - *(_QWORD *)v437) >> 2);
      if (2 * v59 > v58)
        v58 = 2 * v59;
      if (v59 >= 0x38E38E38E38E38ELL)
        v60 = 0x71C71C71C71C71CLL;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 > 0x71C71C71C71C71CLL)
LABEL_441:
          sub_223174E94();
        v61 = (char *)operator new(36 * v60);
      }
      else
      {
        v61 = 0;
      }
      v62 = (float32x4_t *)&v61[36 * v57];
      v63 = *a6;
      v33 = a6[1];
      v62[2].i32[0] = a6[2].i32[0];
      *v62 = v63;
      v62[1] = v33;
      v64 = v62;
      if (v42 != v56)
      {
        do
        {
          v65 = *(float32x4_t *)((char *)v42 - 36);
          v33 = *(float32x4_t *)((char *)v42 - 20);
          v64[-1].i32[3] = v42[-1].i32[3];
          *(float32x4_t *)((char *)v64 - 20) = v33;
          *(float32x4_t *)((char *)v64 - 36) = v65;
          v64 = (float32x4_t *)((char *)v64 - 36);
          v42 = (float32x4_t *)((char *)v42 - 36);
        }
        while (v42 != v56);
        v42 = v56;
      }
      v32 = &v62[2].i8[4];
      *(_QWORD *)v437 = v64;
      *(_QWORD *)&v437[16] = &v61[36 * v60];
      if (v42)
        operator delete(v42);
      goto LABEL_68;
    }
LABEL_69:
    a4 = (uint64_t *)((char *)a4 + 12);
    a6 = (float32x4_t *)((char *)a6 + 36);
  }
  while (a4 != v38 || a6 != v39);
  v66 = *(float32x2_t **)v371;
  *(_OWORD *)&v416[8] = *(_OWORD *)&v371[8];
  *(_QWORD *)v416 = *(_QWORD *)v371;
  *(_QWORD *)&v417 = *(_QWORD *)v437;
  *((_QWORD *)&v417 + 1) = v32;
  v418 = *(_QWORD *)&v437[16];
  v414 = 0;
  v413 = 0;
  v415 = 0;
  v411 = 0;
  v410 = 0;
  v412 = 0;
  v364 = *(float32x2_t **)&v371[8];
  if (*(_QWORD *)&v371[8] != *(_QWORD *)v371)
  {
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v368 = 0;
    v70 = 0;
    v71 = 0;
    while (2)
    {
      v33.i32[0] = a7[1].i32[0];
      v34.i32[0] = a7[3].i32[0];
      v35.i32[0] = a7[5].i32[0];
      v36.i32[0] = v66[1].i32[0];
      *(float32x2_t *)v72.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a7, COERCE_FLOAT(*v66)), a7[2], *v66, 1), a7[4], v36.f32[0]);
      *(float32x2_t *)&v72.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v33.f32, *v66), v34, *v66, 1), v36, v35);
      *(float32x2_t *)v33.f32 = a7[6];
      v33.i32[2] = a7[7].i32[0];
      v73 = vaddq_f32(v72, v33);
      *(_DWORD *)&v371[8] = v73.i32[2];
      *(_QWORD *)v371 = v73.i64[0];
      if (((*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))(*(_QWORD *)a8 + 64))(a8, v371, v437) & 1) == 0)
        goto LABEL_75;
      if (v70 < v368)
      {
        *(_QWORD *)v70 = *(_QWORD *)v437;
        v68 = (uint64_t)(v70 + 8);
        v74 = v414;
        v75 = v415;
        if (v414 >= v415)
          goto LABEL_97;
LABEL_73:
        *(_QWORD *)v74 = v71;
        v67 = (uint64_t)(v74 + 8);
LABEL_74:
        v414 = (char *)v67;
        v70 = (char *)v68;
LABEL_75:
        v66 = (float32x2_t *)((char *)v66 + 12);
        ++v71;
        if (v66 == v364)
        {
          v412 = v368;
          v410 = (float *)v69;
          v411 = (char *)v68;
          v66 = *(float32x2_t **)v416;
          v110 = *(_QWORD *)&v416[8];
          v111 = v413;
          goto LABEL_128;
        }
        continue;
      }
      break;
    }
    v76 = (v70 - v69) >> 3;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 61)
    {
      v412 = v368;
      v410 = (float *)v69;
      v411 = (char *)v68;
      sub_22316E078();
    }
    if ((v368 - v69) >> 2 > v77)
      v77 = (v368 - v69) >> 2;
    if ((unint64_t)(v368 - v69) >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v77;
    if (v78)
    {
      if (v78 >> 61)
        goto LABEL_449;
      v79 = operator new(8 * v78);
      v80 = &v79[8 * v76];
      *(_QWORD *)v80 = *(_QWORD *)v437;
      v68 = (uint64_t)(v80 + 8);
      v81 = v70 - v69;
      if (v70 == v69)
      {
LABEL_94:
        v368 = &v79[8 * v78];
        if (v69)
          operator delete(v69);
        v69 = v80;
        v74 = v414;
        v75 = v415;
        if (v414 < v415)
          goto LABEL_73;
LABEL_97:
        v85 = (char *)v413;
        v86 = v74 - (_BYTE *)v413;
        v87 = (v74 - (_BYTE *)v413) >> 3;
        v88 = v87 + 1;
        if ((unint64_t)(v87 + 1) >> 61)
        {
          v412 = v368;
          v410 = (float *)v69;
          sub_22367C394();
        }
        v89 = v75 - (_BYTE *)v413;
        if (v89 >> 2 > v88)
          v88 = v89 >> 2;
        if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
          v90 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v90 = v88;
        if (v90)
        {
          if (v90 >> 61)
          {
LABEL_449:
            v412 = v368;
            v410 = (float *)v69;
            sub_223174E94();
          }
          v91 = operator new(8 * v90);
          v92 = &v91[8 * v87];
          *v92 = v71;
          v67 = (uint64_t)(v92 + 1);
          v93 = v74 - v85;
          if (v74 == v85)
            goto LABEL_114;
LABEL_108:
          v94 = v93 - 8;
          if (v94 < 0x58)
            goto LABEL_471;
          if ((unint64_t)(v74 - &v91[v86]) < 0x20)
            goto LABEL_471;
          v95 = (v94 >> 3) + 1;
          v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
          v97 = &v74[-v96];
          v92 = (_QWORD *)((char *)v92 - v96);
          v98 = (float32x4_t *)&v91[8 * v87 - 16];
          v99 = (float32x4_t *)(v74 - 16);
          v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v33 = v99[-1];
            v101 = *v99;
            v98[-1] = v33;
            *v98 = v101;
            v98 -= 2;
            v99 -= 2;
            v100 -= 4;
          }
          while (v100);
          v74 = v97;
          if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_471:
            do
            {
              v102 = *((_QWORD *)v74 - 1);
              v74 -= 8;
              *--v92 = v102;
            }
            while (v74 != v85);
          }
        }
        else
        {
          v91 = 0;
          v92 = (_QWORD *)(8 * v87);
          *(_QWORD *)(8 * v87) = v71;
          v67 = 8 * v87 + 8;
          v93 = v74 - v85;
          if (v74 != v85)
            goto LABEL_108;
        }
LABEL_114:
        v413 = v92;
        v415 = &v91[8 * v90];
        if (v85)
          operator delete(v85);
        goto LABEL_74;
      }
    }
    else
    {
      v79 = 0;
      v80 = (char *)(8 * v76);
      *(_QWORD *)(8 * v76) = *(_QWORD *)v437;
      v68 = 8 * v76 + 8;
      v81 = v70 - v69;
      if (v70 == v69)
        goto LABEL_94;
    }
    v82 = v81 - 8;
    if (v82 >= 0x168)
    {
      v103 = (v70 - 8 - v69) & 0xFFFFFFFFFFFFFFF8;
      if (&v79[v70 - v69 - 8 - v103] > &v79[v70 - v69 - 8])
      {
        v83 = v70;
      }
      else if (&v70[-v103 - 8] > v70 - 8)
      {
        v83 = v70;
      }
      else if ((unint64_t)(v69 - v79) >= 0x20)
      {
        v104 = (v82 >> 3) + 1;
        v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
        v83 = &v70[-v105];
        v80 -= v105;
        v106 = (float32x4_t *)&v79[8 * v76 - 16];
        v107 = (float32x4_t *)(v70 - 16);
        v108 = v104 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = v107[-1];
          v109 = *v107;
          v106[-1] = v33;
          *v106 = v109;
          v106 -= 2;
          v107 -= 2;
          v108 -= 4;
        }
        while (v108);
        if (v104 == (v104 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_94;
      }
      else
      {
        v83 = v70;
      }
    }
    else
    {
      v83 = v70;
    }
    do
    {
      v84 = *((_QWORD *)v83 - 1);
      v83 -= 8;
      *((_QWORD *)v80 - 1) = v84;
      v80 -= 8;
    }
    while (v83 != v69);
    goto LABEL_94;
  }
  v69 = 0;
  v67 = 0;
  v111 = 0;
  v110 = *(_QWORD *)v371;
LABEL_128:
  *(_QWORD *)&v371[8] = v66;
  *(_QWORD *)&v371[16] = 0xAAAAAAAAAAAAAAABLL * ((v110 - (uint64_t)v66) >> 2);
  *(_QWORD *)&v437[16] = *(_QWORD *)&v371[16];
  memset(v393, 0, sizeof(v393));
  *(_QWORD *)v371 = v111;
  *(_QWORD *)&v437[8] = v66;
  *(_QWORD *)v437 = v67;
  sub_223F567E8(v393, (__int128 *)v371, (unint64_t **)v437, -(((uint64_t)v111 - v67) >> 3));
  if (v66)
    operator delete(v66);
  *(_OWORD *)v416 = *(_OWORD *)v393;
  *(_QWORD *)&v416[16] = *(_QWORD *)&v393[16];
  v112 = (void *)v417;
  *(_QWORD *)&v371[8] = v417;
  *(_QWORD *)&v371[16] = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v417 + 1) - v417) >> 2);
  *(_QWORD *)&v437[16] = *(_QWORD *)&v371[16];
  memset(v393, 0, sizeof(v393));
  *(_QWORD *)v371 = v111;
  *(_QWORD *)&v437[8] = v417;
  *(_QWORD *)v437 = v67;
  sub_223F56920(v393, (__int128 *)v371, (unint64_t **)v437, -(((uint64_t)v111 - v67) >> 3));
  v113 = a2;
  if (v112)
  {
    operator delete(v112);
    v417 = 0uLL;
    v418 = 0;
  }
  v114.i32[3] = *(_DWORD *)&v393[12];
  v417 = *(_OWORD *)v393;
  v418 = *(_QWORD *)&v393[16];
  v115 = *((unsigned __int8 *)a2 + 24);
  if (!*((_BYTE *)a2 + 24))
    goto LABEL_420;
  v116 = 0;
  v117 = a2[4];
  *(float32x2_t *)v114.i8 = a7[4];
  v114.i32[2] = a7[5].i32[0];
  v342 = (float32x2_t *)&v387;
  v118 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1);
  v355 = *(float32x2_t *)v114.i8;
  v354 = (float32x2_t)vextq_s8(v114, v114, 8uLL).u64[0];
  v350 = v117;
  v351 = *((unsigned __int8 *)a2 + 24);
  while (2)
  {
    v119 = (double *)(v117 + 112 * v116);
    v120 = *v119;
    v121 = v119[1];
    v122 = v121 > *v119;
    if (v121 > *v119)
      v120 = v119[1];
    if (v119[2] > v120)
    {
      v120 = v119[2];
      v122 = 2;
    }
    if (v119[3] > v120)
    {
      v120 = v119[3];
      v122 = 3;
    }
    if (v119[4] > v120)
    {
      v120 = v119[4];
      v122 = 4;
    }
    if (v119[5] > v120)
    {
      v120 = v119[5];
      v122 = 5;
    }
    if (v119[6] > v120)
    {
      v120 = v119[6];
      v122 = 6;
    }
    if (v119[7] > v120)
    {
      v120 = v119[7];
      v122 = 7;
    }
    if (v119[8] > v120)
    {
      v120 = v119[8];
      v122 = 8;
    }
    if (v119[9] > v120)
    {
      v120 = v119[9];
      v122 = 9;
    }
    v123 = v119[10];
    v124 = v119[11];
    v125 = v123 <= v120;
    if (v123 > v120)
      v120 = v119[10];
    v409 = v116;
    if (!v125)
      v122 = 10;
    if (v124 <= v120)
      v126 = v122;
    else
      v126 = 11;
    if (!*((_BYTE *)&v442 + v126))
      goto LABEL_135;
    v127 = (float32x2_t *)(v117 + 112 * v116);
    LODWORD(v120) = v127[13].i32[0];
    if (fabsf(vmla_f32(vmla_lane_f32(vmul_f32(v355, v127[12]), v118, v127[12], 1), *(float32x2_t *)&v120, v354).f32[0]) <= 0.96593)
      goto LABEL_135;
    v128 = v410;
    v129 = (float *)v411;
    v131 = *v113;
    v130 = v113[1];
    v132 = v113[2];
    v408 = 0;
    v406 = 0;
    v407 = 0;
    v365 = v116;
    if (v411 == (char *)v410)
    {
      v135 = 0;
      goto LABEL_417;
    }
    v358 = v126;
    v352 = v119;
    v133 = 0;
    v134 = 0;
    v135 = 0;
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v140 = (float)v130;
    v141 = (float)HIDWORD(v130);
    v142 = HIDWORD(v132);
    v369 = v131;
    v362 = v132;
    v360 = HIDWORD(v132);
    while (2)
    {
      v143 = *v128;
      if (*v128 >= 0.0 && v143 < v140)
      {
        v145 = v128[1];
        v146 = v145 >= 0.0 && v145 < v141;
        if (v146
          && *(unsigned __int8 *)(v131 + vcvtas_u32_f32(v143) * (_DWORD)v132 + vcvtas_u32_f32(v145) * (_DWORD)v142) == v116)
        {
          if ((unint64_t)v138 < v137)
          {
            *(_QWORD *)v138 = v139;
            v138 += 8;
            v134 = (uint64_t)v138;
            goto LABEL_166;
          }
          v147 = v134;
          v148 = v133;
          v149 = (v138 - v136) >> 3;
          v150 = v149 + 1;
          if ((unint64_t)(v149 + 1) >> 61)
          {
            v406 = v135;
            v407 = (_QWORD *)v147;
            v408 = v148;
            sub_22367C394();
          }
          v151 = v137 - (_QWORD)v136;
          if (v151 >> 2 > v150)
            v150 = v151 >> 2;
          if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF8)
            v152 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v152 = v150;
          if (v152)
          {
            if (v152 >> 61)
            {
              v406 = v135;
              v408 = v148;
              sub_223174E94();
            }
            v153 = operator new(8 * v152);
            v135 = &v153[8 * v149];
            *v135 = v139;
            v134 = (uint64_t)(v135 + 1);
            v154 = v138 - v136;
            if (v138 == v136)
            {
LABEL_193:
              v133 = &v153[8 * v152];
              if (v136)
                operator delete(v136);
              v136 = (char *)v135;
              v137 = (unint64_t)v133;
              v138 = (char *)v134;
              v113 = a2;
              LOBYTE(v116) = v365;
              v131 = v369;
              LODWORD(v132) = v362;
              LODWORD(v142) = v360;
              goto LABEL_166;
            }
          }
          else
          {
            v153 = 0;
            v135 = (_QWORD *)(8 * v149);
            *(_QWORD *)(8 * v149) = v139;
            v134 = 8 * v149 + 8;
            v154 = v138 - v136;
            if (v138 == v136)
              goto LABEL_193;
          }
          v155 = v154 - 8;
          if (v155 >= 0x168)
          {
            v158 = (v138 - 8 - v136) & 0xFFFFFFFFFFFFFFF8;
            if (&v153[v138 - v136 - 8 - v158] > &v153[v138 - v136 - 8])
            {
              v156 = v138;
            }
            else if (&v138[-v158 - 8] > v138 - 8)
            {
              v156 = v138;
            }
            else if ((unint64_t)(v136 - v153) >= 0x20)
            {
              v159 = (v155 >> 3) + 1;
              v160 = 8 * (v159 & 0x3FFFFFFFFFFFFFFCLL);
              v156 = &v138[-v160];
              v135 = (_QWORD *)((char *)v135 - v160);
              v161 = &v153[8 * v149 - 16];
              v162 = v138 - 16;
              v163 = v159 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v164 = *(_OWORD *)v162;
                *(v161 - 1) = *((_OWORD *)v162 - 1);
                *v161 = v164;
                v161 -= 2;
                v162 -= 32;
                v163 -= 4;
              }
              while (v163);
              if (v159 == (v159 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_193;
            }
            else
            {
              v156 = v138;
            }
          }
          else
          {
            v156 = v138;
          }
          do
          {
            v157 = *((_QWORD *)v156 - 1);
            v156 -= 8;
            *--v135 = v157;
          }
          while (v156 != v136);
          goto LABEL_193;
        }
      }
LABEL_166:
      v128 += 2;
      ++v139;
      if (v128 != v129)
        continue;
      break;
    }
    v406 = v135;
    v407 = (_QWORD *)v134;
    v408 = v133;
    v165 = v352;
    if ((unint64_t)(v134 - (_QWORD)v135) < 0x50)
      goto LABEL_417;
    *(_QWORD *)&v371[8] = *(_QWORD *)v416;
    *(_QWORD *)&v371[16] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v416[8] - *(_QWORD *)v416) >> 2);
    *(_QWORD *)&v437[16] = *(_QWORD *)&v371[16];
    v405 = 0;
    v403 = 0;
    v404 = 0;
    *(_QWORD *)v371 = v135;
    *(_QWORD *)&v437[8] = *(_QWORD *)v416;
    *(_QWORD *)v437 = v134;
    sub_223F567E8(&v403, (__int128 *)v371, (unint64_t **)v437, -(((uint64_t)v135 - v134) >> 3));
    *(_QWORD *)&v371[8] = v417;
    *(_QWORD *)&v371[16] = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v417 + 1) - v417) >> 2);
    *(_QWORD *)&v437[16] = *(_QWORD *)&v371[16];
    v402 = 0;
    v400 = 0;
    v401 = 0;
    *(_QWORD *)v371 = v135;
    *(_QWORD *)&v437[8] = v417;
    *(_QWORD *)v437 = v134;
    sub_223F56920(&v400, (__int128 *)v371, (unint64_t **)v437, -(((uint64_t)v135 - v134) >> 3));
    v166 = *a1;
    v167 = (char *)v403;
    v168 = v404;
    v169 = (char *)v400;
    memset(v371, 0, 24);
    v170 = (v401 - (_BYTE *)v400) / 36;
    if (v401 == v400)
    {
      v173 = 0;
      v174 = 0;
    }
    else
    {
      if (v170 >> 62)
        sub_22316E078();
      *(_QWORD *)v371 = operator new(4 * v170);
      *(_QWORD *)&v371[8] = *(_QWORD *)v371;
      *(_QWORD *)&v371[16] = *(_QWORD *)v371 + 4 * v170;
      *(_QWORD *)v437 = v371;
      v171 = 36 * v170;
      v172 = (__int32 *)(v169 + 32);
      do
      {
        v386.i32[0] = *v172;
        sub_2233D7140((uint64_t *)v437, &v386);
        v172 += 9;
        v171 -= 36;
      }
      while (v171);
      v173 = *(_QWORD *)&v371[8];
      v174 = *(void **)v371;
      v165 = v352;
    }
    v175 = 0xAAAAAAAAAAAAAAABLL * ((v168 - v167) >> 2);
    v446 = (char *)v175;
    v447 = v167;
    v448 = (v173 - (uint64_t)v174) >> 2;
    v449[0] = v174;
    memset(v424, 0, sizeof(v424));
    v176 = v174;
    sub_223F4DAD0(v166, (unint64_t *)&v446, (unint64_t *)v424, &v425);
    v177 = v425;
    if (v425 != v426 && (v358 != 4 || 0xCCCCCCCCCCCCCCCDLL * ((v426 - (_BYTE *)v425) >> 4) < 2))
    {
      sub_223F52A1C((uint64_t)v371, (uint64_t *)v425);
      v178.i32[0] = a7[1].i32[0];
      *(float32x2_t *)v179.i8 = a7[2];
      v180.i32[0] = a7[3].i32[0];
      v181 = *(double *)&a7[4];
      v182.i32[0] = a7[5].i32[0];
      *(float32x2_t *)v183.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a7, *(float *)v371), *(float32x2_t *)v179.i8, *(float32x2_t *)v371, 1), *(float32x2_t *)&v181, *(float32x4_t *)v371, 2);
      v184 = (float32x4_t)vextq_s8(*(int8x16_t *)v371, *(int8x16_t *)v371, 8uLL);
      v185 = vmla_f32(vmla_lane_f32(vmul_f32(v178, *(float32x2_t *)v371), *(float32x2_t *)v180.f32, *(float32x2_t *)v371, 1), *(float32x2_t *)v184.f32, v182);
      *(float32x2_t *)&v183.u32[2] = v185;
      *(float32x2_t *)v184.f32 = a7[6];
      v184.i32[2] = a7[7].i32[0];
      v186 = vaddq_f32(v183, v184);
      v185.i32[0] = *(_DWORD *)&v371[20];
      *(float32x2_t *)v187.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a7, *(float *)&v371[12]), *(float32x2_t *)v179.i8, *(float32x2_t *)&v371[12], 1), *(float32x2_t *)&v181, *(float *)&v371[20]);
      v188 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(v178, *(float32x2_t *)&v371[12]), *(float32x2_t *)v180.f32, *(float32x2_t *)&v371[12], 1), v185, v182));
      *(_DWORD *)&v437[8] = v186.i32[2];
      *(_QWORD *)v437 = v186.i64[0];
      *(_DWORD *)&v437[20] = LODWORD(v188);
      *(_QWORD *)&v437[12] = v187.i64[0];
      if (sub_223F52F44((uint64_t)v437, v187, v188, v179, v180, v181, v182) < 15.0)
      {
LABEL_221:
        v393[0] = 0;
        v399 = 0;
        if (__p[1])
        {
          __p[2] = __p[1];
          operator delete(__p[1]);
        }
        goto LABEL_223;
      }
      v353 = v165;
      v210 = (unint64_t *)v372[0];
      v427 = (void *)2;
      LODWORD(v428) = 100;
      LOBYTE(v431) = 0;
      v432 = 0;
      v344 = vcvtas_u32_f32((float)(unint64_t)-(((char *)v372[0] - (char *)v372[1]) >> 3) * 0.9);
      v429 = v344;
      v430 = 1;
      v437[0] = 0;
      v437[24] = 0;
      *(_QWORD *)&v439 = 0;
      v438 = 0uLL;
      DWORD2(v439) = 0;
      v370 = (unint64_t *)v372[1];
      v436 = (unint64_t)((char *)v372[1] - (char *)v372[0]) >> 3;
      if (v436 < 2)
        goto LABEL_304;
      v343 = v176;
      v346 = 0;
      v345 = 0;
      v211 = 0;
      v212 = 0.0;
      v213 = (uint64_t)(a1 + 2);
      while (1)
      {
        v214 = v436;
        if (v427 > v436)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          v214 = v436;
        }
        if (v214)
        {
          v189.i32[0] = (int)v427;
          if ((double)v214 * 0.5 >= (double)v189.u64[0])
            sub_223CD005C(v213, &v436, (unsigned int *)&v427, (uint64_t)&v433);
          else
            sub_223CCFE58(v213, &v436, (unsigned int *)&v427, (int32x4_t **)&v433);
        }
        else
        {
          v434 = 0;
          v433 = 0;
          v435 = 0;
        }
        v215 = v433;
        v216 = *(unsigned int *)v433;
        v389 = v169;
        v390 = v170;
        v386.i64[1] = (uint64_t)v167;
        v386.i64[0] = (uint64_t)&v210[v216];
        v387 = v175;
        v388 = (unint64_t *)v386.i64[0];
        v217 = *(_QWORD *)v386.i64[0];
        if (v175 <= *(_QWORD *)v386.i64[0])
          goto LABEL_445;
        if (v170 <= v217)
        {
          v342 = (float32x2_t *)&v390;
          goto LABEL_445;
        }
        v218 = *((unsigned int *)v433 + 1);
        v389 = v169;
        v390 = v170;
        v386.i64[1] = (uint64_t)v167;
        v386.i64[0] = (uint64_t)&v210[v218];
        v387 = v175;
        v388 = (unint64_t *)v386.i64[0];
        v219 = *(_QWORD *)v386.i64[0];
        if (v175 <= *(_QWORD *)v386.i64[0])
          goto LABEL_443;
        if (v170 <= v219)
        {
          v342 = (float32x2_t *)&v390;
LABEL_443:
          v217 = *(_QWORD *)v386.i64[0];
LABEL_445:
          sub_22457354C((unint64_t *)v342, v217);
        }
        v220 = &v167[12 * v217];
        v221 = &v167[12 * v219];
        v198.i64[0] = *(_QWORD *)v220;
        v198.i32[2] = *((_DWORD *)v220 + 2);
        v191.i64[0] = *(_QWORD *)v221;
        v191.i32[2] = *((_DWORD *)v221 + 2);
        v222 = (int8x16_t)vsubq_f32(v191, v198);
        v223 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v222.i8, 1);
        v224 = (float32x2_t)vextq_s8(v222, v222, 8uLL).u64[0];
        v225 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v222.i8, *(float32x2_t *)v222.i8), v223, *(float32x2_t *)v222.i8, 1), v224, v224);
        if (v225.f32[0] == 0.0)
          goto LABEL_246;
        v226 = v225.f32[0];
        if (v225.f32[0] <= 0.0)
          v226 = 0.0 - v225.f32[0];
        if (v226 <= 0.00000001)
          goto LABEL_246;
        v347 = v191;
        v386.i64[0] = (uint64_t)v210;
        v386.i64[1] = (uint64_t)v167;
        v387 = v175;
        v388 = v210;
        v389 = v169;
        v390 = v170;
        v391 = 0;
        if (v210 != v370)
        {
          v227 = 0;
          v228 = 0.0;
          v229 = *((float *)&v427 + 1);
          v230 = (float32x2_t)1;
          v231 = v210;
          v361 = v222;
          v363 = v198;
          v357 = v225;
          v359 = v224;
          while (1)
          {
            v232 = *v231;
            if (v175 <= *v231)
              goto LABEL_440;
            if (v170 <= v232)
              break;
            v233 = &v167[12 * v232];
            v189.i64[0] = *(_QWORD *)v233;
            v189.i32[2] = *((_DWORD *)v233 + 2);
            v234 = (int8x16_t)vsubq_f32((float32x4_t)v189, v198);
            v235 = (int8x16_t)vsubq_f32(vmlaq_n_f32(v198, (float32x4_t)v222, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v222.i8, *(float32x2_t *)v234.i8), v223, *(float32x2_t *)v234.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v234, v234, 8uLL), v224), v225).f32[0]), (float32x4_t)v189);
            v238 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v235.i8, 1);
            v236 = (float32x2_t)vextq_s8(v235, v235, 8uLL).u64[0];
            v237 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v235.i8, *(float32x2_t *)v235.i8), v238, *(float32x2_t *)v235.i8, 1), v236, v236).f32[0];
            v238.i32[0] = 0;
            if (v237 != 0.0 && v237 > 0.000001)
            {
              v240 = &v169[36 * v232];
              v238.f32[0] = 1.0 / sqrtf(v237);
              v241 = (int8x16_t)vmulq_n_f32((float32x4_t)v235, v238.f32[0]);
              v193.i32[0] = *((_DWORD *)v240 + 2);
              v195.i32[0] = *((_DWORD *)v240 + 5);
              v197.i32[0] = *((_DWORD *)v240 + 8);
              v242 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v240, *(float *)v241.i32), *(float32x2_t *)(v240 + 12), *(float32x2_t *)v241.i8, 1), *(float32x2_t *)(v240 + 24), (float32x4_t)v241, 2);
              v243 = vmla_lane_f32(vmul_f32(v193, *(float32x2_t *)v241.i8), *(float32x2_t *)v195.i8, *(float32x2_t *)v241.i8, 1);
              v195.i64[0] = vextq_s8(v241, v241, 8uLL).u64[0];
              v193 = vmla_f32(v243, *(float32x2_t *)v195.i8, v197);
              if (v237 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v241.i8, v242), vmul_lane_f32(v238, *(float32x2_t *)v235.i8, 1), v242, 1), v193, vmul_f32(v236, v238)).f32[0])v238.f32[0] = 0.0;
              else
                v238.f32[0] = 1.0;
            }
            if (v238.f32[0] <= v229)
            {
              ++v227;
              *(float *)v189.i32 = expf(-v238.f32[0]);
              v225 = v357;
              v224 = v359;
              v222 = v361;
              v198 = v363;
              v228 = v228 + *(float *)v189.i32;
            }
            v386.i64[0] = (uint64_t)++v231;
            v388 = v231;
            v391 = v230;
            ++*(_QWORD *)&v230;
            if (v231 == v370)
              goto LABEL_279;
          }
          v342 = (float32x2_t *)&v390;
LABEL_440:
          sub_22457354C((unint64_t *)v342, v232);
        }
        v227 = 0;
        v228 = 0.0;
LABEL_279:
        if (v228 > v212)
          break;
LABEL_245:
        v213 = (uint64_t)(a1 + 2);
LABEL_246:
        v434 = v215;
        operator delete(v215);
        if (++v211 == 100)
        {
          v227 = v345;
          v176 = v343;
          if (v346)
          {
LABEL_301:
            v386 = 0uLL;
            v387 = 0;
            if (v227)
            {
              if (v227 >> 61)
                sub_22367C394();
              v252 = (char *)operator new(8 * v227);
              v253 = &v252[8 * v227];
            }
            else
            {
              v253 = 0;
              v252 = 0;
            }
            *(_QWORD *)&v438 = v252;
            *((_QWORD *)&v438 + 1) = v252;
            *(_QWORD *)&v439 = v253;
            v386.i64[0] = (uint64_t)v210;
            v386.i64[1] = (uint64_t)v167;
            v387 = v175;
            v388 = v210;
            v389 = v169;
            v390 = v170;
            v391 = 0;
            v113 = a2;
            if (v210 != v370)
            {
              v255 = 0;
              v256 = v252;
              v257 = v210;
              while (1)
              {
                v258 = *v257;
                if (v387 <= *v257)
                  goto LABEL_451;
                if (v390 <= *v210)
                {
                  v342 = (float32x2_t *)&v390;
                  v258 = *v210;
LABEL_451:
                  sub_22457354C((unint64_t *)v342, v258);
                }
                v259 = v386.i64[1] + 12 * v258;
                v190.i64[0] = *(_QWORD *)&v437[12];
                v190.i32[2] = *(_DWORD *)&v437[20];
                v191.i64[0] = *(_QWORD *)v259;
                v191.i32[2] = *(_DWORD *)(v259 + 8);
                v260 = (int8x16_t)vsubq_f32((float32x4_t)v190, *(float32x4_t *)v437);
                v261 = (int8x16_t)vsubq_f32(v191, *(float32x4_t *)v437);
                v262 = (float32x2_t)vextq_s8(v260, v260, 8uLL).u64[0];
                v194 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v260.i8, *(float32x2_t *)v260.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v260.i8, 1), *(float32x2_t *)v260.i8, 1), v262, v262);
                v263 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v261.i8, 1);
                v189 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)v437, (float32x4_t)v260, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v260.i8, *(float32x2_t *)v261.i8), v263, *(float32x2_t *)v260.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v261, v261, 8uLL), v262), v194).f32[0]);
                v190 = (int8x16_t)vsubq_f32((float32x4_t)v189, v191);
                v264 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v190.i8, 1);
                v191 = (float32x4_t)vextq_s8(v190, v190, 8uLL);
                *(float *)v189.i32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8), v264, *(float32x2_t *)v190.i8, 1), *(float32x2_t *)v191.f32, *(float32x2_t *)v191.f32).f32[0];
                v264.i32[0] = 0;
                if (*(float *)v189.i32 != 0.0 && *(float *)v189.i32 > 0.000001)
                {
                  v266 = (uint64_t)&v389[36 * *v210];
                  v264.f32[0] = 1.0 / sqrtf(*(float *)v189.i32);
                  v267 = (int8x16_t)vmulq_n_f32((float32x4_t)v190, v264.f32[0]);
                  v262.i32[0] = *(_DWORD *)(v266 + 8);
                  v263.i32[0] = *(_DWORD *)(v266 + 20);
                  v197.i32[0] = *(_DWORD *)(v266 + 32);
                  v194 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v266, *(float *)v267.i32), *(float32x2_t *)(v266 + 12), *(float32x2_t *)v267.i8, 1), *(float32x2_t *)(v266 + 24), (float32x4_t)v267, 2);
                  v268 = vmla_lane_f32(vmul_f32(v262, *(float32x2_t *)v267.i8), v263, *(float32x2_t *)v267.i8, 1);
                  v195 = vextq_s8(v267, v267, 8uLL);
                  *(float32x2_t *)v190.i8 = vmul_lane_f32(v264, *(float32x2_t *)v190.i8, 1);
                  if (*(float *)v189.i32 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v267.i8, v194), *(float32x2_t *)v190.i8, v194, 1), vmla_f32(v268, *(float32x2_t *)v195.i8, v197), vmul_f32(*(float32x2_t *)v191.f32, v264)).f32[0])v264.f32[0] = 0.0;
                  else
                    v264.f32[0] = 1.0;
                }
                if (v264.f32[0] <= *((float *)&v427 + 1))
                  break;
LABEL_340:
                ++v257;
                ++v210;
                v386.i64[0] = (uint64_t)v257;
                v388 = v210;
                ++*(_QWORD *)&v255;
                v391 = v255;
                if (v257 == v370 && v210 == v370)
                  goto LABEL_354;
              }
              if (v256 < v253)
              {
                *(float32x2_t *)v256 = v255;
                v269 = (uint64_t)(v256 + 8);
LABEL_339:
                *((_QWORD *)&v438 + 1) = v269;
                v255 = v391;
                v256 = (char *)v269;
                goto LABEL_340;
              }
              v270 = (v256 - v252) >> 3;
              v271 = v270 + 1;
              if ((unint64_t)(v270 + 1) >> 61)
                sub_22367C394();
              if ((v253 - v252) >> 2 > v271)
                v271 = (v253 - v252) >> 2;
              if ((unint64_t)(v253 - v252) >= 0x7FFFFFFFFFFFFFF8)
                v272 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v272 = v271;
              if (v272)
              {
                if (v272 >> 61)
                  sub_223174E94();
                v273 = operator new(8 * v272);
                v274 = (float32x2_t *)&v273[8 * v270];
                *v274 = v255;
                v269 = (uint64_t)&v274[1];
                v275 = v256 - v252;
                if (v256 != v252)
                {
LABEL_333:
                  v276 = v275 - 8;
                  if (v276 < 0x168
                    || (v279 = (v256 - 8 - v252) & 0xFFFFFFFFFFFFFFF8,
                        &v273[v256 - v252 - 8 - v279] > &v273[v256 - v252 - 8])
                    || &v256[-v279 - 8] > v256 - 8
                    || (unint64_t)(v252 - v273) < 0x20)
                  {
                    v277 = v256;
                    v113 = a2;
                  }
                  else
                  {
                    v280 = (v276 >> 3) + 1;
                    v281 = 8 * (v280 & 0x3FFFFFFFFFFFFFFCLL);
                    v277 = &v256[-v281];
                    v274 = (float32x2_t *)((char *)v274 - v281);
                    v282 = (int8x16_t *)&v273[8 * v270 - 16];
                    v283 = (int8x16_t *)(v256 - 16);
                    v284 = v280 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v190 = v283[-1];
                      v189 = *v283;
                      v282[-1] = v190;
                      *v282 = v189;
                      v282 -= 2;
                      v283 -= 2;
                      v284 -= 4;
                    }
                    while (v284);
                    v113 = a2;
                    if (v280 == (v280 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_336:
                      v253 = &v273[8 * v272];
                      *(_QWORD *)&v438 = v274;
                      *(_QWORD *)&v439 = v253;
                      if (v252)
                        goto LABEL_337;
                      goto LABEL_338;
                    }
                  }
                  do
                  {
                    v278 = *(float32x2_t *)(v277 - 8);
                    v277 -= 8;
                    v274[-1] = v278;
                    --v274;
                  }
                  while (v277 != v252);
                  goto LABEL_336;
                }
              }
              else
              {
                v273 = 0;
                v274 = (float32x2_t *)(8 * v270);
                *(float32x2_t *)(8 * v270) = v255;
                v269 = 8 * v270 + 8;
                v275 = v256 - v252;
                if (v256 != v252)
                  goto LABEL_333;
              }
              v113 = a2;
              v253 = &v273[8 * v272];
              *(_QWORD *)&v438 = v274;
              *(_QWORD *)&v439 = v253;
              if (v252)
              {
LABEL_337:
                operator delete(v252);
                v257 = (unint64_t *)v386.i64[0];
                v210 = v388;
              }
LABEL_338:
              v252 = (char *)v274;
              goto LABEL_339;
            }
            v256 = v252;
LABEL_354:
            if (v252)
              operator delete(v252);
            v176 = v343;
            v165 = v353;
            if ((v256 - v252) >> 3 >= v344)
              goto LABEL_221;
LABEL_357:
            v190.i32[0] = *(_DWORD *)&v371[20];
            v189.i64[0] = *(_QWORD *)&v371[12];
            v189.i32[2] = *(_DWORD *)&v371[20];
            v285 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v189.i8, *(float32x2_t *)v189.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v371[12], 1), *(float32x2_t *)&v371[12], 1), *(float32x2_t *)v190.i8, *(float32x2_t *)v190.i8).f32[0];
            v286 = v189;
            if (v285 != 1.0)
            {
              v287 = v285 + -1.0;
              if (v285 < 1.0)
                v287 = 1.0 - v285;
              v125 = v287 > 0.000001;
              v286 = v189;
              if (v125)
                v286 = (int8x16_t)vmulq_n_f32((float32x4_t)v189, 1.0 / sqrtf(v285));
            }
            *(float32x2_t *)v191.f32 = *a7;
            *(float32x2_t *)v192.i8 = a7[2];
            v288 = (float32x2_t)vzip1q_s32((int32x4_t)v191, v192).u64[0];
            v289 = (int32x4_t)v191;
            v289.i32[2] = a7[1].i32[0];
            v290 = (float32x2_t)vzip1_s32((int32x2_t)*a7, *(int32x2_t *)v192.i8);
            v192.i32[2] = a7[3].i32[0];
            v194.i32[0] = a7[5].i32[0];
            *(float32x2_t *)v195.i8 = a7[4];
            *(float32x2_t *)v196.f32 = a7[6];
            v196.i32[2] = a7[7].i32[0];
            v291 = (int8x16_t)vnegq_f32(v196);
            v195.i32[2] = v194.i32[0];
            v292 = (float32x2_t)vtrn2q_s32(v289, v192).u64[0];
            v293 = (float32x2_t)vzip2q_s32(v289, v192).u64[0];
            *(float32x2_t *)v294.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32(v290, *(float *)v291.i32), v292, *(float32x2_t *)v196.f32, 1), v293, v196, 2);
            *(float32x2_t *)&v294.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v195.i8, *(float32x2_t *)v291.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v195.i8, 1), *(float32x2_t *)v196.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v291, v291, 8uLL), v194);
            v295 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v286.i8, 1);
            v296 = (float32x2_t)vextq_s8(v286, v286, 8uLL).u64[0];
            *(float32x2_t *)v297.f32 = vmla_f32(vmla_f32(vmul_f32(v288, 0), 0, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v292, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v292, 1), 0xCuLL)), 0, v293);
            *(float32x2_t *)&v297.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v195.i8, 0), 0, *(float32x2_t *)v195.i8, 1), 0, (float32x2_t)*(_OWORD *)&vextq_s8(v195, v195, 8uLL));
            v298 = (int8x16_t)vaddq_f32(v297, v294);
            *(float32x2_t *)v286.i8 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v298.i8, *(float32x2_t *)v286.i8), v295, *(float32x2_t *)v298.i8, 1), v296, (float32x2_t)*(_OWORD *)&vextq_s8(v298, v298, 8uLL)), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v371, *(float32x2_t *)v286.i8), v295, *(float32x2_t *)v371, 1), v296, (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v371, *(int8x16_t *)v371, 8uLL)));
            v298.i32[0] = 0;
            v299 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)v298, (float32x4_t)v286), 0), (int8x16_t)vnegq_f32((float32x4_t)v189), v189);
            *(_DWORD *)&v371[20] = v299.i32[2];
            *(_QWORD *)&v371[12] = v299.i64[0];
            *(_QWORD *)v393 = *(_QWORD *)v371;
            *(_DWORD *)&v393[8] = *(_DWORD *)&v371[8];
            *(_QWORD *)&v393[12] = *(_QWORD *)((unint64_t)v371 | 0xC);
            *(_DWORD *)&v393[20] = *(_DWORD *)(((unint64_t)v371 | 0xC) + 8);
            v394 = v371[24];
            *(_OWORD *)v395 = *(_OWORD *)v372;
            v300 = __p[0];
            v372[1] = 0;
            memset(__p, 0, sizeof(__p));
            v372[0] = 0;
            v397 = *(_OWORD *)&__p[1];
            v396 = v300;
            v398 = __p[3];
            v399 = 1;
LABEL_223:
            if (v372[0])
            {
              v372[1] = v372[0];
              operator delete(v372[0]);
            }
            v177 = v425;
            if (v425)
              goto LABEL_226;
            goto LABEL_235;
          }
LABEL_304:
          v113 = a2;
          v165 = v353;
          goto LABEL_357;
        }
      }
      *(_DWORD *)&v437[8] = v198.i32[2];
      *(_QWORD *)v437 = v198.i64[0];
      *(_DWORD *)&v437[20] = v347.i32[2];
      *(_QWORD *)&v437[12] = v347.i64[0];
      if (v346)
      {
        *((float *)&v439 + 2) = v228;
        if (!v430)
        {
LABEL_285:
          if (v432 && v228 >= v431)
          {
LABEL_287:
            v434 = v215;
            operator delete(v215);
            goto LABEL_301;
          }
          v346 = 1;
          v212 = v228;
          v345 = v227;
          goto LABEL_245;
        }
      }
      else
      {
        v437[24] = 1;
        *((float *)&v439 + 2) = v228;
        if (!v430)
          goto LABEL_285;
      }
      if (v227 >= v429)
        goto LABEL_287;
      goto LABEL_285;
    }
    v393[0] = 0;
    v399 = 0;
    if (!v425)
      goto LABEL_235;
LABEL_226:
    v199 = v426;
    v200 = v177;
    if (v426 != v177)
    {
      do
      {
        v201 = (void *)*((_QWORD *)v199 - 3);
        if (v201)
        {
          *((_QWORD *)v199 - 2) = v201;
          operator delete(v201);
        }
        v202 = (void *)*((_QWORD *)v199 - 6);
        if (v202)
        {
          *((_QWORD *)v199 - 5) = v202;
          operator delete(v202);
        }
        v199 -= 80;
      }
      while (v199 != v177);
      v200 = v425;
    }
    v426 = v177;
    operator delete(v200);
LABEL_235:
    if (v176)
      operator delete(v176);
    if (!v399)
      goto LABEL_412;
    sub_223F4A94C(v419, &v409);
    sub_223F2B9A0((uint64_t)v393, &v386, v203);
    v384 = *(_OWORD *)v113;
    v385 = v113[2];
    v204 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a8 + 16))(a8);
    sub_223F532C4((uint64_t)&v384, (uint64_t)v419, a7, v204, (uint64_t)v393, (float32x2_t *)&v386, (uint64_t)&v427);
    sub_2236EA858((uint64_t)v419, &v409, &v409);
    v205 = v427;
    if (v427 == v428)
      goto LABEL_405;
    v206 = a10;
    if (!a11)
      goto LABEL_378;
    v208 = (_BYTE *)a10[1];
    v207 = a10[2];
    if ((unint64_t)v208 < v207)
    {
      *v208 = v409;
      v209 = (uint64_t)(v208 + 1);
      goto LABEL_377;
    }
    v244 = (_BYTE *)*a10;
    v245 = (unint64_t)&v208[-*a10];
    v246 = v245 + 1;
    if ((uint64_t)(v245 + 1) < 0)
      sub_22316E078();
    v247 = v207 - (_QWORD)v244;
    if (2 * v247 > v246)
      v246 = 2 * v247;
    if (v247 >= 0x3FFFFFFFFFFFFFFFLL)
      v248 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v248 = v246;
    if (!v248)
    {
      v249 = 0;
      v250 = &v208[-*a10];
      *(_BYTE *)v245 = v409;
      v209 = v245 + 1;
      if (v208 != v244)
        goto LABEL_296;
LABEL_306:
      v254 = a10;
      *a10 = v250;
      a10[1] = v209;
      a10[2] = &v249[v248];
      if (v208)
        goto LABEL_376;
      goto LABEL_307;
    }
    v249 = operator new(v248);
    v250 = &v249[v245];
    v249[v245] = v409;
    v209 = (uint64_t)&v249[v245 + 1];
    if (v208 == v244)
      goto LABEL_306;
LABEL_296:
    if (v245 < 8 || (unint64_t)(v244 - v249) < 0x20)
      goto LABEL_373;
    if (v245 >= 0x20)
    {
      v251 = v245 & 0xFFFFFFFFFFFFFFE0;
      v301 = &v249[v245 - 16];
      v302 = (__int128 *)(v208 - 16);
      v303 = v245 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v304 = *v302;
        *(v301 - 1) = *(v302 - 1);
        *v301 = v304;
        v301 -= 2;
        v302 -= 2;
        v303 -= 32;
      }
      while (v303);
      if (v245 == v251)
        goto LABEL_375;
      if ((v245 & 0x18) != 0)
        goto LABEL_368;
      v250 -= v251;
      v208 -= v251;
LABEL_373:
      v309 = v250 - 1;
      do
      {
        v310 = *--v208;
        *v309-- = v310;
      }
      while (v208 != v244);
      goto LABEL_375;
    }
    v251 = 0;
LABEL_368:
    v250 -= v245 & 0xFFFFFFFFFFFFFFF8;
    v305 = &v249[&v208[-v251] - v244 - 8];
    v306 = (uint64_t *)&v208[-v251 - 8];
    v307 = v251 - (v245 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v308 = *v306--;
      *v305-- = v308;
      v307 += 8;
    }
    while (v307);
    v208 -= v245 & 0xFFFFFFFFFFFFFFF8;
    if (v245 != (v245 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_373;
LABEL_375:
    v254 = a10;
    v208 = (_BYTE *)*a10;
    *a10 = v249;
    a10[1] = v209;
    a10[2] = &v249[v248];
    if (!v208)
    {
LABEL_307:
      v206 = v254;
      goto LABEL_377;
    }
LABEL_376:
    operator delete(v208);
    v206 = a10;
LABEL_377:
    v206[1] = v209;
LABEL_378:
    v311 = (float *)v400;
    if (v400 == v401)
    {
      v313 = v165;
      v314 = 0.0;
    }
    else
    {
      v312 = 0.0;
      do
      {
        v312 = v312 + sqrtf(v311[8]);
        v311 += 9;
      }
      while (v311 != (float *)v401);
      v313 = v165;
      v314 = v312 / (float)(unint64_t)(0x71C71C71C71C71C7 * (((_BYTE *)v400 - v401) >> 2));
    }
    *(float64x2_t *)v371 = vcvtq_f64_f32(*(float32x2_t *)v386.f32);
    *(float64x2_t *)&v371[16] = vcvtq_f64_f32(*(float32x2_t *)&v386.u32[2]);
    *(float64x2_t *)v372 = vcvtq_f64_f32((float32x2_t)v387);
    *(float64x2_t *)__p = vcvtq_f64_f32((float32x2_t)v388);
    *(float64x2_t *)&__p[2] = vcvtq_f64_f32((float32x2_t)v389);
    v374 = vcvtq_f64_f32((float32x2_t)v390);
    v375 = vcvtq_f64_f32(v391);
    v376 = vcvtq_f64_f32(v392);
    v377 = fmaxf(v314, 0.005);
    v446 = 0;
    v447 = 0;
    v448 = 0;
    v315 = v427;
    v316 = v428 - (_BYTE *)v427;
    if (v428 != v427)
    {
      if (v316 < 0)
        sub_22316E078();
      v317 = (char *)operator new(v428 - (_BYTE *)v427);
      v446 = v317;
      v447 = v317;
      v448 = (uint64_t)&v317[8 * (v316 >> 3)];
      v318 = v316 & 0xFFFFFFFFFFFFFFF8;
      memcpy(v317, v315, v318);
      v447 = &v317[v318];
    }
    v378 = 0uLL;
    v379 = 0;
    *(_QWORD *)&v378 = operator new(0x18uLL);
    *((_QWORD *)&v378 + 1) = v378;
    v379 = v378 + 24;
    *((_QWORD *)&v378 + 1) = sub_2236B97AC((uint64_t)&v379, (uint64_t)&v446, (uint64_t)v449, (_QWORD *)v378);
    v438 = *((_OWORD *)v313 + 2);
    v439 = *((_OWORD *)v313 + 3);
    v440 = *((_OWORD *)v313 + 4);
    v441 = *((_OWORD *)v313 + 5);
    *(_OWORD *)v437 = *(_OWORD *)v313;
    *(_OWORD *)&v437[16] = *((_OWORD *)v313 + 1);
    v319 = operator new(0x60uLL);
    v320 = v439;
    v319[2] = v438;
    v319[3] = v320;
    v321 = v441;
    v319[4] = v440;
    v319[5] = v321;
    v322 = *(_OWORD *)&v437[16];
    *v319 = *(_OWORD *)v437;
    v319[1] = v322;
    v380[0] = v319;
    v380[1] = v319 + 6;
    v381 = v319 + 6;
    v382 = 1;
    v383 = 1;
    if (v446)
    {
      v447 = v446;
      operator delete(v446);
    }
    v323 = *((_QWORD *)&v422 + 1);
    if (*((_QWORD *)&v422 + 1) >= v423)
    {
      v330 = sub_223F4A4D8((void **)&v422, (uint64_t)v371);
    }
    else
    {
      v324 = *(_OWORD *)v371;
      v325 = *(_OWORD *)&v371[16];
      v326 = *(_OWORD *)__p;
      *(_OWORD *)(*((_QWORD *)&v422 + 1) + 32) = *(_OWORD *)v372;
      *(_OWORD *)(v323 + 48) = v326;
      *(_OWORD *)v323 = v324;
      *(_OWORD *)(v323 + 16) = v325;
      v327 = *(_OWORD *)&__p[2];
      v328 = v374;
      v329 = v376;
      *(float64x2_t *)(v323 + 96) = v375;
      *(float64x2_t *)(v323 + 112) = v329;
      *(_OWORD *)(v323 + 64) = v327;
      *(float64x2_t *)(v323 + 80) = v328;
      *(float *)(v323 + 128) = v377;
      *(_QWORD *)(v323 + 136) = 0;
      *(_QWORD *)(v323 + 144) = 0;
      *(_QWORD *)(v323 + 152) = 0;
      *(_OWORD *)(v323 + 136) = v378;
      *(_QWORD *)(v323 + 152) = v379;
      v378 = 0uLL;
      v379 = 0;
      *(_BYTE *)(v323 + 160) = 0;
      *(_BYTE *)(v323 + 184) = 0;
      if (v382)
      {
        *(_QWORD *)(v323 + 160) = 0;
        *(_QWORD *)(v323 + 168) = 0;
        *(_QWORD *)(v323 + 176) = 0;
        *(_OWORD *)(v323 + 160) = *(_OWORD *)v380;
        *(_QWORD *)(v323 + 176) = v381;
        v380[0] = 0;
        v380[1] = 0;
        v381 = 0;
        *(_BYTE *)(v323 + 184) = 1;
      }
      *(_BYTE *)(v323 + 192) = v383;
      v330 = (char *)(v323 + 200);
    }
    *((_QWORD *)&v422 + 1) = v330;
    if (v382 && v380[0])
    {
      v380[1] = v380[0];
      operator delete(v380[0]);
    }
    v331 = v378;
    if ((_QWORD)v378)
    {
      v332 = *((_QWORD *)&v378 + 1);
      v333 = (void *)v378;
      if (*((_QWORD *)&v378 + 1) != (_QWORD)v378)
      {
        v334 = *((_QWORD *)&v378 + 1);
        do
        {
          v336 = *(void **)(v334 - 24);
          v334 -= 24;
          v335 = v336;
          if (v336)
          {
            *(_QWORD *)(v332 - 16) = v335;
            operator delete(v335);
          }
          v332 = v334;
        }
        while (v334 != v331);
        v333 = (void *)v378;
      }
      *((_QWORD *)&v378 + 1) = v331;
      operator delete(v333);
    }
    v205 = v427;
LABEL_405:
    if (v205)
    {
      v428 = v205;
      operator delete(v205);
    }
    if (v399)
    {
      if ((_QWORD)v397)
      {
        *((_QWORD *)&v397 + 1) = v397;
        operator delete((void *)v397);
      }
      if (v395[0])
      {
        v395[1] = v395[0];
        operator delete(v395[0]);
      }
    }
LABEL_412:
    if (v400)
    {
      v401 = v400;
      operator delete(v400);
    }
    if (v403)
    {
      v404 = v403;
      operator delete(v403);
    }
    v135 = v406;
LABEL_417:
    if (v135)
    {
      v407 = v135;
      operator delete(v135);
    }
    v117 = v350;
    v115 = v351;
    v116 = v365;
LABEL_135:
    if (++v116 != v115)
      continue;
    break;
  }
  v69 = (char *)v410;
LABEL_420:
  *(_OWORD *)a9 = v422;
  a9[2] = v423;
  v423 = 0;
  v422 = 0uLL;
  if (v69)
  {
    v411 = v69;
    operator delete(v69);
  }
  if (v413)
    operator delete(v413);
  if ((_QWORD)v417)
    operator delete((void *)v417);
  if (*(_QWORD *)v416)
    operator delete(*(void **)v416);
  v337 = v420[0];
  if (v420[0])
  {
    do
    {
      v338 = (_QWORD *)*v337;
      operator delete(v337);
      v337 = v338;
    }
    while (v338);
  }
  v339 = v419[0];
  v419[0] = 0;
  if (v339)
    operator delete(v339);
LABEL_432:
  if (!v445)
    sub_223198474();
  (*(void (**)(_QWORD *))(*v445 + 48))(v445);
  v340 = v445;
  if (v445 == v444)
  {
    v341 = 4;
    v340 = v444;
LABEL_437:
    (*(void (**)(void))(*v340 + 8 * v341))();
  }
  else if (v445)
  {
    v341 = 5;
    goto LABEL_437;
  }
  *(_QWORD *)v371 = &v422;
  sub_223F3A870((void ***)v371);
}

void sub_223F55DF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE138);
  STACK[0x290] = (unint64_t)&STACK[0x3D0];
  sub_223F3A870((void ***)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_223F561AC(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE148);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE148))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE140);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE148);
  }
  *a1 = qword_2540CE140;
}

void sub_223F56248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE148);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE148);
  _Unwind_Resume(a1);
}

uint64_t sub_223F562A0(uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(void **)(a1 + 56);
    if (v2)
    {
      *(_QWORD *)(a1 + 64) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      *(_QWORD *)(a1 + 40) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void sub_223F562E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, float32x2_t *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE *v10;
  void *__p;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;

  v13 = *(_OWORD *)a1;
  v14 = *(_QWORD *)(a1 + 16);
  sub_223F53460((uint64_t)&v15, &v13, a2);
  v10 = v15;
  if (v15 == v16)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    if (!v10)
      return;
    goto LABEL_5;
  }
  sub_223F2B420((v16 - (_BYTE *)v15) >> 3, (uint64_t)v15, a4, a5, a3, (uint64_t)&__p);
  sub_223F2C4C0((v12 - (_BYTE *)__p) >> 3, (char *)__p, (char **)a6, 1.0);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  v10 = v15;
  if (v15)
  {
LABEL_5:
    v16 = v10;
    operator delete(v10);
  }
}

void sub_223F563B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    operator delete(__p);
    v18 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v18 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void ***sub_223F56400(void ***result, uint32x2_t *a2, uint32x2_t *a3)
{
  void ***v3;
  uint64_t v4;
  uint32x2_t *v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  float32x2_t v11;
  void **v12;

  v3 = result;
  v9 = 0uLL;
  v10 = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 == a2)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if (v4 < 0)
      sub_22316E078();
    v6 = a2;
    *(_QWORD *)&v9 = operator new((char *)a3 - (char *)a2);
    *((_QWORD *)&v9 + 1) = v9;
    v10 = (void **)(v9 + 8 * (v4 >> 3));
    v12 = (void **)&v9;
    do
    {
      v11 = vcvt_f32_u32(*v6);
      result = sub_2232EA538(&v12, &v11);
      ++v6;
    }
    while (v6 != a3);
    v7 = v9;
    v8 = v10;
  }
  *(_OWORD *)v3 = v7;
  v3[2] = v8;
  return result;
}

void sub_223F564B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F564D4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x30uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_BYTE *)v11 + 16) = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_2231B0668(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*v11)
  {
    v26 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_223F567D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223EB996C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F567E8(_QWORD *result, __int128 *a2, unint64_t **a3, unint64_t a4)
{
  _QWORD *v5;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x1555555555555556)
      sub_22316E078();
    result = operator new(12 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 12 * a4;
    v16 = *a2;
    v17 = *((_QWORD *)a2 + 2);
    v8 = *a3;
    if ((unint64_t *)v16 != *a3)
    {
      v9 = v17;
      v10 = *(_QWORD *)v16;
      if (v17 <= *(_QWORD *)v16)
LABEL_8:
        sub_22457354C(&v17, v10);
      v11 = (char *)result + 12;
      v12 = (unint64_t *)(v16 + 8);
      while (1)
      {
        v13 = *((_QWORD *)&v16 + 1) + 12 * v10;
        v14 = *(_QWORD *)v13;
        *((_DWORD *)v11 - 1) = *(_DWORD *)(v13 + 8);
        *(_QWORD *)(v11 - 12) = v14;
        if (v12 == v8)
          break;
        v15 = *v12++;
        v10 = v15;
        v11 += 12;
        if (v9 <= v15)
          goto LABEL_8;
      }
      result = v11;
    }
    v5[1] = result;
  }
  return result;
}

void sub_223F568F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F56920(_QWORD *result, __int128 *a2, unint64_t **a3, unint64_t a4)
{
  _QWORD *v5;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x71C71C71C71C71DLL)
      sub_22316E078();
    result = operator new(36 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 36 * a4;
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v8 = *a3;
    if ((unint64_t *)v17 != *a3)
    {
      v9 = v18;
      v10 = *(_QWORD *)v17;
      if (v18 <= *(_QWORD *)v17)
LABEL_8:
        sub_22457354C(&v18, v10);
      v11 = (char *)result + 36;
      v12 = (unint64_t *)(v17 + 8);
      while (1)
      {
        v13 = *((_QWORD *)&v17 + 1) + 36 * v10;
        v14 = *(_OWORD *)v13;
        v15 = *(_OWORD *)(v13 + 16);
        *((_DWORD *)v11 - 1) = *(_DWORD *)(v13 + 32);
        *(_OWORD *)(v11 - 20) = v15;
        *(_OWORD *)(v11 - 36) = v14;
        if (v12 == v8)
          break;
        v16 = *v12++;
        v10 = v16;
        v11 += 36;
        if (v9 <= v16)
          goto LABEL_8;
      }
      result = v11;
    }
    v5[1] = result;
  }
  return result;
}

void sub_223F56A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F56A60(uint64_t result)
{
  if (result)
    JUMPOUT(0x227684CE8);
  return result;
}

void sub_223F56A80()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223F56A94(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24EC64430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_223F56ACC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC64430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_223F56AEC()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;

  kdebug_trace();
  sub_223F561AC(&v2);
  if (**(int **)(v2 + 56) <= 1)
  {
    v0 = atomic_load((unsigned __int8 *)&qword_2540CE158);
    if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE158))
    {
      qword_2540CE150 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SegmentBasedDetect");
      __cxa_guard_release(&qword_2540CE158);
    }
    v1 = qword_2540CE150;
    if (*(_BYTE *)(qword_2540CE150 + 16))
    {
      *(_QWORD *)(v1 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v1;
      *(_BYTE *)(v1 + 16) = 0;
    }
  }
}

void sub_223F56BD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE158);
  _Unwind_Resume(a1);
}

uint64_t sub_223F56BEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection25SegmentBasedPlaneDetecto"
                     "r22detectHorizontalPlanesENS6_15LookUpImageViewIKhNS6_18LabelProbAndNormalEEENS0_4spanIKN3cva6Matri"
                     "xIfLj3ELj1ELb1EEELm18446744073709551615EEENSC_IKNSE_IfLj3ELj3ELb1EEELm18446744073709551615EEERKNSD_"
                     "15SE3GroupStorageIfNSE_IfLj4ELj4ELb1EEEEERKNS5_6camera13PinholeCameraENS0_11OptionalRefINS3_6vector"
                     "IhNS3_9allocatorIhEEEEEEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection25SegmentBasedP"
                                "laneDetector22detectHorizontalPlanesENS6_15LookUpImageViewIKhNS6_18LabelProbAndNormalEEE"
                                "NS0_4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENSC_IKNSE_IfLj3ELj3ELb1E"
                                "EELm18446744073709551615EEERKNSD_15SE3GroupStorageIfNSE_IfLj4ELj4ELb1EEEEERKNS5_6camera1"
                                "3PinholeCameraENS0_11OptionalRefINS3_6vectorIhNS3_9allocatorIhEEEEEEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection25SegmentBasedPlaneDetector22detectHorizontalPlanesENS6_15LookUpImageViewIKhNS6_18LabelProbAndNormalEEENS0_4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENSC_IKNSE_IfLj3ELj3ELb1EEELm18446744073709551615EEERKNSD_15SE3GroupStorageIfNSE_IfLj4ELj4ELb1EEEEERKNS5_6camera13PinholeCameraENS0_11OptionalRefINS3_6vectorIhNS3_9allocatorIhEEEEEEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNKS_3acv16surfacedetection25SegmentBasedPlaneDetector22detectHorizontalPlanesENS6_15LookUpImageViewIKhNS6_18LabelProbAndNormalEEENS0_4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENSC_IKNSE_IfLj3ELj3ELb1EEELm18446744073709551615EEERKNSD_15SE3GroupStorageIfNSE_IfLj4ELj4ELb1EEEEERKNS5_6camera13PinholeCameraENS0_11OptionalRefINS3_6vectorIhNS3_9allocatorIhEEEEEEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F56C58()
{
  return &unk_24EC64490;
}

void sub_223F56C64(uint64_t a1@<X0>, const void *a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, float32x2_t **a6@<X8>, float a7@<S0>)
{
  float32x2_t v7;
  int8x16_t v12;
  __int128 v13;
  char *v14;
  int32x4_t v15;
  char *v16;
  float32x2_t *v17;
  float32x2_t *v18;
  float32x2_t *v19;
  float32x2_t v20;
  float32x2_t *v22;
  float32x2_t v23;
  int8x16_t v24;
  float32x2_t v25;
  char *v26;
  int8x16_t v27;
  float v28;
  char *v29;
  int8x16_t v30;
  float32x2_t v31;
  float v32;
  float v33;
  int8x16_t v34;
  float32x2_t v35;
  int32x4_t v36;
  float32x2_t v37;
  float v38;
  float v39;
  int8x16_t v40;
  float32x2_t v41;
  float32x4_t v42;
  float v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x2_t *v58;
  float32x2_t *v59;
  unint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  float32x2_t *v63;
  char *v64;
  float32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  __int128 v70;
  float32x2_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x2_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x2_t *v77;
  __int128 v78;

  sub_223F09F90(0xCuLL, &v77, a7);
  v67 = (int32x2_t)*a3;
  v12.i32[0] = a3[1].i32[0];
  v66 = (int32x2_t)a3[2];
  *(float32x2_t *)&v13 = a3[4];
  v70 = v13;
  v7.i32[0] = a3[5].i32[0];
  *(float32x2_t *)&v13 = a3[6];
  v65 = (float32x2_t)v13;
  LODWORD(v13) = a3[7].i32[0];
  v12.i32[1] = a3[3].i32[0];
  v71 = (float32x2_t)v13;
  v73 = v12;
  v14 = (char *)operator new(0x90uLL);
  v16 = v14;
  v17 = v77;
  if (*(float *)(a5 + 20) < 0.0 && v77 != (float32x2_t *)v78)
  {
    v18 = (float32x2_t *)(v78 - 8);
    if ((uint64_t)v78 - 8 > (unint64_t)v77)
    {
      v19 = v77 + 1;
      do
      {
        v20 = v19[-1];
        v19[-1] = *v18;
        *v18-- = v20;
      }
      while (v19++ < v18);
      v17 = v77;
    }
  }
  v22 = (float32x2_t *)v78;
  if (v17 != (float32x2_t *)v78)
  {
    v23.i32[1] = v65.i32[1];
    v24.i64[1] = *((_QWORD *)&v70 + 1);
    v25.i32[1] = v71.i32[1];
    *(float32x2_t *)v27.i8 = vmla_n_f32(vmla_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(v67, v66), v65.f32[0]), (float32x2_t)vzip2_s32(v67, v66), v65, 1), *(float32x2_t *)v73.i8, v71.f32[0]);
    v26 = v14 + 144;
    v27.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v70, v65), (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1), *(float32x2_t *)&v70, 1), v71, v7);
    v72 = (float32x4_t)v27;
    v28 = 1.0;
    v29 = v14;
    while (1)
    {
      v25.i32[0] = *(_DWORD *)(a5 + 20);
      v24.i64[0] = *(_QWORD *)(a5 + 12);
      v30 = v24;
      v30.i32[2] = v25.i32[0];
      v31 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1);
      v32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v24.i8, *(float32x2_t *)v24.i8), v31, *(float32x2_t *)v24.i8, 1), v25, v25).f32[0];
      if (v32 == v28)
        goto LABEL_20;
      v33 = v32 + -1.0;
      if (v32 < v28)
        v33 = v28 - v32;
      if (v33 <= 0.000001)
      {
LABEL_20:
        v24.i32[0] = *(_DWORD *)(a5 + 8);
        v25.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a5, *(float32x2_t *)v30.i8), v31, *(float32x2_t *)a5, 1), v25, *(float32x2_t *)v24.i8).f32[0];
      }
      else
      {
        v23.f32[0] = v28 / sqrtf(v32);
        v34 = (int8x16_t)vmulq_n_f32((float32x4_t)v30, v23.f32[0]);
        v27.i64[0] = *(_QWORD *)a5;
        v27.i32[2] = *(_DWORD *)(a5 + 8);
        v35 = vmul_lane_f32(v23, *(float32x2_t *)v24.i8, 1);
        *(float32x2_t *)v15.i8 = vmul_f32(v25, v23);
        v36.i64[0] = v34.i64[0];
        v36.u64[1] = (unint64_t)v35;
        v30 = (int8x16_t)vuzp1q_s32(v36, v15);
        v37 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1);
        v25 = (float32x2_t)vextq_s8(v34, v34, 8uLL).u64[0];
        v38 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8), v35, *(float32x2_t *)v34.i8, 1), v25, *(float32x2_t *)v15.i8).f32[0];
        if (v38 == v28)
          goto LABEL_45;
        v39 = v38 + -1.0;
        if (v38 < v28)
          v39 = v28 - v38;
        if (v39 <= 0.000001)
        {
LABEL_45:
          v25.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v34.i8), v37, *(float32x2_t *)v27.i8, 1), v25, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0];
          goto LABEL_22;
        }
        *(float *)v30.i32 = sqrtf(v38);
        v40 = (int8x16_t)vmulq_n_f32((float32x4_t)v34, v28 / *(float *)v30.i32);
        v24 = vextq_s8(v27, v27, 8uLL);
        v41 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v40.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1), *(float32x2_t *)v27.i8, 1);
        v25 = (float32x2_t)vextq_s8(v40, v40, 8uLL).u64[0];
        v25.f32[0] = -vmla_f32(v41, v25, *(float32x2_t *)v24.i8).f32[0];
        v30 = (int8x16_t)vdivq_f32((float32x4_t)v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 0));
      }
      v34 = v30;
LABEL_22:
      *(float32x2_t *)v24.i8 = *v17;
      v42 = (float32x4_t)v24;
      v42.f32[2] = v28;
      v24.i32[2] = -1.0;
      v27 = (int8x16_t)vsubq_f32(v42, v72);
      v24 = (int8x16_t)vsubq_f32(vsubq_f32((float32x4_t)v24, v72), (float32x4_t)v27);
      v23 = (float32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
      v15 = (int32x4_t)vextq_s8(v24, v24, 8uLL);
      LODWORD(v43) = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v24.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1), *(float32x2_t *)v30.i8, 1), *(float32x2_t *)v15.i8, v23).u32[0];
      if (fabsf(v43) >= 0.00000011921)
      {
        v25.f32[0] = -v25.f32[0];
        v44 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v27, (float32x4_t)v34, v25, 0);
        v34 = vextq_s8(v44, v44, 8uLL);
        v27 = (int8x16_t)vmlaq_n_f32((float32x4_t)v27, (float32x4_t)v24, (float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v44.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1), *(float32x2_t *)v44.i8, 1), *(float32x2_t *)v34.i8, v23).f32[0]/ v43);
        v73 = v27;
      }
      v34.i32[0] = a3[1].i32[0];
      v27.i32[0] = a3[3].i32[0];
      v23.i32[0] = a3[5].i32[0];
      *(float32x2_t *)v45.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*a3, *(float *)v73.i32), a3[2], *(float32x2_t *)v73.i8, 1), a3[4], (float32x4_t)v73, 2);
      v25 = (float32x2_t)vextq_s8(v73, v73, 8uLL).u64[0];
      *(float32x2_t *)&v45.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v73.i8), *(float32x2_t *)v27.i8, *(float32x2_t *)v73.i8, 1), v25, v23);
      *(float32x2_t *)v34.i8 = a3[6];
      v34.i32[2] = a3[7].i32[0];
      v46 = vaddq_f32(v45, (float32x4_t)v34);
      LODWORD(v75) = v46.i32[2];
      v74 = *(float32x2_t *)v46.f32;
      if (v46.f32[2] > v28
        && (v47 = (*(uint64_t (**)(uint64_t, float32x2_t *, uint64_t *, float32_t))(*(_QWORD *)a4 + 72))(a4, &v74, &v76, v46.f32[2]), v28 = 1.0, v47))
      {
        v48 = v76;
        if (v29 >= v26)
        {
          v55 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v16) >> 2) + 1;
          if (v55 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((v26 - v16) >> 2) > v55)
            v55 = 0x5555555555555556 * ((v26 - v16) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v26 - v16) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v50 = 0x1555555555555555;
          else
            v50 = v55;
          if (v50)
          {
            if (v50 > 0x1555555555555555)
              sub_223174E94();
            v51 = (char *)operator new(12 * v50);
            v28 = 1.0;
            v52 = (uint64_t)&v51[4 * ((v29 - v16) >> 2)];
            *(_QWORD *)v52 = v48;
            *(_BYTE *)(v52 + 8) = 1;
            if (v29 != v16)
            {
LABEL_57:
              v56 = v52;
              v54 = (char *)v52;
              do
              {
                *(v54 - 12) = 0;
                v54 -= 12;
                v54[8] = 0;
                if (*(v29 - 4))
                {
                  *(_QWORD *)(v56 - 12) = *(_QWORD *)(v29 - 12);
                  *(_BYTE *)(v56 - 4) = 1;
                }
                v29 -= 12;
                v56 = (uint64_t)v54;
              }
              while (v29 != v16);
              goto LABEL_63;
            }
          }
          else
          {
            v51 = 0;
            v52 = 4 * ((v29 - v16) >> 2);
            *(_QWORD *)v52 = v76;
            *(_BYTE *)(v52 + 8) = 1;
            if (v29 != v16)
              goto LABEL_57;
          }
          v54 = (char *)v52;
LABEL_63:
          v26 = &v51[12 * v50];
          v29 = (char *)(v52 + 12);
          if (v16)
          {
            operator delete(v16);
            v28 = 1.0;
          }
          v16 = v54;
          if (++v17 == v22)
          {
LABEL_65:
            v17 = v77;
            v57 = a1;
            if (v77)
              goto LABEL_66;
            goto LABEL_67;
          }
        }
        else
        {
          *(_QWORD *)v29 = v76;
          v29[8] = 1;
          v29 += 12;
          if (++v17 == v22)
            goto LABEL_65;
        }
      }
      else
      {
        if (v29 >= v26)
        {
          v49 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v16) >> 2) + 1;
          if (v49 > 0x1555555555555555)
            sub_22316E078();
          if (0x5555555555555556 * ((v26 - v16) >> 2) > v49)
            v49 = 0x5555555555555556 * ((v26 - v16) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v26 - v16) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v50 = 0x1555555555555555;
          else
            v50 = v49;
          if (v50)
          {
            if (v50 > 0x1555555555555555)
              sub_223174E94();
            v51 = (char *)operator new(12 * v50);
            v28 = 1.0;
            v52 = (uint64_t)&v51[4 * ((v29 - v16) >> 2)];
            *(_BYTE *)v52 = 0;
            *(_BYTE *)(v52 + 8) = 0;
            if (v29 != v16)
            {
LABEL_41:
              v53 = v52;
              v54 = (char *)v52;
              do
              {
                *(v54 - 12) = 0;
                v54 -= 12;
                v54[8] = 0;
                if (*(v29 - 4))
                {
                  *(_QWORD *)(v53 - 12) = *(_QWORD *)(v29 - 12);
                  *(_BYTE *)(v53 - 4) = 1;
                }
                v29 -= 12;
                v53 = (uint64_t)v54;
              }
              while (v29 != v16);
              goto LABEL_63;
            }
          }
          else
          {
            v51 = 0;
            v52 = 4 * ((v29 - v16) >> 2);
            *(_BYTE *)v52 = 0;
            *(_BYTE *)(v52 + 8) = 0;
            if (v29 != v16)
              goto LABEL_41;
          }
          v54 = (char *)v52;
          goto LABEL_63;
        }
        *v29 = 0;
        v29[8] = 0;
        v29 += 12;
        if (++v17 == v22)
          goto LABEL_65;
      }
    }
  }
  v29 = v14;
  v57 = a1;
  if (v17)
  {
LABEL_66:
    *(_QWORD *)&v78 = v17;
    operator delete(v17);
  }
LABEL_67:
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (!v57)
  {
    v59 = 0;
    v58 = 0;
    if (v29 == v16)
      goto LABEL_81;
    goto LABEL_74;
  }
  if (8 * v57 < 0)
    sub_22316E078();
  v58 = (float32x2_t *)operator new(8 * v57);
  *a6 = v58;
  a6[2] = &v58[(8 * v57) >> 3];
  memcpy(v58, a2, 8 * v57);
  v59 = &v58[v57];
  a6[1] = v59;
  if (v29 != v16)
  {
LABEL_74:
    v60 = 0;
    v61 = (v29 - v16) / 12;
    v62 = v16 + 8;
    do
    {
      ++v60;
      if (*v62)
      {
        v64 = &v16[12 * (v60 % v61)];
        if (v64[8])
        {
          v74 = *(float32x2_t *)(v62 - 8);
          v75 = *(_QWORD *)v64;
          sub_223F2C9EC(v59 - v58, (uint64_t)v58, &v74, &v77);
          if (v58)
          {
            a6[1] = v58;
            operator delete(v58);
            *a6 = 0;
            a6[1] = 0;
            a6[2] = 0;
          }
          v58 = v77;
          *a6 = v77;
          v63 = (float32x2_t *)v78;
          *(_OWORD *)(a6 + 1) = v78;
          v59 = v63;
        }
      }
      v62 += 12;
    }
    while (v61 != v60);
  }
LABEL_81:
  operator delete(v16);
}

void sub_223F573E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  v20 = *(void **)(v18 - 128);
  if (v20)
  {
    *(_QWORD *)(v18 - 120) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_223F5745C(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, __int128 *a3@<X2>, unsigned __int8 **a4@<X3>, unsigned int *a5@<X4>, float32x2_t *a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  unint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  BOOL v21;
  char *v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  BOOL v30;
  char *v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unint64_t v53;
  int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  void *v57;
  BOOL v58;
  char *v59;
  unsigned __int8 *v60;
  BOOL v61;
  void *v62;
  unsigned __int8 *v63;
  void *v64;
  int32x2_t v65;
  uint64_t v70;
  float32x2_t *v71;
  float32x2_t *v72;
  float32x2_t *v73;
  float32x2_t *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  BOOL v78;
  uint64_t v79;
  _BYTE *v80;
  float32x2_t *v81;
  float32x2_t *v82;
  float32x2_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  float32x2_t *v87;
  float32x2_t *i;
  float32x2_t v89;
  unint64_t v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  char *v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x4_t v98;
  unsigned __int8 *v99;
  char *v100;
  unsigned __int8 *v101;
  uint64_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  __int128 v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  uint64_t v122;
  char *v123;
  float32x2_t *v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int32x4_t v128;
  float v129;
  float32x2_t v131;
  float32x2_t v132;
  void *v133;
  uint64_t v134;
  float32x2_t *v135;
  _QWORD *v136;
  _QWORD *v137;
  void *v138;
  uint64_t v139;
  unint64_t v140;
  void *v141;
  uint32x2_t *v142;
  unsigned __int32 v143;
  unsigned __int32 v144;
  unint64_t v145;
  uint8x8_t v146;
  unint64_t v147;
  uint64_t ***v148;
  uint64_t **v149;
  unint64_t v150;
  unint64_t v151;
  uint32x2_t *v152;
  unsigned __int32 v153;
  unsigned __int32 v154;
  unsigned __int32 v155;
  unsigned __int32 v156;
  unsigned __int32 v157;
  unsigned __int32 v158;
  char *v159;
  char *v160;
  uint64_t v161;
  float v162;
  uint64_t v163;
  float *v164;
  float v165;
  uint64_t v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  uint8x8_t v173;
  unint64_t v174;
  uint64_t ***v175;
  uint64_t **v176;
  unint64_t v177;
  uint64_t *v178;
  _QWORD *v179;
  _BYTE *v180;
  _BYTE *v181;
  uint64_t v182;
  uint32x2_t *v183;
  void *v184;
  float v185;
  float *v186;
  float v187;
  uint64_t v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  unsigned __int8 *v198;
  char *v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  unsigned __int8 *v209;
  void *v210;
  char *v211;
  char *v212;
  void *v213;
  void *v214;
  _QWORD *v215;
  _QWORD *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  void *v222;
  void *v223;
  _QWORD *v224;
  void *v225;
  _QWORD *v226;
  float32x2_t v227;
  int32x4_t v228;
  __int32 v229;
  int32x4_t v230;
  __n128 v231;
  int8x16_t v232;
  float32x4_t v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  int32x4_t v236;
  int32x4_t v237;
  int8x16_t v238;
  float32x2_t v239;
  int8x16_t v240;
  unint64_t v241;
  float32x2_t v242;
  _QWORD *v243;
  void *v244;
  unint64_t v245;
  double *v246;
  double v247;
  double v248;
  uint64_t v249;
  const void *v250;
  unint64_t v251;
  uint64_t v252;
  char v253;
  char v254;
  _QWORD *v255;
  _QWORD *v256;
  void *v257;
  float32x2_t *v258;
  float32x2_t *v259;
  float32x2_t *v260;
  float32x4_t v261;
  float32x4_t v262;
  int8x16_t v263;
  float32x2_t v264;
  float32x4_t v265;
  _QWORD *v266;
  int32x2_t v267;
  float v268;
  float32x2_t v270;
  float32x2_t v271;
  float32x2_t v272;
  float32x2_t v273;
  float32x2_t v274;
  float32x2_t v275;
  float32x2_t v276;
  float32x2_t v277;
  int32x2_t v278;
  int32x2_t v279;
  float32x2_t v280;
  int32x2_t v281;
  float32x2_t v282;
  float v283;
  int8x16_t v284;
  double v285;
  int8x16_t v286;
  float32x4_t v287;
  float32x2_t v288;
  float v289;
  float32x2_t *v290;
  float32x2_t *v291;
  float32x2_t v292;
  float32x2_t v293;
  int8x16_t v294;
  float32x2_t v295;
  float32x4_t v296;
  float32x2_t v297;
  float v298;
  float v299;
  float v301;
  float v302;
  float v304;
  float v305;
  BOOL v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x2_t v310;
  float32x4_t v311;
  float64_t v312;
  __int128 v313;
  _QWORD *v314;
  float32x2_t v315;
  float32x2_t v316;
  float32x2_t v317;
  int8x16_t v318;
  float v319;
  float v320;
  _BYTE *v321;
  uint64_t v322;
  int8x16_t v323;
  float32x4_t v324;
  float32x2_t v325;
  float32x2_t v326;
  float32x2_t v327;
  float32x2_t v328;
  float32x4_t v329;
  int8x16_t v330;
  float v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  unsigned __int8 *v336;
  void *v337;
  void *v338;
  unsigned __int8 v339;
  uint64_t v340;
  unsigned __int8 *v341;
  uint64_t v342;
  float32x4_t v343;
  __int128 v345;
  float32x2_t v346;
  float32x2_t *v349;
  float32x2_t v350;
  unsigned __int8 *v354;
  unsigned __int8 *v355;
  unsigned __int8 *v356;
  float32x2_t v357;
  _QWORD *v358;
  void *v359;
  uint64_t v360;
  float32x2_t v361;
  uint64_t v362;
  float32x2_t v363;
  uint64_t v364;
  float32x4_t v365;
  unsigned __int8 *v366;
  unsigned int v369;
  int32x2_t v370;
  uint64_t v371;
  __int128 v372;
  unsigned int v373;
  uint64_t v374;
  char *v375;
  char *v376;
  float32x4_t v377;
  __int128 v378;
  __int128 v379;
  float32x2_t v380;
  float32x2_t v381;
  uint64_t v382;
  void *v383[2];
  void *v384[2];
  __int128 v385;
  float32x2_t v386;
  void *v387[2];
  uint64_t v388;
  _BYTE v389[48];
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  int v395;
  uint64_t v396[3];
  __int128 v397;
  uint64_t v398;
  char v399;
  char v400;
  void *v401;
  _BYTE *v402;
  void *v403;
  _BYTE *v404;
  uint64_t v405;
  unsigned __int8 *v406;
  __int128 v407;
  float32x2_t v408;
  void *__p;
  char *v410;
  char *v411;
  void *v412;
  unsigned __int8 *v413;
  char *v414;
  _BYTE v415[24];
  void *v416[2];
  void *v417[2];
  void *v418[2];
  __int128 v419;
  __int128 v420;
  __int128 v421;
  void *v422[3];
  __int128 v423;
  uint64_t v424;
  uint64_t v425[3];
  simd_float3x3 v426;

  v425[0] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223F599F0(v389);
  v10 = a7;
  if (**(int **)(*(_QWORD *)v389 + 56) <= 1)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_2540CE168);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE168))
    {
      qword_2540CE160 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SegmentPlaneDetect");
      __cxa_guard_release(&qword_2540CE168);
      v10 = a7;
    }
    v12 = qword_2540CE160;
    *(_BYTE *)(qword_2540CE160 + 16) = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v12 = std::chrono::steady_clock::now();
    *(_BYTE *)(v12 + 16) = 1;
  }
  if (!v10)
  {
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    goto LABEL_426;
  }
  v371 = v10;
  if (!(_BYTE)v10)
  {
    v72 = 0;
LABEL_171:
    *a9 = 0;
    a9[1] = 0;
    v73 = v72;
    a9[2] = 0;
    goto LABEL_424;
  }
  v355 = *a2;
  v341 = a2[1];
  v14 = *((unsigned int *)a2 + 4);
  v13 = *((unsigned int *)a2 + 5);
  v15 = a2[3];
  v16 = a2[4];
  v423 = *a3;
  v424 = *((_QWORD *)a3 + 2);
  sub_223F5A0E4((unsigned __int8 **)&v423, a1, (uint64_t)v389);
  if (*(_DWORD *)&v389[4])
    _ZF = *(_DWORD *)v389 == 0;
  else
    _ZF = 1;
  v18 = *(_QWORD *)v389;
  if (_ZF)
    v18 = 0;
  v362 = *(_QWORD *)&v389[40];
  v364 = v18;
  v360 = *(_QWORD *)&v389[8];
  if (HIDWORD(v18) * *(_DWORD *)&v389[12] == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v416[0] = v355;
  v416[1] = v341;
  v417[0] = (void *)__PAIR64__(v13, v14);
  v417[1] = v15;
  v418[0] = v16;
  sub_223F5A2F4((unsigned __int8 **)v416, a7, a8, (uint64_t *)v415);
  v19 = *(_QWORD **)v415;
  v358 = *(_QWORD **)&v415[8];
  if (*(_QWORD *)v415 == *(_QWORD *)&v415[8])
    goto LABEL_135;
  do
  {
    v377.i64[0] = v362;
    v377.i64[1] = v364;
    *(_QWORD *)&v378 = v360;
    v20 = (void *)v19[5];
    if (*((_DWORD *)v19 + 1))
      v21 = *(_DWORD *)v19 == 0;
    else
      v21 = 1;
    v22 = (char *)*v19;
    v23 = v19[1];
    if (v21)
      v24 = 0;
    else
      v24 = (void *)*v19;
    v25 = HIDWORD(v23);
    if (HIDWORD(v24) * HIDWORD(v23) == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        goto LABEL_433;
      }
      v29 = (void *)v19[5];
      LODWORD(v28) = *(_DWORD *)v19;
      LODWORD(v26) = *((_DWORD *)v19 + 1);
      v22 = (char *)*v19;
      v27 = (char *)v19[1];
      v25 = (unint64_t)v27 >> 32;
    }
    else
    {
      v26 = (unint64_t)v22 >> 32;
      v27 = (char *)v19[1];
      v28 = *v19;
      v29 = (void *)v19[5];
    }
    v383[0] = v20;
    v383[1] = v24;
    v384[0] = (void *)v23;
    if ((_DWORD)v26)
      v30 = (_DWORD)v28 == 0;
    else
      v30 = 1;
    if (v30)
      v31 = 0;
    else
      v31 = v22;
    if ((_DWORD)v25 * HIDWORD(v31) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
LABEL_433:
      abort();
    }
    __p = v29;
    v410 = v31;
    v411 = v27;
    sub_223F5A780((uint64_t)&v377, (uint64_t)v383, (uint64_t)&__p);
    v19 += 9;
  }
  while (v19 != v358);
  v19 = *(_QWORD **)v415;
  if (*(_QWORD *)v415 == *(_QWORD *)&v415[8])
  {
LABEL_135:
    v72 = 0;
    v73 = 0;
    v90 = a7;
    if (v19)
      goto LABEL_143;
    goto LABEL_150;
  }
  LOBYTE(__p) = 0;
  if (*(_DWORD *)(*(_QWORD *)v415 + 4))
    v32 = **(_DWORD **)v415 == 0;
  else
    v32 = 1;
  v33 = **(_QWORD **)v415;
  if (v32)
    v33 = 0;
  v34 = v33 << 32;
  if (!HIDWORD(v33))
    v34 = 0;
  if ((_DWORD)v33)
    v35 = HIDWORD(v33) == 0;
  else
    v35 = 1;
  v416[0] = (void *)v33;
  v416[1] = (void *)(v34 | (v33 != 0));
  LOBYTE(v417[0]) = 0;
  LOBYTE(v417[1]) = 0;
  v377.i64[0] = (uint64_t)v416[1];
  if (v35)
    v33 = 0;
  v383[0] = (void *)v33;
  if ((HIDWORD(v34) & (HIDWORD(v34) - 1)) != 0)
    v36 = 1;
  else
    v36 = HIDWORD(v34);
  sub_223F3A558((size_t *)v418, v383, (void **)&v377, 1, (uint64_t)&__p, 1, v36);
  v37 = 0;
  do
  {
    if (LODWORD(v416[0]))
      v38 = HIDWORD(v416[0]) == 0;
    else
      v38 = 1;
    if (v38)
      goto LABEL_83;
    v39 = v16[28 * *(unsigned __int8 *)(a8 + v37) + 24];
    v40 = LODWORD(v416[0]) - 1;
    v41 = LODWORD(v416[1]);
    v42 = v418[1];
    v43 = HIDWORD(v416[0]) - 1;
    if (HIDWORD(v416[0]) == 1)
    {
      v50 = v355;
      if (LODWORD(v416[0]) == 1)
        goto LABEL_74;
      goto LABEL_68;
    }
    v44 = HIDWORD(v416[1]);
    if (LODWORD(v416[0]) != 1)
    {
      v45 = 0;
      v46 = v355;
      do
      {
        v47 = v40;
        v48 = v42;
        v49 = v46;
        do
        {
          if ((unint64_t)v15 > *v49 && v16[28 * *v49 + 24] == v39)
            *v48 = 1;
          v48 += v41;
          v49 += v14;
          --v47;
        }
        while (v47);
        if ((unint64_t)v15 > v46[v14 * (unint64_t)v40]
          && v16[28 * v46[v14 * (unint64_t)v40] + 24] == v39)
        {
          *v48 = 1;
        }
        v42 += v44;
        v46 += v13;
        ++v45;
      }
      while (v45 != v43);
      v50 = &v355[v13 * (unint64_t)v43];
LABEL_68:
      v51 = v40;
      v52 = v50;
      do
      {
        if ((unint64_t)v15 > *v52 && v16[28 * *v52 + 24] == v39)
          *v42 = 1;
        v42 += v41;
        v52 += v14;
        --v51;
      }
      while (v51);
      v50 += v14 * (unint64_t)v40;
LABEL_74:
      v53 = *v50;
      if ((unint64_t)v15 <= v53)
        goto LABEL_83;
LABEL_75:
      if (v16[28 * v53 + 24] == v39)
        *v42 = 1;
      goto LABEL_83;
    }
    v54 = HIDWORD(v416[0]) - 1;
    v55 = v355;
    do
    {
      if ((unint64_t)v15 > *v55 && v16[28 * *v55 + 24] == v39)
        *v42 = 1;
      v42 += v44;
      v55 += v13;
      --v54;
    }
    while (v54);
    v53 = v355[v13 * (unint64_t)v43];
    if ((unint64_t)v15 > v53)
      goto LABEL_75;
LABEL_83:
    v56 = *(_QWORD *)v415 + 72 * v37;
    v57 = *(void **)(v56 + 40);
    if (*(_DWORD *)(v56 + 4))
      v58 = *(_DWORD *)v56 == 0;
    else
      v58 = 1;
    v59 = *(char **)(v56 + 8);
    if (v58)
      v60 = 0;
    else
      v60 = *(unsigned __int8 **)v56;
    if (HIDWORD(v60) * HIDWORD(v59) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C)|| ((v412 = v57, v413 = v60, v414 = v59, HIDWORD(v416[0])) ? (v61 = LODWORD(v416[0]) == 0) : (v61 = 1), !v61 ? (v62 = v416[0]) : (v62 = 0), (v63 = (unsigned __int8 *)v418[1], v64 = v416[1], HIDWORD(v62) * HIDWORD(v416[1]) == -1)&& sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C)))
    {
      abort();
    }
    v406 = v63;
    *(_QWORD *)&v407 = v62;
    *((_QWORD *)&v407 + 1) = v64;
    sub_223FB19A8((unsigned __int8 **)&v412, 2, 3u, &v406);
    ++v37;
  }
  while (v37 != v371);
  *(float *)v65.i32 = sqrtf((float)((float)(unsigned __int16)v341 * (float)(unsigned __int16)v341)+ (float)((float)WORD2(v341) * (float)WORD2(v341)));
  __asm { FMOV            V1.2S, #1.0 }
  v377.i64[0] = _D1;
  v377.i16[4] = 2;
  *(_QWORD *)&v378 = 4;
  *((float32x2_t *)&v378 + 1) = vdiv_f32((float32x2_t)vdup_lane_s32(v65, 0), (float32x2_t)0x4120000042480000);
  LODWORD(v379) = 2500;
  *(_QWORD *)((char *)&v379 + 4) = 0x4040000040000000;
  HIDWORD(v379) = 1077936128;
  v380 = (float32x2_t)500;
  v381.i32[0] = 1082130432;
  v70 = operator new();
  *(float32x4_t *)v383 = v377;
  *(_OWORD *)v384 = v378;
  v385 = v379;
  v386 = v380;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v382 = sub_223FB1FEC(v70, (__int128 *)v383);
  do
  {
    v76 = *(_QWORD *)v415 + 72 * v75;
    v77 = *(void **)(v76 + 40);
    if (*(_DWORD *)(v76 + 4))
      v78 = *(_DWORD *)v76 == 0;
    else
      v78 = 1;
    v79 = *(_QWORD *)(v76 + 8);
    if (v78)
      v80 = 0;
    else
      v80 = *(_BYTE **)v76;
    if (HIDWORD(v80) * HIDWORD(v79) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v403 = v77;
    v404 = v80;
    v405 = v79;
    sub_223F5A924((uint64_t)&v403, v383);
    sub_223FB4CA8((uint64_t)&v377, (uint64_t)v383, (uint64_t)&__p);
    v81 = (float32x2_t *)__p;
    v82 = (float32x2_t *)v410;
    if (__p == v410)
    {
      if (!__p)
        goto LABEL_113;
LABEL_112:
      v410 = (char *)v81;
      operator delete(v81);
      goto LABEL_113;
    }
    do
    {
      v83 = vsub_f32(v81[1], *v81);
      if (sqrtf(vmla_lane_f32(vmul_f32(v83, v83), (float32x2_t)vdup_lane_s32((int32x2_t)v83, 1), v83, 1).f32[0]) >= 4.0)
      {
        if (v74 < v71)
        {
          *v74 = *v81;
          v74[1] = v81[1];
          v74[2].i8[0] = v75;
          v74 = (float32x2_t *)((char *)v74 + 20);
        }
        else
        {
          v84 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v74 - (char *)v73) >> 2) + 1;
          if (v84 > 0xCCCCCCCCCCCCCCCLL)
            sub_22316E078();
          if (0x999999999999999ALL * (((char *)v71 - (char *)v73) >> 2) > v84)
            v84 = 0x999999999999999ALL * (((char *)v71 - (char *)v73) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * (((char *)v71 - (char *)v73) >> 2) >= 0x666666666666666)
            v85 = 0xCCCCCCCCCCCCCCCLL;
          else
            v85 = v84;
          if (v85 > 0xCCCCCCCCCCCCCCCLL)
            sub_223174E94();
          v86 = (char *)operator new(20 * v85);
          v87 = (float32x2_t *)&v86[4 * (((char *)v74 - (char *)v73) >> 2)];
          *v87 = *v81;
          v87[1] = v81[1];
          v87[2].i8[0] = v75;
          for (i = v87; v74 != v73; i[2].i8[0] = v74[2].i8[0])
          {
            v89 = *(float32x2_t *)((char *)v74 - 20);
            v74 = (float32x2_t *)((char *)v74 - 20);
            *(float32x2_t *)((char *)i - 20) = v89;
            i = (float32x2_t *)((char *)i - 20);
            i[1] = v74[1];
          }
          v71 = (float32x2_t *)&v86[20 * v85];
          v74 = (float32x2_t *)((char *)v87 + 20);
          if (v73)
            operator delete(v73);
          v73 = i;
        }
        v72 = v74;
      }
      v81 += 2;
    }
    while (v81 != v82);
    v81 = (float32x2_t *)__p;
    if (__p)
      goto LABEL_112;
LABEL_113:
    if (v383[0])
    {
      v383[1] = v383[0];
      operator delete(v383[0]);
    }
    ++v75;
  }
  while (v75 != v371);
  if (v382)
    sub_223F59F00(v382);
  v90 = a7;
  if (v418[1])
    free(v418[1]);
  v19 = *(_QWORD **)v415;
  if (*(_QWORD *)v415)
  {
LABEL_143:
    v91 = *(_QWORD **)&v415[8];
    v92 = v19;
    if (*(_QWORD **)&v415[8] != v19)
    {
      do
      {
        v93 = (void *)*(v91 - 4);
        if (v93)
          free(v93);
        *(v91 - 4) = 0;
        v91 -= 9;
      }
      while (v91 != v19);
      v92 = *(void **)v415;
    }
    *(_QWORD *)&v415[8] = v19;
    operator delete(v92);
  }
LABEL_150:
  if (*(_QWORD *)&v389[40])
    free(*(void **)&v389[40]);
  if (v73 == v72)
    goto LABEL_171;
  v349 = v72;
  if (v90 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  v94 = (char *)operator new(24 * v90);
  v375 = v94;
  v376 = &v94[24 * v90];
  v99 = (unsigned __int8 *)a8;
  while (2)
  {
    v101 = v99;
    v102 = (uint64_t)&a2[4][28 * *v99];
    v95.i32[0] = a6[1].i32[0];
    v103 = a6[2];
    v96.i32[0] = a6[3].i32[0];
    v104 = a6[4];
    v97.i32[0] = a6[5].i32[0];
    v98.i32[0] = *(_DWORD *)(v102 + 8);
    *(float32x2_t *)v105.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a6, COERCE_FLOAT(*(_QWORD *)v102)), v103, *(float32x2_t *)v102, 1), v104, v98.f32[0]);
    *(float32x2_t *)&v105.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v95, *(float32x2_t *)v102), v96, *(float32x2_t *)v102, 1), *(float32x2_t *)v98.f32, v97);
    *(float32x2_t *)v98.f32 = a6[6];
    v98.i32[2] = a6[7].i32[0];
    v106 = vaddq_f32(v105, v98);
    v98.i32[0] = *(_DWORD *)(v102 + 20);
    v107 = *(float32x2_t *)(v102 + 12);
    *(float32x2_t *)&v109 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a6, v107.f32[0]), v103, v107, 1), v104, v98.f32[0]);
    v108 = vmla_f32(vmla_lane_f32(vmul_f32(v95, v107), v96, v107, 1), *(float32x2_t *)v98.f32, v97);
    *((float32x2_t *)&v109 + 1) = v108;
    if (v94 < v376)
    {
      *((_DWORD *)v94 + 2) = v106.i32[2];
      *(_QWORD *)v94 = v106.i64[0];
      *((_DWORD *)v94 + 5) = v108.i32[0];
      *(_QWORD *)(v94 + 12) = v109;
      v100 = v94 + 24;
      goto LABEL_156;
    }
    v110 = v375;
    v111 = 0xAAAAAAAAAAAAAAABLL * ((v94 - v375) >> 3) + 1;
    if (v111 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v365 = v106;
    v372 = v109;
    if (0x5555555555555556 * ((v376 - v375) >> 3) > v111)
      v111 = 0x5555555555555556 * ((v376 - v375) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v376 - v375) >> 3) >= 0x555555555555555)
      v112 = 0xAAAAAAAAAAAAAAALL;
    else
      v112 = v111;
    if (v112 > 0xAAAAAAAAAAAAAAALL)
      sub_223174E94();
    v113 = (char *)operator new(24 * v112);
    v114 = &v113[8 * ((v94 - v375) >> 3)];
    v115 = &v113[24 * v112];
    *(_QWORD *)v114 = v365.i64[0];
    *((_DWORD *)v114 + 2) = v365.i32[2];
    *(_QWORD *)(v114 + 12) = v372;
    *((_DWORD *)v114 + 5) = DWORD2(v372);
    v100 = v114 + 24;
    if (v94 == v375)
    {
      v375 = &v113[8 * ((v94 - v375) >> 3)];
      v110 = v94;
      v376 = v115;
LABEL_170:
      operator delete(v110);
      goto LABEL_156;
    }
    do
    {
      v116 = *((_QWORD *)v94 - 3);
      v94 -= 24;
      v117 = *((_DWORD *)v94 + 2);
      *((_QWORD *)v114 - 3) = v116;
      v114 -= 24;
      *((_DWORD *)v114 + 2) = v117;
      v118 = *(_QWORD *)(v94 + 12);
      *((_DWORD *)v114 + 5) = *((_DWORD *)v94 + 5);
      *(_QWORD *)(v114 + 12) = v118;
    }
    while (v94 != v375);
    v375 = v114;
    v376 = v115;
    if (v110)
      goto LABEL_170;
LABEL_156:
    v99 = v101 + 1;
    v94 = v100;
    if (v101 + 1 != (unsigned __int8 *)(a8 + v90))
      continue;
    break;
  }
  v119 = *a4;
  v120 = a4[1];
  v373 = *((_DWORD *)a4 + 4);
  v369 = *((_DWORD *)a4 + 5);
  v121 = a4[4];
  v366 = a4[3];
  v122 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a5 + 16))(a5);
  v123 = v375;
  memset(v389, 0, 24);
  v356 = v119;
  if (v100 == v375)
  {
    v134 = 0;
    v133 = 0;
  }
  else
  {
    if ((0xAAAAAAAAAAAAAAABLL * ((v100 - v375) >> 3)) >> 61)
      sub_22316E078();
    v124 = (float32x2_t *)v122;
    *(_QWORD *)v389 = operator new(0x5555555555555558 * ((v100 - v375) >> 3));
    *(_QWORD *)&v389[8] = *(_QWORD *)v389;
    *(_QWORD *)&v389[16] = *(_QWORD *)v389 + 0x5555555555555558 * ((v100 - v375) >> 3);
    v416[0] = v389;
    do
    {
      v125.i32[0] = *((_DWORD *)v123 + 5);
      v126.i64[0] = *(_QWORD *)(v123 + 12);
      v127 = v126;
      v127.i32[2] = v125.i32[0];
      v128 = (int32x4_t)vmulq_n_f32(v127, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v127.f32, *(float32x2_t *)v127.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.f32, 1), *(float32x2_t *)v126.f32, 1), v125, v125).f32[0]));
      v129 = fabsf(*(float *)&v128.i32[2]);
      if (*(float *)&v128.i32[2] != 0.0 && v129 > 0.000001)
      {
        v132 = vdiv_f32(*(float32x2_t *)v128.i8, (float32x2_t)vdup_laneq_s32(v128, 2));
        v131 = vadd_f32(v124[7], vmla_lane_f32(vmul_n_f32(v124[5], v132.f32[0]), v124[6], v132, 1));
      }
      else
      {
        v131 = *(float32x2_t *)(v123 + 12);
      }
      *(float32x2_t *)v377.f32 = v131;
      sub_2232EA538((void ***)v416, &v377);
      v123 += 24;
    }
    while (v123 != v100);
    v133 = *(void **)v389;
    v134 = *(_QWORD *)&v389[8];
  }
  memset(v389, 0, 32);
  *(_DWORD *)&v389[32] = 1065353216;
  v383[0] = v119;
  v383[1] = v120;
  v384[0] = (void *)__PAIR64__(v369, v373);
  LOBYTE(__p) = -1;
  *(_OWORD *)v416 = 0u;
  *(_OWORD *)v417 = 0u;
  LODWORD(v418[0]) = 1065353216;
  v359 = v133;
  sub_2236EA858((uint64_t)v416, (unsigned __int8 *)&__p, &__p);
  sub_223FAFFB4((uint64_t *)v383, (uint64_t)v416, (uint64_t)v389, 1, (char **)&v377);
  v135 = v349;
  v136 = v417[0];
  if (v417[0])
  {
    do
    {
      v137 = (_QWORD *)*v136;
      operator delete(v136);
      v136 = v137;
    }
    while (v137);
  }
  v138 = v416[0];
  v416[0] = 0;
  if (v138)
    operator delete(v138);
  v414 = 0;
  v412 = 0;
  v413 = 0;
  *(_OWORD *)v416 = 0u;
  *(_OWORD *)v417 = 0u;
  LODWORD(v418[0]) = 1065353216;
  v354 = v121;
  if (v377.i64[1] != v377.i64[0])
  {
    v342 = v134;
    v139 = 0;
    v140 = 0xAAAAAAAAAAAAAAABLL * ((v377.i64[1] - v377.i64[0]) >> 3);
    while (1)
    {
      v142 = *(uint32x2_t **)(v377.i64[0] + 24 * v139);
      v144 = v142->i32[0];
      v143 = v142->u32[1];
      v145 = v119[v142->i32[0] * v373 + v143 * v369];
      if (v416[1])
      {
        v146 = (uint8x8_t)vcnt_s8((int8x8_t)v416[1]);
        v146.i16[0] = vaddlv_u8(v146);
        if (v146.u32[0] > 1uLL)
        {
          v147 = v119[v144 * v373 + v143 * v369];
          if (v416[1] <= (void *)v145)
            v147 = v145 % (unint64_t)v416[1];
        }
        else
        {
          v147 = (LODWORD(v416[1]) - 1) & v145;
        }
        v148 = (uint64_t ***)*((_QWORD *)v416[0] + v147);
        if (v148)
        {
          v149 = *v148;
          if (v149)
          {
            if (v146.u32[0] < 2uLL)
            {
              while (1)
              {
                v151 = (unint64_t)v149[1];
                if (v151 == v145)
                {
                  if (*((unsigned __int8 *)v149 + 16) == (_DWORD)v145)
                    goto LABEL_192;
                }
                else if ((v151 & ((unint64_t)v416[1] - 1)) != v147)
                {
                  goto LABEL_213;
                }
                v149 = (uint64_t **)*v149;
                if (!v149)
                  goto LABEL_213;
              }
            }
            do
            {
              v150 = (unint64_t)v149[1];
              if (v150 == v145)
              {
                if (*((unsigned __int8 *)v149 + 16) == (_DWORD)v145)
                  goto LABEL_192;
              }
              else
              {
                if ((void *)v150 >= v416[1])
                  v150 %= (unint64_t)v416[1];
                if (v150 != v147)
                  break;
              }
              v149 = (uint64_t **)*v149;
            }
            while (v149);
          }
        }
      }
LABEL_213:
      v152 = *(uint32x2_t **)(v377.i64[0] + 24 * v139 + 8);
      v153 = v152[-1].u32[0];
      v154 = v153 - v144;
      _CF = v144 >= v153;
      v155 = v144 - v153;
      if (v155 == 0 || !_CF)
        v155 = v154;
      if (v155)
        goto LABEL_219;
      v156 = v152[-1].u32[1];
      v157 = v156 - v143;
      _CF = v143 >= v156;
      v158 = v143 - v156;
      if (v158 == 0 || !_CF)
        v158 = v157;
      if (v158)
      {
LABEL_219:
        if ((unint64_t)((char *)v152 - (char *)v142) >= 0x18)
          goto LABEL_220;
      }
      else if ((unint64_t)((char *)v152 - (char *)v142) >= 0x20)
      {
LABEL_220:
        sub_223F5A010((void ***)&v423, v142, v152);
        v410 = 0;
        __p = 0;
        v411 = 0;
        __p = operator new(0x18uLL);
        v410 = (char *)__p;
        v411 = (char *)__p + 24;
        v410 = (char *)sub_2236B97AC((uint64_t)&v411, (uint64_t)&v423, (uint64_t)v425, __p);
        if ((_QWORD)v423)
        {
          *((_QWORD *)&v423 + 1) = v423;
          operator delete((void *)v423);
        }
        v159 = (char *)__p;
        v160 = *(char **)__p;
        v161 = *((_QWORD *)__p + 1) - *(_QWORD *)__p;
        v162 = 0.0;
        if ((unint64_t)v161 >= 0x18)
        {
          v163 = (v161 >> 3) - 1;
          v164 = (float *)(v160 + 12);
          v165 = 0.0;
          v166 = v163;
          v167 = *((float *)v160 + 1);
          v168 = *(float *)v160;
          do
          {
            v169 = *v164;
            v170 = v165 - (float)(v168 * *v164);
            v168 = *(v164 - 1);
            v165 = v170 + (float)(v167 * v168);
            v164 += 2;
            v167 = v169;
            --v166;
          }
          while (v166);
          v162 = (float)((float)(v165 - (float)(*((float *)v160 + 1) * *(float *)&v160[8 * v163]))
                       + (float)(*(float *)v160 * *(float *)&v160[8 * v163 + 4]))
               * 0.5;
        }
        v171 = fabsf(v162);
        if (v171 >= 50.0)
        {
          v172 = 0.0;
          if (!*(_QWORD *)&v389[8])
            goto LABEL_266;
          v173 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v389[8]);
          v173.i16[0] = vaddlv_u8(v173);
          if (v173.u32[0] <= 1uLL)
          {
            v174 = (*(_DWORD *)&v389[8] - 1) & v139;
            v175 = *(uint64_t ****)(*(_QWORD *)v389 + 8 * v174);
            if (!v175)
              goto LABEL_266;
LABEL_236:
            v176 = *v175;
            if (!v176)
              goto LABEL_266;
            if (v173.u32[0] < 2uLL)
            {
              while (1)
              {
                v178 = v176[1];
                if (v178 == (uint64_t *)v139)
                {
                  if (*((unsigned __int8 *)v176 + 16) == v139)
                    goto LABEL_251;
                }
                else if (((unint64_t)v178 & (*(_QWORD *)&v389[8] - 1)) != v174)
                {
                  goto LABEL_266;
                }
                v176 = (uint64_t **)*v176;
                if (!v176)
                  goto LABEL_266;
              }
            }
            while (1)
            {
              v177 = (unint64_t)v176[1];
              if (v177 == v139)
              {
                if (*((unsigned __int8 *)v176 + 16) == v139)
                {
LABEL_251:
                  LOBYTE(v406) = v139;
                  *(_QWORD *)&v423 = &v406;
                  v179 = sub_223F564D4((uint64_t)v389, (unsigned __int8 *)&v406, (uint64_t)&unk_2245BA939, (_BYTE **)&v423);
                  v180 = (_BYTE *)v179[3];
                  v181 = (_BYTE *)v179[4];
                  if (v180 != v181)
                  {
                    v172 = 0.0;
                    do
                    {
                      v415[0] = 0;
                      v415[0] = *v180;
                      sub_2236EA858((uint64_t)v416, v415, v415);
                      v182 = v377.i64[0] + 24 * v415[0];
                      v183 = *(uint32x2_t **)(v182 + 8);
                      if ((unint64_t)v183 - *(_QWORD *)v182 >= 0x18)
                      {
                        sub_223F5A010((void ***)&v423, *(uint32x2_t **)v182, v183);
                        v184 = (void *)v423;
                        v185 = 0.0;
                        if (*((_QWORD *)&v423 + 1) - (_QWORD)v423 >= 0x18uLL)
                        {
                          v186 = (float *)(v423 + 12);
                          v187 = 0.0;
                          v188 = ((uint64_t)(*((_QWORD *)&v423 + 1) - v423) >> 3) - 1;
                          v189 = *(float *)(v423 + 4);
                          v190 = *(float *)v423;
                          do
                          {
                            v191 = *v186;
                            v192 = v187 - (float)(v190 * *v186);
                            v190 = *(v186 - 1);
                            v187 = v192 + (float)(v189 * v190);
                            v186 += 2;
                            v189 = v191;
                            --v188;
                          }
                          while (v188);
                          v185 = (float)((float)(v187
                                               - (float)(*(float *)(v423 + 4)
                                                       * *(float *)(v423
                                                                  + 8
                                                                  * (((uint64_t)(*((_QWORD *)&v423 + 1) - v423) >> 3) - 1))))
                                       + (float)(*(float *)v423
                                               * *(float *)(v423
                                                          + 8 * (((uint64_t)(*((_QWORD *)&v423 + 1) - v423) >> 3) - 1)
                                                          + 4)))
                               * 0.5;
                        }
                        v193 = fabsf(v185);
                        if (v193 >= 25.0)
                        {
                          v194 = v410;
                          if (v410 >= v411)
                          {
                            v195 = sub_2236ADCEC((char **)&__p, (uint64_t)&v423);
                            v184 = (void *)v423;
                          }
                          else
                          {
                            v184 = 0;
                            *(_QWORD *)v410 = 0;
                            *((_QWORD *)v194 + 1) = 0;
                            *((_QWORD *)v194 + 2) = 0;
                            *(_OWORD *)v194 = v423;
                            *((_QWORD *)v194 + 2) = v424;
                            v423 = 0uLL;
                            v424 = 0;
                            v195 = v194 + 24;
                          }
                          v410 = v195;
                          v172 = v172 + v193;
                        }
                        if (v184)
                        {
                          *((_QWORD *)&v423 + 1) = v184;
                          operator delete(v184);
                        }
                      }
                      ++v180;
                    }
                    while (v180 != v181);
                  }
                  goto LABEL_266;
                }
              }
              else
              {
                if (v177 >= *(_QWORD *)&v389[8])
                  v177 %= *(_QWORD *)&v389[8];
                if (v177 != v174)
                  goto LABEL_266;
              }
              v176 = (uint64_t **)*v176;
              if (!v176)
                goto LABEL_266;
            }
          }
          v174 = (unint64_t)v139 % *(_QWORD *)&v389[8];
          if (*(_QWORD *)&v389[8] > (unint64_t)v139)
            v174 = v139;
          v175 = *(uint64_t ****)(*(_QWORD *)v389 + 8 * v174);
          if (v175)
            goto LABEL_236;
LABEL_266:
          v159 = (char *)__p;
          if ((float)(v171 - v172) >= 50.0)
          {
            if (v410 - (_BYTE *)__p == 24)
            {
              sub_223F2C4C0((uint64_t)(*((_QWORD *)__p + 1) - *(_QWORD *)__p) >> 3, *(char **)__p, (char **)&v423, 5.0);
              v345 = v423;
              v196 = v424;
            }
            else
            {
              sub_223F2C004((void *)(0xAAAAAAAAAAAAAAABLL * ((v410 - (_BYTE *)__p) >> 3)), (const void **)__p, (unint64_t *)&v423);
              sub_223F2C4C0((uint64_t)(*((_QWORD *)&v423 + 1) - v423) >> 3, (char *)v423, (char **)v415, 5.0);
              v345 = *(_OWORD *)v415;
              v196 = *(_QWORD *)&v415[16];
              if ((_QWORD)v423)
              {
                *((_QWORD *)&v423 + 1) = v423;
                operator delete((void *)v423);
              }
            }
            v197 = (char *)v413;
            if (v413 < (unsigned __int8 *)v414)
            {
              *v413 = v145;
              *(_OWORD *)(v197 + 8) = v345;
              v198 = (unsigned __int8 *)(v197 + 32);
              *((_QWORD *)v197 + 3) = v196;
              v119 = v356;
              goto LABEL_291;
            }
            v199 = (char *)v412;
            v200 = (v413 - (_BYTE *)v412) >> 5;
            v201 = v200 + 1;
            if ((unint64_t)(v200 + 1) >> 59)
              sub_22316E078();
            v202 = v414 - (_BYTE *)v412;
            if ((v414 - (_BYTE *)v412) >> 4 > v201)
              v201 = v202 >> 4;
            if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFE0)
              v203 = 0x7FFFFFFFFFFFFFFLL;
            else
              v203 = v201;
            if (v203 >> 59)
              sub_223174E94();
            v204 = (char *)operator new(32 * v203);
            v205 = &v204[32 * v200];
            *v205 = v145;
            *(_OWORD *)(v205 + 8) = v345;
            *((_QWORD *)v205 + 3) = v196;
            v198 = (unsigned __int8 *)(v205 + 32);
            if (v197 == v199)
            {
              v412 = v205;
              v413 = (unsigned __int8 *)(v205 + 32);
              v414 = &v204[32 * v203];
              v133 = v359;
              v121 = v354;
              goto LABEL_289;
            }
            v206 = 0;
            do
            {
              v207 = &v205[v206];
              v208 = &v197[v206];
              *(v207 - 32) = v197[v206 - 32];
              *(_OWORD *)(v207 - 24) = *(_OWORD *)&v197[v206 - 24];
              *((_QWORD *)v207 - 1) = *(_QWORD *)&v197[v206 - 8];
              *((_QWORD *)v208 - 3) = 0;
              *((_QWORD *)v208 - 2) = 0;
              *((_QWORD *)v208 - 1) = 0;
              v206 -= 32;
            }
            while (&v197[v206] != v199);
            v197 = (char *)v412;
            v209 = v413;
            v412 = &v205[v206];
            v413 = (unsigned __int8 *)(v205 + 32);
            v414 = &v204[32 * v203];
            v133 = v359;
            if (v209 == (unsigned __int8 *)v197)
            {
              v121 = v354;
              v119 = v356;
              if (v197)
                goto LABEL_290;
            }
            else
            {
              v121 = v354;
              do
              {
                v210 = (void *)*((_QWORD *)v209 - 3);
                if (v210)
                {
                  *((_QWORD *)v209 - 2) = v210;
                  operator delete(v210);
                }
                v209 -= 32;
              }
              while (v209 != (unsigned __int8 *)v197);
LABEL_289:
              v119 = v356;
              if (v197)
LABEL_290:
                operator delete(v197);
            }
LABEL_291:
            v413 = v198;
            v159 = (char *)__p;
          }
          v135 = v349;
        }
        if (v159)
        {
          v211 = v410;
          v141 = v159;
          if (v410 != v159)
          {
            v212 = v410;
            do
            {
              v214 = (void *)*((_QWORD *)v212 - 3);
              v212 -= 24;
              v213 = v214;
              if (v214)
              {
                *((_QWORD *)v211 - 2) = v213;
                operator delete(v213);
              }
              v211 = v212;
            }
            while (v212 != v159);
            v141 = __p;
            v119 = v356;
          }
          v410 = v159;
          operator delete(v141);
        }
      }
LABEL_192:
      if (++v139 == v140)
      {
        v215 = v417[0];
        v134 = v342;
        if (v417[0])
        {
          do
          {
            v216 = (_QWORD *)*v215;
            operator delete(v215);
            v215 = v216;
          }
          while (v216);
        }
        break;
      }
    }
  }
  v217 = v416[0];
  v416[0] = 0;
  if (v217)
    operator delete(v217);
  v218 = v377.i64[0];
  if (v377.i64[0])
  {
    v219 = v377.i64[1];
    v220 = (void *)v377.i64[0];
    if (v377.i64[1] != v377.i64[0])
    {
      v221 = v377.i64[1];
      do
      {
        v223 = *(void **)(v221 - 24);
        v221 -= 24;
        v222 = v223;
        if (v223)
        {
          *(_QWORD *)(v219 - 16) = v222;
          operator delete(v222);
        }
        v219 = v221;
      }
      while (v221 != v218);
      v220 = (void *)v377.i64[0];
    }
    v377.i64[1] = v218;
    operator delete(v220);
  }
  v224 = *(_QWORD **)&v389[16];
  if (*(_QWORD *)&v389[16])
  {
    do
    {
      v243 = (_QWORD *)*v224;
      v244 = (void *)v224[3];
      if (v244)
      {
        v224[4] = v244;
        operator delete(v244);
      }
      operator delete(v224);
      v224 = v243;
    }
    while (v243);
  }
  v225 = *(void **)v389;
  *(_QWORD *)v389 = 0;
  if (v225)
    operator delete(v225);
  v226 = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a5 + 16))(a5);
  *(_QWORD *)&v389[4] = 0;
  *(_QWORD *)&v389[28] = 0x3F80000000000000;
  *(_QWORD *)&v389[20] = 0;
  v426.columns[0].i64[0] = v226[5];
  *(_QWORD *)&v389[12] = v226[6];
  v426.columns[1].i64[0] = v226[7];
  *(_QWORD *)v389 = v426.columns[0].i64[0];
  *(_QWORD *)&v389[24] = v426.columns[1].i64[0];
  v231 = sub_22322BB84((uint64_t)v389, (uint64_t)&__p, v426);
  v227.i32[0] = a6[1].i32[0];
  *(float32x2_t *)v228.i8 = *a6;
  v229 = a6[3].i32[0];
  *(float32x2_t *)v230.i8 = a6[2];
  v231.n128_u32[0] = a6[5].u32[0];
  *(float32x2_t *)v232.i8 = a6[4];
  *(float32x2_t *)v233.f32 = a6[6];
  v233.i32[2] = a6[7].i32[0];
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  v234 = (unsigned __int8 *)v412;
  v235 = v413;
  if (v412 != v413)
  {
    v236 = v228;
    v236.i32[2] = v227.i32[0];
    v237 = v230;
    v237.i32[2] = v229;
    v238 = v232;
    v238.i32[2] = v231.n128_u32[0];
    v357 = (float32x2_t)vzip1q_s32(v228, v230).u64[0];
    v350 = (float32x2_t)vtrn2q_s32(v228, v230).u64[0];
    v227.i32[1] = v229;
    v363 = v227;
    v239 = (float32x2_t)vzip2q_s32(v236, v237).u64[0];
    v240 = (int8x16_t)vnegq_f32(v233);
    *(float32x2_t *)v237.i8 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v228.i8, *(int32x2_t *)v230.i8), *(float *)v240.i32), (float32x2_t)vzip2_s32(*(int32x2_t *)v228.i8, *(int32x2_t *)v230.i8), *(float32x2_t *)v233.f32, 1), v239, v233, 2);
    v374 = (v134 - (uint64_t)v133) >> 3;
    v241 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v135 - (char *)v73) >> 2);
    v237.u64[1] = (unint64_t)vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v232.i8, *(float32x2_t *)v240.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v232.i8, 1), *(float32x2_t *)v233.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v240, v240, 8uLL), (float32x2_t)v231.n128_u64[0]);
    v242 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v232.i8, 1);
    v361 = *(float32x2_t *)v232.i8;
    v343 = (float32x4_t)v237;
    v346 = (float32x2_t)vextq_s8(v238, v238, 8uLL).u64[0];
    while (2)
    {
      v245 = *v234;
      if ((unint64_t)v366 <= v245)
        goto LABEL_322;
      v246 = (double *)&v121[112 * *v234];
      v247 = *v246;
      v248 = v246[1];
      v249 = v248 > *v246;
      if (v248 > *v246)
        v247 = v246[1];
      if (v246[2] > v247)
      {
        v247 = v246[2];
        v249 = 2;
      }
      if (v246[3] > v247)
      {
        v247 = v246[3];
        v249 = 3;
      }
      if (v246[4] > v247)
      {
        v247 = v246[4];
        v249 = 4;
      }
      if (v246[5] > v247)
      {
        v247 = v246[5];
        v249 = 5;
      }
      if (v246[6] > v247)
      {
        v247 = v246[6];
        v249 = 6;
      }
      if (v246[7] > v247)
      {
        v247 = v246[7];
        v249 = 7;
      }
      if (v246[8] > v247)
      {
        v247 = v246[8];
        v249 = 8;
      }
      if (v246[9] > v247)
      {
        v247 = v246[9];
        v249 = 9;
      }
      if (v246[10] > v247)
      {
        v247 = v246[10];
        v249 = 10;
      }
      if (v246[11] > v247)
        v249 = 11;
      if (!*(_BYTE *)(a1 + v249))
        goto LABEL_322;
      v250 = (const void *)*((_QWORD *)v234 + 1);
      v251 = (uint64_t)(*((_QWORD *)v234 + 2) - (_QWORD)v250) >> 3;
      *(_OWORD *)v383 = 0u;
      *(_OWORD *)v384 = 0u;
      LODWORD(v385) = 1065353216;
      v252 = sub_223F5AFAC(v251, v250, v374, (uint64_t)v133, v241, (uint64_t)v73, v383);
      v254 = v253;
      v255 = v384[0];
      if (v384[0])
      {
        do
        {
          v256 = (_QWORD *)*v255;
          operator delete(v255);
          v255 = v256;
        }
        while (v256);
      }
      v257 = v383[0];
      v383[0] = 0;
      if (v257)
        operator delete(v257);
      v133 = v359;
      if (!v254)
        goto LABEL_322;
      v258 = (float32x2_t *)((char *)v73 + 20 * v252);
      sub_223F2D394((uint64_t)(*((_QWORD *)v234 + 2) - *((_QWORD *)v234 + 1)) >> 3, *((const void **)v234 + 1), (float *)v359 + 2 * v258[2].u8[0], (float *)v258, (float *)&v258[1], &v423);
      v259 = (float32x2_t *)&v375[24 * v258[2].u8[0]];
      v260 = (float32x2_t *)((char *)v259 + 12);
      sub_223F2A93C((int32x2_t *)((char *)&v259[1] + 4), a5, (uint64_t)v389, v261, v262);
      if (v389[16])
      {
        v266 = (_QWORD *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a5 + 16))(a5);
        v267.i32[0] = v259[1].i32[0];
        v268 = fabsf(*(float *)v267.i32);
        if (*(float *)v267.i32 == 0.0 || v268 <= 0.000001)
          goto LABEL_363;
        v370 = v267;
        v270 = *v259;
        v271 = (float32x2_t)v266[5];
        v272 = (float32x2_t)v266[6];
        v273 = (float32x2_t)v266[7];
        v274 = *(float32x2_t *)v389;
        v275 = *(float32x2_t *)&v389[8];
        if (sub_22369F3FC((float32x2_t *)v389, v258, (float32x2_t *)v416, 0))
          goto LABEL_363;
        v276 = vdiv_f32(v270, (float32x2_t)vdup_lane_s32(v370, 0));
        v277 = vsub_f32(v275, v274);
        v278 = (int32x2_t)vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(v274, vadd_f32(v273, vmla_lane_f32(vmul_n_f32(v271, v276.f32[0]), v272, v276, 1)))), v277);
        v279 = (int32x2_t)vmla_lane_f32(vmul_f32(v277, v277), (float32x2_t)vdup_lane_s32((int32x2_t)v277, 1), v277, 1);
        v280 = vsub_f32(*(float32x2_t *)&v389[8], *(float32x2_t *)v389);
        v281 = (int32x2_t)vmul_f32((float32x2_t)vrev64_s32((int32x2_t)vsub_f32(*(float32x2_t *)v389, *v258)), v280);
        *(int32x2_t *)v265.f32 = vdup_lane_s32((int32x2_t)v280, 1);
        v282 = vsub_f32((float32x2_t)vzip1_s32(v281, v278), (float32x2_t)vzip2_s32(v281, v278));
        v264 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vmla_lane_f32(vmul_f32(v280, v280), *(float32x2_t *)v265.f32, v280, 1), v279));
        *(float32x2_t *)v263.i8 = vdiv_f32(v282, v264);
        v264.i32[0] = v263.i32[1];
        v283 = 1.0;
        if (!((*(float *)v370.i32 <= 0.0) ^ (*(float *)v263.i32 > 0.0) ^ (*(float *)&v263.i32[1] <= 0.0)))
          goto LABEL_363;
      }
      else
      {
        v283 = 1.0;
      }
      v408 = 0;
      v284 = sub_223F5B278((uint64_t)v259, v258, (uint64_t)&__p, &v408, 1, (uint64_t)v415, v263, v264, v265);
      if (*(float *)&v415[8] != 0.0 && *(float *)&v415[8] >= 0.0 && fabsf(*(float *)&v415[8]) > 0.000001)
      {
        v289 = v408.f32[1];
        if (v408.f32[1] >= v408.f32[0])
          v289 = v408.f32[0];
        if (v289 <= 5.0)
        {
          v290 = (float32x2_t *)&v354[112 * v245];
          v292 = v290[12];
          v291 = v290 + 12;
          v284.i32[1] = v292.i32[1];
          LODWORD(v285) = v291[1].i32[0];
          v287.i32[0] = *(_DWORD *)&v415[20];
          v293 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v415[12], 1);
          *(float32x2_t *)v286.i8 = vmla_f32(vmla_lane_f32(vmul_f32(v292, *(float32x2_t *)&v415[12]), v293, v292, 1), *(float32x2_t *)v287.f32, *(float32x2_t *)&v285);
          *(float *)v284.i32 = fabsf(*(float *)v286.i32);
          LODWORD(v285) = 1064341426;
          if (*(float *)v284.i32 >= 0.93969
            && sub_223F52F44((uint64_t)v415, (float32x4_t)v284, v285, v286, v287, *(double *)&v293, v288) >= 15.0)
          {
            v298 = v408.f32[1];
            if (v408.f32[1] >= v408.f32[0])
              v298 = v408.f32[0];
            if (v298 <= *(float *)(a1 + 16))
            {
              v294.i64[0] = *(_QWORD *)&v415[12];
              v294.i32[2] = *(_DWORD *)&v415[20];
            }
            else
            {
              v299 = fabsf(v260->f32[0]);
              if (v260->f32[0] == 0.0 || v299 <= 0.000001)
              {
                v301 = v259[2].f32[0];
                v302 = fabsf(v301);
                if (v301 == 0.0 || v302 <= 0.000001)
                {
                  v304 = v259[2].f32[1];
                  v305 = fabsf(v304);
                  v306 = v304 != 0.0 && v305 > 0.000001;
                  if (!v306
                    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/Math/Orthogonalize.cpp", 33, (uint64_t)"!Near(cva::Vector3<T>{0, 0, 0}, v2)", 35, (uint64_t)&unk_2245AB3B3, 0, (void (*)(void **))sub_22457406C))
                  {
                    abort();
                  }
                }
              }
              v295.i32[0] = v259[2].i32[1];
              *(float32x2_t *)v296.f32 = *v260;
              v307 = v296;
              v307.i32[2] = v295.i32[0];
              v297.i32[0] = v291[1].i32[0];
              *(float32x2_t *)v294.i8 = *v291;
              v294.i32[2] = v297.i32[0];
              v294 = (int8x16_t)vmlsq_lane_f32((float32x4_t)v294, v307, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*v260, *v291), (float32x2_t)vdup_lane_s32((int32x2_t)*v291, 1), *v260, 1), v297, v295), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v307.f32, *(float32x2_t *)v307.f32), (float32x2_t)vdup_lane_s32((int32x2_t)*v260, 1), *v260, 1), v295, v295)),
                                  0);
              *(_DWORD *)&v415[20] = v294.i32[2];
              *(_QWORD *)&v415[12] = v294.i64[0];
            }
            *(float32x2_t *)v308.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v357, *(float *)v415), v350, *(float32x2_t *)v415, 1), v363, *(float32x4_t *)v415, 2);
            *(float32x2_t *)&v308.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v361, *(float32x2_t *)v415), v242, *(float32x2_t *)v415, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v415, *(int8x16_t *)v415, 8uLL), v346);
            v309 = vaddq_f32(v308, v343);
            *(float32x2_t *)v308.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v357, *(float *)v294.i32), v350, *(float32x2_t *)v294.i8, 1), v363, (float32x4_t)v294, 2);
            v310 = vmla_lane_f32(vmul_f32(v361, *(float32x2_t *)v294.i8), v242, *(float32x2_t *)v294.i8, 1);
            v311 = (float32x4_t)vextq_s8(v294, v294, 8uLL);
            LODWORD(v407) = v309.i32[2];
            v406 = (unsigned __int8 *)v309.i64[0];
            *(_QWORD *)((char *)&v407 + 4) = v308.i64[0];
            HIDWORD(v407) = vmla_f32(v310, *(float32x2_t *)v311.f32, v346).u32[0];
            v312 = sub_223F2B9A0((uint64_t)&v406, &v377, v311);
            v313 = v423;
            v314 = (_QWORD *)(*(uint64_t (**)(unsigned int *, float64_t))(*(_QWORD *)a5 + 16))(a5, v312);
            sub_223F2B420((uint64_t)(*((_QWORD *)&v313 + 1) - v313) >> 3, v313, v314, (float32x2_t *)&v377, (uint64_t)a6, (uint64_t)&v403);
            sub_223F2C4C0((v404 - (_BYTE *)v403) >> 3, (char *)v403, (char **)&v401, 5.0);
            v315.i32[0] = *(_DWORD *)&v415[20];
            v316 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v357, *(float *)&v415[12]), v350, *(float32x2_t *)&v415[12], 1), v363, *(float *)&v415[20]);
            v317 = vmla_f32(vmla_lane_f32(vmul_f32(v361, *(float32x2_t *)&v415[12]), v242, *(float32x2_t *)&v415[12], 1), v315, v346);
            *(float32x2_t *)v318.i8 = v316;
            v318.u64[1] = (unint64_t)v317;
            v319 = vmla_f32(vmla_lane_f32(vmul_f32(v316, v316), (float32x2_t)vdup_lane_s32((int32x2_t)v316, 1), v316, 1), v317, v317).f32[0];
            if (v319 != v283)
            {
              v320 = v319 + -1.0;
              if (v319 < v283)
                v320 = v283 - v319;
              if (v320 > 0.000001)
                v318 = (int8x16_t)vmulq_n_f32((float32x4_t)v318, v283 / sqrtf(v319));
            }
            v321 = v401;
            if (v402 == v401)
            {
LABEL_406:
              v321 = v401;
            }
            else
            {
              v322 = 0;
              v316.i32[0] = v259[1].i32[0];
              *(float32x2_t *)v324.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(v357, COERCE_FLOAT(*v259)), v350, *v259, 1), v363, v316.f32[0]);
              *(float32x2_t *)&v324.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v361, *v259), v242, *v259, 1), v316, v346);
              v323 = (int8x16_t)vaddq_f32(v343, v324);
              v316.i32[0] = v377.i32[2];
              v324.i32[0] = DWORD2(v378);
              v325 = (float32x2_t)vextq_s8(v323, v323, 8uLL).u64[0];
              v326 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v318.i8, 1);
              v327 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v323.i8, *(float32x2_t *)v318.i8), v326, *(float32x2_t *)v323.i8, 1);
              v323.i64[0] = vextq_s8(v318, v318, 8uLL).u64[0];
              v328 = vmla_f32(v327, *(float32x2_t *)v323.i8, v325);
              *(float32x2_t *)v329.f32 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v357, *(float *)v415), v350, *(float32x2_t *)v415, 1), v363, *(float32x4_t *)v415, 2);
              *(float32x2_t *)&v329.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(v361, *(float32x2_t *)v415), v242, *(float32x2_t *)v415, 1), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)v415, *(int8x16_t *)v415, 8uLL), v346);
              v330 = (int8x16_t)vaddq_f32(v343, v329);
              v331 = *(float *)&v323.i32[2]
                   - vmul_f32(v317, vsub_f32(v328, vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v330.i8, *(float32x2_t *)v318.i8), v326, *(float32x2_t *)v330.i8, 1), *(float32x2_t *)v323.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v330, v330, 8uLL)))).f32[0];
              while (vabds_f32(v381.f32[0]+ vmla_lane_f32(vmul_f32(v316, *(float32x2_t *)((char *)v401 + v322)), *(float32x2_t *)v324.f32, *(float32x2_t *)((char *)v401 + v322), 1).f32[0], v331) >= 0.2)
              {
                v322 += 8;
                if (8 * ((v402 - (_BYTE *)v401) >> 3) == v322)
                  goto LABEL_406;
              }
              if ((unint64_t)(v402 - (_BYTE *)v401) >= 0x18)
              {
                if (sub_223F2BF8C((v402 - (_BYTE *)v401) >> 3, (float *)v401) >= 0.0225)
                {
                  *(float64x2_t *)v389 = vcvtq_f64_f32(*(float32x2_t *)v377.f32);
                  *(float64x2_t *)&v389[16] = vcvtq_f64_f32(*(float32x2_t *)&v377.u32[2]);
                  *(float64x2_t *)&v389[32] = vcvtq_f64_f32(*(float32x2_t *)&v378);
                  v390 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v378 + 8));
                  v391 = vcvtq_f64_f32(*(float32x2_t *)&v379);
                  v392 = vcvtq_f64_f32(*(float32x2_t *)((char *)&v379 + 8));
                  v393 = vcvtq_f64_f32(v380);
                  v394 = vcvtq_f64_f32(v381);
                  v395 = *(_DWORD *)(a1 + 20);
                  sub_223F59C2C(v422, (uint64_t)&v401);
                  sub_223F59CC8(v396, (uint64_t)v422, 1uLL);
                  v332 = *((_OWORD *)v246 + 1);
                  *(_OWORD *)v416 = *(_OWORD *)v246;
                  *(_OWORD *)v417 = v332;
                  v333 = *((_OWORD *)v246 + 2);
                  v334 = *((_OWORD *)v246 + 3);
                  v335 = *((_OWORD *)v246 + 5);
                  v420 = *((_OWORD *)v246 + 4);
                  v421 = v335;
                  *(_OWORD *)v418 = v333;
                  v419 = v334;
                  sub_223F59DC8(v387, (uint64_t)v416, 1uLL);
                  v397 = *(_OWORD *)v387;
                  v398 = v388;
                  v387[1] = 0;
                  v388 = 0;
                  v387[0] = 0;
                  v399 = 1;
                  v400 = 0;
                  sub_223F59B58((uint64_t)a9, (uint64_t)v389);
                  sub_223F3A354((uint64_t)v389);
                  if (v387[0])
                  {
                    v387[1] = v387[0];
                    operator delete(v387[0]);
                  }
                  if (v422[0])
                  {
                    v422[1] = v422[0];
                    operator delete(v422[0]);
                  }
                }
                goto LABEL_406;
              }
            }
            if (v321)
            {
              v402 = v321;
              operator delete(v321);
            }
            if (v403)
            {
              v404 = v403;
              operator delete(v403);
            }
          }
        }
      }
LABEL_363:
      if ((_QWORD)v423)
      {
        *((_QWORD *)&v423 + 1) = v423;
        operator delete((void *)v423);
      }
      v121 = v354;
LABEL_322:
      v234 += 32;
      if (v234 == v235)
      {
        v234 = (unsigned __int8 *)v412;
        break;
      }
      continue;
    }
  }
  if (v234)
  {
    v336 = v413;
    v337 = v234;
    if (v413 != v234)
    {
      do
      {
        v338 = (void *)*((_QWORD *)v336 - 3);
        if (v338)
        {
          *((_QWORD *)v336 - 2) = v338;
          operator delete(v338);
        }
        v336 -= 32;
      }
      while (v336 != v234);
      v337 = v412;
    }
    v413 = v234;
    operator delete(v337);
  }
  if (v133)
    operator delete(v133);
  if (v375)
    operator delete(v375);
LABEL_424:
  if (v73)
    operator delete(v73);
LABEL_426:
  kdebug_trace();
  sub_223F599F0(v389);
  if (**(int **)(*(_QWORD *)v389 + 56) <= 1)
  {
    v339 = atomic_load((unsigned __int8 *)&qword_2540CE178);
    if ((v339 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE178))
    {
      qword_2540CE170 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SegmentPlaneDetect");
      __cxa_guard_release(&qword_2540CE178);
    }
    v340 = qword_2540CE170;
    if (*(_BYTE *)(qword_2540CE170 + 16))
    {
      *(_QWORD *)(v340 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v340;
      *(_BYTE *)(v340 + 16) = 0;
    }
  }
}

void sub_223F59580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  __cxa_guard_abort(&qword_2540CE178);
  a63 = a16;
  sub_223F3A870(&a63);
  _Unwind_Resume(a1);
}

void sub_223F595A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE168);
  _Unwind_Resume(a1);
}

void sub_223F595C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;
  uint64_t v43;
  void *v45;

  v45 = *(void **)(v43 - 192);
  if (v45)
  {
    *(_QWORD *)(v43 - 184) = v45;
    operator delete(v45);
  }
  a42 = a16;
  sub_223F3A870((void ***)&a42);
  sub_223F59E90((void **)&STACK[0x2F8]);
  if (__p)
    operator delete(__p);
  if (a39)
    operator delete(a39);
  if (v42)
  {
    operator delete(v42);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_223F599F0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE188);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE188))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE180);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE188);
  }
  *a1 = qword_2540CE180;
}

void sub_223F59A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE188);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE188);
  _Unwind_Resume(a1);
}

void **sub_223F59AE4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 4);
        if (v5)
          free(v5);
        *((_QWORD *)v3 - 4) = 0;
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_223F59B58(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_223F4A4D8((void **)a1, a2);
    *(_QWORD *)(a1 + 8) = result;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v3 + 48) = v6;
    *(_OWORD *)v3 = v4;
    *(_OWORD *)(v3 + 16) = v5;
    v7 = *(_OWORD *)(a2 + 64);
    v8 = *(_OWORD *)(a2 + 80);
    v9 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v3 + 112) = v9;
    *(_OWORD *)(v3 + 64) = v7;
    *(_OWORD *)(v3 + 80) = v8;
    *(_DWORD *)(v3 + 128) = *(_DWORD *)(a2 + 128);
    *(_QWORD *)(v3 + 144) = 0;
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 136) = 0;
    *(_OWORD *)(v3 + 136) = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(v3 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    if (*(_BYTE *)(a2 + 184))
    {
      *(_QWORD *)(v3 + 160) = 0;
      *(_QWORD *)(v3 + 168) = 0;
      *(_QWORD *)(v3 + 176) = 0;
      *(_OWORD *)(v3 + 160) = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(v3 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_BYTE *)(v3 + 192) = *(_BYTE *)(a2 + 192);
    result = (char *)(v3 + 200);
    *(_QWORD *)(a1 + 8) = v3 + 200;
  }
  return result;
}

_QWORD *sub_223F59C2C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      sub_22316E078();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[8 * (v5 >> 3)];
    v7 = v5 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v6, v4, v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_223F59CAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F59CC8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_22324A284();
    v6 = 3 * a3;
    v7 = operator new(24 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_2236B97AC(v4, a2, a2 + v6 * 8, v7);
  }
  return a1;
}

void sub_223F59D64(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v2;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  void *v8;
  void *v9;

  v1[1] = v2;
  v4 = (char *)*v1;
  if (*v1)
  {
    v5 = (char *)v1[1];
    v6 = *v1;
    if (v5 != v4)
    {
      v7 = (char *)v1[1];
      do
      {
        v9 = (void *)*((_QWORD *)v7 - 3);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *((_QWORD *)v5 - 2) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = *v1;
    }
    v1[1] = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F59DC8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x2AAAAAAAAAAAAABLL)
      sub_22316E078();
    v5 = 96 * a3;
    v6 = (char *)operator new(96 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v8 = &v6[v7];
      v9 = *(_OWORD *)(a2 + v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
      *((_OWORD *)v8 + 1) = v9;
      v10 = *(_OWORD *)(a2 + v7 + 32);
      v11 = *(_OWORD *)(a2 + v7 + 48);
      v12 = *(_OWORD *)(a2 + v7 + 80);
      *((_OWORD *)v8 + 4) = *(_OWORD *)(a2 + v7 + 64);
      *((_OWORD *)v8 + 5) = v12;
      *((_OWORD *)v8 + 2) = v10;
      *((_OWORD *)v8 + 3) = v11;
      v7 += 96;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_223F59E74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **sub_223F59E90(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223F59F00(uint64_t result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(std::__shared_weak_count **)(result + 2640);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = v1[10];
    if (v5)
    {
      v6 = v1[11];
      v7 = (void *)v1[10];
      if (v6 != v5)
      {
        v8 = v1[11];
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v6 - 16) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = (void *)v1[10];
      }
      v1[11] = v5;
      operator delete(v7);
    }
    v11 = v1[7];
    if (v11)
    {
      v12 = v1[8];
      v13 = (void *)v1[7];
      if (v12 != v11)
      {
        v14 = v1[8];
        do
        {
          v16 = *(void **)(v14 - 24);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *(_QWORD *)(v12 - 16) = v15;
            operator delete(v15);
          }
          v12 = v14;
        }
        while (v14 != v11);
        v13 = (void *)v1[7];
      }
      v1[8] = v11;
      operator delete(v13);
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void ***sub_223F5A010(void ***result, uint32x2_t *a2, uint32x2_t *a3)
{
  void ***v3;
  uint64_t v4;
  uint32x2_t *v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  float32x2_t v11;
  void **v12;

  v3 = result;
  v9 = 0uLL;
  v10 = 0;
  v4 = (char *)a3 - (char *)a2;
  if (a3 == a2)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if (v4 < 0)
      sub_22316E078();
    v6 = a2;
    *(_QWORD *)&v9 = operator new((char *)a3 - (char *)a2);
    *((_QWORD *)&v9 + 1) = v9;
    v10 = (void **)(v9 + 8 * (v4 >> 3));
    v12 = (void **)&v9;
    do
    {
      v11 = vcvt_f32_u32(*v6);
      result = sub_2232EA538(&v12, &v11);
      ++v6;
    }
    while (v6 != a3);
    v7 = v9;
    v8 = v10;
  }
  *(_OWORD *)v3 = v7;
  v3[2] = v8;
  return result;
}

void sub_223F5A0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 **sub_223F5A0E4@<X0>(unsigned __int8 **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 **v4;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _BYTE *v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int i;
  int v30;
  unsigned __int8 *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *memptr;

  v4 = result;
  if (*((_DWORD *)result + 3))
    v6 = *((_DWORD *)result + 2) == 0;
  else
    v6 = 1;
  v7 = (unint64_t)result[1];
  if (v6)
    v8 = 0;
  else
    v8 = (unint64_t)result[1];
  v9 = v8 << 32;
  if (!HIDWORD(v8))
    v9 = 0;
  v10 = v8 != 0;
  if ((_DWORD)v8)
    v11 = HIDWORD(v8) == 0;
  else
    v11 = 1;
  v12 = v9 | v10;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9 | v10;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v11)
    v13 = 0;
  else
    v13 = v8;
  v14 = HIDWORD(v9);
  v15 = HIDWORD(v9) - 1;
  v16 = (HIDWORD(v13) * v14);
  if ((v14 & v15) != 0)
    v17 = 0;
  else
    v17 = v15;
  v18 = v17 | (v17 >> 1) | ((v17 | (v17 >> 1)) >> 2);
  v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
  v20 = v19 | (v19 >> 16) | ((v19 | (v19 >> 16)) >> 32);
  if (v20 + 1 > 8)
    v21 = v20 + 1;
  else
    v21 = 8;
  *(_QWORD *)(a3 + 32) = v16;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v21;
  if (!(_DWORD)v16)
  {
    v22 = 0;
    v23 = HIDWORD(v7);
    *(_QWORD *)(a3 + 56) = v13;
    *(_QWORD *)(a3 + 64) = v12;
    if (!(_DWORD)v7)
      return result;
    goto LABEL_26;
  }
  memptr = 0;
  result = (unsigned __int8 **)malloc_type_posix_memalign(&memptr, v21, (HIDWORD(v13) * v14), 0x1F88E90uLL);
  if ((_DWORD)result)
    sub_2244E2E20((int)result, v21, (HIDWORD(v13) * v14));
  v22 = memptr;
  *(_QWORD *)(a3 + 40) = memptr;
  LODWORD(v7) = *((_DWORD *)v4 + 2);
  LODWORD(v23) = *((_DWORD *)v4 + 3);
  *(_QWORD *)(a3 + 56) = v13;
  *(_QWORD *)(a3 + 64) = v12;
  if ((_DWORD)v7)
  {
LABEL_26:
    if ((_DWORD)v23)
    {
      v24 = v7 - 1;
      v25 = *((unsigned int *)v4 + 4);
      v26 = *v4;
      v27 = v23 - 1;
      if (v27)
      {
        v28 = *((unsigned int *)v4 + 5);
        if (v24)
        {
          for (i = 0; i != v27; ++i)
          {
            v30 = v24;
            v31 = v26;
            v32 = v22;
            do
            {
              if (*(_BYTE *)(a2 + *v31))
                result = (unsigned __int8 **)*v31;
              else
                result = 0;
              *v32 = (_BYTE)result;
              v31 += v25;
              v32 += v10;
              --v30;
            }
            while (v30);
            v33 = *v31;
            if (!*(_BYTE *)(a2 + v33))
              LOBYTE(v33) = 0;
            *v32 = v33;
            v26 += v28;
            v22 += v14;
          }
        }
        else
        {
          do
          {
            v34 = *v26;
            if (!*(_BYTE *)(a2 + v34))
              LOBYTE(v34) = 0;
            *v22 = v34;
            v26 += v28;
            v22 += v14;
            --v27;
          }
          while (v27);
        }
      }
      for (; v24; --v24)
      {
        v35 = *v26;
        if (!*(_BYTE *)(a2 + v35))
          LOBYTE(v35) = 0;
        *v22 = v35;
        v26 += v25;
        v22 += v10;
      }
      v36 = *v26;
      if (!*(_BYTE *)(a2 + v36))
        LOBYTE(v36) = 0;
      *v22 = v36;
    }
  }
  return result;
}

void sub_223F5A2F4(unsigned __int8 **a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL8 v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char v47;
  _BYTE v48[28];
  size_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;

  if (!a2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v8 = *a1;
  v9 = *((unsigned int *)a1 + 2);
  v10 = *((unsigned int *)a1 + 4);
  v44 = *((unsigned int *)a1 + 5);
  v45 = *((unsigned int *)a1 + 3);
  v11 = (size_t)a1[3];
  v51 = 0;
  v52 = 0;
  v53 = 0;
  if (v11)
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_22316E078();
    v12 = (char *)operator new(v11);
    v51 = v12;
    v53 = &v12[v11];
    memset(v12, a2, v11);
    v52 = &v12[v11];
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
  do
  {
    v12[*(unsigned __int8 *)(a3 + v13)] = v13;
    ++v13;
  }
  while (a2 != v13);
  v47 = 0;
  if ((_DWORD)v9)
    v14 = (_DWORD)v45 == 0;
  else
    v14 = 1;
  v15 = v14;
  v16 = v9 | (v45 << 32);
  if (v14)
    v16 = 0;
  v17 = v16 << 32;
  if (!HIDWORD(v16))
    v17 = 0;
  v18 = v16 != 0;
  if ((_DWORD)v16)
    v19 = HIDWORD(v16) == 0;
  else
    v19 = 1;
  *(_QWORD *)v48 = v16;
  *(_QWORD *)&v48[8] = v17 | v18;
  v48[16] = 0;
  v48[24] = 0;
  if (v19)
    v16 = 0;
  v54 = v16;
  v55 = v17 | v18;
  if ((HIDWORD(v17) & (HIDWORD(v17) - 1)) != 0)
    v20 = 1;
  else
    v20 = HIDWORD(v17);
  sub_223316930(&v49, &v54, (void **)&v55, 1, (void **)&v47, 1, v20);
  *a4 = 0;
  a4[1] = 0;
  v46 = a4;
  a4[2] = 0;
  if (a2 >= 0x38E38E38E38E38FLL)
    sub_22316E078();
  v43 = v15;
  v21 = 72 * a2;
  v22 = operator new(72 * a2);
  *v46 = (uint64_t)v22;
  v46[1] = (uint64_t)v22;
  v23 = (char *)v22 + 72 * a2;
  v46[2] = (uint64_t)v23;
  do
  {
    *v22 = *(_OWORD *)v48;
    *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)&v48[12];
    sub_223333C70((uint64_t)(v22 + 2), (uint64_t)&v49);
    v22 = (_OWORD *)((char *)v22 + 72);
    v21 -= 72;
  }
  while (v21);
  v46[1] = (uint64_t)v23;
  if (v50)
    free(v50);
  if ((v43 & 1) == 0)
  {
    v24 = v9 - 1;
    v25 = (v45 - 1);
    if ((_DWORD)v45 == 1)
    {
      v25 = 0;
    }
    else
    {
      v26 = 0;
      if ((_DWORD)v9 == 1)
      {
        v40 = *v46;
        do
        {
          v41 = *v8;
          if ((unint64_t)a1[3] > v41)
          {
            v42 = v12[v41];
            if (a2 > v42)
              *(_BYTE *)(*(_QWORD *)(v40 + 72 * v42 + 40)
                       + *(_DWORD *)(v40 + 72 * v42 + 8) * (v26 % v9)
                       + *(_DWORD *)(v40 + 72 * v42 + 12) * (v26 / v9)) = 1;
          }
          ++v26;
          v8 += v44;
        }
        while (v25 != v26);
      }
      else
      {
        v27 = 0;
        v28 = *v46;
        do
        {
          v29 = v24 + v26;
          v30 = v8;
          do
          {
            v31 = *v30;
            if ((unint64_t)a1[3] > v31)
            {
              v32 = v12[v31];
              if (a2 > v32)
                *(_BYTE *)(*(_QWORD *)(v28 + 72 * v32 + 40)
                         + *(_DWORD *)(v28 + 72 * v32 + 8) * (v26 % v9)
                         + *(_DWORD *)(v28 + 72 * v32 + 12) * (v26 / v9)) = 1;
            }
            ++v26;
            v30 += v10;
          }
          while (v29 != (_DWORD)v26);
          v33 = *v30;
          if ((unint64_t)a1[3] > v33)
          {
            v34 = v12[v33];
            if (a2 > v34)
              *(_BYTE *)(*(_QWORD *)(v28 + 72 * v34 + 40)
                       + *(_DWORD *)(v28 + 72 * v34 + 8) * (v26 % v9)
                       + *(_DWORD *)(v28 + 72 * v34 + 12) * (v26 / v9)) = 1;
          }
          ++v26;
          v8 += v44;
          ++v27;
        }
        while (v27 != (_DWORD)v25);
        v25 = v26;
      }
    }
    if ((_DWORD)v9 != 1)
    {
      v35 = *v46;
      do
      {
        v36 = *v8;
        if ((unint64_t)a1[3] > v36)
        {
          v37 = v12[v36];
          if (a2 > v37)
            *(_BYTE *)(*(_QWORD *)(v35 + 72 * v37 + 40)
                     + *(_DWORD *)(v35 + 72 * v37 + 8) * (v25 % v9)
                     + *(_DWORD *)(v35 + 72 * v37 + 12) * (v25 / v9)) = 1;
        }
        ++v25;
        v8 += v10;
        --v24;
      }
      while (v24);
    }
    v38 = *v8;
    if ((unint64_t)a1[3] <= v38)
    {
      if (!v12)
        return;
    }
    else
    {
      v39 = v12[v38];
      if (a2 > v39)
        *(_BYTE *)(*(_QWORD *)(*v46 + 72 * v39 + 40)
                 + *(_DWORD *)(*v46 + 72 * v39 + 8) * (v25 % v9)
                 + *(_DWORD *)(*v46 + 72 * v39 + 12) * (v25 / v9)) = 1;
    }
  }
  operator delete(v12);
}

void sub_223F5A6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;

  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_223F5A780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  char *v29;
  char v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;

  v6 = *(_DWORD *)(a3 + 8);
  if (v6 != *(_DWORD *)(a1 + 8)
    || (v7 = *(_DWORD *)(a3 + 12), v7 != *(_DWORD *)(a1 + 12))
    || v6 != *(_DWORD *)(a2 + 8)
    || v7 != *(_DWORD *)(a2 + 12))
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/SegmentBasedPlanePopupDetectorImpl.cpp", 88, (uint64_t)"dst.Shape() == label1.Shape() && label1.Shape() == label2.Shape()", 65, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE **)a1;
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_BYTE **)a2;
  v14 = *(_QWORD *)(a3 + 8);
  v13 = *(_QWORD *)(a3 + 16);
  v15 = *(char **)a3;
  v16 = (HIDWORD(result) * HIDWORD(v9));
  v17 = (HIDWORD(v13) * HIDWORD(v14));
  if ((_DWORD)v16 || (!(HIDWORD(*(_QWORD *)(a2 + 16)) * HIDWORD(v11)) ? (v18 = v17 == 0) : (v18 = 0), !v18))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 16);
    result = HIDWORD(*(_QWORD *)(a1 + 16)) + v22 - *(_QWORD *)(a1 + 16) * v9;
    v23 = *(_QWORD *)(a2 + 16);
    v24 = HIDWORD(*(_QWORD *)(a2 + 16)) + v23 - *(_QWORD *)(a2 + 16) * v11;
    v25 = v13;
    v26 = HIDWORD(v13) + v13 - (v13 * v14);
    v27 = &v10[v16];
    v28 = &v12[(HIDWORD(*(_QWORD *)(a2 + 16)) * HIDWORD(v11))];
    v29 = &v15[v17];
    do
    {
      if (*v10)
        v30 = 1;
      else
        v30 = 2 * (*v12 != 0);
      *v15 = v30;
      v31 = v21 + 1;
      if (v21 + 1 == (_DWORD)v9)
        v21 = 0;
      else
        ++v21;
      if (v31 == (_DWORD)v9)
        v32 = result;
      else
        v32 = v22;
      v10 += v32;
      v33 = v20 + 1;
      if (v20 + 1 == (_DWORD)v11)
        v20 = 0;
      else
        ++v20;
      if (v33 == (_DWORD)v11)
        v34 = v24;
      else
        v34 = v23;
      v12 += v34;
      v35 = v19 + 1;
      if (v19 + 1 == (_DWORD)v14)
        v19 = 0;
      else
        ++v19;
      if (v35 == (_DWORD)v14)
        v36 = v26;
      else
        v36 = v25;
      v15 += v36;
    }
    while (v10 != v27 || v12 != v28 || v15 != v29);
  }
  return result;
}

double sub_223F5A924@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  int64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double result;
  uint64_t v76;
  int v78;
  int v79;
  unsigned __int8 *v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v85;
  uint64_t v86;
  char *__p;
  char *v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = HIDWORD(v2);
  if (v2 < 3 || HIDWORD(v2) <= 2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  v5 = a1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v88 = 0;
  v85 = HIDWORD(v2);
  v86 = *(_QWORD *)(a1 + 8);
  while (2)
  {
    v10 = *(unsigned int *)(v5 + 16);
    v11 = (unsigned __int8 *)(*(_QWORD *)v5 + (*(_DWORD *)(v5 + 20) * v8));
    v12 = *v11;
    v13 = v11[v10];
    v78 = v8;
    v14 = v8 * v2 - 1;
    v15 = 2;
    v16 = v9;
    v80 = v11;
    v82 = v10;
    v79 = v14;
    do
    {
      v18 = v11[(v15 * v10)];
      if (v12)
      {
        if (v11[(v15 * v10)] && v12 != v18)
        {
          v20 = (v14 + v15);
          if (v6 < v7)
          {
            *(_QWORD *)v6 = v20;
            v17 = (uint64_t)(v6 + 8);
LABEL_10:
            v88 = (char *)v17;
            v6 = (char *)v17;
            goto LABEL_11;
          }
          v21 = (v6 - v16) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            sub_22367C394();
          if ((v7 - v16) >> 2 > v22)
            v22 = (v7 - v16) >> 2;
          if ((unint64_t)(v7 - v16) >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
          {
            if (v23 >> 61)
              sub_223174E94();
            v24 = v23;
            v25 = operator new(8 * v23);
            v23 = v24;
            v9 = &v25[8 * v21];
            *(_QWORD *)v9 = v20;
            v17 = (uint64_t)(v9 + 8);
            v26 = v6 - v16;
            if (v6 == v16)
              goto LABEL_32;
          }
          else
          {
            v25 = 0;
            v9 = (char *)(8 * v21);
            *(_QWORD *)(8 * v21) = v20;
            v17 = 8 * v21 + 8;
            v26 = v6 - v16;
            if (v6 == v16)
              goto LABEL_32;
          }
          v27 = v26 - 8;
          if (v27 >= 0x168)
          {
            v31 = (v6 - 8 - v16) & 0xFFFFFFFFFFFFFFF8;
            if (&v25[v6 - v16 - 8 - v31] > &v25[v6 - v16 - 8])
            {
              v28 = v6;
            }
            else if (&v6[-v31 - 8] > v6 - 8)
            {
              v28 = v6;
            }
            else if ((unint64_t)(v16 - v25) >= 0x20)
            {
              v32 = (v27 >> 3) + 1;
              v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
              v28 = &v6[-v33];
              v9 -= v33;
              v34 = &v25[8 * v21 - 16];
              v35 = v6 - 16;
              v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v37 = *(_OWORD *)v35;
                *(v34 - 1) = *((_OWORD *)v35 - 1);
                *v34 = v37;
                v34 -= 2;
                v35 -= 32;
                v36 -= 4;
              }
              while (v36);
              if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_32;
            }
            else
            {
              v28 = v6;
            }
          }
          else
          {
            v28 = v6;
          }
          do
          {
            v29 = *((_QWORD *)v28 - 1);
            v28 -= 8;
            *((_QWORD *)v9 - 1) = v29;
            v9 -= 8;
          }
          while (v28 != v16);
LABEL_32:
          v7 = &v25[8 * v23];
          __p = v9;
          if (v16)
          {
            v30 = &v25[8 * v23];
            operator delete(v16);
            v7 = v30;
          }
          v16 = v9;
          LODWORD(v3) = v85;
          LODWORD(v2) = v86;
          v11 = v80;
          LODWORD(v10) = v82;
          v14 = v79;
          goto LABEL_10;
        }
      }
LABEL_11:
      ++v15;
      v12 = v13;
      v13 = v18;
    }
    while (v15 != (_DWORD)v2);
    v8 = v78 + 1;
    v5 = a1;
    if (v78 + 1 != (_DWORD)v3)
      continue;
    break;
  }
  v38 = 0;
  v81 = v2;
  while (2)
  {
    v39 = *(_DWORD *)(v5 + 16) * v38;
    v40 = *(unsigned __int8 *)(*(_QWORD *)v5 + v39);
    v41 = *(unsigned __int8 *)(*(_QWORD *)v5 + *(_DWORD *)(v5 + 20) + v39);
    v42 = 2;
    v43 = v9;
    v83 = v38;
    while (2)
    {
      v45 = v40;
      v40 = v41;
      v41 = *(unsigned __int8 *)(*(_QWORD *)v5 + (*(_DWORD *)(v5 + 16) * v38 + *(_DWORD *)(v5 + 20) * v42));
      if (v45)
      {
        if (*(_BYTE *)(*(_QWORD *)v5 + (*(_DWORD *)(v5 + 16) * v38 + *(_DWORD *)(v5 + 20) * v42))
          && v45 != v41)
        {
          v47 = (v38 + (v42 - 1) * v2);
          if (v6 < v7)
          {
            *(_QWORD *)v6 = v47;
            v44 = (uint64_t)(v6 + 8);
          }
          else
          {
            v48 = (v6 - v43) >> 3;
            v49 = v48 + 1;
            if ((unint64_t)(v48 + 1) >> 61)
              sub_22367C394();
            if ((v7 - v43) >> 2 > v49)
              v49 = (v7 - v43) >> 2;
            if ((unint64_t)(v7 - v43) >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v49;
            if (v50)
            {
              if (v50 >> 61)
                sub_223174E94();
              v51 = v50;
              v52 = operator new(8 * v50);
              v50 = v51;
              v9 = &v52[8 * v48];
              *(_QWORD *)v9 = v47;
              v44 = (uint64_t)(v9 + 8);
              v53 = v6 - v43;
              if (v6 != v43)
              {
LABEL_66:
                v54 = v53 - 8;
                if (v54 < 0x168
                  || (v58 = (v6 - 8 - v43) & 0xFFFFFFFFFFFFFFF8, &v52[v6 - v43 - 8 - v58] > &v52[v6 - v43 - 8])
                  || &v6[-v58 - 8] > v6 - 8
                  || (unint64_t)(v43 - v52) < 0x20)
                {
                  v55 = v6;
                  v5 = a1;
                }
                else
                {
                  v59 = (v54 >> 3) + 1;
                  v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
                  v55 = &v6[-v60];
                  v9 -= v60;
                  v61 = &v52[8 * v48 - 16];
                  v62 = v6 - 16;
                  v63 = v59 & 0x3FFFFFFFFFFFFFFCLL;
                  v5 = a1;
                  do
                  {
                    v64 = *(_OWORD *)v62;
                    *(v61 - 1) = *((_OWORD *)v62 - 1);
                    *v61 = v64;
                    v61 -= 2;
                    v62 -= 32;
                    v63 -= 4;
                  }
                  while (v63);
                  if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_69:
                    v7 = &v52[8 * v50];
                    __p = v9;
                    if (v43)
                      goto LABEL_70;
                    goto LABEL_71;
                  }
                }
                do
                {
                  v56 = *((_QWORD *)v55 - 1);
                  v55 -= 8;
                  *((_QWORD *)v9 - 1) = v56;
                  v9 -= 8;
                }
                while (v55 != v43);
                goto LABEL_69;
              }
            }
            else
            {
              v52 = 0;
              v9 = (char *)(8 * v48);
              *(_QWORD *)(8 * v48) = v47;
              v44 = 8 * v48 + 8;
              v53 = v6 - v43;
              if (v6 != v43)
                goto LABEL_66;
            }
            v5 = a1;
            v7 = &v52[8 * v50];
            __p = v9;
            if (v43)
            {
LABEL_70:
              v57 = v7;
              operator delete(v43);
              v7 = v57;
            }
LABEL_71:
            v43 = v9;
            LODWORD(v3) = v85;
            LODWORD(v2) = v86;
            v38 = v83;
          }
          v88 = (char *)v44;
          v6 = (char *)v44;
        }
      }
      if (++v42 != (_DWORD)v3)
        continue;
      break;
    }
    if (++v38 != (_DWORD)v2)
      continue;
    break;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v65 = __p;
  v66 = v88;
  v67 = __p;
  if (__p == v88)
  {
LABEL_92:
    if (v67 != v88)
      v66 = v67;
  }
  else
  {
    v68 = __p + 8;
    while (v68 != v88)
    {
      v69 = *((_QWORD *)v68 - 1);
      v70 = *(_QWORD *)v68;
      v68 += 8;
      if (v69 == v70)
      {
        v71 = v68 - 16;
        while (v68 != v88)
        {
          v72 = v69;
          v69 = *(_QWORD *)v68;
          if (v72 != *(_QWORD *)v68)
          {
            *((_QWORD *)v71 + 1) = v69;
            v71 += 8;
          }
          v68 += 8;
        }
        v67 = v71 + 8;
        goto LABEL_92;
      }
    }
  }
  v89 = 0uLL;
  v90 = 0;
  v73 = v66 - __p;
  if (v66 == __p)
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    a2[2] = 0;
    if (v66)
      goto LABEL_99;
  }
  else
  {
    if (v73 < 0)
      sub_22316E078();
    *(_QWORD *)&v89 = operator new(v66 - __p);
    *((_QWORD *)&v89 + 1) = v89;
    v90 = v89 + 8 * (v73 >> 3);
    v92 = (void **)&v89;
    do
    {
      v74 = *(_QWORD *)v65 / v81;
      *(float *)&v91 = (float)(*(_QWORD *)v65 % v81);
      *((float *)&v91 + 1) = (float)v74;
      sub_2232EA538(&v92, &v91);
      v65 += 8;
    }
    while (v65 != v66);
    result = *(double *)&v89;
    v76 = v90;
    v66 = __p;
    *(_OWORD *)a2 = v89;
    a2[2] = v76;
    if (__p)
LABEL_99:
      operator delete(v66);
  }
  return result;
}

void sub_223F5AF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F5AFAC(unint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _QWORD *a7)
{
  size_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int8x8_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t ***v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  float *v26;
  float *v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  float v36;
  size_t v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float *v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (a5 >> 62)
    sub_22316E078();
  v13 = 4 * a5;
  v14 = (float *)operator new(4 * a5);
  bzero(v14, v13);
  v15 = 0;
  do
  {
    v16 = a6 + 20 * v15;
    v17 = *(unsigned __int8 *)(v16 + 16);
    v18 = (int8x8_t)a7[1];
    if (v18)
    {
      v19 = (uint8x8_t)vcnt_s8(v18);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        v20 = *(unsigned __int8 *)(v16 + 16);
        if (*(_QWORD *)&v18 <= v17)
          v20 = v17 % *(_QWORD *)&v18;
      }
      else
      {
        v20 = (v18.i32[0] - 1) & v17;
      }
      v21 = *(uint64_t ****)(*a7 + 8 * v20);
      if (v21)
      {
        v22 = *v21;
        if (v22)
        {
          if (v19.u32[0] < 2uLL)
          {
            v23 = *(_QWORD *)&v18 - 1;
            while (1)
            {
              v24 = v22[1];
              if (v24 == (uint64_t *)v17)
              {
                if (*((unsigned __int8 *)v22 + 16) == (_DWORD)v17)
                  goto LABEL_5;
              }
              else if (((unint64_t)v24 & v23) != v20)
              {
                goto LABEL_26;
              }
              v22 = (uint64_t **)*v22;
              if (!v22)
                goto LABEL_26;
            }
          }
          do
          {
            v25 = (unint64_t)v22[1];
            if (v25 == v17)
            {
              if (*((unsigned __int8 *)v22 + 16) == (_DWORD)v17)
                goto LABEL_5;
            }
            else
            {
              if (v25 >= *(_QWORD *)&v18)
                v25 %= *(_QWORD *)&v18;
              if (v25 != v20)
                break;
            }
            v22 = (uint64_t **)*v22;
          }
          while (v22);
        }
      }
    }
LABEL_26:
    sub_223F2D394(a1, a2, (float *)(a4 + 8 * v17), (float *)v16, (float *)(v16 + 8), &v43);
    v26 = v43;
    if ((unint64_t)((char *)v44 - (char *)v43) < 0x18)
    {
      v14[v15] = 0.0;
      if (!v26)
        goto LABEL_5;
    }
    else
    {
      v27 = v43 + 3;
      v28 = 0.0;
      v29 = (((char *)v44 - (char *)v43) >> 3) - 1;
      v30 = v43[1];
      v31 = *v43;
      do
      {
        v32 = *v27;
        v33 = v28 - (float)(v31 * *v27);
        v31 = *(v27 - 1);
        v28 = v33 + (float)(v30 * v31);
        v27 += 2;
        v30 = v32;
        --v29;
      }
      while (v29);
      v14[v15] = fabsf((float)((float)(v28 - (float)(v43[1] * v43[2 * (((char *)v44 - (char *)v43) >> 3) - 2]))+ (float)(*v43 * v43[2 * (((char *)v44 - (char *)v43) >> 3) - 1]))* 0.5);
    }
    v44 = v26;
    operator delete(v26);
LABEL_5:
    ++v15;
  }
  while (v15 != a5);
  v34 = v14;
  if (a5 != 1)
  {
    v35 = v14 + 1;
    v36 = *v14;
    v37 = v13 - 4;
    v34 = v14;
    v38 = v14 + 1;
    do
    {
      v39 = *v38++;
      v40 = v39;
      if (v36 < v39)
      {
        v36 = v40;
        v34 = v35;
      }
      v35 = v38;
      v37 -= 4;
    }
    while (v37);
  }
  v41 = *v34;
  operator delete(v14);
  if (((v41 != 0.0) & (fabsf(v41) > 0.000001)) != 0)
    return v34 - v14;
  else
    return 0;
}

void sub_223F5B250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int8x16_t sub_223F5B278@<Q0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, uint64_t a3@<X2>, float32x2_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, int8x16_t a7@<Q0>, float32x2_t a8@<D1>, float32x4_t a9@<Q4>)
{
  float v9;
  int8x16_t v10;
  float v11;
  BOOL v12;
  float32x2_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int32x2_t v19;
  float32x4_t v20;
  int32x2_t v21;
  float32x4_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t result;

  a8.i32[0] = *(_DWORD *)(a1 + 20);
  a7.i64[0] = *(_QWORD *)(a1 + 12);
  a7.i32[2] = a8.i32[0];
  v9 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a7.i8, *(float32x2_t *)a7.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.i8, 1), *(float32x2_t *)a7.i8, 1), a8, a8).f32[0];
  v10 = a7;
  if (v9 != 1.0)
  {
    v11 = v9 + -1.0;
    if (v9 < 1.0)
      v11 = 1.0 - v9;
    v12 = v11 > 0.000001;
    v10 = a7;
    if (v12)
      v10 = (int8x16_t)vmulq_n_f32((float32x4_t)a7, 1.0 / sqrtf(v9));
  }
  a9.i32[0] = *(_DWORD *)(a1 + 8);
  v13 = (float32x2_t)vextq_s8(v10, v10, 8uLL).u64[0];
  v13.f32[0] = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)a1, *(float32x2_t *)v10.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), *(float32x2_t *)a1, 1), v13, *(float32x2_t *)a9.f32).f32[0];
  v14 = (float32x4_t)vdupq_lane_s32((int32x2_t)v13, 0);
  v15 = (int8x16_t)vdivq_f32((float32x4_t)a7, v14);
  v16 = *(float32x2_t *)(a3 + 12);
  v17 = *(float32x2_t *)(a3 + 24);
  *(float32x2_t *)v14.f32 = vadd_f32(v17, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a3, COERCE_FLOAT(*a2)), v16, *a2, 1));
  v18 = (float32x2_t)vextq_s8(v15, v15, 8uLL).u64[0];
  v14.i32[2] = 1.0;
  v19 = (int32x2_t)vadd_f32(v18, vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)v14.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.f32, 1), *(float32x2_t *)v15.i8, 1));
  *(float *)v19.i32 = -*(float *)v19.i32;
  v20 = vdivq_f32(v14, (float32x4_t)vdupq_lane_s32(v19, 0));
  *(float32x2_t *)a9.f32 = vadd_f32(v17, vmla_lane_f32(vmul_n_f32(*(float32x2_t *)a3, COERCE_FLOAT(*(_QWORD *)&a2[1])), v16, a2[1], 1));
  a9.i32[2] = 1.0;
  v21 = (int32x2_t)vadd_f32(v18, vmla_lane_f32(vmul_f32(*(float32x2_t *)v15.i8, *(float32x2_t *)a9.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)a9.f32, 1), *(float32x2_t *)v15.i8, 1));
  *(float *)v21.i32 = -*(float *)v21.i32;
  v22 = vdivq_f32(a9, (float32x4_t)vdupq_lane_s32(v21, 0));
  if (a5)
  {
    v23 = (float32x2_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL).u64[0];
    v24 = (int32x2_t)vmla_f32(vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32), v23, v23);
    a7 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
    *a4 = vsqrt_f32((float32x2_t)vzip1_s32(v24, (int32x2_t)vmla_f32(vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32), *(float32x2_t *)a7.i8, *(float32x2_t *)a7.i8)));
    a7.i64[0] = *(_QWORD *)(a1 + 12);
    a7.i32[2] = *(_DWORD *)(a1 + 20);
  }
  v25 = (int32x4_t)vsubq_f32(v22, v20);
  v26 = vaddq_f32(v20, v22);
  v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL);
  v28.i64[0] = 0x3F0000003F000000;
  v28.i64[1] = 0x3F0000003F000000;
  v29 = vmlsq_f32(vmulq_f32(v27, (float32x4_t)vextq_s8(vextq_s8(a7, a7, 0xCuLL), a7, 8uLL)), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v25, (int8x16_t)v25, 0xCuLL), (int8x16_t)v25, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a7, (int32x4_t)a7), a7, 0xCuLL));
  v30 = (int8x16_t)vmulq_f32(v26, v28);
  v25.i64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v31 = vmulq_n_f32(v29, 1.0/ sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v29.f32, *(float32x2_t *)v29.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1), *(float32x2_t *)v29.f32, 1), *(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8).f32[0]));
  v32 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
  *(float32x2_t *)v27.f32 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v31.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.f32, 1), *(float32x2_t *)v30.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL), *(float32x2_t *)v32.f32);
  v32.i32[0] = 0;
  *(_DWORD *)(a6 + 8) = v30.i32[2];
  result = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v27, v32), 0), (int8x16_t)vnegq_f32(v31), (int8x16_t)v31);
  *(_QWORD *)a6 = v30.i64[0];
  *(_DWORD *)(a6 + 20) = result.i32[2];
  *(_QWORD *)(a6 + 12) = result.i64[0];
  return result;
}

uint64_t sub_223F5B458(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v6;

  *(_QWORD *)a1 = a2;
  v6 = a2;
  v3 = operator new();
  sub_223F5C51C(v3, &v6);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = sub_223F5BE0C;
  v4 = *(_DWORD *)a1 >= 3u && *(_DWORD *)(a1 + 4) > 2u;
  if (!v4
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/SingleShotPlaneDetector.cpp", 76, (uint64_t)"areParametersValid(m_params)", 28, (uint64_t)&unk_2245ABA71, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_223F5B504(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 16))();
  _Unwind_Resume(exception_object);
}

void sub_223F5B54C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  void *v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  void **v21;
  const void *v22;
  char *v23;
  const void *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  float32x4_t v30;
  float32x4_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  char ***v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  char v63;
  void *v64;
  char *v65;
  char v66[33];
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  void *v71;
  void *__p;
  void *v73;
  _QWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(void);
  std::__shared_weak_count *v95;
  _BYTE v96[32];
  float32x4_t v97;
  float32x4_t v98;

  kdebug_trace();
  sub_223F5BCB0(&v92);
  if (**(int **)(v92 + 56) <= 1)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_2540CE198);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE198))
    {
      qword_2540CE190 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SingleShotDetect");
      __cxa_guard_release(&qword_2540CE198);
    }
    v9 = qword_2540CE190;
    *(_BYTE *)(qword_2540CE190 + 16) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v9 = std::chrono::steady_clock::now();
    *(_BYTE *)(v9 + 16) = 1;
  }
  kdebug_trace();
  sub_223F5BCB0(&v92);
  if (**(int **)(v92 + 56) <= 1)
  {
    v11 = atomic_load((unsigned __int8 *)&qword_2540CE1C8);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE1C8))
    {
      qword_2540CE1C0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_CreateVoronoiDiagram");
      __cxa_guard_release(&qword_2540CE1C8);
    }
    v12 = qword_2540CE1C0;
    *(_BYTE *)(qword_2540CE1C0 + 16) = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v12 = std::chrono::steady_clock::now();
    *(_BYTE *)(v12 + 16) = 1;
  }
  v13 = *(void **)a1;
  v66[0] = 0;
  v91 = 0;
  v14 = *(unsigned __int8 *)(a3 + 504);
  if (*(_BYTE *)(a3 + 504))
  {
    sub_223F5BFB8((uint64_t)v66, a3);
    sub_223F5C0EC((uint64_t)&v70, a3 + 136);
    v74[0] = &off_24EC64998;
    v74[1] = &off_24EC64920;
    v15 = *(_OWORD *)(a3 + 304);
    v75 = *(_OWORD *)(a3 + 288);
    v76 = v15;
    v77 = *(_OWORD *)(a3 + 320);
    v78 = *(_QWORD *)(a3 + 336);
    v79 = *(_DWORD *)(a3 + 344);
    v80 = *(_QWORD *)(a3 + 348);
    v16 = *(_QWORD *)(a3 + 368);
    v81 = *(_QWORD *)(a3 + 360);
    v82 = v16;
    v17 = *(float64x2_t *)(a3 + 456);
    v87 = *(float64x2_t *)(a3 + 440);
    v88 = v17;
    v18 = *(float64x2_t *)(a3 + 488);
    v89 = *(float64x2_t *)(a3 + 472);
    v90 = v18;
    v19 = *(float64x2_t *)(a3 + 392);
    v83 = *(float64x2_t *)(a3 + 376);
    v84 = v19;
    v20 = *(float64x2_t *)(a3 + 424);
    v85 = *(float64x2_t *)(a3 + 408);
    v86 = v20;
    v91 = 1;
  }
  v64 = v13;
  v21 = *(void ***)(a2 + 176);
  v22 = *(const void **)(a2 + 184);
  v23 = *(char **)(a2 + 192);
  v24 = *(const void **)(a2 + 200);
  v25 = *(_QWORD *)(a2 + 208);
  v26 = *(_QWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 224);
  v28 = *(_QWORD *)(a2 + 232);
  if (v14)
  {
    *(float32x4_t *)v96 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v83), v84);
    *(float32x4_t *)&v96[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v85), v86);
    v97 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v87), v88);
    v98 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v89), v90);
    sub_223F3C71C((uint64_t)&v92, v21, v22, v23, v24, v25, v26, v10, v27, v28, (__int128 *)v96, (uint64_t)v74, &v64);
  }
  else
  {
    sub_223F3C71C((uint64_t)&v92, v21, v22, v23, v24, v25, v26, v10, v27, v28, (__int128 *)(a2 + 104), a2, &v64);
  }
  if (v91)
  {
    v74[0] = &off_24EC64998;
    if (__p)
    {
      v73 = __p;
      operator delete(__p);
    }
    if (v71)
      free(v71);
    v71 = 0;
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v67)
      free(v67);
    v67 = 0;
  }
  kdebug_trace();
  sub_223F5BCB0(v96);
  if (**(int **)(*(_QWORD *)v96 + 56) <= 1)
  {
    v32 = atomic_load((unsigned __int8 *)&qword_2540CE1D8);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE1D8))
    {
      qword_2540CE1D0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_CreateVoronoiDiagram");
      __cxa_guard_release(&qword_2540CE1D8);
    }
    v33 = qword_2540CE1D0;
    if (*(_BYTE *)(qword_2540CE1D0 + 16))
    {
      *(_QWORD *)(v33 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v33;
      *(_BYTE *)(v33 + 16) = 0;
    }
  }
  v34 = *(_DWORD *)(a2 + 168);
  if ((v34 & 2) != 0)
  {
    sub_223F3C9B0((uint64_t)&v92, v96, v29, v30, v31);
    v36 = *(void **)v96;
    v35 = *(_QWORD *)&v96[8];
    v34 = *(_DWORD *)(a2 + 168);
  }
  else
  {
    v35 = 0;
    v36 = 0;
  }
  v37 = *(_QWORD *)(a1 + 8);
  v38 = *(char ****)(a2 + 176);
  v39 = *(uint64_t **)(a2 + 184);
  v40 = *(_QWORD *)(a2 + 192);
  v41 = *(uint64_t **)(a2 + 200);
  v42 = *(_QWORD *)(a2 + 208);
  v43 = *(_QWORD *)(a2 + 216);
  v44 = *(_QWORD *)(a2 + 224);
  v45 = *(_QWORD *)(a2 + 232);
  v62[0] = (v35 - (uint64_t)v36) >> 3;
  v62[1] = v36;
  v63 = 1;
  sub_223F5C690(v37, v38, v39, v40, v41, v42, v43, (uint64_t)&v64, v44, v45, (float32x2_t *)(a2 + 104), (uint64_t)v62, v34);
  v46 = *(_BYTE *)(a3 + 504);
  if (v46)
  {
    v47 = *(_QWORD *)a3;
    v48 = *(_QWORD *)(a3 + 24);
    v49 = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v96[8] = *(_OWORD *)(a3 + 8);
    *(_QWORD *)v96 = v47;
    *(_QWORD *)&v96[24] = v48;
    v97.i64[0] = v49;
    v46 = 1;
  }
  else
  {
    v96[0] = 0;
  }
  v97.i8[8] = v46;
  sub_223F3CF54((unsigned int *)&v92, (uint64_t *)&v64, (__int128 *)v96, a4);
  v50 = (char *)v64;
  if (v64)
  {
    v51 = v65;
    v52 = v64;
    if (v65 != v64)
    {
      do
      {
        v53 = (void *)*((_QWORD *)v51 - 3);
        if (v53)
        {
          *((_QWORD *)v51 - 2) = v53;
          operator delete(v53);
        }
        v54 = (void *)*((_QWORD *)v51 - 6);
        if (v54)
        {
          *((_QWORD *)v51 - 5) = v54;
          operator delete(v54);
        }
        v51 -= 80;
      }
      while (v51 != v50);
      v52 = v64;
    }
    v65 = v50;
    operator delete(v52);
  }
  if (v36)
    operator delete(v36);
  v55 = v95;
  if (!v95)
    goto LABEL_48;
  p_shared_owners = (unint64_t *)&v95->__shared_owners_;
  do
    v57 = __ldaxr(p_shared_owners);
  while (__stlxr(v57 - 1, p_shared_owners));
  if (v57)
  {
LABEL_48:
    v58 = v93;
    v93 = 0;
    if (!v58)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
  std::__shared_weak_count::__release_weak(v55);
  v61 = v93;
  v93 = 0;
  if (v61)
LABEL_49:
    v94();
LABEL_50:
  kdebug_trace();
  sub_223F5BCB0(&v92);
  if (**(int **)(v92 + 56) <= 1)
  {
    v59 = atomic_load((unsigned __int8 *)&qword_2540CE1A8);
    if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE1A8))
    {
      qword_2540CE1A0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SingleShotDetect");
      __cxa_guard_release(&qword_2540CE1A8);
    }
    v60 = qword_2540CE1A0;
    if (*(_BYTE *)(qword_2540CE1A0 + 16))
    {
      *(_QWORD *)(v60 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v60;
      *(_BYTE *)(v60 + 16) = 0;
    }
  }
}

void sub_223F5BB64(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_2540CE1A8);
  sub_223F5BDA4(v1);
  _Unwind_Resume(a1);
}

void sub_223F5BB84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE1D8);
  sub_223F5BF38((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_223F5BBA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE1C8);
  _Unwind_Resume(a1);
}

void sub_223F5BBBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE198);
  _Unwind_Resume(a1);
}

void sub_223F5BBD4(_Unwind_Exception *a1)
{
  sub_223F5BF38((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_223F5BBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
  {
    a35 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a30)
    free(a30);
  a30 = 0;
  sub_223F5BEC4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_223F5BC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_223F5BEC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F5BC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_223F5BDA4(v1);
  _Unwind_Resume(a1);
}

void sub_223F5BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  sub_223F4FB24((void **)va);
  if (v9)
  {
    operator delete(v9);
    sub_223F5BF38((uint64_t)&STACK[0x258]);
    _Unwind_Resume(a1);
  }
  sub_223F5BF38((uint64_t)&STACK[0x258]);
  _Unwind_Resume(a1);
}

void sub_223F5BC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_223F5BEC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223F5BCB0(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE1B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE1B8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE1B0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE1B8);
  }
  *a1 = qword_2540CE1B0;
}

void sub_223F5BD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE1B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE1B8);
  _Unwind_Resume(a1);
}

uint64_t sub_223F5BDA4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v6 = (void **)(a1 + 48);
  sub_223F45A94(&v6);
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_223F5BE0C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v1 = result;
    v2 = *(std::__shared_weak_count **)(result + 2560);
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (!v7)
      {
LABEL_8:
        v6 = *(_QWORD *)(v1 + 8);
        *(_QWORD *)(v1 + 8) = 0;
        if (v6)
          (*(void (**)(void))(v1 + 16))();
        JUMPOUT(0x227684CE8);
      }
    }
    else
    {
LABEL_6:
      v5 = *(_QWORD *)(result + 24);
      *(_QWORD *)(v1 + 24) = 0;
      if (!v5)
        goto LABEL_8;
    }
    (*(void (**)(void))(v1 + 32))();
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_223F5BEC4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 504))
  {
    *(_QWORD *)(a1 + 272) = &off_24EC64998;
    v2 = *(void **)(a1 + 248);
    if (v2)
    {
      *(_QWORD *)(a1 + 256) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 216);
    if (v3)
      free(v3);
    *(_QWORD *)(a1 + 216) = 0;
    v4 = *(void **)(a1 + 112);
    if (v4)
    {
      *(_QWORD *)(a1 + 120) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(a1 + 80);
    if (v5)
      free(v5);
    *(_QWORD *)(a1 + 80) = 0;
  }
  return a1;
}

uint64_t sub_223F5BF38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 2544);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v7)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

uint64_t sub_223F5BFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p;
  char *v14;
  char *v15;
  __int128 v16[2];
  uint64_t v17;
  void *v18;

  v16[0] = *(_OWORD *)(a2 + 40);
  *(__int128 *)((char *)v16 + 12) = *(_OWORD *)(a2 + 52);
  sub_223333C70((uint64_t)&v17, a2 + 72);
  __p = 0;
  v14 = 0;
  v15 = 0;
  v4 = *(_QWORD *)(a2 + 112);
  v5 = *(_QWORD *)(a2 + 120);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    if (v6 < 0)
      sub_22316E078();
    v7 = (char *)operator new(v5 - v4);
    v8 = 0;
    __p = v7;
    v15 = &v7[16 * (v6 >> 4)];
    do
    {
      v9 = v4 + v8;
      v10 = &v7[v8];
      *v10 = *(_BYTE *)(v4 + v8);
      v11 = *(_QWORD *)(v4 + v8 + 4);
      *((_DWORD *)v10 + 3) = *(_DWORD *)(v4 + v8 + 12);
      *(_QWORD *)(v10 + 4) = v11;
      v8 += 16;
    }
    while (v9 + 16 != v5);
    v14 = &v7[v8];
  }
  sub_223F5C258(a1, v16, (uint64_t)&__p);
  if (__p)
  {
    v14 = (char *)__p;
    operator delete(__p);
  }
  if (v18)
    free(v18);
  return a1;
}

void sub_223F5C0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v19 = a18;
    if (!a18)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v19 = a18;
    if (!a18)
      goto LABEL_3;
  }
  free(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F5C0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *__p;
  char *v19;
  char *v20;
  __int128 v21[2];
  uint64_t v22;
  void *v23;

  v21[0] = *(_OWORD *)(a2 + 40);
  *(__int128 *)((char *)v21 + 12) = *(_OWORD *)(a2 + 52);
  sub_223333C70((uint64_t)&v22, a2 + 72);
  __p = 0;
  v19 = 0;
  v20 = 0;
  v5 = *(_QWORD *)(a2 + 112);
  v4 = *(_QWORD *)(a2 + 120);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 4);
    if (v7 >= 0x24924924924924ALL)
      sub_22316E078();
    v8 = (char *)operator new(v6);
    v9 = 0;
    __p = v8;
    v20 = &v8[112 * v7];
    do
    {
      v10 = v5 + v9;
      v11 = &v8[v9];
      v12 = *(_OWORD *)(v5 + v9 + 16);
      *(_OWORD *)v11 = *(_OWORD *)(v5 + v9);
      *((_OWORD *)v11 + 1) = v12;
      v13 = *(_OWORD *)(v5 + v9 + 32);
      v14 = *(_OWORD *)(v5 + v9 + 48);
      v15 = *(_OWORD *)(v5 + v9 + 80);
      *((_OWORD *)v11 + 4) = *(_OWORD *)(v5 + v9 + 64);
      *((_OWORD *)v11 + 5) = v15;
      *((_OWORD *)v11 + 2) = v13;
      *((_OWORD *)v11 + 3) = v14;
      v16 = *(_QWORD *)(v5 + v9 + 96);
      *((_DWORD *)v11 + 26) = *(_DWORD *)(v5 + v9 + 104);
      *((_QWORD *)v11 + 12) = v16;
      v9 += 112;
    }
    while (v10 + 112 != v4);
    v19 = &v8[v9];
  }
  sub_223F5C3B0(a1, v21, (uint64_t)&__p);
  if (__p)
  {
    v19 = (char *)__p;
    operator delete(__p);
  }
  if (v23)
    free(v23);
  return a1;
}

void sub_223F5C21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v19;

  if (__p)
  {
    operator delete(__p);
    v19 = a18;
    if (!a18)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v19 = a18;
    if (!a18)
      goto LABEL_3;
  }
  free(v19);
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F5C258(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 72) = a2[2];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v7 = *(_DWORD *)(a1 + 40) == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (HIDWORD(v8) * HIDWORD(v9) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = (*(_QWORD *)(a1 + 120) - v10) >> 4;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v10;
  return a1;
}

void sub_223F5C36C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 80);
    if (!v6)
    {
LABEL_3:
      *(_QWORD *)(v1 + 80) = 0;
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v6 = *(void **)(v1 + 80);
    if (!v6)
      goto LABEL_3;
  }
  free(v6);
  *(_QWORD *)(v1 + 80) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F5C3B0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = *a2;
  *(_OWORD *)(a1 + 52) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 72) = a2[2];
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v5 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(a1 + 44))
    v7 = *(_DWORD *)(a1 + 40) == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  if (HIDWORD(v8) * HIDWORD(v9) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v8;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 120) - v10) >> 4);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v10;
  return a1;
}

void sub_223F5C4D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 120) = v5;
    operator delete(v5);
    v6 = *(void **)(v1 + 80);
    if (!v6)
    {
LABEL_3:
      *(_QWORD *)(v1 + 80) = 0;
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v6 = *(void **)(v1 + 80);
    if (!v6)
      goto LABEL_3;
  }
  free(v6);
  *(_QWORD *)(v1 + 80) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_223F5C51C(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t i;
  int v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = sub_223F56A60;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = sub_223F5D430;
  v3 = 5489;
  *(_DWORD *)(a1 + 40) = 5489;
  v4 = 1;
  for (i = 11; i != 634; ++i)
  {
    v6 = 1812433253 * (v3 ^ (v3 >> 30));
    v3 = v6 + v4;
    *(_DWORD *)(a1 + 4 * i) = i + v6 - 10;
    ++v4;
  }
  *(_QWORD *)(a1 + 2536) = 0;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A710;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24EC7A760;
  LODWORD(v7[1].__shared_owners_) = 5489;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  *(_QWORD *)(a1 + 2544) = &off_24EC7A6B0;
  *(_QWORD *)(a1 + 2552) = v7 + 1;
  *(_QWORD *)(a1 + 2560) = v7;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return a1;
}

void sub_223F5C684(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

void sub_223F5C690(uint64_t a1@<X0>, char ***a2@<X1>, uint64_t *a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, unint64_t a9, uint64_t a10, float32x2_t *a11, uint64_t a12, char a13)
{
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  void *v45;
  float32x4_t v46;
  double v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x2_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  double v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  double v63;
  double v64;
  uint64_t v65;
  char *v66;
  double v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t v70;
  double v71;
  double v72;
  uint64_t v73;
  float32x2_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  char *v78;
  void *v79;
  void *v80;
  char *v81;
  int8x16_t v82;
  float32x2_t v83;
  int8x16_t v84;
  float32x2_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x2_t v90;
  float32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  float v94;
  int8x16_t v95;
  float v96;
  BOOL v97;
  unsigned __int8 v98;
  uint64_t v99;
  int32x4_t v100;
  int32x4_t v101;
  float32x4_t v102;
  float32x2_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int8x16_t v106;
  unint64_t v107;
  uint64_t *v108;
  __int128 v110;
  uint64_t v111;
  unint64_t v112[4];
  unint64_t v113[6];
  char *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  char *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  char ***v124;
  void *v125;
  uint64_t v126;
  char v127;

  v21 = a9;
  v20 = a10;
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  if ((a13 & 1) != 0)
  {
    sub_223F5D358((uint64_t *)&v120, a4, (uint64_t)a5);
    sub_223F5D358((uint64_t *)&v114, a9, a10);
    v22 = *(_DWORD **)(a1 + 8);
    if (!v22)
    {
      v22 = (_DWORD *)operator new();
      *v22 = *(_DWORD *)a1;
      v23 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v22;
      if (v23)
      {
        (*(void (**)(uint64_t))(a1 + 16))(v23);
        v22 = *(_DWORD **)(a1 + 8);
      }
      *(_QWORD *)(a1 + 16) = sub_223F56A60;
    }
    v113[0] = (unint64_t)a2;
    v113[1] = (unint64_t)a3;
    v113[2] = (uint64_t)(v121 - (_QWORD)v120) >> 2;
    v113[3] = (unint64_t)v120;
    v112[0] = a6;
    v112[1] = a7;
    v112[2] = ((char *)v115 - v114) >> 2;
    v112[3] = (unint64_t)v114;
    sub_223F4DAD0((unint64_t)v22, v113, v112, &v125);
    v107 = a6;
    v24 = a7;
    sub_223F527FC(a8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 4)- 0x3333333333333333 * ((v126 - (uint64_t)v125) >> 4));
    v26 = (uint64_t)v125;
    v25 = v126;
    if (v125 != (void *)v126)
    {
      v27 = *(char **)(a8 + 8);
      do
      {
        if ((unint64_t)v27 < *(_QWORD *)(a8 + 16))
        {
          v28 = *(_QWORD *)v26;
          *((_DWORD *)v27 + 2) = *(_DWORD *)(v26 + 8);
          *(_QWORD *)v27 = v28;
          v29 = *(_QWORD *)(v26 + 12);
          *((_DWORD *)v27 + 5) = *(_DWORD *)(v26 + 20);
          *(_QWORD *)(v27 + 12) = v29;
          v27[24] = *(_BYTE *)(v26 + 24);
          *((_QWORD *)v27 + 5) = 0;
          *((_QWORD *)v27 + 6) = 0;
          *((_QWORD *)v27 + 4) = 0;
          *((_OWORD *)v27 + 2) = *(_OWORD *)(v26 + 32);
          *((_QWORD *)v27 + 6) = *(_QWORD *)(v26 + 48);
          *(_QWORD *)(v26 + 32) = 0;
          *(_QWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *((_QWORD *)v27 + 7) = 0;
          *((_QWORD *)v27 + 8) = 0;
          *((_QWORD *)v27 + 9) = 0;
          *(_OWORD *)(v27 + 56) = *(_OWORD *)(v26 + 56);
          *((_QWORD *)v27 + 9) = *(_QWORD *)(v26 + 72);
          *(_QWORD *)(v26 + 56) = 0;
          *(_QWORD *)(v26 + 64) = 0;
          *(_QWORD *)(v26 + 72) = 0;
          v27 += 80;
        }
        else
        {
          v27 = sub_223F5E138((char **)a8, v26);
        }
        *(_QWORD *)(a8 + 8) = v27;
        v26 += 80;
      }
      while (v26 != v25);
      v26 = (uint64_t)v125;
    }
    if (v26)
    {
      v30 = v126;
      v31 = (void *)v26;
      if (v126 != v26)
      {
        do
        {
          v32 = *(void **)(v30 - 24);
          if (v32)
          {
            *(_QWORD *)(v30 - 16) = v32;
            operator delete(v32);
          }
          v33 = *(void **)(v30 - 48);
          if (v33)
          {
            *(_QWORD *)(v30 - 40) = v33;
            operator delete(v33);
          }
          v30 -= 80;
        }
        while (v30 != v26);
        v31 = v125;
      }
      v126 = v26;
      operator delete(v31);
    }
    if (v114)
      operator delete(v114);
    a7 = v24;
    v20 = a10;
    if (v120)
      operator delete(v120);
    a6 = v107;
    v21 = a9;
  }
  if ((a13 & 2) != 0)
  {
    v34 = v20;
    v35 = *(uint64_t **)(a1 + 24);
    if (!v35)
    {
      v35 = (uint64_t *)operator new();
      sub_223F5E364(v35, *(_DWORD *)(a1 + 4));
      v36 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v35;
      if (v36)
      {
        (*(void (**)(void))(a1 + 32))();
        v35 = *(uint64_t **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 32) = sub_223F5D430;
    }
    v110 = *(_OWORD *)a12;
    v111 = *(_QWORD *)(a12 + 16);
    sub_223F5E478(v35, a2, a3, a4, a5, a6, a7, (uint64_t)&v120, v21, v34, &v110);
    sub_223F527FC(a8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 4)- 0x3333333333333333 * ((uint64_t)(v121 - (_QWORD)v120) >> 4));
    v38 = v120;
    v37 = (char *)v121;
    if (v120 != (char *)v121)
    {
      v39 = *(char **)(a8 + 8);
      do
      {
        if ((unint64_t)v39 < *(_QWORD *)(a8 + 16))
        {
          v40 = *(_QWORD *)v38;
          *((_DWORD *)v39 + 2) = *((_DWORD *)v38 + 2);
          *(_QWORD *)v39 = v40;
          v41 = *(_QWORD *)(v38 + 12);
          *((_DWORD *)v39 + 5) = *((_DWORD *)v38 + 5);
          *(_QWORD *)(v39 + 12) = v41;
          v39[24] = v38[24];
          *((_QWORD *)v39 + 5) = 0;
          *((_QWORD *)v39 + 6) = 0;
          *((_QWORD *)v39 + 4) = 0;
          *((_OWORD *)v39 + 2) = *((_OWORD *)v38 + 2);
          *((_QWORD *)v39 + 6) = *((_QWORD *)v38 + 6);
          *((_QWORD *)v38 + 4) = 0;
          *((_QWORD *)v38 + 5) = 0;
          *((_QWORD *)v38 + 6) = 0;
          *((_QWORD *)v39 + 7) = 0;
          *((_QWORD *)v39 + 8) = 0;
          *((_QWORD *)v39 + 9) = 0;
          *(_OWORD *)(v39 + 56) = *(_OWORD *)(v38 + 56);
          *((_QWORD *)v39 + 9) = *((_QWORD *)v38 + 9);
          *((_QWORD *)v38 + 7) = 0;
          *((_QWORD *)v38 + 8) = 0;
          *((_QWORD *)v38 + 9) = 0;
          v39 += 80;
        }
        else
        {
          v39 = sub_223F5E138((char **)a8, (uint64_t)v38);
        }
        *(_QWORD *)(a8 + 8) = v39;
        v38 += 80;
      }
      while (v38 != v37);
      v38 = v120;
    }
    if (v38)
    {
      v42 = (char *)v121;
      v43 = v38;
      if ((char *)v121 != v38)
      {
        do
        {
          v44 = (void *)*((_QWORD *)v42 - 3);
          if (v44)
          {
            *((_QWORD *)v42 - 2) = v44;
            operator delete(v44);
          }
          v45 = (void *)*((_QWORD *)v42 - 6);
          if (v45)
          {
            *((_QWORD *)v42 - 5) = v45;
            operator delete(v45);
          }
          v42 -= 80;
        }
        while (v42 != v38);
        v43 = v120;
      }
      *(_QWORD *)&v121 = v38;
      operator delete(v43);
    }
  }
  kdebug_trace();
  sub_223F5D488(&v120);
  if (**((int **)v120 + 7) <= 1)
  {
    v53 = atomic_load((unsigned __int8 *)&qword_2540CE1E8);
    if ((v53 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE1E8))
    {
      qword_2540CE1E0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_RefinePlanesAngleAndPoints");
      __cxa_guard_release(&qword_2540CE1E8);
    }
    v54 = qword_2540CE1E0;
    *(_BYTE *)(qword_2540CE1E0 + 16) = 0;
    *(_QWORD *)(v54 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v54 = std::chrono::steady_clock::now();
    *(_BYTE *)(v54 + 16) = 1;
  }
  *(float32x2_t *)v46.f32 = *a11;
  v105 = (int32x4_t)v46;
  v46.i32[2] = a11[1].i32[0];
  v101 = (int32x4_t)v46;
  *(float32x2_t *)v46.f32 = a11[2];
  v104 = (int32x4_t)v46;
  v46.i32[2] = a11[3].i32[0];
  v100 = (int32x4_t)v46;
  v46.i32[0] = a11[5].i32[0];
  v103 = *(float32x2_t *)v46.f32;
  *(float32x2_t *)v46.f32 = a11[4];
  v106 = (int8x16_t)v46;
  *(float32x2_t *)v46.f32 = a11[6];
  v46.i32[2] = a11[7].i32[0];
  v102 = v46;
  v56 = *(char **)a8;
  v55 = *(char **)(a8 + 8);
  if (*(char **)a8 == v55)
  {
    v58 = *(char **)a8;
  }
  else
  {
    v57 = a1 + 40;
    v58 = *(char **)(a8 + 8);
    while (1)
    {
      LODWORD(v47) = a11[1].i32[0];
      *(float32x2_t *)v48.i8 = a11[2];
      v49.i32[0] = a11[3].i32[0];
      v59 = *(double *)&a11[4];
      v50.i32[0] = a11[5].i32[0];
      v52.i32[0] = *((_DWORD *)v56 + 2);
      *(float32x2_t *)v60.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, COERCE_FLOAT(*(_QWORD *)v56)), *(float32x2_t *)v48.i8, *(float32x2_t *)v56, 1), *(float32x2_t *)&v59, v52.f32[0]);
      *(float32x2_t *)&v60.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, *(float32x2_t *)v56), *(float32x2_t *)v49.f32, *(float32x2_t *)v56, 1), v52, v50);
      *(float32x2_t *)v51.f32 = a11[6];
      v51.i32[2] = a11[7].i32[0];
      v61 = vaddq_f32(v60, v51);
      v62 = *(float32x2_t *)(v56 + 12);
      v60.i32[0] = *((_DWORD *)v56 + 5);
      *(float32x2_t *)v46.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, v62.f32[0]), *(float32x2_t *)v48.i8, v62, 1), *(float32x2_t *)&v59, v60.f32[0]);
      v63 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, v62), *(float32x2_t *)v49.f32, v62, 1), *(float32x2_t *)v60.f32, v50));
      LODWORD(v121) = v61.i32[2];
      v120 = (char *)v61.i64[0];
      *(_QWORD *)((char *)&v121 + 4) = v46.i64[0];
      HIDWORD(v121) = LODWORD(v63);
      v46.f32[0] = sub_223F52F44((uint64_t)&v120, v46, v63, v48, v49, v59, v50);
      if (v46.f32[0] < 15.0)
        break;
      v65 = *((_QWORD *)v56 + 5);
      v120 = (char *)*((_QWORD *)v56 + 4);
      *(_QWORD *)&v121 = a3;
      *((_QWORD *)&v121 + 1) = a2;
      v122 = v65;
      v123 = a3;
      v124 = a2;
      v114 = v120;
      v115 = a5;
      v116 = a4;
      v117 = v65;
      v118 = a5;
      v119 = a4;
      sub_223F5D57C((__int8 *)&v125, v57, (uint64_t)&v120, &v114, *(double *)v46.i64, v47, (float32x4_t)v48, *(double *)v49.i64, v64, v50, *(double *)v51.i64, v52);
      if (v127)
        break;
      v56 += 80;
      if (v56 == v55)
        goto LABEL_71;
    }
    v108 = a5;
    if (v56 != v55)
    {
      v66 = v56 + 80;
      if (v56 + 80 == v55)
      {
        v58 = v56;
        v78 = *(char **)(a8 + 8);
        if (v56 == v78)
          goto LABEL_80;
        goto LABEL_74;
      }
      v58 = v56;
      do
      {
        LODWORD(v47) = a11[1].i32[0];
        *(float32x2_t *)v48.i8 = a11[2];
        v49.i32[0] = a11[3].i32[0];
        v67 = *(double *)&a11[4];
        v50.i32[0] = a11[5].i32[0];
        v52.i32[0] = *((_DWORD *)v66 + 2);
        *(float32x2_t *)v68.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, COERCE_FLOAT(*(_QWORD *)v66)), *(float32x2_t *)v48.i8, *(float32x2_t *)v66, 1), *(float32x2_t *)&v67, v52.f32[0]);
        *(float32x2_t *)&v68.u32[2] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, *(float32x2_t *)v66), *(float32x2_t *)v49.f32, *(float32x2_t *)v66, 1), v52, v50);
        *(float32x2_t *)v51.f32 = a11[6];
        v51.i32[2] = a11[7].i32[0];
        v69 = vaddq_f32(v68, v51);
        v70 = *(float32x2_t *)(v66 + 12);
        v68.i32[0] = *((_DWORD *)v66 + 5);
        *(float32x2_t *)v46.f32 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*a11, v70.f32[0]), *(float32x2_t *)v48.i8, v70, 1), *(float32x2_t *)&v67, v68.f32[0]);
        v71 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v47, v70), *(float32x2_t *)v49.f32, v70, 1), *(float32x2_t *)v68.f32, v50));
        LODWORD(v121) = v69.i32[2];
        v120 = (char *)v69.i64[0];
        *(_QWORD *)((char *)&v121 + 4) = v46.i64[0];
        HIDWORD(v121) = LODWORD(v71);
        v46.f32[0] = sub_223F52F44((uint64_t)&v120, v46, v71, v48, v49, v67, v50);
        if (v46.f32[0] >= 15.0)
        {
          v73 = *((_QWORD *)v66 + 5);
          v120 = (char *)*((_QWORD *)v66 + 4);
          *(_QWORD *)&v121 = a3;
          *((_QWORD *)&v121 + 1) = a2;
          v122 = v73;
          v123 = a3;
          v124 = a2;
          v114 = v120;
          v115 = v108;
          v116 = a4;
          v117 = v73;
          v118 = v108;
          v119 = a4;
          sub_223F5D57C((__int8 *)&v125, v57, (uint64_t)&v120, &v114, *(double *)v46.i64, v47, (float32x4_t)v48, *(double *)v49.i64, v72, v50, *(double *)v51.i64, v52);
          if (!v127)
          {
            v74 = *(float32x2_t *)v66;
            *((_DWORD *)v58 + 2) = *((_DWORD *)v66 + 2);
            *(float32x2_t *)v58 = v74;
            v75 = *(_QWORD *)(v66 + 12);
            *((_DWORD *)v58 + 5) = *((_DWORD *)v66 + 5);
            *(_QWORD *)(v58 + 12) = v75;
            v58[24] = v66[24];
            v76 = (void *)*((_QWORD *)v58 + 4);
            if (v76)
            {
              *((_QWORD *)v58 + 5) = v76;
              operator delete(v76);
              *((_QWORD *)v58 + 4) = 0;
              *((_QWORD *)v58 + 5) = 0;
              *((_QWORD *)v58 + 6) = 0;
            }
            *((_OWORD *)v58 + 2) = *((_OWORD *)v66 + 2);
            *((_QWORD *)v58 + 6) = *((_QWORD *)v66 + 6);
            *((_QWORD *)v66 + 4) = 0;
            *((_QWORD *)v66 + 5) = 0;
            *((_QWORD *)v66 + 6) = 0;
            v77 = (void *)*((_QWORD *)v58 + 7);
            if (v77)
            {
              *((_QWORD *)v58 + 8) = v77;
              operator delete(v77);
              *((_QWORD *)v58 + 7) = 0;
              *((_QWORD *)v58 + 8) = 0;
              *((_QWORD *)v58 + 9) = 0;
            }
            v46 = *(float32x4_t *)(v66 + 56);
            *(float32x4_t *)(v58 + 56) = v46;
            *((_QWORD *)v58 + 9) = *((_QWORD *)v66 + 9);
            *((_QWORD *)v66 + 7) = 0;
            *((_QWORD *)v66 + 8) = 0;
            *((_QWORD *)v66 + 9) = 0;
            v58 += 80;
          }
        }
        v66 += 80;
      }
      while (v66 != v55);
    }
  }
LABEL_71:
  v78 = *(char **)(a8 + 8);
  if (v58 == v78)
    goto LABEL_80;
LABEL_74:
  while (v78 != v58)
  {
    v79 = (void *)*((_QWORD *)v78 - 3);
    if (v79)
    {
      *((_QWORD *)v78 - 2) = v79;
      operator delete(v79);
    }
    v80 = (void *)*((_QWORD *)v78 - 6);
    if (v80)
    {
      *((_QWORD *)v78 - 5) = v80;
      operator delete(v80);
    }
    v78 -= 80;
  }
  *(_QWORD *)(a8 + 8) = v58;
LABEL_80:
  v81 = *(char **)a8;
  if (*(char **)a8 != v58)
  {
    v82 = (int8x16_t)vnegq_f32(v102);
    v88.i64[1] = v100.i64[1];
    v83 = (float32x2_t)vtrn2q_s32(v101, v100).u64[0];
    v84.i32[1] = v105.i32[1];
    v85 = (float32x2_t)vzip2q_s32(v101, v100).u64[0];
    v87 = v106;
    *(float32x2_t *)v86.f32 = vmls_laneq_f32(vmls_lane_f32(vmul_n_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8), *(float *)v82.i32), v83, *(float32x2_t *)v102.f32, 1), v85, v102, 2);
    v87.i32[2] = v103.i32[0];
    *(float32x2_t *)&v86.u32[2] = vmla_f32(vmls_lane_f32(vmul_f32(*(float32x2_t *)v106.i8, *(float32x2_t *)v82.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1), *(float32x2_t *)v102.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL), v103);
    v88.i64[0] = 0;
    *(float32x2_t *)v82.i8 = vmla_f32(vmla_f32(vmul_f32((float32x2_t)*(_OWORD *)&vzip1q_s32(v105, v104), 0), 0, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)v83, 0), (int8x16_t)vdupq_lane_s32((int32x2_t)v83, 1), 0xCuLL)), 0, v85);
    v82.u64[1] = (unint64_t)vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v106.i8, 0), 0, *(float32x2_t *)v106.i8, 1), 0, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
    v89 = (int8x16_t)vaddq_f32((float32x4_t)v82, v86);
    v90 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1);
    v91 = (float32x2_t)vextq_s8(v89, v89, 8uLL).u64[0];
    do
    {
      v84.i32[0] = *((_DWORD *)v81 + 5);
      v87.i64[0] = *(_QWORD *)(v81 + 12);
      v93 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1);
      v87.i32[2] = v84.i32[0];
      v94 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v87.i8, *(float32x2_t *)v87.i8), v93, *(float32x2_t *)v87.i8, 1), *(float32x2_t *)v84.i8, *(float32x2_t *)v84.i8).f32[0];
      v95 = v87;
      if (v94 != 1.0)
      {
        v96 = v94 + -1.0;
        if (v94 < 1.0)
          v96 = 1.0 - v94;
        v97 = v96 > 0.000001;
        v95 = v87;
        if (v97)
          v95 = (int8x16_t)vmulq_n_f32((float32x4_t)v87, 1.0 / sqrtf(v94));
      }
      v93.i32[0] = *((_DWORD *)v81 + 2);
      v92 = (float32x2_t)vextq_s8(v95, v95, 8uLL).u64[0];
      *(float32x2_t *)v95.i8 = vsub_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v89.i8, *(float32x2_t *)v95.i8), v90, *(float32x2_t *)v95.i8, 1), v92, v91), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v81, *(float32x2_t *)v95.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1), *(float32x2_t *)v81, 1), v92, v93));
      v84 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v88, (float32x4_t)v95), 0);
      v87 = vbslq_s8(v84, (int8x16_t)vnegq_f32((float32x4_t)v87), v87);
      *((_DWORD *)v81 + 5) = v87.i32[2];
      *(_QWORD *)(v81 + 12) = v87.i64[0];
      v81 += 80;
    }
    while (v81 != v58);
  }
  kdebug_trace();
  sub_223F5D488(&v120);
  if (**((int **)v120 + 7) <= 1)
  {
    v98 = atomic_load((unsigned __int8 *)&qword_2540CE1F8);
    if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE1F8))
    {
      qword_2540CE1F0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_RefinePlanesAngleAndPoints");
      __cxa_guard_release(&qword_2540CE1F8);
    }
    v99 = qword_2540CE1F0;
    if (*(_BYTE *)(qword_2540CE1F0 + 16))
    {
      *(_QWORD *)(v99 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v99;
      *(_BYTE *)(v99 + 16) = 0;
    }
  }
}

void sub_223F5D1F0(_Unwind_Exception *a1)
{
  void **v1;

  __cxa_guard_abort(&qword_2540CE1F8);
  sub_223F4FB24(v1);
  _Unwind_Resume(a1);
}

void sub_223F5D210(_Unwind_Exception *a1)
{
  void **v1;

  __cxa_guard_abort(&qword_2540CE1E8);
  sub_223F4FB24(v1);
  _Unwind_Resume(a1);
}

void sub_223F5D238(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  MEMORY[0x227684CE8](v2, 0xA0C40AFF93C70);
  sub_223F4FB24(v1);
  _Unwind_Resume(a1);
}

void sub_223F5D264(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  sub_223F4FB24((void **)(v2 - 192));
  sub_223F4FB24(v1);
  _Unwind_Resume(a1);
}

void sub_223F5D330(_Unwind_Exception *a1)
{
  void **v1;

  sub_223F4FB24(v1);
  _Unwind_Resume(a1);
}

void sub_223F5D344(_Unwind_Exception *a1)
{
  void **v1;

  sub_223F4FB24(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_223F5D358(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  int *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 *v13;

  v3 = result;
  v10 = 0uLL;
  v11 = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_22316E078();
    *(_QWORD *)&v10 = operator new(4 * a2);
    *((_QWORD *)&v10 + 1) = v10;
    v11 = v10 + 4 * a2;
    v13 = &v10;
    v6 = 36 * a2;
    v7 = (int *)(a3 + 32);
    do
    {
      v12 = *v7;
      result = sub_2233D7140((uint64_t *)&v13, &v12);
      v7 += 9;
      v6 -= 36;
    }
    while (v6);
    v8 = v10;
    v9 = v11;
  }
  else
  {
    v9 = 0;
    v8 = 0uLL;
  }
  *(_OWORD *)v3 = v8;
  v3[2] = v9;
  return result;
}

void sub_223F5D410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F5D430(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    *v1 = 0;
    if (v2)
      ((void (*)(void))v1[1])();
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_223F5D488(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE208);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE208))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE200);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE208);
  }
  *a1 = qword_2540CE200;
}

void sub_223F5D524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE208);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE208);
  _Unwind_Resume(a1);
}

void sub_223F5D57C(__int8 *a1, uint64_t a2, uint64_t a3, _QWORD *a4, double a5, double a6, float32x4_t a7, double a8, double a9, float32x2_t a10, double a11, float32x2_t a12)
{
  float32x2_t v12;
  float32x4_t v13;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  int v24;
  float v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x16_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  double v45;
  float32x4_t v46;
  unint64_t v47;
  float v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  uint64_t v66;
  int8x16_t v67;
  float32x2_t v68;
  float32x2_t v69;
  unint64_t *v70;
  char *v72;
  char *v73;
  int8x16_t v74;
  unint64_t *v75;
  char *v76;
  unint64_t v77;
  __int8 *v78;
  __int8 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float v87;
  float32x2_t v88;
  uint64_t v90;
  int8x16_t v91;
  float32x2_t v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  char *v99;
  int64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int8x16_t *v107;
  int8x16_t *v108;
  uint64_t v109;
  int8x16_t v110;
  unint64_t *v111;
  unint64_t *v112;
  __int8 v113;
  unint64_t v114;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  int v119;
  float32x4_t v120;
  uint64_t v121;
  float32x2_t v122;
  float32x2_t v123;
  int8x16_t v124;
  unint64_t *v125;
  float32x4_t v126;
  unint64_t *v127;
  unint64_t *v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  char v132;
  float v133;
  char v134;
  void *__p;
  void *v136;
  uint64_t v137;
  unsigned int v138;
  _BYTE v139[20];
  __int32 v140;
  char v141;
  char *v142;
  char *v143;
  char *v144;
  float v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  _QWORD v149[3];
  __int128 v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x24BDAC8D0];
  v17 = *(unint64_t **)(a3 + 24);
  v18 = *(unint64_t **)a3;
  v19 = (uint64_t)(*(_QWORD *)a3 - (_QWORD)v17) >> 3;
  v127 = (unint64_t *)a4[3];
  if (v19 != (uint64_t)(*a4 - (_QWORD)v127) >> 3)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/include_private/ACV/SurfaceDetection/Geometry/FitLine3Ransac.h", 93, (uint64_t)"Size(points) == Size(covariances)", 33, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
    {
      abort();
    }
    v18 = *(unint64_t **)a3;
    v17 = *(unint64_t **)(a3 + 24);
    v127 = (unint64_t *)a4[3];
  }
  v129 = 2;
  v130 = 100;
  LOBYTE(v133) = 0;
  v134 = 0;
  v114 = vcvtas_u32_f32((float)(unint64_t)-v19 * 0.9);
  v131 = v114;
  v132 = 1;
  v20 = *(_OWORD *)(a3 + 8);
  v21 = a4[2];
  v22 = *(_OWORD *)a4;
  v146 = v20;
  v147 = v22;
  v148 = v21;
  v139[0] = 0;
  v141 = 0;
  v143 = 0;
  v144 = 0;
  v142 = 0;
  v145 = 0.0;
  v138 = (unint64_t)((char *)v17 - (char *)v18) >> 3;
  if (v138 < 2)
    goto LABEL_56;
  v23 = v18;
  v113 = 0;
  v119 = 0;
  v116 = 0;
  v24 = 0;
  v111 = &v149[2];
  v112 = v18 + 1;
  v25 = 0.0;
  v128 = v17;
  v117 = a2;
  v118 = v18;
  while (1)
  {
    v26 = v138;
    if (v129 > v138)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Random/include/Essentials/Random/Sample.h", 195, (uint64_t)"T{0} <= k && k <= n", 19, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v26 = v138;
    }
    if (v26)
    {
      LODWORD(v20) = v129;
      if ((double)v26 * 0.5 >= (double)(unint64_t)v20)
        sub_223CD005C(a2, &v138, (unsigned int *)&v129, (uint64_t)&__p);
      else
        sub_223CCFE58(a2, &v138, (unsigned int *)&v129, (int32x4_t **)&__p);
    }
    else
    {
      __p = 0;
      v136 = 0;
      v137 = 0;
    }
    v27 = __p;
    v28 = *(unsigned int *)__p;
    v151 = v148;
    *(_OWORD *)&v149[1] = v146;
    *((_QWORD *)&v150 + 1) = *((_QWORD *)&v147 + 1);
    v29 = v28;
    v30 = &v23[v28];
    v31 = (unint64_t *)(v147 + 8 * v28);
    v149[0] = v30;
    *(_QWORD *)&v150 = v31;
    v32 = v23[v29];
    if (*((_QWORD *)&v146 + 1) <= v32)
      goto LABEL_118;
    v33 = *v31;
    if (v151 <= v33)
    {
      v111 = &v151;
      v32 = v33;
LABEL_118:
      sub_22457354C(v111, v32);
    }
    v34 = v149[1];
    v35 = *((unsigned int *)__p + 1);
    v151 = v148;
    *(_OWORD *)&v149[1] = v146;
    *((_QWORD *)&v150 + 1) = *((_QWORD *)&v147 + 1);
    v35 *= 8;
    v36 = (unint64_t *)(v147 + v35);
    v149[0] = (char *)v23 + v35;
    *(_QWORD *)&v150 = v147 + v35;
    v37 = *(unint64_t *)((char *)v23 + v35);
    if (*((_QWORD *)&v146 + 1) <= v37)
    {
      v32 = v37;
      goto LABEL_118;
    }
    v38 = *v36;
    if (v151 <= v38)
      sub_22457354C(&v151, v38);
    v39 = v34 + 12 * v32;
    v40 = v149[1] + 12 * v37;
    v13.i64[0] = *(_QWORD *)v39;
    v13.i32[2] = *(_DWORD *)(v39 + 8);
    a7.i64[0] = *(_QWORD *)v40;
    a7.i32[2] = *(_DWORD *)(v40 + 8);
    v41 = (int8x16_t)vsubq_f32(a7, v13);
    v42 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1);
    v43 = (float32x2_t)vextq_s8(v41, v41, 8uLL).u64[0];
    v44 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8), v42, *(float32x2_t *)v41.i8, 1), v43, v43);
    if (v44.f32[0] == 0.0)
      goto LABEL_7;
    v45 = v44.f32[0];
    if (v44.f32[0] <= 0.0)
      v45 = 0.0 - v44.f32[0];
    if (v45 <= 0.00000001)
      goto LABEL_7;
    v120 = a7;
    v151 = v148;
    v46.i32[3] = HIDWORD(v147);
    *(_OWORD *)&v149[1] = v146;
    v150 = v147;
    v149[0] = v23;
    v152 = 0;
    if (v23 != v17 || (unint64_t *)v147 != v127)
    {
      v47 = 0;
      v50 = v149[1];
      v49 = v149[2];
      v51 = v151;
      v121 = *((_QWORD *)&v150 + 1);
      v52 = (unint64_t *)(v147 + 8);
      v48 = 0.0;
      v53 = v112;
      v54 = 1;
      v55 = *((float *)&v129 + 1);
      v124 = v41;
      v126 = v13;
      v122 = v44;
      v123 = v43;
      while (1)
      {
        v56 = *(v53 - 1);
        if (v49 <= v56)
          goto LABEL_114;
        v57 = v52;
        v58 = *(v52 - 1);
        if (v51 <= v58)
          break;
        v59 = v50 + 12 * v56;
        v46.i64[0] = *(_QWORD *)v59;
        v46.i32[2] = *(_DWORD *)(v59 + 8);
        v60 = (int8x16_t)vsubq_f32(v46, v13);
        v61 = (int8x16_t)vsubq_f32(vmlaq_n_f32(v13, (float32x4_t)v41, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v60.i8), v42, *(float32x2_t *)v60.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), v43), v44).f32[0]), v46);
        v64 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1);
        v62 = (float32x2_t)vextq_s8(v61, v61, 8uLL).u64[0];
        v63 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), v64, *(float32x2_t *)v61.i8, 1), v62, v62).f32[0];
        v64.i32[0] = 0;
        if (v63 != 0.0 && v63 > 0.000001)
        {
          v66 = v121 + 36 * v58;
          v64.f32[0] = 1.0 / sqrtf(v63);
          v67 = (int8x16_t)vmulq_n_f32((float32x4_t)v61, v64.f32[0]);
          a10.i32[0] = *(_DWORD *)(v66 + 8);
          a12.i32[0] = *(_DWORD *)(v66 + 20);
          v12.i32[0] = *(_DWORD *)(v66 + 32);
          v68 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v66, *(float *)v67.i32), *(float32x2_t *)(v66 + 12), *(float32x2_t *)v67.i8, 1), *(float32x2_t *)(v66 + 24), (float32x4_t)v67, 2);
          v69 = vmla_lane_f32(vmul_f32(a10, *(float32x2_t *)v67.i8), a12, *(float32x2_t *)v67.i8, 1);
          a12 = (float32x2_t)vextq_s8(v67, v67, 8uLL).u64[0];
          a10 = vmla_f32(v69, a12, v12);
          if (v63 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v67.i8, v68), vmul_lane_f32(v64, *(float32x2_t *)v61.i8, 1), v68, 1), a10, vmul_f32(v62, v64)).f32[0])v64.f32[0] = 0.0;
          else
            v64.f32[0] = 1.0;
        }
        if (v64.f32[0] <= v55)
        {
          ++v47;
          v46.f32[0] = expf(-v64.f32[0]);
          v44 = v122;
          v43 = v123;
          v41 = v124;
          v13 = v126;
          v48 = v48 + v46.f32[0];
        }
        v149[0] = v53;
        *(_QWORD *)&v150 = v57;
        v152 = v54++;
        v52 = v57 + 1;
        v70 = v53 + 1;
        if (v53++ == v128)
        {
          v53 = v70;
          if (v57 == v127)
            goto LABEL_43;
        }
      }
      v111 = &v151;
      v56 = v58;
LABEL_114:
      sub_22457354C(v111, v56);
    }
    v47 = 0;
    v48 = 0.0;
LABEL_43:
    if (v48 > v25)
      break;
    v17 = v128;
    a2 = v117;
    v23 = v118;
LABEL_7:
    v136 = v27;
    operator delete(v27);
    if (++v24 == 100)
    {
      v47 = v116;
      if (v119)
      {
        memset(v149, 0, sizeof(v149));
        if (!v116)
          goto LABEL_58;
        goto LABEL_54;
      }
LABEL_56:
      *a1 = 0;
      a1[24] = 0;
      return;
    }
  }
  *(_DWORD *)&v139[8] = v13.i32[2];
  *(_QWORD *)v139 = v13.i64[0];
  v140 = v120.i32[2];
  *(_QWORD *)&v139[12] = v120.i64[0];
  v17 = v128;
  if (v119)
  {
    v113 = v13.i8[0];
    v145 = v48;
    v23 = v118;
    if (!v132)
      goto LABEL_49;
LABEL_48:
    if (v47 >= v131)
      goto LABEL_57;
  }
  else
  {
    v141 = 1;
    v113 = v13.i8[0];
    v145 = v48;
    v23 = v118;
    if (v132)
      goto LABEL_48;
  }
LABEL_49:
  if (!v134 || v48 < v133)
  {
    v119 = 1;
    v25 = v48;
    v116 = v47;
    a2 = v117;
    goto LABEL_7;
  }
LABEL_57:
  v136 = v27;
  operator delete(v27);
  memset(v149, 0, sizeof(v149));
  if (!v47)
  {
LABEL_58:
    v73 = 0;
    v72 = 0;
    goto LABEL_59;
  }
LABEL_54:
  if (v47 >> 61)
    sub_22367C394();
  v72 = (char *)operator new(8 * v47);
  v73 = &v72[8 * v47];
LABEL_59:
  v142 = v72;
  v143 = v72;
  v144 = v73;
  v74.i32[3] = HIDWORD(v146);
  v150 = v147;
  *(_OWORD *)&v149[1] = v146;
  v149[0] = v23;
  v151 = v148;
  v152 = 0;
  v75 = (unint64_t *)v147;
  if (v23 == v17 && (unint64_t *)v147 == v127)
  {
    v76 = v72;
    v77 = v114;
    v78 = a1;
    v79 = v113;
    goto LABEL_107;
  }
  v80 = 0;
  v125 = &v149[2];
  v76 = v72;
  while (2)
  {
    v81 = *v23;
    if (v149[2] <= *v23)
      goto LABEL_121;
    if (v151 <= *v75)
    {
      v125 = &v151;
      v81 = *v75;
LABEL_121:
      sub_22457354C(v125, v81);
    }
    v82 = v149[1] + 12 * v81;
    v74.i64[0] = *(_QWORD *)&v139[12];
    v74.i32[2] = v140;
    a7.i64[0] = *(_QWORD *)v82;
    a7.i32[2] = *(_DWORD *)(v82 + 8);
    v83 = (int8x16_t)vsubq_f32((float32x4_t)v74, *(float32x4_t *)v139);
    v84 = (int8x16_t)vsubq_f32(a7, *(float32x4_t *)v139);
    v85 = (float32x2_t)vextq_s8(v83, v83, 8uLL).u64[0];
    v86 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1);
    v74 = (int8x16_t)vsubq_f32(vmlaq_n_f32(*(float32x4_t *)v139, (float32x4_t)v83, vdiv_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v84.i8), v86, *(float32x2_t *)v83.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), v85), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v83.i8, *(float32x2_t *)v83.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1), *(float32x2_t *)v83.i8, 1), v85,
                             v85)).f32[0]),
                       a7);
    v88 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.i8, 1);
    a7 = (float32x4_t)vextq_s8(v74, v74, 8uLL);
    v87 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v74.i8, *(float32x2_t *)v74.i8), v88, *(float32x2_t *)v74.i8, 1), *(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32).f32[0];
    v88.i32[0] = 0;
    if (v87 != 0.0 && v87 > 0.000001)
    {
      v90 = *((_QWORD *)&v150 + 1) + 36 * *v75;
      v88.f32[0] = 1.0 / sqrtf(v87);
      v91 = (int8x16_t)vmulq_n_f32((float32x4_t)v74, v88.f32[0]);
      v85.i32[0] = *(_DWORD *)(v90 + 8);
      v86.i32[0] = *(_DWORD *)(v90 + 20);
      v12.i32[0] = *(_DWORD *)(v90 + 32);
      v92 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v90, *(float *)v91.i32), *(float32x2_t *)(v90 + 12), *(float32x2_t *)v91.i8, 1), *(float32x2_t *)(v90 + 24), (float32x4_t)v91, 2);
      if (v87 <= vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v91.i8, v92), vmul_lane_f32(v88, *(float32x2_t *)v74.i8, 1), v92, 1), vmla_f32(vmla_lane_f32(vmul_f32(v85, *(float32x2_t *)v91.i8), v86, *(float32x2_t *)v91.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL), v12), vmul_f32(*(float32x2_t *)a7.f32, v88)).f32[0])v88.f32[0] = 0.0;
      else
        v88.f32[0] = 1.0;
    }
    if (v88.f32[0] <= *((float *)&v129 + 1))
    {
      if (v76 < v73)
      {
        v93 = v23;
        *(_QWORD *)v76 = v80;
        v94 = (uint64_t)(v76 + 8);
        goto LABEL_93;
      }
      v95 = (v76 - v72) >> 3;
      v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61)
        sub_22367C394();
      if ((v73 - v72) >> 2 > v96)
        v96 = (v73 - v72) >> 2;
      if ((unint64_t)(v73 - v72) >= 0x7FFFFFFFFFFFFFF8)
        v97 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v97 = v96;
      if (v97)
      {
        if (v97 >> 61)
          sub_223174E94();
        v98 = operator new(8 * v97);
        v93 = v23;
        v99 = &v98[8 * v95];
        *(_QWORD *)v99 = v80;
        v94 = (uint64_t)(v99 + 8);
        v100 = v76 - v72;
        if (v76 == v72)
          goto LABEL_90;
LABEL_87:
        v101 = v100 - 8;
        if (v101 < 0x168)
        {
          v102 = v76;
          goto LABEL_89;
        }
        v104 = (v76 - 8 - v72) & 0xFFFFFFFFFFFFFFF8;
        if (&v98[v76 - v72 - 8 - v104] > &v98[v76 - v72 - 8])
        {
          v102 = v76;
          goto LABEL_89;
        }
        if (&v76[-v104 - 8] > v76 - 8)
        {
          v102 = v76;
          goto LABEL_89;
        }
        if ((unint64_t)(v72 - v98) < 0x20)
        {
          v102 = v76;
          goto LABEL_89;
        }
        v105 = (v101 >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v76[-v106];
        v99 -= v106;
        v107 = (int8x16_t *)&v98[8 * v95 - 16];
        v108 = (int8x16_t *)(v76 - 16);
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v74 = v108[-1];
          v110 = *v108;
          v107[-1] = v74;
          *v107 = v110;
          v107 -= 2;
          v108 -= 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_89:
            v103 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v99 - 1) = v103;
            v99 -= 8;
          }
          while (v102 != v72);
        }
      }
      else
      {
        v93 = v23;
        v98 = 0;
        v99 = (char *)(8 * v95);
        *(_QWORD *)(8 * v95) = v80;
        v94 = 8 * v95 + 8;
        v100 = v76 - v72;
        if (v76 != v72)
          goto LABEL_87;
      }
LABEL_90:
      v73 = &v98[8 * v97];
      v142 = v99;
      v144 = v73;
      if (v72)
      {
        operator delete(v72);
        v93 = (unint64_t *)v149[0];
        v75 = (unint64_t *)v150;
      }
      v72 = v99;
      v17 = v128;
LABEL_93:
      v143 = (char *)v94;
      v80 = v152;
      v76 = (char *)v94;
      v23 = v93;
    }
    ++v23;
    ++v75;
    v149[0] = v23;
    *(_QWORD *)&v150 = v75;
    v152 = ++v80;
    if (v23 != v17 || v75 != v127)
      continue;
    break;
  }
  v79 = v139[0];
  v77 = v114;
  v78 = a1;
LABEL_107:
  v149[0] = *(_QWORD *)&v139[1];
  *(_DWORD *)((char *)v149 + 7) = *(_DWORD *)&v139[8];
  *(_QWORD *)((char *)&v149[1] + 3) = *(_QWORD *)((unint64_t)v139 | 0xC);
  *(_DWORD *)((char *)&v149[2] + 3) = *(_DWORD *)(((unint64_t)v139 | 0xC) + 8);
  if (v77 <= (v76 - v72) >> 3)
  {
    *v78 = v79;
    *(_QWORD *)(v78 + 1) = v149[0];
    *((_DWORD *)v78 + 2) = *(_DWORD *)((char *)v149 + 7);
    *(_QWORD *)(v78 + 12) = *(_QWORD *)((char *)&v149[1] + 3);
    *((_DWORD *)v78 + 5) = *(_DWORD *)((char *)&v149[2] + 3);
    v78[24] = 1;
    if (v72)
LABEL_109:
      operator delete(v72);
  }
  else
  {
    *v78 = 0;
    v78[24] = 0;
    if (v72)
      goto LABEL_109;
  }
}

void sub_223F5E0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,_Unwind_Exception *exception_objecta,uint64_t a50)
{
  uint64_t v50;
  void *v52;

  v52 = *(void **)(v50 - 224);
  if (v52)
  {
    *(_QWORD *)(v50 - 216) = v52;
    operator delete(v52);
  }
  _Unwind_Resume(exception_object);
}

char *sub_223F5E138(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  __int128 v19;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    sub_22316E078();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v4;
  if (v5 > 0x333333333333333)
    sub_223174E94();
  v7 = 80 * v5;
  v8 = (char *)operator new(80 * v5);
  v9 = &v8[80 * v3];
  v10 = &v8[v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v9 + 12) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v9 + 5) = *(_DWORD *)(a2 + 20);
  v9[24] = *(_BYTE *)(a2 + 24);
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = v9 + 80;
  *(_QWORD *)&v19 = v9 + 80;
  *((_QWORD *)&v19 + 1) = v10;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    v14 = 0;
    do
    {
      sub_223F52A1C((uint64_t)&v9[v14 - 80], (uint64_t *)&v12[v14 - 80]);
      v14 -= 80;
    }
    while (&v12[v14] != v13);
    v12 = *a1;
    v15 = a1[1];
    *a1 = &v9[v14];
    *(_OWORD *)(a1 + 1) = v19;
    v11 = (char *)v19;
    while (v15 != v12)
    {
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      v17 = (void *)*((_QWORD *)v15 - 6);
      if (v17)
      {
        *((_QWORD *)v15 - 5) = v17;
        operator delete(v17);
      }
      v15 -= 80;
    }
  }
  if (v12)
    operator delete(v12);
  return v11;
}

uint64_t *sub_223F5E364(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v4 = a2;
  v5 = operator new();
  *(_QWORD *)&v7 = 0x3C75C28F40000000;
  WORD4(v7) = a2;
  v8 = v4;
  v9 = 0x3F8000003D4CCCCDLL;
  v10 = 2500;
  v11 = 0x412000003C75C28FLL;
  v12 = 1036831949;
  v13 = 500;
  *a1 = sub_223FB1FEC(v5, &v7);
  a1[1] = (uint64_t)sub_223F5FE1C;
  if (a2 <= 2
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SingleShot/VerticalPlaneDetector.cpp", 72, (uint64_t)"isConfigValid(minSupport)", 25, (uint64_t)&unk_2245ABC0E, 0, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  return a1;
}

void sub_223F5E454(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(exception_object);
}

void sub_223F5E478(uint64_t *a1@<X0>, char ***a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, __int128 *a11)
{
  float v11;
  unint64_t v14;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  float32x4_t v20;
  __int128 v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t v41;
  float32x2_t v42;
  __float2 v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  char *v47;
  _BYTE *v48;
  size_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  void **v59;
  char *v60;
  __int128 v61;
  char *v62;
  char *v63;
  void *v64;
  void *v65;
  char *v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x4_t v69;
  int8x16_t v70;
  char *v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int8x16_t v75;
  uint64_t v76;
  float v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float v82;
  float v83;
  int8x16_t v84;
  __n128 v85;
  float32x2_t v86;
  double v87;
  double v88;
  float32x4_t v89;
  float32x4_t v90;
  unsigned int v91;
  float32x4_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  unint64_t *v104;
  void *v105;
  float32x4_t v106;
  char *v107;
  unint64_t v108;
  float32x4_t v109;
  __int32 v110;
  __int32 v111;
  float32x4_t v112;
  float32x4_t v113;
  __int32 v114;
  __int32 v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  float32x4_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t i;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  void *v169;
  int v170;
  unsigned __int8 v171;
  unsigned __int8 v172;
  int32x2_t v173;
  int8x16_t v174;
  int32x4_t v175;
  float32x4_t v176;
  float32x2_t v177;
  _BOOL4 v178;
  float v179;
  int8x16_t v180;
  float v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float v186;
  float v187;
  int8x16_t v188;
  __n128 v189;
  float32x2_t v190;
  double v191;
  double v192;
  void *v193;
  void *v194;
  int v195;
  int v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  void *v200;
  char *v201;
  void *v202;
  void *v203;
  unsigned __int8 v204;
  uint64_t v205;
  void *v206;
  char *v207;
  char *v209;
  size_t __sz;
  int8x16_t v214;
  float32x4_t v215;
  float32x4_t v216;
  int v217;
  int8x16_t v218;
  float32x2_t v219;
  float32x2_t v220;
  int8x16_t v221;
  int32x4_t v222;
  int v223;
  __int128 v224;
  __int128 v225;
  void *v226;
  unsigned int v227;
  uint64_t *v228;
  char *v229;
  void *__p;
  char *v232;
  char *v233;
  void *v234;
  char *v235;
  char *v236;
  void *v237;
  float *v238;
  void *v239;
  char *v240;
  __int128 v241;
  uint64_t v242;
  char **v243;
  __int128 v244;
  char *v245;
  void *v246[3];
  char v247;
  _DWORD v248[15];
  char v249;
  _BYTE v250[32];
  unsigned __int32 v251;

  v14 = (unint64_t)a2;
  if (*((_BYTE *)a11 + 16))
    v14 = *(_QWORD *)a11;
  kdebug_trace();
  sub_223F5FD28(v246);
  __sz = a6;
  v228 = a3;
  if (**((int **)v246[0] + 7) <= 1)
  {
    v16 = atomic_load((unsigned __int8 *)&qword_2540CE218);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE218))
    {
      qword_2540CE210 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_VerticalDetect");
      __cxa_guard_release(&qword_2540CE218);
    }
    v17 = qword_2540CE210;
    *(_BYTE *)(qword_2540CE210 + 16) = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v17 = std::chrono::steady_clock::now();
    *(_BYTE *)(v17 + 16) = 1;
    a6 = __sz;
  }
  if (v14 <= 2 && a6 <= 1)
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    goto LABEL_194;
  }
  v18 = *a1;
  v241 = *a11;
  v242 = *((_QWORD *)a11 + 2);
  sub_223F60358(a2, a3, a5, (uint64_t)&v241, (uint64_t)&v244);
  v19.n128_u32[0] = 1028443341;
  sub_223F60500(a6, a7, a10, (char **)&v239, v19, v20);
  v235 = 0;
  v236 = 0;
  v234 = 0;
  v21 = v244;
  v22 = *((_QWORD *)&v244 + 1) - v244;
  if (*((_QWORD *)&v244 + 1) != (_QWORD)v244)
  {
    v23 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 3);
    if (v23 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v24 = (char *)operator new(v22);
    v25 = 0;
    v234 = v24;
    v235 = v24;
    v236 = &v24[24 * v23];
    do
    {
      v26 = v21 + v25;
      v27 = &v24[v25];
      *(_QWORD *)v27 = *(_QWORD *)(v21 + v25);
      *(_OWORD *)(v27 + 8) = *(_OWORD *)(v21 + v25 + 8);
      v25 += 24;
    }
    while (v26 + 24 != *((_QWORD *)&v21 + 1));
    v235 = &v24[v25];
  }
  __p = 0;
  v232 = 0;
  v233 = 0;
  v28 = (char *)v239;
  v29 = v240;
  v30 = v240 - (_BYTE *)v239;
  if (v240 != v239)
  {
    v31 = 0x4EC4EC4EC4EC4EC5 * (v30 >> 2);
    if (v31 >= 0x4EC4EC4EC4EC4EDLL)
      sub_22316E078();
    v32 = (char *)operator new(v30);
    v33 = 0;
    __p = v32;
    v232 = v32;
    v233 = &v32[52 * v31];
    do
    {
      v34 = &v28[v33];
      v35 = &v32[v33];
      *(_QWORD *)v35 = *(_QWORD *)&v28[v33];
      *((_QWORD *)v35 + 1) = *(_QWORD *)&v28[v33 + 8];
      *((_OWORD *)v35 + 1) = *(_OWORD *)&v28[v33 + 16];
      *((_OWORD *)v35 + 2) = *(_OWORD *)&v28[v33 + 32];
      *((_WORD *)v35 + 24) = *(_WORD *)&v28[v33 + 48];
      v33 += 52;
    }
    while (v34 + 52 != v29);
    v232 = &v32[v33];
  }
  sub_223FB26DC(v18, (char **)&v234, &__p, (char **)&v237);
  v36 = __sz;
  if (__p)
  {
    v232 = (char *)__p;
    operator delete(__p);
  }
  if (v234)
  {
    v235 = (char *)v234;
    operator delete(v234);
  }
  v37 = (float *)v237;
  v38 = v238;
  memset(v250, 0, 24);
  v39 = (char *)v238 - (_BYTE *)v237;
  if (v238 == v237)
  {
    v48 = 0;
    v47 = 0;
    if (!v238)
      goto LABEL_33;
  }
  else
  {
    if ((unint64_t)v39 >= 0x5555555555555551)
      sub_22316E078();
    v40 = v39 >> 3;
    *(_QWORD *)v250 = operator new(24 * (v39 >> 3));
    *(_QWORD *)&v250[8] = *(_QWORD *)v250;
    *(_QWORD *)&v250[16] = *(_QWORD *)v250 + 24 * v40;
    v243 = (char **)v250;
    do
    {
      v43 = __sincosf_stret(*v37 * 0.017453);
      v44 = v37[1];
      v45.i64[1] = 0;
      v45.f32[0] = v44 * v43.__cosval;
      v45.f32[1] = v44 * v43.__sinval;
      if (v44 == 0.0 || fabsf(v44) <= 0.000001)
      {
        v46.i32[2] = 0;
        v46.i64[0] = __PAIR64__(LODWORD(v43.__sinval), LODWORD(v43.__cosval));
      }
      else
      {
        v41.f32[0] = (float)(v44 * v43.__cosval) * (float)(v44 * v43.__cosval);
        v42.f32[0] = v44 * v43.__sinval;
        v46 = vmulq_n_f32(v45, 1.0 / sqrtf(vmla_f32(v41, v42, v42).f32[0]));
      }
      LODWORD(v246[1]) = 0;
      v246[0] = (void *)v45.i64[0];
      HIDWORD(v246[2]) = v46.i32[2];
      *(uint64_t *)((char *)&v246[1] + 4) = v46.i64[0];
      sub_2236E2A14(&v243, (uint64_t *)v246);
      v37 += 2;
    }
    while (v37 != v38);
    v47 = *(char **)v250;
    v48 = *(_BYTE **)&v250[8];
    v38 = (float *)v237;
    v36 = __sz;
    if (!v237)
      goto LABEL_33;
  }
  v238 = v38;
  operator delete(v38);
LABEL_33:
  if (v239)
  {
    v240 = (char *)v239;
    operator delete(v239);
  }
  if ((_QWORD)v244)
  {
    *((_QWORD *)&v244 + 1) = v244;
    operator delete((void *)v244);
  }
  memset(v250, 0, 24);
  v207 = v47;
  if (v36)
  {
    if (v36 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v49 = 24 * v36;
    v50 = a7;
    *(_QWORD *)v250 = operator new(v49);
    *(_QWORD *)&v250[8] = *(_QWORD *)v250;
    *(_QWORD *)&v250[16] = *(_QWORD *)v250 + v49;
    do
    {
      sub_223F5FF2C(v50, (unint64_t *)v246, 0.05, v51, v52);
      v53 = *(char **)&v250[8];
      if (*(_QWORD *)&v250[8] < *(_QWORD *)&v250[16])
      {
        **(_QWORD **)&v250[8] = 0;
        *((_QWORD *)v53 + 1) = 0;
        *((_QWORD *)v53 + 2) = 0;
        *(_OWORD *)v53 = *(_OWORD *)v246;
        *((void **)v53 + 2) = v246[2];
        *(_QWORD *)&v250[8] = v53 + 24;
      }
      else
      {
        v54 = *(char **)v250;
        v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v250[8] - *(_QWORD *)v250) >> 3);
        v56 = v55 + 1;
        if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_22316E078();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v250[16] - *(_QWORD *)v250) >> 3) > v56)
          v56 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v250[16] - *(_QWORD *)v250) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v250[16] - *(_QWORD *)v250) >> 3) >= 0x555555555555555)
          v57 = 0xAAAAAAAAAAAAAAALL;
        else
          v57 = v56;
        if (v57 > 0xAAAAAAAAAAAAAAALL)
          sub_223174E94();
        v58 = (char *)operator new(24 * v57);
        v59 = (void **)&v58[24 * v55];
        *(_OWORD *)v59 = *(_OWORD *)v246;
        v59[2] = v246[2];
        memset(v246, 0, sizeof(v246));
        v60 = (char *)(v59 + 3);
        if (v53 == v54)
        {
          *(_QWORD *)v250 = v59;
          *(_QWORD *)&v250[8] = v59 + 3;
          *(_QWORD *)&v250[16] = &v58[24 * v57];
        }
        else
        {
          do
          {
            v61 = *(_OWORD *)(v53 - 24);
            v53 -= 24;
            *(_OWORD *)(v59 - 3) = v61;
            v59 -= 3;
            v59[2] = (void *)*((_QWORD *)v53 + 2);
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            *((_QWORD *)v53 + 2) = 0;
          }
          while (v53 != v54);
          v53 = *(char **)v250;
          v62 = *(char **)&v250[8];
          *(_QWORD *)v250 = v59;
          *(_QWORD *)&v250[8] = v60;
          *(_QWORD *)&v250[16] = &v58[24 * v57];
          if (v62 != v53)
          {
            v63 = v62;
            do
            {
              v65 = (void *)*((_QWORD *)v63 - 3);
              v63 -= 24;
              v64 = v65;
              if (v65)
              {
                *((_QWORD *)v62 - 2) = v64;
                operator delete(v64);
              }
              v62 = v63;
            }
            while (v63 != v53);
          }
        }
        if (v53)
          operator delete(v53);
        *(_QWORD *)&v250[8] = v60;
        a3 = v228;
        if (v246[0])
        {
          v246[1] = v246[0];
          operator delete(v246[0]);
        }
      }
      v50 += 24;
    }
    while (v50 != a7 + v49);
    v66 = *(char **)&v250[8];
    v229 = *(char **)v250;
  }
  else
  {
    v66 = 0;
    v229 = 0;
  }
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  sub_223F527FC(a8, 0xAAAAAAAAAAAAAAABLL * ((v48 - v207) >> 3));
  if (v48 == v207)
    goto LABEL_185;
  v223 = 0;
  v71 = v207;
  v220 = *(float32x2_t *)v67.i8;
  v219 = *(float32x2_t *)v67.i8;
  v222 = v67;
  while (2)
  {
    v70.i64[0] = *(_QWORD *)v71;
    v70.i32[2] = *((_DWORD *)v71 + 2);
    v68.i32[0] = *((_DWORD *)v71 + 5);
    v69.i64[0] = *(_QWORD *)(v71 + 12);
    v72 = v69;
    v72.i32[2] = v68.i32[0];
    v73 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v69.f32, 1);
    v74 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32), v73, *(float32x2_t *)v69.f32, 1), v68, v68);
    v209 = v71;
    v218 = v70;
    v221 = (int8x16_t)v72;
    if (v74.f32[0] == 1.0)
    {
      *(float *)&v244 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v72.f32), v73, *(float32x2_t *)v70.i8, 1), v68, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)).f32[0];
      v75 = (int8x16_t)v72;
      v76 = __sz;
    }
    else
    {
      v77 = v74.f32[0] + -1.0;
      if (v74.f32[0] < 1.0)
        v77 = 1.0 - v74.f32[0];
      v76 = __sz;
      if (v77 <= 0.000001)
      {
        *(float *)&v244 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v218.i8, *(float32x2_t *)v72.f32), v73, *(float32x2_t *)v218.i8, 1), v68, (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL)).f32[0];
        v75 = (int8x16_t)v72;
      }
      else
      {
        v74.f32[0] = 1.0 / sqrtf(v74.f32[0]);
        v75 = (int8x16_t)vmulq_n_f32(v72, v74.f32[0]);
        v78 = vmul_lane_f32(v74, *(float32x2_t *)v69.f32, 1);
        v79 = vmul_f32(v68, v74);
        v80 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1);
        v81 = (float32x2_t)vextq_s8(v75, v75, 8uLL).u64[0];
        v82 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v75.i8, *(float32x2_t *)v75.i8), v78, *(float32x2_t *)v75.i8, 1), v81, v79).f32[0];
        if (v82 == 1.0)
          goto LABEL_80;
        v83 = v82 + -1.0;
        if (v82 < 1.0)
          v83 = 1.0 - v82;
        if (v83 <= 0.000001)
        {
LABEL_80:
          *(float *)&v244 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v218.i8, *(float32x2_t *)v75.i8), v80, *(float32x2_t *)v218.i8, 1), v81, (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL)).f32[0];
        }
        else
        {
          v81.f32[0] = sqrtf(v82);
          v84 = (int8x16_t)vmulq_n_f32((float32x4_t)v75, 1.0 / v81.f32[0]);
          *(float *)&v244 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v218.i8, *(float32x2_t *)v84.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v84.i8, 1), *(float32x2_t *)v218.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL)).f32[0];
          v75 = (int8x16_t)vdivq_f32((float32x4_t)v75, (float32x4_t)vdupq_lane_s32((int32x2_t)v81, 0));
        }
      }
    }
    HIDWORD(v244) = v75.i32[2];
    *(_QWORD *)((char *)&v244 + 4) = v75.i64[0];
    sub_223F60864((uint64_t)&v244, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, v246, 0.000225);
    sub_223F61F60((uint64_t)&v244, v76, a7, a10, (char **)v250, 0.000225, v85, v86, v87, v88);
    v91 = 0;
    v217 = 0;
    v226 = v246[0];
    v92.i32[3] = HIDWORD(v246[2]);
    v93 = *(void **)v250;
    v224 = *(_OWORD *)&v250[8];
    v225 = *(_OWORD *)&v246[1];
    while (2)
    {
      v244 = 0uLL;
      v245 = 0;
      v227 = v91;
      if (v226 == (void *)v225)
      {
        v96 = 0;
        v103 = 0;
      }
      else
      {
        v94 = ((uint64_t)v226 - (uint64_t)v225) >> 3;
        v95 = -v94;
        if ((unint64_t)-v94 > 0x1555555555555555)
          sub_22316E078();
        v96 = (char *)operator new(-12 * v94);
        v97 = 0;
        *(_QWORD *)&v244 = v96;
        *((_QWORD *)&v244 + 1) = v96;
        v245 = &v96[12 * v95];
        v246[0] = v226;
        v246[1] = a3;
        v246[2] = a2;
        v98 = (unint64_t *)v226;
        do
        {
          v99 = *v98;
          if ((unint64_t)a2 <= *v98)
            sub_22457354C((unint64_t *)&v246[2], v99);
          v100 = &v96[v97];
          v101 = (char *)a3 + 12 * v99;
          v102 = *(_QWORD *)v101;
          *((_DWORD *)v100 + 2) = *((_DWORD *)v101 + 2);
          *(_QWORD *)v100 = v102;
          v246[0] = ++v98;
          v97 += 12;
        }
        while (v98 != (unint64_t *)v225);
        v103 = &v96[v97];
        *((_QWORD *)&v244 + 1) = v103;
      }
      v246[0] = v93;
      v246[1] = v229;
      v246[2] = (void *)(0xAAAAAAAAAAAAAAABLL * ((v66 - v229) >> 3));
      v104 = (unint64_t *)v93;
      v105 = v93;
      if (v93 == (void *)v224)
      {
        if (v96 == v103)
          goto LABEL_146;
        goto LABEL_92;
      }
      do
      {
        v129 = *v104;
        if (v246[2] <= (void *)*v104)
          sub_22457354C((unint64_t *)&v246[2], v129);
        v130 = (uint64_t **)((char *)v246[1] + 24 * v129);
        v132 = *v130;
        v131 = v130[1];
        v133 = (char *)v131 - (char *)*v130;
        if (v133 >= 1)
        {
          v134 = v133 / 12;
          v135 = *((_QWORD *)&v244 + 1);
          v136 = v244;
          v137 = (*((_QWORD *)&v244 + 1) - (_QWORD)v244) / 12;
          v138 = v244 + 12 * v137;
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v245[-*((_QWORD *)&v244 + 1)] >> 2)) < v133 / 12)
          {
            if ((unint64_t)(v137 + v134) > 0x1555555555555555)
              sub_22316E078();
            v139 = 0x5555555555555556 * ((uint64_t)&v245[-v244] >> 2);
            if (v139 <= v137 + v134)
              v139 = v137 + v134;
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v245[-v244] >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v140 = 0x1555555555555555;
            else
              v140 = v139;
            if (v140)
            {
              if (v140 > 0x1555555555555555)
                sub_223174E94();
              v141 = (char *)operator new(12 * v140);
            }
            else
            {
              v141 = 0;
            }
            v159 = &v141[12 * v137];
            v160 = 12 * v134;
            v161 = &v159[12 * v134];
            v162 = v159;
            do
            {
              v163 = *v132;
              *((_DWORD *)v162 + 2) = *((_DWORD *)v132 + 2);
              *(_QWORD *)v162 = v163;
              v162 += 12;
              v132 = (uint64_t *)((char *)v132 + 12);
              v160 -= 12;
            }
            while (v160);
            v164 = v244;
            if ((_QWORD)v244 != v138)
            {
              v165 = v138;
              do
              {
                v166 = *(_QWORD *)(v165 - 12);
                v165 -= 12;
                v167 = *(_DWORD *)(v165 + 8);
                *(_QWORD *)(v159 - 12) = v166;
                v159 -= 12;
                *((_DWORD *)v159 + 2) = v167;
              }
              while (v165 != v164);
              v135 = *((_QWORD *)&v244 + 1);
            }
            for (; v138 != v135; v138 += 12)
            {
              v168 = *(_QWORD *)v138;
              *((_DWORD *)v161 + 2) = *(_DWORD *)(v138 + 8);
              *(_QWORD *)v161 = v168;
              v161 += 12;
            }
            v169 = (void *)v244;
            *(_QWORD *)&v244 = v159;
            *((_QWORD *)&v244 + 1) = v161;
            v245 = &v141[12 * v140];
            a3 = v228;
            if (v169)
              operator delete(v169);
            goto LABEL_106;
          }
          v142 = *((_QWORD *)&v244 + 1) - v138;
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)&v244 + 1) - v138) >> 2)) >= v134)
          {
            v143 = (uint64_t *)((char *)v132 + 12 * v134);
            v144 = *((_QWORD *)&v244 + 1);
            v148 = 12 * v134;
            v149 = *((_QWORD *)&v244 + 1) - 12 * v134;
            i = *((_QWORD *)&v244 + 1);
            if (v149 < *((_QWORD *)&v244 + 1))
              goto LABEL_127;
            goto LABEL_128;
          }
          v143 = (uint64_t *)((char *)v132 + 4 * ((*((_QWORD *)&v244 + 1) - v138) >> 2));
          v144 = *((_QWORD *)&v244 + 1);
          if (v143 != v131)
          {
            v145 = (uint64_t *)((char *)v132 + 4 * ((*((_QWORD *)&v244 + 1) - v138) >> 2));
            v146 = *((_QWORD *)&v244 + 1);
            do
            {
              v147 = *v145;
              *(_DWORD *)(v146 + 8) = *((_DWORD *)v145 + 2);
              *(_QWORD *)v146 = v147;
              v146 += 12;
              v145 = (uint64_t *)((char *)v145 + 12);
              v144 += 12;
            }
            while (v145 != v131);
          }
          *((_QWORD *)&v244 + 1) = v144;
          if (v142 >= 1)
          {
            v148 = 12 * v134;
            v149 = v144 - 12 * v134;
            for (i = v144; v149 < v135; v149 += 12)
            {
LABEL_127:
              v151 = *(_QWORD *)v149;
              *(_DWORD *)(i + 8) = *(_DWORD *)(v149 + 8);
              *(_QWORD *)i = v151;
              i += 12;
            }
LABEL_128:
            v152 = v138 + v148;
            *((_QWORD *)&v244 + 1) = i;
            if (v144 != v152)
            {
              v153 = 0xAAAAAAAAAAAAAAABLL * ((v144 - v152) >> 2);
              v154 = v144 - 12;
              v155 = 12 * v153;
              v156 = v136 + 12 * v137 - 12;
              do
              {
                v157 = *(_QWORD *)(v156 + v155);
                *(_DWORD *)(v154 + 8) = *(_DWORD *)(v156 + v155 + 8);
                *(_QWORD *)v154 = v157;
                v154 -= 12;
                v155 -= 12;
              }
              while (v155);
            }
            for (; v132 != v143; v132 = (uint64_t *)((char *)v132 + 12))
            {
              v158 = *v132;
              *(_DWORD *)(v138 + 8) = *((_DWORD *)v132 + 2);
              *(_QWORD *)v138 = v158;
              v138 += 12;
            }
          }
        }
LABEL_106:
        v104 = (unint64_t *)((char *)v246[0] + 8);
        v246[0] = v104;
        v93 = v105;
      }
      while (v104 != (unint64_t *)v224);
      v103 = (char *)*((_QWORD *)&v244 + 1);
      v96 = (char *)v244;
      if ((_QWORD)v244 == *((_QWORD *)&v244 + 1))
      {
LABEL_146:
        LOBYTE(v124) = 1;
        v128 = (void *)v244;
        if ((_QWORD)v244)
          goto LABEL_147;
        goto LABEL_82;
      }
LABEL_92:
      v106 = 0uLL;
      v107 = v96;
      do
      {
        v92.i64[0] = *(_QWORD *)v107;
        v92.i32[2] = *((_DWORD *)v107 + 2);
        v106 = vaddq_f32(v106, v92);
        v107 += 12;
      }
      while (v107 != v103);
      v108 = 0;
      v92.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * ((v103 - v96) >> 2));
      v112 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 0);
      v109 = vdivq_f32(v106, v112);
      v106.i32[0] = 0;
      v110 = 0;
      v111 = 0;
      v112.i32[0] = 0;
      v113.i32[0] = 0;
      v114 = 0;
      v69.i32[0] = 0;
      v115 = 0;
      v89.i32[0] = 0;
      do
      {
        v90.i64[0] = *(_QWORD *)v96;
        v90.i32[2] = *((_DWORD *)v96 + 2);
        v116 = (int8x16_t)vsubq_f32(v90, v109);
        *(float32x2_t *)v117.f32 = vmul_n_f32(*(float32x2_t *)v116.i8, *(float *)v116.i32);
        v118 = (float32x4_t)vextq_s8(v116, v116, 8uLL);
        *(float32x2_t *)&v117.u32[2] = vmul_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v116.i8);
        *(float32x2_t *)v119.f32 = vmul_lane_f32(*(float32x2_t *)v116.i8, *(float32x2_t *)v116.i8, 1);
        *(float32x2_t *)&v119.u32[2] = vmul_lane_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v116.i8, 1);
        *(float32x2_t *)v118.f32 = vmul_laneq_f32(*(float32x2_t *)v116.i8, (float32x4_t)v116, 2);
        v90 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32((float32x4_t)v116, (float32x4_t)v116), 2);
        v118.i32[2] = v90.i32[0];
        v106.i32[1] = v110;
        v106.i32[2] = v111;
        v112.i32[1] = v113.i32[0];
        v112.i32[2] = v114;
        v69.i32[1] = v115;
        v69.i32[2] = v89.i32[0];
        v106 = vaddq_f32(v106, v117);
        v112 = vaddq_f32(v112, v119);
        v69 = vaddq_f32(v69, v118);
        v114 = v112.i32[2];
        v113.i32[0] = v112.i32[1];
        v111 = v106.i32[2];
        v110 = v106.i32[1];
        v89.i32[0] = v69.i32[2];
        v115 = v69.i32[1];
        ++v108;
        v96 += 12;
      }
      while (v96 != v103);
      v109.f32[0] = (float)v108;
      v120 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 0);
      v113.i32[1] = v112.i32[2];
      v113.i64[1] = v69.i64[0];
      v106.i64[1] = __PAIR64__(v112.u32[0], v106.u32[2]);
      v249 = 0;
      *(_QWORD *)&v248[13] = 0x300000003;
      *(float32x4_t *)v250 = vdivq_f32(v106, v120);
      *(float32x4_t *)&v250[16] = vdivq_f32(v113, v120);
      v251 = vdivq_f32(v89, v109).u32[0];
      LODWORD(v241) = 0;
      LODWORD(v239) = 0;
      sub_22322BD7C();
      if (!(_DWORD)v239)
      {
        v206 = operator new((4 * *(float *)&v241 + 31) & 0x7FFFFFFE0, (std::align_val_t)0x20uLL);
        sub_22322BD7C();
        MEMORY[0x227684CB8](v206, 0x1000C8052888210);
        if (!(_DWORD)v239)
        {
          v223 = *(unsigned __int16 *)((char *)&v248[10] + 1) | (HIBYTE(v248[10]) << 16);
          v11 = *(float *)&v248[11];
          v121.i32[0] = v248[3];
          v220 = *(float32x2_t *)v121.f32;
          v121.i32[0] = v248[6];
          v219 = *(float32x2_t *)v121.f32;
          v121.i32[0] = v248[9];
          v222 = (int32x4_t)v121;
          v123 = *((_QWORD *)&v244 + 1);
          v122 = v244;
          if ((_QWORD)v244 != *((_QWORD *)&v244 + 1))
          {
            LOBYTE(v124) = 0;
            v125 = LOBYTE(v248[10]);
            goto LABEL_100;
          }
LABEL_103:
          LOBYTE(v124) = 1;
LABEL_104:
          v128 = (void *)v244;
          if ((_QWORD)v244)
            goto LABEL_147;
          goto LABEL_82;
        }
      }
      v123 = *((_QWORD *)&v244 + 1);
      v122 = v244;
      LOBYTE(v124) = 1;
      if ((_QWORD)v244 == *((_QWORD *)&v244 + 1))
        goto LABEL_104;
      v125 = 0;
LABEL_100:
      v126 = 0uLL;
      v127 = v122;
      do
      {
        v121.i64[0] = *(_QWORD *)v127;
        v121.i32[2] = *(_DWORD *)(v127 + 8);
        v126 = vaddq_f32(v126, v121);
        v127 += 12;
      }
      while (v127 != v123);
      if ((v124 & 1) != 0)
        goto LABEL_103;
      v170 = v125 | (v223 << 8);
      LOBYTE(v124) = 1;
      if (*(float *)&v170 == 0.0 || fabsf(*(float *)&v170) <= 0.000001 || (float)(v11 / *(float *)&v170) < 0.01)
        goto LABEL_104;
      v171 = atomic_load((unsigned __int8 *)&qword_25578F140);
      if ((v171 & 1) == 0)
      {
        v215 = v126;
        v195 = __cxa_guard_acquire(&qword_25578F140);
        v126 = v215;
        if (v195)
        {
          dword_25578F138 = 1065098332;
          __cxa_guard_release(&qword_25578F140);
          v126 = v215;
        }
      }
      v172 = atomic_load((unsigned __int8 *)&qword_25578F150);
      if ((v172 & 1) == 0)
      {
        v216 = v126;
        v196 = __cxa_guard_acquire(&qword_25578F150);
        v126 = v216;
        if (v196)
        {
          dword_25578F148 = 1043452119;
          __cxa_guard_release(&qword_25578F150);
          v126 = v216;
        }
      }
      v173.i32[1] = v222.i32[1];
      *(float *)v173.i32 = fabsf(*(float *)v222.i32);
      if (*(float *)v173.i32 >= *(float *)&dword_25578F138 || *(float *)v173.i32 > *(float *)&dword_25578F148)
        goto LABEL_104;
      *(float *)v173.i32 = (float)(0xAAAAAAAAAAAAAAABLL * ((v123 - v122) >> 2));
      v174 = (int8x16_t)vdivq_f32(v126, (float32x4_t)vdupq_lane_s32(v173, 0));
      *(float32x2_t *)v175.i8 = v220;
      v175.u64[1] = (unint64_t)v219;
      v176 = (float32x4_t)vuzp1q_s32(v175, v222);
      v177 = (float32x2_t)vextq_s8(v221, v221, 8uLL).u64[0];
      v178 = fabsf(vmla_f32(vmla_lane_f32(vmul_f32(v220, *(float32x2_t *)v221.i8), v219, *(float32x2_t *)v221.i8, 1), v177, *(float32x2_t *)v222.i8).f32[0]) >= 0.99985;
      v179 = vmla_f32(vmla_f32(vmul_f32(v220, v220), v219, v219), *(float32x2_t *)v222.i8, *(float32x2_t *)v222.i8).f32[0];
      v218 = v174;
      v214 = (int8x16_t)v176;
      if (v179 == 1.0)
        goto LABEL_156;
      v181 = v179 + -1.0;
      if (v179 < 1.0)
        v181 = 1.0 - v179;
      if (v181 <= 0.000001)
      {
LABEL_156:
        *(float *)&v241 = -vmla_f32(vmla_lane_f32(vmul_f32(v220, *(float32x2_t *)v174.i8), v219, *(float32x2_t *)v174.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL), *(float32x2_t *)v222.i8).f32[0];
        v180 = (int8x16_t)v176;
      }
      else
      {
        v177.f32[0] = 1.0 / sqrtf(v179);
        v180 = (int8x16_t)vmulq_n_f32(v176, v177.f32[0]);
        v182 = vmul_f32(*(float32x2_t *)v222.i8, v177);
        v183 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v180.i8, 1);
        v184 = vmla_lane_f32(vmul_f32(vmul_f32(v220, v177), *(float32x2_t *)v180.i8), vmul_f32(v219, v177), *(float32x2_t *)v180.i8, 1);
        v185 = (float32x2_t)vextq_s8(v180, v180, 8uLL).u64[0];
        v186 = vmla_f32(v184, v185, v182).f32[0];
        if (v186 == 1.0)
          goto LABEL_168;
        v187 = v186 + -1.0;
        if (v186 < 1.0)
          v187 = 1.0 - v186;
        if (v187 <= 0.000001)
        {
LABEL_168:
          *(float *)&v241 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v218.i8, *(float32x2_t *)v180.i8), v183, *(float32x2_t *)v218.i8, 1), v185, (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL)).f32[0];
        }
        else
        {
          v185.f32[0] = sqrtf(v186);
          v188 = (int8x16_t)vmulq_n_f32((float32x4_t)v180, 1.0 / v185.f32[0]);
          *(float *)&v241 = -vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v218.i8, *(float32x2_t *)v188.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1), *(float32x2_t *)v218.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL)).f32[0];
          v180 = (int8x16_t)vdivq_f32((float32x4_t)v180, (float32x4_t)vdupq_lane_s32((int32x2_t)v185, 0));
        }
      }
      HIDWORD(v241) = v180.i32[2];
      *(_QWORD *)((char *)&v241 + 4) = v180.i64[0];
      sub_223F60864((uint64_t)&v241, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, v246, 0.000225);
      sub_223F61F60((uint64_t)&v241, __sz, a7, a10, (char **)v250, 0.000225, v189, v190, v191, v192);
      v193 = v246[0];
      v92.i32[3] = HIDWORD(v246[2]);
      v194 = *(void **)v250;
      v224 = *(_OWORD *)&v250[8];
      v225 = *(_OWORD *)&v246[1];
      if (v226)
        operator delete(v226);
      v124 = v217 | v178;
      v217 = v124;
      if (v93)
        operator delete(v93);
      v221 = v214;
      v93 = v194;
      v226 = v193;
      v128 = (void *)v244;
      if ((_QWORD)v244)
      {
LABEL_147:
        *((_QWORD *)&v244 + 1) = v128;
        operator delete(v128);
      }
LABEL_82:
      v91 = v227 + 1;
      if (!(v124 & 1 | (v227 > 8)))
        continue;
      break;
    }
    LODWORD(v246[1]) = v218.i32[2];
    v246[0] = (void *)v218.i64[0];
    HIDWORD(v246[2]) = v221.i32[2];
    *(uint64_t *)((char *)&v246[1] + 4) = v221.i64[0];
    v247 = 2;
    *(_OWORD *)&v248[2] = v225;
    *(_QWORD *)v248 = v226;
    *(_QWORD *)&v248[6] = v93;
    v68.i32[1] = DWORD1(v224);
    *(_OWORD *)&v248[8] = v224;
    v197 = *(_QWORD *)(a8 + 8);
    if (v197 >= *(_QWORD *)(a8 + 16))
    {
      v199 = sub_223F52B4C((char **)a8, (uint64_t)v246);
      v200 = *(void **)&v248[6];
      *(_QWORD *)(a8 + 8) = v199;
      if (v200)
      {
        *(_QWORD *)&v248[8] = v200;
        operator delete(v200);
      }
    }
    else
    {
      *(_DWORD *)(v197 + 8) = v218.i32[2];
      *(_QWORD *)v197 = v218.i64[0];
      v198 = *(_QWORD *)((unint64_t)v246 | 0xC);
      *(_DWORD *)(v197 + 20) = *(_DWORD *)(((unint64_t)v246 | 0xC) + 8);
      *(_QWORD *)(v197 + 12) = v198;
      *(_BYTE *)(v197 + 24) = v247;
      *(_QWORD *)(v197 + 40) = 0;
      *(_QWORD *)(v197 + 48) = 0;
      *(_QWORD *)(v197 + 32) = 0;
      *(_OWORD *)(v197 + 32) = *(_OWORD *)v248;
      *(_QWORD *)(v197 + 48) = *(_QWORD *)&v248[4];
      *(_QWORD *)(v197 + 56) = 0;
      memset(v248, 0, 24);
      *(_QWORD *)(v197 + 64) = 0;
      *(_QWORD *)(v197 + 72) = 0;
      *(_OWORD *)(v197 + 56) = *(_OWORD *)&v248[6];
      *(_QWORD *)(v197 + 72) = *(_QWORD *)&v248[10];
      memset(&v248[6], 0, 24);
      *(_QWORD *)(a8 + 8) = v197 + 80;
    }
    if (*(_QWORD *)v248)
    {
      *(_QWORD *)&v248[2] = *(_QWORD *)v248;
      operator delete(*(void **)v248);
    }
    v71 = v209 + 24;
    if (v209 + 24 != &v207[8 * ((v48 - v207) >> 3)])
      continue;
    break;
  }
LABEL_185:
  if (v229)
  {
    if (v66 != v229)
    {
      v201 = v66;
      do
      {
        v203 = (void *)*((_QWORD *)v201 - 3);
        v201 -= 24;
        v202 = v203;
        if (v203)
        {
          *((_QWORD *)v66 - 2) = v202;
          operator delete(v202);
        }
        v66 = v201;
      }
      while (v201 != v229);
    }
    operator delete(v229);
  }
  if (v207)
    operator delete(v207);
LABEL_194:
  kdebug_trace();
  sub_223F5FD28(v246);
  if (**((int **)v246[0] + 7) <= 1)
  {
    v204 = atomic_load((unsigned __int8 *)&qword_2540CE228);
    if ((v204 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE228))
    {
      qword_2540CE220 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_VerticalDetect");
      __cxa_guard_release(&qword_2540CE228);
    }
    v205 = qword_2540CE220;
    if (*(_BYTE *)(qword_2540CE220 + 16))
    {
      *(_QWORD *)(v205 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v205;
      *(_BYTE *)(v205 + 16) = 0;
    }
  }
}

void sub_223F5FA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  __cxa_guard_abort(&qword_2540CE228);
  sub_223F4FB24(a21);
  _Unwind_Resume(a1);
}

void sub_223F5FA84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE218);
  _Unwind_Resume(a1);
}

void sub_223F5FA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *__p)
{
  char *v55;
  void *v57;
  char *v58;
  void *v59;
  void *v60;

  sub_223F4FB24(a21);
  if (__p)
  {
    if (v55 != __p)
    {
      v58 = v55;
      do
      {
        v60 = (void *)*((_QWORD *)v58 - 3);
        v58 -= 24;
        v59 = v60;
        if (v60)
        {
          *((_QWORD *)v55 - 2) = v59;
          operator delete(v59);
        }
        v55 = v58;
      }
      while (v58 != __p);
    }
    operator delete(__p);
    v57 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v57 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v57);
  _Unwind_Resume(a1);
}

void sub_223F5FD28(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE238))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE230);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE238);
  }
  *a1 = qword_2540CE230;
}

void sub_223F5FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE238);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE238);
  _Unwind_Resume(a1);
}

uint64_t sub_223F5FE1C(uint64_t result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  if (result)
  {
    v1 = (_QWORD *)result;
    v2 = *(std::__shared_weak_count **)(result + 2640);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = v1[10];
    if (v5)
    {
      v6 = v1[11];
      v7 = (void *)v1[10];
      if (v6 != v5)
      {
        v8 = v1[11];
        do
        {
          v10 = *(void **)(v8 - 24);
          v8 -= 24;
          v9 = v10;
          if (v10)
          {
            *(_QWORD *)(v6 - 16) = v9;
            operator delete(v9);
          }
          v6 = v8;
        }
        while (v8 != v5);
        v7 = (void *)v1[10];
      }
      v1[11] = v5;
      operator delete(v7);
    }
    v11 = v1[7];
    if (v11)
    {
      v12 = v1[8];
      v13 = (void *)v1[7];
      if (v12 != v11)
      {
        v14 = v1[8];
        do
        {
          v16 = *(void **)(v14 - 24);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *(_QWORD *)(v12 - 16) = v15;
            operator delete(v15);
          }
          v12 = v14;
        }
        while (v14 != v11);
        v13 = (void *)v1[7];
      }
      v1[8] = v11;
      operator delete(v13);
    }
    JUMPOUT(0x227684CE8);
  }
  return result;
}

void sub_223F5FF2C(uint64_t a1@<X0>, unint64_t *a2@<X8>, float a3@<S0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q3>)
{
  float *v6;
  int8x16_t v7;
  float32x2_t v8;
  float v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  float32x4_t v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  float v31;
  float v32;
  BOOL v33;
  float v34;
  float v35;
  float v36;
  float v37;
  BOOL v38;
  float v39;
  float v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  float *v53;
  float32x4_t v54;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;

  v6 = (float *)(a1 + 12);
  a4.i64[0] = *(_QWORD *)(a1 + 12);
  a4.i32[2] = *(_DWORD *)(a1 + 20);
  a5.i64[0] = *(_QWORD *)a1;
  a5.i32[2] = *(_DWORD *)(a1 + 8);
  v7 = (int8x16_t)vsubq_f32(a4, a5);
  v8 = (float32x2_t)vextq_s8(v7, v7, 8uLL).u64[0];
  v9 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v7.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1), *(float32x2_t *)v7.i8, 1), v8, v8).f32[0]);
  v10 = vcvtpd_u64_f64(v9 / a3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v10)
  {
    v11 = 0;
    v41 = 1;
    v42 = a2[2];
    if (!v42)
      goto LABEL_42;
    goto LABEL_40;
  }
  v54 = (float32x4_t)v7;
  v57 = a5;
  if (v10 > 0x1555555555555555)
    sub_22316E078();
  v53 = (float *)(a1 + 12);
  v11 = operator new(12 * v10);
  v12 = 0;
  v56 = vmulq_n_f32(vmulq_n_f32(v54, 1.0 / v9), a3);
  *a2 = (unint64_t)v11;
  a2[1] = (unint64_t)v11;
  a2[2] = (unint64_t)&v11[3 * v10];
  v13 = v57;
  do
  {
    v14 = a2[2];
    if ((unint64_t)v11 < v14)
    {
      v11[2] = v13.i32[2];
      *(_QWORD *)v11 = v13.i64[0];
      v11 += 3;
      goto LABEL_5;
    }
    v15 = (_DWORD *)*a2;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - *a2) >> 2);
    v17 = v16 + 1;
    if (v16 + 1 > 0x1555555555555555)
      sub_22316E078();
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v15) >> 2);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0xAAAAAAAAAAAAAAALL)
      v19 = 0x1555555555555555;
    else
      v19 = v17;
    v58 = v13;
    if (v19)
    {
      if (v19 > 0x1555555555555555)
        sub_223174E94();
      v20 = (char *)operator new(12 * v19);
      v13 = v58;
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[12 * v16];
    v22 = &v20[12 * v19];
    *(_QWORD *)v21 = v13.i64[0];
    *((_DWORD *)v21 + 2) = v13.i32[2];
    v23 = v21 + 12;
    if (v11 == v15)
    {
      *a2 = (unint64_t)v21;
      a2[1] = (unint64_t)v23;
      a2[2] = (unint64_t)v22;
    }
    else
    {
      do
      {
        v24 = *(_QWORD *)(v11 - 3);
        v11 -= 3;
        v25 = v11[2];
        *(_QWORD *)(v21 - 12) = v24;
        v21 -= 12;
        *((_DWORD *)v21 + 2) = v25;
      }
      while (v11 != v15);
      v11 = (_DWORD *)*a2;
      *a2 = (unint64_t)v21;
      a2[1] = (unint64_t)v23;
      a2[2] = (unint64_t)v22;
      if (!v11)
        goto LABEL_23;
    }
    operator delete(v11);
    v13 = v58;
LABEL_23:
    v11 = v23;
LABEL_5:
    a2[1] = (unint64_t)v11;
    v13 = vaddq_f32(v56, v13);
    ++v12;
  }
  while (v12 != v10);
  v10 = *a2;
  if ((_DWORD *)*a2 == v11)
  {
    v41 = 1;
    v10 = (unint64_t)v11;
    v6 = v53;
    v42 = a2[2];
    if ((unint64_t)v11 >= v42)
      goto LABEL_42;
    goto LABEL_40;
  }
  v26 = *((float *)v11 - 3);
  v6 = v53;
  v27 = *v53;
  v28 = v26 < *v53;
  if (v26 == *v53)
    goto LABEL_36;
  v29 = v26 - v27;
  v30 = v27 - v26;
  if (!v28)
    v30 = v29;
  if (v30 <= 0.000001)
  {
LABEL_36:
    v31 = *((float *)v11 - 2);
    v32 = *(float *)(a1 + 16);
    v33 = v31 < v32;
    if (v31 == v32)
      goto LABEL_66;
    v34 = v31 - v32;
    v35 = v32 - v31;
    if (!v33)
      v35 = v34;
    if (v35 <= 0.000001)
    {
LABEL_66:
      v36 = *((float *)v11 - 1);
      v37 = *(float *)(a1 + 20);
      v38 = v36 < v37;
      if (v36 == v37)
        return;
      v39 = v36 - v37;
      v40 = v37 - v36;
      if (!v38)
        v40 = v39;
      if (v40 <= 0.000001)
        return;
    }
  }
  v41 = 0;
  v42 = a2[2];
  if ((unint64_t)v11 < v42)
  {
LABEL_40:
    v43 = *(_QWORD *)v6;
    v11[2] = *((_DWORD *)v6 + 2);
    *(_QWORD *)v11 = v43;
    v44 = v11 + 3;
    goto LABEL_57;
  }
LABEL_42:
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - v10) >> 2) + 1;
  if (v45 > 0x1555555555555555)
    sub_22316E078();
  v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v10) >> 2);
  if (2 * v46 > v45)
    v45 = 2 * v46;
  if (v46 >= 0xAAAAAAAAAAAAAAALL)
    v47 = 0x1555555555555555;
  else
    v47 = v45;
  if (v47)
  {
    if (v47 > 0x1555555555555555)
      sub_223174E94();
    v48 = (char *)operator new(12 * v47);
  }
  else
  {
    v48 = 0;
  }
  v49 = &v48[4 * ((uint64_t)((uint64_t)v11 - v10) >> 2)];
  *(_QWORD *)v49 = *(_QWORD *)v6;
  *((float *)v49 + 2) = v6[2];
  v44 = v49 + 12;
  if ((v41 & 1) == 0)
  {
    do
    {
      v50 = *(_QWORD *)(v11 - 3);
      v11 -= 3;
      v51 = v11[2];
      *(_QWORD *)(v49 - 12) = v50;
      v49 -= 12;
      *((_DWORD *)v49 + 2) = v51;
    }
    while (v11 != (_DWORD *)v10);
    v11 = (_DWORD *)*a2;
  }
  *a2 = (unint64_t)v49;
  a2[1] = (unint64_t)v44;
  a2[2] = (unint64_t)&v48[12 * v47];
  if (v11)
    operator delete(v11);
LABEL_57:
  a2[1] = (unint64_t)v44;
}

void sub_223F60330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_223F60358@<X0>(char ***result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char ***v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;

  if (!*(_BYTE *)(a4 + 16))
  {
    v14 = result;
    v19 = 0uLL;
    v20 = 0;
    if (result)
    {
      if ((unint64_t)result > 0xAAAAAAAAAAAAAAALL)
        sub_22316E078();
      *(_QWORD *)&v19 = operator new(24 * (_QWORD)result);
      *((_QWORD *)&v19 + 1) = v19;
      v20 = v19 + 24 * (_QWORD)v14;
      v24 = (char **)&v19;
      do
      {
        v15 = *a3;
        v16 = *(uint64_t *)((char *)a3 + 12);
        v21 = *a2;
        v22 = v15;
        v23 = v16;
        result = sub_223F622F4(&v24, (uint64_t)&v21);
        a3 = (uint64_t *)((char *)a3 + 36);
        a2 = (uint64_t *)((char *)a2 + 12);
        v14 = (char ***)((char *)v14 - 1);
      }
      while (v14);
      goto LABEL_11;
    }
LABEL_12:
    v18 = 0;
    v17 = 0uLL;
    goto LABEL_13;
  }
  v9 = *(_QWORD *)a4;
  v8 = *(_QWORD **)(a4 + 8);
  v19 = 0uLL;
  v20 = 0;
  if (!v9)
    goto LABEL_12;
  if (v9 > 0xAAAAAAAAAAAAAAALL)
    sub_22316E078();
  *(_QWORD *)&v19 = operator new(24 * v9);
  *((_QWORD *)&v19 + 1) = v19;
  v20 = v19 + 24 * v9;
  v24 = (char **)&v19;
  v10 = 8 * v9;
  do
  {
    v11 = (uint64_t *)((char *)a3 + 36 * *v8);
    v12 = *v11;
    v13 = *(uint64_t *)((char *)v11 + 12);
    v21 = *(uint64_t *)((char *)a2 + 12 * *v8);
    v22 = v12;
    v23 = v13;
    result = sub_223F622F4(&v24, (uint64_t)&v21);
    ++v8;
    v10 -= 8;
  }
  while (v10);
LABEL_11:
  v17 = v19;
  v18 = v20;
LABEL_13:
  *(_OWORD *)a5 = v17;
  *(_QWORD *)(a5 + 16) = v18;
  return result;
}

void sub_223F604D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_223F60500(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char **a4@<X8>, __n128 a5@<Q0>, float32x4_t a6@<Q1>)
{
  float v6;
  uint64_t v8;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  __int16 v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char **v35;
  char *v36;
  char *v37;

  v6 = a5.n128_f32[0];
  v8 = a2;
  v11 = 0;
  v12 = 0;
  v13 = a2 + 24 * a1;
  v36 = 0;
  v37 = 0;
  if (24 * a1)
  {
    v14 = 0x5555555555555555 * ((-24 * a1) >> 3);
    if (v14 > 0x4EC4EC4EC4EC4ECLL)
      sub_22316E078();
    v12 = operator new(0x5555555555555544 * ((-24 * a1) >> 3));
    v11 = (char *)v12 + 52 * v14;
    v36 = (char *)v12;
    v37 = v11;
  }
  if (!a1)
  {
    v34 = (char *)v12;
    goto LABEL_26;
  }
  v35 = a4;
  v15 = 0;
  do
  {
    while (1)
    {
      v16 = (uint64_t *)(a3 + 72 * v15);
      v17 = (uint64_t *)(a3 + 36 * ((2 * v15) | 1));
      v18 = *(_QWORD *)v8;
      v19 = *(_QWORD *)(v8 + 12);
      v20 = *v16;
      v21 = *(uint64_t *)((char *)v16 + 12);
      v22 = *v17;
      a5.n128_u64[0] = v19;
      a5.n128_u32[2] = *(_DWORD *)(v8 + 20);
      v23 = *(uint64_t *)((char *)v17 + 12);
      a6.i64[0] = *(_QWORD *)v8;
      a6.i32[2] = *(_DWORD *)(v8 + 8);
      a5 = (__n128)vsubq_f32((float32x4_t)a5, a6);
      v24 = (float32x2_t)vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
      v25 = llroundf(sqrtf(vmla_f32(vmla_lane_f32(vmul_f32((float32x2_t)a5.n128_u64[0], (float32x2_t)a5.n128_u64[0]), (float32x2_t)vdup_lane_s32((int32x2_t)a5.n128_u64[0], 1), (float32x2_t)a5.n128_u64[0], 1), v24, v24).f32[0])/ v6);
      if (v12 >= (_QWORD *)v37)
        break;
      *v12 = v18;
      v12[1] = v19;
      v12[2] = v20;
      v12[3] = v21;
      v12[4] = v22;
      v12[5] = v23;
      *((_WORD *)v12 + 24) = v25;
      v12 = (_QWORD *)((char *)v12 + 52);
      v8 += 24;
      ++v15;
      if (v8 == v13)
        goto LABEL_24;
    }
    v26 = v36;
    v27 = 0x4EC4EC4EC4EC4EC5 * (((char *)v12 - v36) >> 2);
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) > 0x4EC4EC4EC4EC4ECLL)
      sub_22316E078();
    if (0x9D89D89D89D89D8ALL * ((v37 - v36) >> 2) > v28)
      v28 = 0x9D89D89D89D89D8ALL * ((v37 - v36) >> 2);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v37 - v36) >> 2)) >= 0x276276276276276)
      v29 = 0x4EC4EC4EC4EC4ECLL;
    else
      v29 = v28;
    if (v29 > 0x4EC4EC4EC4EC4ECLL)
      sub_223174E94();
    v30 = (char *)operator new(52 * v29);
    v31 = &v30[4 * (((char *)v12 - v36) >> 2)];
    *(_QWORD *)v31 = v18;
    *((_QWORD *)v31 + 1) = v19;
    *((_QWORD *)v31 + 2) = v20;
    *((_QWORD *)v31 + 3) = v21;
    *((_QWORD *)v31 + 4) = v22;
    *((_QWORD *)v31 + 5) = v23;
    *((_WORD *)v31 + 24) = v25;
    if (v12 == (_QWORD *)v36)
    {
      v12 = v31 + 52;
      v36 = &v30[52 * v27];
      v37 = &v30[52 * v29];
      if (v26)
        goto LABEL_19;
    }
    else
    {
      v32 = 0;
      do
      {
        v33 = &v31[v32];
        *(_QWORD *)(v33 - 52) = *(_QWORD *)((char *)v12 + v32 - 52);
        *(_QWORD *)(v33 - 44) = *(_QWORD *)((char *)v12 + v32 - 44);
        *(_OWORD *)(v33 - 36) = *(_OWORD *)((char *)v12 + v32 - 36);
        a5 = *(__n128 *)((char *)v12 + v32 - 20);
        *(__n128 *)(v33 - 20) = a5;
        *((_WORD *)v33 - 2) = *(_WORD *)((char *)v12 + v32 - 4);
        v32 -= 52;
      }
      while ((char *)v12 + v32 != v36);
      v12 = v31 + 52;
      v36 = &v31[v32];
      v37 = &v30[52 * v29];
      if (v26)
LABEL_19:
        operator delete(v26);
    }
    v8 += 24;
    ++v15;
  }
  while (v8 != v13);
LABEL_24:
  a4 = v35;
  v34 = v36;
  v11 = v37;
LABEL_26:
  *a4 = v34;
  a4[1] = (char *)v12;
  a4[2] = v11;
}

void sub_223F60828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F60864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>, float a7@<S0>)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *result;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  float v115;
  _QWORD v116[2];
  _QWORD v117[2];
  uint64_t v118;
  _QWORD v119[3];
  _QWORD *v120;
  __int128 v121;
  _QWORD v122[3];
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[3];
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[3];
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[3];
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[3];
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[3];
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD v146[3];
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[3];
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD v154[3];
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[3];
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[3];
  _QWORD *v175;
  __int128 v176;
  _QWORD v177[3];
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD v181[3];
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD v189[3];
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD v193[3];
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD v197[3];
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD v201[3];
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD v205[3];
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;

  v208 = *MEMORY[0x24BDAC8D0];
  v117[0] = a2;
  v117[1] = a3;
  v116[0] = a4;
  v116[1] = a5;
  v115 = a7;
  v204 = 0;
  v9 = v205;
  v10 = operator new(0x28uLL);
  *v10 = &off_24EC644B0;
  v10[1] = a1;
  v10[2] = v117;
  v10[3] = v116;
  v10[4] = &v115;
  v206 = v10;
  v207 = a2;
  if (a2)
  {
    v173 = 0;
    while (((*(uint64_t (**)(_QWORD *, uint64_t *))(*v10 + 48))(v10, &v173) & 1) == 0)
    {
      v11 = v204 + 1;
      v204 = v11;
      if (v11 == v207)
        break;
      v10 = v206;
      v173 = v11;
      if (!v206)
        sub_223198474();
    }
  }
  v12 = operator new(0x28uLL);
  *v12 = &off_24EC644B0;
  v12[1] = a1;
  v12[2] = v117;
  v12[3] = v116;
  v12[4] = &v115;
  v173 = v204;
  v13 = v174;
  if (v206)
  {
    v14 = a6;
    if (v206 == v205)
    {
      v175 = v174;
      (*(void (**)(_QWORD *, _QWORD *))(v205[0] + 24))(v205, v174);
    }
    else
    {
      v175 = v206;
      v206 = 0;
    }
  }
  else
  {
    v14 = a6;
    v175 = 0;
  }
  *(_QWORD *)&v176 = v207;
  *((_QWORD *)&v176 + 1) = a2;
  v178 = v12;
  v179 = a2;
  if (v206 == v205)
  {
    v15 = 4;
  }
  else
  {
    if (!v206)
      goto LABEL_17;
    v15 = 5;
    v9 = v206;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v15))(v9);
LABEL_17:
  v118 = v173;
  v16 = &v118;
  if (!v175)
  {
LABEL_20:
    v16[4] = 0;
    goto LABEL_22;
  }
  if (v175 != v174)
  {
    v16 = &v173;
    v120 = v175;
    goto LABEL_20;
  }
  v120 = v119;
  (*(void (**)(_QWORD *, _QWORD *))(v174[0] + 24))(v174, v119);
LABEL_22:
  v121 = v176;
  v17 = &v118;
  if (!v178)
  {
LABEL_25:
    v17[10] = 0;
    goto LABEL_27;
  }
  if (v178 != v177)
  {
    v17 = &v173;
    v123 = v178;
    goto LABEL_25;
  }
  v123 = v122;
  (*(void (**)(_QWORD *, _QWORD *))(*v178 + 24))(v178, v122);
LABEL_27:
  v18 = v178;
  v124 = v179;
  if (v178 == v177)
  {
    v19 = 4;
    v18 = v177;
  }
  else
  {
    if (!v178)
      goto LABEL_32;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_32:
  if (v175 == v174)
  {
    v20 = 4;
  }
  else
  {
    if (!v175)
      goto LABEL_37;
    v20 = 5;
    v13 = v175;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v20))(v13);
LABEL_37:
  v21 = (uint64_t)v120;
  v129 = v118;
  v22 = v130;
  if (!v120)
  {
LABEL_40:
    v131 = (_QWORD *)v21;
    goto LABEL_42;
  }
  if (v120 != v119)
  {
    v21 = (*(uint64_t (**)(_QWORD *))(*v120 + 16))(v120);
    goto LABEL_40;
  }
  v131 = v130;
  (*(void (**)(_QWORD *, _QWORD *))(v119[0] + 24))(v119, v130);
LABEL_42:
  v125 = *((_QWORD *)&v121 + 1);
  v132 = v121;
  v23 = v126;
  v24 = (uint64_t)v123;
  if (!v123)
  {
LABEL_45:
    v127 = (_QWORD *)v24;
    goto LABEL_47;
  }
  if (v123 != v122)
  {
    v24 = (*(uint64_t (**)(void))(*v123 + 16))();
    goto LABEL_45;
  }
  v127 = v126;
  (*(void (**)(_QWORD *, _QWORD *))(v122[0] + 24))(v122, v126);
LABEL_47:
  v128 = v124;
  *v14 = 0;
  v14[1] = 0;
  v14[2] = 0;
  v145 = v129;
  v25 = v146;
  v26 = (uint64_t)v131;
  if (!v131)
  {
LABEL_50:
    v147 = (_QWORD *)v26;
    goto LABEL_52;
  }
  if (v131 != v130)
  {
    v26 = (*(uint64_t (**)(_QWORD *))(*v131 + 16))(v131);
    goto LABEL_50;
  }
  v147 = v146;
  (*(void (**)(_QWORD *, _QWORD *))(v130[0] + 24))(v130, v146);
LABEL_52:
  v148 = v132;
  v141 = v125;
  v27 = v142;
  v28 = (uint64_t)v127;
  if (!v127)
  {
LABEL_55:
    v143 = (_QWORD *)v28;
    goto LABEL_57;
  }
  if (v127 != v126)
  {
    v28 = (*(uint64_t (**)(_QWORD *))(*v127 + 16))(v127);
    goto LABEL_55;
  }
  v143 = v142;
  (*(void (**)(_QWORD *, _QWORD *))(v126[0] + 24))(v126, v142);
LABEL_57:
  v144 = v128;
  v173 = v145;
  v29 = v174;
  v30 = (uint64_t)v147;
  if (!v147)
  {
LABEL_60:
    v175 = (_QWORD *)v30;
    goto LABEL_62;
  }
  if (v147 != v146)
  {
    v30 = (*(uint64_t (**)(_QWORD *))(*v147 + 16))(v147);
    goto LABEL_60;
  }
  v175 = v174;
  (*(void (**)(_QWORD *, _QWORD *))(v146[0] + 24))(v146, v174);
LABEL_62:
  *(_QWORD *)&v176 = v148;
  v204 = v141;
  v31 = v205;
  v32 = (uint64_t)v143;
  if (!v143)
  {
LABEL_65:
    v206 = (_QWORD *)v32;
    goto LABEL_67;
  }
  if (v143 != v142)
  {
    v32 = (*(uint64_t (**)(_QWORD *))(*v143 + 16))(v143);
    goto LABEL_65;
  }
  v206 = v205;
  (*(void (**)(_QWORD *, _QWORD *))(v142[0] + 24))(v142, v205);
LABEL_67:
  v207 = v144;
  v33 = v173;
  if (v173 == v204)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    do
    {
      do
      {
        v173 = ++v33;
        if (v33 == (_QWORD)v176)
          break;
        v200 = v33;
        if (!v175)
          sub_223198474();
        v36 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v175 + 48))(v175, &v200);
        v33 = v173;
      }
      while ((v36 & 1) == 0);
      ++v34;
    }
    while (v33 != v204);
  }
  if (v206 == v205)
  {
    v35 = 4;
  }
  else
  {
    if (!v206)
      goto LABEL_80;
    v35 = 5;
    v31 = v206;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v35))(v31);
LABEL_80:
  if (v175 == v174)
  {
    v37 = 4;
  }
  else
  {
    if (!v175)
      goto LABEL_85;
    v37 = 5;
    v29 = v175;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v37))(v29);
LABEL_85:
  if (v143 == v142)
  {
    v38 = 4;
  }
  else
  {
    if (!v143)
      goto LABEL_90;
    v38 = 5;
    v27 = v143;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v38))(v27);
LABEL_90:
  if (v147 == v146)
  {
    v39 = 4;
  }
  else
  {
    if (!v147)
      goto LABEL_95;
    v39 = 5;
    v25 = v147;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v39))(v25);
LABEL_95:
  v137 = v129;
  v40 = v138;
  v41 = (uint64_t)v131;
  if (!v131)
  {
LABEL_98:
    v139 = (_QWORD *)v41;
    goto LABEL_100;
  }
  if (v131 != v130)
  {
    v41 = (*(uint64_t (**)(_QWORD *))(*v131 + 16))(v131);
    goto LABEL_98;
  }
  v139 = v138;
  (*(void (**)(_QWORD *, _QWORD *))(v130[0] + 24))(v130, v138);
LABEL_100:
  v140 = v132;
  v133 = v125;
  v42 = v134;
  result = v127;
  if (!v127)
  {
LABEL_103:
    v135 = result;
    goto LABEL_105;
  }
  if (v127 != v126)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v127 + 16))(v127);
    goto LABEL_103;
  }
  v135 = v134;
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(v126[0] + 24))(v126, v134);
LABEL_105:
  v136 = v128;
  if (!v34)
    goto LABEL_292;
  if (v34 >> 61)
    sub_22367C394();
  v44 = (char *)operator new(8 * v34);
  *v14 = v44;
  v14[1] = v44;
  v14[2] = &v44[8 * v34];
  v153 = v137;
  v45 = (uint64_t)v139;
  if (!v139)
    goto LABEL_110;
  if (v139 != v138)
  {
    v45 = (*(uint64_t (**)(_QWORD *))(*v139 + 16))(v139);
LABEL_110:
    v155 = (_QWORD *)v45;
    goto LABEL_112;
  }
  v155 = v154;
  (*(void (**)(_QWORD *, _QWORD *))(v138[0] + 24))(v138, v154);
LABEL_112:
  v113 = v44;
  v156 = v140;
  v149 = v133;
  v46 = (uint64_t)v135;
  if (!v135)
  {
LABEL_115:
    v151 = (_QWORD *)v46;
    goto LABEL_117;
  }
  if (v135 != v134)
  {
    v46 = (*(uint64_t (**)(_QWORD *))(*v135 + 16))(v135);
    goto LABEL_115;
  }
  v151 = v150;
  (*(void (**)(_QWORD *, _QWORD *))(v134[0] + 24))(v134, v150);
LABEL_117:
  v152 = v136;
  v161 = v153;
  v47 = (uint64_t)v155;
  if (!v155)
  {
LABEL_120:
    v163 = (_QWORD *)v47;
    goto LABEL_122;
  }
  if (v155 != v154)
  {
    v47 = (*(uint64_t (**)(_QWORD *))(*v155 + 16))(v155);
    goto LABEL_120;
  }
  v163 = v162;
  (*(void (**)(_QWORD *))(v154[0] + 24))(v154);
LABEL_122:
  v164 = v156;
  v157 = v149;
  v48 = (uint64_t)v151;
  if (!v151)
  {
LABEL_125:
    v159 = (_QWORD *)v48;
    goto LABEL_127;
  }
  if (v151 != v150)
  {
    v48 = (*(uint64_t (**)(_QWORD *))(*v151 + 16))(v151);
    goto LABEL_125;
  }
  v159 = v158;
  (*(void (**)(_QWORD *, _QWORD *))(v150[0] + 24))(v150, v158);
LABEL_127:
  v160 = v152;
  v169 = v161;
  v49 = (uint64_t)v163;
  if (!v163)
  {
LABEL_130:
    v171 = (_QWORD *)v49;
    goto LABEL_132;
  }
  if (v163 != v162)
  {
    v49 = (*(uint64_t (**)(_QWORD *))(*v163 + 16))(v163);
    goto LABEL_130;
  }
  v171 = v170;
  (*(void (**)(_QWORD *, _QWORD *))(v162[0] + 24))(v162, v170);
LABEL_132:
  v172 = v164;
  v165 = v157;
  v50 = v166;
  v51 = (uint64_t)v159;
  if (!v159)
  {
LABEL_135:
    v167 = (_QWORD *)v51;
    goto LABEL_137;
  }
  if (v159 != v158)
  {
    v51 = (*(uint64_t (**)(_QWORD *))(*v159 + 16))(v159);
    goto LABEL_135;
  }
  v167 = v166;
  (*(void (**)(_QWORD *, _QWORD *))(v158[0] + 24))(v158, v166);
LABEL_137:
  v168 = v160;
  v184 = v169;
  v52 = &v184;
  v53 = v185;
  if (!v171)
  {
LABEL_140:
    v52[4] = 0;
    goto LABEL_142;
  }
  if (v171 != v170)
  {
    v52 = &v169;
    v186 = v171;
    goto LABEL_140;
  }
  v186 = v185;
  (*(void (**)(void))(v170[0] + 24))();
LABEL_142:
  v187 = v172;
  v180 = v165;
  v54 = &v180;
  v55 = v181;
  if (!v167)
  {
LABEL_145:
    v54[4] = 0;
    goto LABEL_147;
  }
  if (v167 != v166)
  {
    v54 = &v165;
    v182 = v167;
    goto LABEL_145;
  }
  v182 = v181;
  (*(void (**)(_QWORD *, _QWORD *))(v166[0] + 24))(v166, v181);
LABEL_147:
  v183 = v168;
  v56 = v184;
  v196 = v184;
  v57 = &v196;
  v58 = v197;
  if (!v186)
  {
LABEL_150:
    v57[4] = 0;
    goto LABEL_152;
  }
  if (v186 != v185)
  {
    v57 = &v184;
    v198 = v186;
    goto LABEL_150;
  }
  v198 = v197;
  (*(void (**)(_QWORD *, _QWORD *))(v185[0] + 24))(v185, v197);
  v56 = v196;
LABEL_152:
  v59 = v187;
  v199 = v187;
  v204 = v56;
  v60 = v205;
  if (!v198)
  {
    v206 = 0;
    v207 = v187;
    v200 = v56;
    goto LABEL_157;
  }
  if (v198 == v197)
  {
    v206 = v205;
    (*(void (**)(_QWORD *, _QWORD *))(v197[0] + 24))(v197, v205);
    v61 = v206;
    v59 = v199;
    v207 = v199;
    v200 = v204;
    if (!v206)
      goto LABEL_157;
LABEL_161:
    if (v61 == v205)
    {
      v202 = v201;
      (*(void (**)(_QWORD *))(v205[0] + 24))(v205);
      v62 = v206;
      v203 = v207;
      if (v206 != v205)
        goto LABEL_158;
    }
    else
    {
      v202 = v61;
      v203 = v59;
      v206 = 0;
      v62 = 0;
      if (v205)
        goto LABEL_158;
    }
LABEL_163:
    v63 = 4;
    goto LABEL_164;
  }
  v61 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v198 + 16))(v198);
  v59 = v199;
  v206 = v61;
  v207 = v199;
  v200 = v204;
  if (v61)
    goto LABEL_161;
LABEL_157:
  v202 = 0;
  v203 = v59;
  v62 = v206;
  if (v206 == v205)
    goto LABEL_163;
LABEL_158:
  if (!v62)
    goto LABEL_165;
  v63 = 5;
  v60 = v62;
LABEL_164:
  (*(void (**)(_QWORD *))(*v60 + 8 * v63))(v60);
LABEL_165:
  v64 = v180;
  v188 = v180;
  v65 = &v188;
  v66 = v189;
  if (!v182)
  {
LABEL_168:
    v65[4] = 0;
    goto LABEL_170;
  }
  if (v182 != v181)
  {
    v65 = &v180;
    v190 = v182;
    goto LABEL_168;
  }
  v190 = v189;
  (*(void (**)(_QWORD *, _QWORD *))(v181[0] + 24))(v181, v189);
  v64 = v188;
LABEL_170:
  v67 = v183;
  v191 = v183;
  v204 = v64;
  v68 = v205;
  if (!v190)
  {
    v206 = 0;
    v207 = v183;
    v192 = v64;
    goto LABEL_175;
  }
  if (v190 == v189)
  {
    v206 = v205;
    (*(void (**)(_QWORD *, _QWORD *))(v189[0] + 24))(v189, v205);
    v69 = v206;
    v67 = v191;
    v207 = v191;
    v192 = v204;
    if (!v206)
      goto LABEL_175;
LABEL_179:
    if (v69 == v205)
    {
      v194 = v193;
      (*(void (**)(_QWORD *))(v205[0] + 24))(v205);
      v70 = v206;
      v195 = v207;
      if (v206 != v205)
        goto LABEL_176;
    }
    else
    {
      v194 = v69;
      v195 = v67;
      v206 = 0;
      v70 = 0;
      if (v205)
        goto LABEL_176;
    }
LABEL_181:
    v71 = 4;
    goto LABEL_182;
  }
  v69 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v190 + 16))(v190);
  v67 = v191;
  v206 = v69;
  v207 = v191;
  v192 = v204;
  if (v69)
    goto LABEL_179;
LABEL_175:
  v194 = 0;
  v195 = v67;
  v70 = v206;
  if (v206 == v205)
    goto LABEL_181;
LABEL_176:
  if (!v70)
    goto LABEL_183;
  v71 = 5;
  v68 = v70;
LABEL_182:
  (*(void (**)(_QWORD *))(*v68 + 8 * v71))(v68);
LABEL_183:
  v173 = v200;
  v72 = &v173;
  v73 = v174;
  if (!v202)
  {
LABEL_186:
    v72[4] = 0;
    goto LABEL_188;
  }
  v72 = &v200;
  if (v202 != v201)
  {
    v175 = v202;
    goto LABEL_186;
  }
  v175 = v174;
  (*(void (**)(void))(v201[0] + 24))();
LABEL_188:
  *(_QWORD *)&v176 = v203;
  *((_QWORD *)&v176 + 1) = v192;
  v74 = v177;
  if (v194)
  {
    if (v194 == v193)
    {
      v178 = v177;
      (*(void (**)(void))(v193[0] + 24))();
    }
    else
    {
      v178 = v194;
      v194 = 0;
    }
  }
  else
  {
    v178 = 0;
  }
  v75 = v194;
  v179 = v195;
  if (v194 == v193)
  {
    v76 = 4;
    v75 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_198;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_198:
  if (v190 == v189)
  {
    v77 = 4;
  }
  else
  {
    if (!v190)
      goto LABEL_203;
    v77 = 5;
    v66 = v190;
  }
  (*(void (**)(_QWORD *))(*v66 + 8 * v77))(v66);
LABEL_203:
  v78 = v202;
  if (v202 == v201)
  {
    v79 = 4;
    v78 = v201;
  }
  else
  {
    if (!v202)
      goto LABEL_208;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_208:
  if (v198 == v197)
  {
    v80 = 4;
  }
  else
  {
    if (!v198)
      goto LABEL_213;
    v80 = 5;
    v58 = v198;
  }
  (*(void (**)(_QWORD *))(*v58 + 8 * v80))(v58);
LABEL_213:
  if (v182 == v181)
  {
    v82 = 4;
    v81 = a6;
  }
  else
  {
    v81 = a6;
    if (!v182)
      goto LABEL_218;
    v82 = 5;
    v55 = v182;
  }
  (*(void (**)(_QWORD *))(*v55 + 8 * v82))(v55);
LABEL_218:
  if (v186 == v185)
  {
    v83 = 4;
  }
  else
  {
    if (!v186)
      goto LABEL_223;
    v83 = 5;
    v53 = v186;
  }
  (*(void (**)(_QWORD *))(*v53 + 8 * v83))(v53);
LABEL_223:
  if (v167 == v166)
  {
    v85 = 4;
    v84 = v170;
  }
  else
  {
    v84 = v170;
    if (!v167)
      goto LABEL_228;
    v85 = 5;
    v50 = v167;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v85))(v50);
LABEL_228:
  if (v171 == v170)
  {
    v87 = 4;
    v86 = v150;
  }
  else
  {
    v86 = v150;
    if (!v171)
      goto LABEL_233;
    v87 = 5;
    v84 = v171;
  }
  (*(void (**)(_QWORD *))(*v84 + 8 * v87))(v84);
LABEL_233:
  v204 = v173;
  v88 = v205;
  v89 = (uint64_t)v175;
  if (!v175)
  {
LABEL_236:
    v206 = (_QWORD *)v89;
    goto LABEL_238;
  }
  if (v175 != v174)
  {
    v89 = (*(uint64_t (**)(void))(*v175 + 16))();
    goto LABEL_236;
  }
  v206 = v205;
  (*(void (**)(_QWORD *, _QWORD *))(v174[0] + 24))(v174, v205);
LABEL_238:
  v200 = *((_QWORD *)&v176 + 1);
  v207 = v176;
  v90 = v201;
  v91 = (uint64_t)v178;
  if (!v178)
  {
LABEL_241:
    v202 = (_QWORD *)v91;
    goto LABEL_243;
  }
  if (v178 != v177)
  {
    v91 = (*(uint64_t (**)(void))(*v178 + 16))();
    goto LABEL_241;
  }
  v202 = v201;
  (*(void (**)(_QWORD *, _QWORD *))(v177[0] + 24))(v177, v201);
LABEL_243:
  v203 = v179;
  v92 = v204;
  if (v204 == v200)
  {
    v93 = v113;
  }
  else
  {
    v93 = v113;
    do
    {
      *v93 = v92;
      do
      {
        v204 = ++v92;
        if (v92 == v207)
          break;
        v196 = v92;
        if (!v206)
          sub_223198474();
        v95 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v206 + 48))(v206, &v196);
        v92 = v204;
      }
      while ((v95 & 1) == 0);
      ++v93;
    }
    while (v92 != v200);
  }
  if (v202 == v201)
  {
    v94 = 4;
  }
  else
  {
    if (!v202)
      goto LABEL_257;
    v94 = 5;
    v90 = v202;
  }
  (*(void (**)(_QWORD *))(*v90 + 8 * v94))(v90);
LABEL_257:
  if (v206 == v205)
  {
    v96 = 4;
    v42 = v134;
  }
  else
  {
    v42 = v134;
    if (!v206)
      goto LABEL_262;
    v96 = 5;
    v88 = v206;
  }
  (*(void (**)(_QWORD *))(*v88 + 8 * v96))(v88);
LABEL_262:
  if (v178 == v177)
  {
    v98 = 4;
    v97 = v154;
  }
  else
  {
    v97 = v154;
    if (!v178)
      goto LABEL_267;
    v98 = 5;
    v74 = v178;
  }
  (*(void (**)(_QWORD *))(*v74 + 8 * v98))(v74);
LABEL_267:
  if (v175 == v174)
  {
    v100 = 4;
    v22 = v130;
    v99 = v162;
  }
  else
  {
    v22 = v130;
    v99 = v162;
    if (!v175)
      goto LABEL_272;
    v100 = 5;
    v73 = v175;
  }
  (*(void (**)(_QWORD *))(*v73 + 8 * v100))(v73);
LABEL_272:
  result = v158;
  if (v159 == v158)
  {
    v101 = 4;
    v23 = v126;
  }
  else
  {
    v23 = v126;
    if (!v159)
      goto LABEL_277;
    v101 = 5;
    result = v159;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v101))();
LABEL_277:
  if (v163 == v162)
  {
    v102 = 4;
  }
  else
  {
    if (!v163)
      goto LABEL_282;
    v102 = 5;
    v99 = v163;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v99 + 8 * v102))(v99);
LABEL_282:
  v81[1] = v93;
  if (v151 == v150)
  {
    v103 = 4;
  }
  else
  {
    if (!v151)
      goto LABEL_287;
    v103 = 5;
    v86 = v151;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v86 + 8 * v103))(v86);
LABEL_287:
  if (v155 == v154)
  {
    v104 = 4;
  }
  else
  {
    if (!v155)
      goto LABEL_292;
    v104 = 5;
    v97 = v155;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v97 + 8 * v104))(v97);
LABEL_292:
  if (v135 == v134)
  {
    v105 = 4;
  }
  else
  {
    if (!v135)
      goto LABEL_297;
    v105 = 5;
    v42 = v135;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v42 + 8 * v105))(v42);
LABEL_297:
  if (v139 == v138)
  {
    v106 = 4;
  }
  else
  {
    if (!v139)
      goto LABEL_302;
    v106 = 5;
    v40 = v139;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v40 + 8 * v106))(v40);
LABEL_302:
  if (v127 == v126)
  {
    v109 = 4;
    v108 = v122;
    v107 = v119;
  }
  else
  {
    v108 = v122;
    v107 = v119;
    if (!v127)
      goto LABEL_307;
    v109 = 5;
    v23 = v127;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v23 + 8 * v109))(v23);
LABEL_307:
  if (v131 == v130)
  {
    v110 = 4;
  }
  else
  {
    if (!v131)
      goto LABEL_312;
    v110 = 5;
    v22 = v131;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v22 + 8 * v110))(v22);
LABEL_312:
  if (v123 == v122)
  {
    v111 = 4;
  }
  else
  {
    if (!v123)
      goto LABEL_317;
    v111 = 5;
    v108 = v123;
  }
  result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v108 + 8 * v111))(v108);
LABEL_317:
  if (v120 == v119)
  {
    v112 = 4;
  }
  else
  {
    if (!v120)
      return result;
    v112 = 5;
    v107 = v120;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v107 + 8 * v112))(v107);
}

void sub_223F61AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223F61F60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char **a5@<X8>, float a6@<S0>, __n128 a7@<Q1>, float32x2_t a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  float32x2_t v10;
  float32x2_t v11;
  char **v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 *v46;
  __n128 *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (a2)
  {
    v15 = a5;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v50 = a2;
    v51 = a3;
    while (1)
    {
      v21 = a3 + 24 * v19;
      v22 = a4 + 72 * v19;
      a8.i32[0] = *(_DWORD *)(v21 + 8);
      a7.n128_u32[0] = *(_DWORD *)(a1 + 12);
      v23 = *(float32x2_t *)(a1 + 4);
      LODWORD(a9) = *(_DWORD *)(v22 + 8);
      LODWORD(a10) = *(_DWORD *)(v22 + 20);
      v10.i32[0] = *(_DWORD *)(v22 + 32);
      v24 = *(float32x2_t *)(v22 + 24);
      v25 = (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1);
      v26 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v22, v23.f32[0]), *(float32x2_t *)(v22 + 12), v23, 1), v24, a7.n128_f32[0]);
      v27 = (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1);
      a10 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(v23, v26), v27, v23, 1), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a9, v23), *(float32x2_t *)&a10, v23, 1), (float32x2_t)a7.n128_u64[0], v10), (float32x2_t)a7.n128_u64[0]));
      a9 = COERCE_DOUBLE(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v21, v23), v25, *(float32x2_t *)v21, 1), (float32x2_t)a7.n128_u64[0], a8));
      v28 = 0.01;
      if (*(float *)&a10 <= 0.01)
        v28 = *(float *)&a10;
      if (v28 < a6)
        v28 = a6;
      if ((float)((float)(*(float *)a1 + *(float *)&a9) * (float)(*(float *)a1 + *(float *)&a9)) > v28)
        goto LABEL_5;
      v29 = a4 + 36 * ((2 * v19) | 1);
      a9 = *(double *)(v21 + 12);
      LODWORD(a10) = *(_DWORD *)(v21 + 20);
      v27.i32[0] = *(_DWORD *)(v29 + 8);
      v24.i32[0] = *(_DWORD *)(v29 + 20);
      v11.i32[0] = *(_DWORD *)(v29 + 32);
      v10 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v29, v23.f32[0]), v25, *(float32x2_t *)(v29 + 12)), (float32x2_t)vdup_lane_s32((int32x2_t)a7.n128_u64[0], 0), *(float32x2_t *)(v29 + 24));
      a8 = vmla_f32(vmla_f32(vmul_f32(v27, v23), v25, v24), (float32x2_t)a7.n128_u64[0], v11);
      v30 = vmla_f32(vmla_lane_f32(vmul_f32(v23, v10), v25, v10, 1), a8, (float32x2_t)a7.n128_u64[0]).f32[0];
      v31 = *(float *)a1
          + vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&a9, *(float32x2_t *)(a1 + 4)), v25, *(float32x2_t *)&a9, 1), (float32x2_t)a7.n128_u64[0], *(float32x2_t *)&a10).f32[0];
      v32 = 0.01;
      if (v30 <= 0.01)
        v32 = v30;
      v33 = v31 * v31;
      if (v32 < a6)
        v32 = a6;
      if (v33 > v32)
        goto LABEL_5;
      if (v18 >= v17)
        break;
      *(_QWORD *)v18 = v19;
      v20 = (uint64_t)(v18 + 8);
LABEL_4:
      v15[1] = (char *)v20;
      v18 = (char *)v20;
LABEL_5:
      if (++v19 == a2)
        return;
    }
    v34 = (v18 - v16) >> 3;
    v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
      sub_22367C394();
    if ((v17 - v16) >> 2 > v35)
      v35 = (v17 - v16) >> 2;
    if ((unint64_t)(v17 - v16) >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
    {
      if (v36 >> 61)
        sub_223174E94();
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v34];
      *(_QWORD *)v38 = v19;
      v20 = (uint64_t)(v38 + 8);
      v39 = v18 - v16;
      if (v18 != v16)
      {
LABEL_26:
        v40 = v39 - 8;
        if (v40 < 0x168
          || (v43 = (v18 - 8 - v16) & 0xFFFFFFFFFFFFFFF8, &v37[v18 - v16 - 8 - v43] > &v37[v18 - v16 - 8])
          || &v18[-v43 - 8] > v18 - 8
          || (unint64_t)(v16 - v37) < 0x20)
        {
          v41 = v18;
          v15 = a5;
        }
        else
        {
          v44 = (v40 >> 3) + 1;
          v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v18[-v45];
          v38 -= v45;
          v46 = (__n128 *)&v37[8 * v34 - 16];
          v47 = (__n128 *)(v18 - 16);
          v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            a7 = v47[-1];
            v49 = *v47;
            v46[-1] = a7;
            *v46 = v49;
            v46 -= 2;
            v47 -= 2;
            v48 -= 4;
          }
          while (v48);
          v15 = a5;
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_29:
            v17 = &v37[8 * v36];
            *v15 = v38;
            v15[1] = (char *)v20;
            v15[2] = v17;
            if (!v16)
            {
LABEL_31:
              v16 = v38;
              a2 = v50;
              a3 = v51;
              goto LABEL_4;
            }
LABEL_30:
            operator delete(v16);
            goto LABEL_31;
          }
        }
        do
        {
          v42 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *((_QWORD *)v38 - 1) = v42;
          v38 -= 8;
        }
        while (v41 != v16);
        goto LABEL_29;
      }
    }
    else
    {
      v37 = 0;
      v38 = (char *)(8 * v34);
      *(_QWORD *)(8 * v34) = v19;
      v20 = 8 * v34 + 8;
      v39 = v18 - v16;
      if (v18 != v16)
        goto LABEL_26;
    }
    v15 = a5;
    v17 = &v37[8 * v36];
    *a5 = v38;
    a5[1] = (char *)v20;
    a5[2] = v17;
    if (!v16)
      goto LABEL_31;
    goto LABEL_30;
  }
}

void sub_223F622CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

char ***sub_223F622F4(char ***a1, uint64_t a2)
{
  char **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *a1;
  v6 = (*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *v4) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_22316E078();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        sub_223174E94();
      v13 = (char *)operator new(24 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[24 * v9];
    *(_QWORD *)v14 = *(_QWORD *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v14 + 24;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_QWORD *)v6 - 3);
        v6 -= 24;
        *((_QWORD *)v14 - 3) = v15;
        v14 -= 24;
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v6 + 8);
      }
      while (v6 != v8);
      v6 = *v4;
    }
    *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[24 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)a2;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
    v7 = v6 + 24;
  }
  v4[1] = v7;
  return a1;
}

void sub_223F62438()
{
  JUMPOUT(0x227684CE8);
}

__n128 sub_223F6244C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24EC644B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_223F6248C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24EC644B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_223F624B4(uint64_t a1, _QWORD *a2, double a3, double a4, float32x2_t a5, double a6, double a7)
{
  float32x2_t v7;
  uint64_t v8;
  float32x2_t *v9;
  uint64_t v10;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float32x2_t v15;
  float v16;
  float v17;
  float v18;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float32x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 12 * *a2);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 36 * *a2;
  v11 = **(float **)(a1 + 32);
  a5.i32[0] = v9[1].i32[0];
  v12 = *(float32x2_t *)(v8 + 4);
  LODWORD(a7) = *(_DWORD *)(v8 + 12);
  v13 = (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1);
  v14 = *(float *)v8 + vmla_f32(vmla_lane_f32(vmul_f32(*v9, v12), v13, *v9, 1), *(float32x2_t *)&a7, a5).f32[0];
  a5.i32[0] = *(_DWORD *)(v10 + 8);
  v13.i32[0] = *(_DWORD *)(v10 + 20);
  v7.i32[0] = *(_DWORD *)(v10 + 32);
  v15 = vmla_n_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v10, v12.f32[0]), *(float32x2_t *)(v10 + 12), v12, 1), *(float32x2_t *)(v10 + 24), *(float *)&a7);
  v16 = vmla_f32(vmla_lane_f32(vmul_f32(v12, v15), (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1), v12, 1), vmla_f32(vmla_lane_f32(vmul_f32(a5, v12), v13, v12, 1), *(float32x2_t *)&a7, v7), *(float32x2_t *)&a7).f32[0];
  v17 = 0.01;
  if (v16 <= 0.01)
    v17 = v16;
  v18 = v14 * v14;
  if (v17 >= v11)
    v11 = v17;
  return v18 <= v11;
}

uint64_t sub_223F62578(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfEENS_3esn4sp"
                     "anIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3ELb1EEELm18446744073709551615EEEfE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfE"
                                "ENS_3esn4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3E"
                                "Lb1EEELm18446744073709551615EEEfE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfEENS_3esn4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3ELb1EEELm18446744073709551615EEEfE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3acv16surfacedetection24computePlaneInlierPointsERKNS0_8geometry12HessianPlaneIfEENS_3esn4spanIKN3cva6MatrixIfLj3ELj1ELb1EEELm18446744073709551615EEENS8_IKNSA_IfLj3ELj3ELb1EEELm18446744073709551615EEEfE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_223F625E4()
{
  return &unk_24EC64510;
}

uint64_t sub_223F625F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v2)
  {
    v3 = sub_223334A68(v2);
    MEMORY[0x227684CE8](v3, 0x1032C408CE249C3);
  }
  v4 = *(_QWORD **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v4)
  {
    v5 = (void *)v4[32];
    if (v5)
    {
      free(v5);
      v4[32] = 0;
    }
    v6 = (void *)v4[25];
    if (v6)
      free(v6);
    v4[25] = 0;
    v7 = (void *)v4[15];
    if (v7)
      free(v7);
    v4[15] = 0;
    v8 = (void *)v4[5];
    if (v8)
      free(v8);
    v4[5] = 0;
    MEMORY[0x227684CE8](v4, 0x1090C40EDF3BDA0);
  }
  v9 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v9)
  {
    sub_223F6DD70(v9 + 24);
    MEMORY[0x227684CE8](v9, 0x10A0C407662816BLL);
  }
  sub_223198030(a1 + 160, *(_QWORD **)(a1 + 168));
  v10 = *(_QWORD **)(a1 + 136);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = *(void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v12)
    operator delete(v12);
  v13 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if (v13)
  {
    v14 = *(std::__shared_weak_count **)(v13 + 32);
    if (!v14)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v31 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (!v31)
        goto LABEL_26;
    }
    else
    {
LABEL_24:
      v17 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      if (!v17)
      {
LABEL_26:
        MEMORY[0x227684CE8](v13, 0x10A0C406147BFA8);
        goto LABEL_27;
      }
    }
    (*(void (**)(void))(v13 + 16))();
    goto LABEL_26;
  }
LABEL_27:
  v18 = *(uint64_t **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v18)
  {
    v19 = *v18;
    *v18 = 0;
    if (v19)
      ((void (*)(void))v18[1])();
    MEMORY[0x227684CE8](v18, 0xA0C40AFF93C70);
  }
  v20 = *(uint64_t **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v20)
  {
    v21 = *v20;
    *v20 = 0;
    if (v21)
      ((void (*)(void))v20[1])();
    MEMORY[0x227684CE8](v20, 0xA0C40AFF93C70);
  }
  v22 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v22)
    MEMORY[0x227684CE8](v22, 0x1000C4027586B93);
  v23 = *(uint64_t **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v23)
  {
    v24 = (std::__shared_weak_count *)v23[317];
    if (!v24)
      goto LABEL_42;
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      v32 = *v23;
      *v23 = 0;
      if (!v32)
        goto LABEL_44;
    }
    else
    {
LABEL_42:
      v27 = *v23;
      *v23 = 0;
      if (!v27)
      {
LABEL_44:
        MEMORY[0x227684CE8](v23, 0x10A0C40907A4D07);
        goto LABEL_45;
      }
    }
    ((void (*)(void))v23[1])();
    goto LABEL_44;
  }
LABEL_45:
  v28 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    *(_QWORD *)(v28 + 8) = 0;
    if (v29)
      (*(void (**)(void))(v28 + 16))();
    MEMORY[0x227684CE8](v28, 0x10A0C40B7BF8CC9);
  }
  return a1;
}

uint64_t *sub_223F628DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_223334A68(v2);
    MEMORY[0x227684CE8](v3, 0x1032C408CE249C3);
  }
  return a1;
}

_QWORD *sub_223F62920(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (void *)v2[32];
    if (v3)
    {
      free(v3);
      v2[32] = 0;
    }
    v4 = (void *)v2[25];
    if (v4)
      free(v4);
    v2[25] = 0;
    v5 = (void *)v2[15];
    if (v5)
      free(v5);
    v2[15] = 0;
    v6 = (void *)v2[5];
    if (v6)
      free(v6);
    v2[5] = 0;
    MEMORY[0x227684CE8](v2, 0x1090C40EDF3BDA0);
  }
  return a1;
}

uint64_t *sub_223F629A4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_223F6DD70(v2 + 24);
    MEMORY[0x227684CE8](v2, 0x10A0C407662816BLL);
  }
  return a1;
}

uint64_t *sub_223F629F0(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (!v3)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v8 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (!v8)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      v6 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(v2 + 8) = 0;
      if (!v6)
      {
LABEL_8:
        MEMORY[0x227684CE8](v2, 0x10A0C406147BFA8);
        return a1;
      }
    }
    (*(void (**)(void))(v2 + 16))();
    goto LABEL_8;
  }
  return a1;
}

uint64_t **sub_223F62A9C(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x227684CE8](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t **sub_223F62AF8(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      ((void (*)(void))v2[1])();
    MEMORY[0x227684CE8](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t **sub_223F62B54(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (std::__shared_weak_count *)v2[317];
    if (!v3)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v8 = *v2;
      *v2 = 0;
      if (!v8)
        goto LABEL_8;
    }
    else
    {
LABEL_6:
      v6 = *v2;
      *v2 = 0;
      if (!v6)
      {
LABEL_8:
        MEMORY[0x227684CE8](v2, 0x10A0C40907A4D07);
        return a1;
      }
    }
    ((void (*)(void))v2[1])();
    goto LABEL_8;
  }
  return a1;
}

uint64_t *sub_223F62C00(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      (*(void (**)(void))(v2 + 16))();
    MEMORY[0x227684CE8](v2, 0x10A0C40B7BF8CC9);
  }
  return a1;
}

uint64_t sub_223F62C5C(uint64_t a1, unsigned int *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _QWORD *v17;
  _OWORD *v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  const char *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  const char *v33;
  unsigned __int8 v34;
  uint64_t v35;
  unsigned __int8 v36;
  const char *v37;
  size_t v38;
  _BYTE *v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  size_t v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  size_t v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  const char *v99;
  size_t v100;
  _BYTE *v101;
  const char *v102;
  unint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  size_t v111;
  void *v112;
  _QWORD *v113;
  unint64_t *v114;
  size_t v115;
  uint64_t v116;
  char v117;
  char *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  void *v156;
  const char *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  const char *v165;
  uint64_t v166;
  const char *v167;
  size_t v168;
  unsigned __int8 v169;
  unsigned __int8 v170;
  const char *v171;
  size_t v172;
  _BYTE *v173;
  unint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  size_t v182;
  void *v183;
  _QWORD *v184;
  unint64_t *v185;
  size_t v186;
  uint64_t v187;
  char v188;
  char *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  void *v227;
  const char *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  unsigned __int8 v233;
  const char *v234;
  size_t v235;
  _BYTE *v236;
  unint64_t v237;
  const char *v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  NSObject *v245;
  size_t v246;
  std::__shared_weak_count_vtbl *v247;
  std::__shared_weak_count *v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  uint64_t v257;
  __int128 v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t v283;
  __n128 v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  const char *v293;
  int v294;
  int v295;
  uint64_t v296;
  int v297;
  int v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t *v302;
  void *__src;
  const char *__srca;
  __int128 v305;
  uint64_t (*v306)(uint64_t);
  __int128 v307;
  int v308;
  uint64_t *v309;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v311;
  int v312;
  const char *v313;
  int v314;
  const char *v315;
  uint64_t v316;
  std::__shared_weak_count *v317;
  uint64_t v318;
  uint64_t __dst;
  _BYTE v320[15];
  char v321;
  _BYTE __p[24];
  __int128 v323;
  void *v324;
  size_t v325;
  unint64_t v326;
  char v327;
  std::__shared_weak_count *v328;
  _QWORD v329[5];

  v7 = a1;
  v329[2] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 3);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 16) = v8;
  v11 = *(_QWORD *)(a2 + 1);
  v12 = operator new();
  sub_223F5B458(v12, v11);
  *(_QWORD *)(v7 + 72) = v12;
  v13 = operator new();
  sub_223F53124(v13, 5);
  *(_QWORD *)(v7 + 80) = v13;
  v14 = operator new();
  *(_WORD *)v14 = 256;
  *(_QWORD *)(v14 + 2) = 0;
  *(_WORD *)(v14 + 10) = 1;
  *(_OWORD *)(v14 + 12) = xmmword_224691810;
  *(_QWORD *)(v7 + 88) = v14;
  v15 = (_QWORD *)operator new();
  v16 = (_OWORD *)operator new();
  v16[1] = 0u;
  v16[2] = 0u;
  *v16 = 0u;
  *v15 = v16;
  v15[1] = sub_223F4AA60;
  *(_QWORD *)(v7 + 96) = v15;
  v17 = (_QWORD *)operator new();
  v18 = (_OWORD *)operator new();
  v18[18] = 0u;
  v18[19] = 0u;
  v18[16] = 0u;
  v18[17] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  *v18 = 0u;
  v18[1] = 0u;
  sub_223EF3378((uint64_t)v18);
  *v17 = v18;
  v17[1] = sub_223EF34C8;
  *(_QWORD *)(v7 + 104) = v17;
  if (a4)
  {
    kdebug_trace();
    sub_223F6598C(__p);
    if (**(int **)(*(_QWORD *)__p + 56) <= 1)
    {
      v19 = atomic_load((unsigned __int8 *)&qword_2540CE2A8);
      if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE2A8))
      {
        qword_2540CE2A0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Deserialize");
        __cxa_guard_release(&qword_2540CE2A8);
      }
      v20 = qword_2540CE2A0;
      *(_BYTE *)(qword_2540CE2A0 + 16) = 0;
      *(_QWORD *)(v20 + 8) = 0;
      *(std::chrono::steady_clock::time_point *)v20 = std::chrono::steady_clock::now();
      *(_BYTE *)(v20 + 16) = 1;
    }
    *(_QWORD *)__p = *a2 | 0x3D4CCCCD00000000;
    sub_223F96454((uint64_t **)a3, (int *)__p, &v305);
    sub_223F901C8((uint64_t)&v305, (char **)__p);
    kdebug_trace();
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    sub_223F6598C(__p);
    if (**(int **)(*(_QWORD *)__p + 56) <= 1)
    {
      v21 = atomic_load((unsigned __int8 *)&qword_2540CE2B8);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE2B8))
      {
        qword_2540CE2B0 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Deserialize");
        __cxa_guard_release(&qword_2540CE2B8);
      }
      v22 = qword_2540CE2B0;
      if (*(_BYTE *)(qword_2540CE2B0 + 16))
      {
        *(_QWORD *)(v22 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v22;
        *(_BYTE *)(v22 + 16) = 0;
      }
    }
    sub_223F65690(&v318);
    if (**(int **)(v318 + 56) > 3)
      goto LABEL_106;
    v23 = *(unsigned __int8 *)(v318 + 72);
    v24 = sub_22322F254(v318, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && !v24)
      goto LABEL_106;
    v309 = &v318;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v311 = std::chrono::system_clock::now().__d_.__rep_;
    v312 = 3;
    v313 = "unknown file";
    v314 = 124;
    v316 = 0;
    v317 = 0;
    v315 = "unknown function";
    v26 = *v309;
    v296 = *v309;
    if (*(char *)(*v309 + 39) < 0)
    {
      v28 = *(const char **)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
    }
    else
    {
      v27 = *(unsigned __int8 *)(*v309 + 39);
      v28 = (const char *)(*v309 + 16);
    }
    v299 = *v309 + 16;
    v300 = (_QWORD *)a3;
    v35 = *(_QWORD *)(a3 + 8);
    v302 = *(uint64_t **)a3;
    v36 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_255788F58))
    {
      sub_224568628((uint64_t)__p);
      sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
      if ((_BYTE)v323 && (__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
      __cxa_guard_release(&qword_255788F58);
    }
    if (byte_255788F57 >= 0)
      v37 = (const char *)&xmmword_255788F40;
    else
      v37 = (const char *)xmmword_255788F40;
    if (byte_255788F57 >= 0)
      v38 = byte_255788F57;
    else
      v38 = *((_QWORD *)&xmmword_255788F40 + 1);
    __srca = v28;
    *(_QWORD *)__p = os_log_create(v37, v28);
    v39 = &__p[8];
    if (v38 > 0x7FFFFFFFFFFFFFF7)
      sub_22316DBC0();
    v40 = v23;
    if (v38 >= 0x17)
    {
      v41 = v25;
      v42 = v40;
      v43 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v43 = v38 | 7;
      v44 = v43 + 1;
      v39 = operator new(v43 + 1);
      *(_QWORD *)&__p[16] = v38;
      *(_QWORD *)&v323 = v44 | 0x8000000000000000;
      *(_QWORD *)&__p[8] = v39;
      v40 = v42;
      v25 = v41;
    }
    else
    {
      BYTE7(v323) = v38;
      if (!v38)
      {
LABEL_38:
        v39[v38] = 0;
        BYTE8(v323) = 1;
        v45 = &v324;
        if (v27 > 0x7FFFFFFFFFFFFFF7)
          sub_22316DBC0();
        if (v27 >= 0x17)
        {
          v46 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v27 | 7) != 0x17)
            v46 = v27 | 7;
          v47 = v46 + 1;
          v45 = operator new(v46 + 1);
          v325 = v27;
          v326 = v47 | 0x8000000000000000;
          v324 = v45;
        }
        else
        {
          HIBYTE(v326) = v27;
          if (!v27)
            goto LABEL_46;
        }
        memmove(v45, __srca, v27);
LABEL_46:
        *((_BYTE *)v45 + v27) = 0;
        v327 = 1;
        v48 = *(NSObject **)__p;
        if (SHIBYTE(v326) < 0)
          operator delete(v324);
        if (BYTE8(v323) && SBYTE7(v323) < 0)
          operator delete(*(void **)&__p[8]);
        if (*(_QWORD *)__p)
          os_release(*(void **)__p);
        if (v25 && *(_QWORD *)(v25 + 24))
        {
          v49 = _os_log_pack_size();
          v50 = (std::__shared_weak_count_vtbl *)operator new(v49, (std::align_val_t)8uLL);
          v51 = (std::__shared_weak_count *)operator new();
          v52 = v51;
          v51->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          v51->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
          v51->__shared_weak_owners_ = 0;
          v51[1].__vftable = v50;
          *(_QWORD *)__p = v50;
          *(_QWORD *)&__p[8] = v50;
          *(_QWORD *)&__p[16] = v51;
          do
            v54 = __ldxr(p_shared_owners);
          while (__stxr(v54 + 1, p_shared_owners));
          v323 = 0uLL;
          v324 = 0;
          do
            v55 = __ldaxr(p_shared_owners);
          while (__stlxr(v55 - 1, p_shared_owners));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v52);
          }
          v56 = *(_QWORD *)__p;
          v57 = _os_log_pack_fill();
          *(_DWORD *)v57 = 134217984;
          *(_QWORD *)(v57 + 4) = 0xEEEEEEEEEEEEEEEFLL * ((v35 - (uint64_t)v302) >> 3);
          v58 = operator new();
          v59 = *(unsigned __int8 *)(v296 + 39);
          v60 = *(_QWORD *)(v296 + 16);
          v61 = *(_QWORD *)(v296 + 24);
          v62 = v323;
          *(_OWORD *)(v58 + 8) = *(_OWORD *)&__p[8];
          if ((v59 & 0x80u) != 0)
            v59 = v61;
          else
            v60 = v299;
          *(_QWORD *)v58 = v56;
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = 0;
          *(_OWORD *)(v58 + 24) = v62;
          v323 = 0uLL;
          *(_QWORD *)(v58 + 40) = v60;
          *(_QWORD *)(v58 + 48) = v59;
          *(_BYTE *)(v58 + 56) = 1;
          v329[0] = 0;
          __dst = v58;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v25 + 24) + 40))(*(_QWORD *)(v25 + 24), &__dst);
          v63 = __dst;
          __dst = 0;
          if (v63)
          {
            v64 = *(std::__shared_weak_count **)(v63 + 32);
            if (v64)
            {
              v65 = (unint64_t *)&v64->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }
            v67 = *(std::__shared_weak_count **)(v63 + 16);
            if (v67)
            {
              v68 = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(v68);
              while (__stlxr(v69 - 1, v68));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            MEMORY[0x227684CE8](v63, 0x10F0C40B62ED6C6);
            v70 = v329[0];
            v329[0] = 0;
            if (v70)
            {
              v71 = *(std::__shared_weak_count **)(v70 + 32);
              if (v71)
              {
                v72 = (unint64_t *)&v71->__shared_owners_;
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - 1, v72));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                  std::__shared_weak_count::__release_weak(v71);
                }
              }
              v74 = *(std::__shared_weak_count **)(v70 + 16);
              if (v74)
              {
                v75 = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(v75);
                while (__stlxr(v76 - 1, v75));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              MEMORY[0x227684CE8](v70, 0x10F0C40B62ED6C6);
            }
          }
          v77 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
          if (*((_QWORD *)&v323 + 1))
          {
            v78 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v81 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
        }
        else
        {
          os_log_type_enabled(v48, OS_LOG_TYPE_INFO);
          *(_DWORD *)__p = 134217984;
          *(_QWORD *)&__p[4] = 0xEEEEEEEEEEEEEEEFLL * ((v35 - (uint64_t)v302) >> 3);
          v83 = (void *)_os_log_send_and_compose_impl();
          if (v83)
            free(v83);
        }
        if (v40)
        {
          sub_22322C138((uint64_t)&v309, "Plane tracker created from map %zu", 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v300[1] - *v300) >> 3));
          sub_223182C08((uint64_t)&v309);
        }
        sub_223182C08((uint64_t)&v309);
        v84 = v317;
        if (v317)
        {
          v85 = (unint64_t *)&v317->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
LABEL_106:
        sub_223F90494((uint64_t)&v305);
        goto LABEL_107;
      }
    }
    memmove(v39, v37, v38);
    goto LABEL_38;
  }
  sub_223F65690(&v318);
  if (**(int **)(v318 + 56) <= 3)
  {
    v29 = *(unsigned __int8 *)(v318 + 72);
    v30 = sub_22322F254(v318, "OSLogSurrogateAppender", 1, 0);
    v31 = v30;
    if (v29 || v30)
    {
      v309 = &v318;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v311 = std::chrono::system_clock::now().__d_.__rep_;
      v312 = 3;
      v313 = "unknown file";
      v314 = 128;
      v316 = 0;
      v317 = 0;
      v315 = "unknown function";
      v301 = v318;
      if (*(char *)(v318 + 39) < 0)
      {
        v33 = *(const char **)(v318 + 16);
        v32 = *(_QWORD *)(v318 + 24);
        __src = (void *)(v318 + 16);
        v233 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v233 & 1) != 0)
          goto LABEL_328;
      }
      else
      {
        v32 = *(unsigned __int8 *)(v318 + 39);
        v33 = (const char *)(v318 + 16);
        __src = (void *)(v318 + 16);
        v34 = atomic_load((unsigned __int8 *)&qword_255788F58);
        if ((v34 & 1) != 0)
          goto LABEL_328;
      }
      if (__cxa_guard_acquire(&qword_255788F58))
      {
        sub_224568628((uint64_t)__p);
        sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
        if ((_BYTE)v323 && (__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
        __cxa_guard_release(&qword_255788F58);
      }
LABEL_328:
      if (byte_255788F57 >= 0)
        v234 = (const char *)&xmmword_255788F40;
      else
        v234 = (const char *)xmmword_255788F40;
      if (byte_255788F57 >= 0)
        v235 = byte_255788F57;
      else
        v235 = *((_QWORD *)&xmmword_255788F40 + 1);
      *(_QWORD *)__p = os_log_create(v234, v33);
      v236 = &__p[8];
      if (v235 > 0x7FFFFFFFFFFFFFF7)
        sub_22316DBC0();
      if (v235 >= 0x17)
      {
        v237 = v31;
        v238 = v33;
        v239 = v29;
        v240 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v235 | 7) != 0x17)
          v240 = v235 | 7;
        v241 = v240 + 1;
        v236 = operator new(v240 + 1);
        *(_QWORD *)&__p[16] = v235;
        *(_QWORD *)&v323 = v241 | 0x8000000000000000;
        *(_QWORD *)&__p[8] = v236;
        v29 = v239;
        v33 = v238;
        v31 = v237;
      }
      else
      {
        BYTE7(v323) = v235;
        if (!v235)
        {
LABEL_342:
          v236[v235] = 0;
          BYTE8(v323) = 1;
          v242 = &v324;
          if (v32 > 0x7FFFFFFFFFFFFFF7)
            sub_22316DBC0();
          if (v32 >= 0x17)
          {
            v243 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17)
              v243 = v32 | 7;
            v244 = v243 + 1;
            v242 = operator new(v243 + 1);
            v325 = v32;
            v326 = v244 | 0x8000000000000000;
            v324 = v242;
          }
          else
          {
            HIBYTE(v326) = v32;
            if (!v32)
              goto LABEL_350;
          }
          memmove(v242, v33, v32);
LABEL_350:
          *((_BYTE *)v242 + v32) = 0;
          v327 = 1;
          v245 = *(NSObject **)__p;
          if (SHIBYTE(v326) < 0)
            operator delete(v324);
          if (BYTE8(v323) && SBYTE7(v323) < 0)
            operator delete(*(void **)&__p[8]);
          if (*(_QWORD *)__p)
            os_release(*(void **)__p);
          if (v31 && *(_QWORD *)(v31 + 24))
          {
            v246 = _os_log_pack_size();
            v247 = (std::__shared_weak_count_vtbl *)operator new(v246, (std::align_val_t)8uLL);
            v248 = (std::__shared_weak_count *)operator new();
            v249 = v248;
            v248->__shared_owners_ = 0;
            v250 = (unint64_t *)&v248->__shared_owners_;
            v248->__vftable = (std::__shared_weak_count_vtbl *)&off_24EC1F7F0;
            v248->__shared_weak_owners_ = 0;
            v248[1].__vftable = v247;
            *(_QWORD *)__p = v247;
            *(_QWORD *)&__p[8] = v247;
            *(_QWORD *)&__p[16] = v248;
            do
              v251 = __ldxr(v250);
            while (__stxr(v251 + 1, v250));
            v323 = 0uLL;
            v324 = 0;
            do
              v252 = __ldaxr(v250);
            while (__stlxr(v252 - 1, v250));
            if (!v252)
            {
              ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
              std::__shared_weak_count::__release_weak(v249);
            }
            v253 = *(_QWORD *)__p;
            *(_WORD *)_os_log_pack_fill() = 0;
            v254 = operator new();
            v255 = *(unsigned __int8 *)(v301 + 39);
            v256 = *(void **)(v301 + 16);
            v257 = *(_QWORD *)(v301 + 24);
            v258 = v323;
            *(_OWORD *)(v254 + 8) = *(_OWORD *)&__p[8];
            if ((v255 & 0x80u) != 0)
              v255 = v257;
            else
              v256 = __src;
            *(_QWORD *)v254 = v253;
            *(_QWORD *)&__p[8] = 0;
            *(_QWORD *)&__p[16] = 0;
            *(_OWORD *)(v254 + 24) = v258;
            v323 = 0uLL;
            *(_QWORD *)(v254 + 40) = v256;
            *(_QWORD *)(v254 + 48) = v255;
            *(_BYTE *)(v254 + 56) = 1;
            v329[0] = 0;
            __dst = v254;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &__dst);
            v259 = __dst;
            __dst = 0;
            if (v259)
            {
              v260 = *(std::__shared_weak_count **)(v259 + 32);
              if (v260)
              {
                v261 = (unint64_t *)&v260->__shared_owners_;
                do
                  v262 = __ldaxr(v261);
                while (__stlxr(v262 - 1, v261));
                if (!v262)
                {
                  ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                  std::__shared_weak_count::__release_weak(v260);
                }
              }
              v263 = *(std::__shared_weak_count **)(v259 + 16);
              if (v263)
              {
                v264 = (unint64_t *)&v263->__shared_owners_;
                do
                  v265 = __ldaxr(v264);
                while (__stlxr(v265 - 1, v264));
                if (!v265)
                {
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                }
              }
              MEMORY[0x227684CE8](v259, 0x10F0C40B62ED6C6);
              v266 = v329[0];
              v329[0] = 0;
              if (v266)
              {
                v267 = *(std::__shared_weak_count **)(v266 + 32);
                if (v267)
                {
                  v268 = (unint64_t *)&v267->__shared_owners_;
                  do
                    v269 = __ldaxr(v268);
                  while (__stlxr(v269 - 1, v268));
                  if (!v269)
                  {
                    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                    std::__shared_weak_count::__release_weak(v267);
                  }
                }
                v270 = *(std::__shared_weak_count **)(v266 + 16);
                if (v270)
                {
                  v271 = (unint64_t *)&v270->__shared_owners_;
                  do
                    v272 = __ldaxr(v271);
                  while (__stlxr(v272 - 1, v271));
                  if (!v272)
                  {
                    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                    std::__shared_weak_count::__release_weak(v270);
                  }
                }
                MEMORY[0x227684CE8](v266, 0x10F0C40B62ED6C6);
              }
            }
            v273 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
            if (*((_QWORD *)&v323 + 1))
            {
              v274 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
              do
                v275 = __ldaxr(v274);
              while (__stlxr(v275 - 1, v274));
              if (!v275)
              {
                ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                std::__shared_weak_count::__release_weak(v273);
              }
            }
            v276 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v277 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v278 = __ldaxr(v277);
              while (__stlxr(v278 - 1, v277));
              if (!v278)
              {
                ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                std::__shared_weak_count::__release_weak(v276);
              }
            }
          }
          else
          {
            os_log_type_enabled(v245, OS_LOG_TYPE_INFO);
            *(_WORD *)__p = 0;
            v279 = (void *)_os_log_send_and_compose_impl();
            if (v279)
              free(v279);
          }
          if (v29)
          {
            sub_22322C138((uint64_t)&v309, "Plane tracker created from scratch - no map");
            sub_223182C08((uint64_t)&v309);
          }
          sub_223182C08((uint64_t)&v309);
          v280 = v317;
          if (v317)
          {
            v281 = (unint64_t *)&v317->__shared_owners_;
            do
              v282 = __ldaxr(v281);
            while (__stlxr(v282 - 1, v281));
            if (!v282)
            {
              ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
              std::__shared_weak_count::__release_weak(v280);
            }
          }
          goto LABEL_410;
        }
      }
      memmove(v236, v234, v235);
      goto LABEL_342;
    }
  }
LABEL_410:
  if (*((_BYTE *)a2 + 14))
  {
    LODWORD(v309) = 0;
    sub_223524FBC((int *)&v309, (uint64_t)__p);
    *(_QWORD *)&v305 = *a2 | 0x3D4CCCCD00000000;
    v283 = operator new();
    *(_QWORD *)(v283 + 16) = 0;
    *(_QWORD *)(v283 + 8) = 0;
    *(_QWORD *)v283 = v283 + 8;
    *(_BYTE *)(v283 + 24) = 0;
    *(_WORD *)(v283 + 40) = 768;
    *((_QWORD *)&v305 + 1) = v283;
    v306 = sub_223F94EA4;
    v284.n128_f64[0] = sub_223524E3C();
    v308 = 0;
    v285 = v328;
    if (v328)
    {
      v286 = (unint64_t *)&v328->__shared_owners_;
      do
        v287 = __ldaxr(v286);
      while (__stlxr(v287 - 1, v286));
      if (!v287)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v285->__on_zero_shared)(v285, v284);
        std::__shared_weak_count::__release_weak(v285);
      }
    }
  }
  else
  {
    *(_QWORD *)&v305 = *a2 | 0x3D4CCCCD00000000;
    v288 = operator new();
    *(_QWORD *)(v288 + 16) = 0;
    *(_QWORD *)(v288 + 8) = 0;
    *(_QWORD *)v288 = v288 + 8;
    *(_BYTE *)(v288 + 24) = 0;
    *(_WORD *)(v288 + 40) = 768;
    *((_QWORD *)&v305 + 1) = v288;
    v306 = sub_223F94EA4;
    sub_2232D3688();
    v308 = 0;
  }
LABEL_107:
  v87 = operator new();
  *(_OWORD *)v87 = v305;
  *(_QWORD *)(v87 + 16) = v306;
  *(_OWORD *)(v87 + 24) = v307;
  *(_DWORD *)(v87 + 48) = v308;
  *(_QWORD *)(v7 + 112) = v87;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_DWORD *)(v7 + 152) = 1065353216;
  *(_QWORD *)(v7 + 168) = 0;
  *(_QWORD *)(v7 + 160) = v7 + 168;
  *(_QWORD *)(v7 + 176) = 0;
  v88 = operator new();
  *(_OWORD *)(v88 + 32) = 0u;
  *(_OWORD *)(v88 + 48) = 0u;
  *(_OWORD *)(v88 + 96) = 0u;
  *(_OWORD *)(v88 + 112) = 0u;
  *(_OWORD *)(v88 + 128) = 0u;
  *(_OWORD *)v88 = xmmword_224691A30;
  *(_OWORD *)(v88 + 16) = 0u;
  *(_DWORD *)(v88 + 16) = 1080033280;
  *(_OWORD *)(v88 + 24) = 0u;
  *(_OWORD *)(v88 + 40) = 0u;
  *(_DWORD *)(v88 + 56) = 1065353216;
  *(_OWORD *)(v88 + 64) = 0u;
  *(_OWORD *)(v88 + 80) = 0u;
  *(_DWORD *)(v88 + 96) = 1065353216;
  *(_OWORD *)(v88 + 104) = 0u;
  *(_OWORD *)(v88 + 120) = 0u;
  *(_DWORD *)(v88 + 136) = 1065353216;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 184) = v88;
  if (*((_BYTE *)a2 + 15))
  {
    v89 = operator new();
    bzero((void *)v89, 0x228uLL);
    *(_OWORD *)(v89 + 168) = xmmword_224691A40;
    *(_OWORD *)(v89 + 184) = unk_224691A50;
    *(_OWORD *)(v89 + 200) = xmmword_224691A60;
    *(_OWORD *)(v89 + 216) = unk_224691A70;
  }
  else
  {
    v89 = 0;
  }
  *(_QWORD *)(v7 + 200) = v89;
  sub_223F65690(&v318);
  if (**(int **)(v318 + 56) > 2)
    goto LABEL_217;
  v90 = *(unsigned __int8 *)(v318 + 72);
  v91 = sub_22322F254(v318, "OSLogSurrogateAppender", 1, 0);
  v92 = v91;
  if (!v90 && !v91)
    goto LABEL_217;
  v309 = &v318;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v311 = std::chrono::system_clock::now().__d_.__rep_;
  v312 = 2;
  v313 = "unknown file";
  v314 = 162;
  v316 = 0;
  v317 = 0;
  v315 = "unknown function";
  v294 = *(unsigned __int8 *)(v7 + 12);
  if (*(_BYTE *)(v7 + 12))
    v93 = "enabled";
  else
    v93 = "disabled";
  v94 = *v309;
  v95 = (const char *)(*v309 + 16);
  v290 = *v309;
  v292 = v95;
  if (*(char *)(*v309 + 39) < 0)
  {
    v95 = *(const char **)(v94 + 16);
    v96 = *(_QWORD *)(v94 + 24);
    v297 = v90;
    v98 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v98 & 1) != 0)
      goto LABEL_120;
  }
  else
  {
    v96 = *(unsigned __int8 *)(*v309 + 39);
    v297 = v90;
    v97 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v97 & 1) != 0)
      goto LABEL_120;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)__p);
    sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
    if ((_BYTE)v323 && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_120:
  if (byte_255788F57 >= 0)
    v99 = (const char *)&xmmword_255788F40;
  else
    v99 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v100 = byte_255788F57;
  else
    v100 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)__p = os_log_create(v99, v95);
  v101 = &__p[8];
  if (v100 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v100 >= 0x17)
  {
    v102 = v95;
    v103 = v92;
    v104 = v93;
    v105 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17)
      v105 = v100 | 7;
    v106 = v105 + 1;
    v101 = operator new(v105 + 1);
    *(_QWORD *)&__p[16] = v100;
    *(_QWORD *)&v323 = v106 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v101;
    v93 = v104;
    v92 = v103;
    v95 = v102;
    goto LABEL_133;
  }
  BYTE7(v323) = v100;
  if (v100)
LABEL_133:
    memmove(v101, v99, v100);
  v101[v100] = 0;
  BYTE8(v323) = 1;
  v107 = &v324;
  if (v96 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v96 >= 0x17)
  {
    v109 = (v96 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v96 | 7) != 0x17)
      v109 = v96 | 7;
    v110 = v109 + 1;
    v107 = operator new(v109 + 1);
    v325 = v96;
    v326 = v110 | 0x8000000000000000;
    v324 = v107;
  }
  else
  {
    HIBYTE(v326) = v96;
    if (!v96)
    {
      LOBYTE(v324) = 0;
      v327 = 1;
      v108 = *(NSObject **)__p;
      if ((SHIBYTE(v326) & 0x80000000) == 0)
        goto LABEL_138;
      goto LABEL_144;
    }
  }
  memmove(v107, v95, v96);
  *((_BYTE *)v107 + v96) = 0;
  v327 = 1;
  v108 = *(NSObject **)__p;
  if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
LABEL_138:
    if (!BYTE8(v323))
      goto LABEL_147;
LABEL_145:
    if (SBYTE7(v323) < 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_147;
  }
LABEL_144:
  operator delete(v324);
  if (BYTE8(v323))
    goto LABEL_145;
LABEL_147:
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v92 && *(_QWORD *)(v92 + 24))
  {
    v111 = _os_log_pack_size();
    v112 = operator new(v111, (std::align_val_t)8uLL);
    v113 = (_QWORD *)operator new();
    v113[1] = 0;
    v114 = v113 + 1;
    *v113 = &off_24EC1F7F0;
    v113[2] = 0;
    v113[3] = v112;
    *(_QWORD *)&v305 = v112;
    *((_QWORD *)&v305 + 1) = v112;
    v307 = 0uLL;
    v306 = (uint64_t (*)(uint64_t))v113;
    if (v294)
      v115 = 7;
    else
      v115 = 8;
    v321 = v115;
    memcpy(&__dst, v93, v115);
    v320[v115 - 8] = 0;
    v116 = __dst;
    v329[0] = *(_QWORD *)v320;
    *(_QWORD *)((char *)v329 + 7) = *(_QWORD *)&v320[7];
    v117 = v321;
    v118 = (char *)operator new(0x38uLL);
    v119 = (std::__shared_weak_count *)v118;
    *((_QWORD *)v118 + 1) = 0;
    v120 = (unint64_t *)(v118 + 8);
    *((_QWORD *)v118 + 2) = 0;
    *(_QWORD *)v118 = &off_24EC1F9F8;
    *((_QWORD *)v118 + 3) = off_24EC1FA48;
    v121 = v329[0];
    *((_QWORD *)v118 + 4) = v116;
    *((_QWORD *)v118 + 5) = v121;
    *(_QWORD *)(v118 + 47) = *(_QWORD *)((char *)v329 + 7);
    v118[55] = v117;
    *(_QWORD *)&v307 = v118 + 24;
    *((_QWORD *)&v307 + 1) = v118;
    *(_QWORD *)__p = v112;
    *(_QWORD *)&__p[8] = v112;
    *(_QWORD *)&__p[16] = v113;
    do
      v122 = __ldxr(v114);
    while (__stxr(v122 + 1, v114));
    *(_QWORD *)&v323 = v118 + 24;
    *((_QWORD *)&v323 + 1) = v118;
    do
      v123 = __ldxr(v120);
    while (__stxr(v123 + 1, v120));
    v324 = v118 + 24;
    do
      v124 = __ldaxr(v120);
    while (__stlxr(v124 - 1, v120));
    if (!v124)
    {
      (*(void (**)(char *))(*(_QWORD *)v118 + 16))(v118);
      std::__shared_weak_count::__release_weak(v119);
    }
    v125 = (std::__shared_weak_count *)v306;
    if (v306)
    {
      v126 = (unint64_t *)((char *)v306 + 8);
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    v128 = *(_QWORD *)__p;
    if (*((char *)v324 + 31) >= 0)
      v129 = (char *)v324 + 8;
    else
      v129 = (char *)*((_QWORD *)v324 + 1);
    v130 = _os_log_pack_fill();
    *(_DWORD *)v130 = 136315138;
    *(_QWORD *)(v130 + 4) = v129;
    v131 = operator new();
    v132 = *(unsigned __int8 *)(v290 + 39);
    v133 = *(const char **)(v290 + 16);
    v134 = *(_QWORD *)(v290 + 24);
    v135 = v323;
    *(_OWORD *)(v131 + 8) = *(_OWORD *)&__p[8];
    if ((v132 & 0x80u) != 0)
      v132 = v134;
    else
      v133 = v292;
    *(_QWORD *)v131 = v128;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v131 + 24) = v135;
    v323 = 0uLL;
    *(_QWORD *)(v131 + 40) = v133;
    *(_QWORD *)(v131 + 48) = v132;
    *(_BYTE *)(v131 + 56) = 2;
    __dst = 0;
    *(_QWORD *)&v305 = v131;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v92 + 24) + 40))(*(_QWORD *)(v92 + 24), &v305);
    v136 = v305;
    *(_QWORD *)&v305 = 0;
    if (v136)
    {
      v137 = *(std::__shared_weak_count **)(v136 + 32);
      if (v137)
      {
        v138 = (unint64_t *)&v137->__shared_owners_;
        do
          v139 = __ldaxr(v138);
        while (__stlxr(v139 - 1, v138));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
        }
      }
      v140 = *(std::__shared_weak_count **)(v136 + 16);
      if (v140)
      {
        v141 = (unint64_t *)&v140->__shared_owners_;
        do
          v142 = __ldaxr(v141);
        while (__stlxr(v142 - 1, v141));
        if (!v142)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      MEMORY[0x227684CE8](v136, 0x10F0C40B62ED6C6);
      v143 = __dst;
      __dst = 0;
      if (v143)
      {
        v144 = *(std::__shared_weak_count **)(v143 + 32);
        if (v144)
        {
          v145 = (unint64_t *)&v144->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        v147 = *(std::__shared_weak_count **)(v143 + 16);
        if (v147)
        {
          v148 = (unint64_t *)&v147->__shared_owners_;
          do
            v149 = __ldaxr(v148);
          while (__stlxr(v149 - 1, v148));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
            std::__shared_weak_count::__release_weak(v147);
          }
        }
        MEMORY[0x227684CE8](v143, 0x10F0C40B62ED6C6);
      }
    }
    v150 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
    if (*((_QWORD *)&v323 + 1))
    {
      v151 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    v153 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v154 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
  }
  else
  {
    os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v93;
    v156 = (void *)_os_log_send_and_compose_impl();
    if (v156)
      free(v156);
  }
  if (v297)
  {
    v157 = "enabled";
    if (!*(_BYTE *)(v7 + 12))
      v157 = "disabled";
    sub_22322C138((uint64_t)&v309, "ML Segment based pop-up plane detector: %s", v157);
    sub_223182C08((uint64_t)&v309);
  }
  sub_223182C08((uint64_t)&v309);
  v158 = v317;
  if (v317)
  {
    v159 = (unint64_t *)&v317->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
LABEL_217:
  sub_223F65690(&v318);
  if (**(int **)(v318 + 56) > 2)
    return v7;
  v161 = *(unsigned __int8 *)(v318 + 72);
  v162 = sub_22322F254(v318, "OSLogSurrogateAppender", 1, 0);
  v163 = v162;
  if (!v161 && v162 == 0)
    return v7;
  v309 = &v318;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v311 = std::chrono::system_clock::now().__d_.__rep_;
  v312 = 2;
  v313 = "unknown file";
  v314 = 164;
  v316 = 0;
  v317 = 0;
  v315 = "unknown function";
  v295 = *(unsigned __int8 *)(v7 + 13);
  if (*(_BYTE *)(v7 + 13))
    v165 = "enabled";
  else
    v165 = "disabled";
  v166 = *v309;
  v167 = (const char *)(*v309 + 16);
  v291 = *v309;
  v293 = v167;
  if (*(char *)(*v309 + 39) < 0)
  {
    v167 = *(const char **)(v166 + 16);
    v168 = *(_QWORD *)(v166 + 24);
    v298 = v161;
    v170 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v170 & 1) != 0)
      goto LABEL_229;
  }
  else
  {
    v168 = *(unsigned __int8 *)(*v309 + 39);
    v298 = v161;
    v169 = atomic_load((unsigned __int8 *)&qword_255788F58);
    if ((v169 & 1) != 0)
      goto LABEL_229;
  }
  if (__cxa_guard_acquire(&qword_255788F58))
  {
    sub_224568628((uint64_t)__p);
    sub_223199C58("com.apple.cv3d", (unint64_t)__p, &xmmword_255788F40);
    if ((_BYTE)v323 && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_255788F40, &dword_22314D000);
    __cxa_guard_release(&qword_255788F58);
  }
LABEL_229:
  if (byte_255788F57 >= 0)
    v171 = (const char *)&xmmword_255788F40;
  else
    v171 = (const char *)xmmword_255788F40;
  if (byte_255788F57 >= 0)
    v172 = byte_255788F57;
  else
    v172 = *((_QWORD *)&xmmword_255788F40 + 1);
  *(_QWORD *)__p = os_log_create(v171, v167);
  v173 = &__p[8];
  if (v172 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v172 >= 0x17)
  {
    v289 = v7;
    v174 = v163;
    v175 = v165;
    v176 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v172 | 7) != 0x17)
      v176 = v172 | 7;
    v177 = v176 + 1;
    v173 = operator new(v176 + 1);
    *(_QWORD *)&__p[16] = v172;
    *(_QWORD *)&v323 = v177 | 0x8000000000000000;
    *(_QWORD *)&__p[8] = v173;
    v165 = v175;
    v163 = v174;
    v7 = v289;
    goto LABEL_242;
  }
  BYTE7(v323) = v172;
  if (v172)
LABEL_242:
    memmove(v173, v171, v172);
  v173[v172] = 0;
  BYTE8(v323) = 1;
  v178 = &v324;
  if (v168 > 0x7FFFFFFFFFFFFFF7)
    sub_22316DBC0();
  if (v168 >= 0x17)
  {
    v180 = (v168 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v168 | 7) != 0x17)
      v180 = v168 | 7;
    v181 = v180 + 1;
    v178 = operator new(v180 + 1);
    v325 = v168;
    v326 = v181 | 0x8000000000000000;
    v324 = v178;
  }
  else
  {
    HIBYTE(v326) = v168;
    if (!v168)
    {
      LOBYTE(v324) = 0;
      v327 = 1;
      v179 = *(NSObject **)__p;
      if ((SHIBYTE(v326) & 0x80000000) == 0)
        goto LABEL_247;
      goto LABEL_253;
    }
  }
  memmove(v178, v167, v168);
  *((_BYTE *)v178 + v168) = 0;
  v327 = 1;
  v179 = *(NSObject **)__p;
  if ((SHIBYTE(v326) & 0x80000000) == 0)
  {
LABEL_247:
    if (!BYTE8(v323))
      goto LABEL_256;
LABEL_254:
    if (SBYTE7(v323) < 0)
      operator delete(*(void **)&__p[8]);
    goto LABEL_256;
  }
LABEL_253:
  operator delete(v324);
  if (BYTE8(v323))
    goto LABEL_254;
LABEL_256:
  if (*(_QWORD *)__p)
    os_release(*(void **)__p);
  if (v163 && *(_QWORD *)(v163 + 24))
  {
    v182 = _os_log_pack_size();
    v183 = operator new(v182, (std::align_val_t)8uLL);
    v184 = (_QWORD *)operator new();
    v184[1] = 0;
    v185 = v184 + 1;
    *v184 = &off_24EC1F7F0;
    v184[2] = 0;
    v184[3] = v183;
    *(_QWORD *)&v305 = v183;
    *((_QWORD *)&v305 + 1) = v183;
    v307 = 0uLL;
    v306 = (uint64_t (*)(uint64_t))v184;
    if (v295)
      v186 = 7;
    else
      v186 = 8;
    v321 = v186;
    memcpy(&__dst, v165, v186);
    v320[v186 - 8] = 0;
    v187 = __dst;
    v329[0] = *(_QWORD *)v320;
    *(_QWORD *)((char *)v329 + 7) = *(_QWORD *)&v320[7];
    v188 = v321;
    v189 = (char *)operator new(0x38uLL);
    v190 = (std::__shared_weak_count *)v189;
    *((_QWORD *)v189 + 1) = 0;
    v191 = (unint64_t *)(v189 + 8);
    *((_QWORD *)v189 + 2) = 0;
    *(_QWORD *)v189 = &off_24EC1F9F8;
    *((_QWORD *)v189 + 3) = off_24EC1FA48;
    v192 = v329[0];
    *((_QWORD *)v189 + 4) = v187;
    *((_QWORD *)v189 + 5) = v192;
    *(_QWORD *)(v189 + 47) = *(_QWORD *)((char *)v329 + 7);
    v189[55] = v188;
    *(_QWORD *)&v307 = v189 + 24;
    *((_QWORD *)&v307 + 1) = v189;
    *(_QWORD *)__p = v183;
    *(_QWORD *)&__p[8] = v183;
    *(_QWORD *)&__p[16] = v184;
    do
      v193 = __ldxr(v185);
    while (__stxr(v193 + 1, v185));
    *(_QWORD *)&v323 = v189 + 24;
    *((_QWORD *)&v323 + 1) = v189;
    do
      v194 = __ldxr(v191);
    while (__stxr(v194 + 1, v191));
    v324 = v189 + 24;
    do
      v195 = __ldaxr(v191);
    while (__stlxr(v195 - 1, v191));
    if (!v195)
    {
      (*(void (**)(char *))(*(_QWORD *)v189 + 16))(v189);
      std::__shared_weak_count::__release_weak(v190);
    }
    v196 = (std::__shared_weak_count *)v306;
    if (v306)
    {
      v197 = (unint64_t *)((char *)v306 + 8);
      do
        v198 = __ldaxr(v197);
      while (__stlxr(v198 - 1, v197));
      if (!v198)
      {
        ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
        std::__shared_weak_count::__release_weak(v196);
      }
    }
    v199 = *(_QWORD *)__p;
    if (*((char *)v324 + 31) >= 0)
      v200 = (char *)v324 + 8;
    else
      v200 = (char *)*((_QWORD *)v324 + 1);
    v201 = _os_log_pack_fill();
    *(_DWORD *)v201 = 136315138;
    *(_QWORD *)(v201 + 4) = v200;
    v202 = operator new();
    v203 = *(unsigned __int8 *)(v291 + 39);
    v204 = *(const char **)(v291 + 16);
    v205 = *(_QWORD *)(v291 + 24);
    v206 = v323;
    *(_OWORD *)(v202 + 8) = *(_OWORD *)&__p[8];
    if ((v203 & 0x80u) != 0)
      v203 = v205;
    else
      v204 = v293;
    *(_QWORD *)v202 = v199;
    *(_QWORD *)&__p[8] = 0;
    *(_QWORD *)&__p[16] = 0;
    *(_OWORD *)(v202 + 24) = v206;
    v323 = 0uLL;
    *(_QWORD *)(v202 + 40) = v204;
    *(_QWORD *)(v202 + 48) = v203;
    *(_BYTE *)(v202 + 56) = 2;
    __dst = 0;
    *(_QWORD *)&v305 = v202;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v163 + 24) + 40))(*(_QWORD *)(v163 + 24), &v305);
    v207 = v305;
    *(_QWORD *)&v305 = 0;
    if (v207)
    {
      v208 = *(std::__shared_weak_count **)(v207 + 32);
      if (v208)
      {
        v209 = (unint64_t *)&v208->__shared_owners_;
        do
          v210 = __ldaxr(v209);
        while (__stlxr(v210 - 1, v209));
        if (!v210)
        {
          ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
          std::__shared_weak_count::__release_weak(v208);
        }
      }
      v211 = *(std::__shared_weak_count **)(v207 + 16);
      if (v211)
      {
        v212 = (unint64_t *)&v211->__shared_owners_;
        do
          v213 = __ldaxr(v212);
        while (__stlxr(v213 - 1, v212));
        if (!v213)
        {
          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
          std::__shared_weak_count::__release_weak(v211);
        }
      }
      MEMORY[0x227684CE8](v207, 0x10F0C40B62ED6C6);
      v214 = __dst;
      __dst = 0;
      if (v214)
      {
        v215 = *(std::__shared_weak_count **)(v214 + 32);
        if (v215)
        {
          v216 = (unint64_t *)&v215->__shared_owners_;
          do
            v217 = __ldaxr(v216);
          while (__stlxr(v217 - 1, v216));
          if (!v217)
          {
            ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
            std::__shared_weak_count::__release_weak(v215);
          }
        }
        v218 = *(std::__shared_weak_count **)(v214 + 16);
        if (v218)
        {
          v219 = (unint64_t *)&v218->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
        MEMORY[0x227684CE8](v214, 0x10F0C40B62ED6C6);
      }
    }
    v221 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
    if (*((_QWORD *)&v323 + 1))
    {
      v222 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
      do
        v223 = __ldaxr(v222);
      while (__stlxr(v223 - 1, v222));
      if (!v223)
      {
        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
        std::__shared_weak_count::__release_weak(v221);
      }
    }
    v224 = *(std::__shared_weak_count **)&__p[16];
    if (*(_QWORD *)&__p[16])
    {
      v225 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
      do
        v226 = __ldaxr(v225);
      while (__stlxr(v226 - 1, v225));
      if (!v226)
      {
        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
        std::__shared_weak_count::__release_weak(v224);
      }
    }
  }
  else
  {
    os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v165;
    v227 = (void *)_os_log_send_and_compose_impl();
    if (v227)
      free(v227);
  }
  if (v298)
  {
    v228 = "enabled";
    if (!*(_BYTE *)(v7 + 13))
      v228 = "disabled";
    sub_22322C138((uint64_t)&v309, "ML Segment based plane detector: %s", v228);
    sub_223182C08((uint64_t)&v309);
  }
  sub_223182C08((uint64_t)&v309);
  v229 = v317;
  if (v317)
  {
    v230 = (unint64_t *)&v317->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
  return v7;
}

void sub_223F6501C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,void *__p,void *a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v52;

  if (a47 && a46 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&a28);
  sub_223F62A9C((uint64_t **)(a12 + 104));
  sub_223F62AF8((uint64_t **)(a12 + 96));
  v52 = *(_QWORD *)(a12 + 88);
  *(_QWORD *)(a12 + 88) = 0;
  if (v52)
    MEMORY[0x227684CE8](v52, 0x1000C4027586B93);
  sub_223F62B54((uint64_t **)(a12 + 80));
  sub_223F62C00((uint64_t *)(a12 + 72));
  _Unwind_Resume(a1);
}

uint64_t sub_223F65610(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      if (!v7)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
LABEL_6:
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_223F65690(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE2C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE2C8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.surfacedetection");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE2C0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE2C8);
  }
  *a1 = qword_2540CE2C0;
}

void sub_223F6572C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE2C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE2C8);
  _Unwind_Resume(a1);
}

void sub_223F65784(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  void *__p[3];

  sub_223F901C8(*(_QWORD *)(a1 + 112), (char **)__p);
  kdebug_trace();
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_223F6598C(__p);
  if (**((int **)__p[0] + 7) <= 1)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_2540CE248);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE248))
    {
      qword_2540CE240 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Serialize");
      __cxa_guard_release(&qword_2540CE248);
    }
    v5 = qword_2540CE240;
    *(_BYTE *)(qword_2540CE240 + 16) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v5 = std::chrono::steady_clock::now();
    *(_BYTE *)(v5 + 16) = 1;
  }
  sub_223F95024(*(_QWORD *)(a1 + 112), a2);
  kdebug_trace();
  sub_223F6598C(__p);
  if (**((int **)__p[0] + 7) <= 1)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_2540CE258);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE258))
    {
      qword_2540CE250 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Serialize");
      __cxa_guard_release(&qword_2540CE258);
    }
    v7 = qword_2540CE250;
    if (*(_BYTE *)(qword_2540CE250 + 16))
    {
      *(_QWORD *)(v7 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v7;
      *(_BYTE *)(v7 + 16) = 0;
    }
  }
}

void sub_223F65938(_Unwind_Exception *a1)
{
  void **v1;

  __cxa_guard_abort(&qword_2540CE258);
  sub_22333DD68(v1);
  _Unwind_Resume(a1);
}

void sub_223F65958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE248);
  _Unwind_Resume(a1);
}

void sub_223F65970(_Unwind_Exception *a1)
{
  void **v1;

  sub_22333DD68(v1);
  _Unwind_Resume(a1);
}

void sub_223F6598C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2540CE2D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE2D8))
  {
    sub_22455F53C(&v5);
    sub_223174DE4(__p, "cv3d.acv.trace");
    sub_2232300E0(&v5, (uint64_t)__p, &qword_2540CE2D0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_2540CE2D8);
  }
  *a1 = qword_2540CE2D0;
}

void sub_223F65A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2540CE2D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2540CE2D8);
  _Unwind_Resume(a1);
}

void sub_223F65A80(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void **a5, char a6)
{
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  _DWORD *v19;
  _OWORD *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  _DWORD *v36;
  __int128 v37;
  __int128 v38;
  int64_t v39;
  _DWORD *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  char v83[80];
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *__p;
  void *v89;
  uint64_t (**v90)();
  char v91;
  void *v92[3];
  void *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *__src;
  int v98[2];
  _QWORD v99[2];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  __int128 v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  void **v116;

  sub_223F66310(a3);
  v99[0] = &off_24EC64998;
  v99[1] = &off_24EC64920;
  v12 = *(_OWORD *)(a3 + 32);
  v100 = *(_OWORD *)(a3 + 16);
  v101 = v12;
  v102 = *(_OWORD *)(a3 + 48);
  v103 = *(_QWORD *)(a3 + 64);
  v104 = *(_DWORD *)(a3 + 72);
  v105 = *(_QWORD *)(a3 + 76);
  v106 = *(_OWORD *)(a3 + 88);
  v107 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a3 + 104)), *(float64x2_t *)(a3 + 120));
  v108 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a3 + 136)), *(float64x2_t *)(a3 + 152));
  v109 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a3 + 168)), *(float64x2_t *)(a3 + 184));
  v110 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a3 + 200)), *(float64x2_t *)(a3 + 216));
  v111 = a4;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  if (*(_BYTE *)(a3 + 280))
  {
    v13 = *(_QWORD *)(a3 + 232);
    *(_QWORD *)&v112 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 240) - v13) >> 2);
    *((_QWORD *)&v112 + 1) = v13;
    v14 = *(_QWORD *)(a3 + 256);
    *(_QWORD *)&v113 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a3 + 264) - v14) >> 2);
    *((_QWORD *)&v113 + 1) = v14;
  }
  if (*(_BYTE *)(a3 + 336))
  {
    v15 = *(_QWORD *)(a3 + 288);
    *(_QWORD *)&v114 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a3 + 296) - v15) >> 3);
    *((_QWORD *)&v114 + 1) = v15;
    v16 = *(_QWORD *)(a3 + 312);
    *(_QWORD *)&v115 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a3 + 320) - v16) >> 2);
    *((_QWORD *)&v115 + 1) = v16;
  }
  v17 = *(_QWORD *)(a2 + 72);
  v83[0] = 0;
  v91 = 0;
  sub_223F5B54C(v17, (uint64_t)v99, (uint64_t)v83, v92);
  if (v91)
  {
    v90 = &off_24EC64998;
    if (__p)
    {
      v89 = __p;
      operator delete(__p);
    }
    if (v87)
      free(v87);
    v87 = 0;
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    if (v84)
      free(v84);
    v84 = 0;
  }
  sub_223F70B60((uint64_t *)v92, a1);
  v18 = *(void ***)(a2 + 200);
  if (v18)
    sub_223EDBD98(v18, (uint64_t)v92);
  if (a6 && v92 != a5)
  {
    sub_22333045C(a5, (char *)v92[0], (char *)v92[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v92[1] - (char *)v92[0]) >> 2));
    v19 = a5[3];
    v20 = v93;
    v21 = v94;
    v22 = v94 - (_BYTE *)v93;
    v23 = 0x8E38E38E38E38E39 * ((v94 - (_BYTE *)v93) >> 2);
    v24 = (uint64_t)a5[5];
    if (0x8E38E38E38E38E39 * ((v24 - (uint64_t)v19) >> 2) >= v23)
    {
      v30 = a5[4];
      if (0x8E38E38E38E38E39 * ((v30 - (_BYTE *)v19) >> 2) < v23)
      {
        v31 = (char *)v93 + 4 * ((v30 - (_BYTE *)v19) >> 2);
        if (v30 != (_BYTE *)v19)
        {
          v32 = 4 * ((v30 - (_BYTE *)v19) >> 2);
          do
          {
            v33 = *v20;
            v34 = v20[1];
            v19[8] = *((_DWORD *)v20 + 8);
            *(_OWORD *)v19 = v33;
            *((_OWORD *)v19 + 1) = v34;
            v20 = (_OWORD *)((char *)v20 + 36);
            v19 += 9;
            v32 -= 36;
          }
          while (v32);
          v19 = a5[4];
        }
        v35 = (char *)v19;
        if (v31 != v21)
        {
          v35 = (char *)v19;
          v36 = v19;
          do
          {
            v37 = *(_OWORD *)v31;
            v38 = *((_OWORD *)v31 + 1);
            v36[8] = *((_DWORD *)v31 + 8);
            *(_OWORD *)v36 = v37;
            *((_OWORD *)v36 + 1) = v38;
            v31 += 36;
            v36 += 9;
            v35 += 36;
          }
          while (v31 != v21);
        }
        v39 = v35 - (char *)v19;
LABEL_44:
        v43 = (char *)v19 + v39;
        v45 = a5 + 6;
        v44 = (uint64_t)a5[6];
        a5[4] = v43;
        v46 = v95;
        v47 = v96;
        v48 = 0x6DB6DB6DB6DB6DB7 * ((v96 - v95) >> 3);
        v49 = (uint64_t)a5[8];
        if (0x6DB6DB6DB6DB6DB7 * ((v49 - v44) >> 3) >= v48)
        {
          v58 = (char *)a5[7];
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v58[-v44] >> 3) >= v48)
          {
            if (v95 != v96)
            {
              v66 = (uint64_t *)(v44 + 32);
              v67 = (uint64_t *)(v95 + 40);
              do
              {
                v68 = v67 - 5;
                v69 = *((_DWORD *)v67 - 8);
                *(v66 - 4) = *(v67 - 5);
                v70 = v66 - 4;
                *((_DWORD *)v70 + 2) = v69;
                v71 = *(uint64_t *)((char *)v67 - 28);
                *((_DWORD *)v70 + 5) = *((_DWORD *)v67 - 5);
                *(uint64_t *)((char *)v70 + 12) = v71;
                *((_BYTE *)v70 + 24) = *((_BYTE *)v67 - 16);
                if (v66 - 4 != v67 - 5)
                  sub_2233310CC(v66, *(v67 - 1), *v67, 0xCCCCCCCCCCCCCCCDLL * ((*v67 - *(v67 - 1)) >> 4));
                v44 += 56;
                v66 += 7;
                v67 += 7;
              }
              while (v68 + 7 != (uint64_t *)v47);
              v58 = (char *)a5[7];
            }
            while (v58 != (char *)v44)
            {
              v78 = *((_QWORD *)v58 - 3);
              if (v78)
              {
                v79 = *((_QWORD *)v58 - 2);
                v77 = (void *)*((_QWORD *)v58 - 3);
                if (v79 != v78)
                {
                  do
                  {
                    if (*(_BYTE *)(v79 - 8))
                    {
                      v80 = *(_QWORD **)(v79 - 40);
                      if (v80)
                      {
                        do
                        {
                          v81 = (_QWORD *)*v80;
                          operator delete(v80);
                          v80 = v81;
                        }
                        while (v81);
                      }
                      v82 = *(void **)(v79 - 56);
                      *(_QWORD *)(v79 - 56) = 0;
                      if (v82)
                        operator delete(v82);
                    }
                    v79 -= 80;
                  }
                  while (v79 != v78);
                  v77 = (void *)*((_QWORD *)v58 - 3);
                }
                *((_QWORD *)v58 - 2) = v78;
                operator delete(v77);
              }
              v58 -= 56;
            }
            a5[7] = (void *)v44;
            goto LABEL_99;
          }
          v59 = v95 + 8 * ((uint64_t)&v58[-v44] >> 3);
          if (v58 != (char *)v44)
          {
            v60 = (uint64_t *)(v44 + 32);
            v61 = (uint64_t *)(v95 + 40);
            do
            {
              v62 = v61 - 5;
              v63 = *((_DWORD *)v61 - 8);
              *(v60 - 4) = *(v61 - 5);
              v64 = v60 - 4;
              *((_DWORD *)v64 + 2) = v63;
              v65 = *(uint64_t *)((char *)v61 - 28);
              *((_DWORD *)v64 + 5) = *((_DWORD *)v61 - 5);
              *(uint64_t *)((char *)v64 + 12) = v65;
              *((_BYTE *)v64 + 24) = *((_BYTE *)v61 - 16);
              if (v60 - 4 != v61 - 5)
                sub_2233310CC(v60, *(v61 - 1), *v61, 0xCCCCCCCCCCCCCCCDLL * ((*v61 - *(v61 - 1)) >> 4));
              v60 += 7;
              v61 += 7;
            }
            while (v62 + 7 != (uint64_t *)v59);
            v44 = (uint64_t)a5[7];
          }
          v76 = sub_223F6E358(v59, v47, v44);
        }
        else
        {
          if (v44)
          {
            v50 = (char *)a5[7];
            v51 = (void *)v44;
            if (v50 != (char *)v44)
            {
              do
              {
                v53 = *((_QWORD *)v50 - 3);
                if (v53)
                {
                  v54 = *((_QWORD *)v50 - 2);
                  v52 = (void *)*((_QWORD *)v50 - 3);
                  if (v54 != v53)
                  {
                    do
                    {
                      if (*(_BYTE *)(v54 - 8))
                      {
                        v55 = *(_QWORD **)(v54 - 40);
                        if (v55)
                        {
                          do
                          {
                            v56 = (_QWORD *)*v55;
                            operator delete(v55);
                            v55 = v56;
                          }
                          while (v56);
                        }
                        v57 = *(void **)(v54 - 56);
                        *(_QWORD *)(v54 - 56) = 0;
                        if (v57)
                          operator delete(v57);
                      }
                      v54 -= 80;
                    }
                    while (v54 != v53);
                    v52 = (void *)*((_QWORD *)v50 - 3);
                  }
                  *((_QWORD *)v50 - 2) = v53;
                  operator delete(v52);
                }
                v50 -= 56;
              }
              while (v50 != (char *)v44);
              v51 = *v45;
            }
            a5[7] = (void *)v44;
            operator delete(v51);
            v49 = 0;
            *v45 = 0;
            a5[7] = 0;
            a5[8] = 0;
          }
          if (v48 > 0x492492492492492)
            goto LABEL_108;
          v72 = 0x6DB6DB6DB6DB6DB7 * (v49 >> 3);
          v73 = 2 * v72;
          if (2 * v72 <= v48)
            v73 = v48;
          v74 = v72 >= 0x249249249249249 ? 0x492492492492492 : v73;
          if (v74 > 0x492492492492492)
LABEL_108:
            sub_22316E078();
          v75 = (char *)operator new(56 * v74);
          a5[6] = v75;
          a5[7] = v75;
          a5[8] = &v75[56 * v74];
          v76 = sub_223F6E358(v46, v47, (uint64_t)v75);
        }
        a5[7] = (void *)v76;
LABEL_99:
        sub_223330660(a5 + 9, (char *)__src, *(char **)v98, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v98 - (_QWORD)__src) >> 3));
        goto LABEL_100;
      }
      v29 = (char *)a5[3];
      if (v93 != v94)
      {
        v40 = a5[3];
        do
        {
          v41 = *v20;
          v42 = v20[1];
          v40[8] = *((_DWORD *)v20 + 8);
          *(_OWORD *)v40 = v41;
          *((_OWORD *)v40 + 1) = v42;
          v20 = (_OWORD *)((char *)v20 + 36);
          v40 += 9;
          v29 += 36;
        }
        while (v20 != (_OWORD *)v21);
      }
    }
    else
    {
      if (v19)
      {
        a5[4] = v19;
        operator delete(v19);
        v24 = 0;
        a5[3] = 0;
        a5[4] = 0;
        a5[5] = 0;
      }
      if (v23 > 0x71C71C71C71C71CLL)
        goto LABEL_107;
      v25 = 0x8E38E38E38E38E39 * (v24 >> 2);
      v26 = 2 * v25;
      if (2 * v25 <= v23)
        v26 = v23;
      v27 = v25 >= 0x38E38E38E38E38ELL ? 0x71C71C71C71C71CLL : v26;
      if (v27 > 0x71C71C71C71C71CLL)
LABEL_107:
        sub_22316E078();
      v28 = (char *)operator new(36 * v27);
      v19 = v28;
      a5[3] = v28;
      a5[4] = v28;
      a5[5] = &v28[36 * v27];
      v29 = v28;
      if (v20 != (_OWORD *)v21)
      {
        memcpy(v28, v20, 36 * ((v22 - 36) / 0x24uLL) + 36);
        v29 = (char *)&v19[9 * ((v22 - 36) / 0x24uLL) + 9];
      }
    }
    v39 = v29 - (char *)v19;
    goto LABEL_44;
  }
LABEL_100:
  if (__src)
  {
    *(_QWORD *)v98 = __src;
    operator delete(__src);
  }
  v116 = (void **)&v95;
  sub_223F45A94(&v116);
  if (v93)
  {
    v94 = (char *)v93;
    operator delete(v93);
  }
  if (v92[0])
  {
    v92[1] = v92[0];
    operator delete(v92[0]);
  }
}

void sub_223F662B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 56) = v3;
  *(_QWORD *)(v4 - 96) = v1;
  sub_223F3A870((void ***)(v4 - 96));
  sub_223F5BDA4((uint64_t)&STACK[0x210]);
  _Unwind_Resume(a1);
}

void sub_223F66310(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  float32x4_t v4;
  float32x4_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  uint64_t v9;
  float v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  int v15;
  int v16;
  int8x16_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  float32x4_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint8x8_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  char *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  uint64_t v76;
  char **v77;
  void *v78;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  unint64_t **v83;
  uint64_t v84;
  char *v85;
  _QWORD v86[2];
  char *v87;
  unint64_t *v88;
  unint64_t *v89;
  uint64_t v90;
  void *v91[2];
  void *__p[2];
  int v93;

  if (!*(_BYTE *)(a1 + 280))
    return;
  v1 = (_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 232);
  v2 = *(_QWORD *)(a1 + 240);
  v89 = 0;
  v90 = 0;
  v88 = 0;
  v4 = 0uLL;
  v5 = 0uLL;
  v6 = (v2 - v3) / 12;
  if (v2 != v3)
  {
    v4.i64[0] = *(_QWORD *)v3;
    v7 = (float *)(v3 + 8);
    v8 = *(float *)(v3 + 8);
    v9 = 12 * v6;
    v10 = v8;
    v5.i64[0] = *(_QWORD *)v3;
    do
    {
      if (*v7 < v10)
        v10 = *v7;
      v11 = *(float32x2_t *)(v7 - 2);
      *(int8x8_t *)v5.f32 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v5.f32, v11), (int8x8_t)v11, *(int8x8_t *)v5.f32);
      *(int8x8_t *)v4.f32 = vbsl_s8((int8x8_t)vcgt_f32(v11, *(float32x2_t *)v4.f32), (int8x8_t)v11, *(int8x8_t *)v4.f32);
      if (v8 < *v7)
        v8 = *v7;
      v7 += 3;
      v9 -= 12;
    }
    while (v9);
    v5.f32[2] = v10;
    v4.f32[2] = v8;
  }
  *(_OWORD *)v91 = 0uLL;
  *(_OWORD *)__p = 0uLL;
  v93 = 1065353216;
  if (v2 != v3)
  {
    v12 = (float32x4_t)vdupq_n_s32(0x3CA3D70Au);
    v13 = vdivq_f32(v5, v12);
    v14 = (int)v13.f32[0];
    v15 = (int)v13.f32[1];
    v16 = (int)v13.f32[2];
    v81 = v12;
    v17 = (int8x16_t)vdivq_f32(v4, v12);
    v18 = v3 + 12 * v6;
    v19 = (int)*(float *)v17.i32 - (int)v13.f32[0] + 1;
    v20 = (int)*(float *)&v17.i32[1] - (int)v13.f32[1] + 1;
    v21 = v3;
    while (1)
    {
      v17.i64[0] = *(_QWORD *)v21;
      v17.i32[2] = *(_DWORD *)(v21 + 8);
      v22 = vdivq_f32((float32x4_t)v17, v81);
      v23 = (int)v22.f32[2];
      *(int32x2_t *)v22.f32 = vcvt_s32_f32(*(float32x2_t *)v22.f32);
      v80 = v22;
      LODWORD(v24) = v22.i32[0] - v14 + (v22.i32[1] - v15 + ((int)v22.f32[2] - v16) * v20) * v19;
      v25 = (int)v24;
      v86[0] = (int)v24;
      if (!v91[1])
        goto LABEL_32;
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v91[1]);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        v24 = (int)v24;
        if (v91[1] <= (void *)(int)v24)
          v24 = (int)v24 % (unint64_t)v91[1];
      }
      else
      {
        v24 = ((unint64_t)v91[1] - 1) & (int)v24;
      }
      v27 = (_QWORD *)*((_QWORD *)v91[0] + v24);
      if (!v27 || (v28 = (_QWORD *)*v27) == 0)
      {
LABEL_32:
        sub_223F6DEA0((float *)v91, v25, v86)[3] = v21;
        goto LABEL_33;
      }
      if (v26.u32[0] < 2uLL)
      {
        while (1)
        {
          v30 = v28[1];
          if (v30 == v25)
          {
            if (v28[2] == v25)
              goto LABEL_35;
          }
          else if ((v30 & ((uint64_t)v91[1] - 1)) != v24)
          {
            goto LABEL_32;
          }
          v28 = (_QWORD *)*v28;
          if (!v28)
            goto LABEL_32;
        }
      }
      while (1)
      {
        v29 = v28[1];
        if (v29 == v25)
          break;
        if ((void *)v29 >= v91[1])
          v29 %= (unint64_t)v91[1];
        if (v29 != v24)
          goto LABEL_32;
LABEL_22:
        v28 = (_QWORD *)*v28;
        if (!v28)
          goto LABEL_32;
      }
      if (v28[2] != v25)
        goto LABEL_22;
LABEL_35:
      v31 = sub_223F6DEA0((float *)v91, v25, v86);
      v32.i32[3] = v80.i32[3];
      *(float32x2_t *)v32.f32 = vcvt_f32_s32(*(int32x2_t *)v80.f32);
      v32.f32[2] = (float)v23;
      v33.i32[3] = v81.i32[3];
      v34 = vmulq_f32(v32, v81);
      v35 = v31[3];
      v33.i64[0] = *(_QWORD *)v21;
      v33.i32[2] = *(_DWORD *)(v21 + 8);
      v36 = (int8x16_t)vsubq_f32(v34, v33);
      v37 = (float32x2_t)vextq_s8(v36, v36, 8uLL).u64[0];
      v38 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v36.i8, *(float32x2_t *)v36.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1), *(float32x2_t *)v36.i8, 1);
      v36.i64[0] = *(_QWORD *)v35;
      v36.i32[2] = *(_DWORD *)(v35 + 8);
      v17 = (int8x16_t)vsubq_f32(v34, (float32x4_t)v36);
      v39 = (float32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
      if (vmla_f32(v38, v37, v37).f32[0] < vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v17.i8, *(float32x2_t *)v17.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), *(float32x2_t *)v17.i8, 1), v39, v39).f32[0])goto LABEL_32;
LABEL_33:
      v21 += 12;
      if (v21 == v18)
      {
        v40 = __p[0];
        v1 = (_QWORD *)a1;
        if (__p[0])
        {
          do
          {
            v86[0] = 0xAAAAAAAAAAAAAAABLL * ((v40[3] - v3) >> 2);
            v83 = &v88;
            sub_2237A4B60((uint64_t *)&v83, v86);
            v40 = (_QWORD *)*v40;
          }
          while (v40);
          v41 = __p[0];
          if (__p[0])
          {
            do
            {
              v42 = (_QWORD *)*v41;
              operator delete(v41);
              v41 = v42;
            }
            while (v42);
          }
        }
        v43 = v91[0];
        v91[0] = 0;
        if (v43)
          operator delete(v43);
        break;
      }
    }
  }
  v44 = (char *)v1[29];
  v45 = v1[30];
  v46 = v88;
  v47 = v89;
  v48 = v88 - v89;
  v49 = -v48;
  v86[1] = 0;
  v87 = 0;
  v86[0] = 0;
  if (v88 == v89)
  {
    v53 = 0;
    v82 = 0;
    v51 = 0;
    v61 = v1;
    v84 = 0;
    v85 = 0;
    v83 = 0;
    goto LABEL_68;
  }
  if (v49 >= 0x1555555555555556)
    sub_22316E078();
  v50 = (char *)operator new(-12 * v48);
  v51 = v50;
  v52 = 0xAAAAAAAAAAAAAAABLL * ((v45 - (uint64_t)v44) >> 2);
  v53 = &v50[-12 * v48];
  v86[0] = v50;
  v87 = v53;
  v91[1] = v44;
  __p[0] = (void *)v52;
  v54 = *v46;
  if (v52 <= *v46)
  {
LABEL_50:
    v91[0] = v46;
    sub_22457354C((unint64_t *)__p, v54);
  }
  v55 = 0;
  v56 = v46 + 1;
  while (1)
  {
    v57 = &v44[12 * v54];
    v58 = *(_QWORD *)v57;
    v59 = &v50[v55];
    *((_DWORD *)v59 + 2) = *((_DWORD *)v57 + 2);
    *(_QWORD *)v59 = v58;
    if (v56 == v47)
      break;
    v60 = *v56++;
    v54 = v60;
    v55 += 12;
    if (v52 <= v60)
    {
      v46 = v56 - 1;
      goto LABEL_50;
    }
  }
  v82 = (uint64_t)&v50[v55 + 12];
  v61 = v1;
  v62 = (char *)v1[32];
  v63 = v1[33];
  v84 = 0;
  v85 = 0;
  v83 = 0;
  if (v46 == v47)
  {
LABEL_68:
    v67 = 0;
    v76 = 0;
    v65 = 0;
    v77 = (char **)(v61 + 29);
    if (!v46)
      goto LABEL_61;
    goto LABEL_60;
  }
  if (v49 >= 0x71C71C71C71C71DLL)
    sub_22316E078();
  v64 = operator new(-36 * v48);
  v65 = v64;
  v66 = 0x8E38E38E38E38E39 * ((v63 - (uint64_t)v62) >> 2);
  v67 = (char *)v64 + 36 * v49;
  v83 = (unint64_t **)v64;
  v85 = v67;
  v91[1] = v62;
  __p[0] = (void *)v66;
  v68 = *v46;
  if (v66 <= *v46)
  {
LABEL_58:
    v91[0] = v46;
    sub_22457354C((unint64_t *)__p, v68);
  }
  v69 = 0;
  v70 = v46 + 1;
  while (1)
  {
    v71 = (char *)v64 + v69;
    v72 = &v62[36 * v68];
    v73 = *(_OWORD *)v72;
    v74 = *((_OWORD *)v72 + 1);
    *((_DWORD *)v71 + 8) = *((_DWORD *)v72 + 8);
    *(_OWORD *)v71 = v73;
    *((_OWORD *)v71 + 1) = v74;
    if (v70 == v47)
      break;
    v75 = *v70++;
    v68 = v75;
    v69 += 36;
    if (v66 <= v75)
    {
      v46 = v70 - 1;
      goto LABEL_58;
    }
  }
  v76 = (uint64_t)v64 + v69 + 36;
  v77 = (char **)(v61 + 29);
  if (!v46)
    goto LABEL_61;
LABEL_60:
  v89 = v46;
  operator delete(v46);
  v44 = *v77;
LABEL_61:
  if (v44)
  {
    v61[30] = v44;
    operator delete(v44);
    *v77 = 0;
    v77[1] = 0;
    v77[2] = 0;
  }
  v61[29] = v51;
  v61[30] = v82;
  v61[31] = v53;
  v78 = (void *)v61[32];
  if (v78)
  {
    v61[33] = v78;
    operator delete(v78);
    v61[32] = 0;
    v61[33] = 0;
    v61[34] = 0;
  }
  v61[32] = v65;
  v61[33] = v76;
  v61[34] = v67;
}

void sub_223F668F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  sub_22322E828((uint64_t)&a25);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_223F6696C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
    free(v3);
  a1[10] = 0;
  return a1;
}

uint64_t sub_223F669AC(uint64_t a1, char **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  int v46;
  uint64_t *v47;
  int v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  unsigned int v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  size_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  int v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v72;
  int v73;
  int v74;
  char *v75;
  size_t v76;
  int v77;
  uint64_t v78;
  char *v79;
  int v80;
  char *v81;
  unsigned __int8 v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  unsigned __int8 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  BOOL v98;
  int v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  _DWORD *v117;
  int v118;
  uint64_t v119;
  _DWORD *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  char *v128;
  uint64_t v129;
  int v130;
  char *v131;
  _DWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  _DWORD *v138;
  int v139;
  int v140;
  int v141;
  char *v142;
  char *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  _DWORD *v149;
  _DWORD *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  int v159;
  int v160;
  char *v161;
  size_t v162;
  int v163;
  int v164;
  char *v165;
  char *v166;
  unsigned __int8 v167;
  BOOL v168;
  uint64_t i;
  uint64_t v170;
  unsigned __int8 v171;
  BOOL v172;
  uint64_t v173;
  _DWORD *v174;
  _DWORD *v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  _DWORD *v182;
  _DWORD *v183;
  int v184;
  int v185;
  char *v186;
  int v187;
  uint64_t v188;
  int j;
  _DWORD *v190;
  _DWORD *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _DWORD *v196;
  _DWORD *v197;
  int v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  char *v206;
  char *v207;
  char *v208;
  int v209;
  int v211;
  char *__src;
  unint64_t __srca;
  void *memptr;

  v3 = a1;
  if (!*(_BYTE *)(a1 + 88))
  {
    v47 = (uint64_t *)(a2 + 1);
    v48 = *((_DWORD *)a2 + 4);
    if (*((_DWORD *)a2 + 2))
      v49 = *((_DWORD *)a2 + 3) == 0;
    else
      v49 = 1;
    v50 = v49 || v48 == 0;
    if (v50)
      v51 = 0;
    else
      v51 = *v47;
    if (v50)
    {
      v48 = 0;
      v52 = 0;
    }
    else
    {
      v52 = HIDWORD(v51) * v51;
    }
    v53 = (_DWORD)v51 != 0;
    if (HIDWORD(v51))
      v54 = v51 << 32;
    else
      v54 = 0;
    v55 = v54 | v53;
    *(_QWORD *)a1 = v51;
    *(_DWORD *)(a1 + 8) = v48;
    *(_QWORD *)(a1 + 12) = v54 | v53;
    *(_DWORD *)(a1 + 20) = v52;
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    v56 = 4 * v52;
    v57 = v56 - 1;
    v58 = *((_DWORD *)a2 + 4) * v52;
    v59 = 4 * v58;
    v6 = (v56 & (v56 - 1)) == 0;
    v60 = 3;
    if (v6)
      v60 = v57;
    v61 = v60 | (v60 >> 1) | ((v60 | (v60 >> 1)) >> 2);
    v62 = v61 | (v61 >> 4) | ((v61 | (v61 >> 4)) >> 8);
    v63 = v62 | (v62 >> 16) | ((v62 | (v62 >> 16)) >> 32);
    if (v63 + 1 > 8)
      v64 = v63 + 1;
    else
      v64 = 8;
    *(_QWORD *)(a1 + 40) = v59;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v64;
    if (v58)
    {
      memptr = 0;
      v65 = malloc_type_posix_memalign(&memptr, v64, v59, 0x1F88E90uLL);
      if (v65)
        sub_2244E2E20(v65, *(_QWORD *)(a1 + 56), v59);
      v66 = a1;
      v67 = (char *)memptr;
      *(_QWORD *)(a1 + 48) = memptr;
    }
    else
    {
      v67 = 0;
      v66 = a1;
    }
    v96 = 4 * v55;
    v97 = *v47;
    *(_DWORD *)(v66 + 72) = *((_DWORD *)a2 + 4);
    *(_QWORD *)(v66 + 64) = v97;
    *(_QWORD *)(v66 + 76) = v96;
    *(_DWORD *)(v66 + 84) = 4 * v52;
    if (!*((_DWORD *)a2 + 2) || !*((_DWORD *)a2 + 3) || !*((_DWORD *)a2 + 4))
      goto LABEL_268;
    if (*(_DWORD *)(a1 + 72))
      v98 = *(_DWORD *)(a1 + 68) == 0;
    else
      v98 = 1;
    if (v98 || *(_DWORD *)(a1 + 64) == 0)
      v100 = 0;
    else
      v100 = *(_DWORD *)(a1 + 72);
    v203 = v52 & 0x3FFFFFFF;
    if (v100 * (v52 & 0x3FFFFFFF) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_251;
    }
    v101 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v51 && (_DWORD)v101 == 1)
    {
      v102 = *((_DWORD *)a2 + 6);
      v103 = v96 >> 34;
      v104 = *((unsigned int *)a2 + 2);
      if (v102 == v96 >> 34)
      {
        v105 = *((_DWORD *)a2 + 3);
        if (v102 == (_DWORD)v104)
        {
          v106 = *((unsigned int *)a2 + 7);
          v107 = (v105 * v102);
          if ((_DWORD)v106 == (_DWORD)v203 && (_DWORD)v106 == (_DWORD)v107)
          {
            v108 = (*((_DWORD *)a2 + 4) * v203);
            v109 = *a2;
            if ((_DWORD)v108 && !v109)
            {
              if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
              {
                goto LABEL_251;
              }
              goto LABEL_261;
            }
            if ((_DWORD)v108)
LABEL_261:
              memmove(v67, v109, 4 * v108);
LABEL_268:
            v3 = a1;
            *(_BYTE *)(a1 + 88) = 1;
            return v3;
          }
          if (!v102)
            goto LABEL_268;
          if (!v105)
            goto LABEL_268;
          v185 = *((_DWORD *)a2 + 4);
          if (!v185)
            goto LABEL_268;
          v186 = *a2;
          v187 = v185 - 1;
          if (v185 == 1)
          {
LABEL_262:
            if (!(_DWORD)v107 || v186)
            {
              if (!(_DWORD)v107)
                goto LABEL_268;
            }
            else if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
            {
              goto LABEL_251;
            }
            memmove(v67, v186, 4 * v107);
            goto LABEL_268;
          }
          if (!(_DWORD)v107)
            goto LABEL_268;
          v188 = 4 * v106;
          while (v186
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v67, v186, 4 * v107);
            v186 += v188;
            v67 += 4 * v203;
            if (!--v187)
              goto LABEL_262;
          }
LABEL_251:
          abort();
        }
        __srca = *((unsigned int *)a2 + 6);
        if (!(_DWORD)v104)
          goto LABEL_268;
      }
      else
      {
        __srca = *((unsigned int *)a2 + 6);
        v105 = *((_DWORD *)a2 + 3);
        if (!(_DWORD)v104)
          goto LABEL_268;
      }
      if (!v105)
        goto LABEL_268;
      v159 = *((_DWORD *)a2 + 4);
      if (!v159)
        goto LABEL_268;
      v160 = v105 - 1;
      v161 = *a2;
      v162 = 4 * v104;
      v209 = v159 - 1;
      if (v159 == 1)
      {
LABEL_246:
        if (v160)
        {
          v195 = 4 * v103;
          while (v161
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v67, v161, v162);
            v161 += 4 * __srca;
            v67 += v195;
            if (!--v160)
              goto LABEL_252;
          }
        }
        else
        {
LABEL_252:
          if (v161
            || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v67, v161, v162);
            goto LABEL_268;
          }
        }
      }
      else if (v105 == 1)
      {
        v194 = 4 * *((unsigned int *)a2 + 7);
        while (v161
             || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          memmove(v67, v161, v162);
          v161 += v194;
          v67 += 4 * v203;
          if (!--v209)
            goto LABEL_246;
        }
      }
      else
      {
        v163 = 0;
        v201 = *((unsigned int *)a2 + 7);
        while (1)
        {
          v205 = v163;
          v164 = 0;
          v165 = v161;
          v207 = v67;
          v166 = v67;
          do
          {
            while (v165)
            {
              memmove(v166, v165, v162);
              v165 += 4 * __srca;
              v166 += 4 * v103;
              if (++v164 == v160)
                goto LABEL_178;
            }
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v167 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v167 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (byte_255795670)
              v168 = byte_255795678 == 0;
            else
              v168 = 0;
            if (!v168)
            {
              v170 = qword_255795648;
              for (i = qword_255795650; v170 != i; v170 += 16)
                (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v170)(*(_QWORD *)(v170 + 8), "ptr != nullptr || size == 0", 27, "", 0);
            }
            v171 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v171 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_251;
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v166, 0, v162);
            v166 += 4 * v103;
            ++v164;
            v165 = (char *)(4 * __srca);
          }
          while (v164 != v160);
          v172 = sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
          v165 = (char *)(4 * __srca);
          if (v172)
            break;
LABEL_178:
          memmove(v166, v165, v162);
          v161 += 4 * v201;
          v67 = &v207[4 * v203];
          v163 = v205 + 1;
          if (v205 + 1 == v209)
            goto LABEL_246;
        }
      }
      goto LABEL_251;
    }
    v110 = *((_DWORD *)a2 + 2);
    if (!v110)
      goto LABEL_268;
    v111 = *((_DWORD *)a2 + 3);
    if (!v111)
      goto LABEL_268;
    v112 = *((_DWORD *)a2 + 4);
    if (!v112)
      goto LABEL_268;
    v113 = v110 - 1;
    v114 = v111 - 1;
    v115 = *((unsigned int *)a2 + 6);
    v116 = v96 >> 34;
    v117 = *a2;
    v118 = v112 - 1;
    if (v118)
    {
      v119 = *((unsigned int *)a2 + 7);
      v120 = v67;
      if (!v114)
      {
        if (v113)
        {
          for (j = 0; j != v118; ++j)
          {
            v190 = v120;
            v191 = v117;
            v192 = v113;
            do
            {
              *v190 = *v191;
              v191 += v101;
              v190 += v53;
              --v192;
            }
            while (v192);
            *v190 = *v191;
            v117 += v119;
            v120 += v203;
          }
LABEL_237:
          if (v113)
          {
            v193 = 4 * v101;
            do
            {
              *v120 = *v117;
              v117 = (_DWORD *)((char *)v117 + v193);
              v120 += v53;
              --v113;
            }
            while (v113);
          }
          goto LABEL_267;
        }
        do
        {
          *v120 = *v117;
          v117 += v119;
          v120 += v203;
          --v118;
        }
        while (v118);
LABEL_267:
        *v120 = *v117;
        goto LABEL_268;
      }
      if (!v113)
      {
        do
        {
          v196 = v120;
          v197 = v117;
          v198 = v114;
          do
          {
            *v196 = *v197;
            v197 += v115;
            v196 += v116;
            --v198;
          }
          while (v198);
          *v196 = *v197;
          v117 += v119;
          v120 += v203;
          ++v113;
        }
        while (v113 != v118);
        do
        {
LABEL_258:
          *v120 = *v117;
          v117 += v115;
          v120 += v116;
          --v114;
        }
        while (v114);
        goto LABEL_267;
      }
      v121 = 0;
      v122 = 4 * v119;
      v123 = v115;
      v124 = 4 * v101;
      v125 = 4 * v203;
      v126 = v116;
      v127 = &v117[v115];
      v128 = &v67[4 * v116];
      v129 = 4 * v53;
      do
      {
        v130 = 0;
        v131 = v128;
        v132 = v127;
        v133 = v120;
        v134 = v117;
        do
        {
          v135 = v132;
          v136 = v131;
          v137 = v133;
          v138 = v134;
          v139 = v113;
          do
          {
            *v137 = *v138;
            v138 = (_DWORD *)((char *)v138 + v124);
            v137 = (_DWORD *)((char *)v137 + v129);
            --v139;
          }
          while (v139);
          *v137 = *v138;
          v134 = (_DWORD *)((char *)v134 + v123 * 4);
          v133 = (_DWORD *)((char *)v133 + v126 * 4);
          ++v130;
          v132 = &v135[v123];
          v131 = (char *)&v136[v126];
        }
        while (v130 != v114);
        v140 = v113;
        do
        {
          *v136 = *v135;
          v135 = (_DWORD *)((char *)v135 + v124);
          v136 = (_DWORD *)((char *)v136 + v129);
          --v140;
        }
        while (v140);
        *v136 = *v135;
        v117 = (_DWORD *)((char *)v117 + v122);
        v120 = (_DWORD *)((char *)v120 + v125);
        ++v121;
        v127 = (_DWORD *)((char *)v127 + v122);
        v128 += v125;
      }
      while (v121 != v118);
    }
    else
    {
      v120 = v67;
    }
    if (!v114)
      goto LABEL_237;
    if (v113)
    {
      v179 = 0;
      v180 = 4 * v115;
      v181 = 4 * v116;
      do
      {
        v182 = v120;
        v183 = v117;
        v184 = v113;
        do
        {
          *v182 = *v183;
          v183 += v101;
          v182 += v53;
          --v184;
        }
        while (v184);
        *v182 = *v183;
        v117 = (_DWORD *)((char *)v117 + v180);
        v120 = (_DWORD *)((char *)v120 + v181);
        ++v179;
      }
      while (v179 != v114);
      goto LABEL_237;
    }
    goto LABEL_258;
  }
  v4 = *((unsigned int *)a2 + 5);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = (_DWORD)v4 == 1 && (_DWORD)v5 == 1;
  if (v6)
  {
    v68 = *((unsigned int *)a2 + 6);
    v69 = *(unsigned int *)(a1 + 16);
    v70 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v68 == (_DWORD)v69 && (_DWORD)v68 == (_DWORD)v70)
    {
      v89 = *((unsigned int *)a2 + 7);
      v90 = *(unsigned int *)(a1 + 20);
      v91 = *((_DWORD *)a2 + 3);
      v92 = (v91 * v68);
      if ((_DWORD)v89 == (_DWORD)v90 && (_DWORD)v89 == (_DWORD)v92)
      {
        v93 = (*((_DWORD *)a2 + 4) * v89);
        v94 = *a2;
        if ((_DWORD)v93)
          v95 = v94 == 0;
        else
          v95 = 0;
        if (v95)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_209;
          }
        }
        else if (!(_DWORD)v93)
        {
          return v3;
        }
        memmove(*(void **)(v3 + 48), v94, 4 * v93);
        return v3;
      }
      if (!(_DWORD)v68)
        return v3;
      if (!v91)
        return v3;
      v141 = *((_DWORD *)a2 + 4);
      if (!v141)
        return v3;
      v142 = *(char **)(a1 + 48);
      v143 = *a2;
      v144 = v141 - 1;
      if (v141 == 1)
      {
LABEL_157:
        if (!(_DWORD)v92 || v143)
        {
          v3 = a1;
          if (!(_DWORD)v92)
            return v3;
        }
        else
        {
          v3 = a1;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            goto LABEL_209;
          }
        }
        memmove(v142, v143, 4 * v92);
        return v3;
      }
      if (!(_DWORD)v92)
        return v3;
      v145 = 4 * v89;
      v146 = 4 * v90;
      while (v143
           || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
      {
        memmove(v142, v143, 4 * v92);
        v143 += v145;
        v142 += v146;
        if (!--v144)
          goto LABEL_157;
      }
    }
    else
    {
      if (!(_DWORD)v70)
        return v3;
      v72 = *((_DWORD *)a2 + 3);
      if (!v72)
        return v3;
      v73 = *((_DWORD *)a2 + 4);
      if (!v73)
        return v3;
      v74 = v72 - 1;
      v75 = *(char **)(a1 + 48);
      v76 = 4 * v70;
      v211 = v73 - 1;
      if (v73 == 1)
      {
        v79 = *a2;
        v78 = *((unsigned int *)a2 + 6);
LABEL_162:
        v154 = v75;
        if (v74)
        {
          v155 = 4 * v78;
          v156 = 4 * v69;
          v157 = v154;
          v158 = v79;
          while (v158
               || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v157, v158, v76);
            v158 += v155;
            v157 += v156;
            if (!--v74)
              goto LABEL_169;
          }
        }
        else
        {
          v157 = v75;
          v158 = v79;
LABEL_169:
          if (v158
            || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            memmove(v157, v158, v76);
            return a1;
          }
        }
      }
      else if (v72 == 1)
      {
        v78 = *((unsigned int *)a2 + 6);
        v177 = 4 * *((unsigned int *)a2 + 7);
        v178 = 4 * *(unsigned int *)(a1 + 20);
        v79 = *a2;
        while (v79
             || !sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
        {
          memmove(v75, v79, v76);
          v79 += v177;
          v75 += v178;
          if (!--v211)
            goto LABEL_162;
        }
      }
      else
      {
        v77 = 0;
        v78 = *((unsigned int *)a2 + 6);
        __src = (char *)(4 * v68);
        v79 = *a2;
        v200 = *((unsigned int *)a2 + 7);
        v202 = *(unsigned int *)(a1 + 20);
        while (1)
        {
          v204 = v77;
          v80 = 0;
          v206 = v79;
          v208 = v75;
          v81 = v75;
          do
          {
            while (v79)
            {
              memmove(v81, v79, v76);
              v79 += 4 * v78;
              v81 += 4 * v69;
              if (++v80 == v74)
                goto LABEL_65;
            }
            sub_2245739C8("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C);
            v82 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v82 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (byte_255795670)
              v83 = byte_255795678 == 0;
            else
              v83 = 0;
            if (!v83)
            {
              v84 = qword_255795648;
              v85 = qword_255795650;
              while (v84 != v85)
              {
                v87 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v84;
                v86 = *(_QWORD *)(v84 + 8);
                v84 += 16;
                v87(v86, "ptr != nullptr || size == 0", 27, "", 0);
              }
            }
            v88 = atomic_load((unsigned __int8 *)&qword_255795680);
            if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_255795680))
            {
              __cxa_atexit((void (*)(void *))sub_2245741EC, &qword_255795648, &dword_22314D000);
              __cxa_guard_release(&qword_255795680);
            }
            if (!byte_255795670)
              goto LABEL_209;
            qword_255795660(*(_QWORD *)algn_255795668, "ptr != nullptr || size == 0", 27, "", 0);
            memcpy(v81, 0, v76);
            v81 += 4 * v69;
            ++v80;
            v79 = __src;
          }
          while (v80 != v74);
          v79 = __src;
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_22457406C))
          {
            break;
          }
LABEL_65:
          memmove(v81, v79, v76);
          v79 = &v206[4 * v200];
          v75 = &v208[4 * v202];
          v77 = v204 + 1;
          if (v204 + 1 == v211)
            goto LABEL_162;
        }
      }
    }
LABEL_209:
    abort();
  }
  v7 = *((_DWORD *)a2 + 2);
  v8 = *((_DWORD *)a2 + 3);
  v9 = *((_DWORD *)a2 + 4);
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10 && v9 != 0)
  {
    v12 = v7 - 1;
    v13 = v8 - 1;
    v14 = *((unsigned int *)a2 + 6);
    v15 = *(unsigned int *)(a1 + 16);
    v16 = *a2;
    v17 = *(_DWORD **)(a1 + 48);
    v18 = v9 - 1;
    if (v18)
    {
      v19 = *(unsigned int *)(a1 + 20);
      v20 = *((unsigned int *)a2 + 7);
      if (!v13)
      {
        if (v12)
        {
          v147 = 0;
          v148 = 4 * v19;
          do
          {
            v149 = v17;
            v150 = v16;
            v151 = v12;
            do
            {
              *v149 = *v150;
              v150 += v4;
              v149 += v5;
              --v151;
            }
            while (v151);
            *v149 = *v150;
            v16 += v20;
            v17 = (_DWORD *)((char *)v17 + v148);
            ++v147;
          }
          while (v147 != v18);
          goto LABEL_153;
        }
        do
        {
          *v17 = *v16;
          v16 += v20;
          v17 += v19;
          --v18;
        }
        while (v18);
LABEL_221:
        *v17 = *v16;
        return v3;
      }
      if (!v12)
      {
        v173 = 4 * v19;
        do
        {
          v174 = v17;
          v175 = v16;
          v176 = v13;
          do
          {
            *v174 = *v175;
            v175 += v14;
            v174 += v15;
            --v176;
          }
          while (v176);
          *v174 = *v175;
          v16 += v20;
          v17 = (_DWORD *)((char *)v17 + v173);
          ++v12;
        }
        while (v12 != v18);
        do
        {
LABEL_203:
          *v17 = *v16;
          v16 += v14;
          v17 += v15;
          --v13;
        }
        while (v13);
        goto LABEL_221;
      }
      v21 = 0;
      v22 = 4 * v20;
      v23 = v14;
      v24 = 4 * v4;
      v25 = 4 * v19;
      v26 = v15;
      v27 = &v16[v14];
      v28 = &v17[v15];
      v29 = 4 * v5;
      do
      {
        v30 = 0;
        v31 = v28;
        v32 = v27;
        v33 = v17;
        v34 = v16;
        do
        {
          v35 = v32;
          v36 = v31;
          v37 = v33;
          v38 = v34;
          v39 = v12;
          do
          {
            *v37 = *v38;
            v38 = (_DWORD *)((char *)v38 + v24);
            v37 = (_DWORD *)((char *)v37 + v29);
            --v39;
          }
          while (v39);
          *v37 = *v38;
          v34 = (_DWORD *)((char *)v34 + v23 * 4);
          v33 = (_DWORD *)((char *)v33 + v26 * 4);
          ++v30;
          v32 = &v35[v23];
          v31 = &v36[v26];
        }
        while (v30 != v13);
        v40 = v12;
        do
        {
          *v36 = *v35;
          v35 = (_DWORD *)((char *)v35 + v24);
          v36 = (_DWORD *)((char *)v36 + v29);
          --v40;
        }
        while (v40);
        *v36 = *v35;
        v16 = (_DWORD *)((char *)v16 + v22);
        v17 = (_DWORD *)((char *)v17 + v25);
        ++v21;
        v27 = (_DWORD *)((char *)v27 + v22);
        v28 = (_DWORD *)((char *)v28 + v25);
      }
      while (v21 != v18);
    }
    if (!v13)
    {
      v3 = a1;
LABEL_153:
      if (v12)
      {
        v152 = 4 * v4;
        v153 = 4 * v5;
        do
        {
          *v17 = *v16;
          v16 = (_DWORD *)((char *)v16 + v152);
          v17 = (_DWORD *)((char *)v17 + v153);
          --v12;
        }
        while (v12);
      }
      goto LABEL_221;
    }
    v3 = a1;
    if (v12)
    {
      v41 = 0;
      v42 = 4 * v14;
      v43 = 4 * v15;
      do
      {
        v44 = v17;
        v45 = v16;
        v46 = v12;
        do
        {
          *v44 = *v45;
          v45 += v4;
          v44 += v5;
          --v46;
        }
        while (v46);
        *v44 = *v45;
        v16 = (_DWORD *)((char *)v16 + v42);
        v17 = (_DWORD *)((char *)v17 + v43);
        ++v41;
      }
      while (v41 != v13);
      goto LABEL_153;
    }
    goto LABEL_203;
  }
  return v3;
}

void sub_223F67BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v16;

  v16 = *(void **)(a15 + 48);
  if (v16)
    free(v16);
  *(_QWORD *)(a15 + 48) = 0;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_223F67C28(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  a1[34] = &off_24EC64998;
  v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[27];
  if (v3)
    free(v3);
  a1[27] = 0;
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
    free(v5);
  a1[10] = 0;
  return a1;
}

void sub_223F67C94(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  BOOL v54;
  uint64_t v55;
  void *__p[3];
  __int128 v57;
  uint64_t (**v58)();
  uint64_t (**v59)();
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  char v71;
  char v72;
  int v73;
  __int128 v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;

  v6 = *(_QWORD *)(a1 + 176);
  if (v6)
  {
    v55 = a1 + 160;
    v7 = *(unsigned __int8 **)(a1 + 160);
    v8 = (unsigned __int8 *)(a1 + 168);
    if (v7 != (unsigned __int8 *)(a1 + 168))
    {
      do
      {
        v20 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(v20 + 8);
        v24 = *(uint64_t **)(v21 + 8);
        v23 = (uint64_t *)(v21 + 8);
        v22 = v24;
        if (!v24)
          goto LABEL_48;
        v25 = v23;
        do
        {
          v26 = *((unsigned __int8 *)v22 + 32);
          v27 = v7[32];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 33);
          v27 = v7[33];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 34);
          v27 = v7[34];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 35);
          v27 = v7[35];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 36);
          v27 = v7[36];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 37);
          v27 = v7[37];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 38);
          v27 = v7[38];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 39);
          v27 = v7[39];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 40);
          v27 = v7[40];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 41);
          v27 = v7[41];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 42);
          v27 = v7[42];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 43);
          v27 = v7[43];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 44);
          v27 = v7[44];
          if (v26 != v27)
            goto LABEL_42;
          v26 = *((unsigned __int8 *)v22 + 45);
          v27 = v7[45];
          if (v26 == v27
            && (v26 = *((unsigned __int8 *)v22 + 46), v27 = v7[46], v26 == v27)
            && (v26 = *((unsigned __int8 *)v22 + 47), v27 = v7[47], v26 == v27))
          {
            v25 = v22;
          }
          else
          {
LABEL_42:
            if (v26 < v27)
              ++v22;
            else
              v25 = v22;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
        if (v25 == v23 || (sub_22319835C(v7 + 32, (unsigned __int8 *)v25 + 32) & 0x80) != 0)
LABEL_48:
          v25 = v23;
        if (v25 != (uint64_t *)(*(_QWORD *)(v20 + 8) + 8) && *((_BYTE *)v25 + 856))
        {
          v28 = *((_OWORD *)v7 + 3);
          v29 = *((_OWORD *)v7 + 4);
          v30 = *((_OWORD *)v7 + 6);
          *((_OWORD *)v25 + 24) = *((_OWORD *)v7 + 5);
          *((_OWORD *)v25 + 25) = v30;
          *((_OWORD *)v25 + 22) = v28;
          *((_OWORD *)v25 + 23) = v29;
          v31 = *((_OWORD *)v7 + 7);
          v32 = *((_OWORD *)v7 + 8);
          v33 = *((_OWORD *)v7 + 10);
          *((_OWORD *)v25 + 28) = *((_OWORD *)v7 + 9);
          *((_OWORD *)v25 + 29) = v33;
          *((_OWORD *)v25 + 26) = v31;
          *((_OWORD *)v25 + 27) = v32;
          v34 = *(_DWORD *)(v20 + 48);
          *((_DWORD *)v25 + 207) = v34;
          v36 = *((float64x2_t *)v25 + 22);
          v35 = *((float64x2_t *)v25 + 23);
          v38 = *((float64x2_t *)v25 + 24);
          v37 = *((float64x2_t *)v25 + 25);
          v40 = *((float64x2_t *)v25 + 26);
          v39 = *((float64x2_t *)v25 + 27);
          v42 = *((float64x2_t *)v25 + 28);
          v41 = *((float64x2_t *)v25 + 29);
          v44 = *((float64x2_t *)v25 + 30);
          v43 = *((float64x2_t *)v25 + 31);
          v46 = *((float64x2_t *)v25 + 32);
          v45 = *((float64x2_t *)v25 + 33);
          v48 = *((float64x2_t *)v25 + 34);
          v47 = *((float64x2_t *)v25 + 35);
          v50 = *((float64x2_t *)v25 + 36);
          v49 = *((float64x2_t *)v25 + 37);
          *((float64x2_t *)v25 + 3) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v44.f64[0]), v38, v44, 1), v40, v43.f64[0]), v42, v43, 1);
          *((float64x2_t *)v25 + 4) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v44.f64[0]), v37, v44, 1), v39, v43.f64[0]), v41, v43, 1);
          *((float64x2_t *)v25 + 5) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v46.f64[0]), v38, v46, 1), v40, v45.f64[0]), v42, v45, 1);
          *((float64x2_t *)v25 + 6) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v46.f64[0]), v37, v46, 1), v39, v45.f64[0]), v41, v45, 1);
          *((float64x2_t *)v25 + 7) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v48.f64[0]), v38, v48, 1), v40, v47.f64[0]), v42, v47, 1);
          *((float64x2_t *)v25 + 8) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v48.f64[0]), v37, v48, 1), v39, v47.f64[0]), v41, v47, 1);
          *((float64x2_t *)v25 + 9) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v50.f64[0]), v38, v50, 1), v40, v49.f64[0]), v42, v49, 1);
          *((float64x2_t *)v25 + 10) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v35, v50.f64[0]), v37, v50, 1), v39, v49.f64[0]), v41, v49, 1);
          if (*((_DWORD *)v25 + 85) == v34)
          {
            v51 = *((_DWORD *)v25 + 86);
            if (v51 <= 1)
              v51 = 1;
          }
          else
          {
            *((_DWORD *)v25 + 85) = v34;
            *((_DWORD *)v25 + 87) += *((_DWORD *)v25 + 86);
            v51 = 1;
          }
          *((_DWORD *)v25 + 86) = v51;
        }
        v52 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
        if (v52)
        {
          do
          {
            v53 = v52;
            v52 = *(unsigned __int8 **)v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            v53 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
            v54 = *(_QWORD *)v53 == (_QWORD)v7;
            v7 = v53;
          }
          while (!v54);
        }
        v7 = v53;
      }
      while (v53 != v8);
    }
    sub_223198030(v55, *(_QWORD **)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = v8;
  }
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)&v57 = *(_QWORD *)a2;
  *((_QWORD *)&v57 + 1) = v10;
  v58 = &off_24EC64998;
  v59 = &off_24EC64920;
  v11 = *(_OWORD *)(a2 + 48);
  v60 = *(_OWORD *)(a2 + 32);
  v61 = v11;
  v62 = *(_OWORD *)(a2 + 64);
  v63 = *(_QWORD *)(a2 + 80);
  v64 = *(_DWORD *)(a2 + 88);
  v65 = *(_QWORD *)(a2 + 92);
  v66 = *(_OWORD *)(a2 + 104);
  v67 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 120)), *(float64x2_t *)(a2 + 136));
  v68 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 152)), *(float64x2_t *)(a2 + 168));
  v69 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 184)), *(float64x2_t *)(a2 + 200));
  v70 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 216)), *(float64x2_t *)(a2 + 232));
  v71 = 0;
  v72 = 0;
  v73 = *(_DWORD *)(a2 + 248);
  v74 = *(_OWORD *)(a2 + 256);
  v12 = sub_223F921C0(v9, (uint64_t)&v57, (void **)&v75, 1, (void **)a3 + 3, 1);
  v13 = *(_QWORD *)(a1 + 200);
  if (v13)
  {
    v14 = (void **)(v13 + 496);
    if (*(_BYTE *)(v13 + 544))
    {
      v15 = *(void **)(v13 + 520);
      if (v15)
      {
        *(_QWORD *)(v13 + 528) = v15;
        operator delete(v15);
      }
      v16 = *v14;
      if (*v14)
      {
        *(_QWORD *)(v13 + 504) = v16;
        operator delete(v16);
      }
      *(_BYTE *)(v13 + 544) = 0;
    }
    sub_223323948((_QWORD *)(v13 + 496), (uint64_t)(a3 + 3));
    *(_BYTE *)(v13 + 544) = 1;
  }
  sub_223F901C8(v9, (char **)__p);
  sub_223F71EDC((uint64_t *)__p, *(_DWORD *)(a2 + 248), v6 != 0, v12, a1 + 120, (uint64_t)&v57);
  v17 = *a3;
  if (*a3)
  {
    v18 = a3[1];
    v19 = (void *)*a3;
    if (v18 != v17)
    {
      do
      {
        v18 -= 464;
        sub_22324A5A0(v18);
      }
      while (v18 != v17);
      v19 = (void *)*a3;
    }
    a3[1] = v17;
    operator delete(v19);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)a3 = v57;
  a3[2] = (uint64_t)v58;
  v58 = 0;
  v57 = 0uLL;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_223F6822C((uint64_t *)&v57, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), (v76 - v75) >> 4, (uint64_t)v75);
  sub_223F6F35C((void **)a3 + 9);
  *(_OWORD *)(a3 + 9) = v57;
  a3[11] = (uint64_t)v58;
  sub_223F68C68(a1, a3);
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
}

void sub_223F681FC(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v2 - 120);
  if (v4)
  {
    *(_QWORD *)(v2 - 112) = v4;
    operator delete(v4);
  }
  sub_223341058(v1);
  _Unwind_Resume(a1);
}

void sub_223F6822C(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  __int128 v14;
  float64x2_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned __int8 v19;
  float v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double *v25;
  double *v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  double v33;
  double v34;
  char v35;
  char v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  char *v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  char *v52;
  void *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  float32x4_t v70;
  char *v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  _QWORD *v84;
  __int128 v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  __int128 v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  void *v100[2];
  _QWORD v101[4];
  __int128 v102;
  char v103;
  _BYTE v104[55];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v7 = a1;
  v108 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_2233408D4(a1, a2);
  if (a2)
  {
    v8 = 0;
    v87 = (uint64_t *)((unint64_t)&v93 | 0xC);
    v84 = v7 + 2;
    v89 = a3;
    v90 = v7;
    v86 = a2;
    while (1)
    {
      v93 = 0;
      *(_QWORD *)&v94 = 0;
      *((_QWORD *)&v94 + 1) = 0x3F80000000000000;
      LOBYTE(v99) = 4;
      HIDWORD(v99) = 2139095039;
      v103 = 0;
      *(_OWORD *)v100 = 0u;
      memset(v101, 0, sizeof(v101));
      LOBYTE(v102) = 0;
      v15 = (float64x2_t *)(a3 + 200 * v8);
      v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v15[2]), v15[3]);
      v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v15), v15[1]);
      v18 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v15[6]), v15[7]);
      v97 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v15[4]), v15[5]);
      v98 = v18;
      v95 = v17;
      v96 = v16;
      v93 = v18.i64[0];
      LODWORD(v94) = v18.i32[2];
      *(_QWORD *)((char *)&v94 + 4) = v97.i64[0];
      HIDWORD(v94) = v97.i32[2];
      LOBYTE(v15) = atomic_load((unsigned __int8 *)&qword_25578F140);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25578F140))
      {
        dword_25578F138 = 1065098332;
        __cxa_guard_release(&qword_25578F140);
      }
      v19 = atomic_load((unsigned __int8 *)&qword_25578F150);
      if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25578F150))
      {
        dword_25578F148 = 1043452119;
        __cxa_guard_release(&qword_25578F150);
      }
      v20 = fabsf(*((float *)&v94 + 3));
      if (v20 <= *(float *)&dword_25578F148)
        v21 = 2;
      else
        v21 = 4;
      if (v20 >= *(float *)&dword_25578F138)
        v21 = 1;
      LOBYTE(v99) = v21;
      v22 = a3 + 200 * v8;
      HIDWORD(v99) = *(_DWORD *)(v22 + 128);
      if (*(_BYTE *)(v22 + 184))
      {
        v23 = v22 + 160;
        v24 = 0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(*(_QWORD *)(a3 + 200 * v8 + 144) - *(_QWORD *)(a3 + 200 * v8 + 136)) >> 3);
        v26 = *(double **)v23;
        v25 = *(double **)(v23 + 8);
        v27 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *(_QWORD *)v23) >> 5);
        if (v24 != v27)
        {
          if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SurfaceDetector.cpp", 419, (uint64_t)"obs.polygons.size() == obs.opSemantics->size()", 46, (uint64_t)"Semantics must be assigned for every polygon extents.", 53, (void (*)(void **))sub_22457406C))
          {
            abort();
          }
          if (!*(_BYTE *)(v23 + 24))
            sub_22324A974();
          v26 = *(double **)v23;
          v25 = *(double **)(v23 + 8);
          v27 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - *(_QWORD *)v23) >> 5);
        }
        if (v25 != v26)
        {
          if (v27 > 0x276276276276276)
            sub_223323BA8();
          v28 = (char *)operator new(104 * v27);
          v91 = v28;
          v92 = &v28[104 * v27];
          while (1)
          {
            while (1)
            {
              v33 = *v26;
              v34 = v26[1];
              v35 = v34 > *v26;
              if (v34 > *v26)
                v33 = v26[1];
              if (v26[2] > v33)
              {
                v33 = v26[2];
                v35 = 2;
              }
              if (v26[3] > v33)
              {
                v33 = v26[3];
                v35 = 3;
              }
              if (v26[4] > v33)
              {
                v33 = v26[4];
                v35 = 4;
              }
              if (v26[5] > v33)
              {
                v33 = v26[5];
                v35 = 5;
              }
              if (v26[6] > v33)
              {
                v33 = v26[6];
                v35 = 6;
              }
              if (v26[7] > v33)
              {
                v33 = v26[7];
                v35 = 7;
              }
              if (v26[8] > v33)
              {
                v33 = v26[8];
                v35 = 8;
              }
              if (v26[9] > v33)
              {
                v33 = v26[9];
                v35 = 9;
              }
              if (v26[10] > v33)
              {
                v33 = v26[10];
                v35 = 10;
              }
              v36 = v26[11] <= v33 ? v35 : 11;
              *(_OWORD *)&v104[39] = *((_OWORD *)v26 + 2);
              v105 = *((_OWORD *)v26 + 3);
              v106 = *((_OWORD *)v26 + 4);
              v107 = *((_OWORD *)v26 + 5);
              *(_OWORD *)&v104[7] = *(_OWORD *)v26;
              *(_OWORD *)&v104[23] = *((_OWORD *)v26 + 1);
              if (v28 >= v92)
                break;
              *v28 = v36;
              v29 = *(_OWORD *)&v104[7];
              *(_OWORD *)(v28 + 24) = *(_OWORD *)&v104[23];
              *(_OWORD *)(v28 + 8) = v29;
              v30 = *(_OWORD *)&v104[39];
              v31 = v105;
              v32 = v106;
              *(_OWORD *)(v28 + 88) = v107;
              *(_OWORD *)(v28 + 72) = v32;
              *(_OWORD *)(v28 + 56) = v31;
              *(_OWORD *)(v28 + 40) = v30;
              v28 += 104;
              v26 += 12;
              if (v26 == v25)
                goto LABEL_61;
            }
            v37 = v91;
            v38 = 0x4EC4EC4EC4EC4EC5 * ((v28 - v91) >> 3) + 1;
            if (v38 > 0x276276276276276)
              sub_223323BA8();
            if (0x9D89D89D89D89D8ALL * ((v92 - v91) >> 3) > v38)
              v38 = 0x9D89D89D89D89D8ALL * ((v92 - v91) >> 3);
            if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v92 - v91) >> 3)) >= 0x13B13B13B13B13BLL)
              v39 = 0x276276276276276;
            else
              v39 = v38;
            if (v39)
            {
              if (v39 > 0x276276276276276)
                sub_223174E94();
              v40 = (char *)operator new(104 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = v105;
            v42 = &v40[8 * ((v28 - v91) >> 3)];
            *(_OWORD *)(v42 + 40) = *(_OWORD *)&v104[39];
            *(_OWORD *)(v42 + 56) = v41;
            v43 = v107;
            *(_OWORD *)(v42 + 72) = v106;
            *(_OWORD *)(v42 + 88) = v43;
            v44 = *(_OWORD *)&v104[23];
            *(_OWORD *)(v42 + 8) = *(_OWORD *)&v104[7];
            *v42 = v36;
            v45 = v42 + 104;
            *(_OWORD *)(v42 + 24) = v44;
            if (v28 == v91)
            {
              v91 = &v40[8 * ((v28 - v91) >> 3)];
              v37 = v28;
              v92 = &v40[104 * v39];
            }
            else
            {
              do
              {
                v46 = *(v28 - 104);
                v28 -= 104;
                *(v42 - 104) = v46;
                v42 -= 104;
                v47 = *(_OWORD *)(v28 + 8);
                *(_OWORD *)(v42 + 24) = *(_OWORD *)(v28 + 24);
                *(_OWORD *)(v42 + 8) = v47;
                v48 = *(_OWORD *)(v28 + 40);
                v49 = *(_OWORD *)(v28 + 56);
                v50 = *(_OWORD *)(v28 + 72);
                *(_OWORD *)(v42 + 88) = *(_OWORD *)(v28 + 88);
                *(_OWORD *)(v42 + 72) = v50;
                *(_OWORD *)(v42 + 56) = v49;
                *(_OWORD *)(v42 + 40) = v48;
              }
              while (v28 != v91);
              v91 = v42;
              v92 = &v40[104 * v39];
              if (!v37)
                goto LABEL_60;
            }
            operator delete(v37);
LABEL_60:
            v28 = v45;
            v26 += 12;
            if (v26 == v25)
            {
LABEL_61:
              v51 = v91;
              v52 = v92;
              v53 = (void *)v101[1];
              v7 = v90;
              if (v101[1])
                goto LABEL_62;
              goto LABEL_63;
            }
          }
        }
        v52 = 0;
        v28 = 0;
        v51 = 0;
        v53 = (void *)v101[1];
        v7 = v90;
        if (v101[1])
LABEL_62:
          operator delete(v53);
LABEL_63:
        v101[1] = v51;
        v101[2] = v28;
        v101[3] = v52;
        a3 = v89;
      }
      v54 = (char *)v100[0];
      if (v100[0])
      {
        v55 = v100[1];
        if (v100[1] != v100[0])
        {
          v56 = (char *)v100[1];
          do
          {
            v58 = (void *)*((_QWORD *)v56 - 3);
            v56 -= 24;
            v57 = v58;
            if (v58)
            {
              *(v55 - 2) = v57;
              operator delete(v57);
            }
            v55 = v56;
          }
          while (v56 != v54);
        }
        operator delete(v54);
      }
      v59 = a3 + 200 * v8;
      v60 = *(_OWORD *)(v59 + 136);
      v59 += 136;
      v61 = v60;
      *(_OWORD *)v100 = v60;
      v62 = *(_QWORD *)(a3 + 200 * v8 + 152);
      v101[0] = v62;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)(v59 + 8) = 0;
      *(_QWORD *)(v59 + 16) = 0;
      v102 = *(_OWORD *)(a5 + 16 * v8);
      if (v103)
      {
        v63 = v7[1];
        v64 = v7[2];
        if (v63 >= v64)
          goto LABEL_75;
LABEL_3:
        v9 = v93;
        *(_DWORD *)(v63 + 8) = v94;
        *(_QWORD *)v63 = v9;
        v10 = *v87;
        *(_DWORD *)(v63 + 20) = *(_DWORD *)(((unint64_t)&v93 | 0xC) + 8);
        *(_QWORD *)(v63 + 12) = v10;
        v11 = v95;
        v12 = v96;
        v13 = v97;
        *(float32x4_t *)(v63 + 72) = v98;
        *(float32x4_t *)(v63 + 56) = v13;
        *(float32x4_t *)(v63 + 40) = v12;
        *(float32x4_t *)(v63 + 24) = v11;
        *(_QWORD *)(v63 + 88) = v99;
        *(_OWORD *)(v63 + 96) = v61;
        *(_QWORD *)(v63 + 112) = v62;
        v100[0] = 0;
        v100[1] = 0;
        v101[0] = 0;
        *(_OWORD *)(v63 + 120) = *(_OWORD *)&v101[1];
        *(_QWORD *)(v63 + 136) = v101[3];
        v14 = v102;
        *(_BYTE *)(v63 + 160) = v103;
        *(_OWORD *)(v63 + 144) = v14;
        v7[1] = v63 + 168;
        if (++v8 == v86)
          return;
      }
      else
      {
        v103 = 1;
        v63 = v7[1];
        v64 = v7[2];
        if (v63 < v64)
          goto LABEL_3;
LABEL_75:
        v65 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v63 - *v7) >> 3);
        v66 = v65 + 1;
        if (v65 + 1 > 0x186186186186186)
          sub_223323BA8();
        v67 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v64 - *v7) >> 3);
        if (2 * v67 > v66)
          v66 = 2 * v67;
        if (v67 >= 0xC30C30C30C30C3)
          v68 = 0x186186186186186;
        else
          v68 = v66;
        *(_QWORD *)&v104[32] = v84;
        if (v68)
        {
          v85 = v61;
          if (v68 > 0x186186186186186)
            sub_223174E94();
          v69 = (char *)operator new(168 * v68);
          v61 = v85;
        }
        else
        {
          v69 = 0;
        }
        v70 = v97;
        v71 = &v69[168 * v65];
        *(float32x4_t *)(v71 + 72) = v98;
        *(float32x4_t *)(v71 + 56) = v70;
        v72 = v95;
        *(float32x4_t *)(v71 + 40) = v96;
        *(_QWORD *)v71 = v93;
        *((_DWORD *)v71 + 2) = v94;
        *(_QWORD *)(v71 + 12) = *v87;
        *((_DWORD *)v71 + 5) = *(_DWORD *)(((unint64_t)&v93 | 0xC) + 8);
        v73 = v101[3];
        *((_QWORD *)v71 + 11) = v99;
        *(_QWORD *)v104 = v69;
        *(_QWORD *)&v104[8] = v71;
        *(float32x4_t *)(v71 + 24) = v72;
        *((_OWORD *)v71 + 6) = v61;
        *((_QWORD *)v71 + 14) = v62;
        v100[1] = 0;
        v101[0] = 0;
        v100[0] = 0;
        *(_OWORD *)(v71 + 120) = *(_OWORD *)&v101[1];
        *((_QWORD *)v71 + 17) = v73;
        memset(&v101[1], 0, 24);
        v71[160] = v103;
        *((_OWORD *)v71 + 9) = v102;
        *(_QWORD *)&v104[16] = v71 + 168;
        *(_QWORD *)&v104[24] = &v69[168 * v68];
        sub_223340A20(v90, v104);
        v74 = v90[1];
        v75 = *(_QWORD *)&v104[8];
        while (1)
        {
          v77 = *(_QWORD *)&v104[16];
          if (*(_QWORD *)&v104[16] == v75)
            break;
          *(_QWORD *)&v104[16] -= 168;
          v78 = *(void **)(v77 - 48);
          if (v78)
          {
            *(_QWORD *)(v77 - 40) = v78;
            operator delete(v78);
          }
          v79 = *(_QWORD *)(v77 - 72);
          if (v79)
          {
            v80 = *(_QWORD *)(v77 - 64);
            v76 = *(void **)(v77 - 72);
            if (v80 != v79)
            {
              v81 = *(_QWORD *)(v77 - 64);
              do
              {
                v83 = *(void **)(v81 - 24);
                v81 -= 24;
                v82 = v83;
                if (v83)
                {
                  *(_QWORD *)(v80 - 16) = v82;
                  operator delete(v82);
                }
                v80 = v81;
              }
              while (v81 != v79);
              v76 = *(void **)(v77 - 72);
            }
            *(_QWORD *)(v77 - 64) = v79;
            operator delete(v76);
          }
        }
        if (*(_QWORD *)v104)
          operator delete(*(void **)v104);
        a3 = v89;
        v7 = v90;
        v90[1] = v74;
        if (++v8 == v86)
          return;
      }
    }
  }
}

void sub_223F68BAC(_Unwind_Exception *a1)
{
  void **v1;

  sub_223322A30(v1);
  _Unwind_Resume(a1);
}

void sub_223F68BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_223F6F2D8(&a25);
  sub_223322A30(a19);
  _Unwind_Resume(a1);
}

void sub_223F68C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  if (v25)
    operator delete(v25);
  sub_223F6F2D8(&a25);
  sub_223322A30(a19);
  _Unwind_Resume(a1);
}

void sub_223F68C68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  void *v16;
  void *__p;
  uint64_t *v18;
  _OWORD *v19;

  v4 = *(_QWORD *)(a1 + 200);
  v5 = (uint64_t *)(v4 + 72);
  if (v4)
    v6 = v5 == a2;
  else
    v6 = 1;
  if (!v6)
    sub_223331ABC(v5, *a2, a2[1], 0x34F72C234F72C235 * ((a2[1] - *a2) >> 4));
  sub_223F02C68(*(_QWORD *)(a1 + 184), a2, &__p);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(_DWORD *)(v7 + 224);
      v19 = (_OWORD *)v7;
      *((_DWORD *)sub_2238F1DD0(a1 + 120, v7, (uint64_t)&unk_2245BA939, &v19) + 8) = v9;
      v7 += 464;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 200);
  if (v10 && (void **)(v10 + 96) != &__p)
    sub_223332C3C(v10 + 96, (uint64_t *)__p, v18, 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (_BYTE *)__p) >> 3));
  v11 = (uint64_t *)__p;
  if (__p)
  {
    v12 = v18;
    v13 = __p;
    if (v18 != __p)
    {
      v14 = v18;
      do
      {
        v16 = (void *)*(v14 - 3);
        v14 -= 3;
        v15 = v16;
        if (v16)
        {
          *(v12 - 2) = (uint64_t)v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = __p;
    }
    v18 = v11;
    operator delete(v13);
  }
}

void sub_223F68DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_223F68DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22317C838((void **)va);
  _Unwind_Resume(a1);
}

void sub_223F68DD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void **v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  char v26;
  char v27;
  void *v28[3];

  sub_223F364EC(a2, *(unsigned __int8 ***)(a2 + 344), *(_QWORD *)(a2 + 352), 1, v28);
  v9[0] = (void **)(0x8F5C28F5C28F5C29 * (((char *)v28[1] - (char *)v28[0]) >> 3));
  v9[1] = (void **)v28[0];
  v9[2] = (void **)&off_24EC64998;
  v9[3] = (void **)&off_24EC64920;
  v6 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  v11 = v6;
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_DWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 76);
  v7 = *(_OWORD *)(a2 + 88);
  v21 = *(_OWORD *)(a2 + 168);
  v22 = *(_OWORD *)(a2 + 184);
  v23 = *(_OWORD *)(a2 + 200);
  v24 = *(_OWORD *)(a2 + 216);
  v8 = *(_OWORD *)(a2 + 104);
  v16 = v7;
  v17 = v8;
  v18 = *(_OWORD *)(a2 + 120);
  v19 = *(_OWORD *)(a2 + 136);
  v20 = *(_OWORD *)(a2 + 152);
  v25 = 15;
  v26 = 0;
  v27 = 0;
  sub_223F67C94(a1, (uint64_t)v9, a3);
  v9[0] = v28;
  sub_223F3A870(v9);
}

void sub_223F68F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_223F3A870((void ***)va);
  _Unwind_Resume(a1);
}

void sub_223F68F20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  void *v28;
  __int128 v29;
  void *v30;
  __int128 v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;
  void **v45;
  float32x4_t v46;
  float32x4_t v47;
  unint64_t *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  _BYTE *v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  void *v66;
  uint64_t v67;
  BOOL v68;
  void **v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  float32x4_t v96;
  float32x4_t v97;
  uint64_t v98;
  void **v99;
  void *v100;
  uint64_t v101;
  BOOL v102;
  void **v103;
  void **v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  char *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  void **v118;
  void *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  unsigned int v139;
  unsigned int v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  int v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  int v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166;
  uint64_t v167;
  uint64_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  void *v177;
  size_t v178;
  int v179;
  uint64_t v181;
  int v182;
  char v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  void *v200;
  __int128 v201;
  uint64_t (**v202)();
  char v203;
  __int128 v204;
  uint64_t v205;
  void *v206;
  __int128 v207;
  char v208;
  char v209[16];
  __int128 v210;
  __int128 v211;
  __int128 v212;
  void *v213;
  int v214;
  uint64_t v215;
  __int128 v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  __int128 v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  char v229;
  __int128 v230;
  uint64_t v231;
  void *v232;
  __int128 v233;
  char v234;
  void *v235[2];
  _BYTE v236[32];
  _BYTE v237[48];
  void *v238;
  _BYTE v239[32];
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  uint64_t (***v244)();
  char v245;
  int v246;
  char v247;
  char v248;
  uint64_t (**v249)();
  _BYTE v250[24];
  _BYTE v251[40];
  __int128 v252;
  _BYTE v253[64];
  float32x4_t v254;
  _BYTE v255[80];
  void *v256;
  __int128 *v257;
  uint64_t v258;
  char v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  _BYTE v263[56];
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  __int128 v272;
  uint64_t v273;
  __int128 v274;
  uint64_t v275;
  char v276;
  __int128 v277;
  uint64_t v278;
  void *v279;
  __int128 v280;
  char v281;
  __int128 v282;
  uint64_t v283;
  __int128 v284;
  uint64_t v285;
  void **v286[4];
  void *v287;
  _BYTE v288[28];
  size_t v289;
  void *v290;
  uint64_t v291;
  __int128 v292;
  void *v293;
  float32x4_t v294;
  __int128 v295;
  __int128 v296;
  void *v297[6];
  unint64_t v298;
  uint64_t (**v299)();
  __int128 v300;
  __int128 v301;
  __int128 v302;
  _BYTE v303[24];
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  void *v314;
  __int128 v315;
  uint64_t (**v316)();
  uint64_t (**v317)();
  __int128 v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  int v322;
  uint64_t v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  char v333;
  _BYTE v334[24];
  __int128 v335;
  uint64_t v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  _OWORD v340[2];
  void *v341;
  void *v342;
  uint64_t v343;
  __int128 v344;
  void *v345;
  __int128 v346;
  void *v347[4];
  uint64_t v348;
  _OWORD v349[3];
  void *v350;
  _BYTE v351[28];
  size_t v352;
  __int128 v353;
  __int128 v354;
  void *v355;
  __int128 v356;
  __int128 v357;
  _BYTE v358[32];
  float32x4_t v359;
  float32x4_t v360;
  __int128 v361;
  __int128 v362;
  _BYTE v363[48];
  __int128 v364;
  __int128 v365;
  void *v366[3];
  _QWORD v367[4];
  uint64_t v368;
  _BYTE v369[28];
  __int128 v370;
  uint64_t v371;
  __int128 v372;
  void *v373;
  __int128 v374;
  uint64_t (**v375)();
  uint64_t (**v376)();
  __int128 v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  uint64_t v392;

  v392 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 656))
  {
    sub_223F6E470((uint64_t)v209, a2);
    if (!*(_BYTE *)(a2 + 656))
      sub_22324A974();
    v5 = *(_DWORD *)(a2 + 664);
    v179 = *(_DWORD *)(a2 + 668);
    v295 = v211;
    v296 = v210;
    v357 = v212;
    v6 = v214;
    v7 = v215;
    v177 = v213;
    v8 = v216;
    v169 = v217;
    v170 = v219;
    v171 = v218;
    v172 = v221;
    v173 = v220;
    v175 = v222;
    v176 = v224;
    v174 = v223;
    memset(v351, 0, 17);
    v350 = 0;
    memset(&v349[1], 0, 32);
    LOBYTE(v260) = 0;
    v351[24] = 0;
    v298 = 0;
    *(_QWORD *)&v361 = 0;
    sub_223316930(&v352, &v361, (void **)&v298, 1, (void **)&v260, 1, 0);
    v355 = 0;
    v356 = 0uLL;
    memset(v288, 0, 17);
    v287 = 0;
    memset(v286, 0, sizeof(v286));
    LOBYTE(v260) = 0;
    v288[24] = 0;
    v298 = 0;
    *(_QWORD *)&v361 = 0;
    sub_223316930(&v289, &v361, (void **)&v298, 1, (void **)&v260, 1, 0);
    v293 = 0;
    v294 = 0uLL;
    v284 = 0uLL;
    v285 = 0;
    *(_QWORD *)&v260 = &off_24EC64998;
    *((_QWORD *)&v260 + 1) = &off_24EC64920;
    v261 = v210;
    v262 = v211;
    *(_OWORD *)v263 = v212;
    *(_QWORD *)&v263[16] = v213;
    *(_DWORD *)&v263[24] = v214;
    *(_QWORD *)&v263[28] = v215;
    *(_OWORD *)&v263[40] = v216;
    v267 = v220;
    v266 = v219;
    v265 = v218;
    v264 = v217;
    v271 = v224;
    v270 = v223;
    v269 = v222;
    v268 = v221;
    LOBYTE(v272) = 0;
    v276 = 0;
    if (v229)
    {
      v272 = v225;
      v225 = 0uLL;
      v274 = v227;
      v273 = v226;
      v275 = v228;
      v226 = 0;
      v227 = 0uLL;
      v228 = 0;
      v276 = 1;
    }
    LOBYTE(v277) = 0;
    v281 = 0;
    if (v234)
    {
      v277 = v230;
      v9 = v231;
      v10 = v232;
      v232 = 0;
      v231 = 0;
      v230 = 0uLL;
      v278 = v9;
      v279 = v10;
      v280 = v233;
      v233 = 0uLL;
      v281 = 1;
    }
    v11 = a2 + 500;
    v181 = a2;
    v168 = v7;
    sub_223F66310((uint64_t)&v260);
    *(_OWORD *)v297 = *(_OWORD *)(a2 + 344);
    v178 = a2 + 344;
    v297[2] = *(void **)(a2 + 360);
    v335 = *(_OWORD *)(a2 + 368);
    v336 = *(_QWORD *)(a2 + 384);
    v12 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)v347 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)&v347[2] = v12;
    *(_QWORD *)v358 = 0x100000000000001;
    *(_DWORD *)&v358[8] = 256;
    sub_223F73444((uint64_t)v297, (uint64_t *)&v335, (uint64_t)v347, (uint64_t)v358, (uint64_t)&v337, 1.5);
    v167 = a2 + 344;
    *(_OWORD *)v358 = v337;
    *(_OWORD *)&v358[16] = v338;
    v359.i64[0] = v339;
    *(_OWORD *)v334 = *(_OWORD *)(a2 + 368);
    *(_QWORD *)&v334[16] = *(_QWORD *)(a2 + 384);
    sub_223F71678((unsigned __int8 **)v358, (uint64_t)v334, (uint64_t)&v249);
    v13 = v341;
    v14 = v342;
    v342 = 0;
    v341 = 0;
    v365 = v344;
    v15 = v345;
    v16 = v346;
    v345 = 0;
    v346 = 0uLL;
    v361 = 0u;
    v362 = 0u;
    *(_OWORD *)&v363[20] = *(_OWORD *)((char *)v340 + 12);
    *(_OWORD *)&v363[8] = v340[0];
    *(_QWORD *)v363 = 0;
    *(_QWORD *)&v363[40] = v13;
    *(_QWORD *)&v364 = v14;
    *((_QWORD *)&v364 + 1) = v343;
    v366[0] = v15;
    *(_OWORD *)&v366[1] = v16;
    if (DWORD1(v340[0]))
      v17 = LODWORD(v340[0]) == 0;
    else
      v17 = 1;
    if (v17)
      v18 = 0;
    else
      v18 = *(_QWORD *)&v363[8];
    v19 = *(_QWORD *)&v363[16];
    if (HIDWORD(v18) * *(_DWORD *)&v363[20] == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v15 = v366[0];
      v20 = v366[1];
    }
    else
    {
      v20 = (_BYTE *)v16;
    }
    *(_QWORD *)&v361 = v14;
    *((_QWORD *)&v361 + 1) = v18;
    *(_QWORD *)&v362 = v19;
    *((_QWORD *)&v362 + 1) = (v20 - (_BYTE *)v15) >> 4;
    v29 = v252;
    v252 = 0uLL;
    v372 = *(_OWORD *)&v253[8];
    v30 = *(void **)&v253[24];
    v31 = *(_OWORD *)&v253[32];
    memset(&v253[24], 0, 24);
    *(_QWORD *)v363 = v15;
    v368 = 0;
    memset(v367, 0, sizeof(v367));
    *(_OWORD *)&v369[12] = *(_OWORD *)&v251[20];
    *(_OWORD *)v369 = *(_OWORD *)&v251[8];
    v370 = v29;
    v371 = *(_QWORD *)v253;
    v373 = v30;
    v374 = v31;
    if (*(_DWORD *)&v251[12])
      v32 = *(_DWORD *)&v251[8] == 0;
    else
      v32 = 1;
    if (v32)
      v33 = 0;
    else
      v33 = *(_QWORD *)v369;
    v34 = *(_QWORD *)&v369[8];
    if (HIDWORD(v33) * *(_DWORD *)&v369[12] == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v30 = v373;
      v36 = v374;
      v35 = *(void **)&v253[24];
    }
    else
    {
      v35 = 0;
      v36 = v31;
    }
    v367[0] = *((_QWORD *)&v29 + 1);
    v367[1] = v33;
    v367[2] = v34;
    v367[3] = 0x6DB6DB6DB6DB6DB7 * ((v36 - (uint64_t)v30) >> 4);
    v368 = (uint64_t)v30;
    v375 = &off_24EC64998;
    v37 = *(_OWORD *)(v181 + 456);
    v377 = *(_OWORD *)(v181 + 440);
    v378 = v37;
    v379 = *(_OWORD *)(v181 + 472);
    v38 = *(_QWORD *)(v181 + 488);
    v376 = &off_24EC64920;
    v380 = v38;
    v381 = *(_DWORD *)(v181 + 496);
    v382 = *(_QWORD *)v11;
    v383 = *(_OWORD *)(v181 + 512);
    v39 = *(_OWORD *)(v11 + 140);
    v390 = *(_OWORD *)(v11 + 124);
    v391 = v39;
    v40 = *(_OWORD *)(v11 + 108);
    v388 = *(_OWORD *)(v11 + 92);
    v389 = v40;
    v41 = *(_OWORD *)(v11 + 76);
    v386 = *(_OWORD *)(v11 + 60);
    v387 = v41;
    v42 = *(_OWORD *)(v11 + 44);
    v384 = *(_OWORD *)(v11 + 28);
    v385 = v42;
    if (v35)
    {
      *(_QWORD *)&v253[32] = v35;
      operator delete(v35);
    }
    if (*((_QWORD *)&v252 + 1))
      free(*((void **)&v252 + 1));
    if (v345)
    {
      *(_QWORD *)&v346 = v345;
      operator delete(v345);
    }
    if (v342)
      free(v342);
    v249 = &off_24EC64998;
    *(_QWORD *)v250 = &off_24EC64920;
    *(_OWORD *)&v250[8] = v261;
    *(_OWORD *)v251 = v262;
    *(_OWORD *)&v251[16] = *(_OWORD *)v263;
    *(_QWORD *)&v251[32] = *(_QWORD *)&v263[16];
    LODWORD(v252) = *(_DWORD *)&v263[24];
    *(_QWORD *)((char *)&v252 + 4) = *(_QWORD *)&v263[28];
    *(_OWORD *)v253 = *(_OWORD *)&v263[40];
    *(float32x4_t *)&v253[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v264), v265);
    *(float32x4_t *)&v253[32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v266), v267);
    *(float32x4_t *)&v253[48] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v268), v269);
    v254 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v270), v271);
    *(_DWORD *)v255 = v5;
    memset(&v255[8], 0, 64);
    if (v276)
    {
      *(_QWORD *)&v255[8] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v272 + 1) - v272) >> 2);
      *(_QWORD *)&v255[16] = v272;
      *(_QWORD *)&v255[24] = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v274 + 1) - v274) >> 2);
      *(_QWORD *)&v255[32] = v274;
    }
    if (v281)
    {
      *(_QWORD *)&v255[40] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v277 + 1) - v277) >> 3);
      *(_QWORD *)&v255[48] = v277;
      *(_QWORD *)&v255[56] = 0x8E38E38E38E38E39 * ((uint64_t)(v280 - (_QWORD)v279) >> 2);
      *(_QWORD *)&v255[64] = v279;
    }
    v43 = *(_QWORD *)(a1 + 72);
    sub_223F5BFB8((uint64_t)&v298, (uint64_t)&v361);
    sub_223F5C0EC((uint64_t)&v307, (uint64_t)v367);
    v316 = &off_24EC64998;
    v317 = &off_24EC64920;
    v318 = v377;
    v319 = v378;
    v320 = v379;
    v321 = v380;
    v322 = v381;
    v323 = v382;
    v324 = v383;
    v327 = v386;
    v328 = v387;
    v325 = v384;
    v326 = v385;
    v331 = v390;
    v332 = v391;
    v329 = v388;
    v330 = v389;
    v333 = 1;
    sub_223F5B54C(v43, (uint64_t)&v249, (uint64_t)&v298, &v337);
    v44 = a3;
    if (v333)
    {
      v316 = &off_24EC64998;
      if (v314)
      {
        *(_QWORD *)&v315 = v314;
        operator delete(v314);
      }
      if ((_QWORD)v312)
        free((void *)v312);
      *(_QWORD *)&v312 = 0;
      if (*((_QWORD *)&v305 + 1))
      {
        *(_QWORD *)&v306 = *((_QWORD *)&v305 + 1);
        operator delete(*((void **)&v305 + 1));
      }
      if (*(_QWORD *)&v303[16])
        free(*(void **)&v303[16]);
      *(_QWORD *)&v303[16] = 0;
    }
    sub_223F70B60((uint64_t *)&v337, (uint64_t)&v282);
    v45 = *(void ***)(a1 + 200);
    if (v45)
      sub_223EDBD98(v45, (uint64_t)&v337);
    if (*(_BYTE *)(a1 + 13))
    {
      v46 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 60)), *(float64x2_t *)(v11 + 76));
      *(float32x4_t *)v236 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 28)), *(float64x2_t *)(v11 + 44));
      *(float32x4_t *)&v236[16] = v46;
      v47 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 124)), *(float64x2_t *)(v11 + 140));
      v48 = *(unint64_t **)(a1 + 80);
      *(float32x4_t *)v237 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 92)), *(float64x2_t *)(v11 + 108));
      *(float32x4_t *)&v237[16] = v47;
      memset(v297, 0, 24);
      *(_OWORD *)&v358[8] = *(_OWORD *)&v367[1];
      *(_QWORD *)v358 = v367[0];
      *(_QWORD *)&v358[24] = v367[3];
      v359.i64[0] = v368;
      sub_223F53988(v48, (uint64_t *)v358, *(unint64_t *)&v255[8], *(uint64_t **)&v255[16], *(uint64_t *)&v255[24], *(float32x4_t **)&v255[32], (float32x2_t *)v236, v181 + 424, &v256, v297, 1);
      v49 = (unsigned __int8 *)v297[0];
      v50 = (unsigned __int8 *)v297[1];
      if (v297[0] != v297[1])
      {
        memset(v347, 0, sizeof(v347));
        LODWORD(v348) = 1065353216;
        do
        {
          sub_2236EA858((uint64_t)v347, v49, v49);
          ++v49;
        }
        while (v49 != v50);
        v51 = (_BYTE *)v361;
        v52 = DWORD1(v362);
        *(_QWORD *)v334 = v347;
        if (DWORD2(v361))
          v53 = HIDWORD(v361) == 0;
        else
          v53 = 1;
        if (!v53)
        {
          LODWORD(v335) = 0;
          DWORD1(v335) = DWORD2(v361) - 1;
          LODWORD(v336) = DWORD1(v362);
          v54 = HIDWORD(v361) - 1;
          DWORD2(v335) = v362;
          HIDWORD(v335) = HIDWORD(v361) - 1;
          if (HIDWORD(v361) != 1)
          {
            do
            {
              sub_223F6E760((uint64_t)&v335, (_QWORD **)v334, v51);
              v51 += v52;
              --v54;
            }
            while (v54);
          }
          sub_223F6E760((uint64_t)&v335, (_QWORD **)v334, v51);
        }
        v55 = v347[2];
        if (v347[2])
        {
          do
          {
            v56 = (_QWORD *)*v55;
            operator delete(v55);
            v55 = v56;
          }
          while (v56);
        }
        v57 = v347[0];
        v347[0] = 0;
        if (v57)
          operator delete(v57);
        v49 = (unsigned __int8 *)v297[0];
      }
      if (v49)
      {
        v297[1] = v49;
        operator delete(v49);
      }
      sub_223F6E95C((char **)&v282, *((uint64_t *)&v282 + 1), (__int128 *)v256, v257, 0x8F5C28F5C28F5C29 * (((char *)v257 - (_BYTE *)v256) >> 3));
      *(_QWORD *)v236 = &v256;
      sub_223F3A870((void ***)v236);
    }
    if (*(_BYTE *)(a1 + 12))
    {
      v58 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 60)), *(float64x2_t *)(v11 + 76));
      *(float32x4_t *)v358 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 28)), *(float64x2_t *)(v11 + 44));
      *(float32x4_t *)&v358[16] = v58;
      v59 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 124)), *(float64x2_t *)(v11 + 140));
      v60 = *(_QWORD *)(a1 + 112);
      v359 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 92)), *(float64x2_t *)(v11 + 108));
      v360 = v59;
      LOBYTE(v347[0]) = 0;
      LOBYTE(v347[3]) = 0;
      sub_223FA2984(v60, (float32x2_t *)(v181 + 424), (float32x4_t *)v358, (uint64_t)v347, (uint64_t)v236);
      if (LOBYTE(v347[3]) && v347[0])
      {
        v347[1] = v347[0];
        operator delete(v347[0]);
      }
      v61 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 60)), *(float64x2_t *)(v11 + 76));
      *(float32x4_t *)v358 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 28)), *(float64x2_t *)(v11 + 44));
      *(float32x4_t *)&v358[16] = v61;
      v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 124)), *(float64x2_t *)(v11 + 140));
      v63 = *(_QWORD *)(a1 + 112);
      v64 = *(_QWORD *)(a1 + 88);
      v359 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 92)), *(float64x2_t *)(v11 + 108));
      v360 = v62;
      v335 = *(_OWORD *)v178;
      v336 = *(_QWORD *)(v178 + 16);
      *(_OWORD *)&v347[1] = *(_OWORD *)&v367[1];
      v347[0] = (void *)v367[0];
      v347[3] = (void *)v367[3];
      v348 = v368;
      *(_OWORD *)&v297[1] = *(_OWORD *)&v236[8];
      v297[0] = *(void **)v236;
      v297[3] = *(void **)&v236[24];
      v297[4] = *(void **)v237;
      sub_223F727C4(v63, v64, (unsigned int *)(v181 + 424), (float32x2_t *)v358, (uint64_t)&v335, (uint64_t)v347, (__int128 *)v297, &v256);
      sub_223F6E95C((char **)&v282, *((uint64_t *)&v282 + 1), (__int128 *)v256, v257, 0x8F5C28F5C28F5C29 * (((char *)v257 - (_BYTE *)v256) >> 3));
      *(_OWORD *)v288 = *(_OWORD *)&v237[8];
      *(_OWORD *)&v288[12] = *(_OWORD *)&v237[20];
      v292 = *(_OWORD *)&v239[8];
      v289 = *(_QWORD *)&v237[40];
      if (v290)
        free(v290);
      v65 = (void **)v238;
      v290 = v238;
      v291 = *(_QWORD *)v239;
      *(_QWORD *)&v237[40] = 0;
      v238 = 0;
      if (v293)
      {
        v294.i64[0] = (uint64_t)v293;
        operator delete(v293);
        v65 = (void **)v290;
      }
      v66 = *(void **)&v239[24];
      v293 = *(void **)&v239[24];
      v67 = v240.i64[0];
      v294 = v240;
      v240 = 0uLL;
      *(_QWORD *)&v239[24] = 0;
      if (*(_DWORD *)&v288[4])
        v68 = *(_DWORD *)v288 == 0;
      else
        v68 = 1;
      if (v68)
        v69 = 0;
      else
        v69 = *(void ***)v288;
      v70 = *(void ***)&v288[8];
      if (HIDWORD(v69) * *(_DWORD *)&v288[12] == -1)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v66 = v293;
        v71 = v294.i64[0];
      }
      else
      {
        v71 = v67;
      }
      v286[0] = v65;
      v286[1] = v69;
      v286[2] = v70;
      v286[3] = (void **)((v71 - (uint64_t)v66) >> 4);
      v287 = v66;
      *(_QWORD *)v334 = &v256;
      sub_223F3A870((void ***)v334);
      if (*(_QWORD *)&v239[24])
      {
        v240.i64[0] = *(_QWORD *)&v239[24];
        operator delete(*(void **)&v239[24]);
      }
      if (v238)
        free(v238);
    }
    *(_OWORD *)v351 = *(_OWORD *)&v363[8];
    *(_OWORD *)&v351[12] = *(_OWORD *)&v363[20];
    v354 = v365;
    v352 = *(_QWORD *)&v363[40];
    if ((_QWORD)v353)
      free((void *)v353);
    v72 = v364;
    v353 = v364;
    *(_QWORD *)&v363[40] = 0;
    *(_QWORD *)&v364 = 0;
    if (v355)
    {
      *(_QWORD *)&v356 = v355;
      operator delete(v355);
      v72 = v353;
    }
    v73 = v366[0];
    v355 = v366[0];
    v74 = v366[1];
    v356 = *(_OWORD *)&v366[1];
    memset(v366, 0, sizeof(v366));
    if (*(_DWORD *)&v351[4])
      v75 = *(_DWORD *)v351 == 0;
    else
      v75 = 1;
    if (v75)
      v76 = 0;
    else
      v76 = *(_QWORD *)v351;
    v77 = *(_QWORD *)&v351[8];
    if (HIDWORD(v76) * *(_DWORD *)&v351[12] == -1)
    {
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v73 = v355;
      v78 = (_BYTE *)v356;
    }
    else
    {
      v78 = v74;
    }
    *(_QWORD *)&v349[1] = v72;
    *((_QWORD *)&v349[1] + 1) = v76;
    v79 = v78 - v73;
    *(_QWORD *)&v349[2] = v77;
    *((_QWORD *)&v349[2] + 1) = v79 >> 4;
    v350 = v73;
    v80 = *(_QWORD *)(a1 + 200);
    if (v80)
    {
      *(_QWORD *)v334 = v72;
      *(_OWORD *)&v334[8] = *(_OWORD *)((char *)&v349[1] + 8);
      sub_223EDC1EC(v80, (uint64_t)v334, (v79 >> 4));
      v81 = *(_QWORD *)(a1 + 200);
      if (*(_BYTE *)(v81 + 384))
      {
        *(_QWORD *)&v349[0] = v178;
        *((_QWORD *)&v349[0] + 1) = v81 + 312;
        sub_223EE49B8((size_t *)v349);
      }
      else
      {
        if (*(_DWORD *)(v181 + 356))
          v82 = *(_DWORD *)(v181 + 352) == 0;
        else
          v82 = 1;
        v83 = *(_QWORD *)(v181 + 352);
        if (v82)
          v83 = 0;
        v84 = v83 << 32;
        if (!HIDWORD(v83))
          v84 = 0;
        *(_QWORD *)(v81 + 312) = v83;
        *(_QWORD *)(v81 + 320) = v84 | ((_DWORD)v83 != 0);
        *(_BYTE *)(v81 + 328) = 0;
        *(_BYTE *)(v81 + 336) = 0;
        *(_QWORD *)&v349[0] = v84 | ((_DWORD)v83 != 0);
        if ((HIDWORD(v84) & (HIDWORD(v84) - 1)) != 0)
          v85 = 1;
        else
          v85 = HIDWORD(v84);
        sub_223F6F140((size_t *)(v81 + 344), v178, (void **)v349, 1, v85);
        *(_BYTE *)(v81 + 384) = 1;
      }
      sub_223F669AC(*(_QWORD *)(a1 + 200) + 392, (char **)(v167 + 48));
    }
    if (v341)
    {
      v342 = v341;
      operator delete(v341);
    }
    *(_QWORD *)v236 = (char *)v340 + 8;
    sub_223F45A94((void ***)v236);
    if (*((_QWORD *)&v338 + 1))
    {
      v339 = *((_QWORD *)&v338 + 1);
      operator delete(*((void **)&v338 + 1));
    }
    if ((_QWORD)v337)
    {
      *((_QWORD *)&v337 + 1) = v337;
      operator delete((void *)v337);
    }
    v375 = &off_24EC64998;
    if (v373)
    {
      *(_QWORD *)&v374 = v373;
      operator delete(v373);
    }
    if (*((_QWORD *)&v370 + 1))
      free(*((void **)&v370 + 1));
    *((_QWORD *)&v370 + 1) = 0;
    if (v366[0])
    {
      v366[1] = v366[0];
      operator delete(v366[0]);
    }
    if ((_QWORD)v364)
      free((void *)v364);
    v86 = v284;
    if ((_QWORD)v284)
    {
      v87 = *((_QWORD *)&v284 + 1);
      v88 = (void *)v284;
      if (*((_QWORD *)&v284 + 1) != (_QWORD)v284)
      {
        do
        {
          if (*(_BYTE *)(v87 - 16))
          {
            v90 = *(void **)(v87 - 40);
            if (v90)
            {
              *(_QWORD *)(v87 - 32) = v90;
              operator delete(v90);
            }
          }
          v91 = *(_QWORD *)(v87 - 64);
          if (v91)
          {
            v92 = *(_QWORD *)(v87 - 56);
            v89 = *(void **)(v87 - 64);
            if (v92 != v91)
            {
              v93 = *(_QWORD *)(v87 - 56);
              do
              {
                v95 = *(void **)(v93 - 24);
                v93 -= 24;
                v94 = v95;
                if (v95)
                {
                  *(_QWORD *)(v92 - 16) = v94;
                  operator delete(v94);
                }
                v92 = v93;
              }
              while (v93 != v91);
              v89 = *(void **)(v87 - 64);
            }
            *(_QWORD *)(v87 - 56) = v91;
            operator delete(v89);
          }
          v87 -= 200;
        }
        while (v87 != v86);
        v88 = (void *)v284;
      }
      *((_QWORD *)&v284 + 1) = v86;
      operator delete(v88);
    }
    v284 = v282;
    v285 = v283;
    v283 = 0;
    v282 = 0uLL;
    v298 = (unint64_t)&v282;
    sub_223F3A870((void ***)&v298);
    if (v281)
    {
      if (v279)
      {
        *(_QWORD *)&v280 = v279;
        operator delete(v279);
      }
      if ((_QWORD)v277)
      {
        *((_QWORD *)&v277 + 1) = v277;
        operator delete((void *)v277);
      }
    }
    if (v276)
    {
      if ((_QWORD)v274)
      {
        *((_QWORD *)&v274 + 1) = v274;
        operator delete((void *)v274);
      }
      if ((_QWORD)v272)
      {
        *((_QWORD *)&v272 + 1) = v272;
        operator delete((void *)v272);
      }
    }
    *(_QWORD *)&v260 = &off_24EC64998;
    if (!LODWORD(v286[1]) || !HIDWORD(v286[1]))
    {
      v96 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 60)), *(float64x2_t *)(v11 + 76));
      *(float32x4_t *)v236 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 28)), *(float64x2_t *)(v11 + 44));
      *(float32x4_t *)&v236[16] = v96;
      v97 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 124)), *(float64x2_t *)(v11 + 140));
      v98 = *(_QWORD *)(a1 + 112);
      *(float32x4_t *)v237 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 92)), *(float64x2_t *)(v11 + 108));
      *(float32x4_t *)&v237[16] = v97;
      LOBYTE(v256) = 0;
      v259 = 0;
      sub_223FA2984(v98, (float32x2_t *)(v181 + 424), (float32x4_t *)v236, (uint64_t)&v256, (uint64_t)&v249);
      *(_OWORD *)v288 = *(_OWORD *)&v251[8];
      *(_OWORD *)&v288[12] = *(_OWORD *)&v251[20];
      v292 = *(_OWORD *)&v253[8];
      v289 = v252;
      if (v290)
        free(v290);
      v99 = (void **)*((_QWORD *)&v252 + 1);
      v290 = (void *)*((_QWORD *)&v252 + 1);
      v291 = *(_QWORD *)v253;
      v252 = 0uLL;
      if (v293)
      {
        v294.i64[0] = (uint64_t)v293;
        operator delete(v293);
        v99 = (void **)v290;
      }
      v100 = *(void **)&v253[24];
      v293 = *(void **)&v253[24];
      v101 = *(_QWORD *)&v253[32];
      v294 = *(float32x4_t *)&v253[32];
      memset(&v253[24], 0, 24);
      if (*(_DWORD *)&v288[4])
        v102 = *(_DWORD *)v288 == 0;
      else
        v102 = 1;
      if (v102)
        v103 = 0;
      else
        v103 = *(void ***)v288;
      v104 = *(void ***)&v288[8];
      if (HIDWORD(v103) * *(_DWORD *)&v288[12] == -1)
      {
        if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
        {
          abort();
        }
        v100 = v293;
        v106 = v294.i64[0];
        v105 = *(void **)&v253[24];
      }
      else
      {
        v105 = 0;
        v106 = v101;
      }
      v286[0] = v99;
      v286[1] = v103;
      v286[2] = v104;
      v286[3] = (void **)((v106 - (uint64_t)v100) >> 4);
      v287 = v100;
      if (v105)
      {
        *(_QWORD *)&v253[32] = v105;
        operator delete(v105);
      }
      if (*((_QWORD *)&v252 + 1))
        free(*((void **)&v252 + 1));
      *((_QWORD *)&v252 + 1) = 0;
      if (v259 && v256)
      {
        v257 = (__int128 *)v256;
        operator delete(v256);
      }
    }
    v111 = *(_QWORD *)(a1 + 176);
    if (v111)
    {
      v112 = *(unsigned __int8 **)(a1 + 160);
      v113 = (unsigned __int8 *)(a1 + 168);
      if (v112 != (unsigned __int8 *)(a1 + 168))
      {
        do
        {
          v133 = *(_QWORD *)(a1 + 112);
          v134 = *(_QWORD *)(v133 + 8);
          v137 = *(uint64_t **)(v134 + 8);
          v136 = (uint64_t *)(v134 + 8);
          v135 = v137;
          if (!v137)
            goto LABEL_288;
          v138 = v136;
          do
          {
            v139 = *((unsigned __int8 *)v135 + 32);
            v140 = v112[32];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 33);
            v140 = v112[33];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 34);
            v140 = v112[34];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 35);
            v140 = v112[35];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 36);
            v140 = v112[36];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 37);
            v140 = v112[37];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 38);
            v140 = v112[38];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 39);
            v140 = v112[39];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 40);
            v140 = v112[40];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 41);
            v140 = v112[41];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 42);
            v140 = v112[42];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 43);
            v140 = v112[43];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 44);
            v140 = v112[44];
            if (v139 != v140)
              goto LABEL_282;
            v139 = *((unsigned __int8 *)v135 + 45);
            v140 = v112[45];
            if (v139 == v140
              && (v139 = *((unsigned __int8 *)v135 + 46), v140 = v112[46], v139 == v140)
              && (v139 = *((unsigned __int8 *)v135 + 47), v140 = v112[47], v139 == v140))
            {
              v138 = v135;
            }
            else
            {
LABEL_282:
              if (v139 < v140)
                ++v135;
              else
                v138 = v135;
            }
            v135 = (uint64_t *)*v135;
          }
          while (v135);
          if (v138 == v136 || (char)sub_22319835C(v112 + 32, (unsigned __int8 *)v138 + 32) < 0)
LABEL_288:
            v138 = v136;
          if (v138 != (uint64_t *)(*(_QWORD *)(v133 + 8) + 8) && *((_BYTE *)v138 + 856))
          {
            v141 = *((_OWORD *)v112 + 3);
            v142 = *((_OWORD *)v112 + 4);
            v143 = *((_OWORD *)v112 + 6);
            *((_OWORD *)v138 + 24) = *((_OWORD *)v112 + 5);
            *((_OWORD *)v138 + 25) = v143;
            *((_OWORD *)v138 + 22) = v141;
            *((_OWORD *)v138 + 23) = v142;
            v144 = *((_OWORD *)v112 + 7);
            v145 = *((_OWORD *)v112 + 8);
            v146 = *((_OWORD *)v112 + 10);
            *((_OWORD *)v138 + 28) = *((_OWORD *)v112 + 9);
            *((_OWORD *)v138 + 29) = v146;
            *((_OWORD *)v138 + 26) = v144;
            *((_OWORD *)v138 + 27) = v145;
            v147 = *(_DWORD *)(v133 + 48);
            *((_DWORD *)v138 + 207) = v147;
            v149 = *((float64x2_t *)v138 + 22);
            v148 = *((float64x2_t *)v138 + 23);
            v151 = *((float64x2_t *)v138 + 24);
            v150 = *((float64x2_t *)v138 + 25);
            v153 = *((float64x2_t *)v138 + 26);
            v152 = *((float64x2_t *)v138 + 27);
            v155 = *((float64x2_t *)v138 + 28);
            v154 = *((float64x2_t *)v138 + 29);
            v157 = *((float64x2_t *)v138 + 30);
            v156 = *((float64x2_t *)v138 + 31);
            v159 = *((float64x2_t *)v138 + 32);
            v158 = *((float64x2_t *)v138 + 33);
            v161 = *((float64x2_t *)v138 + 34);
            v160 = *((float64x2_t *)v138 + 35);
            v163 = *((float64x2_t *)v138 + 36);
            v162 = *((float64x2_t *)v138 + 37);
            *((float64x2_t *)v138 + 3) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v157.f64[0]), v151, v157, 1), v153, v156.f64[0]), v155, v156, 1);
            *((float64x2_t *)v138 + 4) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v157.f64[0]), v150, v157, 1), v152, v156.f64[0]), v154, v156, 1);
            *((float64x2_t *)v138 + 5) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v159.f64[0]), v151, v159, 1), v153, v158.f64[0]), v155, v158, 1);
            *((float64x2_t *)v138 + 6) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v159.f64[0]), v150, v159, 1), v152, v158.f64[0]), v154, v158, 1);
            *((float64x2_t *)v138 + 7) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v161.f64[0]), v151, v161, 1), v153, v160.f64[0]), v155, v160, 1);
            *((float64x2_t *)v138 + 8) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v161.f64[0]), v150, v161, 1), v152, v160.f64[0]), v154, v160, 1);
            *((float64x2_t *)v138 + 9) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v149, v163.f64[0]), v151, v163, 1), v153, v162.f64[0]), v155, v162, 1);
            *((float64x2_t *)v138 + 10) = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v163.f64[0]), v150, v163, 1), v152, v162.f64[0]), v154, v162, 1);
            if (*((_DWORD *)v138 + 85) == v147)
            {
              v164 = *((_DWORD *)v138 + 86);
              if (v164 <= 1)
                v164 = 1;
            }
            else
            {
              *((_DWORD *)v138 + 85) = v147;
              *((_DWORD *)v138 + 87) += *((_DWORD *)v138 + 86);
              v164 = 1;
            }
            *((_DWORD *)v138 + 86) = v164;
          }
          v165 = (unsigned __int8 *)*((_QWORD *)v112 + 1);
          if (v165)
          {
            do
            {
              v166 = v165;
              v165 = *(unsigned __int8 **)v165;
            }
            while (v165);
          }
          else
          {
            do
            {
              v166 = (unsigned __int8 *)*((_QWORD *)v112 + 2);
              v17 = *(_QWORD *)v166 == (_QWORD)v112;
              v112 = v166;
            }
            while (!v17);
          }
          v112 = v166;
        }
        while (v166 != v113);
      }
      sub_223198030(a1 + 160, *(_QWORD **)(a1 + 168));
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 160) = v113;
      v44 = a3;
    }
    v114 = v111;
    *(_OWORD *)v250 = *(_OWORD *)((char *)&v349[1] + 8);
    v249 = *(uint64_t (***)())&v349[1];
    *(_QWORD *)&v250[16] = *((_QWORD *)&v349[2] + 1);
    *(_OWORD *)&v251[16] = *(_OWORD *)&v286[1];
    *(_QWORD *)v251 = v350;
    *(void ***)&v251[8] = v286[0];
    *(void ***)&v251[32] = v286[3];
    *(_QWORD *)&v252 = v287;
    *((_QWORD *)&v252 + 1) = &off_24EC64998;
    *(_QWORD *)v253 = &off_24EC64920;
    v115 = *(_OWORD *)(v181 + 456);
    *(_OWORD *)&v253[8] = *(_OWORD *)(v181 + 440);
    *(_OWORD *)&v253[24] = v115;
    *(_OWORD *)&v253[40] = *(_OWORD *)(v181 + 472);
    *(_QWORD *)&v253[56] = *(_QWORD *)(v181 + 488);
    v254.i32[0] = *(_DWORD *)(v181 + 496);
    *(uint64_t *)((char *)v254.i64 + 4) = *(_QWORD *)v11;
    *(_OWORD *)v255 = *(_OWORD *)(v181 + 512);
    *(float32x4_t *)&v255[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 28)), *(float64x2_t *)(v11 + 44));
    *(float32x4_t *)&v255[32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 60)), *(float64x2_t *)(v11 + 76));
    *(float32x4_t *)&v255[48] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 92)), *(float64x2_t *)(v11 + 108));
    *(float32x4_t *)&v255[64] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v11 + 124)), *(float64x2_t *)(v11 + 140));
    *(_QWORD *)v236 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*((_QWORD *)&v284 + 1) - v284) >> 3);
    *(_QWORD *)&v236[8] = v284;
    *(_QWORD *)&v236[16] = &off_24EC64998;
    *(_QWORD *)&v236[24] = &off_24EC64920;
    *(_OWORD *)v237 = v296;
    *(_OWORD *)&v237[16] = v295;
    *(_OWORD *)&v237[32] = v357;
    v238 = v177;
    *(_DWORD *)v239 = v6;
    *(_QWORD *)&v239[4] = v168;
    *(_OWORD *)&v239[16] = v8;
    v240 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v169), v171);
    v241 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v170), v173);
    v242 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v172), v175);
    v243 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v174), v176);
    v244 = &v249;
    v245 = 1;
    v246 = v179;
    v247 = 0;
    v248 = 0;
    *((_OWORD *)v44 + 4) = 0u;
    *((_OWORD *)v44 + 5) = 0u;
    *((_OWORD *)v44 + 2) = 0u;
    *((_OWORD *)v44 + 3) = 0u;
    *(_OWORD *)v44 = 0u;
    *((_OWORD *)v44 + 1) = 0u;
    v257 = 0;
    v256 = 0;
    v258 = 0;
    v116 = sub_223F921C0(*(_QWORD *)(a1 + 112), (uint64_t)v236, &v256, 1, (void **)v44 + 3, 1);
    v117 = *(_QWORD *)(a1 + 200);
    if (v117)
    {
      v118 = (void **)(v117 + 496);
      if (*(_BYTE *)(v117 + 544))
      {
        v119 = *(void **)(v117 + 520);
        if (v119)
        {
          *(_QWORD *)(v117 + 528) = v119;
          operator delete(v119);
        }
        v120 = *v118;
        if (*v118)
        {
          *(_QWORD *)(v117 + 504) = v120;
          operator delete(v120);
        }
        *(_BYTE *)(v117 + 544) = 0;
      }
      sub_223323948((_QWORD *)(v117 + 496), (uint64_t)(v44 + 3));
      *(_BYTE *)(v117 + 544) = 1;
    }
    sub_223F901C8(*(_QWORD *)(a1 + 112), (char **)v235);
    sub_223F71EDC((uint64_t *)v235, v179, v114 != 0, v116, a1 + 120, (uint64_t)&v282);
    v121 = *v44;
    if (*v44)
    {
      v122 = v44[1];
      v123 = (void *)*v44;
      if (v122 != v121)
      {
        do
        {
          if (*(_BYTE *)(v122 - 16))
          {
            v124 = *(_QWORD *)(v122 - 40);
            if (v124)
            {
              v125 = *(_QWORD *)(v122 - 32);
              v126 = *(void **)(v122 - 40);
              if (v125 != v124)
              {
                v127 = *(_QWORD *)(v122 - 32);
                do
                {
                  v129 = *(void **)(v127 - 24);
                  v127 -= 24;
                  v128 = v129;
                  if (v129)
                  {
                    *(_QWORD *)(v125 - 16) = v128;
                    operator delete(v128);
                  }
                  v125 = v127;
                }
                while (v127 != v124);
                v126 = *(void **)(v122 - 40);
              }
              *(_QWORD *)(v122 - 32) = v124;
              operator delete(v126);
            }
          }
          if (*(_BYTE *)(v122 - 48))
          {
            v130 = *(void **)(v122 - 72);
            if (v130)
            {
              *(_QWORD *)(v122 - 64) = v130;
              operator delete(v130);
            }
          }
          if (*(_BYTE *)(v122 - 80))
          {
            v131 = *(void **)(v122 - 104);
            if (v131)
            {
              *(_QWORD *)(v122 - 96) = v131;
              operator delete(v131);
            }
          }
          v132 = *(void **)(v122 - 184);
          if (v132)
          {
            *(_QWORD *)(v122 - 176) = v132;
            operator delete(v132);
          }
          v122 -= 464;
        }
        while (v122 != v121);
        v123 = (void *)*v44;
      }
      v44[1] = v121;
      operator delete(v123);
      *v44 = 0;
      v44[1] = 0;
      v44[2] = 0;
    }
    *(_OWORD *)v44 = v282;
    v44[2] = v283;
    v283 = 0;
    v282 = 0uLL;
    if (v235[0])
    {
      v235[1] = v235[0];
      operator delete(v235[0]);
    }
    sub_223F6822C((uint64_t *)&v282, 0x8F5C28F5C28F5C29 * ((uint64_t)(*((_QWORD *)&v284 + 1) - v284) >> 3), v284, ((char *)v257 - (_BYTE *)v256) >> 4, (uint64_t)v256);
    sub_223F6F35C((void **)v44 + 9);
    *(_OWORD *)(v44 + 9) = v282;
    v44[11] = v283;
    sub_223F68C68(a1, v44);
    if (v256)
    {
      v257 = (__int128 *)v256;
      operator delete(v256);
    }
    v249 = (uint64_t (**)())&v284;
    sub_223F3A870((void ***)&v249);
    if (v293)
    {
      v294.i64[0] = (uint64_t)v293;
      operator delete(v293);
    }
    if (v290)
      free(v290);
    if (v355)
    {
      *(_QWORD *)&v356 = v355;
      operator delete(v355);
    }
    if ((_QWORD)v353)
      free((void *)v353);
    if (v234)
    {
      if (v232)
      {
        *(_QWORD *)&v233 = v232;
        operator delete(v232);
      }
      if ((_QWORD)v230)
      {
        *((_QWORD *)&v230 + 1) = v230;
        operator delete((void *)v230);
      }
    }
    if (v229)
    {
      if ((_QWORD)v227)
      {
        *((_QWORD *)&v227 + 1) = v227;
        operator delete((void *)v227);
      }
      v109 = (void *)v225;
      if ((_QWORD)v225)
      {
        v110 = (char *)&v225 + 8;
        goto LABEL_326;
      }
    }
    return;
  }
  sub_223F6E470((uint64_t)&v183, a2);
  v21 = *(_DWORD *)(a2 + 664);
  v182 = *(_DWORD *)(a2 + 668);
  *(_OWORD *)v236 = v184;
  v337 = v185;
  v349[1] = v186;
  v22 = v187;
  v23 = v188;
  v24 = v189;
  v25 = v190;
  *(_OWORD *)&v363[32] = v195;
  v364 = v196;
  v365 = v197;
  *(_OWORD *)v366 = v198;
  v361 = v191;
  v362 = v192;
  *(_OWORD *)v363 = v193;
  *(_OWORD *)&v363[16] = v194;
  if (*(_QWORD *)(a1 + 200))
  {
    v262 = 0u;
    memset(v263, 0, 48);
    v260 = 0u;
    v261 = 0u;
    v300 = v184;
    v301 = v185;
    v302 = v186;
    v309 = v195;
    v310 = v196;
    v311 = v197;
    v312 = v198;
    v305 = v191;
    v306 = v192;
    v307 = v193;
    v298 = (unint64_t)&off_24EC64998;
    v299 = &off_24EC64920;
    *(_QWORD *)v303 = v187;
    *(_DWORD *)&v303[8] = v188;
    *(_QWORD *)&v303[12] = v189;
    v304 = v190;
    v308 = v194;
    LOBYTE(v313) = 0;
    LOBYTE(v317) = 0;
    if (v203)
    {
      v313 = v199;
      v199 = 0uLL;
      v315 = v201;
      v314 = v200;
      v316 = v202;
      v200 = 0;
      v201 = 0uLL;
      v202 = 0;
      LOBYTE(v317) = 1;
    }
    LOBYTE(v318) = 0;
    LOBYTE(v321) = 0;
    if (v208)
    {
      v318 = v204;
      v26 = v205;
      v27 = v206;
      v206 = 0;
      v205 = 0;
      v204 = 0uLL;
      *(_QWORD *)&v319 = v26;
      *((_QWORD *)&v319 + 1) = v27;
      v320 = v207;
      v207 = 0uLL;
      LOBYTE(v321) = 1;
    }
    sub_223F65A80((uint64_t)&v249, a1, (uint64_t)&v298, v21, (void **)&v260, 1);
    if ((_BYTE)v321)
    {
      if (*((_QWORD *)&v319 + 1))
      {
        *(_QWORD *)&v320 = *((_QWORD *)&v319 + 1);
        operator delete(*((void **)&v319 + 1));
      }
      if ((_QWORD)v318)
      {
        *((_QWORD *)&v318 + 1) = v318;
        operator delete((void *)v318);
      }
    }
    if ((_BYTE)v317)
    {
      if ((_QWORD)v315)
      {
        *((_QWORD *)&v315 + 1) = v315;
        operator delete((void *)v315);
      }
      if ((_QWORD)v313)
      {
        *((_QWORD *)&v313 + 1) = v313;
        operator delete((void *)v313);
      }
    }
    v298 = (unint64_t)&off_24EC64998;
    sub_223EDBD98(*(void ***)(a1 + 200), (uint64_t)&v260);
    if (*(_QWORD *)&v263[24])
    {
      *(_QWORD *)&v263[32] = *(_QWORD *)&v263[24];
      operator delete(*(void **)&v263[24]);
    }
    v286[0] = (void **)v263;
    sub_223F45A94(v286);
    if (*((_QWORD *)&v261 + 1))
    {
      *(_QWORD *)&v262 = *((_QWORD *)&v261 + 1);
      operator delete(*((void **)&v261 + 1));
    }
    v28 = (void *)v260;
    if ((_QWORD)v260)
    {
      *((_QWORD *)&v260 + 1) = v260;
LABEL_210:
      operator delete(v28);
    }
  }
  else
  {
    v298 = (unint64_t)&off_24EC64998;
    v299 = &off_24EC64920;
    v300 = v184;
    v301 = v185;
    v302 = v186;
    *(_QWORD *)v303 = v187;
    *(_DWORD *)&v303[8] = v188;
    *(_QWORD *)&v303[12] = v189;
    v304 = v190;
    v308 = v194;
    v307 = v193;
    v306 = v192;
    v305 = v191;
    v312 = v198;
    v311 = v197;
    v310 = v196;
    v309 = v195;
    LOBYTE(v313) = 0;
    LOBYTE(v317) = 0;
    if (v203)
    {
      v313 = v199;
      v199 = 0uLL;
      v315 = v201;
      v314 = v200;
      v316 = v202;
      v200 = 0;
      v201 = 0uLL;
      v202 = 0;
      LOBYTE(v317) = 1;
    }
    LOBYTE(v318) = 0;
    LOBYTE(v321) = 0;
    if (v208)
    {
      v318 = v204;
      v107 = v205;
      v108 = v206;
      v206 = 0;
      v205 = 0;
      v204 = 0uLL;
      *(_QWORD *)&v319 = v107;
      *((_QWORD *)&v319 + 1) = v108;
      v320 = v207;
      v207 = 0uLL;
      LOBYTE(v321) = 1;
    }
    sub_223F65A80((uint64_t)&v249, a1, (uint64_t)&v298, v21, 0, 0);
    if ((_BYTE)v321)
    {
      if (*((_QWORD *)&v319 + 1))
        operator delete(*((void **)&v319 + 1));
      if ((_QWORD)v318)
        operator delete((void *)v318);
    }
    if ((_BYTE)v317)
    {
      if ((_QWORD)v315)
        operator delete((void *)v315);
      v28 = (void *)v313;
      if ((_QWORD)v313)
        goto LABEL_210;
    }
  }
  v298 = 0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)v250 - (_QWORD)v249) >> 3);
  v299 = v249;
  *(_QWORD *)&v300 = &off_24EC64998;
  *((_QWORD *)&v300 + 1) = &off_24EC64920;
  v301 = *(_OWORD *)v236;
  v302 = v337;
  *(_OWORD *)v303 = v349[1];
  *(_QWORD *)&v303[16] = v22;
  LODWORD(v304) = v23;
  *(_QWORD *)((char *)&v304 + 4) = v24;
  v305 = v25;
  v310 = *(_OWORD *)&v363[32];
  v311 = v364;
  v312 = v365;
  v313 = *(_OWORD *)v366;
  v306 = v361;
  v307 = v362;
  v308 = *(_OWORD *)v363;
  v309 = *(_OWORD *)&v363[16];
  LODWORD(v314) = v182;
  LOBYTE(v315) = 0;
  BYTE8(v315) = 0;
  sub_223F67C94(a1, (uint64_t)&v298, a3);
  v298 = (unint64_t)&v249;
  sub_223F3A870((void ***)&v298);
  if (v208)
  {
    if (v206)
    {
      *(_QWORD *)&v207 = v206;
      operator delete(v206);
    }
    if ((_QWORD)v204)
    {
      *((_QWORD *)&v204 + 1) = v204;
      operator delete((void *)v204);
    }
  }
  if (v203)
  {
    if ((_QWORD)v201)
    {
      *((_QWORD *)&v201 + 1) = v201;
      operator delete((void *)v201);
    }
    v109 = (void *)v199;
    if ((_QWORD)v199)
    {
      v110 = (char *)&v199 + 8;
LABEL_326:
      *(_QWORD *)v110 = v109;
      operator delete(v109);
    }
  }
}

void sub_223F6AFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_223340138((uint64_t)&STACK[0x830]);
  sub_223340138((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_223F6AFEC(_Unwind_Exception *a1)
{
  void *v2;

  sub_223F6696C(&STACK[0x498]);
  if (LOBYTE(STACK[0x5A8]))
  {
    v2 = (void *)STACK[0x590];
    if (STACK[0x590])
    {
      STACK[0x598] = (unint64_t)v2;
      operator delete(v2);
    }
  }
  STACK[0x3B0] = (unint64_t)&STACK[0x730];
  sub_223F3A870((void ***)&STACK[0x3B0]);
  sub_223F6696C(&STACK[0x750]);
  sub_223F6696C(&STACK[0xB40]);
  sub_223340138((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_223F6B310(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (a2)
  {
    v2 = (_QWORD *)STACK[0xB10];
    if (STACK[0xB10])
    {
      do
      {
        v3 = (_QWORD *)*v2;
        operator delete(v2);
        v2 = v3;
      }
      while (v3);
    }
    v4 = (void *)STACK[0xB00];
    STACK[0xB00] = 0;
    if (v4)
      operator delete(v4);
    STACK[0xB00] = (unint64_t)&STACK[0x590];
    sub_223F3A870((void ***)&STACK[0xB00]);
    JUMPOUT(0x223F6B358);
  }
  JUMPOUT(0x223F6B278);
}

void sub_223F6B780()
{
  if (LOBYTE(STACK[0x4B0]) && SLOBYTE(STACK[0x4AF]) < 0)
    operator delete((void *)STACK[0x498]);
  __cxa_guard_abort(&qword_255788F58);
  sub_223182DAC((uint64_t)&STACK[0x3B0]);
  __cxa_end_catch();
  JUMPOUT(0x223F6B2E0);
}

void sub_223F6B8B8(_QWORD *a1@<X0>, size_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  float64x2_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int *v10;
  unint64_t v11;
  int *v12;
  void *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  float *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  float *v29;
  int v30;
  _BYTE *v31;
  unsigned __int8 *v32;
  int v33;
  __int128 v34;
  __int128 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  char v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _WORD *v57;
  int *v58;
  int v59;
  int v65;
  BOOL v69;
  BOOL v70;
  unint64_t StatusReg;
  char v72;
  void *v73;
  int v74;
  unsigned __int32 v75;
  uint64_t v76;
  _BOOL4 v77;
  int v78;
  BOOL v79;
  void *v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _WORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  char *v98;
  int v99;
  _WORD *v100;
  int *v101;
  _WORD *v102;
  int *v103;
  int *v104;
  _WORD *v105;
  _WORD *v106;
  int *v107;
  int v108;
  int v111;
  int v114;
  _WORD *v115;
  int *v116;
  int v119;
  uint64_t v120;
  _WORD *v121;
  int *v122;
  int v123;
  uint64_t v127;
  int v128;
  uint64_t v129;
  _WORD *v130;
  int *v131;
  int v132;
  uint64_t v135;
  uint64_t v137;
  BOOL v140;
  unint64_t v141;
  void *v142;
  unint64_t v143;
  _BYTE *v144;
  void *v145;
  int v146;
  BOOL v147;
  BOOL v148;
  void *v149;
  uint64_t v150;
  _BYTE *v151;
  _BYTE *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *p_shared_owners;
  unint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  int v160;
  float32x4_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  _BYTE *v172;
  float *v173;
  float v174;
  uint64_t v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float *v180;
  __int128 *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _OWORD *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  char *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  void *v201;
  void *v202;
  _QWORD *v203;
  _QWORD *v204;
  void *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  void *v209;
  int v210;
  BOOL v211;
  void *v213;
  BOOL v214;
  int v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  unsigned __int8 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t i;
  void *v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  void *v229;
  uint64_t v230;
  BOOL v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  size_t v235;
  float64x2_t v236;
  float32x2_t v237;
  float32x2_t v238;
  float32x2_t v239;
  float32x2_t v240;
  float32x2_t v241;
  float32x2_t v242;
  float32x2_t v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 *v250;
  uint64_t *v251;
  size_t v252;
  int v254;
  _BYTE v256[80];
  _BYTE v257[56];
  float32x4_t v258;
  _BYTE v259[32];
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  int v264;
  size_t v265;
  char v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269[2];
  __int128 v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  _OWORD v274[4];
  _BYTE *v275;
  char *v276;
  unint64_t v277;
  __int128 v278;
  uint64_t v279;
  void *v280;
  _BYTE *v281;
  uint64_t v282;
  void *v283[2];
  void *v284[2];
  int v285;
  unsigned __int8 *v286[2];
  int v287;
  int v288;
  __int128 v289;
  uint64_t v290;
  void *v291[3];
  void *v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  _QWORD v298[3];
  void *v299[2];
  void *v300;
  void *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  __int128 v304;
  uint64_t v305;
  char v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  int v312;
  uint64_t v313;
  unsigned __int32 v314;
  char v315;
  char v316;
  uint64_t v317;
  void *v318;
  int v319;
  int v320;
  int v321;
  unsigned int v322;
  unint64_t v323;
  unint64_t v324;
  char v325;
  char v326;
  unint64_t v327;
  void *v328;
  int v329;
  int v330;
  unint64_t v331;
  float32x2_t v332[2];
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  int v337;
  uint64_t v338;
  __int128 v339;
  uint64_t v340;
  uint64_t (**v341)();
  uint64_t v342;
  std::__shared_weak_count *v343;
  _BYTE *v344;
  __int128 v345;
  char v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  void *v353;
  void *v354;
  uint64_t v355;
  float32x4_t v356;
  float32x2_t v357;
  float32x2_t v358;
  float32x2_t v359;
  float32x2_t v360;
  float32x2_t v361;
  float32x2_t v362;
  uint64_t v363;

  v363 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223F6598C(v256);
  if (**(int **)(*(_QWORD *)v256 + 56) <= 1)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_2540CE268);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE268))
    {
      qword_2540CE260 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SingleShotDetect");
      __cxa_guard_release(&qword_2540CE268);
    }
    v5 = qword_2540CE260;
    *(_BYTE *)(qword_2540CE260 + 16) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v5 = std::chrono::steady_clock::now();
    *(_BYTE *)(v5 + 16) = 1;
  }
  v6 = (float64x2_t *)(a2 + 264);
  v252 = a2 + 80;
  if (*(_BYTE *)(a2 + 368))
  {
    v339 = *(_OWORD *)(a2 + 104);
    v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v6), *(float64x2_t *)(a2 + 280));
    v274[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 232)), *(float64x2_t *)(a2 + 248));
    v274[1] = v7;
    v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 296)), *(float64x2_t *)(a2 + 312));
    v9 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 328)), *(float64x2_t *)(a2 + 344));
    v251 = (uint64_t *)a1[13];
    v10 = *(int **)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    v247 = *(unsigned int *)(a2 + 96);
    v246 = *(unsigned int *)(a2 + 100);
    v340 = *(_QWORD *)(a2 + 120);
    v12 = *(int **)(a2 + 48);
    v13 = *(void **)(a2 + 56);
    v254 = *(_DWORD *)(a2 + 64);
    v249 = *(unsigned int *)(a2 + 68);
    v248 = *(unsigned int *)(a2 + 72);
    v245 = *(unsigned int *)(a2 + 76);
    v15 = *(unsigned __int8 **)a2;
    v14 = *(unsigned __int8 **)(a2 + 8);
    v17 = *(unsigned int *)(a2 + 16);
    v16 = *(unsigned int *)(a2 + 20);
    v341 = &off_24EC24788;
    v274[2] = v8;
    v274[3] = v9;
    sub_2231F8D1C((_DWORD *)&v339 + 2, &v342);
    v18 = v344;
    if (v346 && v344)
    {
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v342 + 88))(v342, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1305");
      v18 = v344;
    }
    if (DWORD2(v339) && HIDWORD(v339))
    {
      v19 = DWORD2(v345);
      v20 = DWORD2(v339) - 1;
      v21 = (float *)v339;
      v22 = 4 * v340;
      v23 = HIDWORD(v339) - 1;
      if (HIDWORD(v339) == 1)
      {
        v27 = v15;
      }
      else
      {
        v24 = HIDWORD(v345);
        v25 = 4 * HIDWORD(v340);
        if (DWORD2(v339) == 1)
        {
          v27 = v15;
          do
          {
            v65 = *v21 >= *(float *)(a2 + 400) && byte_224691A80[*v27] == 0;
            *v18 = v65 << 31 >> 31;
            v27 += v16;
            v18 += v24;
            v21 = (float *)((char *)v21 + v25);
            --v23;
          }
          while (v23);
        }
        else
        {
          v26 = 0;
          v27 = v15;
          do
          {
            v29 = v21;
            v30 = v20;
            v31 = v18;
            v32 = v27;
            do
            {
              v33 = *v29 >= *(float *)(a2 + 400) && byte_224691A80[*v32] == 0;
              *v31 = v33 << 31 >> 31;
              v32 += v17;
              v31 += v19;
              v29 = (float *)((char *)v29 + v22);
              --v30;
            }
            while (v30);
            v28 = *v29 >= *(float *)(a2 + 400) && byte_224691A80[*v32] == 0;
            *v31 = v28 << 31 >> 31;
            v21 = (float *)((char *)v21 + v25);
            v27 += v16;
            v18 += v24;
            ++v26;
          }
          while (v26 != v23);
        }
      }
      for (; v20; --v20)
      {
        v41 = *v21 >= *(float *)(a2 + 400) && byte_224691A80[*v27] == 0;
        *v18 = v41 << 31 >> 31;
        v27 += v17;
        v18 += v19;
        v21 = (float *)((char *)v21 + v22);
      }
      v40 = *v21 >= *(float *)(a2 + 400) && byte_224691A80[*v27] == 0;
      *v18 = v40 << 31 >> 31;
    }
    *(_OWORD *)v299 = *(_OWORD *)(a2 + 144);
    v42 = *(_QWORD *)(a2 + 216);
    sub_223207E58(v256, (int *)v299);
    v250 = v14;
    v333 = *(_OWORD *)&v256[8];
    v334 = *(_OWORD *)&v256[24];
    v335 = *(_OWORD *)&v256[40];
    v336 = *(_OWORD *)&v256[56];
    v337 = *(_DWORD *)&v256[72];
    v338 = v42;
    v332[1] = (float32x2_t)&off_24EC20868;
    v332[0] = (float32x2_t)&off_24EC207B8;
    if ((_DWORD)v11)
      _ZF = HIDWORD(v11) == 0;
    else
      _ZF = 1;
    v44 = _ZF;
    if (_ZF)
      v45 = 0;
    else
      v45 = v11;
    v46 = v45 << 32;
    if (!HIDWORD(v45))
      v46 = 0;
    if ((_DWORD)v45)
      v47 = HIDWORD(v45) == 0;
    else
      v47 = 1;
    v323 = v45;
    v324 = v46 | (v45 != 0);
    v325 = 0;
    v326 = 0;
    *(_QWORD *)v256 = v324;
    if (v47)
      v45 = 0;
    v299[0] = (void *)v45;
    if (((v46 >> 31) & ((v46 >> 31) - 1)) != 0)
      v48 = 2;
    else
      v48 = v46 >> 31;
    sub_223F6F4BC(&v327, v299, (unint64_t *)v256, 1, 0, 0, v48);
    if ((v44 & 1) == 0)
    {
      v49 = v11 - 1;
      v50 = v328;
      v51 = 4 * v247;
      v52 = 2 * v324;
      v53 = HIDWORD(v11) - 1;
      if (HIDWORD(v11) != 1)
      {
        v54 = HIDWORD(v324);
        if ((_DWORD)v11 == 1)
        {
          do
          {
            _S0 = *v10;
            __asm { FCVT            H0, S0 }
            *v50 = _S0;
            v10 += v246;
            v50 += v54;
            --v53;
          }
          while (v53);
        }
        else
        {
          v55 = 0;
          v56 = 2 * HIDWORD(v324);
          do
          {
            v57 = v50;
            v58 = v10;
            v59 = v11 - 1;
            do
            {
              _S0 = *v58;
              __asm { FCVT            H0, S0 }
              *v57 = _S0;
              v58 = (int *)((char *)v58 + v51);
              v57 = (_WORD *)((char *)v57 + v52);
              --v59;
            }
            while (v59);
            _S0 = *v58;
            __asm { FCVT            H0, S0 }
            *v57 = _S0;
            v10 += v246;
            v50 = (_WORD *)((char *)v50 + v56);
            ++v55;
          }
          while (v55 != v53);
        }
      }
      if ((_DWORD)v11 != 1)
      {
        do
        {
          _S0 = *v10;
          __asm { FCVT            H0, S0 }
          *v50 = _S0;
          v10 = (int *)((char *)v10 + v51);
          v50 = (_WORD *)((char *)v50 + v52);
          --v49;
        }
        while (v49);
      }
      _S0 = *v10;
      __asm { FCVT            H0, S0 }
      *v50 = _S0;
    }
    if ((_DWORD)v13)
      v69 = HIDWORD(v13) == 0;
    else
      v69 = 1;
    v70 = v69 || v254 == 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
    v72 = v70;
    if (v70)
      v73 = 0;
    else
      v73 = v13;
    if (v70)
      v74 = 0;
    else
      v74 = v254;
    v75 = HIDWORD(v73) * (_DWORD)v73;
    if (v70)
      v75 = 0;
    if (HIDWORD(v73))
      v76 = (_QWORD)v73 << 32;
    else
      v76 = 0;
    if (HIDWORD(v73))
      v77 = (_DWORD)v73 == 0;
    else
      v77 = 1;
    v311 = v73;
    v313 = v76 | ((_DWORD)v73 != 0);
    v312 = v74;
    v314 = v75;
    v315 = 0;
    v316 = 0;
    *(_QWORD *)v256 = v313;
    *(_DWORD *)&v256[8] = v75;
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
    if (HIDWORD(v73))
      v78 = v77;
    else
      v78 = 1;
    v79 = v78 == 0;
    if (v78)
      v80 = 0;
    else
      v80 = v73;
    v299[0] = v80;
    if (v79)
      v81 = v74;
    else
      v81 = 0;
    LODWORD(v299[1]) = v81;
    if (((2 * v75) & (2 * v75 - 1)) != 0)
      v82 = 2;
    else
      v82 = 2 * v75;
    sub_223F6F874((uint64_t)&v317, (unsigned int *)v299, (uint64_t *)v256, 1, 0, 0, v82);
    if ((v72 & 1) == 0)
    {
      v83 = (_DWORD)v13 - 1;
      v84 = HIDWORD(v13) - 1;
      v85 = v313;
      v86 = HIDWORD(v313);
      v87 = v318;
      v88 = v254 - 1;
      if (v254 != 1)
      {
        v89 = v314;
        if (HIDWORD(v13) == 1)
        {
          if ((_DWORD)v13 == 1)
          {
            do
            {
              _S0 = *v12;
              __asm { FCVT            H0, S0 }
              *v87 = _S0;
              v12 += v245;
              v87 += v89;
              --v88;
            }
            while (v88);
          }
          else
          {
            v119 = 0;
            v120 = 2 * v314;
            do
            {
              v121 = v87;
              v122 = v12;
              v123 = (_DWORD)v13 - 1;
              do
              {
                _S0 = *v122;
                __asm { FCVT            H0, S0 }
                *v121 = _S0;
                v122 += v249;
                v121 += v85;
                --v123;
              }
              while (v123);
              _S0 = *v122;
              __asm { FCVT            H0, S0 }
              *v121 = _S0;
              v12 += v245;
              v87 = (_WORD *)((char *)v87 + v120);
              ++v119;
            }
            while (v119 != v88);
          }
        }
        else
        {
          v90 = 4 * v245;
          v91 = v248;
          v92 = 2 * v314;
          v93 = 2 * HIDWORD(v313);
          v94 = 0;
          if ((_DWORD)v13 == 1)
          {
            do
            {
              v114 = HIDWORD(v13) - 1;
              v115 = v87;
              v116 = v12;
              do
              {
                _S0 = *v116;
                __asm { FCVT            H0, S0 }
                *v115 = _S0;
                v116 = (int *)((char *)v116 + v91 * 4);
                v115 = (_WORD *)((char *)v115 + v93);
                --v114;
              }
              while (v114);
              _S0 = *v116;
              __asm { FCVT            H0, S0 }
              *v115 = _S0;
              v12 = (int *)((char *)v12 + v90);
              v87 = (_WORD *)((char *)v87 + v92);
              ++v94;
            }
            while (v94 != v88);
          }
          else
          {
            v95 = 4 * v249;
            v96 = 2 * v313;
            v97 = &v12[v91];
            v98 = (char *)v318 + v93;
            do
            {
              v99 = 0;
              v100 = v98;
              v101 = v97;
              v102 = v87;
              v103 = v12;
              do
              {
                v104 = v101;
                v105 = v100;
                v106 = v102;
                v107 = v103;
                v108 = v83;
                do
                {
                  _S0 = *v107;
                  __asm { FCVT            H0, S0 }
                  *v106 = _S0;
                  v107 = (int *)((char *)v107 + v95);
                  v106 = (_WORD *)((char *)v106 + v96);
                  --v108;
                }
                while (v108);
                _S0 = *v107;
                __asm { FCVT            H0, S0 }
                *v106 = _S0;
                v103 = (int *)((char *)v103 + v91 * 4);
                v102 = (_WORD *)((char *)v102 + v93);
                ++v99;
                v101 = &v104[v91];
                v100 = &v105[(unint64_t)v93 / 2];
              }
              while (v99 != v84);
              v111 = v83;
              do
              {
                _S0 = *v104;
                __asm { FCVT            H0, S0 }
                *v105 = _S0;
                v104 = (int *)((char *)v104 + v95);
                v105 = (_WORD *)((char *)v105 + v96);
                --v111;
              }
              while (v111);
              _S0 = *v104;
              __asm { FCVT            H0, S0 }
              *v105 = _S0;
              v12 = (int *)((char *)v12 + v90);
              v87 = (_WORD *)((char *)v87 + v92);
              ++v94;
              v97 = (int *)((char *)v97 + v90);
              v98 += v92;
            }
            while (v94 != v88);
          }
        }
      }
      if (HIDWORD(v13) != 1)
      {
        v127 = 4 * v248;
        if (v83)
        {
          v128 = 0;
          v129 = 2 * v86;
          do
          {
            v130 = v87;
            v131 = v12;
            v132 = v83;
            do
            {
              _S0 = *v131;
              __asm { FCVT            H0, S0 }
              *v130 = _S0;
              v131 += v249;
              v130 += v85;
              --v132;
            }
            while (v132);
            _S0 = *v131;
            __asm { FCVT            H0, S0 }
            *v130 = _S0;
            v12 = (int *)((char *)v12 + v127);
            v87 = (_WORD *)((char *)v87 + v129);
            ++v128;
          }
          while (v128 != v84);
        }
        else
        {
          v135 = 2 * v86;
          do
          {
            _S0 = *v12;
            __asm { FCVT            H0, S0 }
            *v87 = _S0;
            v12 = (int *)((char *)v12 + v127);
            v87 = (_WORD *)((char *)v87 + v135);
            --v84;
          }
          while (v84);
        }
      }
      if (v83)
      {
        v137 = 2 * v85;
        do
        {
          _S0 = *v12;
          __asm { FCVT            H0, S0 }
          *v87 = _S0;
          v12 += v249;
          v87 = (_WORD *)((char *)v87 + v137);
          --v83;
        }
        while (v83);
      }
      _S0 = *v12;
      __asm { FCVT            H0, S0 }
      *v87 = _S0;
    }
    if (HIDWORD(v323))
      v140 = (_DWORD)v323 == 0;
    else
      v140 = 1;
    if (v140)
      v141 = 0;
    else
      v141 = v323;
    v142 = v328;
    v143 = v324;
    if (HIDWORD(v141) * HIDWORD(v324) == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_300;
    }
    v298[0] = v142;
    v298[1] = v141;
    v298[2] = v143;
    v144 = v344;
    if (v346 && v344)
    {
      (*(void (**)(uint64_t, uint64_t, const char *))(*(_QWORD *)v342 + 88))(v342, 1, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1305");
      v144 = v344;
    }
    v297 = v345;
    v145 = v318;
    v146 = v312;
    if ((_DWORD)v311)
      v147 = HIDWORD(v311) == 0;
    else
      v147 = 1;
    v148 = v147 || v312 == 0;
    v149 = v311;
    if (v148)
    {
      v149 = 0;
      v146 = 0;
    }
    *(_QWORD *)&v347 = v149;
    DWORD2(v347) = v146;
    v356.i64[0] = v313;
    v356.i32[2] = v314;
    if (v146 * v314 == -1
      && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
LABEL_300:
      abort();
    }
    v292 = v145;
    *(_QWORD *)v256 = v347;
    *(_DWORD *)&v256[8] = DWORD2(v347);
    *(_DWORD *)&v256[20] = v356.i32[2];
    *(_QWORD *)&v256[12] = v356.i64[0];
    v293 = *(_OWORD *)v256;
    v294 = *(_QWORD *)&v256[16];
    v295 = *(_QWORD *)((char *)&v347 + 4);
    v296 = *(uint64_t *)((char *)v356.i64 + 4);
    v150 = *v251;
    *(_QWORD *)v256 = v144;
    *(_OWORD *)&v256[8] = v297;
    sub_223EE6F04(v150, (uint64_t)v298, (uint64_t)v256, (uint64_t)&v292, v332, (uint64_t)v274, (float *)(a2 + 376), (uint64_t)v299);
    v151 = v299[1];
    v152 = v299[0];
    if (v306 && (_QWORD)v304)
    {
      v153 = v302;
      v154 = v303;
      if (v303)
      {
        p_shared_owners = (unint64_t *)&v303->__shared_owners_;
        do
          v156 = __ldxr(p_shared_owners);
        while (__stxr(v156 + 1, p_shared_owners));
        do
          v157 = __ldaxr(p_shared_owners);
        while (__stlxr(v157 - 1, p_shared_owners));
        if (!v157)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v153 + 88))(v153, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1312");
    }
    v289 = v304;
    v290 = v305;
    v286[0] = v15;
    v286[1] = v250;
    v287 = v17;
    v288 = v16;
    sub_223F4C3C8((unsigned __int8 **)&v289, v286, (-85 * ((v151 - v152) >> 3)), (int8x16_t **)v291);
    v256[0] = -1;
    *(_OWORD *)v283 = 0u;
    *(_OWORD *)v284 = 0u;
    v285 = 1065353216;
    sub_2236EA858((uint64_t)v283, v256, v256);
    v158 = (char *)v299[0];
    v159 = (char *)v299[1];
    if (v299[0] == v299[1])
    {
      v276 = 0;
      v275 = 0;
      v277 = 0;
    }
    else
    {
      v160 = 0;
      do
      {
        v256[0] = v160;
        sub_2236EAB58((uint64_t)v283, v256, v256);
        v158 += 24;
        ++v160;
      }
      while (v158 != v159);
      v162 = (char *)v299[0];
      v163 = (char *)v299[1];
      v277 = 0;
      v275 = 0;
      v276 = 0;
      if (v299[0] != v299[1])
      {
        v164 = 0;
        do
        {
          sub_223F2B9A0((uint64_t)v162, &v356, v161);
          v256[0] = v164;
          sub_223F4A94C(v283, v256);
          if (v306)
            v165 = (_QWORD)v304 == 0;
          else
            v165 = 1;
          if (!v165)
          {
            v166 = v302;
            v167 = v303;
            if (v303)
            {
              v168 = (unint64_t *)&v303->__shared_owners_;
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
              do
                v170 = __ldaxr(v168);
              while (__stlxr(v170 - 1, v168));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                std::__shared_weak_count::__release_weak(v167);
              }
            }
            (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v166 + 88))(v166, 0, "/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Kit/Image/include/Kit/Image/Image.h:1312");
          }
          v278 = v304;
          v279 = v305;
          v171 = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)(a2 + 128) + 16))(a2 + 128);
          sub_223F562E8((uint64_t)&v278, (uint64_t)v283, (uint64_t)v274, v171, (float32x2_t *)&v356, (uint64_t)&v280);
          v256[0] = v164;
          sub_2236EAB58((uint64_t)v283, v256, v256);
          v172 = v280;
          v161.i32[0] = 0;
          if ((unint64_t)(v281 - (_BYTE *)v280) >= 0x18)
          {
            v173 = (float *)((char *)v280 + 12);
            v174 = 0.0;
            v175 = ((v281 - (_BYTE *)v280) >> 3) - 1;
            v176 = *((float *)v280 + 1);
            v177 = *(float *)v280;
            do
            {
              v178 = *v173;
              v179 = v174 - (float)(v177 * *v173);
              v177 = *(v173 - 1);
              v174 = v179 + (float)(v176 * v177);
              v173 += 2;
              v176 = v178;
              --v175;
            }
            while (v175);
            v180 = (float *)((char *)v280 + 8 * ((v281 - (_BYTE *)v280) >> 3) - 8);
            v161.f32[0] = (float)((float)(v174 - (float)(*((float *)v280 + 1) * *v180))
                                + (float)(*(float *)v280 * v180[1]))
                        * 0.5;
          }
          v161.f32[0] = fabsf(v161.f32[0]);
          if (v161.f32[0] >= 0.0025)
          {
            *(float64x2_t *)v256 = vcvtq_f64_f32(*(float32x2_t *)v356.f32);
            *(float64x2_t *)&v256[16] = vcvtq_f64_f32(*(float32x2_t *)&v356.u32[2]);
            *(float64x2_t *)&v256[32] = vcvtq_f64_f32(v357);
            *(float64x2_t *)&v256[48] = vcvtq_f64_f32(v358);
            *(float64x2_t *)&v256[64] = vcvtq_f64_f32(v359);
            *(float64x2_t *)v257 = vcvtq_f64_f32(v360);
            *(float64x2_t *)&v257[16] = vcvtq_f64_f32(v361);
            *(float64x2_t *)&v257[32] = vcvtq_f64_f32(v362);
            *(_DWORD *)&v257[48] = *((_DWORD *)v300 + v164);
            v353 = v280;
            v354 = v281;
            v355 = v282;
            v280 = 0;
            v281 = 0;
            v282 = 0;
            *(_QWORD *)v259 = 0;
            v258 = 0uLL;
            v258.i64[0] = (uint64_t)operator new(0x18uLL);
            v258.i64[1] = v258.i64[0];
            *(_QWORD *)v259 = v258.i64[0] + 24;
            v258.i64[1] = (uint64_t)sub_2236B97AC((uint64_t)v259, (uint64_t)&v353, (uint64_t)&v356, v258.i64[0]);
            v181 = (__int128 *)((char *)v291[0] + 96 * v164);
            v182 = v181[3];
            v349 = v181[2];
            v350 = v182;
            v183 = v181[5];
            v351 = v181[4];
            v352 = v183;
            v184 = v181[1];
            v347 = *v181;
            v348 = v184;
            v185 = operator new(0x60uLL);
            v186 = v350;
            v185[2] = v349;
            v185[3] = v186;
            v187 = v352;
            v185[4] = v351;
            v185[5] = v187;
            v188 = v348;
            *v185 = v347;
            v185[1] = v188;
            *(_QWORD *)&v259[8] = v185;
            *(_QWORD *)&v259[16] = v185 + 6;
            *(_QWORD *)&v259[24] = v185 + 6;
            LOBYTE(v260.f64[0]) = 1;
            LOBYTE(v260.f64[1]) = 0;
            if (v353)
            {
              v354 = v353;
              operator delete(v353);
            }
            v189 = v276;
            if ((unint64_t)v276 >= v277)
            {
              v196 = sub_223F4A4D8((void **)&v275, (uint64_t)v256);
            }
            else
            {
              v190 = *(_OWORD *)v256;
              v191 = *(_OWORD *)&v256[16];
              v192 = *(_OWORD *)&v256[48];
              *((_OWORD *)v276 + 2) = *(_OWORD *)&v256[32];
              *((_OWORD *)v189 + 3) = v192;
              *(_OWORD *)v189 = v190;
              *((_OWORD *)v189 + 1) = v191;
              v193 = *(_OWORD *)&v256[64];
              v194 = *(_OWORD *)v257;
              v195 = *(_OWORD *)&v257[32];
              *((_OWORD *)v189 + 6) = *(_OWORD *)&v257[16];
              *((_OWORD *)v189 + 7) = v195;
              *((_OWORD *)v189 + 4) = v193;
              *((_OWORD *)v189 + 5) = v194;
              *((_DWORD *)v189 + 32) = *(_DWORD *)&v257[48];
              *((_QWORD *)v189 + 17) = 0;
              *((_QWORD *)v189 + 18) = 0;
              *((_QWORD *)v189 + 19) = 0;
              v161 = v258;
              *(float32x4_t *)(v189 + 136) = v258;
              *((_QWORD *)v189 + 19) = *(_QWORD *)v259;
              v258 = 0uLL;
              *(_QWORD *)v259 = 0;
              v189[160] = 0;
              v189[184] = 0;
              if (LOBYTE(v260.f64[0]))
              {
                *((_QWORD *)v189 + 20) = 0;
                *((_QWORD *)v189 + 21) = 0;
                *((_QWORD *)v189 + 22) = 0;
                v161 = *(float32x4_t *)&v259[8];
                *((_OWORD *)v189 + 10) = *(_OWORD *)&v259[8];
                *((_QWORD *)v189 + 22) = *(_QWORD *)&v259[24];
                memset(&v259[8], 0, 24);
                v189[184] = 1;
              }
              v189[192] = LOBYTE(v260.f64[1]);
              v196 = v189 + 200;
            }
            v276 = v196;
            if (LOBYTE(v260.f64[0]) && *(_QWORD *)&v259[8])
            {
              *(_QWORD *)&v259[16] = *(_QWORD *)&v259[8];
              operator delete(*(void **)&v259[8]);
            }
            v197 = v258.i64[0];
            if (v258.i64[0])
            {
              v198 = v258.i64[1];
              v199 = (void *)v258.i64[0];
              if (v258.i64[1] != v258.i64[0])
              {
                v200 = v258.i64[1];
                do
                {
                  v202 = *(void **)(v200 - 24);
                  v200 -= 24;
                  v201 = v202;
                  if (v202)
                  {
                    *(_QWORD *)(v198 - 16) = v201;
                    operator delete(v201);
                  }
                  v198 = v200;
                }
                while (v200 != v197);
                v199 = (void *)v258.i64[0];
              }
              v258.i64[1] = v197;
              operator delete(v199);
            }
            v172 = v280;
          }
          if (v172)
          {
            v281 = v172;
            operator delete(v172);
          }
          v162 += 24;
          ++v164;
        }
        while (v162 != v163);
      }
    }
    v203 = v284[0];
    if (v284[0])
    {
      do
      {
        v204 = (_QWORD *)*v203;
        operator delete(v203);
        v203 = v204;
      }
      while (v204);
    }
    v205 = v283[0];
    v283[0] = 0;
    if (v205)
      operator delete(v205);
    if (v291[0])
    {
      v291[1] = v291[0];
      operator delete(v291[0]);
    }
    if (v309)
    {
      v310 = v309;
      operator delete(v309);
    }
    if (v307)
    {
      v308 = v307;
      operator delete(v307);
    }
    v206 = v303;
    if (v303)
    {
      v207 = (unint64_t *)&v303->__shared_owners_;
      do
        v208 = __ldaxr(v207);
      while (__stlxr(v208 - 1, v207));
      if (!v208)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    if (v300)
    {
      v301 = v300;
      operator delete(v300);
    }
    if (v299[0])
    {
      v299[1] = v299[0];
      operator delete(v299[0]);
    }
    v209 = v318;
    if (v318)
    {
      v210 = v321;
      if (v321)
        v211 = v320 == 0;
      else
        v211 = 1;
      if (v211 || v319 == 0)
        v210 = 0;
      if (v210 * (v322 >> 1) != -1)
        goto LABEL_246;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v209 = v318;
      if (v318)
LABEL_246:
        free(v209);
    }
    v213 = v328;
    if (v328)
    {
      v214 = !v330 || v329 == 0;
      v215 = v214 ? 0 : v330;
      if (v215 * (v331 >> 33) != -1)
        goto LABEL_257;
      if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
      {
        abort();
      }
      v213 = v328;
      if (v328)
LABEL_257:
        free(v213);
    }
    v216 = v343;
    if (v343)
    {
      v217 = (unint64_t *)&v343->__shared_owners_;
      do
        v218 = __ldaxr(v217);
      while (__stlxr(v218 - 1, v217));
      if (!v218)
      {
        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
        std::__shared_weak_count::__release_weak(v216);
      }
    }
  }
  else
  {
    v272 = *(_OWORD *)(a2 + 80);
    v34 = *(_OWORD *)(a2 + 104);
    v35 = *(_OWORD *)(a2 + 64);
    v269[0] = *(_OWORD *)(a2 + 48);
    v269[1] = v35;
    v270 = v34;
    v267 = *(_OWORD *)a2;
    v36 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v6), *(float64x2_t *)(a2 + 280));
    *(float32x4_t *)v256 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 232)), *(float64x2_t *)(a2 + 248));
    *(float32x4_t *)&v256[16] = v36;
    v37 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 296)), *(float64x2_t *)(a2 + 312));
    v38 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 328)), *(float64x2_t *)(a2 + 344));
    v39 = (uint64_t *)a1[12];
    v273 = *(_QWORD *)(a2 + 96);
    v271 = *(_QWORD *)(a2 + 120);
    v268 = *(_QWORD *)(a2 + 16);
    *(float32x4_t *)&v256[32] = v37;
    *(float32x4_t *)&v256[48] = v38;
    sub_223F493F8(v39, &v272, (uint64_t)&v270, v269, &v267, a2 + 128, (float32x2_t *)v256, (_DWORD *)(a2 + 360), (uint64_t)&v275);
  }
  kdebug_trace();
  sub_223F6598C(v256);
  if (**(int **)(*(_QWORD *)v256 + 56) <= 1)
  {
    v219 = atomic_load((unsigned __int8 *)&qword_2540CE278);
    if ((v219 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE278))
    {
      qword_2540CE270 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_SingleShotDetect");
      __cxa_guard_release(&qword_2540CE278);
    }
    v220 = qword_2540CE270;
    if (*(_BYTE *)(qword_2540CE270 + 16))
    {
      *(_QWORD *)(v220 + 8) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)v220;
      *(_BYTE *)(v220 + 16) = 0;
    }
  }
  v221 = a1[25];
  if (v221)
  {
    v222 = *(_QWORD *)(v221 + 120);
    for (i = *(_QWORD *)(v221 + 128); i != v222; i -= 88)
    {
      v224 = *(void **)(i - 24);
      if (v224)
      {
        *(_QWORD *)(i - 16) = v224;
        operator delete(v224);
      }
    }
    *(_QWORD *)(v221 + 128) = v222;
    v225 = (_QWORD *)a1[25];
    sub_223EDC390((uint64_t *)&v275, (void (*)(__int128 *__return_ptr, uint64_t))sub_223EDC6A8, (int64x2_t *)v256);
    v226 = v225[15];
    if (v226)
    {
      v227 = v225[16];
      v228 = (void *)v225[15];
      if (v227 != v226)
      {
        do
        {
          v229 = *(void **)(v227 - 24);
          if (v229)
          {
            *(_QWORD *)(v227 - 16) = v229;
            operator delete(v229);
          }
          v227 -= 88;
        }
        while (v227 != v226);
        v228 = (void *)v225[15];
      }
      v225[16] = v226;
      operator delete(v228);
    }
    *(_OWORD *)(v225 + 15) = *(_OWORD *)v256;
    v225[17] = *(_QWORD *)&v256[16];
    v230 = a1[25];
    if (*(_BYTE *)(v230 + 384))
    {
      *(_QWORD *)v256 = a2;
      *(_QWORD *)&v256[8] = v230 + 312;
      sub_223EE49B8((size_t *)v256);
    }
    else
    {
      if (*(_DWORD *)(a2 + 12))
        v231 = *(_DWORD *)(a2 + 8) == 0;
      else
        v231 = 1;
      v232 = *(_QWORD *)(a2 + 8);
      if (v231)
        v232 = 0;
      v233 = v232 << 32;
      if (!HIDWORD(v232))
        v233 = 0;
      *(_QWORD *)(v230 + 312) = v232;
      *(_QWORD *)(v230 + 320) = v233 | ((_DWORD)v232 != 0);
      *(_BYTE *)(v230 + 328) = 0;
      *(_BYTE *)(v230 + 336) = 0;
      *(_QWORD *)v256 = v233 | ((_DWORD)v232 != 0);
      if ((HIDWORD(v233) & (HIDWORD(v233) - 1)) != 0)
        v234 = 1;
      else
        v234 = HIDWORD(v233);
      sub_223F6F140((size_t *)(v230 + 344), a2, (void **)v256, 1, v234);
      *(_BYTE *)(v230 + 384) = 1;
    }
    sub_223F669AC(a1[25] + 392, (char **)(a2 + 48));
  }
  v236 = *(float64x2_t *)(a2 + 232);
  v235 = a2 + 232;
  v237 = vcvt_f32_f64(*(float64x2_t *)(v235 + 112));
  v238 = vcvt_f32_f64(*(float64x2_t *)(v235 + 96));
  v239 = vcvt_f32_f64(*(float64x2_t *)(v235 + 80));
  v240 = vcvt_f32_f64(*(float64x2_t *)(v235 + 64));
  v241 = vcvt_f32_f64(*(float64x2_t *)(v235 + 48));
  v242 = vcvt_f32_f64(*(float64x2_t *)(v235 + 32));
  v243 = vcvt_f32_f64(*(float64x2_t *)(v235 + 16));
  *(_QWORD *)v256 = 0x8F5C28F5C28F5C29 * ((v276 - v275) >> 3);
  *(_QWORD *)&v256[8] = v275;
  *(_QWORD *)&v256[16] = &off_24EC64998;
  *(_QWORD *)&v256[24] = &off_24EC64920;
  v244 = *(_OWORD *)(v235 - 72);
  *(_OWORD *)&v256[32] = *(_OWORD *)(v235 - 88);
  *(_OWORD *)&v256[48] = v244;
  *(_OWORD *)&v256[64] = *(_OWORD *)(v235 - 56);
  *(_QWORD *)v257 = *(_QWORD *)(v235 - 40);
  *(_DWORD *)&v257[8] = *(_DWORD *)(v235 - 32);
  *(_QWORD *)&v257[12] = *(_QWORD *)(v235 - 28);
  *(_OWORD *)&v257[24] = *(_OWORD *)(v235 - 16);
  *(float64x2_t *)&v257[40] = vcvtq_f64_f32(vcvt_f32_f64(v236));
  v258 = (float32x4_t)vcvtq_f64_f32(v243);
  *(float64x2_t *)v259 = vcvtq_f64_f32(v242);
  *(float64x2_t *)&v259[16] = vcvtq_f64_f32(v241);
  v260 = vcvtq_f64_f32(v240);
  v261 = vcvtq_f64_f32(v239);
  v262 = vcvtq_f64_f32(v238);
  v263 = vcvtq_f64_f32(v237);
  v264 = *(_DWORD *)(v235 + 132);
  v265 = v252;
  v266 = 1;
  sub_223F67C94((uint64_t)a1, (uint64_t)v256, a3);
  *(_QWORD *)v256 = &v275;
  sub_223F3A870((void ***)v256);
}

void sub_223F6CEB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE278);
  STACK[0x360] = (unint64_t)&STACK[0x248];
  sub_223F3A870((void ***)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_223F6CEDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE268);
  _Unwind_Resume(a1);
}

void sub_223F6CEF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_22316DC48(a1);
  _Unwind_Resume(a1);
}

void sub_223F6CFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  uint64_t v23;
  void *v25;
  void *v26;
  void *v27;

  v25 = *(void **)(v23 - 208);
  if (v25)
  {
    *(_QWORD *)(v23 - 200) = v25;
    operator delete(v25);
    v26 = (void *)STACK[0x278];
    if (!STACK[0x278])
    {
LABEL_6:
      a23 = (void **)&STACK[0x248];
      sub_223F3A870(&a23);
      sub_22322E828((uint64_t)&STACK[0x290]);
      v27 = (void *)STACK[0x2E8];
      if (STACK[0x2E8])
      {
        STACK[0x2F0] = (unint64_t)v27;
        operator delete(v27);
      }
      sub_223796C9C((uint64_t)&STACK[0x360]);
      sub_223796BF8((uint64_t)&STACK[0x420]);
      sub_223F6F420((uint64_t)&STACK[0x478]);
      sub_223167354(a10);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v26 = (void *)STACK[0x278];
    if (!STACK[0x278])
      goto LABEL_6;
  }
  STACK[0x280] = (unint64_t)v26;
  operator delete(v26);
  goto LABEL_6;
}

void sub_223F6D0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t *a23)
{
  void *v24;

  if (STACK[0x278])
    JUMPOUT(0x223F6D0ACLL);
  a23 = &STACK[0x248];
  sub_223F3A870(&a23);
  sub_22322E828(&STACK[0x290]);
  v24 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v24;
    operator delete(v24);
  }
  sub_223796C9C(&STACK[0x360]);
  sub_223796BF8(&STACK[0x420]);
  sub_223F6F420(&STACK[0x478]);
  sub_223167354(a10);
  _Unwind_Resume(a1);
}

void sub_223F6D0B8()
{
  JUMPOUT(0x223F6D0D4);
}

void sub_223F6D114(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  void *v31;
  BOOL v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  float64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  float64x2_t v49;
  int8x16_t v51;
  int64x2_t v52;
  float64x2_t v55;
  __int128 v59;
  uint64_t *v60;
  _QWORD *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t (**v72)();
  uint64_t (**v73)();
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  int v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  char v95;
  int v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  float32x4_t v103;
  __int128 v104;
  float32x4_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unint64_t v111;
  void *v112;
  __int128 v113;
  uint64_t v114;
  float32x4_t v115;
  __int128 v116;
  float32x4_t v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int **)(a1 + 192);
  v8 = *(_DWORD *)(a2 + 120);
  v7 = *(_DWORD *)(a2 + 124);
  if (!v6 || v6[60] != v8 || v6[61] != v7)
  {
    v6 = (unsigned int *)operator new();
    sub_223F070A0((uint64_t)v6, v8, v7);
    v9 = *(_QWORD **)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v6;
    if (v9)
    {
      v10 = (void *)v9[32];
      if (v10)
      {
        free(v10);
        v9[32] = 0;
      }
      v11 = (void *)v9[25];
      if (v11)
        free(v11);
      v9[25] = 0;
      v12 = (void *)v9[15];
      if (v12)
        free(v12);
      v9[15] = 0;
      v13 = (void *)v9[5];
      if (v13)
        free(v13);
      v9[5] = 0;
      MEMORY[0x227684CE8](v9, 0x1090C40EDF3BDA0);
      v6 = *(unsigned int **)(a1 + 192);
    }
  }
  sub_223F074C4(v6, *(uint64_t **)a2, (float32x2_t *)(a2 + 32), (float64x2_t *)(a2 + 136), (_QWORD *)(a2 + 8), &v113, 0.0001, 5.0);
  if (!v119
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/ACV/SurfaceDetection/src/SurfaceDetector.cpp", 670, (uint64_t)"rasterizationResult.has_value()", 31, (uint64_t)"Could not rasterize mesh", 24, (void (*)(void **))sub_22457406C))
  {
    abort();
  }
  v14 = *(unsigned int *)(a2 + 120);
  v15 = *(unsigned int *)(a2 + 124);
  if ((_DWORD)v15)
    _ZF = v14 == 0;
  else
    _ZF = 1;
  v103.i32[0] = 1065353216;
  v17 = v14 | (v15 << 32);
  if (_ZF)
    v17 = 0;
  v18 = v17 << 32;
  if (!HIDWORD(v17))
    v18 = 0;
  v19 = v17 != 0;
  if ((_DWORD)v17)
    v20 = HIDWORD(v17) == 0;
  else
    v20 = 1;
  v107 = v17;
  v108 = v18 | v19;
  v109 = 0;
  v110 = 0;
  v62.i64[0] = v18 | v19;
  if (v20)
    v17 = 0;
  *(_QWORD *)&v120 = v17;
  if (((v18 >> 30) & ((v18 >> 30) - 1)) != 0)
    v21 = 4;
  else
    v21 = v18 >> 30;
  sub_22346A424(&v111, &v120, (unint64_t *)&v62, 1, &v103, 1, v21);
  v60 = a3;
  v61 = (_QWORD *)a1;
  v105 = v117;
  v106 = v118;
  v22 = v112;
  if (HIDWORD(v107))
    v23 = (_DWORD)v107 == 0;
  else
    v23 = 1;
  v24 = v107;
  if (v23)
    v25 = 0;
  else
    v25 = v107;
  v26 = v108;
  v27 = HIDWORD(v108);
  if (HIDWORD(v25) * HIDWORD(v108) == -1)
  {
    if (sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
    {
      goto LABEL_54;
    }
    v30 = v107;
    LODWORD(v28) = HIDWORD(v107);
    v24 = v107;
    v31 = v112;
    v29 = v108;
    v27 = HIDWORD(v108);
  }
  else
  {
    v28 = HIDWORD(v107);
    v29 = v108;
    v30 = v107;
    v31 = v112;
  }
  v103 = v115;
  v104 = v116;
  v101 = v113;
  v102 = v114;
  if ((_DWORD)v28)
    v32 = v30 == 0;
  else
    v32 = 1;
  if (v32)
    v33 = 0;
  else
    v33 = v24;
  if ((_DWORD)v27 * HIDWORD(v33) == -1
    && sub_224573870("/Library/Caches/com.apple.xbs/Sources/Recon3D/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_22457406C))
  {
LABEL_54:
    abort();
  }
  v34 = *(_OWORD *)(a2 + 48);
  v99 = *(_OWORD *)(a2 + 64);
  v100 = v34;
  v128 = *(_OWORD *)(a2 + 80);
  v35 = *(_QWORD *)(a2 + 96);
  v36 = *(_DWORD *)(a2 + 104);
  v37 = *(_QWORD *)(a2 + 108);
  v38 = *(_OWORD *)(a2 + 120);
  v39 = *(_OWORD *)(a2 + 248);
  v126 = *(_OWORD *)(a2 + 232);
  v127 = v39;
  v40 = *(_OWORD *)(a2 + 216);
  v124 = *(_OWORD *)(a2 + 200);
  v125 = v40;
  v41 = *(_OWORD *)(a2 + 184);
  v122 = *(_OWORD *)(a2 + 168);
  v123 = v41;
  v42 = *(_OWORD *)(a2 + 152);
  v120 = *(_OWORD *)(a2 + 136);
  v121 = v42;
  v43 = v61[25];
  if (v43)
  {
    v59 = v38;
    v44.f64[0] = *(float64_t *)(a2 + 152);
    v45 = *(int64x2_t *)(a2 + 136);
    v46 = *(int64x2_t *)(a2 + 168);
    _D3 = *(_QWORD *)(a2 + 216);
    _Q4 = *(int64x2_t *)(a2 + 200);
    v49 = (float64x2_t)vzip1q_s64(v45, v46);
    _Q1 = vzip2q_s64(v45, v46);
    v44.f64[1] = *(float64_t *)(a2 + 184);
    v51 = vextq_s8((int8x16_t)_Q1, (int8x16_t)vdupq_laneq_s64(_Q4, 1), 8uLL);
    v52 = vzip1q_s64(_Q4, _Q1);
    _D7 = *(double *)(a2 + 248);
    _Q16 = *(float64x2_t *)(a2 + 232);
    v55 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v49, vnegq_f64(_Q16).f64[0]), (float64x2_t)_Q1, _Q16, 1), v44, _D7, 0);
    _Q4.i64[0] = *(_QWORD *)(a2 + 208);
    __asm
    {
      FMLS            D1, D4, V16.D[1]
      FMLS            D1, D3, V7.D[0]
    }
    _Q4.i64[0] = vdupq_laneq_s64(v52, 1).u64[0];
    _Q4.i64[1] = v51.i64[0];
    _Q1.i64[1] = 1.0;
    v62 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v49), (float64x2_t)v52.u64[0]);
    v63 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)_Q4), (float64x2_t)v51.u64[1]);
    v64 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44), (float64x2_t)_D3);
    v65 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v55), (float64x2_t)_Q1);
    v97 = v113;
    v98 = v114;
    sub_223EDC964(v43, (uint64_t)&v97, a2 + 32, &v62);
    v38 = v59;
  }
  v62 = v105;
  v63.i64[0] = v106;
  v63.i64[1] = (uint64_t)v22;
  v64.i64[0] = v25;
  v64.i64[1] = v26;
  v65 = v103;
  v66 = v104;
  v67 = v101;
  v68 = v102;
  v69 = v31;
  v70 = v33;
  v71 = v29;
  v72 = &off_24EC64998;
  v73 = &off_24EC64920;
  v74 = v100;
  v75 = v99;
  v76 = v128;
  v77 = v35;
  v78 = v36;
  v79 = v37;
  v80 = v38;
  v85 = v124;
  v86 = v125;
  v87 = v126;
  v88 = v127;
  v83 = v122;
  v84 = v123;
  v81 = v120;
  v82 = v121;
  v89 = *(_QWORD *)(a2 + 264);
  v90 = 0;
  v91 = 1036831949;
  v92 = 2;
  v93 = xmmword_2245C64A0;
  v94 = 0x3F7C1C5C40900000;
  v95 = 1;
  v96 = 1077936128;
  sub_223F6B8B8(v61, (size_t)&v62, v60);
  if (v112)
    free(v112);
}

void sub_223F6D68C(_Unwind_Exception *a1)
{
  if (STACK[0x2A8])
  {
    free((void *)STACK[0x2A8]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_223F6D6DC(_QWORD *a1, uint64_t ***a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t *v33;
  unsigned __int8 *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  sub_223F6598C(v35);
  if (**(int **)(v35[0] + 56) <= 1)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_2540CE288);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE288))
    {
      qword_2540CE280 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_AddPoseUpdates");
      __cxa_guard_release(&qword_2540CE288);
    }
    v5 = qword_2540CE280;
    *(_BYTE *)(qword_2540CE280 + 16) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v5 = std::chrono::steady_clock::now();
    *(_BYTE *)(v5 + 16) = 1;
  }
  v35[0] = &off_24EC64530;
  v35[1] = a1;
  v35[2] = 0;
  v36 = v35;
  v6 = (unsigned __int8 *)a1[20];
  v7 = (unsigned __int8 *)(a1 + 21);
  v8 = (uint64_t **)(a2 + 1);
  if (v6 != (unsigned __int8 *)(a1 + 21))
  {
    do
    {
      v14 = v6 + 32;
      v15 = (uint64_t *)a2[1];
      if (*a2 == v8)
      {
        v17 = (uint64_t *)(a2 + 1);
      }
      else
      {
        v16 = (uint64_t *)(a2 + 1);
        if (v15)
        {
          do
          {
            v17 = v15;
            v15 = (uint64_t *)v15[1];
          }
          while (v15);
        }
        else
        {
          do
          {
            v17 = (uint64_t *)v16[2];
            v18 = *v17 == (_QWORD)v16;
            v16 = v17;
          }
          while (v18);
        }
        v19 = sub_22319835C((unsigned __int8 *)v17 + 32, v6 + 32);
        v15 = *v8;
        if ((v19 & 0x80000000) == 0)
        {
          v20 = a2 + 1;
          v21 = (uint64_t *)(a2 + 1);
          if (!v15)
            goto LABEL_46;
          v20 = a2 + 1;
          while (1)
          {
            while (1)
            {
              v21 = v15;
              v22 = (unsigned __int8 *)(v15 + 4);
              v23 = *((unsigned __int8 *)v15 + 32);
              v24 = *v14;
              if (v24 == v23)
              {
                v24 = v6[33];
                v23 = *((unsigned __int8 *)v21 + 33);
                if (v24 == v23)
                {
                  v24 = v6[34];
                  v23 = *((unsigned __int8 *)v21 + 34);
                  if (v24 == v23)
                  {
                    v24 = v6[35];
                    v23 = *((unsigned __int8 *)v21 + 35);
                    if (v24 == v23)
                    {
                      v24 = v6[36];
                      v23 = *((unsigned __int8 *)v21 + 36);
                      if (v24 == v23)
                      {
                        v24 = v6[37];
                        v23 = *((unsigned __int8 *)v21 + 37);
                        if (v24 == v23)
                        {
                          v24 = v6[38];
                          v23 = *((unsigned __int8 *)v21 + 38);
                          if (v24 == v23)
                          {
                            v24 = v6[39];
                            v23 = *((unsigned __int8 *)v21 + 39);
                            if (v24 == v23)
                            {
                              v24 = v6[40];
                              v23 = *((unsigned __int8 *)v21 + 40);
                              if (v24 == v23)
                              {
                                v24 = v6[41];
                                v23 = *((unsigned __int8 *)v21 + 41);
                                if (v24 == v23)
                                {
                                  v24 = v6[42];
                                  v23 = *((unsigned __int8 *)v21 + 42);
                                  if (v24 == v23)
                                  {
                                    v24 = v6[43];
                                    v23 = *((unsigned __int8 *)v21 + 43);
                                    if (v24 == v23)
                                    {
                                      v24 = v6[44];
                                      v23 = *((unsigned __int8 *)v21 + 44);
                                      if (v24 == v23)
                                      {
                                        v24 = v6[45];
                                        v23 = *((unsigned __int8 *)v21 + 45);
                                        if (v24 == v23)
                                        {
                                          v24 = v6[46];
                                          v23 = *((unsigned __int8 *)v21 + 46);
                                          if (v24 == v23)
                                          {
                                            v24 = v6[47];
                                            v23 = *((unsigned __int8 *)v21 + 47);
                                            if (v24 == v23)
                                              break;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (v24 >= v23)
                break;
              v15 = (uint64_t *)*v21;
              v20 = v21;
              if (!*v21)
                goto LABEL_46;
            }
            if (((char)sub_22319835C(v22, v6 + 32) & 0x80000000) == 0)
              goto LABEL_43;
            v20 = v21 + 1;
            v15 = (uint64_t *)v21[1];
            if (!v15)
              goto LABEL_46;
          }
        }
      }
      v20 = a2 + 1;
      v21 = (uint64_t *)(a2 + 1);
      if (!v15)
        goto LABEL_46;
      v20 = v17 + 1;
      v21 = v17;
LABEL_43:
      if (*v20)
      {
        v25 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (!v25)
          goto LABEL_51;
        goto LABEL_49;
      }
LABEL_46:
      v26 = operator new(0xB0uLL);
      v26[2] = *(_OWORD *)v14;
      v27 = *((_OWORD *)v6 + 6);
      v29 = *((_OWORD *)v6 + 3);
      v28 = *((_OWORD *)v6 + 4);
      v26[5] = *((_OWORD *)v6 + 5);
      v26[6] = v27;
      v26[3] = v29;
      v26[4] = v28;
      v30 = *((_OWORD *)v6 + 7);
      v31 = *((_OWORD *)v6 + 8);
      v32 = *((_OWORD *)v6 + 10);
      v26[9] = *((_OWORD *)v6 + 9);
      v26[10] = v32;
      v26[7] = v30;
      v26[8] = v31;
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = v21;
      *v20 = v26;
      v33 = **a2;
      if (v33)
      {
        *a2 = (uint64_t **)v33;
        v26 = (_OWORD *)*v20;
      }
      sub_2231A9A8C((uint64_t *)a2[1], (uint64_t *)v26);
      a2[2] = (uint64_t **)((char *)a2[2] + 1);
      v25 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (!v25)
      {
        do
        {
LABEL_51:
          v34 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v18 = *(_QWORD *)v34 == (_QWORD)v6;
          v6 = v34;
        }
        while (!v18);
        goto LABEL_10;
      }
      do
      {
LABEL_49:
        v34 = v25;
        v25 = *(unsigned __int8 **)v25;
      }
      while (v25);
LABEL_10:
      v6 = v34;
    }
    while (v34 != v7);
  }
  sub_223198030((uint64_t)(a1 + 20), (_QWORD *)a1[21]);
  a1[20] = *a2;
  v9 = (uint64_t *)a2[1];
  a1[21] = v9;
  v10 = (uint64_t *)a2[2];
  a1[22] = v10;
  if (v10)
  {
    v9[2] = (uint64_t)v7;
    *a2 = v8;
    *v8 = 0;
    a2[2] = 0;
    v11 = v36;
    if (v36)
      goto LABEL_7;
LABEL_55:
    sub_223198474();
  }
  a1[20] = v7;
  v11 = v36;
  if (!v36)
    goto LABEL_55;
LABEL_7:
  (*(void (**)(_QWORD *))(*v11 + 48))(v11);
  result = v36;
  if (v36 == v35)
  {
    v13 = 4;
    result = v35;
  }
  else
  {
    if (!v36)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_223F6DB18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE288);
  _Unwind_Resume(a1);
}

void sub_223F6DB34(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_22316DC48(exception_object);
}

void sub_223F6DB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22318A1C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_223F6DB64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22318A1C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void **sub_223F6DB78(uint64_t *a1, unsigned __int8 **a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t (**v6)();
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void **result;
  uint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;
  void **p_p;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_223F901C8(a1[14], (char **)&__p);
  kdebug_trace();
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  sub_223F6598C(&__p);
  if (**((int **)__p + 7) <= 1)
  {
    v4 = atomic_load((unsigned __int8 *)&qword_2540CE298);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540CE298))
    {
      qword_2540CE290 = (uint64_t)sub_223F76E58((uint64_t)"AcvSurface_Erase");
      __cxa_guard_release(&qword_2540CE298);
    }
    v5 = qword_2540CE290;
    *(_BYTE *)(qword_2540CE290 + 16) = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(std::chrono::steady_clock::time_point *)v5 = std::chrono::steady_clock::now();
    *(_BYTE *)(v5 + 16) = 1;
  }
  v6 = &off_24EC645B0;
  __p = &off_24EC645B0;
  v12 = a1;
  v13 = 0;
  p_p = &__p;
  v8 = *a2;
  v7 = a2[1];
  if (v8 != v7)
  {
    do
    {
      sub_223F94F24(*(unsigned __int8 ***)(a1[14] + 8), v8);
      v8 += 16;
    }
    while (v8 != v7);
    if (!p_p)
      sub_223198474();
    v6 = (uint64_t (**)())*p_p;
  }
  v6[6]();
  result = p_p;
  if (p_p == &__p)
  {
    v10 = 4;
    result = &__p;
  }
  else
  {
    if (!p_p)
      return result;
    v10 = 5;
  }
  return (void **)(*((uint64_t (**)(void))*result + v10))();
}

void sub_223F6DD24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2540CE298);
  _Unwind_Resume(a1);
}

void sub_223F6DD3C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_22316DC48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_223F6DD5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_22318A1C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_223F6DD70(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v19;

  v2 = *(_QWORD **)(a1 + 96);
  if (v2)
  {
    do
    {
      v9 = (_QWORD *)*v2;
      v10 = (_QWORD *)v2[6];
      if (v10)
      {
        do
        {
          v11 = (_QWORD *)*v10;
          operator delete(v10);
          v10 = v11;
        }
        while (v11);
      }
      v12 = (void *)v2[4];
      v2[4] = 0;
      if (v12)
        operator delete(v12);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 56);
  if (v4)
  {
    do
    {
      v13 = (_QWORD *)*v4;
      v14 = (_QWORD *)v4[6];
      if (v14)
      {
        do
        {
          v15 = (_QWORD *)*v14;
          operator delete(v14);
          v14 = v15;
        }
        while (v15);
      }
      v16 = (void *)v4[4];
      v4[4] = 0;
      if (v16)
        operator delete(v16);
      operator delete(v4);
      v4 = v13;
    }
    while (v13);
  }
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD **)(a1 + 16);
  while (v6)
  {
    v17 = v6;
    v6 = (_QWORD *)*v6;
    v18 = (void *)v17[15];
    if (v18)
    {
      v17[16] = v18;
      operator delete(v18);
    }
    if (*((_BYTE *)v17 + 112))
    {
      v19 = (void *)v17[11];
      if (v19)
      {
        v17[12] = v19;
        operator delete(v19);
      }
    }
    operator delete(v17);
  }
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

_QWORD *sub_223F6DEA0(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _QWORD *v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  _QWORD *i;
  size_t v32;
  uint64_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v5;
  v14[2] = *a3;
  v14[3] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v5 = v3;
    v17 = *(_QWORD **)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v18)
      goto LABEL_85;
LABEL_73:
    *v14 = *v18;
LABEL_91:
    *v18 = v14;
    goto LABEL_92;
  }
  v19 = 1;
  if (v7 >= 3)
    v19 = (v7 & (v7 - 1)) != 0;
  v20 = v19 | (2 * v7);
  v21 = vcvtps_u32_f32(v15 / v16);
  if (v20 <= v21)
    prime = v21;
  else
    prime = v20;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_37:
    if (prime >> 61)
      sub_223174E94();
    v23 = operator new(8 * prime);
    v24 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v23;
    if (v24)
      operator delete(v24);
    v25 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
    while (prime != v25);
    v27 = (uint64_t *)(a1 + 4);
    v26 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v26)
      goto LABEL_69;
    v28 = v26[1];
    v29 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v30 = v28 & v29;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v27;
      for (i = (_QWORD *)*v26; *v26; i = (_QWORD *)*v26)
      {
        v32 = i[1] & v29;
        if (v32 == v30)
        {
          v26 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v32))
        {
          *v26 = *i;
          v33 = 8 * v32;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v33);
          **(_QWORD **)(*(_QWORD *)a1 + v33) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v26;
          v26 = i;
          v30 = v32;
        }
      }
      goto LABEL_69;
    }
    if (v28 >= prime)
      v28 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v27;
    v37 = (_QWORD *)*v26;
    if (!*v26)
    {
LABEL_69:
      v7 = prime;
      v40 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_70;
LABEL_84:
      v5 &= v40;
      v17 = *(_QWORD **)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
      if (!v18)
        goto LABEL_85;
      goto LABEL_73;
    }
    while (1)
    {
      v39 = v37[1];
      if (v39 >= prime)
        v39 %= prime;
      if (v39 == v28)
        goto LABEL_63;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
      {
        *v26 = *v37;
        v38 = 8 * v39;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + v38);
        **(_QWORD **)(*(_QWORD *)a1 + v38) = v37;
        v37 = v26;
LABEL_63:
        v26 = v37;
        v37 = (_QWORD *)*v37;
        if (!v37)
          goto LABEL_69;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v26;
        v26 = v37;
        v37 = (_QWORD *)*v37;
        v28 = v39;
        if (!v37)
          goto LABEL_69;
      }
    }
  }
  if (prime < v7)
  {
    v34 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
    {
      v34 = std::__next_prime(v34);
    }
    else
    {
      v36 = 1 << -(char)__clz(v34 - 1);
      if (v34 >= 2)
        v34 = v36;
    }
    if (prime <= v34)
      prime = v34;
    if (prime < v7)
    {
      if (!prime)
      {
        v41 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v40 = -1;
        goto LABEL_84;
      }
      goto LABEL_37;
    }
    v7 = *((_QWORD *)a1 + 1);
  }
  v40 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_84;
LABEL_70:
  if (v7 <= v5)
    v5 %= v7;
  v17 = *(_QWORD **)a1;
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v18)
    goto LABEL_73;
LABEL_85:
  *v14 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v14;
  v17[v5] = a1 + 4;
  if (*v14)
  {
    v42 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v42 >= v7)
        v42 %= v7;
    }
    else
    {
      v42 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
  return v14;
}

